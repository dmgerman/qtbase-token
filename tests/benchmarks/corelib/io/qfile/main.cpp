begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QTemporaryFile>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QDirIterator>
end_include
begin_include
include|#
directive|include
file|<private/qfsfileengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qtest.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|BUFSIZE
define|#
directive|define
name|BUFSIZE
value|1024*512
end_define
begin_define
DECL|macro|FACTOR
define|#
directive|define
name|FACTOR
value|1024*512
end_define
begin_define
DECL|macro|TF_SIZE
define|#
directive|define
name|TF_SIZE
value|FACTOR*81
end_define
begin_comment
comment|// 10 predefined (but random() seek positions
end_comment
begin_comment
comment|// hardcoded to be comparable over several runs
end_comment
begin_decl_stmt
DECL|variable|seekpos
specifier|const
name|int
name|seekpos
index|[]
init|=
block|{
name|int
argument_list|(
name|TF_SIZE
operator|*
literal|0.52
argument_list|)
block|,
name|int
argument_list|(
name|TF_SIZE
operator|*
literal|0.23
argument_list|)
block|,
name|int
argument_list|(
name|TF_SIZE
operator|*
literal|0.73
argument_list|)
block|,
name|int
argument_list|(
name|TF_SIZE
operator|*
literal|0.77
argument_list|)
block|,
name|int
argument_list|(
name|TF_SIZE
operator|*
literal|0.80
argument_list|)
block|,
name|int
argument_list|(
name|TF_SIZE
operator|*
literal|0.12
argument_list|)
block|,
name|int
argument_list|(
name|TF_SIZE
operator|*
literal|0.53
argument_list|)
block|,
name|int
argument_list|(
name|TF_SIZE
operator|*
literal|0.21
argument_list|)
block|,
name|int
argument_list|(
name|TF_SIZE
operator|*
literal|0.27
argument_list|)
block|,
name|int
argument_list|(
argument|TF_SIZE*
literal|0.78
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sp_size
specifier|const
name|int
name|sp_size
init|=
sizeof|sizeof
argument_list|(
name|seekpos
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_qfile
class|class
name|tst_qfile
super|:
specifier|public
name|QObject
block|{
name|Q_ENUMS
parameter_list|(
name|BenchmarkType
parameter_list|)
name|Q_OBJECT
specifier|public
private|:
DECL|enum|BenchmarkType
enum|enum
name|BenchmarkType
block|{
DECL|enumerator|QFileBenchmark
name|QFileBenchmark
init|=
literal|1
block|,
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
DECL|enumerator|QFSFileEngineBenchmark
name|QFSFileEngineBenchmark
block|,
endif|#
directive|endif
DECL|enumerator|Win32Benchmark
name|Win32Benchmark
block|,
DECL|enumerator|PosixBenchmark
name|PosixBenchmark
block|,
DECL|enumerator|QFileFromPosixBenchmark
name|QFileFromPosixBenchmark
block|}
enum|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|open_data
parameter_list|()
function_decl|;
name|void
name|open
parameter_list|()
function_decl|;
name|void
name|seek_data
parameter_list|()
function_decl|;
name|void
name|seek
parameter_list|()
function_decl|;
name|void
name|readSmallFiles_QFile
parameter_list|()
function_decl|;
name|void
name|readSmallFiles_QFSFileEngine
parameter_list|()
function_decl|;
name|void
name|readSmallFiles_posix
parameter_list|()
function_decl|;
name|void
name|readSmallFiles_Win32
parameter_list|()
function_decl|;
name|void
name|readSmallFiles_QFile_data
parameter_list|()
function_decl|;
name|void
name|readSmallFiles_QFSFileEngine_data
parameter_list|()
function_decl|;
name|void
name|readSmallFiles_posix_data
parameter_list|()
function_decl|;
name|void
name|readSmallFiles_Win32_data
parameter_list|()
function_decl|;
name|void
name|readBigFile_QFile_data
parameter_list|()
function_decl|;
name|void
name|readBigFile_QFSFileEngine_data
parameter_list|()
function_decl|;
name|void
name|readBigFile_posix_data
parameter_list|()
function_decl|;
name|void
name|readBigFile_Win32_data
parameter_list|()
function_decl|;
name|void
name|readBigFile_QFile
parameter_list|()
function_decl|;
name|void
name|readBigFile_QFSFileEngine
parameter_list|()
function_decl|;
name|void
name|readBigFile_posix
parameter_list|()
function_decl|;
name|void
name|readBigFile_Win32
parameter_list|()
function_decl|;
private|private:
name|void
name|readBigFile_data
parameter_list|(
name|BenchmarkType
name|type
parameter_list|,
name|QIODevice
operator|::
name|OpenModeFlag
name|t
parameter_list|,
name|QIODevice
operator|::
name|OpenModeFlag
name|b
parameter_list|)
function_decl|;
name|void
name|readBigFile
parameter_list|()
function_decl|;
name|void
name|readSmallFiles_data
parameter_list|(
name|BenchmarkType
name|type
parameter_list|,
name|QIODevice
operator|::
name|OpenModeFlag
name|t
parameter_list|,
name|QIODevice
operator|::
name|OpenModeFlag
name|b
parameter_list|)
function_decl|;
name|void
name|readSmallFiles
parameter_list|()
function_decl|;
name|void
name|createFile
parameter_list|()
function_decl|;
name|void
name|fillFile
parameter_list|(
name|int
name|factor
init|=
name|FACTOR
parameter_list|)
function_decl|;
name|void
name|removeFile
parameter_list|()
function_decl|;
name|void
name|createSmallFiles
parameter_list|()
function_decl|;
name|void
name|removeSmallFiles
parameter_list|()
function_decl|;
DECL|member|filename
name|QString
name|filename
decl_stmt|;
DECL|member|tmpDirName
name|QString
name|tmpDirName
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|tst_qfile::BenchmarkType
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QIODevice::OpenMode
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QIODevice::OpenModeFlag
argument_list|)
end_macro
begin_function
DECL|function|createFile
name|void
name|tst_qfile
operator|::
name|createFile
parameter_list|()
block|{
name|removeFile
argument_list|()
expr_stmt|;
comment|// Cleanup in case previous test case aborted before cleaning up
name|QTemporaryFile
name|tmpFile
decl_stmt|;
name|tmpFile
operator|.
name|setAutoRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tmpFile
operator|.
name|open
argument_list|()
condition|)
operator|::
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|filename
operator|=
name|tmpFile
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|tmpFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeFile
name|void
name|tst_qfile
operator|::
name|removeFile
parameter_list|()
block|{
if|if
condition|(
operator|!
name|filename
operator|.
name|isEmpty
argument_list|()
condition|)
name|QFile
operator|::
name|remove
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillFile
name|void
name|tst_qfile
operator|::
name|fillFile
parameter_list|(
name|int
name|factor
parameter_list|)
block|{
name|QFile
name|tmpFile
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|tmpFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
comment|//for (int row=0; row<factor; ++row) {
comment|//    tmpFile.write(QByteArray().fill('0'+row%('0'-'z'), 80));
comment|//    tmpFile.write("\n");
comment|//}
name|tmpFile
operator|.
name|seek
argument_list|(
name|factor
operator|*
literal|80
argument_list|)
expr_stmt|;
name|tmpFile
operator|.
name|putChar
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|tmpFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// let IO settle
name|QTest
operator|::
name|qSleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_qfile
operator|::
name|initTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_qfile
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|readBigFile_QFile
name|void
name|tst_qfile
operator|::
name|readBigFile_QFile
parameter_list|()
block|{
name|readBigFile
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readBigFile_QFSFileEngine
name|void
name|tst_qfile
operator|::
name|readBigFile_QFSFileEngine
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|readBigFile
argument_list|()
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"This test requires -developer-build."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|readBigFile_posix
name|void
name|tst_qfile
operator|::
name|readBigFile_posix
parameter_list|()
block|{
name|readBigFile
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readBigFile_Win32
name|void
name|tst_qfile
operator|::
name|readBigFile_Win32
parameter_list|()
block|{
name|readBigFile
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readBigFile_QFile_data
name|void
name|tst_qfile
operator|::
name|readBigFile_QFile_data
parameter_list|()
block|{
name|readBigFile_data
argument_list|(
name|QFileBenchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
name|readBigFile_data
argument_list|(
name|QFileBenchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
name|readBigFile_data
argument_list|(
name|QFileBenchmark
argument_list|,
name|QIODevice
operator|::
name|Text
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
name|readBigFile_data
argument_list|(
name|QFileBenchmark
argument_list|,
name|QIODevice
operator|::
name|Text
argument_list|,
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readBigFile_QFSFileEngine_data
name|void
name|tst_qfile
operator|::
name|readBigFile_QFSFileEngine_data
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|readBigFile_data
argument_list|(
name|QFSFileEngineBenchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
name|readBigFile_data
argument_list|(
name|QFSFileEngineBenchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
name|readBigFile_data
argument_list|(
name|QFSFileEngineBenchmark
argument_list|,
name|QIODevice
operator|::
name|Text
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
name|readBigFile_data
argument_list|(
name|QFSFileEngineBenchmark
argument_list|,
name|QIODevice
operator|::
name|Text
argument_list|,
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Test will be skipped"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|readBigFile_posix_data
name|void
name|tst_qfile
operator|::
name|readBigFile_posix_data
parameter_list|()
block|{
name|readBigFile_data
argument_list|(
name|PosixBenchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readBigFile_Win32_data
name|void
name|tst_qfile
operator|::
name|readBigFile_Win32_data
parameter_list|()
block|{
name|readBigFile_data
argument_list|(
name|Win32Benchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readBigFile_data
name|void
name|tst_qfile
operator|::
name|readBigFile_data
parameter_list|(
name|BenchmarkType
name|type
parameter_list|,
name|QIODevice
operator|::
name|OpenModeFlag
name|t
parameter_list|,
name|QIODevice
operator|::
name|OpenModeFlag
name|b
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|tst_qfile
operator|::
name|BenchmarkType
argument_list|>
argument_list|(
literal|"testType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"blockSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFile
operator|::
name|OpenModeFlag
argument_list|>
argument_list|(
literal|"textMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFile
operator|::
name|OpenModeFlag
argument_list|>
argument_list|(
literal|"bufferedMode"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|bs
index|[]
init|=
block|{
literal|1024
block|,
literal|1024
operator|*
literal|2
block|,
literal|1024
operator|*
literal|8
block|,
literal|1024
operator|*
literal|16
block|,
literal|1024
operator|*
literal|32
block|,
literal|1024
operator|*
literal|512
block|}
decl_stmt|;
name|int
name|bs_entries
init|=
sizeof|sizeof
argument_list|(
name|bs
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
specifier|const
name|int
argument_list|)
decl_stmt|;
name|QString
name|flagstring
decl_stmt|;
if|if
condition|(
name|t
operator|&
name|QIODevice
operator|::
name|Text
condition|)
name|flagstring
operator|+=
literal|"textMode "
expr_stmt|;
if|if
condition|(
name|b
operator|&
name|QIODevice
operator|::
name|Unbuffered
condition|)
name|flagstring
operator|+=
literal|"unbuffered "
expr_stmt|;
if|if
condition|(
name|flagstring
operator|.
name|isEmpty
argument_list|()
condition|)
name|flagstring
operator|=
literal|"none"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bs_entries
condition|;
operator|++
name|i
control|)
name|QTest
operator|::
name|newRow
argument_list|(
operator|(
name|QString
argument_list|(
literal|"BS: %1, Flags: %2"
argument_list|)
operator|)
operator|.
name|arg
argument_list|(
name|bs
index|[
name|i
index|]
argument_list|)
operator|.
name|arg
argument_list|(
name|flagstring
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|type
operator|<<
name|bs
index|[
name|i
index|]
operator|<<
name|t
operator|<<
name|b
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readBigFile
name|void
name|tst_qfile
operator|::
name|readBigFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|tst_qfile
operator|::
name|BenchmarkType
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFile
operator|::
name|OpenModeFlag
argument_list|,
name|textMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFile
operator|::
name|OpenModeFlag
argument_list|,
name|bufferedMode
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
if|if
condition|(
name|testType
operator|==
name|Win32Benchmark
condition|)
name|QSKIP
argument_list|(
literal|"This is Windows only benchmark."
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|char
modifier|*
name|buffer
init|=
operator|new
name|char
index|[
name|BUFSIZE
index|]
decl_stmt|;
name|createFile
argument_list|()
expr_stmt|;
name|fillFile
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|testType
condition|)
block|{
case|case
operator|(
name|QFileBenchmark
operator|)
case|:
block|{
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|textMode
operator||
name|bufferedMode
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
while|while
condition|(
operator|!
name|file
operator|.
name|atEnd
argument_list|()
condition|)
name|file
operator|.
name|read
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
name|file
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
break|break;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
case|case
operator|(
name|QFSFileEngineBenchmark
operator|)
case|:
block|{
name|QFSFileEngine
name|fse
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|fse
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|textMode
operator||
name|bufferedMode
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
comment|//qWarning()<< fse.supportsExtension(QAbstractFileEngine::AtEndExtension);
while|while
condition|(
name|fse
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|blockSize
argument_list|)
condition|)
empty_stmt|;
name|fse
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|fse
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
case|case
operator|(
name|PosixBenchmark
operator|)
case|:
block|{
name|QByteArray
name|data
init|=
name|filename
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|cfilename
init|=
name|data
operator|.
name|constData
argument_list|()
decl_stmt|;
name|FILE
modifier|*
name|cfile
init|=
operator|::
name|fopen
argument_list|(
name|cfilename
argument_list|,
literal|"rb"
argument_list|)
decl_stmt|;
name|QBENCHMARK
block|{
while|while
condition|(
operator|!
name|feof
argument_list|(
name|cfile
argument_list|)
condition|)
operator|::
name|fread
argument_list|(
name|buffer
argument_list|,
name|blockSize
argument_list|,
literal|1
argument_list|,
name|cfile
argument_list|)
expr_stmt|;
operator|::
name|fseek
argument_list|(
name|cfile
argument_list|,
literal|0
argument_list|,
name|SEEK_SET
argument_list|)
expr_stmt|;
block|}
operator|::
name|fclose
argument_list|(
name|cfile
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|(
name|QFileFromPosixBenchmark
operator|)
case|:
block|{
comment|// No gain in benchmarking this case
block|}
break|break;
case|case
operator|(
name|Win32Benchmark
operator|)
case|:
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|HANDLE
name|hndl
decl_stmt|;
comment|// ensure we don't account string conversion
name|wchar_t
modifier|*
name|cfilename
init|=
operator|(
name|wchar_t
operator|*
operator|)
name|filename
operator|.
name|utf16
argument_list|()
decl_stmt|;
name|hndl
operator|=
name|CreateFile
argument_list|(
name|cfilename
argument_list|,
name|GENERIC_READ
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|OPEN_EXISTING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|hndl
argument_list|)
expr_stmt|;
name|wchar_t
modifier|*
name|nativeBuffer
init|=
operator|new
name|wchar_t
index|[
name|BUFSIZE
index|]
decl_stmt|;
name|DWORD
name|numberOfBytesRead
decl_stmt|;
name|QBENCHMARK
block|{
do|do
block|{
name|ReadFile
argument_list|(
name|hndl
argument_list|,
name|nativeBuffer
argument_list|,
name|blockSize
argument_list|,
operator|&
name|numberOfBytesRead
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|numberOfBytesRead
operator|!=
literal|0
condition|)
do|;
name|SetFilePointer
argument_list|(
name|hndl
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|FILE_BEGIN
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|nativeBuffer
expr_stmt|;
name|CloseHandle
argument_list|(
name|hndl
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFAIL
argument_list|(
literal|"Not running on a non-Windows platform!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
break|break;
block|}
name|removeFile
argument_list|()
expr_stmt|;
operator|delete
index|[]
name|buffer
expr_stmt|;
block|}
end_function
begin_function
DECL|function|seek_data
name|void
name|tst_qfile
operator|::
name|seek_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|tst_qfile
operator|::
name|BenchmarkType
argument_list|>
argument_list|(
literal|"testType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QFile"
argument_list|)
operator|<<
name|QFileBenchmark
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QFSFileEngine"
argument_list|)
operator|<<
name|QFSFileEngineBenchmark
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Posix FILE*"
argument_list|)
operator|<<
name|PosixBenchmark
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Win32 API"
argument_list|)
operator|<<
name|Win32Benchmark
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|seek
name|void
name|tst_qfile
operator|::
name|seek
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|tst_qfile
operator|::
name|BenchmarkType
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|createFile
argument_list|()
expr_stmt|;
name|fillFile
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|testType
condition|)
block|{
case|case
operator|(
name|QFileBenchmark
operator|)
case|:
block|{
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|i
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|sp_size
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|seekpos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
break|break;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
case|case
operator|(
name|QFSFileEngineBenchmark
operator|)
case|:
block|{
name|QFSFileEngine
name|fse
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|fse
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|i
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|sp_size
expr_stmt|;
name|fse
operator|.
name|seek
argument_list|(
name|seekpos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|fse
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
case|case
operator|(
name|PosixBenchmark
operator|)
case|:
block|{
name|QByteArray
name|data
init|=
name|filename
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|cfilename
init|=
name|data
operator|.
name|constData
argument_list|()
decl_stmt|;
name|FILE
modifier|*
name|cfile
init|=
operator|::
name|fopen
argument_list|(
name|cfilename
argument_list|,
literal|"rb"
argument_list|)
decl_stmt|;
name|QBENCHMARK
block|{
name|i
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|sp_size
expr_stmt|;
operator|::
name|fseek
argument_list|(
name|cfile
argument_list|,
name|seekpos
index|[
name|i
index|]
argument_list|,
name|SEEK_SET
argument_list|)
expr_stmt|;
block|}
operator|::
name|fclose
argument_list|(
name|cfile
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|(
name|QFileFromPosixBenchmark
operator|)
case|:
block|{
comment|// No gain in benchmarking this case
block|}
break|break;
case|case
operator|(
name|Win32Benchmark
operator|)
case|:
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|HANDLE
name|hndl
decl_stmt|;
comment|// ensure we don't account string conversion
name|wchar_t
modifier|*
name|cfilename
init|=
operator|(
name|wchar_t
operator|*
operator|)
name|filename
operator|.
name|utf16
argument_list|()
decl_stmt|;
name|hndl
operator|=
name|CreateFile
argument_list|(
name|cfilename
argument_list|,
name|GENERIC_READ
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|OPEN_EXISTING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|hndl
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|i
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|sp_size
expr_stmt|;
name|SetFilePointer
argument_list|(
name|hndl
argument_list|,
name|seekpos
index|[
name|i
index|]
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|CloseHandle
argument_list|(
name|hndl
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFAIL
argument_list|(
literal|"Not running on a Windows plattform!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
break|break;
block|}
name|removeFile
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|open_data
name|void
name|tst_qfile
operator|::
name|open_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|tst_qfile
operator|::
name|BenchmarkType
argument_list|>
argument_list|(
literal|"testType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QFile"
argument_list|)
operator|<<
name|QFileBenchmark
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QFSFileEngine"
argument_list|)
operator|<<
name|QFSFileEngineBenchmark
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Posix FILE*"
argument_list|)
operator|<<
name|PosixBenchmark
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QFile from FILE*"
argument_list|)
operator|<<
name|QFileFromPosixBenchmark
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Win32 API"
argument_list|)
operator|<<
name|Win32Benchmark
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|open
name|void
name|tst_qfile
operator|::
name|open
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|tst_qfile
operator|::
name|BenchmarkType
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|createFile
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|testType
condition|)
block|{
case|case
operator|(
name|QFileBenchmark
operator|)
case|:
block|{
name|QBENCHMARK
block|{
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
case|case
operator|(
name|QFSFileEngineBenchmark
operator|)
case|:
block|{
name|QBENCHMARK
block|{
name|QFSFileEngine
name|fse
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|fse
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|fse
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
case|case
operator|(
name|PosixBenchmark
operator|)
case|:
block|{
comment|// ensure we don't account toLocal8Bit()
name|QByteArray
name|data
init|=
name|filename
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|cfilename
init|=
name|data
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QBENCHMARK
block|{
name|FILE
modifier|*
name|cfile
init|=
operator|::
name|fopen
argument_list|(
name|cfilename
argument_list|,
literal|"rb"
argument_list|)
decl_stmt|;
operator|::
name|fclose
argument_list|(
name|cfile
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
operator|(
name|QFileFromPosixBenchmark
operator|)
case|:
block|{
comment|// ensure we don't account toLocal8Bit()
name|QByteArray
name|data
init|=
name|filename
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|cfilename
init|=
name|data
operator|.
name|constData
argument_list|()
decl_stmt|;
name|FILE
modifier|*
name|cfile
init|=
operator|::
name|fopen
argument_list|(
name|cfilename
argument_list|,
literal|"rb"
argument_list|)
decl_stmt|;
name|QBENCHMARK
block|{
name|QFile
name|file
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|cfile
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
operator|::
name|fclose
argument_list|(
name|cfile
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|(
name|Win32Benchmark
operator|)
case|:
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|HANDLE
name|hndl
decl_stmt|;
comment|// ensure we don't account string conversion
name|wchar_t
modifier|*
name|cfilename
init|=
operator|(
name|wchar_t
operator|*
operator|)
name|filename
operator|.
name|utf16
argument_list|()
decl_stmt|;
name|QBENCHMARK
block|{
name|hndl
operator|=
name|CreateFile
argument_list|(
name|cfilename
argument_list|,
name|GENERIC_READ
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|OPEN_EXISTING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|hndl
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|hndl
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|QFAIL
argument_list|(
literal|"Not running on a non-Windows platform!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
break|break;
block|}
name|removeFile
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readSmallFiles_QFile
name|void
name|tst_qfile
operator|::
name|readSmallFiles_QFile
parameter_list|()
block|{
name|readSmallFiles
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readSmallFiles_QFSFileEngine
name|void
name|tst_qfile
operator|::
name|readSmallFiles_QFSFileEngine
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|readSmallFiles
argument_list|()
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"This test requires -developer-build."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|readSmallFiles_posix
name|void
name|tst_qfile
operator|::
name|readSmallFiles_posix
parameter_list|()
block|{
name|readSmallFiles
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readSmallFiles_Win32
name|void
name|tst_qfile
operator|::
name|readSmallFiles_Win32
parameter_list|()
block|{
name|readSmallFiles
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readSmallFiles_QFile_data
name|void
name|tst_qfile
operator|::
name|readSmallFiles_QFile_data
parameter_list|()
block|{
name|readSmallFiles_data
argument_list|(
name|QFileBenchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
name|readSmallFiles_data
argument_list|(
name|QFileBenchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
name|readSmallFiles_data
argument_list|(
name|QFileBenchmark
argument_list|,
name|QIODevice
operator|::
name|Text
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
name|readSmallFiles_data
argument_list|(
name|QFileBenchmark
argument_list|,
name|QIODevice
operator|::
name|Text
argument_list|,
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readSmallFiles_QFSFileEngine_data
name|void
name|tst_qfile
operator|::
name|readSmallFiles_QFSFileEngine_data
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|readSmallFiles_data
argument_list|(
name|QFSFileEngineBenchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
name|readSmallFiles_data
argument_list|(
name|QFSFileEngineBenchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
name|readSmallFiles_data
argument_list|(
name|QFSFileEngineBenchmark
argument_list|,
name|QIODevice
operator|::
name|Text
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
name|readSmallFiles_data
argument_list|(
name|QFSFileEngineBenchmark
argument_list|,
name|QIODevice
operator|::
name|Text
argument_list|,
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Test will be skipped"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|readSmallFiles_posix_data
name|void
name|tst_qfile
operator|::
name|readSmallFiles_posix_data
parameter_list|()
block|{
name|readSmallFiles_data
argument_list|(
name|PosixBenchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readSmallFiles_Win32_data
name|void
name|tst_qfile
operator|::
name|readSmallFiles_Win32_data
parameter_list|()
block|{
name|readSmallFiles_data
argument_list|(
name|Win32Benchmark
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readSmallFiles_data
name|void
name|tst_qfile
operator|::
name|readSmallFiles_data
parameter_list|(
name|BenchmarkType
name|type
parameter_list|,
name|QIODevice
operator|::
name|OpenModeFlag
name|t
parameter_list|,
name|QIODevice
operator|::
name|OpenModeFlag
name|b
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|tst_qfile
operator|::
name|BenchmarkType
argument_list|>
argument_list|(
literal|"testType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"blockSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFile
operator|::
name|OpenModeFlag
argument_list|>
argument_list|(
literal|"textMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFile
operator|::
name|OpenModeFlag
argument_list|>
argument_list|(
literal|"bufferedMode"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|bs
index|[]
init|=
block|{
literal|1024
block|,
literal|1024
operator|*
literal|2
block|,
literal|1024
operator|*
literal|8
block|,
literal|1024
operator|*
literal|16
block|,
literal|1024
operator|*
literal|32
block|,
literal|1024
operator|*
literal|512
block|}
decl_stmt|;
name|int
name|bs_entries
init|=
sizeof|sizeof
argument_list|(
name|bs
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
specifier|const
name|int
argument_list|)
decl_stmt|;
name|QString
name|flagstring
decl_stmt|;
if|if
condition|(
name|t
operator|&
name|QIODevice
operator|::
name|Text
condition|)
name|flagstring
operator|+=
literal|"textMode "
expr_stmt|;
if|if
condition|(
name|b
operator|&
name|QIODevice
operator|::
name|Unbuffered
condition|)
name|flagstring
operator|+=
literal|"unbuffered "
expr_stmt|;
if|if
condition|(
name|flagstring
operator|.
name|isEmpty
argument_list|()
condition|)
name|flagstring
operator|=
literal|"none"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bs_entries
condition|;
operator|++
name|i
control|)
name|QTest
operator|::
name|newRow
argument_list|(
operator|(
name|QString
argument_list|(
literal|"BS: %1, Flags: %2"
argument_list|)
operator|)
operator|.
name|arg
argument_list|(
name|bs
index|[
name|i
index|]
argument_list|)
operator|.
name|arg
argument_list|(
name|flagstring
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|type
operator|<<
name|bs
index|[
name|i
index|]
operator|<<
name|t
operator|<<
name|b
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createSmallFiles
name|void
name|tst_qfile
operator|::
name|createSmallFiles
parameter_list|()
block|{
name|QDir
name|dir
init|=
name|QDir
operator|::
name|temp
argument_list|()
decl_stmt|;
name|dir
operator|.
name|mkdir
argument_list|(
literal|"tst"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
literal|"tst"
argument_list|)
expr_stmt|;
name|tmpDirName
operator|=
name|dir
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
else|#
directive|else
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
endif|#
directive|endif
block|{
name|QFile
name|f
argument_list|(
name|tmpDirName
operator|+
literal|"/"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|f
operator|.
name|seek
argument_list|(
literal|511
argument_list|)
expr_stmt|;
name|f
operator|.
name|putChar
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removeSmallFiles
name|void
name|tst_qfile
operator|::
name|removeSmallFiles
parameter_list|()
block|{
name|QDirIterator
name|it
argument_list|(
name|tmpDirName
argument_list|,
name|QDirIterator
operator|::
name|FollowSymlinks
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|QFile
operator|::
name|remove
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
operator|::
name|temp
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"tst"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readSmallFiles
name|void
name|tst_qfile
operator|::
name|readSmallFiles
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|tst_qfile
operator|::
name|BenchmarkType
argument_list|,
name|testType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFile
operator|::
name|OpenModeFlag
argument_list|,
name|textMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFile
operator|::
name|OpenModeFlag
argument_list|,
name|bufferedMode
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
if|if
condition|(
name|testType
operator|==
name|Win32Benchmark
condition|)
name|QSKIP
argument_list|(
literal|"This is Windows only benchmark."
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|createSmallFiles
argument_list|()
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|tmpDirName
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|files
init|=
name|dir
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|NoSymLinks
operator||
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
name|char
modifier|*
name|buffer
init|=
operator|new
name|char
index|[
name|BUFSIZE
index|]
decl_stmt|;
switch|switch
condition|(
name|testType
condition|)
block|{
case|case
operator|(
name|QFileBenchmark
operator|)
case|:
block|{
name|QList
argument_list|<
name|QFile
modifier|*
argument_list|>
name|fileList
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|QString file
argument_list|,
argument|files
argument_list|)
block|{
name|QFile
modifier|*
name|f
init|=
operator|new
name|QFile
argument_list|(
name|tmpDirName
operator|+
literal|"/"
operator|+
name|file
argument_list|)
decl_stmt|;
name|f
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|textMode
operator||
name|bufferedMode
argument_list|)
expr_stmt|;
name|fileList
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|QBENCHMARK
block|{
name|Q_FOREACH
argument_list|(
argument|QFile *file
argument_list|,
argument|fileList
argument_list|)
block|{
while|while
condition|(
operator|!
name|file
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|file
operator|->
name|read
argument_list|(
name|buffer
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Q_FOREACH
argument_list|(
argument|QFile *file
argument_list|,
argument|fileList
argument_list|)
block|{
name|file
operator|->
name|close
argument_list|()
expr_stmt|;
operator|delete
name|file
expr_stmt|;
block|}
block|}
break|break;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
case|case
operator|(
name|QFSFileEngineBenchmark
operator|)
case|:
block|{
name|QList
argument_list|<
name|QFSFileEngine
modifier|*
argument_list|>
name|fileList
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|QString file
argument_list|,
argument|files
argument_list|)
block|{
name|QFSFileEngine
modifier|*
name|fse
init|=
operator|new
name|QFSFileEngine
argument_list|(
name|tmpDirName
operator|+
literal|"/"
operator|+
name|file
argument_list|)
decl_stmt|;
name|fse
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|textMode
operator||
name|bufferedMode
argument_list|)
expr_stmt|;
name|fileList
operator|.
name|append
argument_list|(
name|fse
argument_list|)
expr_stmt|;
block|}
name|QBENCHMARK
block|{
name|Q_FOREACH
argument_list|(
argument|QFSFileEngine *fse
argument_list|,
argument|fileList
argument_list|)
block|{
while|while
condition|(
name|fse
operator|->
name|read
argument_list|(
name|buffer
argument_list|,
name|blockSize
argument_list|)
condition|)
empty_stmt|;
block|}
block|}
name|Q_FOREACH
argument_list|(
argument|QFSFileEngine *fse
argument_list|,
argument|fileList
argument_list|)
block|{
name|fse
operator|->
name|close
argument_list|()
expr_stmt|;
operator|delete
name|fse
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
case|case
operator|(
name|PosixBenchmark
operator|)
case|:
block|{
name|QList
argument_list|<
name|FILE
modifier|*
argument_list|>
name|fileList
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|QString file
argument_list|,
argument|files
argument_list|)
block|{
name|fileList
operator|.
name|append
argument_list|(
operator|::
name|fopen
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|tmpDirName
operator|+
literal|"/"
operator|+
name|file
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
literal|"rb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QBENCHMARK
block|{
name|Q_FOREACH
argument_list|(
argument|FILE* cfile
argument_list|,
argument|fileList
argument_list|)
block|{
while|while
condition|(
operator|!
name|feof
argument_list|(
name|cfile
argument_list|)
condition|)
operator|::
name|fread
argument_list|(
name|buffer
argument_list|,
name|blockSize
argument_list|,
literal|1
argument_list|,
name|cfile
argument_list|)
expr_stmt|;
operator|::
name|fseek
argument_list|(
name|cfile
argument_list|,
literal|0
argument_list|,
name|SEEK_SET
argument_list|)
expr_stmt|;
block|}
block|}
name|Q_FOREACH
argument_list|(
argument|FILE* cfile
argument_list|,
argument|fileList
argument_list|)
block|{
operator|::
name|fclose
argument_list|(
name|cfile
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
operator|(
name|QFileFromPosixBenchmark
operator|)
case|:
block|{
comment|// No gain in benchmarking this case
block|}
break|break;
case|case
operator|(
name|Win32Benchmark
operator|)
case|:
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|HANDLE
name|hndl
decl_stmt|;
comment|// ensure we don't account string conversion
name|wchar_t
modifier|*
name|cfilename
init|=
operator|(
name|wchar_t
operator|*
operator|)
name|filename
operator|.
name|utf16
argument_list|()
decl_stmt|;
name|hndl
operator|=
name|CreateFile
argument_list|(
name|cfilename
argument_list|,
name|GENERIC_READ
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|OPEN_EXISTING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|hndl
argument_list|)
expr_stmt|;
name|wchar_t
modifier|*
name|nativeBuffer
init|=
operator|new
name|wchar_t
index|[
name|BUFSIZE
index|]
decl_stmt|;
name|DWORD
name|numberOfBytesRead
decl_stmt|;
name|QBENCHMARK
block|{
do|do
block|{
name|ReadFile
argument_list|(
name|hndl
argument_list|,
name|nativeBuffer
argument_list|,
name|blockSize
argument_list|,
operator|&
name|numberOfBytesRead
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|numberOfBytesRead
operator|!=
literal|0
condition|)
do|;
block|}
operator|delete
name|nativeBuffer
expr_stmt|;
name|CloseHandle
argument_list|(
name|hndl
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFAIL
argument_list|(
literal|"Not running on a non-Windows platform!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
break|break;
block|}
name|removeSmallFiles
argument_list|()
expr_stmt|;
operator|delete
index|[]
name|buffer
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qfile
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
