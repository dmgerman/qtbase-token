begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QtCore>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_class
DECL|class|tst_QWaitCondition
class|class
name|tst_QWaitCondition
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QWaitCondition
name|tst_QWaitCondition
parameter_list|()
block|{     }
private|private
name|slots
private|:
name|void
name|oscillate_data
parameter_list|()
function_decl|;
name|void
name|oscillate
parameter_list|()
function_decl|;
name|void
name|thrash_data
parameter_list|()
function_decl|;
name|void
name|thrash
parameter_list|()
function_decl|;
public|public:
DECL|member|local
DECL|member|remote
specifier|static
name|QWaitCondition
name|local
decl_stmt|,
name|remote
decl_stmt|;
DECL|enum|Turn
DECL|enumerator|LocalTurn
DECL|enumerator|RemoteTurn
enum|enum
name|Turn
block|{
name|LocalTurn
block|,
name|RemoteTurn
block|}
enum|;
DECL|member|turn
specifier|static
name|Turn
name|turn
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|local
name|QWaitCondition
name|tst_QWaitCondition
operator|::
name|local
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|remote
name|QWaitCondition
name|tst_QWaitCondition
operator|::
name|remote
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|turn
name|tst_QWaitCondition
operator|::
name|Turn
name|tst_QWaitCondition
operator|::
name|turn
init|=
name|tst_QWaitCondition
operator|::
name|LocalTurn
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|OscillateThread
class|class
name|OscillateThread
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|member|m_done
name|bool
name|m_done
decl_stmt|;
DECL|member|m_useMutex
name|bool
name|m_useMutex
decl_stmt|;
DECL|member|m_timeout
name|unsigned
name|long
name|m_timeout
decl_stmt|;
DECL|member|m_wakeOne
name|bool
name|m_wakeOne
decl_stmt|;
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|function|OscillateThread
name|OscillateThread
parameter_list|(
name|bool
name|useMutex
parameter_list|,
name|unsigned
name|long
name|timeout
parameter_list|,
name|bool
name|wakeOne
parameter_list|)
member_init_list|:
name|m_done
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_useMutex
argument_list|(
name|useMutex
argument_list|)
member_init_list|,
name|m_timeout
argument_list|(
name|timeout
argument_list|)
member_init_list|,
name|m_wakeOne
argument_list|(
name|wakeOne
argument_list|)
block|{}
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QMutex
name|mtx
decl_stmt|;
name|QReadWriteLock
name|rwl
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
forever|forever
block|{
if|if
condition|(
name|m_done
condition|)
break|break;
if|if
condition|(
name|m_useMutex
condition|)
block|{
name|mtx
operator|.
name|lock
argument_list|()
expr_stmt|;
while|while
condition|(
name|tst_QWaitCondition
operator|::
name|turn
operator|==
name|tst_QWaitCondition
operator|::
name|LocalTurn
condition|)
name|tst_QWaitCondition
operator|::
name|remote
operator|.
name|wait
argument_list|(
operator|&
name|mtx
argument_list|,
name|m_timeout
argument_list|)
expr_stmt|;
name|mtx
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rwl
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
while|while
condition|(
name|tst_QWaitCondition
operator|::
name|turn
operator|==
name|tst_QWaitCondition
operator|::
name|LocalTurn
condition|)
name|tst_QWaitCondition
operator|::
name|remote
operator|.
name|wait
argument_list|(
operator|&
name|rwl
argument_list|,
name|m_timeout
argument_list|)
expr_stmt|;
name|rwl
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|tst_QWaitCondition
operator|::
name|turn
operator|=
name|tst_QWaitCondition
operator|::
name|LocalTurn
expr_stmt|;
if|if
condition|(
name|m_wakeOne
condition|)
name|tst_QWaitCondition
operator|::
name|local
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
else|else
name|tst_QWaitCondition
operator|::
name|local
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_function
DECL|function|oscillate_data
name|void
name|tst_QWaitCondition
operator|::
name|oscillate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useMutex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|unsigned
name|long
argument_list|>
argument_list|(
literal|"timeout"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"wakeOne"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mutex, timeout, one"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1000ul
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"readWriteLock, timeout, one"
argument_list|)
operator|<<
literal|false
operator|<<
literal|1000ul
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mutex, timeout, all"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1000ul
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"readWriteLock, timeout, all"
argument_list|)
operator|<<
literal|false
operator|<<
literal|1000ul
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mutex, forever, one"
argument_list|)
operator|<<
literal|true
operator|<<
name|ULONG_MAX
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"readWriteLock, forever, one"
argument_list|)
operator|<<
literal|false
operator|<<
name|ULONG_MAX
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mutex, forever, all"
argument_list|)
operator|<<
literal|true
operator|<<
name|ULONG_MAX
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"readWriteLock, forever, all"
argument_list|)
operator|<<
literal|false
operator|<<
name|ULONG_MAX
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oscillate
name|void
name|tst_QWaitCondition
operator|::
name|oscillate
parameter_list|()
block|{
name|QMutex
name|mtx
decl_stmt|;
name|QReadWriteLock
name|rwl
decl_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useMutex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
argument|unsigned long
argument_list|,
argument|timeout
argument_list|)
empty_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|wakeOne
argument_list|)
expr_stmt|;
name|turn
operator|=
name|LocalTurn
expr_stmt|;
name|OscillateThread
name|thrd
argument_list|(
name|useMutex
argument_list|,
name|timeout
argument_list|,
name|wakeOne
argument_list|)
decl_stmt|;
name|thrd
operator|.
name|start
argument_list|()
expr_stmt|;
name|QBENCHMARK
block|{
if|if
condition|(
name|useMutex
condition|)
name|mtx
operator|.
name|lock
argument_list|()
expr_stmt|;
else|else
name|rwl
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
name|turn
operator|=
name|RemoteTurn
expr_stmt|;
if|if
condition|(
name|wakeOne
condition|)
name|remote
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
else|else
name|remote
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|useMutex
condition|)
block|{
while|while
condition|(
name|turn
operator|==
name|RemoteTurn
condition|)
name|local
operator|.
name|wait
argument_list|(
operator|&
name|mtx
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|mtx
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|turn
operator|==
name|RemoteTurn
condition|)
name|local
operator|.
name|wait
argument_list|(
operator|&
name|rwl
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|rwl
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|thrd
operator|.
name|m_done
operator|=
literal|true
expr_stmt|;
name|remote
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|thrd
operator|.
name|wait
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|thrash_data
name|void
name|tst_QWaitCondition
operator|::
name|thrash_data
parameter_list|()
block|{
name|oscillate_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|thrash
name|void
name|tst_QWaitCondition
operator|::
name|thrash
parameter_list|()
block|{
name|QMutex
name|mtx
decl_stmt|;
name|mtx
operator|.
name|lock
argument_list|()
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useMutex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
argument|unsigned long
argument_list|,
argument|timeout
argument_list|)
empty_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|wakeOne
argument_list|)
expr_stmt|;
name|turn
operator|=
name|LocalTurn
expr_stmt|;
name|OscillateThread
name|thrd
argument_list|(
name|useMutex
argument_list|,
name|timeout
argument_list|,
name|wakeOne
argument_list|)
decl_stmt|;
name|thrd
operator|.
name|start
argument_list|()
expr_stmt|;
name|local
operator|.
name|wait
argument_list|(
operator|&
name|mtx
argument_list|,
literal|1000ul
argument_list|)
expr_stmt|;
name|mtx
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QBENCHMARK
block|{
name|turn
operator|=
name|RemoteTurn
expr_stmt|;
if|if
condition|(
name|wakeOne
condition|)
name|remote
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
else|else
name|remote
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
block|}
name|thrd
operator|.
name|m_done
operator|=
literal|true
expr_stmt|;
name|turn
operator|=
name|RemoteTurn
expr_stmt|;
name|remote
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|thrd
operator|.
name|wait
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QWaitCondition
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qwaitcondition.moc"
end_include
end_unit
