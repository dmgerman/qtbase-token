begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QtCore>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_class
DECL|class|tst_QWaitCondition
class|class
name|tst_QWaitCondition
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QWaitCondition
name|tst_QWaitCondition
parameter_list|()
block|{     }
private|private
name|slots
private|:
name|void
name|oscillate_mutex_data
parameter_list|()
function_decl|;
name|void
name|oscillate_mutex
parameter_list|()
function_decl|;
name|void
name|oscillate_writelock_data
parameter_list|()
function_decl|;
name|void
name|oscillate_writelock
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|turn
name|int
name|turn
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|threadCount
specifier|const
name|int
name|threadCount
init|=
literal|10
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cond
name|QWaitCondition
name|cond
decl_stmt|;
end_decl_stmt
begin_class
template|template
parameter_list|<
name|class
name|Mutex
parameter_list|,
name|class
name|Locker
parameter_list|>
class|class
DECL|class|OscillateThread
name|OscillateThread
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|member|mutex
name|Mutex
modifier|*
name|mutex
decl_stmt|;
DECL|member|m_threadid
name|int
name|m_threadid
decl_stmt|;
DECL|member|timeout
name|int
name|timeout
decl_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
literal|5000
condition|;
operator|++
name|count
control|)
block|{
name|Locker
name|lock
argument_list|(
name|mutex
argument_list|)
decl_stmt|;
while|while
condition|(
name|m_threadid
operator|!=
name|turn
condition|)
block|{
name|cond
operator|.
name|wait
argument_list|(
name|mutex
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
name|turn
operator|=
operator|(
name|turn
operator|+
literal|1
operator|)
operator|%
name|threadCount
expr_stmt|;
name|cond
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_function
template|template
parameter_list|<
name|class
name|Mutex
parameter_list|,
name|class
name|Locker
parameter_list|>
DECL|function|oscillate
name|void
name|oscillate
parameter_list|(
name|unsigned
name|long
name|timeout
parameter_list|)
block|{
name|OscillateThread
argument_list|<
name|Mutex
argument_list|,
name|Locker
argument_list|>
name|thrd
index|[
name|threadCount
index|]
decl_stmt|;
name|Mutex
name|m
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
operator|++
name|i
control|)
block|{
name|thrd
index|[
name|i
index|]
operator|.
name|mutex
operator|=
operator|&
name|m
expr_stmt|;
name|thrd
index|[
name|i
index|]
operator|.
name|m_threadid
operator|=
name|i
expr_stmt|;
name|thrd
index|[
name|i
index|]
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
operator|++
name|i
control|)
block|{
name|thrd
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
operator|++
name|i
control|)
block|{
name|thrd
index|[
name|i
index|]
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|oscillate_mutex_data
name|void
name|tst_QWaitCondition
operator|::
name|oscillate_mutex_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|unsigned
name|long
argument_list|>
argument_list|(
literal|"timeout"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|0ul
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1ul
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1000"
argument_list|)
operator|<<
literal|1000ul
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"forever"
argument_list|)
operator|<<
name|ULONG_MAX
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oscillate_mutex
name|void
name|tst_QWaitCondition
operator|::
name|oscillate_mutex
parameter_list|()
block|{
name|QFETCH
argument_list|(
argument|unsigned long
argument_list|,
argument|timeout
argument_list|)
empty_stmt|;
name|oscillate
argument_list|<
name|QMutex
argument_list|,
name|QMutexLocker
argument_list|>
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oscillate_writelock_data
name|void
name|tst_QWaitCondition
operator|::
name|oscillate_writelock_data
parameter_list|()
block|{
name|oscillate_mutex_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oscillate_writelock
name|void
name|tst_QWaitCondition
operator|::
name|oscillate_writelock
parameter_list|()
block|{
name|QFETCH
argument_list|(
argument|unsigned long
argument_list|,
argument|timeout
argument_list|)
empty_stmt|;
name|oscillate
argument_list|<
name|QReadWriteLock
argument_list|,
name|QWriteLocker
argument_list|>
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QWaitCondition
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qwaitcondition.moc"
end_include
end_unit
