begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qtest.h>
end_include
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_decl_stmt
DECL|variable|dummy
name|QThreadStorage
argument_list|<
name|int
modifier|*
argument_list|>
name|dummy
index|[
literal|8
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|tls1
name|QThreadStorage
argument_list|<
name|QString
modifier|*
argument_list|>
name|tls1
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QThreadStorage
class|class
name|tst_QThreadStorage
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QThreadStorage
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QThreadStorage
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|construct
parameter_list|()
function_decl|;
name|void
name|get
parameter_list|()
function_decl|;
name|void
name|set
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QThreadStorage
name|tst_QThreadStorage
operator|::
name|tst_QThreadStorage
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QThreadStorage
name|tst_QThreadStorage
operator|::
name|~
name|tst_QThreadStorage
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QThreadStorage
operator|::
name|init
parameter_list|()
block|{
name|dummy
index|[
literal|1
index|]
operator|.
name|setLocalData
argument_list|(
operator|new
name|int
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
index|[
literal|2
index|]
operator|.
name|setLocalData
argument_list|(
operator|new
name|int
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|dummy
index|[
literal|3
index|]
operator|.
name|setLocalData
argument_list|(
operator|new
name|int
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|tls1
operator|.
name|setLocalData
argument_list|(
operator|new
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QThreadStorage
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|construct
name|void
name|tst_QThreadStorage
operator|::
name|construct
parameter_list|()
block|{
name|QBENCHMARK
block|{
name|QThreadStorage
argument_list|<
name|int
modifier|*
argument_list|>
name|ts
decl_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|get
name|void
name|tst_QThreadStorage
operator|::
name|get
parameter_list|()
block|{
name|QThreadStorage
argument_list|<
name|int
modifier|*
argument_list|>
name|ts
decl_stmt|;
name|ts
operator|.
name|setLocalData
argument_list|(
operator|new
name|int
argument_list|(
literal|45
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|QBENCHMARK
block|{
name|int
modifier|*
name|i
init|=
name|ts
operator|.
name|localData
argument_list|()
decl_stmt|;
name|count
operator|+=
operator|*
name|i
expr_stmt|;
block|}
name|ts
operator|.
name|setLocalData
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|set
name|void
name|tst_QThreadStorage
operator|::
name|set
parameter_list|()
block|{
name|QThreadStorage
argument_list|<
name|int
modifier|*
argument_list|>
name|ts
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|QBENCHMARK
block|{
name|ts
operator|.
name|setLocalData
argument_list|(
operator|new
name|int
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|ts
operator|.
name|setLocalData
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QThreadStorage
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qthreadstorage.moc"
end_include
end_unit
