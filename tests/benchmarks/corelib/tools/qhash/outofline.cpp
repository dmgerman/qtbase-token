begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qhash_string.h"
end_include
begin_function
DECL|function|doHash
specifier|static
name|void
name|doHash
parameter_list|(
specifier|const
name|unsigned
name|short
modifier|*
name|p
parameter_list|,
name|uint
modifier|&
name|h
parameter_list|)
block|{
if|#
directive|if
literal|1
comment|// Copied from static uint hash(const QChar *p, int n).
comment|// Possibly not the cheapest way.
name|h
operator|=
operator|(
name|h
operator|<<
literal|4
operator|)
operator|+
operator|(
operator|*
name|p
operator|++
operator|)
expr_stmt|;
name|h
operator|^=
operator|(
name|h
operator|&
literal|0xf0000000
operator|)
operator|>>
literal|23
expr_stmt|;
name|h
operator|&=
literal|0x0fffffff
expr_stmt|;
name|h
operator|=
operator|(
name|h
operator|<<
literal|4
operator|)
operator|+
operator|(
operator|*
name|p
operator|++
operator|)
expr_stmt|;
name|h
operator|^=
operator|(
name|h
operator|&
literal|0xf0000000
operator|)
operator|>>
literal|23
expr_stmt|;
name|h
operator|&=
literal|0x0fffffff
expr_stmt|;
name|h
operator|=
operator|(
name|h
operator|<<
literal|4
operator|)
operator|+
operator|(
operator|*
name|p
operator|++
operator|)
expr_stmt|;
name|h
operator|^=
operator|(
name|h
operator|&
literal|0xf0000000
operator|)
operator|>>
literal|23
expr_stmt|;
name|h
operator|&=
literal|0x0fffffff
expr_stmt|;
name|h
operator|=
operator|(
name|h
operator|<<
literal|4
operator|)
operator|+
operator|(
operator|*
name|p
operator|++
operator|)
expr_stmt|;
name|h
operator|^=
operator|(
name|h
operator|&
literal|0xf0000000
operator|)
operator|>>
literal|23
expr_stmt|;
name|h
operator|&=
literal|0x0fffffff
expr_stmt|;
else|#
directive|else
comment|// Faster, but probably less spread.
name|h
operator|^=
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|p
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|String
modifier|&
name|str
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|p
init|=
operator|(
name|unsigned
name|short
operator|*
operator|)
name|str
operator|.
name|constData
argument_list|()
decl_stmt|;
specifier|const
name|int
name|s
init|=
name|str
operator|.
name|size
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|s
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|0
return|;
case|case
literal|1
case|:
return|return
operator|*
name|p
return|;
case|case
literal|2
case|:
return|return
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|p
return|;
case|case
literal|3
case|:
return|return
operator|(
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|p
operator|)
operator|^
operator|*
operator|(
name|p
operator|+
literal|2
operator|)
return|;
comment|//case 3: return (*p<< 11) + (*(p + 1)<< 22) + *(p + 2);
block|}
name|uint
name|h
init|=
literal|0
decl_stmt|;
name|doHash
argument_list|(
name|p
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|doHash
argument_list|(
name|p
operator|+
name|s
operator|/
literal|2
operator|-
literal|2
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|doHash
argument_list|(
name|p
operator|+
name|s
operator|-
literal|4
argument_list|,
name|h
argument_list|)
expr_stmt|;
return|return
name|h
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|JavaString
modifier|&
name|str
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|p
init|=
operator|(
name|unsigned
name|short
operator|*
operator|)
name|str
operator|.
name|constData
argument_list|()
decl_stmt|;
specifier|const
name|int
name|len
init|=
name|str
operator|.
name|size
argument_list|()
decl_stmt|;
name|uint
name|h
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|p
index|[
name|i
index|]
expr_stmt|;
return|return
name|h
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
