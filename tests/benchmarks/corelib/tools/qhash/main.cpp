begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"main.h"
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QTest>
end_include
begin_class
DECL|class|tst_QHash
class|class
name|tst_QHash
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
DECL|function|qhash_qt4_data
name|void
name|qhash_qt4_data
parameter_list|()
block|{
name|data
argument_list|()
expr_stmt|;
block|}
name|void
name|qhash_qt4
parameter_list|()
function_decl|;
DECL|function|qhash_faster_data
name|void
name|qhash_faster_data
parameter_list|()
block|{
name|data
argument_list|()
expr_stmt|;
block|}
name|void
name|qhash_faster
parameter_list|()
function_decl|;
DECL|function|javaString_data
name|void
name|javaString_data
parameter_list|()
block|{
name|data
argument_list|()
expr_stmt|;
block|}
name|void
name|javaString
parameter_list|()
function_decl|;
private|private:
name|void
name|data
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|N
specifier|const
name|int
name|N
init|=
literal|1000000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|double
name|s
decl_stmt|;
end_decl_stmt
begin_comment
comment|///////////////////// QHash /////////////////////
end_comment
begin_function
DECL|function|data
name|void
name|tst_QHash
operator|::
name|data
parameter_list|()
block|{
name|QFile
name|smallPathsData
argument_list|(
literal|"paths_small_data.txt"
argument_list|)
decl_stmt|;
name|smallPathsData
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"items"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paths-small"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|smallPathsData
operator|.
name|readAll
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qhash_qt4
name|void
name|tst_QHash
operator|::
name|qhash_qt4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QStringList
name|realitems
init|=
name|items
decl_stmt|;
comment|// for copy/paste ease between benchmarks
name|QHash
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|hash
decl_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|realitems
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|n
condition|;
operator|++
name|i
control|)
block|{
name|hash
index|[
name|realitems
operator|.
name|at
argument_list|(
name|i
argument_list|)
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qhash_faster
name|void
name|tst_QHash
operator|::
name|qhash_faster
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|String
argument_list|,
name|int
argument_list|>
name|hash
decl_stmt|;
name|QList
argument_list|<
name|String
argument_list|>
name|realitems
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|s
decl|,
name|items
control|)
name|realitems
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|realitems
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|n
condition|;
operator|++
name|i
control|)
block|{
name|hash
index|[
name|realitems
operator|.
name|at
argument_list|(
name|i
argument_list|)
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|javaString
name|void
name|tst_QHash
operator|::
name|javaString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|JavaString
argument_list|,
name|int
argument_list|>
name|hash
decl_stmt|;
name|QList
argument_list|<
name|JavaString
argument_list|>
name|realitems
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|s
decl|,
name|items
control|)
name|realitems
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|realitems
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|n
condition|;
operator|++
name|i
control|)
block|{
name|hash
index|[
name|realitems
operator|.
name|at
argument_list|(
name|i
argument_list|)
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QHash
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
