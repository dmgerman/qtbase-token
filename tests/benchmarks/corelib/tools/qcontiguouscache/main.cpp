begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QTest>
end_include
begin_include
include|#
directive|include
file|<QCache>
end_include
begin_include
include|#
directive|include
file|<QContiguousCache>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_class
DECL|class|tst_QContiguousCache
class|class
name|tst_QContiguousCache
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QContiguousCache
name|tst_QContiguousCache
parameter_list|()
block|{}
DECL|function|~tst_QContiguousCache
specifier|virtual
name|~
name|tst_QContiguousCache
parameter_list|()
block|{}
private|private
name|slots
private|:
name|void
name|asScrollingList
parameter_list|()
function_decl|;
name|void
name|cacheBenchmark
parameter_list|()
function_decl|;
name|void
name|contiguousCacheBenchmark
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QContiguousCache
argument_list|)
end_macro
begin_function
DECL|function|asScrollingList
name|void
name|tst_QContiguousCache
operator|::
name|asScrollingList
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|c
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// Once allocated QContiguousCache should not
comment|// allocate any additional memory for non
comment|// complex data types.
name|QBENCHMARK
block|{
comment|// simulate scrolling in a list of items;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|c
operator|.
name|available
argument_list|()
argument_list|,
literal|10
operator|-
name|i
argument_list|)
expr_stmt|;
name|c
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|c
operator|.
name|firstIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|lastIndex
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|first
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|last
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|containsIndex
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|containsIndex
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|available
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|c
operator|.
name|containsIndex
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|(
specifier|const
name|QContiguousCache
argument_list|<
name|int
argument_list|>
operator|)
name|c
operator|)
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|10
init|;
name|i
operator|<
literal|30
condition|;
operator|++
name|i
control|)
name|c
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|firstIndex
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|lastIndex
argument_list|()
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|first
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|last
argument_list|()
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|containsIndex
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|containsIndex
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|available
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|20
init|;
name|i
operator|<
literal|30
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|c
operator|.
name|containsIndex
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|(
specifier|const
name|QContiguousCache
argument_list|<
name|int
argument_list|>
operator|)
name|c
operator|)
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|19
init|;
name|i
operator|>=
literal|10
condition|;
operator|--
name|i
control|)
name|c
operator|.
name|prepend
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|firstIndex
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|lastIndex
argument_list|()
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|first
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|last
argument_list|()
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|containsIndex
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|containsIndex
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|available
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|10
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|c
operator|.
name|containsIndex
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|(
specifier|const
name|QContiguousCache
argument_list|<
name|int
argument_list|>
operator|)
name|c
operator|)
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|200
init|;
name|i
operator|<
literal|220
condition|;
operator|++
name|i
control|)
name|c
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|firstIndex
argument_list|()
argument_list|,
literal|210
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|lastIndex
argument_list|()
argument_list|,
literal|219
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|first
argument_list|()
argument_list|,
literal|210
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|last
argument_list|()
argument_list|,
literal|219
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|containsIndex
argument_list|(
literal|209
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|containsIndex
argument_list|(
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|available
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|210
init|;
name|i
operator|<
literal|220
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|c
operator|.
name|containsIndex
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|(
specifier|const
name|QContiguousCache
argument_list|<
name|int
argument_list|>
operator|)
name|c
operator|)
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// needed to reset benchmark
block|}
comment|// from a specific bug that was encountered.  100 to 299 cached, attempted to cache 250 - 205 via insert, failed.
comment|// bug was that item at 150 would instead be item that should have been inserted at 250
name|c
operator|.
name|setCapacity
argument_list|(
literal|200
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|100
init|;
name|i
operator|<
literal|300
condition|;
operator|++
name|i
control|)
name|c
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|250
init|;
name|i
operator|<=
literal|306
condition|;
operator|++
name|i
control|)
name|c
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|1000
operator|+
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|107
init|;
name|i
operator|<=
literal|306
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|c
operator|.
name|containsIndex
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
operator|<
literal|250
condition|?
name|i
else|:
literal|1000
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     Benchmarks must be near identical in tasks to be fair.     QCache uses pointers to ints as its a requirement of QCache,     whereas QContiguousCache doesn't support pointers (won't free them).     Given the ability to use simple data types is a benefit, its     fair.  Although this obviously must take into account we are     testing QContiguousCache use cases here, QCache has its own     areas where it is the more sensible class to use. */
end_comment
begin_function
DECL|function|cacheBenchmark
name|void
name|tst_QContiguousCache
operator|::
name|cacheBenchmark
parameter_list|()
block|{
name|QBENCHMARK
block|{
name|QCache
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|cache
decl_stmt|;
name|cache
operator|.
name|setMaxCost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
name|cache
operator|.
name|insert
argument_list|(
name|i
argument_list|,
operator|new
name|int
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|contiguousCacheBenchmark
name|void
name|tst_QContiguousCache
operator|::
name|contiguousCacheBenchmark
parameter_list|()
block|{
name|QBENCHMARK
block|{
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|contiguousCache
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
name|contiguousCache
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
