begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<qtest.h>
end_include
begin_class
DECL|class|tst_associative_containers
class|class
name|tst_associative_containers
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|insert_data
parameter_list|()
function_decl|;
name|void
name|insert
parameter_list|()
function_decl|;
name|void
name|lookup_data
parameter_list|()
function_decl|;
name|void
name|lookup
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|testInsert
name|void
name|testInsert
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|T
name|container
decl_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|container
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insert_data
name|void
name|tst_associative_containers
operator|::
name|insert_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useHash"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|size
init|=
literal|10
init|;
name|size
operator|<
literal|20000
condition|;
name|size
operator|+=
literal|100
control|)
block|{
specifier|const
name|QByteArray
name|sizeString
init|=
name|QByteArray
operator|::
name|number
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
literal|"hash--"
operator|+
name|sizeString
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
literal|true
operator|<<
name|size
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
literal|"map--"
operator|+
name|sizeString
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
literal|false
operator|<<
name|size
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insert
name|void
name|tst_associative_containers
operator|::
name|insert
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useHash
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|testHash
decl_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|testMap
decl_stmt|;
if|if
condition|(
name|useHash
condition|)
block|{
name|testInsert
argument_list|<
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testInsert
argument_list|<
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lookup_data
name|void
name|tst_associative_containers
operator|::
name|lookup_data
parameter_list|()
block|{
comment|//    setReportType(LineChartReport);
comment|//    setChartTitle("Time to call value(), with an increasing number of items in the container");
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useHash"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|size
init|=
literal|10
init|;
name|size
operator|<
literal|20000
condition|;
name|size
operator|+=
literal|100
control|)
block|{
specifier|const
name|QByteArray
name|sizeString
init|=
name|QByteArray
operator|::
name|number
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
literal|"hash--"
operator|+
name|sizeString
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
literal|true
operator|<<
name|size
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
literal|"map--"
operator|+
name|sizeString
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
literal|false
operator|<<
name|size
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|testLookup
name|void
name|testLookup
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|T
name|container
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|container
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|int
name|val
decl_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|val
operator|=
name|container
operator|.
name|value
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lookup
name|void
name|tst_associative_containers
operator|::
name|lookup
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useHash
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|useHash
condition|)
block|{
name|testLookup
argument_list|<
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testLookup
argument_list|<
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_associative_containers
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
