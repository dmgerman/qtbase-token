begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QtTest>
end_include
begin_include
include|#
directive|include
file|<sstream>
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_class
DECL|class|tst_QStringList
class|class
name|tst_QStringList
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|join
parameter_list|()
specifier|const
function_decl|;
name|void
name|join_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|split_qlist_qbytearray
parameter_list|()
specifier|const
function_decl|;
DECL|function|split_qlist_qbytearray_data
name|void
name|split_qlist_qbytearray_data
parameter_list|()
specifier|const
block|{
return|return
name|split_data
argument_list|()
return|;
block|}
name|void
name|split_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|split_qlist_qstring
parameter_list|()
specifier|const
function_decl|;
DECL|function|split_qlist_qstring_data
name|void
name|split_qlist_qstring_data
parameter_list|()
specifier|const
block|{
return|return
name|split_data
argument_list|()
return|;
block|}
name|void
name|split_stdvector_stdstring
parameter_list|()
specifier|const
function_decl|;
DECL|function|split_stdvector_stdstring_data
name|void
name|split_stdvector_stdstring_data
parameter_list|()
specifier|const
block|{
return|return
name|split_data
argument_list|()
return|;
block|}
name|void
name|split_stdvector_stdwstring
parameter_list|()
specifier|const
function_decl|;
DECL|function|split_stdvector_stdwstring_data
name|void
name|split_stdvector_stdwstring_data
parameter_list|()
specifier|const
block|{
return|return
name|split_data
argument_list|()
return|;
block|}
name|void
name|split_stdlist_stdstring
parameter_list|()
specifier|const
function_decl|;
DECL|function|split_stdlist_stdstring_data
name|void
name|split_stdlist_stdstring_data
parameter_list|()
specifier|const
block|{
return|return
name|split_data
argument_list|()
return|;
block|}
private|private:
specifier|static
name|QStringList
name|populateList
parameter_list|(
specifier|const
name|int
name|count
parameter_list|,
specifier|const
name|QString
modifier|&
name|unit
parameter_list|)
function_decl|;
specifier|static
name|QString
name|populateString
parameter_list|(
specifier|const
name|int
name|count
parameter_list|,
specifier|const
name|QString
modifier|&
name|unit
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|populateList
name|QStringList
name|tst_QStringList
operator|::
name|populateList
parameter_list|(
specifier|const
name|int
name|count
parameter_list|,
specifier|const
name|QString
modifier|&
name|unit
parameter_list|)
block|{
name|QStringList
name|retval
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|retval
operator|.
name|append
argument_list|(
name|unit
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|populateString
name|QString
name|tst_QStringList
operator|::
name|populateString
parameter_list|(
specifier|const
name|int
name|count
parameter_list|,
specifier|const
name|QString
modifier|&
name|unit
parameter_list|)
block|{
name|QString
name|retval
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|retval
operator|.
name|append
argument_list|(
name|unit
argument_list|)
expr_stmt|;
name|retval
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|join
name|void
name|tst_QStringList
operator|::
name|join
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|separator
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|input
operator|.
name|join
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|join_data
name|void
name|tst_QStringList
operator|::
name|join_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"separator"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|populateList
argument_list|(
literal|100
argument_list|,
name|QLatin1String
argument_list|(
literal|"unit"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|populateList
argument_list|(
literal|1000
argument_list|,
name|QLatin1String
argument_list|(
literal|"unit"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|populateList
argument_list|(
literal|10000
argument_list|,
name|QLatin1String
argument_list|(
literal|"unit"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|populateList
argument_list|(
literal|100000
argument_list|,
name|QLatin1String
argument_list|(
literal|"unit"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|split_data
name|void
name|tst_QStringList
operator|::
name|split_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QString
name|unit
init|=
name|QLatin1String
argument_list|(
literal|"unit"
argument_list|)
operator|+
name|QString
argument_list|(
literal|100
argument_list|,
name|QLatin1Char
argument_list|(
literal|'s'
argument_list|)
argument_list|)
decl_stmt|;
comment|//QTest::newRow("")<< populateString(10, unit);
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|populateString
argument_list|(
literal|100
argument_list|,
name|unit
argument_list|)
expr_stmt|;
comment|//QTest::newRow("")<< populateString(100, unit);
comment|//QTest::newRow("")<< populateString(1000, unit);
comment|//QTest::newRow("")<< populateString(10000, unit);
block|}
end_function
begin_function
DECL|function|split_qlist_qbytearray
name|void
name|tst_QStringList
operator|::
name|split_qlist_qbytearray
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
specifier|const
name|char
name|splitChar
init|=
literal|':'
decl_stmt|;
name|QByteArray
name|ba
init|=
name|input
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QBENCHMARK
block|{
name|ba
operator|.
name|split
argument_list|(
name|splitChar
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|split_qlist_qstring
name|void
name|tst_QStringList
operator|::
name|split_qlist_qstring
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
specifier|const
name|QChar
name|splitChar
init|=
literal|':'
decl_stmt|;
name|QBENCHMARK
block|{
name|input
operator|.
name|split
argument_list|(
name|splitChar
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|split_stdvector_stdstring
name|void
name|tst_QStringList
operator|::
name|split_stdvector_stdstring
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_STL
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
specifier|const
name|char
name|split_char
init|=
literal|':'
decl_stmt|;
name|std
operator|::
name|string
name|stdinput
init|=
name|input
operator|.
name|toStdString
argument_list|()
decl_stmt|;
name|QBENCHMARK
block|{
name|std
operator|::
name|istringstream
name|split
argument_list|(
name|stdinput
argument_list|)
decl_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|string
argument_list|>
name|token
decl_stmt|;
for|for
control|(
name|std
operator|::
name|string
name|each
init|;
name|std
operator|::
name|getline
argument_list|(
name|split
argument_list|,
name|each
argument_list|,
name|split_char
argument_list|)
condition|;
name|token
operator|.
name|push_back
argument_list|(
name|each
argument_list|)
control|)
empty_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|split_stdvector_stdwstring
name|void
name|tst_QStringList
operator|::
name|split_stdvector_stdwstring
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_STL
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
specifier|const
name|wchar_t
name|split_char
init|=
literal|':'
decl_stmt|;
name|std
operator|::
name|wstring
name|stdinput
init|=
name|input
operator|.
name|toStdWString
argument_list|()
decl_stmt|;
name|QBENCHMARK
block|{
name|std
operator|::
name|wistringstream
name|split
argument_list|(
name|stdinput
argument_list|)
decl_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|wstring
argument_list|>
name|token
decl_stmt|;
for|for
control|(
name|std
operator|::
name|wstring
name|each
init|;
name|std
operator|::
name|getline
argument_list|(
name|split
argument_list|,
name|each
argument_list|,
name|split_char
argument_list|)
condition|;
name|token
operator|.
name|push_back
argument_list|(
name|each
argument_list|)
control|)
empty_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|split_stdlist_stdstring
name|void
name|tst_QStringList
operator|::
name|split_stdlist_stdstring
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
specifier|const
name|char
name|split_char
init|=
literal|':'
decl_stmt|;
name|std
operator|::
name|string
name|stdinput
init|=
name|input
operator|.
name|toStdString
argument_list|()
decl_stmt|;
name|QBENCHMARK
block|{
name|std
operator|::
name|istringstream
name|split
argument_list|(
name|stdinput
argument_list|)
decl_stmt|;
name|std
operator|::
name|list
argument_list|<
name|std
operator|::
name|string
argument_list|>
name|token
decl_stmt|;
for|for
control|(
name|std
operator|::
name|string
name|each
init|;
name|std
operator|::
name|getline
argument_list|(
name|split
argument_list|,
name|each
argument_list|,
name|split_char
argument_list|)
condition|;
name|token
operator|.
name|push_back
argument_list|(
name|each
argument_list|)
control|)
empty_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QStringList
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
