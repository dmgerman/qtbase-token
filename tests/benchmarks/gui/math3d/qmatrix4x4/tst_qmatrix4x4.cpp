begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/qmatrix4x4.h>
end_include
begin_class
DECL|class|tst_QMatrix4x4
class|class
name|tst_QMatrix4x4
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QMatrix4x4
name|tst_QMatrix4x4
parameter_list|()
block|{}
DECL|function|~tst_QMatrix4x4
name|~
name|tst_QMatrix4x4
parameter_list|()
block|{}
private|private
name|slots
private|:
name|void
name|multiply_data
parameter_list|()
function_decl|;
name|void
name|multiply
parameter_list|()
function_decl|;
name|void
name|multiplyInPlace_data
parameter_list|()
function_decl|;
name|void
name|multiplyInPlace
parameter_list|()
function_decl|;
name|void
name|multiplyDirect_data
parameter_list|()
function_decl|;
name|void
name|multiplyDirect
parameter_list|()
function_decl|;
name|void
name|mapVector3D_data
parameter_list|()
function_decl|;
name|void
name|mapVector3D
parameter_list|()
function_decl|;
name|void
name|mapVector2D_data
parameter_list|()
function_decl|;
name|void
name|mapVector2D
parameter_list|()
function_decl|;
name|void
name|mapVectorDirect_data
parameter_list|()
function_decl|;
name|void
name|mapVectorDirect
parameter_list|()
function_decl|;
name|void
name|compareTranslate_data
parameter_list|()
function_decl|;
name|void
name|compareTranslate
parameter_list|()
function_decl|;
name|void
name|compareTranslateAfterScale_data
parameter_list|()
function_decl|;
name|void
name|compareTranslateAfterScale
parameter_list|()
function_decl|;
name|void
name|compareTranslateAfterRotate_data
parameter_list|()
function_decl|;
name|void
name|compareTranslateAfterRotate
parameter_list|()
function_decl|;
name|void
name|compareScale_data
parameter_list|()
function_decl|;
name|void
name|compareScale
parameter_list|()
function_decl|;
name|void
name|compareScaleAfterTranslate_data
parameter_list|()
function_decl|;
name|void
name|compareScaleAfterTranslate
parameter_list|()
function_decl|;
name|void
name|compareScaleAfterRotate_data
parameter_list|()
function_decl|;
name|void
name|compareScaleAfterRotate
parameter_list|()
function_decl|;
name|void
name|compareRotate_data
parameter_list|()
function_decl|;
name|void
name|compareRotate
parameter_list|()
function_decl|;
name|void
name|compareRotateAfterTranslate_data
parameter_list|()
function_decl|;
name|void
name|compareRotateAfterTranslate
parameter_list|()
function_decl|;
name|void
name|compareRotateAfterScale_data
parameter_list|()
function_decl|;
name|void
name|compareRotateAfterScale
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|generalValues
specifier|static
name|float
specifier|const
name|generalValues
index|[
literal|16
index|]
init|=
block|{
literal|1.0f
block|,
literal|2.0f
block|,
literal|3.0f
block|,
literal|4.0f
block|,
literal|5.0f
block|,
literal|6.0f
block|,
literal|7.0f
block|,
literal|8.0f
block|,
literal|9.0f
block|,
literal|10.0f
block|,
literal|11.0f
block|,
literal|12.0f
block|,
literal|13.0f
block|,
literal|14.0f
block|,
literal|15.0f
block|,
literal|16.0f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|multiply_data
name|void
name|tst_QMatrix4x4
operator|::
name|multiply_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
literal|"m1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
literal|"m2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity * identity"
argument_list|)
operator|<<
name|QMatrix4x4
argument_list|()
operator|<<
name|QMatrix4x4
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity * general"
argument_list|)
operator|<<
name|QMatrix4x4
argument_list|()
operator|<<
name|QMatrix4x4
argument_list|(
name|generalValues
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"general * identity"
argument_list|)
operator|<<
name|QMatrix4x4
argument_list|(
name|generalValues
argument_list|)
operator|<<
name|QMatrix4x4
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"general * general"
argument_list|)
operator|<<
name|QMatrix4x4
argument_list|(
name|generalValues
argument_list|)
operator|<<
name|QMatrix4x4
argument_list|(
name|generalValues
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|mresult
name|QMatrix4x4
name|mresult
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|multiply
name|void
name|tst_QMatrix4x4
operator|::
name|multiply
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
decl_stmt|;
name|QBENCHMARK
block|{
name|m3
operator|=
name|m1
operator|*
name|m2
expr_stmt|;
block|}
comment|// Force the result to be stored so the compiler doesn't
comment|// optimize away the contents of the benchmark loop.
name|mresult
operator|=
name|m3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiplyInPlace_data
name|void
name|tst_QMatrix4x4
operator|::
name|multiplyInPlace_data
parameter_list|()
block|{
name|multiply_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiplyInPlace
name|void
name|tst_QMatrix4x4
operator|::
name|multiplyInPlace
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
decl_stmt|;
name|QBENCHMARK
block|{
name|m3
operator|=
name|m1
expr_stmt|;
name|m3
operator|*=
name|m2
expr_stmt|;
block|}
comment|// Force the result to be stored so the compiler doesn't
comment|// optimize away the contents of the benchmark loop.
name|mresult
operator|=
name|m3
expr_stmt|;
block|}
end_function
begin_comment
comment|// Use a direct naive multiplication algorithm.  This is used
end_comment
begin_comment
comment|// to compare against the optimized routines to see if they are
end_comment
begin_comment
comment|// actually faster than the naive implementation.
end_comment
begin_function
DECL|function|multiplyDirect_data
name|void
name|tst_QMatrix4x4
operator|::
name|multiplyDirect_data
parameter_list|()
block|{
name|multiply_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multiplyDirect
name|void
name|tst_QMatrix4x4
operator|::
name|multiplyDirect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m3
decl_stmt|;
specifier|const
name|float
modifier|*
name|m1data
init|=
name|m1
operator|.
name|constData
argument_list|()
decl_stmt|;
specifier|const
name|float
modifier|*
name|m2data
init|=
name|m2
operator|.
name|constData
argument_list|()
decl_stmt|;
name|float
modifier|*
name|m3data
init|=
name|m3
operator|.
name|data
argument_list|()
decl_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|4
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|4
condition|;
operator|++
name|col
control|)
block|{
name|m3data
index|[
name|col
operator|*
literal|4
operator|+
name|row
index|]
operator|=
literal|0.0f
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
operator|++
name|j
control|)
block|{
name|m3data
index|[
name|col
operator|*
literal|4
operator|+
name|row
index|]
operator|+=
name|m1data
index|[
name|j
operator|*
literal|4
operator|+
name|row
index|]
operator|*
name|m2data
index|[
name|col
operator|*
literal|4
operator|+
name|j
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|vresult
name|QVector3D
name|vresult
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|mapVector3D_data
name|void
name|tst_QMatrix4x4
operator|::
name|mapVector3D_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
literal|"m1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"identity"
argument_list|)
operator|<<
name|QMatrix4x4
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"general"
argument_list|)
operator|<<
name|QMatrix4x4
argument_list|(
name|generalValues
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|t1
decl_stmt|;
name|t1
operator|.
name|translate
argument_list|(
operator|-
literal|100.5f
argument_list|,
literal|64.0f
argument_list|,
literal|75.25f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"translate3D"
argument_list|)
operator|<<
name|t1
expr_stmt|;
name|QMatrix4x4
name|t2
decl_stmt|;
name|t2
operator|.
name|translate
argument_list|(
operator|-
literal|100.5f
argument_list|,
literal|64.0f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"translate2D"
argument_list|)
operator|<<
name|t2
expr_stmt|;
name|QMatrix4x4
name|s1
decl_stmt|;
name|s1
operator|.
name|scale
argument_list|(
operator|-
literal|100.5f
argument_list|,
literal|64.0f
argument_list|,
literal|75.25f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scale3D"
argument_list|)
operator|<<
name|s1
expr_stmt|;
name|QMatrix4x4
name|s2
decl_stmt|;
name|s2
operator|.
name|scale
argument_list|(
operator|-
literal|100.5f
argument_list|,
literal|64.0f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scale2D"
argument_list|)
operator|<<
name|s2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapVector3D
name|void
name|tst_QMatrix4x4
operator|::
name|mapVector3D
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|QVector3D
name|v
argument_list|(
literal|10.5f
argument_list|,
operator|-
literal|2.0f
argument_list|,
literal|3.0f
argument_list|)
decl_stmt|;
name|QVector3D
name|result
decl_stmt|;
name|m1
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QBENCHMARK
block|{
name|result
operator|=
name|m1
operator|*
name|v
expr_stmt|;
block|}
comment|// Force the result to be stored so the compiler doesn't
comment|// optimize away the contents of the benchmark loop.
name|vresult
operator|=
name|result
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|vresult2
name|QPointF
name|vresult2
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|mapVector2D_data
name|void
name|tst_QMatrix4x4
operator|::
name|mapVector2D_data
parameter_list|()
block|{
name|mapVector3D_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapVector2D
name|void
name|tst_QMatrix4x4
operator|::
name|mapVector2D
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|QPointF
name|v
argument_list|(
literal|10.5f
argument_list|,
operator|-
literal|2.0f
argument_list|)
decl_stmt|;
name|QPointF
name|result
decl_stmt|;
name|m1
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QBENCHMARK
block|{
name|result
operator|=
name|m1
operator|*
name|v
expr_stmt|;
block|}
comment|// Force the result to be stored so the compiler doesn't
comment|// optimize away the contents of the benchmark loop.
name|vresult2
operator|=
name|result
expr_stmt|;
block|}
end_function
begin_comment
comment|// Use a direct naive multiplication algorithm.  This is used
end_comment
begin_comment
comment|// to compare against the optimized routines to see if they are
end_comment
begin_comment
comment|// actually faster than the naive implementation.
end_comment
begin_function
DECL|function|mapVectorDirect_data
name|void
name|tst_QMatrix4x4
operator|::
name|mapVectorDirect_data
parameter_list|()
block|{
name|mapVector3D_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapVectorDirect
name|void
name|tst_QMatrix4x4
operator|::
name|mapVectorDirect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMatrix4x4
argument_list|,
name|m1
argument_list|)
expr_stmt|;
specifier|const
name|float
modifier|*
name|m1data
init|=
name|m1
operator|.
name|constData
argument_list|()
decl_stmt|;
name|float
name|v
index|[
literal|4
index|]
init|=
block|{
literal|10.5f
block|,
operator|-
literal|2.0f
block|,
literal|3.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|float
name|result
index|[
literal|4
index|]
decl_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
literal|4
condition|;
operator|++
name|row
control|)
block|{
name|result
index|[
name|row
index|]
operator|=
literal|0.0f
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
literal|4
condition|;
operator|++
name|col
control|)
block|{
name|result
index|[
name|row
index|]
operator|+=
name|m1data
index|[
name|col
operator|*
literal|4
operator|+
name|row
index|]
operator|*
name|v
index|[
name|col
index|]
expr_stmt|;
block|}
block|}
name|result
index|[
literal|0
index|]
operator|/=
name|result
index|[
literal|3
index|]
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|/=
name|result
index|[
literal|3
index|]
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|/=
name|result
index|[
literal|3
index|]
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Compare the performance of QTransform::translate() to
end_comment
begin_comment
comment|// QMatrix4x4::translate().
end_comment
begin_function
DECL|function|compareTranslate_data
name|void
name|tst_QMatrix4x4
operator|::
name|compareTranslate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useQTransform"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
literal|"translation"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::translate(0, 0, 0)"
argument_list|)
operator|<<
literal|true
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::translate(0, 0, 0)"
argument_list|)
operator|<<
literal|false
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::translate(1, 2, 0)"
argument_list|)
operator|<<
literal|true
operator|<<
name|QVector3D
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::translate(1, 2, 0)"
argument_list|)
operator|<<
literal|false
operator|<<
name|QVector3D
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::translate(1, 2, 4)"
argument_list|)
operator|<<
literal|true
operator|<<
name|QVector3D
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::translate(1, 2, 4)"
argument_list|)
operator|<<
literal|false
operator|<<
name|QVector3D
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareTranslate
name|void
name|tst_QMatrix4x4
operator|::
name|compareTranslate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useQTransform
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|translation
argument_list|)
expr_stmt|;
name|float
name|x
init|=
name|translation
operator|.
name|x
argument_list|()
decl_stmt|;
name|float
name|y
init|=
name|translation
operator|.
name|y
argument_list|()
decl_stmt|;
name|float
name|z
init|=
name|translation
operator|.
name|z
argument_list|()
decl_stmt|;
if|if
condition|(
name|useQTransform
condition|)
block|{
name|QTransform
name|t
decl_stmt|;
name|QBENCHMARK
block|{
name|t
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|0.0f
condition|)
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Compare the performance of QTransform::translate() to
end_comment
begin_comment
comment|// QMatrix4x4::translate() after priming the matrix with a scale().
end_comment
begin_function
DECL|function|compareTranslateAfterScale_data
name|void
name|tst_QMatrix4x4
operator|::
name|compareTranslateAfterScale_data
parameter_list|()
block|{
name|compareTranslate_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareTranslateAfterScale
name|void
name|tst_QMatrix4x4
operator|::
name|compareTranslateAfterScale
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useQTransform
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|translation
argument_list|)
expr_stmt|;
name|float
name|x
init|=
name|translation
operator|.
name|x
argument_list|()
decl_stmt|;
name|float
name|y
init|=
name|translation
operator|.
name|y
argument_list|()
decl_stmt|;
name|float
name|z
init|=
name|translation
operator|.
name|z
argument_list|()
decl_stmt|;
if|if
condition|(
name|useQTransform
condition|)
block|{
name|QTransform
name|t
decl_stmt|;
name|t
operator|.
name|scale
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|t
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|0.0f
condition|)
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|scale
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|scale
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Compare the performance of QTransform::translate() to
end_comment
begin_comment
comment|// QMatrix4x4::translate() after priming the matrix with a rotate().
end_comment
begin_function
DECL|function|compareTranslateAfterRotate_data
name|void
name|tst_QMatrix4x4
operator|::
name|compareTranslateAfterRotate_data
parameter_list|()
block|{
name|compareTranslate_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareTranslateAfterRotate
name|void
name|tst_QMatrix4x4
operator|::
name|compareTranslateAfterRotate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useQTransform
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|translation
argument_list|)
expr_stmt|;
name|float
name|x
init|=
name|translation
operator|.
name|x
argument_list|()
decl_stmt|;
name|float
name|y
init|=
name|translation
operator|.
name|y
argument_list|()
decl_stmt|;
name|float
name|z
init|=
name|translation
operator|.
name|z
argument_list|()
decl_stmt|;
if|if
condition|(
name|useQTransform
condition|)
block|{
name|QTransform
name|t
decl_stmt|;
name|t
operator|.
name|rotate
argument_list|(
literal|45.0f
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|t
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|0.0f
condition|)
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|rotate
argument_list|(
literal|45.0f
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|rotate
argument_list|(
literal|45.0f
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Compare the performance of QTransform::scale() to
end_comment
begin_comment
comment|// QMatrix4x4::scale().
end_comment
begin_function
DECL|function|compareScale_data
name|void
name|tst_QMatrix4x4
operator|::
name|compareScale_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useQTransform"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
literal|"scale"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::scale(1, 1, 1)"
argument_list|)
operator|<<
literal|true
operator|<<
name|QVector3D
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::scale(1, 1, 1)"
argument_list|)
operator|<<
literal|false
operator|<<
name|QVector3D
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::scale(3, 6, 1)"
argument_list|)
operator|<<
literal|true
operator|<<
name|QVector3D
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::scale(3, 6, 1)"
argument_list|)
operator|<<
literal|false
operator|<<
name|QVector3D
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::scale(3, 6, 4)"
argument_list|)
operator|<<
literal|true
operator|<<
name|QVector3D
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::scale(3, 6, 4)"
argument_list|)
operator|<<
literal|false
operator|<<
name|QVector3D
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareScale
name|void
name|tst_QMatrix4x4
operator|::
name|compareScale
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useQTransform
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|float
name|x
init|=
name|scale
operator|.
name|x
argument_list|()
decl_stmt|;
name|float
name|y
init|=
name|scale
operator|.
name|y
argument_list|()
decl_stmt|;
name|float
name|z
init|=
name|scale
operator|.
name|z
argument_list|()
decl_stmt|;
if|if
condition|(
name|useQTransform
condition|)
block|{
name|QTransform
name|t
decl_stmt|;
name|QBENCHMARK
block|{
name|t
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|1.0f
condition|)
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Compare the performance of QTransform::scale() to
end_comment
begin_comment
comment|// QMatrix4x4::scale() after priming the matrix with a translate().
end_comment
begin_function
DECL|function|compareScaleAfterTranslate_data
name|void
name|tst_QMatrix4x4
operator|::
name|compareScaleAfterTranslate_data
parameter_list|()
block|{
name|compareScale_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareScaleAfterTranslate
name|void
name|tst_QMatrix4x4
operator|::
name|compareScaleAfterTranslate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useQTransform
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|float
name|x
init|=
name|scale
operator|.
name|x
argument_list|()
decl_stmt|;
name|float
name|y
init|=
name|scale
operator|.
name|y
argument_list|()
decl_stmt|;
name|float
name|z
init|=
name|scale
operator|.
name|z
argument_list|()
decl_stmt|;
if|if
condition|(
name|useQTransform
condition|)
block|{
name|QTransform
name|t
decl_stmt|;
name|t
operator|.
name|translate
argument_list|(
literal|20
argument_list|,
literal|34
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|t
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|1.0f
condition|)
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|translate
argument_list|(
literal|20
argument_list|,
literal|34
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|translate
argument_list|(
literal|20
argument_list|,
literal|34
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Compare the performance of QTransform::scale() to
end_comment
begin_comment
comment|// QMatrix4x4::scale() after priming the matrix with a rotate().
end_comment
begin_function
DECL|function|compareScaleAfterRotate_data
name|void
name|tst_QMatrix4x4
operator|::
name|compareScaleAfterRotate_data
parameter_list|()
block|{
name|compareScale_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareScaleAfterRotate
name|void
name|tst_QMatrix4x4
operator|::
name|compareScaleAfterRotate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useQTransform
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|float
name|x
init|=
name|scale
operator|.
name|x
argument_list|()
decl_stmt|;
name|float
name|y
init|=
name|scale
operator|.
name|y
argument_list|()
decl_stmt|;
name|float
name|z
init|=
name|scale
operator|.
name|z
argument_list|()
decl_stmt|;
if|if
condition|(
name|useQTransform
condition|)
block|{
name|QTransform
name|t
decl_stmt|;
name|t
operator|.
name|rotate
argument_list|(
literal|45.0f
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|t
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|1.0f
condition|)
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|rotate
argument_list|(
literal|45.0f
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|rotate
argument_list|(
literal|45.0f
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|scale
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Compare the performance of QTransform::rotate() to
end_comment
begin_comment
comment|// QMatrix4x4::rotate().
end_comment
begin_function
DECL|function|compareRotate_data
name|void
name|tst_QMatrix4x4
operator|::
name|compareRotate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useQTransform"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"angle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
literal|"rotation"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"axis"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::rotate(0, ZAxis)"
argument_list|)
operator|<<
literal|true
operator|<<
literal|0.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ZAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::rotate(0, ZAxis)"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ZAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::rotate(45, ZAxis)"
argument_list|)
operator|<<
literal|true
operator|<<
literal|45.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ZAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::rotate(45, ZAxis)"
argument_list|)
operator|<<
literal|false
operator|<<
literal|45.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ZAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::rotate(90, ZAxis)"
argument_list|)
operator|<<
literal|true
operator|<<
literal|90.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ZAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::rotate(90, ZAxis)"
argument_list|)
operator|<<
literal|false
operator|<<
literal|90.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|ZAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::rotate(0, YAxis)"
argument_list|)
operator|<<
literal|true
operator|<<
literal|0.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|YAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::rotate(0, YAxis)"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|YAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::rotate(45, YAxis)"
argument_list|)
operator|<<
literal|true
operator|<<
literal|45.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|YAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::rotate(45, YAxis)"
argument_list|)
operator|<<
literal|false
operator|<<
literal|45.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|YAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::rotate(90, YAxis)"
argument_list|)
operator|<<
literal|true
operator|<<
literal|90.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|YAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::rotate(90, YAxis)"
argument_list|)
operator|<<
literal|false
operator|<<
literal|90.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|YAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::rotate(0, XAxis)"
argument_list|)
operator|<<
literal|true
operator|<<
literal|0.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|XAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::rotate(0, XAxis)"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0f
operator|<<
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|XAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::rotate(45, XAxis)"
argument_list|)
operator|<<
literal|true
operator|<<
literal|45.0f
operator|<<
name|QVector3D
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|XAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::rotate(45, XAxis)"
argument_list|)
operator|<<
literal|false
operator|<<
literal|45.0f
operator|<<
name|QVector3D
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|XAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTransform::rotate(90, XAxis)"
argument_list|)
operator|<<
literal|true
operator|<<
literal|90.0f
operator|<<
name|QVector3D
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|XAxis
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMatrix4x4::rotate(90, XAxis)"
argument_list|)
operator|<<
literal|false
operator|<<
literal|90.0f
operator|<<
name|QVector3D
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|XAxis
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareRotate
name|void
name|tst_QMatrix4x4
operator|::
name|compareRotate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useQTransform
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|angle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|rotation
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|axis
argument_list|)
expr_stmt|;
name|float
name|x
init|=
name|rotation
operator|.
name|x
argument_list|()
decl_stmt|;
name|float
name|y
init|=
name|rotation
operator|.
name|y
argument_list|()
decl_stmt|;
name|float
name|z
init|=
name|rotation
operator|.
name|z
argument_list|()
decl_stmt|;
if|if
condition|(
name|useQTransform
condition|)
block|{
name|QTransform
name|t
decl_stmt|;
name|QBENCHMARK
block|{
name|t
operator|.
name|rotate
argument_list|(
name|angle
argument_list|,
name|Qt
operator|::
name|Axis
argument_list|(
name|axis
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|rotate
argument_list|(
name|angle
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Compare the performance of QTransform::rotate() to
end_comment
begin_comment
comment|// QMatrix4x4::rotate() after priming the matrix with a translate().
end_comment
begin_function
DECL|function|compareRotateAfterTranslate_data
name|void
name|tst_QMatrix4x4
operator|::
name|compareRotateAfterTranslate_data
parameter_list|()
block|{
name|compareRotate_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareRotateAfterTranslate
name|void
name|tst_QMatrix4x4
operator|::
name|compareRotateAfterTranslate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useQTransform
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|angle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|rotation
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|axis
argument_list|)
expr_stmt|;
name|float
name|x
init|=
name|rotation
operator|.
name|x
argument_list|()
decl_stmt|;
name|float
name|y
init|=
name|rotation
operator|.
name|y
argument_list|()
decl_stmt|;
name|float
name|z
init|=
name|rotation
operator|.
name|z
argument_list|()
decl_stmt|;
if|if
condition|(
name|useQTransform
condition|)
block|{
name|QTransform
name|t
decl_stmt|;
name|t
operator|.
name|translate
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|t
operator|.
name|rotate
argument_list|(
name|angle
argument_list|,
name|Qt
operator|::
name|Axis
argument_list|(
name|axis
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|translate
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|rotate
argument_list|(
name|angle
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Compare the performance of QTransform::rotate() to
end_comment
begin_comment
comment|// QMatrix4x4::rotate() after priming the matrix with a scale().
end_comment
begin_function
DECL|function|compareRotateAfterScale_data
name|void
name|tst_QMatrix4x4
operator|::
name|compareRotateAfterScale_data
parameter_list|()
block|{
name|compareRotate_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareRotateAfterScale
name|void
name|tst_QMatrix4x4
operator|::
name|compareRotateAfterScale
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useQTransform
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|angle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVector3D
argument_list|,
name|rotation
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|axis
argument_list|)
expr_stmt|;
name|float
name|x
init|=
name|rotation
operator|.
name|x
argument_list|()
decl_stmt|;
name|float
name|y
init|=
name|rotation
operator|.
name|y
argument_list|()
decl_stmt|;
name|float
name|z
init|=
name|rotation
operator|.
name|z
argument_list|()
decl_stmt|;
if|if
condition|(
name|useQTransform
condition|)
block|{
name|QTransform
name|t
decl_stmt|;
name|t
operator|.
name|scale
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|t
operator|.
name|rotate
argument_list|(
name|angle
argument_list|,
name|Qt
operator|::
name|Axis
argument_list|(
name|axis
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|scale
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|m
operator|.
name|rotate
argument_list|(
name|angle
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMatrix4x4
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmatrix4x4.moc"
end_include
end_unit
