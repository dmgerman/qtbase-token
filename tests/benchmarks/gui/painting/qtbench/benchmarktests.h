begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the FOO module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|BENCHMARKTESTS_H
end_ifndef
begin_define
DECL|macro|BENCHMARKTESTS_H
define|#
directive|define
name|BENCHMARKTESTS_H
end_define
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QTextDocument>
end_include
begin_include
include|#
directive|include
file|<QDesktopWidget>
end_include
begin_include
include|#
directive|include
file|<QTextLayout>
end_include
begin_include
include|#
directive|include
file|<QFontMetrics>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QStaticText>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_decl_stmt
name|class
name|Benchmark
block|{
name|public
label|:
name|virtual
operator|~
name|Benchmark
argument_list|()
block|{}
name|Benchmark
argument_list|(
specifier|const
name|QSize
operator|&
name|size
argument_list|)
operator|:
name|m_size
argument_list|(
argument|size
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
block|{
name|m_colors
index|[
name|i
index|]
operator|=
name|QColor
operator|::
name|fromRgbF
argument_list|(
operator|(
name|rand
argument_list|()
operator|%
literal|4
operator|)
operator|/
literal|3.0
argument_list|,
operator|(
name|rand
argument_list|()
operator|%
literal|4
operator|)
operator|/
literal|3.0
argument_list|,
operator|(
name|rand
argument_list|()
operator|%
literal|4
operator|)
operator|/
literal|3.0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int iteration
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|QString
name|name
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
specifier|inline
specifier|const
name|QSize
operator|&
name|size
argument_list|()
specifier|const
block|{
return|return
name|m_size
return|;
block|}
name|virtual
name|void
name|begin
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
name|int
name|iterations
init|=
literal|1
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|iterations
argument_list|)
expr_stmt|;
block|}
name|virtual
name|void
name|end
parameter_list|(
name|QPainter
modifier|*
parameter_list|)
block|{ }
specifier|inline
specifier|const
name|QColor
modifier|&
name|randomColor
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|m_colors
index|[
name|i
operator|%
literal|16
index|]
return|;
block|}
name|protected
label|:
name|QColor
name|m_colors
index|[
literal|16
index|]
decl_stmt|;
name|QSize
name|m_size
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|PaintingRectAdjuster
block|{
name|public
label|:
name|PaintingRectAdjuster
argument_list|()
operator|:
name|m_benchmark
argument_list|(
literal|0
argument_list|)
operator|,
name|m_bounds
argument_list|()
operator|,
name|m_screen_filled
argument_list|(
argument|false
argument_list|)
block|{     }
specifier|const
name|QRect
operator|&
name|newPaintingRect
argument_list|()
block|{
name|m_rect
operator|.
name|translate
argument_list|(
name|m_rect
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
block|;
if|if
condition|(
name|m_rect
operator|.
name|right
argument_list|()
operator|>
name|m_bounds
operator|.
name|width
argument_list|()
condition|)
block|{
name|m_rect
operator|.
name|moveLeft
argument_list|(
name|m_bounds
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|m_rect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|m_rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_rect
operator|.
name|bottom
argument_list|()
operator|>
name|m_bounds
operator|.
name|height
argument_list|()
condition|)
block|{
name|m_screen_filled
operator|=
name|true
expr_stmt|;
name|m_rect
operator|.
name|moveTo
argument_list|(
name|m_bounds
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|m_rect
return|;
block|}
specifier|inline
name|bool
name|isScreenFilled
argument_list|()
specifier|const
block|{
return|return
name|m_screen_filled
return|;
block|}
name|void
name|reset
parameter_list|(
specifier|const
name|QRect
modifier|&
name|bounds
parameter_list|)
block|{
name|m_bounds
operator|=
name|bounds
expr_stmt|;
name|m_rect
operator|.
name|moveTo
argument_list|(
name|m_bounds
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|m_rect
operator|=
name|QRect
argument_list|(
name|m_bounds
operator|.
name|topLeft
argument_list|()
argument_list|,
name|m_benchmark
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|m_rect
operator|.
name|translate
argument_list|(
operator|-
name|m_rect
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_screen_filled
operator|=
name|false
expr_stmt|;
block|}
specifier|inline
name|void
name|setNewBenchmark
parameter_list|(
name|Benchmark
modifier|*
name|benchmark
parameter_list|)
block|{
name|m_benchmark
operator|=
name|benchmark
expr_stmt|;
block|}
name|protected
label|:
name|Benchmark
modifier|*
name|m_benchmark
decl_stmt|;
name|QRect
name|m_rect
decl_stmt|;
name|QRect
name|m_bounds
decl_stmt|;
name|bool
name|m_screen_filled
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|FillRectBenchmark
range|:
name|public
name|Benchmark
block|{
name|public
operator|:
name|FillRectBenchmark
argument_list|(
argument|int size
argument_list|)
operator|:
name|Benchmark
argument_list|(
argument|QSize(size, size)
argument_list|)
block|{     }
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int iterationCount
argument_list|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|randomColor
argument_list|(
name|iterationCount
argument_list|)
argument_list|)
block|;     }
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"fillRect(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
name|class
name|ImageFillRectBenchmark
operator|:
name|public
name|Benchmark
block|{
name|public
operator|:
name|ImageFillRectBenchmark
argument_list|(
argument|int size
argument_list|)
operator|:
name|Benchmark
argument_list|(
argument|QSize(size, size)
argument_list|)
block|{
name|int
name|s
operator|=
name|rand
argument_list|()
operator|%
literal|24
operator|+
literal|8
block|;
name|m_content
operator|=
name|QImage
argument_list|(
name|s
argument_list|,
name|s
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
block|;
name|QPainter
name|p
argument_list|(
operator|&
name|m_content
argument_list|)
block|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|s
argument_list|,
name|s
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
block|;
name|p
operator|.
name|fillRect
argument_list|(
name|s
operator|/
literal|2
argument_list|,
literal|0
argument_list|,
name|s
operator|/
literal|2
argument_list|,
name|s
operator|/
literal|2
argument_list|,
name|Qt
operator|::
name|gray
argument_list|)
block|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
name|s
operator|/
literal|2
argument_list|,
name|s
operator|/
literal|2
argument_list|,
name|s
operator|/
literal|2
argument_list|,
name|Qt
operator|::
name|gray
argument_list|)
block|;
name|p
operator|.
name|end
argument_list|()
block|;
name|m_brush
operator|=
name|QBrush
argument_list|(
name|m_content
argument_list|)
block|;     }
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int
argument_list|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|m_brush
argument_list|)
block|;     }
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"fillRect with image(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
return|;
block|}
name|private
operator|:
name|QImage
name|m_content
block|;
name|QBrush
name|m_brush
block|; }
block|;
name|class
name|DrawRectBenchmark
operator|:
name|public
name|Benchmark
block|{
name|public
operator|:
name|DrawRectBenchmark
argument_list|(
argument|int size
argument_list|)
operator|:
name|Benchmark
argument_list|(
argument|QSize(size, size)
argument_list|)
block|{     }
name|virtual
name|void
name|begin
argument_list|(
argument|QPainter *p
argument_list|,
argument|int
argument_list|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
block|;
name|p
operator|->
name|setBrush
argument_list|(
name|randomColor
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
block|;     }
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int
argument_list|)
block|{
name|p
operator|->
name|drawRect
argument_list|(
name|rect
argument_list|)
block|;     }
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"drawRect(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
name|class
name|DrawRectWithBrushChangeBenchmark
operator|:
name|public
name|Benchmark
block|{
name|public
operator|:
name|DrawRectWithBrushChangeBenchmark
argument_list|(
argument|int size
argument_list|)
operator|:
name|Benchmark
argument_list|(
argument|QSize(size, size)
argument_list|)
block|{     }
name|virtual
name|void
name|begin
argument_list|(
argument|QPainter *p
argument_list|,
argument|int
argument_list|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
block|;     }
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int i
argument_list|)
block|{
name|p
operator|->
name|setBrush
argument_list|(
name|randomColor
argument_list|(
name|i
argument_list|)
argument_list|)
block|;
name|p
operator|->
name|drawRect
argument_list|(
name|rect
argument_list|)
block|;     }
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"drawRect with brushchange(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
name|class
name|RoundRectBenchmark
operator|:
name|public
name|Benchmark
block|{
name|public
operator|:
name|RoundRectBenchmark
argument_list|(
argument|int size
argument_list|)
operator|:
name|Benchmark
argument_list|(
argument|QSize(size, size)
argument_list|)
block|{
name|m_roundness
operator|=
name|size
operator|/
literal|4.
block|;     }
name|virtual
name|void
name|begin
argument_list|(
argument|QPainter *p
argument_list|,
argument|int
argument_list|)
block|{
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
block|;
name|p
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
block|;     }
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int
argument_list|)
block|{
name|p
operator|->
name|drawRoundedRect
argument_list|(
name|rect
argument_list|,
name|m_roundness
argument_list|,
name|m_roundness
argument_list|)
block|;     }
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"drawRoundedRect(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
return|;
block|}
name|qreal
name|m_roundness
block|; }
block|;
name|class
name|ArcsBenchmark
operator|:
name|public
name|Benchmark
block|{
name|public
operator|:
expr|enum
name|Type
block|{
name|Stroked
operator|=
literal|0x0001
block|,
name|Filled
operator|=
literal|0x0002
block|,
name|ArcShape
operator|=
literal|0x0010
block|,
name|ChordShape
operator|=
literal|0x0020
block|,
name|PieShape
operator|=
literal|0x0040
block|,
name|CircleShape
operator|=
literal|0x0080
block|,
name|Shapes
operator|=
literal|0x00f0
block|}
block|;
name|ArcsBenchmark
argument_list|(
argument|int size
argument_list|,
argument|uint type
argument_list|)
operator|:
name|Benchmark
argument_list|(
name|QSize
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
argument_list|)
block|,
name|m_type
argument_list|(
argument|type
argument_list|)
block|{     }
name|virtual
name|void
name|begin
argument_list|(
argument|QPainter *p
argument_list|,
argument|int
argument_list|)
block|{
if|if
condition|(
name|m_type
operator|&
name|Stroked
condition|)
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_type
operator|&
name|Filled
condition|)
name|p
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
block|}
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int
argument_list|)
block|{
switch|switch
condition|(
name|m_type
operator|&
name|Shapes
condition|)
block|{
case|case
name|ArcShape
case|:
name|p
operator|->
name|drawArc
argument_list|(
name|rect
argument_list|,
literal|45
operator|*
literal|16
argument_list|,
literal|120
operator|*
literal|16
argument_list|)
expr_stmt|;
break|break;
case|case
name|ChordShape
case|:
name|p
operator|->
name|drawChord
argument_list|(
name|rect
argument_list|,
literal|45
operator|*
literal|16
argument_list|,
literal|120
operator|*
literal|16
argument_list|)
expr_stmt|;
break|break;
case|case
name|PieShape
case|:
name|p
operator|->
name|drawPie
argument_list|(
name|rect
argument_list|,
literal|45
operator|*
literal|16
argument_list|,
literal|120
operator|*
literal|16
argument_list|)
expr_stmt|;
break|break;
case|case
name|CircleShape
case|:
name|p
operator|->
name|drawEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
name|QString
name|fillStroke
block|;
if|if
condition|(
operator|(
name|m_type
operator|&
operator|(
name|Stroked
operator||
name|Filled
operator|)
operator|)
operator|==
operator|(
name|Stroked
operator||
name|Filled
operator|)
condition|)
block|{
name|fillStroke
operator|=
name|QLatin1String
argument_list|(
literal|"Fill& Outline"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_type
operator|&
name|Stroked
condition|)
block|{
name|fillStroke
operator|=
name|QLatin1String
argument_list|(
literal|"Outline"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_type
operator|&
name|Filled
condition|)
block|{
name|fillStroke
operator|=
name|QLatin1String
argument_list|(
literal|"Fill"
argument_list|)
expr_stmt|;
block|}
name|QString
name|shape
decl_stmt|;
if|if
condition|(
name|m_type
operator|&
name|PieShape
condition|)
name|shape
operator|=
name|QLatin1String
argument_list|(
literal|"drawPie"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|m_type
operator|&
name|ChordShape
condition|)
name|shape
operator|=
name|QLatin1String
argument_list|(
literal|"drawChord"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|m_type
operator|&
name|ArcShape
condition|)
name|shape
operator|=
name|QLatin1String
argument_list|(
literal|"drawArc"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|m_type
operator|&
name|CircleShape
condition|)
name|shape
operator|=
name|QLatin1String
argument_list|(
literal|"drawEllipse"
argument_list|)
expr_stmt|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1(%2) %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|shape
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|fillStroke
argument_list|)
return|;
block|}
name|uint
name|m_type
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|DrawScaledImage
range|:
name|public
name|Benchmark
block|{
name|public
operator|:
name|DrawScaledImage
argument_list|(
argument|const QImage&image
argument_list|,
argument|qreal scale
argument_list|,
argument|bool asPixmap
argument_list|)
operator|:
name|Benchmark
argument_list|(
name|QSize
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
block|,
name|m_image
argument_list|(
name|image
argument_list|)
block|,
name|m_type
argument_list|(
name|m_as_pixmap
operator|?
literal|"Pixmap"
operator|:
literal|"Image"
argument_list|)
block|,
name|m_scale
argument_list|(
name|scale
argument_list|)
block|,
name|m_as_pixmap
argument_list|(
argument|asPixmap
argument_list|)
block|{
name|m_pixmap
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|m_image
argument_list|)
block|;     }
name|DrawScaledImage
argument_list|(
argument|const QString& type
argument_list|,
argument|const QPixmap&pixmap
argument_list|,
argument|qreal scale
argument_list|)
operator|:
name|Benchmark
argument_list|(
name|QSize
argument_list|(
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
block|,
name|m_type
argument_list|(
name|type
argument_list|)
block|,
name|m_scale
argument_list|(
name|scale
argument_list|)
block|,
name|m_as_pixmap
argument_list|(
name|true
argument_list|)
block|,
name|m_pixmap
argument_list|(
argument|pixmap
argument_list|)
block|{     }
name|virtual
name|void
name|begin
argument_list|(
argument|QPainter *p
argument_list|,
argument|int
argument_list|)
block|{
name|p
operator|->
name|scale
argument_list|(
name|m_scale
argument_list|,
name|m_scale
argument_list|)
block|;     }
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int
argument_list|)
block|{
if|if
condition|(
name|m_as_pixmap
condition|)
name|p
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|m_pixmap
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawImage
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|m_image
argument_list|)
expr_stmt|;
block|}
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"draw%4(%1) at scale=%2, depth=%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|m_scale
argument_list|)
operator|.
name|arg
argument_list|(
name|m_as_pixmap
operator|?
name|m_pixmap
operator|.
name|depth
argument_list|()
operator|:
name|m_image
operator|.
name|depth
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|m_type
argument_list|)
return|;
block|}
name|private
operator|:
name|QImage
name|m_image
block|;
name|QString
name|m_type
block|;
name|qreal
name|m_scale
block|;
name|bool
name|m_as_pixmap
block|;
name|QPixmap
name|m_pixmap
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|DrawTransformedImage
range|:
name|public
name|Benchmark
block|{
name|public
operator|:
name|DrawTransformedImage
argument_list|(
argument|const QImage&image
argument_list|,
argument|bool asPixmap
argument_list|)
operator|:
name|Benchmark
argument_list|(
name|QSize
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
block|,
name|m_image
argument_list|(
name|image
argument_list|)
block|,
name|m_type
argument_list|(
name|m_as_pixmap
operator|?
literal|"Pixmap"
operator|:
literal|"Image"
argument_list|)
block|,
name|m_as_pixmap
argument_list|(
argument|asPixmap
argument_list|)
block|{
name|m_pixmap
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|m_image
argument_list|)
block|;     }
name|DrawTransformedImage
argument_list|(
specifier|const
name|QString
operator|&
name|type
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|)
operator|:
name|Benchmark
argument_list|(
name|QSize
argument_list|(
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
block|,
name|m_type
argument_list|(
name|type
argument_list|)
block|,
name|m_as_pixmap
argument_list|(
name|true
argument_list|)
block|,
name|m_pixmap
argument_list|(
argument|pixmap
argument_list|)
block|{     }
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int
argument_list|)
block|{
name|QTransform
name|oldTransform
operator|=
name|p
operator|->
name|transform
argument_list|()
block|;
name|p
operator|->
name|translate
argument_list|(
literal|0.5
operator|*
name|rect
operator|.
name|width
argument_list|()
operator|+
name|rect
operator|.
name|left
argument_list|()
argument_list|,
literal|0.5
operator|*
name|rect
operator|.
name|height
argument_list|()
operator|+
name|rect
operator|.
name|top
argument_list|()
argument_list|)
block|;
name|p
operator|->
name|shear
argument_list|(
literal|0.25
argument_list|,
literal|0.0
argument_list|)
block|;
name|p
operator|->
name|rotate
argument_list|(
literal|5.0
argument_list|)
block|;
if|if
condition|(
name|m_as_pixmap
condition|)
name|p
operator|->
name|drawPixmap
argument_list|(
operator|-
literal|0.5
operator|*
name|rect
operator|.
name|width
argument_list|()
argument_list|,
operator|-
literal|0.5
operator|*
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|m_pixmap
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawImage
argument_list|(
operator|-
literal|0.5
operator|*
name|rect
operator|.
name|width
argument_list|()
argument_list|,
operator|-
literal|0.5
operator|*
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|m_image
argument_list|)
expr_stmt|;
name|p
operator|->
name|setTransform
argument_list|(
name|oldTransform
argument_list|)
block|;     }
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"draw%3(%1) w/transform, depth=%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|m_as_pixmap
operator|?
name|m_pixmap
operator|.
name|depth
argument_list|()
operator|:
name|m_image
operator|.
name|depth
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|m_type
argument_list|)
return|;
block|}
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|QImage
name|m_image
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|m_type
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|m_as_pixmap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QPixmap
name|m_pixmap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|DrawImage
range|:
name|public
name|Benchmark
block|{
name|public
operator|:
name|DrawImage
argument_list|(
argument|const QImage&image
argument_list|,
argument|bool asPixmap
argument_list|)
operator|:
name|Benchmark
argument_list|(
name|QSize
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
block|,
name|m_image
argument_list|(
name|image
argument_list|)
block|,
name|m_type
argument_list|(
name|m_as_pixmap
operator|?
literal|"Pixmap"
operator|:
literal|"Image"
argument_list|)
block|,
name|m_as_pixmap
argument_list|(
argument|asPixmap
argument_list|)
block|{
name|m_pixmap
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
block|;     }
name|DrawImage
argument_list|(
specifier|const
name|QString
operator|&
name|type
argument_list|,
specifier|const
name|QPixmap
operator|&
name|pixmap
argument_list|)
operator|:
name|Benchmark
argument_list|(
name|QSize
argument_list|(
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
block|,
name|m_type
argument_list|(
name|type
argument_list|)
block|,
name|m_as_pixmap
argument_list|(
name|true
argument_list|)
block|,
name|m_pixmap
argument_list|(
argument|pixmap
argument_list|)
block|{     }
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int
argument_list|)
block|{
if|if
condition|(
name|m_as_pixmap
condition|)
name|p
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|m_pixmap
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawImage
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|m_image
argument_list|)
expr_stmt|;
block|}
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"draw%2(%1), depth=%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|m_type
argument_list|)
operator|.
name|arg
argument_list|(
name|m_as_pixmap
operator|?
name|m_pixmap
operator|.
name|depth
argument_list|()
operator|:
name|m_image
operator|.
name|depth
argument_list|()
argument_list|)
return|;
block|}
name|private
operator|:
name|QImage
name|m_image
block|;
name|QString
name|m_type
block|;
name|bool
name|m_as_pixmap
block|;
name|QPixmap
name|m_pixmap
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|DrawText
range|:
name|public
name|Benchmark
block|{
name|public
operator|:
expr|enum
name|Mode
block|{
name|PainterMode
block|,
name|PainterQPointMode
block|,
name|LayoutMode
block|,
name|DocumentMode
block|,
name|PixmapMode
block|,
name|StaticTextMode
block|,
name|StaticTextWithMaximumSizeMode
block|,
name|StaticTextBackendOptimizations
block|}
block|;
name|DrawText
argument_list|(
argument|const QString&text
argument_list|,
argument|Mode mode
argument_list|)
operator|:
name|Benchmark
argument_list|(
name|QSize
argument_list|()
argument_list|)
block|,
name|m_mode
argument_list|(
name|mode
argument_list|)
block|,
name|m_text
argument_list|(
name|text
argument_list|)
block|,
name|m_document
argument_list|(
name|text
argument_list|)
block|,
name|m_layout
argument_list|(
argument|text
argument_list|)
block|{     }
name|virtual
name|void
name|begin
argument_list|(
argument|QPainter *p
argument_list|,
argument|int iterations
argument_list|)
block|{
name|m_staticTexts
operator|.
name|clear
argument_list|()
block|;
name|m_currentStaticText
operator|=
literal|0
block|;
name|m_pixmaps
operator|.
name|clear
argument_list|()
block|;
name|m_currentPixmap
operator|=
literal|0
block|;
name|QRect
name|m_bounds
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|p
operator|->
name|device
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|p
operator|->
name|device
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
block|;
switch|switch
condition|(
name|m_mode
condition|)
block|{
case|case
name|PainterMode
case|:
name|m_size
operator|=
operator|(
name|p
operator|->
name|boundingRect
argument_list|(
name|m_bounds
argument_list|,
literal|0
argument_list|,
name|m_text
argument_list|)
operator|)
operator|.
name|size
argument_list|()
expr_stmt|;
comment|//            m_rect = m_rect.translated(-m_rect.topLeft());
break|break;
case|case
name|DocumentMode
case|:
name|m_size
operator|=
name|QSize
argument_list|(
name|m_document
operator|.
name|size
argument_list|()
operator|.
name|toSize
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PixmapMode
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|m_size
operator|=
operator|(
name|p
operator|->
name|boundingRect
argument_list|(
name|m_bounds
argument_list|,
literal|0
argument_list|,
name|m_text
argument_list|)
operator|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|QPixmap
argument_list|(
name|m_size
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|pixmap
operator|.
name|rect
argument_list|()
argument_list|,
name|m_text
argument_list|)
expr_stmt|;
block|}
name|m_pixmaps
operator|.
name|append
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LayoutMode
case|:
block|{
name|QRect
name|r
operator|=
name|p
operator|->
name|boundingRect
argument_list|(
name|m_bounds
argument_list|,
literal|0
argument_list|,
name|m_text
argument_list|)
block|;
name|QStringList
name|lines
operator|=
name|m_text
operator|.
name|split
argument_list|(
literal|'\n'
argument_list|)
block|;
name|int
name|height
operator|=
literal|0
block|;
name|int
name|leading
operator|=
name|p
operator|->
name|fontMetrics
argument_list|()
operator|.
name|leading
argument_list|()
block|;
name|m_layout
operator|.
name|beginLayout
argument_list|()
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextLine
name|textLine
init|=
name|m_layout
operator|.
name|createLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|textLine
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|textLine
operator|.
name|setLineWidth
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|textLine
operator|.
name|setPosition
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|height
operator|+=
name|leading
operator|+
name|textLine
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
block|}
name|m_layout
operator|.
name|endLayout
argument_list|()
expr_stmt|;
name|m_layout
operator|.
name|setCacheEnabled
argument_list|(
name|true
argument_list|)
block|;
name|m_size
operator|=
name|m_layout
operator|.
name|boundingRect
argument_list|()
operator|.
name|toRect
argument_list|()
operator|.
name|size
argument_list|()
block|;
break|break;
block|}
case|case
name|StaticTextWithMaximumSizeMode
case|:
block|{
name|QStaticText
name|staticText
block|;
name|m_size
operator|=
operator|(
name|p
operator|->
name|boundingRect
argument_list|(
name|m_bounds
argument_list|,
literal|0
argument_list|,
name|m_text
argument_list|)
operator|)
operator|.
name|size
argument_list|()
block|;
name|staticText
operator|.
name|setTextWidth
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
operator|+
literal|10
argument_list|)
block|;
name|staticText
operator|.
name|setText
argument_list|(
name|m_text
argument_list|)
block|;
name|staticText
operator|.
name|prepare
argument_list|(
name|p
operator|->
name|transform
argument_list|()
argument_list|,
name|p
operator|->
name|font
argument_list|()
argument_list|)
block|;
name|m_staticTexts
operator|.
name|append
argument_list|(
name|staticText
argument_list|)
block|;
break|break;
block|}
case|case
name|StaticTextBackendOptimizations
case|:
block|{
name|m_size
operator|=
operator|(
name|p
operator|->
name|boundingRect
argument_list|(
name|m_bounds
argument_list|,
literal|0
argument_list|,
name|m_text
argument_list|)
operator|)
operator|.
name|size
argument_list|()
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
name|QStaticText
name|staticText
decl_stmt|;
name|staticText
operator|.
name|setPerformanceHint
argument_list|(
name|QStaticText
operator|::
name|AggressiveCaching
argument_list|)
expr_stmt|;
name|staticText
operator|.
name|setTextWidth
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
name|staticText
operator|.
name|setText
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
name|staticText
operator|.
name|prepare
argument_list|(
name|p
operator|->
name|transform
argument_list|()
argument_list|,
name|p
operator|->
name|font
argument_list|()
argument_list|)
expr_stmt|;
name|m_staticTexts
operator|.
name|append
argument_list|(
name|staticText
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|StaticTextMode
case|:
block|{
name|QStaticText
name|staticText
block|;
name|staticText
operator|.
name|setText
argument_list|(
name|m_text
argument_list|)
block|;
name|staticText
operator|.
name|prepare
argument_list|(
name|p
operator|->
name|transform
argument_list|()
argument_list|,
name|p
operator|->
name|font
argument_list|()
argument_list|)
block|;
name|m_staticTexts
operator|.
name|append
argument_list|(
name|staticText
argument_list|)
block|;
name|QFontMetrics
name|fm
argument_list|(
name|p
operator|->
name|font
argument_list|()
argument_list|)
block|;
name|m_size
operator|=
name|QSize
argument_list|(
name|fm
operator|.
name|width
argument_list|(
name|m_text
argument_list|,
name|m_text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|fm
operator|.
name|height
argument_list|()
argument_list|)
block|;
break|break;
block|}
case|case
name|PainterQPointMode
case|:
block|{
name|QFontMetrics
name|fm
argument_list|(
name|p
operator|->
name|font
argument_list|()
argument_list|)
block|;
name|m_size
operator|=
name|QSize
argument_list|(
name|fm
operator|.
name|width
argument_list|(
name|m_text
argument_list|,
name|m_text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|fm
operator|.
name|height
argument_list|()
argument_list|)
block|;
break|break;
block|}
expr|}     }
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int
argument_list|)
block|{
switch|switch
condition|(
name|m_mode
condition|)
block|{
case|case
name|PainterMode
case|:
name|p
operator|->
name|drawText
argument_list|(
name|rect
argument_list|,
literal|0
argument_list|,
name|m_text
argument_list|)
expr_stmt|;
break|break;
case|case
name|PainterQPointMode
case|:
name|p
operator|->
name|drawText
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|m_text
argument_list|)
expr_stmt|;
break|break;
case|case
name|PixmapMode
case|:
name|p
operator|->
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|m_pixmaps
operator|.
name|at
argument_list|(
name|m_currentPixmap
argument_list|)
argument_list|)
expr_stmt|;
name|m_currentPixmap
operator|=
operator|(
name|m_currentPixmap
operator|+
literal|1
operator|)
operator|%
name|m_pixmaps
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
case|case
name|DocumentMode
case|:
name|p
operator|->
name|translate
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|m_document
operator|.
name|drawContents
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|->
name|translate
argument_list|(
operator|-
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LayoutMode
case|:
name|m_layout
operator|.
name|draw
argument_list|(
name|p
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|StaticTextWithMaximumSizeMode
case|:
case|case
name|StaticTextMode
case|:
name|p
operator|->
name|drawStaticText
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|m_staticTexts
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|StaticTextBackendOptimizations
case|:
name|p
operator|->
name|drawStaticText
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|m_staticTexts
operator|.
name|at
argument_list|(
name|m_currentStaticText
argument_list|)
argument_list|)
expr_stmt|;
name|m_currentStaticText
operator|=
operator|(
name|m_currentStaticText
operator|+
literal|1
operator|)
operator|%
name|m_staticTexts
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
name|int
name|letters
operator|=
name|m_text
operator|.
name|length
argument_list|()
block|;
name|int
name|lines
operator|=
name|m_text
operator|.
name|count
argument_list|(
literal|'\n'
argument_list|)
block|;
if|if
condition|(
name|lines
operator|==
literal|0
condition|)
name|lines
operator|=
literal|1
expr_stmt|;
name|QString
name|type
block|;
switch|switch
condition|(
name|m_mode
condition|)
block|{
case|case
name|PainterMode
case|:
name|type
operator|=
literal|"drawText(rect)"
expr_stmt|;
break|break;
case|case
name|PainterQPointMode
case|:
name|type
operator|=
literal|"drawText(point)"
expr_stmt|;
break|break;
case|case
name|LayoutMode
case|:
name|type
operator|=
literal|"layout.draw()"
expr_stmt|;
break|break;
case|case
name|DocumentMode
case|:
name|type
operator|=
literal|"doc.drawContents()"
expr_stmt|;
break|break;
case|case
name|PixmapMode
case|:
name|type
operator|=
literal|"pixmap cached text"
expr_stmt|;
break|break;
case|case
name|StaticTextMode
case|:
name|type
operator|=
literal|"drawStaticText()"
expr_stmt|;
break|break;
case|case
name|StaticTextWithMaximumSizeMode
case|:
name|type
operator|=
literal|"drawStaticText() w/ maxsize"
expr_stmt|;
break|break;
case|case
name|StaticTextBackendOptimizations
case|:
name|type
operator|=
literal|"drawStaticText() w/ backend optimizations"
expr_stmt|;
break|break;
block|}
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%3, len=%1, lines=%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|letters
argument_list|)
operator|.
name|arg
argument_list|(
name|lines
argument_list|)
operator|.
name|arg
argument_list|(
name|type
argument_list|)
return|;
block|}
name|private
operator|:
name|Mode
name|m_mode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|m_text
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QTextDocument
name|m_document
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QTextLayout
name|m_layout
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|QPixmap
operator|>
name|m_pixmaps
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|int
name|m_currentPixmap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_currentStaticText
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|QStaticText
operator|>
name|m_staticTexts
expr_stmt|;
end_expr_stmt
begin_decl_stmt
unit|};
name|class
name|ClippedDrawRectBenchmark
range|:
name|public
name|Benchmark
block|{
name|public
operator|:
expr|enum
name|ClipType
block|{
name|RectClip
block|,
name|TwoRectRegionClip
block|,
name|EllipseRegionClip
block|,
name|TwoRectPathClip
block|,
name|EllipsePathClip
block|,
name|AAEllipsePathClip
block|,
name|EllipseRegionThenRectClip
block|,
name|EllipsePathThenRectClip
block|}
block|;
name|ClippedDrawRectBenchmark
argument_list|(
argument|int size
argument_list|,
argument|ClipType type
argument_list|)
operator|:
name|Benchmark
argument_list|(
name|QSize
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
argument_list|)
block|,
name|m_type
argument_list|(
argument|type
argument_list|)
block|{     }
name|virtual
name|void
name|begin
argument_list|(
argument|QPainter *p
argument_list|,
argument|int
argument_list|)
block|{
name|QRect
name|m_bounds
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|p
operator|->
name|device
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|p
operator|->
name|device
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
block|;
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
block|;
name|p
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
block|;
switch|switch
condition|(
name|m_type
condition|)
block|{
case|case
name|RectClip
case|:
name|p
operator|->
name|setClipRect
argument_list|(
name|m_bounds
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TwoRectRegionClip
case|:
name|p
operator|->
name|setClipRegion
argument_list|(
name|QRegion
argument_list|(
name|m_bounds
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator||
name|QRegion
argument_list|(
name|m_bounds
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EllipseRegionClip
case|:
name|p
operator|->
name|setClipRegion
argument_list|(
name|QRegion
argument_list|(
name|m_bounds
argument_list|,
name|QRegion
operator|::
name|Ellipse
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TwoRectPathClip
case|:
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
name|m_bounds
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|addRect
argument_list|(
name|m_bounds
operator|.
name|adjusted
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|setFillRule
argument_list|(
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
name|p
operator|->
name|setClipPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|EllipsePathClip
case|:
block|{
name|QPainterPath
name|path
block|;
name|path
operator|.
name|addEllipse
argument_list|(
name|m_bounds
argument_list|)
block|;
name|p
operator|->
name|setClipPath
argument_list|(
name|path
argument_list|)
block|;             }
break|break;
case|case
name|AAEllipsePathClip
case|:
block|{
name|QPainterPath
name|path
block|;
name|path
operator|.
name|addEllipse
argument_list|(
name|m_bounds
argument_list|)
block|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
block|;
name|p
operator|->
name|setClipPath
argument_list|(
name|path
argument_list|)
block|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
name|false
argument_list|)
block|;             }
break|break;
end_decl_stmt
begin_case
case|case
name|EllipseRegionThenRectClip
case|:
end_case
begin_expr_stmt
name|p
operator|->
name|setClipRegion
argument_list|(
name|QRegion
argument_list|(
name|m_bounds
argument_list|,
name|QRegion
operator|::
name|Ellipse
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|p
operator|->
name|setClipRegion
argument_list|(
name|QRegion
argument_list|(
name|m_bounds
operator|.
name|width
argument_list|()
operator|/
literal|4
argument_list|,
name|m_bounds
operator|.
name|height
argument_list|()
operator|/
literal|4
argument_list|,
name|m_bounds
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|m_bounds
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
end_expr_stmt
begin_break
break|break;
end_break
begin_case
case|case
name|EllipsePathThenRectClip
case|:
end_case
begin_block
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addEllipse
argument_list|(
name|m_bounds
argument_list|)
expr_stmt|;
name|p
operator|->
name|setClipPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|p
operator|->
name|setClipRegion
argument_list|(
name|QRegion
argument_list|(
name|m_bounds
operator|.
name|width
argument_list|()
operator|/
literal|4
argument_list|,
name|m_bounds
operator|.
name|height
argument_list|()
operator|/
literal|4
argument_list|,
name|m_bounds
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|m_bounds
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
block|}
end_block
begin_break
break|break;
end_break
begin_function
unit|}     }
name|virtual
name|void
name|draw
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
parameter_list|)
block|{
name|p
operator|->
name|drawRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
name|QString
name|namedType
block|;
switch|switch
condition|(
name|m_type
condition|)
block|{
case|case
name|RectClip
case|:
name|namedType
operator|=
literal|"rect"
expr_stmt|;
break|break;
case|case
name|TwoRectRegionClip
case|:
name|namedType
operator|=
literal|"two-rect-region"
expr_stmt|;
break|break;
case|case
name|EllipseRegionClip
case|:
name|namedType
operator|=
literal|"ellipse-region"
expr_stmt|;
break|break;
case|case
name|TwoRectPathClip
case|:
name|namedType
operator|=
literal|"two-rect-path"
expr_stmt|;
break|break;
case|case
name|EllipsePathClip
case|:
name|namedType
operator|=
literal|"ellipse-path"
expr_stmt|;
break|break;
case|case
name|AAEllipsePathClip
case|:
name|namedType
operator|=
literal|"aa-ellipse-path"
expr_stmt|;
break|break;
case|case
name|EllipseRegionThenRectClip
case|:
name|namedType
operator|=
literal|"ellipseregion&rect"
expr_stmt|;
break|break;
case|case
name|EllipsePathThenRectClip
case|:
name|namedType
operator|=
literal|"ellipsepath&rect"
expr_stmt|;
break|break;
block|}
end_expr_stmt
begin_return
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1-clipped-drawRect(%2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|namedType
argument_list|)
operator|.
name|arg
argument_list|(
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
return|;
end_return
begin_expr_stmt
unit|}      ClipType
name|m_type
expr_stmt|;
end_expr_stmt
begin_decl_stmt
unit|};
name|class
name|LinesBenchmark
range|:
name|public
name|Benchmark
block|{
name|public
operator|:
expr|enum
name|LineType
block|{
name|Horizontal_Integer
block|,
name|Diagonal_Integer
block|,
name|Vertical_Integer
block|,
name|Horizontal_Float
block|,
name|Diagonal_Float
block|,
name|Vertical_Float
block|}
block|;
name|LinesBenchmark
argument_list|(
argument|int length
argument_list|,
argument|LineType type
argument_list|)
operator|:
name|Benchmark
argument_list|(
name|QSize
argument_list|(
name|qAbs
argument_list|(
name|length
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|length
argument_list|)
argument_list|)
argument_list|)
block|,
name|m_type
argument_list|(
name|type
argument_list|)
block|,
name|m_length
argument_list|(
argument|length
argument_list|)
block|{      }
name|virtual
name|void
name|draw
argument_list|(
argument|QPainter *p
argument_list|,
argument|const QRect&rect
argument_list|,
argument|int
argument_list|)
block|{
switch|switch
condition|(
name|m_type
condition|)
block|{
case|case
name|Horizontal_Integer
case|:
name|p
operator|->
name|drawLine
argument_list|(
name|QLine
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|m_length
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Diagonal_Integer
case|:
name|p
operator|->
name|drawLine
argument_list|(
name|QLine
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|m_length
argument_list|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|m_length
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Vertical_Integer
case|:
name|p
operator|->
name|drawLine
argument_list|(
name|QLine
argument_list|(
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|4
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|4
argument_list|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|m_length
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Horizontal_Float
case|:
name|p
operator|->
name|drawLine
argument_list|(
name|QLineF
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|m_length
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Diagonal_Float
case|:
name|p
operator|->
name|drawLine
argument_list|(
name|QLineF
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|m_length
argument_list|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|m_length
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Vertical_Float
case|:
name|p
operator|->
name|drawLine
argument_list|(
name|QLineF
argument_list|(
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|4
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
operator|+
literal|4
argument_list|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|m_length
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|virtual
name|QString
name|name
argument_list|()
specifier|const
block|{
specifier|const
name|char
operator|*
name|names
index|[]
operator|=
block|{
literal|"Hor_I"
block|,
literal|"Diag_I"
block|,
literal|"Ver_I"
block|,
literal|"Hor_F"
block|,
literal|"Diag_F"
block|,
literal|"Ver_F"
block|}
block|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"drawLine(size=%1,type=%2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_length
argument_list|)
operator|.
name|arg
argument_list|(
name|names
index|[
name|m_type
index|]
argument_list|)
return|;
block|}
name|LineType
name|m_type
block|;
name|int
name|m_length
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// BENCHMARKTESTS_H
end_comment
end_unit
