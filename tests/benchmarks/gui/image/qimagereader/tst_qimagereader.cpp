begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qtest.h>
end_include
begin_include
include|#
directive|include
file|<QBuffer>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QImage>
end_include
begin_include
include|#
directive|include
file|<QImageReader>
end_include
begin_include
include|#
directive|include
file|<QImageWriter>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QPixmap>
end_include
begin_include
include|#
directive|include
file|<QSet>
end_include
begin_include
include|#
directive|include
file|<QTcpSocket>
end_include
begin_include
include|#
directive|include
file|<QTcpServer>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_typedef
DECL|typedef|QStringMap
typedef|typedef
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|QStringMap
typedef|;
end_typedef
begin_typedef
DECL|typedef|QIntList
typedef|typedef
name|QList
argument_list|<
name|int
argument_list|>
name|QIntList
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QImage
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QRect
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSize
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QColor
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QStringMap
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QIntList
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QIODevice *
argument_list|)
end_macro
begin_class
DECL|class|tst_QImageReader
class|class
name|tst_QImageReader
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QImageReader
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QImageReader
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|readImage_data
parameter_list|()
function_decl|;
name|void
name|readImage
parameter_list|()
function_decl|;
name|void
name|setScaledSize_data
parameter_list|()
function_decl|;
name|void
name|setScaledSize
parameter_list|()
function_decl|;
name|void
name|setClipRect_data
parameter_list|()
function_decl|;
name|void
name|setClipRect
parameter_list|()
function_decl|;
name|void
name|setScaledClipRect_data
parameter_list|()
function_decl|;
name|void
name|setScaledClipRect
parameter_list|()
function_decl|;
private|private:
DECL|member|images
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|>
name|images
decl_stmt|;
comment|// filename, format
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QImageReader
name|tst_QImageReader
operator|::
name|tst_QImageReader
parameter_list|()
block|{
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"colorful.bmp"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"bmp"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"font.bmp"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"bmp"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"crash-signed-char.bmp"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"bmp"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"4bpp-rle.bmp"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"bmp"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"tst7.bmp"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"bmp"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"16bpp.bmp"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"bmp"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"negativeheight.bmp"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"bmp"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"marble.xpm"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"xpm"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"kollada.png"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"png"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"teapot.ppm"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ppm"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"runners.ppm"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ppm"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"test.ppm"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ppm"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"gnus.xbm"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"xbm"
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
name|QTEST_HAVE_JPEG
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"beavis.jpg"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"jpeg"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"YCbCr_cmyk.jpg"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"jpeg"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"YCbCr_rgb.jpg"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"jpeg"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"task210380.jpg"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"jpeg"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
name|QTEST_HAVE_GIF
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"earth.gif"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"gif"
argument_list|)
argument_list|)
expr_stmt|;
name|images
operator|<<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
name|QLatin1String
argument_list|(
literal|"trolltech.gif"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"gif"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~tst_QImageReader
name|tst_QImageReader
operator|::
name|~
name|tst_QImageReader
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QImageReader
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QImageReader
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|readImage_data
name|void
name|tst_QImageReader
operator|::
name|readImage_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|images
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|file
init|=
name|images
index|[
name|i
index|]
operator|.
name|first
decl_stmt|;
specifier|const
name|QByteArray
name|format
init|=
name|images
index|[
name|i
index|]
operator|.
name|second
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|file
argument_list|)
argument_list|)
operator|<<
name|file
operator|<<
name|format
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readImage
name|void
name|tst_QImageReader
operator|::
name|readImage
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|QImageReader
name|io
argument_list|(
literal|"images/"
operator|+
name|fileName
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QImage
name|image
init|=
name|io
operator|.
name|read
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|image
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setScaledSize_data
name|void
name|tst_QImageReader
operator|::
name|setScaledSize_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSize
argument_list|>
argument_list|(
literal|"newSize"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|images
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|file
init|=
name|images
index|[
name|i
index|]
operator|.
name|first
decl_stmt|;
specifier|const
name|QByteArray
name|format
init|=
name|images
index|[
name|i
index|]
operator|.
name|second
decl_stmt|;
name|QSize
name|size
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
name|QLatin1String
argument_list|(
literal|"teapot"
argument_list|)
condition|)
name|size
operator|=
name|QSize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|file
operator|==
name|QLatin1String
argument_list|(
literal|"test.ppm"
argument_list|)
condition|)
name|size
operator|=
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|file
argument_list|)
argument_list|)
operator|<<
name|file
operator|<<
name|format
operator|<<
name|size
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setScaledSize
name|void
name|tst_QImageReader
operator|::
name|setScaledSize
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSize
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|QImageReader
name|reader
argument_list|(
literal|"images/"
operator|+
name|fileName
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setScaledSize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|QImage
name|image
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|size
argument_list|()
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setClipRect_data
name|void
name|tst_QImageReader
operator|::
name|setClipRect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"newRect"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|images
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|file
init|=
name|images
index|[
name|i
index|]
operator|.
name|first
decl_stmt|;
specifier|const
name|QByteArray
name|format
init|=
name|images
index|[
name|i
index|]
operator|.
name|second
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|file
argument_list|)
argument_list|)
operator|<<
name|file
operator|<<
name|format
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setClipRect
name|void
name|tst_QImageReader
operator|::
name|setClipRect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|newRect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|QImageReader
name|reader
argument_list|(
literal|"images/"
operator|+
name|fileName
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setClipRect
argument_list|(
name|newRect
argument_list|)
expr_stmt|;
name|QImage
name|image
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|rect
argument_list|()
argument_list|,
name|newRect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setScaledClipRect_data
name|void
name|tst_QImageReader
operator|::
name|setScaledClipRect_data
parameter_list|()
block|{
name|setClipRect_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setScaledClipRect
name|void
name|tst_QImageReader
operator|::
name|setScaledClipRect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|newRect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|QImageReader
name|reader
argument_list|(
literal|"images/"
operator|+
name|fileName
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setScaledSize
argument_list|(
name|QSize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setScaledClipRect
argument_list|(
name|newRect
argument_list|)
expr_stmt|;
name|QImage
name|image
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|image
operator|.
name|rect
argument_list|()
argument_list|,
name|newRect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QImageReader
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qimagereader.moc"
end_include
end_unit
