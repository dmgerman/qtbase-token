begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QTime>
end_include
begin_include
include|#
directive|include
file|"itemrecyclinglist.h"
end_include
begin_include
include|#
directive|include
file|"listitemcontainer.h"
end_include
begin_include
include|#
directive|include
file|"abstractviewitem.h"
end_include
begin_include
include|#
directive|include
file|"recycledlistitem.h"
end_include
begin_include
include|#
directive|include
file|"theme.h"
end_include
begin_include
include|#
directive|include
file|"scrollbar.h"
end_include
begin_constructor
DECL|function|ItemRecyclingList
name|ItemRecyclingList
operator|::
name|ItemRecyclingList
parameter_list|(
specifier|const
name|int
name|itemBuffer
parameter_list|,
name|QGraphicsWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|ItemRecyclingListView
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_listModel
argument_list|(
operator|new
name|ListModel
argument_list|(
name|this
argument_list|)
argument_list|)
block|{
name|ListItemContainer
modifier|*
name|container
init|=
operator|new
name|ListItemContainer
argument_list|(
name|itemBuffer
argument_list|,
name|this
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|container
operator|->
name|setParentItem
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ItemRecyclingListView
operator|::
name|setContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|ItemRecyclingListView
operator|::
name|setModel
argument_list|(
name|m_listModel
argument_list|,
operator|new
name|RecycledListItem
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|setObjectName
argument_list|(
literal|"ItemRecyclingList"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|themeChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|themeChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/* virtual */
end_comment
begin_destructor
DECL|function|~ItemRecyclingList
name|ItemRecyclingList
operator|::
name|~
name|ItemRecyclingList
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/* virtual */
end_comment
begin_function
DECL|function|insertItem
name|void
name|ItemRecyclingList
operator|::
name|insertItem
parameter_list|(
name|int
name|index
parameter_list|,
name|RecycledListItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
condition|)
name|index
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|index
operator|>
name|m_listModel
operator|->
name|rowCount
argument_list|()
condition|)
name|index
operator|=
name|m_listModel
operator|->
name|rowCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_listModel
operator|&&
name|item
condition|)
name|m_listModel
operator|->
name|insert
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|updateListItemBackgrounds
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* virtual */
end_comment
begin_function
DECL|function|addItem
name|void
name|ItemRecyclingList
operator|::
name|addItem
parameter_list|(
name|RecycledListItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
condition|)
name|m_listModel
operator|->
name|appendRow
argument_list|(
name|item
argument_list|)
expr_stmt|;
specifier|const
name|int
name|index
init|=
name|m_listModel
operator|->
name|rowCount
argument_list|()
operator|-
literal|1
decl_stmt|;
name|updateListItemBackgrounds
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* virtual */
end_comment
begin_function
DECL|function|clear
name|void
name|ItemRecyclingList
operator|::
name|clear
parameter_list|()
block|{
name|m_listModel
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/* virtual */
end_comment
begin_function
DECL|function|takeItem
name|AbstractViewItem
modifier|*
name|ItemRecyclingList
operator|::
name|takeItem
parameter_list|(
specifier|const
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|row
operator|>=
name|m_listModel
operator|->
name|rowCount
argument_list|()
operator|||
operator|!
name|m_listModel
condition|)
return|return
literal|0
return|;
return|return
name|m_listModel
operator|->
name|takeItem
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*virtual*/
end_comment
begin_function
DECL|function|setItemPrototype
name|void
name|ItemRecyclingList
operator|::
name|setItemPrototype
parameter_list|(
name|AbstractViewItem
modifier|*
name|prototype
parameter_list|)
block|{
name|ItemRecyclingListView
operator|::
name|setItemPrototype
argument_list|(
name|prototype
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|themeChange
name|void
name|ItemRecyclingList
operator|::
name|themeChange
parameter_list|()
block|{
specifier|const
name|bool
name|caching
init|=
name|listItemCaching
argument_list|()
decl_stmt|;
name|setListItemCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|iconName
init|=
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|pixmapPath
argument_list|()
operator|+
literal|"contact_default_icon.svg"
decl_stmt|;
specifier|const
name|int
name|count
init|=
name|m_listModel
operator|->
name|rowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|RecycledListItem
modifier|*
name|ritem
init|=
name|m_listModel
operator|->
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ritem
condition|)
block|{
name|ListItem
modifier|*
name|item
init|=
name|ritem
operator|->
name|item
argument_list|()
decl_stmt|;
comment|// Update default icons
specifier|const
name|QString
name|filename
init|=
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
operator|->
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|contains
argument_list|(
literal|"contact_default_icon"
argument_list|)
condition|)
block|{
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
operator|->
name|setFileName
argument_list|(
name|iconName
argument_list|)
expr_stmt|;
block|}
comment|// Update status icons
name|QString
name|statusIcon
init|=
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
operator|->
name|fileName
argument_list|()
decl_stmt|;
specifier|const
name|int
name|index
init|=
name|statusIcon
operator|.
name|indexOf
argument_list|(
literal|"contact_status"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|statusIcon
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
operator|->
name|setFileName
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|pixmapPath
argument_list|()
operator|+
name|statusIcon
argument_list|)
expr_stmt|;
block|}
comment|// Update fonts
name|item
operator|->
name|setFont
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|font
argument_list|(
name|Theme
operator|::
name|ContactName
argument_list|)
argument_list|,
name|ListItem
operator|::
name|FirstPos
argument_list|)
expr_stmt|;
name|item
operator|->
name|setFont
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|font
argument_list|(
name|Theme
operator|::
name|ContactNumber
argument_list|)
argument_list|,
name|ListItem
operator|::
name|SecondPos
argument_list|)
expr_stmt|;
name|item
operator|->
name|setFont
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|font
argument_list|(
name|Theme
operator|::
name|ContactEmail
argument_list|)
argument_list|,
name|ListItem
operator|::
name|ThirdPos
argument_list|)
expr_stmt|;
comment|// Update list dividers
if|if
condition|(
name|i
operator|%
literal|2
condition|)
block|{
name|item
operator|->
name|setBackgroundBrush
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemBackgroundBrushOdd
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setBackgroundOpacity
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemBackgroundOpacityOdd
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|item
operator|->
name|setBackgroundBrush
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemBackgroundBrushEven
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setBackgroundOpacity
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemBackgroundOpacityEven
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Update borders
name|item
operator|->
name|setBorderPen
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemBorderPen
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setRounding
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemRounding
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update icons
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
operator|->
name|setRotation
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|iconRotation
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
operator|->
name|setRotation
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|iconRotation
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
operator|->
name|setOpacityEffectEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconOpacityEffectEnabled
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
operator|->
name|setOpacityEffectEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconOpacityEffectEnabled
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
operator|->
name|setSmoothTransformationEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconSmoothTransformationEnabled
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
operator|->
name|setSmoothTransformationEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconSmoothTransformationEnabled
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|updateViewContent
argument_list|()
expr_stmt|;
name|setListItemCaching
argument_list|(
name|caching
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyPressEvent
name|void
name|ItemRecyclingList
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
specifier|static
name|QTime
name|keyPressInterval
init|=
name|QTime
operator|::
name|currentTime
argument_list|()
decl_stmt|;
specifier|static
name|qreal
name|step
init|=
literal|0.0
decl_stmt|;
specifier|static
name|bool
name|repeat
init|=
literal|false
decl_stmt|;
name|int
name|interval
init|=
name|keyPressInterval
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|ScrollBar
modifier|*
name|sb
init|=
name|verticalScrollBar
argument_list|()
decl_stmt|;
name|qreal
name|currentValue
init|=
name|sb
operator|->
name|sliderPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|interval
operator|<
literal|250
condition|)
block|{
if|if
condition|(
operator|!
name|repeat
condition|)
name|step
operator|=
literal|0.0
expr_stmt|;
name|step
operator|=
name|step
operator|+
literal|2.0
expr_stmt|;
if|if
condition|(
name|step
operator|>
literal|100
condition|)
name|step
operator|=
literal|100
expr_stmt|;
name|repeat
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|step
operator|=
literal|1.0
expr_stmt|;
if|if
condition|(
name|m_listModel
operator|->
name|item
argument_list|(
literal|0
argument_list|)
condition|)
name|m_listModel
operator|->
name|item
argument_list|(
literal|0
argument_list|)
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
expr_stmt|;
name|step
operator|=
name|m_listModel
operator|->
name|item
argument_list|(
literal|0
argument_list|)
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
expr_stmt|;
name|repeat
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Up
condition|)
block|{
comment|//Up Arrow
name|sb
operator|->
name|setSliderPosition
argument_list|(
name|currentValue
operator|-
name|step
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Down
condition|)
block|{
comment|//Down Arrow
name|sb
operator|->
name|setSliderPosition
argument_list|(
name|currentValue
operator|+
name|step
argument_list|)
expr_stmt|;
block|}
name|keyPressInterval
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listItemCaching
name|bool
name|ItemRecyclingList
operator|::
name|listItemCaching
parameter_list|()
specifier|const
block|{
name|ListItemContainer
modifier|*
name|container
init|=
cast|static_cast
argument_list|<
name|ListItemContainer
operator|*
argument_list|>
argument_list|(
name|m_container
argument_list|)
decl_stmt|;
return|return
name|container
operator|->
name|listItemCaching
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setListItemCaching
name|void
name|ItemRecyclingList
operator|::
name|setListItemCaching
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|ListItemContainer
modifier|*
name|container
init|=
cast|static_cast
argument_list|<
name|ListItemContainer
operator|*
argument_list|>
argument_list|(
name|m_container
argument_list|)
decl_stmt|;
name|container
operator|->
name|setListItemCaching
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateListItemBackgrounds
name|void
name|ItemRecyclingList
operator|::
name|updateListItemBackgrounds
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|const
name|int
name|itemCount
init|=
name|m_listModel
operator|->
name|rowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|index
init|;
name|i
operator|<
name|itemCount
condition|;
operator|++
name|i
control|)
block|{
name|RecycledListItem
modifier|*
name|ritem
init|=
name|m_listModel
operator|->
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ritem
condition|)
block|{
name|ListItem
modifier|*
name|item
init|=
name|ritem
operator|->
name|item
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
condition|)
block|{
name|item
operator|->
name|setBackgroundBrush
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemBackgroundBrushOdd
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setBackgroundOpacity
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemBackgroundOpacityOdd
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|item
operator|->
name|setBackgroundBrush
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemBackgroundBrushEven
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setBackgroundOpacity
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemBackgroundOpacityEven
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|setTwoColumns
name|void
name|ItemRecyclingList
operator|::
name|setTwoColumns
parameter_list|(
specifier|const
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|twoColumns
argument_list|()
operator|==
name|enabled
condition|)
return|return;
specifier|const
name|bool
name|caching
init|=
name|listItemCaching
argument_list|()
decl_stmt|;
name|setListItemCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_container
operator|->
name|setTwoColumns
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|refreshContainerGeometry
argument_list|()
expr_stmt|;
name|setListItemCaching
argument_list|(
name|caching
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|twoColumns
name|bool
name|ItemRecyclingList
operator|::
name|twoColumns
parameter_list|()
block|{
return|return
name|m_container
operator|->
name|twoColumns
argument_list|()
return|;
block|}
end_function
end_unit
