begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|ABSTRACTITEMVIEW_H
end_ifndef
begin_define
DECL|macro|ABSTRACTITEMVIEW_H
define|#
directive|define
name|ABSTRACTITEMVIEW_H
end_define
begin_include
include|#
directive|include
file|<QAbstractItemModel>
end_include
begin_include
include|#
directive|include
file|<QGraphicsSceneResizeEvent>
end_include
begin_include
include|#
directive|include
file|<QPersistentModelIndex>
end_include
begin_include
include|#
directive|include
file|<QItemSelection>
end_include
begin_include
include|#
directive|include
file|"listitemcontainer.h"
end_include
begin_include
include|#
directive|include
file|"abstractscrollarea.h"
end_include
begin_include
include|#
directive|include
file|"scroller.h"
end_include
begin_decl_stmt
DECL|variable|QItemSelectionModel
name|class
name|QItemSelectionModel
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|AbstractItemView
range|:
name|public
name|AbstractScrollArea
block|{
name|Q_OBJECT
name|public
operator|:
name|AbstractItemView
argument_list|(
name|QGraphicsWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|virtual
operator|~
name|AbstractItemView
argument_list|()
block|;
name|virtual
name|void
name|setContainer
argument_list|(
name|AbstractItemContainer
operator|*
name|container
argument_list|)
block|;
name|virtual
name|void
name|setModel
argument_list|(
name|QAbstractItemModel
operator|*
name|model
argument_list|,
name|AbstractViewItem
operator|*
name|prototype
argument_list|)
block|;
name|virtual
name|QAbstractItemModel
operator|*
name|model
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|setItemPrototype
argument_list|(
name|AbstractViewItem
operator|*
name|prototype
argument_list|)
block|;
name|void
name|setSelectionModel
argument_list|(
name|QItemSelectionModel
operator|*
name|smodel
argument_list|)
block|;
name|virtual
name|QModelIndex
name|nextIndex
argument_list|(
argument|const QModelIndex&index
argument_list|)
specifier|const
block|;
name|virtual
name|QModelIndex
name|previousIndex
argument_list|(
argument|const QModelIndex&index
argument_list|)
specifier|const
block|;
name|virtual
name|int
name|indexCount
argument_list|()
specifier|const
block|;
name|void
name|refreshContainerGeometry
argument_list|()
block|;
comment|// TODO Can this be moved to scroll area?
name|void
name|updateViewContent
argument_list|()
block|;
name|virtual
name|void
name|scrollContentsBy
argument_list|(
argument|qreal dx
argument_list|,
argument|qreal dy
argument_list|)
block|;
name|virtual
name|bool
name|listItemCaching
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|void
name|setListItemCaching
argument_list|(
argument|bool enabled
argument_list|)
operator|=
literal|0
block|;
name|protected
operator|:
name|virtual
name|bool
name|event
argument_list|(
name|QEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|changeTheme
argument_list|()
block|;
name|public
name|slots
operator|:
name|virtual
name|void
name|setRootIndex
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
block|;
name|void
name|setCurrentIndex
argument_list|(
argument|const QModelIndex&index
argument_list|,
argument|QItemSelectionModel::SelectionFlags selectionFlag = QItemSelectionModel::NoUpdate
argument_list|)
block|;
name|protected
name|slots
operator|:
name|virtual
name|void
name|currentIndexChanged
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|current
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|previous
argument_list|)
block|;
name|virtual
name|void
name|currentSelectionChanged
argument_list|(
specifier|const
name|QItemSelection
operator|&
name|selected
argument_list|,
specifier|const
name|QItemSelection
operator|&
name|deselected
argument_list|)
block|;
name|virtual
name|void
name|dataChanged
argument_list|(
specifier|const
name|QModelIndex
operator|&
name|topLeft
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|bottomRight
argument_list|)
block|;
name|virtual
name|void
name|rowsAboutToBeInserted
argument_list|(
argument|const QModelIndex&index
argument_list|,
argument|int start
argument_list|,
argument|int end
argument_list|)
block|;
name|virtual
name|void
name|rowsInserted
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int start
argument_list|,
argument|int end
argument_list|)
block|;
name|virtual
name|void
name|rowsAboutToBeRemoved
argument_list|(
argument|const QModelIndex&index
argument_list|,
argument|int start
argument_list|,
argument|int end
argument_list|)
block|;
name|virtual
name|void
name|rowsRemoved
argument_list|(
argument|const QModelIndex&parent
argument_list|,
argument|int start
argument_list|,
argument|int end
argument_list|)
block|;
name|virtual
name|void
name|modelDestroyed
argument_list|()
block|;
name|virtual
name|void
name|layoutChanged
argument_list|()
block|;
name|virtual
name|void
name|reset
argument_list|()
block|;
name|protected
operator|:
name|QAbstractItemModel
operator|*
name|m_model
block|;
name|QPersistentModelIndex
name|m_rootIndex
block|;
name|AbstractItemContainer
operator|*
name|m_container
block|;
name|QItemSelectionModel
operator|*
name|m_selectionModel
block|;
name|QPersistentModelIndex
name|m_currentIndex
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|AbstractItemView
argument_list|)
name|Scroller
name|m_scroller
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ABSTRACTITEMVIEW_H
end_comment
end_unit
