begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QGraphicsLayout>
end_include
begin_include
include|#
directive|include
file|"abstractitemcontainer.h"
end_include
begin_include
include|#
directive|include
file|"abstractitemview.h"
end_include
begin_include
include|#
directive|include
file|"abstractviewitem.h"
end_include
begin_include
include|#
directive|include
file|"scrollbar.h"
end_include
begin_constructor
DECL|function|AbstractItemContainer
name|AbstractItemContainer
operator|::
name|AbstractItemContainer
parameter_list|(
name|int
name|bufferSize
parameter_list|,
name|QGraphicsWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|GvbWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_items
argument_list|()
member_init_list|,
name|m_itemView
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_prototype
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_bufferSize
argument_list|(
name|bufferSize
argument_list|)
member_init_list|,
name|m_twoColumns
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~AbstractItemContainer
name|AbstractItemContainer
operator|::
name|~
name|AbstractItemContainer
parameter_list|()
block|{
operator|delete
name|m_prototype
expr_stmt|;
name|m_prototype
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|prototype
name|AbstractViewItem
modifier|*
name|AbstractItemContainer
operator|::
name|prototype
parameter_list|()
block|{
return|return
name|m_prototype
return|;
block|}
end_function
begin_function
DECL|function|bufferSize
name|int
name|AbstractItemContainer
operator|::
name|bufferSize
parameter_list|()
specifier|const
block|{
return|return
name|m_bufferSize
return|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|AbstractItemContainer
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LayoutRequest
condition|)
name|updateItemBuffer
argument_list|()
expr_stmt|;
return|return
name|QGraphicsWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|AbstractItemContainer
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|GraphicsSceneResize
operator|&&
name|m_itemView
condition|)
block|{
specifier|const
name|bool
name|caching
init|=
name|m_itemView
operator|->
name|listItemCaching
argument_list|()
decl_stmt|;
name|m_itemView
operator|->
name|setListItemCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QSizeF
name|s
init|=
name|m_itemView
operator|->
name|size
argument_list|()
decl_stmt|;
name|s
operator|.
name|setWidth
argument_list|(
name|s
operator|.
name|width
argument_list|()
operator|-
name|m_itemView
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|adjustVisibleContainerSize
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|m_itemView
operator|->
name|updateViewContent
argument_list|()
expr_stmt|;
name|updateItemBuffer
argument_list|()
expr_stmt|;
name|m_itemView
operator|->
name|setListItemCaching
argument_list|(
name|caching
argument_list|)
expr_stmt|;
block|}
return|return
name|QGraphicsWidget
operator|::
name|eventFilter
argument_list|(
name|obj
argument_list|,
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|itemChange
name|QVariant
name|AbstractItemContainer
operator|::
name|itemChange
parameter_list|(
name|GraphicsItemChange
name|change
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|QVariant
name|ichange
init|=
name|QGraphicsWidget
operator|::
name|itemChange
argument_list|(
name|change
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|==
name|ItemPositionChange
condition|)
block|{
if|if
condition|(
name|m_itemView
operator|&&
name|layout
argument_list|()
operator|&&
operator|!
name|layout
argument_list|()
operator|->
name|isActivated
argument_list|()
condition|)
name|m_itemView
operator|->
name|refreshContainerGeometry
argument_list|()
expr_stmt|;
block|}
return|return
name|ichange
return|;
block|}
end_function
begin_comment
comment|/*virtual*/
end_comment
begin_function
DECL|function|setItemView
name|void
name|AbstractItemContainer
operator|::
name|setItemView
parameter_list|(
name|AbstractItemView
modifier|*
name|view
parameter_list|)
block|{
name|m_itemView
operator|=
name|view
expr_stmt|;
if|if
condition|(
name|m_itemView
condition|)
block|{
name|setParentItem
argument_list|(
name|m_itemView
argument_list|)
expr_stmt|;
name|m_itemView
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*virtual*/
end_comment
begin_function
DECL|function|setItemPrototype
name|void
name|AbstractItemContainer
operator|::
name|setItemPrototype
parameter_list|(
name|AbstractViewItem
modifier|*
name|ptype
parameter_list|)
block|{
name|m_prototype
operator|=
name|ptype
expr_stmt|;
name|m_prototype
operator|->
name|setParentItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m_prototype
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*virtual*/
end_comment
begin_function
DECL|function|reset
name|void
name|AbstractItemContainer
operator|::
name|reset
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_items
argument_list|)
expr_stmt|;
name|m_items
operator|.
name|clear
argument_list|()
expr_stmt|;
name|updateItemBuffer
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*virtual*/
end_comment
begin_function
DECL|function|addItem
name|void
name|AbstractItemContainer
operator|::
name|addItem
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
if|if
condition|(
name|m_items
operator|.
name|count
argument_list|()
operator|<
name|maxItemCountInItemBuffer
argument_list|()
operator|||
operator|(
name|m_items
operator|.
name|count
argument_list|()
operator|>
literal|0
operator|&&
name|m_items
operator|.
name|first
argument_list|()
operator|->
name|modelIndex
argument_list|()
operator|.
name|row
argument_list|()
operator|-
literal|1
operator|<=
name|index
operator|.
name|row
argument_list|()
operator|&&
name|m_items
operator|.
name|last
argument_list|()
operator|->
name|modelIndex
argument_list|()
operator|.
name|row
argument_list|()
operator|>=
name|index
operator|.
name|row
argument_list|()
operator|)
condition|)
block|{
name|int
name|itemPos
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|m_items
operator|.
name|count
argument_list|()
operator|!=
literal|0
condition|)
name|itemPos
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|index
operator|.
name|row
argument_list|()
operator|-
name|m_items
operator|.
name|first
argument_list|()
operator|->
name|modelIndex
argument_list|()
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|itemPos
operator|>=
name|m_items
operator|.
name|count
argument_list|()
operator|||
name|m_items
operator|.
name|at
argument_list|(
name|itemPos
argument_list|)
operator|->
name|modelIndex
argument_list|()
operator|!=
name|index
condition|)
block|{
name|AbstractViewItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|m_prototype
condition|)
name|item
operator|=
name|m_prototype
operator|->
name|newItemInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|item
condition|)
block|{
name|item
operator|->
name|setModel
argument_list|(
name|m_itemView
operator|->
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setTwoColumns
argument_list|(
name|m_twoColumns
argument_list|)
expr_stmt|;
name|m_items
operator|.
name|insert
argument_list|(
name|itemPos
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|addItemToVisibleLayout
argument_list|(
name|itemPos
argument_list|,
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|modelIndex
argument_list|()
operator|!=
name|index
condition|)
block|{
name|item
operator|->
name|setModelIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|updateItemBuffer
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removeItem
name|void
name|AbstractItemContainer
operator|::
name|removeItem
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|AbstractViewItem
modifier|*
name|item
init|=
name|findItemByIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
block|{
if|if
condition|(
name|maxItemCountInItemBuffer
argument_list|()
operator|<
name|m_items
operator|.
name|count
argument_list|()
condition|)
block|{
name|m_items
operator|.
name|removeOne
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|removeItemFromVisibleLayout
argument_list|(
name|item
argument_list|)
expr_stmt|;
operator|delete
name|item
expr_stmt|;
block|}
else|else
block|{
name|m_items
operator|.
name|removeOne
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|removeItemFromVisibleLayout
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QModelIndex
name|newIndex
init|=
name|m_itemView
operator|->
name|nextIndex
argument_list|(
name|m_items
operator|.
name|last
argument_list|()
operator|->
name|modelIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newIndex
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// Item readded as last item in buffer.
name|m_items
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|addItemToVisibleLayout
argument_list|(
name|m_items
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|item
operator|->
name|setModelIndex
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Item readded as first item in buffer.
name|newIndex
operator|=
name|m_itemView
operator|->
name|previousIndex
argument_list|(
name|m_items
operator|.
name|first
argument_list|()
operator|->
name|modelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|m_items
operator|.
name|prepend
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|addItemToVisibleLayout
argument_list|(
literal|0
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|item
operator|->
name|setModelIndex
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*virtual*/
end_comment
begin_function
DECL|function|itemCount
name|int
name|AbstractItemContainer
operator|::
name|itemCount
parameter_list|()
specifier|const
block|{
return|return
name|m_items
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|firstItem
name|AbstractViewItem
modifier|*
name|AbstractItemContainer
operator|::
name|firstItem
parameter_list|()
block|{
return|return
name|m_items
operator|.
name|first
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*virtual*/
end_comment
begin_function
DECL|function|itemAt
name|AbstractViewItem
modifier|*
name|AbstractItemContainer
operator|::
name|itemAt
parameter_list|(
specifier|const
name|int
name|row
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|row
operator|>=
name|m_items
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|m_items
operator|.
name|at
argument_list|(
name|row
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|findItemByIndex
name|AbstractViewItem
modifier|*
name|AbstractItemContainer
operator|::
name|findItemByIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|AbstractViewItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|m_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|modelIndex
argument_list|()
operator|==
name|index
condition|)
block|{
name|item
operator|=
name|m_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|item
return|;
block|}
end_function
begin_function
DECL|function|itemVisibleInView
name|bool
name|AbstractItemContainer
operator|::
name|itemVisibleInView
parameter_list|(
name|AbstractViewItem
modifier|*
name|item
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|viewRect
parameter_list|,
name|bool
name|fullyVisible
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|item
operator|||
operator|!
name|m_itemView
condition|)
return|return
literal|false
return|;
name|QRectF
name|itemRectBoundingRect
init|=
name|item
operator|->
name|mapToItem
argument_list|(
name|m_itemView
argument_list|,
name|item
operator|->
name|boundingRect
argument_list|()
argument_list|)
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|fullyVisible
operator|&&
name|viewRect
operator|.
name|contains
argument_list|(
name|itemRectBoundingRect
argument_list|)
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|viewRect
operator|.
name|intersects
argument_list|(
name|itemRectBoundingRect
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|updateItemBuffer
name|void
name|AbstractItemContainer
operator|::
name|updateItemBuffer
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_itemView
operator|||
operator|(
name|m_itemView
operator|&&
operator|!
name|m_itemView
operator|->
name|boundingRect
argument_list|()
operator|.
name|isValid
argument_list|()
operator|)
condition|)
return|return;
name|int
name|maxCount
init|=
name|maxItemCountInItemBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_items
operator|.
name|count
argument_list|()
operator|<
name|maxCount
condition|)
block|{
comment|// New items needs to be added.
name|QModelIndex
name|index
decl_stmt|;
if|if
condition|(
name|m_items
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|index
operator|=
name|m_items
operator|.
name|last
argument_list|()
operator|->
name|modelIndex
argument_list|()
expr_stmt|;
while|while
condition|(
name|m_items
operator|.
name|count
argument_list|()
operator|<
name|maxCount
condition|)
block|{
name|index
operator|=
name|m_itemView
operator|->
name|nextIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
break|break;
name|insertItem
argument_list|(
name|m_items
operator|.
name|count
argument_list|()
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|index
operator|=
name|m_items
operator|.
name|first
argument_list|()
operator|->
name|modelIndex
argument_list|()
expr_stmt|;
while|while
condition|(
name|m_items
operator|.
name|count
argument_list|()
operator|<
name|maxCount
condition|)
block|{
name|index
operator|=
name|m_itemView
operator|->
name|previousIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
break|break;
name|insertItem
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
name|QRectF
name|viewRect
init|=
name|boundingRect
argument_list|()
decl_stmt|;
while|while
condition|(
name|m_items
operator|.
name|count
argument_list|()
operator|>
name|maxCount
condition|)
block|{
name|int
name|firstVisible
init|=
literal|0
decl_stmt|;
name|int
name|lastVisible
init|=
literal|0
decl_stmt|;
name|findFirstAndLastVisibleBufferIndex
argument_list|(
name|firstVisible
argument_list|,
name|lastVisible
argument_list|,
name|viewRect
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AbstractViewItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lastVisible
operator|!=
name|m_items
operator|.
name|count
argument_list|()
operator|-
literal|1
condition|)
block|{
name|item
operator|=
name|m_items
operator|.
name|takeLast
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstVisible
operator|!=
literal|0
operator|&&
name|m_items
operator|.
name|first
argument_list|()
operator|->
name|modelIndex
argument_list|()
operator|.
name|row
argument_list|()
operator|!=
name|firstVisible
operator|-
literal|1
condition|)
block|{
name|item
operator|=
name|m_items
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// All the items are visible. Take the item at the end of the buffer.
name|item
operator|=
name|m_items
operator|.
name|takeLast
argument_list|()
expr_stmt|;
block|}
name|m_items
operator|.
name|removeOne
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|removeItemFromVisibleLayout
argument_list|(
name|item
argument_list|)
expr_stmt|;
operator|delete
name|item
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insertItem
name|void
name|AbstractItemContainer
operator|::
name|insertItem
parameter_list|(
name|int
name|pos
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|AbstractViewItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|m_prototype
condition|)
name|item
operator|=
name|m_prototype
operator|->
name|newItemInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|item
condition|)
block|{
name|item
operator|->
name|setModel
argument_list|(
name|m_itemView
operator|->
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setModelIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|item
operator|->
name|setTwoColumns
argument_list|(
name|m_twoColumns
argument_list|)
expr_stmt|;
name|m_items
operator|.
name|insert
argument_list|(
name|pos
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|addItemToVisibleLayout
argument_list|(
name|pos
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|item
operator|->
name|updateItemContents
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
name|m_itemView
operator|->
name|scrollContentsBy
argument_list|(
name|qreal
argument_list|(
literal|0.0
argument_list|)
argument_list|,
name|item
operator|->
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|findFirstAndLastVisibleBufferIndex
name|void
name|AbstractItemContainer
operator|::
name|findFirstAndLastVisibleBufferIndex
parameter_list|(
name|int
modifier|&
name|firstVisibleBufferIndex
parameter_list|,
name|int
modifier|&
name|lastVisibleBufferIndex
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|viewRect
parameter_list|,
name|bool
name|fullyVisible
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|layout
argument_list|()
operator|&&
operator|!
name|layout
argument_list|()
operator|->
name|isActivated
argument_list|()
condition|)
name|layout
argument_list|()
operator|->
name|activate
argument_list|()
expr_stmt|;
name|firstVisibleBufferIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|lastVisibleBufferIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|int
name|count
init|=
name|m_items
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|itemVisibleInView
argument_list|(
name|m_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|viewRect
argument_list|,
name|fullyVisible
argument_list|)
condition|)
block|{
if|if
condition|(
name|firstVisibleBufferIndex
operator|==
operator|-
literal|1
condition|)
name|firstVisibleBufferIndex
operator|=
name|i
expr_stmt|;
name|lastVisibleBufferIndex
operator|=
name|i
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastVisibleBufferIndex
operator|!=
operator|-
literal|1
condition|)
break|break;
comment|// lastVisibleBufferIndex is already set
block|}
block|}
end_function
begin_comment
comment|/*virtual*/
end_comment
begin_function
DECL|function|maxItemCountInItemBuffer
name|int
name|AbstractItemContainer
operator|::
name|maxItemCountInItemBuffer
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_itemView
operator|&&
operator|!
name|m_itemView
operator|->
name|boundingRect
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|m_itemView
operator|->
name|indexCount
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|themeChange
name|void
name|AbstractItemContainer
operator|::
name|themeChange
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|m_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|themeChange
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateContent
name|void
name|AbstractItemContainer
operator|::
name|updateContent
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|m_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|updateItemContents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSubtreeCacheEnabled
name|void
name|AbstractItemContainer
operator|::
name|setSubtreeCacheEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|m_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setSubtreeCacheEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_prototype
condition|)
name|m_prototype
operator|->
name|setSubtreeCacheEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTwoColumns
name|void
name|AbstractItemContainer
operator|::
name|setTwoColumns
parameter_list|(
specifier|const
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|m_twoColumns
operator|==
name|enabled
condition|)
return|return;
name|m_twoColumns
operator|=
name|enabled
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|m_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setTwoColumns
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|twoColumns
name|bool
name|AbstractItemContainer
operator|::
name|twoColumns
parameter_list|()
block|{
return|return
name|m_twoColumns
return|;
block|}
end_function
end_unit
