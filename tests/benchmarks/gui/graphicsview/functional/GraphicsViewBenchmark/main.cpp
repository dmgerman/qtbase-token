begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/qgraphicsview.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpixmapcache.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|"mainview.h"
end_include
begin_include
include|#
directive|include
file|"dummydatagen.h"
end_include
begin_include
include|#
directive|include
file|"simplelist.h"
end_include
begin_include
include|#
directive|include
file|"itemrecyclinglist.h"
end_include
begin_include
include|#
directive|include
file|"simplelist.h"
end_include
begin_include
include|#
directive|include
file|"theme.h"
end_include
begin_include
include|#
directive|include
file|"commandline.h"
end_include
begin_class
DECL|class|tst_GraphicsViewBenchmark
class|class
name|tst_GraphicsViewBenchmark
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|enum|ListType
enum|enum
name|ListType
block|{
DECL|enumerator|Simple
name|Simple
block|,
DECL|enumerator|Recycling
name|Recycling
block|,
DECL|enumerator|None
name|None
block|}
enum|;
DECL|enum|ScrollStep
enum|enum
name|ScrollStep
block|{
DECL|enumerator|Slow
name|Slow
init|=
literal|2
block|,
DECL|enumerator|Normal
name|Normal
init|=
literal|8
block|,
DECL|enumerator|Fast
name|Fast
init|=
literal|64
block|}
enum|;
DECL|function|tst_GraphicsViewBenchmark
name|tst_GraphicsViewBenchmark
parameter_list|(
name|Settings
modifier|*
name|settings
parameter_list|)
member_init_list|:
name|mSettings
argument_list|(
name|settings
argument_list|)
member_init_list|,
name|mMainView
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|currentListSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|currentListType
argument_list|(
name|None
argument_list|)
block|{}
DECL|function|~tst_GraphicsViewBenchmark
name|~
name|tst_GraphicsViewBenchmark
parameter_list|()
block|{}
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
private|private
name|slots
private|:
comment|// Benchmarks:
name|void
name|createAndFillList_data
parameter_list|()
function_decl|;
name|void
name|createAndFillList
parameter_list|()
function_decl|;
name|void
name|add100ItemsToBeginningOfList_data
parameter_list|()
function_decl|;
name|void
name|add100ItemsToBeginningOfList
parameter_list|()
function_decl|;
name|void
name|remove100ItemsFromBeginningOfList_data
parameter_list|()
function_decl|;
name|void
name|remove100ItemsFromBeginningOfList
parameter_list|()
function_decl|;
name|void
name|deleteList_data
parameter_list|()
function_decl|;
name|void
name|deleteList
parameter_list|()
function_decl|;
name|void
name|themeChange_data
parameter_list|()
function_decl|;
name|void
name|themeChange
parameter_list|()
function_decl|;
name|void
name|update_data
parameter_list|()
function_decl|;
name|void
name|update
parameter_list|()
function_decl|;
name|void
name|scroll_data
parameter_list|()
function_decl|;
name|void
name|scroll
parameter_list|()
function_decl|;
private|private:
DECL|member|mSettings
name|Settings
modifier|*
name|mSettings
decl_stmt|;
DECL|member|mMainView
name|MainView
modifier|*
name|mMainView
decl_stmt|;
DECL|member|mDataGenerator
name|DummyDataGenerator
name|mDataGenerator
decl_stmt|;
DECL|member|currentListSize
name|int
name|currentListSize
decl_stmt|;
DECL|member|currentListType
name|ListType
name|currentListType
decl_stmt|;
name|void
name|resetView
parameter_list|()
function_decl|;
name|void
name|ensureListSizeAndType
parameter_list|(
name|int
name|listSize
parameter_list|,
name|ListType
name|listType
parameter_list|)
function_decl|;
name|void
name|ensureTheme
parameter_list|(
name|Theme
operator|::
name|Themes
name|theme
parameter_list|)
function_decl|;
name|void
name|ensureRotationAngle
parameter_list|(
name|int
name|rotation
parameter_list|)
function_decl|;
name|void
name|ensureSubtreeCache
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
name|void
name|ensureImageBasedRendering
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
name|void
name|insertListData
parameter_list|()
function_decl|;
DECL|function|setTestWidget
specifier|inline
name|void
name|setTestWidget
parameter_list|(
name|QGraphicsWidget
modifier|*
name|widget
parameter_list|,
name|int
name|listSize
parameter_list|,
name|ListType
name|listType
parameter_list|)
block|{
name|currentListSize
operator|=
name|listSize
expr_stmt|;
name|currentListType
operator|=
name|listType
expr_stmt|;
name|mMainView
operator|->
name|setTestWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|tst_GraphicsViewBenchmark::ListType
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Theme::Themes
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|tst_GraphicsViewBenchmark::ScrollStep
argument_list|)
end_macro
begin_decl_stmt
DECL|variable|AddRemoveCount
specifier|const
name|int
name|AddRemoveCount
init|=
literal|100
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|newSimpleListItem
specifier|static
name|ListItem
modifier|*
name|newSimpleListItem
parameter_list|(
name|DummyDataGenerator
modifier|&
name|dataGenerator
parameter_list|,
specifier|const
name|int
name|id
parameter_list|)
block|{
name|ListItem
modifier|*
name|item
init|=
operator|new
name|ListItem
argument_list|()
decl_stmt|;
name|item
operator|->
name|setText
argument_list|(
name|dataGenerator
operator|.
name|randomName
argument_list|()
argument_list|,
name|ListItem
operator|::
name|FirstPos
argument_list|)
expr_stmt|;
name|item
operator|->
name|setText
argument_list|(
name|dataGenerator
operator|.
name|randomPhoneNumber
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|,
name|ListItem
operator|::
name|SecondPos
argument_list|)
expr_stmt|;
name|item
operator|->
name|setIcon
argument_list|(
operator|new
name|IconItem
argument_list|(
name|dataGenerator
operator|.
name|randomIconItem
argument_list|()
argument_list|,
name|item
argument_list|)
argument_list|,
name|ListItem
operator|::
name|LeftIcon
argument_list|)
expr_stmt|;
name|item
operator|->
name|setIcon
argument_list|(
operator|new
name|IconItem
argument_list|(
name|dataGenerator
operator|.
name|randomStatusItem
argument_list|()
argument_list|,
name|item
argument_list|)
argument_list|,
name|ListItem
operator|::
name|RightIcon
argument_list|)
expr_stmt|;
name|item
operator|->
name|setFont
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|font
argument_list|(
name|Theme
operator|::
name|ContactName
argument_list|)
argument_list|,
name|ListItem
operator|::
name|FirstPos
argument_list|)
expr_stmt|;
name|item
operator|->
name|setFont
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|font
argument_list|(
name|Theme
operator|::
name|ContactNumber
argument_list|)
argument_list|,
name|ListItem
operator|::
name|SecondPos
argument_list|)
expr_stmt|;
name|item
operator|->
name|setBorderPen
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemBorderPen
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setRounding
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemRounding
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
operator|->
name|setRotation
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|iconRotation
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
operator|->
name|setRotation
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|iconRotation
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
operator|->
name|setSmoothTransformationEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconSmoothTransformationEnabled
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
operator|->
name|setSmoothTransformationEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconSmoothTransformationEnabled
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
operator|->
name|setOpacityEffectEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconOpacityEffectEnabled
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
operator|->
name|setOpacityEffectEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconOpacityEffectEnabled
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|item
return|;
block|}
end_function
begin_function
DECL|function|newRecyclingListItem
specifier|static
name|RecycledListItem
modifier|*
name|newRecyclingListItem
parameter_list|(
name|DummyDataGenerator
modifier|&
name|dataGenerator
parameter_list|,
specifier|const
name|int
name|id
parameter_list|)
block|{
name|RecycledListItem
modifier|*
name|item
init|=
operator|new
name|RecycledListItem
argument_list|()
decl_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|setText
argument_list|(
name|dataGenerator
operator|.
name|randomName
argument_list|()
argument_list|,
name|ListItem
operator|::
name|FirstPos
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|setText
argument_list|(
name|dataGenerator
operator|.
name|randomPhoneNumber
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|,
name|ListItem
operator|::
name|SecondPos
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|setIcon
argument_list|(
operator|new
name|IconItem
argument_list|(
name|dataGenerator
operator|.
name|randomIconItem
argument_list|()
argument_list|)
argument_list|,
name|ListItem
operator|::
name|LeftIcon
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|setIcon
argument_list|(
operator|new
name|IconItem
argument_list|(
name|dataGenerator
operator|.
name|randomStatusItem
argument_list|()
argument_list|)
argument_list|,
name|ListItem
operator|::
name|RightIcon
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|setFont
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|font
argument_list|(
name|Theme
operator|::
name|ContactName
argument_list|)
argument_list|,
name|ListItem
operator|::
name|FirstPos
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|setFont
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|font
argument_list|(
name|Theme
operator|::
name|ContactNumber
argument_list|)
argument_list|,
name|ListItem
operator|::
name|SecondPos
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|setBorderPen
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemBorderPen
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|setRounding
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|listItemRounding
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
operator|->
name|setRotation
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|iconRotation
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
operator|->
name|setRotation
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|iconRotation
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
operator|->
name|setSmoothTransformationEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconSmoothTransformationEnabled
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
operator|->
name|setSmoothTransformationEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconSmoothTransformationEnabled
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
operator|->
name|setOpacityEffectEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconOpacityEffectEnabled
argument_list|(
name|ListItem
operator|::
name|LeftIcon
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|item
argument_list|()
operator|->
name|icon
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
operator|->
name|setOpacityEffectEnabled
argument_list|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|isIconOpacityEffectEnabled
argument_list|(
name|ListItem
operator|::
name|RightIcon
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|item
return|;
block|}
end_function
begin_function
DECL|function|fillList
specifier|static
name|void
name|fillList
parameter_list|(
name|DummyDataGenerator
modifier|&
name|dataGenerator
parameter_list|,
name|int
name|itemCount
parameter_list|,
name|QGraphicsWidget
modifier|*
name|list
parameter_list|)
block|{
if|if
condition|(
name|SimpleList
modifier|*
name|simpleList
init|=
name|qobject_cast
argument_list|<
name|SimpleList
operator|*
argument_list|>
argument_list|(
name|list
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemCount
condition|;
operator|++
name|i
control|)
name|simpleList
operator|->
name|addItem
argument_list|(
name|newSimpleListItem
argument_list|(
name|dataGenerator
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ItemRecyclingList
modifier|*
name|recyclingList
init|=
name|qobject_cast
argument_list|<
name|ItemRecyclingList
operator|*
argument_list|>
argument_list|(
name|list
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemCount
condition|;
operator|++
name|i
control|)
name|recyclingList
operator|->
name|addItem
argument_list|(
name|newRecyclingListItem
argument_list|(
name|dataGenerator
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qFatal
argument_list|(
literal|"fillList: internal error"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resetView
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|resetView
parameter_list|()
block|{
if|if
condition|(
name|QGraphicsWidget
modifier|*
name|widget
init|=
name|mMainView
operator|->
name|takeTestWidget
argument_list|()
condition|)
block|{
operator|delete
name|widget
expr_stmt|;
name|currentListSize
operator|=
operator|-
literal|1
expr_stmt|;
name|currentListType
operator|=
name|None
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|currentListSize
operator|!=
operator|-
literal|1
condition|)
name|qFatal
argument_list|(
literal|"tst_GraphicsViewBenchmark::resetView: internal error: wrong list size"
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentListType
operator|!=
name|None
condition|)
name|qFatal
argument_list|(
literal|"tst_GraphicsViewBenchmark::resetView: internal error: wrong list type"
argument_list|)
expr_stmt|;
block|}
name|ensureTheme
argument_list|(
name|Theme
operator|::
name|Blue
argument_list|)
expr_stmt|;
name|ensureRotationAngle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ensureSubtreeCache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ensureImageBasedRendering
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureListSizeAndType
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|ensureListSizeAndType
parameter_list|(
name|int
name|listSize
parameter_list|,
name|ListType
name|listType
parameter_list|)
block|{
if|if
condition|(
name|currentListSize
operator|!=
name|listSize
operator|||
name|currentListType
operator|!=
name|listType
condition|)
block|{
name|resetView
argument_list|()
expr_stmt|;
if|if
condition|(
name|listType
operator|==
name|Simple
condition|)
block|{
name|SimpleList
modifier|*
name|list
init|=
operator|new
name|SimpleList
decl_stmt|;
name|fillList
argument_list|(
name|mDataGenerator
argument_list|,
name|listSize
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|setTestWidget
argument_list|(
name|list
argument_list|,
name|listSize
argument_list|,
name|listType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|listType
operator|==
name|Recycling
condition|)
block|{
name|ItemRecyclingList
modifier|*
name|list
init|=
operator|new
name|ItemRecyclingList
decl_stmt|;
name|fillList
argument_list|(
name|mDataGenerator
argument_list|,
name|listSize
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|setTestWidget
argument_list|(
name|list
argument_list|,
name|listSize
argument_list|,
name|listType
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Okay, we're supposed to have the right list type and size. Make sure we actually have it.
name|QGraphicsWidget
modifier|*
name|widget
init|=
name|mMainView
operator|->
name|testWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
block|{
if|if
condition|(
name|currentListType
operator|!=
name|None
operator|||
name|currentListSize
operator|!=
operator|-
literal|1
condition|)
name|qFatal
argument_list|(
literal|"tst_GraphicsViewBenchmark::ensureListSizeAndType: internal error: no test widget"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|listType
operator|==
name|Simple
condition|)
block|{
name|SimpleList
modifier|*
name|list
init|=
name|qobject_cast
argument_list|<
name|SimpleList
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|list
condition|)
name|qFatal
argument_list|(
literal|"tst_GraphicsViewBenchmark::ensureListSizeAndType: internal error: wrong list type"
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|->
name|itemCount
argument_list|()
operator|!=
name|listSize
condition|)
name|qFatal
argument_list|(
literal|"tst_GraphicsViewBenchmark::ensureListSizeAndType: internal error: wrong list size"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|listType
operator|==
name|Recycling
condition|)
block|{
name|ItemRecyclingList
modifier|*
name|list
init|=
name|qobject_cast
argument_list|<
name|ItemRecyclingList
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|list
condition|)
name|qFatal
argument_list|(
literal|"tst_GraphicsViewBenchmark::ensureListSizeAndType: internal error: wrong list type"
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|->
name|rows
argument_list|()
operator|!=
name|listSize
condition|)
name|qFatal
argument_list|(
literal|"tst_GraphicsViewBenchmark::ensureListSizeAndType: internal error: wrong list size"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ensureTheme
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|ensureTheme
parameter_list|(
name|Theme
operator|::
name|Themes
name|theme
parameter_list|)
block|{
if|if
condition|(
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|theme
argument_list|()
operator|!=
name|theme
condition|)
block|{
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|setTheme
argument_list|(
name|theme
argument_list|)
expr_stmt|;
comment|// The theme change itself can take a lot of time, so make
comment|// sure we give it a little bit time to stabilize *after*
comment|// the changes, hence sendPostedEvents(); qWait();
name|QApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ensureRotationAngle
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|ensureRotationAngle
parameter_list|(
name|int
name|angle
parameter_list|)
block|{
specifier|const
name|bool
name|useTwoColumns
init|=
name|angle
operator|!=
literal|0
decl_stmt|;
name|bool
name|wait
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mMainView
operator|->
name|rotationAngle
argument_list|()
operator|!=
name|angle
condition|)
block|{
name|mMainView
operator|->
name|rotateContent
argument_list|(
operator|-
name|mMainView
operator|->
name|rotationAngle
argument_list|()
operator|+
name|angle
argument_list|)
expr_stmt|;
name|wait
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|QGraphicsWidget
modifier|*
name|widget
init|=
name|mMainView
operator|->
name|testWidget
argument_list|()
condition|)
block|{
if|if
condition|(
name|SimpleList
modifier|*
name|list
init|=
name|qobject_cast
argument_list|<
name|SimpleList
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|list
operator|->
name|twoColumns
argument_list|()
operator|!=
name|useTwoColumns
condition|)
block|{
name|list
operator|->
name|setTwoColumns
argument_list|(
name|useTwoColumns
argument_list|)
expr_stmt|;
name|wait
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ItemRecyclingList
modifier|*
name|list
init|=
name|qobject_cast
argument_list|<
name|ItemRecyclingList
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|list
operator|->
name|twoColumns
argument_list|()
operator|!=
name|useTwoColumns
condition|)
block|{
name|list
operator|->
name|setTwoColumns
argument_list|(
name|useTwoColumns
argument_list|)
expr_stmt|;
name|wait
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|wait
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureSubtreeCache
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|ensureSubtreeCache
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|QGraphicsWidget
modifier|*
name|widget
init|=
name|mMainView
operator|->
name|testWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
return|return;
if|if
condition|(
name|SimpleList
modifier|*
name|list
init|=
name|qobject_cast
argument_list|<
name|SimpleList
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|list
operator|->
name|listItemCaching
argument_list|()
operator|!=
name|enable
condition|)
block|{
name|list
operator|->
name|setListItemCaching
argument_list|(
name|enable
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ItemRecyclingList
modifier|*
name|list
init|=
name|qobject_cast
argument_list|<
name|ItemRecyclingList
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|list
operator|->
name|listItemCaching
argument_list|()
operator|!=
name|enable
condition|)
block|{
name|list
operator|->
name|setListItemCaching
argument_list|(
name|enable
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureImageBasedRendering
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|ensureImageBasedRendering
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
if|if
condition|(
name|mMainView
operator|->
name|imageBasedRendering
argument_list|()
operator|!=
name|enable
condition|)
block|{
name|mMainView
operator|->
name|setImageBasedRendering
argument_list|(
name|enable
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insertListData
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|insertListData
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"listSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ListType
argument_list|>
argument_list|(
literal|"listType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Simple list containing 10 items"
argument_list|)
operator|<<
literal|10
operator|<<
name|Simple
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Recycling list containing 10 items"
argument_list|)
operator|<<
literal|10
operator|<<
name|Recycling
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Simple list containing 50 items"
argument_list|)
operator|<<
literal|50
operator|<<
name|Simple
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Recycling list containing 50 items"
argument_list|)
operator|<<
literal|50
operator|<<
name|Recycling
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Simple list containing 500 items"
argument_list|)
operator|<<
literal|500
operator|<<
name|Simple
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Recycling list containing 500 items"
argument_list|)
operator|<<
literal|500
operator|<<
name|Recycling
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|initTestCase
parameter_list|()
block|{
name|mMainView
operator|=
operator|new
name|MainView
argument_list|(
name|mSettings
operator|->
name|options
argument_list|()
operator|&
name|Settings
operator|::
name|UseOpenGL
argument_list|,
name|mSettings
operator|->
name|options
argument_list|()
operator|&
name|Settings
operator|::
name|OutputFps
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSettings
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|mSettings
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mMainView
operator|->
name|resize
argument_list|(
name|mSettings
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|mSettings
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|mMainView
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|width
argument_list|()
operator|<
literal|360
operator|||
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|height
argument_list|()
operator|<
literal|640
condition|)
block|{
name|mMainView
operator|->
name|showFullScreen
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mMainView
operator|->
name|resize
argument_list|(
literal|360
argument_list|,
literal|640
argument_list|)
expr_stmt|;
name|mMainView
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
name|mDataGenerator
operator|.
name|Reset
argument_list|()
expr_stmt|;
name|SimpleList
modifier|*
name|list
init|=
operator|new
name|SimpleList
decl_stmt|;
name|list
operator|->
name|setListItemCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mMainView
operator|->
name|setTestWidget
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|fillList
argument_list|(
name|mDataGenerator
argument_list|,
literal|5
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|mMainView
operator|->
name|takeTestWidget
argument_list|()
expr_stmt|;
operator|delete
name|list
expr_stmt|;
name|currentListSize
operator|=
operator|-
literal|1
expr_stmt|;
name|currentListType
operator|=
name|None
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
name|mMainView
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|mMainView
expr_stmt|;
name|mMainView
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|init
parameter_list|()
block|{
comment|// Make sure we don't have pending events in the queue.
comment|// Yes, each test run takes a little bit longer, but the results are more stable.
name|QTest
operator|::
name|qWait
argument_list|(
literal|150
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createAndFillList_data
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|createAndFillList_data
parameter_list|()
block|{
name|insertListData
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createAndFillList
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|createAndFillList
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|listSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ListType
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|resetView
argument_list|()
expr_stmt|;
if|if
condition|(
name|listType
operator|==
name|Simple
condition|)
block|{
name|QBENCHMARK
block|{
name|SimpleList
modifier|*
name|list
init|=
operator|new
name|SimpleList
decl_stmt|;
name|setTestWidget
argument_list|(
name|list
argument_list|,
name|listSize
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|fillList
argument_list|(
name|mDataGenerator
argument_list|,
name|listSize
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QBENCHMARK
block|{
name|ItemRecyclingList
modifier|*
name|list
init|=
operator|new
name|ItemRecyclingList
decl_stmt|;
name|setTestWidget
argument_list|(
name|list
argument_list|,
name|listSize
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|fillList
argument_list|(
name|mDataGenerator
argument_list|,
name|listSize
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
name|resetView
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add100ItemsToBeginningOfList_data
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|add100ItemsToBeginningOfList_data
parameter_list|()
block|{
name|insertListData
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add100ItemsToBeginningOfList
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|add100ItemsToBeginningOfList
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|listSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ListType
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|resetView
argument_list|()
expr_stmt|;
if|if
condition|(
name|listType
operator|==
name|Simple
condition|)
block|{
name|SimpleList
modifier|*
name|list
init|=
operator|new
name|SimpleList
decl_stmt|;
name|fillList
argument_list|(
name|mDataGenerator
argument_list|,
name|listSize
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|setTestWidget
argument_list|(
name|list
argument_list|,
name|listSize
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AddRemoveCount
condition|;
operator|++
name|i
control|)
name|list
operator|->
name|insertItem
argument_list|(
literal|0
argument_list|,
name|newSimpleListItem
argument_list|(
name|mDataGenerator
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ItemRecyclingList
modifier|*
name|list
init|=
operator|new
name|ItemRecyclingList
decl_stmt|;
name|fillList
argument_list|(
name|mDataGenerator
argument_list|,
name|listSize
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|setTestWidget
argument_list|(
name|list
argument_list|,
name|listSize
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AddRemoveCount
condition|;
operator|++
name|i
control|)
name|list
operator|->
name|insertItem
argument_list|(
literal|0
argument_list|,
name|newRecyclingListItem
argument_list|(
name|mDataGenerator
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|resetView
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove100ItemsFromBeginningOfList_data
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|remove100ItemsFromBeginningOfList_data
parameter_list|()
block|{
name|insertListData
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove100ItemsFromBeginningOfList
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|remove100ItemsFromBeginningOfList
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|listSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ListType
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|resetView
argument_list|()
expr_stmt|;
if|if
condition|(
name|listType
operator|==
name|Simple
condition|)
block|{
name|SimpleList
modifier|*
name|list
init|=
operator|new
name|SimpleList
decl_stmt|;
name|fillList
argument_list|(
name|mDataGenerator
argument_list|,
name|listSize
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|setTestWidget
argument_list|(
name|list
argument_list|,
name|listSize
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AddRemoveCount
condition|;
operator|++
name|i
control|)
operator|delete
name|list
operator|->
name|takeItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ItemRecyclingList
modifier|*
name|list
init|=
operator|new
name|ItemRecyclingList
decl_stmt|;
name|fillList
argument_list|(
name|mDataGenerator
argument_list|,
name|listSize
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|setTestWidget
argument_list|(
name|list
argument_list|,
name|listSize
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AddRemoveCount
condition|;
operator|++
name|i
control|)
operator|delete
name|list
operator|->
name|takeItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|resetView
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteList_data
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|deleteList_data
parameter_list|()
block|{
name|insertListData
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Simple list containing 1000 items"
argument_list|)
operator|<<
literal|1000
operator|<<
name|Simple
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Recycling list containing 1000 items"
argument_list|)
operator|<<
literal|1000
operator|<<
name|Recycling
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteList
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|deleteList
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|listSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ListType
argument_list|,
name|listType
argument_list|)
expr_stmt|;
if|if
condition|(
name|listSize
operator|<
literal|500
condition|)
return|return;
comment|// Too small to measure.
name|QGraphicsWidget
modifier|*
name|list
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|listType
operator|==
name|Simple
condition|)
name|list
operator|=
operator|new
name|SimpleList
expr_stmt|;
else|else
name|list
operator|=
operator|new
name|ItemRecyclingList
expr_stmt|;
name|fillList
argument_list|(
name|mDataGenerator
argument_list|,
name|listSize
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QBENCHMARK_ONCE
block|{
operator|delete
name|list
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|themeChange_data
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|themeChange_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"listSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ListType
argument_list|>
argument_list|(
literal|"listType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Theme
operator|::
name|Themes
argument_list|>
argument_list|(
literal|"fromTheme"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Theme
operator|::
name|Themes
argument_list|>
argument_list|(
literal|"toTheme"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Blue to Lime, simple list containing 10 items"
argument_list|)
operator|<<
literal|10
operator|<<
name|Simple
operator|<<
name|Theme
operator|::
name|Blue
operator|<<
name|Theme
operator|::
name|Lime
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Lime to Blue, simple list containing 10 items"
argument_list|)
operator|<<
literal|10
operator|<<
name|Simple
operator|<<
name|Theme
operator|::
name|Lime
operator|<<
name|Theme
operator|::
name|Blue
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Blue to Lime, recycling list containing 10 items"
argument_list|)
operator|<<
literal|10
operator|<<
name|Recycling
operator|<<
name|Theme
operator|::
name|Blue
operator|<<
name|Theme
operator|::
name|Lime
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Lime to Blue, recycling list containing 10 items"
argument_list|)
operator|<<
literal|10
operator|<<
name|Recycling
operator|<<
name|Theme
operator|::
name|Lime
operator|<<
name|Theme
operator|::
name|Blue
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Blue to Lime, simple list containing 50 items"
argument_list|)
operator|<<
literal|50
operator|<<
name|Simple
operator|<<
name|Theme
operator|::
name|Blue
operator|<<
name|Theme
operator|::
name|Lime
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Lime to Blue, simple list containing 50 items"
argument_list|)
operator|<<
literal|50
operator|<<
name|Simple
operator|<<
name|Theme
operator|::
name|Lime
operator|<<
name|Theme
operator|::
name|Blue
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Blue to Lime, recycling list containing 50 items"
argument_list|)
operator|<<
literal|50
operator|<<
name|Recycling
operator|<<
name|Theme
operator|::
name|Blue
operator|<<
name|Theme
operator|::
name|Lime
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Lime to Blue, recycling list containing 50 items"
argument_list|)
operator|<<
literal|50
operator|<<
name|Recycling
operator|<<
name|Theme
operator|::
name|Lime
operator|<<
name|Theme
operator|::
name|Blue
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Blue to Lime, simple list containing 500 items"
argument_list|)
operator|<<
literal|500
operator|<<
name|Simple
operator|<<
name|Theme
operator|::
name|Blue
operator|<<
name|Theme
operator|::
name|Lime
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Lime to Blue, simple list containing 500 items"
argument_list|)
operator|<<
literal|500
operator|<<
name|Simple
operator|<<
name|Theme
operator|::
name|Lime
operator|<<
name|Theme
operator|::
name|Blue
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Blue to Lime, recycling list containing 500 items"
argument_list|)
operator|<<
literal|500
operator|<<
name|Recycling
operator|<<
name|Theme
operator|::
name|Blue
operator|<<
name|Theme
operator|::
name|Lime
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From Lime to Blue, recycling list containing 500 items"
argument_list|)
operator|<<
literal|500
operator|<<
name|Recycling
operator|<<
name|Theme
operator|::
name|Lime
operator|<<
name|Theme
operator|::
name|Blue
expr_stmt|;
block|}
end_function
begin_function
DECL|function|themeChange
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|themeChange
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|listSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ListType
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Theme
operator|::
name|Themes
argument_list|,
name|fromTheme
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Theme
operator|::
name|Themes
argument_list|,
name|toTheme
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromTheme
operator|==
name|toTheme
condition|)
name|qFatal
argument_list|(
literal|"tst_GraphicsViewBenchmark::themeChange: to and from theme is the same"
argument_list|)
expr_stmt|;
name|ensureListSizeAndType
argument_list|(
name|listSize
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|ensureTheme
argument_list|(
name|fromTheme
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|Theme
operator|::
name|p
argument_list|()
operator|->
name|setTheme
argument_list|(
name|toTheme
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stringForTheme
specifier|static
specifier|inline
name|QLatin1String
name|stringForTheme
parameter_list|(
name|Theme
operator|::
name|Themes
name|theme
parameter_list|)
block|{
if|if
condition|(
name|theme
operator|==
name|Theme
operator|::
name|Blue
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"Blue"
argument_list|)
return|;
return|return
name|QLatin1String
argument_list|(
literal|"Lime"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|stringForListType
specifier|static
specifier|inline
name|QLatin1String
name|stringForListType
parameter_list|(
name|tst_GraphicsViewBenchmark
operator|::
name|ListType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|tst_GraphicsViewBenchmark
operator|::
name|Simple
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"Simple"
argument_list|)
return|;
if|if
condition|(
name|type
operator|==
name|tst_GraphicsViewBenchmark
operator|::
name|Recycling
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"Recycling"
argument_list|)
return|;
return|return
name|QLatin1String
argument_list|(
literal|"None"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|stringForScrollStep
specifier|static
specifier|inline
name|QLatin1String
name|stringForScrollStep
parameter_list|(
name|tst_GraphicsViewBenchmark
operator|::
name|ScrollStep
name|step
parameter_list|)
block|{
if|if
condition|(
name|step
operator|==
name|tst_GraphicsViewBenchmark
operator|::
name|Slow
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"Slow"
argument_list|)
return|;
if|if
condition|(
name|step
operator|==
name|tst_GraphicsViewBenchmark
operator|::
name|Normal
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"Normal"
argument_list|)
return|;
return|return
name|QLatin1String
argument_list|(
literal|"Fast"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rowString
specifier|static
specifier|inline
name|QString
name|rowString
parameter_list|(
name|int
name|listSize
parameter_list|,
name|tst_GraphicsViewBenchmark
operator|::
name|ListType
name|listType
parameter_list|,
name|Theme
operator|::
name|Themes
name|theme
parameter_list|,
name|int
name|toImage
parameter_list|,
name|int
name|cache
parameter_list|,
name|int
name|angle
parameter_list|)
block|{
return|return
name|QString
argument_list|(
literal|"Items=%1, List=%2, Theme=%3, RenderToImage=%4, Cache=%5, RotAngle=%6"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|listSize
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|stringForListType
argument_list|(
name|listType
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|stringForTheme
argument_list|(
name|theme
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|toImage
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|cache
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|angle
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rowString
specifier|static
specifier|inline
name|QString
name|rowString
parameter_list|(
name|int
name|listSize
parameter_list|,
name|tst_GraphicsViewBenchmark
operator|::
name|ListType
name|listType
parameter_list|,
name|Theme
operator|::
name|Themes
name|theme
parameter_list|,
name|int
name|cache
parameter_list|,
name|int
name|angle
parameter_list|,
name|tst_GraphicsViewBenchmark
operator|::
name|ScrollStep
name|step
parameter_list|)
block|{
return|return
name|QString
argument_list|(
literal|"Items=%1, List=%2, Theme=%3, Cache=%4, RotAngle=%5, Speed=%6"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|listSize
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|stringForListType
argument_list|(
name|listType
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|stringForTheme
argument_list|(
name|theme
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|cache
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|angle
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|stringForScrollStep
argument_list|(
name|step
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|update_data
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|update_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"listSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ListType
argument_list|>
argument_list|(
literal|"listType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Theme
operator|::
name|Themes
argument_list|>
argument_list|(
literal|"theme"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"renderToImage"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"subtreeCache"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rotationAngle"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|ListType
argument_list|>
name|listTypes
decl_stmt|;
name|listTypes
operator|<<
name|Simple
operator|<<
name|Recycling
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|listSizes
decl_stmt|;
name|listSizes
operator|<<
literal|10
operator|<<
literal|50
operator|<<
literal|500
expr_stmt|;
name|QList
argument_list|<
name|Theme
operator|::
name|Themes
argument_list|>
name|themes
decl_stmt|;
name|themes
operator|<<
name|Theme
operator|::
name|Blue
operator|<<
name|Theme
operator|::
name|Lime
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|rotationAngles
decl_stmt|;
name|rotationAngles
operator|<<
literal|0
operator|<<
literal|90
expr_stmt|;
comment|// Generate rows:
foreach|foreach
control|(
name|ListType
name|listType
decl|,
name|listTypes
control|)
block|{
foreach|foreach
control|(
name|int
name|listSize
decl|,
name|listSizes
control|)
block|{
foreach|foreach
control|(
name|int
name|angle
decl|,
name|rotationAngles
control|)
block|{
foreach|foreach
control|(
name|Theme
operator|::
name|Themes
name|theme
decl|,
name|themes
control|)
block|{
for|for
control|(
name|int
name|toImage
init|=
literal|0
init|;
name|toImage
operator|<
literal|2
condition|;
operator|++
name|toImage
control|)
block|{
for|for
control|(
name|int
name|cache
init|=
literal|0
init|;
name|cache
operator|<
literal|2
condition|;
operator|++
name|cache
control|)
block|{
name|QString
name|string
init|=
name|rowString
argument_list|(
name|listSize
argument_list|,
name|listType
argument_list|,
name|theme
argument_list|,
name|toImage
argument_list|,
name|cache
argument_list|,
name|angle
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|string
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|listSize
operator|<<
name|listType
operator|<<
name|theme
operator|<<
name|bool
argument_list|(
name|toImage
argument_list|)
operator|<<
name|bool
argument_list|(
name|cache
argument_list|)
operator|<<
name|angle
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|update
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|update
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|listSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ListType
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Theme
operator|::
name|Themes
argument_list|,
name|theme
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|renderToImage
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|subtreeCache
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rotationAngle
argument_list|)
expr_stmt|;
name|mMainView
operator|->
name|viewport
argument_list|()
operator|->
name|setUpdatesEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ensureListSizeAndType
argument_list|(
name|listSize
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|ensureTheme
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|ensureRotationAngle
argument_list|(
name|rotationAngle
argument_list|)
expr_stmt|;
name|ensureSubtreeCache
argument_list|(
name|subtreeCache
argument_list|)
expr_stmt|;
name|ensureImageBasedRendering
argument_list|(
name|renderToImage
argument_list|)
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|mMainView
argument_list|,
name|SIGNAL
argument_list|(
name|repainted
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|4000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Dry run (especially important when cache is enabled).
comment|// NB! setUpdatesEnabled triggers an update().
name|mMainView
operator|->
name|viewport
argument_list|()
operator|->
name|setUpdatesEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
operator||
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
operator||
name|QEventLoop
operator|::
name|ExcludeSocketNotifiers
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|4000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|mMainView
operator|->
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
operator||
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
operator||
name|QEventLoop
operator|::
name|ExcludeSocketNotifiers
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|scroll_data
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|scroll_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"listSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ListType
argument_list|>
argument_list|(
literal|"listType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Theme
operator|::
name|Themes
argument_list|>
argument_list|(
literal|"theme"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"subtreeCache"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rotationAngle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ScrollStep
argument_list|>
argument_list|(
literal|"scrollStep"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|ListType
argument_list|>
name|listTypes
decl_stmt|;
name|listTypes
operator|<<
name|Simple
operator|<<
name|Recycling
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|listSizes
decl_stmt|;
name|listSizes
operator|<<
literal|10
operator|<<
literal|50
operator|<<
literal|500
expr_stmt|;
name|QList
argument_list|<
name|Theme
operator|::
name|Themes
argument_list|>
name|themes
decl_stmt|;
name|themes
operator|<<
name|Theme
operator|::
name|Blue
operator|<<
name|Theme
operator|::
name|Lime
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|rotationAngles
decl_stmt|;
name|rotationAngles
operator|<<
literal|0
operator|<<
literal|90
expr_stmt|;
name|QList
argument_list|<
name|ScrollStep
argument_list|>
name|scrollSteps
decl_stmt|;
name|scrollSteps
operator|<<
name|Slow
operator|<<
name|Normal
operator|<<
name|Fast
expr_stmt|;
comment|// Generate rows:
foreach|foreach
control|(
name|ListType
name|listType
decl|,
name|listTypes
control|)
block|{
foreach|foreach
control|(
name|int
name|listSize
decl|,
name|listSizes
control|)
block|{
foreach|foreach
control|(
name|int
name|angle
decl|,
name|rotationAngles
control|)
block|{
foreach|foreach
control|(
name|ScrollStep
name|step
decl|,
name|scrollSteps
control|)
block|{
foreach|foreach
control|(
name|Theme
operator|::
name|Themes
name|theme
decl|,
name|themes
control|)
block|{
for|for
control|(
name|int
name|cache
init|=
literal|0
init|;
name|cache
operator|<
literal|2
condition|;
operator|++
name|cache
control|)
block|{
name|QString
name|string
init|=
name|rowString
argument_list|(
name|listSize
argument_list|,
name|listType
argument_list|,
name|theme
argument_list|,
name|cache
argument_list|,
name|angle
argument_list|,
name|step
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|string
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|listSize
operator|<<
name|listType
operator|<<
name|theme
operator|<<
name|bool
argument_list|(
name|cache
argument_list|)
operator|<<
name|angle
operator|<<
name|step
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|scroll
name|void
name|tst_GraphicsViewBenchmark
operator|::
name|scroll
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|listSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ListType
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Theme
operator|::
name|Themes
argument_list|,
name|theme
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|subtreeCache
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rotationAngle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ScrollStep
argument_list|,
name|scrollStep
argument_list|)
expr_stmt|;
name|mMainView
operator|->
name|viewport
argument_list|()
operator|->
name|setUpdatesEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ensureListSizeAndType
argument_list|(
name|listSize
argument_list|,
name|listType
argument_list|)
expr_stmt|;
name|ensureTheme
argument_list|(
name|theme
argument_list|)
expr_stmt|;
name|ensureRotationAngle
argument_list|(
name|rotationAngle
argument_list|)
expr_stmt|;
name|ensureSubtreeCache
argument_list|(
name|subtreeCache
argument_list|)
expr_stmt|;
name|ensureImageBasedRendering
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ScrollBar
modifier|*
name|sb
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|listType
operator|==
name|Simple
condition|)
name|sb
operator|=
cast|static_cast
argument_list|<
name|SimpleList
operator|*
argument_list|>
argument_list|(
name|mMainView
operator|->
name|testWidget
argument_list|()
argument_list|)
operator|->
name|verticalScrollBar
argument_list|()
expr_stmt|;
else|else
name|sb
operator|=
cast|static_cast
argument_list|<
name|ItemRecyclingList
operator|*
argument_list|>
argument_list|(
name|mMainView
operator|->
name|testWidget
argument_list|()
argument_list|)
operator|->
name|verticalScrollBar
argument_list|()
expr_stmt|;
specifier|const
name|qreal
name|sliderStart
init|=
name|sb
operator|->
name|sliderSize
argument_list|()
operator|/
name|qreal
argument_list|(
literal|2.0
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|sliderTarget
init|=
name|sliderStart
operator|+
name|qreal
argument_list|(
name|scrollStep
argument_list|)
decl_stmt|;
name|sb
operator|->
name|setSliderPosition
argument_list|(
name|sliderStart
argument_list|)
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|mMainView
argument_list|,
name|SIGNAL
argument_list|(
name|repainted
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|4000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Dry run (especially important when cache is enabled).
comment|// NB! setUpdatesEnabled triggers an update().
name|mMainView
operator|->
name|viewport
argument_list|()
operator|->
name|setUpdatesEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
operator||
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
operator||
name|QEventLoop
operator|::
name|ExcludeSocketNotifiers
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|4000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|sb
operator|->
name|setSliderPosition
argument_list|(
name|sliderTarget
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
operator||
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
operator||
name|QEventLoop
operator|::
name|ExcludeSocketNotifiers
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|Settings
name|settings
decl_stmt|;
if|if
condition|(
operator|!
name|readSettingsFromCommandLine
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|,
name|settings
argument_list|)
condition|)
return|return
literal|1
return|;
comment|// Eat command line arguments.
name|int
name|aargc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argc
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|argv
index|[
name|i
index|]
condition|)
operator|++
name|aargc
expr_stmt|;
block|}
name|char
modifier|*
modifier|*
name|aargv
init|=
operator|new
name|char
operator|*
index|[
name|aargc
index|]
decl_stmt|;
name|aargc
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argc
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|argv
index|[
name|i
index|]
condition|)
name|aargv
index|[
name|aargc
operator|++
index|]
operator|=
name|argv
index|[
name|i
index|]
expr_stmt|;
block|}
name|QApplication
name|app
argument_list|(
name|aargc
argument_list|,
name|aargv
argument_list|)
decl_stmt|;
name|int
name|returnValue
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|options
argument_list|()
operator|&
name|Settings
operator|::
name|ManualTest
condition|)
block|{
name|MainView
name|view
argument_list|(
name|settings
operator|.
name|options
argument_list|()
operator|&
name|Settings
operator|::
name|UseOpenGL
argument_list|,
name|settings
operator|.
name|options
argument_list|()
operator|&
name|Settings
operator|::
name|OutputFps
argument_list|)
decl_stmt|;
name|DummyDataGenerator
name|dataGenerator
decl_stmt|;
name|dataGenerator
operator|.
name|Reset
argument_list|()
expr_stmt|;
name|SimpleList
modifier|*
name|list
init|=
operator|new
name|SimpleList
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|options
argument_list|()
operator|&
name|Settings
operator|::
name|UseListItemCache
condition|)
name|list
operator|->
name|setListItemCaching
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|list
operator|->
name|setListItemCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|listItemCount
argument_list|()
condition|)
name|fillList
argument_list|(
name|dataGenerator
argument_list|,
name|settings
operator|.
name|listItemCount
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
else|else
name|fillList
argument_list|(
name|dataGenerator
argument_list|,
literal|500
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|view
operator|.
name|setTestWidget
argument_list|(
name|list
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|settings
operator|.
name|angle
argument_list|()
operator|%
literal|360
operator|)
operator|!=
literal|0
condition|)
name|view
operator|.
name|rotateContent
argument_list|(
name|settings
operator|.
name|angle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|settings
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
block|{
name|view
operator|.
name|resize
argument_list|(
name|settings
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|settings
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|width
argument_list|()
operator|<
literal|360
operator|||
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|height
argument_list|()
operator|<
literal|640
condition|)
block|{
name|view
operator|.
name|showFullScreen
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|view
operator|.
name|resize
argument_list|(
literal|360
argument_list|,
literal|640
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
name|returnValue
operator|=
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QTEST_DISABLE_KEYPAD_NAVIGATION
name|tst_GraphicsViewBenchmark
name|tc
argument_list|(
operator|&
name|settings
argument_list|)
decl_stmt|;
name|returnValue
operator|=
name|QTest
operator|::
name|qExec
argument_list|(
operator|&
name|tc
argument_list|,
name|aargc
argument_list|,
name|aargv
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|aargv
expr_stmt|;
return|return
name|returnValue
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
