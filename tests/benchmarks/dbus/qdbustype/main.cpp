begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the FOO module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtDBus/private/qdbusutil_p.h>
end_include
begin_include
include|#
directive|include
file|<dbus/dbus.h>
end_include
begin_class
DECL|class|tst_QDBusType
class|class
name|tst_QDBusType
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|Q_SLOTS
private|:
name|void
name|benchmarkSignature_data
parameter_list|()
function_decl|;
name|void
name|benchmarkSignature
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|benchmarkAddRow
specifier|static
specifier|inline
name|void
name|benchmarkAddRow
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
literal|"native-"
argument_list|)
operator|+
name|name
argument_list|)
operator|<<
name|data
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|name
argument_list|)
operator|<<
name|data
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|benchmarkSignature_data
name|void
name|tst_QDBusType
operator|::
name|benchmarkSignature_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useNative"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|loopCount
init|=
literal|0
init|;
name|loopCount
operator|<
literal|2
condition|;
operator|++
name|loopCount
control|)
block|{
name|bool
name|useNative
init|=
name|loopCount
decl_stmt|;
name|QByteArray
name|prefix
init|=
name|useNative
condition|?
literal|"native-"
else|:
literal|""
decl_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"single-invalid"
argument_list|,
literal|"~"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"single-invalid-array"
argument_list|,
literal|"a~"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"single-invalid-struct"
argument_list|,
literal|"(.)"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"single-char"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"single-array"
argument_list|,
literal|"as"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"single-simplestruct"
argument_list|,
literal|"(y)"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"single-simpledict"
argument_list|,
literal|"a{sv}"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"single-complexdict"
argument_list|,
literal|"a{s(aya{io})}"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"multiple-char"
argument_list|,
literal|"ssg"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"multiple-arrays"
argument_list|,
literal|"asasay"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"struct-missingclose"
argument_list|,
literal|"(ayyyy"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"longstruct"
argument_list|,
literal|"(yyyyyyayasy)"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"invalid-longstruct"
argument_list|,
literal|"(yyyyyyayas.y)"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"complexstruct"
argument_list|,
literal|"(y(aasay)oga{sv})"
argument_list|)
expr_stmt|;
name|benchmarkAddRow
argument_list|(
literal|"multiple-simple-structs"
argument_list|,
literal|"(y)(y)(y)"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|benchmarkSignature
name|void
name|tst_QDBusType
operator|::
name|benchmarkSignature
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useNative
argument_list|)
expr_stmt|;
name|bool
name|result
decl_stmt|;
if|if
condition|(
name|useNative
condition|)
block|{
name|dbus_signature_validate
argument_list|(
name|data
operator|.
name|toLatin1
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|result
operator|=
name|dbus_signature_validate
argument_list|(
name|data
operator|.
name|toLatin1
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QDBusUtil
operator|::
name|isValidSignature
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|result
operator|=
name|QDBusUtil
operator|::
name|isValidSignature
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
name|Q_UNUSED
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDBusType
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
