begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|"mainwindow.h"
end_include
begin_constructor
DECL|function|MainWindow
name|MainWindow
operator|::
name|MainWindow
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QMainWindow
argument_list|(
name|parent
argument_list|)
block|{
name|QFrame
modifier|*
name|centralFrame
init|=
operator|new
name|QFrame
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QLabel
modifier|*
name|nameLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Comment:"
argument_list|)
argument_list|,
name|centralFrame
argument_list|)
decl_stmt|;
name|commentEdit
operator|=
operator|new
name|QTextEdit
argument_list|(
name|centralFrame
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|dragLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"<p>Drag the icon to a filer "
literal|"window or the desktop background:</p>"
argument_list|)
argument_list|,
name|centralFrame
argument_list|)
decl_stmt|;
name|iconLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|centralFrame
argument_list|)
expr_stmt|;
name|iconPixmap
operator|.
name|load
argument_list|(
literal|":/images/file.png"
argument_list|)
expr_stmt|;
name|iconLabel
operator|->
name|setPixmap
argument_list|(
name|iconPixmap
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|grid
init|=
operator|new
name|QGridLayout
argument_list|(
name|centralFrame
argument_list|)
decl_stmt|;
name|grid
operator|->
name|addWidget
argument_list|(
name|nameLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|grid
operator|->
name|addWidget
argument_list|(
name|commentEdit
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|grid
operator|->
name|addWidget
argument_list|(
name|dragLabel
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|grid
operator|->
name|addWidget
argument_list|(
name|iconLabel
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|statusBar
argument_list|()
expr_stmt|;
name|setCentralWidget
argument_list|(
name|centralFrame
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Dragging"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [0]
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|MainWindow
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
name|iconLabel
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
comment|//! [1]
name|QDrag
modifier|*
name|drag
init|=
operator|new
name|QDrag
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QMimeData
modifier|*
name|mimeData
init|=
operator|new
name|QMimeData
decl_stmt|;
name|mimeData
operator|->
name|setText
argument_list|(
name|commentEdit
operator|->
name|toPlainText
argument_list|()
argument_list|)
expr_stmt|;
name|drag
operator|->
name|setMimeData
argument_list|(
name|mimeData
argument_list|)
expr_stmt|;
comment|//! [1]
name|drag
operator|->
name|setPixmap
argument_list|(
name|iconPixmap
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|DropAction
name|dropAction
init|=
name|drag
operator|->
name|exec
argument_list|()
decl_stmt|;
comment|//! [0]
name|QString
name|actionText
decl_stmt|;
switch|switch
condition|(
name|dropAction
condition|)
block|{
case|case
name|Qt
operator|::
name|CopyAction
case|:
name|actionText
operator|=
name|tr
argument_list|(
literal|"The text was copied."
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|MoveAction
case|:
name|actionText
operator|=
name|tr
argument_list|(
literal|"The text was moved."
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|LinkAction
case|:
name|actionText
operator|=
name|tr
argument_list|(
literal|"The text was linked."
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|IgnoreAction
case|:
name|actionText
operator|=
name|tr
argument_list|(
literal|"The drag was ignored."
argument_list|)
expr_stmt|;
break|break;
default|default:
name|actionText
operator|=
name|tr
argument_list|(
literal|"Unknown action."
argument_list|)
expr_stmt|;
break|break;
block|}
name|statusBar
argument_list|()
operator|->
name|showMessage
argument_list|(
name|actionText
argument_list|)
expr_stmt|;
comment|//! [2]
block|}
block|}
end_function
begin_comment
comment|//! [2]
end_comment
end_unit
