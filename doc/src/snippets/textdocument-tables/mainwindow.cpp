begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|"mainwindow.h"
end_include
begin_include
include|#
directive|include
file|"xmlwriter.h"
end_include
begin_constructor
DECL|function|MainWindow
name|MainWindow
operator|::
name|MainWindow
parameter_list|()
block|{
name|QMenu
modifier|*
name|fileMenu
init|=
operator|new
name|QMenu
argument_list|(
name|tr
argument_list|(
literal|"&File"
argument_list|)
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|saveAction
init|=
name|fileMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&Save..."
argument_list|)
argument_list|)
decl_stmt|;
name|saveAction
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Ctrl+S"
argument_list|)
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|quitAction
init|=
name|fileMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"E&xit"
argument_list|)
argument_list|)
decl_stmt|;
name|quitAction
operator|->
name|setShortcut
argument_list|(
name|tr
argument_list|(
literal|"Ctrl+Q"
argument_list|)
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|showMenu
init|=
operator|new
name|QMenu
argument_list|(
name|tr
argument_list|(
literal|"&Show"
argument_list|)
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|showTableAction
init|=
name|showMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&Table"
argument_list|)
argument_list|)
decl_stmt|;
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|fileMenu
argument_list|)
expr_stmt|;
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|showMenu
argument_list|)
expr_stmt|;
name|editor
operator|=
operator|new
name|QTextEdit
argument_list|()
expr_stmt|;
comment|//! [0] //! [1]
name|QTextCursor
name|cursor
argument_list|(
name|editor
operator|->
name|textCursor
argument_list|()
argument_list|)
decl_stmt|;
comment|//! [0]
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
comment|//! [1]
name|int
name|rows
init|=
literal|11
decl_stmt|;
name|int
name|columns
init|=
literal|4
decl_stmt|;
comment|//! [2]
name|QTextTableFormat
name|tableFormat
decl_stmt|;
name|tableFormat
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
literal|"#e0e0e0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QTextLength
argument_list|>
name|constraints
decl_stmt|;
name|constraints
operator|<<
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|constraints
operator|<<
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|constraints
operator|<<
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|constraints
operator|<<
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|PercentageLength
argument_list|,
literal|28
argument_list|)
expr_stmt|;
name|tableFormat
operator|.
name|setColumnWidthConstraints
argument_list|(
name|constraints
argument_list|)
expr_stmt|;
comment|//! [3]
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|insertTable
argument_list|(
name|rows
argument_list|,
name|columns
argument_list|,
name|tableFormat
argument_list|)
decl_stmt|;
comment|//! [2] //! [3]
name|int
name|column
decl_stmt|;
name|int
name|row
decl_stmt|;
name|QTextTableCell
name|cell
decl_stmt|;
name|QTextCursor
name|cellCursor
decl_stmt|;
name|QTextCharFormat
name|charFormat
decl_stmt|;
name|charFormat
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
comment|//! [4]
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cellCursor
operator|=
name|cell
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|cellCursor
operator|.
name|insertText
argument_list|(
name|tr
argument_list|(
literal|"Week"
argument_list|)
argument_list|,
name|charFormat
argument_list|)
expr_stmt|;
comment|//! [4]
comment|//! [5]
for|for
control|(
name|column
operator|=
literal|1
init|;
name|column
operator|<
name|columns
condition|;
operator|++
name|column
control|)
block|{
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
literal|0
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|cellCursor
operator|=
name|cell
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|cellCursor
operator|.
name|insertText
argument_list|(
name|tr
argument_list|(
literal|"Team %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|column
argument_list|)
argument_list|,
name|charFormat
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|row
operator|=
literal|1
init|;
name|row
operator|<
name|rows
condition|;
operator|++
name|row
control|)
block|{
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cellCursor
operator|=
name|cell
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
name|cellCursor
operator|.
name|insertText
argument_list|(
name|tr
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|row
argument_list|)
argument_list|,
name|charFormat
argument_list|)
expr_stmt|;
for|for
control|(
name|column
operator|=
literal|1
init|;
name|column
operator|<
name|columns
condition|;
operator|++
name|column
control|)
block|{
if|if
condition|(
operator|(
name|row
operator|-
literal|1
operator|)
operator|%
literal|3
operator|==
name|column
operator|-
literal|1
condition|)
block|{
comment|//! [5] //! [6]
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|QTextCursor
name|cellCursor
init|=
name|cell
operator|.
name|firstCursorPosition
argument_list|()
decl_stmt|;
name|cellCursor
operator|.
name|insertText
argument_list|(
name|tr
argument_list|(
literal|"On duty"
argument_list|)
argument_list|,
name|charFormat
argument_list|)
expr_stmt|;
block|}
comment|//! [6] //! [7]
block|}
comment|//! [7] //! [8]
block|}
comment|//! [8]
name|connect
argument_list|(
name|saveAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|saveFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|quitAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|showTableAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setCentralWidget
argument_list|(
name|editor
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Text Document Tables"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|saveFile
name|void
name|MainWindow
operator|::
name|saveFile
parameter_list|()
block|{
name|QString
name|fileName
init|=
name|QFileDialog
operator|::
name|getSaveFileName
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Save document as:"
argument_list|)
argument_list|,
literal|""
argument_list|,
name|tr
argument_list|(
literal|"XML (*.xml)"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|writeXml
argument_list|(
name|fileName
argument_list|)
condition|)
name|setWindowTitle
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
else|else
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Warning"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Failed to save the document."
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Cancel
argument_list|,
name|QMessageBox
operator|::
name|NoButton
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|showTable
name|void
name|MainWindow
operator|::
name|showTable
parameter_list|()
block|{
name|QTextCursor
name|cursor
init|=
name|editor
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|table
condition|)
return|return;
name|QTableWidget
modifier|*
name|tableWidget
init|=
operator|new
name|QTableWidget
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
name|table
operator|->
name|columns
argument_list|()
argument_list|)
decl_stmt|;
comment|//! [9]
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|table
operator|->
name|rows
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|table
operator|->
name|columns
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
name|QTextTableCell
name|tableCell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
comment|//! [9]
name|QTextFrame
operator|::
name|iterator
name|it
decl_stmt|;
name|QString
name|text
decl_stmt|;
for|for
control|(
name|it
operator|=
name|tableCell
operator|.
name|begin
argument_list|()
init|;
operator|!
operator|(
name|it
operator|.
name|atEnd
argument_list|()
operator|)
condition|;
operator|++
name|it
control|)
block|{
name|QTextBlock
name|childBlock
init|=
name|it
operator|.
name|currentBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|childBlock
operator|.
name|isValid
argument_list|()
condition|)
name|text
operator|+=
name|childBlock
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
name|QTableWidgetItem
modifier|*
name|newItem
init|=
operator|new
name|QTableWidgetItem
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|tableWidget
operator|->
name|setItem
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|newItem
argument_list|)
expr_stmt|;
comment|/* //! [10]             processTableCell(tableCell); //! [10]             */
comment|//! [11]
block|}
comment|//! [11] //! [12]
block|}
comment|//! [12]
name|tableWidget
operator|->
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Table Contents"
argument_list|)
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeXml
name|bool
name|MainWindow
operator|::
name|writeXml
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|XmlWriter
name|documentWriter
argument_list|(
name|editor
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|QDomDocument
modifier|*
name|domDocument
init|=
name|documentWriter
operator|.
name|toXml
argument_list|()
decl_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|textStream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|textStream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|textStream
operator|<<
name|domDocument
operator|->
name|toString
argument_list|(
literal|1
argument_list|)
operator|.
name|toUtf8
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
return|return
literal|false
return|;
block|}
end_function
end_unit
