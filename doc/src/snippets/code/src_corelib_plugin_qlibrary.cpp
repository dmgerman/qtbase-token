begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_decl_stmt
name|QLibrary
name|myLib
argument_list|(
literal|"mylib"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|MyPrototype
typedef|typedef
name|void
function_decl|(
modifier|*
name|MyPrototype
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|myFunction
name|MyPrototype
name|myFunction
init|=
operator|(
name|MyPrototype
operator|)
name|myLib
operator|.
name|resolve
argument_list|(
literal|"mysymbol"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|myFunction
condition|)
name|myFunction
argument_list|()
expr_stmt|;
end_if
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_typedef
DECL|typedef|MyPrototype
typedef|typedef
name|void
function_decl|(
modifier|*
name|MyPrototype
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|myFunction
name|MyPrototype
name|myFunction
init|=
operator|(
name|MyPrototype
operator|)
name|QLibrary
operator|::
name|resolve
argument_list|(
literal|"mylib"
argument_list|,
literal|"mysymbol"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|myFunction
condition|)
name|myFunction
argument_list|()
expr_stmt|;
end_if
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_typedef
DECL|typedef|AvgFunction
typedef|typedef
name|int
function_decl|(
modifier|*
name|AvgFunction
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|avg
name|AvgFunction
name|avg
init|=
operator|(
name|AvgFunction
operator|)
name|library
operator|->
name|resolve
argument_list|(
literal|"avg"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|avg
condition|)
return|return
name|avg
argument_list|(
literal|5
argument_list|,
literal|8
argument_list|)
return|;
else|else
return|return
operator|-
literal|1
return|;
end_if
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_extern
DECL|function|avg
extern|extern
literal|"C"
name|MY_EXPORT
name|int
name|avg
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|+
name|b
operator|)
operator|/
literal|2
return|;
block|}
end_extern
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_define
DECL|macro|MY_EXPORT
define|#
directive|define
name|MY_EXPORT
value|__declspec(dllexport)
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|MY_EXPORT
define|#
directive|define
name|MY_EXPORT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//! [4]
end_comment
end_unit
