begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_function_decl
name|bool
name|function
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|allLowerCase
name|bool
name|allLowerCase
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
block|{
return|return
name|string
operator|.
name|lowered
argument_list|()
operator|==
name|string
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|strings
name|QStringList
name|strings
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|lowerCaseStrings
name|QFuture
argument_list|<
name|QString
argument_list|>
name|lowerCaseStrings
init|=
name|QtConcurrent
operator|::
name|filtered
argument_list|(
name|strings
argument_list|,
name|allLowerCase
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_decl_stmt
DECL|variable|strings
name|QStringList
name|strings
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|future
name|QFuture
argument_list|<
name|void
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|filter
argument_list|(
name|strings
argument_list|,
name|allLowerCase
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_decl_stmt
name|V
name|function
argument_list|(
name|T
operator|&
name|result
argument_list|,
specifier|const
name|U
operator|&
name|intermediate
argument_list|)
comment|//! [3]
comment|//! [4]
DECL|function|addToDictionary
name|void
name|addToDictionary
argument_list|(
name|QSet
argument_list|<
name|QString
argument_list|>
operator|&
name|dictionary
argument_list|,
specifier|const
name|QString
operator|&
name|string
argument_list|)
argument_list|{
name|dictionary
operator|.
name|insert
argument_list|(
name|string
argument_list|)
argument_list|; }
DECL|variable|strings
name|QStringList
name|strings
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|dictionary
name|QFuture
argument_list|<
name|QSet
argument_list|<
name|QString
argument_list|>
argument_list|>
name|dictionary
init|=
name|QtConcurrent
operator|::
name|filteredReduced
argument_list|(
name|strings
argument_list|,
name|allLowerCase
argument_list|,
name|addToDictionary
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_decl_stmt
DECL|variable|strings
name|QStringList
name|strings
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|lowerCaseStrings
name|QFuture
argument_list|<
name|QString
argument_list|>
name|lowerCaseStrings
init|=
name|QtConcurrent
operator|::
name|filtered
argument_list|(
name|strings
operator|.
name|constBegin
argument_list|()
argument_list|,
name|strings
operator|.
name|constEnd
argument_list|()
argument_list|,
name|allLowerCase
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// filter in-place only works on non-const iterators
end_comment
begin_decl_stmt
DECL|variable|future
name|QFuture
argument_list|<
name|void
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|filter
argument_list|(
name|strings
operator|.
name|begin
argument_list|()
argument_list|,
name|strings
operator|.
name|end
argument_list|()
argument_list|,
name|allLowerCase
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|dictionary
name|QFuture
argument_list|<
name|QSet
argument_list|<
name|QString
argument_list|>
argument_list|>
name|dictionary
init|=
name|QtConcurrent
operator|::
name|filteredReduced
argument_list|(
name|strings
operator|.
name|constBegin
argument_list|()
argument_list|,
name|strings
operator|.
name|constEnd
argument_list|()
argument_list|,
name|allLowerCase
argument_list|,
name|addToDictionary
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_decl_stmt
DECL|variable|strings
name|QStringList
name|strings
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_comment
comment|// each call blocks until the entire operation is finished
end_comment
begin_decl_stmt
DECL|variable|lowerCaseStrings
name|QStringList
name|lowerCaseStrings
init|=
name|QtConcurrent
operator|::
name|blockingFiltered
argument_list|(
name|strings
argument_list|,
name|allLowerCase
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QtConcurrent
operator|::
name|blockingFilter
argument_list|(
name|strings
argument_list|,
name|allLowerCase
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|dictionary
name|QSet
argument_list|<
name|QString
argument_list|>
name|dictionary
init|=
name|QtConcurrent
operator|::
name|blockingFilteredReduced
argument_list|(
name|strings
argument_list|,
name|allLowerCase
argument_list|,
name|addToDictionary
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|// keep only images with an alpha channel
end_comment
begin_decl_stmt
DECL|variable|images
name|QList
argument_list|<
name|QImage
argument_list|>
name|images
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|alphaImages
name|QFuture
argument_list|<
name|void
argument_list|>
name|alphaImages
init|=
name|QtConcurrent
operator|::
name|filter
argument_list|(
name|strings
argument_list|,
operator|&
name|QImage
operator|::
name|hasAlphaChannel
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// keep only gray scale images
end_comment
begin_decl_stmt
DECL|variable|images
name|QList
argument_list|<
name|QImage
argument_list|>
name|images
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|grayscaleImages
name|QFuture
argument_list|<
name|QImage
argument_list|>
name|grayscaleImages
init|=
name|QtConcurrent
operator|::
name|filtered
argument_list|(
name|images
argument_list|,
operator|&
name|QImage
operator|::
name|isGrayscale
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// create a set of all printable characters
end_comment
begin_decl_stmt
DECL|variable|characters
name|QList
argument_list|<
name|QChar
argument_list|>
name|characters
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|set
name|QFuture
argument_list|<
name|QSet
argument_list|<
name|QChar
argument_list|>
argument_list|>
name|set
init|=
name|QtConcurrent
operator|::
name|filteredReduced
argument_list|(
name|characters
argument_list|,
operator|&
name|QChar
operator|::
name|isPrint
argument_list|,
operator|&
name|QSet
argument_list|<
name|QChar
argument_list|>
operator|::
name|insert
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_comment
comment|// can mix normal functions and member functions with QtConcurrent::filteredReduced()
end_comment
begin_comment
comment|// create a dictionary of all lower cased strings
end_comment
begin_function_decl
specifier|extern
name|bool
name|allLowerCase
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|strings
name|QStringList
name|strings
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|averageWordLength
name|QFuture
argument_list|<
name|QSet
argument_list|<
name|int
argument_list|>
argument_list|>
name|averageWordLength
init|=
name|QtConcurrent
operator|::
name|filteredReduced
argument_list|(
name|strings
argument_list|,
name|allLowerCase
argument_list|,
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|insert
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// create a collage of all gray scale images
end_comment
begin_function_decl
specifier|extern
name|void
name|addToCollage
parameter_list|(
name|QImage
modifier|&
name|collage
parameter_list|,
specifier|const
name|QImage
modifier|&
name|grayscaleImage
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|images
name|QList
argument_list|<
name|QImage
argument_list|>
name|images
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|collage
name|QFuture
argument_list|<
name|QImage
argument_list|>
name|collage
init|=
name|QtConcurrent
operator|::
name|filteredReduced
argument_list|(
name|images
argument_list|,
operator|&
name|QImage
operator|::
name|isGrayscale
argument_list|,
name|addToCollage
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [8]
end_comment
begin_comment
comment|//! [9]
end_comment
begin_function_decl
name|bool
name|QString
operator|::
name|contains
parameter_list|(
specifier|const
name|QRegExp
modifier|&
name|regexp
parameter_list|)
specifier|const
function_decl|;
end_function_decl
begin_comment
comment|//! [9]
end_comment
begin_comment
comment|//! [10]
end_comment
begin_expr_stmt
DECL|member|bind
name|boost
operator|::
name|bind
argument_list|(
operator|&
name|QString
operator|::
name|contains
argument_list|,
name|QRegExp
argument_list|(
literal|"^\\S+$"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
DECL|member|bind
comment|// matches strings without whitespace
end_comment
begin_comment
comment|//! [10]
end_comment
begin_comment
comment|//! [11]
end_comment
begin_function_decl
name|bool
name|contains
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
comment|//! [11]
comment|//! [12]
DECL|variable|strings
name|QStringList
name|strings
decl_stmt|= ...;
end_function_decl
begin_macro
DECL|member|static_cast
name|boost
end_macro
begin_expr_stmt
DECL|member|static_cast
operator|::
name|bind
operator|(
expr|static_cast
operator|<
name|bool
argument_list|(
name|QString
operator|::
modifier|*
argument_list|)
argument_list|(
specifier|const
name|QRegExp
operator|&
argument_list|)
operator|>
operator|(
operator|&
name|QString
operator|::
name|contains
operator|)
operator|,
name|QRegExp
argument_list|(
literal|"..."
argument_list|)
operator|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [12]
end_comment
begin_comment
comment|//! [13]
end_comment
begin_struct
DECL|struct|StartsWith
struct|struct
name|StartsWith
block|{
DECL|function|StartsWith
name|StartsWith
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|string
argument_list|)
block|{ }
DECL|typedef|result_type
typedef|typedef
name|bool
name|result_type
typedef|;
DECL|function|operator ()
name|bool
name|operator
name|()
parameter_list|(
specifier|const
name|QString
modifier|&
name|testString
parameter_list|)
block|{
return|return
name|testString
operator|.
name|startsWith
argument_list|(
name|m_string
argument_list|)
return|;
block|}
DECL|member|m_string
name|QString
name|m_string
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|strings
name|QList
argument_list|<
name|QString
argument_list|>
name|strings
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fooString
name|QFuture
argument_list|<
name|QString
argument_list|>
name|fooString
init|=
name|QtConcurrent
operator|::
name|filtered
argument_list|(
name|images
argument_list|,
name|StartsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [13]
end_comment
end_unit
