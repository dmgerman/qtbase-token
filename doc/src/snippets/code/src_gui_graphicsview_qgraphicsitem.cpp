begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_class
DECL|class|SimpleItem
class|class
name|SimpleItem
super|:
specifier|public
name|QGraphicsItem
block|{
public|public:
DECL|function|boundingRect
name|QRectF
name|boundingRect
parameter_list|()
specifier|const
block|{
name|qreal
name|penWidth
init|=
literal|1
decl_stmt|;
return|return
name|QRectF
argument_list|(
operator|-
literal|10
operator|-
name|penWidth
operator|/
literal|2
argument_list|,
operator|-
literal|10
operator|-
name|penWidth
operator|/
literal|2
argument_list|,
literal|20
operator|+
name|penWidth
argument_list|,
literal|20
operator|+
name|penWidth
argument_list|)
return|;
block|}
DECL|function|paint
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
name|option
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|painter
operator|->
name|drawRoundedRect
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_class
DECL|class|CustomItem
class|class
name|CustomItem
super|:
specifier|public
name|QGraphicsItem
block|{
operator|...
expr|enum
DECL|enumerator|Type
block|{
name|Type
operator|=
name|UserType
operator|+
literal|1
block|}
expr_stmt|;
DECL|function|type
name|int
name|type
parameter_list|()
specifier|const
block|{
comment|// Enable the use of qgraphicsitem_cast with this item.
return|return
name|Type
return|;
block|}
operator|...
block|}
class|;
end_class
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_expr_stmt
name|item
operator|->
name|setCursor
argument_list|(
name|Qt
operator|::
name|IBeamCursor
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_expr_stmt
name|item
operator|->
name|setCursor
argument_list|(
name|Qt
operator|::
name|IBeamCursor
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_decl_stmt
DECL|variable|rect
name|QGraphicsRectItem
name|rect
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|rect
operator|.
name|setPos
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|rect
operator|.
name|sceneTransform
argument_list|()
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns QPointF(100, 100);
end_comment
begin_expr_stmt
name|rect
operator|.
name|sceneTransform
argument_list|()
operator|.
name|inverted
argument_list|()
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns QPointF(0, 0);
end_comment
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_decl_stmt
DECL|variable|rect
name|QGraphicsRectItem
name|rect
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|rect
operator|.
name|setPos
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|rect
operator|.
name|deviceTransform
argument_list|(
name|view
operator|->
name|viewportTransform
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns the item's (0, 0) point in view's viewport coordinates
end_comment
begin_expr_stmt
name|rect
operator|.
name|deviceTransform
argument_list|(
name|view
operator|->
name|viewportTransform
argument_list|()
argument_list|)
operator|.
name|inverted
argument_list|()
operator|.
name|map
argument_list|(
name|QPointF
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns view's viewport's (100, 100) coordinate in item coordinates
end_comment
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|// Rotate an item 45 degrees around (0, 0).
end_comment
begin_expr_stmt
name|item
operator|->
name|rotate
argument_list|(
literal|45
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// Rotate an item 45 degrees around (x, y).
end_comment
begin_expr_stmt
name|item
operator|->
name|setTransform
argument_list|(
name|QTransform
argument_list|()
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|.
name|rotate
argument_list|(
literal|45
argument_list|)
operator|.
name|translate
argument_list|(
operator|-
name|x
argument_list|,
operator|-
name|y
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|// Scale an item by 3x2 from its origin
end_comment
begin_expr_stmt
name|item
operator|->
name|scale
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// Scale an item by 3x2 from (x, y)
end_comment
begin_expr_stmt
name|item
operator|->
name|setTransform
argument_list|(
name|QTransform
argument_list|()
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|.
name|scale
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
operator|.
name|translate
argument_list|(
operator|-
name|x
argument_list|,
operator|-
name|y
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_function
DECL|function|boundingRect
name|QRectF
name|CircleItem
operator|::
name|boundingRect
parameter_list|()
specifier|const
block|{
name|qreal
name|penWidth
init|=
literal|1
decl_stmt|;
return|return
name|QRectF
argument_list|(
operator|-
name|radius
operator|-
name|penWidth
operator|/
literal|2
argument_list|,
operator|-
name|radius
operator|-
name|penWidth
operator|/
literal|2
argument_list|,
name|diameter
operator|+
name|penWidth
argument_list|,
name|diameter
operator|+
name|penWidth
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [8]
end_comment
begin_comment
comment|//! [9]
end_comment
begin_function
DECL|function|shape
name|QPainterPath
name|RoundItem
operator|::
name|shape
parameter_list|()
specifier|const
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addEllipse
argument_list|(
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
end_function
begin_comment
comment|//! [9]
end_comment
begin_comment
comment|//! [10]
end_comment
begin_function
DECL|function|paint
name|void
name|RoundRectItem
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
name|option
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|painter
operator|->
name|drawRoundedRect
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [10]
end_comment
begin_comment
comment|//! [11]
end_comment
begin_decl_stmt
DECL|variable|ObjectName
specifier|static
specifier|const
name|int
name|ObjectName
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|item
name|QGraphicsItem
modifier|*
name|item
init|=
name|scene
operator|.
name|itemAt
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|item
operator|->
name|data
argument_list|(
name|ObjectName
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|qgraphicsitem_cast
argument_list|<
name|ButtonItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
condition|)
name|item
operator|->
name|setData
argument_list|(
name|ObjectName
argument_list|,
literal|"Button"
argument_list|)
expr_stmt|;
block|}
end_if
begin_comment
comment|//! [11]
end_comment
begin_comment
comment|//! [12]
end_comment
begin_decl_stmt
DECL|variable|scene
name|QGraphicsScene
name|scene
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ellipse
name|QGraphicsEllipseItem
modifier|*
name|ellipse
init|=
name|scene
operator|.
name|addEllipse
argument_list|(
name|QRectF
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|line
name|QGraphicsLineItem
modifier|*
name|line
init|=
name|scene
operator|.
name|addLine
argument_list|(
name|QLineF
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|line
operator|->
name|installSceneEventFilter
argument_list|(
name|ellipse
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// line's events are filtered by ellipse's sceneEventFilter() function.
end_comment
begin_expr_stmt
name|ellipse
operator|->
name|installSceneEventFilter
argument_list|(
name|line
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ellipse's events are filtered by line's sceneEventFilter() function.
end_comment
begin_comment
comment|//! [12]
end_comment
begin_comment
comment|//! [13]
end_comment
begin_function
DECL|function|contextMenuEvent
name|void
name|CustomItem
operator|::
name|contextMenuEvent
parameter_list|(
name|QGraphicsSceneContextMenuEvent
modifier|*
name|event
parameter_list|)
block|{
name|QMenu
name|menu
decl_stmt|;
name|QAction
modifier|*
name|removeAction
init|=
name|menu
operator|.
name|addAction
argument_list|(
literal|"Remove"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|markAction
init|=
name|menu
operator|.
name|addAction
argument_list|(
literal|"Mark"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|selectedAction
init|=
name|menu
operator|.
name|exec
argument_list|(
name|event
operator|->
name|screenPos
argument_list|()
argument_list|)
decl_stmt|;
comment|// ...
block|}
end_function
begin_comment
comment|//! [13]
end_comment
begin_comment
comment|//! [14]
end_comment
begin_constructor
DECL|function|CustomItem
name|CustomItem
operator|::
name|CustomItem
parameter_list|()
block|{
name|setAcceptDrops
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|...
block|}
end_constructor
begin_function
DECL|function|dragEnterEvent
name|void
name|CustomItem
operator|::
name|dragEnterEvent
parameter_list|(
name|QGraphicsSceneDragDropEvent
modifier|*
name|event
parameter_list|)
block|{
name|event
operator|->
name|setAccepted
argument_list|(
name|event
operator|->
name|mimeData
argument_list|()
operator|->
name|hasFormat
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [14]
end_comment
begin_comment
comment|//! [15]
end_comment
begin_function
DECL|function|itemChange
name|QVariant
name|Component
operator|::
name|itemChange
parameter_list|(
name|GraphicsItemChange
name|change
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
if|if
condition|(
name|change
operator|==
name|ItemPositionChange
operator|&&
name|scene
argument_list|()
condition|)
block|{
comment|// value is the new position.
name|QPointF
name|newPos
init|=
name|value
operator|.
name|toPointF
argument_list|()
decl_stmt|;
name|QRectF
name|rect
init|=
name|scene
argument_list|()
operator|->
name|sceneRect
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|contains
argument_list|(
name|newPos
argument_list|)
condition|)
block|{
comment|// Keep the item inside the scene rect.
name|newPos
operator|.
name|setX
argument_list|(
name|qMin
argument_list|(
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|newPos
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|left
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|newPos
operator|.
name|setY
argument_list|(
name|qMin
argument_list|(
name|rect
operator|.
name|bottom
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|newPos
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|newPos
return|;
block|}
block|}
return|return
name|QGraphicsItem
operator|::
name|itemChange
argument_list|(
name|change
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [15]
end_comment
begin_comment
comment|//! [16]
end_comment
begin_function
DECL|function|setRadius
name|void
name|CircleItem
operator|::
name|setRadius
parameter_list|(
name|qreal
name|newRadius
parameter_list|)
block|{
if|if
condition|(
name|radius
operator|!=
name|newRadius
condition|)
block|{
name|prepareGeometryChange
argument_list|()
expr_stmt|;
name|radius
operator|=
name|newRadius
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//! [16]
end_comment
begin_comment
comment|//! [17]
end_comment
begin_comment
comment|// Group all selected items together
end_comment
begin_decl_stmt
DECL|variable|group
name|QGraphicsItemGroup
modifier|*
name|group
init|=
name|scene
operator|->
name|createItemGroup
argument_list|(
name|scene
operator|->
name|selecteditems
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Destroy the group, and delete the group item
end_comment
begin_expr_stmt
name|scene
operator|->
name|destroyItemGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [17]
end_comment
begin_comment
comment|//! [QGraphicsItem type]
end_comment
begin_class
DECL|class|CustomItem
class|class
name|CustomItem
super|:
specifier|public
name|QGraphicsItem
block|{
operator|...
expr|enum
DECL|enumerator|Type
block|{
name|Type
operator|=
name|UserType
operator|+
literal|1
block|}
expr_stmt|;
DECL|function|type
name|int
name|type
parameter_list|()
specifier|const
block|{
comment|// Enable the use of qgraphicsitem_cast with this item.
return|return
name|Type
return|;
block|}
operator|...
block|}
class|;
end_class
begin_comment
comment|//! [QGraphicsItem type]
end_comment
begin_comment
comment|//! [18]
end_comment
begin_class
DECL|class|QGraphicsPathItem
class|class
name|QGraphicsPathItem
super|:
specifier|public
name|QAbstractGraphicsShapeItem
block|{
public|public:
DECL|enumerator|Type
enum|enum
block|{
name|Type
init|=
literal|2
block|}
enum|;
DECL|function|type
name|int
name|type
parameter_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
operator|...
block|}
class|;
end_class
begin_comment
comment|//! [18]
end_comment
begin_comment
comment|//! [19]
end_comment
begin_decl_stmt
DECL|variable|xform
name|QTransform
name|xform
init|=
name|item
operator|->
name|deviceTransform
argument_list|(
name|view
operator|->
name|viewportTransform
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|deviceRect
name|QRect
name|deviceRect
init|=
name|xform
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
operator|.
name|toAlignedRect
argument_list|()
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|view
operator|->
name|viewport
argument_list|()
operator|->
name|scroll
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|,
name|deviceRect
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [19]
end_comment
end_unit
