begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_decl_stmt
DECL|variable|forename
DECL|variable|people
name|SELECT
name|forename
decl_stmt|,
name|surname
name|FROM
name|people
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_decl_stmt
name|QSqlQuery
name|q
argument_list|(
literal|"select * from employees"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|rec
name|QSqlRecord
name|rec
init|=
name|q
operator|.
name|record
argument_list|()
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|qDebug
argument_list|()
operator|<<
literal|"Number of columns: "
operator|<<
name|rec
operator|.
name|count
argument_list|()
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|nameCol
name|int
name|nameCol
init|=
name|rec
operator|.
name|indexOf
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|nameCol
comment|// index of the field "name"
end_comment
begin_while
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
name|qDebug
argument_list|()
operator|<<
name|q
operator|.
name|value
argument_list|(
name|nameCol
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
end_while
begin_comment
comment|// output all names
end_comment
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_decl_stmt
DECL|variable|q
name|QSqlQuery
name|q
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into myTable values (?, ?)"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|ints
name|QVariantList
name|ints
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|ints
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|q
operator|.
name|addBindValue
argument_list|(
name|ints
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|names
name|QVariantList
name|names
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|names
operator|<<
literal|"Harald"
operator|<<
literal|"Boris"
operator|<<
literal|"Trond"
operator|<<
name|QVariant
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|q
operator|.
name|addBindValue
argument_list|(
name|names
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|q
operator|.
name|execBatch
argument_list|()
condition|)
name|qDebug
argument_list|()
operator|<<
name|q
operator|.
name|lastError
argument_list|()
expr_stmt|;
end_if
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_expr_stmt
literal|1
name|Harald
literal|2
name|Boris
literal|3
name|Trond
literal|4
name|NULL
end_expr_stmt
begin_comment
comment|//! [3]
end_comment
end_unit
