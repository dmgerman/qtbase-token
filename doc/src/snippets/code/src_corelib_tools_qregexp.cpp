begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"(\\d+)"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|str
name|QString
name|str
init|=
literal|"Offsets: 12 14 99 231 7"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|list
name|QStringList
name|list
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pos
name|int
name|pos
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
operator|(
name|pos
operator|=
name|rx
operator|.
name|indexIn
argument_list|(
name|str
argument_list|,
name|pos
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|list
operator|<<
name|rx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|rx
operator|.
name|matchedLength
argument_list|()
expr_stmt|;
block|}
end_while
begin_comment
comment|// list: ["12", "14", "99", "231", "7"]
end_comment
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"*.txt"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|rx
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|rx
operator|.
name|exactMatch
argument_list|(
literal|"README.txt"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns true
end_comment
begin_expr_stmt
name|rx
operator|.
name|exactMatch
argument_list|(
literal|"welcome.txt.bak"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns false
end_comment
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"ro+m"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|rx
operator|.
name|setMinimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_decl_stmt
name|QRegExp
name|mark
argument_list|(
literal|"\\b"
comment|// word boundary
literal|"[Mm]ark"
comment|// the word we want to match
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"^\\d\\d?$"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// match integers 0 to 99
end_comment
begin_expr_stmt
name|rx
operator|.
name|indexIn
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns -1 (no match)
end_comment
begin_expr_stmt
name|rx
operator|.
name|indexIn
argument_list|(
literal|"-6"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns -1 (no match)
end_comment
begin_expr_stmt
name|rx
operator|.
name|indexIn
argument_list|(
literal|"6"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 0 (matched as position 0)
end_comment
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"^\\S+$"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// match strings without whitespace
end_comment
begin_expr_stmt
name|rx
operator|.
name|indexIn
argument_list|(
literal|"Hello world"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns -1 (no match)
end_comment
begin_expr_stmt
name|rx
operator|.
name|indexIn
argument_list|(
literal|"This_is-OK"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 0 (matched at position 0)
end_comment
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"\\b(mail|letter|correspondence)\\b"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|rx
operator|.
name|indexIn
argument_list|(
literal|"I sent you an email"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns -1 (no match)
end_comment
begin_expr_stmt
name|rx
operator|.
name|indexIn
argument_list|(
literal|"Please write the letter"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 17
end_comment
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_decl_stmt
DECL|variable|captured
name|QString
name|captured
init|=
name|rx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|captured
comment|// captured == "letter"
end_comment
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"&(?!amp;)"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// match ampersands but not&amp;
end_comment
begin_decl_stmt
DECL|variable|line1
name|QString
name|line1
init|=
literal|"This& that"
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|line1
operator|.
name|replace
argument_list|(
name|rx
argument_list|,
literal|"&amp;"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// line1 == "This&amp; that"
end_comment
begin_decl_stmt
DECL|variable|line2
name|QString
name|line2
init|=
literal|"His&amp; hers& theirs"
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|line2
operator|.
name|replace
argument_list|(
name|rx
argument_list|,
literal|"&amp;"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// line2 == "His&amp; hers&amp; theirs"
end_comment
begin_comment
comment|//! [8]
end_comment
begin_comment
comment|//! [9]
end_comment
begin_decl_stmt
DECL|variable|str
name|QString
name|str
init|=
literal|"One Eric another Eirik, and an Ericsson. "
literal|"How many Eiriks, Eric?"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"\\b(Eric|Eirik)\\b"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// match Eric or Eirik
end_comment
begin_decl_stmt
DECL|variable|pos
name|int
name|pos
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|pos
comment|// where we are in the string
end_comment
begin_decl_stmt
DECL|variable|count
name|int
name|count
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|count
comment|// how many Eric and Eirik's we've counted
end_comment
begin_while
while|while
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|pos
operator|=
name|rx
operator|.
name|indexIn
argument_list|(
name|str
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
operator|++
name|pos
expr_stmt|;
comment|// move along in str
operator|++
name|count
expr_stmt|;
comment|// count our Eric or Eirik
block|}
block|}
end_while
begin_comment
comment|//! [9]
end_comment
begin_comment
comment|//! [10]
end_comment
begin_expr_stmt
name|str
operator|=
literal|"Nokia Corporation\tqt.nokia.com\tNorway"
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|company
DECL|variable|web
DECL|variable|country
name|QString
name|company
decl_stmt|,
name|web
decl_stmt|,
name|country
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|rx
operator|.
name|setPattern
argument_list|(
literal|"^([^\t]+)\t([^\t]+)\t([^\t]+)$"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|rx
operator|.
name|indexIn
argument_list|(
name|str
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|company
operator|=
name|rx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|web
operator|=
name|rx
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|country
operator|=
name|rx
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
end_if
begin_comment
comment|//! [10]
end_comment
begin_comment
comment|//! [11]
end_comment
begin_decl_stmt
DECL|variable|field
name|QStringList
name|field
init|=
name|str
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [11]
end_comment
begin_comment
comment|//! [12]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"*.html"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|rx
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|rx
operator|.
name|exactMatch
argument_list|(
literal|"index.html"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns true
end_comment
begin_expr_stmt
name|rx
operator|.
name|exactMatch
argument_list|(
literal|"default.htm"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns false
end_comment
begin_expr_stmt
name|rx
operator|.
name|exactMatch
argument_list|(
literal|"readme.txt"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns false
end_comment
begin_comment
comment|//! [12]
end_comment
begin_comment
comment|//! [13]
end_comment
begin_decl_stmt
DECL|variable|str
name|QString
name|str
init|=
literal|"offsets: 1.23 .50 71.00 6.00"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"\\d*\\.\\d+"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// primitive floating point matching
end_comment
begin_decl_stmt
DECL|variable|count
name|int
name|count
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pos
name|int
name|pos
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
operator|(
name|pos
operator|=
name|rx
operator|.
name|indexIn
argument_list|(
name|str
argument_list|,
name|pos
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|pos
operator|+=
name|rx
operator|.
name|matchedLength
argument_list|()
expr_stmt|;
block|}
end_while
begin_comment
comment|// pos will be 9, 14, 18 and finally 24; count will end up as 4
end_comment
begin_comment
comment|//! [13]
end_comment
begin_comment
comment|//! [14]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"(\\d+)(\\s*)(cm|inch(es)?)"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pos
name|int
name|pos
init|=
name|rx
operator|.
name|indexIn
argument_list|(
literal|"Length: 36 inches"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|list
name|QStringList
name|list
init|=
name|rx
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
comment|// list is now ("36 inches", "36", " ", "inches", "es")
end_comment
begin_comment
comment|//! [14]
end_comment
begin_comment
comment|//! [15]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"(\\d+)(?:\\s*)(cm|inch(?:es)?)"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pos
name|int
name|pos
init|=
name|rx
operator|.
name|indexIn
argument_list|(
literal|"Length: 36 inches"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|list
name|QStringList
name|list
init|=
name|rx
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
comment|// list is now ("36 inches", "36", "inches")
end_comment
begin_comment
comment|//! [15]
end_comment
begin_comment
comment|//! [16]
end_comment
begin_decl_stmt
DECL|variable|list
name|QStringList
name|list
init|=
name|rx
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|it
name|QStringList
operator|::
name|iterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt
begin_while
while|while
condition|(
name|it
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|)
block|{
name|myProcessing
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
end_while
begin_comment
comment|//! [16]
end_comment
begin_comment
comment|//! [17]
end_comment
begin_decl_stmt
name|QRegExp
name|rxlen
argument_list|(
literal|"(\\d+)(?:\\s*)(cm|inch)"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pos
name|int
name|pos
init|=
name|rxlen
operator|.
name|indexIn
argument_list|(
literal|"Length: 189cm"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|pos
operator|>
operator|-
literal|1
condition|)
block|{
name|QString
name|value
init|=
name|rxlen
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// "189"
name|QString
name|unit
init|=
name|rxlen
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// "cm"
comment|// ...
block|}
end_if
begin_comment
comment|//! [17]
end_comment
begin_comment
comment|//! [18]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"/([a-z]+)/([a-z]+)"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|rx
operator|.
name|indexIn
argument_list|(
literal|"Output /dev/null"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 7 (position of /dev/null)
end_comment
begin_expr_stmt
name|rx
operator|.
name|pos
argument_list|(
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 7 (position of /dev/null)
end_comment
begin_expr_stmt
name|rx
operator|.
name|pos
argument_list|(
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 8 (position of dev)
end_comment
begin_expr_stmt
name|rx
operator|.
name|pos
argument_list|(
literal|2
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// returns 12 (position of null)
end_comment
begin_comment
comment|//! [18]
end_comment
begin_comment
comment|//! [19]
end_comment
begin_expr_stmt
name|s1
operator|=
name|QRegExp
operator|::
name|escape
argument_list|(
literal|"bingo"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// s1 == "bingo"
end_comment
begin_expr_stmt
name|s2
operator|=
name|QRegExp
operator|::
name|escape
argument_list|(
literal|"f(x)"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// s2 == "f\\(x\\)"
end_comment
begin_comment
comment|//! [19]
end_comment
begin_comment
comment|//! [20]
end_comment
begin_decl_stmt
name|QRegExp
name|rx
argument_list|(
literal|"("
operator|+
name|QRegExp
operator|::
name|escape
argument_list|(
name|name
argument_list|)
operator|+
literal|"|"
operator|+
name|QRegExp
operator|::
name|escape
argument_list|(
name|alias
argument_list|)
operator|+
literal|")"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [20]
end_comment
end_unit
