begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_struct
DECL|struct|MyStruct
struct|struct
name|MyStruct
block|{
DECL|member|i
name|int
name|i
decl_stmt|;
operator|...
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyStruct
argument_list|)
end_macro
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_namespace
DECL|namespace|MyNamespace
namespace|namespace
name|MyNamespace
block|{
operator|...
block|}
end_namespace
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyNamespace::MyStruct
argument_list|)
end_macro
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_decl_stmt
DECL|variable|s
name|MyStruct
name|s
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|var
name|QVariant
name|var
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|var
operator|.
name|setValue
argument_list|(
name|s
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// copy s into the variant
end_comment
begin_expr_stmt
operator|...
comment|// retrieve the value
name|MyStruct
name|s2
operator|=
name|var
operator|.
name|value
argument_list|<
name|MyStruct
argument_list|>
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_decl_stmt
DECL|variable|id
name|int
name|id
init|=
name|QMetaType
operator|::
name|type
argument_list|(
literal|"MyClass"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|id
operator|!=
literal|0
condition|)
block|{
name|void
modifier|*
name|myClassPtr
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|id
argument_list|)
decl_stmt|;
operator|...
name|QMetaType
operator|::
name|destroy
argument_list|(
name|id
argument_list|,
name|myClassPtr
argument_list|)
expr_stmt|;
name|myClassPtr
operator|=
literal|0
expr_stmt|;
block|}
end_if
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_expr_stmt
name|qRegisterMetaType
argument_list|<
name|MyClass
argument_list|>
argument_list|(
literal|"MyClass"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_expr_stmt
name|qRegisterMetaTypeStreamOperators
argument_list|<
name|MyClass
argument_list|>
argument_list|(
literal|"MyClass"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_function_decl
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|MyClass
modifier|&
name|myObj
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|MyClass
modifier|&
name|myObj
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_decl_stmt
DECL|variable|id
name|int
name|id
init|=
name|qRegisterMetaType
argument_list|<
name|MyStruct
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_decl_stmt
DECL|variable|id
name|int
name|id
init|=
name|qMetaTypeId
argument_list|<
name|QString
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|id
comment|// id is now QMetaType::QString
end_comment
begin_expr_stmt
name|id
operator|=
name|qMetaTypeId
argument_list|<
name|MyStruct
argument_list|>
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|// compile error if MyStruct not declared
end_comment
begin_comment
comment|//! [8]
end_comment
begin_comment
comment|//! [9]
end_comment
begin_typedef
DECL|typedef|CustomString
typedef|typedef
name|QString
name|CustomString
typedef|;
end_typedef
begin_expr_stmt
name|qRegisterMetaType
argument_list|<
name|CustomString
argument_list|>
argument_list|(
literal|"CustomString"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [9]
end_comment
end_unit
