begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_function_decl
specifier|extern
name|void
name|aFunction
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|future
name|QFuture
argument_list|<
name|void
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|run
argument_list|(
name|aFunction
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function_decl
specifier|extern
name|void
name|aFunctionWithArguments
parameter_list|(
name|int
name|arg1
parameter_list|,
name|double
name|arg2
parameter_list|,
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|integer
name|int
name|integer
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|floatingPoint
name|double
name|floatingPoint
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|string
name|QString
name|string
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|future
name|QFuture
argument_list|<
name|void
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|run
argument_list|(
name|aFunctionWithArguments
argument_list|,
name|integer
argument_list|,
name|floatingPoint
argument_list|,
name|string
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function_decl
specifier|extern
name|QString
name|functionReturningAString
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|future
name|QFuture
argument_list|<
name|QString
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|run
argument_list|(
name|functionReturningAString
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|...
name|QString
name|result
operator|=
name|future
operator|.
name|result
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function_decl
specifier|extern
name|QString
name|someFunction
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|input
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|bytearray
name|QByteArray
name|bytearray
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|future
name|QFuture
argument_list|<
name|QString
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|run
argument_list|(
name|someFunction
argument_list|,
name|bytearray
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|...
name|QString
name|result
operator|=
name|future
operator|.
name|result
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|// call 'QList<QByteArray>  QByteArray::split(char sep) const' in a separate thread
end_comment
begin_decl_stmt
DECL|variable|bytearray
name|QByteArray
name|bytearray
init|=
literal|"hello world"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|future
name|QFuture
argument_list|<
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|run
argument_list|(
name|bytearray
argument_list|,
operator|&
name|QByteArray
operator|::
name|split
argument_list|)
decl_stmt|, ',');
end_decl_stmt
begin_expr_stmt
operator|...
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|result
operator|=
name|future
operator|.
name|result
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|// call 'void QImage::invertPixels(InvertMode mode)' in a separate thread
end_comment
begin_decl_stmt
DECL|variable|image
name|QImage
name|image
init|=
operator|...
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|future
name|QFuture
argument_list|<
name|void
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|run
argument_list|(
name|image
argument_list|,
operator|&
name|QImage
operator|::
name|invertPixels
argument_list|,
name|QImage
operator|::
name|InvertRgba
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|...
name|future
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|// At this point, the pixels in 'image' have been inverted
end_comment
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_function_decl
name|void
name|someFunction
parameter_list|(
name|int
name|arg1
parameter_list|,
name|double
name|arg2
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|future
name|QFuture
argument_list|<
name|void
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|run
argument_list|(
name|boost
operator|::
name|bind
argument_list|(
name|someFunction
argument_list|,
literal|1
argument_list|,
literal|2.0
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|...
end_expr_stmt
begin_comment
comment|//! [6]
end_comment
end_unit
