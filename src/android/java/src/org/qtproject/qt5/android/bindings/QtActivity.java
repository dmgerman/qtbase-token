begin_unit
begin_comment
comment|/*     Copyright (c) 2012, BogDan Vatra<bogdan@kde.org>     Contact: http://www.qt-project.org/legal      Redistribution and use in source and binary forms, with or without     modification, are permitted provided that the following conditions     are met:      1. Redistributions of source code must retain the above copyright     notice, this list of conditions and the following disclaimer.     2. Redistributions in binary form must reproduce the above copyright     notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.      THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.     IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,     INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT     NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF     THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
end_comment
begin_package
DECL|package|org.qtproject.qt5.android.bindings
package|package
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
operator|.
name|bindings
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kde
operator|.
name|necessitas
operator|.
name|ministro
operator|.
name|IMinistro
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kde
operator|.
name|necessitas
operator|.
name|ministro
operator|.
name|IMinistroCallback
import|;
end_import
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|Activity
import|;
end_import
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|AlertDialog
import|;
end_import
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|Dialog
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|ComponentName
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|DialogInterface
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Intent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|ServiceConnection
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|pm
operator|.
name|ActivityInfo
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|pm
operator|.
name|PackageManager
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|pm
operator|.
name|PackageManager
operator|.
name|NameNotFoundException
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|res
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|res
operator|.
name|Resources
operator|.
name|Theme
import|;
end_import
begin_import
import|import
name|android
operator|.
name|graphics
operator|.
name|Bitmap
import|;
end_import
begin_import
import|import
name|android
operator|.
name|graphics
operator|.
name|Canvas
import|;
end_import
begin_import
import|import
name|android
operator|.
name|net
operator|.
name|Uri
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|Bundle
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|IBinder
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|RemoteException
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|AttributeSet
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ContextMenu
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ContextMenu
operator|.
name|ContextMenuInfo
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|KeyEvent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|Menu
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|MenuItem
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|MotionEvent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|View
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|Window
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|WindowManager
operator|.
name|LayoutParams
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|accessibility
operator|.
name|AccessibilityEvent
import|;
end_import
begin_import
import|import
name|dalvik
operator|.
name|system
operator|.
name|DexClassLoader
import|;
end_import
begin_comment
comment|//@ANDROID-11
end_comment
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|Fragment
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ActionMode
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ActionMode
operator|.
name|Callback
import|;
end_import
begin_comment
comment|//@ANDROID-11
end_comment
begin_class
DECL|class|QtActivity
specifier|public
class|class
name|QtActivity
extends|extends
name|Activity
block|{
DECL|field|MINISTRO_INSTALL_REQUEST_CODE
specifier|private
specifier|final
specifier|static
name|int
name|MINISTRO_INSTALL_REQUEST_CODE
init|=
literal|0xf3ee
decl_stmt|;
comment|// request code used to know when Ministro instalation is finished
DECL|field|MINISTRO_API_LEVEL
specifier|private
specifier|static
specifier|final
name|int
name|MINISTRO_API_LEVEL
init|=
literal|2
decl_stmt|;
comment|// Ministro api level (check IMinistro.aidl file)
DECL|field|NECESSITAS_API_LEVEL
specifier|private
specifier|static
specifier|final
name|int
name|NECESSITAS_API_LEVEL
init|=
literal|2
decl_stmt|;
comment|// Necessitas api level used by platform plugin
DECL|field|QT_PROVIDER
specifier|private
specifier|static
specifier|final
name|String
name|QT_PROVIDER
init|=
literal|"necessitas"
decl_stmt|;
DECL|field|QT_VERSION
specifier|private
specifier|static
specifier|final
name|int
name|QT_VERSION
init|=
literal|0x050100
decl_stmt|;
comment|// This app requires at least Qt version 5.1.0
DECL|field|ERROR_CODE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_CODE_KEY
init|=
literal|"error.code"
decl_stmt|;
DECL|field|ERROR_MESSAGE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_MESSAGE_KEY
init|=
literal|"error.message"
decl_stmt|;
DECL|field|DEX_PATH_KEY
specifier|private
specifier|static
specifier|final
name|String
name|DEX_PATH_KEY
init|=
literal|"dex.path"
decl_stmt|;
DECL|field|LIB_PATH_KEY
specifier|private
specifier|static
specifier|final
name|String
name|LIB_PATH_KEY
init|=
literal|"lib.path"
decl_stmt|;
DECL|field|LOADER_CLASS_NAME_KEY
specifier|private
specifier|static
specifier|final
name|String
name|LOADER_CLASS_NAME_KEY
init|=
literal|"loader.class.name"
decl_stmt|;
DECL|field|NATIVE_LIBRARIES_KEY
specifier|private
specifier|static
specifier|final
name|String
name|NATIVE_LIBRARIES_KEY
init|=
literal|"native.libraries"
decl_stmt|;
DECL|field|ENVIRONMENT_VARIABLES_KEY
specifier|private
specifier|static
specifier|final
name|String
name|ENVIRONMENT_VARIABLES_KEY
init|=
literal|"environment.variables"
decl_stmt|;
DECL|field|APPLICATION_PARAMETERS_KEY
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_PARAMETERS_KEY
init|=
literal|"application.parameters"
decl_stmt|;
DECL|field|BUNDLED_LIBRARIES_KEY
specifier|private
specifier|static
specifier|final
name|String
name|BUNDLED_LIBRARIES_KEY
init|=
literal|"bundled.libraries"
decl_stmt|;
DECL|field|MAIN_LIBRARY_KEY
specifier|private
specifier|static
specifier|final
name|String
name|MAIN_LIBRARY_KEY
init|=
literal|"main.library"
decl_stmt|;
DECL|field|STATIC_INIT_CLASSES_KEY
specifier|private
specifier|static
specifier|final
name|String
name|STATIC_INIT_CLASSES_KEY
init|=
literal|"static.init.classes"
decl_stmt|;
DECL|field|NECESSITAS_API_LEVEL_KEY
specifier|private
specifier|static
specifier|final
name|String
name|NECESSITAS_API_LEVEL_KEY
init|=
literal|"necessitas.api.level"
decl_stmt|;
comment|/// Ministro server parameter keys
DECL|field|REQUIRED_MODULES_KEY
specifier|private
specifier|static
specifier|final
name|String
name|REQUIRED_MODULES_KEY
init|=
literal|"required.modules"
decl_stmt|;
DECL|field|APPLICATION_TITLE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_TITLE_KEY
init|=
literal|"application.title"
decl_stmt|;
DECL|field|QT_PROVIDER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|QT_PROVIDER_KEY
init|=
literal|"qt.provider"
decl_stmt|;
DECL|field|MINIMUM_MINISTRO_API_KEY
specifier|private
specifier|static
specifier|final
name|String
name|MINIMUM_MINISTRO_API_KEY
init|=
literal|"minimum.ministro.api"
decl_stmt|;
DECL|field|MINIMUM_QT_VERSION_KEY
specifier|private
specifier|static
specifier|final
name|String
name|MINIMUM_QT_VERSION_KEY
init|=
literal|"minimum.qt.version"
decl_stmt|;
comment|//    private static final String REPOSITORIES="3rd.party.repositories"; // needs MINISTRO_API_LEVEL>=2 !!!
comment|// Use this key to specify any 3rd party repositories urls
comment|// Ministro will download these repositories into thier
comment|// own folders, check http://community.kde.org/Necessitas/Ministro
comment|// for more details.
DECL|field|APPLICATION_PARAMETERS
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_PARAMETERS
init|=
literal|null
decl_stmt|;
comment|// use this variable to pass any parameters to your application,
comment|// the parameters must not contain any white spaces
comment|// and must be separated with "\t"
comment|// e.g "-param1\t-param2=value2\t-param3\tvalue3"
DECL|field|ENVIRONMENT_VARIABLES
specifier|private
specifier|static
specifier|final
name|String
name|ENVIRONMENT_VARIABLES
init|=
literal|"QT_USE_ANDROID_NATIVE_STYLE=1\t"
decl_stmt|;
comment|// use this variable to add any environment variables to your application.
comment|// the env vars must be separated with "\t"
comment|// e.g. "ENV_VAR1=1\tENV_VAR2=2\t"
comment|// Currently the following vars are used by the android plugin:
comment|// * QT_USE_ANDROID_NATIVE_STYLE - 0 if you don't want to use android style plugin, it will save a few ms at startup.
DECL|field|INCOMPATIBLE_MINISTRO_VERSION
specifier|private
specifier|static
specifier|final
name|int
name|INCOMPATIBLE_MINISTRO_VERSION
init|=
literal|1
decl_stmt|;
comment|// Incompatible Ministro version. Ministro needs to be upgraded.
DECL|field|m_activityInfo
specifier|private
name|ActivityInfo
name|m_activityInfo
init|=
literal|null
decl_stmt|;
comment|// activity info object, used to access the libs and the strings
DECL|field|m_classLoader
specifier|private
name|DexClassLoader
name|m_classLoader
init|=
literal|null
decl_stmt|;
comment|// loader object
DECL|field|m_qtLibs
specifier|private
name|String
index|[]
name|m_qtLibs
init|=
literal|null
decl_stmt|;
comment|// required qt libs
comment|// this function is used to load and start the loader
DECL|method|loadApplication
specifier|private
name|void
name|loadApplication
parameter_list|(
name|Bundle
name|loaderParams
parameter_list|)
block|{
try|try
block|{
specifier|final
name|int
name|errorCode
init|=
name|loaderParams
operator|.
name|getInt
argument_list|(
name|ERROR_CODE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorCode
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|errorCode
operator|==
name|INCOMPATIBLE_MINISTRO_VERSION
condition|)
block|{
name|downloadUpgradeMinistro
argument_list|(
name|loaderParams
operator|.
name|getString
argument_list|(
name|ERROR_MESSAGE_KEY
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// fatal error, show the error and quit
name|AlertDialog
name|errorDialog
init|=
operator|new
name|AlertDialog
operator|.
name|Builder
argument_list|(
name|QtActivity
operator|.
name|this
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|errorDialog
operator|.
name|setMessage
argument_list|(
name|loaderParams
operator|.
name|getString
argument_list|(
name|ERROR_MESSAGE_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|setButton
argument_list|(
name|getResources
argument_list|()
operator|.
name|getString
argument_list|(
name|android
operator|.
name|R
operator|.
name|string
operator|.
name|ok
argument_list|)
argument_list|,
operator|new
name|DialogInterface
operator|.
name|OnClickListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|DialogInterface
name|dialog
parameter_list|,
name|int
name|which
parameter_list|)
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|show
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// add all bundled Qt libs to loader params
name|ArrayList
argument_list|<
name|String
argument_list|>
name|libs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_activityInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.bundled_libs_resource_id"
argument_list|)
condition|)
name|libs
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getResources
argument_list|()
operator|.
name|getStringArray
argument_list|(
name|m_activityInfo
operator|.
name|metaData
operator|.
name|getInt
argument_list|(
literal|"android.app.bundled_libs_resource_id"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|libName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|m_activityInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.lib_name"
argument_list|)
condition|)
block|{
name|libName
operator|=
name|m_activityInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.lib_name"
argument_list|)
expr_stmt|;
name|loaderParams
operator|.
name|putString
argument_list|(
name|MAIN_LIBRARY_KEY
argument_list|,
name|libName
argument_list|)
expr_stmt|;
comment|//main library contains main() function
block|}
name|loaderParams
operator|.
name|putStringArrayList
argument_list|(
name|BUNDLED_LIBRARIES_KEY
argument_list|,
name|libs
argument_list|)
expr_stmt|;
name|loaderParams
operator|.
name|putInt
argument_list|(
name|NECESSITAS_API_LEVEL_KEY
argument_list|,
name|NECESSITAS_API_LEVEL
argument_list|)
expr_stmt|;
comment|// load and start QtLoader class
name|m_classLoader
operator|=
operator|new
name|DexClassLoader
argument_list|(
name|loaderParams
operator|.
name|getString
argument_list|(
name|DEX_PATH_KEY
argument_list|)
argument_list|,
comment|// .jar/.apk files
name|getDir
argument_list|(
literal|"outdex"
argument_list|,
name|Context
operator|.
name|MODE_PRIVATE
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
comment|// directory where optimized DEX files should be written.
name|loaderParams
operator|.
name|containsKey
argument_list|(
name|LIB_PATH_KEY
argument_list|)
condition|?
name|loaderParams
operator|.
name|getString
argument_list|(
name|LIB_PATH_KEY
argument_list|)
else|:
literal|null
argument_list|,
comment|// libs folder (if exists)
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent loader
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Class
name|loaderClass
init|=
name|m_classLoader
operator|.
name|loadClass
argument_list|(
name|loaderParams
operator|.
name|getString
argument_list|(
name|LOADER_CLASS_NAME_KEY
argument_list|)
argument_list|)
decl_stmt|;
comment|// load QtLoader class
name|Object
name|qtLoader
init|=
name|loaderClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// create an instance
name|Method
name|perpareAppMethod
init|=
name|qtLoader
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"loadApplication"
argument_list|,
name|Activity
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|class
argument_list|,
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Boolean
operator|)
name|perpareAppMethod
operator|.
name|invoke
argument_list|(
name|qtLoader
argument_list|,
name|this
argument_list|,
name|m_classLoader
argument_list|,
name|loaderParams
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|""
argument_list|)
throw|;
name|QtApplication
operator|.
name|setQtActivityDelegate
argument_list|(
name|qtLoader
argument_list|)
expr_stmt|;
comment|// now load the application library so it's accessible from this class loader
if|if
condition|(
name|libName
operator|!=
literal|null
condition|)
name|System
operator|.
name|loadLibrary
argument_list|(
name|libName
argument_list|)
expr_stmt|;
name|Method
name|startAppMethod
init|=
name|qtLoader
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"startApplication"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Boolean
operator|)
name|startAppMethod
operator|.
name|invoke
argument_list|(
name|qtLoader
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|""
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|AlertDialog
name|errorDialog
init|=
operator|new
name|AlertDialog
operator|.
name|Builder
argument_list|(
name|QtActivity
operator|.
name|this
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_activityInfo
operator|!=
literal|null
operator|&&
name|m_activityInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.fatal_error_msg"
argument_list|)
condition|)
name|errorDialog
operator|.
name|setMessage
argument_list|(
name|m_activityInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.fatal_error_msg"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|errorDialog
operator|.
name|setMessage
argument_list|(
literal|"Fatal error, your application can't be started."
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|setButton
argument_list|(
name|getResources
argument_list|()
operator|.
name|getString
argument_list|(
name|android
operator|.
name|R
operator|.
name|string
operator|.
name|ok
argument_list|)
argument_list|,
operator|new
name|DialogInterface
operator|.
name|OnClickListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|DialogInterface
name|dialog
parameter_list|,
name|int
name|which
parameter_list|)
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|m_ministroConnection
specifier|private
name|ServiceConnection
name|m_ministroConnection
init|=
operator|new
name|ServiceConnection
argument_list|()
block|{
specifier|private
name|IMinistro
name|m_service
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onServiceConnected
parameter_list|(
name|ComponentName
name|name
parameter_list|,
name|IBinder
name|service
parameter_list|)
block|{
name|m_service
operator|=
name|IMinistro
operator|.
name|Stub
operator|.
name|asInterface
argument_list|(
name|service
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|m_service
operator|!=
literal|null
condition|)
block|{
name|Bundle
name|parameters
init|=
operator|new
name|Bundle
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|putStringArray
argument_list|(
name|REQUIRED_MODULES_KEY
argument_list|,
name|m_qtLibs
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|putString
argument_list|(
name|APPLICATION_TITLE_KEY
argument_list|,
operator|(
name|String
operator|)
name|QtActivity
operator|.
name|this
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|putInt
argument_list|(
name|MINIMUM_MINISTRO_API_KEY
argument_list|,
name|MINISTRO_API_LEVEL
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|putString
argument_list|(
name|QT_PROVIDER_KEY
argument_list|,
name|QT_PROVIDER
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|putInt
argument_list|(
name|MINIMUM_QT_VERSION_KEY
argument_list|,
name|QT_VERSION
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|putString
argument_list|(
name|ENVIRONMENT_VARIABLES_KEY
argument_list|,
name|ENVIRONMENT_VARIABLES
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|APPLICATION_PARAMETERS
condition|)
name|parameters
operator|.
name|putString
argument_list|(
name|APPLICATION_PARAMETERS_KEY
argument_list|,
name|APPLICATION_PARAMETERS
argument_list|)
expr_stmt|;
comment|// parameters.putStringArray(REPOSITORIES, null);
name|m_service
operator|.
name|requestLoader
argument_list|(
name|m_ministroCallback
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|IMinistroCallback
name|m_ministroCallback
init|=
operator|new
name|IMinistroCallback
operator|.
name|Stub
argument_list|()
block|{
comment|// this function is called back by Ministro.
annotation|@
name|Override
specifier|public
name|void
name|loaderReady
parameter_list|(
specifier|final
name|Bundle
name|loaderParams
parameter_list|)
throws|throws
name|RemoteException
block|{
name|runOnUiThread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|unbindService
argument_list|(
name|m_ministroConnection
argument_list|)
expr_stmt|;
name|loadApplication
argument_list|(
name|loaderParams
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onServiceDisconnected
parameter_list|(
name|ComponentName
name|name
parameter_list|)
block|{
name|m_service
operator|=
literal|null
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|method|downloadUpgradeMinistro
specifier|private
name|void
name|downloadUpgradeMinistro
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|AlertDialog
operator|.
name|Builder
name|downloadDialog
init|=
operator|new
name|AlertDialog
operator|.
name|Builder
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|downloadDialog
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|downloadDialog
operator|.
name|setPositiveButton
argument_list|(
name|android
operator|.
name|R
operator|.
name|string
operator|.
name|yes
argument_list|,
operator|new
name|DialogInterface
operator|.
name|OnClickListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|DialogInterface
name|dialogInterface
parameter_list|,
name|int
name|i
parameter_list|)
block|{
try|try
block|{
name|Uri
name|uri
init|=
name|Uri
operator|.
name|parse
argument_list|(
literal|"market://search?q=pname:org.kde.necessitas.ministro"
argument_list|)
decl_stmt|;
name|Intent
name|intent
init|=
operator|new
name|Intent
argument_list|(
name|Intent
operator|.
name|ACTION_VIEW
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|startActivityForResult
argument_list|(
name|intent
argument_list|,
name|MINISTRO_INSTALL_REQUEST_CODE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|ministroNotFound
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|downloadDialog
operator|.
name|setNegativeButton
argument_list|(
name|android
operator|.
name|R
operator|.
name|string
operator|.
name|no
argument_list|,
operator|new
name|DialogInterface
operator|.
name|OnClickListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|DialogInterface
name|dialogInterface
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|QtActivity
operator|.
name|this
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|downloadDialog
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
DECL|method|ministroNotFound
specifier|private
name|void
name|ministroNotFound
parameter_list|()
block|{
name|AlertDialog
name|errorDialog
init|=
operator|new
name|AlertDialog
operator|.
name|Builder
argument_list|(
name|QtActivity
operator|.
name|this
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_activityInfo
operator|!=
literal|null
operator|&&
name|m_activityInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.ministro_not_found_msg"
argument_list|)
condition|)
name|errorDialog
operator|.
name|setMessage
argument_list|(
name|m_activityInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.ministro_not_found_msg"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|errorDialog
operator|.
name|setMessage
argument_list|(
literal|"Can't find Ministro service.\nThe application can't start."
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|setButton
argument_list|(
name|getResources
argument_list|()
operator|.
name|getString
argument_list|(
name|android
operator|.
name|R
operator|.
name|string
operator|.
name|ok
argument_list|)
argument_list|,
operator|new
name|DialogInterface
operator|.
name|OnClickListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|DialogInterface
name|dialog
parameter_list|,
name|int
name|which
parameter_list|)
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
DECL|method|startApp
specifier|private
name|void
name|startApp
parameter_list|(
specifier|final
name|boolean
name|firstStart
parameter_list|)
block|{
try|try
block|{
name|ActivityInfo
name|ai
init|=
name|getPackageManager
argument_list|()
operator|.
name|getActivityInfo
argument_list|(
name|getComponentName
argument_list|()
argument_list|,
name|PackageManager
operator|.
name|GET_META_DATA
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.qt_libs_resource_id"
argument_list|)
condition|)
block|{
name|int
name|resourceId
init|=
name|ai
operator|.
name|metaData
operator|.
name|getInt
argument_list|(
literal|"android.app.qt_libs_resource_id"
argument_list|)
decl_stmt|;
name|m_qtLibs
operator|=
name|getResources
argument_list|()
operator|.
name|getStringArray
argument_list|(
name|resourceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|!=
literal|null
operator|&&
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"use_local_qt_libs"
argument_list|)
operator|&&
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|getString
argument_list|(
literal|"use_local_qt_libs"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|libraryList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|localPrefix
init|=
literal|"/data/local/tmp/qt/"
decl_stmt|;
if|if
condition|(
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"libs_prefix"
argument_list|)
condition|)
name|localPrefix
operator|=
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|getString
argument_list|(
literal|"libs_prefix"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_qtLibs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_qtLibs
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|libraryList
operator|.
name|add
argument_list|(
name|localPrefix
operator|+
literal|"lib/lib"
operator|+
name|m_qtLibs
index|[
name|i
index|]
operator|+
literal|".so"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"load_local_libs"
argument_list|)
condition|)
block|{
name|String
index|[]
name|extraLibs
init|=
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|getString
argument_list|(
literal|"load_local_libs"
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|lib
range|:
name|extraLibs
control|)
block|{
if|if
condition|(
name|lib
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|libraryList
operator|.
name|add
argument_list|(
name|localPrefix
operator|+
name|lib
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|dexPaths
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
name|String
name|pathSeparator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"load_local_jars"
argument_list|)
condition|)
block|{
name|String
index|[]
name|jarFiles
init|=
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|getString
argument_list|(
literal|"load_local_jars"
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|jar
range|:
name|jarFiles
control|)
block|{
if|if
condition|(
name|jar
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|dexPaths
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|dexPaths
operator|+=
name|pathSeparator
expr_stmt|;
name|dexPaths
operator|+=
name|localPrefix
operator|+
name|jar
expr_stmt|;
block|}
block|}
block|}
name|Bundle
name|loaderParams
init|=
operator|new
name|Bundle
argument_list|()
decl_stmt|;
name|loaderParams
operator|.
name|putInt
argument_list|(
name|ERROR_CODE_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|loaderParams
operator|.
name|putString
argument_list|(
name|DEX_PATH_KEY
argument_list|,
name|dexPaths
argument_list|)
expr_stmt|;
name|loaderParams
operator|.
name|putString
argument_list|(
name|LOADER_CLASS_NAME_KEY
argument_list|,
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"loader_class_name"
argument_list|)
condition|?
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|getString
argument_list|(
literal|"loader_class_name"
argument_list|)
else|:
literal|"org.qtproject.qt5.android.QtActivityDelegate"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"static_init_classes"
argument_list|)
condition|)
block|{
name|loaderParams
operator|.
name|putStringArray
argument_list|(
name|STATIC_INIT_CLASSES_KEY
argument_list|,
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
operator|.
name|getString
argument_list|(
literal|"static_init_classes"
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|loaderParams
operator|.
name|putStringArrayList
argument_list|(
name|NATIVE_LIBRARIES_KEY
argument_list|,
name|libraryList
argument_list|)
expr_stmt|;
name|loaderParams
operator|.
name|putString
argument_list|(
name|ENVIRONMENT_VARIABLES_KEY
argument_list|,
name|ENVIRONMENT_VARIABLES
operator|+
literal|"QT_QPA_EGLFS_HIDECURSOR=1"
operator|+
literal|"\tQML2_IMPORT_PATH="
operator|+
name|localPrefix
operator|+
literal|"/qml"
operator|+
literal|"\tQML_IMPORT_PATH="
operator|+
name|localPrefix
operator|+
literal|"/imports"
operator|+
literal|"\tQT_PLUGIN_PATH="
operator|+
name|localPrefix
operator|+
literal|"/plugins"
argument_list|)
expr_stmt|;
name|loadApplication
argument_list|(
name|loaderParams
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|bindService
argument_list|(
operator|new
name|Intent
argument_list|(
name|org
operator|.
name|kde
operator|.
name|necessitas
operator|.
name|ministro
operator|.
name|IMinistro
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|,
name|m_ministroConnection
argument_list|,
name|Context
operator|.
name|BIND_AUTO_CREATE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|firstStart
condition|)
block|{
name|String
name|msg
init|=
literal|"This application requires Ministro service. Would you like to install it?"
decl_stmt|;
if|if
condition|(
name|m_activityInfo
operator|!=
literal|null
operator|&&
name|m_activityInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.ministro_needed_msg"
argument_list|)
condition|)
name|msg
operator|=
name|m_activityInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.ministro_needed_msg"
argument_list|)
expr_stmt|;
name|downloadUpgradeMinistro
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ministroNotFound
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtApplication
operator|.
name|QtTAG
argument_list|,
literal|"Can't create main activity"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/////////////////////////// forward all notifications ////////////////////////////
comment|/////////////////////////// Super class calls ////////////////////////////////////
comment|/////////////// PLEASE DO NOT CHANGE THE FOLLOWING CODE //////////////////////////
comment|//////////////////////////////////////////////////////////////////////////////////
annotation|@
name|Override
DECL|method|dispatchKeyEvent
specifier|public
name|boolean
name|dispatchKeyEvent
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|dispatchKeyEvent
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|dispatchKeyEvent
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|dispatchKeyEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
DECL|method|super_dispatchKeyEvent
specifier|public
name|boolean
name|super_dispatchKeyEvent
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|dispatchKeyEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|dispatchPopulateAccessibilityEvent
specifier|public
name|boolean
name|dispatchPopulateAccessibilityEvent
parameter_list|(
name|AccessibilityEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|dispatchPopulateAccessibilityEvent
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|dispatchPopulateAccessibilityEvent
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|dispatchPopulateAccessibilityEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
DECL|method|super_dispatchPopulateAccessibilityEvent
specifier|public
name|boolean
name|super_dispatchPopulateAccessibilityEvent
parameter_list|(
name|AccessibilityEvent
name|event
parameter_list|)
block|{
return|return
name|super_dispatchPopulateAccessibilityEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|dispatchTouchEvent
specifier|public
name|boolean
name|dispatchTouchEvent
parameter_list|(
name|MotionEvent
name|ev
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|dispatchTouchEvent
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|dispatchTouchEvent
argument_list|,
name|ev
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|dispatchTouchEvent
argument_list|(
name|ev
argument_list|)
return|;
block|}
DECL|method|super_dispatchTouchEvent
specifier|public
name|boolean
name|super_dispatchTouchEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|dispatchTouchEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|dispatchTrackballEvent
specifier|public
name|boolean
name|dispatchTrackballEvent
parameter_list|(
name|MotionEvent
name|ev
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|dispatchTrackballEvent
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|dispatchTrackballEvent
argument_list|,
name|ev
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|dispatchTrackballEvent
argument_list|(
name|ev
argument_list|)
return|;
block|}
DECL|method|super_dispatchTrackballEvent
specifier|public
name|boolean
name|super_dispatchTrackballEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|dispatchTrackballEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onActivityResult
specifier|protected
name|void
name|onActivityResult
parameter_list|(
name|int
name|requestCode
parameter_list|,
name|int
name|resultCode
parameter_list|,
name|Intent
name|data
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|onActivityResult
operator|!=
literal|null
condition|)
block|{
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|onActivityResult
argument_list|,
name|requestCode
argument_list|,
name|resultCode
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|requestCode
operator|==
name|MINISTRO_INSTALL_REQUEST_CODE
condition|)
name|startApp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|super
operator|.
name|onActivityResult
argument_list|(
name|requestCode
argument_list|,
name|resultCode
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onActivityResult
specifier|public
name|void
name|super_onActivityResult
parameter_list|(
name|int
name|requestCode
parameter_list|,
name|int
name|resultCode
parameter_list|,
name|Intent
name|data
parameter_list|)
block|{
name|super
operator|.
name|onActivityResult
argument_list|(
name|requestCode
argument_list|,
name|resultCode
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onApplyThemeResource
specifier|protected
name|void
name|onApplyThemeResource
parameter_list|(
name|Theme
name|theme
parameter_list|,
name|int
name|resid
parameter_list|,
name|boolean
name|first
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|theme
argument_list|,
name|resid
argument_list|,
name|first
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onApplyThemeResource
argument_list|(
name|theme
argument_list|,
name|resid
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onApplyThemeResource
specifier|public
name|void
name|super_onApplyThemeResource
parameter_list|(
name|Theme
name|theme
parameter_list|,
name|int
name|resid
parameter_list|,
name|boolean
name|first
parameter_list|)
block|{
name|super
operator|.
name|onApplyThemeResource
argument_list|(
name|theme
argument_list|,
name|resid
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onChildTitleChanged
specifier|protected
name|void
name|onChildTitleChanged
parameter_list|(
name|Activity
name|childActivity
parameter_list|,
name|CharSequence
name|title
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|childActivity
argument_list|,
name|title
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onChildTitleChanged
argument_list|(
name|childActivity
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onChildTitleChanged
specifier|public
name|void
name|super_onChildTitleChanged
parameter_list|(
name|Activity
name|childActivity
parameter_list|,
name|CharSequence
name|title
parameter_list|)
block|{
name|super
operator|.
name|onChildTitleChanged
argument_list|(
name|childActivity
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onConfigurationChanged
specifier|public
name|void
name|onConfigurationChanged
parameter_list|(
name|Configuration
name|newConfig
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|newConfig
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onConfigurationChanged
argument_list|(
name|newConfig
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onConfigurationChanged
specifier|public
name|void
name|super_onConfigurationChanged
parameter_list|(
name|Configuration
name|newConfig
parameter_list|)
block|{
name|super
operator|.
name|onConfigurationChanged
argument_list|(
name|newConfig
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onContentChanged
specifier|public
name|void
name|onContentChanged
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
operator|.
name|invoked
condition|)
name|super
operator|.
name|onContentChanged
argument_list|()
expr_stmt|;
block|}
DECL|method|super_onContentChanged
specifier|public
name|void
name|super_onContentChanged
parameter_list|()
block|{
name|super
operator|.
name|onContentChanged
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onContextItemSelected
specifier|public
name|boolean
name|onContextItemSelected
parameter_list|(
name|MenuItem
name|item
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Boolean
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onContextItemSelected
argument_list|(
name|item
argument_list|)
return|;
block|}
DECL|method|super_onContextItemSelected
specifier|public
name|boolean
name|super_onContextItemSelected
parameter_list|(
name|MenuItem
name|item
parameter_list|)
block|{
return|return
name|super
operator|.
name|onContextItemSelected
argument_list|(
name|item
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onContextMenuClosed
specifier|public
name|void
name|onContextMenuClosed
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|menu
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onContextMenuClosed
argument_list|(
name|menu
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onContextMenuClosed
specifier|public
name|void
name|super_onContextMenuClosed
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
name|super
operator|.
name|onContextMenuClosed
argument_list|(
name|menu
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onCreate
specifier|public
name|void
name|onCreate
parameter_list|(
name|Bundle
name|savedInstanceState
parameter_list|)
block|{
name|super
operator|.
name|onCreate
argument_list|(
name|savedInstanceState
argument_list|)
expr_stmt|;
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|onCreate
operator|!=
literal|null
condition|)
block|{
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|onCreate
argument_list|,
name|savedInstanceState
argument_list|)
expr_stmt|;
return|return;
block|}
name|requestWindowFeature
argument_list|(
name|Window
operator|.
name|FEATURE_NO_TITLE
argument_list|)
expr_stmt|;
try|try
block|{
name|m_activityInfo
operator|=
name|getPackageManager
argument_list|()
operator|.
name|getActivityInfo
argument_list|(
name|getComponentName
argument_list|()
argument_list|,
name|PackageManager
operator|.
name|GET_META_DATA
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NameNotFoundException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|finish
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
literal|null
operator|==
name|getLastNonConfigurationInstance
argument_list|()
condition|)
block|{
comment|// if splash screen is defined, then show it
if|if
condition|(
name|m_activityInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.splash_screen"
argument_list|)
condition|)
name|setContentView
argument_list|(
name|m_activityInfo
operator|.
name|metaData
operator|.
name|getInt
argument_list|(
literal|"android.app.splash_screen"
argument_list|)
argument_list|)
expr_stmt|;
name|startApp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onCreateContextMenu
specifier|public
name|void
name|onCreateContextMenu
parameter_list|(
name|ContextMenu
name|menu
parameter_list|,
name|View
name|v
parameter_list|,
name|ContextMenuInfo
name|menuInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|menu
argument_list|,
name|v
argument_list|,
name|menuInfo
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onCreateContextMenu
argument_list|(
name|menu
argument_list|,
name|v
argument_list|,
name|menuInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onCreateContextMenu
specifier|public
name|void
name|super_onCreateContextMenu
parameter_list|(
name|ContextMenu
name|menu
parameter_list|,
name|View
name|v
parameter_list|,
name|ContextMenuInfo
name|menuInfo
parameter_list|)
block|{
name|super
operator|.
name|onCreateContextMenu
argument_list|(
name|menu
argument_list|,
name|v
argument_list|,
name|menuInfo
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onCreateDescription
specifier|public
name|CharSequence
name|onCreateDescription
parameter_list|()
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|CharSequence
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onCreateDescription
argument_list|()
return|;
block|}
DECL|method|super_onCreateDescription
specifier|public
name|CharSequence
name|super_onCreateDescription
parameter_list|()
block|{
return|return
name|super
operator|.
name|onCreateDescription
argument_list|()
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onCreateDialog
specifier|protected
name|Dialog
name|onCreateDialog
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Dialog
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onCreateDialog
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|super_onCreateDialog
specifier|public
name|Dialog
name|super_onCreateDialog
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|super
operator|.
name|onCreateDialog
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onCreateOptionsMenu
specifier|public
name|boolean
name|onCreateOptionsMenu
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|menu
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Boolean
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onCreateOptionsMenu
argument_list|(
name|menu
argument_list|)
return|;
block|}
DECL|method|super_onCreateOptionsMenu
specifier|public
name|boolean
name|super_onCreateOptionsMenu
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
return|return
name|super
operator|.
name|onCreateOptionsMenu
argument_list|(
name|menu
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onCreatePanelMenu
specifier|public
name|boolean
name|onCreatePanelMenu
parameter_list|(
name|int
name|featureId
parameter_list|,
name|Menu
name|menu
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|featureId
argument_list|,
name|menu
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Boolean
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onCreatePanelMenu
argument_list|(
name|featureId
argument_list|,
name|menu
argument_list|)
return|;
block|}
DECL|method|super_onCreatePanelMenu
specifier|public
name|boolean
name|super_onCreatePanelMenu
parameter_list|(
name|int
name|featureId
parameter_list|,
name|Menu
name|menu
parameter_list|)
block|{
return|return
name|super
operator|.
name|onCreatePanelMenu
argument_list|(
name|featureId
argument_list|,
name|menu
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onCreatePanelView
specifier|public
name|View
name|onCreatePanelView
parameter_list|(
name|int
name|featureId
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|featureId
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|View
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onCreatePanelView
argument_list|(
name|featureId
argument_list|)
return|;
block|}
DECL|method|super_onCreatePanelView
specifier|public
name|View
name|super_onCreatePanelView
parameter_list|(
name|int
name|featureId
parameter_list|)
block|{
return|return
name|super
operator|.
name|onCreatePanelView
argument_list|(
name|featureId
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onCreateThumbnail
specifier|public
name|boolean
name|onCreateThumbnail
parameter_list|(
name|Bitmap
name|outBitmap
parameter_list|,
name|Canvas
name|canvas
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|outBitmap
argument_list|,
name|canvas
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Boolean
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onCreateThumbnail
argument_list|(
name|outBitmap
argument_list|,
name|canvas
argument_list|)
return|;
block|}
DECL|method|super_onCreateThumbnail
specifier|public
name|boolean
name|super_onCreateThumbnail
parameter_list|(
name|Bitmap
name|outBitmap
parameter_list|,
name|Canvas
name|canvas
parameter_list|)
block|{
return|return
name|super
operator|.
name|onCreateThumbnail
argument_list|(
name|outBitmap
argument_list|,
name|canvas
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onCreateView
specifier|public
name|View
name|onCreateView
parameter_list|(
name|String
name|name
parameter_list|,
name|Context
name|context
parameter_list|,
name|AttributeSet
name|attrs
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|attrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|View
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onCreateView
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|attrs
argument_list|)
return|;
block|}
DECL|method|super_onCreateView
specifier|public
name|View
name|super_onCreateView
parameter_list|(
name|String
name|name
parameter_list|,
name|Context
name|context
parameter_list|,
name|AttributeSet
name|attrs
parameter_list|)
block|{
return|return
name|super
operator|.
name|onCreateView
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|attrs
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onDestroy
specifier|protected
name|void
name|onDestroy
parameter_list|()
block|{
name|super
operator|.
name|onDestroy
argument_list|()
expr_stmt|;
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onKeyDown
specifier|public
name|boolean
name|onKeyDown
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|onKeyDown
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|onKeyDown
argument_list|,
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|onKeyDown
argument_list|(
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
block|}
DECL|method|super_onKeyDown
specifier|public
name|boolean
name|super_onKeyDown
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|onKeyDown
argument_list|(
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onKeyMultiple
specifier|public
name|boolean
name|onKeyMultiple
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|int
name|repeatCount
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|onKeyMultiple
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|onKeyMultiple
argument_list|,
name|keyCode
argument_list|,
name|repeatCount
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|onKeyMultiple
argument_list|(
name|keyCode
argument_list|,
name|repeatCount
argument_list|,
name|event
argument_list|)
return|;
block|}
DECL|method|super_onKeyMultiple
specifier|public
name|boolean
name|super_onKeyMultiple
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|int
name|repeatCount
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|onKeyMultiple
argument_list|(
name|keyCode
argument_list|,
name|repeatCount
argument_list|,
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onKeyUp
specifier|public
name|boolean
name|onKeyUp
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|onKeyDown
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|onKeyUp
argument_list|,
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|onKeyUp
argument_list|(
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
block|}
DECL|method|super_onKeyUp
specifier|public
name|boolean
name|super_onKeyUp
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|onKeyUp
argument_list|(
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onLowMemory
specifier|public
name|void
name|onLowMemory
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
operator|.
name|invoked
condition|)
name|super
operator|.
name|onLowMemory
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onMenuItemSelected
specifier|public
name|boolean
name|onMenuItemSelected
parameter_list|(
name|int
name|featureId
parameter_list|,
name|MenuItem
name|item
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|featureId
argument_list|,
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Boolean
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onMenuItemSelected
argument_list|(
name|featureId
argument_list|,
name|item
argument_list|)
return|;
block|}
DECL|method|super_onMenuItemSelected
specifier|public
name|boolean
name|super_onMenuItemSelected
parameter_list|(
name|int
name|featureId
parameter_list|,
name|MenuItem
name|item
parameter_list|)
block|{
return|return
name|super
operator|.
name|onMenuItemSelected
argument_list|(
name|featureId
argument_list|,
name|item
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onMenuOpened
specifier|public
name|boolean
name|onMenuOpened
parameter_list|(
name|int
name|featureId
parameter_list|,
name|Menu
name|menu
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|featureId
argument_list|,
name|menu
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Boolean
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onMenuOpened
argument_list|(
name|featureId
argument_list|,
name|menu
argument_list|)
return|;
block|}
DECL|method|super_onMenuOpened
specifier|public
name|boolean
name|super_onMenuOpened
parameter_list|(
name|int
name|featureId
parameter_list|,
name|Menu
name|menu
parameter_list|)
block|{
return|return
name|super
operator|.
name|onMenuOpened
argument_list|(
name|featureId
argument_list|,
name|menu
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onNewIntent
specifier|protected
name|void
name|onNewIntent
parameter_list|(
name|Intent
name|intent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|intent
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onNewIntent
argument_list|(
name|intent
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onNewIntent
specifier|public
name|void
name|super_onNewIntent
parameter_list|(
name|Intent
name|intent
parameter_list|)
block|{
name|super
operator|.
name|onNewIntent
argument_list|(
name|intent
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onOptionsItemSelected
specifier|public
name|boolean
name|onOptionsItemSelected
parameter_list|(
name|MenuItem
name|item
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Boolean
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onOptionsItemSelected
argument_list|(
name|item
argument_list|)
return|;
block|}
DECL|method|super_onOptionsItemSelected
specifier|public
name|boolean
name|super_onOptionsItemSelected
parameter_list|(
name|MenuItem
name|item
parameter_list|)
block|{
return|return
name|super
operator|.
name|onOptionsItemSelected
argument_list|(
name|item
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onOptionsMenuClosed
specifier|public
name|void
name|onOptionsMenuClosed
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|menu
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onOptionsMenuClosed
argument_list|(
name|menu
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onOptionsMenuClosed
specifier|public
name|void
name|super_onOptionsMenuClosed
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
name|super
operator|.
name|onOptionsMenuClosed
argument_list|(
name|menu
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onPanelClosed
specifier|public
name|void
name|onPanelClosed
parameter_list|(
name|int
name|featureId
parameter_list|,
name|Menu
name|menu
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|featureId
argument_list|,
name|menu
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onPanelClosed
argument_list|(
name|featureId
argument_list|,
name|menu
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onPanelClosed
specifier|public
name|void
name|super_onPanelClosed
parameter_list|(
name|int
name|featureId
parameter_list|,
name|Menu
name|menu
parameter_list|)
block|{
name|super
operator|.
name|onPanelClosed
argument_list|(
name|featureId
argument_list|,
name|menu
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onPause
specifier|protected
name|void
name|onPause
parameter_list|()
block|{
name|super
operator|.
name|onPause
argument_list|()
expr_stmt|;
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onPostCreate
specifier|protected
name|void
name|onPostCreate
parameter_list|(
name|Bundle
name|savedInstanceState
parameter_list|)
block|{
name|super
operator|.
name|onPostCreate
argument_list|(
name|savedInstanceState
argument_list|)
expr_stmt|;
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|savedInstanceState
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onPostResume
specifier|protected
name|void
name|onPostResume
parameter_list|()
block|{
name|super
operator|.
name|onPostResume
argument_list|()
expr_stmt|;
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onPrepareDialog
specifier|protected
name|void
name|onPrepareDialog
parameter_list|(
name|int
name|id
parameter_list|,
name|Dialog
name|dialog
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|id
argument_list|,
name|dialog
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onPrepareDialog
argument_list|(
name|id
argument_list|,
name|dialog
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onPrepareDialog
specifier|public
name|void
name|super_onPrepareDialog
parameter_list|(
name|int
name|id
parameter_list|,
name|Dialog
name|dialog
parameter_list|)
block|{
name|super
operator|.
name|onPrepareDialog
argument_list|(
name|id
argument_list|,
name|dialog
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onPrepareOptionsMenu
specifier|public
name|boolean
name|onPrepareOptionsMenu
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|menu
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Boolean
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onPrepareOptionsMenu
argument_list|(
name|menu
argument_list|)
return|;
block|}
DECL|method|super_onPrepareOptionsMenu
specifier|public
name|boolean
name|super_onPrepareOptionsMenu
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
return|return
name|super
operator|.
name|onPrepareOptionsMenu
argument_list|(
name|menu
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onPreparePanel
specifier|public
name|boolean
name|onPreparePanel
parameter_list|(
name|int
name|featureId
parameter_list|,
name|View
name|view
parameter_list|,
name|Menu
name|menu
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|featureId
argument_list|,
name|view
argument_list|,
name|menu
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Boolean
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onPreparePanel
argument_list|(
name|featureId
argument_list|,
name|view
argument_list|,
name|menu
argument_list|)
return|;
block|}
DECL|method|super_onPreparePanel
specifier|public
name|boolean
name|super_onPreparePanel
parameter_list|(
name|int
name|featureId
parameter_list|,
name|View
name|view
parameter_list|,
name|Menu
name|menu
parameter_list|)
block|{
return|return
name|super
operator|.
name|onPreparePanel
argument_list|(
name|featureId
argument_list|,
name|view
argument_list|,
name|menu
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onRestart
specifier|protected
name|void
name|onRestart
parameter_list|()
block|{
name|super
operator|.
name|onRestart
argument_list|()
expr_stmt|;
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onRestoreInstanceState
specifier|protected
name|void
name|onRestoreInstanceState
parameter_list|(
name|Bundle
name|savedInstanceState
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|savedInstanceState
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onRestoreInstanceState
argument_list|(
name|savedInstanceState
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onRestoreInstanceState
specifier|public
name|void
name|super_onRestoreInstanceState
parameter_list|(
name|Bundle
name|savedInstanceState
parameter_list|)
block|{
name|super
operator|.
name|onRestoreInstanceState
argument_list|(
name|savedInstanceState
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onResume
specifier|protected
name|void
name|onResume
parameter_list|()
block|{
name|super
operator|.
name|onResume
argument_list|()
expr_stmt|;
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onRetainNonConfigurationInstance
specifier|public
name|Object
name|onRetainNonConfigurationInstance
parameter_list|()
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onRetainNonConfigurationInstance
argument_list|()
return|;
block|}
DECL|method|super_onRetainNonConfigurationInstance
specifier|public
name|Object
name|super_onRetainNonConfigurationInstance
parameter_list|()
block|{
return|return
name|super
operator|.
name|onRetainNonConfigurationInstance
argument_list|()
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onSaveInstanceState
specifier|protected
name|void
name|onSaveInstanceState
parameter_list|(
name|Bundle
name|outState
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|outState
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onSaveInstanceState
argument_list|(
name|outState
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onSaveInstanceState
specifier|public
name|void
name|super_onSaveInstanceState
parameter_list|(
name|Bundle
name|outState
parameter_list|)
block|{
name|super
operator|.
name|onSaveInstanceState
argument_list|(
name|outState
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onSearchRequested
specifier|public
name|boolean
name|onSearchRequested
parameter_list|()
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Boolean
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onSearchRequested
argument_list|()
return|;
block|}
DECL|method|super_onSearchRequested
specifier|public
name|boolean
name|super_onSearchRequested
parameter_list|()
block|{
return|return
name|super
operator|.
name|onSearchRequested
argument_list|()
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onStart
specifier|protected
name|void
name|onStart
parameter_list|()
block|{
name|super
operator|.
name|onStart
argument_list|()
expr_stmt|;
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onStop
specifier|protected
name|void
name|onStop
parameter_list|()
block|{
name|super
operator|.
name|onStop
argument_list|()
expr_stmt|;
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onTitleChanged
specifier|protected
name|void
name|onTitleChanged
parameter_list|(
name|CharSequence
name|title
parameter_list|,
name|int
name|color
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|title
argument_list|,
name|color
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onTitleChanged
argument_list|(
name|title
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onTitleChanged
specifier|public
name|void
name|super_onTitleChanged
parameter_list|(
name|CharSequence
name|title
parameter_list|,
name|int
name|color
parameter_list|)
block|{
name|super
operator|.
name|onTitleChanged
argument_list|(
name|title
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onTouchEvent
specifier|public
name|boolean
name|onTouchEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|onTouchEvent
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|onTouchEvent
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|onTouchEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
DECL|method|super_onTouchEvent
specifier|public
name|boolean
name|super_onTouchEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|onTouchEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onTrackballEvent
specifier|public
name|boolean
name|onTrackballEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|onTrackballEvent
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|onTrackballEvent
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|onTrackballEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
DECL|method|super_onTrackballEvent
specifier|public
name|boolean
name|super_onTrackballEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|onTrackballEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onUserInteraction
specifier|public
name|void
name|onUserInteraction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
operator|.
name|invoked
condition|)
name|super
operator|.
name|onUserInteraction
argument_list|()
expr_stmt|;
block|}
DECL|method|super_onUserInteraction
specifier|public
name|void
name|super_onUserInteraction
parameter_list|()
block|{
name|super
operator|.
name|onUserInteraction
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onUserLeaveHint
specifier|protected
name|void
name|onUserLeaveHint
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
operator|.
name|invoked
condition|)
name|super
operator|.
name|onUserLeaveHint
argument_list|()
expr_stmt|;
block|}
DECL|method|super_onUserLeaveHint
specifier|public
name|void
name|super_onUserLeaveHint
parameter_list|()
block|{
name|super
operator|.
name|onUserLeaveHint
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onWindowAttributesChanged
specifier|public
name|void
name|onWindowAttributesChanged
parameter_list|(
name|LayoutParams
name|params
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|params
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onWindowAttributesChanged
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onWindowAttributesChanged
specifier|public
name|void
name|super_onWindowAttributesChanged
parameter_list|(
name|LayoutParams
name|params
parameter_list|)
block|{
name|super
operator|.
name|onWindowAttributesChanged
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onWindowFocusChanged
specifier|public
name|void
name|onWindowFocusChanged
parameter_list|(
name|boolean
name|hasFocus
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|hasFocus
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onWindowFocusChanged
argument_list|(
name|hasFocus
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onWindowFocusChanged
specifier|public
name|void
name|super_onWindowFocusChanged
parameter_list|(
name|boolean
name|hasFocus
parameter_list|)
block|{
name|super
operator|.
name|onWindowFocusChanged
argument_list|(
name|hasFocus
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
comment|//////////////// Activity API 5 /////////////
comment|//@ANDROID-5
annotation|@
name|Override
DECL|method|onAttachedToWindow
specifier|public
name|void
name|onAttachedToWindow
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
operator|.
name|invoked
condition|)
name|super
operator|.
name|onAttachedToWindow
argument_list|()
expr_stmt|;
block|}
DECL|method|super_onAttachedToWindow
specifier|public
name|void
name|super_onAttachedToWindow
parameter_list|()
block|{
name|super
operator|.
name|onAttachedToWindow
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onBackPressed
specifier|public
name|void
name|onBackPressed
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
operator|.
name|invoked
condition|)
name|super
operator|.
name|onBackPressed
argument_list|()
expr_stmt|;
block|}
DECL|method|super_onBackPressed
specifier|public
name|void
name|super_onBackPressed
parameter_list|()
block|{
name|super
operator|.
name|onBackPressed
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onDetachedFromWindow
specifier|public
name|void
name|onDetachedFromWindow
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|()
operator|.
name|invoked
condition|)
name|super
operator|.
name|onDetachedFromWindow
argument_list|()
expr_stmt|;
block|}
DECL|method|super_onDetachedFromWindow
specifier|public
name|void
name|super_onDetachedFromWindow
parameter_list|()
block|{
name|super
operator|.
name|onDetachedFromWindow
argument_list|()
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onKeyLongPress
specifier|public
name|boolean
name|onKeyLongPress
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|onKeyLongPress
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|onKeyLongPress
argument_list|,
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|onKeyLongPress
argument_list|(
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
block|}
DECL|method|super_onKeyLongPress
specifier|public
name|boolean
name|super_onKeyLongPress
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|onKeyLongPress
argument_list|(
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
comment|//@ANDROID-5
comment|//////////////// Activity API 8 /////////////
comment|//@ANDROID-8
annotation|@
name|Override
DECL|method|onCreateDialog
specifier|protected
name|Dialog
name|onCreateDialog
parameter_list|(
name|int
name|id
parameter_list|,
name|Bundle
name|args
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|id
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|Dialog
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onCreateDialog
argument_list|(
name|id
argument_list|,
name|args
argument_list|)
return|;
block|}
DECL|method|super_onCreateDialog
specifier|public
name|Dialog
name|super_onCreateDialog
parameter_list|(
name|int
name|id
parameter_list|,
name|Bundle
name|args
parameter_list|)
block|{
return|return
name|super
operator|.
name|onCreateDialog
argument_list|(
name|id
argument_list|,
name|args
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onPrepareDialog
specifier|protected
name|void
name|onPrepareDialog
parameter_list|(
name|int
name|id
parameter_list|,
name|Dialog
name|dialog
parameter_list|,
name|Bundle
name|args
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|id
argument_list|,
name|dialog
argument_list|,
name|args
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onPrepareDialog
argument_list|(
name|id
argument_list|,
name|dialog
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onPrepareDialog
specifier|public
name|void
name|super_onPrepareDialog
parameter_list|(
name|int
name|id
parameter_list|,
name|Dialog
name|dialog
parameter_list|,
name|Bundle
name|args
parameter_list|)
block|{
name|super
operator|.
name|onPrepareDialog
argument_list|(
name|id
argument_list|,
name|dialog
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
comment|//@ANDROID-8
comment|//////////////// Activity API 11 /////////////
comment|//@ANDROID-11
annotation|@
name|Override
DECL|method|dispatchKeyShortcutEvent
specifier|public
name|boolean
name|dispatchKeyShortcutEvent
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|dispatchKeyShortcutEvent
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|dispatchKeyShortcutEvent
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|dispatchKeyShortcutEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
DECL|method|super_dispatchKeyShortcutEvent
specifier|public
name|boolean
name|super_dispatchKeyShortcutEvent
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|dispatchKeyShortcutEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onActionModeFinished
specifier|public
name|void
name|onActionModeFinished
parameter_list|(
name|ActionMode
name|mode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|mode
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onActionModeFinished
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onActionModeFinished
specifier|public
name|void
name|super_onActionModeFinished
parameter_list|(
name|ActionMode
name|mode
parameter_list|)
block|{
name|super
operator|.
name|onActionModeFinished
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onActionModeStarted
specifier|public
name|void
name|onActionModeStarted
parameter_list|(
name|ActionMode
name|mode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|mode
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onActionModeStarted
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onActionModeStarted
specifier|public
name|void
name|super_onActionModeStarted
parameter_list|(
name|ActionMode
name|mode
parameter_list|)
block|{
name|super
operator|.
name|onActionModeStarted
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onAttachFragment
specifier|public
name|void
name|onAttachFragment
parameter_list|(
name|Fragment
name|fragment
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|fragment
argument_list|)
operator|.
name|invoked
condition|)
name|super
operator|.
name|onAttachFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
block|}
DECL|method|super_onAttachFragment
specifier|public
name|void
name|super_onAttachFragment
parameter_list|(
name|Fragment
name|fragment
parameter_list|)
block|{
name|super
operator|.
name|onAttachFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onCreateView
specifier|public
name|View
name|onCreateView
parameter_list|(
name|View
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|Context
name|context
parameter_list|,
name|AttributeSet
name|attrs
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|context
argument_list|,
name|attrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|View
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onCreateView
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|context
argument_list|,
name|attrs
argument_list|)
return|;
block|}
DECL|method|super_onCreateView
specifier|public
name|View
name|super_onCreateView
parameter_list|(
name|View
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|Context
name|context
parameter_list|,
name|AttributeSet
name|attrs
parameter_list|)
block|{
return|return
name|super
operator|.
name|onCreateView
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|context
argument_list|,
name|attrs
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onKeyShortcut
specifier|public
name|boolean
name|onKeyShortcut
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|onKeyShortcut
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|onKeyShortcut
argument_list|,
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|onKeyShortcut
argument_list|(
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
block|}
DECL|method|super_onKeyShortcut
specifier|public
name|boolean
name|super_onKeyShortcut
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|onKeyShortcut
argument_list|(
name|keyCode
argument_list|,
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onWindowStartingActionMode
specifier|public
name|ActionMode
name|onWindowStartingActionMode
parameter_list|(
name|Callback
name|callback
parameter_list|)
block|{
name|QtApplication
operator|.
name|InvokeResult
name|res
init|=
name|QtApplication
operator|.
name|invokeDelegate
argument_list|(
name|callback
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|invoked
condition|)
return|return
operator|(
name|ActionMode
operator|)
name|res
operator|.
name|methodReturns
return|;
else|else
return|return
name|super
operator|.
name|onWindowStartingActionMode
argument_list|(
name|callback
argument_list|)
return|;
block|}
DECL|method|super_onWindowStartingActionMode
specifier|public
name|ActionMode
name|super_onWindowStartingActionMode
parameter_list|(
name|Callback
name|callback
parameter_list|)
block|{
return|return
name|super
operator|.
name|onWindowStartingActionMode
argument_list|(
name|callback
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
comment|//@ANDROID-11
comment|//////////////// Activity API 12 /////////////
comment|//@ANDROID-12
annotation|@
name|Override
DECL|method|dispatchGenericMotionEvent
specifier|public
name|boolean
name|dispatchGenericMotionEvent
parameter_list|(
name|MotionEvent
name|ev
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|dispatchGenericMotionEvent
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|dispatchGenericMotionEvent
argument_list|,
name|ev
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|dispatchGenericMotionEvent
argument_list|(
name|ev
argument_list|)
return|;
block|}
DECL|method|super_dispatchGenericMotionEvent
specifier|public
name|boolean
name|super_dispatchGenericMotionEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|dispatchGenericMotionEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|onGenericMotionEvent
specifier|public
name|boolean
name|onGenericMotionEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|onGenericMotionEvent
operator|!=
literal|null
condition|)
return|return
operator|(
name|Boolean
operator|)
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|onGenericMotionEvent
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|onGenericMotionEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
DECL|method|super_onGenericMotionEvent
specifier|public
name|boolean
name|super_onGenericMotionEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
return|return
name|super
operator|.
name|onGenericMotionEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|//---------------------------------------------------------------------------
comment|//@ANDROID-12
block|}
end_class
end_unit
