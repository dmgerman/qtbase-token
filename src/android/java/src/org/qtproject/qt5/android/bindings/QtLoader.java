begin_unit
begin_comment
comment|/*     Copyright (c) 2016, BogDan Vatra<bogdan@kde.org>     Contact: http://www.qt.io/licensing/      Commercial License Usage     Licensees holding valid commercial Qt licenses may use this file in     accordance with the commercial license agreement provided with the     Software or, alternatively, in accordance with the terms contained in     a written agreement between you and The Qt Company. For licensing terms     and conditions see http://www.qt.io/terms-conditions. For further     information use the contact form at http://www.qt.io/contact-us.      BSD License Usage     Alternatively, this file may be used under the BSD license as follows:     Redistribution and use in source and binary forms, with or without     modification, are permitted provided that the following conditions     are met:      1. Redistributions of source code must retain the above copyright     notice, this list of conditions and the following disclaimer.     2. Redistributions in binary form must reproduce the above copyright     notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.      THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.     IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,     INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT     NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF     THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
end_comment
begin_package
DECL|package|org.qtproject.qt5.android.bindings
package|package
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
operator|.
name|bindings
package|;
end_package
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|AlertDialog
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|ComponentName
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|ContextWrapper
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|DialogInterface
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Intent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|ServiceConnection
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|pm
operator|.
name|ComponentInfo
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|pm
operator|.
name|PackageInfo
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|res
operator|.
name|AssetManager
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|Bundle
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|IBinder
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|RemoteException
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kde
operator|.
name|necessitas
operator|.
name|ministro
operator|.
name|IMinistro
import|;
end_import
begin_import
import|import
name|org
operator|.
name|kde
operator|.
name|necessitas
operator|.
name|ministro
operator|.
name|IMinistroCallback
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|dalvik
operator|.
name|system
operator|.
name|DexClassLoader
import|;
end_import
begin_class
DECL|class|QtLoader
specifier|public
specifier|abstract
class|class
name|QtLoader
block|{
DECL|field|MINISTRO_INSTALL_REQUEST_CODE
specifier|public
specifier|final
specifier|static
name|int
name|MINISTRO_INSTALL_REQUEST_CODE
init|=
literal|0xf3ee
decl_stmt|;
comment|// request code used to know when Ministro instalation is finished
DECL|field|MINISTRO_API_LEVEL
specifier|public
specifier|static
specifier|final
name|int
name|MINISTRO_API_LEVEL
init|=
literal|5
decl_stmt|;
comment|// Ministro api level (check IMinistro.aidl file)
DECL|field|NECESSITAS_API_LEVEL
specifier|public
specifier|static
specifier|final
name|int
name|NECESSITAS_API_LEVEL
init|=
literal|2
decl_stmt|;
comment|// Necessitas api level used by platform plugin
DECL|field|QT_VERSION
specifier|public
specifier|static
specifier|final
name|int
name|QT_VERSION
init|=
literal|0x050100
decl_stmt|;
comment|// This app requires at least Qt version 5.1.0
DECL|field|ERROR_CODE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_CODE_KEY
init|=
literal|"error.code"
decl_stmt|;
DECL|field|ERROR_MESSAGE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_MESSAGE_KEY
init|=
literal|"error.message"
decl_stmt|;
DECL|field|DEX_PATH_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DEX_PATH_KEY
init|=
literal|"dex.path"
decl_stmt|;
DECL|field|LIB_PATH_KEY
specifier|public
specifier|static
specifier|final
name|String
name|LIB_PATH_KEY
init|=
literal|"lib.path"
decl_stmt|;
DECL|field|LOADER_CLASS_NAME_KEY
specifier|public
specifier|static
specifier|final
name|String
name|LOADER_CLASS_NAME_KEY
init|=
literal|"loader.class.name"
decl_stmt|;
DECL|field|NATIVE_LIBRARIES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NATIVE_LIBRARIES_KEY
init|=
literal|"native.libraries"
decl_stmt|;
DECL|field|ENVIRONMENT_VARIABLES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ENVIRONMENT_VARIABLES_KEY
init|=
literal|"environment.variables"
decl_stmt|;
DECL|field|APPLICATION_PARAMETERS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|APPLICATION_PARAMETERS_KEY
init|=
literal|"application.parameters"
decl_stmt|;
DECL|field|BUNDLED_LIBRARIES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|BUNDLED_LIBRARIES_KEY
init|=
literal|"bundled.libraries"
decl_stmt|;
DECL|field|BUNDLED_IN_LIB_RESOURCE_ID_KEY
specifier|public
specifier|static
specifier|final
name|String
name|BUNDLED_IN_LIB_RESOURCE_ID_KEY
init|=
literal|"android.app.bundled_in_lib_resource_id"
decl_stmt|;
DECL|field|BUNDLED_IN_ASSETS_RESOURCE_ID_KEY
specifier|public
specifier|static
specifier|final
name|String
name|BUNDLED_IN_ASSETS_RESOURCE_ID_KEY
init|=
literal|"android.app.bundled_in_assets_resource_id"
decl_stmt|;
DECL|field|MAIN_LIBRARY_KEY
specifier|public
specifier|static
specifier|final
name|String
name|MAIN_LIBRARY_KEY
init|=
literal|"main.library"
decl_stmt|;
DECL|field|STATIC_INIT_CLASSES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|STATIC_INIT_CLASSES_KEY
init|=
literal|"static.init.classes"
decl_stmt|;
DECL|field|NECESSITAS_API_LEVEL_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NECESSITAS_API_LEVEL_KEY
init|=
literal|"necessitas.api.level"
decl_stmt|;
DECL|field|EXTRACT_STYLE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|EXTRACT_STYLE_KEY
init|=
literal|"extract.android.style"
decl_stmt|;
comment|/// Ministro server parameter keys
DECL|field|REQUIRED_MODULES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|REQUIRED_MODULES_KEY
init|=
literal|"required.modules"
decl_stmt|;
DECL|field|APPLICATION_TITLE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|APPLICATION_TITLE_KEY
init|=
literal|"application.title"
decl_stmt|;
DECL|field|MINIMUM_MINISTRO_API_KEY
specifier|public
specifier|static
specifier|final
name|String
name|MINIMUM_MINISTRO_API_KEY
init|=
literal|"minimum.ministro.api"
decl_stmt|;
DECL|field|MINIMUM_QT_VERSION_KEY
specifier|public
specifier|static
specifier|final
name|String
name|MINIMUM_QT_VERSION_KEY
init|=
literal|"minimum.qt.version"
decl_stmt|;
DECL|field|SOURCES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|SOURCES_KEY
init|=
literal|"sources"
decl_stmt|;
comment|// needs MINISTRO_API_LEVEL>=3 !!!
comment|// Use this key to specify any 3rd party sources urls
comment|// Ministro will download these repositories into their
comment|// own folders, check http://community.kde.org/Necessitas/Ministro
comment|// for more details.
DECL|field|REPOSITORY_KEY
specifier|public
specifier|static
specifier|final
name|String
name|REPOSITORY_KEY
init|=
literal|"repository"
decl_stmt|;
comment|// use this key to overwrite the default ministro repsitory
DECL|field|ANDROID_THEMES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ANDROID_THEMES_KEY
init|=
literal|"android.themes"
decl_stmt|;
comment|// themes that your application uses
DECL|field|APPLICATION_PARAMETERS
specifier|public
name|String
name|APPLICATION_PARAMETERS
init|=
literal|null
decl_stmt|;
comment|// use this variable to pass any parameters to your application,
comment|// the parameters must not contain any white spaces
comment|// and must be separated with "\t"
comment|// e.g "-param1\t-param2=value2\t-param3\tvalue3"
DECL|field|ENVIRONMENT_VARIABLES
specifier|public
name|String
name|ENVIRONMENT_VARIABLES
init|=
literal|"QT_USE_ANDROID_NATIVE_STYLE=1\tQT_USE_ANDROID_NATIVE_DIALOGS=1\t"
decl_stmt|;
comment|// use this variable to add any environment variables to your application.
comment|// the env vars must be separated with "\t"
comment|// e.g. "ENV_VAR1=1\tENV_VAR2=2\t"
comment|// Currently the following vars are used by the android plugin:
comment|// * QT_USE_ANDROID_NATIVE_STYLE - 1 to use the android widget style if available.
comment|// * QT_USE_ANDROID_NATIVE_DIALOGS -1 to use the android native dialogs.
DECL|field|QT_ANDROID_THEMES
specifier|public
name|String
index|[]
name|QT_ANDROID_THEMES
init|=
literal|null
decl_stmt|;
comment|// A list with all themes that your application want to use.
comment|// The name of the theme must be the same with any theme from
comment|// http://developer.android.com/reference/android/R.style.html
comment|// The most used themes are:
comment|//  * "Theme" - (fallback) check http://developer.android.com/reference/android/R.style.html#Theme
comment|//  * "Theme_Black" - check http://developer.android.com/reference/android/R.style.html#Theme_Black
comment|//  * "Theme_Light" - (default for API<=10) check http://developer.android.com/reference/android/R.style.html#Theme_Light
comment|//  * "Theme_Holo" - check http://developer.android.com/reference/android/R.style.html#Theme_Holo
comment|//  * "Theme_Holo_Light" - (default for API 11-13) check http://developer.android.com/reference/android/R.style.html#Theme_Holo_Light
comment|//  * "Theme_DeviceDefault" - check http://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault
comment|//  * "Theme_DeviceDefault_Light" - (default for API 14+) check http://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light
DECL|field|QT_ANDROID_DEFAULT_THEME
specifier|public
name|String
name|QT_ANDROID_DEFAULT_THEME
init|=
literal|null
decl_stmt|;
comment|// sets the default theme.
DECL|field|INCOMPATIBLE_MINISTRO_VERSION
specifier|public
specifier|static
specifier|final
name|int
name|INCOMPATIBLE_MINISTRO_VERSION
init|=
literal|1
decl_stmt|;
comment|// Incompatible Ministro version. Ministro needs to be upgraded.
DECL|field|BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|1024
decl_stmt|;
DECL|field|m_sources
specifier|public
name|String
index|[]
name|m_sources
init|=
block|{
literal|"https://download.qt-project.org/ministro/android/qt5/qt-5.7"
block|}
decl_stmt|;
comment|// Make sure you are using ONLY secure locations
DECL|field|m_repository
specifier|public
name|String
name|m_repository
init|=
literal|"default"
decl_stmt|;
comment|// Overwrites the default Ministro repository
comment|// Possible values:
comment|// * default - Ministro default repository set with "Ministro configuration tool".
comment|// By default the stable version is used. Only this or stable repositories should
comment|// be used in production.
comment|// * stable - stable repository, only this and default repositories should be used
comment|// in production.
comment|// * testing - testing repository, DO NOT use this repository in production,
comment|// this repository is used to push a new release, and should be used to test your application.
comment|// * unstable - unstable repository, DO NOT use this repository in production,
comment|// this repository is used to push Qt snapshots.
DECL|field|m_qtLibs
specifier|public
name|String
index|[]
name|m_qtLibs
init|=
literal|null
decl_stmt|;
comment|// required qt libs
DECL|field|m_displayDensity
specifier|public
name|int
name|m_displayDensity
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|m_context
specifier|private
name|ContextWrapper
name|m_context
decl_stmt|;
DECL|field|m_contextInfo
specifier|protected
name|ComponentInfo
name|m_contextInfo
decl_stmt|;
DECL|method|QtLoader
name|QtLoader
parameter_list|(
name|ContextWrapper
name|context
parameter_list|)
block|{
name|m_context
operator|=
name|context
expr_stmt|;
block|}
comment|// Implement in subclass
DECL|method|finish
specifier|protected
name|void
name|finish
parameter_list|()
block|{}
DECL|method|getTitle
specifier|protected
name|String
name|getTitle
parameter_list|()
block|{
return|return
literal|"Qt"
return|;
block|}
DECL|method|runOnUiThread
specifier|protected
name|void
name|runOnUiThread
parameter_list|(
name|Runnable
name|run
parameter_list|)
block|{
name|run
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|method|downloadUpgradeMinistro
specifier|protected
name|void
name|downloadUpgradeMinistro
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtApplication
operator|.
name|QtTAG
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|loaderClassName
specifier|protected
specifier|abstract
name|String
name|loaderClassName
parameter_list|()
function_decl|;
DECL|method|contextClassName
specifier|protected
specifier|abstract
name|Class
argument_list|<
name|?
argument_list|>
name|contextClassName
parameter_list|()
function_decl|;
DECL|method|getIntent
name|Intent
name|getIntent
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|// Implement in subclass
comment|// this function is used to load and start the loader
DECL|method|loadApplication
specifier|private
name|void
name|loadApplication
parameter_list|(
name|Bundle
name|loaderParams
parameter_list|)
block|{
try|try
block|{
specifier|final
name|int
name|errorCode
init|=
name|loaderParams
operator|.
name|getInt
argument_list|(
name|ERROR_CODE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorCode
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|errorCode
operator|==
name|INCOMPATIBLE_MINISTRO_VERSION
condition|)
block|{
name|downloadUpgradeMinistro
argument_list|(
name|loaderParams
operator|.
name|getString
argument_list|(
name|ERROR_MESSAGE_KEY
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// fatal error, show the error and quit
name|AlertDialog
name|errorDialog
init|=
operator|new
name|AlertDialog
operator|.
name|Builder
argument_list|(
name|m_context
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|errorDialog
operator|.
name|setMessage
argument_list|(
name|loaderParams
operator|.
name|getString
argument_list|(
name|ERROR_MESSAGE_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|setButton
argument_list|(
name|m_context
operator|.
name|getResources
argument_list|()
operator|.
name|getString
argument_list|(
name|android
operator|.
name|R
operator|.
name|string
operator|.
name|ok
argument_list|)
argument_list|,
operator|new
name|DialogInterface
operator|.
name|OnClickListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|DialogInterface
name|dialog
parameter_list|,
name|int
name|which
parameter_list|)
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|show
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// add all bundled Qt libs to loader params
name|ArrayList
argument_list|<
name|String
argument_list|>
name|libs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.bundled_libs_resource_id"
argument_list|)
condition|)
name|libs
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|m_context
operator|.
name|getResources
argument_list|()
operator|.
name|getStringArray
argument_list|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getInt
argument_list|(
literal|"android.app.bundled_libs_resource_id"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|libName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.lib_name"
argument_list|)
condition|)
block|{
name|libName
operator|=
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.lib_name"
argument_list|)
expr_stmt|;
name|loaderParams
operator|.
name|putString
argument_list|(
name|MAIN_LIBRARY_KEY
argument_list|,
name|libName
argument_list|)
expr_stmt|;
comment|//main library contains main() function
block|}
name|loaderParams
operator|.
name|putStringArrayList
argument_list|(
name|BUNDLED_LIBRARIES_KEY
argument_list|,
name|libs
argument_list|)
expr_stmt|;
name|loaderParams
operator|.
name|putInt
argument_list|(
name|NECESSITAS_API_LEVEL_KEY
argument_list|,
name|NECESSITAS_API_LEVEL
argument_list|)
expr_stmt|;
comment|// load and start QtLoader class
name|DexClassLoader
name|classLoader
init|=
operator|new
name|DexClassLoader
argument_list|(
name|loaderParams
operator|.
name|getString
argument_list|(
name|DEX_PATH_KEY
argument_list|)
argument_list|,
comment|// .jar/.apk files
name|m_context
operator|.
name|getDir
argument_list|(
literal|"outdex"
argument_list|,
name|Context
operator|.
name|MODE_PRIVATE
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
comment|// directory where optimized DEX files should be written.
name|loaderParams
operator|.
name|containsKey
argument_list|(
name|LIB_PATH_KEY
argument_list|)
condition|?
name|loaderParams
operator|.
name|getString
argument_list|(
name|LIB_PATH_KEY
argument_list|)
else|:
literal|null
argument_list|,
comment|// libs folder (if exists)
name|m_context
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
comment|// parent loader
name|Class
argument_list|<
name|?
argument_list|>
name|loaderClass
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|loaderParams
operator|.
name|getString
argument_list|(
name|LOADER_CLASS_NAME_KEY
argument_list|)
argument_list|)
decl_stmt|;
comment|// load QtLoader class
name|Object
name|qtLoader
init|=
name|loaderClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// create an instance
name|Method
name|prepareAppMethod
init|=
name|qtLoader
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"loadApplication"
argument_list|,
name|contextClassName
argument_list|()
argument_list|,
name|ClassLoader
operator|.
name|class
argument_list|,
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Boolean
operator|)
name|prepareAppMethod
operator|.
name|invoke
argument_list|(
name|qtLoader
argument_list|,
name|m_context
argument_list|,
name|classLoader
argument_list|,
name|loaderParams
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|""
argument_list|)
throw|;
name|QtApplication
operator|.
name|setQtContextDelegate
argument_list|(
name|m_context
operator|.
name|getClass
argument_list|()
argument_list|,
name|qtLoader
argument_list|)
expr_stmt|;
comment|// now load the application library so it's accessible from this class loader
if|if
condition|(
name|libName
operator|!=
literal|null
condition|)
name|System
operator|.
name|loadLibrary
argument_list|(
name|libName
argument_list|)
expr_stmt|;
name|Method
name|startAppMethod
init|=
name|qtLoader
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"startApplication"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Boolean
operator|)
name|startAppMethod
operator|.
name|invoke
argument_list|(
name|qtLoader
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|""
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|AlertDialog
name|errorDialog
init|=
operator|new
name|AlertDialog
operator|.
name|Builder
argument_list|(
name|m_context
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.fatal_error_msg"
argument_list|)
condition|)
name|errorDialog
operator|.
name|setMessage
argument_list|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.fatal_error_msg"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|errorDialog
operator|.
name|setMessage
argument_list|(
literal|"Fatal error, your application can't be started."
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|setButton
argument_list|(
name|m_context
operator|.
name|getResources
argument_list|()
operator|.
name|getString
argument_list|(
name|android
operator|.
name|R
operator|.
name|string
operator|.
name|ok
argument_list|)
argument_list|,
operator|new
name|DialogInterface
operator|.
name|OnClickListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|DialogInterface
name|dialog
parameter_list|,
name|int
name|which
parameter_list|)
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|m_ministroConnection
specifier|private
name|ServiceConnection
name|m_ministroConnection
init|=
operator|new
name|ServiceConnection
argument_list|()
block|{
specifier|private
name|IMinistro
name|m_service
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onServiceConnected
parameter_list|(
name|ComponentName
name|name
parameter_list|,
name|IBinder
name|service
parameter_list|)
block|{
name|m_service
operator|=
name|IMinistro
operator|.
name|Stub
operator|.
name|asInterface
argument_list|(
name|service
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|m_service
operator|!=
literal|null
condition|)
block|{
name|Bundle
name|parameters
init|=
operator|new
name|Bundle
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|putStringArray
argument_list|(
name|REQUIRED_MODULES_KEY
argument_list|,
name|m_qtLibs
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|putString
argument_list|(
name|APPLICATION_TITLE_KEY
argument_list|,
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|putInt
argument_list|(
name|MINIMUM_MINISTRO_API_KEY
argument_list|,
name|MINISTRO_API_LEVEL
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|putInt
argument_list|(
name|MINIMUM_QT_VERSION_KEY
argument_list|,
name|QT_VERSION
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|putString
argument_list|(
name|ENVIRONMENT_VARIABLES_KEY
argument_list|,
name|ENVIRONMENT_VARIABLES
argument_list|)
expr_stmt|;
if|if
condition|(
name|APPLICATION_PARAMETERS
operator|!=
literal|null
condition|)
name|parameters
operator|.
name|putString
argument_list|(
name|APPLICATION_PARAMETERS_KEY
argument_list|,
name|APPLICATION_PARAMETERS
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|putStringArray
argument_list|(
name|SOURCES_KEY
argument_list|,
name|m_sources
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|putString
argument_list|(
name|REPOSITORY_KEY
argument_list|,
name|m_repository
argument_list|)
expr_stmt|;
if|if
condition|(
name|QT_ANDROID_THEMES
operator|!=
literal|null
condition|)
name|parameters
operator|.
name|putStringArray
argument_list|(
name|ANDROID_THEMES_KEY
argument_list|,
name|QT_ANDROID_THEMES
argument_list|)
expr_stmt|;
name|m_service
operator|.
name|requestLoader
argument_list|(
name|m_ministroCallback
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|IMinistroCallback
name|m_ministroCallback
init|=
operator|new
name|IMinistroCallback
operator|.
name|Stub
argument_list|()
block|{
comment|// this function is called back by Ministro.
annotation|@
name|Override
specifier|public
name|void
name|loaderReady
parameter_list|(
specifier|final
name|Bundle
name|loaderParams
parameter_list|)
throws|throws
name|RemoteException
block|{
name|runOnUiThread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_context
operator|.
name|unbindService
argument_list|(
name|m_ministroConnection
argument_list|)
expr_stmt|;
name|loadApplication
argument_list|(
name|loaderParams
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onServiceDisconnected
parameter_list|(
name|ComponentName
name|name
parameter_list|)
block|{
name|m_service
operator|=
literal|null
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|method|ministroNotFound
specifier|protected
name|void
name|ministroNotFound
parameter_list|()
block|{
name|AlertDialog
name|errorDialog
init|=
operator|new
name|AlertDialog
operator|.
name|Builder
argument_list|(
name|m_context
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.ministro_not_found_msg"
argument_list|)
condition|)
name|errorDialog
operator|.
name|setMessage
argument_list|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.ministro_not_found_msg"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|errorDialog
operator|.
name|setMessage
argument_list|(
literal|"Can't find Ministro service.\nThe application can't start."
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|setButton
argument_list|(
name|m_context
operator|.
name|getResources
argument_list|()
operator|.
name|getString
argument_list|(
name|android
operator|.
name|R
operator|.
name|string
operator|.
name|ok
argument_list|)
argument_list|,
operator|new
name|DialogInterface
operator|.
name|OnClickListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|DialogInterface
name|dialog
parameter_list|,
name|int
name|which
parameter_list|)
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
DECL|method|copyFile
specifier|static
specifier|private
name|void
name|copyFile
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|int
name|count
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
name|outputStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|copyAsset
specifier|private
name|void
name|copyAsset
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Already exists, we don't have to do anything
name|File
name|destinationFile
init|=
operator|new
name|File
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|destinationFile
operator|.
name|exists
argument_list|()
condition|)
return|return;
name|File
name|parentDirectory
init|=
name|destinationFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parentDirectory
operator|.
name|exists
argument_list|()
condition|)
name|parentDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|destinationFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|AssetManager
name|assetsManager
init|=
name|m_context
operator|.
name|getAssets
argument_list|()
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|assetsManager
operator|.
name|open
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|destinationFile
argument_list|)
decl_stmt|;
name|copyFile
argument_list|(
name|inputStream
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createBundledBinary
specifier|private
specifier|static
name|void
name|createBundledBinary
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Already exists, we don't have to do anything
name|File
name|destinationFile
init|=
operator|new
name|File
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|destinationFile
operator|.
name|exists
argument_list|()
condition|)
return|return;
name|File
name|parentDirectory
init|=
name|destinationFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parentDirectory
operator|.
name|exists
argument_list|()
condition|)
name|parentDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|destinationFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|InputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|destinationFile
argument_list|)
decl_stmt|;
name|copyFile
argument_list|(
name|inputStream
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|cleanCacheIfNecessary
specifier|private
name|boolean
name|cleanCacheIfNecessary
parameter_list|(
name|String
name|pluginsPrefix
parameter_list|,
name|long
name|packageVersion
parameter_list|)
block|{
name|File
name|versionFile
init|=
operator|new
name|File
argument_list|(
name|pluginsPrefix
operator|+
literal|"cache.version"
argument_list|)
decl_stmt|;
name|long
name|cacheVersion
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|versionFile
operator|.
name|exists
argument_list|()
operator|&&
name|versionFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
try|try
block|{
name|DataInputStream
name|inputStream
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|versionFile
argument_list|)
argument_list|)
decl_stmt|;
name|cacheVersion
operator|=
name|inputStream
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cacheVersion
operator|!=
name|packageVersion
condition|)
block|{
name|deleteRecursively
argument_list|(
operator|new
name|File
argument_list|(
name|pluginsPrefix
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|extractBundledPluginsAndImports
specifier|private
name|void
name|extractBundledPluginsAndImports
parameter_list|(
name|String
name|pluginsPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|libs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|libsDir
init|=
name|m_context
operator|.
name|getApplicationInfo
argument_list|()
operator|.
name|nativeLibraryDir
operator|+
literal|"/"
decl_stmt|;
name|long
name|packageVersion
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|PackageInfo
name|packageInfo
init|=
name|m_context
operator|.
name|getPackageManager
argument_list|()
operator|.
name|getPackageInfo
argument_list|(
name|m_context
operator|.
name|getPackageName
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|packageVersion
operator|=
name|packageInfo
operator|.
name|lastUpdateTime
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cleanCacheIfNecessary
argument_list|(
name|pluginsPrefix
argument_list|,
name|packageVersion
argument_list|)
condition|)
return|return;
block|{
name|File
name|versionFile
init|=
operator|new
name|File
argument_list|(
name|pluginsPrefix
operator|+
literal|"cache.version"
argument_list|)
decl_stmt|;
name|File
name|parentDirectory
init|=
name|versionFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parentDirectory
operator|.
name|exists
argument_list|()
condition|)
name|parentDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|versionFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|DataOutputStream
name|outputStream
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|versionFile
argument_list|)
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|writeLong
argument_list|(
name|packageVersion
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
name|String
name|key
init|=
name|BUNDLED_IN_LIB_RESOURCE_ID_KEY
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|m_contextInfo
operator|.
name|metaData
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|String
index|[]
name|list
init|=
name|m_context
operator|.
name|getResources
argument_list|()
operator|.
name|getStringArray
argument_list|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getInt
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|bundledImportBinary
range|:
name|list
control|)
block|{
name|String
index|[]
name|split
init|=
name|bundledImportBinary
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|sourceFileName
init|=
name|libsDir
operator|+
name|split
index|[
literal|0
index|]
decl_stmt|;
name|String
name|destinationFileName
init|=
name|pluginsPrefix
operator|+
name|split
index|[
literal|1
index|]
decl_stmt|;
name|createBundledBinary
argument_list|(
name|sourceFileName
argument_list|,
name|destinationFileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|{
name|String
name|key
init|=
name|BUNDLED_IN_ASSETS_RESOURCE_ID_KEY
decl_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|String
index|[]
name|list
init|=
name|m_context
operator|.
name|getResources
argument_list|()
operator|.
name|getStringArray
argument_list|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getInt
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|list
control|)
block|{
name|String
index|[]
name|split
init|=
name|fileName
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|sourceFileName
init|=
name|split
index|[
literal|0
index|]
decl_stmt|;
name|String
name|destinationFileName
init|=
name|pluginsPrefix
operator|+
name|split
index|[
literal|1
index|]
decl_stmt|;
name|copyAsset
argument_list|(
name|sourceFileName
argument_list|,
name|destinationFileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|deleteRecursively
specifier|private
name|void
name|deleteRecursively
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
name|deleteRecursively
argument_list|(
name|file
argument_list|)
expr_stmt|;
else|else
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|directory
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|cleanOldCacheIfNecessary
specifier|private
name|void
name|cleanOldCacheIfNecessary
parameter_list|(
name|String
name|oldLocalPrefix
parameter_list|,
name|String
name|localPrefix
parameter_list|)
block|{
name|File
name|newCache
init|=
operator|new
name|File
argument_list|(
name|localPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newCache
operator|.
name|exists
argument_list|()
condition|)
block|{
block|{
name|File
name|oldPluginsCache
init|=
operator|new
name|File
argument_list|(
name|oldLocalPrefix
operator|+
literal|"plugins/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldPluginsCache
operator|.
name|exists
argument_list|()
operator|&&
name|oldPluginsCache
operator|.
name|isDirectory
argument_list|()
condition|)
name|deleteRecursively
argument_list|(
name|oldPluginsCache
argument_list|)
expr_stmt|;
block|}
block|{
name|File
name|oldImportsCache
init|=
operator|new
name|File
argument_list|(
name|oldLocalPrefix
operator|+
literal|"imports/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldImportsCache
operator|.
name|exists
argument_list|()
operator|&&
name|oldImportsCache
operator|.
name|isDirectory
argument_list|()
condition|)
name|deleteRecursively
argument_list|(
name|oldImportsCache
argument_list|)
expr_stmt|;
block|}
block|{
name|File
name|oldQmlCache
init|=
operator|new
name|File
argument_list|(
name|oldLocalPrefix
operator|+
literal|"qml/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldQmlCache
operator|.
name|exists
argument_list|()
operator|&&
name|oldQmlCache
operator|.
name|isDirectory
argument_list|()
condition|)
name|deleteRecursively
argument_list|(
name|oldQmlCache
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|startApp
specifier|public
name|void
name|startApp
parameter_list|(
specifier|final
name|boolean
name|firstStart
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.qt_sources_resource_id"
argument_list|)
condition|)
block|{
name|int
name|resourceId
init|=
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getInt
argument_list|(
literal|"android.app.qt_sources_resource_id"
argument_list|)
decl_stmt|;
name|m_sources
operator|=
name|m_context
operator|.
name|getResources
argument_list|()
operator|.
name|getStringArray
argument_list|(
name|resourceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.repository"
argument_list|)
condition|)
name|m_repository
operator|=
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.repository"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.qt_libs_resource_id"
argument_list|)
condition|)
block|{
name|int
name|resourceId
init|=
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getInt
argument_list|(
literal|"android.app.qt_libs_resource_id"
argument_list|)
decl_stmt|;
name|m_qtLibs
operator|=
name|m_context
operator|.
name|getResources
argument_list|()
operator|.
name|getStringArray
argument_list|(
name|resourceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.use_local_qt_libs"
argument_list|)
operator|&&
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getInt
argument_list|(
literal|"android.app.use_local_qt_libs"
argument_list|)
operator|==
literal|1
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|libraryList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|localPrefix
init|=
literal|"/data/local/tmp/qt/"
decl_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.libs_prefix"
argument_list|)
condition|)
name|localPrefix
operator|=
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.libs_prefix"
argument_list|)
expr_stmt|;
name|String
name|pluginsPrefix
init|=
name|localPrefix
decl_stmt|;
name|boolean
name|bundlingQtLibs
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.bundle_local_qt_libs"
argument_list|)
operator|&&
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getInt
argument_list|(
literal|"android.app.bundle_local_qt_libs"
argument_list|)
operator|==
literal|1
condition|)
block|{
name|localPrefix
operator|=
name|m_context
operator|.
name|getApplicationInfo
argument_list|()
operator|.
name|dataDir
operator|+
literal|"/"
expr_stmt|;
name|pluginsPrefix
operator|=
name|localPrefix
operator|+
literal|"qt-reserved-files/"
expr_stmt|;
name|cleanOldCacheIfNecessary
argument_list|(
name|localPrefix
argument_list|,
name|pluginsPrefix
argument_list|)
expr_stmt|;
name|extractBundledPluginsAndImports
argument_list|(
name|pluginsPrefix
argument_list|)
expr_stmt|;
name|bundlingQtLibs
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|m_qtLibs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_qtLibs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|libraryList
operator|.
name|add
argument_list|(
name|localPrefix
operator|+
literal|"lib/lib"
operator|+
name|m_qtLibs
index|[
name|i
index|]
operator|+
literal|".so"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.load_local_libs"
argument_list|)
condition|)
block|{
name|String
index|[]
name|extraLibs
init|=
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.load_local_libs"
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|lib
range|:
name|extraLibs
control|)
block|{
if|if
condition|(
name|lib
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|lib
operator|.
name|startsWith
argument_list|(
literal|"lib/"
argument_list|)
condition|)
name|libraryList
operator|.
name|add
argument_list|(
name|localPrefix
operator|+
name|lib
argument_list|)
expr_stmt|;
else|else
name|libraryList
operator|.
name|add
argument_list|(
name|pluginsPrefix
operator|+
name|lib
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|dexPaths
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
name|String
name|pathSeparator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bundlingQtLibs
operator|&&
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.load_local_jars"
argument_list|)
condition|)
block|{
name|String
index|[]
name|jarFiles
init|=
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.load_local_jars"
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|jar
range|:
name|jarFiles
control|)
block|{
if|if
condition|(
name|jar
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|dexPaths
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|dexPaths
operator|+=
name|pathSeparator
expr_stmt|;
name|dexPaths
operator|+=
name|localPrefix
operator|+
name|jar
expr_stmt|;
block|}
block|}
block|}
name|Bundle
name|loaderParams
init|=
operator|new
name|Bundle
argument_list|()
decl_stmt|;
name|loaderParams
operator|.
name|putInt
argument_list|(
name|ERROR_CODE_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|loaderParams
operator|.
name|putString
argument_list|(
name|DEX_PATH_KEY
argument_list|,
name|dexPaths
argument_list|)
expr_stmt|;
name|loaderParams
operator|.
name|putString
argument_list|(
name|LOADER_CLASS_NAME_KEY
argument_list|,
name|loaderClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.static_init_classes"
argument_list|)
condition|)
block|{
name|loaderParams
operator|.
name|putStringArray
argument_list|(
name|STATIC_INIT_CLASSES_KEY
argument_list|,
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.static_init_classes"
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|loaderParams
operator|.
name|putStringArrayList
argument_list|(
name|NATIVE_LIBRARIES_KEY
argument_list|,
name|libraryList
argument_list|)
expr_stmt|;
name|String
name|themePath
init|=
name|m_context
operator|.
name|getApplicationInfo
argument_list|()
operator|.
name|dataDir
operator|+
literal|"/qt-reserved-files/android-style/"
decl_stmt|;
name|String
name|stylePath
init|=
name|themePath
operator|+
name|m_displayDensity
operator|+
literal|"/"
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|stylePath
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
name|loaderParams
operator|.
name|putString
argument_list|(
name|EXTRACT_STYLE_KEY
argument_list|,
name|stylePath
argument_list|)
expr_stmt|;
name|ENVIRONMENT_VARIABLES
operator|+=
literal|"\tMINISTRO_ANDROID_STYLE_PATH="
operator|+
name|stylePath
operator|+
literal|"\tQT_ANDROID_THEMES_ROOT_PATH="
operator|+
name|themePath
expr_stmt|;
name|loaderParams
operator|.
name|putString
argument_list|(
name|ENVIRONMENT_VARIABLES_KEY
argument_list|,
name|ENVIRONMENT_VARIABLES
operator|+
literal|"\tQML2_IMPORT_PATH="
operator|+
name|pluginsPrefix
operator|+
literal|"/qml"
operator|+
literal|"\tQML_IMPORT_PATH="
operator|+
name|pluginsPrefix
operator|+
literal|"/imports"
operator|+
literal|"\tQT_PLUGIN_PATH="
operator|+
name|pluginsPrefix
operator|+
literal|"/plugins"
argument_list|)
expr_stmt|;
name|String
name|appParams
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|APPLICATION_PARAMETERS
operator|!=
literal|null
condition|)
name|appParams
operator|=
name|APPLICATION_PARAMETERS
expr_stmt|;
name|Intent
name|intent
init|=
name|getIntent
argument_list|()
decl_stmt|;
if|if
condition|(
name|intent
operator|!=
literal|null
condition|)
block|{
name|String
name|parameters
init|=
name|intent
operator|.
name|getStringExtra
argument_list|(
literal|"applicationArguments"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
if|if
condition|(
name|appParams
operator|==
literal|null
condition|)
name|appParams
operator|=
name|parameters
expr_stmt|;
else|else
name|appParams
operator|+=
literal|'\t'
operator|+
name|parameters
expr_stmt|;
block|}
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.arguments"
argument_list|)
condition|)
block|{
name|String
name|parameters
init|=
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.arguments"
argument_list|)
decl_stmt|;
if|if
condition|(
name|appParams
operator|==
literal|null
condition|)
name|appParams
operator|=
name|parameters
expr_stmt|;
else|else
name|appParams
operator|+=
literal|'\t'
operator|+
name|parameters
expr_stmt|;
block|}
if|if
condition|(
name|appParams
operator|!=
literal|null
condition|)
name|loaderParams
operator|.
name|putString
argument_list|(
name|APPLICATION_PARAMETERS_KEY
argument_list|,
name|appParams
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'\t'
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|loadApplication
argument_list|(
name|loaderParams
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|m_context
operator|.
name|bindService
argument_list|(
operator|new
name|Intent
argument_list|(
name|org
operator|.
name|kde
operator|.
name|necessitas
operator|.
name|ministro
operator|.
name|IMinistro
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|,
name|m_ministroConnection
argument_list|,
name|Context
operator|.
name|BIND_AUTO_CREATE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|firstStart
condition|)
block|{
name|String
name|msg
init|=
literal|"This application requires Ministro service. Would you like to install it?"
decl_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.ministro_needed_msg"
argument_list|)
condition|)
name|msg
operator|=
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.ministro_needed_msg"
argument_list|)
expr_stmt|;
name|downloadUpgradeMinistro
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ministroNotFound
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtApplication
operator|.
name|QtTAG
argument_list|,
literal|"Can't create main activity"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
