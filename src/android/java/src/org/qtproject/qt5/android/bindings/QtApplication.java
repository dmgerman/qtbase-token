begin_unit
begin_comment
comment|/*     Copyright (c) 2012-2013, BogDan Vatra<bogdan@kde.org>     Contact: http://www.qt-project.org/legal      Redistribution and use in source and binary forms, with or without     modification, are permitted provided that the following conditions     are met:      1. Redistributions of source code must retain the above copyright     notice, this list of conditions and the following disclaimer.     2. Redistributions in binary form must reproduce the above copyright     notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.      THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.     IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,     INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT     NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF     THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
end_comment
begin_package
DECL|package|org.qtproject.qt5.android.bindings
package|package
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
operator|.
name|bindings
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|Application
import|;
end_import
begin_class
DECL|class|QtApplication
specifier|public
class|class
name|QtApplication
extends|extends
name|Application
block|{
DECL|field|QtTAG
specifier|public
specifier|final
specifier|static
name|String
name|QtTAG
init|=
literal|"Qt"
decl_stmt|;
DECL|field|m_delegateObject
specifier|public
specifier|static
name|Object
name|m_delegateObject
init|=
literal|null
decl_stmt|;
DECL|field|m_delegateMethods
specifier|public
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|>
name|m_delegateMethods
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|dispatchKeyEvent
specifier|public
specifier|static
name|Method
name|dispatchKeyEvent
init|=
literal|null
decl_stmt|;
DECL|field|dispatchPopulateAccessibilityEvent
specifier|public
specifier|static
name|Method
name|dispatchPopulateAccessibilityEvent
init|=
literal|null
decl_stmt|;
DECL|field|dispatchTouchEvent
specifier|public
specifier|static
name|Method
name|dispatchTouchEvent
init|=
literal|null
decl_stmt|;
DECL|field|dispatchTrackballEvent
specifier|public
specifier|static
name|Method
name|dispatchTrackballEvent
init|=
literal|null
decl_stmt|;
DECL|field|onKeyDown
specifier|public
specifier|static
name|Method
name|onKeyDown
init|=
literal|null
decl_stmt|;
DECL|field|onKeyMultiple
specifier|public
specifier|static
name|Method
name|onKeyMultiple
init|=
literal|null
decl_stmt|;
DECL|field|onKeyUp
specifier|public
specifier|static
name|Method
name|onKeyUp
init|=
literal|null
decl_stmt|;
DECL|field|onTouchEvent
specifier|public
specifier|static
name|Method
name|onTouchEvent
init|=
literal|null
decl_stmt|;
DECL|field|onTrackballEvent
specifier|public
specifier|static
name|Method
name|onTrackballEvent
init|=
literal|null
decl_stmt|;
DECL|field|onActivityResult
specifier|public
specifier|static
name|Method
name|onActivityResult
init|=
literal|null
decl_stmt|;
DECL|field|onCreate
specifier|public
specifier|static
name|Method
name|onCreate
init|=
literal|null
decl_stmt|;
DECL|field|onKeyLongPress
specifier|public
specifier|static
name|Method
name|onKeyLongPress
init|=
literal|null
decl_stmt|;
DECL|field|dispatchKeyShortcutEvent
specifier|public
specifier|static
name|Method
name|dispatchKeyShortcutEvent
init|=
literal|null
decl_stmt|;
DECL|field|onKeyShortcut
specifier|public
specifier|static
name|Method
name|onKeyShortcut
init|=
literal|null
decl_stmt|;
DECL|field|dispatchGenericMotionEvent
specifier|public
specifier|static
name|Method
name|dispatchGenericMotionEvent
init|=
literal|null
decl_stmt|;
DECL|field|onGenericMotionEvent
specifier|public
specifier|static
name|Method
name|onGenericMotionEvent
init|=
literal|null
decl_stmt|;
DECL|method|setQtActivityDelegate
specifier|public
specifier|static
name|void
name|setQtActivityDelegate
parameter_list|(
name|Object
name|listener
parameter_list|)
block|{
name|QtApplication
operator|.
name|m_delegateObject
operator|=
name|listener
expr_stmt|;
name|ArrayList
argument_list|<
name|Method
argument_list|>
name|delegateMethods
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|listener
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.qtproject.qt5.android"
argument_list|)
condition|)
name|delegateMethods
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Field
argument_list|>
name|applicationFields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|QtApplication
operator|.
name|class
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|QtApplication
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|applicationFields
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Method
name|delegateMethod
range|:
name|delegateMethods
control|)
block|{
try|try
block|{
name|QtActivity
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
name|delegateMethod
operator|.
name|getName
argument_list|()
argument_list|,
name|delegateMethod
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateMethods
operator|.
name|containsKey
argument_list|(
name|delegateMethod
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|QtApplication
operator|.
name|m_delegateMethods
operator|.
name|get
argument_list|(
name|delegateMethod
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|delegateMethod
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ArrayList
argument_list|<
name|Method
argument_list|>
name|delegateSet
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
name|delegateSet
operator|.
name|add
argument_list|(
name|delegateMethod
argument_list|)
expr_stmt|;
name|QtApplication
operator|.
name|m_delegateMethods
operator|.
name|put
argument_list|(
name|delegateMethod
operator|.
name|getName
argument_list|()
argument_list|,
name|delegateSet
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Field
name|applicationField
range|:
name|applicationFields
control|)
block|{
if|if
condition|(
name|applicationField
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|delegateMethod
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|applicationField
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|delegateMethod
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
block|}
annotation|@
name|Override
DECL|method|onTerminate
specifier|public
name|void
name|onTerminate
parameter_list|()
block|{
if|if
condition|(
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|m_delegateMethods
operator|.
name|containsKey
argument_list|(
literal|"onTerminate"
argument_list|)
condition|)
name|invokeDelegateMethod
argument_list|(
name|m_delegateMethods
operator|.
name|get
argument_list|(
literal|"onTerminate"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|onTerminate
argument_list|()
expr_stmt|;
block|}
DECL|class|InvokeResult
specifier|public
specifier|static
class|class
name|InvokeResult
block|{
DECL|field|invoked
specifier|public
name|boolean
name|invoked
init|=
literal|false
decl_stmt|;
DECL|field|methodReturns
specifier|public
name|Object
name|methodReturns
init|=
literal|null
decl_stmt|;
block|}
DECL|field|stackDeep
specifier|private
specifier|static
name|int
name|stackDeep
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|invokeDelegate
specifier|public
specifier|static
name|InvokeResult
name|invokeDelegate
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|InvokeResult
name|result
init|=
operator|new
name|InvokeResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_delegateObject
operator|==
literal|null
condition|)
return|return
name|result
return|;
name|StackTraceElement
index|[]
name|elements
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|stackDeep
condition|)
block|{
name|String
name|activityClassName
init|=
name|QtActivity
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|it
init|=
literal|0
init|;
name|it
operator|<
name|elements
operator|.
name|length
condition|;
name|it
operator|++
control|)
if|if
condition|(
name|elements
index|[
name|it
index|]
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|activityClassName
argument_list|)
condition|)
block|{
name|stackDeep
operator|=
name|it
expr_stmt|;
break|break;
block|}
block|}
specifier|final
name|String
name|methodName
init|=
name|elements
index|[
name|stackDeep
index|]
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|stackDeep
operator|||
operator|!
name|m_delegateMethods
operator|.
name|containsKey
argument_list|(
name|methodName
argument_list|)
condition|)
return|return
name|result
return|;
for|for
control|(
name|Method
name|m
range|:
name|m_delegateMethods
operator|.
name|get
argument_list|(
name|methodName
argument_list|)
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
name|args
operator|.
name|length
condition|)
block|{
name|result
operator|.
name|methodReturns
operator|=
name|invokeDelegateMethod
argument_list|(
name|m
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|result
operator|.
name|invoked
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|invokeDelegateMethod
specifier|public
specifier|static
name|Object
name|invokeDelegateMethod
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
try|try
block|{
return|return
name|m
operator|.
name|invoke
argument_list|(
name|m_delegateObject
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
