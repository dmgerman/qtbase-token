begin_unit
begin_comment
comment|/*     Copyright (c) 2016, BogDan Vatra<bogdan@kde.org>     Contact: http://www.qt-project.org/legal      Commercial License Usage     Licensees holding valid commercial Qt licenses may use this file in     accordance with the commercial license agreement provided with the     Software or, alternatively, in accordance with the terms contained in     a written agreement between you and Digia.  For licensing terms and     conditions see http://qt.digia.com/licensing.  For further information     use the contact form at http://qt.digia.com/contact-us.      BSD License Usage     Alternatively, this file may be used under the BSD license as follows:     Redistribution and use in source and binary forms, with or without     modification, are permitted provided that the following conditions     are met:      1. Redistributions of source code must retain the above copyright     notice, this list of conditions and the following disclaimer.     2. Redistributions in binary form must reproduce the above copyright     notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.      THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.     IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,     INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT     NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY     THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF     THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
end_comment
begin_package
DECL|package|org.qtproject.qt5.android.bindings
package|package
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
operator|.
name|bindings
package|;
end_package
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|AlertDialog
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|DialogInterface
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Intent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|pm
operator|.
name|ActivityInfo
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|pm
operator|.
name|PackageManager
import|;
end_import
begin_import
import|import
name|android
operator|.
name|graphics
operator|.
name|drawable
operator|.
name|ColorDrawable
import|;
end_import
begin_import
import|import
name|android
operator|.
name|net
operator|.
name|Uri
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|Build
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|Bundle
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|Window
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import
begin_class
DECL|class|QtActivityLoader
specifier|public
class|class
name|QtActivityLoader
extends|extends
name|QtLoader
block|{
DECL|field|m_activity
name|QtActivity
name|m_activity
decl_stmt|;
DECL|method|QtActivityLoader
name|QtActivityLoader
parameter_list|(
name|QtActivity
name|activity
parameter_list|)
block|{
name|super
argument_list|(
name|activity
argument_list|)
expr_stmt|;
name|m_activity
operator|=
name|activity
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|downloadUpgradeMinistro
specifier|protected
name|void
name|downloadUpgradeMinistro
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|AlertDialog
operator|.
name|Builder
name|downloadDialog
init|=
operator|new
name|AlertDialog
operator|.
name|Builder
argument_list|(
name|m_activity
argument_list|)
decl_stmt|;
name|downloadDialog
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|downloadDialog
operator|.
name|setPositiveButton
argument_list|(
name|android
operator|.
name|R
operator|.
name|string
operator|.
name|yes
argument_list|,
operator|new
name|DialogInterface
operator|.
name|OnClickListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|DialogInterface
name|dialogInterface
parameter_list|,
name|int
name|i
parameter_list|)
block|{
try|try
block|{
name|Uri
name|uri
init|=
name|Uri
operator|.
name|parse
argument_list|(
literal|"market://search?q=pname:org.kde.necessitas.ministro"
argument_list|)
decl_stmt|;
name|Intent
name|intent
init|=
operator|new
name|Intent
argument_list|(
name|Intent
operator|.
name|ACTION_VIEW
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|m_activity
operator|.
name|startActivityForResult
argument_list|(
name|intent
argument_list|,
name|MINISTRO_INSTALL_REQUEST_CODE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|ministroNotFound
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|downloadDialog
operator|.
name|setNegativeButton
argument_list|(
name|android
operator|.
name|R
operator|.
name|string
operator|.
name|no
argument_list|,
operator|new
name|DialogInterface
operator|.
name|OnClickListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|DialogInterface
name|dialogInterface
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|m_activity
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|downloadDialog
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loaderClassName
specifier|protected
name|String
name|loaderClassName
parameter_list|()
block|{
return|return
literal|"org.qtproject.qt5.android.QtActivityDelegate"
return|;
block|}
annotation|@
name|Override
DECL|method|contextClassName
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|contextClassName
parameter_list|()
block|{
return|return
name|android
operator|.
name|app
operator|.
name|Activity
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|protected
name|void
name|finish
parameter_list|()
block|{
name|m_activity
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTitle
specifier|protected
name|String
name|getTitle
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|m_activity
operator|.
name|getTitle
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|runOnUiThread
specifier|protected
name|void
name|runOnUiThread
parameter_list|(
name|Runnable
name|run
parameter_list|)
block|{
name|m_activity
operator|.
name|runOnUiThread
argument_list|(
name|run
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getIntent
name|Intent
name|getIntent
parameter_list|()
block|{
return|return
name|m_activity
operator|.
name|getIntent
argument_list|()
return|;
block|}
DECL|method|onCreate
specifier|public
name|void
name|onCreate
parameter_list|(
name|Bundle
name|savedInstanceState
parameter_list|)
block|{
try|try
block|{
name|m_contextInfo
operator|=
name|m_activity
operator|.
name|getPackageManager
argument_list|()
operator|.
name|getActivityInfo
argument_list|(
name|m_activity
operator|.
name|getComponentName
argument_list|()
argument_list|,
name|PackageManager
operator|.
name|GET_META_DATA
argument_list|)
expr_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|Class
operator|.
name|forName
argument_list|(
literal|"android.R$style"
argument_list|)
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
operator|==
operator|(
operator|(
name|ActivityInfo
operator|)
name|m_contextInfo
operator|)
operator|.
name|getThemeResource
argument_list|()
condition|)
block|{
name|QT_ANDROID_THEMES
operator|=
operator|new
name|String
index|[]
block|{
name|f
operator|.
name|getName
argument_list|()
block|}
expr_stmt|;
name|QT_ANDROID_DEFAULT_THEME
operator|=
name|f
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|finish
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|<
literal|16
condition|)
block|{
comment|// fatal error, show the error and quit
name|AlertDialog
name|errorDialog
init|=
operator|new
name|AlertDialog
operator|.
name|Builder
argument_list|(
name|m_activity
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.unsupported_android_version"
argument_list|)
condition|)
name|errorDialog
operator|.
name|setMessage
argument_list|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getString
argument_list|(
literal|"android.app.unsupported_android_version"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|errorDialog
operator|.
name|setMessage
argument_list|(
literal|"Unsupported Android version."
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|setButton
argument_list|(
name|m_activity
operator|.
name|getResources
argument_list|()
operator|.
name|getString
argument_list|(
name|android
operator|.
name|R
operator|.
name|string
operator|.
name|ok
argument_list|)
argument_list|,
operator|new
name|DialogInterface
operator|.
name|OnClickListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|DialogInterface
name|dialog
parameter_list|,
name|int
name|which
parameter_list|)
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|errorDialog
operator|.
name|show
argument_list|()
expr_stmt|;
return|return;
block|}
try|try
block|{
name|m_activity
operator|.
name|setTheme
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
literal|"android.R$style"
argument_list|)
operator|.
name|getDeclaredField
argument_list|(
name|QT_ANDROID_DEFAULT_THEME
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|m_activity
operator|.
name|requestWindowFeature
argument_list|(
name|Window
operator|.
name|FEATURE_ACTION_BAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|QtApplication
operator|.
name|m_delegateObject
operator|!=
literal|null
operator|&&
name|QtApplication
operator|.
name|onCreate
operator|!=
literal|null
condition|)
block|{
name|QtApplication
operator|.
name|invokeDelegateMethod
argument_list|(
name|QtApplication
operator|.
name|onCreate
argument_list|,
name|savedInstanceState
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_displayDensity
operator|=
name|m_activity
operator|.
name|getResources
argument_list|()
operator|.
name|getDisplayMetrics
argument_list|()
operator|.
name|densityDpi
expr_stmt|;
name|ENVIRONMENT_VARIABLES
operator|+=
literal|"\tQT_ANDROID_THEME="
operator|+
name|QT_ANDROID_DEFAULT_THEME
operator|+
literal|"/\tQT_ANDROID_THEME_DISPLAY_DPI="
operator|+
name|m_displayDensity
operator|+
literal|"\t"
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|m_activity
operator|.
name|getLastNonConfigurationInstance
argument_list|()
condition|)
block|{
comment|// if splash screen is defined, then show it
comment|// Note: QtActivityDelegate handles updating the splash screen
comment|// in onConfigurationChanged, change that too if you are changing
comment|// how the splash screen should be displayed
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.splash_screen_drawable"
argument_list|)
condition|)
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|setBackgroundDrawableResource
argument_list|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getInt
argument_list|(
literal|"android.app.splash_screen_drawable"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|setBackgroundDrawable
argument_list|(
operator|new
name|ColorDrawable
argument_list|(
literal|0xff000000
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.background_running"
argument_list|)
operator|&&
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getBoolean
argument_list|(
literal|"android.app.background_running"
argument_list|)
condition|)
block|{
name|ENVIRONMENT_VARIABLES
operator|+=
literal|"QT_BLOCK_EVENT_LOOPS_WHEN_SUSPENDED=0\t"
expr_stmt|;
block|}
else|else
block|{
name|ENVIRONMENT_VARIABLES
operator|+=
literal|"QT_BLOCK_EVENT_LOOPS_WHEN_SUSPENDED=1\t"
expr_stmt|;
block|}
if|if
condition|(
name|m_contextInfo
operator|.
name|metaData
operator|.
name|containsKey
argument_list|(
literal|"android.app.auto_screen_scale_factor"
argument_list|)
operator|&&
name|m_contextInfo
operator|.
name|metaData
operator|.
name|getBoolean
argument_list|(
literal|"android.app.auto_screen_scale_factor"
argument_list|)
condition|)
block|{
name|ENVIRONMENT_VARIABLES
operator|+=
literal|"QT_AUTO_SCREEN_SCALE_FACTOR=1\t"
expr_stmt|;
block|}
name|startApp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
