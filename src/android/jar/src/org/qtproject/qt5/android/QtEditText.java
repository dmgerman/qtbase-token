begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the Android port of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_package
DECL|package|org.qtproject.qt5.android
package|package
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
package|;
end_package
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|android
operator|.
name|text
operator|.
name|InputType
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|View
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|EditorInfo
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|InputConnection
import|;
end_import
begin_class
DECL|class|QtEditText
specifier|public
class|class
name|QtEditText
extends|extends
name|View
block|{
DECL|field|m_inputConnection
name|QtInputConnection
name|m_inputConnection
decl_stmt|;
DECL|field|m_initialCapsMode
name|int
name|m_initialCapsMode
init|=
literal|0
decl_stmt|;
DECL|field|m_imeOptions
name|int
name|m_imeOptions
init|=
literal|0
decl_stmt|;
DECL|field|m_inputType
name|int
name|m_inputType
init|=
name|InputType
operator|.
name|TYPE_CLASS_TEXT
decl_stmt|;
DECL|method|setImeOptions
specifier|public
name|void
name|setImeOptions
parameter_list|(
name|int
name|m_imeOptions
parameter_list|)
block|{
name|this
operator|.
name|m_imeOptions
operator|=
name|m_imeOptions
expr_stmt|;
block|}
DECL|method|setInitialCapsMode
specifier|public
name|void
name|setInitialCapsMode
parameter_list|(
name|int
name|m_initialCapsMode
parameter_list|)
block|{
name|this
operator|.
name|m_initialCapsMode
operator|=
name|m_initialCapsMode
expr_stmt|;
block|}
DECL|method|setInputType
specifier|public
name|void
name|setInputType
parameter_list|(
name|int
name|m_inputType
parameter_list|)
block|{
name|this
operator|.
name|m_inputType
operator|=
name|m_inputType
expr_stmt|;
block|}
DECL|method|QtEditText
specifier|public
name|QtEditText
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|setFocusable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setFocusableInTouchMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m_inputConnection
operator|=
operator|new
name|QtInputConnection
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCreateInputConnection
specifier|public
name|InputConnection
name|onCreateInputConnection
parameter_list|(
name|EditorInfo
name|outAttrs
parameter_list|)
block|{
name|outAttrs
operator|.
name|inputType
operator|=
name|m_inputType
expr_stmt|;
name|outAttrs
operator|.
name|imeOptions
operator|=
name|m_imeOptions
expr_stmt|;
name|outAttrs
operator|.
name|initialCapsMode
operator|=
name|m_initialCapsMode
expr_stmt|;
name|outAttrs
operator|.
name|imeOptions
operator||=
name|EditorInfo
operator|.
name|IME_FLAG_NO_EXTRACT_UI
expr_stmt|;
return|return
name|m_inputConnection
return|;
block|}
comment|// // DEBUG CODE
comment|//    @Override
comment|//    protected void onDraw(Canvas canvas) {
comment|//        canvas.drawARGB(127, 255, 0, 255);
comment|//        super.onDraw(canvas);
comment|//    }
block|}
end_class
end_unit
