begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the Android port of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_package
DECL|package|org.qtproject.qt5.android
package|package
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
package|;
end_package
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|Activity
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|android
operator|.
name|graphics
operator|.
name|Bitmap
import|;
end_import
begin_import
import|import
name|android
operator|.
name|graphics
operator|.
name|Canvas
import|;
end_import
begin_import
import|import
name|android
operator|.
name|graphics
operator|.
name|Rect
import|;
end_import
begin_import
import|import
name|android
operator|.
name|graphics
operator|.
name|PixelFormat
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|DisplayMetrics
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|GestureDetector
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|MotionEvent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|SurfaceHolder
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|SurfaceView
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_class
DECL|class|QtSurface
specifier|public
class|class
name|QtSurface
extends|extends
name|SurfaceView
implements|implements
name|SurfaceHolder
operator|.
name|Callback
block|{
DECL|field|m_bitmap
specifier|private
name|Bitmap
name|m_bitmap
init|=
literal|null
decl_stmt|;
DECL|field|m_started
specifier|private
name|boolean
name|m_started
init|=
literal|false
decl_stmt|;
DECL|field|m_usesGL
specifier|private
name|boolean
name|m_usesGL
init|=
literal|false
decl_stmt|;
DECL|field|m_gestureDetector
specifier|private
name|GestureDetector
name|m_gestureDetector
decl_stmt|;
DECL|field|m_accessibilityDelegate
specifier|private
name|Object
name|m_accessibilityDelegate
init|=
literal|null
decl_stmt|;
DECL|method|QtSurface
specifier|public
name|QtSurface
parameter_list|(
name|Context
name|context
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|setFocusable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setFocusableInTouchMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getHolder
argument_list|()
operator|.
name|addCallback
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|getHolder
argument_list|()
operator|.
name|setType
argument_list|(
name|SurfaceHolder
operator|.
name|SURFACE_TYPE_GPU
argument_list|)
expr_stmt|;
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|m_gestureDetector
operator|=
operator|new
name|GestureDetector
argument_list|(
name|context
argument_list|,
operator|new
name|GestureDetector
operator|.
name|SimpleOnGestureListener
argument_list|()
block|{
specifier|public
name|void
name|onLongPress
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_started
condition|)
return|return;
name|QtNative
operator|.
name|longPress
argument_list|(
name|getId
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|m_gestureDetector
operator|.
name|setIsLongpressEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|applicationStarted
specifier|public
name|void
name|applicationStarted
parameter_list|(
name|boolean
name|usesGL
parameter_list|)
block|{
name|m_started
operator|=
literal|true
expr_stmt|;
name|m_usesGL
operator|=
name|usesGL
expr_stmt|;
if|if
condition|(
name|getWidth
argument_list|()
operator|<
literal|1
operator|||
name|getHeight
argument_list|()
operator|<
literal|1
condition|)
return|return;
if|if
condition|(
name|m_usesGL
condition|)
block|{
name|QtNative
operator|.
name|setSurface
argument_list|(
name|getHolder
argument_list|()
operator|.
name|getSurface
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QtNative
operator|.
name|lockSurface
argument_list|()
expr_stmt|;
name|QtNative
operator|.
name|setSurface
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|m_bitmap
operator|=
name|Bitmap
operator|.
name|createBitmap
argument_list|(
name|getWidth
argument_list|()
argument_list|,
name|getHeight
argument_list|()
argument_list|,
name|Bitmap
operator|.
name|Config
operator|.
name|RGB_565
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|setSurface
argument_list|(
name|m_bitmap
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|unlockSurface
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|surfaceCreated
specifier|public
name|void
name|surfaceCreated
parameter_list|(
name|SurfaceHolder
name|holder
parameter_list|)
block|{
name|DisplayMetrics
name|metrics
init|=
operator|new
name|DisplayMetrics
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Activity
operator|)
name|getContext
argument_list|()
operator|)
operator|.
name|getWindowManager
argument_list|()
operator|.
name|getDefaultDisplay
argument_list|()
operator|.
name|getMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|setApplicationDisplayMetrics
argument_list|(
name|metrics
operator|.
name|widthPixels
argument_list|,
name|metrics
operator|.
name|heightPixels
argument_list|,
name|getWidth
argument_list|()
argument_list|,
name|getHeight
argument_list|()
argument_list|,
name|metrics
operator|.
name|xdpi
argument_list|,
name|metrics
operator|.
name|ydpi
argument_list|,
name|metrics
operator|.
name|scaledDensity
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_usesGL
condition|)
name|holder
operator|.
name|setFormat
argument_list|(
name|PixelFormat
operator|.
name|RGBA_8888
argument_list|)
expr_stmt|;
comment|// Initialize Accessibility
comment|// The accessibility code depends on android API level 16, so dynamically resolve it
if|if
condition|(
name|android
operator|.
name|os
operator|.
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>=
literal|16
condition|)
block|{
try|try
block|{
specifier|final
name|String
name|a11yDelegateClassName
init|=
literal|"org.qtproject.qt5.android.accessibility.QtAccessibilityDelegate"
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|qtDelegateClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|a11yDelegateClassName
argument_list|)
decl_stmt|;
name|Constructor
name|constructor
init|=
name|qtDelegateClass
operator|.
name|getConstructor
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
literal|"android.view.View"
argument_list|)
argument_list|)
decl_stmt|;
name|m_accessibilityDelegate
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Class
name|a11yDelegateClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"android.view.View$AccessibilityDelegate"
argument_list|)
decl_stmt|;
name|Method
name|setDelegateMethod
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setAccessibilityDelegate"
argument_list|,
name|a11yDelegateClass
argument_list|)
decl_stmt|;
name|setDelegateMethod
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|m_accessibilityDelegate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// Class not found is fine since we are compatible with Android API< 16, but the function will
comment|// only be available with that API level.
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Unknown exception means something went wrong.
name|Log
operator|.
name|w
argument_list|(
literal|"Qt A11y"
argument_list|,
literal|"Unknown exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|dispatchHoverEvent
specifier|public
name|boolean
name|dispatchHoverEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
comment|// Always attempt to dispatch hover events to accessibility first.
if|if
condition|(
name|m_accessibilityDelegate
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Method
name|dispHoverA11y
init|=
name|m_accessibilityDelegate
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"dispatchHoverEvent"
argument_list|,
name|MotionEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|ret
init|=
operator|(
name|Boolean
operator|)
name|dispHoverA11y
operator|.
name|invoke
argument_list|(
name|m_accessibilityDelegate
argument_list|,
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
return|return
literal|true
return|;
name|SurfaceView
name|view
init|=
operator|(
name|SurfaceView
operator|)
name|this
decl_stmt|;
name|Method
name|dispHoverView
init|=
name|view
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"dispatchHoverEvent"
argument_list|,
name|MotionEvent
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|dispHoverView
operator|.
name|invoke
argument_list|(
name|view
argument_list|,
name|event
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Log
operator|.
name|w
argument_list|(
literal|"Qt A11y"
argument_list|,
literal|"EXCEPTION in dispatchHoverEvent for Accessibility: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|surfaceChanged
specifier|public
name|void
name|surfaceChanged
parameter_list|(
name|SurfaceHolder
name|holder
parameter_list|,
name|int
name|format
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
if|if
condition|(
name|width
operator|<
literal|1
operator|||
name|height
operator|<
literal|1
condition|)
return|return;
name|DisplayMetrics
name|metrics
init|=
operator|new
name|DisplayMetrics
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Activity
operator|)
name|getContext
argument_list|()
operator|)
operator|.
name|getWindowManager
argument_list|()
operator|.
name|getDefaultDisplay
argument_list|()
operator|.
name|getMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|setApplicationDisplayMetrics
argument_list|(
name|metrics
operator|.
name|widthPixels
argument_list|,
name|metrics
operator|.
name|heightPixels
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|metrics
operator|.
name|xdpi
argument_list|,
name|metrics
operator|.
name|ydpi
argument_list|,
name|metrics
operator|.
name|scaledDensity
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_started
condition|)
return|return;
if|if
condition|(
name|m_usesGL
condition|)
block|{
name|QtNative
operator|.
name|setSurface
argument_list|(
name|holder
operator|.
name|getSurface
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QtNative
operator|.
name|lockSurface
argument_list|()
expr_stmt|;
name|QtNative
operator|.
name|setSurface
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|m_bitmap
operator|=
name|Bitmap
operator|.
name|createBitmap
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|Bitmap
operator|.
name|Config
operator|.
name|RGB_565
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|setSurface
argument_list|(
name|m_bitmap
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|unlockSurface
argument_list|()
expr_stmt|;
name|QtNative
operator|.
name|updateWindow
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|surfaceDestroyed
specifier|public
name|void
name|surfaceDestroyed
parameter_list|(
name|SurfaceHolder
name|holder
parameter_list|)
block|{
if|if
condition|(
name|m_usesGL
condition|)
block|{
name|QtNative
operator|.
name|destroySurface
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|m_started
condition|)
return|return;
name|QtNative
operator|.
name|lockSurface
argument_list|()
expr_stmt|;
name|QtNative
operator|.
name|setSurface
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|unlockSurface
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|drawBitmap
specifier|public
name|void
name|drawBitmap
parameter_list|(
name|Rect
name|rect
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_started
condition|)
return|return;
name|QtNative
operator|.
name|lockSurface
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|m_bitmap
condition|)
block|{
try|try
block|{
name|Canvas
name|cv
init|=
name|getHolder
argument_list|()
operator|.
name|lockCanvas
argument_list|(
name|rect
argument_list|)
decl_stmt|;
name|cv
operator|.
name|drawBitmap
argument_list|(
name|m_bitmap
argument_list|,
name|rect
argument_list|,
name|rect
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getHolder
argument_list|()
operator|.
name|unlockCanvasAndPost
argument_list|(
name|cv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"Can't create main activity"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|QtNative
operator|.
name|unlockSurface
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTouchEvent
specifier|public
name|boolean
name|onTouchEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_started
condition|)
return|return
literal|false
return|;
name|QtNative
operator|.
name|sendTouchEvent
argument_list|(
name|event
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|m_gestureDetector
operator|.
name|onTouchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|onTrackballEvent
specifier|public
name|boolean
name|onTrackballEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_started
condition|)
return|return
literal|false
return|;
name|QtNative
operator|.
name|sendTrackballEvent
argument_list|(
name|event
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
