begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the Android port of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_package
DECL|package|org.qtproject.qt5.android.accessibility
package|package
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
operator|.
name|accessibility
package|;
end_package
begin_import
import|import
name|android
operator|.
name|accessibilityservice
operator|.
name|AccessibilityService
import|;
end_import
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|Activity
import|;
end_import
begin_import
import|import
name|android
operator|.
name|graphics
operator|.
name|Rect
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|Bundle
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|View
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ViewGroup
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ViewParent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|text
operator|.
name|TextUtils
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|accessibility
operator|.
name|*
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|MotionEvent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|View
operator|.
name|OnHoverListener
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
operator|.
name|QtActivityDelegate
import|;
end_import
begin_class
DECL|class|QtAccessibilityDelegate
specifier|public
class|class
name|QtAccessibilityDelegate
extends|extends
name|View
operator|.
name|AccessibilityDelegate
block|{
DECL|field|TAG
specifier|private
specifier|static
specifier|final
name|String
name|TAG
init|=
literal|"Qt A11Y"
decl_stmt|;
comment|// Qt uses the upper half of the unsiged integers
comment|// all low positive ints should be fine.
DECL|field|INVALID_ID
specifier|public
specifier|static
specifier|final
name|int
name|INVALID_ID
init|=
literal|333
decl_stmt|;
comment|// half evil
comment|// The platform might ask for the class implementing the "view".
comment|// Pretend to be an inner class of the QtSurface.
DECL|field|DEFAULT_CLASS_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CLASS_NAME
init|=
literal|"$VirtualChild"
decl_stmt|;
DECL|field|m_view
specifier|private
name|View
name|m_view
init|=
literal|null
decl_stmt|;
DECL|field|m_manager
specifier|private
name|AccessibilityManager
name|m_manager
decl_stmt|;
DECL|field|m_activityDelegate
specifier|private
name|QtActivityDelegate
name|m_activityDelegate
decl_stmt|;
DECL|field|m_activity
specifier|private
name|Activity
name|m_activity
decl_stmt|;
DECL|field|m_layout
specifier|private
name|ViewGroup
name|m_layout
decl_stmt|;
comment|// The accessible object that currently has the "accessibility focus"
comment|// usually indicated by a yellow rectangle on screen.
DECL|field|m_focusedVirtualViewId
specifier|private
name|int
name|m_focusedVirtualViewId
init|=
name|INVALID_ID
decl_stmt|;
comment|// When exploring the screen by touch, the item "hovered" by the finger.
DECL|field|m_hoveredVirtualViewId
specifier|private
name|int
name|m_hoveredVirtualViewId
init|=
name|INVALID_ID
decl_stmt|;
comment|// Cache coordinates of the view to know the global offset
comment|// this is because the Android platform window does not take
comment|// the offset of the view on screen into account (eg status bar on top)
DECL|field|m_globalOffset
specifier|private
specifier|final
name|int
index|[]
name|m_globalOffset
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
DECL|class|HoverEventListener
specifier|private
class|class
name|HoverEventListener
implements|implements
name|View
operator|.
name|OnHoverListener
block|{
annotation|@
name|Override
DECL|method|onHover
specifier|public
name|boolean
name|onHover
parameter_list|(
name|View
name|v
parameter_list|,
name|MotionEvent
name|event
parameter_list|)
block|{
return|return
name|dispatchHoverEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
DECL|method|QtAccessibilityDelegate
specifier|public
name|QtAccessibilityDelegate
parameter_list|(
name|Activity
name|activity
parameter_list|,
name|ViewGroup
name|layout
parameter_list|,
name|QtActivityDelegate
name|activityDelegate
parameter_list|)
block|{
name|m_activity
operator|=
name|activity
expr_stmt|;
name|m_layout
operator|=
name|layout
expr_stmt|;
name|m_activityDelegate
operator|=
name|activityDelegate
expr_stmt|;
name|m_manager
operator|=
operator|(
name|AccessibilityManager
operator|)
name|m_activity
operator|.
name|getSystemService
argument_list|(
name|Context
operator|.
name|ACCESSIBILITY_SERVICE
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_manager
operator|!=
literal|null
condition|)
block|{
name|AccessibilityManagerListener
name|accServiceListener
init|=
operator|new
name|AccessibilityManagerListener
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m_manager
operator|.
name|addAccessibilityStateChangeListener
argument_list|(
name|accServiceListener
argument_list|)
condition|)
name|Log
operator|.
name|w
argument_list|(
literal|"Qt A11y"
argument_list|,
literal|"Could not register a11y state change listener"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_manager
operator|.
name|isEnabled
argument_list|()
condition|)
name|accServiceListener
operator|.
name|onAccessibilityStateChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AccessibilityManagerListener
specifier|private
class|class
name|AccessibilityManagerListener
implements|implements
name|AccessibilityManager
operator|.
name|AccessibilityStateChangeListener
block|{
annotation|@
name|Override
DECL|method|onAccessibilityStateChanged
specifier|public
name|void
name|onAccessibilityStateChanged
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
try|try
block|{
name|View
name|view
init|=
name|m_view
decl_stmt|;
if|if
condition|(
name|view
operator|==
literal|null
condition|)
block|{
name|view
operator|=
operator|new
name|View
argument_list|(
name|m_activity
argument_list|)
expr_stmt|;
name|view
operator|.
name|setId
argument_list|(
name|View
operator|.
name|NO_ID
argument_list|)
expr_stmt|;
block|}
comment|// ### Keep this for debugging for a while. It allows us to visually see that our View
comment|// ### is on top of the surface(s)
comment|// ColorDrawable color = new ColorDrawable(0x80ff8080);    //0xAARRGGBB
comment|// view.setBackground(color);
name|view
operator|.
name|setAccessibilityDelegate
argument_list|(
name|QtAccessibilityDelegate
operator|.
name|this
argument_list|)
expr_stmt|;
comment|// if all is fine, add it to the layout
if|if
condition|(
name|m_view
operator|==
literal|null
condition|)
block|{
comment|//m_layout.addAccessibilityView(view);
name|m_layout
operator|.
name|addView
argument_list|(
name|view
argument_list|,
name|m_activityDelegate
operator|.
name|getSurfaceCount
argument_list|()
argument_list|,
operator|new
name|ViewGroup
operator|.
name|LayoutParams
argument_list|(
name|ViewGroup
operator|.
name|LayoutParams
operator|.
name|MATCH_PARENT
argument_list|,
name|ViewGroup
operator|.
name|LayoutParams
operator|.
name|MATCH_PARENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m_view
operator|=
name|view
expr_stmt|;
name|m_view
operator|.
name|setOnHoverListener
argument_list|(
operator|new
name|HoverEventListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Unknown exception means something went wrong.
name|Log
operator|.
name|w
argument_list|(
literal|"Qt A11y"
argument_list|,
literal|"Unknown exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|m_view
operator|!=
literal|null
condition|)
block|{
name|m_layout
operator|.
name|removeView
argument_list|(
name|m_view
argument_list|)
expr_stmt|;
name|m_view
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|QtNativeAccessibility
operator|.
name|setActive
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAccessibilityNodeProvider
specifier|public
name|AccessibilityNodeProvider
name|getAccessibilityNodeProvider
parameter_list|(
name|View
name|host
parameter_list|)
block|{
return|return
name|m_nodeProvider
return|;
block|}
comment|// For "explore by touch" we need all movement events here first
comment|// (user moves finger over screen to discover items on screen).
DECL|method|dispatchHoverEvent
specifier|private
name|boolean
name|dispatchHoverEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_manager
operator|.
name|isTouchExplorationEnabled
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|virtualViewId
init|=
name|QtNativeAccessibility
operator|.
name|hitTest
argument_list|(
name|event
operator|.
name|getX
argument_list|()
argument_list|,
name|event
operator|.
name|getY
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|virtualViewId
operator|==
name|INVALID_ID
condition|)
block|{
name|virtualViewId
operator|=
name|View
operator|.
name|NO_ID
expr_stmt|;
block|}
switch|switch
condition|(
name|event
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|MotionEvent
operator|.
name|ACTION_HOVER_ENTER
case|:
case|case
name|MotionEvent
operator|.
name|ACTION_HOVER_MOVE
case|:
name|setHoveredVirtualViewId
argument_list|(
name|virtualViewId
argument_list|)
expr_stmt|;
break|break;
case|case
name|MotionEvent
operator|.
name|ACTION_HOVER_EXIT
case|:
name|setHoveredVirtualViewId
argument_list|(
name|virtualViewId
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|sendEventForVirtualViewId
specifier|public
name|boolean
name|sendEventForVirtualViewId
parameter_list|(
name|int
name|virtualViewId
parameter_list|,
name|int
name|eventType
parameter_list|)
block|{
if|if
condition|(
operator|(
name|virtualViewId
operator|==
name|INVALID_ID
operator|)
operator|||
operator|!
name|m_manager
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|Log
operator|.
name|w
argument_list|(
name|TAG
argument_list|,
literal|"sendEventForVirtualViewId for invalid view"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|ViewGroup
name|group
init|=
operator|(
name|ViewGroup
operator|)
name|m_view
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|Log
operator|.
name|w
argument_list|(
name|TAG
argument_list|,
literal|"Could not send AccessibilityEvent because group was null. This should really not happen."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|AccessibilityEvent
name|event
decl_stmt|;
name|event
operator|=
name|getEventForVirtualViewId
argument_list|(
name|virtualViewId
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
return|return
name|group
operator|.
name|requestSendAccessibilityEvent
argument_list|(
name|m_view
argument_list|,
name|event
argument_list|)
return|;
block|}
DECL|method|invalidateVirtualViewId
specifier|public
name|void
name|invalidateVirtualViewId
parameter_list|(
name|int
name|virtualViewId
parameter_list|)
block|{
name|sendEventForVirtualViewId
argument_list|(
name|virtualViewId
argument_list|,
name|AccessibilityEvent
operator|.
name|TYPE_WINDOW_CONTENT_CHANGED
argument_list|)
expr_stmt|;
block|}
DECL|method|setHoveredVirtualViewId
specifier|private
name|void
name|setHoveredVirtualViewId
parameter_list|(
name|int
name|virtualViewId
parameter_list|)
block|{
if|if
condition|(
name|m_hoveredVirtualViewId
operator|==
name|virtualViewId
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|previousVirtualViewId
init|=
name|m_hoveredVirtualViewId
decl_stmt|;
name|m_hoveredVirtualViewId
operator|=
name|virtualViewId
expr_stmt|;
name|sendEventForVirtualViewId
argument_list|(
name|virtualViewId
argument_list|,
name|AccessibilityEvent
operator|.
name|TYPE_VIEW_HOVER_ENTER
argument_list|)
expr_stmt|;
name|sendEventForVirtualViewId
argument_list|(
name|previousVirtualViewId
argument_list|,
name|AccessibilityEvent
operator|.
name|TYPE_VIEW_HOVER_EXIT
argument_list|)
expr_stmt|;
block|}
DECL|method|getEventForVirtualViewId
specifier|private
name|AccessibilityEvent
name|getEventForVirtualViewId
parameter_list|(
name|int
name|virtualViewId
parameter_list|,
name|int
name|eventType
parameter_list|)
block|{
specifier|final
name|AccessibilityEvent
name|event
init|=
name|AccessibilityEvent
operator|.
name|obtain
argument_list|(
name|eventType
argument_list|)
decl_stmt|;
name|event
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|event
operator|.
name|setClassName
argument_list|(
name|m_view
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
name|DEFAULT_CLASS_NAME
argument_list|)
expr_stmt|;
name|event
operator|.
name|setContentDescription
argument_list|(
name|QtNativeAccessibility
operator|.
name|descriptionForAccessibleObject
argument_list|(
name|virtualViewId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|TextUtils
operator|.
name|isEmpty
argument_list|(
name|event
operator|.
name|getContentDescription
argument_list|()
argument_list|)
condition|)
name|Log
operator|.
name|w
argument_list|(
name|TAG
argument_list|,
literal|"AccessibilityEvent with empty description"
argument_list|)
expr_stmt|;
name|event
operator|.
name|setPackageName
argument_list|(
name|m_view
operator|.
name|getContext
argument_list|()
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setSource
argument_list|(
name|m_view
argument_list|,
name|virtualViewId
argument_list|)
expr_stmt|;
return|return
name|event
return|;
block|}
DECL|method|dumpNodes
specifier|private
name|void
name|dumpNodes
parameter_list|(
name|int
name|parentId
parameter_list|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|TAG
argument_list|,
literal|"A11Y hierarchy: "
operator|+
name|parentId
operator|+
literal|" parent: "
operator|+
name|QtNativeAccessibility
operator|.
name|parentId
argument_list|(
name|parentId
argument_list|)
argument_list|)
expr_stmt|;
name|Log
operator|.
name|i
argument_list|(
name|TAG
argument_list|,
literal|"    desc: "
operator|+
name|QtNativeAccessibility
operator|.
name|descriptionForAccessibleObject
argument_list|(
name|parentId
argument_list|)
operator|+
literal|" rect: "
operator|+
name|QtNativeAccessibility
operator|.
name|screenRect
argument_list|(
name|parentId
argument_list|)
argument_list|)
expr_stmt|;
name|Log
operator|.
name|i
argument_list|(
name|TAG
argument_list|,
literal|" NODE: "
operator|+
name|getNodeForVirtualViewId
argument_list|(
name|parentId
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|ids
init|=
name|QtNativeAccessibility
operator|.
name|childIdListForAccessibleObject
argument_list|(
name|parentId
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ids
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|TAG
argument_list|,
name|parentId
operator|+
literal|" has child: "
operator|+
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|dumpNodes
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNodeForView
specifier|private
name|AccessibilityNodeInfo
name|getNodeForView
parameter_list|()
block|{
comment|// Since we don't want the parent to be focusable, but we can't remove
comment|// actions from a node, copy over the necessary fields.
specifier|final
name|AccessibilityNodeInfo
name|result
init|=
name|AccessibilityNodeInfo
operator|.
name|obtain
argument_list|(
name|m_view
argument_list|)
decl_stmt|;
specifier|final
name|AccessibilityNodeInfo
name|source
init|=
name|AccessibilityNodeInfo
operator|.
name|obtain
argument_list|(
name|m_view
argument_list|)
decl_stmt|;
name|m_view
operator|.
name|onInitializeAccessibilityNodeInfo
argument_list|(
name|source
argument_list|)
expr_stmt|;
comment|// Get the actual position on screen, taking the status bar into account.
name|m_view
operator|.
name|getLocationOnScreen
argument_list|(
name|m_globalOffset
argument_list|)
expr_stmt|;
specifier|final
name|int
name|offsetX
init|=
name|m_globalOffset
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|offsetY
init|=
name|m_globalOffset
index|[
literal|1
index|]
decl_stmt|;
comment|// Copy over parent and screen bounds.
specifier|final
name|Rect
name|m_tempParentRect
init|=
operator|new
name|Rect
argument_list|()
decl_stmt|;
name|source
operator|.
name|getBoundsInParent
argument_list|(
name|m_tempParentRect
argument_list|)
expr_stmt|;
name|result
operator|.
name|setBoundsInParent
argument_list|(
name|m_tempParentRect
argument_list|)
expr_stmt|;
specifier|final
name|Rect
name|m_tempScreenRect
init|=
operator|new
name|Rect
argument_list|()
decl_stmt|;
name|source
operator|.
name|getBoundsInScreen
argument_list|(
name|m_tempScreenRect
argument_list|)
expr_stmt|;
name|m_tempScreenRect
operator|.
name|offset
argument_list|(
name|offsetX
argument_list|,
name|offsetY
argument_list|)
expr_stmt|;
name|result
operator|.
name|setBoundsInScreen
argument_list|(
name|m_tempScreenRect
argument_list|)
expr_stmt|;
comment|// Set up the parent view, if applicable.
specifier|final
name|ViewParent
name|parent
init|=
name|m_view
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|View
condition|)
block|{
name|result
operator|.
name|setParent
argument_list|(
operator|(
name|View
operator|)
name|parent
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|setVisibleToUser
argument_list|(
name|source
operator|.
name|isVisibleToUser
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setPackageName
argument_list|(
name|source
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setClassName
argument_list|(
name|source
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Spit out the entire hierarchy for debugging purposes
comment|//        dumpNodes(-1);
name|int
index|[]
name|ids
init|=
name|QtNativeAccessibility
operator|.
name|childIdListForAccessibleObject
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ids
operator|.
name|length
condition|;
operator|++
name|i
control|)
name|result
operator|.
name|addChild
argument_list|(
name|m_view
argument_list|,
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getNodeForVirtualViewId
specifier|private
name|AccessibilityNodeInfo
name|getNodeForVirtualViewId
parameter_list|(
name|int
name|virtualViewId
parameter_list|)
block|{
specifier|final
name|AccessibilityNodeInfo
name|node
init|=
name|AccessibilityNodeInfo
operator|.
name|obtain
argument_list|()
decl_stmt|;
name|node
operator|.
name|setClassName
argument_list|(
name|m_view
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
name|DEFAULT_CLASS_NAME
argument_list|)
expr_stmt|;
name|node
operator|.
name|setPackageName
argument_list|(
name|m_view
operator|.
name|getContext
argument_list|()
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QtNativeAccessibility
operator|.
name|populateNode
argument_list|(
name|virtualViewId
argument_list|,
name|node
argument_list|)
condition|)
return|return
name|node
return|;
comment|// set only if valid, otherwise we return a node that is invalid and will crash when accessed
name|node
operator|.
name|setSource
argument_list|(
name|m_view
argument_list|,
name|virtualViewId
argument_list|)
expr_stmt|;
if|if
condition|(
name|TextUtils
operator|.
name|isEmpty
argument_list|(
name|node
operator|.
name|getText
argument_list|()
argument_list|)
operator|&&
name|TextUtils
operator|.
name|isEmpty
argument_list|(
name|node
operator|.
name|getContentDescription
argument_list|()
argument_list|)
condition|)
name|Log
operator|.
name|w
argument_list|(
name|TAG
argument_list|,
literal|"AccessibilityNodeInfo with empty contentDescription: "
operator|+
name|virtualViewId
argument_list|)
expr_stmt|;
name|int
name|parentId
init|=
name|QtNativeAccessibility
operator|.
name|parentId
argument_list|(
name|virtualViewId
argument_list|)
decl_stmt|;
name|node
operator|.
name|setParent
argument_list|(
name|m_view
argument_list|,
name|parentId
argument_list|)
expr_stmt|;
name|Rect
name|screenRect
init|=
name|QtNativeAccessibility
operator|.
name|screenRect
argument_list|(
name|virtualViewId
argument_list|)
decl_stmt|;
specifier|final
name|int
name|offsetX
init|=
name|m_globalOffset
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|offsetY
init|=
name|m_globalOffset
index|[
literal|1
index|]
decl_stmt|;
name|screenRect
operator|.
name|offset
argument_list|(
name|offsetX
argument_list|,
name|offsetY
argument_list|)
expr_stmt|;
name|node
operator|.
name|setBoundsInScreen
argument_list|(
name|screenRect
argument_list|)
expr_stmt|;
name|Rect
name|rectInParent
init|=
name|screenRect
decl_stmt|;
name|Rect
name|parentScreenRect
init|=
name|QtNativeAccessibility
operator|.
name|screenRect
argument_list|(
name|parentId
argument_list|)
decl_stmt|;
name|rectInParent
operator|.
name|offset
argument_list|(
operator|-
name|parentScreenRect
operator|.
name|left
argument_list|,
operator|-
name|parentScreenRect
operator|.
name|top
argument_list|)
expr_stmt|;
name|node
operator|.
name|setBoundsInParent
argument_list|(
name|rectInParent
argument_list|)
expr_stmt|;
comment|// Manage internal accessibility focus state.
if|if
condition|(
name|m_focusedVirtualViewId
operator|==
name|virtualViewId
condition|)
block|{
name|node
operator|.
name|setAccessibilityFocused
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|node
operator|.
name|addAction
argument_list|(
name|AccessibilityNodeInfo
operator|.
name|ACTION_CLEAR_ACCESSIBILITY_FOCUS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|.
name|setAccessibilityFocused
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|node
operator|.
name|addAction
argument_list|(
name|AccessibilityNodeInfo
operator|.
name|ACTION_ACCESSIBILITY_FOCUS
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|ids
init|=
name|QtNativeAccessibility
operator|.
name|childIdListForAccessibleObject
argument_list|(
name|virtualViewId
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ids
operator|.
name|length
condition|;
operator|++
name|i
control|)
name|node
operator|.
name|addChild
argument_list|(
name|m_view
argument_list|,
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|field|m_nodeProvider
specifier|private
name|AccessibilityNodeProvider
name|m_nodeProvider
init|=
operator|new
name|AccessibilityNodeProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AccessibilityNodeInfo
name|createAccessibilityNodeInfo
parameter_list|(
name|int
name|virtualViewId
parameter_list|)
block|{
if|if
condition|(
name|virtualViewId
operator|==
name|View
operator|.
name|NO_ID
condition|)
block|{
return|return
name|getNodeForView
argument_list|()
return|;
block|}
return|return
name|getNodeForVirtualViewId
argument_list|(
name|virtualViewId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|performAction
parameter_list|(
name|int
name|virtualViewId
parameter_list|,
name|int
name|action
parameter_list|,
name|Bundle
name|arguments
parameter_list|)
block|{
name|boolean
name|handled
init|=
literal|false
decl_stmt|;
comment|//Log.i(TAG, "PERFORM ACTION: " + action + " on " + virtualViewId);
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|AccessibilityNodeInfo
operator|.
name|ACTION_ACCESSIBILITY_FOCUS
case|:
comment|// Only handle the FOCUS action if it's placing focus on
comment|// a different view that was previously focused.
if|if
condition|(
name|m_focusedVirtualViewId
operator|!=
name|virtualViewId
condition|)
block|{
name|m_focusedVirtualViewId
operator|=
name|virtualViewId
expr_stmt|;
name|m_view
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|sendEventForVirtualViewId
argument_list|(
name|virtualViewId
argument_list|,
name|AccessibilityEvent
operator|.
name|TYPE_VIEW_ACCESSIBILITY_FOCUSED
argument_list|)
expr_stmt|;
name|handled
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
name|AccessibilityNodeInfo
operator|.
name|ACTION_CLEAR_ACCESSIBILITY_FOCUS
case|:
if|if
condition|(
name|m_focusedVirtualViewId
operator|==
name|virtualViewId
condition|)
block|{
name|m_focusedVirtualViewId
operator|=
name|INVALID_ID
expr_stmt|;
block|}
comment|// Since we're managing focus at the parent level, we are
comment|// likely to receive a FOCUS action before a CLEAR_FOCUS
comment|// action. We'll give the benefit of the doubt to the
comment|// framework and always handle FOCUS_CLEARED.
name|m_view
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|sendEventForVirtualViewId
argument_list|(
name|virtualViewId
argument_list|,
name|AccessibilityEvent
operator|.
name|TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED
argument_list|)
expr_stmt|;
name|handled
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
comment|// Let the node provider handle focus for the view node.
if|if
condition|(
name|virtualViewId
operator|==
name|View
operator|.
name|NO_ID
condition|)
block|{
return|return
name|m_view
operator|.
name|performAccessibilityAction
argument_list|(
name|action
argument_list|,
name|arguments
argument_list|)
return|;
block|}
block|}
name|handled
operator||=
name|performActionForVirtualViewId
argument_list|(
name|virtualViewId
argument_list|,
name|action
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
return|return
name|handled
return|;
block|}
block|}
decl_stmt|;
DECL|method|performActionForVirtualViewId
specifier|protected
name|boolean
name|performActionForVirtualViewId
parameter_list|(
name|int
name|virtualViewId
parameter_list|,
name|int
name|action
parameter_list|,
name|Bundle
name|arguments
parameter_list|)
block|{
comment|//        Log.i(TAG, "ACTION " + action + " on " + virtualViewId);
comment|//        dumpNodes(virtualViewId);
name|boolean
name|success
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|AccessibilityNodeInfo
operator|.
name|ACTION_CLICK
case|:
name|success
operator|=
name|QtNativeAccessibility
operator|.
name|clickAction
argument_list|(
name|virtualViewId
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
name|sendEventForVirtualViewId
argument_list|(
name|virtualViewId
argument_list|,
name|AccessibilityEvent
operator|.
name|TYPE_VIEW_CLICKED
argument_list|)
expr_stmt|;
break|break;
case|case
name|AccessibilityNodeInfo
operator|.
name|ACTION_SCROLL_FORWARD
case|:
name|success
operator|=
name|QtNativeAccessibility
operator|.
name|scrollForward
argument_list|(
name|virtualViewId
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
name|sendEventForVirtualViewId
argument_list|(
name|virtualViewId
argument_list|,
name|AccessibilityEvent
operator|.
name|TYPE_VIEW_SCROLLED
argument_list|)
expr_stmt|;
break|break;
case|case
name|AccessibilityNodeInfo
operator|.
name|ACTION_SCROLL_BACKWARD
case|:
name|success
operator|=
name|QtNativeAccessibility
operator|.
name|scrollBackward
argument_list|(
name|virtualViewId
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
name|sendEventForVirtualViewId
argument_list|(
name|virtualViewId
argument_list|,
name|AccessibilityEvent
operator|.
name|TYPE_VIEW_SCROLLED
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|success
return|;
block|}
block|}
end_class
end_unit
