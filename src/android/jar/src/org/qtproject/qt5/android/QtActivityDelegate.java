begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 BogDan Vatra<bogdan@kde.org> ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the Android port of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_package
DECL|package|org.qtproject.qt5.android
package|package
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
package|;
end_package
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|Activity
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Intent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|pm
operator|.
name|ActivityInfo
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|pm
operator|.
name|PackageManager
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|pm
operator|.
name|PackageManager
operator|.
name|NameNotFoundException
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|res
operator|.
name|Configuration
import|;
end_import
begin_import
import|import
name|android
operator|.
name|graphics
operator|.
name|drawable
operator|.
name|ColorDrawable
import|;
end_import
begin_import
import|import
name|android
operator|.
name|graphics
operator|.
name|Rect
import|;
end_import
begin_import
import|import
name|android
operator|.
name|net
operator|.
name|LocalServerSocket
import|;
end_import
begin_import
import|import
name|android
operator|.
name|net
operator|.
name|LocalSocket
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|Build
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|Bundle
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|Handler
import|;
end_import
begin_import
import|import
name|android
operator|.
name|os
operator|.
name|ResultReceiver
import|;
end_import
begin_import
import|import
name|android
operator|.
name|text
operator|.
name|method
operator|.
name|MetaKeyKeyListener
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|Base64
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|DisplayMetrics
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|TypedValue
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ContextMenu
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ContextMenu
operator|.
name|ContextMenuInfo
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|KeyCharacterMap
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|KeyEvent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|Menu
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|MenuItem
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|MotionEvent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|Surface
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|View
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ViewConfiguration
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ViewGroup
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|WindowManager
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|InputMethodManager
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ViewTreeObserver
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_class
DECL|class|QtActivityDelegate
specifier|public
class|class
name|QtActivityDelegate
block|{
DECL|field|m_activity
specifier|private
name|Activity
name|m_activity
init|=
literal|null
decl_stmt|;
DECL|field|m_super_dispatchKeyEvent
specifier|private
name|Method
name|m_super_dispatchKeyEvent
init|=
literal|null
decl_stmt|;
DECL|field|m_super_onRestoreInstanceState
specifier|private
name|Method
name|m_super_onRestoreInstanceState
init|=
literal|null
decl_stmt|;
DECL|field|m_super_onRetainNonConfigurationInstance
specifier|private
name|Method
name|m_super_onRetainNonConfigurationInstance
init|=
literal|null
decl_stmt|;
DECL|field|m_super_onSaveInstanceState
specifier|private
name|Method
name|m_super_onSaveInstanceState
init|=
literal|null
decl_stmt|;
DECL|field|m_super_onKeyDown
specifier|private
name|Method
name|m_super_onKeyDown
init|=
literal|null
decl_stmt|;
DECL|field|m_super_onKeyUp
specifier|private
name|Method
name|m_super_onKeyUp
init|=
literal|null
decl_stmt|;
DECL|field|m_super_onConfigurationChanged
specifier|private
name|Method
name|m_super_onConfigurationChanged
init|=
literal|null
decl_stmt|;
DECL|field|m_super_onActivityResult
specifier|private
name|Method
name|m_super_onActivityResult
init|=
literal|null
decl_stmt|;
DECL|field|m_super_dispatchGenericMotionEvent
specifier|private
name|Method
name|m_super_dispatchGenericMotionEvent
init|=
literal|null
decl_stmt|;
DECL|field|NATIVE_LIBRARIES_KEY
specifier|private
specifier|static
specifier|final
name|String
name|NATIVE_LIBRARIES_KEY
init|=
literal|"native.libraries"
decl_stmt|;
DECL|field|BUNDLED_LIBRARIES_KEY
specifier|private
specifier|static
specifier|final
name|String
name|BUNDLED_LIBRARIES_KEY
init|=
literal|"bundled.libraries"
decl_stmt|;
DECL|field|MAIN_LIBRARY_KEY
specifier|private
specifier|static
specifier|final
name|String
name|MAIN_LIBRARY_KEY
init|=
literal|"main.library"
decl_stmt|;
DECL|field|ENVIRONMENT_VARIABLES_KEY
specifier|private
specifier|static
specifier|final
name|String
name|ENVIRONMENT_VARIABLES_KEY
init|=
literal|"environment.variables"
decl_stmt|;
DECL|field|APPLICATION_PARAMETERS_KEY
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_PARAMETERS_KEY
init|=
literal|"application.parameters"
decl_stmt|;
DECL|field|STATIC_INIT_CLASSES_KEY
specifier|private
specifier|static
specifier|final
name|String
name|STATIC_INIT_CLASSES_KEY
init|=
literal|"static.init.classes"
decl_stmt|;
DECL|field|NECESSITAS_API_LEVEL_KEY
specifier|private
specifier|static
specifier|final
name|String
name|NECESSITAS_API_LEVEL_KEY
init|=
literal|"necessitas.api.level"
decl_stmt|;
DECL|field|EXTRACT_STYLE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|EXTRACT_STYLE_KEY
init|=
literal|"extract.android.style"
decl_stmt|;
DECL|field|m_environmentVariables
specifier|private
specifier|static
name|String
name|m_environmentVariables
init|=
literal|null
decl_stmt|;
DECL|field|m_applicationParameters
specifier|private
specifier|static
name|String
name|m_applicationParameters
init|=
literal|null
decl_stmt|;
DECL|field|m_currentRotation
specifier|private
name|int
name|m_currentRotation
init|=
operator|-
literal|1
decl_stmt|;
comment|// undefined
DECL|field|m_nativeOrientation
specifier|private
name|int
name|m_nativeOrientation
init|=
name|Configuration
operator|.
name|ORIENTATION_UNDEFINED
decl_stmt|;
DECL|field|m_mainLib
specifier|private
name|String
name|m_mainLib
decl_stmt|;
DECL|field|m_metaState
specifier|private
name|long
name|m_metaState
decl_stmt|;
DECL|field|m_lastChar
specifier|private
name|int
name|m_lastChar
init|=
literal|0
decl_stmt|;
DECL|field|m_softInputMode
specifier|private
name|int
name|m_softInputMode
init|=
literal|0
decl_stmt|;
DECL|field|m_fullScreen
specifier|private
name|boolean
name|m_fullScreen
init|=
literal|false
decl_stmt|;
DECL|field|m_started
specifier|private
name|boolean
name|m_started
init|=
literal|false
decl_stmt|;
DECL|field|m_surfaces
specifier|private
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|QtSurface
argument_list|>
name|m_surfaces
init|=
literal|null
decl_stmt|;
DECL|field|m_nativeViews
specifier|private
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|View
argument_list|>
name|m_nativeViews
init|=
literal|null
decl_stmt|;
DECL|field|m_layout
specifier|private
name|QtLayout
name|m_layout
init|=
literal|null
decl_stmt|;
DECL|field|m_editText
specifier|private
name|QtEditText
name|m_editText
init|=
literal|null
decl_stmt|;
DECL|field|m_imm
specifier|private
name|InputMethodManager
name|m_imm
init|=
literal|null
decl_stmt|;
DECL|field|m_quitApp
specifier|private
name|boolean
name|m_quitApp
init|=
literal|true
decl_stmt|;
DECL|field|m_debuggerProcess
specifier|private
name|Process
name|m_debuggerProcess
init|=
literal|null
decl_stmt|;
comment|// debugger process
DECL|field|m_dummyView
specifier|private
name|View
name|m_dummyView
init|=
literal|null
decl_stmt|;
DECL|field|m_keyboardIsVisible
specifier|private
name|boolean
name|m_keyboardIsVisible
init|=
literal|false
decl_stmt|;
DECL|field|m_backKeyPressedSent
specifier|public
name|boolean
name|m_backKeyPressedSent
init|=
literal|false
decl_stmt|;
DECL|field|m_showHideTimeStamp
specifier|private
name|long
name|m_showHideTimeStamp
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
DECL|field|m_portraitKeyboardHeight
specifier|private
name|int
name|m_portraitKeyboardHeight
init|=
literal|0
decl_stmt|;
DECL|field|m_landscapeKeyboardHeight
specifier|private
name|int
name|m_landscapeKeyboardHeight
init|=
literal|0
decl_stmt|;
DECL|field|m_probeKeyboardHeightDelay
specifier|private
name|int
name|m_probeKeyboardHeightDelay
init|=
literal|50
decl_stmt|;
comment|// ms
DECL|method|setFullScreen
specifier|public
name|void
name|setFullScreen
parameter_list|(
name|boolean
name|enterFullScreen
parameter_list|)
block|{
if|if
condition|(
name|m_fullScreen
operator|==
name|enterFullScreen
condition|)
return|return;
if|if
condition|(
name|m_fullScreen
operator|=
name|enterFullScreen
condition|)
block|{
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|addFlags
argument_list|(
name|WindowManager
operator|.
name|LayoutParams
operator|.
name|FLAG_FULLSCREEN
argument_list|)
expr_stmt|;
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|clearFlags
argument_list|(
name|WindowManager
operator|.
name|LayoutParams
operator|.
name|FLAG_FORCE_NOT_FULLSCREEN
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>=
literal|14
condition|)
block|{
name|int
name|flags
init|=
name|View
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"SYSTEM_UI_FLAG_HIDE_NAVIGATION"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>=
literal|16
condition|)
block|{
name|flags
operator||=
name|View
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"SYSTEM_UI_FLAG_LAYOUT_STABLE"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|flags
operator||=
name|View
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|flags
operator||=
name|View
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|flags
operator||=
name|View
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"SYSTEM_UI_FLAG_FULLSCREEN"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>=
literal|19
condition|)
name|flags
operator||=
name|View
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"SYSTEM_UI_FLAG_IMMERSIVE_STICKY"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|Method
name|m
init|=
name|View
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setSystemUiVisibility"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|m
operator|.
name|invoke
argument_list|(
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|getDecorView
argument_list|()
argument_list|,
name|flags
operator||
name|View
operator|.
name|INVISIBLE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|addFlags
argument_list|(
name|WindowManager
operator|.
name|LayoutParams
operator|.
name|FLAG_FORCE_NOT_FULLSCREEN
argument_list|)
expr_stmt|;
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|clearFlags
argument_list|(
name|WindowManager
operator|.
name|LayoutParams
operator|.
name|FLAG_FULLSCREEN
argument_list|)
expr_stmt|;
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>=
literal|14
condition|)
block|{
try|try
block|{
name|int
name|ui_flag_visible
init|=
name|View
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"SYSTEM_UI_FLAG_VISIBLE"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Method
name|m
init|=
name|View
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setSystemUiVisibility"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|m
operator|.
name|invoke
argument_list|(
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|getDecorView
argument_list|()
argument_list|,
name|ui_flag_visible
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|m_layout
operator|.
name|requestLayout
argument_list|()
expr_stmt|;
block|}
DECL|method|updateFullScreen
specifier|public
name|void
name|updateFullScreen
parameter_list|()
block|{
if|if
condition|(
name|m_fullScreen
condition|)
block|{
name|m_fullScreen
operator|=
literal|false
expr_stmt|;
name|setFullScreen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// input method hints - must be kept in sync with QTDIR/src/corelib/global/qnamespace.h
DECL|field|ImhHiddenText
specifier|private
specifier|final
name|int
name|ImhHiddenText
init|=
literal|0x1
decl_stmt|;
DECL|field|ImhSensitiveData
specifier|private
specifier|final
name|int
name|ImhSensitiveData
init|=
literal|0x2
decl_stmt|;
DECL|field|ImhNoAutoUppercase
specifier|private
specifier|final
name|int
name|ImhNoAutoUppercase
init|=
literal|0x4
decl_stmt|;
DECL|field|ImhPreferNumbers
specifier|private
specifier|final
name|int
name|ImhPreferNumbers
init|=
literal|0x8
decl_stmt|;
DECL|field|ImhPreferUppercase
specifier|private
specifier|final
name|int
name|ImhPreferUppercase
init|=
literal|0x10
decl_stmt|;
DECL|field|ImhPreferLowercase
specifier|private
specifier|final
name|int
name|ImhPreferLowercase
init|=
literal|0x20
decl_stmt|;
DECL|field|ImhNoPredictiveText
specifier|private
specifier|final
name|int
name|ImhNoPredictiveText
init|=
literal|0x40
decl_stmt|;
DECL|field|ImhDate
specifier|private
specifier|final
name|int
name|ImhDate
init|=
literal|0x80
decl_stmt|;
DECL|field|ImhTime
specifier|private
specifier|final
name|int
name|ImhTime
init|=
literal|0x100
decl_stmt|;
DECL|field|ImhPreferLatin
specifier|private
specifier|final
name|int
name|ImhPreferLatin
init|=
literal|0x200
decl_stmt|;
DECL|field|ImhMultiLine
specifier|private
specifier|final
name|int
name|ImhMultiLine
init|=
literal|0x400
decl_stmt|;
DECL|field|ImhDigitsOnly
specifier|private
specifier|final
name|int
name|ImhDigitsOnly
init|=
literal|0x10000
decl_stmt|;
DECL|field|ImhFormattedNumbersOnly
specifier|private
specifier|final
name|int
name|ImhFormattedNumbersOnly
init|=
literal|0x20000
decl_stmt|;
DECL|field|ImhUppercaseOnly
specifier|private
specifier|final
name|int
name|ImhUppercaseOnly
init|=
literal|0x40000
decl_stmt|;
DECL|field|ImhLowercaseOnly
specifier|private
specifier|final
name|int
name|ImhLowercaseOnly
init|=
literal|0x80000
decl_stmt|;
DECL|field|ImhDialableCharactersOnly
specifier|private
specifier|final
name|int
name|ImhDialableCharactersOnly
init|=
literal|0x100000
decl_stmt|;
DECL|field|ImhEmailCharactersOnly
specifier|private
specifier|final
name|int
name|ImhEmailCharactersOnly
init|=
literal|0x200000
decl_stmt|;
DECL|field|ImhUrlCharactersOnly
specifier|private
specifier|final
name|int
name|ImhUrlCharactersOnly
init|=
literal|0x400000
decl_stmt|;
DECL|field|ImhLatinOnly
specifier|private
specifier|final
name|int
name|ImhLatinOnly
init|=
literal|0x800000
decl_stmt|;
comment|// enter key type - must be kept in sync with QTDIR/src/corelib/global/qnamespace.h
DECL|field|EnterKeyDefault
specifier|private
specifier|final
name|int
name|EnterKeyDefault
init|=
literal|0
decl_stmt|;
DECL|field|EnterKeyReturn
specifier|private
specifier|final
name|int
name|EnterKeyReturn
init|=
literal|1
decl_stmt|;
DECL|field|EnterKeyDone
specifier|private
specifier|final
name|int
name|EnterKeyDone
init|=
literal|2
decl_stmt|;
DECL|field|EnterKeyGo
specifier|private
specifier|final
name|int
name|EnterKeyGo
init|=
literal|3
decl_stmt|;
DECL|field|EnterKeySend
specifier|private
specifier|final
name|int
name|EnterKeySend
init|=
literal|4
decl_stmt|;
DECL|field|EnterKeySearch
specifier|private
specifier|final
name|int
name|EnterKeySearch
init|=
literal|5
decl_stmt|;
DECL|field|EnterKeyNext
specifier|private
specifier|final
name|int
name|EnterKeyNext
init|=
literal|6
decl_stmt|;
DECL|field|EnterKeyPrevious
specifier|private
specifier|final
name|int
name|EnterKeyPrevious
init|=
literal|7
decl_stmt|;
comment|// application state
DECL|field|ApplicationSuspended
specifier|public
specifier|static
specifier|final
name|int
name|ApplicationSuspended
init|=
literal|0x0
decl_stmt|;
DECL|field|ApplicationHidden
specifier|public
specifier|static
specifier|final
name|int
name|ApplicationHidden
init|=
literal|0x1
decl_stmt|;
DECL|field|ApplicationInactive
specifier|public
specifier|static
specifier|final
name|int
name|ApplicationInactive
init|=
literal|0x2
decl_stmt|;
DECL|field|ApplicationActive
specifier|public
specifier|static
specifier|final
name|int
name|ApplicationActive
init|=
literal|0x4
decl_stmt|;
DECL|method|setKeyboardVisibility
specifier|public
name|boolean
name|setKeyboardVisibility
parameter_list|(
name|boolean
name|visibility
parameter_list|,
name|long
name|timeStamp
parameter_list|)
block|{
if|if
condition|(
name|m_showHideTimeStamp
operator|>
name|timeStamp
condition|)
return|return
literal|false
return|;
name|m_showHideTimeStamp
operator|=
name|timeStamp
expr_stmt|;
if|if
condition|(
name|m_keyboardIsVisible
operator|==
name|visibility
condition|)
return|return
literal|false
return|;
name|m_keyboardIsVisible
operator|=
name|visibility
expr_stmt|;
name|QtNative
operator|.
name|keyboardVisibilityChanged
argument_list|(
name|m_keyboardIsVisible
argument_list|)
expr_stmt|;
if|if
condition|(
name|visibility
operator|==
literal|false
condition|)
name|updateFullScreen
argument_list|()
expr_stmt|;
comment|// Hiding the keyboard clears the immersive mode, so we need to set it again.
return|return
literal|true
return|;
block|}
DECL|method|resetSoftwareKeyboard
specifier|public
name|void
name|resetSoftwareKeyboard
parameter_list|()
block|{
if|if
condition|(
name|m_imm
operator|==
literal|null
condition|)
return|return;
name|m_editText
operator|.
name|postDelayed
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_imm
operator|.
name|restartInput
argument_list|(
name|m_editText
argument_list|)
expr_stmt|;
name|m_editText
operator|.
name|m_optionsChanged
operator|=
literal|false
expr_stmt|;
block|}
block|}
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|showSoftwareKeyboard
specifier|public
name|void
name|showSoftwareKeyboard
parameter_list|(
specifier|final
name|int
name|x
parameter_list|,
specifier|final
name|int
name|y
parameter_list|,
specifier|final
name|int
name|width
parameter_list|,
specifier|final
name|int
name|height
parameter_list|,
specifier|final
name|int
name|inputHints
parameter_list|,
specifier|final
name|int
name|enterKeyType
parameter_list|)
block|{
if|if
condition|(
name|m_imm
operator|==
literal|null
condition|)
return|return;
name|DisplayMetrics
name|metrics
init|=
operator|new
name|DisplayMetrics
argument_list|()
decl_stmt|;
name|m_activity
operator|.
name|getWindowManager
argument_list|()
operator|.
name|getDefaultDisplay
argument_list|()
operator|.
name|getMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
comment|// If the screen is in portrait mode than we estimate that keyboard height will not be higher than 2/5 of the screen.
comment|// else than we estimate that keyboard height will not be higher than 2/3 of the screen
specifier|final
name|int
name|visibleHeight
decl_stmt|;
if|if
condition|(
name|metrics
operator|.
name|widthPixels
operator|<
name|metrics
operator|.
name|heightPixels
condition|)
name|visibleHeight
operator|=
name|m_portraitKeyboardHeight
operator|!=
literal|0
condition|?
name|m_portraitKeyboardHeight
else|:
name|metrics
operator|.
name|heightPixels
operator|*
literal|3
operator|/
literal|5
expr_stmt|;
else|else
name|visibleHeight
operator|=
name|m_landscapeKeyboardHeight
operator|!=
literal|0
condition|?
name|m_landscapeKeyboardHeight
else|:
name|metrics
operator|.
name|heightPixels
operator|/
literal|3
expr_stmt|;
if|if
condition|(
name|m_softInputMode
operator|!=
literal|0
condition|)
block|{
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|setSoftInputMode
argument_list|(
name|m_softInputMode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|height
operator|>
name|visibleHeight
condition|)
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|setSoftInputMode
argument_list|(
name|WindowManager
operator|.
name|LayoutParams
operator|.
name|SOFT_INPUT_STATE_UNCHANGED
operator||
name|WindowManager
operator|.
name|LayoutParams
operator|.
name|SOFT_INPUT_ADJUST_RESIZE
argument_list|)
expr_stmt|;
else|else
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|setSoftInputMode
argument_list|(
name|WindowManager
operator|.
name|LayoutParams
operator|.
name|SOFT_INPUT_STATE_UNCHANGED
operator||
name|WindowManager
operator|.
name|LayoutParams
operator|.
name|SOFT_INPUT_ADJUST_PAN
argument_list|)
expr_stmt|;
block|}
name|int
name|initialCapsMode
init|=
literal|0
decl_stmt|;
name|int
name|imeOptions
init|=
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|EditorInfo
operator|.
name|IME_ACTION_DONE
decl_stmt|;
switch|switch
condition|(
name|enterKeyType
condition|)
block|{
case|case
name|EnterKeyReturn
case|:
name|imeOptions
operator|=
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|EditorInfo
operator|.
name|IME_FLAG_NO_ENTER_ACTION
expr_stmt|;
break|break;
case|case
name|EnterKeyGo
case|:
name|imeOptions
operator|=
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|EditorInfo
operator|.
name|IME_ACTION_GO
expr_stmt|;
break|break;
case|case
name|EnterKeySend
case|:
name|imeOptions
operator|=
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|EditorInfo
operator|.
name|IME_ACTION_SEND
expr_stmt|;
break|break;
case|case
name|EnterKeySearch
case|:
name|imeOptions
operator|=
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|EditorInfo
operator|.
name|IME_ACTION_SEARCH
expr_stmt|;
break|break;
case|case
name|EnterKeyNext
case|:
name|imeOptions
operator|=
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|EditorInfo
operator|.
name|IME_ACTION_NEXT
expr_stmt|;
break|break;
case|case
name|EnterKeyPrevious
case|:
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>
literal|10
condition|)
name|imeOptions
operator|=
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|EditorInfo
operator|.
name|IME_ACTION_PREVIOUS
expr_stmt|;
break|break;
block|}
name|int
name|inputType
init|=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_CLASS_TEXT
decl_stmt|;
if|if
condition|(
operator|(
name|inputHints
operator|&
operator|(
name|ImhPreferNumbers
operator||
name|ImhDigitsOnly
operator||
name|ImhFormattedNumbersOnly
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|inputType
operator|=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_CLASS_NUMBER
expr_stmt|;
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhFormattedNumbersOnly
operator|)
operator|!=
literal|0
condition|)
block|{
name|inputType
operator||=
operator|(
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_NUMBER_FLAG_DECIMAL
operator||
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_NUMBER_FLAG_SIGNED
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>
literal|10
operator|&&
operator|(
name|inputHints
operator|&
name|ImhHiddenText
operator|)
operator|!=
literal|0
condition|)
name|inputType
operator||=
literal|0x10
comment|/* TYPE_NUMBER_VARIATION_PASSWORD */
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhDialableCharactersOnly
operator|)
operator|!=
literal|0
condition|)
block|{
name|inputType
operator|=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_CLASS_PHONE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|inputHints
operator|&
operator|(
name|ImhDate
operator||
name|ImhTime
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|inputType
operator|=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_CLASS_DATETIME
expr_stmt|;
if|if
condition|(
operator|(
name|inputHints
operator|&
operator|(
name|ImhDate
operator||
name|ImhTime
operator|)
operator|)
operator|!=
operator|(
name|ImhDate
operator||
name|ImhTime
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhDate
operator|)
operator|!=
literal|0
condition|)
name|inputType
operator||=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_DATETIME_VARIATION_DATE
expr_stmt|;
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhTime
operator|)
operator|!=
literal|0
condition|)
name|inputType
operator||=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_DATETIME_VARIATION_TIME
expr_stmt|;
block|}
comment|// else {  TYPE_DATETIME_VARIATION_NORMAL(0) }
block|}
else|else
block|{
comment|// CLASS_TEXT
if|if
condition|(
operator|(
name|inputHints
operator|&
operator|(
name|ImhEmailCharactersOnly
operator||
name|ImhUrlCharactersOnly
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhUrlCharactersOnly
operator|)
operator|!=
literal|0
condition|)
block|{
name|inputType
operator||=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_TEXT_VARIATION_URI
expr_stmt|;
if|if
condition|(
name|enterKeyType
operator|==
literal|0
condition|)
comment|// not explicitly overridden
name|imeOptions
operator|=
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|EditorInfo
operator|.
name|IME_ACTION_GO
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhEmailCharactersOnly
operator|)
operator|!=
literal|0
condition|)
block|{
name|inputType
operator||=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_TEXT_VARIATION_EMAIL_ADDRESS
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhHiddenText
operator|)
operator|!=
literal|0
condition|)
block|{
name|inputType
operator||=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_TEXT_VARIATION_PASSWORD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhSensitiveData
operator|)
operator|!=
literal|0
operator|||
operator|(
name|inputHints
operator|&
name|ImhNoPredictiveText
operator|)
operator|!=
literal|0
condition|)
block|{
name|inputType
operator||=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_TEXT_VARIATION_VISIBLE_PASSWORD
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhMultiLine
operator|)
operator|!=
literal|0
condition|)
name|inputType
operator||=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_TEXT_FLAG_MULTI_LINE
expr_stmt|;
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhUppercaseOnly
operator|)
operator|!=
literal|0
condition|)
block|{
name|initialCapsMode
operator||=
name|android
operator|.
name|text
operator|.
name|TextUtils
operator|.
name|CAP_MODE_CHARACTERS
expr_stmt|;
name|inputType
operator||=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_TEXT_FLAG_CAP_CHARACTERS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhLowercaseOnly
operator|)
operator|==
literal|0
operator|&&
operator|(
name|inputHints
operator|&
name|ImhNoAutoUppercase
operator|)
operator|==
literal|0
condition|)
block|{
name|initialCapsMode
operator||=
name|android
operator|.
name|text
operator|.
name|TextUtils
operator|.
name|CAP_MODE_SENTENCES
expr_stmt|;
name|inputType
operator||=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_TEXT_FLAG_CAP_SENTENCES
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|inputHints
operator|&
name|ImhNoPredictiveText
operator|)
operator|!=
literal|0
operator|||
operator|(
name|inputHints
operator|&
name|ImhSensitiveData
operator|)
operator|!=
literal|0
operator|||
operator|(
name|inputHints
operator|&
name|ImhHiddenText
operator|)
operator|!=
literal|0
condition|)
block|{
name|inputType
operator||=
name|android
operator|.
name|text
operator|.
name|InputType
operator|.
name|TYPE_TEXT_FLAG_NO_SUGGESTIONS
expr_stmt|;
block|}
block|}
if|if
condition|(
name|enterKeyType
operator|==
literal|0
operator|&&
operator|(
name|inputHints
operator|&
name|ImhMultiLine
operator|)
operator|!=
literal|0
condition|)
name|imeOptions
operator|=
name|android
operator|.
name|view
operator|.
name|inputmethod
operator|.
name|EditorInfo
operator|.
name|IME_FLAG_NO_ENTER_ACTION
expr_stmt|;
name|m_editText
operator|.
name|setInitialCapsMode
argument_list|(
name|initialCapsMode
argument_list|)
expr_stmt|;
name|m_editText
operator|.
name|setImeOptions
argument_list|(
name|imeOptions
argument_list|)
expr_stmt|;
name|m_editText
operator|.
name|setInputType
argument_list|(
name|inputType
argument_list|)
expr_stmt|;
name|m_layout
operator|.
name|setLayoutParams
argument_list|(
name|m_editText
argument_list|,
operator|new
name|QtLayout
operator|.
name|LayoutParams
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|m_editText
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
name|m_editText
operator|.
name|postDelayed
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_imm
operator|.
name|showSoftInput
argument_list|(
name|m_editText
argument_list|,
literal|0
argument_list|,
operator|new
name|ResultReceiver
argument_list|(
operator|new
name|Handler
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onReceiveResult
parameter_list|(
name|int
name|resultCode
parameter_list|,
name|Bundle
name|resultData
parameter_list|)
block|{
switch|switch
condition|(
name|resultCode
condition|)
block|{
case|case
name|InputMethodManager
operator|.
name|RESULT_SHOWN
case|:
name|QtNativeInputConnection
operator|.
name|updateCursorPosition
argument_list|()
expr_stmt|;
comment|//FALLTHROUGH
case|case
name|InputMethodManager
operator|.
name|RESULT_UNCHANGED_SHOWN
case|:
name|setKeyboardVisibility
argument_list|(
literal|true
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_softInputMode
operator|==
literal|0
condition|)
block|{
comment|// probe for real keyboard height
name|m_layout
operator|.
name|postDelayed
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_keyboardIsVisible
condition|)
return|return;
name|DisplayMetrics
name|metrics
init|=
operator|new
name|DisplayMetrics
argument_list|()
decl_stmt|;
name|m_activity
operator|.
name|getWindowManager
argument_list|()
operator|.
name|getDefaultDisplay
argument_list|()
operator|.
name|getMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|Rect
name|r
init|=
operator|new
name|Rect
argument_list|()
decl_stmt|;
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|getDecorView
argument_list|()
operator|.
name|getWindowVisibleDisplayFrame
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|metrics
operator|.
name|heightPixels
operator|!=
name|r
operator|.
name|bottom
condition|)
block|{
if|if
condition|(
name|metrics
operator|.
name|widthPixels
operator|>
name|metrics
operator|.
name|heightPixels
condition|)
block|{
comment|// landscape
if|if
condition|(
name|m_landscapeKeyboardHeight
operator|!=
name|r
operator|.
name|bottom
condition|)
block|{
name|m_landscapeKeyboardHeight
operator|=
name|r
operator|.
name|bottom
expr_stmt|;
name|showSoftwareKeyboard
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|inputHints
argument_list|,
name|enterKeyType
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|m_portraitKeyboardHeight
operator|!=
name|r
operator|.
name|bottom
condition|)
block|{
name|m_portraitKeyboardHeight
operator|=
name|r
operator|.
name|bottom
expr_stmt|;
name|showSoftwareKeyboard
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|inputHints
argument_list|,
name|enterKeyType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// no luck ?
comment|// maybe the delay was too short, so let's make it longer
if|if
condition|(
name|m_probeKeyboardHeightDelay
operator|<
literal|1000
condition|)
name|m_probeKeyboardHeightDelay
operator|*=
literal|2
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|m_probeKeyboardHeightDelay
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|InputMethodManager
operator|.
name|RESULT_HIDDEN
case|:
case|case
name|InputMethodManager
operator|.
name|RESULT_UNCHANGED_HIDDEN
case|:
name|setKeyboardVisibility
argument_list|(
literal|false
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_editText
operator|.
name|m_optionsChanged
condition|)
block|{
name|m_imm
operator|.
name|restartInput
argument_list|(
name|m_editText
argument_list|)
expr_stmt|;
name|m_editText
operator|.
name|m_optionsChanged
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
DECL|method|hideSoftwareKeyboard
specifier|public
name|void
name|hideSoftwareKeyboard
parameter_list|()
block|{
if|if
condition|(
name|m_imm
operator|==
literal|null
condition|)
return|return;
name|m_imm
operator|.
name|hideSoftInputFromWindow
argument_list|(
name|m_editText
operator|.
name|getWindowToken
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|new
name|ResultReceiver
argument_list|(
operator|new
name|Handler
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onReceiveResult
parameter_list|(
name|int
name|resultCode
parameter_list|,
name|Bundle
name|resultData
parameter_list|)
block|{
switch|switch
condition|(
name|resultCode
condition|)
block|{
case|case
name|InputMethodManager
operator|.
name|RESULT_SHOWN
case|:
case|case
name|InputMethodManager
operator|.
name|RESULT_UNCHANGED_SHOWN
case|:
name|setKeyboardVisibility
argument_list|(
literal|true
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|InputMethodManager
operator|.
name|RESULT_HIDDEN
case|:
case|case
name|InputMethodManager
operator|.
name|RESULT_UNCHANGED_HIDDEN
case|:
name|setKeyboardVisibility
argument_list|(
literal|false
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getAppIconSize
name|String
name|getAppIconSize
parameter_list|(
name|Activity
name|a
parameter_list|)
block|{
name|int
name|size
init|=
name|a
operator|.
name|getResources
argument_list|()
operator|.
name|getDimensionPixelSize
argument_list|(
name|android
operator|.
name|R
operator|.
name|dimen
operator|.
name|app_icon_size
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
argument_list|<
literal|36
operator|||
name|size
argument_list|>
literal|512
condition|)
block|{
comment|// check size sanity
name|DisplayMetrics
name|metrics
init|=
operator|new
name|DisplayMetrics
argument_list|()
decl_stmt|;
name|a
operator|.
name|getWindowManager
argument_list|()
operator|.
name|getDefaultDisplay
argument_list|()
operator|.
name|getMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|size
operator|=
name|metrics
operator|.
name|densityDpi
operator|/
literal|10
operator|*
literal|3
expr_stmt|;
if|if
condition|(
name|size
operator|<
literal|36
condition|)
name|size
operator|=
literal|36
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|512
condition|)
name|size
operator|=
literal|512
expr_stmt|;
block|}
return|return
literal|"\tQT_ANDROID_APP_ICON_SIZE="
operator|+
name|size
return|;
block|}
DECL|method|updateSelection
specifier|public
name|void
name|updateSelection
parameter_list|(
name|int
name|selStart
parameter_list|,
name|int
name|selEnd
parameter_list|,
name|int
name|candidatesStart
parameter_list|,
name|int
name|candidatesEnd
parameter_list|)
block|{
if|if
condition|(
name|m_imm
operator|==
literal|null
condition|)
return|return;
name|m_imm
operator|.
name|updateSelection
argument_list|(
name|m_editText
argument_list|,
name|selStart
argument_list|,
name|selEnd
argument_list|,
name|candidatesStart
argument_list|,
name|candidatesEnd
argument_list|)
expr_stmt|;
block|}
DECL|method|loadApplication
specifier|public
name|boolean
name|loadApplication
parameter_list|(
name|Activity
name|activity
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|,
name|Bundle
name|loaderParams
parameter_list|)
block|{
comment|/// check parameters integrity
if|if
condition|(
operator|!
name|loaderParams
operator|.
name|containsKey
argument_list|(
name|NATIVE_LIBRARIES_KEY
argument_list|)
operator|||
operator|!
name|loaderParams
operator|.
name|containsKey
argument_list|(
name|BUNDLED_LIBRARIES_KEY
argument_list|)
operator|||
operator|!
name|loaderParams
operator|.
name|containsKey
argument_list|(
name|ENVIRONMENT_VARIABLES_KEY
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|m_activity
operator|=
name|activity
expr_stmt|;
name|setActionBarVisibility
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|setActivity
argument_list|(
name|m_activity
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|setClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
if|if
condition|(
name|loaderParams
operator|.
name|containsKey
argument_list|(
name|STATIC_INIT_CLASSES_KEY
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|className
range|:
name|loaderParams
operator|.
name|getStringArray
argument_list|(
name|STATIC_INIT_CLASSES_KEY
argument_list|)
control|)
block|{
if|if
condition|(
name|className
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Class
argument_list|<
name|?
argument_list|>
name|initClass
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|Object
name|staticInitDataObject
init|=
name|initClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// create an instance
name|Method
name|m
init|=
name|initClass
operator|.
name|getMethod
argument_list|(
literal|"setActivity"
argument_list|,
name|Activity
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|m
operator|.
name|invoke
argument_list|(
name|staticInitDataObject
argument_list|,
name|m_activity
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|QtNative
operator|.
name|loadQtLibraries
argument_list|(
name|loaderParams
operator|.
name|getStringArrayList
argument_list|(
name|NATIVE_LIBRARIES_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|libraries
init|=
name|loaderParams
operator|.
name|getStringArrayList
argument_list|(
name|BUNDLED_LIBRARIES_KEY
argument_list|)
decl_stmt|;
name|QtNative
operator|.
name|loadBundledLibraries
argument_list|(
name|libraries
argument_list|,
name|QtNativeLibrariesDir
operator|.
name|nativeLibrariesDir
argument_list|(
name|m_activity
argument_list|)
argument_list|)
expr_stmt|;
name|m_mainLib
operator|=
name|loaderParams
operator|.
name|getString
argument_list|(
name|MAIN_LIBRARY_KEY
argument_list|)
expr_stmt|;
comment|// older apps provide the main library as the last bundled library; look for this if the main library isn't provided
if|if
condition|(
literal|null
operator|==
name|m_mainLib
operator|&&
name|libraries
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|m_mainLib
operator|=
name|libraries
operator|.
name|get
argument_list|(
name|libraries
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|loaderParams
operator|.
name|containsKey
argument_list|(
name|EXTRACT_STYLE_KEY
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|loaderParams
operator|.
name|getString
argument_list|(
name|EXTRACT_STYLE_KEY
argument_list|)
decl_stmt|;
operator|new
name|ExtractStyle
argument_list|(
name|m_activity
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|m_super_dispatchKeyEvent
operator|=
name|m_activity
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"super_dispatchKeyEvent"
argument_list|,
name|KeyEvent
operator|.
name|class
argument_list|)
expr_stmt|;
name|m_super_onRestoreInstanceState
operator|=
name|m_activity
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"super_onRestoreInstanceState"
argument_list|,
name|Bundle
operator|.
name|class
argument_list|)
expr_stmt|;
name|m_super_onRetainNonConfigurationInstance
operator|=
name|m_activity
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"super_onRetainNonConfigurationInstance"
argument_list|)
expr_stmt|;
name|m_super_onSaveInstanceState
operator|=
name|m_activity
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"super_onSaveInstanceState"
argument_list|,
name|Bundle
operator|.
name|class
argument_list|)
expr_stmt|;
name|m_super_onKeyDown
operator|=
name|m_activity
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"super_onKeyDown"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|KeyEvent
operator|.
name|class
argument_list|)
expr_stmt|;
name|m_super_onKeyUp
operator|=
name|m_activity
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"super_onKeyUp"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|KeyEvent
operator|.
name|class
argument_list|)
expr_stmt|;
name|m_super_onConfigurationChanged
operator|=
name|m_activity
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"super_onConfigurationChanged"
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|m_super_onActivityResult
operator|=
name|m_activity
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"super_onActivityResult"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|Intent
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>=
literal|12
condition|)
block|{
try|try
block|{
name|m_super_dispatchGenericMotionEvent
operator|=
name|m_activity
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"super_dispatchGenericMotionEvent"
argument_list|,
name|MotionEvent
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|necessitasApiLevel
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|loaderParams
operator|.
name|containsKey
argument_list|(
name|NECESSITAS_API_LEVEL_KEY
argument_list|)
condition|)
name|necessitasApiLevel
operator|=
name|loaderParams
operator|.
name|getInt
argument_list|(
name|NECESSITAS_API_LEVEL_KEY
argument_list|)
expr_stmt|;
name|m_environmentVariables
operator|=
name|loaderParams
operator|.
name|getString
argument_list|(
name|ENVIRONMENT_VARIABLES_KEY
argument_list|)
expr_stmt|;
name|String
name|additionalEnvironmentVariables
init|=
literal|"QT_ANDROID_FONTS_MONOSPACE=Droid Sans Mono;Droid Sans;Droid Sans Fallback"
operator|+
literal|"\tQT_ANDROID_FONTS_SERIF=Droid Serif"
operator|+
literal|"\tNECESSITAS_API_LEVEL="
operator|+
name|necessitasApiLevel
operator|+
literal|"\tHOME="
operator|+
name|m_activity
operator|.
name|getFilesDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"\tTMPDIR="
operator|+
name|m_activity
operator|.
name|getFilesDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|<
literal|14
condition|)
name|additionalEnvironmentVariables
operator|+=
literal|"\tQT_ANDROID_FONTS=Droid Sans;Droid Sans Fallback"
expr_stmt|;
else|else
name|additionalEnvironmentVariables
operator|+=
literal|"\tQT_ANDROID_FONTS=Roboto;Droid Sans;Droid Sans Fallback"
expr_stmt|;
name|additionalEnvironmentVariables
operator|+=
name|getAppIconSize
argument_list|(
name|activity
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_environmentVariables
operator|!=
literal|null
operator|&&
name|m_environmentVariables
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|m_environmentVariables
operator|=
name|additionalEnvironmentVariables
operator|+
literal|"\t"
operator|+
name|m_environmentVariables
expr_stmt|;
else|else
name|m_environmentVariables
operator|=
name|additionalEnvironmentVariables
expr_stmt|;
if|if
condition|(
name|loaderParams
operator|.
name|containsKey
argument_list|(
name|APPLICATION_PARAMETERS_KEY
argument_list|)
condition|)
name|m_applicationParameters
operator|=
name|loaderParams
operator|.
name|getString
argument_list|(
name|APPLICATION_PARAMETERS_KEY
argument_list|)
expr_stmt|;
else|else
name|m_applicationParameters
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|m_softInputMode
operator|=
name|m_activity
operator|.
name|getPackageManager
argument_list|()
operator|.
name|getActivityInfo
argument_list|(
name|m_activity
operator|.
name|getComponentName
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|softInputMode
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|debugLog
specifier|public
specifier|static
name|void
name|debugLog
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"DEBUGGER: "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|class|DebugWaitRunnable
specifier|private
class|class
name|DebugWaitRunnable
implements|implements
name|Runnable
block|{
DECL|method|DebugWaitRunnable
specifier|public
name|DebugWaitRunnable
parameter_list|(
name|String
name|pingPongSocket
parameter_list|)
throws|throws
name|IOException
block|{
name|socket
operator|=
operator|new
name|LocalServerSocket
argument_list|(
name|pingPongSocket
argument_list|)
expr_stmt|;
block|}
DECL|field|wasFailure
specifier|public
name|boolean
name|wasFailure
decl_stmt|;
DECL|field|socket
specifier|private
name|LocalServerSocket
name|socket
decl_stmt|;
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|int
name|napTime
init|=
literal|200
decl_stmt|;
comment|// milliseconds between file accesses
specifier|final
name|int
name|timeOut
init|=
literal|30000
decl_stmt|;
comment|// ms until we give up on ping and pong
specifier|final
name|int
name|maxAttempts
init|=
name|timeOut
operator|/
name|napTime
decl_stmt|;
try|try
block|{
name|LocalSocket
name|connectionFromClient
init|=
name|socket
operator|.
name|accept
argument_list|()
decl_stmt|;
name|debugLog
argument_list|(
literal|"Debug socket accepted"
argument_list|)
expr_stmt|;
name|BufferedReader
name|inFromClient
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connectionFromClient
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DataOutputStream
name|outToClient
init|=
operator|new
name|DataOutputStream
argument_list|(
name|connectionFromClient
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|outToClient
operator|.
name|writeBytes
argument_list|(
literal|""
operator|+
name|android
operator|.
name|os
operator|.
name|Process
operator|.
name|myPid
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxAttempts
condition|;
name|i
operator|++
control|)
block|{
name|String
name|clientData
init|=
name|inFromClient
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|debugLog
argument_list|(
literal|"Incoming socket "
operator|+
name|clientData
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|clientData
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
if|if
condition|(
name|connectionFromClient
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|wasFailure
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|napTime
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|ioEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|wasFailure
operator|=
literal|true
expr_stmt|;
name|Log
operator|.
name|e
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"Can't start debugger"
operator|+
name|ioEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|interruptEx
parameter_list|)
block|{
name|wasFailure
operator|=
literal|true
expr_stmt|;
name|Log
operator|.
name|e
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"Can't start debugger"
operator|+
name|interruptEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|wasFailure
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{ }
block|}
block|}
empty_stmt|;
DECL|method|startApplication
specifier|public
name|boolean
name|startApplication
parameter_list|()
block|{
comment|// start application
try|try
block|{
comment|// FIXME turn on debuggable check
comment|// if the applications is debuggable and it has a native debug request
name|Bundle
name|extras
init|=
name|m_activity
operator|.
name|getIntent
argument_list|()
operator|.
name|getExtras
argument_list|()
decl_stmt|;
if|if
condition|(
name|extras
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
comment|/*(ai.flags&ApplicationInfo.FLAG_DEBUGGABLE) != 0&&*/
name|extras
operator|.
name|containsKey
argument_list|(
literal|"native_debug"
argument_list|)
operator|&&
name|extras
operator|.
name|getString
argument_list|(
literal|"native_debug"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|packagePath
init|=
name|m_activity
operator|.
name|getPackageManager
argument_list|()
operator|.
name|getApplicationInfo
argument_list|(
name|m_activity
operator|.
name|getPackageName
argument_list|()
argument_list|,
name|PackageManager
operator|.
name|GET_CONFIGURATIONS
argument_list|)
operator|.
name|dataDir
operator|+
literal|"/"
decl_stmt|;
name|String
name|gdbserverPath
init|=
name|extras
operator|.
name|containsKey
argument_list|(
literal|"gdbserver_path"
argument_list|)
condition|?
name|extras
operator|.
name|getString
argument_list|(
literal|"gdbserver_path"
argument_list|)
else|:
name|packagePath
operator|+
literal|"lib/gdbserver "
decl_stmt|;
name|String
name|socket
init|=
name|extras
operator|.
name|containsKey
argument_list|(
literal|"gdbserver_socket"
argument_list|)
condition|?
name|extras
operator|.
name|getString
argument_list|(
literal|"gdbserver_socket"
argument_list|)
else|:
literal|"+debug-socket"
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|gdbserverPath
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
name|gdbserverPath
operator|+=
literal|".so"
expr_stmt|;
comment|// start debugger
name|m_debuggerProcess
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|gdbserverPath
operator|+
name|socket
operator|+
literal|" --attach "
operator|+
name|android
operator|.
name|os
operator|.
name|Process
operator|.
name|myPid
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|File
argument_list|(
name|packagePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"Can't start debugger"
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"Can't start debugger"
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NameNotFoundException
name|e
parameter_list|)
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"Can't start debugger"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
comment|/*(ai.flags&ApplicationInfo.FLAG_DEBUGGABLE) != 0&&*/
name|extras
operator|.
name|containsKey
argument_list|(
literal|"debug_ping"
argument_list|)
operator|&&
name|extras
operator|.
name|getString
argument_list|(
literal|"debug_ping"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
try|try
block|{
name|debugLog
argument_list|(
literal|"extra parameters: "
operator|+
name|extras
argument_list|)
expr_stmt|;
name|String
name|packageName
init|=
name|m_activity
operator|.
name|getPackageName
argument_list|()
decl_stmt|;
name|String
name|pingFile
init|=
name|extras
operator|.
name|getString
argument_list|(
literal|"ping_file"
argument_list|)
decl_stmt|;
name|String
name|pongFile
init|=
name|extras
operator|.
name|getString
argument_list|(
literal|"pong_file"
argument_list|)
decl_stmt|;
name|String
name|gdbserverSocket
init|=
name|extras
operator|.
name|getString
argument_list|(
literal|"gdbserver_socket"
argument_list|)
decl_stmt|;
name|String
name|gdbserverCommand
init|=
name|extras
operator|.
name|getString
argument_list|(
literal|"gdbserver_command"
argument_list|)
decl_stmt|;
name|String
name|pingSocket
init|=
name|extras
operator|.
name|getString
argument_list|(
literal|"ping_socket"
argument_list|)
decl_stmt|;
name|boolean
name|usePing
init|=
name|pingFile
operator|!=
literal|null
decl_stmt|;
name|boolean
name|usePong
init|=
name|pongFile
operator|!=
literal|null
decl_stmt|;
name|boolean
name|useSocket
init|=
name|gdbserverSocket
operator|!=
literal|null
decl_stmt|;
name|boolean
name|usePingSocket
init|=
name|pingSocket
operator|!=
literal|null
decl_stmt|;
name|int
name|napTime
init|=
literal|200
decl_stmt|;
comment|// milliseconds between file accesses
name|int
name|timeOut
init|=
literal|30000
decl_stmt|;
comment|// ms until we give up on ping and pong
name|int
name|maxAttempts
init|=
name|timeOut
operator|/
name|napTime
decl_stmt|;
if|if
condition|(
name|gdbserverSocket
operator|!=
literal|null
condition|)
block|{
name|debugLog
argument_list|(
literal|"removing gdb socket "
operator|+
name|gdbserverSocket
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|gdbserverSocket
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|usePing
condition|)
block|{
name|debugLog
argument_list|(
literal|"removing ping file "
operator|+
name|pingFile
argument_list|)
expr_stmt|;
name|File
name|ping
init|=
operator|new
name|File
argument_list|(
name|pingFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|ping
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ping
operator|.
name|delete
argument_list|()
condition|)
name|debugLog
argument_list|(
literal|"ping file cannot be deleted"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|usePong
condition|)
block|{
name|debugLog
argument_list|(
literal|"removing pong file "
operator|+
name|pongFile
argument_list|)
expr_stmt|;
name|File
name|pong
init|=
operator|new
name|File
argument_list|(
name|pongFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|pong
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|pong
operator|.
name|delete
argument_list|()
condition|)
name|debugLog
argument_list|(
literal|"pong file cannot be deleted"
argument_list|)
expr_stmt|;
block|}
block|}
name|debugLog
argument_list|(
literal|"starting "
operator|+
name|gdbserverCommand
argument_list|)
expr_stmt|;
name|m_debuggerProcess
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|gdbserverCommand
argument_list|)
expr_stmt|;
name|debugLog
argument_list|(
literal|"gdbserver started"
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSocket
condition|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|maxAttempts
condition|;
operator|++
name|i
control|)
block|{
name|debugLog
argument_list|(
literal|"waiting for socket at "
operator|+
name|gdbserverSocket
operator|+
literal|", attempt "
operator|+
name|i
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|gdbserverSocket
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|file
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|file
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|napTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|maxAttempts
condition|)
block|{
name|debugLog
argument_list|(
literal|"time out when waiting for debug socket"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|debugLog
argument_list|(
literal|"socket ok"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debugLog
argument_list|(
literal|"socket not used"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|usePingSocket
condition|)
block|{
name|DebugWaitRunnable
name|runnable
init|=
operator|new
name|DebugWaitRunnable
argument_list|(
name|pingSocket
argument_list|)
decl_stmt|;
name|Thread
name|waitThread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|)
decl_stmt|;
name|waitThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|maxAttempts
operator|&&
name|waitThread
operator|.
name|isAlive
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|debugLog
argument_list|(
literal|"Waiting for debug socket connect"
argument_list|)
expr_stmt|;
name|debugLog
argument_list|(
literal|"go to sleep"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|napTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|maxAttempts
condition|)
block|{
name|debugLog
argument_list|(
literal|"time out when waiting for ping socket"
argument_list|)
expr_stmt|;
name|runnable
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|runnable
operator|.
name|wasFailure
condition|)
block|{
name|debugLog
argument_list|(
literal|"Could not connect to debug client"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|debugLog
argument_list|(
literal|"Got pid acknowledgment"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|usePing
condition|)
block|{
comment|// Tell we are ready.
name|debugLog
argument_list|(
literal|"writing ping at "
operator|+
name|pingFile
argument_list|)
expr_stmt|;
name|FileWriter
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|pingFile
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|""
operator|+
name|android
operator|.
name|os
operator|.
name|Process
operator|.
name|myPid
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|pingFile
argument_list|)
decl_stmt|;
name|file
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|file
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|file
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|debugLog
argument_list|(
literal|"wrote ping"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debugLog
argument_list|(
literal|"ping not requested"
argument_list|)
expr_stmt|;
block|}
comment|// Wait until other side is ready.
if|if
condition|(
name|usePong
condition|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|maxAttempts
condition|;
operator|++
name|i
control|)
block|{
name|debugLog
argument_list|(
literal|"waiting for pong at "
operator|+
name|pongFile
operator|+
literal|", attempt "
operator|+
name|i
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|pongFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
break|break;
block|}
name|debugLog
argument_list|(
literal|"go to sleep"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|napTime
argument_list|)
expr_stmt|;
block|}
name|debugLog
argument_list|(
literal|"Removing pingFile "
operator|+
name|pingFile
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|pingFile
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|maxAttempts
condition|)
block|{
name|debugLog
argument_list|(
literal|"time out when waiting for pong file"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|debugLog
argument_list|(
literal|"got pong "
operator|+
name|pongFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debugLog
argument_list|(
literal|"pong not requested"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"Can't start debugger"
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"Can't start debugger"
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
comment|/*(ai.flags&ApplicationInfo.FLAG_DEBUGGABLE) != 0&&*/
name|extras
operator|.
name|containsKey
argument_list|(
literal|"qml_debug"
argument_list|)
operator|&&
name|extras
operator|.
name|getString
argument_list|(
literal|"qml_debug"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|String
name|qmljsdebugger
decl_stmt|;
if|if
condition|(
name|extras
operator|.
name|containsKey
argument_list|(
literal|"qmljsdebugger"
argument_list|)
condition|)
block|{
name|qmljsdebugger
operator|=
name|extras
operator|.
name|getString
argument_list|(
literal|"qmljsdebugger"
argument_list|)
expr_stmt|;
name|qmljsdebugger
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// remove whitespace for security
block|}
else|else
block|{
name|qmljsdebugger
operator|=
literal|"port:3768"
expr_stmt|;
block|}
name|m_applicationParameters
operator|+=
literal|"\t-qmljsdebugger="
operator|+
name|qmljsdebugger
expr_stmt|;
block|}
if|if
condition|(
name|extras
operator|.
name|containsKey
argument_list|(
literal|"extraenvvars"
argument_list|)
condition|)
block|{
try|try
block|{
name|m_environmentVariables
operator|+=
literal|"\t"
operator|+
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|decode
argument_list|(
name|extras
operator|.
name|getString
argument_list|(
literal|"extraenvvars"
argument_list|)
argument_list|,
name|Base64
operator|.
name|DEFAULT
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|extras
operator|.
name|containsKey
argument_list|(
literal|"extraappparams"
argument_list|)
condition|)
block|{
try|try
block|{
name|m_applicationParameters
operator|+=
literal|"\t"
operator|+
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|decode
argument_list|(
name|extras
operator|.
name|getString
argument_list|(
literal|"extraappparams"
argument_list|)
argument_list|,
name|Base64
operator|.
name|DEFAULT
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// extras != null
if|if
condition|(
literal|null
operator|==
name|m_surfaces
condition|)
name|onCreate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|onTerminate
specifier|public
name|void
name|onTerminate
parameter_list|()
block|{
name|QtNative
operator|.
name|terminateQt
argument_list|()
expr_stmt|;
block|}
DECL|method|onCreate
specifier|public
name|void
name|onCreate
parameter_list|(
name|Bundle
name|savedInstanceState
parameter_list|)
block|{
name|m_quitApp
operator|=
literal|true
expr_stmt|;
name|Runnable
name|startApplication
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|savedInstanceState
condition|)
block|{
name|startApplication
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|String
name|nativeLibraryDir
init|=
name|QtNativeLibrariesDir
operator|.
name|nativeLibrariesDir
argument_list|(
name|m_activity
argument_list|)
decl_stmt|;
name|QtNative
operator|.
name|startApplication
argument_list|(
name|m_applicationParameters
argument_list|,
name|m_environmentVariables
argument_list|,
name|m_mainLib
argument_list|,
name|nativeLibraryDir
argument_list|)
expr_stmt|;
name|m_started
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|m_activity
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
name|m_layout
operator|=
operator|new
name|QtLayout
argument_list|(
name|m_activity
argument_list|,
name|startApplication
argument_list|)
expr_stmt|;
name|m_editText
operator|=
operator|new
name|QtEditText
argument_list|(
name|m_activity
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|m_imm
operator|=
operator|(
name|InputMethodManager
operator|)
name|m_activity
operator|.
name|getSystemService
argument_list|(
name|Context
operator|.
name|INPUT_METHOD_SERVICE
argument_list|)
expr_stmt|;
name|m_surfaces
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|QtSurface
argument_list|>
argument_list|()
expr_stmt|;
name|m_nativeViews
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|View
argument_list|>
argument_list|()
expr_stmt|;
name|m_activity
operator|.
name|registerForContextMenu
argument_list|(
name|m_layout
argument_list|)
expr_stmt|;
name|m_activity
operator|.
name|setContentView
argument_list|(
name|m_layout
argument_list|,
operator|new
name|ViewGroup
operator|.
name|LayoutParams
argument_list|(
name|ViewGroup
operator|.
name|LayoutParams
operator|.
name|MATCH_PARENT
argument_list|,
name|ViewGroup
operator|.
name|LayoutParams
operator|.
name|MATCH_PARENT
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|orientation
init|=
name|m_activity
operator|.
name|getResources
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|orientation
decl_stmt|;
name|int
name|rotation
init|=
name|m_activity
operator|.
name|getWindowManager
argument_list|()
operator|.
name|getDefaultDisplay
argument_list|()
operator|.
name|getRotation
argument_list|()
decl_stmt|;
name|boolean
name|rot90
init|=
operator|(
name|rotation
operator|==
name|Surface
operator|.
name|ROTATION_90
operator|||
name|rotation
operator|==
name|Surface
operator|.
name|ROTATION_270
operator|)
decl_stmt|;
name|boolean
name|currentlyLandscape
init|=
operator|(
name|orientation
operator|==
name|Configuration
operator|.
name|ORIENTATION_LANDSCAPE
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|currentlyLandscape
operator|&&
operator|!
name|rot90
operator|)
operator|||
operator|(
operator|!
name|currentlyLandscape
operator|&&
name|rot90
operator|)
condition|)
name|m_nativeOrientation
operator|=
name|Configuration
operator|.
name|ORIENTATION_LANDSCAPE
expr_stmt|;
else|else
name|m_nativeOrientation
operator|=
name|Configuration
operator|.
name|ORIENTATION_PORTRAIT
expr_stmt|;
name|QtNative
operator|.
name|handleOrientationChanged
argument_list|(
name|rotation
argument_list|,
name|m_nativeOrientation
argument_list|)
expr_stmt|;
name|m_currentRotation
operator|=
name|rotation
expr_stmt|;
name|m_layout
operator|.
name|getViewTreeObserver
argument_list|()
operator|.
name|addOnPreDrawListener
argument_list|(
operator|new
name|ViewTreeObserver
operator|.
name|OnPreDrawListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onPreDraw
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_keyboardIsVisible
condition|)
return|return
literal|true
return|;
name|Rect
name|r
init|=
operator|new
name|Rect
argument_list|()
decl_stmt|;
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|getDecorView
argument_list|()
operator|.
name|getWindowVisibleDisplayFrame
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|DisplayMetrics
name|metrics
init|=
operator|new
name|DisplayMetrics
argument_list|()
decl_stmt|;
name|m_activity
operator|.
name|getWindowManager
argument_list|()
operator|.
name|getDefaultDisplay
argument_list|()
operator|.
name|getMetrics
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
specifier|final
name|int
name|kbHeight
init|=
name|metrics
operator|.
name|heightPixels
operator|-
name|r
operator|.
name|bottom
decl_stmt|;
specifier|final
name|int
index|[]
name|location
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
name|m_layout
operator|.
name|getLocationOnScreen
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|keyboardGeometryChanged
argument_list|(
name|location
index|[
literal|0
index|]
argument_list|,
name|r
operator|.
name|bottom
operator|-
name|location
index|[
literal|1
index|]
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|kbHeight
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeAccessibility
specifier|public
name|void
name|initializeAccessibility
parameter_list|()
block|{
comment|// Initialize accessibility
try|try
block|{
specifier|final
name|String
name|a11yDelegateClassName
init|=
literal|"org.qtproject.qt5.android.accessibility.QtAccessibilityDelegate"
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|qtDelegateClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|a11yDelegateClassName
argument_list|)
decl_stmt|;
name|Constructor
name|constructor
init|=
name|qtDelegateClass
operator|.
name|getConstructor
argument_list|(
name|android
operator|.
name|app
operator|.
name|Activity
operator|.
name|class
argument_list|,
name|android
operator|.
name|view
operator|.
name|ViewGroup
operator|.
name|class
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|accessibilityDelegate
init|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|m_activity
argument_list|,
name|m_layout
argument_list|,
name|this
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// Class not found is fine since we are compatible with Android API< 16, but the function will
comment|// only be available with that API level.
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Unknown exception means something went wrong.
name|Log
operator|.
name|w
argument_list|(
literal|"Qt A11y"
argument_list|,
literal|"Unknown exception: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onConfigurationChanged
specifier|public
name|void
name|onConfigurationChanged
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
try|try
block|{
name|m_super_onConfigurationChanged
operator|.
name|invoke
argument_list|(
name|m_activity
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|int
name|rotation
init|=
name|m_activity
operator|.
name|getWindowManager
argument_list|()
operator|.
name|getDefaultDisplay
argument_list|()
operator|.
name|getRotation
argument_list|()
decl_stmt|;
if|if
condition|(
name|rotation
operator|!=
name|m_currentRotation
condition|)
block|{
name|QtNative
operator|.
name|handleOrientationChanged
argument_list|(
name|rotation
argument_list|,
name|m_nativeOrientation
argument_list|)
expr_stmt|;
block|}
name|m_currentRotation
operator|=
name|rotation
expr_stmt|;
block|}
DECL|method|onDestroy
specifier|public
name|void
name|onDestroy
parameter_list|()
block|{
if|if
condition|(
name|m_quitApp
condition|)
block|{
name|QtNative
operator|.
name|terminateQt
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_debuggerProcess
operator|!=
literal|null
condition|)
name|m_debuggerProcess
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// FIXME remove it or find a better way
block|}
block|}
DECL|method|onPause
specifier|public
name|void
name|onPause
parameter_list|()
block|{
name|QtNative
operator|.
name|setApplicationState
argument_list|(
name|ApplicationInactive
argument_list|)
expr_stmt|;
block|}
DECL|method|onResume
specifier|public
name|void
name|onResume
parameter_list|()
block|{
name|QtNative
operator|.
name|setApplicationState
argument_list|(
name|ApplicationActive
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_started
condition|)
block|{
name|QtNative
operator|.
name|updateWindow
argument_list|()
expr_stmt|;
name|updateFullScreen
argument_list|()
expr_stmt|;
comment|// Suspending the app clears the immersive mode, so we need to set it again.
block|}
block|}
DECL|method|onNewIntent
specifier|public
name|void
name|onNewIntent
parameter_list|(
name|Intent
name|data
parameter_list|)
block|{
name|QtNative
operator|.
name|onNewIntent
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|onActivityResult
specifier|public
name|void
name|onActivityResult
parameter_list|(
name|int
name|requestCode
parameter_list|,
name|int
name|resultCode
parameter_list|,
name|Intent
name|data
parameter_list|)
block|{
try|try
block|{
name|m_super_onActivityResult
operator|.
name|invoke
argument_list|(
name|m_activity
argument_list|,
name|requestCode
argument_list|,
name|resultCode
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|QtNative
operator|.
name|onActivityResult
argument_list|(
name|requestCode
argument_list|,
name|resultCode
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|onStop
specifier|public
name|void
name|onStop
parameter_list|()
block|{
name|QtNative
operator|.
name|setApplicationState
argument_list|(
name|ApplicationSuspended
argument_list|)
expr_stmt|;
block|}
DECL|method|onRetainNonConfigurationInstance
specifier|public
name|Object
name|onRetainNonConfigurationInstance
parameter_list|()
block|{
try|try
block|{
name|m_super_onRetainNonConfigurationInstance
operator|.
name|invoke
argument_list|(
name|m_activity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|m_quitApp
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|onSaveInstanceState
specifier|public
name|void
name|onSaveInstanceState
parameter_list|(
name|Bundle
name|outState
parameter_list|)
block|{
try|try
block|{
name|m_super_onSaveInstanceState
operator|.
name|invoke
argument_list|(
name|m_activity
argument_list|,
name|outState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|outState
operator|.
name|putBoolean
argument_list|(
literal|"FullScreen"
argument_list|,
name|m_fullScreen
argument_list|)
expr_stmt|;
name|outState
operator|.
name|putBoolean
argument_list|(
literal|"Started"
argument_list|,
name|m_started
argument_list|)
expr_stmt|;
comment|// It should never
block|}
DECL|method|onRestoreInstanceState
specifier|public
name|void
name|onRestoreInstanceState
parameter_list|(
name|Bundle
name|savedInstanceState
parameter_list|)
block|{
try|try
block|{
name|m_super_onRestoreInstanceState
operator|.
name|invoke
argument_list|(
name|m_activity
argument_list|,
name|savedInstanceState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|m_started
operator|=
name|savedInstanceState
operator|.
name|getBoolean
argument_list|(
literal|"Started"
argument_list|)
expr_stmt|;
comment|// FIXME restore all surfaces
block|}
DECL|method|onKeyDown
specifier|public
name|boolean
name|onKeyDown
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_started
condition|)
return|return
literal|false
return|;
name|m_metaState
operator|=
name|MetaKeyKeyListener
operator|.
name|handleKeyDown
argument_list|(
name|m_metaState
argument_list|,
name|keyCode
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|int
name|c
init|=
name|event
operator|.
name|getUnicodeChar
argument_list|(
name|MetaKeyKeyListener
operator|.
name|getMetaState
argument_list|(
name|m_metaState
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|lc
init|=
name|c
decl_stmt|;
name|m_metaState
operator|=
name|MetaKeyKeyListener
operator|.
name|adjustMetaAfterKeypress
argument_list|(
name|m_metaState
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|c
operator|&
name|KeyCharacterMap
operator|.
name|COMBINING_ACCENT
operator|)
operator|!=
literal|0
condition|)
block|{
name|c
operator|=
name|c
operator|&
name|KeyCharacterMap
operator|.
name|COMBINING_ACCENT_MASK
expr_stmt|;
name|int
name|composed
init|=
name|KeyEvent
operator|.
name|getDeadChar
argument_list|(
name|m_lastChar
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|c
operator|=
name|composed
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|keyCode
operator|==
name|KeyEvent
operator|.
name|KEYCODE_VOLUME_UP
operator|||
name|keyCode
operator|==
name|KeyEvent
operator|.
name|KEYCODE_VOLUME_DOWN
operator|||
name|keyCode
operator|==
name|KeyEvent
operator|.
name|KEYCODE_MUTE
operator|)
operator|&&
name|System
operator|.
name|getenv
argument_list|(
literal|"QT_ANDROID_VOLUME_KEYS"
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|m_lastChar
operator|=
name|lc
expr_stmt|;
if|if
condition|(
name|keyCode
operator|==
name|KeyEvent
operator|.
name|KEYCODE_BACK
condition|)
block|{
name|m_backKeyPressedSent
operator|=
operator|!
name|m_keyboardIsVisible
expr_stmt|;
if|if
condition|(
operator|!
name|m_backKeyPressedSent
condition|)
return|return
literal|true
return|;
block|}
name|QtNative
operator|.
name|keyDown
argument_list|(
name|keyCode
argument_list|,
name|c
argument_list|,
name|event
operator|.
name|getMetaState
argument_list|()
argument_list|,
name|event
operator|.
name|getRepeatCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|onKeyUp
specifier|public
name|boolean
name|onKeyUp
parameter_list|(
name|int
name|keyCode
parameter_list|,
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_started
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|keyCode
operator|==
name|KeyEvent
operator|.
name|KEYCODE_VOLUME_UP
operator|||
name|keyCode
operator|==
name|KeyEvent
operator|.
name|KEYCODE_VOLUME_DOWN
operator|||
name|keyCode
operator|==
name|KeyEvent
operator|.
name|KEYCODE_MUTE
operator|)
operator|&&
name|System
operator|.
name|getenv
argument_list|(
literal|"QT_ANDROID_VOLUME_KEYS"
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|keyCode
operator|==
name|KeyEvent
operator|.
name|KEYCODE_BACK
operator|&&
operator|!
name|m_backKeyPressedSent
condition|)
block|{
name|hideSoftwareKeyboard
argument_list|()
expr_stmt|;
name|setKeyboardVisibility
argument_list|(
literal|false
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|m_metaState
operator|=
name|MetaKeyKeyListener
operator|.
name|handleKeyUp
argument_list|(
name|m_metaState
argument_list|,
name|keyCode
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|keyUp
argument_list|(
name|keyCode
argument_list|,
name|event
operator|.
name|getUnicodeChar
argument_list|()
argument_list|,
name|event
operator|.
name|getMetaState
argument_list|()
argument_list|,
name|event
operator|.
name|getRepeatCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|dispatchKeyEvent
specifier|public
name|boolean
name|dispatchKeyEvent
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|m_started
operator|&&
name|event
operator|.
name|getAction
argument_list|()
operator|==
name|KeyEvent
operator|.
name|ACTION_MULTIPLE
operator|&&
name|event
operator|.
name|getCharacters
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getCharacters
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
literal|0
condition|)
block|{
name|QtNative
operator|.
name|keyDown
argument_list|(
literal|0
argument_list|,
name|event
operator|.
name|getCharacters
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|event
operator|.
name|getMetaState
argument_list|()
argument_list|,
name|event
operator|.
name|getRepeatCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QtNative
operator|.
name|keyUp
argument_list|(
literal|0
argument_list|,
name|event
operator|.
name|getCharacters
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|event
operator|.
name|getMetaState
argument_list|()
argument_list|,
name|event
operator|.
name|getRepeatCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QtNative
operator|.
name|dispatchKeyEvent
argument_list|(
name|event
argument_list|)
condition|)
return|return
literal|true
return|;
try|try
block|{
return|return
operator|(
name|Boolean
operator|)
name|m_super_dispatchKeyEvent
operator|.
name|invoke
argument_list|(
name|m_activity
argument_list|,
name|event
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|field|m_optionsMenuIsVisible
specifier|private
name|boolean
name|m_optionsMenuIsVisible
init|=
literal|false
decl_stmt|;
DECL|method|onCreateOptionsMenu
specifier|public
name|boolean
name|onCreateOptionsMenu
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
name|menu
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|onPrepareOptionsMenu
specifier|public
name|boolean
name|onPrepareOptionsMenu
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
name|m_optionsMenuIsVisible
operator|=
literal|true
expr_stmt|;
name|boolean
name|res
init|=
name|QtNative
operator|.
name|onPrepareOptionsMenu
argument_list|(
name|menu
argument_list|)
decl_stmt|;
name|setActionBarVisibility
argument_list|(
name|res
operator|&&
name|menu
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|onOptionsItemSelected
specifier|public
name|boolean
name|onOptionsItemSelected
parameter_list|(
name|MenuItem
name|item
parameter_list|)
block|{
return|return
name|QtNative
operator|.
name|onOptionsItemSelected
argument_list|(
name|item
operator|.
name|getItemId
argument_list|()
argument_list|,
name|item
operator|.
name|isChecked
argument_list|()
argument_list|)
return|;
block|}
DECL|method|onOptionsMenuClosed
specifier|public
name|void
name|onOptionsMenuClosed
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
name|m_optionsMenuIsVisible
operator|=
literal|false
expr_stmt|;
name|QtNative
operator|.
name|onOptionsMenuClosed
argument_list|(
name|menu
argument_list|)
expr_stmt|;
block|}
DECL|method|resetOptionsMenu
specifier|public
name|void
name|resetOptionsMenu
parameter_list|()
block|{
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>
literal|10
condition|)
block|{
try|try
block|{
name|Activity
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"invalidateOptionsMenu"
argument_list|)
operator|.
name|invoke
argument_list|(
name|m_activity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|m_optionsMenuIsVisible
condition|)
name|m_activity
operator|.
name|closeOptionsMenu
argument_list|()
expr_stmt|;
block|}
DECL|field|m_contextMenuVisible
specifier|private
name|boolean
name|m_contextMenuVisible
init|=
literal|false
decl_stmt|;
DECL|method|onCreateContextMenu
specifier|public
name|void
name|onCreateContextMenu
parameter_list|(
name|ContextMenu
name|menu
parameter_list|,
name|View
name|v
parameter_list|,
name|ContextMenuInfo
name|menuInfo
parameter_list|)
block|{
name|menu
operator|.
name|clearHeader
argument_list|()
expr_stmt|;
name|QtNative
operator|.
name|onCreateContextMenu
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|m_contextMenuVisible
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|onCreatePopupMenu
specifier|public
name|void
name|onCreatePopupMenu
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
name|QtNative
operator|.
name|fillContextMenu
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|m_contextMenuVisible
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|onContextMenuClosed
specifier|public
name|void
name|onContextMenuClosed
parameter_list|(
name|Menu
name|menu
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_contextMenuVisible
condition|)
return|return;
name|m_contextMenuVisible
operator|=
literal|false
expr_stmt|;
name|QtNative
operator|.
name|onContextMenuClosed
argument_list|(
name|menu
argument_list|)
expr_stmt|;
block|}
DECL|method|onContextItemSelected
specifier|public
name|boolean
name|onContextItemSelected
parameter_list|(
name|MenuItem
name|item
parameter_list|)
block|{
name|m_contextMenuVisible
operator|=
literal|false
expr_stmt|;
return|return
name|QtNative
operator|.
name|onContextItemSelected
argument_list|(
name|item
operator|.
name|getItemId
argument_list|()
argument_list|,
name|item
operator|.
name|isChecked
argument_list|()
argument_list|)
return|;
block|}
DECL|method|openContextMenu
specifier|public
name|void
name|openContextMenu
parameter_list|(
specifier|final
name|int
name|x
parameter_list|,
specifier|final
name|int
name|y
parameter_list|,
specifier|final
name|int
name|w
parameter_list|,
specifier|final
name|int
name|h
parameter_list|)
block|{
name|m_layout
operator|.
name|postDelayed
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|<
literal|11
operator|||
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
condition|)
block|{
name|m_activity
operator|.
name|openContextMenu
argument_list|(
name|m_layout
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|<
literal|14
condition|)
block|{
name|m_layout
operator|.
name|setLayoutParams
argument_list|(
name|m_editText
argument_list|,
operator|new
name|QtLayout
operator|.
name|LayoutParams
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QtPopupMenu
operator|.
name|getInstance
argument_list|()
operator|.
name|showMenu
argument_list|(
name|m_editText
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_layout
operator|.
name|setLayoutParams
argument_list|(
name|m_editText
argument_list|,
operator|new
name|QtLayout
operator|.
name|LayoutParams
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QtPopupMenu14
operator|.
name|getInstance
argument_list|()
operator|.
name|showMenu
argument_list|(
name|m_editText
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
DECL|method|closeContextMenu
specifier|public
name|void
name|closeContextMenu
parameter_list|()
block|{
name|m_activity
operator|.
name|closeContextMenu
argument_list|()
expr_stmt|;
block|}
DECL|method|hasPermanentMenuKey
specifier|private
name|boolean
name|hasPermanentMenuKey
parameter_list|()
block|{
try|try
block|{
return|return
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|<
literal|11
operator|||
operator|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>=
literal|14
operator|&&
operator|(
name|Boolean
operator|)
name|ViewConfiguration
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"hasPermanentMenuKey"
argument_list|)
operator|.
name|invoke
argument_list|(
name|ViewConfiguration
operator|.
name|get
argument_list|(
name|m_activity
argument_list|)
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|getActionBar
specifier|private
name|Object
name|getActionBar
parameter_list|()
block|{
try|try
block|{
return|return
name|Activity
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getActionBar"
argument_list|)
operator|.
name|invoke
argument_list|(
name|m_activity
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|setActionBarVisibility
specifier|private
name|void
name|setActionBarVisibility
parameter_list|(
name|boolean
name|visible
parameter_list|)
block|{
if|if
condition|(
name|hasPermanentMenuKey
argument_list|()
operator|||
operator|!
name|visible
condition|)
block|{
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>
literal|10
operator|&&
name|getActionBar
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"android.app.ActionBar"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"hide"
argument_list|)
operator|.
name|invoke
argument_list|(
name|getActionBar
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|Build
operator|.
name|VERSION
operator|.
name|SDK_INT
operator|>
literal|10
operator|&&
name|getActionBar
argument_list|()
operator|!=
literal|null
condition|)
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"android.app.ActionBar"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"show"
argument_list|)
operator|.
name|invoke
argument_list|(
name|getActionBar
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|insertNativeView
specifier|public
name|void
name|insertNativeView
parameter_list|(
name|int
name|id
parameter_list|,
name|View
name|view
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
if|if
condition|(
name|m_dummyView
operator|!=
literal|null
condition|)
block|{
name|m_layout
operator|.
name|removeView
argument_list|(
name|m_dummyView
argument_list|)
expr_stmt|;
name|m_dummyView
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|m_nativeViews
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
name|m_layout
operator|.
name|removeView
argument_list|(
name|m_nativeViews
operator|.
name|remove
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|<
literal|0
operator|||
name|h
operator|<
literal|0
condition|)
block|{
name|view
operator|.
name|setLayoutParams
argument_list|(
operator|new
name|ViewGroup
operator|.
name|LayoutParams
argument_list|(
name|ViewGroup
operator|.
name|LayoutParams
operator|.
name|MATCH_PARENT
argument_list|,
name|ViewGroup
operator|.
name|LayoutParams
operator|.
name|MATCH_PARENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|view
operator|.
name|setLayoutParams
argument_list|(
operator|new
name|QtLayout
operator|.
name|LayoutParams
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|view
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|m_layout
operator|.
name|addView
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|m_nativeViews
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
DECL|method|createSurface
specifier|public
name|void
name|createSurface
parameter_list|(
name|int
name|id
parameter_list|,
name|boolean
name|onTop
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|imageDepth
parameter_list|)
block|{
if|if
condition|(
name|m_surfaces
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|TypedValue
name|attr
init|=
operator|new
name|TypedValue
argument_list|()
decl_stmt|;
name|m_activity
operator|.
name|getTheme
argument_list|()
operator|.
name|resolveAttribute
argument_list|(
name|android
operator|.
name|R
operator|.
name|attr
operator|.
name|windowBackground
argument_list|,
name|attr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|attr
operator|.
name|type
operator|>=
name|TypedValue
operator|.
name|TYPE_FIRST_COLOR_INT
operator|&&
name|attr
operator|.
name|type
operator|<=
name|TypedValue
operator|.
name|TYPE_LAST_COLOR_INT
condition|)
block|{
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|setBackgroundDrawable
argument_list|(
operator|new
name|ColorDrawable
argument_list|(
name|attr
operator|.
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_activity
operator|.
name|getWindow
argument_list|()
operator|.
name|setBackgroundDrawable
argument_list|(
name|m_activity
operator|.
name|getResources
argument_list|()
operator|.
name|getDrawable
argument_list|(
name|attr
operator|.
name|resourceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_dummyView
operator|!=
literal|null
condition|)
block|{
name|m_layout
operator|.
name|removeView
argument_list|(
name|m_dummyView
argument_list|)
expr_stmt|;
name|m_dummyView
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|m_surfaces
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
name|m_layout
operator|.
name|removeView
argument_list|(
name|m_surfaces
operator|.
name|remove
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|QtSurface
name|surface
init|=
operator|new
name|QtSurface
argument_list|(
name|m_activity
argument_list|,
name|id
argument_list|,
name|onTop
argument_list|,
name|imageDepth
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|<
literal|0
operator|||
name|h
operator|<
literal|0
condition|)
block|{
name|surface
operator|.
name|setLayoutParams
argument_list|(
operator|new
name|ViewGroup
operator|.
name|LayoutParams
argument_list|(
name|ViewGroup
operator|.
name|LayoutParams
operator|.
name|MATCH_PARENT
argument_list|,
name|ViewGroup
operator|.
name|LayoutParams
operator|.
name|MATCH_PARENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|surface
operator|.
name|setLayoutParams
argument_list|(
operator|new
name|QtLayout
operator|.
name|LayoutParams
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Native views are always inserted in the end of the stack (i.e., on top).
comment|// All other views are stacked based on the order they are created.
specifier|final
name|int
name|surfaceCount
init|=
name|getSurfaceCount
argument_list|()
decl_stmt|;
name|m_layout
operator|.
name|addView
argument_list|(
name|surface
argument_list|,
name|surfaceCount
argument_list|)
expr_stmt|;
name|m_surfaces
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|surface
argument_list|)
expr_stmt|;
block|}
DECL|method|setSurfaceGeometry
specifier|public
name|void
name|setSurfaceGeometry
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
if|if
condition|(
name|m_surfaces
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|QtSurface
name|surface
init|=
name|m_surfaces
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|surface
operator|.
name|setLayoutParams
argument_list|(
operator|new
name|QtLayout
operator|.
name|LayoutParams
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_nativeViews
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|View
name|view
init|=
name|m_nativeViews
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|view
operator|.
name|setLayoutParams
argument_list|(
operator|new
name|QtLayout
operator|.
name|LayoutParams
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"Surface "
operator|+
name|id
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
DECL|method|destroySurface
specifier|public
name|void
name|destroySurface
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|View
name|view
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|m_surfaces
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|view
operator|=
name|m_surfaces
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_nativeViews
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|view
operator|=
name|m_nativeViews
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtNative
operator|.
name|QtTAG
argument_list|,
literal|"Surface "
operator|+
name|id
operator|+
literal|" not found!"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|view
operator|==
literal|null
condition|)
return|return;
comment|// Keep last frame in stack until it is replaced to get correct
comment|// shutdown transition
if|if
condition|(
name|m_surfaces
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|m_nativeViews
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|m_dummyView
operator|=
name|view
expr_stmt|;
block|}
else|else
block|{
name|m_layout
operator|.
name|removeView
argument_list|(
name|view
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSurfaceCount
specifier|public
name|int
name|getSurfaceCount
parameter_list|()
block|{
return|return
name|m_surfaces
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|bringChildToFront
specifier|public
name|void
name|bringChildToFront
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|View
name|view
init|=
name|m_surfaces
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|surfaceCount
init|=
name|getSurfaceCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|surfaceCount
operator|>
literal|0
condition|)
name|m_layout
operator|.
name|moveChild
argument_list|(
name|view
argument_list|,
name|surfaceCount
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|view
operator|=
name|m_nativeViews
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
name|m_layout
operator|.
name|moveChild
argument_list|(
name|view
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|bringChildToBack
specifier|public
name|void
name|bringChildToBack
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|View
name|view
init|=
name|m_surfaces
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|m_layout
operator|.
name|moveChild
argument_list|(
name|view
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|view
operator|=
name|m_nativeViews
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|index
init|=
name|getSurfaceCount
argument_list|()
decl_stmt|;
name|m_layout
operator|.
name|moveChild
argument_list|(
name|view
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dispatchGenericMotionEvent
specifier|public
name|boolean
name|dispatchGenericMotionEvent
parameter_list|(
name|MotionEvent
name|ev
parameter_list|)
block|{
if|if
condition|(
name|m_started
operator|&&
name|QtNative
operator|.
name|dispatchGenericMotionEvent
argument_list|(
name|ev
argument_list|)
condition|)
return|return
literal|true
return|;
try|try
block|{
return|return
operator|(
name|Boolean
operator|)
name|m_super_dispatchGenericMotionEvent
operator|.
name|invoke
argument_list|(
name|m_activity
argument_list|,
name|ev
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
