begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 BogDan Vatra<bogdan@kde.org> ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the Android port of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_package
DECL|package|org.qtproject.qt5.android
package|package
name|org
operator|.
name|qtproject
operator|.
name|qt5
operator|.
name|android
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import
begin_import
import|import
name|android
operator|.
name|app
operator|.
name|Activity
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|android
operator|.
name|content
operator|.
name|Intent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|net
operator|.
name|Uri
import|;
end_import
begin_import
import|import
name|android
operator|.
name|text
operator|.
name|ClipboardManager
import|;
end_import
begin_import
import|import
name|android
operator|.
name|util
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|ContextMenu
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|Menu
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|MotionEvent
import|;
end_import
begin_import
import|import
name|android
operator|.
name|view
operator|.
name|View
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import
begin_class
DECL|class|QtNative
specifier|public
class|class
name|QtNative
block|{
DECL|field|m_activity
specifier|private
specifier|static
name|Activity
name|m_activity
init|=
literal|null
decl_stmt|;
DECL|field|m_activityDelegate
specifier|private
specifier|static
name|QtActivityDelegate
name|m_activityDelegate
init|=
literal|null
decl_stmt|;
DECL|field|m_mainActivityMutex
specifier|public
specifier|static
name|Object
name|m_mainActivityMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|// mutex used to synchronize runnable operations
DECL|field|QtTAG
specifier|public
specifier|static
specifier|final
name|String
name|QtTAG
init|=
literal|"Qt JAVA"
decl_stmt|;
comment|// string used for Log.x
DECL|field|m_lostActions
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
name|m_lostActions
init|=
operator|new
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
comment|// a list containing all actions which could not be performed (e.g. the main activity is destroyed, etc.)
DECL|field|m_started
specifier|private
specifier|static
name|boolean
name|m_started
init|=
literal|false
decl_stmt|;
DECL|field|m_displayMetricsScreenWidthPixels
specifier|private
specifier|static
name|int
name|m_displayMetricsScreenWidthPixels
init|=
literal|0
decl_stmt|;
DECL|field|m_displayMetricsScreenHeightPixels
specifier|private
specifier|static
name|int
name|m_displayMetricsScreenHeightPixels
init|=
literal|0
decl_stmt|;
DECL|field|m_displayMetricsDesktopWidthPixels
specifier|private
specifier|static
name|int
name|m_displayMetricsDesktopWidthPixels
init|=
literal|0
decl_stmt|;
DECL|field|m_displayMetricsDesktopHeightPixels
specifier|private
specifier|static
name|int
name|m_displayMetricsDesktopHeightPixels
init|=
literal|0
decl_stmt|;
DECL|field|m_displayMetricsXDpi
specifier|private
specifier|static
name|double
name|m_displayMetricsXDpi
init|=
literal|.0
decl_stmt|;
DECL|field|m_displayMetricsYDpi
specifier|private
specifier|static
name|double
name|m_displayMetricsYDpi
init|=
literal|.0
decl_stmt|;
DECL|field|m_displayMetricsScaledDensity
specifier|private
specifier|static
name|double
name|m_displayMetricsScaledDensity
init|=
literal|1.0
decl_stmt|;
DECL|field|m_oldx
DECL|field|m_oldy
specifier|private
specifier|static
name|int
name|m_oldx
decl_stmt|,
name|m_oldy
decl_stmt|;
DECL|field|m_moveThreshold
specifier|private
specifier|static
specifier|final
name|int
name|m_moveThreshold
init|=
literal|0
decl_stmt|;
DECL|field|m_clipboardManager
specifier|private
specifier|static
name|ClipboardManager
name|m_clipboardManager
init|=
literal|null
decl_stmt|;
DECL|field|m_classLoader
specifier|private
specifier|static
name|ClassLoader
name|m_classLoader
init|=
literal|null
decl_stmt|;
DECL|method|classLoader
specifier|public
specifier|static
name|ClassLoader
name|classLoader
parameter_list|()
block|{
return|return
name|m_classLoader
return|;
block|}
DECL|method|setClassLoader
specifier|public
specifier|static
name|void
name|setClassLoader
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|m_classLoader
operator|=
name|classLoader
expr_stmt|;
block|}
DECL|method|activity
specifier|public
specifier|static
name|Activity
name|activity
parameter_list|()
block|{
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
return|return
name|m_activity
return|;
block|}
block|}
DECL|method|activityDelegate
specifier|public
specifier|static
name|QtActivityDelegate
name|activityDelegate
parameter_list|()
block|{
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
return|return
name|m_activityDelegate
return|;
block|}
block|}
DECL|method|openURL
specifier|public
specifier|static
name|void
name|openURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
try|try
block|{
name|Uri
name|uri
init|=
name|Uri
operator|.
name|parse
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|Intent
name|intent
init|=
operator|new
name|Intent
argument_list|(
name|Intent
operator|.
name|ACTION_VIEW
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|activity
argument_list|()
operator|.
name|startActivity
argument_list|(
name|intent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|// this method loads full path libs
DECL|method|loadQtLibraries
specifier|public
specifier|static
name|void
name|loadQtLibraries
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|libraries
parameter_list|)
block|{
if|if
condition|(
name|libraries
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|String
name|libName
range|:
name|libraries
control|)
block|{
try|try
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|libName
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
name|System
operator|.
name|load
argument_list|(
name|libName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|QtTAG
argument_list|,
literal|"Can't load '"
operator|+
name|libName
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|QtTAG
argument_list|,
literal|"Can't load '"
operator|+
name|libName
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// this method loads bundled libs by name.
DECL|method|loadBundledLibraries
specifier|public
specifier|static
name|void
name|loadBundledLibraries
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|libraries
parameter_list|,
name|String
name|nativeLibraryDir
parameter_list|)
block|{
if|if
condition|(
name|libraries
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|String
name|libName
range|:
name|libraries
control|)
block|{
try|try
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|nativeLibraryDir
operator|+
literal|"lib"
operator|+
name|libName
operator|+
literal|".so"
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
name|System
operator|.
name|load
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|Log
operator|.
name|i
argument_list|(
name|QtTAG
argument_list|,
literal|"Can't find '"
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Log
operator|.
name|i
argument_list|(
name|QtTAG
argument_list|,
literal|"Can't load '"
operator|+
name|libName
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setActivity
specifier|public
specifier|static
name|void
name|setActivity
parameter_list|(
name|Activity
name|qtMainActivity
parameter_list|,
name|QtActivityDelegate
name|qtActivityDelegate
parameter_list|)
block|{
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
name|m_activity
operator|=
name|qtMainActivity
expr_stmt|;
name|m_activityDelegate
operator|=
name|qtActivityDelegate
expr_stmt|;
block|}
block|}
DECL|method|getLostActions
specifier|static
specifier|public
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
name|getLostActions
parameter_list|()
block|{
return|return
name|m_lostActions
return|;
block|}
DECL|method|clearLostActions
specifier|static
specifier|public
name|void
name|clearLostActions
parameter_list|()
block|{
name|m_lostActions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|runAction
specifier|private
specifier|static
name|boolean
name|runAction
parameter_list|(
name|Runnable
name|action
parameter_list|)
block|{
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
if|if
condition|(
name|m_activity
operator|==
literal|null
condition|)
name|m_lostActions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
else|else
name|m_activity
operator|.
name|runOnUiThread
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|m_activity
operator|!=
literal|null
return|;
block|}
block|}
DECL|method|startApplication
specifier|public
specifier|static
name|boolean
name|startApplication
parameter_list|(
name|String
name|params
parameter_list|,
name|String
name|environment
parameter_list|,
name|String
name|mainLibrary
parameter_list|,
name|String
name|nativeLibraryDir
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|nativeLibraryDir
operator|+
literal|"lib"
operator|+
name|mainLibrary
operator|+
literal|".so"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Can't find main library '"
operator|+
name|mainLibrary
operator|+
literal|"'"
argument_list|)
throw|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
name|params
operator|=
literal|"-platform\tandroid"
expr_stmt|;
name|boolean
name|res
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
name|res
operator|=
name|startQtAndroidPlugin
argument_list|()
expr_stmt|;
name|setDisplayMetrics
argument_list|(
name|m_displayMetricsScreenWidthPixels
argument_list|,
name|m_displayMetricsScreenHeightPixels
argument_list|,
name|m_displayMetricsDesktopWidthPixels
argument_list|,
name|m_displayMetricsDesktopHeightPixels
argument_list|,
name|m_displayMetricsXDpi
argument_list|,
name|m_displayMetricsYDpi
argument_list|,
name|m_displayMetricsScaledDensity
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|params
operator|.
name|startsWith
argument_list|(
literal|"\t"
argument_list|)
condition|)
name|params
operator|=
literal|"\t"
operator|+
name|params
expr_stmt|;
name|startQtApplication
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|params
argument_list|,
name|environment
argument_list|)
expr_stmt|;
name|m_started
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|setApplicationDisplayMetrics
specifier|public
specifier|static
name|void
name|setApplicationDisplayMetrics
parameter_list|(
name|int
name|screenWidthPixels
parameter_list|,
name|int
name|screenHeightPixels
parameter_list|,
name|int
name|desktopWidthPixels
parameter_list|,
name|int
name|desktopHeightPixels
parameter_list|,
name|double
name|XDpi
parameter_list|,
name|double
name|YDpi
parameter_list|,
name|double
name|scaledDensity
parameter_list|)
block|{
comment|/* Fix buggy dpi report */
if|if
condition|(
name|XDpi
operator|<
name|android
operator|.
name|util
operator|.
name|DisplayMetrics
operator|.
name|DENSITY_LOW
condition|)
name|XDpi
operator|=
name|android
operator|.
name|util
operator|.
name|DisplayMetrics
operator|.
name|DENSITY_LOW
expr_stmt|;
if|if
condition|(
name|YDpi
operator|<
name|android
operator|.
name|util
operator|.
name|DisplayMetrics
operator|.
name|DENSITY_LOW
condition|)
name|YDpi
operator|=
name|android
operator|.
name|util
operator|.
name|DisplayMetrics
operator|.
name|DENSITY_LOW
expr_stmt|;
synchronized|synchronized
init|(
name|m_mainActivityMutex
init|)
block|{
if|if
condition|(
name|m_started
condition|)
block|{
name|setDisplayMetrics
argument_list|(
name|screenWidthPixels
argument_list|,
name|screenHeightPixels
argument_list|,
name|desktopWidthPixels
argument_list|,
name|desktopHeightPixels
argument_list|,
name|XDpi
argument_list|,
name|YDpi
argument_list|,
name|scaledDensity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_displayMetricsScreenWidthPixels
operator|=
name|screenWidthPixels
expr_stmt|;
name|m_displayMetricsScreenHeightPixels
operator|=
name|screenHeightPixels
expr_stmt|;
name|m_displayMetricsDesktopWidthPixels
operator|=
name|desktopWidthPixels
expr_stmt|;
name|m_displayMetricsDesktopHeightPixels
operator|=
name|desktopHeightPixels
expr_stmt|;
name|m_displayMetricsXDpi
operator|=
name|XDpi
expr_stmt|;
name|m_displayMetricsYDpi
operator|=
name|YDpi
expr_stmt|;
name|m_displayMetricsScaledDensity
operator|=
name|scaledDensity
expr_stmt|;
block|}
block|}
block|}
comment|// application methods
DECL|method|startQtApplication
specifier|public
specifier|static
specifier|native
name|void
name|startQtApplication
parameter_list|(
name|String
name|params
parameter_list|,
name|String
name|env
parameter_list|)
function_decl|;
DECL|method|startQtAndroidPlugin
specifier|public
specifier|static
specifier|native
name|boolean
name|startQtAndroidPlugin
parameter_list|()
function_decl|;
DECL|method|quitQtAndroidPlugin
specifier|public
specifier|static
specifier|native
name|void
name|quitQtAndroidPlugin
parameter_list|()
function_decl|;
DECL|method|terminateQt
specifier|public
specifier|static
specifier|native
name|void
name|terminateQt
parameter_list|()
function_decl|;
comment|// application methods
DECL|method|quitApp
specifier|private
specifier|static
name|void
name|quitApp
parameter_list|()
block|{
name|m_activity
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
comment|//@ANDROID-9
DECL|method|getAction
specifier|static
specifier|private
name|int
name|getAction
parameter_list|(
name|int
name|index
parameter_list|,
name|MotionEvent
name|event
parameter_list|)
block|{
name|int
name|action
init|=
name|event
operator|.
name|getActionMasked
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|MotionEvent
operator|.
name|ACTION_MOVE
condition|)
block|{
name|int
name|hsz
init|=
name|event
operator|.
name|getHistorySize
argument_list|()
decl_stmt|;
if|if
condition|(
name|hsz
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getX
argument_list|(
name|index
argument_list|)
operator|!=
name|event
operator|.
name|getHistoricalX
argument_list|(
name|index
argument_list|,
name|hsz
operator|-
literal|1
argument_list|)
operator|||
name|event
operator|.
name|getY
argument_list|(
name|index
argument_list|)
operator|!=
name|event
operator|.
name|getHistoricalY
argument_list|(
name|index
argument_list|,
name|hsz
operator|-
literal|1
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|2
return|;
block|}
block|}
return|return
literal|1
return|;
block|}
if|if
condition|(
name|action
operator|==
name|MotionEvent
operator|.
name|ACTION_DOWN
operator|||
name|action
operator|==
name|MotionEvent
operator|.
name|ACTION_POINTER_DOWN
operator|&&
name|index
operator|==
name|event
operator|.
name|getActionIndex
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|MotionEvent
operator|.
name|ACTION_UP
operator|||
name|action
operator|==
name|MotionEvent
operator|.
name|ACTION_POINTER_UP
operator|&&
name|index
operator|==
name|event
operator|.
name|getActionIndex
argument_list|()
condition|)
block|{
return|return
literal|3
return|;
block|}
return|return
literal|2
return|;
block|}
comment|//@ANDROID-9
DECL|method|sendTouchEvent
specifier|static
specifier|public
name|void
name|sendTouchEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|,
name|int
name|id
parameter_list|)
block|{
comment|//@ANDROID-5
name|touchBegin
argument_list|(
name|id
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|event
operator|.
name|getPointerCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|touchAdd
argument_list|(
name|id
argument_list|,
name|event
operator|.
name|getPointerId
argument_list|(
name|i
argument_list|)
argument_list|,
name|getAction
argument_list|(
name|i
argument_list|,
name|event
argument_list|)
argument_list|,
name|i
operator|==
literal|0
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|(
name|i
argument_list|)
argument_list|,
name|event
operator|.
name|getSize
argument_list|(
name|i
argument_list|)
argument_list|,
name|event
operator|.
name|getPressure
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|event
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|MotionEvent
operator|.
name|ACTION_DOWN
case|:
name|touchEnd
argument_list|(
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|MotionEvent
operator|.
name|ACTION_UP
case|:
name|touchEnd
argument_list|(
name|id
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
default|default:
name|touchEnd
argument_list|(
name|id
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//@ANDROID-5
block|}
DECL|method|sendTrackballEvent
specifier|static
specifier|public
name|void
name|sendTrackballEvent
parameter_list|(
name|MotionEvent
name|event
parameter_list|,
name|int
name|id
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|MotionEvent
operator|.
name|ACTION_UP
case|:
name|mouseUp
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MotionEvent
operator|.
name|ACTION_DOWN
case|:
name|mouseDown
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|m_oldx
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
expr_stmt|;
name|m_oldy
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
expr_stmt|;
break|break;
case|case
name|MotionEvent
operator|.
name|ACTION_MOVE
case|:
name|int
name|dx
init|=
call|(
name|int
call|)
argument_list|(
name|event
operator|.
name|getX
argument_list|()
operator|-
name|m_oldx
argument_list|)
decl_stmt|;
name|int
name|dy
init|=
call|(
name|int
call|)
argument_list|(
name|event
operator|.
name|getY
argument_list|()
operator|-
name|m_oldy
argument_list|)
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|dx
argument_list|)
operator|>
literal|5
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|dy
argument_list|)
operator|>
literal|5
condition|)
block|{
name|mouseMove
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
name|m_oldx
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getX
argument_list|()
expr_stmt|;
name|m_oldy
operator|=
operator|(
name|int
operator|)
name|event
operator|.
name|getY
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|method|updateSelection
specifier|private
specifier|static
name|void
name|updateSelection
parameter_list|(
specifier|final
name|int
name|selStart
parameter_list|,
specifier|final
name|int
name|selEnd
parameter_list|,
specifier|final
name|int
name|candidatesStart
parameter_list|,
specifier|final
name|int
name|candidatesEnd
parameter_list|)
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|updateSelection
argument_list|(
name|selStart
argument_list|,
name|selEnd
argument_list|,
name|candidatesStart
argument_list|,
name|candidatesEnd
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|showSoftwareKeyboard
specifier|private
specifier|static
name|void
name|showSoftwareKeyboard
parameter_list|(
specifier|final
name|int
name|x
parameter_list|,
specifier|final
name|int
name|y
parameter_list|,
specifier|final
name|int
name|width
parameter_list|,
specifier|final
name|int
name|height
parameter_list|,
specifier|final
name|int
name|inputHints
parameter_list|)
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|showSoftwareKeyboard
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|inputHints
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|resetSoftwareKeyboard
specifier|private
specifier|static
name|void
name|resetSoftwareKeyboard
parameter_list|()
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|resetSoftwareKeyboard
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|hideSoftwareKeyboard
specifier|private
specifier|static
name|void
name|hideSoftwareKeyboard
parameter_list|()
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|hideSoftwareKeyboard
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|isSoftwareKeyboardVisible
specifier|private
specifier|static
name|boolean
name|isSoftwareKeyboardVisible
parameter_list|()
block|{
specifier|final
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Boolean
index|[]
name|ret
init|=
block|{
literal|false
block|}
decl_stmt|;
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ret
index|[
literal|0
index|]
operator|=
name|m_activityDelegate
operator|.
name|isSoftwareKeyboardVisible
argument_list|()
expr_stmt|;
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
index|[
literal|0
index|]
return|;
block|}
DECL|method|setFullScreen
specifier|private
specifier|static
name|void
name|setFullScreen
parameter_list|(
specifier|final
name|boolean
name|fullScreen
parameter_list|)
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|setFullScreen
argument_list|(
name|fullScreen
argument_list|)
expr_stmt|;
name|updateWindow
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|registerClipboardManager
specifier|private
specifier|static
name|void
name|registerClipboardManager
parameter_list|()
block|{
specifier|final
name|Semaphore
name|semaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_clipboardManager
operator|=
operator|(
name|android
operator|.
name|text
operator|.
name|ClipboardManager
operator|)
name|m_activity
operator|.
name|getSystemService
argument_list|(
name|Context
operator|.
name|CLIPBOARD_SERVICE
argument_list|)
expr_stmt|;
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setClipboardText
specifier|private
specifier|static
name|void
name|setClipboardText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|m_clipboardManager
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
DECL|method|hasClipboardText
specifier|private
specifier|static
name|boolean
name|hasClipboardText
parameter_list|()
block|{
return|return
name|m_clipboardManager
operator|.
name|hasText
argument_list|()
return|;
block|}
DECL|method|getClipboardText
specifier|private
specifier|static
name|String
name|getClipboardText
parameter_list|()
block|{
return|return
name|m_clipboardManager
operator|.
name|getText
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|openContextMenu
specifier|private
specifier|static
name|void
name|openContextMenu
parameter_list|()
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|openContextMenu
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|closeContextMenu
specifier|private
specifier|static
name|void
name|closeContextMenu
parameter_list|()
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|closeContextMenu
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|resetOptionsMenu
specifier|private
specifier|static
name|void
name|resetOptionsMenu
parameter_list|()
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|resetOptionsMenu
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getSSLCertificates
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|getSSLCertificates
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|certificateList
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|TrustManagerFactory
name|factory
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|factory
operator|.
name|init
argument_list|(
operator|(
name|KeyStore
operator|)
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|TrustManager
name|manager
range|:
name|factory
operator|.
name|getTrustManagers
argument_list|()
control|)
block|{
if|if
condition|(
name|manager
operator|instanceof
name|X509TrustManager
condition|)
block|{
name|X509TrustManager
name|trustManager
init|=
operator|(
name|X509TrustManager
operator|)
name|manager
decl_stmt|;
for|for
control|(
name|X509Certificate
name|certificate
range|:
name|trustManager
operator|.
name|getAcceptedIssuers
argument_list|()
control|)
block|{
name|byte
name|buffer
index|[]
init|=
name|certificate
operator|.
name|getEncoded
argument_list|()
decl_stmt|;
name|certificateList
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Log
operator|.
name|e
argument_list|(
name|QtTAG
argument_list|,
literal|"Failed to get certificates"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|certificateArray
init|=
operator|new
name|byte
index|[
name|certificateList
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
name|certificateArray
operator|=
name|certificateList
operator|.
name|toArray
argument_list|(
name|certificateArray
argument_list|)
expr_stmt|;
return|return
name|certificateArray
return|;
block|}
DECL|method|createSurface
specifier|private
specifier|static
name|void
name|createSurface
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|boolean
name|onTop
parameter_list|,
specifier|final
name|int
name|x
parameter_list|,
specifier|final
name|int
name|y
parameter_list|,
specifier|final
name|int
name|w
parameter_list|,
specifier|final
name|int
name|h
parameter_list|)
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|createSurface
argument_list|(
name|id
argument_list|,
name|onTop
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|insertNativeView
specifier|private
specifier|static
name|void
name|insertNativeView
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|View
name|view
parameter_list|,
specifier|final
name|int
name|x
parameter_list|,
specifier|final
name|int
name|y
parameter_list|,
specifier|final
name|int
name|w
parameter_list|,
specifier|final
name|int
name|h
parameter_list|)
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|insertNativeView
argument_list|(
name|id
argument_list|,
name|view
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setSurfaceGeometry
specifier|private
specifier|static
name|void
name|setSurfaceGeometry
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|int
name|x
parameter_list|,
specifier|final
name|int
name|y
parameter_list|,
specifier|final
name|int
name|w
parameter_list|,
specifier|final
name|int
name|h
parameter_list|)
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|setSurfaceGeometry
argument_list|(
name|id
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|destroySurface
specifier|private
specifier|static
name|void
name|destroySurface
parameter_list|(
specifier|final
name|int
name|id
parameter_list|)
block|{
name|runAction
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|m_activityDelegate
operator|.
name|destroySurface
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// screen methods
DECL|method|setDisplayMetrics
specifier|public
specifier|static
specifier|native
name|void
name|setDisplayMetrics
parameter_list|(
name|int
name|screenWidthPixels
parameter_list|,
name|int
name|screenHeightPixels
parameter_list|,
name|int
name|desktopWidthPixels
parameter_list|,
name|int
name|desktopHeightPixels
parameter_list|,
name|double
name|XDpi
parameter_list|,
name|double
name|YDpi
parameter_list|,
name|double
name|scaledDensity
parameter_list|)
function_decl|;
DECL|method|handleOrientationChanged
specifier|public
specifier|static
specifier|native
name|void
name|handleOrientationChanged
parameter_list|(
name|int
name|newRotation
parameter_list|,
name|int
name|nativeOrientation
parameter_list|)
function_decl|;
comment|// screen methods
comment|// pointer methods
DECL|method|mouseDown
specifier|public
specifier|static
specifier|native
name|void
name|mouseDown
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
DECL|method|mouseUp
specifier|public
specifier|static
specifier|native
name|void
name|mouseUp
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
DECL|method|mouseMove
specifier|public
specifier|static
specifier|native
name|void
name|mouseMove
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
DECL|method|touchBegin
specifier|public
specifier|static
specifier|native
name|void
name|touchBegin
parameter_list|(
name|int
name|winId
parameter_list|)
function_decl|;
DECL|method|touchAdd
specifier|public
specifier|static
specifier|native
name|void
name|touchAdd
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|pointerId
parameter_list|,
name|int
name|action
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|float
name|size
parameter_list|,
name|float
name|pressure
parameter_list|)
function_decl|;
DECL|method|touchEnd
specifier|public
specifier|static
specifier|native
name|void
name|touchEnd
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|action
parameter_list|)
function_decl|;
DECL|method|longPress
specifier|public
specifier|static
specifier|native
name|void
name|longPress
parameter_list|(
name|int
name|winId
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
comment|// pointer methods
comment|// keyboard methods
DECL|method|keyDown
specifier|public
specifier|static
specifier|native
name|void
name|keyDown
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|unicode
parameter_list|,
name|int
name|modifier
parameter_list|)
function_decl|;
DECL|method|keyUp
specifier|public
specifier|static
specifier|native
name|void
name|keyUp
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|unicode
parameter_list|,
name|int
name|modifier
parameter_list|)
function_decl|;
DECL|method|keyboardVisibilityChanged
specifier|public
specifier|static
specifier|native
name|void
name|keyboardVisibilityChanged
parameter_list|(
name|boolean
name|visibility
parameter_list|)
function_decl|;
comment|// keyboard methods
comment|// surface methods
DECL|method|setSurface
specifier|public
specifier|static
specifier|native
name|void
name|setSurface
parameter_list|(
name|int
name|id
parameter_list|,
name|Object
name|surface
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
function_decl|;
comment|// surface methods
comment|// window methods
DECL|method|updateWindow
specifier|public
specifier|static
specifier|native
name|void
name|updateWindow
parameter_list|()
function_decl|;
comment|// window methods
comment|// application methods
DECL|method|updateApplicationState
specifier|public
specifier|static
specifier|native
name|void
name|updateApplicationState
parameter_list|(
name|int
name|state
parameter_list|)
function_decl|;
comment|// menu methods
DECL|method|onPrepareOptionsMenu
specifier|public
specifier|static
specifier|native
name|boolean
name|onPrepareOptionsMenu
parameter_list|(
name|Menu
name|menu
parameter_list|)
function_decl|;
DECL|method|onOptionsItemSelected
specifier|public
specifier|static
specifier|native
name|boolean
name|onOptionsItemSelected
parameter_list|(
name|int
name|itemId
parameter_list|,
name|boolean
name|checked
parameter_list|)
function_decl|;
DECL|method|onOptionsMenuClosed
specifier|public
specifier|static
specifier|native
name|void
name|onOptionsMenuClosed
parameter_list|(
name|Menu
name|menu
parameter_list|)
function_decl|;
DECL|method|onCreateContextMenu
specifier|public
specifier|static
specifier|native
name|void
name|onCreateContextMenu
parameter_list|(
name|ContextMenu
name|menu
parameter_list|)
function_decl|;
DECL|method|onContextItemSelected
specifier|public
specifier|static
specifier|native
name|boolean
name|onContextItemSelected
parameter_list|(
name|int
name|itemId
parameter_list|,
name|boolean
name|checked
parameter_list|)
function_decl|;
DECL|method|onContextMenuClosed
specifier|public
specifier|static
specifier|native
name|void
name|onContextMenuClosed
parameter_list|(
name|Menu
name|menu
parameter_list|)
function_decl|;
comment|// menu methods
block|}
end_class
end_unit
