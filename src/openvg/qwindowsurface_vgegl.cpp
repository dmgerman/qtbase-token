begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenVG module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsurface_vgegl_p.h"
end_include
begin_include
include|#
directive|include
file|"qpaintengine_vg_p.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapdata_vg_p.h"
end_include
begin_include
include|#
directive|include
file|"qvgimagepool_p.h"
end_include
begin_include
include|#
directive|include
file|"qvg_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
end_if
begin_function
name|QT_BEGIN_NAMESPACE
comment|// Turn off "direct to window" rendering if EGL cannot support it.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EGL_RENDER_BUFFER
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|EGL_SINGLE_BUFFER
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|QVG_DIRECT_TO_WINDOW
argument_list|)
DECL|macro|QVG_DIRECT_TO_WINDOW
undef|#
directive|undef
name|QVG_DIRECT_TO_WINDOW
endif|#
directive|endif
endif|#
directive|endif
comment|// Determine if preserved window contents should be used.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EGL_SWAP_BEHAVIOR
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|EGL_BUFFER_PRESERVED
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QVG_NO_PRESERVED_SWAP
argument_list|)
DECL|macro|QVG_NO_PRESERVED_SWAP
define|#
directive|define
name|QVG_NO_PRESERVED_SWAP
value|1
endif|#
directive|endif
endif|#
directive|endif
DECL|function|qt_vg_config_to_vg_format
name|VGImageFormat
name|qt_vg_config_to_vg_format
parameter_list|(
name|QEglContext
modifier|*
name|context
parameter_list|)
block|{
return|return
name|qt_vg_image_to_vg_format
argument_list|(
name|qt_vg_config_to_image_format
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_vg_config_to_image_format
name|QImage
operator|::
name|Format
name|qt_vg_config_to_image_format
parameter_list|(
name|QEglContext
modifier|*
name|context
parameter_list|)
block|{
name|EGLint
name|red
init|=
name|context
operator|->
name|configAttrib
argument_list|(
name|EGL_RED_SIZE
argument_list|)
decl_stmt|;
name|EGLint
name|green
init|=
name|context
operator|->
name|configAttrib
argument_list|(
name|EGL_GREEN_SIZE
argument_list|)
decl_stmt|;
name|EGLint
name|blue
init|=
name|context
operator|->
name|configAttrib
argument_list|(
name|EGL_BLUE_SIZE
argument_list|)
decl_stmt|;
name|EGLint
name|alpha
init|=
name|context
operator|->
name|configAttrib
argument_list|(
name|EGL_ALPHA_SIZE
argument_list|)
decl_stmt|;
name|QImage
operator|::
name|Format
name|argbFormat
decl_stmt|;
ifdef|#
directive|ifdef
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
name|EGLint
name|type
init|=
name|context
operator|->
name|configAttrib
argument_list|(
name|EGL_SURFACE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|type
operator|&
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
operator|)
operator|!=
literal|0
condition|)
name|argbFormat
operator|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
else|else
name|argbFormat
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
else|#
directive|else
name|argbFormat
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|red
operator|==
literal|8
operator|&&
name|green
operator|==
literal|8
operator|&&
name|blue
operator|==
literal|8
operator|&&
name|alpha
operator|==
literal|8
condition|)
return|return
name|argbFormat
return|;
elseif|else
if|if
condition|(
name|red
operator|==
literal|8
operator|&&
name|green
operator|==
literal|8
operator|&&
name|blue
operator|==
literal|8
operator|&&
name|alpha
operator|==
literal|0
condition|)
return|return
name|QImage
operator|::
name|Format_RGB32
return|;
elseif|else
if|if
condition|(
name|red
operator|==
literal|5
operator|&&
name|green
operator|==
literal|6
operator|&&
name|blue
operator|==
literal|5
operator|&&
name|alpha
operator|==
literal|0
condition|)
return|return
name|QImage
operator|::
name|Format_RGB16
return|;
elseif|else
if|if
condition|(
name|red
operator|==
literal|4
operator|&&
name|green
operator|==
literal|4
operator|&&
name|blue
operator|==
literal|4
operator|&&
name|alpha
operator|==
literal|4
condition|)
return|return
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
return|;
else|else
return|return
name|argbFormat
return|;
comment|// XXX
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QVG_NO_SINGLE_CONTEXT
argument_list|)
end_if
begin_class
DECL|class|QVGSharedContext
class|class
name|QVGSharedContext
block|{
public|public:
name|QVGSharedContext
parameter_list|()
constructor_decl|;
name|~
name|QVGSharedContext
parameter_list|()
destructor_decl|;
DECL|member|context
name|QEglContext
modifier|*
name|context
decl_stmt|;
DECL|member|refCount
name|int
name|refCount
decl_stmt|;
DECL|member|widgetRefCount
name|int
name|widgetRefCount
decl_stmt|;
DECL|member|engine
name|QVGPaintEngine
modifier|*
name|engine
decl_stmt|;
DECL|member|surface
name|EGLSurface
name|surface
decl_stmt|;
DECL|member|firstPixmap
name|QVGPixmapData
modifier|*
name|firstPixmap
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QVGSharedContext
name|QVGSharedContext
operator|::
name|QVGSharedContext
parameter_list|()
member_init_list|:
name|context
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|refCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|widgetRefCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|engine
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|surface
argument_list|(
name|EGL_NO_SURFACE
argument_list|)
member_init_list|,
name|firstPixmap
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QVGSharedContext
name|QVGSharedContext
operator|::
name|~
name|QVGSharedContext
parameter_list|()
block|{
comment|// Don't accidentally destroy the QEglContext if the reference
comment|// count falls to zero while deleting the paint engine.
operator|++
name|refCount
expr_stmt|;
if|if
condition|(
name|context
condition|)
name|context
operator|->
name|makeCurrent
argument_list|(
name|qt_vg_shared_surface
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|engine
expr_stmt|;
if|if
condition|(
name|context
condition|)
name|context
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|&&
name|surface
operator|!=
name|EGL_NO_SURFACE
condition|)
name|context
operator|->
name|destroySurface
argument_list|(
name|surface
argument_list|)
expr_stmt|;
operator|delete
name|context
expr_stmt|;
block|}
end_destructor
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QVGSharedContext
argument_list|,
name|sharedContext
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|qt_vg_create_paint_engine
name|QVGPaintEngine
modifier|*
name|qt_vg_create_paint_engine
parameter_list|(
name|void
parameter_list|)
block|{
name|QVGSharedContext
modifier|*
name|shared
init|=
name|sharedContext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|shared
operator|->
name|engine
condition|)
name|shared
operator|->
name|engine
operator|=
operator|new
name|QVGPaintEngine
argument_list|()
expr_stmt|;
return|return
name|shared
operator|->
name|engine
return|;
block|}
end_function
begin_function
DECL|function|qt_vg_destroy_paint_engine
name|void
name|qt_vg_destroy_paint_engine
parameter_list|(
name|QVGPaintEngine
modifier|*
name|engine
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|engine
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_vg_register_pixmap
name|void
name|qt_vg_register_pixmap
parameter_list|(
name|QVGPixmapData
modifier|*
name|pd
parameter_list|)
block|{
name|QVGSharedContext
modifier|*
name|shared
init|=
name|sharedContext
argument_list|()
decl_stmt|;
name|pd
operator|->
name|next
operator|=
name|shared
operator|->
name|firstPixmap
expr_stmt|;
name|pd
operator|->
name|prev
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|shared
operator|->
name|firstPixmap
condition|)
name|shared
operator|->
name|firstPixmap
operator|->
name|prev
operator|=
name|pd
expr_stmt|;
name|shared
operator|->
name|firstPixmap
operator|=
name|pd
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_vg_unregister_pixmap
name|void
name|qt_vg_unregister_pixmap
parameter_list|(
name|QVGPixmapData
modifier|*
name|pd
parameter_list|)
block|{
if|if
condition|(
name|pd
operator|->
name|next
condition|)
name|pd
operator|->
name|next
operator|->
name|prev
operator|=
name|pd
operator|->
name|prev
expr_stmt|;
if|if
condition|(
name|pd
operator|->
name|prev
condition|)
block|{
name|pd
operator|->
name|prev
operator|->
name|next
operator|=
name|pd
operator|->
name|next
expr_stmt|;
block|}
else|else
block|{
name|QVGSharedContext
modifier|*
name|shared
init|=
name|sharedContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|shared
condition|)
name|shared
operator|->
name|firstPixmap
operator|=
name|pd
operator|->
name|next
expr_stmt|;
block|}
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|qt_vg_create_paint_engine
name|QVGPaintEngine
modifier|*
name|qt_vg_create_paint_engine
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|new
name|QVGPaintEngine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qt_vg_destroy_paint_engine
name|void
name|qt_vg_destroy_paint_engine
parameter_list|(
name|QVGPaintEngine
modifier|*
name|engine
parameter_list|)
block|{
operator|delete
name|engine
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_vg_register_pixmap
name|void
name|qt_vg_register_pixmap
parameter_list|(
name|QVGPixmapData
modifier|*
name|pd
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|pd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_vg_unregister_pixmap
name|void
name|qt_vg_unregister_pixmap
parameter_list|(
name|QVGPixmapData
modifier|*
name|pd
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|pd
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
end_ifdef
begin_function
DECL|function|isPremultipliedContext
specifier|static
name|bool
name|isPremultipliedContext
parameter_list|(
specifier|const
name|QEglContext
modifier|*
name|context
parameter_list|)
block|{
return|return
name|context
operator|->
name|configAttrib
argument_list|(
name|EGL_SURFACE_TYPE
argument_list|)
operator|&
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|createContext
specifier|static
name|QEglContext
modifier|*
name|createContext
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|)
block|{
name|QEglContext
modifier|*
name|context
decl_stmt|;
comment|// Create the context object and open the display.
name|context
operator|=
operator|new
name|QEglContext
argument_list|()
expr_stmt|;
name|context
operator|->
name|setApi
argument_list|(
name|QEgl
operator|::
name|OpenVG
argument_list|)
expr_stmt|;
comment|// Set the swap interval for the display.
name|QByteArray
name|interval
init|=
name|qgetenv
argument_list|(
literal|"QT_VG_SWAP_INTERVAL"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|interval
operator|.
name|isEmpty
argument_list|()
condition|)
name|eglSwapInterval
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|interval
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|eglSwapInterval
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|EGL_RENDERABLE_TYPE
comment|// Has the user specified an explicit EGL configuration to use?
name|QByteArray
name|configId
init|=
name|qgetenv
argument_list|(
literal|"QT_VG_EGL_CONFIG"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|EGLint
name|cfgId
init|=
name|configId
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|EGLint
name|properties
index|[]
init|=
block|{
name|EGL_CONFIG_ID
block|,
name|cfgId
block|,
name|EGL_NONE
block|}
decl_stmt|;
name|EGLint
name|matching
init|=
literal|0
decl_stmt|;
name|EGLConfig
name|cfg
decl_stmt|;
if|if
condition|(
name|eglChooseConfig
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|properties
argument_list|,
operator|&
name|cfg
argument_list|,
literal|1
argument_list|,
operator|&
name|matching
argument_list|)
operator|&&
name|matching
operator|>
literal|0
condition|)
block|{
comment|// Check that the selected configuration actually supports OpenVG
comment|// and then create the context with it.
name|EGLint
name|id
init|=
literal|0
decl_stmt|;
name|EGLint
name|type
init|=
literal|0
decl_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|cfg
argument_list|,
name|EGL_CONFIG_ID
argument_list|,
operator|&
name|id
argument_list|)
expr_stmt|;
name|eglGetConfigAttrib
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|cfg
argument_list|,
name|EGL_RENDERABLE_TYPE
argument_list|,
operator|&
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfgId
operator|==
name|id
operator|&&
operator|(
name|type
operator|&
name|EGL_OPENVG_BIT
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|setConfig
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|createContext
argument_list|()
condition|)
block|{
operator|delete
name|context
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|context
return|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QT_VG_EGL_CONFIG: %d is not a valid OpenVG configuration"
argument_list|,
name|int
argument_list|(
name|cfgId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
comment|// Choose an appropriate configuration for rendering into the device.
name|QEglProperties
name|configProps
decl_stmt|;
name|configProps
operator|.
name|setPaintDeviceFormat
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|int
name|redSize
init|=
name|configProps
operator|.
name|value
argument_list|(
name|EGL_RED_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|redSize
operator|==
name|EGL_DONT_CARE
operator|||
name|redSize
operator|==
literal|0
condition|)
name|configProps
operator|.
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
comment|// XXX
name|configProps
operator|.
name|setValue
argument_list|(
name|EGL_ALPHA_MASK_SIZE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
name|configProps
operator|.
name|setValue
argument_list|(
name|EGL_SURFACE_TYPE
argument_list|,
name|EGL_WINDOW_BIT
operator||
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|setRenderableType
argument_list|(
name|QEgl
operator|::
name|OpenVG
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|chooseConfig
argument_list|(
name|configProps
argument_list|)
condition|)
block|{
comment|// Try again without the "pre" bit.
name|configProps
operator|.
name|setValue
argument_list|(
name|EGL_SURFACE_TYPE
argument_list|,
name|EGL_WINDOW_BIT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|chooseConfig
argument_list|(
name|configProps
argument_list|)
condition|)
block|{
operator|delete
name|context
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
else|#
directive|else
name|configProps
operator|.
name|setValue
argument_list|(
name|EGL_SURFACE_TYPE
argument_list|,
name|EGL_WINDOW_BIT
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|setRenderableType
argument_list|(
name|QEgl
operator|::
name|OpenVG
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|chooseConfig
argument_list|(
name|configProps
argument_list|)
condition|)
block|{
operator|delete
name|context
expr_stmt|;
return|return
literal|0
return|;
block|}
endif|#
directive|endif
comment|// Construct a new EGL context for the selected configuration.
if|if
condition|(
operator|!
name|context
operator|->
name|createContext
argument_list|()
condition|)
block|{
operator|delete
name|context
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|context
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QVG_NO_SINGLE_CONTEXT
argument_list|)
end_if
begin_function
DECL|function|qt_vg_create_context
name|QEglContext
modifier|*
name|qt_vg_create_context
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|,
name|int
name|devType
parameter_list|)
block|{
name|QVGSharedContext
modifier|*
name|shared
init|=
name|sharedContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|devType
operator|==
name|QInternal
operator|::
name|Widget
condition|)
operator|++
operator|(
name|shared
operator|->
name|widgetRefCount
operator|)
expr_stmt|;
if|if
condition|(
name|shared
operator|->
name|context
condition|)
block|{
operator|++
operator|(
name|shared
operator|->
name|refCount
operator|)
expr_stmt|;
return|return
name|shared
operator|->
name|context
return|;
block|}
else|else
block|{
name|shared
operator|->
name|context
operator|=
name|createContext
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|shared
operator|->
name|refCount
operator|=
literal|1
expr_stmt|;
return|return
name|shared
operator|->
name|context
return|;
block|}
block|}
end_function
begin_function
DECL|function|qt_vg_destroy_shared_context
specifier|static
name|void
name|qt_vg_destroy_shared_context
parameter_list|(
name|QVGSharedContext
modifier|*
name|shared
parameter_list|)
block|{
name|shared
operator|->
name|context
operator|->
name|makeCurrent
argument_list|(
name|qt_vg_shared_surface
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|shared
operator|->
name|engine
expr_stmt|;
name|shared
operator|->
name|engine
operator|=
literal|0
expr_stmt|;
name|shared
operator|->
name|context
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
name|shared
operator|->
name|surface
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
name|eglDestroySurface
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|shared
operator|->
name|surface
argument_list|)
expr_stmt|;
name|shared
operator|->
name|surface
operator|=
name|EGL_NO_SURFACE
expr_stmt|;
block|}
operator|delete
name|shared
operator|->
name|context
expr_stmt|;
name|shared
operator|->
name|context
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_vg_hibernate_pixmaps
name|void
name|qt_vg_hibernate_pixmaps
parameter_list|(
name|QVGSharedContext
modifier|*
name|shared
parameter_list|)
block|{
comment|// Artificially increase the reference count to prevent the
comment|// context from being destroyed until after we have finished
comment|// the hibernation process.
operator|++
operator|(
name|shared
operator|->
name|refCount
operator|)
expr_stmt|;
comment|// We need a context current to hibernate the VGImage objects.
name|shared
operator|->
name|context
operator|->
name|makeCurrent
argument_list|(
name|qt_vg_shared_surface
argument_list|()
argument_list|)
expr_stmt|;
comment|// Scan all QVGPixmapData objects in the system and hibernate them.
name|QVGPixmapData
modifier|*
name|pd
init|=
name|shared
operator|->
name|firstPixmap
decl_stmt|;
while|while
condition|(
name|pd
operator|!=
literal|0
condition|)
block|{
name|pd
operator|->
name|hibernate
argument_list|()
expr_stmt|;
name|pd
operator|=
name|pd
operator|->
name|next
expr_stmt|;
block|}
comment|// Hibernate any remaining VGImage's in the image pool.
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|hibernate
argument_list|()
expr_stmt|;
comment|// Don't need the current context any more.
name|shared
operator|->
name|context
operator|->
name|lazyDoneCurrent
argument_list|()
expr_stmt|;
comment|// Decrease the reference count and destroy the context if necessary.
if|if
condition|(
operator|--
operator|(
name|shared
operator|->
name|refCount
operator|)
operator|<=
literal|0
condition|)
name|qt_vg_destroy_shared_context
argument_list|(
name|shared
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_vg_destroy_context
name|void
name|qt_vg_destroy_context
parameter_list|(
name|QEglContext
modifier|*
name|context
parameter_list|,
name|int
name|devType
parameter_list|)
block|{
name|QVGSharedContext
modifier|*
name|shared
init|=
name|sharedContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|shared
operator|->
name|context
operator|!=
name|context
condition|)
block|{
comment|// This is not the shared context.  Shouldn't happen!
operator|delete
name|context
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|devType
operator|==
name|QInternal
operator|::
name|Widget
condition|)
operator|--
operator|(
name|shared
operator|->
name|widgetRefCount
operator|)
expr_stmt|;
if|if
condition|(
operator|--
operator|(
name|shared
operator|->
name|refCount
operator|)
operator|<=
literal|0
condition|)
block|{
name|qt_vg_destroy_shared_context
argument_list|(
name|shared
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shared
operator|->
name|widgetRefCount
operator|<=
literal|0
operator|&&
name|devType
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
comment|// All of the widget window surfaces have been destroyed
comment|// but we still have VG pixmaps active.  Ask them to hibernate
comment|// to free up GPU resources until a widget is shown again.
comment|// This may eventually cause the EGLContext to be destroyed
comment|// because nothing in the system needs a context, which will
comment|// free up even more GPU resources.
name|qt_vg_hibernate_pixmaps
argument_list|(
name|shared
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_vg_shared_surface
name|EGLSurface
name|qt_vg_shared_surface
parameter_list|(
name|void
parameter_list|)
block|{
name|QVGSharedContext
modifier|*
name|shared
init|=
name|sharedContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|shared
operator|->
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|EGLint
name|attribs
index|[
literal|7
index|]
decl_stmt|;
name|attribs
index|[
literal|0
index|]
operator|=
name|EGL_WIDTH
expr_stmt|;
name|attribs
index|[
literal|1
index|]
operator|=
literal|16
expr_stmt|;
name|attribs
index|[
literal|2
index|]
operator|=
name|EGL_HEIGHT
expr_stmt|;
name|attribs
index|[
literal|3
index|]
operator|=
literal|16
expr_stmt|;
ifdef|#
directive|ifdef
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
if|if
condition|(
name|isPremultipliedContext
argument_list|(
name|shared
operator|->
name|context
argument_list|)
condition|)
block|{
name|attribs
index|[
literal|4
index|]
operator|=
name|EGL_VG_ALPHA_FORMAT
expr_stmt|;
name|attribs
index|[
literal|5
index|]
operator|=
name|EGL_VG_ALPHA_FORMAT_PRE
expr_stmt|;
name|attribs
index|[
literal|6
index|]
operator|=
name|EGL_NONE
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|attribs
index|[
literal|4
index|]
operator|=
name|EGL_NONE
expr_stmt|;
block|}
name|shared
operator|->
name|surface
operator|=
name|eglCreatePbufferSurface
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|shared
operator|->
name|context
operator|->
name|config
argument_list|()
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
block|}
return|return
name|shared
operator|->
name|surface
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|qt_vg_create_context
name|QEglContext
modifier|*
name|qt_vg_create_context
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|,
name|int
name|devType
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|devType
argument_list|)
expr_stmt|;
return|return
name|createContext
argument_list|(
name|device
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_vg_destroy_context
name|void
name|qt_vg_destroy_context
parameter_list|(
name|QEglContext
modifier|*
name|context
parameter_list|,
name|int
name|devType
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|devType
argument_list|)
expr_stmt|;
operator|delete
name|context
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_vg_shared_surface
name|EGLSurface
name|qt_vg_shared_surface
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|EGL_NO_SURFACE
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QVGEGLWindowSurfacePrivate
name|QVGEGLWindowSurfacePrivate
operator|::
name|QVGEGLWindowSurfacePrivate
parameter_list|(
name|QWindowSurface
modifier|*
name|win
parameter_list|)
block|{
name|winSurface
operator|=
name|win
expr_stmt|;
name|engine
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QVGEGLWindowSurfacePrivate
name|QVGEGLWindowSurfacePrivate
operator|::
name|~
name|QVGEGLWindowSurfacePrivate
parameter_list|()
block|{
comment|// Destroy the paint engine if it hasn't been destroyed already.
name|destroyPaintEngine
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|paintEngine
name|QVGPaintEngine
modifier|*
name|QVGEGLWindowSurfacePrivate
operator|::
name|paintEngine
parameter_list|()
block|{
if|if
condition|(
operator|!
name|engine
condition|)
name|engine
operator|=
name|qt_vg_create_paint_engine
argument_list|()
expr_stmt|;
return|return
name|engine
return|;
block|}
end_function
begin_function
DECL|function|surfaceImage
name|VGImage
name|QVGEGLWindowSurfacePrivate
operator|::
name|surfaceImage
parameter_list|()
specifier|const
block|{
return|return
name|VG_INVALID_HANDLE
return|;
block|}
end_function
begin_function
DECL|function|destroyPaintEngine
name|void
name|QVGEGLWindowSurfacePrivate
operator|::
name|destroyPaintEngine
parameter_list|()
block|{
if|if
condition|(
name|engine
condition|)
block|{
name|qt_vg_destroy_paint_engine
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|engine
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|windowSurfaceSize
name|QSize
name|QVGEGLWindowSurfacePrivate
operator|::
name|windowSurfaceSize
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|winSurface
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QSize
name|newSize
init|=
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_QWS
argument_list|)
comment|// Account for the widget mask, if any.
if|if
condition|(
name|widget
operator|&&
operator|!
name|widget
operator|->
name|mask
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QRegion
name|region
init|=
name|widget
operator|->
name|mask
argument_list|()
operator|&
name|rect
operator|.
name|translated
argument_list|(
operator|-
name|widget
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|newSize
operator|=
name|region
operator|.
name|boundingRect
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|newSize
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QVG_VGIMAGE_BACKBUFFERS
argument_list|)
end_if
begin_constructor
DECL|function|QVGEGLWindowSurfaceVGImage
name|QVGEGLWindowSurfaceVGImage
operator|::
name|QVGEGLWindowSurfaceVGImage
parameter_list|(
name|QWindowSurface
modifier|*
name|win
parameter_list|)
member_init_list|:
name|QVGEGLWindowSurfacePrivate
argument_list|(
name|win
argument_list|)
member_init_list|,
name|context
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|backBuffer
argument_list|(
name|VG_INVALID_HANDLE
argument_list|)
member_init_list|,
name|backBufferSurface
argument_list|(
name|EGL_NO_SURFACE
argument_list|)
member_init_list|,
name|recreateBackBuffer
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isPaintingActive
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|windowSurface
argument_list|(
name|EGL_NO_SURFACE
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QVGEGLWindowSurfaceVGImage
name|QVGEGLWindowSurfaceVGImage
operator|::
name|~
name|QVGEGLWindowSurfaceVGImage
parameter_list|()
block|{
name|destroyPaintEngine
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|backBufferSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
comment|// We need a current context to be able to destroy the image.
comment|// We use the shared surface because the native window handle
comment|// associated with "windowSurface" may have been destroyed already.
name|context
operator|->
name|makeCurrent
argument_list|(
name|qt_vg_shared_surface
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|->
name|destroySurface
argument_list|(
name|backBufferSurface
argument_list|)
expr_stmt|;
name|vgDestroyImage
argument_list|(
name|backBuffer
argument_list|)
expr_stmt|;
name|context
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|windowSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
name|context
operator|->
name|destroySurface
argument_list|(
name|windowSurface
argument_list|)
expr_stmt|;
name|qt_vg_destroy_context
argument_list|(
name|context
argument_list|,
name|QInternal
operator|::
name|Widget
argument_list|)
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|ensureContext
name|QEglContext
modifier|*
name|QVGEGLWindowSurfaceVGImage
operator|::
name|ensureContext
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QSize
name|newSize
init|=
name|windowSurfaceSize
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|size
operator|!=
name|newSize
condition|)
block|{
comment|// The surface size has changed, so we need to recreate
comment|// the back buffer.  Keep the same context and paint engine.
name|size
operator|=
name|newSize
expr_stmt|;
if|if
condition|(
name|isPaintingActive
condition|)
name|context
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
name|isPaintingActive
operator|=
literal|false
expr_stmt|;
name|recreateBackBuffer
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|context
condition|)
block|{
comment|// Create a new EGL context.  We create the surface in beginPaint().
name|size
operator|=
name|newSize
expr_stmt|;
name|context
operator|=
name|qt_vg_create_context
argument_list|(
name|widget
argument_list|,
name|QInternal
operator|::
name|Widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
condition|)
return|return
literal|0
return|;
name|isPaintingActive
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QVGEGLWindowSurfaceVGImage
operator|::
name|beginPaint
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QEglContext
modifier|*
name|context
init|=
name|ensureContext
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|recreateBackBuffer
operator|||
name|backBufferSurface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
comment|// Create a VGImage object to act as the back buffer
comment|// for this window.  We have to create the VGImage with a
comment|// current context, so activate the main surface for the window.
name|context
operator|->
name|makeCurrent
argument_list|(
name|mainSurface
argument_list|()
argument_list|)
expr_stmt|;
name|recreateBackBuffer
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|backBufferSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
name|eglDestroySurface
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|backBufferSurface
argument_list|)
expr_stmt|;
name|backBufferSurface
operator|=
name|EGL_NO_SURFACE
expr_stmt|;
block|}
if|if
condition|(
name|backBuffer
operator|!=
name|VG_INVALID_HANDLE
condition|)
block|{
name|vgDestroyImage
argument_list|(
name|backBuffer
argument_list|)
expr_stmt|;
block|}
name|VGImageFormat
name|format
init|=
name|qt_vg_config_to_vg_format
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|backBuffer
operator|=
name|vgCreateImage
argument_list|(
name|format
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|VG_IMAGE_QUALITY_FASTER
argument_list|)
expr_stmt|;
if|if
condition|(
name|backBuffer
operator|!=
name|VG_INVALID_HANDLE
condition|)
block|{
comment|// Create an EGL surface for rendering into the VGImage.
name|backBufferSurface
operator|=
name|eglCreatePbufferFromClientBuffer
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|EGL_OPENVG_IMAGE
argument_list|,
call|(
name|EGLClientBuffer
call|)
argument_list|(
name|backBuffer
argument_list|)
argument_list|,
name|context
operator|->
name|config
argument_list|()
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|backBufferSurface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|vgDestroyImage
argument_list|(
name|backBuffer
argument_list|)
expr_stmt|;
name|backBuffer
operator|=
name|VG_INVALID_HANDLE
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|backBufferSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
name|context
operator|->
name|makeCurrent
argument_list|(
name|backBufferSurface
argument_list|)
expr_stmt|;
else|else
name|context
operator|->
name|makeCurrent
argument_list|(
name|mainSurface
argument_list|()
argument_list|)
expr_stmt|;
name|isPaintingActive
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QVGEGLWindowSurfaceVGImage
operator|::
name|endPaint
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|QImage
modifier|*
name|image
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|QEglContext
modifier|*
name|context
init|=
name|ensureContext
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|backBufferSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
if|if
condition|(
name|isPaintingActive
condition|)
name|vgFlush
argument_list|()
expr_stmt|;
name|context
operator|->
name|lazyDoneCurrent
argument_list|()
expr_stmt|;
block|}
name|isPaintingActive
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|surfaceImage
name|VGImage
name|QVGEGLWindowSurfaceVGImage
operator|::
name|surfaceImage
parameter_list|()
specifier|const
block|{
return|return
name|backBuffer
return|;
block|}
end_function
begin_function
DECL|function|mainSurface
name|EGLSurface
name|QVGEGLWindowSurfaceVGImage
operator|::
name|mainSurface
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|windowSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
return|return
name|windowSurface
return|;
else|else
return|return
name|qt_vg_shared_surface
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QVG_VGIMAGE_BACKBUFFERS
end_comment
begin_constructor
DECL|function|QVGEGLWindowSurfaceDirect
name|QVGEGLWindowSurfaceDirect
operator|::
name|QVGEGLWindowSurfaceDirect
parameter_list|(
name|QWindowSurface
modifier|*
name|win
parameter_list|)
member_init_list|:
name|QVGEGLWindowSurfacePrivate
argument_list|(
name|win
argument_list|)
member_init_list|,
name|context
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|isPaintingActive
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|needToSwap
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|windowSurface
argument_list|(
name|EGL_NO_SURFACE
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QVGEGLWindowSurfaceDirect
name|QVGEGLWindowSurfaceDirect
operator|::
name|~
name|QVGEGLWindowSurfaceDirect
parameter_list|()
block|{
name|destroyPaintEngine
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|windowSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
name|context
operator|->
name|destroySurface
argument_list|(
name|windowSurface
argument_list|)
expr_stmt|;
name|qt_vg_destroy_context
argument_list|(
name|context
argument_list|,
name|QInternal
operator|::
name|Widget
argument_list|)
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|ensureContext
name|QEglContext
modifier|*
name|QVGEGLWindowSurfaceDirect
operator|::
name|ensureContext
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QSize
name|newSize
init|=
name|windowSurfaceSize
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QEglProperties
name|surfaceProps
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QVG_RECREATE_ON_SIZE_CHANGE
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QVG_NO_SINGLE_CONTEXT
argument_list|)
if|if
condition|(
name|context
operator|&&
name|size
operator|!=
name|newSize
condition|)
block|{
comment|// The surface size has changed, so we need to recreate it.
comment|// We can keep the same context and paint engine.
name|size
operator|=
name|newSize
expr_stmt|;
if|if
condition|(
name|isPaintingActive
condition|)
name|context
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
name|context
operator|->
name|destroySurface
argument_list|(
name|windowSurface
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
argument_list|)
if|if
condition|(
name|isPremultipliedContext
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|surfaceProps
operator|.
name|setValue
argument_list|(
name|EGL_VG_ALPHA_FORMAT
argument_list|,
name|EGL_VG_ALPHA_FORMAT_PRE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|surfaceProps
operator|.
name|removeValue
argument_list|(
name|EGL_VG_ALPHA_FORMAT
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|windowSurface
operator|=
name|context
operator|->
name|createSurface
argument_list|(
name|widget
argument_list|,
operator|&
name|surfaceProps
argument_list|)
expr_stmt|;
name|isPaintingActive
operator|=
literal|false
expr_stmt|;
name|needToSwap
operator|=
literal|true
expr_stmt|;
block|}
else|#
directive|else
if|if
condition|(
name|context
operator|&&
name|size
operator|!=
name|newSize
condition|)
block|{
comment|// The surface size has changed, so we need to recreate
comment|// the EGL context for the widget.  We also need to recreate
comment|// the surface's paint engine if context sharing is not
comment|// enabled because we cannot reuse the existing paint objects
comment|// in the new context.
name|qt_vg_destroy_paint_engine
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|engine
operator|=
literal|0
expr_stmt|;
name|context
operator|->
name|destroySurface
argument_list|(
name|windowSurface
argument_list|)
expr_stmt|;
name|qt_vg_destroy_context
argument_list|(
name|context
argument_list|,
name|QInternal
operator|::
name|Widget
argument_list|)
expr_stmt|;
name|context
operator|=
literal|0
expr_stmt|;
name|windowSurface
operator|=
name|EGL_NO_SURFACE
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
if|if
condition|(
operator|!
name|context
condition|)
block|{
comment|// Create a new EGL context and bind it to the widget surface.
name|size
operator|=
name|newSize
expr_stmt|;
name|context
operator|=
name|qt_vg_create_context
argument_list|(
name|widget
argument_list|,
name|QInternal
operator|::
name|Widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
condition|)
return|return
literal|0
return|;
comment|// We want a direct to window rendering surface if possible.
if|#
directive|if
name|defined
argument_list|(
name|QVG_DIRECT_TO_WINDOW
argument_list|)
name|surfaceProps
operator|.
name|setValue
argument_list|(
name|EGL_RENDER_BUFFER
argument_list|,
name|EGL_SINGLE_BUFFER
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
argument_list|)
if|if
condition|(
name|isPremultipliedContext
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|surfaceProps
operator|.
name|setValue
argument_list|(
name|EGL_VG_ALPHA_FORMAT
argument_list|,
name|EGL_VG_ALPHA_FORMAT_PRE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|surfaceProps
operator|.
name|removeValue
argument_list|(
name|EGL_VG_ALPHA_FORMAT
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|EGLSurface
name|surface
init|=
name|context
operator|->
name|createSurface
argument_list|(
name|widget
argument_list|,
operator|&
name|surfaceProps
argument_list|)
decl_stmt|;
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|qt_vg_destroy_context
argument_list|(
name|context
argument_list|,
name|QInternal
operator|::
name|Widget
argument_list|)
expr_stmt|;
name|context
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
name|needToSwap
operator|=
literal|true
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QVG_DIRECT_TO_WINDOW
argument_list|)
comment|// Did we get a direct to window rendering surface?
name|EGLint
name|buffer
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|eglQueryContext
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|context
operator|->
name|context
argument_list|()
argument_list|,
name|EGL_RENDER_BUFFER
argument_list|,
operator|&
name|buffer
argument_list|)
operator|&&
name|buffer
operator|==
name|EGL_SINGLE_BUFFER
condition|)
block|{
name|needToSwap
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
name|windowSurface
operator|=
name|surface
expr_stmt|;
name|isPaintingActive
operator|=
literal|false
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QVG_NO_PRESERVED_SWAP
argument_list|)
comment|// Try to force the surface back buffer to preserve its contents.
if|if
condition|(
name|needToSwap
condition|)
block|{
name|bool
name|succeeded
init|=
name|eglSurfaceAttrib
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|windowSurface
argument_list|,
name|EGL_SWAP_BEHAVIOR
argument_list|,
name|EGL_BUFFER_PRESERVED
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|succeeded
operator|&&
name|eglGetError
argument_list|()
operator|!=
name|EGL_SUCCESS
condition|)
block|{
name|qWarning
argument_list|(
literal|"QVG: could not enable preserved swap"
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
return|return
name|context
return|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QVGEGLWindowSurfaceDirect
operator|::
name|beginPaint
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QEglContext
modifier|*
name|context
init|=
name|ensureContext
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|makeCurrent
argument_list|(
name|windowSurface
argument_list|)
expr_stmt|;
name|isPaintingActive
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QVGEGLWindowSurfaceDirect
operator|::
name|endPaint
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|QImage
modifier|*
name|image
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|QEglContext
modifier|*
name|context
init|=
name|ensureContext
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|needToSwap
condition|)
block|{
if|if
condition|(
operator|!
name|isPaintingActive
condition|)
name|context
operator|->
name|makeCurrent
argument_list|(
name|windowSurface
argument_list|)
expr_stmt|;
name|context
operator|->
name|swapBuffers
argument_list|(
name|windowSurface
argument_list|)
expr_stmt|;
name|context
operator|->
name|lazyDoneCurrent
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isPaintingActive
condition|)
block|{
name|vgFlush
argument_list|()
expr_stmt|;
name|context
operator|->
name|lazyDoneCurrent
argument_list|()
expr_stmt|;
block|}
name|isPaintingActive
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|supportsStaticContents
name|bool
name|QVGEGLWindowSurfaceDirect
operator|::
name|supportsStaticContents
parameter_list|()
specifier|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|QVG_BUFFER_SCROLLING
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QVG_NO_PRESERVED_SWAP
argument_list|)
return|return
literal|true
return|;
else|#
directive|else
return|return
name|QVGEGLWindowSurfacePrivate
operator|::
name|supportsStaticContents
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QVGEGLWindowSurfaceDirect
operator|::
name|scroll
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QVG_BUFFER_SCROLLING
name|QEglContext
modifier|*
name|context
init|=
name|ensureContext
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|makeCurrent
argument_list|(
name|windowSurface
argument_list|)
expr_stmt|;
name|QRect
name|scrollRect
init|=
name|area
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|int
name|sx
init|=
name|scrollRect
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|sy
init|=
name|size
operator|.
name|height
argument_list|()
operator|-
name|scrollRect
operator|.
name|y
argument_list|()
operator|-
name|scrollRect
operator|.
name|height
argument_list|()
decl_stmt|;
name|vgSeti
argument_list|(
name|VG_SCISSORING
argument_list|,
name|VG_FALSE
argument_list|)
expr_stmt|;
name|vgCopyPixels
argument_list|(
name|sx
operator|+
name|dx
argument_list|,
name|sy
operator|-
name|dy
argument_list|,
name|sx
argument_list|,
name|sy
argument_list|,
name|scrollRect
operator|.
name|width
argument_list|()
argument_list|,
name|scrollRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|->
name|lazyDoneCurrent
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|dx
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|dy
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
