begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenVG module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsurface_vg_p.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsurface_vgegl_p.h"
end_include
begin_include
include|#
directive|include
file|"qpaintengine_vg_p.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapdata_vg_p.h"
end_include
begin_include
include|#
directive|include
file|"qvg_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtGui/private/qeglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qwidget_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QVGWindowSurface
name|QVGWindowSurface
operator|::
name|QVGWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QWindowSurface
argument_list|(
name|window
argument_list|)
block|{
comment|// Create the default type of EGL window surface for windows.
name|d_ptr
operator|=
operator|new
name|QVGEGLWindowSurfaceDirect
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QVGWindowSurface
name|QVGWindowSurface
operator|::
name|QVGWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|window
parameter_list|,
name|QVGEGLWindowSurfacePrivate
modifier|*
name|d
parameter_list|)
member_init_list|:
name|QWindowSurface
argument_list|(
name|window
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
name|d
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QVGWindowSurface
name|QVGWindowSurface
operator|::
name|~
name|QVGWindowSurface
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QVGWindowSurface
operator|::
name|paintDevice
parameter_list|()
block|{
return|return
name|this
return|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QVGWindowSurface
operator|::
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|offset
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
if|if
condition|(
name|window
argument_list|()
operator|!=
name|widget
condition|)
block|{
comment|// For performance reasons we don't support
comment|// flushing native child widgets on Symbian.
comment|// It breaks overlapping native child widget
comment|// rendering in some cases but we prefer performance.
return|return;
block|}
endif|#
directive|endif
name|QWidget
modifier|*
name|parent
init|=
name|widget
operator|->
name|internalWinId
argument_list|()
condition|?
name|widget
else|:
name|widget
operator|->
name|nativeParentWidget
argument_list|()
decl_stmt|;
name|d_ptr
operator|->
name|endPaint
argument_list|(
name|parent
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QVGWindowSurface
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QWindowSurface
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QVGWindowSurface
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|scroll
argument_list|(
name|window
argument_list|()
argument_list|,
name|area
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
condition|)
return|return
name|QWindowSurface
operator|::
name|scroll
argument_list|(
name|area
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QVGWindowSurface
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|d_ptr
operator|->
name|beginPaint
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the window is not opaque, then fill the region we are about
comment|// to paint with the transparent color.
if|if
condition|(
operator|!
name|qt_widget_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|isOpaque
operator|&&
name|window
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
condition|)
block|{
name|QVGPaintEngine
modifier|*
name|engine
init|=
cast|static_cast
argument_list|<
name|QVGPaintEngine
operator|*
argument_list|>
argument_list|(
name|d_ptr
operator|->
name|paintEngine
argument_list|()
argument_list|)
decl_stmt|;
name|engine
operator|->
name|fillRegion
argument_list|(
name|region
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|,
name|d_ptr
operator|->
name|surfaceSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QVGWindowSurface
operator|::
name|endPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
comment|// Nothing to do here.
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QVGWindowSurface
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|paintEngine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|features
name|QWindowSurface
operator|::
name|WindowSurfaceFeatures
name|QVGWindowSurface
operator|::
name|features
parameter_list|()
specifier|const
block|{
name|WindowSurfaceFeatures
name|features
init|=
name|PartialUpdates
operator||
name|PreservedContents
decl_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|supportsStaticContents
argument_list|()
condition|)
name|features
operator||=
name|StaticContents
expr_stmt|;
return|return
name|features
return|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QVGWindowSurface
operator|::
name|metric
parameter_list|(
name|PaintDeviceMetric
name|met
parameter_list|)
specifier|const
block|{
return|return
name|qt_paint_device_metric
argument_list|(
name|window
argument_list|()
argument_list|,
name|met
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
