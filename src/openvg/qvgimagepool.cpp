begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenVG module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qvgimagepool_p.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapdata_vg_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qt_vg_image_pool
specifier|static
name|QVGImagePool
modifier|*
name|qt_vg_image_pool
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QVGImagePoolPrivate
class|class
name|QVGImagePoolPrivate
block|{
public|public:
DECL|function|QVGImagePoolPrivate
name|QVGImagePoolPrivate
parameter_list|()
member_init_list|:
name|lruFirst
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lruLast
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|lruFirst
name|QVGPixmapData
modifier|*
name|lruFirst
decl_stmt|;
DECL|member|lruLast
name|QVGPixmapData
modifier|*
name|lruLast
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QVGImagePool
name|QVGImagePool
operator|::
name|QVGImagePool
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QVGImagePoolPrivate
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QVGImagePool
name|QVGImagePool
operator|::
name|~
name|QVGImagePool
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|instance
name|QVGImagePool
modifier|*
name|QVGImagePool
operator|::
name|instance
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_vg_image_pool
condition|)
name|qt_vg_image_pool
operator|=
operator|new
name|QVGImagePool
argument_list|()
expr_stmt|;
return|return
name|qt_vg_image_pool
return|;
block|}
end_function
begin_function
DECL|function|setImagePool
name|void
name|QVGImagePool
operator|::
name|setImagePool
parameter_list|(
name|QVGImagePool
modifier|*
name|pool
parameter_list|)
block|{
if|if
condition|(
name|qt_vg_image_pool
operator|!=
name|pool
condition|)
operator|delete
name|qt_vg_image_pool
expr_stmt|;
name|qt_vg_image_pool
operator|=
name|pool
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createTemporaryImage
name|VGImage
name|QVGImagePool
operator|::
name|createTemporaryImage
parameter_list|(
name|VGImageFormat
name|format
parameter_list|,
name|VGint
name|width
parameter_list|,
name|VGint
name|height
parameter_list|,
name|VGbitfield
name|allowedQuality
parameter_list|,
name|QVGPixmapData
modifier|*
name|keepData
parameter_list|)
block|{
name|VGImage
name|image
decl_stmt|;
do|do
block|{
name|image
operator|=
name|vgCreateImage
argument_list|(
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|allowedQuality
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|!=
name|VG_INVALID_HANDLE
condition|)
return|return
name|image
return|;
block|}
do|while
condition|(
name|reclaimSpace
argument_list|(
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|keepData
argument_list|)
condition|)
do|;
name|qWarning
argument_list|(
literal|"QVGImagePool: cannot reclaim sufficient space for a %dx%d temporary image"
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
return|return
name|VG_INVALID_HANDLE
return|;
block|}
end_function
begin_function
DECL|function|createImageForPixmap
name|VGImage
name|QVGImagePool
operator|::
name|createImageForPixmap
parameter_list|(
name|VGImageFormat
name|format
parameter_list|,
name|VGint
name|width
parameter_list|,
name|VGint
name|height
parameter_list|,
name|VGbitfield
name|allowedQuality
parameter_list|,
name|QVGPixmapData
modifier|*
name|data
parameter_list|)
block|{
name|VGImage
name|image
decl_stmt|;
do|do
block|{
name|image
operator|=
name|vgCreateImage
argument_list|(
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|allowedQuality
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|!=
name|VG_INVALID_HANDLE
condition|)
block|{
if|if
condition|(
name|data
condition|)
name|moveToHeadOfLRU
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|image
return|;
block|}
block|}
do|while
condition|(
name|reclaimSpace
argument_list|(
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|data
argument_list|)
condition|)
do|;
name|qWarning
argument_list|(
literal|"QVGImagePool: cannot reclaim sufficient space for a %dx%d pixmap"
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
return|return
name|VG_INVALID_HANDLE
return|;
block|}
end_function
begin_function
DECL|function|createPermanentImage
name|VGImage
name|QVGImagePool
operator|::
name|createPermanentImage
parameter_list|(
name|VGImageFormat
name|format
parameter_list|,
name|VGint
name|width
parameter_list|,
name|VGint
name|height
parameter_list|,
name|VGbitfield
name|allowedQuality
parameter_list|)
block|{
name|VGImage
name|image
decl_stmt|;
do|do
block|{
name|image
operator|=
name|vgCreateImage
argument_list|(
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|allowedQuality
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|!=
name|VG_INVALID_HANDLE
condition|)
return|return
name|image
return|;
block|}
do|while
condition|(
name|reclaimSpace
argument_list|(
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|)
condition|)
do|;
name|qWarning
argument_list|(
literal|"QVGImagePool: cannot reclaim sufficient space for a %dx%d image"
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
return|return
name|VG_INVALID_HANDLE
return|;
block|}
end_function
begin_function
DECL|function|releaseImage
name|void
name|QVGImagePool
operator|::
name|releaseImage
parameter_list|(
name|QVGPixmapData
modifier|*
name|data
parameter_list|,
name|VGImage
name|image
parameter_list|)
block|{
comment|// Very simple strategy at the moment: just destroy the image.
if|if
condition|(
name|data
condition|)
name|removeFromLRU
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|vgDestroyImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|useImage
name|void
name|QVGImagePool
operator|::
name|useImage
parameter_list|(
name|QVGPixmapData
modifier|*
name|data
parameter_list|)
block|{
name|moveToHeadOfLRU
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detachImage
name|void
name|QVGImagePool
operator|::
name|detachImage
parameter_list|(
name|QVGPixmapData
modifier|*
name|data
parameter_list|)
block|{
name|removeFromLRU
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reclaimSpace
name|bool
name|QVGImagePool
operator|::
name|reclaimSpace
parameter_list|(
name|VGImageFormat
name|format
parameter_list|,
name|VGint
name|width
parameter_list|,
name|VGint
name|height
parameter_list|,
name|QVGPixmapData
modifier|*
name|data
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|format
argument_list|)
expr_stmt|;
comment|// For future use in picking the best image to eject.
name|Q_UNUSED
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|bool
name|succeeded
init|=
literal|false
decl_stmt|;
name|bool
name|wasInLRU
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|data
condition|)
block|{
name|wasInLRU
operator|=
name|data
operator|->
name|inLRU
expr_stmt|;
name|moveToHeadOfLRU
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|QVGPixmapData
modifier|*
name|lrudata
init|=
name|pixmapLRU
argument_list|()
decl_stmt|;
if|if
condition|(
name|lrudata
operator|&&
name|lrudata
operator|!=
name|data
condition|)
block|{
name|lrudata
operator|->
name|reclaimImages
argument_list|()
expr_stmt|;
name|succeeded
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|&&
operator|!
name|wasInLRU
condition|)
name|removeFromLRU
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|succeeded
return|;
block|}
end_function
begin_function
DECL|function|hibernate
name|void
name|QVGImagePool
operator|::
name|hibernate
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QVGImagePool
argument_list|)
expr_stmt|;
name|QVGPixmapData
modifier|*
name|pd
init|=
name|d
operator|->
name|lruLast
decl_stmt|;
while|while
condition|(
name|pd
condition|)
block|{
name|QVGPixmapData
modifier|*
name|prevLRU
init|=
name|pd
operator|->
name|prevLRU
decl_stmt|;
name|pd
operator|->
name|inImagePool
operator|=
literal|false
expr_stmt|;
name|pd
operator|->
name|inLRU
operator|=
literal|false
expr_stmt|;
name|pd
operator|->
name|nextLRU
operator|=
literal|0
expr_stmt|;
name|pd
operator|->
name|prevLRU
operator|=
literal|0
expr_stmt|;
name|pd
operator|->
name|hibernate
argument_list|()
expr_stmt|;
name|pd
operator|=
name|prevLRU
expr_stmt|;
block|}
name|d
operator|->
name|lruFirst
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|lruLast
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveToHeadOfLRU
name|void
name|QVGImagePool
operator|::
name|moveToHeadOfLRU
parameter_list|(
name|QVGPixmapData
modifier|*
name|data
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QVGImagePool
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|->
name|inLRU
condition|)
block|{
if|if
condition|(
operator|!
name|data
operator|->
name|prevLRU
condition|)
return|return;
comment|// Already at the head of the list.
name|removeFromLRU
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|data
operator|->
name|inLRU
operator|=
literal|true
expr_stmt|;
name|data
operator|->
name|nextLRU
operator|=
name|d
operator|->
name|lruFirst
expr_stmt|;
name|data
operator|->
name|prevLRU
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lruFirst
condition|)
name|d
operator|->
name|lruFirst
operator|->
name|prevLRU
operator|=
name|data
expr_stmt|;
else|else
name|d
operator|->
name|lruLast
operator|=
name|data
expr_stmt|;
name|d
operator|->
name|lruFirst
operator|=
name|data
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeFromLRU
name|void
name|QVGImagePool
operator|::
name|removeFromLRU
parameter_list|(
name|QVGPixmapData
modifier|*
name|data
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QVGImagePool
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|data
operator|->
name|inLRU
condition|)
return|return;
if|if
condition|(
name|data
operator|->
name|nextLRU
condition|)
name|data
operator|->
name|nextLRU
operator|->
name|prevLRU
operator|=
name|data
operator|->
name|prevLRU
expr_stmt|;
else|else
name|d
operator|->
name|lruLast
operator|=
name|data
operator|->
name|prevLRU
expr_stmt|;
if|if
condition|(
name|data
operator|->
name|prevLRU
condition|)
name|data
operator|->
name|prevLRU
operator|->
name|nextLRU
operator|=
name|data
operator|->
name|nextLRU
expr_stmt|;
else|else
name|d
operator|->
name|lruFirst
operator|=
name|data
operator|->
name|nextLRU
expr_stmt|;
name|data
operator|->
name|inLRU
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixmapLRU
name|QVGPixmapData
modifier|*
name|QVGImagePool
operator|::
name|pixmapLRU
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QVGImagePool
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lruLast
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
