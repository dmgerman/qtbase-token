begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpixmapdata_vg_p.h"
end_include
begin_include
include|#
directive|include
file|"qvgfontglyphcache_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qnativeimagehandleprovider_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_s60_p.h>
end_include
begin_include
include|#
directive|include
file|<fbs.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_SYMBIAN_SUPPORTS_SGIMAGE
end_ifdef
begin_include
include|#
directive|include
file|<sgresource/sgimage.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|SYMBIAN_FBSERV_GLYPHDATA
end_ifdef
begin_comment
comment|// defined in fbs.h
end_comment
begin_define
DECL|macro|QT_SYMBIAN_HARDWARE_GLYPH_CACHE
define|#
directive|define
name|QT_SYMBIAN_HARDWARE_GLYPH_CACHE
end_define
begin_include
include|#
directive|include
file|<graphics/fbsglyphdataiterator.h>
end_include
begin_include
include|#
directive|include
file|<private/qfontengine_s60_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|_vgCreateEGLImageTargetKHR
typedef|typedef
name|VGImage
function_decl|(
modifier|*
name|_vgCreateEGLImageTargetKHR
function_decl|)
parameter_list|(
name|VGeglImageKHR
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|qt_vgCreateEGLImageTargetKHR
specifier|static
name|_vgCreateEGLImageTargetKHR
name|qt_vgCreateEGLImageTargetKHR
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_namespace
DECL|namespace|QVG
namespace|namespace
name|QVG
block|{
name|VGImage
name|vgCreateEGLImageTargetKHR
parameter_list|(
name|VGeglImageKHR
name|eglImage
parameter_list|)
function_decl|;
block|}
end_namespace
begin_function
DECL|function|vgCreateEGLImageTargetKHR
name|VGImage
name|QVG
operator|::
name|vgCreateEGLImageTargetKHR
parameter_list|(
name|VGeglImageKHR
name|eglImage
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qt_vgCreateEGLImageTargetKHR
operator|&&
name|QEgl
operator|::
name|hasExtension
argument_list|(
literal|"EGL_KHR_image"
argument_list|)
condition|)
name|qt_vgCreateEGLImageTargetKHR
operator|=
operator|(
name|_vgCreateEGLImageTargetKHR
operator|)
name|eglGetProcAddress
argument_list|(
literal|"vgCreateEGLImageTargetKHR"
argument_list|)
expr_stmt|;
return|return
name|qt_vgCreateEGLImageTargetKHR
condition|?
name|qt_vgCreateEGLImageTargetKHR
argument_list|(
name|eglImage
argument_list|)
else|:
literal|0
return|;
block|}
end_function
begin_decl_stmt
specifier|extern
name|int
name|qt_vg_pixmap_serial
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QT_SYMBIAN_SUPPORTS_SGIMAGE
end_ifdef
begin_function
DECL|function|sgImageToVGImage
specifier|static
name|VGImage
name|sgImageToVGImage
parameter_list|(
name|QEglContext
modifier|*
name|context
parameter_list|,
specifier|const
name|RSgImage
modifier|&
name|sgImage
parameter_list|)
block|{
comment|// when "0" used as argument then
comment|// default display, context are used
if|if
condition|(
operator|!
name|context
condition|)
name|context
operator|=
name|qt_vg_create_context
argument_list|(
literal|0
argument_list|,
name|QInternal
operator|::
name|Pixmap
argument_list|)
expr_stmt|;
name|VGImage
name|vgImage
init|=
name|VG_INVALID_HANDLE
decl_stmt|;
if|if
condition|(
name|sgImage
operator|.
name|IsNull
argument_list|()
condition|)
return|return
name|vgImage
return|;
specifier|const
name|EGLint
name|KEglImageAttribs
index|[]
init|=
block|{
name|EGL_IMAGE_PRESERVED_SYMBIAN
block|,
name|EGL_TRUE
block|,
name|EGL_NONE
block|}
decl_stmt|;
name|EGLImageKHR
name|eglImage
init|=
name|QEgl
operator|::
name|eglCreateImageKHR
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|EGL_NO_CONTEXT
argument_list|,
name|EGL_NATIVE_PIXMAP_KHR
argument_list|,
operator|(
name|EGLClientBuffer
operator|)
operator|&
name|sgImage
argument_list|,
operator|(
name|EGLint
operator|*
operator|)
name|KEglImageAttribs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|eglImage
condition|)
return|return
name|vgImage
return|;
name|vgImage
operator|=
name|QVG
operator|::
name|vgCreateEGLImageTargetKHR
argument_list|(
name|eglImage
argument_list|)
expr_stmt|;
name|QEgl
operator|::
name|eglDestroyImageKHR
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|eglImage
argument_list|)
expr_stmt|;
return|return
name|vgImage
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|cleanup
name|void
name|QVGPixmapData
operator|::
name|cleanup
parameter_list|()
block|{
name|is_null
operator|=
name|w
operator|=
name|h
operator|=
literal|0
expr_stmt|;
name|recreate
operator|=
literal|false
expr_stmt|;
name|source
operator|=
name|QVolatileImage
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initFromNativeImageHandle
name|bool
name|QVGPixmapData
operator|::
name|initFromNativeImageHandle
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
specifier|const
name|QString
modifier|&
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"RSgImage"
argument_list|)
condition|)
block|{
name|fromNativeType
argument_list|(
name|handle
argument_list|,
name|QPixmapData
operator|::
name|SgImage
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"CFbsBitmap"
argument_list|)
condition|)
block|{
name|fromNativeType
argument_list|(
name|handle
argument_list|,
name|QPixmapData
operator|::
name|FbsBitmap
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|createFromNativeImageHandleProvider
name|void
name|QVGPixmapData
operator|::
name|createFromNativeImageHandleProvider
parameter_list|()
block|{
name|void
modifier|*
name|handle
init|=
literal|0
decl_stmt|;
name|QString
name|type
decl_stmt|;
name|nativeImageHandleProvider
operator|->
name|get
argument_list|(
operator|&
name|handle
argument_list|,
operator|&
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
if|if
condition|(
name|initFromNativeImageHandle
argument_list|(
name|handle
argument_list|,
name|type
argument_list|)
condition|)
block|{
name|nativeImageHandle
operator|=
name|handle
expr_stmt|;
name|nativeImageType
operator|=
name|type
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QVGPixmapData: Unknown native image type '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QVGPixmapData: Native handle is null"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|releaseNativeImageHandle
name|void
name|QVGPixmapData
operator|::
name|releaseNativeImageHandle
parameter_list|()
block|{
if|if
condition|(
name|nativeImageHandleProvider
operator|&&
name|nativeImageHandle
condition|)
block|{
name|nativeImageHandleProvider
operator|->
name|release
argument_list|(
name|nativeImageHandle
argument_list|,
name|nativeImageType
argument_list|)
expr_stmt|;
name|nativeImageHandle
operator|=
literal|0
expr_stmt|;
name|nativeImageType
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|conversionLessFormat
specifier|static
specifier|inline
name|bool
name|conversionLessFormat
parameter_list|(
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
comment|// EColor64K
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
comment|// EColor16MU
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
comment|// EColor16MA
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
comment|// EColor16MAP
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
comment|// EGray256, EColor256
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|fromNativeType
name|void
name|QVGPixmapData
operator|::
name|fromNativeType
parameter_list|(
name|void
modifier|*
name|pixmap
parameter_list|,
name|NativeType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|QPixmapData
operator|::
name|SgImage
operator|&&
name|pixmap
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_SYMBIAN_SUPPORTS_SGIMAGE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
name|RSgImage
modifier|*
name|sgImage
init|=
cast|reinterpret_cast
argument_list|<
name|RSgImage
operator|*
argument_list|>
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|destroyImages
argument_list|()
expr_stmt|;
name|prevSize
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|vgImage
operator|=
name|sgImageToVGImage
argument_list|(
name|context
argument_list|,
operator|*
name|sgImage
argument_list|)
expr_stmt|;
if|if
condition|(
name|vgImage
operator|!=
name|VG_INVALID_HANDLE
condition|)
block|{
name|w
operator|=
name|vgGetParameteri
argument_list|(
name|vgImage
argument_list|,
name|VG_IMAGE_WIDTH
argument_list|)
expr_stmt|;
name|h
operator|=
name|vgGetParameteri
argument_list|(
name|vgImage
argument_list|,
name|VG_IMAGE_HEIGHT
argument_list|)
expr_stmt|;
name|d
operator|=
literal|32
expr_stmt|;
comment|// We always use ARGB_Premultiplied for VG pixmaps.
block|}
name|is_null
operator|=
operator|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
operator|)
expr_stmt|;
name|source
operator|=
name|QVolatileImage
argument_list|()
expr_stmt|;
comment|// readback will be done later, only when needed
name|recreate
operator|=
literal|false
expr_stmt|;
name|prevSize
operator|=
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|updateSerial
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QPixmapData
operator|::
name|FbsBitmap
operator|&&
name|pixmap
condition|)
block|{
name|CFbsBitmap
modifier|*
name|bitmap
init|=
cast|reinterpret_cast
argument_list|<
name|CFbsBitmap
operator|*
argument_list|>
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|QSize
name|size
argument_list|(
name|bitmap
operator|->
name|SizeInPixels
argument_list|()
operator|.
name|iWidth
argument_list|,
name|bitmap
operator|->
name|SizeInPixels
argument_list|()
operator|.
name|iHeight
argument_list|)
decl_stmt|;
name|resize
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
name|QVolatileImage
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
comment|// duplicates only, if possible
if|if
condition|(
name|source
operator|.
name|isNull
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|conversionLessFormat
argument_list|(
name|source
operator|.
name|format
argument_list|()
argument_list|)
condition|)
block|{
comment|// Here we may need to copy if the formats do not match.
comment|// (e.g. for display modes other than EColor16MAP and EColor16MU)
name|source
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|idealFormat
argument_list|(
operator|&
name|source
operator|.
name|imageRef
argument_list|()
argument_list|,
name|Qt
operator|::
name|AutoColor
argument_list|)
decl_stmt|;
name|source
operator|.
name|endDataAccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|source
operator|.
name|ensureFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
name|recreate
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QPixmapData
operator|::
name|VolatileImage
operator|&&
name|pixmap
condition|)
block|{
name|QVolatileImage
modifier|*
name|img
init|=
cast|static_cast
argument_list|<
name|QVolatileImage
operator|*
argument_list|>
argument_list|(
name|pixmap
argument_list|)
decl_stmt|;
name|resize
argument_list|(
name|img
operator|->
name|width
argument_list|()
argument_list|,
name|img
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|=
operator|*
name|img
expr_stmt|;
name|recreate
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QPixmapData
operator|::
name|NativeImageHandleProvider
operator|&&
name|pixmap
condition|)
block|{
name|destroyImages
argument_list|()
expr_stmt|;
name|nativeImageHandleProvider
operator|=
cast|static_cast
argument_list|<
name|QNativeImageHandleProvider
operator|*
argument_list|>
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
comment|// Cannot defer the retrieval, we need at least the size right away.
name|createFromNativeImageHandleProvider
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toNativeType
name|void
modifier|*
name|QVGPixmapData
operator|::
name|toNativeType
parameter_list|(
name|NativeType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|QPixmapData
operator|::
name|SgImage
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_SYMBIAN_SUPPORTS_SGIMAGE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
name|toVGImage
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isValid
argument_list|()
operator|||
name|vgImage
operator|==
name|VG_INVALID_HANDLE
condition|)
return|return
literal|0
return|;
name|TInt
name|err
init|=
literal|0
decl_stmt|;
name|RSgDriver
name|driver
decl_stmt|;
name|err
operator|=
name|driver
operator|.
name|Open
argument_list|()
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
return|return
literal|0
return|;
name|TSgImageInfo
name|sgInfo
decl_stmt|;
name|sgInfo
operator|.
name|iPixelFormat
operator|=
name|EUidPixelFormatARGB_8888_PRE
expr_stmt|;
name|sgInfo
operator|.
name|iSizeInPixels
operator|.
name|SetSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|sgInfo
operator|.
name|iUsage
operator|=
name|ESgUsageBitOpenVgImage
operator||
name|ESgUsageBitOpenVgSurface
expr_stmt|;
name|QScopedPointer
argument_list|<
name|RSgImage
argument_list|>
name|sgImage
argument_list|(
operator|new
name|RSgImage
argument_list|()
argument_list|)
decl_stmt|;
name|err
operator|=
name|sgImage
operator|->
name|Create
argument_list|(
name|sgInfo
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
block|{
name|driver
operator|.
name|Close
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|const
name|EGLint
name|KEglImageAttribs
index|[]
init|=
block|{
name|EGL_IMAGE_PRESERVED_SYMBIAN
block|,
name|EGL_TRUE
block|,
name|EGL_NONE
block|}
decl_stmt|;
name|EGLImageKHR
name|eglImage
init|=
name|QEgl
operator|::
name|eglCreateImageKHR
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|EGL_NO_CONTEXT
argument_list|,
name|EGL_NATIVE_PIXMAP_KHR
argument_list|,
operator|(
name|EGLClientBuffer
operator|)
name|sgImage
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|EGLint
operator|*
operator|)
name|KEglImageAttribs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|eglImage
operator|||
name|eglGetError
argument_list|()
operator|!=
name|EGL_SUCCESS
condition|)
block|{
name|sgImage
operator|->
name|Close
argument_list|()
expr_stmt|;
name|driver
operator|.
name|Close
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|VGImage
name|dstVgImage
init|=
name|QVG
operator|::
name|vgCreateEGLImageTargetKHR
argument_list|(
name|eglImage
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dstVgImage
operator|||
name|vgGetError
argument_list|()
operator|!=
name|VG_NO_ERROR
condition|)
block|{
name|QEgl
operator|::
name|eglDestroyImageKHR
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|eglImage
argument_list|)
expr_stmt|;
name|sgImage
operator|->
name|Close
argument_list|()
expr_stmt|;
name|driver
operator|.
name|Close
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|vgCopyImage
argument_list|(
name|dstVgImage
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|vgImage
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|VG_FALSE
argument_list|)
expr_stmt|;
if|if
condition|(
name|vgGetError
argument_list|()
operator|!=
name|VG_NO_ERROR
condition|)
block|{
name|sgImage
operator|->
name|Close
argument_list|()
expr_stmt|;
name|sgImage
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// release stuff
name|vgDestroyImage
argument_list|(
name|dstVgImage
argument_list|)
expr_stmt|;
name|QEgl
operator|::
name|eglDestroyImageKHR
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|eglImage
argument_list|)
expr_stmt|;
name|driver
operator|.
name|Close
argument_list|()
expr_stmt|;
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|sgImage
operator|.
name|take
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QPixmapData
operator|::
name|FbsBitmap
operator|&&
name|isValid
argument_list|()
condition|)
block|{
name|ensureReadback
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|source
operator|=
name|QVolatileImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|sourceFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Just duplicate the bitmap handle, no data copying happens.
return|return
name|source
operator|.
name|duplicateNativeImage
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_constructor
DECL|function|QSymbianVGFontGlyphCache
name|QSymbianVGFontGlyphCache
operator|::
name|QSymbianVGFontGlyphCache
parameter_list|()
member_init_list|:
name|QVGFontGlyphCache
argument_list|()
block|{
ifdef|#
directive|ifdef
name|QT_SYMBIAN_HARDWARE_GLYPH_CACHE
name|invertedGlyphs
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function
DECL|function|cacheGlyphs
name|void
name|QSymbianVGFontGlyphCache
operator|::
name|cacheGlyphs
parameter_list|(
name|QVGPaintEnginePrivate
modifier|*
name|d
parameter_list|,
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|,
specifier|const
name|glyph_t
modifier|*
name|g
parameter_list|,
name|int
name|count
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_SYMBIAN_HARDWARE_GLYPH_CACHE
name|QFontEngineS60
modifier|*
name|s60fontEngine
init|=
cast|static_cast
argument_list|<
name|QFontEngineS60
operator|*
argument_list|>
argument_list|(
name|fontEngine
argument_list|)
decl_stmt|;
if|if
condition|(
name|s60fontEngine
operator|->
name|m_activeFont
operator|->
name|TypeUid
argument_list|()
operator|!=
name|KCFbsFontUid
condition|)
return|return
name|QVGFontGlyphCache
operator|::
name|cacheGlyphs
argument_list|(
name|d
argument_list|,
name|fontEngine
argument_list|,
name|g
argument_list|,
name|count
argument_list|)
return|;
name|QVector
argument_list|<
name|glyph_t
argument_list|>
name|uncachedGlyphs
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
comment|// Skip this glyph if we have already cached it before.
name|glyph_t
name|glyph
init|=
operator|*
name|g
operator|++
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|glyph
operator|<
literal|256
operator|)
operator|&&
operator|(
operator|(
name|cachedGlyphsMask
index|[
name|glyph
operator|/
literal|32
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|glyph
operator|%
literal|32
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|)
operator|||
name|cachedGlyphs
operator|.
name|contains
argument_list|(
name|glyph
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|uncachedGlyphs
operator|.
name|contains
argument_list|(
name|glyph
argument_list|)
condition|)
name|uncachedGlyphs
operator|.
name|append
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|uncachedGlyphs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CFbsFont
modifier|*
name|cfbsFont
init|=
cast|static_cast
argument_list|<
name|CFbsFont
operator|*
argument_list|>
argument_list|(
name|s60fontEngine
operator|->
name|m_activeFont
argument_list|)
decl_stmt|;
name|RFbsGlyphDataIterator
name|iter
decl_stmt|;
name|int
name|err
init|=
name|iter
operator|.
name|Open
argument_list|(
operator|*
name|cfbsFont
argument_list|,
operator|(
specifier|const
name|unsigned
name|int
operator|*
operator|)
name|uncachedGlyphs
operator|.
name|constData
argument_list|()
argument_list|,
name|uncachedGlyphs
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNotSupported
operator|||
name|err
operator|==
name|KErrInUse
condition|)
block|{
comment|// Fallback in possibly supported error cases
name|iter
operator|.
name|Close
argument_list|()
expr_stmt|;
name|qWarning
argument_list|(
literal|"Falling back to default QVGFontGlyphCache"
argument_list|)
expr_stmt|;
return|return
name|QVGFontGlyphCache
operator|::
name|cacheGlyphs
argument_list|(
name|d
argument_list|,
name|fontEngine
argument_list|,
name|g
argument_list|,
name|count
argument_list|)
return|;
block|}
for|for
control|(
init|;
name|err
operator|==
name|KErrNone
condition|;
name|err
operator|=
name|iter
operator|.
name|Next
argument_list|()
control|)
block|{
specifier|const
name|unsigned
name|int
name|glyph
init|=
name|iter
operator|.
name|GlyphCode
argument_list|()
decl_stmt|;
specifier|const
name|RSgImage
modifier|&
name|image
init|=
name|iter
operator|.
name|Image
argument_list|()
decl_stmt|;
specifier|const
name|TOpenFontCharMetrics
modifier|&
name|metrics
init|=
name|iter
operator|.
name|Metrics
argument_list|()
decl_stmt|;
name|TRect
name|glyphBounds
decl_stmt|;
name|metrics
operator|.
name|GetHorizBounds
argument_list|(
name|glyphBounds
argument_list|)
expr_stmt|;
name|VGImage
name|vgImage
init|=
name|sgImageToVGImage
argument_list|(
literal|0
argument_list|,
name|image
argument_list|)
decl_stmt|;
name|VGfloat
name|origin
index|[
literal|2
index|]
decl_stmt|;
name|VGfloat
name|escapement
index|[
literal|2
index|]
decl_stmt|;
name|origin
index|[
literal|0
index|]
operator|=
operator|-
name|glyphBounds
operator|.
name|iTl
operator|.
name|iX
expr_stmt|;
name|origin
index|[
literal|1
index|]
operator|=
name|glyphBounds
operator|.
name|iBr
operator|.
name|iY
expr_stmt|;
name|escapement
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|escapement
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|vgSetGlyphToImage
argument_list|(
name|font
argument_list|,
name|glyph
argument_list|,
name|vgImage
argument_list|,
name|origin
argument_list|,
name|escapement
argument_list|)
expr_stmt|;
name|vgDestroyImage
argument_list|(
name|vgImage
argument_list|)
expr_stmt|;
comment|// Add to cache
if|if
condition|(
name|glyph
operator|<
literal|256
condition|)
name|cachedGlyphsMask
index|[
name|glyph
operator|/
literal|32
index|]
operator||=
operator|(
literal|1
operator|<<
operator|(
name|glyph
operator|%
literal|32
operator|)
operator|)
expr_stmt|;
else|else
name|cachedGlyphs
operator|.
name|insert
argument_list|(
name|glyph
argument_list|)
expr_stmt|;
block|}
name|iter
operator|.
name|Close
argument_list|()
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNoMemory
operator|||
name|err
operator|==
name|KErrNoGraphicsMemory
condition|)
name|qWarning
argument_list|(
literal|"Not enough memory to cache glyph"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|err
operator|!=
name|KErrNotFound
condition|)
name|qWarning
argument_list|(
literal|"Received error %d from glyph cache"
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|QVGFontGlyphCache
operator|::
name|cacheGlyphs
argument_list|(
name|d
argument_list|,
name|fontEngine
argument_list|,
name|g
argument_list|,
name|count
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
