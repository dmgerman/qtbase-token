begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenVG module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpixmapfilter_vg_p.h"
end_include
begin_include
include|#
directive|include
file|"qvgimagepool_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpainter.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_SHIVAVG
argument_list|)
end_if
begin_constructor
DECL|function|QVGPixmapConvolutionFilter
name|QVGPixmapConvolutionFilter
operator|::
name|QVGPixmapConvolutionFilter
parameter_list|()
member_init_list|:
name|QPixmapConvolutionFilter
argument_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~QVGPixmapConvolutionFilter
name|QVGPixmapConvolutionFilter
operator|::
name|~
name|QVGPixmapConvolutionFilter
parameter_list|()
block|{ }
end_destructor
begin_function_decl
specifier|extern
name|void
name|qt_vg_drawVGImage
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|VGImage
name|vgImg
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|void
name|qt_vg_drawVGImageStencil
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|VGImage
name|vgImg
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|draw
name|void
name|QVGPixmapConvolutionFilter
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|dest
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|src
operator|.
name|isNull
argument_list|()
condition|)
return|return;
if|if
condition|(
name|src
operator|.
name|pixmapData
argument_list|()
operator|->
name|classId
argument_list|()
operator|!=
name|QPixmapData
operator|::
name|OpenVGClass
condition|)
block|{
comment|// The pixmap data is not an instance of QVGPixmapData, so fall
comment|// back to the default convolution filter implementation.
name|QPixmapConvolutionFilter
operator|::
name|draw
argument_list|(
name|painter
argument_list|,
name|dest
argument_list|,
name|src
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVGPixmapData
modifier|*
name|pd
init|=
cast|static_cast
argument_list|<
name|QVGPixmapData
operator|*
argument_list|>
argument_list|(
name|src
operator|.
name|pixmapData
argument_list|()
argument_list|)
decl_stmt|;
name|VGImage
name|srcImage
init|=
name|pd
operator|->
name|toVGImage
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcImage
operator|==
name|VG_INVALID_HANDLE
condition|)
return|return;
name|QSize
name|size
init|=
name|pd
operator|->
name|size
argument_list|()
decl_stmt|;
name|VGImage
name|dstImage
init|=
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|createTemporaryImage
argument_list|(
name|VG_sARGB_8888_PRE
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|VG_IMAGE_QUALITY_FASTER
argument_list|,
name|pd
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstImage
operator|==
name|VG_INVALID_HANDLE
condition|)
return|return;
name|int
name|kernelWidth
init|=
name|rows
argument_list|()
decl_stmt|;
name|int
name|kernelHeight
init|=
name|columns
argument_list|()
decl_stmt|;
specifier|const
name|qreal
modifier|*
name|kern
init|=
name|convolutionKernel
argument_list|()
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|VGshort
argument_list|>
name|kernel
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kernelWidth
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|kernelHeight
condition|;
operator|++
name|j
control|)
block|{
name|kernel
operator|.
name|append
argument_list|(
call|(
name|VGshort
call|)
argument_list|(
name|kern
index|[
name|j
operator|*
name|kernelWidth
operator|+
name|i
index|]
operator|*
literal|1024.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|VGfloat
name|values
index|[
literal|4
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
literal|0.0f
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
literal|0.0f
expr_stmt|;
name|values
index|[
literal|2
index|]
operator|=
literal|0.0f
expr_stmt|;
name|values
index|[
literal|3
index|]
operator|=
literal|0.0f
expr_stmt|;
name|vgSetfv
argument_list|(
name|VG_TILE_FILL_COLOR
argument_list|,
literal|4
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|vgConvolve
argument_list|(
name|dstImage
argument_list|,
name|srcImage
argument_list|,
name|kernelWidth
argument_list|,
name|kernelHeight
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|kernel
operator|.
name|constData
argument_list|()
argument_list|,
literal|1.0f
operator|/
literal|1024.0f
argument_list|,
literal|0.0f
argument_list|,
name|VG_TILE_FILL
argument_list|)
expr_stmt|;
name|VGImage
name|child
init|=
name|VG_INVALID_HANDLE
decl_stmt|;
if|if
condition|(
name|srcRect
operator|.
name|isNull
argument_list|()
operator|||
operator|(
name|srcRect
operator|.
name|topLeft
argument_list|()
operator|.
name|isNull
argument_list|()
operator|&&
name|srcRect
operator|.
name|size
argument_list|()
operator|==
name|size
operator|)
condition|)
block|{
name|child
operator|=
name|dstImage
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|src
init|=
name|srcRect
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|child
operator|=
name|vgChildImage
argument_list|(
name|dstImage
argument_list|,
name|src
operator|.
name|x
argument_list|()
argument_list|,
name|src
operator|.
name|y
argument_list|()
argument_list|,
name|src
operator|.
name|width
argument_list|()
argument_list|,
name|src
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|qt_vg_drawVGImage
argument_list|(
name|painter
argument_list|,
name|dest
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|!=
name|dstImage
condition|)
name|vgDestroyImage
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|releaseImage
argument_list|(
literal|0
argument_list|,
name|dstImage
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QVGPixmapColorizeFilter
name|QVGPixmapColorizeFilter
operator|::
name|QVGPixmapColorizeFilter
parameter_list|()
member_init_list|:
name|QPixmapColorizeFilter
argument_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~QVGPixmapColorizeFilter
name|QVGPixmapColorizeFilter
operator|::
name|~
name|QVGPixmapColorizeFilter
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|draw
name|void
name|QVGPixmapColorizeFilter
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|dest
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|src
operator|.
name|isNull
argument_list|()
condition|)
return|return;
if|if
condition|(
name|src
operator|.
name|pixmapData
argument_list|()
operator|->
name|classId
argument_list|()
operator|!=
name|QPixmapData
operator|::
name|OpenVGClass
condition|)
block|{
comment|// The pixmap data is not an instance of QVGPixmapData, so fall
comment|// back to the default colorize filter implementation.
name|QPixmapColorizeFilter
operator|::
name|draw
argument_list|(
name|painter
argument_list|,
name|dest
argument_list|,
name|src
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVGPixmapData
modifier|*
name|pd
init|=
cast|static_cast
argument_list|<
name|QVGPixmapData
operator|*
argument_list|>
argument_list|(
name|src
operator|.
name|pixmapData
argument_list|()
argument_list|)
decl_stmt|;
name|VGImage
name|srcImage
init|=
name|pd
operator|->
name|toVGImage
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcImage
operator|==
name|VG_INVALID_HANDLE
condition|)
return|return;
name|QSize
name|size
init|=
name|pd
operator|->
name|size
argument_list|()
decl_stmt|;
name|VGImage
name|dstImage
init|=
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|createTemporaryImage
argument_list|(
name|VG_sARGB_8888_PRE
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|VG_IMAGE_QUALITY_FASTER
argument_list|,
name|pd
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstImage
operator|==
name|VG_INVALID_HANDLE
condition|)
return|return;
comment|// Determine the weights for the matrix from the color and strength.
name|QColor
name|c
init|=
name|color
argument_list|()
decl_stmt|;
name|VGfloat
name|strength
init|=
name|this
operator|->
name|strength
argument_list|()
decl_stmt|;
name|VGfloat
name|weights
index|[
literal|3
index|]
decl_stmt|;
name|VGfloat
name|invweights
index|[
literal|3
index|]
decl_stmt|;
name|VGfloat
name|alpha
init|=
name|c
operator|.
name|alphaF
argument_list|()
decl_stmt|;
name|weights
index|[
literal|0
index|]
operator|=
name|c
operator|.
name|redF
argument_list|()
operator|*
name|alpha
expr_stmt|;
name|weights
index|[
literal|1
index|]
operator|=
name|c
operator|.
name|greenF
argument_list|()
operator|*
name|alpha
expr_stmt|;
name|weights
index|[
literal|2
index|]
operator|=
name|c
operator|.
name|blueF
argument_list|()
operator|*
name|alpha
expr_stmt|;
name|invweights
index|[
literal|0
index|]
operator|=
operator|(
literal|1.0f
operator|-
name|weights
index|[
literal|0
index|]
operator|)
operator|*
name|strength
expr_stmt|;
name|invweights
index|[
literal|1
index|]
operator|=
operator|(
literal|1.0f
operator|-
name|weights
index|[
literal|1
index|]
operator|)
operator|*
name|strength
expr_stmt|;
name|invweights
index|[
literal|2
index|]
operator|=
operator|(
literal|1.0f
operator|-
name|weights
index|[
literal|2
index|]
operator|)
operator|*
name|strength
expr_stmt|;
comment|// Grayscale weights.
specifier|static
specifier|const
name|VGfloat
name|redGray
init|=
literal|11.0f
operator|/
literal|32.0f
decl_stmt|;
specifier|static
specifier|const
name|VGfloat
name|greenGray
init|=
literal|16.0f
operator|/
literal|32.0f
decl_stmt|;
specifier|static
specifier|const
name|VGfloat
name|blueGray
init|=
literal|1.0f
operator|-
operator|(
name|redGray
operator|+
name|greenGray
operator|)
decl_stmt|;
name|VGfloat
name|matrix
index|[
literal|5
index|]
index|[
literal|4
index|]
decl_stmt|;
name|matrix
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|redGray
operator|*
name|invweights
index|[
literal|0
index|]
operator|+
operator|(
literal|1.0f
operator|-
name|strength
operator|)
expr_stmt|;
name|matrix
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|redGray
operator|*
name|invweights
index|[
literal|1
index|]
expr_stmt|;
name|matrix
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
name|redGray
operator|*
name|invweights
index|[
literal|2
index|]
expr_stmt|;
name|matrix
index|[
literal|0
index|]
index|[
literal|3
index|]
operator|=
literal|0.0f
expr_stmt|;
name|matrix
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|greenGray
operator|*
name|invweights
index|[
literal|0
index|]
expr_stmt|;
name|matrix
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|greenGray
operator|*
name|invweights
index|[
literal|1
index|]
operator|+
operator|(
literal|1.0f
operator|-
name|strength
operator|)
expr_stmt|;
name|matrix
index|[
literal|1
index|]
index|[
literal|2
index|]
operator|=
name|greenGray
operator|*
name|invweights
index|[
literal|2
index|]
expr_stmt|;
name|matrix
index|[
literal|1
index|]
index|[
literal|3
index|]
operator|=
literal|0.0f
expr_stmt|;
name|matrix
index|[
literal|2
index|]
index|[
literal|0
index|]
operator|=
name|blueGray
operator|*
name|invweights
index|[
literal|0
index|]
expr_stmt|;
name|matrix
index|[
literal|2
index|]
index|[
literal|1
index|]
operator|=
name|blueGray
operator|*
name|invweights
index|[
literal|1
index|]
expr_stmt|;
name|matrix
index|[
literal|2
index|]
index|[
literal|2
index|]
operator|=
name|blueGray
operator|*
name|invweights
index|[
literal|2
index|]
operator|+
operator|(
literal|1.0f
operator|-
name|strength
operator|)
expr_stmt|;
name|matrix
index|[
literal|2
index|]
index|[
literal|3
index|]
operator|=
literal|0.0f
expr_stmt|;
name|matrix
index|[
literal|3
index|]
index|[
literal|0
index|]
operator|=
literal|0.0f
expr_stmt|;
name|matrix
index|[
literal|3
index|]
index|[
literal|1
index|]
operator|=
literal|0.0f
expr_stmt|;
name|matrix
index|[
literal|3
index|]
index|[
literal|2
index|]
operator|=
literal|0.0f
expr_stmt|;
name|matrix
index|[
literal|3
index|]
index|[
literal|3
index|]
operator|=
literal|1.0f
expr_stmt|;
name|matrix
index|[
literal|4
index|]
index|[
literal|0
index|]
operator|=
name|weights
index|[
literal|0
index|]
operator|*
name|strength
expr_stmt|;
name|matrix
index|[
literal|4
index|]
index|[
literal|1
index|]
operator|=
name|weights
index|[
literal|1
index|]
operator|*
name|strength
expr_stmt|;
name|matrix
index|[
literal|4
index|]
index|[
literal|2
index|]
operator|=
name|weights
index|[
literal|2
index|]
operator|*
name|strength
expr_stmt|;
name|matrix
index|[
literal|4
index|]
index|[
literal|3
index|]
operator|=
literal|0.0f
expr_stmt|;
name|vgColorMatrix
argument_list|(
name|dstImage
argument_list|,
name|srcImage
argument_list|,
name|matrix
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|VGImage
name|child
init|=
name|VG_INVALID_HANDLE
decl_stmt|;
if|if
condition|(
name|srcRect
operator|.
name|isNull
argument_list|()
operator|||
operator|(
name|srcRect
operator|.
name|topLeft
argument_list|()
operator|.
name|isNull
argument_list|()
operator|&&
name|srcRect
operator|.
name|size
argument_list|()
operator|==
name|size
operator|)
condition|)
block|{
name|child
operator|=
name|dstImage
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|src
init|=
name|srcRect
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|child
operator|=
name|vgChildImage
argument_list|(
name|dstImage
argument_list|,
name|src
operator|.
name|x
argument_list|()
argument_list|,
name|src
operator|.
name|y
argument_list|()
argument_list|,
name|src
operator|.
name|width
argument_list|()
argument_list|,
name|src
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|qt_vg_drawVGImage
argument_list|(
name|painter
argument_list|,
name|dest
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|!=
name|dstImage
condition|)
name|vgDestroyImage
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|releaseImage
argument_list|(
literal|0
argument_list|,
name|dstImage
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QVGPixmapDropShadowFilter
name|QVGPixmapDropShadowFilter
operator|::
name|QVGPixmapDropShadowFilter
parameter_list|()
member_init_list|:
name|QPixmapDropShadowFilter
argument_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~QVGPixmapDropShadowFilter
name|QVGPixmapDropShadowFilter
operator|::
name|~
name|QVGPixmapDropShadowFilter
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|draw
name|void
name|QVGPixmapDropShadowFilter
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|dest
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|src
operator|.
name|isNull
argument_list|()
condition|)
return|return;
if|if
condition|(
name|src
operator|.
name|pixmapData
argument_list|()
operator|->
name|classId
argument_list|()
operator|!=
name|QPixmapData
operator|::
name|OpenVGClass
condition|)
block|{
comment|// The pixmap data is not an instance of QVGPixmapData, so fall
comment|// back to the default drop shadow filter implementation.
name|QPixmapDropShadowFilter
operator|::
name|draw
argument_list|(
name|painter
argument_list|,
name|dest
argument_list|,
name|src
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVGPixmapData
modifier|*
name|pd
init|=
cast|static_cast
argument_list|<
name|QVGPixmapData
operator|*
argument_list|>
argument_list|(
name|src
operator|.
name|pixmapData
argument_list|()
argument_list|)
decl_stmt|;
name|VGImage
name|srcImage
init|=
name|pd
operator|->
name|toVGImage
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcImage
operator|==
name|VG_INVALID_HANDLE
condition|)
return|return;
name|QSize
name|size
init|=
name|pd
operator|->
name|size
argument_list|()
decl_stmt|;
name|VGImage
name|dstImage
init|=
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|createTemporaryImage
argument_list|(
name|VG_A_8
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|VG_IMAGE_QUALITY_FASTER
argument_list|,
name|pd
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstImage
operator|==
name|VG_INVALID_HANDLE
condition|)
return|return;
comment|// Clamp the radius range.  We divide by 2 because the OpenVG blur
comment|// is "too blurry" compared to the default raster implementation.
name|VGfloat
name|maxRadius
init|=
name|VGfloat
argument_list|(
name|vgGeti
argument_list|(
name|VG_MAX_GAUSSIAN_STD_DEVIATION
argument_list|)
argument_list|)
decl_stmt|;
name|VGfloat
name|radiusF
init|=
name|VGfloat
argument_list|(
name|blurRadius
argument_list|()
argument_list|)
operator|/
literal|2.0f
decl_stmt|;
if|if
condition|(
name|radiusF
operator|<
literal|0.001f
condition|)
name|radiusF
operator|=
literal|0.001f
expr_stmt|;
elseif|else
if|if
condition|(
name|radiusF
operator|>
name|maxRadius
condition|)
name|radiusF
operator|=
name|maxRadius
expr_stmt|;
comment|// Blur the blackened source image.
name|vgGaussianBlur
argument_list|(
name|dstImage
argument_list|,
name|srcImage
argument_list|,
name|radiusF
argument_list|,
name|radiusF
argument_list|,
name|VG_TILE_PAD
argument_list|)
expr_stmt|;
name|VGImage
name|child
init|=
name|VG_INVALID_HANDLE
decl_stmt|;
name|QRect
name|srect
decl_stmt|;
if|if
condition|(
name|srcRect
operator|.
name|isNull
argument_list|()
operator|||
operator|(
name|srcRect
operator|.
name|topLeft
argument_list|()
operator|.
name|isNull
argument_list|()
operator|&&
name|srcRect
operator|.
name|size
argument_list|()
operator|==
name|size
operator|)
condition|)
block|{
name|child
operator|=
name|dstImage
expr_stmt|;
name|srect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srect
operator|=
name|srcRect
operator|.
name|toRect
argument_list|()
expr_stmt|;
name|child
operator|=
name|vgChildImage
argument_list|(
name|dstImage
argument_list|,
name|srect
operator|.
name|x
argument_list|()
argument_list|,
name|srect
operator|.
name|y
argument_list|()
argument_list|,
name|srect
operator|.
name|width
argument_list|()
argument_list|,
name|srect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|qt_vg_drawVGImageStencil
argument_list|(
name|painter
argument_list|,
name|dest
operator|+
name|offset
argument_list|()
argument_list|,
name|child
argument_list|,
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|!=
name|dstImage
condition|)
name|vgDestroyImage
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|releaseImage
argument_list|(
literal|0
argument_list|,
name|dstImage
argument_list|)
expr_stmt|;
comment|// Now draw the actual pixmap over the top.
name|painter
operator|->
name|drawPixmap
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|srect
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QVGPixmapBlurFilter
name|QVGPixmapBlurFilter
operator|::
name|QVGPixmapBlurFilter
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QPixmapBlurFilter
argument_list|(
name|parent
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QVGPixmapBlurFilter
name|QVGPixmapBlurFilter
operator|::
name|~
name|QVGPixmapBlurFilter
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|draw
name|void
name|QVGPixmapBlurFilter
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|dest
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|src
operator|.
name|isNull
argument_list|()
condition|)
return|return;
if|if
condition|(
name|src
operator|.
name|pixmapData
argument_list|()
operator|->
name|classId
argument_list|()
operator|!=
name|QPixmapData
operator|::
name|OpenVGClass
condition|)
block|{
comment|// The pixmap data is not an instance of QVGPixmapData, so fall
comment|// back to the default blur filter implementation.
name|QPixmapBlurFilter
operator|::
name|draw
argument_list|(
name|painter
argument_list|,
name|dest
argument_list|,
name|src
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVGPixmapData
modifier|*
name|pd
init|=
cast|static_cast
argument_list|<
name|QVGPixmapData
operator|*
argument_list|>
argument_list|(
name|src
operator|.
name|pixmapData
argument_list|()
argument_list|)
decl_stmt|;
name|VGImage
name|srcImage
init|=
name|pd
operator|->
name|toVGImage
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcImage
operator|==
name|VG_INVALID_HANDLE
condition|)
return|return;
name|QSize
name|size
init|=
name|pd
operator|->
name|size
argument_list|()
decl_stmt|;
name|VGImage
name|dstImage
init|=
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|createTemporaryImage
argument_list|(
name|VG_sARGB_8888_PRE
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|VG_IMAGE_QUALITY_FASTER
argument_list|,
name|pd
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstImage
operator|==
name|VG_INVALID_HANDLE
condition|)
return|return;
comment|// Clamp the radius range.  We divide by 2 because the OpenVG blur
comment|// is "too blurry" compared to the default raster implementation.
name|VGfloat
name|maxRadius
init|=
name|VGfloat
argument_list|(
name|vgGeti
argument_list|(
name|VG_MAX_GAUSSIAN_STD_DEVIATION
argument_list|)
argument_list|)
decl_stmt|;
name|VGfloat
name|radiusF
init|=
name|VGfloat
argument_list|(
name|radius
argument_list|()
argument_list|)
operator|/
literal|2.0f
decl_stmt|;
if|if
condition|(
name|radiusF
operator|<
literal|0.001f
condition|)
name|radiusF
operator|=
literal|0.001f
expr_stmt|;
elseif|else
if|if
condition|(
name|radiusF
operator|>
name|maxRadius
condition|)
name|radiusF
operator|=
name|maxRadius
expr_stmt|;
name|vgGaussianBlur
argument_list|(
name|dstImage
argument_list|,
name|srcImage
argument_list|,
name|radiusF
argument_list|,
name|radiusF
argument_list|,
name|VG_TILE_PAD
argument_list|)
expr_stmt|;
name|VGImage
name|child
init|=
name|VG_INVALID_HANDLE
decl_stmt|;
if|if
condition|(
name|srcRect
operator|.
name|isNull
argument_list|()
operator|||
operator|(
name|srcRect
operator|.
name|topLeft
argument_list|()
operator|.
name|isNull
argument_list|()
operator|&&
name|srcRect
operator|.
name|size
argument_list|()
operator|==
name|size
operator|)
condition|)
block|{
name|child
operator|=
name|dstImage
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|src
init|=
name|srcRect
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|child
operator|=
name|vgChildImage
argument_list|(
name|dstImage
argument_list|,
name|src
operator|.
name|x
argument_list|()
argument_list|,
name|src
operator|.
name|y
argument_list|()
argument_list|,
name|src
operator|.
name|width
argument_list|()
argument_list|,
name|src
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|qt_vg_drawVGImage
argument_list|(
name|painter
argument_list|,
name|dest
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|!=
name|dstImage
condition|)
name|vgDestroyImage
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|releaseImage
argument_list|(
literal|0
argument_list|,
name|dstImage
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
