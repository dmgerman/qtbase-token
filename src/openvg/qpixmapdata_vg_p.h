begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenVG module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPIXMAPDATA_VG_P_H
end_ifndef
begin_define
DECL|macro|QPIXMAPDATA_VG_P_H
define|#
directive|define
name|QPIXMAPDATA_VG_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qvolatileimage_p.h>
end_include
begin_include
include|#
directive|include
file|"qvg_p.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
end_if
begin_decl_stmt
DECL|variable|RSGImage
name|class
name|RSGImage
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QEglContext
name|class
name|QEglContext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QVGImagePool
name|class
name|QVGImagePool
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QImageReader
name|class
name|QImageReader
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
end_if
begin_decl_stmt
DECL|variable|QVGPixmapData
name|class
name|QVGPixmapData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QVGSharedContext
name|class
name|QVGSharedContext
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|qt_vg_register_pixmap
parameter_list|(
name|QVGPixmapData
modifier|*
name|pd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qt_vg_unregister_pixmap
parameter_list|(
name|QVGPixmapData
modifier|*
name|pd
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qt_vg_hibernate_pixmaps
parameter_list|(
name|QVGSharedContext
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|QNativeImageHandleProvider
name|class
name|QNativeImageHandleProvider
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_OPENVG_EXPORT
name|QVGPixmapData
range|:
name|public
name|QPixmapData
block|{
name|public
operator|:
name|QVGPixmapData
argument_list|(
argument|PixelType type
argument_list|)
block|;
operator|~
name|QVGPixmapData
argument_list|()
block|;
name|QPixmapData
operator|*
name|createCompatiblePixmapData
argument_list|()
specifier|const
block|;
comment|// Is this pixmap valid (i.e. non-zero in size)?
name|bool
name|isValid
argument_list|()
specifier|const
block|;
name|void
name|resize
argument_list|(
argument|int width
argument_list|,
argument|int height
argument_list|)
block|;
name|void
name|fromImage
argument_list|(
argument|const QImage&image
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|)
block|;
name|void
name|fromImageReader
argument_list|(
argument|QImageReader *imageReader
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|)
block|;
name|bool
name|fromFile
argument_list|(
argument|const QString&filename
argument_list|,
argument|const char *format
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|)
block|;
name|bool
name|fromData
argument_list|(
argument|const uchar *buffer
argument_list|,
argument|uint len
argument_list|,
argument|const char *format
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|)
block|;
name|void
name|fill
argument_list|(
specifier|const
name|QColor
operator|&
name|color
argument_list|)
block|;
name|bool
name|hasAlphaChannel
argument_list|()
specifier|const
block|;
name|void
name|setAlphaChannel
argument_list|(
specifier|const
name|QPixmap
operator|&
name|alphaChannel
argument_list|)
block|;
name|QImage
name|toImage
argument_list|()
specifier|const
block|;
name|void
name|copy
argument_list|(
specifier|const
name|QPixmapData
operator|*
name|data
argument_list|,
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
block|;
name|QImage
operator|*
name|buffer
argument_list|()
block|;
name|QPaintEngine
operator|*
name|paintEngine
argument_list|()
specifier|const
block|;
comment|// Return the VGImage form of this pixmap, creating it if necessary.
comment|// This assumes that there is a VG context current.
name|virtual
name|VGImage
name|toVGImage
argument_list|()
block|;
comment|// Return the VGImage form for a specific opacity setting.
name|virtual
name|VGImage
name|toVGImage
argument_list|(
argument|qreal opacity
argument_list|)
block|;
comment|// Detach this image from the image pool.
name|virtual
name|void
name|detachImageFromPool
argument_list|()
block|;
comment|// Release the VG resources associated with this pixmap and copy
comment|// the pixmap's contents out of the GPU back into main memory.
comment|// The VG resource will be automatically recreated the next time
comment|// toVGImage() is called.  Does nothing if the pixmap cannot be
comment|// hibernated for some reason (e.g. VGImage is shared with another
comment|// process via a SgImage).
name|virtual
name|void
name|hibernate
argument_list|()
block|;
comment|// Called when the QVGImagePool wants to reclaim this pixmap's
comment|// VGImage objects to reuse storage.
name|virtual
name|void
name|reclaimImages
argument_list|()
block|;
comment|// If vgImage is valid but source is null, copies pixel data from GPU back
comment|// into main memory and destroys vgImage. For a normal pixmap this function
comment|// does nothing, however if the pixmap was created directly from a VGImage
comment|// (e.g. via SgImage on Symbian) then by doing the readback this ensures
comment|// that QImage-based functions can operate too.
name|virtual
name|void
name|ensureReadback
argument_list|(
argument|bool readOnly
argument_list|)
specifier|const
block|;
name|QSize
name|size
argument_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|void
operator|*
name|toNativeType
argument_list|(
argument|NativeType type
argument_list|)
block|;
name|void
name|fromNativeType
argument_list|(
argument|void* pixmap
argument_list|,
argument|NativeType type
argument_list|)
block|;
name|bool
name|initFromNativeImageHandle
argument_list|(
name|void
operator|*
name|handle
argument_list|,
specifier|const
name|QString
operator|&
name|type
argument_list|)
block|;
name|void
name|createFromNativeImageHandleProvider
argument_list|()
block|;
name|void
name|releaseNativeImageHandle
argument_list|()
block|;
endif|#
directive|endif
name|protected
operator|:
name|int
name|metric
argument_list|(
argument|QPaintDevice::PaintDeviceMetric metric
argument_list|)
specifier|const
block|;
name|void
name|createPixmapForImage
argument_list|(
argument|QImage&image
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|,
argument|bool inPlace
argument_list|)
block|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|void
name|cleanup
argument_list|()
block|;
endif|#
directive|endif
name|private
operator|:
name|QVGPixmapData
operator|*
name|nextLRU
block|;
name|QVGPixmapData
operator|*
name|prevLRU
block|;
name|bool
name|inLRU
block|;
name|bool
name|failedToAlloc
block|;
name|friend
name|class
name|QVGImagePool
block|;
name|friend
name|class
name|QVGPaintEngine
block|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
name|QVGPixmapData
operator|*
name|next
block|;
name|QVGPixmapData
operator|*
name|prev
block|;
name|friend
name|void
name|qt_vg_register_pixmap
argument_list|(
name|QVGPixmapData
operator|*
name|pd
argument_list|)
block|;
name|friend
name|void
name|qt_vg_unregister_pixmap
argument_list|(
name|QVGPixmapData
operator|*
name|pd
argument_list|)
block|;
name|friend
name|void
name|qt_vg_hibernate_pixmaps
argument_list|(
name|QVGSharedContext
operator|*
name|context
argument_list|)
block|;
endif|#
directive|endif
name|protected
operator|:
name|QSize
name|prevSize
block|;
name|VGImage
name|vgImage
block|;
name|VGImage
name|vgImageOpacity
block|;
name|qreal
name|cachedOpacity
block|;
name|mutable
name|QVolatileImage
name|source
block|;
name|mutable
name|bool
name|recreate
block|;
name|bool
name|inImagePool
block|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
name|mutable
name|QEglContext
operator|*
name|context
block|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|mutable
name|QNativeImageHandleProvider
operator|*
name|nativeImageHandleProvider
block|;
name|void
operator|*
name|nativeImageHandle
block|;
name|QString
name|nativeImageType
block|;
endif|#
directive|endif
name|void
name|forceToImage
argument_list|(
argument|bool allowReadback = true
argument_list|)
block|;
name|QImage
operator|::
name|Format
name|sourceFormat
argument_list|()
specifier|const
block|;
name|QImage
operator|::
name|Format
name|idealFormat
argument_list|(
argument|QImage *image
argument_list|,
argument|Qt::ImageConversionFlags flags
argument_list|)
specifier|const
block|;
name|void
name|updateSerial
argument_list|()
block|;
name|void
name|destroyImageAndContext
argument_list|()
block|;
name|void
name|destroyImages
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
