begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenVG module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qpixmapdata_vg_p.h"
end_include
begin_include
include|#
directive|include
file|"qpaintengine_vg_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qdrawhelper_p.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtGui/private/qegl_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qvg_p.h"
end_include
begin_include
include|#
directive|include
file|"qvgimagepool_p.h"
end_include
begin_include
include|#
directive|include
file|<QBuffer>
end_include
begin_include
include|#
directive|include
file|<QImageReader>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qimage_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qnativeimagehandleprovider_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qfont_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qt_vg_pixmap_serial
specifier|static
name|int
name|qt_vg_pixmap_serial
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QVGPixmapData
name|QVGPixmapData
operator|::
name|QVGPixmapData
parameter_list|(
name|PixelType
name|type
parameter_list|)
member_init_list|:
name|QPixmapData
argument_list|(
name|type
argument_list|,
name|OpenVGClass
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|type
operator|==
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
expr_stmt|;
name|vgImage
operator|=
name|VG_INVALID_HANDLE
expr_stmt|;
name|vgImageOpacity
operator|=
name|VG_INVALID_HANDLE
expr_stmt|;
name|cachedOpacity
operator|=
literal|1.0f
expr_stmt|;
name|recreate
operator|=
literal|true
expr_stmt|;
name|inImagePool
operator|=
literal|false
expr_stmt|;
name|inLRU
operator|=
literal|false
expr_stmt|;
name|failedToAlloc
operator|=
literal|false
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|nativeImageHandleProvider
operator|=
literal|0
expr_stmt|;
name|nativeImageHandle
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
name|context
operator|=
literal|0
expr_stmt|;
name|qt_vg_register_pixmap
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|updateSerial
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QVGPixmapData
name|QVGPixmapData
operator|::
name|~
name|QVGPixmapData
parameter_list|()
block|{
name|destroyImageAndContext
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
name|qt_vg_unregister_pixmap
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|destroyImages
name|void
name|QVGPixmapData
operator|::
name|destroyImages
parameter_list|()
block|{
if|if
condition|(
name|inImagePool
condition|)
block|{
name|QVGImagePool
modifier|*
name|pool
init|=
name|QVGImagePool
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|vgImage
operator|!=
name|VG_INVALID_HANDLE
condition|)
name|pool
operator|->
name|releaseImage
argument_list|(
name|this
argument_list|,
name|vgImage
argument_list|)
expr_stmt|;
if|if
condition|(
name|vgImageOpacity
operator|!=
name|VG_INVALID_HANDLE
condition|)
name|pool
operator|->
name|releaseImage
argument_list|(
name|this
argument_list|,
name|vgImageOpacity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|vgImage
operator|!=
name|VG_INVALID_HANDLE
condition|)
name|vgDestroyImage
argument_list|(
name|vgImage
argument_list|)
expr_stmt|;
if|if
condition|(
name|vgImageOpacity
operator|!=
name|VG_INVALID_HANDLE
condition|)
name|vgDestroyImage
argument_list|(
name|vgImageOpacity
argument_list|)
expr_stmt|;
block|}
name|vgImage
operator|=
name|VG_INVALID_HANDLE
expr_stmt|;
name|vgImageOpacity
operator|=
name|VG_INVALID_HANDLE
expr_stmt|;
name|inImagePool
operator|=
literal|false
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|releaseNativeImageHandle
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|destroyImageAndContext
name|void
name|QVGPixmapData
operator|::
name|destroyImageAndContext
parameter_list|()
block|{
if|if
condition|(
name|vgImage
operator|!=
name|VG_INVALID_HANDLE
condition|)
block|{
comment|// We need to have a context current to destroy the image.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
if|if
condition|(
operator|!
name|context
condition|)
name|context
operator|=
name|qt_vg_create_context
argument_list|(
literal|0
argument_list|,
name|QInternal
operator|::
name|Pixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|->
name|isCurrent
argument_list|()
condition|)
block|{
name|destroyImages
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// We don't currently have a widget surface active, but we
comment|// need a surface to make the context current.  So use the
comment|// shared pbuffer surface instead.
name|context
operator|->
name|makeCurrent
argument_list|(
name|qt_vg_shared_surface
argument_list|()
argument_list|)
expr_stmt|;
name|destroyImages
argument_list|()
expr_stmt|;
name|context
operator|->
name|lazyDoneCurrent
argument_list|()
expr_stmt|;
block|}
else|#
directive|else
name|destroyImages
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|releaseNativeImageHandle
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
if|if
condition|(
name|context
condition|)
block|{
name|qt_vg_destroy_context
argument_list|(
name|context
argument_list|,
name|QInternal
operator|::
name|Pixmap
argument_list|)
expr_stmt|;
name|context
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
name|recreate
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createCompatiblePixmapData
name|QPixmapData
modifier|*
name|QVGPixmapData
operator|::
name|createCompatiblePixmapData
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QVGPixmapData
argument_list|(
name|pixelType
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QVGPixmapData
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|w
operator|>
literal|0
operator|&&
name|h
operator|>
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|updateSerial
name|void
name|QVGPixmapData
operator|::
name|updateSerial
parameter_list|()
block|{
name|setSerialNumber
argument_list|(
operator|++
name|qt_vg_pixmap_serial
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resize
name|void
name|QVGPixmapData
operator|::
name|resize
parameter_list|(
name|int
name|wid
parameter_list|,
name|int
name|ht
parameter_list|)
block|{
if|if
condition|(
name|w
operator|==
name|wid
operator|&&
name|h
operator|==
name|ht
condition|)
block|{
name|updateSerial
argument_list|()
expr_stmt|;
return|return;
block|}
name|w
operator|=
name|wid
expr_stmt|;
name|h
operator|=
name|ht
expr_stmt|;
name|d
operator|=
literal|32
expr_stmt|;
comment|// We always use ARGB_Premultiplied for VG pixmaps.
name|is_null
operator|=
operator|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
operator|)
expr_stmt|;
name|source
operator|=
name|QVolatileImage
argument_list|()
expr_stmt|;
name|recreate
operator|=
literal|true
expr_stmt|;
name|updateSerial
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromImage
name|void
name|QVGPixmapData
operator|::
name|fromImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QImage
name|img
init|=
name|image
decl_stmt|;
name|createPixmapForImage
argument_list|(
name|img
argument_list|,
name|flags
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromImageReader
name|void
name|QVGPixmapData
operator|::
name|fromImageReader
parameter_list|(
name|QImageReader
modifier|*
name|imageReader
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|QImage
name|image
init|=
name|imageReader
operator|->
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|createPixmapForImage
argument_list|(
name|image
argument_list|,
name|flags
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromFile
name|bool
name|QVGPixmapData
operator|::
name|fromFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|QImage
name|image
init|=
name|QImageReader
argument_list|(
name|filename
argument_list|,
name|format
argument_list|)
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
name|createPixmapForImage
argument_list|(
name|image
argument_list|,
name|flags
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|!
name|isNull
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|fromData
name|bool
name|QVGPixmapData
operator|::
name|fromData
parameter_list|(
specifier|const
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|QByteArray
name|a
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|QBuffer
name|b
argument_list|(
operator|&
name|a
argument_list|)
decl_stmt|;
name|b
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QImage
name|image
init|=
name|QImageReader
argument_list|(
operator|&
name|b
argument_list|,
name|format
argument_list|)
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
name|createPixmapForImage
argument_list|(
name|image
argument_list|,
name|flags
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|!
name|isNull
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|idealFormat
name|QImage
operator|::
name|Format
name|QVGPixmapData
operator|::
name|idealFormat
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
specifier|const
block|{
name|QImage
operator|::
name|Format
name|format
init|=
name|sourceFormat
argument_list|()
decl_stmt|;
name|int
name|d
init|=
name|image
operator|->
name|depth
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|1
operator|||
name|d
operator|==
literal|16
operator|||
name|d
operator|==
literal|24
operator|||
operator|(
name|d
operator|==
literal|32
operator|&&
operator|!
name|image
operator|->
name|hasAlphaChannel
argument_list|()
operator|)
condition|)
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|NoOpaqueDetection
operator|)
operator|&&
name|image
operator|->
name|data_ptr
argument_list|()
operator|->
name|checkForAlphaPixels
argument_list|()
condition|)
name|format
operator|=
name|sourceFormat
argument_list|()
expr_stmt|;
else|else
name|format
operator|=
name|image
operator|->
name|hasAlphaChannel
argument_list|()
condition|?
name|sourceFormat
argument_list|()
else|:
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
return|return
name|format
return|;
block|}
end_function
begin_function
DECL|function|createPixmapForImage
name|void
name|QVGPixmapData
operator|::
name|createPixmapForImage
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|,
name|bool
name|inPlace
parameter_list|)
block|{
name|resize
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|idealFormat
argument_list|(
operator|&
name|image
argument_list|,
name|flags
argument_list|)
decl_stmt|;
if|if
condition|(
name|inPlace
operator|&&
name|image
operator|.
name|data_ptr
argument_list|()
operator|->
name|convertInPlace
argument_list|(
name|format
argument_list|,
name|flags
argument_list|)
condition|)
block|{
name|source
operator|=
name|QVolatileImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QImage
name|convertedImage
init|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
comment|// convertToFormat won't detach the image if format stays the
comment|// same. Detaching is needed to prevent issues with painting
comment|// onto this QPixmap later on.
name|convertedImage
operator|.
name|detach
argument_list|()
expr_stmt|;
name|source
operator|=
name|QVolatileImage
argument_list|(
name|convertedImage
argument_list|)
expr_stmt|;
block|}
name|recreate
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fill
name|void
name|QVGPixmapData
operator|::
name|fill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return;
name|forceToImage
argument_list|()
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// Pick the best approximate color in the image's colortable.
name|int
name|gray
init|=
name|qGray
argument_list|(
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|qGray
argument_list|(
name|source
operator|.
name|imageRef
argument_list|()
operator|.
name|color
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|-
name|gray
argument_list|)
operator|<
name|qAbs
argument_list|(
name|qGray
argument_list|(
name|source
operator|.
name|imageRef
argument_list|()
operator|.
name|color
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|-
name|gray
argument_list|)
condition|)
name|source
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|source
operator|.
name|fill
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|source
operator|.
name|fill
argument_list|(
name|PREMUL
argument_list|(
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|hasAlphaChannel
name|bool
name|QVGPixmapData
operator|::
name|hasAlphaChannel
parameter_list|()
specifier|const
block|{
name|ensureReadback
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|source
operator|.
name|hasAlphaChannel
argument_list|()
return|;
else|else
return|return
name|isValid
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setAlphaChannel
name|void
name|QVGPixmapData
operator|::
name|setAlphaChannel
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|alphaChannel
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return;
name|forceToImage
argument_list|()
expr_stmt|;
name|source
operator|.
name|setAlphaChannel
argument_list|(
name|alphaChannel
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toImage
name|QImage
name|QVGPixmapData
operator|::
name|toImage
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
name|QImage
argument_list|()
return|;
name|ensureReadback
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|source
operator|=
name|QVolatileImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|sourceFormat
argument_list|()
argument_list|)
expr_stmt|;
name|recreate
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|source
operator|.
name|toImage
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|copy
name|void
name|QVGPixmapData
operator|::
name|copy
parameter_list|(
specifier|const
name|QPixmapData
modifier|*
name|data
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
comment|// toImage() is potentially expensive with QVolatileImage so provide a
comment|// more efficient implementation of copy() that does not rely on it.
if|if
condition|(
operator|!
name|data
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|data
operator|->
name|classId
argument_list|()
operator|!=
name|OpenVGClass
condition|)
block|{
name|fromImage
argument_list|(
name|data
operator|->
name|toImage
argument_list|(
name|rect
argument_list|)
argument_list|,
name|Qt
operator|::
name|NoOpaqueDetection
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QVGPixmapData
modifier|*
name|pd
init|=
cast|static_cast
argument_list|<
specifier|const
name|QVGPixmapData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|rect
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isNull
argument_list|()
operator|||
name|r
operator|.
name|contains
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pd
operator|->
name|w
argument_list|,
name|pd
operator|->
name|h
argument_list|)
argument_list|)
condition|)
block|{
name|r
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pd
operator|->
name|w
argument_list|,
name|pd
operator|->
name|h
argument_list|)
expr_stmt|;
block|}
name|resize
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|recreate
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|pd
operator|->
name|source
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|source
operator|=
name|QVolatileImage
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|pd
operator|->
name|source
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|.
name|copyFrom
argument_list|(
operator|&
name|pd
operator|->
name|source
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|buffer
name|QImage
modifier|*
name|QVGPixmapData
operator|::
name|buffer
parameter_list|()
block|{
comment|// Cannot be safely implemented and QVGPixmapData is not (must not be) RasterClass anyway.
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QVGPixmapData
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
comment|// If the application wants to paint into the QPixmap, we first
comment|// force it to QImage format and then paint into that.
comment|// This is simpler than juggling multiple VG contexts.
cast|const_cast
argument_list|<
name|QVGPixmapData
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|forceToImage
argument_list|()
expr_stmt|;
return|return
name|source
operator|.
name|paintEngine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toVGImage
name|VGImage
name|QVGPixmapData
operator|::
name|toVGImage
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
operator|||
name|failedToAlloc
condition|)
return|return
name|VG_INVALID_HANDLE
return|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EGL
argument_list|)
comment|// Increase the reference count on the shared context.
if|if
condition|(
operator|!
name|context
condition|)
name|context
operator|=
name|qt_vg_create_context
argument_list|(
literal|0
argument_list|,
name|QInternal
operator|::
name|Pixmap
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|recreate
operator|&&
name|prevSize
operator|!=
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
condition|)
name|destroyImages
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|recreate
condition|)
name|cachedOpacity
operator|=
operator|-
literal|1.0f
expr_stmt|;
comment|// Force opacity image to be refreshed later.
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
if|if
condition|(
name|recreate
operator|&&
name|nativeImageHandleProvider
operator|&&
operator|!
name|nativeImageHandle
condition|)
block|{
name|createFromNativeImageHandleProvider
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|vgImage
operator|==
name|VG_INVALID_HANDLE
condition|)
block|{
name|vgImage
operator|=
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|createImageForPixmap
argument_list|(
name|qt_vg_image_to_vg_format
argument_list|(
name|source
operator|.
name|format
argument_list|()
argument_list|)
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|VG_IMAGE_QUALITY_FASTER
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// Bail out if we run out of GPU memory - try again next time.
if|if
condition|(
name|vgImage
operator|==
name|VG_INVALID_HANDLE
condition|)
block|{
name|failedToAlloc
operator|=
literal|true
expr_stmt|;
return|return
name|VG_INVALID_HANDLE
return|;
block|}
name|inImagePool
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inImagePool
condition|)
block|{
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|useImage
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|source
operator|.
name|isNull
argument_list|()
operator|&&
name|recreate
condition|)
block|{
name|source
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|vgImageSubData
argument_list|(
name|vgImage
argument_list|,
name|source
operator|.
name|constBits
argument_list|()
argument_list|,
name|source
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|qt_vg_image_to_vg_format
argument_list|(
name|source
operator|.
name|format
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|source
operator|.
name|endDataAccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|recreate
operator|=
literal|false
expr_stmt|;
name|prevSize
operator|=
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
return|return
name|vgImage
return|;
block|}
end_function
begin_function
DECL|function|toVGImage
name|VGImage
name|QVGPixmapData
operator|::
name|toVGImage
parameter_list|(
name|qreal
name|opacity
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_SHIVAVG
argument_list|)
comment|// Force the primary VG image to be recreated if necessary.
if|if
condition|(
name|toVGImage
argument_list|()
operator|==
name|VG_INVALID_HANDLE
condition|)
return|return
name|VG_INVALID_HANDLE
return|;
if|if
condition|(
name|opacity
operator|==
literal|1.0f
condition|)
return|return
name|vgImage
return|;
comment|// Create an alternative image for the selected opacity.
if|if
condition|(
name|vgImageOpacity
operator|==
name|VG_INVALID_HANDLE
operator|||
name|cachedOpacity
operator|!=
name|opacity
condition|)
block|{
if|if
condition|(
name|vgImageOpacity
operator|==
name|VG_INVALID_HANDLE
condition|)
block|{
if|if
condition|(
name|inImagePool
condition|)
block|{
name|vgImageOpacity
operator|=
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|createImageForPixmap
argument_list|(
name|VG_sARGB_8888_PRE
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|VG_IMAGE_QUALITY_FASTER
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vgImageOpacity
operator|=
name|vgCreateImage
argument_list|(
name|VG_sARGB_8888_PRE
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|VG_IMAGE_QUALITY_FASTER
argument_list|)
expr_stmt|;
block|}
comment|// Bail out if we run out of GPU memory - try again next time.
if|if
condition|(
name|vgImageOpacity
operator|==
name|VG_INVALID_HANDLE
condition|)
return|return
name|VG_INVALID_HANDLE
return|;
block|}
name|VGfloat
name|matrix
index|[
literal|20
index|]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
name|opacity
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|}
decl_stmt|;
name|vgColorMatrix
argument_list|(
name|vgImageOpacity
argument_list|,
name|vgImage
argument_list|,
name|matrix
argument_list|)
expr_stmt|;
name|cachedOpacity
operator|=
name|opacity
expr_stmt|;
block|}
return|return
name|vgImageOpacity
return|;
else|#
directive|else
comment|// vgColorMatrix() doesn't work with ShivaVG, so ignore the opacity.
name|Q_UNUSED
argument_list|(
name|opacity
argument_list|)
expr_stmt|;
return|return
name|toVGImage
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|detachImageFromPool
name|void
name|QVGPixmapData
operator|::
name|detachImageFromPool
parameter_list|()
block|{
if|if
condition|(
name|inImagePool
condition|)
block|{
name|QVGImagePool
operator|::
name|instance
argument_list|()
operator|->
name|detachImage
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|inImagePool
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|hibernate
name|void
name|QVGPixmapData
operator|::
name|hibernate
parameter_list|()
block|{
comment|// If the image was imported (e.g, from an SgImage under Symbian), then
comment|// skip the hibernation, there is no sense in copying it back to main
comment|// memory because the data is most likely shared between several processes.
name|bool
name|skipHibernate
init|=
operator|(
name|vgImage
operator|!=
name|VG_INVALID_HANDLE
operator|&&
name|source
operator|.
name|isNull
argument_list|()
operator|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
comment|// However we have to proceed normally if the image was retrieved via
comment|// a handle provider.
name|skipHibernate
operator|&=
operator|!
name|nativeImageHandleProvider
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|skipHibernate
condition|)
return|return;
name|forceToImage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// no readback allowed here
name|destroyImageAndContext
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reclaimImages
name|void
name|QVGPixmapData
operator|::
name|reclaimImages
parameter_list|()
block|{
if|if
condition|(
operator|!
name|inImagePool
condition|)
return|return;
name|forceToImage
argument_list|()
expr_stmt|;
name|destroyImages
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QVGPixmapData
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metric
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|QPaintDevice
operator|::
name|PdmWidth
case|:
return|return
name|w
return|;
case|case
name|QPaintDevice
operator|::
name|PdmHeight
case|:
return|return
name|h
return|;
case|case
name|QPaintDevice
operator|::
name|PdmNumColors
case|:
return|return
literal|0
return|;
case|case
name|QPaintDevice
operator|::
name|PdmDepth
case|:
return|return
name|d
return|;
case|case
name|QPaintDevice
operator|::
name|PdmWidthMM
case|:
return|return
name|qRound
argument_list|(
name|w
operator|*
literal|25.4
operator|/
name|qt_defaultDpiX
argument_list|()
argument_list|)
return|;
case|case
name|QPaintDevice
operator|::
name|PdmHeightMM
case|:
return|return
name|qRound
argument_list|(
name|h
operator|*
literal|25.4
operator|/
name|qt_defaultDpiY
argument_list|()
argument_list|)
return|;
case|case
name|QPaintDevice
operator|::
name|PdmDpiX
case|:
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiX
case|:
return|return
name|qt_defaultDpiX
argument_list|()
return|;
case|case
name|QPaintDevice
operator|::
name|PdmDpiY
case|:
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiY
case|:
return|return
name|qt_defaultDpiY
argument_list|()
return|;
default|default:
name|qWarning
argument_list|(
literal|"QVGPixmapData::metric(): Invalid metric"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_function
begin_comment
comment|// Ensures that the pixmap is backed by some valid data and forces the data to
end_comment
begin_comment
comment|// be re-uploaded to the VGImage when toVGImage() is called next time.
end_comment
begin_function
DECL|function|forceToImage
name|void
name|QVGPixmapData
operator|::
name|forceToImage
parameter_list|(
name|bool
name|allowReadback
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return;
if|if
condition|(
name|allowReadback
condition|)
name|ensureReadback
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|isNull
argument_list|()
condition|)
name|source
operator|=
name|QVolatileImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|sourceFormat
argument_list|()
argument_list|)
expr_stmt|;
name|recreate
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureReadback
name|void
name|QVGPixmapData
operator|::
name|ensureReadback
parameter_list|(
name|bool
name|readOnly
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|vgImage
operator|!=
name|VG_INVALID_HANDLE
operator|&&
name|source
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|source
operator|=
name|QVolatileImage
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|sourceFormat
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|.
name|beginDataAccess
argument_list|()
expr_stmt|;
name|vgGetImageSubData
argument_list|(
name|vgImage
argument_list|,
name|source
operator|.
name|bits
argument_list|()
argument_list|,
name|source
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
name|qt_vg_image_to_vg_format
argument_list|(
name|source
operator|.
name|format
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|source
operator|.
name|endDataAccess
argument_list|()
expr_stmt|;
if|if
condition|(
name|readOnly
condition|)
block|{
name|recreate
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// Once we did a readback, the original VGImage must be destroyed
comment|// because it may be shared (e.g. created via SgImage) and a subsequent
comment|// upload of the image data may produce unexpected results.
cast|const_cast
argument_list|<
name|QVGPixmapData
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|destroyImages
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
comment|// There is now an own copy of the data so drop the handle provider,
comment|// otherwise toVGImage() would request the handle again, which is wrong.
name|nativeImageHandleProvider
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|recreate
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|sourceFormat
name|QImage
operator|::
name|Format
name|QVGPixmapData
operator|::
name|sourceFormat
parameter_list|()
specifier|const
block|{
return|return
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
return|;
block|}
end_function
begin_comment
comment|/*     \internal      Returns the VGImage that is storing the contents of \a pixmap.     Returns VG_INVALID_HANDLE if \a pixmap is not owned by the OpenVG     graphics system or \a pixmap is invalid.      This function is typically used to access the backing store     for a pixmap when executing raw OpenVG calls.  It must only     be used when a QPainter is active and the OpenVG paint engine     is in use by the QPainter.      \sa {QtOpenVG Module} */
end_comment
begin_function
DECL|function|qPixmapToVGImage
name|Q_OPENVG_EXPORT
name|VGImage
name|qPixmapToVGImage
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
name|QPixmapData
modifier|*
name|pd
init|=
name|pixmap
operator|.
name|pixmapData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pd
condition|)
return|return
name|VG_INVALID_HANDLE
return|;
comment|// null QPixmap
if|if
condition|(
name|pd
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|OpenVGClass
condition|)
block|{
name|QVGPixmapData
modifier|*
name|vgpd
init|=
cast|static_cast
argument_list|<
name|QVGPixmapData
operator|*
argument_list|>
argument_list|(
name|pd
argument_list|)
decl_stmt|;
if|if
condition|(
name|vgpd
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|vgpd
operator|->
name|toVGImage
argument_list|()
return|;
block|}
return|return
name|VG_INVALID_HANDLE
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
