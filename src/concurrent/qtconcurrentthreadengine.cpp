begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtconcurrentthreadengine.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONCURRENT
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QtConcurrent
namespace|namespace
name|QtConcurrent
block|{
DECL|function|ThreadEngineBarrier
name|ThreadEngineBarrier
operator|::
name|ThreadEngineBarrier
parameter_list|()
member_init_list|:
name|count
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|acquire
name|void
name|ThreadEngineBarrier
operator|::
name|acquire
parameter_list|()
block|{
forever|forever
block|{
name|int
name|localCount
init|=
name|count
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
name|localCount
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|count
operator|.
name|testAndSetOrdered
argument_list|(
name|localCount
argument_list|,
name|localCount
operator|-
literal|1
argument_list|)
condition|)
return|return;
block|}
else|else
block|{
if|if
condition|(
name|count
operator|.
name|testAndSetOrdered
argument_list|(
name|localCount
argument_list|,
name|localCount
operator|+
literal|1
argument_list|)
condition|)
return|return;
block|}
block|}
block|}
DECL|function|release
name|int
name|ThreadEngineBarrier
operator|::
name|release
parameter_list|()
block|{
forever|forever
block|{
name|int
name|localCount
init|=
name|count
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
name|localCount
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|count
operator|.
name|testAndSetOrdered
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|localCount
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|count
operator|.
name|testAndSetOrdered
argument_list|(
name|localCount
argument_list|,
name|localCount
operator|+
literal|1
argument_list|)
condition|)
return|return
name|qAbs
argument_list|(
name|localCount
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|count
operator|.
name|testAndSetOrdered
argument_list|(
name|localCount
argument_list|,
name|localCount
operator|-
literal|1
argument_list|)
condition|)
return|return
name|localCount
operator|-
literal|1
return|;
block|}
block|}
block|}
comment|// Wait until all threads have been released
DECL|function|wait
name|void
name|ThreadEngineBarrier
operator|::
name|wait
parameter_list|()
block|{
forever|forever
block|{
name|int
name|localCount
init|=
name|count
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
name|localCount
operator|==
literal|0
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|localCount
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// multiple waiters are not allowed.
if|if
condition|(
name|count
operator|.
name|testAndSetOrdered
argument_list|(
name|localCount
argument_list|,
operator|-
name|localCount
argument_list|)
condition|)
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|currentCount
name|int
name|ThreadEngineBarrier
operator|::
name|currentCount
parameter_list|()
block|{
return|return
name|count
operator|.
name|load
argument_list|()
return|;
block|}
comment|// releases a thread, unless this is the last thread.
comment|// returns true if the thread was released.
DECL|function|releaseUnlessLast
name|bool
name|ThreadEngineBarrier
operator|::
name|releaseUnlessLast
parameter_list|()
block|{
forever|forever
block|{
name|int
name|localCount
init|=
name|count
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|localCount
argument_list|)
operator|==
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|localCount
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|count
operator|.
name|testAndSetOrdered
argument_list|(
name|localCount
argument_list|,
name|localCount
operator|+
literal|1
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|count
operator|.
name|testAndSetOrdered
argument_list|(
name|localCount
argument_list|,
name|localCount
operator|-
literal|1
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
DECL|function|ThreadEngineBase
name|ThreadEngineBase
operator|::
name|ThreadEngineBase
parameter_list|()
member_init_list|:
name|futureInterface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|threadPool
argument_list|(
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
argument_list|)
block|{
name|setAutoDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|function|~ThreadEngineBase
name|ThreadEngineBase
operator|::
name|~
name|ThreadEngineBase
parameter_list|()
block|{}
DECL|function|startSingleThreaded
name|void
name|ThreadEngineBase
operator|::
name|startSingleThreaded
parameter_list|()
block|{
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|threadFunction
argument_list|()
operator|!=
name|ThreadFinished
condition|)
empty_stmt|;
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|function|startBlocking
name|void
name|ThreadEngineBase
operator|::
name|startBlocking
parameter_list|()
block|{
name|start
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|startThreads
argument_list|()
expr_stmt|;
name|bool
name|throttled
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
try|try
block|{
endif|#
directive|endif
while|while
condition|(
name|threadFunction
argument_list|()
operator|==
name|ThrottleThread
condition|)
block|{
if|if
condition|(
name|threadThrottleExit
argument_list|()
condition|)
block|{
name|throttled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
block|}
catch|catch
parameter_list|(
name|QException
modifier|&
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|handleException
argument_list|(
name|QUnhandledException
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|throttled
operator|==
literal|false
condition|)
block|{
name|barrier
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|barrier
operator|.
name|wait
argument_list|()
expr_stmt|;
name|finish
argument_list|()
expr_stmt|;
name|exceptionStore
operator|.
name|throwPossibleException
argument_list|()
expr_stmt|;
block|}
DECL|function|startThread
name|void
name|ThreadEngineBase
operator|::
name|startThread
parameter_list|()
block|{
name|startThreadInternal
argument_list|()
expr_stmt|;
block|}
DECL|function|acquireBarrierSemaphore
name|void
name|ThreadEngineBase
operator|::
name|acquireBarrierSemaphore
parameter_list|()
block|{
name|barrier
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
DECL|function|isCanceled
name|bool
name|ThreadEngineBase
operator|::
name|isCanceled
parameter_list|()
block|{
if|if
condition|(
name|futureInterface
condition|)
return|return
name|futureInterface
operator|->
name|isCanceled
argument_list|()
return|;
else|else
return|return
literal|false
return|;
block|}
DECL|function|waitForResume
name|void
name|ThreadEngineBase
operator|::
name|waitForResume
parameter_list|()
block|{
if|if
condition|(
name|futureInterface
condition|)
name|futureInterface
operator|->
name|waitForResume
argument_list|()
expr_stmt|;
block|}
DECL|function|isProgressReportingEnabled
name|bool
name|ThreadEngineBase
operator|::
name|isProgressReportingEnabled
parameter_list|()
block|{
comment|// If we don't have a QFuture, there is no-one to report the progress to.
return|return
operator|(
name|futureInterface
operator|!=
literal|0
operator|)
return|;
block|}
DECL|function|setProgressValue
name|void
name|ThreadEngineBase
operator|::
name|setProgressValue
parameter_list|(
name|int
name|progress
parameter_list|)
block|{
if|if
condition|(
name|futureInterface
condition|)
name|futureInterface
operator|->
name|setProgressValue
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
DECL|function|setProgressRange
name|void
name|ThreadEngineBase
operator|::
name|setProgressRange
parameter_list|(
name|int
name|minimum
parameter_list|,
name|int
name|maximum
parameter_list|)
block|{
if|if
condition|(
name|futureInterface
condition|)
name|futureInterface
operator|->
name|setProgressRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
block|}
DECL|function|startThreadInternal
name|bool
name|ThreadEngineBase
operator|::
name|startThreadInternal
parameter_list|()
block|{
if|if
condition|(
name|this
operator|->
name|isCanceled
argument_list|()
condition|)
return|return
literal|false
return|;
name|barrier
operator|.
name|acquire
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|threadPool
operator|->
name|tryStart
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|barrier
operator|.
name|release
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|startThreads
name|void
name|ThreadEngineBase
operator|::
name|startThreads
parameter_list|()
block|{
while|while
condition|(
name|shouldStartThread
argument_list|()
operator|&&
name|startThreadInternal
argument_list|()
condition|)
empty_stmt|;
block|}
DECL|function|threadExit
name|void
name|ThreadEngineBase
operator|::
name|threadExit
parameter_list|()
block|{
specifier|const
name|bool
name|asynchronous
init|=
name|futureInterface
operator|!=
literal|0
decl_stmt|;
specifier|const
name|int
name|lastThread
init|=
operator|(
name|barrier
operator|.
name|release
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|lastThread
operator|&&
name|asynchronous
condition|)
name|this
operator|->
name|asynchronousFinish
argument_list|()
expr_stmt|;
block|}
comment|// Called by a worker thread that wants to be throttled. If the current number
comment|// of running threads is larger than one the thread is allowed to exit and
comment|// this function returns one.
DECL|function|threadThrottleExit
name|bool
name|ThreadEngineBase
operator|::
name|threadThrottleExit
parameter_list|()
block|{
return|return
name|barrier
operator|.
name|releaseUnlessLast
argument_list|()
return|;
block|}
DECL|function|run
name|void
name|ThreadEngineBase
operator|::
name|run
parameter_list|()
comment|// implements QRunnable.
block|{
if|if
condition|(
name|this
operator|->
name|isCanceled
argument_list|()
condition|)
block|{
name|threadExit
argument_list|()
expr_stmt|;
return|return;
block|}
name|startThreads
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
try|try
block|{
endif|#
directive|endif
while|while
condition|(
name|threadFunction
argument_list|()
operator|==
name|ThrottleThread
condition|)
block|{
comment|// threadFunction returning ThrottleThread means it that the user
comment|// struct wants to be throttled by making a worker thread exit.
comment|// Respect that request unless this is the only worker thread left
comment|// running, in which case it has to keep going.
if|if
condition|(
name|threadThrottleExit
argument_list|()
condition|)
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
block|}
catch|catch
parameter_list|(
name|QException
modifier|&
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|handleException
argument_list|(
name|QUnhandledException
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|threadExit
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
DECL|function|handleException
name|void
name|ThreadEngineBase
operator|::
name|handleException
parameter_list|(
specifier|const
name|QException
modifier|&
name|exception
parameter_list|)
block|{
if|if
condition|(
name|futureInterface
condition|)
name|futureInterface
operator|->
name|reportException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
else|else
name|exceptionStore
operator|.
name|setException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_namespace
begin_comment
comment|// namepsace QtConcurrent
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONCURRENT
end_comment
end_unit
