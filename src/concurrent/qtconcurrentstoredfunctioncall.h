begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// Generated code, do not edit! Use generator at tools/qtconcurrent/generaterun/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTCONCURRENT_STOREDFUNCTIONCALL_H
end_ifndef
begin_define
DECL|macro|QTCONCURRENT_STOREDFUNCTIONCALL_H
define|#
directive|define
name|QTCONCURRENT_STOREDFUNCTIONCALL_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONCURRENT
end_ifndef
begin_include
include|#
directive|include
file|<QtConcurrent/qtconcurrentrunbase.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|qdoc
name|namespace
name|QtConcurrent
block|{
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|>
expr|struct
name|StoredFunctorCall0
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorCall0
argument_list|(
argument|FunctionPointer _function
argument_list|)
operator|:
name|function
argument_list|(
argument|_function
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
name|function
argument_list|()
block|; }
name|FunctionPointer
name|function
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|FunctionPointer
operator|>
expr|struct
name|StoredFunctorCall0
operator|<
name|void
operator|,
name|FunctionPointer
operator|>
operator|:
name|public
name|RunFunctionTask
operator|<
name|void
operator|>
block|{
specifier|inline
name|StoredFunctorCall0
argument_list|(
argument|FunctionPointer _function
argument_list|)
operator|:
name|function
argument_list|(
argument|_function
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|function
argument_list|()
block|; }
name|FunctionPointer
name|function
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|>
expr|struct
name|StoredFunctorPointerCall0
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorPointerCall0
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|)
operator|:
name|function
argument_list|(
argument|_function
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
call|(
modifier|*
name|function
call|)
argument_list|()
block|; }
name|FunctionPointer
operator|*
name|function
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|>
expr|struct
name|VoidStoredFunctorPointerCall0
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|VoidStoredFunctorPointerCall0
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|)
operator|:
name|function
argument_list|(
argument|_function
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
call|(
modifier|*
name|function
call|)
argument_list|()
block|; }
name|FunctionPointer
operator|*
name|function
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|>
expr|struct
name|SelectStoredFunctorPointerCall0
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredFunctorPointerCall0
operator|<
name|T
operator|,
name|FunctionPointer
operator|>
operator|,
name|VoidStoredFunctorPointerCall0
operator|<
name|T
operator|,
name|FunctionPointer
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
name|class
name|StoredMemberFunctionCall0
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionCall0
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|()
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
argument|_object
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|()
block|;
name|Class
name|object
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
name|class
name|VoidStoredMemberFunctionCall0
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionCall0
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|()
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
argument|_object
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|()
block|;
name|Class
name|object
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
expr|struct
name|SelectStoredMemberFunctionCall0
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionCall0
operator|<
name|T
operator|,
name|Class
operator|>
operator|,
name|VoidStoredMemberFunctionCall0
operator|<
name|T
operator|,
name|Class
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
name|class
name|StoredConstMemberFunctionCall0
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionCall0
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
argument|_object
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
name|class
name|VoidStoredConstMemberFunctionCall0
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionCall0
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
argument|_object
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
expr|struct
name|SelectStoredConstMemberFunctionCall0
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionCall0
operator|<
name|T
operator|,
name|Class
operator|>
operator|,
name|VoidStoredConstMemberFunctionCall0
operator|<
name|T
operator|,
name|Class
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
name|class
name|StoredMemberFunctionPointerCall0
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionPointerCall0
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|()
argument_list|,
name|Class
operator|*
name|_object
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
argument|_object
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|()
block|;
name|Class
operator|*
name|object
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
name|class
name|VoidStoredMemberFunctionPointerCall0
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionPointerCall0
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|()
argument_list|,
name|Class
operator|*
name|_object
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
argument|_object
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|()
block|;
name|Class
operator|*
name|object
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
expr|struct
name|SelectStoredMemberFunctionPointerCall0
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionPointerCall0
operator|<
name|T
operator|,
name|Class
operator|>
operator|,
name|VoidStoredMemberFunctionPointerCall0
operator|<
name|T
operator|,
name|Class
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
name|class
name|StoredConstMemberFunctionPointerCall0
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionPointerCall0
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
argument|_object
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
name|class
name|VoidStoredConstMemberFunctionPointerCall0
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionPointerCall0
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
argument|_object
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;  }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|>
expr|struct
name|SelectStoredConstMemberFunctionPointerCall0
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionPointerCall0
operator|<
name|T
operator|,
name|Class
operator|>
operator|,
name|VoidStoredConstMemberFunctionPointerCall0
operator|<
name|T
operator|,
name|Class
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|StoredFunctorCall1
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorCall1
argument_list|(
argument|FunctionPointer _function
argument_list|,
argument|const Arg1&_arg1
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
name|function
argument_list|(
name|arg1
argument_list|)
block|; }
name|FunctionPointer
name|function
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|StoredFunctorCall1
operator|<
name|void
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|>
operator|:
name|public
name|RunFunctionTask
operator|<
name|void
operator|>
block|{
specifier|inline
name|StoredFunctorCall1
argument_list|(
argument|FunctionPointer _function
argument_list|,
argument|const Arg1&_arg1
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|function
argument_list|(
name|arg1
argument_list|)
block|; }
name|FunctionPointer
name|function
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|StoredFunctorPointerCall1
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorPointerCall1
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
call|(
modifier|*
name|function
call|)
argument_list|(
name|arg1
argument_list|)
block|; }
name|FunctionPointer
operator|*
name|function
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|VoidStoredFunctorPointerCall1
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|VoidStoredFunctorPointerCall1
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
call|(
modifier|*
name|function
call|)
argument_list|(
name|arg1
argument_list|)
block|; }
name|FunctionPointer
operator|*
name|function
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|SelectStoredFunctorPointerCall1
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredFunctorPointerCall1
operator|<
name|T
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|>
operator|,
name|VoidStoredFunctorPointerCall1
operator|<
name|T
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
name|class
name|StoredMemberFunctionCall1
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionCall1
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|)
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|)
block|;
name|Class
name|object
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
name|class
name|VoidStoredMemberFunctionCall1
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionCall1
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|)
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|)
block|;
name|Class
name|object
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|SelectStoredMemberFunctionCall1
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionCall1
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|>
operator|,
name|VoidStoredMemberFunctionCall1
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
name|class
name|StoredConstMemberFunctionCall1
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionCall1
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
name|class
name|VoidStoredConstMemberFunctionCall1
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionCall1
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|SelectStoredConstMemberFunctionCall1
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionCall1
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|>
operator|,
name|VoidStoredConstMemberFunctionCall1
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
name|class
name|StoredMemberFunctionPointerCall1
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionPointerCall1
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|)
argument_list|,
name|Class
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|)
block|;
name|Class
operator|*
name|object
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
name|class
name|VoidStoredMemberFunctionPointerCall1
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionPointerCall1
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|)
argument_list|,
name|Class
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|)
block|;
name|Class
operator|*
name|object
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|SelectStoredMemberFunctionPointerCall1
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionPointerCall1
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|>
operator|,
name|VoidStoredMemberFunctionPointerCall1
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
name|class
name|StoredConstMemberFunctionPointerCall1
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionPointerCall1
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
name|class
name|VoidStoredConstMemberFunctionPointerCall1
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionPointerCall1
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
argument|_arg1
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;
name|Arg1
name|arg1
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|SelectStoredConstMemberFunctionPointerCall1
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionPointerCall1
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|>
operator|,
name|VoidStoredConstMemberFunctionPointerCall1
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|StoredFunctorCall2
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorCall2
argument_list|(
argument|FunctionPointer _function
argument_list|,
argument|const Arg1&_arg1
argument_list|,
argument|const Arg2&_arg2
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
name|function
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|)
block|; }
name|FunctionPointer
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|StoredFunctorCall2
operator|<
name|void
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|>
operator|:
name|public
name|RunFunctionTask
operator|<
name|void
operator|>
block|{
specifier|inline
name|StoredFunctorCall2
argument_list|(
argument|FunctionPointer _function
argument_list|,
argument|const Arg1&_arg1
argument_list|,
argument|const Arg2&_arg2
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|function
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|)
block|; }
name|FunctionPointer
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|StoredFunctorPointerCall2
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorPointerCall2
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
call|(
modifier|*
name|function
call|)
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|)
block|; }
name|FunctionPointer
operator|*
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|VoidStoredFunctorPointerCall2
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|VoidStoredFunctorPointerCall2
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
call|(
modifier|*
name|function
call|)
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|)
block|; }
name|FunctionPointer
operator|*
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|SelectStoredFunctorPointerCall2
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredFunctorPointerCall2
operator|<
name|T
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|>
operator|,
name|VoidStoredFunctorPointerCall2
operator|<
name|T
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
name|class
name|StoredMemberFunctionCall2
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionCall2
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|)
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|)
block|;
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
name|class
name|VoidStoredMemberFunctionCall2
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionCall2
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|)
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|)
block|;
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|SelectStoredMemberFunctionCall2
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionCall2
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|>
operator|,
name|VoidStoredMemberFunctionCall2
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
name|class
name|StoredConstMemberFunctionCall2
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionCall2
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
name|class
name|VoidStoredConstMemberFunctionCall2
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionCall2
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|SelectStoredConstMemberFunctionCall2
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionCall2
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|>
operator|,
name|VoidStoredConstMemberFunctionCall2
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
name|class
name|StoredMemberFunctionPointerCall2
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionPointerCall2
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|)
argument_list|,
name|Class
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|)
block|;
name|Class
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
name|class
name|VoidStoredMemberFunctionPointerCall2
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionPointerCall2
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|)
argument_list|,
name|Class
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|)
block|;
name|Class
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|SelectStoredMemberFunctionPointerCall2
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionPointerCall2
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|>
operator|,
name|VoidStoredMemberFunctionPointerCall2
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
name|class
name|StoredConstMemberFunctionPointerCall2
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionPointerCall2
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
name|class
name|VoidStoredConstMemberFunctionPointerCall2
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionPointerCall2
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
argument|_arg2
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|SelectStoredConstMemberFunctionPointerCall2
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionPointerCall2
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|>
operator|,
name|VoidStoredConstMemberFunctionPointerCall2
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|StoredFunctorCall3
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorCall3
argument_list|(
argument|FunctionPointer _function
argument_list|,
argument|const Arg1&_arg1
argument_list|,
argument|const Arg2&_arg2
argument_list|,
argument|const Arg3&_arg3
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
name|function
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
block|; }
name|FunctionPointer
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|StoredFunctorCall3
operator|<
name|void
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|>
operator|:
name|public
name|RunFunctionTask
operator|<
name|void
operator|>
block|{
specifier|inline
name|StoredFunctorCall3
argument_list|(
argument|FunctionPointer _function
argument_list|,
argument|const Arg1&_arg1
argument_list|,
argument|const Arg2&_arg2
argument_list|,
argument|const Arg3&_arg3
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|function
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
block|; }
name|FunctionPointer
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|StoredFunctorPointerCall3
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorPointerCall3
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
call|(
modifier|*
name|function
call|)
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
block|; }
name|FunctionPointer
operator|*
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|VoidStoredFunctorPointerCall3
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|VoidStoredFunctorPointerCall3
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
call|(
modifier|*
name|function
call|)
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|)
block|; }
name|FunctionPointer
operator|*
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|SelectStoredFunctorPointerCall3
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredFunctorPointerCall3
operator|<
name|T
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|>
operator|,
name|VoidStoredFunctorPointerCall3
operator|<
name|T
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
name|class
name|StoredMemberFunctionCall3
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionCall3
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|)
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|)
block|;
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
name|class
name|VoidStoredMemberFunctionCall3
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionCall3
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|)
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|)
block|;
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|SelectStoredMemberFunctionCall3
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionCall3
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|>
operator|,
name|VoidStoredMemberFunctionCall3
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
name|class
name|StoredConstMemberFunctionCall3
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionCall3
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
name|class
name|VoidStoredConstMemberFunctionCall3
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionCall3
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|SelectStoredConstMemberFunctionCall3
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionCall3
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|>
operator|,
name|VoidStoredConstMemberFunctionCall3
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
name|class
name|StoredMemberFunctionPointerCall3
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionPointerCall3
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|)
argument_list|,
name|Class
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|)
block|;
name|Class
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
name|class
name|VoidStoredMemberFunctionPointerCall3
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionPointerCall3
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|)
argument_list|,
name|Class
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|)
block|;
name|Class
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|SelectStoredMemberFunctionPointerCall3
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionPointerCall3
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|>
operator|,
name|VoidStoredMemberFunctionPointerCall3
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
name|class
name|StoredConstMemberFunctionPointerCall3
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionPointerCall3
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
name|class
name|VoidStoredConstMemberFunctionPointerCall3
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionPointerCall3
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
argument|_arg3
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|>
expr|struct
name|SelectStoredConstMemberFunctionPointerCall3
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionPointerCall3
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|>
operator|,
name|VoidStoredConstMemberFunctionPointerCall3
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|StoredFunctorCall4
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorCall4
argument_list|(
argument|FunctionPointer _function
argument_list|,
argument|const Arg1&_arg1
argument_list|,
argument|const Arg2&_arg2
argument_list|,
argument|const Arg3&_arg3
argument_list|,
argument|const Arg4&_arg4
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
name|function
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
block|; }
name|FunctionPointer
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|StoredFunctorCall4
operator|<
name|void
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|>
operator|:
name|public
name|RunFunctionTask
operator|<
name|void
operator|>
block|{
specifier|inline
name|StoredFunctorCall4
argument_list|(
argument|FunctionPointer _function
argument_list|,
argument|const Arg1&_arg1
argument_list|,
argument|const Arg2&_arg2
argument_list|,
argument|const Arg3&_arg3
argument_list|,
argument|const Arg4&_arg4
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|function
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
block|; }
name|FunctionPointer
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|StoredFunctorPointerCall4
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorPointerCall4
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
call|(
modifier|*
name|function
call|)
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
block|; }
name|FunctionPointer
operator|*
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|VoidStoredFunctorPointerCall4
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|VoidStoredFunctorPointerCall4
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
call|(
modifier|*
name|function
call|)
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|)
block|; }
name|FunctionPointer
operator|*
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|SelectStoredFunctorPointerCall4
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredFunctorPointerCall4
operator|<
name|T
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|>
operator|,
name|VoidStoredFunctorPointerCall4
operator|<
name|T
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
name|class
name|StoredMemberFunctionCall4
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionCall4
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|)
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|)
block|;
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
name|class
name|VoidStoredMemberFunctionCall4
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionCall4
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|)
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|)
block|;
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|SelectStoredMemberFunctionCall4
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionCall4
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|>
operator|,
name|VoidStoredMemberFunctionCall4
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
name|class
name|StoredConstMemberFunctionCall4
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionCall4
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
name|class
name|VoidStoredConstMemberFunctionCall4
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionCall4
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|SelectStoredConstMemberFunctionCall4
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionCall4
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|>
operator|,
name|VoidStoredConstMemberFunctionCall4
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
name|class
name|StoredMemberFunctionPointerCall4
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionPointerCall4
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|)
argument_list|,
name|Class
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|)
block|;
name|Class
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
name|class
name|VoidStoredMemberFunctionPointerCall4
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionPointerCall4
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|)
argument_list|,
name|Class
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|)
block|;
name|Class
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|SelectStoredMemberFunctionPointerCall4
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionPointerCall4
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|>
operator|,
name|VoidStoredMemberFunctionPointerCall4
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
name|class
name|StoredConstMemberFunctionPointerCall4
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionPointerCall4
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
name|class
name|VoidStoredConstMemberFunctionPointerCall4
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionPointerCall4
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
argument|_arg4
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|>
expr|struct
name|SelectStoredConstMemberFunctionPointerCall4
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionPointerCall4
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|>
operator|,
name|VoidStoredConstMemberFunctionPointerCall4
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|StoredFunctorCall5
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorCall5
argument_list|(
argument|FunctionPointer _function
argument_list|,
argument|const Arg1&_arg1
argument_list|,
argument|const Arg2&_arg2
argument_list|,
argument|const Arg3&_arg3
argument_list|,
argument|const Arg4&_arg4
argument_list|,
argument|const Arg5&_arg5
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
name|function
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|,
name|arg5
argument_list|)
block|; }
name|FunctionPointer
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|StoredFunctorCall5
operator|<
name|void
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|,
name|Arg5
operator|>
operator|:
name|public
name|RunFunctionTask
operator|<
name|void
operator|>
block|{
specifier|inline
name|StoredFunctorCall5
argument_list|(
argument|FunctionPointer _function
argument_list|,
argument|const Arg1&_arg1
argument_list|,
argument|const Arg2&_arg2
argument_list|,
argument|const Arg3&_arg3
argument_list|,
argument|const Arg4&_arg4
argument_list|,
argument|const Arg5&_arg5
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|function
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|,
name|arg5
argument_list|)
block|; }
name|FunctionPointer
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|StoredFunctorPointerCall5
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|StoredFunctorPointerCall5
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|,
specifier|const
name|Arg5
operator|&
name|_arg5
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
call|(
modifier|*
name|function
call|)
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|,
name|arg5
argument_list|)
block|; }
name|FunctionPointer
operator|*
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|VoidStoredFunctorPointerCall5
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
specifier|inline
name|VoidStoredFunctorPointerCall5
argument_list|(
name|FunctionPointer
operator|*
name|_function
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|,
specifier|const
name|Arg5
operator|&
name|_arg5
argument_list|)
operator|:
name|function
argument_list|(
name|_function
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{}
name|void
name|runFunctor
argument_list|()
block|{
call|(
modifier|*
name|function
call|)
argument_list|(
name|arg1
argument_list|,
name|arg2
argument_list|,
name|arg3
argument_list|,
name|arg4
argument_list|,
name|arg5
argument_list|)
block|; }
name|FunctionPointer
operator|*
name|function
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|FunctionPointer
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|SelectStoredFunctorPointerCall5
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredFunctorPointerCall5
operator|<
name|T
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|,
name|Arg5
operator|>
operator|,
name|VoidStoredFunctorPointerCall5
operator|<
name|T
operator|,
name|FunctionPointer
operator|,
name|Arg1
operator|,
name|Arg2
operator|,
name|Arg3
operator|,
name|Arg4
operator|,
name|Arg5
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
name|class
name|StoredMemberFunctionCall5
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionCall5
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|,
name|Param5
argument_list|)
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|,
specifier|const
name|Arg5
operator|&
name|_arg5
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|,
name|arg5
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|,
name|Param5
argument_list|)
block|;
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
name|class
name|VoidStoredMemberFunctionCall5
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionCall5
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|,
name|Param5
argument_list|)
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|,
specifier|const
name|Arg5
operator|&
name|_arg5
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|,
name|arg5
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|,
name|Param5
argument_list|)
block|;
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|SelectStoredMemberFunctionCall5
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionCall5
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|,
name|Param5
operator|,
name|Arg5
operator|>
operator|,
name|VoidStoredMemberFunctionCall5
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|,
name|Param5
operator|,
name|Arg5
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
name|class
name|StoredConstMemberFunctionCall5
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionCall5
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|,
name|Param5
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|,
specifier|const
name|Arg5
operator|&
name|_arg5
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|,
name|arg5
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|,
name|Param5
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
name|class
name|VoidStoredConstMemberFunctionCall5
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionCall5
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|,
name|Param5
operator|)
specifier|const
argument_list|,
specifier|const
name|Class
operator|&
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|,
specifier|const
name|Arg5
operator|&
name|_arg5
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|.*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|,
name|arg5
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|,
name|Param5
operator|)
specifier|const
block|;
specifier|const
name|Class
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|SelectStoredConstMemberFunctionCall5
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionCall5
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|,
name|Param5
operator|,
name|Arg5
operator|>
operator|,
name|VoidStoredConstMemberFunctionCall5
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|,
name|Param5
operator|,
name|Arg5
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
name|class
name|StoredMemberFunctionPointerCall5
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredMemberFunctionPointerCall5
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|,
name|Param5
argument_list|)
argument_list|,
name|Class
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|,
specifier|const
name|Arg5
operator|&
name|_arg5
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|,
name|arg5
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|,
name|Param5
argument_list|)
block|;
name|Class
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
name|class
name|VoidStoredMemberFunctionPointerCall5
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredMemberFunctionPointerCall5
argument_list|(
name|T
argument_list|(
name|Class
operator|::
operator|*
name|_fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|,
name|Param5
argument_list|)
argument_list|,
name|Class
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|,
specifier|const
name|Arg5
operator|&
name|_arg5
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|,
name|arg5
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
name|Class
operator|::
operator|*
name|fn
argument_list|)
argument_list|(
name|Param1
argument_list|,
name|Param2
argument_list|,
name|Param3
argument_list|,
name|Param4
argument_list|,
name|Param5
argument_list|)
block|;
name|Class
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|SelectStoredMemberFunctionPointerCall5
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredMemberFunctionPointerCall5
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|,
name|Param5
operator|,
name|Arg5
operator|>
operator|,
name|VoidStoredMemberFunctionPointerCall5
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|,
name|Param5
operator|,
name|Arg5
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
name|class
name|StoredConstMemberFunctionPointerCall5
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredConstMemberFunctionPointerCall5
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|,
name|Param5
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|,
specifier|const
name|Arg5
operator|&
name|_arg5
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|,
name|arg5
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|,
name|Param5
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
name|class
name|VoidStoredConstMemberFunctionPointerCall5
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|VoidStoredConstMemberFunctionPointerCall5
argument_list|(
name|T
argument_list|(
argument|Class::*_fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|,
name|Param5
operator|)
specifier|const
argument_list|,
name|Class
specifier|const
operator|*
name|_object
argument_list|,
specifier|const
name|Arg1
operator|&
name|_arg1
argument_list|,
specifier|const
name|Arg2
operator|&
name|_arg2
argument_list|,
specifier|const
name|Arg3
operator|&
name|_arg3
argument_list|,
specifier|const
name|Arg4
operator|&
name|_arg4
argument_list|,
specifier|const
name|Arg5
operator|&
name|_arg5
argument_list|)
operator|:
name|fn
argument_list|(
name|_fn
argument_list|)
block|,
name|object
argument_list|(
name|_object
argument_list|)
block|,
name|arg1
argument_list|(
name|_arg1
argument_list|)
block|,
name|arg2
argument_list|(
name|_arg2
argument_list|)
block|,
name|arg3
argument_list|(
name|_arg3
argument_list|)
block|,
name|arg4
argument_list|(
name|_arg4
argument_list|)
block|,
name|arg5
argument_list|(
argument|_arg5
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
operator|(
name|object
operator|->*
name|fn
operator|)
operator|(
name|arg1
operator|,
name|arg2
operator|,
name|arg3
operator|,
name|arg4
operator|,
name|arg5
operator|)
block|;     }
name|private
operator|:
name|T
argument_list|(
argument|Class::*fn
argument_list|)
operator|(
name|Param1
operator|,
name|Param2
operator|,
name|Param3
operator|,
name|Param4
operator|,
name|Param5
operator|)
specifier|const
block|;
name|Class
specifier|const
operator|*
name|object
block|;
name|Arg1
name|arg1
block|;
name|Arg2
name|arg2
block|;
name|Arg3
name|arg3
block|;
name|Arg4
name|arg4
block|;
name|Arg5
name|arg5
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Class
operator|,
name|typename
name|Param1
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Param2
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Param3
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Param4
operator|,
name|typename
name|Arg4
operator|,
name|typename
name|Param5
operator|,
name|typename
name|Arg5
operator|>
expr|struct
name|SelectStoredConstMemberFunctionPointerCall5
block|{
typedef|typedef
name|typename
name|SelectSpecialization
operator|<
name|T
operator|>
operator|::
name|template
name|Type
operator|<
name|StoredConstMemberFunctionPointerCall5
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|,
name|Param5
operator|,
name|Arg5
operator|>
operator|,
name|VoidStoredConstMemberFunctionPointerCall5
operator|<
name|T
operator|,
name|Class
operator|,
name|Param1
operator|,
name|Arg1
operator|,
name|Param2
operator|,
name|Arg2
operator|,
name|Param3
operator|,
name|Arg3
operator|,
name|Param4
operator|,
name|Arg4
operator|,
name|Param5
operator|,
name|Arg5
operator|>
expr|>
operator|::
name|type
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Functor
operator|>
name|class
name|StoredFunctorCall
operator|:
name|public
name|RunFunctionTask
operator|<
name|T
operator|>
block|{
name|public
operator|:
name|StoredFunctorCall
argument_list|(
specifier|const
name|Functor
operator|&
name|f
argument_list|)
operator|:
name|functor
argument_list|(
argument|f
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|this
operator|->
name|result
operator|=
name|functor
argument_list|()
block|;     }
name|private
operator|:
name|Functor
name|functor
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|Functor
operator|>
name|class
name|StoredFunctorCall
operator|<
name|void
operator|,
name|Functor
operator|>
operator|:
name|public
name|RunFunctionTask
operator|<
name|void
operator|>
block|{
name|public
operator|:
name|StoredFunctorCall
argument_list|(
specifier|const
name|Functor
operator|&
name|f
argument_list|)
operator|:
name|functor
argument_list|(
argument|f
argument_list|)
block|{ }
name|void
name|runFunctor
argument_list|()
block|{
name|functor
argument_list|()
block|;     }
name|private
operator|:
name|Functor
name|functor
block|; }
expr_stmt|;
block|}
end_decl_stmt
begin_comment
comment|//namespace QtConcurrent
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// qdoc
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONCURRENT
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
