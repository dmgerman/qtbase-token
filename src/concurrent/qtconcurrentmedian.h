begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTCONCURRENT_MEDIAN_H
end_ifndef
begin_define
DECL|macro|QTCONCURRENT_MEDIAN_H
define|#
directive|define
name|QTCONCURRENT_MEDIAN_H
end_define
begin_include
include|#
directive|include
file|<QtConcurrent/qtconcurrent_global.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONCURRENT
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|Q_QDOC
name|namespace
name|QtConcurrent
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Median
block|{
name|public
operator|:
name|Median
argument_list|(
argument|int _bufferSize
argument_list|)
operator|:
name|currentMedian
argument_list|()
block|,
name|bufferSize
argument_list|(
name|_bufferSize
argument_list|)
block|,
name|currentIndex
argument_list|(
literal|0
argument_list|)
block|,
name|valid
argument_list|(
name|false
argument_list|)
block|,
name|dirty
argument_list|(
argument|true
argument_list|)
block|{
name|values
operator|.
name|resize
argument_list|(
name|bufferSize
argument_list|)
block|;     }
name|void
name|reset
argument_list|()
block|{
name|values
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
block|;
name|currentIndex
operator|=
literal|0
block|;
name|valid
operator|=
name|false
block|;
name|dirty
operator|=
name|true
block|;     }
name|void
name|addValue
argument_list|(
argument|T value
argument_list|)
block|{
name|currentIndex
operator|=
operator|(
operator|(
name|currentIndex
operator|+
literal|1
operator|)
operator|%
name|bufferSize
operator|)
block|;
if|if
condition|(
name|valid
operator|==
name|false
operator|&&
name|currentIndex
operator|%
name|bufferSize
operator|==
literal|0
condition|)
name|valid
operator|=
name|true
expr_stmt|;
comment|// Only update the cached median value when we have to, that
comment|// is when the new value is on then other side of the median
comment|// compared to the current value at the index.
specifier|const
name|T
name|currentIndexValue
operator|=
name|values
index|[
name|currentIndex
index|]
block|;
if|if
condition|(
operator|(
name|currentIndexValue
operator|>
name|currentMedian
operator|&&
name|currentMedian
operator|>
name|value
operator|)
operator|||
operator|(
name|currentMedian
operator|>
name|currentIndexValue
operator|&&
name|value
operator|>
name|currentMedian
operator|)
condition|)
block|{
name|dirty
operator|=
name|true
expr_stmt|;
block|}
name|values
index|[
name|currentIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
name|bool
name|isMedianValid
argument_list|()
specifier|const
block|{
return|return
name|valid
return|;
block|}
name|T
name|median
parameter_list|()
block|{
if|if
condition|(
name|dirty
condition|)
block|{
name|dirty
operator|=
name|false
expr_stmt|;
comment|// This is a workaround for http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58800
comment|// Avoid using std::nth_element for the affected stdlibc++ releases 4.7.3 and 4.8.2.
comment|// Note that the official __GLIBCXX__ value of the releases is not used since that
comment|// one might be patched on some GNU/Linux distributions.
if|#
directive|if
name|defined
argument_list|(
name|__GLIBCXX__
argument_list|)
operator|&&
name|__GLIBCXX__
operator|<=
literal|20140107
name|QVector
operator|<
name|T
operator|>
name|sorted
operator|=
name|values
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|sorted
operator|.
name|begin
argument_list|()
argument_list|,
name|sorted
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|currentMedian
operator|=
name|sorted
operator|.
name|at
argument_list|(
name|bufferSize
operator|/
literal|2
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVector
operator|<
name|T
operator|>
name|copy
operator|=
name|values
expr_stmt|;
name|typename
name|QVector
operator|<
name|T
operator|>
operator|::
name|iterator
name|begin
operator|=
name|copy
operator|.
name|begin
argument_list|()
operator|,
name|mid
operator|=
name|copy
operator|.
name|begin
argument_list|()
operator|+
name|bufferSize
operator|/
literal|2
operator|,
name|end
operator|=
name|copy
operator|.
name|end
argument_list|()
expr_stmt|;
name|std
operator|::
name|nth_element
argument_list|(
name|begin
argument_list|,
name|mid
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|currentMedian
operator|=
operator|*
name|mid
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|currentMedian
return|;
block|}
name|private
label|:
name|QVector
operator|<
name|T
operator|>
name|values
expr_stmt|;
name|T
name|currentMedian
decl_stmt|;
name|int
name|bufferSize
decl_stmt|;
name|int
name|currentIndex
decl_stmt|;
name|bool
name|valid
decl_stmt|;
name|bool
name|dirty
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// ### Qt6: Drop Median<double> in favor of this faster MedianDouble
end_comment
begin_decl_stmt
name|class
name|MedianDouble
block|{
name|public
label|:
enum|enum
block|{
name|BufferSize
init|=
literal|7
block|}
enum|;
name|MedianDouble
argument_list|()
operator|:
name|currentMedian
argument_list|()
operator|,
name|currentIndex
argument_list|(
literal|0
argument_list|)
operator|,
name|valid
argument_list|(
name|false
argument_list|)
operator|,
name|dirty
argument_list|(
argument|true
argument_list|)
block|{     }
name|void
name|reset
argument_list|()
block|{
name|std
operator|::
name|fill_n
argument_list|(
name|values
argument_list|,
name|static_cast
operator|<
name|int
operator|>
operator|(
name|BufferSize
operator|)
argument_list|,
literal|0.0
argument_list|)
block|;
name|currentIndex
operator|=
literal|0
block|;
name|valid
operator|=
name|false
block|;
name|dirty
operator|=
name|true
block|;     }
name|void
name|addValue
argument_list|(
argument|double value
argument_list|)
block|{
operator|++
name|currentIndex
block|;
if|if
condition|(
name|currentIndex
operator|==
name|BufferSize
condition|)
block|{
name|currentIndex
operator|=
literal|0
expr_stmt|;
name|valid
operator|=
name|true
expr_stmt|;
block|}
comment|// Only update the cached median value when we have to, that
comment|// is when the new value is on then other side of the median
comment|// compared to the current value at the index.
specifier|const
name|double
name|currentIndexValue
init|=
name|values
index|[
name|currentIndex
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|currentIndexValue
operator|>
name|currentMedian
operator|&&
name|currentMedian
operator|>
name|value
operator|)
operator|||
operator|(
name|currentMedian
operator|>
name|currentIndexValue
operator|&&
name|value
operator|>
name|currentMedian
operator|)
condition|)
block|{
name|dirty
operator|=
name|true
expr_stmt|;
block|}
name|values
index|[
name|currentIndex
index|]
operator|=
name|value
expr_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
name|bool
name|isMedianValid
argument_list|()
specifier|const
block|{
return|return
name|valid
return|;
block|}
end_expr_stmt
begin_function
name|double
name|median
parameter_list|()
block|{
if|if
condition|(
name|dirty
condition|)
block|{
name|dirty
operator|=
name|false
expr_stmt|;
name|double
name|sorted
index|[
name|BufferSize
index|]
decl_stmt|;
operator|::
name|memcpy
argument_list|(
operator|&
name|sorted
argument_list|,
operator|&
name|values
argument_list|,
sizeof|sizeof
argument_list|(
name|sorted
argument_list|)
argument_list|)
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|sorted
argument_list|,
name|sorted
operator|+
name|static_cast
operator|<
name|int
operator|>
operator|(
name|BufferSize
operator|)
argument_list|)
expr_stmt|;
name|currentMedian
operator|=
name|sorted
index|[
name|BufferSize
operator|/
literal|2
index|]
expr_stmt|;
block|}
return|return
name|currentMedian
return|;
block|}
end_function
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|double
name|values
index|[
name|BufferSize
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|double
name|currentMedian
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|currentIndex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|valid
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|dirty
decl_stmt|;
end_decl_stmt
begin_comment
unit|};  }
comment|// namespace QtConcurrent
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_QDOC
end_comment
begin_endif
unit|QT_END_NAMESPACE
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONCURRENT
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
