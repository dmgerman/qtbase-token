begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtestlogger_p.h"
end_include
begin_include
include|#
directive|include
file|"qtestelement.h"
end_include
begin_include
include|#
directive|include
file|"qtestxunitstreamer.h"
end_include
begin_include
include|#
directive|include
file|"qtestxmlstreamer.h"
end_include
begin_include
include|#
directive|include
file|"qtestlightxmlstreamer.h"
end_include
begin_include
include|#
directive|include
file|"QtTest/qtestcase.h"
end_include
begin_include
include|#
directive|include
file|"QtTest/private/qtestresult_p.h"
end_include
begin_include
include|#
directive|include
file|"QtTest/private/qbenchmark_p.h"
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QTestLogger
name|QTestLogger
operator|::
name|QTestLogger
parameter_list|(
name|int
name|fm
parameter_list|)
member_init_list|:
name|listOfTestcases
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|currentLogElement
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|errorLogElement
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|logFormatter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|format
argument_list|(
operator|(
name|TestLoggerFormat
operator|)
name|fm
argument_list|)
member_init_list|,
name|testCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|passCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|failureCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|errorCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|warningCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|skipCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|systemCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|qdebugCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|qwarnCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|qfatalCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|infoCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|randomSeed_
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hasRandomSeed_
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QTestLogger
name|QTestLogger
operator|::
name|~
name|QTestLogger
parameter_list|()
block|{
if|if
condition|(
name|format
operator|==
name|TLF_XunitXml
condition|)
operator|delete
name|currentLogElement
expr_stmt|;
else|else
operator|delete
name|listOfTestcases
expr_stmt|;
operator|delete
name|logFormatter
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|startLogging
name|void
name|QTestLogger
operator|::
name|startLogging
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
block|{
name|QAbstractTestLogger
operator|::
name|startLogging
argument_list|(
name|filename
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|TLF_LightXml
case|:
name|logFormatter
operator|=
operator|new
name|QTestLightXmlStreamer
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLF_XML
case|:
name|logFormatter
operator|=
operator|new
name|QTestXmlStreamer
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|TLF_XunitXml
case|:
name|logFormatter
operator|=
operator|new
name|QTestXunitStreamer
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|delete
name|errorLogElement
expr_stmt|;
name|errorLogElement
operator|=
operator|new
name|QTestElement
argument_list|(
name|QTest
operator|::
name|LET_SystemError
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|stopLogging
name|void
name|QTestLogger
operator|::
name|stopLogging
parameter_list|()
block|{
name|QTestElement
modifier|*
name|iterator
init|=
name|listOfTestcases
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|TLF_XunitXml
condition|)
block|{
name|char
name|buf
index|[
literal|10
index|]
decl_stmt|;
name|currentLogElement
operator|=
operator|new
name|QTestElement
argument_list|(
name|QTest
operator|::
name|LET_TestSuite
argument_list|)
expr_stmt|;
name|currentLogElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Name
argument_list|,
name|QTestResult
operator|::
name|currentTestObjectName
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qt_snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"%i"
argument_list|,
name|testCounter
argument_list|)
expr_stmt|;
name|currentLogElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Tests
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qt_snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"%i"
argument_list|,
name|failureCounter
argument_list|)
expr_stmt|;
name|currentLogElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Failures
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qt_snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"%i"
argument_list|,
name|errorCounter
argument_list|)
expr_stmt|;
name|currentLogElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Errors
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|QTestElement
modifier|*
name|property
decl_stmt|;
name|QTestElement
modifier|*
name|properties
init|=
operator|new
name|QTestElement
argument_list|(
name|QTest
operator|::
name|LET_Properties
argument_list|)
decl_stmt|;
name|property
operator|=
operator|new
name|QTestElement
argument_list|(
name|QTest
operator|::
name|LET_Property
argument_list|)
expr_stmt|;
name|property
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Name
argument_list|,
literal|"QTestVersion"
argument_list|)
expr_stmt|;
name|property
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_PropertyValue
argument_list|,
name|QTEST_VERSION_STR
argument_list|)
expr_stmt|;
name|properties
operator|->
name|addLogElement
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|property
operator|=
operator|new
name|QTestElement
argument_list|(
name|QTest
operator|::
name|LET_Property
argument_list|)
expr_stmt|;
name|property
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Name
argument_list|,
literal|"QtVersion"
argument_list|)
expr_stmt|;
name|property
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_PropertyValue
argument_list|,
name|qVersion
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|->
name|addLogElement
argument_list|(
name|property
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasRandomSeed
argument_list|()
condition|)
block|{
name|property
operator|=
operator|new
name|QTestElement
argument_list|(
name|QTest
operator|::
name|LET_Property
argument_list|)
expr_stmt|;
name|property
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Name
argument_list|,
literal|"RandomSeed"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qt_snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"%i"
argument_list|,
name|randomSeed
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_PropertyValue
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|properties
operator|->
name|addLogElement
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
name|currentLogElement
operator|->
name|addLogElement
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|currentLogElement
operator|->
name|addLogElement
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
comment|/* For correct indenting, make sure every testcase knows its parent */
name|QTestElement
modifier|*
name|testcase
init|=
name|iterator
decl_stmt|;
while|while
condition|(
name|testcase
condition|)
block|{
name|testcase
operator|->
name|setParent
argument_list|(
name|currentLogElement
argument_list|)
expr_stmt|;
name|testcase
operator|=
name|testcase
operator|->
name|nextElement
argument_list|()
expr_stmt|;
block|}
name|currentLogElement
operator|->
name|addLogElement
argument_list|(
name|errorLogElement
argument_list|)
expr_stmt|;
name|QTestElement
modifier|*
name|it
init|=
name|currentLogElement
decl_stmt|;
name|logFormatter
operator|->
name|output
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logFormatter
operator|->
name|output
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
block|}
name|QAbstractTestLogger
operator|::
name|stopLogging
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|enterTestFunction
name|void
name|QTestLogger
operator|::
name|enterTestFunction
parameter_list|(
specifier|const
name|char
modifier|*
name|function
parameter_list|)
block|{
name|currentLogElement
operator|=
operator|new
name|QTestElement
argument_list|(
name|QTest
operator|::
name|LET_TestCase
argument_list|)
expr_stmt|;
name|currentLogElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Name
argument_list|,
name|function
argument_list|)
expr_stmt|;
name|currentLogElement
operator|->
name|addToList
argument_list|(
operator|&
name|listOfTestcases
argument_list|)
expr_stmt|;
operator|++
name|testCounter
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leaveTestFunction
name|void
name|QTestLogger
operator|::
name|leaveTestFunction
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|addIncident
name|void
name|QTestLogger
operator|::
name|addIncident
parameter_list|(
name|IncidentTypes
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|description
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|typeBuf
init|=
literal|0
decl_stmt|;
name|char
name|buf
index|[
literal|100
index|]
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QAbstractTestLogger
operator|::
name|XPass
case|:
operator|++
name|failureCounter
expr_stmt|;
name|typeBuf
operator|=
literal|"xpass"
expr_stmt|;
break|break;
case|case
name|QAbstractTestLogger
operator|::
name|Pass
case|:
operator|++
name|passCounter
expr_stmt|;
name|typeBuf
operator|=
literal|"pass"
expr_stmt|;
break|break;
case|case
name|QAbstractTestLogger
operator|::
name|XFail
case|:
operator|++
name|passCounter
expr_stmt|;
name|typeBuf
operator|=
literal|"xfail"
expr_stmt|;
break|break;
case|case
name|QAbstractTestLogger
operator|::
name|Fail
case|:
operator|++
name|failureCounter
expr_stmt|;
name|typeBuf
operator|=
literal|"fail"
expr_stmt|;
break|break;
default|default:
name|typeBuf
operator|=
literal|"??????"
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|Fail
operator|||
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|XPass
operator|||
operator|(
operator|(
name|format
operator|!=
name|TLF_XunitXml
operator|)
operator|&&
operator|(
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|XFail
operator|)
operator|)
condition|)
block|{
name|QTestElement
modifier|*
name|failureElement
init|=
operator|new
name|QTestElement
argument_list|(
name|QTest
operator|::
name|LET_Failure
argument_list|)
decl_stmt|;
name|failureElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Result
argument_list|,
name|typeBuf
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
condition|)
name|failureElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_File
argument_list|,
name|file
argument_list|)
expr_stmt|;
else|else
name|failureElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_File
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qt_snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"%i"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|failureElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Line
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|failureElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Description
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|failureElement
argument_list|)
expr_stmt|;
name|currentLogElement
operator|->
name|addLogElement
argument_list|(
name|failureElement
argument_list|)
expr_stmt|;
block|}
comment|/*         Only one result can be shown for the whole testfunction.         Check if we currently have a result, and if so, overwrite it         iff the new result is worse.     */
name|QTestElementAttribute
modifier|*
name|resultAttr
init|=
cast|const_cast
argument_list|<
name|QTestElementAttribute
operator|*
argument_list|>
argument_list|(
name|currentLogElement
operator|->
name|attribute
argument_list|(
name|QTest
operator|::
name|AI_Result
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultAttr
condition|)
block|{
specifier|const
name|char
modifier|*
name|oldResult
init|=
name|resultAttr
operator|->
name|value
argument_list|()
decl_stmt|;
name|bool
name|overwrite
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|oldResult
argument_list|,
literal|"pass"
argument_list|)
condition|)
block|{
name|overwrite
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|oldResult
argument_list|,
literal|"xfail"
argument_list|)
condition|)
block|{
name|overwrite
operator|=
operator|(
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|XPass
operator|||
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|Fail
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|oldResult
argument_list|,
literal|"xpass"
argument_list|)
condition|)
block|{
name|overwrite
operator|=
operator|(
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|Fail
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|overwrite
condition|)
block|{
name|resultAttr
operator|->
name|setPair
argument_list|(
name|QTest
operator|::
name|AI_Result
argument_list|,
name|typeBuf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentLogElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Result
argument_list|,
name|typeBuf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|file
condition|)
name|currentLogElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_File
argument_list|,
name|file
argument_list|)
expr_stmt|;
else|else
name|currentLogElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_File
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qt_snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"%i"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|currentLogElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Line
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|/*         Since XFAIL does not add a failure to the testlog in xunitxml, add a message, so we still         have some information about the expected failure.     */
if|if
condition|(
name|format
operator|==
name|TLF_XunitXml
operator|&&
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|XFail
condition|)
block|{
name|QTestLogger
operator|::
name|addMessage
argument_list|(
name|QAbstractTestLogger
operator|::
name|Info
argument_list|,
name|description
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|addBenchmarkResult
name|void
name|QTestLogger
operator|::
name|addBenchmarkResult
parameter_list|(
specifier|const
name|QBenchmarkResult
modifier|&
name|result
parameter_list|)
block|{
name|QTestElement
modifier|*
name|benchmarkElement
init|=
operator|new
name|QTestElement
argument_list|(
name|QTest
operator|::
name|LET_Benchmark
argument_list|)
decl_stmt|;
comment|//    printf("element %i", benchmarkElement->elementType());
name|benchmarkElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Metric
argument_list|,
name|QTest
operator|::
name|benchmarkMetricName
argument_list|(
name|QBenchmarkTestMethodData
operator|::
name|current
operator|->
name|result
operator|.
name|metric
argument_list|)
argument_list|)
expr_stmt|;
name|benchmarkElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Tag
argument_list|,
name|result
operator|.
name|context
operator|.
name|tag
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|benchmarkElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Value
argument_list|,
name|QByteArray
operator|::
name|number
argument_list|(
name|result
operator|.
name|value
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|100
index|]
decl_stmt|;
name|QTest
operator|::
name|qt_snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"%i"
argument_list|,
name|result
operator|.
name|iterations
argument_list|)
expr_stmt|;
name|benchmarkElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Iterations
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|currentLogElement
operator|->
name|addLogElement
argument_list|(
name|benchmarkElement
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addTag
name|void
name|QTestLogger
operator|::
name|addTag
parameter_list|(
name|QTestElement
modifier|*
name|element
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|tag
init|=
name|QTestResult
operator|::
name|currentDataTag
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|gtag
init|=
name|QTestResult
operator|::
name|currentGlobalDataTag
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|filler
init|=
operator|(
name|tag
operator|&&
name|gtag
operator|)
condition|?
literal|":"
else|:
literal|""
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|tag
operator|||
operator|!
name|tag
index|[
literal|0
index|]
operator|)
operator|&&
operator|(
operator|!
name|gtag
operator|||
operator|!
name|gtag
index|[
literal|0
index|]
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|tag
condition|)
block|{
name|tag
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gtag
condition|)
block|{
name|gtag
operator|=
literal|""
expr_stmt|;
block|}
name|QTestCharBuffer
name|buf
decl_stmt|;
name|QTest
operator|::
name|qt_asprintf
argument_list|(
operator|&
name|buf
argument_list|,
literal|"%s%s%s"
argument_list|,
name|gtag
argument_list|,
name|filler
argument_list|,
name|tag
argument_list|)
expr_stmt|;
name|element
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Tag
argument_list|,
name|buf
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addMessage
name|void
name|QTestLogger
operator|::
name|addMessage
parameter_list|(
name|MessageTypes
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|message
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|QTestElement
modifier|*
name|errorElement
init|=
operator|new
name|QTestElement
argument_list|(
name|QTest
operator|::
name|LET_Error
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|typeBuf
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QAbstractTestLogger
operator|::
name|Warn
case|:
operator|++
name|warningCounter
expr_stmt|;
name|typeBuf
operator|=
literal|"warn"
expr_stmt|;
break|break;
case|case
name|QAbstractTestLogger
operator|::
name|QSystem
case|:
operator|++
name|systemCounter
expr_stmt|;
name|typeBuf
operator|=
literal|"system"
expr_stmt|;
break|break;
case|case
name|QAbstractTestLogger
operator|::
name|QDebug
case|:
operator|++
name|qdebugCounter
expr_stmt|;
name|typeBuf
operator|=
literal|"qdebug"
expr_stmt|;
break|break;
case|case
name|QAbstractTestLogger
operator|::
name|QWarning
case|:
operator|++
name|qwarnCounter
expr_stmt|;
name|typeBuf
operator|=
literal|"qwarn"
expr_stmt|;
break|break;
case|case
name|QAbstractTestLogger
operator|::
name|QFatal
case|:
operator|++
name|qfatalCounter
expr_stmt|;
name|typeBuf
operator|=
literal|"qfatal"
expr_stmt|;
break|break;
case|case
name|QAbstractTestLogger
operator|::
name|Skip
case|:
operator|++
name|skipCounter
expr_stmt|;
name|typeBuf
operator|=
literal|"skip"
expr_stmt|;
break|break;
case|case
name|QAbstractTestLogger
operator|::
name|Info
case|:
operator|++
name|infoCounter
expr_stmt|;
name|typeBuf
operator|=
literal|"info"
expr_stmt|;
break|break;
default|default:
name|typeBuf
operator|=
literal|"??????"
expr_stmt|;
break|break;
block|}
name|errorElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Type
argument_list|,
name|typeBuf
argument_list|)
expr_stmt|;
name|errorElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Description
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|addTag
argument_list|(
name|errorElement
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
condition|)
name|errorElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_File
argument_list|,
name|file
argument_list|)
expr_stmt|;
else|else
name|errorElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_File
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|100
index|]
decl_stmt|;
name|QTest
operator|::
name|qt_snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"%i"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|errorElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Line
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|currentLogElement
operator|->
name|addLogElement
argument_list|(
name|errorElement
argument_list|)
expr_stmt|;
operator|++
name|errorCounter
expr_stmt|;
comment|// Also add the message to the system error log (i.e. stderr), if one exists
if|if
condition|(
name|errorLogElement
condition|)
block|{
name|QTestElement
modifier|*
name|systemErrorElement
init|=
operator|new
name|QTestElement
argument_list|(
name|QTest
operator|::
name|LET_Error
argument_list|)
decl_stmt|;
name|systemErrorElement
operator|->
name|addAttribute
argument_list|(
name|QTest
operator|::
name|AI_Description
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|errorLogElement
operator|->
name|addLogElement
argument_list|(
name|systemErrorElement
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setLogFormat
name|void
name|QTestLogger
operator|::
name|setLogFormat
parameter_list|(
name|TestLoggerFormat
name|fm
parameter_list|)
block|{
name|format
operator|=
name|fm
expr_stmt|;
block|}
end_function
begin_function
DECL|function|logFormat
name|QTestLogger
operator|::
name|TestLoggerFormat
name|QTestLogger
operator|::
name|logFormat
parameter_list|()
block|{
return|return
name|format
return|;
block|}
end_function
begin_function
DECL|function|passCount
name|int
name|QTestLogger
operator|::
name|passCount
parameter_list|()
specifier|const
block|{
return|return
name|passCounter
return|;
block|}
end_function
begin_function
DECL|function|failureCount
name|int
name|QTestLogger
operator|::
name|failureCount
parameter_list|()
specifier|const
block|{
return|return
name|failureCounter
return|;
block|}
end_function
begin_function
DECL|function|errorCount
name|int
name|QTestLogger
operator|::
name|errorCount
parameter_list|()
specifier|const
block|{
return|return
name|errorCounter
return|;
block|}
end_function
begin_function
DECL|function|warningCount
name|int
name|QTestLogger
operator|::
name|warningCount
parameter_list|()
specifier|const
block|{
return|return
name|warningCounter
return|;
block|}
end_function
begin_function
DECL|function|skipCount
name|int
name|QTestLogger
operator|::
name|skipCount
parameter_list|()
specifier|const
block|{
return|return
name|skipCounter
return|;
block|}
end_function
begin_function
DECL|function|systemCount
name|int
name|QTestLogger
operator|::
name|systemCount
parameter_list|()
specifier|const
block|{
return|return
name|systemCounter
return|;
block|}
end_function
begin_function
DECL|function|qdebugCount
name|int
name|QTestLogger
operator|::
name|qdebugCount
parameter_list|()
specifier|const
block|{
return|return
name|qdebugCounter
return|;
block|}
end_function
begin_function
DECL|function|qwarnCount
name|int
name|QTestLogger
operator|::
name|qwarnCount
parameter_list|()
specifier|const
block|{
return|return
name|qwarnCounter
return|;
block|}
end_function
begin_function
DECL|function|qfatalCount
name|int
name|QTestLogger
operator|::
name|qfatalCount
parameter_list|()
specifier|const
block|{
return|return
name|qfatalCounter
return|;
block|}
end_function
begin_function
DECL|function|infoCount
name|int
name|QTestLogger
operator|::
name|infoCount
parameter_list|()
specifier|const
block|{
return|return
name|infoCounter
return|;
block|}
end_function
begin_function
DECL|function|registerRandomSeed
name|void
name|QTestLogger
operator|::
name|registerRandomSeed
parameter_list|(
name|unsigned
name|int
name|seed
parameter_list|)
block|{
name|randomSeed_
operator|=
name|seed
expr_stmt|;
name|hasRandomSeed_
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|randomSeed
name|unsigned
name|int
name|QTestLogger
operator|::
name|randomSeed
parameter_list|()
specifier|const
block|{
return|return
name|randomSeed_
return|;
block|}
end_function
begin_function
DECL|function|hasRandomSeed
name|bool
name|QTestLogger
operator|::
name|hasRandomSeed
parameter_list|()
specifier|const
block|{
return|return
name|hasRandomSeed_
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
