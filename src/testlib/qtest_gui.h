begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTEST_GUI_H
end_ifndef
begin_define
DECL|macro|QTEST_GUI_H
define|#
directive|define
name|QTEST_GUI_H
end_define
begin_comment
comment|// enable GUI features
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_GUI_LIB
end_ifndef
begin_define
DECL|macro|QT_GUI_LIB
define|#
directive|define
name|QT_GUI_LIB
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
literal|0
end_if
begin_pragma
pragma|#
directive|pragma
name|qt_class
name|(
name|QtTestGui
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtTest/qtestassert.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtest.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestevent.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestmouse.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtesttouch.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestkeyboard.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qicon.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpixmap.h>
end_include
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// inform syncqt
end_comment
begin_pragma
pragma|#
directive|pragma
name|qt_no_master_include
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|function|QT_MODULE
name|QT_MODULE
parameter_list|(
name|Test
parameter_list|)
name|namespace
name|QTest
decl_stmt|{  template<>
specifier|inline
namespace|bool
name|qCompare
namespace|(
name|QIcon
namespace|const&
name|t1
operator|,
name|QIcon
namespace|const&
name|t2
operator|,
namespace|const
name|char
modifier|*
name|actual
operator|,
namespace|const
name|char
modifier|*
name|expected
operator|,
namespace|const
name|char
modifier|*
name|file
operator|,
name|int
name|line
end_function
begin_block
unit|)
block|{
name|QTEST_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|QIcon
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|qCompare
operator|<
name|void
operator|*
operator|>
operator|(
operator|*
name|reinterpret_cast
operator|<
name|void
operator|*
specifier|const
operator|*
operator|>
operator|(
operator|&
name|t1
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|void
operator|*
specifier|const
operator|*
operator|>
operator|(
operator|&
name|t2
operator|)
operator|,
name|actual
operator|,
name|expected
operator|,
name|file
operator|,
name|line
operator|)
return|;
block|}
end_block
begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|bool
name|qCompare
argument_list|(
argument|QPixmap const&t1
argument_list|,
argument|QPixmap const&t2
argument_list|,
argument|const char *actual
argument_list|,
argument|const char *expected
argument_list|,
argument|const char *file
argument_list|,
argument|int line
argument_list|)
block|{
return|return
name|qCompare
argument_list|(
name|t1
operator|.
name|toImage
argument_list|()
argument_list|,
name|t2
operator|.
name|toImage
argument_list|()
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
return|;
block|}
end_expr_stmt
begin_comment
unit|}
comment|/* compatibility */
end_comment
begin_function
unit|inline
DECL|function|pixmapsAreEqual
specifier|static
name|bool
name|pixmapsAreEqual
parameter_list|(
specifier|const
name|QPixmap
modifier|*
name|actual
parameter_list|,
specifier|const
name|QPixmap
modifier|*
name|expected
parameter_list|)
block|{
if|if
condition|(
operator|!
name|actual
operator|&&
operator|!
name|expected
condition|)
return|return
name|true
return|;
if|if
condition|(
operator|!
name|actual
operator|||
operator|!
name|expected
condition|)
return|return
name|false
return|;
if|if
condition|(
name|actual
operator|->
name|isNull
argument_list|()
operator|&&
name|expected
operator|->
name|isNull
argument_list|()
condition|)
return|return
name|true
return|;
if|if
condition|(
name|actual
operator|->
name|isNull
argument_list|()
operator|||
name|expected
operator|->
name|isNull
argument_list|()
operator|||
name|actual
operator|->
name|size
argument_list|()
operator|!=
name|expected
operator|->
name|size
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|actual
operator|->
name|toImage
argument_list|()
operator|==
name|expected
operator|->
name|toImage
argument_list|()
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function_decl
specifier|extern
name|void
name|qt_x11_wait_for_window_manager
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
