begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTEST_GUI_H
end_ifndef
begin_define
DECL|macro|QTEST_GUI_H
define|#
directive|define
name|QTEST_GUI_H
end_define
begin_comment
comment|// enable GUI features
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_GUI_LIB
end_ifndef
begin_define
DECL|macro|QT_GUI_LIB
define|#
directive|define
name|QT_GUI_LIB
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
literal|0
end_if
begin_pragma
pragma|#
directive|pragma
name|qt_class
name|(
name|QtTestGui
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtTest/qtestassert.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtest.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestevent.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestmouse.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtesttouch.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestkeyboard.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpixmap.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qimage.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_WIDGETS_LIB
end_ifdef
begin_include
include|#
directive|include
file|<QtWidgets/qicon.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// inform syncqt
end_comment
begin_pragma
pragma|#
directive|pragma
name|qt_no_master_include
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|namespace
name|QTest
block|{
ifdef|#
directive|ifdef
name|QT_WIDGETS_LIB
name|template
operator|<
operator|>
specifier|inline
name|bool
name|qCompare
argument_list|(
argument|QIcon const&t1
argument_list|,
argument|QIcon const&t2
argument_list|,
argument|const char *actual
argument_list|,
argument|const char *expected
argument_list|,
argument|const char *file
argument_list|,
argument|int line
argument_list|)
block|{
name|QTEST_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|QIcon
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
block|;
return|return
name|qCompare
operator|<
name|void
operator|*
operator|>
operator|(
operator|*
name|reinterpret_cast
operator|<
name|void
operator|*
specifier|const
operator|*
operator|>
operator|(
operator|&
name|t1
operator|)
operator|,
operator|*
name|reinterpret_cast
operator|<
name|void
operator|*
specifier|const
operator|*
operator|>
operator|(
operator|&
name|t2
operator|)
operator|,
name|actual
operator|,
name|expected
operator|,
name|file
operator|,
name|line
operator|)
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QTEST_NO_SPECIALIZATIONS
name|template
operator|<
operator|>
endif|#
directive|endif
specifier|inline
name|bool
name|qCompare
argument_list|(
argument|QImage const&t1
argument_list|,
argument|QImage const&t2
argument_list|,
argument|const char *actual
argument_list|,
argument|const char *expected
argument_list|,
argument|const char *file
argument_list|,
argument|int line
argument_list|)
block|{
name|char
name|msg
index|[
literal|1024
index|]
block|;
name|msg
index|[
literal|0
index|]
operator|=
literal|'\0'
block|;
specifier|const
name|bool
name|t1Null
operator|=
name|t1
operator|.
name|isNull
argument_list|()
block|;
specifier|const
name|bool
name|t2Null
operator|=
name|t2
operator|.
name|isNull
argument_list|()
block|;
if|if
condition|(
name|t1Null
operator|!=
name|t2Null
condition|)
block|{
name|qsnprintf
argument_list|(
name|msg
argument_list|,
literal|1024
argument_list|,
literal|"Compared QImages differ.\n"
literal|"   Actual   (%s).isNull(): %d\n"
literal|"   Expected (%s).isNull(): %d"
argument_list|,
name|actual
argument_list|,
name|t1Null
argument_list|,
name|expected
argument_list|,
name|t2Null
argument_list|)
expr_stmt|;
return|return
name|compare_helper
argument_list|(
name|false
argument_list|,
name|msg
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
return|;
block|}
if|if
condition|(
name|t1Null
operator|&&
name|t2Null
condition|)
return|return
name|compare_helper
argument_list|(
name|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
return|;
if|if
condition|(
name|t1
operator|.
name|width
argument_list|()
operator|!=
name|t2
operator|.
name|width
argument_list|()
operator|||
name|t2
operator|.
name|height
argument_list|()
operator|!=
name|t2
operator|.
name|height
argument_list|()
condition|)
block|{
name|qsnprintf
argument_list|(
name|msg
argument_list|,
literal|1024
argument_list|,
literal|"Compared QImages differ in size.\n"
literal|"   Actual   (%s): %dx%d\n"
literal|"   Expected (%s): %dx%d"
argument_list|,
name|actual
argument_list|,
name|t1
operator|.
name|width
argument_list|()
argument_list|,
name|t1
operator|.
name|height
argument_list|()
argument_list|,
name|expected
argument_list|,
name|t2
operator|.
name|width
argument_list|()
argument_list|,
name|t2
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|compare_helper
argument_list|(
name|false
argument_list|,
name|msg
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
return|;
block|}
if|if
condition|(
name|t1
operator|.
name|format
argument_list|()
operator|!=
name|t2
operator|.
name|format
argument_list|()
condition|)
block|{
name|qsnprintf
argument_list|(
name|msg
argument_list|,
literal|1024
argument_list|,
literal|"Compared QImages differ in format.\n"
literal|"   Actual   (%s): %d\n"
literal|"   Expected (%s): %d"
argument_list|,
name|actual
argument_list|,
name|t1
operator|.
name|format
argument_list|()
argument_list|,
name|expected
argument_list|,
name|t2
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|compare_helper
argument_list|(
name|false
argument_list|,
name|msg
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
return|;
block|}
return|return
name|compare_helper
argument_list|(
name|t1
operator|==
name|t2
argument_list|,
literal|"Compared values are not the same"
argument_list|,
name|toString
argument_list|(
name|t1
argument_list|)
argument_list|,
name|toString
argument_list|(
name|t2
argument_list|)
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
return|;
block|}
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QTEST_NO_SPECIALIZATIONS
end_ifndef
begin_expr_stmt
name|template
operator|<
operator|>
endif|#
directive|endif
specifier|inline
name|bool
name|qCompare
argument_list|(
argument|QPixmap const&t1
argument_list|,
argument|QPixmap const&t2
argument_list|,
argument|const char *actual
argument_list|,
argument|const char *expected
argument_list|,
argument|const char *file
argument_list|,
argument|int line
argument_list|)
block|{
name|char
name|msg
index|[
literal|1024
index|]
block|;
name|msg
index|[
literal|0
index|]
operator|=
literal|'\0'
block|;
specifier|const
name|bool
name|t1Null
operator|=
name|t1
operator|.
name|isNull
argument_list|()
block|;
specifier|const
name|bool
name|t2Null
operator|=
name|t2
operator|.
name|isNull
argument_list|()
block|;
if|if
condition|(
name|t1Null
operator|!=
name|t2Null
condition|)
block|{
name|qsnprintf
argument_list|(
name|msg
argument_list|,
literal|1024
argument_list|,
literal|"Compared QPixmaps differ.\n"
literal|"   Actual   (%s).isNull(): %d\n"
literal|"   Expected (%s).isNull(): %d"
argument_list|,
name|actual
argument_list|,
name|t1Null
argument_list|,
name|expected
argument_list|,
name|t2Null
argument_list|)
expr_stmt|;
return|return
name|compare_helper
argument_list|(
name|false
argument_list|,
name|msg
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
return|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
name|t1Null
operator|&&
name|t2Null
condition|)
return|return
name|compare_helper
argument_list|(
name|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
return|;
end_if
begin_if
if|if
condition|(
name|t1
operator|.
name|width
argument_list|()
operator|!=
name|t2
operator|.
name|width
argument_list|()
operator|||
name|t2
operator|.
name|height
argument_list|()
operator|!=
name|t2
operator|.
name|height
argument_list|()
condition|)
block|{
name|qsnprintf
argument_list|(
name|msg
argument_list|,
literal|1024
argument_list|,
literal|"Compared QPixmaps differ in size.\n"
literal|"   Actual   (%s): %dx%d\n"
literal|"   Expected (%s): %dx%d"
argument_list|,
name|actual
argument_list|,
name|t1
operator|.
name|width
argument_list|()
argument_list|,
name|t1
operator|.
name|height
argument_list|()
argument_list|,
name|expected
argument_list|,
name|t2
operator|.
name|width
argument_list|()
argument_list|,
name|t2
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|compare_helper
argument_list|(
name|false
argument_list|,
name|msg
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
return|;
block|}
end_if
begin_return
return|return
name|qCompare
argument_list|(
name|t1
operator|.
name|toImage
argument_list|()
argument_list|,
name|t2
operator|.
name|toImage
argument_list|()
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
return|;
end_return
begin_ifdef
unit|}  }
ifdef|#
directive|ifdef
name|Q_WS_X11
end_ifdef
begin_function_decl
specifier|extern
name|void
name|qt_x11_wait_for_window_manager
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
