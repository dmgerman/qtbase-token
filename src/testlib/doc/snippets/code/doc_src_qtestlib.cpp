begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//! [0]
end_comment
begin_class
DECL|class|MyFirstTest
class|class
name|MyFirstTest
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
DECL|function|initTestCase
name|void
name|initTestCase
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|"called before everything else"
argument_list|)
expr_stmt|;
block|}
DECL|function|myFirstTest
name|void
name|myFirstTest
parameter_list|()
block|{
name|QVERIFY
argument_list|(
literal|1
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|function|mySecondTest
name|void
name|mySecondTest
parameter_list|()
block|{
name|QVERIFY
argument_list|(
literal|1
operator|!=
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|function|cleanupTestCase
name|void
name|cleanupTestCase
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|"called after myFirstTest and mySecondTest"
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_function
DECL|function|toUpper
name|void
name|TestQString
operator|::
name|toUpper
parameter_list|()
block|{
name|QString
name|str
init|=
literal|"Hello"
decl_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|.
name|toUpper
argument_list|()
operator|==
literal|"HELLO"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [8]
end_comment
begin_comment
comment|//! [11]
end_comment
begin_expr_stmt
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"hello"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"HELLO"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"Hello"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"HELLO"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"HellO"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"HELLO"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"HELLO"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"HELLO"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|//! [11]
end_comment
begin_comment
comment|//! [12]
end_comment
begin_class
DECL|class|MyFirstBenchmark
class|class
name|MyFirstBenchmark
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
DECL|function|myFirstBenchmark
name|void
name|myFirstBenchmark
parameter_list|()
block|{
name|QString
name|string1
decl_stmt|;
name|QString
name|string2
decl_stmt|;
name|QBENCHMARK
block|{
name|string1
operator|.
name|localeAwareCompare
argument_list|(
name|string2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_comment
comment|//! [12]
end_comment
end_unit
