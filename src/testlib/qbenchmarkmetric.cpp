begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/private/qbenchmarkmetric_p.h>
end_include
begin_comment
comment|/*!   \enum QTest::QBenchmarkMetric   \since 4.7    This enum lists all the things that can be benchmarked.    \value FramesPerSecond        Frames per second   \value BitsPerSecond          Bits per second   \value BytesPerSecond         Bytes per second   \value WalltimeMilliseconds   Clock time in milliseconds   \value WalltimeNanoseconds    Clock time in nanoseconds   \value BytesAllocated         Memory usage in bytes   \value Events                 Event count   \value CPUTicks               CPU time   \value CPUMigrations          Process migrations between CPUs   \value CPUCycles              CPU cycles   \value BusCycles              Bus cycles   \value StalledCycles          Cycles stalled   \value InstructionReads       Instruction reads   \value Instructions           Instructions executed   \value BranchInstructions     Branch-type instructions   \value BranchMisses           Branch instructions that were mispredicted   \value CacheReferences        Cache accesses of any type   \value CacheMisses            Cache misses of any type   \value CacheReads             Cache reads / loads   \value CacheReadMisses        Cache read / load misses   \value CacheWrites            Cache writes / stores   \value CacheWriteMisses       Cache write / store misses   \value CachePrefetches        Cache prefetches   \value CachePrefetchMisses    Cache prefetch misses   \value ContextSwitches        Context switches   \value PageFaults             Page faults of any type   \value MinorPageFaults        Minor page faults   \value MajorPageFaults        Major page faults   \value AlignmentFaults        Faults caused due to misalignment   \value EmulationFaults        Faults that needed software emulation    \sa QTest::benchmarkMetricName(), QTest::benchmarkMetricUnit()    Note that \c WalltimeNanoseconds and \c BytesAllocated are   only provided for use via \l setBenchmarkResult(), and results   in those metrics are not able to be provided automatically   by the QTest framework.  */
end_comment
begin_comment
comment|/*!   \since 4.7   Returns the enum value \a metric as a character string.  */
end_comment
begin_function
DECL|function|benchmarkMetricName
specifier|const
name|char
modifier|*
name|QTest
operator|::
name|benchmarkMetricName
parameter_list|(
name|QBenchmarkMetric
name|metric
parameter_list|)
block|{
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|FramesPerSecond
case|:
return|return
literal|"FramesPerSecond"
return|;
case|case
name|BitsPerSecond
case|:
return|return
literal|"BitsPerSecond"
return|;
case|case
name|BytesPerSecond
case|:
return|return
literal|"BytesPerSecond"
return|;
case|case
name|WalltimeMilliseconds
case|:
return|return
literal|"WalltimeMilliseconds"
return|;
case|case
name|Events
case|:
return|return
literal|"Events"
return|;
case|case
name|CPUTicks
case|:
return|return
literal|"CPUTicks"
return|;
case|case
name|CPUMigrations
case|:
return|return
literal|"CPUMigrations"
return|;
case|case
name|CPUCycles
case|:
return|return
literal|"CPUCycles"
return|;
case|case
name|BusCycles
case|:
return|return
literal|"BusCycles"
return|;
case|case
name|StalledCycles
case|:
return|return
literal|"StalledCycles"
return|;
case|case
name|InstructionReads
case|:
return|return
literal|"InstructionReads"
return|;
case|case
name|Instructions
case|:
return|return
literal|"Instructions"
return|;
case|case
name|WalltimeNanoseconds
case|:
return|return
literal|"WalltimeNanoseconds"
return|;
case|case
name|BytesAllocated
case|:
return|return
literal|"BytesAllocated"
return|;
case|case
name|BranchInstructions
case|:
return|return
literal|"BranchInstructions"
return|;
case|case
name|BranchMisses
case|:
return|return
literal|"BranchMisses"
return|;
case|case
name|CacheReferences
case|:
return|return
literal|"CacheReferences"
return|;
case|case
name|CacheReads
case|:
return|return
literal|"CacheReads"
return|;
case|case
name|CacheWrites
case|:
return|return
literal|"CacheWrites"
return|;
case|case
name|CachePrefetches
case|:
return|return
literal|"CachePrefetches"
return|;
case|case
name|CacheMisses
case|:
return|return
literal|"CacheMisses"
return|;
case|case
name|CacheReadMisses
case|:
return|return
literal|"CacheReadMisses"
return|;
case|case
name|CacheWriteMisses
case|:
return|return
literal|"CacheWriteMisses"
return|;
case|case
name|CachePrefetchMisses
case|:
return|return
literal|"CachePrefetchMisses"
return|;
case|case
name|ContextSwitches
case|:
return|return
literal|"ContextSwitches"
return|;
case|case
name|PageFaults
case|:
return|return
literal|"PageFaults"
return|;
case|case
name|MinorPageFaults
case|:
return|return
literal|"MinorPageFaults"
return|;
case|case
name|MajorPageFaults
case|:
return|return
literal|"MajorPageFaults"
return|;
case|case
name|AlignmentFaults
case|:
return|return
literal|"AlignmentFaults"
return|;
case|case
name|EmulationFaults
case|:
return|return
literal|"EmulationFaults"
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|/*!   \since 4.7   Retuns the units of measure for the specified \a metric.  */
end_comment
begin_function
DECL|function|benchmarkMetricUnit
specifier|const
name|char
modifier|*
name|QTest
operator|::
name|benchmarkMetricUnit
parameter_list|(
name|QBenchmarkMetric
name|metric
parameter_list|)
block|{
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|FramesPerSecond
case|:
return|return
literal|"fps"
return|;
case|case
name|BitsPerSecond
case|:
return|return
literal|"bits/s"
return|;
case|case
name|BytesPerSecond
case|:
return|return
literal|"bytes/s"
return|;
case|case
name|WalltimeMilliseconds
case|:
return|return
literal|"msecs"
return|;
case|case
name|Events
case|:
return|return
literal|"events"
return|;
case|case
name|CPUTicks
case|:
return|return
literal|"CPU ticks"
return|;
case|case
name|CPUMigrations
case|:
return|return
literal|"CPU migrations"
return|;
case|case
name|CPUCycles
case|:
return|return
literal|"CPU cycles"
return|;
case|case
name|BusCycles
case|:
return|return
literal|"bus cycles"
return|;
case|case
name|StalledCycles
case|:
return|return
literal|"stalled cycles"
return|;
case|case
name|InstructionReads
case|:
return|return
literal|"instruction reads"
return|;
case|case
name|Instructions
case|:
return|return
literal|"instructions"
return|;
case|case
name|WalltimeNanoseconds
case|:
return|return
literal|"nsecs"
return|;
case|case
name|BytesAllocated
case|:
return|return
literal|"bytes"
return|;
case|case
name|BranchInstructions
case|:
return|return
literal|"branch instructions"
return|;
case|case
name|BranchMisses
case|:
return|return
literal|"branch misses"
return|;
case|case
name|CacheReferences
case|:
return|return
literal|"cache references"
return|;
case|case
name|CacheReads
case|:
return|return
literal|"cache loads"
return|;
case|case
name|CacheWrites
case|:
return|return
literal|"cache stores"
return|;
case|case
name|CachePrefetches
case|:
return|return
literal|"cache prefetches"
return|;
case|case
name|CacheMisses
case|:
return|return
literal|"cache misses"
return|;
case|case
name|CacheReadMisses
case|:
return|return
literal|"cache load misses"
return|;
case|case
name|CacheWriteMisses
case|:
return|return
literal|"cache store misses"
return|;
case|case
name|CachePrefetchMisses
case|:
return|return
literal|"cache prefetch misses"
return|;
case|case
name|ContextSwitches
case|:
return|return
literal|"context switches"
return|;
case|case
name|PageFaults
case|:
return|return
literal|"page faults"
return|;
case|case
name|MinorPageFaults
case|:
return|return
literal|"minor page faults"
return|;
case|case
name|MajorPageFaults
case|:
return|return
literal|"major page faults"
return|;
case|case
name|AlignmentFaults
case|:
return|return
literal|"alignment faults"
return|;
case|case
name|EmulationFaults
case|:
return|return
literal|"emulation faults"
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
end_function
end_unit
