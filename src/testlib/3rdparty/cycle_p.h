begin_unit
begin_comment
comment|/*  * Copyright (c) 2003, 2006 Matteo Frigo  * Copyright (c) 2003, 2006 Massachusetts Institute of Technology  *  * Permission is hereby granted, free of charge, to any person obtaining  * a copy of this software and associated documentation files (the  * "Software"), to deal in the Software without restriction, including  * without limitation the rights to use, copy, modify, merge, publish,  * distribute, sublicense, and/or sell copies of the Software, and to  * permit persons to whom the Software is furnished to do so, subject to  * the following conditions:  *  * The above copyright notice and this permission notice shall be  * included in all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE  * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  *  */
end_comment
begin_comment
comment|/* $Id: cycle.h,v 1.52 2006-02-08 02:36:47 athena Exp $ */
end_comment
begin_comment
comment|/* machine-dependent cycle counters code. Needs to be inlined. */
end_comment
begin_comment
comment|/***************************************************************************/
end_comment
begin_comment
comment|/* To use the cycle counters in your code, simply #include "cycle.h" (this    file), and then use the functions/macros:                   CycleCounterTicks getticks(void);     CycleCounterTicks is an opaque typedef defined below, representing the current time.    You extract the elapsed time between two calls to gettick() via:                   double elapsed(CycleCounterTicks t1, CycleCounterTicks t0);     which returns a double-precision variable in arbitrary units.  You    are not expected to convert this into human units like seconds; it    is intended only for *comparisons* of time intervals.     (In order to use some of the OS-dependent timer routines like    Solaris' gethrtime, you need to paste the autoconf snippet below    into your configure.ac file and #include "config.h" before cycle.h,    or define the relevant macros manually if you are not using autoconf.) */
end_comment
begin_comment
comment|/***************************************************************************/
end_comment
begin_comment
comment|/* This file uses macros like HAVE_GETHRTIME that are assumed to be    defined according to whether the corresponding function/type/header    is available on your system.  The necessary macros are most    conveniently defined if you are using GNU autoconf, via the tests:     dnl ---------------------------------------------------------------------     AC_C_INLINE    AC_HEADER_TIME    AC_CHECK_HEADERS([sys/time.h c_asm.h intrinsics.h mach/mach_time.h])     AC_CHECK_TYPE([hrtime_t],[AC_DEFINE(HAVE_HRTIME_T, 1, [Define to 1 if hrtime_t is defined in<sys/time.h>])],,[#if HAVE_SYS_TIME_H #include<sys/time.h> #endif])     AC_CHECK_FUNCS([gethrtime read_real_time time_base_to_time clock_gettime mach_absolute_time])     dnl Cray UNICOS _rtc() (real-time clock) intrinsic    AC_MSG_CHECKING([for _rtc intrinsic])    rtc_ok=yes    AC_TRY_LINK([#ifdef HAVE_INTRINSICS_H #include<intrinsics.h> #endif], [_rtc()], [AC_DEFINE(HAVE__RTC,1,[Define if you have the UNICOS _rtc() intrinsic.])], [rtc_ok=no])    AC_MSG_RESULT($rtc_ok)     dnl --------------------------------------------------------------------- */
end_comment
begin_comment
comment|/***************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QBENCHLIB_CYCLE_H
end_ifndef
begin_define
DECL|macro|QBENCHLIB_CYCLE_H
define|#
directive|define
name|QBENCHLIB_CYCLE_H
end_define
begin_if
if|#
directive|if
name|TIME_WITH_SYS_TIME
end_if
begin_include
include|#
directive|include
file|<sys/time.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_else
else|#
directive|else
end_else
begin_if
if|#
directive|if
name|HAVE_SYS_TIME_H
end_if
begin_include
include|#
directive|include
file|<sys/time.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|INLINE_ELAPSED
define|#
directive|define
name|INLINE_ELAPSED
parameter_list|(
name|INL
parameter_list|)
value|static INL double elapsed(CycleCounterTicks t1, CycleCounterTicks t0) \ {									  \      return (double)(t1 - t0);						  \ }
end_define
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_comment
comment|/* Solaris */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|HAVE_GETHRTIME
argument_list|)
operator|&&
name|defined
argument_list|(
name|HAVE_HRTIME_T
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|hrtime_t
name|CycleCounterTicks
typedef|;
end_typedef
begin_define
DECL|macro|getticks
define|#
directive|define
name|getticks
value|gethrtime
end_define
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|inline
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_comment
comment|/* AIX v. 4+ routines to read the real-time clock or time-base register */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|HAVE_READ_REAL_TIME
argument_list|)
operator|&&
name|defined
argument_list|(
name|HAVE_TIME_BASE_TO_TIME
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|timebasestruct_t
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
specifier|inline
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|CycleCounterTicks
name|t
decl_stmt|;
name|read_real_time
argument_list|(
operator|&
name|t
argument_list|,
name|TIMEBASE_SZ
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|elapsed
specifier|static
specifier|inline
name|double
name|elapsed
parameter_list|(
name|CycleCounterTicks
name|t1
parameter_list|,
name|CycleCounterTicks
name|t0
parameter_list|)
comment|/* time in nanoseconds */
block|{
name|time_base_to_time
argument_list|(
operator|&
name|t1
argument_list|,
name|TIMEBASE_SZ
argument_list|)
expr_stmt|;
name|time_base_to_time
argument_list|(
operator|&
name|t0
argument_list|,
name|TIMEBASE_SZ
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|t1
operator|.
name|tb_high
operator|-
name|t0
operator|.
name|tb_high
operator|)
operator|*
literal|1e9
operator|+
operator|(
name|t1
operator|.
name|tb_low
operator|-
name|t0
operator|.
name|tb_low
operator|)
operator|)
return|;
block|}
end_function
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_comment
comment|/*  * PowerPC ``cycle'' counter using the time base register.  */
end_comment
begin_if
if|#
directive|if
operator|(
operator|(
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|__powerpc__
argument_list|)
operator|||
name|defined
argument_list|(
name|__ppc__
argument_list|)
operator|)
operator|)
operator|||
operator|(
name|defined
argument_list|(
name|__MWERKS__
argument_list|)
operator|&&
name|defined
argument_list|(
name|macintosh
argument_list|)
operator|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|long
name|long
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
name|__inline__
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|unsigned
name|int
name|tbl
decl_stmt|,
name|tbu0
decl_stmt|,
name|tbu1
decl_stmt|;
do|do
block|{
asm|__asm__
specifier|__volatile__
asm|("mftbu %0" : "=r"(tbu0));
asm|__asm__
specifier|__volatile__
asm|("mftb %0" : "=r"(tbl));
asm|__asm__
specifier|__volatile__
asm|("mftbu %0" : "=r"(tbu1));
block|}
do|while
condition|(
name|tbu0
operator|!=
name|tbu1
condition|)
do|;
return|return
operator|(
operator|(
operator|(
name|unsigned
name|long
name|long
operator|)
name|tbu0
operator|)
operator|<<
literal|32
operator|)
operator||
name|tbl
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline__
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* MacOS/Mach (Darwin) time-base register interface (unlike UpTime,    from Carbon, requires no additional libraries to be linked). */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|HAVE_MACH_ABSOLUTE_TIME
argument_list|)
operator|&&
name|defined
argument_list|(
name|HAVE_MACH_MACH_TIME_H
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<mach/mach_time.h>
end_include
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|uint64_t
name|CycleCounterTicks
typedef|;
end_typedef
begin_define
DECL|macro|getticks
define|#
directive|define
name|getticks
value|mach_absolute_time
end_define
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline__
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_comment
comment|/*  * Pentium cycle counter  */
end_comment
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__ICC
argument_list|)
operator|)
operator|&&
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|long
name|long
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
name|__inline__
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|CycleCounterTicks
name|ret
decl_stmt|;
asm|__asm__
specifier|__volatile__
asm|("rdtsc": "=A" (ret));
comment|/* no input, nothing else clobbered */
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline__
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_define
DECL|macro|TIME_MIN
define|#
directive|define
name|TIME_MIN
value|5000.0
end_define
begin_comment
DECL|macro|TIME_MIN
comment|/* unreliable pentium IV cycle counter */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Visual C++ -- thanks to Morten Nissov for his help with this */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
end_if
begin_if
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1200
operator|&&
operator|(
name|_M_IX86
operator|>=
literal|500
operator|||
operator|(
name|defined
argument_list|(
name|_WIN32_WCE
argument_list|)
operator|&&
name|defined
argument_list|(
name|_X86_
argument_list|)
operator|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|LARGE_INTEGER
name|CycleCounterTicks
typedef|;
end_typedef
begin_define
DECL|macro|RDTSC
define|#
directive|define
name|RDTSC
value|__asm __emit 0fh __asm __emit 031h
end_define
begin_comment
DECL|macro|RDTSC
comment|/* hack for VC++ 5.0 */
end_comment
begin_function
DECL|function|getticks
specifier|static
name|__inline
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|CycleCounterTicks
name|retval
decl_stmt|;
asm|__asm {
asm|RDTSC
asm|mov retval.HighPart, edx
asm|mov retval.LowPart, eax
asm|}
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|elapsed
specifier|static
name|__inline
name|double
name|elapsed
parameter_list|(
name|CycleCounterTicks
name|t1
parameter_list|,
name|CycleCounterTicks
name|t0
parameter_list|)
block|{
return|return
call|(
name|double
call|)
argument_list|(
name|t1
operator|.
name|QuadPart
operator|-
name|t0
operator|.
name|QuadPart
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_define
DECL|macro|TIME_MIN
define|#
directive|define
name|TIME_MIN
value|5000.0
end_define
begin_comment
DECL|macro|TIME_MIN
comment|/* unreliable pentium IV cycle counter */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1400
operator|&&
name|defined
argument_list|(
name|_WIN32_WCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|DWORD
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
name|__inline
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|GetTickCount
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|elapsed
specifier|static
name|__inline
name|double
name|elapsed
parameter_list|(
name|CycleCounterTicks
name|t1
parameter_list|,
name|CycleCounterTicks
name|t0
parameter_list|)
block|{
return|return
call|(
name|double
call|)
argument_list|(
name|t1
operator|-
name|t0
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_define
DECL|macro|TIME_MIN
define|#
directive|define
name|TIME_MIN
value|5000.0
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_comment
comment|/*  * X86-64 cycle counter  */
end_comment
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__ICC
argument_list|)
operator|)
operator|&&
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|long
name|long
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
name|__inline__
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|unsigned
name|a
decl_stmt|,
name|d
decl_stmt|;
asm|asm
specifier|volatile
asm|("rdtsc" : "=a" (a), "=d" (d));
return|return
operator|(
operator|(
name|CycleCounterTicks
operator|)
name|a
operator|)
operator||
operator|(
operator|(
operator|(
name|CycleCounterTicks
operator|)
name|d
operator|)
operator|<<
literal|32
operator|)
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline__
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* PGI compiler, courtesy Cristiano Calonaci, Andrea Tarsi,& Roberto Gori.    NOTE: this code will fail to link unless you use the -Masmkeyword compiler    option (grrr). */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__PGI
argument_list|)
operator|&&
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|long
name|long
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
asm|asm(" rdtsc; shl    $0x20,%rdx; mov    %eax,%eax; or     %rdx,%rax;    ");
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline__
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Visual C++ */
end_comment
begin_if
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1400
operator|&&
operator|(
name|defined
argument_list|(
name|_M_AMD64
argument_list|)
operator|||
name|defined
argument_list|(
name|_M_X64
argument_list|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<intrin.h>
end_include
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|__int64
name|CycleCounterTicks
typedef|;
end_typedef
begin_define
DECL|macro|getticks
define|#
directive|define
name|getticks
value|__rdtsc
end_define
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_comment
comment|/*  * IA64 cycle counter  */
end_comment
begin_comment
comment|/* intel's icc/ecc compiler */
end_comment
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__EDG_VERSION
argument_list|)
operator|||
name|defined
argument_list|(
name|__ECC
argument_list|)
operator|)
operator|&&
name|defined
argument_list|(
name|__ia64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|long
name|CycleCounterTicks
typedef|;
end_typedef
begin_include
include|#
directive|include
file|<ia64intrin.h>
end_include
begin_function
DECL|function|getticks
specifier|static
name|__inline__
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|__getReg
argument_list|(
name|_IA64_REG_AR_ITC
argument_list|)
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline__
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* gcc */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__ia64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|long
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
name|__inline__
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|CycleCounterTicks
name|ret
decl_stmt|;
asm|__asm__
specifier|__volatile__
asm|("mov %0=ar.itc" : "=r"(ret));
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline__
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* HP/UX IA64 compiler, courtesy Teresa L. Johnson: */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__hpux
argument_list|)
operator|&&
name|defined
argument_list|(
name|__ia64
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<machine/sys/inline.h>
end_include
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|long
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
specifier|inline
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|CycleCounterTicks
name|ret
decl_stmt|;
name|ret
operator|=
name|_Asm_mov_from_ar
argument_list|(
name|_AREG_ITC
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|inline
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* Microsoft Visual C++ */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|defined
argument_list|(
name|_M_IA64
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|__int64
name|CycleCounterTicks
typedef|;
end_typedef
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_extern
extern|extern
literal|"C"
endif|#
directive|endif
name|ticks
name|__getReg
parameter_list|(
name|int
name|whichReg
parameter_list|)
function_decl|;
end_extern
begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|__getReg
name|)
end_pragma
begin_function
DECL|function|getticks
specifier|static
name|__inline
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
specifier|volatile
name|CycleCounterTicks
name|temp
decl_stmt|;
name|temp
operator|=
name|__getReg
argument_list|(
literal|3116
argument_list|)
expr_stmt|;
return|return
name|temp
return|;
block|}
end_function
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_comment
comment|/*  * PA-RISC cycle counter  */
end_comment
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__hppa__
argument_list|)
operator|||
name|defined
argument_list|(
name|__hppa
argument_list|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|long
name|CycleCounterTicks
typedef|;
end_typedef
begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef
begin_function
DECL|function|getticks
specifier|static
name|__inline__
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|CycleCounterTicks
name|ret
decl_stmt|;
asm|__asm__
specifier|__volatile__
asm|("mfctl 16, %0": "=r" (ret));
comment|/* no input, nothing else clobbered */
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|inline
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_elif
elif|#
directive|elif
literal|0
end_elif
begin_comment
comment|// Doesn't compile
end_comment
begin_include
include|#
directive|include
file|<machine/inline.h>
end_include
begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
specifier|register
name|CycleCounterTicks
name|ret
decl_stmt|;
name|_MFCTL
argument_list|(
literal|16
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_comment
comment|/* S390, courtesy of James Treacy */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__s390__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|long
name|long
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
name|__inline__
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|CycleCounterTicks
name|cycles
decl_stmt|;
asm|__asm__("stck 0(%0)" : : "a" (&(cycles)) : "memory", "cc");
return|return
name|cycles
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline__
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__alpha__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_comment
comment|/*  * The 32-bit cycle counter on alpha overflows pretty quickly,  * unfortunately.  A 1GHz machine overflows in 4 seconds.  */
end_comment
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|int
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
name|__inline__
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|unsigned
name|long
name|cc
decl_stmt|;
asm|__asm__
specifier|__volatile__
asm|("rpcc %0" : "=r"(cc));
return|return
operator|(
name|cc
operator|&
literal|0xFFFFFFFF
operator|)
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline__
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__sparc_v9__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|long
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
name|__inline__
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|CycleCounterTicks
name|ret
decl_stmt|;
asm|__asm__
specifier|__volatile__
asm|("rd %%tick, %0" : "=r" (ret));
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline__
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__DECC
argument_list|)
operator|||
name|defined
argument_list|(
name|__DECCXX
argument_list|)
operator|)
operator|&&
name|defined
argument_list|(
name|__alpha
argument_list|)
operator|&&
name|defined
argument_list|(
name|HAVE_C_ASM_H
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<c_asm.h>
end_include
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|unsigned
name|int
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
name|__inline
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|unsigned
name|long
name|cc
decl_stmt|;
name|cc
operator|=
asm|asm("rpcc %v0");
return|return
operator|(
name|cc
operator|&
literal|0xFFFFFFFF
operator|)
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|__inline
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_comment
comment|/* SGI/Irix */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|HAVE_CLOCK_GETTIME
argument_list|)
operator|&&
name|defined
argument_list|(
name|CLOCK_SGI_CYCLE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|struct
name|timespec
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
specifier|inline
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
name|struct
name|timespec
name|t
decl_stmt|;
name|clock_gettime
argument_list|(
name|CLOCK_SGI_CYCLE
argument_list|,
operator|&
name|t
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|elapsed
specifier|static
specifier|inline
name|double
name|elapsed
parameter_list|(
name|CycleCounterTicks
name|t1
parameter_list|,
name|CycleCounterTicks
name|t0
parameter_list|)
block|{
return|return
call|(
name|double
call|)
argument_list|(
name|t1
operator|.
name|tv_sec
operator|-
name|t0
operator|.
name|tv_sec
argument_list|)
operator|*
literal|1.0E9
operator|+
call|(
name|double
call|)
argument_list|(
name|t1
operator|.
name|tv_nsec
operator|-
name|t0
operator|.
name|tv_nsec
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_comment
comment|/* Cray UNICOS _rtc() intrinsic function */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|HAVE__RTC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_ifdef
ifdef|#
directive|ifdef
name|HAVE_INTRINSICS_H
end_ifdef
begin_include
include|#
directive|include
file|<intrinsics.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|long
name|long
name|CycleCounterTicks
typedef|;
end_typedef
begin_define
DECL|macro|getticks
define|#
directive|define
name|getticks
value|_rtc
end_define
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|inline
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*----------------------------------------------------------------*/
end_comment
begin_comment
comment|/* Symbian */
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__SYMBIAN32__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|HAVE_TICK_COUNTER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<e32std.h>
end_include
begin_typedef
DECL|typedef|CycleCounterTicks
typedef|typedef
name|TUint32
name|CycleCounterTicks
typedef|;
end_typedef
begin_function
DECL|function|getticks
specifier|static
specifier|inline
name|CycleCounterTicks
name|getticks
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|User
operator|::
name|FastCounter
argument_list|()
return|;
block|}
end_function
begin_macro
name|INLINE_ELAPSED
argument_list|(
argument|inline
argument_list|)
end_macro
begin_define
DECL|macro|HAVE_TICK_COUNTER
define|#
directive|define
name|HAVE_TICK_COUNTER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QBENCHLIB_CYCLE_H
end_comment
end_unit
