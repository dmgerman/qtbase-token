begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Intel Corporation. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qbenchmarkperfevents_p.h"
end_include
begin_include
include|#
directive|include
file|"qbenchmark_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QTESTLIB_USE_PERF_EVENTS
end_ifdef
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<sys/syscall.h>
end_include
begin_include
include|#
directive|include
file|"3rdparty/linux_perf_event_p.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|perf_event_open
specifier|static
name|int
name|perf_event_open
parameter_list|(
name|perf_event_attr
modifier|*
name|attr
parameter_list|,
name|pid_t
name|pid
parameter_list|,
name|int
name|cpu
parameter_list|,
name|int
name|group_fd
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
block|{
return|return
name|syscall
argument_list|(
name|SYS_perf_event_open
argument_list|,
name|attr
argument_list|,
name|pid
argument_list|,
name|cpu
argument_list|,
name|group_fd
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isAvailable
name|bool
name|QBenchmarkPerfEventsMeasurer
operator|::
name|isAvailable
parameter_list|()
block|{
comment|// this generates an EFAULT because attr == NULL if perf_event_open is available
comment|// if the kernel is too old, it generates ENOSYS
return|return
name|perf_event_open
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|!=
name|ENOSYS
return|;
block|}
end_function
begin_constructor
DECL|function|QBenchmarkPerfEventsMeasurer
name|QBenchmarkPerfEventsMeasurer
operator|::
name|QBenchmarkPerfEventsMeasurer
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~QBenchmarkPerfEventsMeasurer
name|QBenchmarkPerfEventsMeasurer
operator|::
name|~
name|QBenchmarkPerfEventsMeasurer
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|QBenchmarkPerfEventsMeasurer
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|start
name|void
name|QBenchmarkPerfEventsMeasurer
operator|::
name|start
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|checkpoint
name|qint64
name|QBenchmarkPerfEventsMeasurer
operator|::
name|checkpoint
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|stop
name|qint64
name|QBenchmarkPerfEventsMeasurer
operator|::
name|stop
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|isMeasurementAccepted
name|bool
name|QBenchmarkPerfEventsMeasurer
operator|::
name|isMeasurementAccepted
parameter_list|(
name|qint64
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|adjustIterationCount
name|int
name|QBenchmarkPerfEventsMeasurer
operator|::
name|adjustIterationCount
parameter_list|(
name|int
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|adjustMedianCount
name|int
name|QBenchmarkPerfEventsMeasurer
operator|::
name|adjustMedianCount
parameter_list|(
name|int
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|metricType
name|QTest
operator|::
name|QBenchmarkMetric
name|QBenchmarkPerfEventsMeasurer
operator|::
name|metricType
parameter_list|()
block|{
return|return
name|QTest
operator|::
name|Events
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
