begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTESTACCESSIBLE_H
end_ifndef
begin_define
DECL|macro|QTESTACCESSIBLE_H
define|#
directive|define
name|QTESTACCESSIBLE_H
end_define
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// inform syncqt
end_comment
begin_pragma
pragma|#
directive|pragma
name|qt_no_master_include
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_define
DECL|macro|QVERIFY_EVENT
define|#
directive|define
name|QVERIFY_EVENT
parameter_list|(
name|event
parameter_list|)
define|\
value|QVERIFY(QTestAccessibility::verifyEvent(event))
end_define
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qaccessible.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtest_global.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestsystem.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QObject
name|class
name|QObject
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Use pointers since we subclass QAccessibleEvent
end_comment
begin_typedef
DECL|typedef|EventList
typedef|typedef
name|QList
operator|<
name|QAccessibleEvent
operator|*
operator|>
name|EventList
expr_stmt|;
end_typedef
begin_expr_stmt
DECL|function|operator
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QAccessibleEvent
operator|&
name|l
operator|,
specifier|const
name|QAccessibleEvent
operator|&
name|r
operator|)
block|{
if|if
condition|(
name|l
operator|.
name|type
argument_list|()
operator|!=
name|r
operator|.
name|type
argument_list|()
condition|)
block|{
comment|//        qDebug()<< "QAccessibleEvent with wrong type: "<< qAccessibleEventString(l.type())<< " and "<< qAccessibleEventString(r.type());
return|return
name|false
return|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
name|l
operator|.
name|object
argument_list|()
operator|!=
name|r
operator|.
name|object
argument_list|()
operator|||
name|l
operator|.
name|child
argument_list|()
operator|!=
name|r
operator|.
name|child
argument_list|()
condition|)
block|{
comment|//        qDebug()<< "QAccessibleEvent for wrong object: "<< l.object()<< " and "<< r.object()<< " child: "<< l.child()<< " and "<< r.child();
return|return
name|false
return|;
block|}
end_if
begin_if
if|if
condition|(
name|l
operator|.
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|StateChanged
condition|)
block|{
return|return
name|static_cast
operator|<
specifier|const
name|QAccessibleStateChangeEvent
operator|*
operator|>
operator|(
operator|&
name|l
operator|)
operator|->
name|changedStates
argument_list|()
operator|==
name|static_cast
operator|<
specifier|const
name|QAccessibleStateChangeEvent
operator|*
operator|>
operator|(
operator|&
name|r
operator|)
operator|->
name|changedStates
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|l
operator|.
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextCaretMoved
condition|)
block|{
return|return
name|static_cast
operator|<
specifier|const
name|QAccessibleTextCursorEvent
operator|*
operator|>
operator|(
operator|&
name|l
operator|)
operator|->
name|cursorPosition
argument_list|()
operator|==
name|static_cast
operator|<
specifier|const
name|QAccessibleTextCursorEvent
operator|*
operator|>
operator|(
operator|&
name|r
operator|)
operator|->
name|cursorPosition
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|l
operator|.
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextSelectionChanged
condition|)
block|{
specifier|const
name|QAccessibleTextSelectionEvent
modifier|*
name|le
init|=
name|static_cast
operator|<
specifier|const
name|QAccessibleTextSelectionEvent
operator|*
operator|>
operator|(
operator|&
name|l
operator|)
decl_stmt|;
specifier|const
name|QAccessibleTextSelectionEvent
modifier|*
name|re
init|=
name|static_cast
operator|<
specifier|const
name|QAccessibleTextSelectionEvent
operator|*
operator|>
operator|(
operator|&
name|r
operator|)
decl_stmt|;
return|return
name|le
operator|->
name|cursorPosition
argument_list|()
operator|==
name|re
operator|->
name|cursorPosition
argument_list|()
operator|&&
name|le
operator|->
name|selectionStart
argument_list|()
operator|==
name|re
operator|->
name|selectionStart
argument_list|()
operator|&&
name|le
operator|->
name|selectionEnd
argument_list|()
operator|==
name|re
operator|->
name|selectionEnd
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|l
operator|.
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextInserted
condition|)
block|{
specifier|const
name|QAccessibleTextInsertEvent
modifier|*
name|le
init|=
name|static_cast
operator|<
specifier|const
name|QAccessibleTextInsertEvent
operator|*
operator|>
operator|(
operator|&
name|l
operator|)
decl_stmt|;
specifier|const
name|QAccessibleTextInsertEvent
modifier|*
name|re
init|=
name|static_cast
operator|<
specifier|const
name|QAccessibleTextInsertEvent
operator|*
operator|>
operator|(
operator|&
name|r
operator|)
decl_stmt|;
return|return
name|le
operator|->
name|cursorPosition
argument_list|()
operator|==
name|re
operator|->
name|cursorPosition
argument_list|()
operator|&&
name|le
operator|->
name|changePosition
argument_list|()
operator|==
name|re
operator|->
name|changePosition
argument_list|()
operator|&&
name|le
operator|->
name|textInserted
argument_list|()
operator|==
name|re
operator|->
name|textInserted
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|l
operator|.
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextRemoved
condition|)
block|{
specifier|const
name|QAccessibleTextRemoveEvent
modifier|*
name|le
init|=
name|static_cast
operator|<
specifier|const
name|QAccessibleTextRemoveEvent
operator|*
operator|>
operator|(
operator|&
name|l
operator|)
decl_stmt|;
specifier|const
name|QAccessibleTextRemoveEvent
modifier|*
name|re
init|=
name|static_cast
operator|<
specifier|const
name|QAccessibleTextRemoveEvent
operator|*
operator|>
operator|(
operator|&
name|r
operator|)
decl_stmt|;
return|return
name|le
operator|->
name|cursorPosition
argument_list|()
operator|==
name|re
operator|->
name|cursorPosition
argument_list|()
operator|&&
name|le
operator|->
name|changePosition
argument_list|()
operator|==
name|re
operator|->
name|changePosition
argument_list|()
operator|&&
name|le
operator|->
name|textRemoved
argument_list|()
operator|==
name|re
operator|->
name|textRemoved
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|l
operator|.
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextUpdated
condition|)
block|{
specifier|const
name|QAccessibleTextUpdateEvent
modifier|*
name|le
init|=
name|static_cast
operator|<
specifier|const
name|QAccessibleTextUpdateEvent
operator|*
operator|>
operator|(
operator|&
name|l
operator|)
decl_stmt|;
specifier|const
name|QAccessibleTextUpdateEvent
modifier|*
name|re
init|=
name|static_cast
operator|<
specifier|const
name|QAccessibleTextUpdateEvent
operator|*
operator|>
operator|(
operator|&
name|r
operator|)
decl_stmt|;
return|return
name|le
operator|->
name|cursorPosition
argument_list|()
operator|==
name|re
operator|->
name|cursorPosition
argument_list|()
operator|&&
name|le
operator|->
name|changePosition
argument_list|()
operator|==
name|re
operator|->
name|changePosition
argument_list|()
operator|&&
name|le
operator|->
name|textInserted
argument_list|()
operator|==
name|re
operator|->
name|textInserted
argument_list|()
operator|&&
name|le
operator|->
name|textRemoved
argument_list|()
operator|==
name|re
operator|->
name|textRemoved
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|l
operator|.
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|ValueChanged
condition|)
block|{
specifier|const
name|QAccessibleValueChangeEvent
modifier|*
name|le
init|=
name|static_cast
operator|<
specifier|const
name|QAccessibleValueChangeEvent
operator|*
operator|>
operator|(
operator|&
name|l
operator|)
decl_stmt|;
specifier|const
name|QAccessibleValueChangeEvent
modifier|*
name|re
init|=
name|static_cast
operator|<
specifier|const
name|QAccessibleValueChangeEvent
operator|*
operator|>
operator|(
operator|&
name|r
operator|)
decl_stmt|;
return|return
name|le
operator|->
name|value
argument_list|()
operator|==
name|re
operator|->
name|value
argument_list|()
return|;
block|}
end_if
begin_return
return|return
name|true
return|;
end_return
begin_macro
unit|}  class
name|QTestAccessibility
end_macro
begin_block
block|{
name|public
label|:
specifier|static
name|void
name|initialize
parameter_list|()
block|{
if|if
condition|(
operator|!
name|instance
argument_list|()
condition|)
block|{
name|instance
argument_list|()
operator|=
name|new
name|QTestAccessibility
expr_stmt|;
name|qAddPostRoutine
argument_list|(
name|cleanup
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
name|delete
name|instance
parameter_list|()
function_decl|;
name|instance
argument_list|()
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
specifier|static
name|void
name|clearEvents
parameter_list|()
block|{
name|eventList
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|static
name|EventList
name|events
parameter_list|()
block|{
return|return
name|eventList
argument_list|()
return|;
block|}
specifier|static
name|bool
name|verifyEvent
parameter_list|(
name|QAccessibleEvent
modifier|*
name|ev
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|eventList
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Timeout waiting for accessibility event."
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
specifier|const
name|bool
name|res
init|=
operator|*
name|eventList
argument_list|()
operator|.
name|first
argument_list|()
operator|==
operator|*
name|ev
decl_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
name|qWarning
argument_list|(
literal|"%s"
argument_list|,
name|qPrintable
argument_list|(
name|msgAccessibilityEventListMismatch
argument_list|(
name|eventList
argument_list|()
argument_list|,
name|ev
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|delete
name|eventList
argument_list|()
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|static
name|bool
name|containsEvent
parameter_list|(
name|QAccessibleEvent
modifier|*
name|event
parameter_list|)
block|{
for|for
control|(
specifier|const
name|QAccessibleEvent
modifier|*
name|ev
range|:
name|qAsConst
argument_list|(
name|eventList
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|*
name|ev
operator|==
operator|*
name|event
condition|)
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|private
label|:
name|QTestAccessibility
argument_list|()
block|{
name|QAccessible
operator|::
name|installUpdateHandler
argument_list|(
name|updateHandler
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|installRootObjectHandler
argument_list|(
name|rootObjectHandler
argument_list|)
expr_stmt|;
block|}
operator|~
name|QTestAccessibility
argument_list|()
block|{
name|QAccessible
operator|::
name|installUpdateHandler
argument_list|(
name|Q_NULLPTR
argument_list|)
block|;
name|QAccessible
operator|::
name|installRootObjectHandler
argument_list|(
name|Q_NULLPTR
argument_list|)
block|;     }
specifier|static
name|void
name|rootObjectHandler
argument_list|(
argument|QObject *object
argument_list|)
block|{
comment|//    qDebug("rootObjectHandler called %p", object);
if|if
condition|(
name|object
condition|)
block|{
name|QGuiApplication
modifier|*
name|app
init|=
name|qobject_cast
operator|<
name|QGuiApplication
operator|*
operator|>
operator|(
name|object
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|app
condition|)
name|qWarning
argument_list|(
literal|"root Object is not a QGuiApplication!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"root Object called with 0 pointer"
argument_list|)
expr_stmt|;
block|}
block|}
end_block
begin_function
specifier|static
name|void
name|updateHandler
parameter_list|(
name|QAccessibleEvent
modifier|*
name|event
parameter_list|)
block|{
name|eventList
argument_list|()
operator|.
name|append
argument_list|(
name|copyEvent
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|static
name|QAccessibleEvent
modifier|*
name|copyEvent
parameter_list|(
name|QAccessibleEvent
modifier|*
name|event
parameter_list|)
block|{
name|QAccessibleEvent
modifier|*
name|ev
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|StateChanged
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|object
argument_list|()
condition|)
name|ev
operator|=
name|new
name|QAccessibleStateChangeEvent
argument_list|(
name|event
operator|->
name|object
argument_list|()
argument_list|,
name|static_cast
operator|<
name|QAccessibleStateChangeEvent
operator|*
operator|>
operator|(
name|event
operator|)
operator|->
name|changedStates
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ev
operator|=
name|new
name|QAccessibleStateChangeEvent
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|,
name|static_cast
operator|<
name|QAccessibleStateChangeEvent
operator|*
operator|>
operator|(
name|event
operator|)
operator|->
name|changedStates
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextCaretMoved
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|object
argument_list|()
condition|)
name|ev
operator|=
name|new
name|QAccessibleTextCursorEvent
argument_list|(
name|event
operator|->
name|object
argument_list|()
argument_list|,
name|static_cast
operator|<
name|QAccessibleTextCursorEvent
operator|*
operator|>
operator|(
name|event
operator|)
operator|->
name|cursorPosition
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ev
operator|=
name|new
name|QAccessibleTextCursorEvent
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|,
name|static_cast
operator|<
name|QAccessibleTextCursorEvent
operator|*
operator|>
operator|(
name|event
operator|)
operator|->
name|cursorPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextSelectionChanged
condition|)
block|{
specifier|const
name|QAccessibleTextSelectionEvent
modifier|*
name|original
init|=
name|static_cast
operator|<
name|QAccessibleTextSelectionEvent
operator|*
operator|>
operator|(
name|event
operator|)
decl_stmt|;
name|QAccessibleTextSelectionEvent
modifier|*
name|sel
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|object
argument_list|()
condition|)
name|sel
operator|=
name|new
name|QAccessibleTextSelectionEvent
argument_list|(
name|event
operator|->
name|object
argument_list|()
argument_list|,
name|original
operator|->
name|selectionStart
argument_list|()
argument_list|,
name|original
operator|->
name|selectionEnd
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|sel
operator|=
name|new
name|QAccessibleTextSelectionEvent
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|,
name|original
operator|->
name|selectionStart
argument_list|()
argument_list|,
name|original
operator|->
name|selectionEnd
argument_list|()
argument_list|)
expr_stmt|;
name|sel
operator|->
name|setCursorPosition
argument_list|(
name|original
operator|->
name|cursorPosition
argument_list|()
argument_list|)
expr_stmt|;
name|ev
operator|=
name|sel
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextInserted
condition|)
block|{
specifier|const
name|QAccessibleTextInsertEvent
modifier|*
name|original
init|=
name|static_cast
operator|<
name|QAccessibleTextInsertEvent
operator|*
operator|>
operator|(
name|event
operator|)
decl_stmt|;
name|QAccessibleTextInsertEvent
modifier|*
name|ins
decl_stmt|;
if|if
condition|(
name|original
operator|->
name|object
argument_list|()
condition|)
name|ins
operator|=
name|new
name|QAccessibleTextInsertEvent
argument_list|(
name|event
operator|->
name|object
argument_list|()
argument_list|,
name|original
operator|->
name|changePosition
argument_list|()
argument_list|,
name|original
operator|->
name|textInserted
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ins
operator|=
name|new
name|QAccessibleTextInsertEvent
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|,
name|original
operator|->
name|changePosition
argument_list|()
argument_list|,
name|original
operator|->
name|textInserted
argument_list|()
argument_list|)
expr_stmt|;
name|ins
operator|->
name|setCursorPosition
argument_list|(
name|original
operator|->
name|cursorPosition
argument_list|()
argument_list|)
expr_stmt|;
name|ev
operator|=
name|ins
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextRemoved
condition|)
block|{
specifier|const
name|QAccessibleTextRemoveEvent
modifier|*
name|original
init|=
name|static_cast
operator|<
name|QAccessibleTextRemoveEvent
operator|*
operator|>
operator|(
name|event
operator|)
decl_stmt|;
name|QAccessibleTextRemoveEvent
modifier|*
name|rem
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|object
argument_list|()
condition|)
name|rem
operator|=
name|new
name|QAccessibleTextRemoveEvent
argument_list|(
name|event
operator|->
name|object
argument_list|()
argument_list|,
name|original
operator|->
name|changePosition
argument_list|()
argument_list|,
name|original
operator|->
name|textRemoved
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|rem
operator|=
name|new
name|QAccessibleTextRemoveEvent
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|,
name|original
operator|->
name|changePosition
argument_list|()
argument_list|,
name|original
operator|->
name|textRemoved
argument_list|()
argument_list|)
expr_stmt|;
name|rem
operator|->
name|setCursorPosition
argument_list|(
name|original
operator|->
name|cursorPosition
argument_list|()
argument_list|)
expr_stmt|;
name|ev
operator|=
name|rem
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TextUpdated
condition|)
block|{
specifier|const
name|QAccessibleTextUpdateEvent
modifier|*
name|original
init|=
name|static_cast
operator|<
name|QAccessibleTextUpdateEvent
operator|*
operator|>
operator|(
name|event
operator|)
decl_stmt|;
name|QAccessibleTextUpdateEvent
modifier|*
name|upd
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|object
argument_list|()
condition|)
name|upd
operator|=
name|new
name|QAccessibleTextUpdateEvent
argument_list|(
name|event
operator|->
name|object
argument_list|()
argument_list|,
name|original
operator|->
name|changePosition
argument_list|()
argument_list|,
name|original
operator|->
name|textRemoved
argument_list|()
argument_list|,
name|original
operator|->
name|textInserted
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|upd
operator|=
name|new
name|QAccessibleTextUpdateEvent
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|,
name|original
operator|->
name|changePosition
argument_list|()
argument_list|,
name|original
operator|->
name|textRemoved
argument_list|()
argument_list|,
name|original
operator|->
name|textInserted
argument_list|()
argument_list|)
expr_stmt|;
name|upd
operator|->
name|setCursorPosition
argument_list|(
name|original
operator|->
name|cursorPosition
argument_list|()
argument_list|)
expr_stmt|;
name|ev
operator|=
name|upd
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|ValueChanged
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|object
argument_list|()
condition|)
name|ev
operator|=
name|new
name|QAccessibleValueChangeEvent
argument_list|(
name|event
operator|->
name|object
argument_list|()
argument_list|,
name|static_cast
operator|<
name|QAccessibleValueChangeEvent
operator|*
operator|>
operator|(
name|event
operator|)
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ev
operator|=
name|new
name|QAccessibleValueChangeEvent
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|,
name|static_cast
operator|<
name|QAccessibleValueChangeEvent
operator|*
operator|>
operator|(
name|event
operator|)
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QAccessible
operator|::
name|TableModelChanged
condition|)
block|{
name|QAccessibleTableModelChangeEvent
modifier|*
name|oldEvent
init|=
name|static_cast
operator|<
name|QAccessibleTableModelChangeEvent
operator|*
operator|>
operator|(
name|event
operator|)
decl_stmt|;
name|QAccessibleTableModelChangeEvent
modifier|*
name|newEvent
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|object
argument_list|()
condition|)
name|newEvent
operator|=
name|new
name|QAccessibleTableModelChangeEvent
argument_list|(
name|event
operator|->
name|object
argument_list|()
argument_list|,
name|oldEvent
operator|->
name|modelChangeType
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|newEvent
operator|=
name|new
name|QAccessibleTableModelChangeEvent
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|,
name|oldEvent
operator|->
name|modelChangeType
argument_list|()
argument_list|)
expr_stmt|;
name|newEvent
operator|->
name|setFirstRow
argument_list|(
name|oldEvent
operator|->
name|firstRow
argument_list|()
argument_list|)
expr_stmt|;
name|newEvent
operator|->
name|setFirstColumn
argument_list|(
name|oldEvent
operator|->
name|firstColumn
argument_list|()
argument_list|)
expr_stmt|;
name|newEvent
operator|->
name|setLastRow
argument_list|(
name|oldEvent
operator|->
name|lastRow
argument_list|()
argument_list|)
expr_stmt|;
name|newEvent
operator|->
name|setLastColumn
argument_list|(
name|oldEvent
operator|->
name|lastColumn
argument_list|()
argument_list|)
expr_stmt|;
name|ev
operator|=
name|newEvent
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|event
operator|->
name|object
argument_list|()
condition|)
name|ev
operator|=
name|new
name|QAccessibleEvent
argument_list|(
name|event
operator|->
name|object
argument_list|()
argument_list|,
name|event
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ev
operator|=
name|new
name|QAccessibleEvent
argument_list|(
name|event
operator|->
name|accessibleInterface
argument_list|()
argument_list|,
name|event
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ev
operator|->
name|setChild
argument_list|(
name|event
operator|->
name|child
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ev
return|;
block|}
end_function
begin_function
specifier|static
name|EventList
modifier|&
name|eventList
parameter_list|()
block|{
specifier|static
name|EventList
name|list
decl_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
specifier|static
name|QTestAccessibility
modifier|*
modifier|&
name|instance
parameter_list|()
block|{
specifier|static
name|QTestAccessibility
modifier|*
name|ta
init|=
name|Q_NULLPTR
decl_stmt|;
return|return
name|ta
return|;
block|}
end_function
begin_label
name|private
label|:
end_label
begin_function
specifier|static
name|QString
name|msgAccessibilityEventListMismatch
parameter_list|(
specifier|const
name|EventList
modifier|&
name|haystack
parameter_list|,
specifier|const
name|QAccessibleEvent
modifier|*
name|needle
parameter_list|)
block|{
name|QString
name|rc
decl_stmt|;
name|QDebug
name|str
init|=
name|QDebug
argument_list|(
operator|&
name|rc
argument_list|)
operator|.
name|nospace
argument_list|()
decl_stmt|;
name|str
operator|<<
literal|"Event "
operator|<<
operator|*
name|needle
operator|<<
literal|" not found at head of event list of size "
operator|<<
name|haystack
operator|.
name|size
argument_list|()
operator|<<
literal|" :"
expr_stmt|;
for|for
control|(
specifier|const
name|QAccessibleEvent
modifier|*
name|e
range|:
name|haystack
control|)
name|str
operator|<<
literal|' '
operator|<<
operator|*
name|e
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTESTACCESSIBLE_H
end_comment
end_unit
