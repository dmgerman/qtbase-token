begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/private/qtesttable_p.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestdata.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestassert.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmetaobject.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QTestTablePrivate
class|class
name|QTestTablePrivate
block|{
public|public:
DECL|struct|Element
struct|struct
name|Element
block|{
DECL|function|Element
name|Element
parameter_list|()
member_init_list|:
name|name
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|type
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|Element
name|Element
parameter_list|(
specifier|const
name|char
modifier|*
name|n
parameter_list|,
name|int
name|t
parameter_list|)
member_init_list|:
name|name
argument_list|(
name|n
argument_list|)
member_init_list|,
name|type
argument_list|(
name|t
argument_list|)
block|{}
DECL|member|name
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|type
name|int
name|type
decl_stmt|;
block|}
struct|;
DECL|typedef|ElementList
typedef|typedef
name|std
operator|::
name|vector
argument_list|<
name|Element
argument_list|>
name|ElementList
typedef|;
DECL|member|elementList
name|ElementList
name|elementList
decl_stmt|;
DECL|typedef|DataList
typedef|typedef
name|std
operator|::
name|vector
argument_list|<
name|QTestData
modifier|*
argument_list|>
name|DataList
typedef|;
DECL|member|dataList
name|DataList
name|dataList
decl_stmt|;
DECL|function|addColumn
name|void
name|addColumn
parameter_list|(
name|int
name|elemType
parameter_list|,
specifier|const
name|char
modifier|*
name|elemName
parameter_list|)
block|{
name|elementList
operator|.
name|push_back
argument_list|(
name|Element
argument_list|(
name|elemName
argument_list|,
name|elemType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|addRow
name|void
name|addRow
parameter_list|(
name|QTestData
modifier|*
name|data
parameter_list|)
block|{
name|dataList
operator|.
name|push_back
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
DECL|member|currentTestTable
specifier|static
name|QTestTable
modifier|*
name|currentTestTable
decl_stmt|;
DECL|member|gTable
specifier|static
name|QTestTable
modifier|*
name|gTable
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|currentTestTable
name|QTestTable
modifier|*
name|QTestTablePrivate
operator|::
name|currentTestTable
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|gTable
name|QTestTable
modifier|*
name|QTestTablePrivate
operator|::
name|gTable
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|addColumn
name|void
name|QTestTable
operator|::
name|addColumn
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|QTEST_ASSERT
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|QTEST_ASSERT
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|d
operator|->
name|addColumn
argument_list|(
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|elementCount
name|int
name|QTestTable
operator|::
name|elementCount
parameter_list|()
specifier|const
block|{
return|return
name|int
argument_list|(
name|d
operator|->
name|elementList
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|dataCount
name|int
name|QTestTable
operator|::
name|dataCount
parameter_list|()
specifier|const
block|{
return|return
name|int
argument_list|(
name|d
operator|->
name|dataList
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|bool
name|QTestTable
operator|::
name|isEmpty
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|elementList
operator|.
name|empty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|newData
name|QTestData
modifier|*
name|QTestTable
operator|::
name|newData
parameter_list|(
specifier|const
name|char
modifier|*
name|tag
parameter_list|)
block|{
name|QTestData
modifier|*
name|dt
init|=
operator|new
name|QTestData
argument_list|(
name|tag
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|d
operator|->
name|addRow
argument_list|(
name|dt
argument_list|)
expr_stmt|;
return|return
name|dt
return|;
block|}
end_function
begin_constructor
DECL|function|QTestTable
name|QTestTable
operator|::
name|QTestTable
parameter_list|()
block|{
name|d
operator|=
operator|new
name|QTestTablePrivate
expr_stmt|;
name|QTestTablePrivate
operator|::
name|currentTestTable
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QTestTable
name|QTestTable
operator|::
name|~
name|QTestTable
parameter_list|()
block|{
name|QTestTablePrivate
operator|::
name|currentTestTable
operator|=
literal|0
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|elementTypeId
name|int
name|QTestTable
operator|::
name|elementTypeId
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
return|return
name|size_t
argument_list|(
name|index
argument_list|)
operator|<
name|d
operator|->
name|elementList
operator|.
name|size
argument_list|()
condition|?
name|d
operator|->
name|elementList
index|[
name|index
index|]
operator|.
name|type
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|dataTag
specifier|const
name|char
modifier|*
name|QTestTable
operator|::
name|dataTag
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
return|return
name|size_t
argument_list|(
name|index
argument_list|)
operator|<
name|d
operator|->
name|elementList
operator|.
name|size
argument_list|()
condition|?
name|d
operator|->
name|elementList
index|[
name|index
index|]
operator|.
name|name
else|:
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|testData
name|QTestData
modifier|*
name|QTestTable
operator|::
name|testData
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
return|return
name|size_t
argument_list|(
name|index
argument_list|)
operator|<
name|d
operator|->
name|dataList
operator|.
name|size
argument_list|()
condition|?
name|d
operator|->
name|dataList
index|[
name|index
index|]
else|:
name|Q_NULLPTR
return|;
block|}
end_function
begin_class
DECL|class|NamePredicate
class|class
name|NamePredicate
super|:
specifier|public
name|std
operator|::
name|unary_function
argument_list|<
name|QTestTablePrivate
operator|::
name|Element
argument_list|,
name|bool
argument_list|>
block|{
public|public:
DECL|function|NamePredicate
specifier|explicit
name|NamePredicate
parameter_list|(
specifier|const
name|char
modifier|*
name|needle
parameter_list|)
member_init_list|:
name|m_needle
argument_list|(
name|needle
argument_list|)
block|{}
DECL|function|operator ()
name|bool
name|operator
name|()
parameter_list|(
specifier|const
name|QTestTablePrivate
operator|::
name|Element
modifier|&
name|e
parameter_list|)
specifier|const
block|{
return|return
operator|!
name|strcmp
argument_list|(
name|e
operator|.
name|name
argument_list|,
name|m_needle
argument_list|)
return|;
block|}
private|private:
DECL|member|m_needle
specifier|const
name|char
modifier|*
name|m_needle
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|indexOf
name|int
name|QTestTable
operator|::
name|indexOf
parameter_list|(
specifier|const
name|char
modifier|*
name|elementName
parameter_list|)
specifier|const
block|{
typedef|typedef
name|QTestTablePrivate
operator|::
name|ElementList
operator|::
name|const_iterator
name|It
typedef|;
name|QTEST_ASSERT
argument_list|(
name|elementName
argument_list|)
expr_stmt|;
specifier|const
name|QTestTablePrivate
operator|::
name|ElementList
modifier|&
name|elementList
init|=
name|d
operator|->
name|elementList
decl_stmt|;
specifier|const
name|It
name|it
init|=
name|std
operator|::
name|find_if
argument_list|(
name|elementList
operator|.
name|begin
argument_list|()
argument_list|,
name|elementList
operator|.
name|end
argument_list|()
argument_list|,
name|NamePredicate
argument_list|(
name|elementName
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|it
operator|!=
name|elementList
operator|.
name|end
argument_list|()
condition|?
name|int
argument_list|(
name|it
operator|-
name|elementList
operator|.
name|begin
argument_list|()
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|globalTestTable
name|QTestTable
modifier|*
name|QTestTable
operator|::
name|globalTestTable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QTestTablePrivate
operator|::
name|gTable
condition|)
name|QTestTablePrivate
operator|::
name|gTable
operator|=
operator|new
name|QTestTable
argument_list|()
expr_stmt|;
return|return
name|QTestTablePrivate
operator|::
name|gTable
return|;
block|}
end_function
begin_function
DECL|function|clearGlobalTestTable
name|void
name|QTestTable
operator|::
name|clearGlobalTestTable
parameter_list|()
block|{
operator|delete
name|QTestTablePrivate
operator|::
name|gTable
expr_stmt|;
name|QTestTablePrivate
operator|::
name|gTable
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentTestTable
name|QTestTable
modifier|*
name|QTestTable
operator|::
name|currentTestTable
parameter_list|()
block|{
return|return
name|QTestTablePrivate
operator|::
name|currentTestTable
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
