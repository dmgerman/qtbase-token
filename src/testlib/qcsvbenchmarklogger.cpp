begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Intel Corporation ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcsvbenchmarklogger_p.h"
end_include
begin_include
include|#
directive|include
file|"qtestresult_p.h"
end_include
begin_include
include|#
directive|include
file|"qbenchmark_p.h"
end_include
begin_constructor
DECL|function|QCsvBenchmarkLogger
name|QCsvBenchmarkLogger
operator|::
name|QCsvBenchmarkLogger
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
member_init_list|:
name|QAbstractTestLogger
argument_list|(
name|filename
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QCsvBenchmarkLogger
name|QCsvBenchmarkLogger
operator|::
name|~
name|QCsvBenchmarkLogger
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|startLogging
name|void
name|QCsvBenchmarkLogger
operator|::
name|startLogging
parameter_list|()
block|{
comment|// don't print anything
block|}
end_function
begin_function
DECL|function|stopLogging
name|void
name|QCsvBenchmarkLogger
operator|::
name|stopLogging
parameter_list|()
block|{
comment|// don't print anything
block|}
end_function
begin_function
DECL|function|enterTestFunction
name|void
name|QCsvBenchmarkLogger
operator|::
name|enterTestFunction
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
block|{
comment|// don't print anything
block|}
end_function
begin_function
DECL|function|leaveTestFunction
name|void
name|QCsvBenchmarkLogger
operator|::
name|leaveTestFunction
parameter_list|()
block|{
comment|// don't print anything
block|}
end_function
begin_function
DECL|function|addIncident
name|void
name|QCsvBenchmarkLogger
operator|::
name|addIncident
parameter_list|(
name|QAbstractTestLogger
operator|::
name|IncidentTypes
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
block|{
comment|// don't print anything
block|}
end_function
begin_function
DECL|function|addBenchmarkResult
name|void
name|QCsvBenchmarkLogger
operator|::
name|addBenchmarkResult
parameter_list|(
specifier|const
name|QBenchmarkResult
modifier|&
name|result
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|fn
init|=
name|QTestResult
operator|::
name|currentTestFunction
argument_list|()
condition|?
name|QTestResult
operator|::
name|currentTestFunction
argument_list|()
else|:
literal|"UnknownTestFunc"
decl_stmt|;
specifier|const
name|char
modifier|*
name|tag
init|=
name|QTestResult
operator|::
name|currentDataTag
argument_list|()
condition|?
name|QTestResult
operator|::
name|currentDataTag
argument_list|()
else|:
literal|""
decl_stmt|;
specifier|const
name|char
modifier|*
name|gtag
init|=
name|QTestResult
operator|::
name|currentGlobalDataTag
argument_list|()
condition|?
name|QTestResult
operator|::
name|currentGlobalDataTag
argument_list|()
else|:
literal|""
decl_stmt|;
specifier|const
name|char
modifier|*
name|filler
init|=
operator|(
name|tag
index|[
literal|0
index|]
operator|&&
name|gtag
index|[
literal|0
index|]
operator|)
condition|?
literal|":"
else|:
literal|""
decl_stmt|;
specifier|const
name|char
modifier|*
name|metric
init|=
name|QTest
operator|::
name|benchmarkMetricName
argument_list|(
name|result
operator|.
name|metric
argument_list|)
decl_stmt|;
name|char
name|buf
index|[
literal|1024
index|]
decl_stmt|;
comment|// "function","[globaltag:]tag","metric",value_per_iteration,total,iterations
name|qsnprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"\"%s\",\"%s%s%s\",\"%s\",%.13g,%.13g,%u\n"
argument_list|,
name|fn
argument_list|,
name|gtag
argument_list|,
name|filler
argument_list|,
name|tag
argument_list|,
name|metric
argument_list|,
name|result
operator|.
name|value
operator|/
name|result
operator|.
name|iterations
argument_list|,
name|result
operator|.
name|value
argument_list|,
name|result
operator|.
name|iterations
argument_list|)
expr_stmt|;
name|outputString
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addMessage
name|void
name|QCsvBenchmarkLogger
operator|::
name|addMessage
parameter_list|(
name|QAbstractTestLogger
operator|::
name|MessageTypes
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
block|{
comment|// don't print anything
block|}
end_function
end_unit
