begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTESTCOREELEMENT_P_H
end_ifndef
begin_define
DECL|macro|QTESTCOREELEMENT_P_H
define|#
directive|define
name|QTESTCOREELEMENT_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtTest/private/qtestcorelist_p.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/private/qtestelementattribute_p.h>
end_include
begin_expr_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|template
operator|<
name|class
name|ElementType
operator|>
name|class
name|QTestCoreElement
operator|:
name|public
name|QTestCoreList
operator|<
name|ElementType
operator|>
block|{
name|public
operator|:
name|QTestCoreElement
argument_list|(
argument|int type = -
literal|1
argument_list|)
block|;
name|virtual
operator|~
name|QTestCoreElement
argument_list|()
block|;
name|void
name|addAttribute
argument_list|(
argument|const QTest::AttributeIndex index
argument_list|,
argument|const char *value
argument_list|)
block|;
name|QTestElementAttribute
operator|*
name|attributes
argument_list|()
specifier|const
block|;
specifier|const
name|char
operator|*
name|attributeValue
argument_list|(
argument|QTest::AttributeIndex index
argument_list|)
specifier|const
block|;
specifier|const
name|char
operator|*
name|attributeName
argument_list|(
argument|QTest::AttributeIndex index
argument_list|)
specifier|const
block|;
specifier|const
name|QTestElementAttribute
operator|*
name|attribute
argument_list|(
argument|QTest::AttributeIndex index
argument_list|)
specifier|const
block|;
specifier|const
name|char
operator|*
name|elementName
argument_list|()
specifier|const
block|;
name|QTest
operator|::
name|LogElementType
name|elementType
argument_list|()
specifier|const
block|;
name|private
operator|:
name|QTestElementAttribute
operator|*
name|listOfAttributes
block|;
name|QTest
operator|::
name|LogElementType
name|type
block|; }
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|ElementType
operator|>
DECL|function|QTestCoreElement
name|QTestCoreElement
operator|<
name|ElementType
operator|>
operator|::
name|QTestCoreElement
argument_list|(
argument|int t
argument_list|)
operator|:
name|listOfAttributes
argument_list|(
literal|0
argument_list|)
operator|,
name|type
argument_list|(
argument|QTest::LogElementType(t)
argument_list|)
block|{ }
name|template
operator|<
name|class
name|ElementType
operator|>
DECL|function|~QTestCoreElement
name|QTestCoreElement
operator|<
name|ElementType
operator|>
operator|::
operator|~
name|QTestCoreElement
argument_list|()
block|{
name|delete
name|listOfAttributes
block|; }
name|template
operator|<
name|class
name|ElementType
operator|>
DECL|function|addAttribute
name|void
name|QTestCoreElement
operator|<
name|ElementType
operator|>
operator|::
name|addAttribute
argument_list|(
argument|const QTest::AttributeIndex attributeIndex
argument_list|,
argument|const char *value
argument_list|)
block|{
if|if
condition|(
name|attributeIndex
operator|==
operator|-
literal|1
operator|||
name|attribute
argument_list|(
name|attributeIndex
argument_list|)
condition|)
return|return;
name|QTestElementAttribute
operator|*
name|testAttribute
operator|=
name|new
name|QTestElementAttribute
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|testAttribute
operator|->
name|setPair
argument_list|(
name|attributeIndex
argument_list|,
name|value
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|testAttribute
operator|->
name|addToList
argument_list|(
operator|&
name|listOfAttributes
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}  template
operator|<
name|class
name|ElementType
operator|>
DECL|function|attributes
name|QTestElementAttribute
operator|*
name|QTestCoreElement
operator|<
name|ElementType
operator|>
operator|::
name|attributes
argument_list|()
specifier|const
block|{
return|return
name|listOfAttributes
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|ElementType
operator|>
DECL|function|attributeValue
specifier|const
name|char
operator|*
name|QTestCoreElement
operator|<
name|ElementType
operator|>
operator|::
name|attributeValue
argument_list|(
argument|QTest::AttributeIndex index
argument_list|)
specifier|const
block|{
specifier|const
name|QTestElementAttribute
operator|*
name|attrb
operator|=
name|attribute
argument_list|(
name|index
argument_list|)
block|;
if|if
condition|(
name|attrb
condition|)
return|return
name|attrb
operator|->
name|value
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|ElementType
operator|>
DECL|function|attributeName
specifier|const
name|char
operator|*
name|QTestCoreElement
operator|<
name|ElementType
operator|>
operator|::
name|attributeName
argument_list|(
argument|QTest::AttributeIndex index
argument_list|)
specifier|const
block|{
specifier|const
name|QTestElementAttribute
operator|*
name|attrb
operator|=
name|attribute
argument_list|(
name|index
argument_list|)
block|;
if|if
condition|(
name|attrb
condition|)
return|return
name|attrb
operator|->
name|name
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|ElementType
operator|>
DECL|function|elementName
specifier|const
name|char
operator|*
name|QTestCoreElement
operator|<
name|ElementType
operator|>
operator|::
name|elementName
argument_list|()
specifier|const
block|{
specifier|const
name|char
operator|*
name|xmlElementNames
index|[]
operator|=
block|{
literal|"property"
block|,
literal|"properties"
block|,
literal|"failure"
block|,
literal|"error"
block|,
literal|"testcase"
block|,
literal|"testsuite"
block|,
literal|"benchmark"
block|,
literal|"system-err"
block|}
block|;
if|if
condition|(
name|type
operator|!=
name|QTest
operator|::
name|LET_Undefined
condition|)
return|return
name|xmlElementNames
index|[
name|type
index|]
return|;
end_expr_stmt
begin_return
return|return
literal|0
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|class
name|ElementType
operator|>
DECL|function|elementType
name|QTest
operator|::
name|LogElementType
name|QTestCoreElement
operator|<
name|ElementType
operator|>
operator|::
name|elementType
argument_list|()
specifier|const
block|{
return|return
name|type
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|ElementType
operator|>
DECL|function|attribute
specifier|const
name|QTestElementAttribute
operator|*
name|QTestCoreElement
operator|<
name|ElementType
operator|>
operator|::
name|attribute
argument_list|(
argument|QTest::AttributeIndex index
argument_list|)
specifier|const
block|{
name|QTestElementAttribute
operator|*
name|iterator
operator|=
name|listOfAttributes
block|;
while|while
condition|(
name|iterator
condition|)
block|{
if|if
condition|(
name|iterator
operator|->
name|index
argument_list|()
operator|==
name|index
condition|)
return|return
name|iterator
return|;
name|iterator
operator|=
name|iterator
operator|->
name|nextElement
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_return
return|return
literal|0
return|;
end_return
begin_macro
unit|}  QT_END_NAMESPACE
name|QT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
