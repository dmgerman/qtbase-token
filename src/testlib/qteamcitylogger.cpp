begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 Borgar Ovsthus ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/private/qtestresult_p.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestassert.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/private/qtestlog_p.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/private/qteamcitylogger_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<stdarg.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QTest
namespace|namespace
name|QTest
block|{
DECL|function|incidentType2String
specifier|static
specifier|const
name|char
modifier|*
name|incidentType2String
parameter_list|(
name|QAbstractTestLogger
operator|::
name|IncidentTypes
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QAbstractTestLogger
operator|::
name|Pass
case|:
return|return
literal|"PASS"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|XFail
case|:
return|return
literal|"XFAIL"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|Fail
case|:
return|return
literal|"FAIL!"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|XPass
case|:
return|return
literal|"XPASS"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|BlacklistedPass
case|:
return|return
literal|"BPASS"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|BlacklistedFail
case|:
return|return
literal|"BFAIL"
return|;
block|}
return|return
literal|"??????"
return|;
block|}
DECL|function|messageType2String
specifier|static
specifier|const
name|char
modifier|*
name|messageType2String
parameter_list|(
name|QAbstractTestLogger
operator|::
name|MessageTypes
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QAbstractTestLogger
operator|::
name|Skip
case|:
return|return
literal|"SKIP"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|Warn
case|:
return|return
literal|"WARNING"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|QWarning
case|:
return|return
literal|"QWARN"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|QDebug
case|:
return|return
literal|"QDEBUG"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|QInfo
case|:
return|return
literal|"QINFO"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|QSystem
case|:
return|return
literal|"QSYSTEM"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|QFatal
case|:
return|return
literal|"QFATAL"
return|;
case|case
name|QAbstractTestLogger
operator|::
name|Info
case|:
return|return
literal|"INFO"
return|;
block|}
return|return
literal|"??????"
return|;
block|}
block|}
end_namespace
begin_constructor
DECL|function|QTeamCityLogger
name|QTeamCityLogger
operator|::
name|QTeamCityLogger
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
member_init_list|:
name|QAbstractTestLogger
argument_list|(
name|filename
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QTeamCityLogger
name|QTeamCityLogger
operator|::
name|~
name|QTeamCityLogger
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|startLogging
name|void
name|QTeamCityLogger
operator|::
name|startLogging
parameter_list|()
block|{
name|QAbstractTestLogger
operator|::
name|startLogging
argument_list|()
expr_stmt|;
name|QString
name|testSuiteName
init|=
name|tcEscapedString
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|QTestResult
operator|::
name|currentTestObjectName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|str
init|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"##teamcity[testSuiteStarted name='%1']\n"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|testSuiteName
argument_list|)
decl_stmt|;
name|outputString
argument_list|(
name|qPrintable
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stopLogging
name|void
name|QTeamCityLogger
operator|::
name|stopLogging
parameter_list|()
block|{
name|QString
name|testSuiteName
init|=
name|tcEscapedString
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|QTestResult
operator|::
name|currentTestObjectName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|str
init|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"##teamcity[testSuiteFinished name='%1']\n"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|testSuiteName
argument_list|)
decl_stmt|;
name|outputString
argument_list|(
name|qPrintable
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
name|QAbstractTestLogger
operator|::
name|stopLogging
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|enterTestFunction
name|void
name|QTeamCityLogger
operator|::
name|enterTestFunction
parameter_list|(
specifier|const
name|char
modifier|*
comment|/*function*/
parameter_list|)
block|{
comment|// don't print anything
block|}
end_function
begin_function
DECL|function|leaveTestFunction
name|void
name|QTeamCityLogger
operator|::
name|leaveTestFunction
parameter_list|()
block|{
comment|// don't print anything
block|}
end_function
begin_function
DECL|function|addIncident
name|void
name|QTeamCityLogger
operator|::
name|addIncident
parameter_list|(
name|IncidentTypes
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|description
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
comment|// suppress PASS and XFAIL in silent mode
if|if
condition|(
operator|(
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|Pass
operator|||
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|XFail
operator|)
operator|&&
name|QTestLog
operator|::
name|verboseLevel
argument_list|()
operator|<
literal|0
condition|)
return|return;
name|QString
name|buf
decl_stmt|;
name|QString
name|tmpFuncName
init|=
name|escapedTestFuncName
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpFuncName
operator|!=
name|currTestFuncName
condition|)
block|{
name|buf
operator|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"##teamcity[testStarted name='%1']\n"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|tmpFuncName
argument_list|)
expr_stmt|;
name|outputString
argument_list|(
name|qPrintable
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currTestFuncName
operator|=
name|tmpFuncName
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|XFail
condition|)
block|{
name|addPendingMessage
argument_list|(
name|QTest
operator|::
name|incidentType2String
argument_list|(
name|type
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
name|description
argument_list|)
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
expr_stmt|;
return|return;
block|}
name|QString
name|detailedText
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|description
argument_list|)
decl_stmt|;
name|detailedText
operator|=
name|tcEscapedString
argument_list|(
name|detailedText
argument_list|)
expr_stmt|;
comment|// Test failed
if|if
condition|(
operator|(
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|Fail
operator|)
operator|||
operator|(
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|XPass
operator|)
condition|)
block|{
name|QString
name|messageText
argument_list|(
name|QLatin1String
argument_list|(
literal|"Failure!"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
condition|)
name|messageText
operator|+=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|" |[Loc: %1(%2)|]"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"##teamcity[testFailed name='%1' message='%2' details='%3']\n"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|tmpFuncName
argument_list|)
operator|.
name|arg
argument_list|(
name|messageText
argument_list|)
operator|.
name|arg
argument_list|(
name|detailedText
argument_list|)
expr_stmt|;
name|outputString
argument_list|(
name|qPrintable
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pendingMessages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buf
operator|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"##teamcity[testStdOut name='%1' out='%2']\n"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|tmpFuncName
argument_list|)
operator|.
name|arg
argument_list|(
name|pendingMessages
argument_list|)
expr_stmt|;
name|outputString
argument_list|(
name|qPrintable
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|pendingMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|buf
operator|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"##teamcity[testFinished name='%1']\n"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|tmpFuncName
argument_list|)
expr_stmt|;
name|outputString
argument_list|(
name|qPrintable
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addBenchmarkResult
name|void
name|QTeamCityLogger
operator|::
name|addBenchmarkResult
parameter_list|(
specifier|const
name|QBenchmarkResult
modifier|&
parameter_list|)
block|{
comment|// don't print anything
block|}
end_function
begin_function
DECL|function|addMessage
name|void
name|QTeamCityLogger
operator|::
name|addMessage
parameter_list|(
name|MessageTypes
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|message
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
comment|// suppress non-fatal messages in silent mode
if|if
condition|(
name|type
operator|!=
name|QAbstractTestLogger
operator|::
name|QFatal
operator|&&
name|QTestLog
operator|::
name|verboseLevel
argument_list|()
operator|<
literal|0
condition|)
return|return;
name|QString
name|escapedMessage
init|=
name|tcEscapedString
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|QString
name|buf
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QAbstractTestLogger
operator|::
name|Skip
condition|)
block|{
if|if
condition|(
name|file
condition|)
name|escapedMessage
operator|.
name|append
argument_list|(
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|" |[Loc: %1(%2)|]"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"##teamcity[testIgnored name='%1' message='%2']\n"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|escapedTestFuncName
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|escapedMessage
argument_list|)
expr_stmt|;
name|outputString
argument_list|(
name|qPrintable
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addPendingMessage
argument_list|(
name|QTest
operator|::
name|messageType2String
argument_list|(
name|type
argument_list|)
argument_list|,
name|escapedMessage
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|tcEscapedString
name|QString
name|QTeamCityLogger
operator|::
name|tcEscapedString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
specifier|const
block|{
name|QString
name|formattedString
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QChar
name|ch
init|=
name|str
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ch
operator|.
name|toLatin1
argument_list|()
condition|)
block|{
case|case
literal|'\n'
case|:
name|formattedString
operator|.
name|append
argument_list|(
name|QLatin1Literal
argument_list|(
literal|"|n"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|formattedString
operator|.
name|append
argument_list|(
name|QLatin1Literal
argument_list|(
literal|"|r"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'|'
case|:
name|formattedString
operator|.
name|append
argument_list|(
name|QLatin1Literal
argument_list|(
literal|"||"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'['
case|:
name|formattedString
operator|.
name|append
argument_list|(
name|QLatin1Literal
argument_list|(
literal|"|["
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|']'
case|:
name|formattedString
operator|.
name|append
argument_list|(
name|QLatin1Literal
argument_list|(
literal|"|]"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\''
case|:
name|formattedString
operator|.
name|append
argument_list|(
name|QLatin1Literal
argument_list|(
literal|"|'"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|formattedString
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|qMove
argument_list|(
name|formattedString
argument_list|)
operator|.
name|simplified
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|escapedTestFuncName
name|QString
name|QTeamCityLogger
operator|::
name|escapedTestFuncName
parameter_list|()
specifier|const
block|{
specifier|const
name|char
modifier|*
name|fn
init|=
name|QTestResult
operator|::
name|currentTestFunction
argument_list|()
condition|?
name|QTestResult
operator|::
name|currentTestFunction
argument_list|()
else|:
literal|"UnknownTestFunc"
decl_stmt|;
specifier|const
name|char
modifier|*
name|tag
init|=
name|QTestResult
operator|::
name|currentDataTag
argument_list|()
condition|?
name|QTestResult
operator|::
name|currentDataTag
argument_list|()
else|:
literal|""
decl_stmt|;
name|QString
name|str
init|=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"%1(%2)"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|fn
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|tag
argument_list|)
argument_list|)
decl_stmt|;
name|str
operator|=
name|tcEscapedString
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|addPendingMessage
name|void
name|QTeamCityLogger
operator|::
name|addPendingMessage
parameter_list|(
specifier|const
name|char
modifier|*
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|QString
name|pendMessage
decl_stmt|;
if|if
condition|(
operator|!
name|pendingMessages
operator|.
name|isEmpty
argument_list|()
condition|)
name|pendMessage
operator|+=
name|QLatin1String
argument_list|(
literal|"|n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
condition|)
block|{
name|pendMessage
operator|+=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"%1 |[Loc: %2(%3)|]: %4"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|line
argument_list|)
operator|.
name|arg
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pendMessage
operator|+=
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"%1: %2"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|pendingMessages
operator|.
name|append
argument_list|(
name|pendMessage
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
