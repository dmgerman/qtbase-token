begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtestfilelogger.h"
end_include
begin_include
include|#
directive|include
file|"qtestassert.h"
end_include
begin_include
include|#
directive|include
file|"QtTest/private/qtestlog_p.h"
end_include
begin_include
include|#
directive|include
file|"QtTest/private/qtestresult_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qdir.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QTest
namespace|namespace
name|QTest
block|{
DECL|member|stream
specifier|static
name|FILE
modifier|*
name|stream
init|=
literal|0
decl_stmt|;
block|}
end_namespace
begin_constructor
DECL|function|QTestFileLogger
name|QTestFileLogger
operator|::
name|QTestFileLogger
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~QTestFileLogger
name|QTestFileLogger
operator|::
name|~
name|QTestFileLogger
parameter_list|()
block|{
if|if
condition|(
name|QTest
operator|::
name|stream
condition|)
name|fclose
argument_list|(
name|QTest
operator|::
name|stream
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|stream
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|void
name|QTestFileLogger
operator|::
name|init
parameter_list|()
block|{
name|char
name|filename
index|[
literal|100
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
name|QByteArray
name|ba
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QString
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
decl_stmt|;
name|index
operator|=
name|ba
operator|.
name|length
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qt_snprintf
argument_list|(
name|filename
argument_list|,
sizeof|sizeof
argument_list|(
name|filename
argument_list|)
argument_list|,
literal|"%s%s.log"
argument_list|,
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|QTestResult
operator|::
name|currentTestObjectName
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|qt_snprintf
argument_list|(
name|filename
argument_list|,
sizeof|sizeof
argument_list|(
name|filename
argument_list|)
argument_list|,
literal|"%s.log"
argument_list|,
name|QTestResult
operator|::
name|currentTestObjectName
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Keep filenames simple
for|for
control|(
name|uint
name|i
init|=
name|index
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|filename
argument_list|)
operator|&&
name|filename
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
block|{
name|char
modifier|&
name|c
init|=
name|filename
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'z'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
operator|)
operator|||
name|c
operator|==
literal|'-'
operator|||
name|c
operator|==
literal|'.'
operator|)
condition|)
block|{
name|c
operator|=
literal|'_'
expr_stmt|;
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
operator|::
name|fopen_s
argument_list|(
operator|&
name|QTest
operator|::
name|stream
argument_list|,
name|filename
argument_list|,
literal|"wt"
argument_list|)
condition|)
block|{
else|#
directive|else
name|QTest
operator|::
name|stream
operator|=
operator|::
name|fopen
argument_list|(
name|filename
argument_list|,
literal|"wt"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QTest
operator|::
name|stream
condition|)
block|{
endif|#
directive|endif
name|printf
argument_list|(
literal|"Unable to open file for simple logging: %s"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
operator|::
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|flush
name|void
name|QTestFileLogger
operator|::
name|flush
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
block|{
name|QTEST_ASSERT
argument_list|(
name|QTest
operator|::
name|stream
argument_list|)
expr_stmt|;
operator|::
name|fputs
argument_list|(
name|msg
argument_list|,
name|QTest
operator|::
name|stream
argument_list|)
expr_stmt|;
operator|::
name|fflush
argument_list|(
name|QTest
operator|::
name|stream
argument_list|)
expr_stmt|;
block|}
name|QT_END_NAMESPACE
end_function
end_unit
