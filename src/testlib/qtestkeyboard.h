begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QTESTKEYBOARD_H
argument_list|)
end_if
begin_define
DECL|macro|QTESTKEYBOARD_H
define|#
directive|define
name|QTESTKEYBOARD_H
end_define
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// inform syncqt
end_comment
begin_pragma
pragma|#
directive|pragma
name|qt_no_master_include
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtTest/qtestassert.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtest_global.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestsystem.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestspontaneevent.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpointer.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qevent.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwindowsysteminterface_qpa.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|function|QT_MODULE
name|QT_MODULE
parameter_list|(
name|Test
parameter_list|)
name|namespace
name|QTest
decl_stmt|{     enum KeyAction
block|{
name|Press
operator|,
name|Release
operator|,
name|Click
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
specifier|static
name|void
name|simulateEvent
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
name|bool
name|press
argument_list|,
name|int
name|code
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
argument_list|,
name|QString
name|text
argument_list|,
name|bool
name|repeat
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|QTEST_ASSERT
argument_list|(
name|widget
argument_list|)
expr_stmt|;
specifier|extern
name|int
name|Q_TESTLIB_EXPORT
name|defaultKeyDelay
parameter_list|()
function_decl|;
if|if
condition|(
name|delay
operator|==
operator|-
literal|1
operator|||
name|delay
operator|<
name|defaultKeyDelay
argument_list|()
condition|)
name|delay
operator|=
name|defaultKeyDelay
argument_list|()
expr_stmt|;
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|QKeyEvent
name|a
argument_list|(
name|press
condition|?
name|QEvent
operator|::
name|KeyPress
else|:
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|code
argument_list|,
name|modifier
argument_list|,
name|text
argument_list|,
name|repeat
argument_list|)
decl_stmt|;
name|QSpontaneKeyEvent
operator|::
name|setSpontaneous
argument_list|(
operator|&
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qApp
operator|->
name|notify
argument_list|(
name|widget
argument_list|,
operator|&
name|a
argument_list|)
condition|)
name|QTest
operator|::
name|qWarn
argument_list|(
literal|"Keyboard event not accepted by receiving widget"
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_comment
comment|//QWindow overload
end_comment
begin_decl_stmt
specifier|static
name|void
name|simulateEvent
argument_list|(
name|QWindow
operator|*
name|window
argument_list|,
name|bool
name|press
argument_list|,
name|int
name|code
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
argument_list|,
name|QString
name|text
argument_list|,
name|bool
name|repeat
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|QEvent
operator|::
name|Type
name|type
expr_stmt|;
name|type
operator|=
name|press
condition|?
name|QEvent
operator|::
name|KeyPress
else|:
name|QEvent
operator|::
name|KeyRelease
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|window
argument_list|,
name|type
argument_list|,
name|code
argument_list|,
name|modifier
argument_list|,
name|text
argument_list|,
name|repeat
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|static
name|void
name|sendKeyEvent
argument_list|(
name|KeyAction
name|action
argument_list|,
name|QWidget
operator|*
name|widget
argument_list|,
name|Qt
operator|::
name|Key
name|code
argument_list|,
name|QString
name|text
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|QTEST_ASSERT
argument_list|(
name|qApp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
name|widget
operator|=
name|QWidget
operator|::
name|keyboardGrabber
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|apw
init|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
condition|)
name|widget
operator|=
name|apw
operator|->
name|focusWidget
argument_list|()
condition|?
name|apw
operator|->
name|focusWidget
argument_list|()
else|:
name|apw
expr_stmt|;
else|else
name|widget
operator|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|widget
condition|)
name|widget
operator|=
name|QApplication
operator|::
name|activeWindow
argument_list|()
expr_stmt|;
name|QTEST_ASSERT
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|==
name|Click
condition|)
block|{
name|QPointer
operator|<
name|QWidget
operator|>
name|ptr
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|sendKeyEvent
argument_list|(
name|Press
argument_list|,
name|widget
argument_list|,
name|code
argument_list|,
name|text
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ptr
condition|)
block|{
comment|// if we send key-events to embedded widgets, they might be destroyed
comment|// when the user presses Return
return|return;
block|}
name|sendKeyEvent
argument_list|(
name|Release
argument_list|,
name|widget
argument_list|,
name|code
argument_list|,
name|text
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return;
block|}
name|bool
name|repeat
init|=
name|false
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|Press
condition|)
block|{
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|simulateEvent
argument_list|(
name|widget
argument_list|,
name|true
argument_list|,
name|Qt
operator|::
name|Key_Shift
argument_list|,
literal|0
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
name|simulateEvent
argument_list|(
name|widget
argument_list|,
name|true
argument_list|,
name|Qt
operator|::
name|Key_Control
argument_list|,
name|modifier
operator|&
name|Qt
operator|::
name|ShiftModifier
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|AltModifier
condition|)
name|simulateEvent
argument_list|(
name|widget
argument_list|,
name|true
argument_list|,
name|Qt
operator|::
name|Key_Alt
argument_list|,
name|modifier
operator|&
operator|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|MetaModifier
condition|)
name|simulateEvent
argument_list|(
name|widget
argument_list|,
name|true
argument_list|,
name|Qt
operator|::
name|Key_Meta
argument_list|,
name|modifier
operator|&
operator|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|AltModifier
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|simulateEvent
argument_list|(
name|widget
argument_list|,
name|true
argument_list|,
name|code
argument_list|,
name|modifier
argument_list|,
name|text
argument_list|,
name|repeat
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|Release
condition|)
block|{
name|simulateEvent
argument_list|(
name|widget
argument_list|,
name|false
argument_list|,
name|code
argument_list|,
name|modifier
argument_list|,
name|text
argument_list|,
name|repeat
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|MetaModifier
condition|)
name|simulateEvent
argument_list|(
name|widget
argument_list|,
name|false
argument_list|,
name|Qt
operator|::
name|Key_Meta
argument_list|,
name|modifier
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|AltModifier
condition|)
name|simulateEvent
argument_list|(
name|widget
argument_list|,
name|false
argument_list|,
name|Qt
operator|::
name|Key_Alt
argument_list|,
name|modifier
operator|&
operator|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|AltModifier
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
name|simulateEvent
argument_list|(
name|widget
argument_list|,
name|false
argument_list|,
name|Qt
operator|::
name|Key_Control
argument_list|,
name|modifier
operator|&
operator|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|simulateEvent
argument_list|(
name|widget
argument_list|,
name|false
argument_list|,
name|Qt
operator|::
name|Key_Shift
argument_list|,
name|modifier
operator|&
name|Qt
operator|::
name|ShiftModifier
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt
begin_comment
comment|//QWindow overload
end_comment
begin_decl_stmt
specifier|static
name|void
name|sendKeyEvent
argument_list|(
name|KeyAction
name|action
argument_list|,
name|QWindow
operator|*
name|window
argument_list|,
name|Qt
operator|::
name|Key
name|code
argument_list|,
name|QString
name|text
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|QTEST_ASSERT
argument_list|(
name|qApp
argument_list|)
expr_stmt|;
name|QTEST_ASSERT
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QTEST_ASSERT
argument_list|(
name|window
operator|->
name|windowState
argument_list|()
operator|==
name|Qt
operator|::
name|WindowActive
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|==
name|Click
condition|)
block|{
name|sendKeyEvent
argument_list|(
name|Press
argument_list|,
name|window
argument_list|,
name|code
argument_list|,
name|text
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|sendKeyEvent
argument_list|(
name|Release
argument_list|,
name|window
argument_list|,
name|code
argument_list|,
name|text
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return;
block|}
name|bool
name|repeat
init|=
name|false
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|Press
condition|)
block|{
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|simulateEvent
argument_list|(
name|window
argument_list|,
name|true
argument_list|,
name|Qt
operator|::
name|Key_Shift
argument_list|,
literal|0
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
name|simulateEvent
argument_list|(
name|window
argument_list|,
name|true
argument_list|,
name|Qt
operator|::
name|Key_Control
argument_list|,
name|modifier
operator|&
name|Qt
operator|::
name|ShiftModifier
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|AltModifier
condition|)
name|simulateEvent
argument_list|(
name|window
argument_list|,
name|true
argument_list|,
name|Qt
operator|::
name|Key_Alt
argument_list|,
name|modifier
operator|&
operator|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|MetaModifier
condition|)
name|simulateEvent
argument_list|(
name|window
argument_list|,
name|true
argument_list|,
name|Qt
operator|::
name|Key_Meta
argument_list|,
name|modifier
operator|&
operator|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|AltModifier
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|simulateEvent
argument_list|(
name|window
argument_list|,
name|true
argument_list|,
name|code
argument_list|,
name|modifier
argument_list|,
name|text
argument_list|,
name|repeat
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|Release
condition|)
block|{
name|simulateEvent
argument_list|(
name|window
argument_list|,
name|false
argument_list|,
name|code
argument_list|,
name|modifier
argument_list|,
name|text
argument_list|,
name|repeat
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|MetaModifier
condition|)
name|simulateEvent
argument_list|(
name|window
argument_list|,
name|false
argument_list|,
name|Qt
operator|::
name|Key_Meta
argument_list|,
name|modifier
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|AltModifier
condition|)
name|simulateEvent
argument_list|(
name|window
argument_list|,
name|false
argument_list|,
name|Qt
operator|::
name|Key_Alt
argument_list|,
name|modifier
operator|&
operator|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|AltModifier
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
name|simulateEvent
argument_list|(
name|window
argument_list|,
name|false
argument_list|,
name|Qt
operator|::
name|Key_Control
argument_list|,
name|modifier
operator|&
operator|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifier
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|simulateEvent
argument_list|(
name|window
argument_list|,
name|false
argument_list|,
name|Qt
operator|::
name|Key_Shift
argument_list|,
name|modifier
operator|&
name|Qt
operator|::
name|ShiftModifier
argument_list|,
name|QString
argument_list|()
argument_list|,
name|false
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt
begin_comment
comment|// Convenience function
end_comment
begin_decl_stmt
specifier|static
name|void
name|sendKeyEvent
argument_list|(
name|KeyAction
name|action
argument_list|,
name|QWidget
operator|*
name|widget
argument_list|,
name|Qt
operator|::
name|Key
name|code
argument_list|,
name|char
name|ascii
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|QString
name|text
decl_stmt|;
if|if
condition|(
name|ascii
condition|)
name|text
operator|=
name|QString
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
name|ascii
argument_list|)
argument_list|)
expr_stmt|;
name|sendKeyEvent
argument_list|(
name|action
argument_list|,
name|widget
argument_list|,
name|code
argument_list|,
name|text
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// QWindow convenience function
end_comment
begin_decl_stmt
specifier|static
name|void
name|sendKeyEvent
argument_list|(
name|KeyAction
name|action
argument_list|,
name|QWindow
operator|*
name|window
argument_list|,
name|Qt
operator|::
name|Key
name|code
argument_list|,
name|char
name|ascii
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|QString
name|text
decl_stmt|;
if|if
condition|(
name|ascii
condition|)
name|text
operator|=
name|QString
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
name|ascii
argument_list|)
argument_list|)
expr_stmt|;
name|sendKeyEvent
argument_list|(
name|action
argument_list|,
name|window
argument_list|,
name|code
argument_list|,
name|text
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyEvent
argument_list|(
name|KeyAction
name|action
argument_list|,
name|QWidget
operator|*
name|widget
argument_list|,
name|char
name|ascii
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|sendKeyEvent
argument_list|(
name|action
argument_list|,
name|widget
argument_list|,
name|asciiToKey
argument_list|(
name|ascii
argument_list|)
argument_list|,
name|ascii
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyEvent
argument_list|(
name|KeyAction
name|action
argument_list|,
name|QWidget
operator|*
name|widget
argument_list|,
name|Qt
operator|::
name|Key
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|sendKeyEvent
argument_list|(
name|action
argument_list|,
name|widget
argument_list|,
name|key
argument_list|,
name|keyToAscii
argument_list|(
name|key
argument_list|)
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_comment
comment|//Support QWindow
end_comment
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyEvent
argument_list|(
name|KeyAction
name|action
argument_list|,
name|QWindow
operator|*
name|window
argument_list|,
name|char
name|ascii
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|sendKeyEvent
argument_list|(
name|action
argument_list|,
name|window
argument_list|,
name|asciiToKey
argument_list|(
name|ascii
argument_list|)
argument_list|,
name|ascii
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyEvent
argument_list|(
name|KeyAction
name|action
argument_list|,
name|QWindow
operator|*
name|window
argument_list|,
name|Qt
operator|::
name|Key
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|sendKeyEvent
argument_list|(
name|action
argument_list|,
name|window
argument_list|,
name|key
argument_list|,
name|keyToAscii
argument_list|(
name|key
argument_list|)
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_comment
comment|///////////////
end_comment
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyClicks
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
specifier|const
name|QString
operator|&
name|sequence
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sequence
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
name|keyEvent
argument_list|(
name|Click
argument_list|,
name|widget
argument_list|,
name|sequence
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyPress
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
name|char
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|keyEvent
argument_list|(
name|Press
argument_list|,
name|widget
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyRelease
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
name|char
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|keyEvent
argument_list|(
name|Release
argument_list|,
name|widget
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyClick
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
name|char
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|keyEvent
argument_list|(
name|Click
argument_list|,
name|widget
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyPress
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
name|Qt
operator|::
name|Key
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|keyEvent
argument_list|(
name|Press
argument_list|,
name|widget
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyRelease
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
name|Qt
operator|::
name|Key
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|keyEvent
argument_list|(
name|Release
argument_list|,
name|widget
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyClick
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|,
name|Qt
operator|::
name|Key
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|keyEvent
argument_list|(
name|Click
argument_list|,
name|widget
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_comment
comment|//Support QWindow
end_comment
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyClick
argument_list|(
name|QWindow
operator|*
name|window
argument_list|,
name|Qt
operator|::
name|Key
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|keyEvent
argument_list|(
name|Click
argument_list|,
name|window
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyClick
argument_list|(
name|QWindow
operator|*
name|window
argument_list|,
name|char
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|keyEvent
argument_list|(
name|Click
argument_list|,
name|window
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyRelease
argument_list|(
name|QWindow
operator|*
name|window
argument_list|,
name|char
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|keyEvent
argument_list|(
name|Release
argument_list|,
name|window
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyPress
argument_list|(
name|QWindow
operator|*
name|window
argument_list|,
name|char
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|keyEvent
argument_list|(
name|Press
argument_list|,
name|window
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
specifier|inline
specifier|static
name|void
name|keyPress
argument_list|(
name|QWindow
operator|*
name|window
argument_list|,
name|Qt
operator|::
name|Key
name|key
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
operator|=
name|Qt
operator|::
name|NoModifier
argument_list|,
name|int
name|delay
operator|=
operator|-
literal|1
argument_list|)
block|{
name|keyEvent
argument_list|(
name|Press
argument_list|,
name|window
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_macro
unit|}  QT_END_NAMESPACE
name|QT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTESTKEYBOARD_H
end_comment
end_unit
