begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/private/qabstracttestlogger_p.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/qtestassert.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<stdarg.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WIN
end_ifndef
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|QAbstractTestLogger
name|QAbstractTestLogger
operator|::
name|QAbstractTestLogger
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
block|{
if|if
condition|(
operator|!
name|filename
condition|)
block|{
name|stream
operator|=
name|stdout
expr_stmt|;
return|return;
block|}
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
operator|::
name|fopen_s
argument_list|(
operator|&
name|stream
argument_list|,
name|filename
argument_list|,
literal|"wt"
argument_list|)
condition|)
block|{
else|#
directive|else
name|stream
operator|=
operator|::
name|fopen
argument_list|(
name|filename
argument_list|,
literal|"wt"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stream
condition|)
block|{
endif|#
directive|endif
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Unable to open file for logging: %s"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
operator|::
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|~QAbstractTestLogger
name|QAbstractTestLogger
operator|::
name|~
name|QAbstractTestLogger
parameter_list|()
block|{
name|QTEST_ASSERT
argument_list|(
name|stream
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream
operator|!=
name|stdout
condition|)
block|{
name|fclose
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|stream
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|filterUnprintable
name|void
name|QAbstractTestLogger
operator|::
name|filterUnprintable
parameter_list|(
name|char
modifier|*
name|str
parameter_list|)
specifier|const
block|{
name|char
modifier|*
name|idx
init|=
name|str
decl_stmt|;
while|while
condition|(
operator|*
name|idx
condition|)
block|{
if|if
condition|(
operator|(
operator|(
operator|*
name|idx
operator|<
literal|0x20
operator|&&
operator|*
name|idx
operator|!=
literal|'\n'
operator|&&
operator|*
name|idx
operator|!=
literal|'\t'
operator|)
operator|||
operator|*
name|idx
operator|>
literal|0x7e
operator|)
condition|)
operator|*
name|idx
operator|=
literal|'?'
expr_stmt|;
operator|++
name|idx
expr_stmt|;
block|}
block|}
DECL|function|outputString
name|void
name|QAbstractTestLogger
operator|::
name|outputString
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
block|{
name|QTEST_ASSERT
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|char
modifier|*
name|filtered
init|=
operator|new
name|char
index|[
name|strlen
argument_list|(
name|msg
argument_list|)
operator|+
literal|1
index|]
decl_stmt|;
name|strcpy
argument_list|(
name|filtered
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|filterUnprintable
argument_list|(
name|filtered
argument_list|)
expr_stmt|;
operator|::
name|fputs
argument_list|(
name|filtered
argument_list|,
name|stream
argument_list|)
expr_stmt|;
operator|::
name|fflush
argument_list|(
name|stream
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|filtered
expr_stmt|;
block|}
DECL|function|startLogging
name|void
name|QAbstractTestLogger
operator|::
name|startLogging
parameter_list|()
block|{ }
DECL|function|stopLogging
name|void
name|QAbstractTestLogger
operator|::
name|stopLogging
parameter_list|()
block|{ }
DECL|namespace|QTest
namespace|namespace
name|QTest
block|{
specifier|extern
name|void
name|filter_unprintable
argument_list|(
name|char
operator|*
name|str
argument_list|)
decl_stmt|;
comment|/*!     \fn int QTest::qt_asprintf(QTestCharBuffer *buf, const char *format, ...);     \internal  */
DECL|function|qt_asprintf
name|int
name|qt_asprintf
parameter_list|(
name|QTestCharBuffer
modifier|*
name|str
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
block|{
specifier|static
specifier|const
name|int
name|MAXSIZE
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|2
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|str
operator|->
name|size
argument_list|()
decl_stmt|;
name|va_list
name|ap
decl_stmt|;
name|int
name|res
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|va_start
argument_list|(
name|ap
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|res
operator|=
name|qvsnprintf
argument_list|(
name|str
operator|->
name|data
argument_list|()
argument_list|,
name|size
argument_list|,
name|format
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|str
operator|->
name|data
argument_list|()
index|[
name|size
operator|-
literal|1
index|]
operator|=
literal|'\0'
expr_stmt|;
if|if
condition|(
name|res
operator|>=
literal|0
operator|&&
name|res
operator|<
name|size
condition|)
block|{
comment|// We succeeded
break|break;
block|}
comment|// buffer wasn't big enough, try again.
comment|// Note, we're assuming that a result of -1 is always due to running out of space.
name|size
operator|*=
literal|2
expr_stmt|;
if|if
condition|(
name|size
operator|>
name|MAXSIZE
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|str
operator|->
name|reset
argument_list|(
name|size
argument_list|)
condition|)
break|break;
comment|// out of memory - take what we have
block|}
return|return
name|res
return|;
block|}
block|}
name|QT_END_NAMESPACE
end_function
end_unit
