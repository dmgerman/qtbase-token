begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtTest module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTEST_WIDGETS_H
end_ifndef
begin_define
DECL|macro|QTEST_WIDGETS_H
define|#
directive|define
name|QTEST_WIDGETS_H
end_define
begin_comment
comment|// enable WIDGETS features
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_WIDGETS_LIB
end_ifndef
begin_define
DECL|macro|QT_WIDGETS_LIB
define|#
directive|define
name|QT_WIDGETS_LIB
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
literal|0
end_if
begin_pragma
pragma|#
directive|pragma
name|qt_class
name|(
name|QtTestWidgets
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtTest/qtest_gui.h>
end_include
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// inform syncqt
end_comment
begin_pragma
pragma|#
directive|pragma
name|qt_no_master_include
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtWidgets/QSizePolicy>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMetaEnum>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|namespace
name|QTest
block|{
comment|//
comment|// QSizePolicy& friends:
comment|//
name|namespace
name|Internal
block|{
specifier|inline
specifier|const
name|char
modifier|*
name|toString
argument_list|(
name|QSizePolicy
operator|::
name|Policy
name|p
argument_list|)
block|{
specifier|static
specifier|const
name|QMetaEnum
name|me
init|=
name|QSizePolicy
operator|::
name|staticMetaObject
operator|.
name|enumerator
argument_list|(
name|QSizePolicy
operator|::
name|staticMetaObject
operator|.
name|indexOfEnumerator
argument_list|(
literal|"Policy"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|me
operator|.
name|valueToKey
argument_list|(
name|int
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|QByteArray
name|toString
argument_list|(
name|QSizePolicy
operator|::
name|ControlTypes
name|ct
argument_list|)
block|{
specifier|static
specifier|const
name|QMetaEnum
name|me
init|=
name|QSizePolicy
operator|::
name|staticMetaObject
operator|.
name|enumerator
argument_list|(
name|QSizePolicy
operator|::
name|staticMetaObject
operator|.
name|indexOfEnumerator
argument_list|(
literal|"ControlTypes"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|me
operator|.
name|valueToKeys
argument_list|(
name|int
argument_list|(
name|ct
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|QByteArray
name|toString
parameter_list|(
name|QSizePolicy
name|sp
parameter_list|)
block|{
specifier|static
specifier|const
name|char
name|comma
index|[]
init|=
literal|", "
decl_stmt|;
return|return
name|QByteArray
argument_list|(
literal|"QSizePolicy("
argument_list|)
operator|+
name|Internal
operator|::
name|toString
argument_list|(
name|sp
operator|.
name|horizontalPolicy
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|Internal
operator|::
name|toString
argument_list|(
name|sp
operator|.
name|verticalPolicy
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|sp
operator|.
name|horizontalStretch
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|sp
operator|.
name|verticalStretch
argument_list|()
argument_list|)
operator|+
name|comma
operator|+
name|Internal
operator|::
name|toString
argument_list|(
name|QSizePolicy
operator|::
name|ControlTypes
argument_list|(
name|sp
operator|.
name|controlType
argument_list|()
argument_list|)
argument_list|)
operator|+
name|comma
operator|+
literal|"height for width: "
operator|+
operator|(
name|sp
operator|.
name|hasHeightForWidth
argument_list|()
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|+
name|comma
operator|+
literal|"width for height: "
operator|+
operator|(
name|sp
operator|.
name|hasWidthForHeight
argument_list|()
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|+
name|comma
operator|+
operator|(
name|sp
operator|.
name|retainSizeWhenHidden
argument_list|()
condition|?
literal|""
else|:
literal|"don't "
operator|)
operator|+
literal|"retain size when hidden"
operator|+
literal|')'
return|;
block|}
block|}
comment|// namespace Internal
specifier|inline
name|char
modifier|*
name|toString
argument_list|(
name|QSizePolicy
operator|::
name|Policy
name|p
argument_list|)
block|{
return|return
name|qstrdup
argument_list|(
name|Internal
operator|::
name|toString
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|char
modifier|*
name|toString
argument_list|(
name|QSizePolicy
operator|::
name|ControlTypes
name|ct
argument_list|)
block|{
return|return
name|qstrdup
argument_list|(
name|Internal
operator|::
name|toString
argument_list|(
name|ct
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|char
modifier|*
name|toString
argument_list|(
name|QSizePolicy
operator|::
name|ControlType
name|ct
argument_list|)
block|{
return|return
name|toString
argument_list|(
name|QSizePolicy
operator|::
name|ControlTypes
argument_list|(
name|ct
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|char
modifier|*
name|toString
parameter_list|(
name|QSizePolicy
name|sp
parameter_list|)
block|{
return|return
name|qstrdup
argument_list|(
name|Internal
operator|::
name|toString
argument_list|(
name|sp
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
block|}
end_decl_stmt
begin_comment
comment|// namespace QTest
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
