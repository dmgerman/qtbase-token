begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgtk2theme.h"
end_include
begin_include
include|#
directive|include
file|"qgtk2dialoghelpers.h"
end_include
begin_include
include|#
directive|include
file|<QVariant>
end_include
begin_undef
DECL|macro|signals
undef|#
directive|undef
name|signals
end_undef
begin_include
include|#
directive|include
file|<gtk/gtk.h>
end_include
begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|name
specifier|const
name|char
modifier|*
name|QGtk2Theme
operator|::
name|name
init|=
literal|"gtk2"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|gtkSetting
specifier|static
name|QString
name|gtkSetting
parameter_list|(
specifier|const
name|gchar
modifier|*
name|propertyName
parameter_list|)
block|{
name|GtkSettings
modifier|*
name|settings
init|=
name|gtk_settings_get_default
argument_list|()
decl_stmt|;
name|gchararray
name|value
decl_stmt|;
name|g_object_get
argument_list|(
name|settings
argument_list|,
name|propertyName
argument_list|,
operator|&
name|value
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|g_free
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_constructor
DECL|function|QGtk2Theme
name|QGtk2Theme
operator|::
name|QGtk2Theme
parameter_list|()
block|{
comment|// gtk_init will reset the Xlib error handler, and that causes
comment|// Qt applications to quit on X errors. Therefore, we need to manually restore it.
name|int
function_decl|(
modifier|*
name|oldErrorHandler
function_decl|)
parameter_list|(
name|Display
modifier|*
parameter_list|,
name|XErrorEvent
modifier|*
parameter_list|)
init|=
name|XSetErrorHandler
argument_list|(
name|NULL
argument_list|)
function_decl|;
name|gtk_init
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XSetErrorHandler
argument_list|(
name|oldErrorHandler
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|themeHint
name|QVariant
name|QGtk2Theme
operator|::
name|themeHint
parameter_list|(
name|QPlatformTheme
operator|::
name|ThemeHint
name|hint
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|SystemIconThemeName
case|:
return|return
name|QVariant
argument_list|(
name|gtkSetting
argument_list|(
literal|"gtk-icon-theme-name"
argument_list|)
argument_list|)
return|;
case|case
name|QPlatformTheme
operator|::
name|SystemIconFallbackThemeName
case|:
return|return
name|QVariant
argument_list|(
name|gtkSetting
argument_list|(
literal|"gtk-fallback-icon-theme"
argument_list|)
argument_list|)
return|;
default|default:
return|return
name|QGnomeTheme
operator|::
name|themeHint
argument_list|(
name|hint
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|usePlatformNativeDialog
name|bool
name|QGtk2Theme
operator|::
name|usePlatformNativeDialog
parameter_list|(
name|DialogType
name|type
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ColorDialog
case|:
return|return
literal|true
return|;
case|case
name|FileDialog
case|:
return|return
literal|true
return|;
case|case
name|FontDialog
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|createPlatformDialogHelper
name|QPlatformDialogHelper
modifier|*
name|QGtk2Theme
operator|::
name|createPlatformDialogHelper
parameter_list|(
name|DialogType
name|type
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ColorDialog
case|:
return|return
operator|new
name|QGtk2ColorDialogHelper
return|;
case|case
name|FileDialog
case|:
return|return
operator|new
name|QGtk2FileDialogHelper
return|;
case|case
name|FontDialog
case|:
return|return
operator|new
name|QGtk2FontDialogHelper
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
