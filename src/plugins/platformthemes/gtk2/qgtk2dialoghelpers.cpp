begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgtk2dialoghelpers.h"
end_include
begin_include
include|#
directive|include
file|<qeventloop.h>
end_include
begin_include
include|#
directive|include
file|<qwindow.h>
end_include
begin_include
include|#
directive|include
file|<qcolor.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_undef
DECL|macro|signals
undef|#
directive|undef
name|signals
end_undef
begin_include
include|#
directive|include
file|<gtk/gtk.h>
end_include
begin_include
include|#
directive|include
file|<gdk/gdk.h>
end_include
begin_include
include|#
directive|include
file|<gdk/gdkx.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QGtk2Dialog
class|class
name|QGtk2Dialog
super|:
specifier|public
name|QWindow
block|{
name|Q_OBJECT
public|public:
name|QGtk2Dialog
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|)
constructor_decl|;
name|~
name|QGtk2Dialog
parameter_list|()
destructor_decl|;
name|GtkDialog
modifier|*
name|gtkDialog
parameter_list|()
specifier|const
function_decl|;
name|void
name|exec
parameter_list|()
function_decl|;
name|bool
name|show
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|modality
parameter_list|,
name|QWindow
modifier|*
name|parent
parameter_list|)
function_decl|;
name|void
name|hide
parameter_list|()
function_decl|;
name|Q_SIGNALS
label|:
name|void
name|accept
parameter_list|()
function_decl|;
name|void
name|reject
parameter_list|()
function_decl|;
protected|protected:
specifier|static
name|void
name|onResponse
parameter_list|(
name|QGtk2Dialog
modifier|*
name|dialog
parameter_list|,
name|int
name|response
parameter_list|)
function_decl|;
private|private:
DECL|member|gtkWidget
name|GtkWidget
modifier|*
name|gtkWidget
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QGtk2Dialog
name|QGtk2Dialog
operator|::
name|QGtk2Dialog
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|)
member_init_list|:
name|gtkWidget
argument_list|(
name|gtkWidget
argument_list|)
block|{
name|g_signal_connect_swapped
argument_list|(
name|G_OBJECT
argument_list|(
name|gtkWidget
argument_list|)
argument_list|,
literal|"response"
argument_list|,
name|G_CALLBACK
argument_list|(
name|onResponse
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|g_signal_connect
argument_list|(
name|G_OBJECT
argument_list|(
name|gtkWidget
argument_list|)
argument_list|,
literal|"delete-event"
argument_list|,
name|G_CALLBACK
argument_list|(
name|gtk_widget_hide_on_delete
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGtk2Dialog
name|QGtk2Dialog
operator|::
name|~
name|QGtk2Dialog
parameter_list|()
block|{
name|gtk_widget_destroy
argument_list|(
name|gtkWidget
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|gtkDialog
name|GtkDialog
modifier|*
name|QGtk2Dialog
operator|::
name|gtkDialog
parameter_list|()
specifier|const
block|{
return|return
name|GTK_DIALOG
argument_list|(
name|gtkWidget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|exec
name|void
name|QGtk2Dialog
operator|::
name|exec
parameter_list|()
block|{
if|if
condition|(
name|modality
argument_list|()
operator|==
name|Qt
operator|::
name|ApplicationModal
condition|)
block|{
comment|// block input to the whole app, including other GTK dialogs
name|gtk_dialog_run
argument_list|(
name|gtkDialog
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// block input to the window, allow input to other GTK dialogs
name|QEventLoop
name|loop
decl_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|show
name|bool
name|QGtk2Dialog
operator|::
name|show
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|modality
parameter_list|,
name|QWindow
modifier|*
name|parent
parameter_list|)
block|{
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|setFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|setModality
argument_list|(
name|modality
argument_list|)
expr_stmt|;
name|gtk_widget_realize
argument_list|(
name|gtkWidget
argument_list|)
expr_stmt|;
comment|// creates X window
if|if
condition|(
name|parent
condition|)
block|{
name|XSetTransientForHint
argument_list|(
name|gdk_x11_drawable_get_xdisplay
argument_list|(
name|gtkWidget
operator|->
name|window
argument_list|)
argument_list|,
name|gdk_x11_drawable_get_xid
argument_list|(
name|gtkWidget
operator|->
name|window
argument_list|)
argument_list|,
name|parent
operator|->
name|winId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modality
operator|!=
name|Qt
operator|::
name|NonModal
condition|)
block|{
name|gdk_window_set_modal_hint
argument_list|(
name|gtkWidget
operator|->
name|window
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|showModalWindow
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|gtk_widget_show
argument_list|(
name|gtkWidget
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QGtk2Dialog
operator|::
name|hide
parameter_list|()
block|{
name|QGuiApplicationPrivate
operator|::
name|hideModalWindow
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|gtk_widget_hide
argument_list|(
name|gtkWidget
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onResponse
name|void
name|QGtk2Dialog
operator|::
name|onResponse
parameter_list|(
name|QGtk2Dialog
modifier|*
name|dialog
parameter_list|,
name|int
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|==
name|GTK_RESPONSE_OK
condition|)
emit|emit
name|dialog
operator|->
name|accept
argument_list|()
emit|;
else|else
emit|emit
name|dialog
operator|->
name|reject
argument_list|()
emit|;
block|}
end_function
begin_constructor
DECL|function|QGtk2ColorDialogHelper
name|QGtk2ColorDialogHelper
operator|::
name|QGtk2ColorDialogHelper
parameter_list|()
block|{
name|d
operator|.
name|reset
argument_list|(
operator|new
name|QGtk2Dialog
argument_list|(
name|gtk_color_selection_dialog_new
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onAccepted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkColorSelection
init|=
name|gtk_color_selection_dialog_get_color_selection
argument_list|(
name|GTK_COLOR_SELECTION_DIALOG
argument_list|(
name|d
operator|->
name|gtkDialog
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|g_signal_connect_swapped
argument_list|(
name|gtkColorSelection
argument_list|,
literal|"color-changed"
argument_list|,
name|G_CALLBACK
argument_list|(
name|onColorChanged
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGtk2ColorDialogHelper
name|QGtk2ColorDialogHelper
operator|::
name|~
name|QGtk2ColorDialogHelper
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|show
name|bool
name|QGtk2ColorDialogHelper
operator|::
name|show
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|modality
parameter_list|,
name|QWindow
modifier|*
name|parent
parameter_list|)
block|{
name|applyOptions
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|show
argument_list|(
name|flags
argument_list|,
name|modality
argument_list|,
name|parent
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|exec
name|void
name|QGtk2ColorDialogHelper
operator|::
name|exec
parameter_list|()
block|{
name|d
operator|->
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QGtk2ColorDialogHelper
operator|::
name|hide
parameter_list|()
block|{
name|d
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCurrentColor
name|void
name|QGtk2ColorDialogHelper
operator|::
name|setCurrentColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkColorSelection
init|=
name|gtk_color_selection_dialog_get_color_selection
argument_list|(
name|GTK_COLOR_SELECTION_DIALOG
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
name|GdkColor
name|gdkColor
decl_stmt|;
name|gdkColor
operator|.
name|red
operator|=
name|color
operator|.
name|red
argument_list|()
operator|<<
literal|8
expr_stmt|;
name|gdkColor
operator|.
name|green
operator|=
name|color
operator|.
name|green
argument_list|()
operator|<<
literal|8
expr_stmt|;
name|gdkColor
operator|.
name|blue
operator|=
name|color
operator|.
name|blue
argument_list|()
operator|<<
literal|8
expr_stmt|;
name|gtk_color_selection_set_current_color
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|,
operator|&
name|gdkColor
argument_list|)
expr_stmt|;
if|if
condition|(
name|color
operator|.
name|alpha
argument_list|()
operator|<
literal|255
condition|)
block|{
name|gtk_color_selection_set_has_opacity_control
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|gtk_color_selection_set_current_alpha
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|,
name|color
operator|.
name|alpha
argument_list|()
operator|<<
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|currentColor
name|QColor
name|QGtk2ColorDialogHelper
operator|::
name|currentColor
parameter_list|()
specifier|const
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkColorSelection
init|=
name|gtk_color_selection_dialog_get_color_selection
argument_list|(
name|GTK_COLOR_SELECTION_DIALOG
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
name|GdkColor
name|gdkColor
decl_stmt|;
name|gtk_color_selection_get_current_color
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|,
operator|&
name|gdkColor
argument_list|)
expr_stmt|;
name|guint16
name|alpha
init|=
name|gtk_color_selection_get_current_alpha
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QColor
argument_list|(
name|gdkColor
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkColor
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkColor
operator|.
name|blue
operator|>>
literal|8
argument_list|,
name|alpha
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|onAccepted
name|void
name|QGtk2ColorDialogHelper
operator|::
name|onAccepted
parameter_list|()
block|{
emit|emit
name|accept
argument_list|()
emit|;
emit|emit
name|colorSelected
argument_list|(
name|currentColor
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|onColorChanged
name|void
name|QGtk2ColorDialogHelper
operator|::
name|onColorChanged
parameter_list|(
name|QGtk2ColorDialogHelper
modifier|*
name|dialog
parameter_list|)
block|{
emit|emit
name|dialog
operator|->
name|currentColorChanged
argument_list|(
name|dialog
operator|->
name|currentColor
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|applyOptions
name|void
name|QGtk2ColorDialogHelper
operator|::
name|applyOptions
parameter_list|()
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
name|gtk_window_set_title
argument_list|(
name|GTK_WINDOW
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|options
argument_list|()
operator|->
name|windowTitle
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkColorSelection
init|=
name|gtk_color_selection_dialog_get_color_selection
argument_list|(
name|GTK_COLOR_SELECTION_DIALOG
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
name|gtk_color_selection_set_has_opacity_control
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|,
name|options
argument_list|()
operator|->
name|testOption
argument_list|(
name|QColorDialogOptions
operator|::
name|ShowAlphaChannel
argument_list|)
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|okButton
init|=
literal|0
decl_stmt|;
name|GtkWidget
modifier|*
name|cancelButton
init|=
literal|0
decl_stmt|;
name|GtkWidget
modifier|*
name|helpButton
init|=
literal|0
decl_stmt|;
name|g_object_get
argument_list|(
name|G_OBJECT
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
literal|"ok-button"
argument_list|,
operator|&
name|okButton
argument_list|,
literal|"cancel-button"
argument_list|,
operator|&
name|cancelButton
argument_list|,
literal|"help-button"
argument_list|,
operator|&
name|helpButton
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|okButton
condition|)
name|g_object_set
argument_list|(
name|G_OBJECT
argument_list|(
name|okButton
argument_list|)
argument_list|,
literal|"visible"
argument_list|,
operator|!
name|options
argument_list|()
operator|->
name|testOption
argument_list|(
name|QColorDialogOptions
operator|::
name|NoButtons
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|cancelButton
condition|)
name|g_object_set
argument_list|(
name|G_OBJECT
argument_list|(
name|cancelButton
argument_list|)
argument_list|,
literal|"visible"
argument_list|,
operator|!
name|options
argument_list|()
operator|->
name|testOption
argument_list|(
name|QColorDialogOptions
operator|::
name|NoButtons
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|helpButton
condition|)
name|gtk_widget_hide
argument_list|(
name|helpButton
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qgtk2dialoghelpers.moc"
end_include
end_unit
