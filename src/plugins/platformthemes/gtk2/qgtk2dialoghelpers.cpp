begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgtk2dialoghelpers.h"
end_include
begin_include
include|#
directive|include
file|<qeventloop.h>
end_include
begin_include
include|#
directive|include
file|<qwindow.h>
end_include
begin_include
include|#
directive|include
file|<qcolor.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfont.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_undef
DECL|macro|signals
undef|#
directive|undef
name|signals
end_undef
begin_include
include|#
directive|include
file|<gtk/gtk.h>
end_include
begin_include
include|#
directive|include
file|<gdk/gdk.h>
end_include
begin_include
include|#
directive|include
file|<gdk/gdkx.h>
end_include
begin_include
include|#
directive|include
file|<pango/pango.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QGtk2Dialog
class|class
name|QGtk2Dialog
super|:
specifier|public
name|QWindow
block|{
name|Q_OBJECT
public|public:
name|QGtk2Dialog
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|)
constructor_decl|;
name|~
name|QGtk2Dialog
parameter_list|()
destructor_decl|;
name|GtkDialog
modifier|*
name|gtkDialog
parameter_list|()
specifier|const
function_decl|;
name|void
name|exec
parameter_list|()
function_decl|;
name|bool
name|show
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|modality
parameter_list|,
name|QWindow
modifier|*
name|parent
parameter_list|)
function_decl|;
name|void
name|hide
parameter_list|()
function_decl|;
name|Q_SIGNALS
label|:
name|void
name|accept
parameter_list|()
function_decl|;
name|void
name|reject
parameter_list|()
function_decl|;
protected|protected:
specifier|static
name|void
name|onResponse
parameter_list|(
name|QGtk2Dialog
modifier|*
name|dialog
parameter_list|,
name|int
name|response
parameter_list|)
function_decl|;
private|private:
DECL|member|gtkWidget
name|GtkWidget
modifier|*
name|gtkWidget
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QGtk2Dialog
name|QGtk2Dialog
operator|::
name|QGtk2Dialog
parameter_list|(
name|GtkWidget
modifier|*
name|gtkWidget
parameter_list|)
member_init_list|:
name|gtkWidget
argument_list|(
name|gtkWidget
argument_list|)
block|{
name|g_signal_connect_swapped
argument_list|(
name|G_OBJECT
argument_list|(
name|gtkWidget
argument_list|)
argument_list|,
literal|"response"
argument_list|,
name|G_CALLBACK
argument_list|(
name|onResponse
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|g_signal_connect
argument_list|(
name|G_OBJECT
argument_list|(
name|gtkWidget
argument_list|)
argument_list|,
literal|"delete-event"
argument_list|,
name|G_CALLBACK
argument_list|(
name|gtk_widget_hide_on_delete
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGtk2Dialog
name|QGtk2Dialog
operator|::
name|~
name|QGtk2Dialog
parameter_list|()
block|{
name|gtk_clipboard_store
argument_list|(
name|gtk_clipboard_get
argument_list|(
name|GDK_SELECTION_CLIPBOARD
argument_list|)
argument_list|)
expr_stmt|;
name|gtk_widget_destroy
argument_list|(
name|gtkWidget
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|gtkDialog
name|GtkDialog
modifier|*
name|QGtk2Dialog
operator|::
name|gtkDialog
parameter_list|()
specifier|const
block|{
return|return
name|GTK_DIALOG
argument_list|(
name|gtkWidget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|exec
name|void
name|QGtk2Dialog
operator|::
name|exec
parameter_list|()
block|{
if|if
condition|(
name|modality
argument_list|()
operator|==
name|Qt
operator|::
name|ApplicationModal
condition|)
block|{
comment|// block input to the whole app, including other GTK dialogs
name|gtk_dialog_run
argument_list|(
name|gtkDialog
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// block input to the window, allow input to other GTK dialogs
name|QEventLoop
name|loop
decl_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|show
name|bool
name|QGtk2Dialog
operator|::
name|show
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|modality
parameter_list|,
name|QWindow
modifier|*
name|parent
parameter_list|)
block|{
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|setFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|setModality
argument_list|(
name|modality
argument_list|)
expr_stmt|;
name|gtk_widget_realize
argument_list|(
name|gtkWidget
argument_list|)
expr_stmt|;
comment|// creates X window
if|if
condition|(
name|parent
condition|)
block|{
name|XSetTransientForHint
argument_list|(
name|gdk_x11_drawable_get_xdisplay
argument_list|(
name|gtkWidget
operator|->
name|window
argument_list|)
argument_list|,
name|gdk_x11_drawable_get_xid
argument_list|(
name|gtkWidget
operator|->
name|window
argument_list|)
argument_list|,
name|parent
operator|->
name|winId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modality
operator|!=
name|Qt
operator|::
name|NonModal
condition|)
block|{
name|gdk_window_set_modal_hint
argument_list|(
name|gtkWidget
operator|->
name|window
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QGuiApplicationPrivate
operator|::
name|showModalWindow
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|gtk_widget_show
argument_list|(
name|gtkWidget
argument_list|)
expr_stmt|;
name|gdk_window_focus
argument_list|(
name|gtkWidget
operator|->
name|window
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QGtk2Dialog
operator|::
name|hide
parameter_list|()
block|{
name|QGuiApplicationPrivate
operator|::
name|hideModalWindow
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|gtk_widget_hide
argument_list|(
name|gtkWidget
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onResponse
name|void
name|QGtk2Dialog
operator|::
name|onResponse
parameter_list|(
name|QGtk2Dialog
modifier|*
name|dialog
parameter_list|,
name|int
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|==
name|GTK_RESPONSE_OK
condition|)
emit|emit
name|dialog
operator|->
name|accept
argument_list|()
emit|;
else|else
emit|emit
name|dialog
operator|->
name|reject
argument_list|()
emit|;
block|}
end_function
begin_constructor
DECL|function|QGtk2ColorDialogHelper
name|QGtk2ColorDialogHelper
operator|::
name|QGtk2ColorDialogHelper
parameter_list|()
block|{
name|d
operator|.
name|reset
argument_list|(
operator|new
name|QGtk2Dialog
argument_list|(
name|gtk_color_selection_dialog_new
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onAccepted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkColorSelection
init|=
name|gtk_color_selection_dialog_get_color_selection
argument_list|(
name|GTK_COLOR_SELECTION_DIALOG
argument_list|(
name|d
operator|->
name|gtkDialog
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|g_signal_connect_swapped
argument_list|(
name|gtkColorSelection
argument_list|,
literal|"color-changed"
argument_list|,
name|G_CALLBACK
argument_list|(
name|onColorChanged
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGtk2ColorDialogHelper
name|QGtk2ColorDialogHelper
operator|::
name|~
name|QGtk2ColorDialogHelper
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|show
name|bool
name|QGtk2ColorDialogHelper
operator|::
name|show
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|modality
parameter_list|,
name|QWindow
modifier|*
name|parent
parameter_list|)
block|{
name|applyOptions
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|show
argument_list|(
name|flags
argument_list|,
name|modality
argument_list|,
name|parent
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|exec
name|void
name|QGtk2ColorDialogHelper
operator|::
name|exec
parameter_list|()
block|{
name|d
operator|->
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QGtk2ColorDialogHelper
operator|::
name|hide
parameter_list|()
block|{
name|d
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCurrentColor
name|void
name|QGtk2ColorDialogHelper
operator|::
name|setCurrentColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkColorSelection
init|=
name|gtk_color_selection_dialog_get_color_selection
argument_list|(
name|GTK_COLOR_SELECTION_DIALOG
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
name|GdkColor
name|gdkColor
decl_stmt|;
name|gdkColor
operator|.
name|red
operator|=
name|color
operator|.
name|red
argument_list|()
operator|<<
literal|8
expr_stmt|;
name|gdkColor
operator|.
name|green
operator|=
name|color
operator|.
name|green
argument_list|()
operator|<<
literal|8
expr_stmt|;
name|gdkColor
operator|.
name|blue
operator|=
name|color
operator|.
name|blue
argument_list|()
operator|<<
literal|8
expr_stmt|;
name|gtk_color_selection_set_current_color
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|,
operator|&
name|gdkColor
argument_list|)
expr_stmt|;
if|if
condition|(
name|color
operator|.
name|alpha
argument_list|()
operator|<
literal|255
condition|)
block|{
name|gtk_color_selection_set_has_opacity_control
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|gtk_color_selection_set_current_alpha
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|,
name|color
operator|.
name|alpha
argument_list|()
operator|<<
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|currentColor
name|QColor
name|QGtk2ColorDialogHelper
operator|::
name|currentColor
parameter_list|()
specifier|const
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
name|GtkWidget
modifier|*
name|gtkColorSelection
init|=
name|gtk_color_selection_dialog_get_color_selection
argument_list|(
name|GTK_COLOR_SELECTION_DIALOG
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
name|GdkColor
name|gdkColor
decl_stmt|;
name|gtk_color_selection_get_current_color
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|,
operator|&
name|gdkColor
argument_list|)
expr_stmt|;
name|guint16
name|alpha
init|=
name|gtk_color_selection_get_current_alpha
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QColor
argument_list|(
name|gdkColor
operator|.
name|red
operator|>>
literal|8
argument_list|,
name|gdkColor
operator|.
name|green
operator|>>
literal|8
argument_list|,
name|gdkColor
operator|.
name|blue
operator|>>
literal|8
argument_list|,
name|alpha
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|onAccepted
name|void
name|QGtk2ColorDialogHelper
operator|::
name|onAccepted
parameter_list|()
block|{
emit|emit
name|accept
argument_list|()
emit|;
emit|emit
name|colorSelected
argument_list|(
name|currentColor
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|onColorChanged
name|void
name|QGtk2ColorDialogHelper
operator|::
name|onColorChanged
parameter_list|(
name|QGtk2ColorDialogHelper
modifier|*
name|dialog
parameter_list|)
block|{
emit|emit
name|dialog
operator|->
name|currentColorChanged
argument_list|(
name|dialog
operator|->
name|currentColor
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|applyOptions
name|void
name|QGtk2ColorDialogHelper
operator|::
name|applyOptions
parameter_list|()
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
name|gtk_window_set_title
argument_list|(
name|GTK_WINDOW
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|options
argument_list|()
operator|->
name|windowTitle
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|gtkColorSelection
init|=
name|gtk_color_selection_dialog_get_color_selection
argument_list|(
name|GTK_COLOR_SELECTION_DIALOG
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
name|gtk_color_selection_set_has_opacity_control
argument_list|(
name|GTK_COLOR_SELECTION
argument_list|(
name|gtkColorSelection
argument_list|)
argument_list|,
name|options
argument_list|()
operator|->
name|testOption
argument_list|(
name|QColorDialogOptions
operator|::
name|ShowAlphaChannel
argument_list|)
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|okButton
init|=
literal|0
decl_stmt|;
name|GtkWidget
modifier|*
name|cancelButton
init|=
literal|0
decl_stmt|;
name|GtkWidget
modifier|*
name|helpButton
init|=
literal|0
decl_stmt|;
name|g_object_get
argument_list|(
name|G_OBJECT
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
literal|"ok-button"
argument_list|,
operator|&
name|okButton
argument_list|,
literal|"cancel-button"
argument_list|,
operator|&
name|cancelButton
argument_list|,
literal|"help-button"
argument_list|,
operator|&
name|helpButton
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|okButton
condition|)
name|g_object_set
argument_list|(
name|G_OBJECT
argument_list|(
name|okButton
argument_list|)
argument_list|,
literal|"visible"
argument_list|,
operator|!
name|options
argument_list|()
operator|->
name|testOption
argument_list|(
name|QColorDialogOptions
operator|::
name|NoButtons
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|cancelButton
condition|)
name|g_object_set
argument_list|(
name|G_OBJECT
argument_list|(
name|cancelButton
argument_list|)
argument_list|,
literal|"visible"
argument_list|,
operator|!
name|options
argument_list|()
operator|->
name|testOption
argument_list|(
name|QColorDialogOptions
operator|::
name|NoButtons
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|helpButton
condition|)
name|gtk_widget_hide
argument_list|(
name|helpButton
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QGtk2FileDialogHelper
name|QGtk2FileDialogHelper
operator|::
name|QGtk2FileDialogHelper
parameter_list|()
block|{
name|d
operator|.
name|reset
argument_list|(
operator|new
name|QGtk2Dialog
argument_list|(
name|gtk_file_chooser_dialog_new
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
name|GTK_FILE_CHOOSER_ACTION_OPEN
argument_list|,
name|GTK_STOCK_CANCEL
argument_list|,
name|GTK_RESPONSE_CANCEL
argument_list|,
name|GTK_STOCK_OK
argument_list|,
name|GTK_RESPONSE_OK
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onAccepted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|g_signal_connect
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|d
operator|->
name|gtkDialog
argument_list|()
argument_list|)
argument_list|,
literal|"selection-changed"
argument_list|,
name|G_CALLBACK
argument_list|(
name|onSelectionChanged
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|g_signal_connect_swapped
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|d
operator|->
name|gtkDialog
argument_list|()
argument_list|)
argument_list|,
literal|"current-folder-changed"
argument_list|,
name|G_CALLBACK
argument_list|(
name|onCurrentFolderChanged
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGtk2FileDialogHelper
name|QGtk2FileDialogHelper
operator|::
name|~
name|QGtk2FileDialogHelper
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|show
name|bool
name|QGtk2FileDialogHelper
operator|::
name|show
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|modality
parameter_list|,
name|QWindow
modifier|*
name|parent
parameter_list|)
block|{
name|_dir
operator|.
name|clear
argument_list|()
expr_stmt|;
name|_selection
operator|.
name|clear
argument_list|()
expr_stmt|;
name|applyOptions
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|show
argument_list|(
name|flags
argument_list|,
name|modality
argument_list|,
name|parent
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|exec
name|void
name|QGtk2FileDialogHelper
operator|::
name|exec
parameter_list|()
block|{
name|d
operator|->
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QGtk2FileDialogHelper
operator|::
name|hide
parameter_list|()
block|{
comment|// After GtkFileChooserDialog has been hidden, gtk_file_chooser_get_current_folder()
comment|//& gtk_file_chooser_get_filenames() will return bogus values -> cache the actual
comment|// values before hiding the dialog
name|_dir
operator|=
name|directory
argument_list|()
expr_stmt|;
name|_selection
operator|=
name|selectedFiles
argument_list|()
expr_stmt|;
name|d
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultNameFilterDisables
name|bool
name|QGtk2FileDialogHelper
operator|::
name|defaultNameFilterDisables
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setDirectory
name|void
name|QGtk2FileDialogHelper
operator|::
name|setDirectory
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|directory
parameter_list|)
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
name|gtk_file_chooser_set_current_folder
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|directory
operator|.
name|toLocalFile
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|directory
name|QUrl
name|QGtk2FileDialogHelper
operator|::
name|directory
parameter_list|()
specifier|const
block|{
comment|// While GtkFileChooserDialog is hidden, gtk_file_chooser_get_current_folder()
comment|// returns a bogus value -> return the cached value before hiding
if|if
condition|(
operator|!
name|_dir
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|_dir
return|;
name|QString
name|ret
decl_stmt|;
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
name|gchar
modifier|*
name|folder
init|=
name|gtk_file_chooser_get_current_folder
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|folder
condition|)
block|{
name|ret
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|folder
argument_list|)
expr_stmt|;
name|g_free
argument_list|(
name|folder
argument_list|)
expr_stmt|;
block|}
return|return
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|ret
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selectFile
name|void
name|QGtk2FileDialogHelper
operator|::
name|selectFile
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|filename
parameter_list|)
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
argument_list|()
operator|->
name|acceptMode
argument_list|()
operator|==
name|QFileDialogOptions
operator|::
name|AcceptSave
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|filename
operator|.
name|toLocalFile
argument_list|()
argument_list|)
decl_stmt|;
name|gtk_file_chooser_set_current_folder
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|fi
operator|.
name|path
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|gtk_file_chooser_set_current_name
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|fi
operator|.
name|fileName
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gtk_file_chooser_select_filename
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|filename
operator|.
name|toLocalFile
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|selectedFiles
name|QList
argument_list|<
name|QUrl
argument_list|>
name|QGtk2FileDialogHelper
operator|::
name|selectedFiles
parameter_list|()
specifier|const
block|{
comment|// While GtkFileChooserDialog is hidden, gtk_file_chooser_get_filenames()
comment|// returns a bogus value -> return the cached value before hiding
if|if
condition|(
operator|!
name|_selection
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|_selection
return|;
name|QList
argument_list|<
name|QUrl
argument_list|>
name|selection
decl_stmt|;
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
name|GSList
modifier|*
name|filenames
init|=
name|gtk_file_chooser_get_filenames
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|GSList
modifier|*
name|it
init|=
name|filenames
init|;
name|it
condition|;
name|it
operator|=
name|it
operator|->
name|next
control|)
name|selection
operator|+=
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|it
operator|->
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|g_slist_free
argument_list|(
name|filenames
argument_list|)
expr_stmt|;
return|return
name|selection
return|;
block|}
end_function
begin_function
DECL|function|setFilter
name|void
name|QGtk2FileDialogHelper
operator|::
name|setFilter
parameter_list|()
block|{
name|applyOptions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectNameFilter
name|void
name|QGtk2FileDialogHelper
operator|::
name|selectNameFilter
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
name|GtkFileFilter
modifier|*
name|gtkFilter
init|=
name|_filters
operator|.
name|value
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|gtkFilter
condition|)
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
name|gtk_file_chooser_set_filter
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|gtkFilter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|selectedNameFilter
name|QString
name|QGtk2FileDialogHelper
operator|::
name|selectedNameFilter
parameter_list|()
specifier|const
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
name|GtkFileFilter
modifier|*
name|gtkFilter
init|=
name|gtk_file_chooser_get_filter
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|_filterNames
operator|.
name|value
argument_list|(
name|gtkFilter
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|onAccepted
name|void
name|QGtk2FileDialogHelper
operator|::
name|onAccepted
parameter_list|()
block|{
emit|emit
name|accept
argument_list|()
emit|;
name|QString
name|filter
init|=
name|selectedNameFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
emit|emit
name|filterSelected
argument_list|(
name|filter
argument_list|)
emit|;
name|QList
argument_list|<
name|QUrl
argument_list|>
name|files
init|=
name|selectedFiles
argument_list|()
decl_stmt|;
emit|emit
name|filesSelected
argument_list|(
name|files
argument_list|)
emit|;
if|if
condition|(
name|files
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
emit|emit
name|fileSelected
argument_list|(
name|files
operator|.
name|first
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|onSelectionChanged
name|void
name|QGtk2FileDialogHelper
operator|::
name|onSelectionChanged
parameter_list|(
name|GtkDialog
modifier|*
name|gtkDialog
parameter_list|,
name|QGtk2FileDialogHelper
modifier|*
name|helper
parameter_list|)
block|{
name|QString
name|selection
decl_stmt|;
name|gchar
modifier|*
name|filename
init|=
name|gtk_file_chooser_get_filename
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|filename
condition|)
block|{
name|selection
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|g_free
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
emit|emit
name|helper
operator|->
name|currentChanged
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|selection
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|onCurrentFolderChanged
name|void
name|QGtk2FileDialogHelper
operator|::
name|onCurrentFolderChanged
parameter_list|(
name|QGtk2FileDialogHelper
modifier|*
name|dialog
parameter_list|)
block|{
emit|emit
name|dialog
operator|->
name|directoryEntered
argument_list|(
name|dialog
operator|->
name|directory
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|gtkFileChooserAction
specifier|static
name|GtkFileChooserAction
name|gtkFileChooserAction
parameter_list|(
specifier|const
name|QSharedPointer
argument_list|<
name|QFileDialogOptions
argument_list|>
modifier|&
name|options
parameter_list|)
block|{
switch|switch
condition|(
name|options
operator|->
name|fileMode
argument_list|()
condition|)
block|{
case|case
name|QFileDialogOptions
operator|::
name|AnyFile
case|:
case|case
name|QFileDialogOptions
operator|::
name|ExistingFile
case|:
case|case
name|QFileDialogOptions
operator|::
name|ExistingFiles
case|:
if|if
condition|(
name|options
operator|->
name|acceptMode
argument_list|()
operator|==
name|QFileDialogOptions
operator|::
name|AcceptOpen
condition|)
return|return
name|GTK_FILE_CHOOSER_ACTION_OPEN
return|;
else|else
return|return
name|GTK_FILE_CHOOSER_ACTION_SAVE
return|;
case|case
name|QFileDialogOptions
operator|::
name|Directory
case|:
case|case
name|QFileDialogOptions
operator|::
name|DirectoryOnly
case|:
default|default:
if|if
condition|(
name|options
operator|->
name|acceptMode
argument_list|()
operator|==
name|QFileDialogOptions
operator|::
name|AcceptOpen
condition|)
return|return
name|GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER
return|;
else|else
return|return
name|GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER
return|;
block|}
block|}
end_function
begin_function
DECL|function|applyOptions
name|void
name|QGtk2FileDialogHelper
operator|::
name|applyOptions
parameter_list|()
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
specifier|const
name|QSharedPointer
argument_list|<
name|QFileDialogOptions
argument_list|>
modifier|&
name|opts
init|=
name|options
argument_list|()
decl_stmt|;
name|gtk_window_set_title
argument_list|(
name|GTK_WINDOW
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|opts
operator|->
name|windowTitle
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|gtk_file_chooser_set_local_only
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|const
name|GtkFileChooserAction
name|action
init|=
name|gtkFileChooserAction
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|gtk_file_chooser_set_action
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|action
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|selectMultiple
init|=
name|opts
operator|->
name|fileMode
argument_list|()
operator|==
name|QFileDialogOptions
operator|::
name|ExistingFiles
decl_stmt|;
name|gtk_file_chooser_set_select_multiple
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|selectMultiple
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|confirmOverwrite
init|=
operator|!
name|opts
operator|->
name|testOption
argument_list|(
name|QFileDialogOptions
operator|::
name|DontConfirmOverwrite
argument_list|)
decl_stmt|;
name|gtk_file_chooser_set_do_overwrite_confirmation
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|confirmOverwrite
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|nameFilters
init|=
name|opts
operator|->
name|nameFilters
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nameFilters
operator|.
name|isEmpty
argument_list|()
condition|)
name|setNameFilters
argument_list|(
name|nameFilters
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|->
name|initialDirectory
argument_list|()
operator|.
name|isLocalFile
argument_list|()
condition|)
name|setDirectory
argument_list|(
name|opts
operator|->
name|initialDirectory
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QUrl
modifier|&
name|filename
decl|,
name|opts
operator|->
name|initiallySelectedFiles
argument_list|()
control|)
name|selectFile
argument_list|(
name|filename
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|initialNameFilter
init|=
name|opts
operator|->
name|initiallySelectedNameFilter
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|initialNameFilter
operator|.
name|isEmpty
argument_list|()
condition|)
name|selectNameFilter
argument_list|(
name|initialNameFilter
argument_list|)
expr_stmt|;
if|#
directive|if
name|GTK_CHECK_VERSION
argument_list|(
literal|2
operator|,
literal|20
operator|,
literal|0
argument_list|)
name|GtkWidget
modifier|*
name|acceptButton
init|=
name|gtk_dialog_get_widget_for_response
argument_list|(
name|gtkDialog
argument_list|,
name|GTK_RESPONSE_OK
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptButton
condition|)
block|{
if|if
condition|(
name|opts
operator|->
name|isLabelExplicitlySet
argument_list|(
name|QFileDialogOptions
operator|::
name|Accept
argument_list|)
condition|)
name|gtk_button_set_label
argument_list|(
name|GTK_BUTTON
argument_list|(
name|acceptButton
argument_list|)
argument_list|,
name|opts
operator|->
name|labelText
argument_list|(
name|QFileDialogOptions
operator|::
name|Accept
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|opts
operator|->
name|acceptMode
argument_list|()
operator|==
name|QFileDialogOptions
operator|::
name|AcceptOpen
condition|)
name|gtk_button_set_label
argument_list|(
name|GTK_BUTTON
argument_list|(
name|acceptButton
argument_list|)
argument_list|,
name|GTK_STOCK_OPEN
argument_list|)
expr_stmt|;
else|else
name|gtk_button_set_label
argument_list|(
name|GTK_BUTTON
argument_list|(
name|acceptButton
argument_list|)
argument_list|,
name|GTK_STOCK_SAVE
argument_list|)
expr_stmt|;
block|}
name|GtkWidget
modifier|*
name|rejectButton
init|=
name|gtk_dialog_get_widget_for_response
argument_list|(
name|gtkDialog
argument_list|,
name|GTK_RESPONSE_CANCEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|rejectButton
condition|)
block|{
if|if
condition|(
name|opts
operator|->
name|isLabelExplicitlySet
argument_list|(
name|QFileDialogOptions
operator|::
name|Reject
argument_list|)
condition|)
name|gtk_button_set_label
argument_list|(
name|GTK_BUTTON
argument_list|(
name|rejectButton
argument_list|)
argument_list|,
name|opts
operator|->
name|labelText
argument_list|(
name|QFileDialogOptions
operator|::
name|Reject
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|gtk_button_set_label
argument_list|(
name|GTK_BUTTON
argument_list|(
name|rejectButton
argument_list|)
argument_list|,
name|GTK_STOCK_CANCEL
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setNameFilters
name|void
name|QGtk2FileDialogHelper
operator|::
name|setNameFilters
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|filters
parameter_list|)
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|GtkFileFilter
modifier|*
name|filter
decl|,
name|_filters
control|)
name|gtk_file_chooser_remove_filter
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|_filters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|_filterNames
operator|.
name|clear
argument_list|()
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|filter
decl|,
name|filters
control|)
block|{
name|GtkFileFilter
modifier|*
name|gtkFilter
init|=
name|gtk_file_filter_new
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|name
init|=
name|filter
operator|.
name|left
argument_list|(
name|filter
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|extensions
init|=
name|cleanFilterList
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|gtk_file_filter_set_name
argument_list|(
name|gtkFilter
argument_list|,
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
name|extensions
operator|.
name|join
argument_list|(
name|QStringLiteral
argument_list|(
literal|", "
argument_list|)
argument_list|)
operator|.
name|toUtf8
argument_list|()
else|:
name|name
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|ext
decl|,
name|extensions
control|)
name|gtk_file_filter_add_pattern
argument_list|(
name|gtkFilter
argument_list|,
name|ext
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|gtk_file_chooser_add_filter
argument_list|(
name|GTK_FILE_CHOOSER
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|gtkFilter
argument_list|)
expr_stmt|;
name|_filters
operator|.
name|insert
argument_list|(
name|filter
argument_list|,
name|gtkFilter
argument_list|)
expr_stmt|;
name|_filterNames
operator|.
name|insert
argument_list|(
name|gtkFilter
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QGtk2FontDialogHelper
name|QGtk2FontDialogHelper
operator|::
name|QGtk2FontDialogHelper
parameter_list|()
block|{
name|d
operator|.
name|reset
argument_list|(
operator|new
name|QGtk2Dialog
argument_list|(
name|gtk_font_selection_dialog_new
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onAccepted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QGtk2FontDialogHelper
name|QGtk2FontDialogHelper
operator|::
name|~
name|QGtk2FontDialogHelper
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|show
name|bool
name|QGtk2FontDialogHelper
operator|::
name|show
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|modality
parameter_list|,
name|QWindow
modifier|*
name|parent
parameter_list|)
block|{
name|applyOptions
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|show
argument_list|(
name|flags
argument_list|,
name|modality
argument_list|,
name|parent
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|exec
name|void
name|QGtk2FontDialogHelper
operator|::
name|exec
parameter_list|()
block|{
name|d
operator|->
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QGtk2FontDialogHelper
operator|::
name|hide
parameter_list|()
block|{
name|d
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_fontToString
specifier|static
name|QString
name|qt_fontToString
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|PangoFontDescription
modifier|*
name|desc
init|=
name|pango_font_description_new
argument_list|()
decl_stmt|;
name|pango_font_description_set_size
argument_list|(
name|desc
argument_list|,
name|font
operator|.
name|pointSizeF
argument_list|()
operator|*
name|PANGO_SCALE
argument_list|)
expr_stmt|;
name|pango_font_description_set_family
argument_list|(
name|desc
argument_list|,
name|font
operator|.
name|family
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|weight
init|=
name|font
operator|.
name|weight
argument_list|()
decl_stmt|;
if|if
condition|(
name|weight
operator|>=
name|QFont
operator|::
name|Black
condition|)
name|pango_font_description_set_weight
argument_list|(
name|desc
argument_list|,
name|PANGO_WEIGHT_HEAVY
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|QFont
operator|::
name|Bold
condition|)
name|pango_font_description_set_weight
argument_list|(
name|desc
argument_list|,
name|PANGO_WEIGHT_BOLD
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|QFont
operator|::
name|DemiBold
condition|)
name|pango_font_description_set_weight
argument_list|(
name|desc
argument_list|,
name|PANGO_WEIGHT_SEMIBOLD
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|QFont
operator|::
name|Normal
condition|)
name|pango_font_description_set_weight
argument_list|(
name|desc
argument_list|,
name|PANGO_WEIGHT_NORMAL
argument_list|)
expr_stmt|;
else|else
name|pango_font_description_set_weight
argument_list|(
name|desc
argument_list|,
name|PANGO_WEIGHT_LIGHT
argument_list|)
expr_stmt|;
name|int
name|style
init|=
name|font
operator|.
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|style
operator|==
name|QFont
operator|::
name|StyleItalic
condition|)
name|pango_font_description_set_style
argument_list|(
name|desc
argument_list|,
name|PANGO_STYLE_ITALIC
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|style
operator|==
name|QFont
operator|::
name|StyleOblique
condition|)
name|pango_font_description_set_style
argument_list|(
name|desc
argument_list|,
name|PANGO_STYLE_OBLIQUE
argument_list|)
expr_stmt|;
else|else
name|pango_font_description_set_style
argument_list|(
name|desc
argument_list|,
name|PANGO_STYLE_NORMAL
argument_list|)
expr_stmt|;
name|char
modifier|*
name|str
init|=
name|pango_font_description_to_string
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|QString
name|name
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|pango_font_description_free
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|g_free
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
end_function
begin_function
DECL|function|qt_fontFromString
specifier|static
name|QFont
name|qt_fontFromString
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QFont
name|font
decl_stmt|;
name|PangoFontDescription
modifier|*
name|desc
init|=
name|pango_font_description_from_string
argument_list|(
name|name
operator|.
name|toUtf8
argument_list|()
argument_list|)
decl_stmt|;
name|font
operator|.
name|setPointSizeF
argument_list|(
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|pango_font_description_get_size
argument_list|(
name|desc
argument_list|)
argument_list|)
operator|/
name|PANGO_SCALE
argument_list|)
expr_stmt|;
name|QString
name|family
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|pango_font_description_get_family
argument_list|(
name|desc
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
name|font
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|int
name|weight
init|=
name|pango_font_description_get_weight
argument_list|(
name|desc
argument_list|)
decl_stmt|;
if|if
condition|(
name|weight
operator|>=
name|PANGO_WEIGHT_HEAVY
condition|)
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Black
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|PANGO_WEIGHT_BOLD
condition|)
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Bold
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|PANGO_WEIGHT_SEMIBOLD
condition|)
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|DemiBold
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|weight
operator|>=
name|PANGO_WEIGHT_NORMAL
condition|)
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
else|else
name|font
operator|.
name|setWeight
argument_list|(
name|QFont
operator|::
name|Light
argument_list|)
expr_stmt|;
name|PangoStyle
name|style
init|=
name|pango_font_description_get_style
argument_list|(
name|desc
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|==
name|PANGO_STYLE_ITALIC
condition|)
name|font
operator|.
name|setStyle
argument_list|(
name|QFont
operator|::
name|StyleItalic
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|style
operator|==
name|PANGO_STYLE_OBLIQUE
condition|)
name|font
operator|.
name|setStyle
argument_list|(
name|QFont
operator|::
name|StyleOblique
argument_list|)
expr_stmt|;
else|else
name|font
operator|.
name|setStyle
argument_list|(
name|QFont
operator|::
name|StyleNormal
argument_list|)
expr_stmt|;
name|pango_font_description_free
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
name|font
return|;
block|}
end_function
begin_function
DECL|function|setCurrentFont
name|void
name|QGtk2FontDialogHelper
operator|::
name|setCurrentFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|GtkFontSelectionDialog
modifier|*
name|gtkDialog
init|=
name|GTK_FONT_SELECTION_DIALOG
argument_list|(
name|d
operator|->
name|gtkDialog
argument_list|()
argument_list|)
decl_stmt|;
name|gtk_font_selection_dialog_set_font_name
argument_list|(
name|gtkDialog
argument_list|,
name|qt_fontToString
argument_list|(
name|font
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentFont
name|QFont
name|QGtk2FontDialogHelper
operator|::
name|currentFont
parameter_list|()
specifier|const
block|{
name|GtkFontSelectionDialog
modifier|*
name|gtkDialog
init|=
name|GTK_FONT_SELECTION_DIALOG
argument_list|(
name|d
operator|->
name|gtkDialog
argument_list|()
argument_list|)
decl_stmt|;
name|gchar
modifier|*
name|name
init|=
name|gtk_font_selection_dialog_get_font_name
argument_list|(
name|gtkDialog
argument_list|)
decl_stmt|;
name|QFont
name|font
init|=
name|qt_fontFromString
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|g_free
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|font
return|;
block|}
end_function
begin_function
DECL|function|onAccepted
name|void
name|QGtk2FontDialogHelper
operator|::
name|onAccepted
parameter_list|()
block|{
emit|emit
name|currentFontChanged
argument_list|(
name|currentFont
argument_list|()
argument_list|)
emit|;
emit|emit
name|accept
argument_list|()
emit|;
emit|emit
name|fontSelected
argument_list|(
name|currentFont
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|applyOptions
name|void
name|QGtk2FontDialogHelper
operator|::
name|applyOptions
parameter_list|()
block|{
name|GtkDialog
modifier|*
name|gtkDialog
init|=
name|d
operator|->
name|gtkDialog
argument_list|()
decl_stmt|;
specifier|const
name|QSharedPointer
argument_list|<
name|QFontDialogOptions
argument_list|>
modifier|&
name|opts
init|=
name|options
argument_list|()
decl_stmt|;
name|gtk_window_set_title
argument_list|(
name|GTK_WINDOW
argument_list|(
name|gtkDialog
argument_list|)
argument_list|,
name|opts
operator|->
name|windowTitle
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|GtkWidget
modifier|*
name|okButton
init|=
name|gtk_font_selection_dialog_get_ok_button
argument_list|(
name|GTK_FONT_SELECTION_DIALOG
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
name|GtkWidget
modifier|*
name|cancelButton
init|=
name|gtk_font_selection_dialog_get_cancel_button
argument_list|(
name|GTK_FONT_SELECTION_DIALOG
argument_list|(
name|gtkDialog
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|okButton
condition|)
name|gtk_widget_set_visible
argument_list|(
name|okButton
argument_list|,
operator|!
name|options
argument_list|()
operator|->
name|testOption
argument_list|(
name|QFontDialogOptions
operator|::
name|NoButtons
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cancelButton
condition|)
name|gtk_widget_set_visible
argument_list|(
name|cancelButton
argument_list|,
operator|!
name|options
argument_list|()
operator|->
name|testOption
argument_list|(
name|QFontDialogOptions
operator|::
name|NoButtons
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qgtk2dialoghelpers.moc"
end_include
end_unit
