begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|XKBCOMMON_WORKAROUND_H
end_ifndef
begin_define
DECL|macro|XKBCOMMON_WORKAROUND_H
define|#
directive|define
name|XKBCOMMON_WORKAROUND_H
end_define
begin_comment
comment|// Function utf32_to_utf8() is borrowed from the libxkbcommon library,
end_comment
begin_comment
comment|// file keysym-utf.c. The workaround should be removed once the fix from
end_comment
begin_comment
comment|// https://bugs.freedesktop.org/show_bug.cgi?id=56780 gets released.
end_comment
begin_function
DECL|function|utf32_to_utf8
specifier|static
name|int
name|utf32_to_utf8
parameter_list|(
name|uint32_t
name|unichar
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
block|{
name|int
name|count
decl_stmt|,
name|shift
decl_stmt|,
name|length
decl_stmt|;
name|uint8_t
name|head
decl_stmt|;
if|if
condition|(
name|unichar
operator|<=
literal|0x007f
condition|)
block|{
name|buffer
index|[
literal|0
index|]
operator|=
name|unichar
expr_stmt|;
name|buffer
index|[
literal|1
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
literal|2
return|;
block|}
elseif|else
if|if
condition|(
name|unichar
operator|<=
literal|0x07FF
condition|)
block|{
name|length
operator|=
literal|2
expr_stmt|;
name|head
operator|=
literal|0xc0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unichar
operator|<=
literal|0xffff
condition|)
block|{
name|length
operator|=
literal|3
expr_stmt|;
name|head
operator|=
literal|0xe0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unichar
operator|<=
literal|0x1fffff
condition|)
block|{
name|length
operator|=
literal|4
expr_stmt|;
name|head
operator|=
literal|0xf0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unichar
operator|<=
literal|0x3ffffff
condition|)
block|{
name|length
operator|=
literal|5
expr_stmt|;
name|head
operator|=
literal|0xf8
expr_stmt|;
block|}
else|else
block|{
name|length
operator|=
literal|6
expr_stmt|;
name|head
operator|=
literal|0xfc
expr_stmt|;
block|}
for|for
control|(
name|count
operator|=
name|length
operator|-
literal|1
operator|,
name|shift
operator|=
literal|0
init|;
name|count
operator|>
literal|0
condition|;
name|count
operator|--
operator|,
name|shift
operator|+=
literal|6
control|)
name|buffer
index|[
name|count
index|]
operator|=
literal|0x80
operator||
operator|(
operator|(
name|unichar
operator|>>
name|shift
operator|)
operator|&
literal|0x3f
operator|)
expr_stmt|;
name|buffer
index|[
literal|0
index|]
operator|=
name|head
operator||
operator|(
operator|(
name|unichar
operator|>>
name|shift
operator|)
operator|&
literal|0x3f
operator|)
expr_stmt|;
name|buffer
index|[
name|length
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
name|length
operator|+
literal|1
return|;
block|}
end_function
begin_function
DECL|function|needWorkaround
specifier|static
name|bool
name|needWorkaround
parameter_list|(
name|uint32_t
name|sym
parameter_list|)
block|{
comment|/* patch encoding botch */
if|if
condition|(
name|sym
operator|==
name|XKB_KEY_KP_Space
condition|)
return|return
name|true
return|;
comment|/* special keysyms */
if|if
condition|(
operator|(
name|sym
operator|>=
name|XKB_KEY_BackSpace
operator|&&
name|sym
operator|<=
name|XKB_KEY_Clear
operator|)
operator|||
operator|(
name|sym
operator|>=
name|XKB_KEY_KP_Multiply
operator|&&
name|sym
operator|<=
name|XKB_KEY_KP_9
operator|)
operator|||
name|sym
operator|==
name|XKB_KEY_Return
operator|||
name|sym
operator|==
name|XKB_KEY_Escape
operator|||
name|sym
operator|==
name|XKB_KEY_Delete
operator|||
name|sym
operator|==
name|XKB_KEY_KP_Tab
operator|||
name|sym
operator|==
name|XKB_KEY_KP_Enter
operator|||
name|sym
operator|==
name|XKB_KEY_KP_Equal
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// XKBCOMMON_WORKAROUND_H
end_comment
end_unit
