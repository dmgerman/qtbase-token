begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QIBUSPLATFORMINPUTCONTEXT_H
end_ifndef
begin_define
DECL|macro|QIBUSPLATFORMINPUTCONTEXT_H
define|#
directive|define
name|QIBUSPLATFORMINPUTCONTEXT_H
end_define
begin_include
include|#
directive|include
file|<qpa/qplatforminputcontext.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpointer.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/qdbuspendingreply.h>
end_include
begin_include
include|#
directive|include
file|<QLoggingCategory>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_LOGGING_CATEGORY
argument_list|(
name|qtQpaInputMethods
argument_list|)
name|class
name|QIBusPlatformInputContextPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDBusVariant
name|class
name|QDBusVariant
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QIBusFilterEventWatcher
range|:
name|public
name|QDBusPendingCallWatcher
block|{
name|public
operator|:
name|explicit
name|QIBusFilterEventWatcher
argument_list|(
argument|const QDBusPendingCall&call
argument_list|,
argument|QObject *parent =
literal|0
argument_list|,
argument|QObject *input =
literal|0
argument_list|,
argument|const Qt::KeyboardModifiers modifiers =
literal|0
argument_list|,
argument|const QVariantList arguments = QVariantList()
argument_list|)
operator|:
name|QDBusPendingCallWatcher
argument_list|(
name|call
argument_list|,
name|parent
argument_list|)
block|,
name|m_input
argument_list|(
name|input
argument_list|)
block|,
name|m_modifiers
argument_list|(
name|modifiers
argument_list|)
block|,
name|m_arguments
argument_list|(
argument|arguments
argument_list|)
block|{}
operator|~
name|QIBusFilterEventWatcher
argument_list|()
block|{}
specifier|inline
name|QObject
operator|*
name|input
argument_list|()
specifier|const
block|{
return|return
name|m_input
return|;
block|}
specifier|inline
specifier|const
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
argument_list|()
specifier|const
block|{
return|return
name|m_modifiers
return|;
block|}
specifier|inline
specifier|const
name|QVariantList
name|arguments
argument_list|()
specifier|const
block|{
return|return
name|m_arguments
return|;
block|}
name|private
operator|:
name|QPointer
operator|<
name|QObject
operator|>
name|m_input
block|;
specifier|const
name|Qt
operator|::
name|KeyboardModifiers
name|m_modifiers
block|;
specifier|const
name|QVariantList
name|m_arguments
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QIBusPlatformInputContext
range|:
name|public
name|QPlatformInputContext
block|{
name|Q_OBJECT
name|public
operator|:
name|QIBusPlatformInputContext
argument_list|()
block|;
operator|~
name|QIBusPlatformInputContext
argument_list|()
block|;
name|bool
name|isValid
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setFocusObject
argument_list|(
argument|QObject *object
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|invokeAction
argument_list|(
argument|QInputMethod::Action a
argument_list|,
argument|int x
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|reset
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|void
name|commit
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|void
name|update
argument_list|(
argument|Qt::InputMethodQueries
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|filterEvent
argument_list|(
argument|const QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|public
name|Q_SLOTS
operator|:
name|void
name|commitText
argument_list|(
specifier|const
name|QDBusVariant
operator|&
name|text
argument_list|)
block|;
name|void
name|updatePreeditText
argument_list|(
argument|const QDBusVariant&text
argument_list|,
argument|uint cursor_pos
argument_list|,
argument|bool visible
argument_list|)
block|;
name|void
name|cursorRectChanged
argument_list|()
block|;
name|void
name|deleteSurroundingText
argument_list|(
argument|int offset
argument_list|,
argument|uint n_chars
argument_list|)
block|;
name|void
name|surroundingTextRequired
argument_list|()
block|;
name|void
name|filterEventFinished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
name|call
argument_list|)
block|;
name|private
operator|:
name|QIBusPlatformInputContextPrivate
operator|*
name|d
block|;
name|bool
name|m_eventFilterUseSynchronousMode
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
