begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qibusplatforminputcontext.h"
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|<QTextCharFormat>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QDBusVariant>
end_include
begin_include
include|#
directive|include
file|<qwindow.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|"qibusproxy.h"
end_include
begin_include
include|#
directive|include
file|"qibusinputcontextproxy.h"
end_include
begin_include
include|#
directive|include
file|"qibustypes.h"
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<signal.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|enumerator|debug
name|enum
type|{
name|debug
init|=
literal|0
end_decl_stmt
begin_class
DECL|class|QIBusPlatformInputContextPrivate
unit|};
class|class
name|QIBusPlatformInputContextPrivate
block|{
public|public:
name|QIBusPlatformInputContextPrivate
parameter_list|()
constructor_decl|;
DECL|function|~QIBusPlatformInputContextPrivate
name|~
name|QIBusPlatformInputContextPrivate
parameter_list|()
block|{
operator|delete
name|context
expr_stmt|;
operator|delete
name|bus
expr_stmt|;
operator|delete
name|connection
expr_stmt|;
block|}
specifier|static
name|QDBusConnection
modifier|*
name|createConnection
parameter_list|()
function_decl|;
DECL|member|connection
name|QDBusConnection
modifier|*
name|connection
decl_stmt|;
DECL|member|bus
name|QIBusProxy
modifier|*
name|bus
decl_stmt|;
DECL|member|context
name|QIBusInputContextProxy
modifier|*
name|context
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
DECL|member|predit
name|QString
name|predit
decl_stmt|;
DECL|member|needsSurroundingText
name|bool
name|needsSurroundingText
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QIBusPlatformInputContext
name|QIBusPlatformInputContext
operator|::
name|QIBusPlatformInputContext
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QIBusPlatformInputContextPrivate
argument_list|()
argument_list|)
block|{
if|if
condition|(
name|d
operator|->
name|context
condition|)
block|{
name|connect
argument_list|(
name|d
operator|->
name|context
argument_list|,
name|SIGNAL
argument_list|(
name|CommitText
argument_list|(
name|QDBusVariant
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|commitText
argument_list|(
name|QDBusVariant
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|context
argument_list|,
name|SIGNAL
argument_list|(
name|UpdatePreeditText
argument_list|(
name|QDBusVariant
argument_list|,
name|uint
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updatePreeditText
argument_list|(
name|QDBusVariant
argument_list|,
name|uint
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|context
argument_list|,
name|SIGNAL
argument_list|(
name|DeleteSurroundingText
argument_list|(
name|int
argument_list|,
name|uint
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|deleteSurroundingText
argument_list|(
name|int
argument_list|,
name|uint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|context
argument_list|,
name|SIGNAL
argument_list|(
name|RequireSurroundingText
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|surroundingTextRequired
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QInputMethod
modifier|*
name|p
init|=
name|qApp
operator|->
name|inputMethod
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|p
argument_list|,
name|SIGNAL
argument_list|(
name|cursorRectangleChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|cursorRectChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QIBusPlatformInputContext
name|QIBusPlatformInputContext
operator|::
name|~
name|QIBusPlatformInputContext
parameter_list|(
name|void
parameter_list|)
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QIBusPlatformInputContext
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_function
DECL|function|invokeAction
name|void
name|QIBusPlatformInputContext
operator|::
name|invokeAction
parameter_list|(
name|QInputMethod
operator|::
name|Action
name|a
parameter_list|,
name|int
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|valid
condition|)
return|return;
if|if
condition|(
name|a
operator|==
name|QInputMethod
operator|::
name|Click
condition|)
name|commit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QIBusPlatformInputContext
operator|::
name|reset
parameter_list|()
block|{
name|QPlatformInputContext
operator|::
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|valid
condition|)
return|return;
name|d
operator|->
name|context
operator|->
name|Reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|predit
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|commit
name|void
name|QIBusPlatformInputContext
operator|::
name|commit
parameter_list|()
block|{
name|QPlatformInputContext
operator|::
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|valid
condition|)
return|return;
name|QObject
modifier|*
name|input
init|=
name|qApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
block|{
name|d
operator|->
name|predit
operator|=
name|QString
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|predit
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QInputMethodEvent
name|event
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|d
operator|->
name|predit
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|context
operator|->
name|Reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|predit
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|update
name|void
name|QIBusPlatformInputContext
operator|::
name|update
parameter_list|(
name|Qt
operator|::
name|InputMethodQueries
name|q
parameter_list|)
block|{
name|QObject
modifier|*
name|input
init|=
name|qApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|needsSurroundingText
operator|&&
name|input
operator|&&
operator|(
name|q
operator|.
name|testFlag
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|||
name|q
operator|.
name|testFlag
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|||
name|q
operator|.
name|testFlag
argument_list|(
name|Qt
operator|::
name|ImAnchorPosition
argument_list|)
operator|)
condition|)
block|{
name|QInputMethodQueryEvent
name|srrndTextQuery
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
decl_stmt|;
name|QInputMethodQueryEvent
name|cursorPosQuery
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
decl_stmt|;
name|QInputMethodQueryEvent
name|anchorPosQuery
argument_list|(
name|Qt
operator|::
name|ImAnchorPosition
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|srrndTextQuery
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|cursorPosQuery
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|anchorPosQuery
argument_list|)
expr_stmt|;
name|QString
name|surroundingText
init|=
name|srrndTextQuery
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|uint
name|cursorPosition
init|=
name|cursorPosQuery
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|uint
name|anchorPosition
init|=
name|anchorPosQuery
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImAnchorPosition
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
name|QIBusText
name|text
decl_stmt|;
name|text
operator|.
name|text
operator|=
name|surroundingText
expr_stmt|;
name|QVariant
name|variant
decl_stmt|;
name|variant
operator|.
name|setValue
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|QDBusVariant
name|dbusText
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|d
operator|->
name|context
operator|->
name|SetSurroundingText
argument_list|(
name|dbusText
argument_list|,
name|cursorPosition
argument_list|,
name|anchorPosition
argument_list|)
expr_stmt|;
block|}
name|QPlatformInputContext
operator|::
name|update
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorRectChanged
name|void
name|QIBusPlatformInputContext
operator|::
name|cursorRectChanged
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|valid
condition|)
return|return;
name|QRect
name|r
init|=
name|qApp
operator|->
name|inputMethod
argument_list|()
operator|->
name|cursorRectangle
argument_list|()
operator|.
name|toRect
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QWindow
modifier|*
name|inputWindow
init|=
name|qApp
operator|->
name|focusWindow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|inputWindow
condition|)
return|return;
name|r
operator|.
name|moveTopLeft
argument_list|(
name|inputWindow
operator|->
name|mapToGlobal
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"microFocus"
operator|<<
name|r
expr_stmt|;
name|d
operator|->
name|context
operator|->
name|SetCursorLocation
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFocusObject
name|void
name|QIBusPlatformInputContext
operator|::
name|setFocusObject
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|valid
condition|)
return|return;
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"setFocusObject"
operator|<<
name|object
expr_stmt|;
if|if
condition|(
name|object
condition|)
name|d
operator|->
name|context
operator|->
name|FocusIn
argument_list|()
expr_stmt|;
else|else
name|d
operator|->
name|context
operator|->
name|FocusOut
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|commitText
name|void
name|QIBusPlatformInputContext
operator|::
name|commitText
parameter_list|(
specifier|const
name|QDBusVariant
modifier|&
name|text
parameter_list|)
block|{
name|QObject
modifier|*
name|input
init|=
name|qApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return;
specifier|const
name|QDBusArgument
name|arg
init|=
name|text
operator|.
name|variant
argument_list|()
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
decl_stmt|;
name|QIBusText
name|t
decl_stmt|;
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|()
operator|<<
name|arg
operator|.
name|currentSignature
argument_list|()
expr_stmt|;
name|arg
operator|>>
name|t
expr_stmt|;
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"commit text:"
operator|<<
name|t
operator|.
name|text
expr_stmt|;
name|QInputMethodEvent
name|event
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|t
operator|.
name|text
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|d
operator|->
name|predit
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updatePreeditText
name|void
name|QIBusPlatformInputContext
operator|::
name|updatePreeditText
parameter_list|(
specifier|const
name|QDBusVariant
modifier|&
name|text
parameter_list|,
name|uint
name|cursorPos
parameter_list|,
name|bool
name|visible
parameter_list|)
block|{
name|QObject
modifier|*
name|input
init|=
name|qApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return;
specifier|const
name|QDBusArgument
name|arg
init|=
name|text
operator|.
name|variant
argument_list|()
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
decl_stmt|;
name|QIBusText
name|t
decl_stmt|;
name|arg
operator|>>
name|t
expr_stmt|;
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"preedit text:"
operator|<<
name|t
operator|.
name|text
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
init|=
name|t
operator|.
name|attributes
operator|.
name|imAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|attributes
operator|+=
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Cursor
argument_list|,
name|cursorPos
argument_list|,
name|visible
condition|?
literal|1
else|:
literal|0
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|t
operator|.
name|text
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|d
operator|->
name|predit
operator|=
name|t
operator|.
name|text
expr_stmt|;
block|}
end_function
begin_function
DECL|function|surroundingTextRequired
name|void
name|QIBusPlatformInputContext
operator|::
name|surroundingTextRequired
parameter_list|()
block|{
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"surroundingTextRequired"
expr_stmt|;
name|d
operator|->
name|needsSurroundingText
operator|=
literal|true
expr_stmt|;
name|update
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteSurroundingText
name|void
name|QIBusPlatformInputContext
operator|::
name|deleteSurroundingText
parameter_list|(
name|int
name|offset
parameter_list|,
name|uint
name|n_chars
parameter_list|)
block|{
name|QObject
modifier|*
name|input
init|=
name|qApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return;
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"deleteSurroundingText"
operator|<<
name|offset
operator|<<
name|n_chars
expr_stmt|;
name|QInputMethodEvent
name|event
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
literal|""
argument_list|,
name|offset
argument_list|,
name|n_chars
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|bool
DECL|function|x11FilterEvent
name|QIBusPlatformInputContext
operator|::
name|x11FilterEvent
parameter_list|(
name|uint
name|keyval
parameter_list|,
name|uint
name|keycode
parameter_list|,
name|uint
name|state
parameter_list|,
name|bool
name|press
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|valid
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|inputMethodAccepted
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|press
condition|)
return|return
literal|false
return|;
name|keycode
operator|-=
literal|8
expr_stmt|;
comment|// ###
name|QDBusReply
argument_list|<
name|bool
argument_list|>
name|reply
init|=
name|d
operator|->
name|context
operator|->
name|ProcessKeyEvent
argument_list|(
name|keyval
argument_list|,
name|keycode
argument_list|,
name|state
argument_list|)
decl_stmt|;
comment|//    qDebug()<< "x11FilterEvent return"<< reply.value();
return|return
name|reply
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|QIBusPlatformInputContextPrivate
name|QIBusPlatformInputContextPrivate
operator|::
name|QIBusPlatformInputContextPrivate
parameter_list|()
member_init_list|:
name|connection
argument_list|(
name|createConnection
argument_list|()
argument_list|)
member_init_list|,
name|bus
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|context
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|valid
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|needsSurroundingText
argument_list|(
literal|false
argument_list|)
block|{
if|if
condition|(
operator|!
name|connection
operator|||
operator|!
name|connection
operator|->
name|isConnected
argument_list|()
condition|)
return|return;
name|bus
operator|=
operator|new
name|QIBusProxy
argument_list|(
name|QLatin1String
argument_list|(
literal|"org.freedesktop.IBus"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"/org/freedesktop/IBus"
argument_list|)
argument_list|,
operator|*
name|connection
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bus
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QIBusPlatformInputContext: invalid bus."
argument_list|)
expr_stmt|;
return|return;
block|}
name|QDBusReply
argument_list|<
name|QDBusObjectPath
argument_list|>
name|ic
init|=
name|bus
operator|->
name|CreateInputContext
argument_list|(
name|QLatin1String
argument_list|(
literal|"QIBusInputContext"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ic
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QIBusPlatformInputContext: CreateInputContext failed."
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|=
operator|new
name|QIBusInputContextProxy
argument_list|(
name|QLatin1String
argument_list|(
literal|"org.freedesktop.IBus"
argument_list|)
argument_list|,
name|ic
operator|.
name|value
argument_list|()
operator|.
name|path
argument_list|()
argument_list|,
operator|*
name|connection
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QIBusPlatformInputContext: invalid input context."
argument_list|)
expr_stmt|;
return|return;
block|}
enum|enum
name|Capabilities
block|{
name|IBUS_CAP_PREEDIT_TEXT
init|=
literal|1
operator|<<
literal|0
block|,
name|IBUS_CAP_AUXILIARY_TEXT
init|=
literal|1
operator|<<
literal|1
block|,
name|IBUS_CAP_LOOKUP_TABLE
init|=
literal|1
operator|<<
literal|2
block|,
name|IBUS_CAP_FOCUS
init|=
literal|1
operator|<<
literal|3
block|,
name|IBUS_CAP_PROPERTY
init|=
literal|1
operator|<<
literal|4
block|,
name|IBUS_CAP_SURROUNDING_TEXT
init|=
literal|1
operator|<<
literal|5
block|}
enum|;
name|context
operator|->
name|SetCapabilities
argument_list|(
name|IBUS_CAP_PREEDIT_TEXT
operator||
name|IBUS_CAP_FOCUS
operator||
name|IBUS_CAP_SURROUNDING_TEXT
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|(
literal|">>>> valid!"
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|createConnection
name|QDBusConnection
modifier|*
name|QIBusPlatformInputContextPrivate
operator|::
name|createConnection
parameter_list|()
block|{
name|QByteArray
name|display
argument_list|(
name|getenv
argument_list|(
literal|"DISPLAY"
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|host
init|=
literal|"unix"
decl_stmt|;
name|QByteArray
name|displayNumber
init|=
literal|"0"
decl_stmt|;
name|int
name|pos
init|=
name|display
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
name|host
operator|=
name|display
operator|.
name|left
argument_list|(
name|pos
argument_list|)
expr_stmt|;
operator|++
name|pos
expr_stmt|;
name|int
name|pos2
init|=
name|display
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos2
operator|>
literal|0
condition|)
name|displayNumber
operator|=
name|display
operator|.
name|mid
argument_list|(
name|pos
argument_list|,
name|pos2
operator|-
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"host="
operator|<<
name|host
operator|<<
literal|"displayNumber"
operator|<<
name|displayNumber
expr_stmt|;
name|QFile
name|file
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/.config/ibus/bus/"
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|QDBusConnection
operator|::
name|localMachineId
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|host
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|displayNumber
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
literal|0
return|;
name|QByteArray
name|address
decl_stmt|;
name|int
name|pid
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|file
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|line
init|=
name|file
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|'#'
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"IBUS_ADDRESS="
argument_list|)
condition|)
name|address
operator|=
name|line
operator|.
name|mid
argument_list|(
sizeof|sizeof
argument_list|(
literal|"IBUS_ADDRESS="
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"IBUS_DAEMON_PID="
argument_list|)
condition|)
name|pid
operator|=
name|line
operator|.
name|mid
argument_list|(
sizeof|sizeof
argument_list|(
literal|"IBUS_DAEMON_PID="
argument_list|)
operator|-
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"IBUS_ADDRESS="
operator|<<
name|address
operator|<<
literal|"PID="
operator|<<
name|pid
expr_stmt|;
if|if
condition|(
name|address
operator|.
name|isEmpty
argument_list|()
operator|||
name|pid
operator|<
literal|0
operator|||
name|kill
argument_list|(
name|pid
argument_list|,
literal|0
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|0
return|;
return|return
operator|new
name|QDBusConnection
argument_list|(
name|QDBusConnection
operator|::
name|connectToBus
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|address
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"QIBusProxy"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
