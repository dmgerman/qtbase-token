begin_unit
begin_comment
comment|/*  * This file was generated by qdbusxml2cpp version 0.7  * Command line was: qdbusxml2cpp -N -p qibusproxy -c QIBusProxy interfaces/org.freedesktop.IBus.xml  *  * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.  *  * This is an auto-generated file.  * Do not edit! All changes made to it will be lost.  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QIBUSPROXY_H_1308831142
end_ifndef
begin_define
DECL|macro|QIBUSPROXY_H_1308831142
define|#
directive|define
name|QIBUSPROXY_H_1308831142
end_define
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMap>
end_include
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_include
include|#
directive|include
file|"qibustypes.h"
end_include
begin_comment
comment|/*  * Proxy class for interface org.freedesktop.IBus  */
end_comment
begin_decl_stmt
name|class
name|QIBusProxy
range|:
name|public
name|QDBusAbstractInterface
block|{
name|Q_OBJECT
name|public
operator|:
specifier|static
specifier|inline
specifier|const
name|char
operator|*
name|staticInterfaceName
argument_list|()
block|{
return|return
literal|"org.freedesktop.IBus"
return|;
block|}
specifier|static
specifier|inline
name|QString
name|dbusInterfaceProperties
argument_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"org.freedesktop.DBus.Properties"
argument_list|)
return|;
block|}
name|public
operator|:
name|QIBusProxy
argument_list|(
specifier|const
name|QString
operator|&
name|service
argument_list|,
specifier|const
name|QString
operator|&
name|path
argument_list|,
specifier|const
name|QDBusConnection
operator|&
name|connection
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QIBusProxy
argument_list|()
block|;
name|public
name|Q_SLOTS
operator|:
comment|// METHODS
specifier|inline
name|QDBusPendingReply
operator|<
name|QDBusObjectPath
operator|>
name|CreateInputContext
argument_list|(
argument|const QString&name
argument_list|)
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|name
argument_list|)
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QLatin1String
argument_list|(
literal|"CreateInputContext"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
specifier|inline
name|QDBusPendingReply
operator|<
operator|>
name|Exit
argument_list|(
argument|bool restart
argument_list|)
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|restart
argument_list|)
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QLatin1String
argument_list|(
literal|"Exit"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
specifier|inline
name|QDBusPendingReply
operator|<
name|QString
operator|>
name|GetAddress
argument_list|()
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetAddress"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
specifier|inline
name|QDBusPendingReply
operator|<
name|QVariantList
operator|>
name|ListActiveEngines
argument_list|()
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QLatin1String
argument_list|(
literal|"ListActiveEngines"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
specifier|inline
name|QDBusPendingReply
operator|<
name|QVariantList
operator|>
name|ListEngines
argument_list|()
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QLatin1String
argument_list|(
literal|"ListEngines"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
specifier|inline
name|QDBusPendingReply
operator|<
name|QDBusVariant
operator|>
name|Ping
argument_list|(
argument|const QDBusVariant&data
argument_list|)
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|data
argument_list|)
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QLatin1String
argument_list|(
literal|"Ping"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
specifier|inline
name|QDBusPendingReply
operator|<
operator|>
name|RegisterComponent
argument_list|(
argument|const QDBusVariant&components
argument_list|)
block|{
name|QList
operator|<
name|QVariant
operator|>
name|argumentList
block|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|components
argument_list|)
block|;
return|return
name|asyncCallWithArgumentList
argument_list|(
name|QLatin1String
argument_list|(
literal|"RegisterComponent"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
return|;
block|}
specifier|inline
name|QDBusPendingReply
operator|<
name|QDBusVariant
operator|>
name|GetGlobalEngine
argument_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|->
name|isValid
argument_list|()
operator|||
name|this
operator|->
name|service
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|this
operator|->
name|path
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QDBusMessage
operator|::
name|createError
argument_list|(
name|this
operator|->
name|lastError
argument_list|()
argument_list|)
return|;
name|QDBusMessage
name|msg
operator|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|this
operator|->
name|service
argument_list|()
argument_list|,
name|this
operator|->
name|path
argument_list|()
argument_list|,
name|dbusInterfaceProperties
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Get"
argument_list|)
argument_list|)
block|;
name|msg
operator|<<
name|this
operator|->
name|interface
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"GlobalEngine"
argument_list|)
block|;
return|return
name|this
operator|->
name|connection
argument_list|()
operator|.
name|asyncCall
argument_list|(
name|msg
argument_list|,
name|this
operator|->
name|timeout
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt
begin_function_decl
name|QIBusEngineDesc
name|getGlobalEngine
parameter_list|()
function_decl|;
end_function_decl
begin_label
name|private
label|:
end_label
begin_function_decl
name|void
name|globalEngineChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|engine_name
parameter_list|)
function_decl|;
end_function_decl
begin_label
name|Q_SIGNALS
label|:
end_label
begin_comment
comment|// SIGNALS
end_comment
begin_function_decl
name|void
name|GlobalEngineChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|engine_name
parameter_list|)
function_decl|;
end_function_decl
begin_endif
unit|};
endif|#
directive|endif
end_endif
end_unit
