begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qibustypes.h"
end_include
begin_include
include|#
directive|include
file|<qtextformat.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|QIBusSerializable
name|QIBusSerializable
operator|::
name|QIBusSerializable
parameter_list|()
block|{ }
end_function
begin_destructor
DECL|function|~QIBusSerializable
name|QIBusSerializable
operator|::
name|~
name|QIBusSerializable
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|fromDBusArgument
name|void
name|QIBusSerializable
operator|::
name|fromDBusArgument
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|arg
parameter_list|)
block|{
name|arg
operator|>>
name|name
expr_stmt|;
name|arg
operator|.
name|beginMap
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|arg
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|arg
operator|.
name|beginMapEntry
argument_list|()
expr_stmt|;
name|QString
name|key
decl_stmt|;
name|QDBusVariant
name|value
decl_stmt|;
name|arg
operator|>>
name|key
expr_stmt|;
name|arg
operator|>>
name|value
expr_stmt|;
name|arg
operator|.
name|endMapEntry
argument_list|()
expr_stmt|;
name|attachments
index|[
name|key
index|]
operator|=
name|value
operator|.
name|variant
argument_list|()
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|arg
operator|.
name|endMap
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QIBusAttribute
name|QIBusAttribute
operator|::
name|QIBusAttribute
parameter_list|()
member_init_list|:
name|type
argument_list|(
name|Invalid
argument_list|)
member_init_list|,
name|value
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|start
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|end
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QIBusAttribute
name|QIBusAttribute
operator|::
name|~
name|QIBusAttribute
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|fromDBusArgument
name|void
name|QIBusAttribute
operator|::
name|fromDBusArgument
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|arg
parameter_list|)
block|{
comment|//    qDebug()<< "QIBusAttribute::fromDBusArgument()"<< arg.currentSignature();
name|arg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|QIBusSerializable
operator|::
name|fromDBusArgument
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|quint32
name|t
decl_stmt|;
name|arg
operator|>>
name|t
expr_stmt|;
name|type
operator|=
operator|(
name|Type
operator|)
name|t
expr_stmt|;
name|arg
operator|>>
name|value
expr_stmt|;
name|arg
operator|>>
name|start
expr_stmt|;
name|arg
operator|>>
name|end
expr_stmt|;
name|arg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|format
name|QTextFormat
name|QIBusAttribute
operator|::
name|format
parameter_list|()
specifier|const
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Invalid
case|:
break|break;
case|case
name|Underline
case|:
block|{
name|QTextCharFormat
operator|::
name|UnderlineStyle
name|style
init|=
name|QTextCharFormat
operator|::
name|NoUnderline
decl_stmt|;
switch|switch
condition|(
name|value
condition|)
block|{
case|case
name|UnderlineNone
case|:
break|break;
case|case
name|UnderlineSingle
case|:
name|style
operator|=
name|QTextCharFormat
operator|::
name|SingleUnderline
expr_stmt|;
break|break;
case|case
name|UnderlineDouble
case|:
name|style
operator|=
name|QTextCharFormat
operator|::
name|DashUnderline
expr_stmt|;
break|break;
case|case
name|UnderlineLow
case|:
name|style
operator|=
name|QTextCharFormat
operator|::
name|DashDotLine
expr_stmt|;
break|break;
case|case
name|UnderlineError
case|:
name|style
operator|=
name|QTextCharFormat
operator|::
name|WaveUnderline
expr_stmt|;
name|fmt
operator|.
name|setUnderlineColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
break|break;
block|}
name|fmt
operator|.
name|setUnderlineStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Foreground
case|:
name|fmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Background
case|:
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|fmt
return|;
block|}
end_function
begin_constructor
DECL|function|QIBusAttributeList
name|QIBusAttributeList
operator|::
name|QIBusAttributeList
parameter_list|()
block|{  }
end_constructor
begin_destructor
DECL|function|~QIBusAttributeList
name|QIBusAttributeList
operator|::
name|~
name|QIBusAttributeList
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|fromDBusArgument
name|void
name|QIBusAttributeList
operator|::
name|fromDBusArgument
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|arg
parameter_list|)
block|{
comment|//    qDebug()<< "QIBusAttributeList::fromDBusArgument()"<< arg.currentSignature();
name|arg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|QIBusSerializable
operator|::
name|fromDBusArgument
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|arg
operator|.
name|beginArray
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|arg
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QDBusVariant
name|var
decl_stmt|;
name|arg
operator|>>
name|var
expr_stmt|;
name|QIBusAttribute
name|attr
decl_stmt|;
name|attr
operator|.
name|fromDBusArgument
argument_list|(
name|var
operator|.
name|variant
argument_list|()
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
name|arg
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|arg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|imAttributes
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|QIBusAttributeList
operator|::
name|imAttributes
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|imAttrs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QIBusAttribute
modifier|&
name|attr
init|=
name|attributes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|imAttrs
operator|+=
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
name|attr
operator|.
name|start
argument_list|,
name|attr
operator|.
name|end
operator|-
name|attr
operator|.
name|start
argument_list|,
name|attr
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|imAttrs
return|;
block|}
end_function
begin_constructor
DECL|function|QIBusText
name|QIBusText
operator|::
name|QIBusText
parameter_list|()
block|{  }
end_constructor
begin_destructor
DECL|function|~QIBusText
name|QIBusText
operator|::
name|~
name|QIBusText
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|fromDBusArgument
name|void
name|QIBusText
operator|::
name|fromDBusArgument
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|arg
parameter_list|)
block|{
comment|//    qDebug()<< "QIBusText::fromDBusArgument()"<< arg.currentSignature();
name|arg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|QIBusSerializable
operator|::
name|fromDBusArgument
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|arg
operator|>>
name|text
expr_stmt|;
name|QDBusVariant
name|variant
decl_stmt|;
name|arg
operator|>>
name|variant
expr_stmt|;
name|attributes
operator|.
name|fromDBusArgument
argument_list|(
name|variant
operator|.
name|variant
argument_list|()
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|arg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
