begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qibustypes.h"
end_include
begin_include
include|#
directive|include
file|<QtDBus>
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|QIBusSerializable
name|QIBusSerializable
operator|::
name|QIBusSerializable
parameter_list|()
block|{ }
end_function
begin_destructor
DECL|function|~QIBusSerializable
name|QIBusSerializable
operator|::
name|~
name|QIBusSerializable
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|operator >>
specifier|const
name|QDBusArgument
modifier|&
name|operator
name|>>
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|argument
parameter_list|,
name|QIBusSerializable
modifier|&
name|object
parameter_list|)
block|{
name|argument
operator|>>
name|object
operator|.
name|name
expr_stmt|;
name|argument
operator|.
name|beginMap
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|argument
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|argument
operator|.
name|beginMapEntry
argument_list|()
expr_stmt|;
name|QString
name|key
decl_stmt|;
name|QDBusVariant
name|value
decl_stmt|;
name|argument
operator|>>
name|key
expr_stmt|;
name|argument
operator|>>
name|value
expr_stmt|;
name|argument
operator|.
name|endMapEntry
argument_list|()
expr_stmt|;
name|object
operator|.
name|attachments
index|[
name|key
index|]
operator|=
name|value
operator|.
name|variant
argument_list|()
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|argument
operator|.
name|endMap
argument_list|()
expr_stmt|;
return|return
name|argument
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDBusArgument
modifier|&
name|operator
name|<<
parameter_list|(
name|QDBusArgument
modifier|&
name|argument
parameter_list|,
specifier|const
name|QIBusSerializable
modifier|&
name|object
parameter_list|)
block|{
name|argument
operator|<<
name|object
operator|.
name|name
expr_stmt|;
name|argument
operator|.
name|beginMap
argument_list|(
name|qMetaTypeId
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|QDBusArgument
argument_list|>
name|i
argument_list|(
name|object
operator|.
name|attachments
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|argument
operator|.
name|beginMapEntry
argument_list|()
expr_stmt|;
name|argument
operator|<<
name|i
operator|.
name|key
argument_list|()
expr_stmt|;
name|QDBusVariant
name|variant
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|.
name|asVariant
argument_list|()
argument_list|)
decl_stmt|;
name|argument
operator|<<
name|variant
expr_stmt|;
name|argument
operator|.
name|endMapEntry
argument_list|()
expr_stmt|;
block|}
name|argument
operator|.
name|endMap
argument_list|()
expr_stmt|;
return|return
name|argument
return|;
block|}
end_function
begin_constructor
DECL|function|QIBusAttribute
name|QIBusAttribute
operator|::
name|QIBusAttribute
parameter_list|()
member_init_list|:
name|type
argument_list|(
name|Invalid
argument_list|)
member_init_list|,
name|value
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|start
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|end
argument_list|(
literal|0
argument_list|)
block|{
name|name
operator|=
literal|"IBusAttribute"
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QIBusAttribute
name|QIBusAttribute
operator|::
name|~
name|QIBusAttribute
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|operator <<
name|QDBusArgument
modifier|&
name|operator
name|<<
parameter_list|(
name|QDBusArgument
modifier|&
name|argument
parameter_list|,
specifier|const
name|QIBusAttribute
modifier|&
name|attribute
parameter_list|)
block|{
name|argument
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|argument
operator|<<
cast|static_cast
argument_list|<
specifier|const
name|QIBusSerializable
operator|&
argument_list|>
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|quint32
name|t
init|=
operator|(
name|quint32
operator|)
name|attribute
operator|.
name|type
decl_stmt|;
name|argument
operator|<<
name|t
expr_stmt|;
name|argument
operator|<<
name|attribute
operator|.
name|value
expr_stmt|;
name|argument
operator|<<
name|attribute
operator|.
name|start
expr_stmt|;
name|argument
operator|<<
name|attribute
operator|.
name|end
expr_stmt|;
name|argument
operator|.
name|endStructure
argument_list|()
expr_stmt|;
return|return
name|argument
return|;
block|}
end_function
begin_function
DECL|function|operator >>
specifier|const
name|QDBusArgument
modifier|&
name|operator
name|>>
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|argument
parameter_list|,
name|QIBusAttribute
modifier|&
name|attribute
parameter_list|)
block|{
name|argument
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|argument
operator|>>
cast|static_cast
argument_list|<
name|QIBusSerializable
operator|&
argument_list|>
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|quint32
name|t
decl_stmt|;
name|argument
operator|>>
name|t
expr_stmt|;
name|attribute
operator|.
name|type
operator|=
operator|(
name|QIBusAttribute
operator|::
name|Type
operator|)
name|t
expr_stmt|;
name|argument
operator|>>
name|attribute
operator|.
name|value
expr_stmt|;
name|argument
operator|>>
name|attribute
operator|.
name|start
expr_stmt|;
name|argument
operator|>>
name|attribute
operator|.
name|end
expr_stmt|;
name|argument
operator|.
name|endStructure
argument_list|()
expr_stmt|;
return|return
name|argument
return|;
block|}
end_function
begin_function
DECL|function|format
name|QTextCharFormat
name|QIBusAttribute
operator|::
name|format
parameter_list|()
specifier|const
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Invalid
case|:
break|break;
case|case
name|Underline
case|:
block|{
name|QTextCharFormat
operator|::
name|UnderlineStyle
name|style
init|=
name|QTextCharFormat
operator|::
name|NoUnderline
decl_stmt|;
switch|switch
condition|(
name|value
condition|)
block|{
case|case
name|UnderlineNone
case|:
break|break;
case|case
name|UnderlineSingle
case|:
name|style
operator|=
name|QTextCharFormat
operator|::
name|SingleUnderline
expr_stmt|;
break|break;
case|case
name|UnderlineDouble
case|:
name|style
operator|=
name|QTextCharFormat
operator|::
name|DashUnderline
expr_stmt|;
break|break;
case|case
name|UnderlineLow
case|:
name|style
operator|=
name|QTextCharFormat
operator|::
name|DashDotLine
expr_stmt|;
break|break;
case|case
name|UnderlineError
case|:
name|style
operator|=
name|QTextCharFormat
operator|::
name|WaveUnderline
expr_stmt|;
name|fmt
operator|.
name|setUnderlineColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
break|break;
block|}
name|fmt
operator|.
name|setUnderlineStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Foreground
case|:
name|fmt
operator|.
name|setForeground
argument_list|(
name|QColor
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Background
case|:
name|fmt
operator|.
name|setBackground
argument_list|(
name|QColor
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|fmt
return|;
block|}
end_function
begin_constructor
DECL|function|QIBusAttributeList
name|QIBusAttributeList
operator|::
name|QIBusAttributeList
parameter_list|()
block|{
name|name
operator|=
literal|"IBusAttrList"
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QIBusAttributeList
name|QIBusAttributeList
operator|::
name|~
name|QIBusAttributeList
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|operator <<
name|QDBusArgument
modifier|&
name|operator
name|<<
parameter_list|(
name|QDBusArgument
modifier|&
name|argument
parameter_list|,
specifier|const
name|QIBusAttributeList
modifier|&
name|attrList
parameter_list|)
block|{
name|argument
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|argument
operator|<<
cast|static_cast
argument_list|<
specifier|const
name|QIBusSerializable
operator|&
argument_list|>
argument_list|(
name|attrList
argument_list|)
expr_stmt|;
name|argument
operator|.
name|beginArray
argument_list|(
name|qMetaTypeId
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrList
operator|.
name|attributes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVariant
name|variant
decl_stmt|;
name|variant
operator|.
name|setValue
argument_list|(
name|attrList
operator|.
name|attributes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|argument
operator|<<
name|QDBusVariant
argument_list|(
name|variant
argument_list|)
expr_stmt|;
block|}
name|argument
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|argument
operator|.
name|endStructure
argument_list|()
expr_stmt|;
return|return
name|argument
return|;
block|}
end_function
begin_function
DECL|function|operator >>
specifier|const
name|QDBusArgument
modifier|&
name|operator
name|>>
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|arg
parameter_list|,
name|QIBusAttributeList
modifier|&
name|attrList
parameter_list|)
block|{
comment|//    qDebug()<< "QIBusAttributeList::fromDBusArgument()"<< arg.currentSignature();
name|arg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|arg
operator|>>
cast|static_cast
argument_list|<
name|QIBusSerializable
operator|&
argument_list|>
argument_list|(
name|attrList
argument_list|)
expr_stmt|;
name|arg
operator|.
name|beginArray
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|arg
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QDBusVariant
name|var
decl_stmt|;
name|arg
operator|>>
name|var
expr_stmt|;
name|QIBusAttribute
name|attr
decl_stmt|;
name|var
operator|.
name|variant
argument_list|()
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
operator|>>
name|attr
expr_stmt|;
name|attrList
operator|.
name|attributes
operator|.
name|append
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
name|arg
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|arg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
return|return
name|arg
return|;
block|}
end_function
begin_function
DECL|function|imAttributes
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|QIBusAttributeList
operator|::
name|imAttributes
parameter_list|()
specifier|const
block|{
name|QHash
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|,
name|QTextCharFormat
argument_list|>
name|rangeAttrs
decl_stmt|;
specifier|const
name|int
name|numAttributes
init|=
name|attributes
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Merge text fomats for identical ranges into a single QTextFormat.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAttributes
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QIBusAttribute
modifier|&
name|attr
init|=
name|attributes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QTextCharFormat
modifier|&
name|format
init|=
name|attr
operator|.
name|format
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|range
argument_list|(
name|attr
operator|.
name|start
argument_list|,
name|attr
operator|.
name|end
argument_list|)
decl_stmt|;
name|rangeAttrs
index|[
name|range
index|]
operator|.
name|merge
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Assemble list in original attribute order.
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|imAttrs
decl_stmt|;
name|imAttrs
operator|.
name|reserve
argument_list|(
name|numAttributes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAttributes
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QIBusAttribute
modifier|&
name|attr
init|=
name|attributes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QTextFormat
modifier|&
name|format
init|=
name|attr
operator|.
name|format
argument_list|()
decl_stmt|;
name|imAttrs
operator|+=
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
name|attr
operator|.
name|start
argument_list|,
name|attr
operator|.
name|end
operator|-
name|attr
operator|.
name|start
argument_list|,
name|format
operator|.
name|isValid
argument_list|()
condition|?
name|rangeAttrs
index|[
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|(
name|attr
operator|.
name|start
argument_list|,
name|attr
operator|.
name|end
argument_list|)
index|]
else|:
name|format
argument_list|)
expr_stmt|;
block|}
return|return
name|imAttrs
return|;
block|}
end_function
begin_constructor
DECL|function|QIBusText
name|QIBusText
operator|::
name|QIBusText
parameter_list|()
block|{
name|name
operator|=
literal|"IBusText"
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QIBusText
name|QIBusText
operator|::
name|~
name|QIBusText
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|operator <<
name|QDBusArgument
modifier|&
name|operator
name|<<
parameter_list|(
name|QDBusArgument
modifier|&
name|argument
parameter_list|,
specifier|const
name|QIBusText
modifier|&
name|text
parameter_list|)
block|{
name|argument
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|argument
operator|<<
cast|static_cast
argument_list|<
specifier|const
name|QIBusSerializable
operator|&
argument_list|>
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|argument
operator|<<
name|text
operator|.
name|text
operator|<<
name|text
operator|.
name|attributes
expr_stmt|;
name|argument
operator|.
name|endStructure
argument_list|()
expr_stmt|;
return|return
name|argument
return|;
block|}
end_function
begin_function
DECL|function|operator >>
specifier|const
name|QDBusArgument
modifier|&
name|operator
name|>>
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|argument
parameter_list|,
name|QIBusText
modifier|&
name|text
parameter_list|)
block|{
comment|//    qDebug()<< "QIBusText::fromDBusArgument()"<< arg.currentSignature();
name|argument
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|argument
operator|>>
cast|static_cast
argument_list|<
name|QIBusSerializable
operator|&
argument_list|>
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|argument
operator|>>
name|text
operator|.
name|text
expr_stmt|;
name|QDBusVariant
name|variant
decl_stmt|;
name|argument
operator|>>
name|variant
expr_stmt|;
name|variant
operator|.
name|variant
argument_list|()
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
operator|>>
name|text
operator|.
name|attributes
expr_stmt|;
name|argument
operator|.
name|endStructure
argument_list|()
expr_stmt|;
return|return
name|argument
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
