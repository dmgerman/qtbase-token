begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qscreenvnc_qws.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_VNC
end_ifndef
begin_include
include|#
directive|include
file|"qscreenvnc_p.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsystem_qws.h"
end_include
begin_include
include|#
directive|include
file|"qwsdisplay_qws.h"
end_include
begin_include
include|#
directive|include
file|"qscreendriverfactory_qws.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qtimer.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qregexp.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpolygon.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_qws_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwssignalhandler_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
comment|//#define QT_QWS_VNC_DEBUG
specifier|extern
name|QString
name|qws_qtePipeFilename
parameter_list|()
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
end_ifndef
begin_constructor
DECL|function|QVNCCursor
name|QVNCCursor
operator|::
name|QVNCCursor
parameter_list|(
name|QVNCScreen
modifier|*
name|s
parameter_list|)
member_init_list|:
name|screen
argument_list|(
name|s
argument_list|)
block|{
if|if
condition|(
name|qt_screencursor
condition|)
name|setScreenCursor
argument_list|(
name|qt_screencursor
argument_list|)
expr_stmt|;
else|else
name|hwaccel
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QVNCCursor
name|QVNCCursor
operator|::
name|~
name|QVNCCursor
parameter_list|()
block|{
if|if
condition|(
name|screenCursor
argument_list|()
condition|)
name|qt_screencursor
operator|=
name|screenCursor
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setDirty
name|void
name|QVNCCursor
operator|::
name|setDirty
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
specifier|const
block|{
name|screen
operator|->
name|d_ptr
operator|->
name|setDirty
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QVNCCursor
operator|::
name|hide
parameter_list|()
block|{
name|QProxyScreenCursor
operator|::
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|enable
condition|)
name|setDirty
argument_list|(
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|show
name|void
name|QVNCCursor
operator|::
name|show
parameter_list|()
block|{
name|QProxyScreenCursor
operator|::
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|enable
condition|)
name|setDirty
argument_list|(
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|set
name|void
name|QVNCCursor
operator|::
name|set
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|hotx
parameter_list|,
name|int
name|hoty
parameter_list|)
block|{
name|QRegion
name|dirty
init|=
name|boundingRect
argument_list|()
decl_stmt|;
name|QProxyScreenCursor
operator|::
name|set
argument_list|(
name|image
argument_list|,
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|boundingRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|enable
operator|&&
name|hwaccel
operator|&&
operator|!
name|screen
operator|->
name|d_ptr
operator|->
name|vncServer
operator|->
name|hasClientCursor
argument_list|()
condition|)
block|{
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|dirty
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|setDirty
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|move
name|void
name|QVNCCursor
operator|::
name|move
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
if|if
condition|(
name|enable
operator|&&
name|hwaccel
operator|&&
operator|!
name|screen
operator|->
name|d_ptr
operator|->
name|vncServer
operator|->
name|hasClientCursor
argument_list|()
condition|)
block|{
name|QRegion
name|dirty
init|=
name|boundingRect
argument_list|()
decl_stmt|;
name|QProxyScreenCursor
operator|::
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|dirty
operator||=
name|boundingRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|enable
condition|)
block|{
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|dirty
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|setDirty
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QProxyScreenCursor
operator|::
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QVNCClientCursor
name|QVNCClientCursor
operator|::
name|QVNCClientCursor
parameter_list|(
name|QVNCServer
modifier|*
name|s
parameter_list|)
member_init_list|:
name|server
argument_list|(
name|s
argument_list|)
block|{
name|setScreenCursor
argument_list|(
name|qt_screencursor
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|hwaccel
argument_list|)
expr_stmt|;
name|qt_screencursor
operator|=
name|this
expr_stmt|;
comment|// hw: XXX
name|set
argument_list|(
name|image
argument_list|()
argument_list|,
name|hotspot
operator|.
name|x
argument_list|()
argument_list|,
name|hotspot
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QVNCClientCursor
name|QVNCClientCursor
operator|::
name|~
name|QVNCClientCursor
parameter_list|()
block|{
name|qt_screencursor
operator|=
name|screenCursor
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|set
name|void
name|QVNCClientCursor
operator|::
name|set
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|hotx
parameter_list|,
name|int
name|hoty
parameter_list|)
block|{
name|QScreenCursor
operator|::
name|set
argument_list|(
name|image
argument_list|,
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
name|server
operator|->
name|setDirtyCursor
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|QVNCClientCursor
operator|::
name|write
parameter_list|()
specifier|const
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|server
operator|->
name|clientSocket
argument_list|()
decl_stmt|;
comment|// FramebufferUpdate header
block|{
specifier|const
name|quint16
name|tmp
index|[
literal|6
index|]
init|=
block|{
name|htons
argument_list|(
literal|0
argument_list|)
block|,
name|htons
argument_list|(
literal|1
argument_list|)
block|,
name|htons
argument_list|(
name|hotspot
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|htons
argument_list|(
name|hotspot
operator|.
name|y
argument_list|()
argument_list|)
block|,
name|htons
argument_list|(
name|cursor
operator|.
name|width
argument_list|()
argument_list|)
block|,
name|htons
argument_list|(
argument|cursor.height()
argument_list|)
block|}
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|tmp
argument_list|,
sizeof|sizeof
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|quint32
name|encoding
init|=
name|htonl
argument_list|(
operator|-
literal|239
argument_list|)
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|(
operator|&
name|encoding
operator|)
argument_list|,
sizeof|sizeof
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cursor
operator|.
name|isNull
argument_list|()
condition|)
return|return;
comment|// write pixels
name|Q_ASSERT
argument_list|(
name|cursor
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QImage
name|img
init|=
name|cursor
operator|.
name|convertToFormat
argument_list|(
name|server
operator|->
name|screen
argument_list|()
operator|->
name|pixelFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|n
init|=
name|server
operator|->
name|clientBytesPerPixel
argument_list|()
operator|*
name|img
operator|.
name|width
argument_list|()
decl_stmt|;
name|char
modifier|*
name|buffer
init|=
operator|new
name|char
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|img
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|server
operator|->
name|convertPixels
argument_list|(
name|buffer
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|img
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|buffer
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|buffer
expr_stmt|;
comment|// write mask
specifier|const
name|QImage
name|bitmap
init|=
name|cursor
operator|.
name|createAlphaMask
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|bitmap
operator|.
name|depth
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|bitmap
operator|.
name|size
argument_list|()
operator|==
name|img
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|width
init|=
operator|(
name|bitmap
operator|.
name|width
argument_list|()
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bitmap
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
name|socket
operator|->
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|bitmap
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_CURSOR
end_comment
begin_constructor
DECL|function|QVNCScreenPrivate
name|QVNCScreenPrivate
operator|::
name|QVNCScreenPrivate
parameter_list|(
name|QVNCScreen
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|dpiX
argument_list|(
literal|72
argument_list|)
member_init_list|,
name|dpiY
argument_list|(
literal|72
argument_list|)
member_init_list|,
name|doOnScreenSurface
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|refreshRate
argument_list|(
literal|25
argument_list|)
member_init_list|,
name|vncServer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|q_ptr
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|noDisablePainting
argument_list|(
literal|false
argument_list|)
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|noDisablePainting
operator|=
operator|(
name|qgetenv
argument_list|(
literal|"QT_VNC_NO_DISABLEPAINTING"
argument_list|)
operator|.
name|toInt
argument_list|()
operator|>
literal|0
operator|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_SIGNALHANDLER
name|QWSSignalHandler
operator|::
name|instance
argument_list|()
operator|->
name|addObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QVNCScreenPrivate
name|QVNCScreenPrivate
operator|::
name|~
name|QVNCScreenPrivate
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_QWS_MULTIPROCESS
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_NO_SHAREDMEMORY
argument_list|)
if|if
condition|(
name|q_ptr
operator|->
name|screen
argument_list|()
condition|)
return|return;
operator|delete
index|[]
name|q_ptr
operator|->
name|data
expr_stmt|;
name|q_ptr
operator|->
name|data
operator|=
literal|0
expr_stmt|;
else|#
directive|else
name|shm
operator|.
name|detach
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|configure
name|void
name|QVNCScreenPrivate
operator|::
name|configure
parameter_list|()
block|{
if|if
condition|(
name|q_ptr
operator|->
name|screen
argument_list|()
condition|)
return|return;
name|q_ptr
operator|->
name|lstep
operator|=
name|q_ptr
operator|->
name|dw
operator|*
operator|(
operator|(
name|q_ptr
operator|->
name|d
operator|+
literal|7
operator|)
operator|/
literal|8
operator|)
expr_stmt|;
name|q_ptr
operator|->
name|size
operator|=
name|q_ptr
operator|->
name|h
operator|*
name|q_ptr
operator|->
name|lstep
expr_stmt|;
name|q_ptr
operator|->
name|mapsize
operator|=
name|q_ptr
operator|->
name|size
expr_stmt|;
name|q_ptr
operator|->
name|physWidth
operator|=
name|qRound
argument_list|(
name|q_ptr
operator|->
name|dw
operator|*
name|qreal
argument_list|(
literal|25.4
argument_list|)
operator|/
name|dpiX
argument_list|)
expr_stmt|;
name|q_ptr
operator|->
name|physHeight
operator|=
name|qRound
argument_list|(
name|q_ptr
operator|->
name|dh
operator|*
name|qreal
argument_list|(
literal|25.4
argument_list|)
operator|/
name|dpiY
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|q_ptr
operator|->
name|d
condition|)
block|{
case|case
literal|1
case|:
name|q_ptr
operator|->
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
comment|//### LSB???
break|break;
case|case
literal|8
case|:
name|q_ptr
operator|->
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|q_ptr
operator|->
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB444
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|q_ptr
operator|->
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|q_ptr
operator|->
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|q_ptr
operator|->
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB666
argument_list|)
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|q_ptr
operator|->
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
expr_stmt|;
break|break;
case|case
literal|32
case|:
name|q_ptr
operator|->
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
break|break;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_MULTIPROCESS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SHAREDMEMORY
argument_list|)
if|if
condition|(
name|q_ptr
operator|->
name|size
operator|!=
name|shm
operator|.
name|size
argument_list|()
condition|)
block|{
name|shm
operator|.
name|detach
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|key
init|=
name|qws_qtePipeFilename
argument_list|()
operator|+
name|QString
argument_list|()
operator|.
name|sprintf
argument_list|(
literal|"_vnc_%d_%d"
argument_list|,
name|q_ptr
operator|->
name|displayId
argument_list|,
name|q_ptr
operator|->
name|size
argument_list|)
decl_stmt|;
name|shm
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|type
argument_list|()
operator|==
name|QApplication
operator|::
name|GuiServer
condition|)
block|{
if|if
condition|(
operator|!
name|shm
operator|.
name|create
argument_list|(
name|q_ptr
operator|->
name|size
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QVNCScreen could not create shared memory:"
operator|<<
name|shm
operator|.
name|errorString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|shm
operator|.
name|attach
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QVNCScreen could not attach to shared memory:"
operator|<<
name|shm
operator|.
name|errorString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|shm
operator|.
name|attach
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QVNCScreen could not attach to shared memory:"
operator|<<
name|shm
operator|.
name|errorString
argument_list|()
expr_stmt|;
block|}
name|q_ptr
operator|->
name|data
operator|=
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|shm
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
if|if
condition|(
name|q_ptr
operator|->
name|data
condition|)
operator|delete
index|[]
name|q_ptr
operator|->
name|data
expr_stmt|;
name|q_ptr
operator|->
name|data
operator|=
operator|new
name|uchar
index|[
name|q_ptr
operator|->
name|size
index|]
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//===========================================================================
end_comment
begin_struct
specifier|static
specifier|const
struct|struct
block|{
DECL|member|keysym
name|int
name|keysym
decl_stmt|;
DECL|member|keycode
name|int
name|keycode
decl_stmt|;
block|}
DECL|variable|keyMap
name|keyMap
index|[]
init|=
block|{
block|{
literal|0xff08
block|,
name|Qt
operator|::
name|Key_Backspace
block|}
block|,
block|{
literal|0xff09
block|,
name|Qt
operator|::
name|Key_Tab
block|}
block|,
block|{
literal|0xff0d
block|,
name|Qt
operator|::
name|Key_Return
block|}
block|,
block|{
literal|0xff1b
block|,
name|Qt
operator|::
name|Key_Escape
block|}
block|,
block|{
literal|0xff63
block|,
name|Qt
operator|::
name|Key_Insert
block|}
block|,
block|{
literal|0xffff
block|,
name|Qt
operator|::
name|Key_Delete
block|}
block|,
block|{
literal|0xff50
block|,
name|Qt
operator|::
name|Key_Home
block|}
block|,
block|{
literal|0xff57
block|,
name|Qt
operator|::
name|Key_End
block|}
block|,
block|{
literal|0xff55
block|,
name|Qt
operator|::
name|Key_PageUp
block|}
block|,
block|{
literal|0xff56
block|,
name|Qt
operator|::
name|Key_PageDown
block|}
block|,
block|{
literal|0xff51
block|,
name|Qt
operator|::
name|Key_Left
block|}
block|,
block|{
literal|0xff52
block|,
name|Qt
operator|::
name|Key_Up
block|}
block|,
block|{
literal|0xff53
block|,
name|Qt
operator|::
name|Key_Right
block|}
block|,
block|{
literal|0xff54
block|,
name|Qt
operator|::
name|Key_Down
block|}
block|,
block|{
literal|0xffbe
block|,
name|Qt
operator|::
name|Key_F1
block|}
block|,
block|{
literal|0xffbf
block|,
name|Qt
operator|::
name|Key_F2
block|}
block|,
block|{
literal|0xffc0
block|,
name|Qt
operator|::
name|Key_F3
block|}
block|,
block|{
literal|0xffc1
block|,
name|Qt
operator|::
name|Key_F4
block|}
block|,
block|{
literal|0xffc2
block|,
name|Qt
operator|::
name|Key_F5
block|}
block|,
block|{
literal|0xffc3
block|,
name|Qt
operator|::
name|Key_F6
block|}
block|,
block|{
literal|0xffc4
block|,
name|Qt
operator|::
name|Key_F7
block|}
block|,
block|{
literal|0xffc5
block|,
name|Qt
operator|::
name|Key_F8
block|}
block|,
block|{
literal|0xffc6
block|,
name|Qt
operator|::
name|Key_F9
block|}
block|,
block|{
literal|0xffc7
block|,
name|Qt
operator|::
name|Key_F10
block|}
block|,
block|{
literal|0xffc8
block|,
name|Qt
operator|::
name|Key_F11
block|}
block|,
block|{
literal|0xffc9
block|,
name|Qt
operator|::
name|Key_F12
block|}
block|,
block|{
literal|0xffe1
block|,
name|Qt
operator|::
name|Key_Shift
block|}
block|,
block|{
literal|0xffe2
block|,
name|Qt
operator|::
name|Key_Shift
block|}
block|,
block|{
literal|0xffe3
block|,
name|Qt
operator|::
name|Key_Control
block|}
block|,
block|{
literal|0xffe4
block|,
name|Qt
operator|::
name|Key_Control
block|}
block|,
block|{
literal|0xffe7
block|,
name|Qt
operator|::
name|Key_Meta
block|}
block|,
block|{
literal|0xffe8
block|,
name|Qt
operator|::
name|Key_Meta
block|}
block|,
block|{
literal|0xffe9
block|,
name|Qt
operator|::
name|Key_Alt
block|}
block|,
block|{
literal|0xffea
block|,
name|Qt
operator|::
name|Key_Alt
block|}
block|,
block|{
literal|0xffb0
block|,
name|Qt
operator|::
name|Key_0
block|}
block|,
block|{
literal|0xffb1
block|,
name|Qt
operator|::
name|Key_1
block|}
block|,
block|{
literal|0xffb2
block|,
name|Qt
operator|::
name|Key_2
block|}
block|,
block|{
literal|0xffb3
block|,
name|Qt
operator|::
name|Key_3
block|}
block|,
block|{
literal|0xffb4
block|,
name|Qt
operator|::
name|Key_4
block|}
block|,
block|{
literal|0xffb5
block|,
name|Qt
operator|::
name|Key_5
block|}
block|,
block|{
literal|0xffb6
block|,
name|Qt
operator|::
name|Key_6
block|}
block|,
block|{
literal|0xffb7
block|,
name|Qt
operator|::
name|Key_7
block|}
block|,
block|{
literal|0xffb8
block|,
name|Qt
operator|::
name|Key_8
block|}
block|,
block|{
literal|0xffb9
block|,
name|Qt
operator|::
name|Key_9
block|}
block|,
block|{
literal|0xff8d
block|,
name|Qt
operator|::
name|Key_Return
block|}
block|,
block|{
literal|0xffaa
block|,
name|Qt
operator|::
name|Key_Asterisk
block|}
block|,
block|{
literal|0xffab
block|,
name|Qt
operator|::
name|Key_Plus
block|}
block|,
block|{
literal|0xffad
block|,
name|Qt
operator|::
name|Key_Minus
block|}
block|,
block|{
literal|0xffae
block|,
name|Qt
operator|::
name|Key_Period
block|}
block|,
block|{
literal|0xffaf
block|,
name|Qt
operator|::
name|Key_Slash
block|}
block|,
block|{
literal|0xff95
block|,
name|Qt
operator|::
name|Key_Home
block|}
block|,
block|{
literal|0xff96
block|,
name|Qt
operator|::
name|Key_Left
block|}
block|,
block|{
literal|0xff97
block|,
name|Qt
operator|::
name|Key_Up
block|}
block|,
block|{
literal|0xff98
block|,
name|Qt
operator|::
name|Key_Right
block|}
block|,
block|{
literal|0xff99
block|,
name|Qt
operator|::
name|Key_Down
block|}
block|,
block|{
literal|0xff9a
block|,
name|Qt
operator|::
name|Key_PageUp
block|}
block|,
block|{
literal|0xff9b
block|,
name|Qt
operator|::
name|Key_PageDown
block|}
block|,
block|{
literal|0xff9c
block|,
name|Qt
operator|::
name|Key_End
block|}
block|,
block|{
literal|0xff9e
block|,
name|Qt
operator|::
name|Key_Insert
block|}
block|,
block|{
literal|0xff9f
block|,
name|Qt
operator|::
name|Key_Delete
block|}
block|,
block|{
literal|0
block|,
literal|0
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|read
name|void
name|QRfbRect
operator|::
name|read
parameter_list|(
name|QTcpSocket
modifier|*
name|s
parameter_list|)
block|{
name|quint16
name|buf
index|[
literal|4
index|]
decl_stmt|;
name|s
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|buf
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|x
operator|=
name|ntohs
argument_list|(
name|buf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|y
operator|=
name|ntohs
argument_list|(
name|buf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|w
operator|=
name|ntohs
argument_list|(
name|buf
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|h
operator|=
name|ntohs
argument_list|(
name|buf
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|QRfbRect
operator|::
name|write
parameter_list|(
name|QTcpSocket
modifier|*
name|s
parameter_list|)
specifier|const
block|{
name|quint16
name|buf
index|[
literal|4
index|]
decl_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
name|htons
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|buf
index|[
literal|1
index|]
operator|=
name|htons
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|buf
index|[
literal|2
index|]
operator|=
name|htons
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|buf
index|[
literal|3
index|]
operator|=
name|htons
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|s
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|buf
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|read
name|void
name|QRfbPixelFormat
operator|::
name|read
parameter_list|(
name|QTcpSocket
modifier|*
name|s
parameter_list|)
block|{
name|char
name|buf
index|[
literal|16
index|]
decl_stmt|;
name|s
operator|->
name|read
argument_list|(
name|buf
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|bitsPerPixel
operator|=
name|buf
index|[
literal|0
index|]
expr_stmt|;
name|depth
operator|=
name|buf
index|[
literal|1
index|]
expr_stmt|;
name|bigEndian
operator|=
name|buf
index|[
literal|2
index|]
expr_stmt|;
name|trueColor
operator|=
name|buf
index|[
literal|3
index|]
expr_stmt|;
name|quint16
name|a
init|=
name|ntohs
argument_list|(
operator|*
operator|(
name|quint16
operator|*
operator|)
operator|(
name|buf
operator|+
literal|4
operator|)
argument_list|)
decl_stmt|;
name|redBits
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|a
condition|)
block|{
name|a
operator|>>=
literal|1
expr_stmt|;
name|redBits
operator|++
expr_stmt|;
block|}
name|a
operator|=
name|ntohs
argument_list|(
operator|*
operator|(
name|quint16
operator|*
operator|)
operator|(
name|buf
operator|+
literal|6
operator|)
argument_list|)
expr_stmt|;
name|greenBits
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|a
condition|)
block|{
name|a
operator|>>=
literal|1
expr_stmt|;
name|greenBits
operator|++
expr_stmt|;
block|}
name|a
operator|=
name|ntohs
argument_list|(
operator|*
operator|(
name|quint16
operator|*
operator|)
operator|(
name|buf
operator|+
literal|8
operator|)
argument_list|)
expr_stmt|;
name|blueBits
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|a
condition|)
block|{
name|a
operator|>>=
literal|1
expr_stmt|;
name|blueBits
operator|++
expr_stmt|;
block|}
name|redShift
operator|=
name|buf
index|[
literal|10
index|]
expr_stmt|;
name|greenShift
operator|=
name|buf
index|[
literal|11
index|]
expr_stmt|;
name|blueShift
operator|=
name|buf
index|[
literal|12
index|]
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|QRfbPixelFormat
operator|::
name|write
parameter_list|(
name|QTcpSocket
modifier|*
name|s
parameter_list|)
block|{
name|char
name|buf
index|[
literal|16
index|]
decl_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
name|bitsPerPixel
expr_stmt|;
name|buf
index|[
literal|1
index|]
operator|=
name|depth
expr_stmt|;
name|buf
index|[
literal|2
index|]
operator|=
name|bigEndian
expr_stmt|;
name|buf
index|[
literal|3
index|]
operator|=
name|trueColor
expr_stmt|;
name|quint16
name|a
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|redBits
condition|;
name|i
operator|++
control|)
name|a
operator|=
operator|(
name|a
operator|<<
literal|1
operator|)
operator||
literal|1
expr_stmt|;
operator|*
operator|(
name|quint16
operator|*
operator|)
operator|(
name|buf
operator|+
literal|4
operator|)
operator|=
name|htons
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|greenBits
condition|;
name|i
operator|++
control|)
name|a
operator|=
operator|(
name|a
operator|<<
literal|1
operator|)
operator||
literal|1
expr_stmt|;
operator|*
operator|(
name|quint16
operator|*
operator|)
operator|(
name|buf
operator|+
literal|6
operator|)
operator|=
name|htons
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blueBits
condition|;
name|i
operator|++
control|)
name|a
operator|=
operator|(
name|a
operator|<<
literal|1
operator|)
operator||
literal|1
expr_stmt|;
operator|*
operator|(
name|quint16
operator|*
operator|)
operator|(
name|buf
operator|+
literal|8
operator|)
operator|=
name|htons
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|buf
index|[
literal|10
index|]
operator|=
name|redShift
expr_stmt|;
name|buf
index|[
literal|11
index|]
operator|=
name|greenShift
expr_stmt|;
name|buf
index|[
literal|12
index|]
operator|=
name|blueShift
expr_stmt|;
name|s
operator|->
name|write
argument_list|(
name|buf
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setName
name|void
name|QRfbServerInit
operator|::
name|setName
parameter_list|(
specifier|const
name|char
modifier|*
name|n
parameter_list|)
block|{
operator|delete
index|[]
name|name
expr_stmt|;
name|name
operator|=
operator|new
name|char
index|[
name|strlen
argument_list|(
name|n
argument_list|)
operator|+
literal|1
index|]
expr_stmt|;
name|strcpy
argument_list|(
name|name
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|read
name|void
name|QRfbServerInit
operator|::
name|read
parameter_list|(
name|QTcpSocket
modifier|*
name|s
parameter_list|)
block|{
name|s
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|width
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|width
operator|=
name|ntohs
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|s
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|height
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|height
operator|=
name|ntohs
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|format
operator|.
name|read
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|quint32
name|len
decl_stmt|;
name|s
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|len
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|len
operator|=
name|ntohl
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|name
operator|=
operator|new
name|char
index|[
name|len
operator|+
literal|1
index|]
expr_stmt|;
name|s
operator|->
name|read
argument_list|(
name|name
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|name
index|[
name|len
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|QRfbServerInit
operator|::
name|write
parameter_list|(
name|QTcpSocket
modifier|*
name|s
parameter_list|)
block|{
name|quint16
name|t
init|=
name|htons
argument_list|(
name|width
argument_list|)
decl_stmt|;
name|s
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|t
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|t
operator|=
name|htons
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|s
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|t
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|format
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|quint32
name|len
init|=
name|strlen
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|len
operator|=
name|htonl
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|s
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|len
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|s
operator|->
name|write
argument_list|(
name|name
argument_list|,
name|strlen
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|read
name|bool
name|QRfbSetEncodings
operator|::
name|read
parameter_list|(
name|QTcpSocket
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|3
condition|)
return|return
literal|false
return|;
name|char
name|tmp
decl_stmt|;
name|s
operator|->
name|read
argument_list|(
operator|&
name|tmp
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// padding
name|s
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|count
operator|=
name|ntohs
argument_list|(
name|count
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|read
name|bool
name|QRfbFrameBufferUpdateRequest
operator|::
name|read
parameter_list|(
name|QTcpSocket
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|9
condition|)
return|return
literal|false
return|;
name|s
operator|->
name|read
argument_list|(
operator|&
name|incremental
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rect
operator|.
name|read
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|read
name|bool
name|QRfbKeyEvent
operator|::
name|read
parameter_list|(
name|QTcpSocket
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|7
condition|)
return|return
literal|false
return|;
name|s
operator|->
name|read
argument_list|(
operator|&
name|down
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|quint16
name|tmp
decl_stmt|;
name|s
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|tmp
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// padding
name|quint32
name|key
decl_stmt|;
name|s
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|key
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|key
operator|=
name|ntohl
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|unicode
operator|=
literal|0
expr_stmt|;
name|keycode
operator|=
literal|0
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|keyMap
index|[
name|i
index|]
operator|.
name|keysym
operator|&&
operator|!
name|keycode
condition|)
block|{
if|if
condition|(
name|keyMap
index|[
name|i
index|]
operator|.
name|keysym
operator|==
operator|(
name|int
operator|)
name|key
condition|)
name|keycode
operator|=
name|keyMap
index|[
name|i
index|]
operator|.
name|keycode
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|keycode
operator|>=
literal|' '
operator|&&
name|keycode
operator|<=
literal|'~'
condition|)
name|unicode
operator|=
name|keycode
expr_stmt|;
if|if
condition|(
operator|!
name|keycode
condition|)
block|{
if|if
condition|(
name|key
operator|<=
literal|0xff
condition|)
block|{
name|unicode
operator|=
name|key
expr_stmt|;
if|if
condition|(
name|key
operator|>=
literal|'a'
operator|&&
name|key
operator|<=
literal|'z'
condition|)
name|keycode
operator|=
name|Qt
operator|::
name|Key_A
operator|+
name|key
operator|-
literal|'a'
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|>=
literal|' '
operator|&&
name|key
operator|<=
literal|'~'
condition|)
name|keycode
operator|=
name|Qt
operator|::
name|Key_Space
operator|+
name|key
operator|-
literal|' '
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|read
name|bool
name|QRfbPointerEvent
operator|::
name|read
parameter_list|(
name|QTcpSocket
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|5
condition|)
return|return
literal|false
return|;
name|char
name|buttonMask
decl_stmt|;
name|s
operator|->
name|read
argument_list|(
operator|&
name|buttonMask
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|buttons
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|buttonMask
operator|&
literal|1
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|buttonMask
operator|&
literal|2
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
if|if
condition|(
name|buttonMask
operator|&
literal|4
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
name|quint16
name|tmp
decl_stmt|;
name|s
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|tmp
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|x
operator|=
name|ntohs
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|s
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|tmp
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|y
operator|=
name|ntohs
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|read
name|bool
name|QRfbClientCutText
operator|::
name|read
parameter_list|(
name|QTcpSocket
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|7
condition|)
return|return
literal|false
return|;
name|char
name|tmp
index|[
literal|3
index|]
decl_stmt|;
name|s
operator|->
name|read
argument_list|(
name|tmp
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// padding
name|s
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|length
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|length
operator|=
name|ntohl
argument_list|(
name|length
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|//===========================================================================
end_comment
begin_constructor
DECL|function|QVNCServer
name|QVNCServer
operator|::
name|QVNCServer
parameter_list|(
name|QVNCScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|qvnc_screen
argument_list|(
name|screen
argument_list|)
block|{
name|init
argument_list|(
literal|5900
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QVNCServer
name|QVNCServer
operator|::
name|QVNCServer
parameter_list|(
name|QVNCScreen
modifier|*
name|screen
parameter_list|,
name|int
name|id
parameter_list|)
member_init_list|:
name|qvnc_screen
argument_list|(
name|screen
argument_list|)
block|{
name|init
argument_list|(
literal|5900
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QVNCServer
operator|::
name|init
parameter_list|(
name|uint
name|port
parameter_list|)
block|{
name|handleMsg
operator|=
literal|false
expr_stmt|;
name|client
operator|=
literal|0
expr_stmt|;
name|encodingsPending
operator|=
literal|0
expr_stmt|;
name|cutTextPending
operator|=
literal|0
expr_stmt|;
name|keymod
operator|=
literal|0
expr_stmt|;
name|state
operator|=
name|Unconnected
expr_stmt|;
name|dirtyCursor
operator|=
literal|false
expr_stmt|;
name|refreshRate
operator|=
literal|25
expr_stmt|;
name|timer
operator|=
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|timer
operator|->
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|checkUpdate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|serverSocket
operator|=
operator|new
name|QTcpServer
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|serverSocket
operator|->
name|listen
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|,
name|port
argument_list|)
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"QVNCServer could not connect:"
operator|<<
name|serverSocket
operator|->
name|errorString
argument_list|()
expr_stmt|;
else|else
name|qDebug
argument_list|(
literal|"QVNCServer created on port %d"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|serverSocket
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
name|qvnc_cursor
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|encoder
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QVNCServer
name|QVNCServer
operator|::
name|~
name|QVNCServer
parameter_list|()
block|{
operator|delete
name|encoder
expr_stmt|;
name|encoder
operator|=
literal|0
expr_stmt|;
operator|delete
name|client
expr_stmt|;
name|client
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
operator|delete
name|qvnc_cursor
expr_stmt|;
name|qvnc_cursor
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|setDirty
name|void
name|QVNCServer
operator|::
name|setDirty
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|Connected
operator|&&
operator|!
name|timer
operator|->
name|isActive
argument_list|()
operator|&&
operator|(
operator|(
name|dirtyMap
argument_list|()
operator|->
name|numDirty
operator|>
literal|0
operator|)
operator|||
name|dirtyCursor
operator|)
condition|)
block|{
name|timer
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|newConnection
name|void
name|QVNCServer
operator|::
name|newConnection
parameter_list|()
block|{
if|if
condition|(
name|client
condition|)
operator|delete
name|client
expr_stmt|;
name|client
operator|=
name|serverSocket
operator|->
name|nextPendingConnection
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readClient
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|discardClient
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|handleMsg
operator|=
literal|false
expr_stmt|;
name|encodingsPending
operator|=
literal|0
expr_stmt|;
name|cutTextPending
operator|=
literal|0
expr_stmt|;
name|supportHextile
operator|=
literal|false
expr_stmt|;
name|wantUpdate
operator|=
literal|false
expr_stmt|;
name|timer
operator|->
name|start
argument_list|(
literal|1000
operator|/
name|refreshRate
argument_list|)
expr_stmt|;
name|dirtyMap
argument_list|()
operator|->
name|reset
argument_list|()
expr_stmt|;
comment|// send protocol version
specifier|const
name|char
modifier|*
name|proto
init|=
literal|"RFB 003.003\n"
decl_stmt|;
name|client
operator|->
name|write
argument_list|(
name|proto
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|state
operator|=
name|Protocol
expr_stmt|;
if|if
condition|(
operator|!
name|qvnc_screen
operator|->
name|screen
argument_list|()
operator|&&
operator|!
name|qvnc_screen
operator|->
name|d_ptr
operator|->
name|noDisablePainting
condition|)
name|QWSServer
operator|::
name|instance
argument_list|()
operator|->
name|enablePainting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readClient
name|void
name|QVNCServer
operator|::
name|readClient
parameter_list|()
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|Protocol
case|:
if|if
condition|(
name|client
operator|->
name|bytesAvailable
argument_list|()
operator|>=
literal|12
condition|)
block|{
name|char
name|proto
index|[
literal|13
index|]
decl_stmt|;
name|client
operator|->
name|read
argument_list|(
name|proto
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|proto
index|[
literal|12
index|]
operator|=
literal|'\0'
expr_stmt|;
name|qDebug
argument_list|(
literal|"Client protocol version %s"
argument_list|,
name|proto
argument_list|)
expr_stmt|;
comment|// No authentication
name|quint32
name|auth
init|=
name|htonl
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|client
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|auth
argument_list|,
sizeof|sizeof
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|=
name|Init
expr_stmt|;
block|}
break|break;
case|case
name|Init
case|:
if|if
condition|(
name|client
operator|->
name|bytesAvailable
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|quint8
name|shared
decl_stmt|;
name|client
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|shared
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Server Init msg
name|QRfbServerInit
name|sim
decl_stmt|;
name|QRfbPixelFormat
modifier|&
name|format
init|=
name|sim
operator|.
name|format
decl_stmt|;
switch|switch
condition|(
name|qvnc_screen
operator|->
name|depth
argument_list|()
condition|)
block|{
case|case
literal|32
case|:
name|format
operator|.
name|bitsPerPixel
operator|=
literal|32
expr_stmt|;
name|format
operator|.
name|depth
operator|=
literal|32
expr_stmt|;
name|format
operator|.
name|bigEndian
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|trueColor
operator|=
literal|true
expr_stmt|;
name|format
operator|.
name|redBits
operator|=
literal|8
expr_stmt|;
name|format
operator|.
name|greenBits
operator|=
literal|8
expr_stmt|;
name|format
operator|.
name|blueBits
operator|=
literal|8
expr_stmt|;
name|format
operator|.
name|redShift
operator|=
literal|16
expr_stmt|;
name|format
operator|.
name|greenShift
operator|=
literal|8
expr_stmt|;
name|format
operator|.
name|blueShift
operator|=
literal|0
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|format
operator|.
name|bitsPerPixel
operator|=
literal|24
expr_stmt|;
name|format
operator|.
name|depth
operator|=
literal|24
expr_stmt|;
name|format
operator|.
name|bigEndian
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|trueColor
operator|=
literal|true
expr_stmt|;
name|format
operator|.
name|redBits
operator|=
literal|8
expr_stmt|;
name|format
operator|.
name|greenBits
operator|=
literal|8
expr_stmt|;
name|format
operator|.
name|blueBits
operator|=
literal|8
expr_stmt|;
name|format
operator|.
name|redShift
operator|=
literal|16
expr_stmt|;
name|format
operator|.
name|greenShift
operator|=
literal|8
expr_stmt|;
name|format
operator|.
name|blueShift
operator|=
literal|0
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|format
operator|.
name|bitsPerPixel
operator|=
literal|24
expr_stmt|;
name|format
operator|.
name|depth
operator|=
literal|18
expr_stmt|;
name|format
operator|.
name|bigEndian
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|trueColor
operator|=
literal|true
expr_stmt|;
name|format
operator|.
name|redBits
operator|=
literal|6
expr_stmt|;
name|format
operator|.
name|greenBits
operator|=
literal|6
expr_stmt|;
name|format
operator|.
name|blueBits
operator|=
literal|6
expr_stmt|;
name|format
operator|.
name|redShift
operator|=
literal|12
expr_stmt|;
name|format
operator|.
name|greenShift
operator|=
literal|6
expr_stmt|;
name|format
operator|.
name|blueShift
operator|=
literal|0
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|format
operator|.
name|bitsPerPixel
operator|=
literal|16
expr_stmt|;
name|format
operator|.
name|depth
operator|=
literal|16
expr_stmt|;
name|format
operator|.
name|bigEndian
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|trueColor
operator|=
literal|true
expr_stmt|;
name|format
operator|.
name|redBits
operator|=
literal|5
expr_stmt|;
name|format
operator|.
name|greenBits
operator|=
literal|6
expr_stmt|;
name|format
operator|.
name|blueBits
operator|=
literal|5
expr_stmt|;
name|format
operator|.
name|redShift
operator|=
literal|11
expr_stmt|;
name|format
operator|.
name|greenShift
operator|=
literal|5
expr_stmt|;
name|format
operator|.
name|blueShift
operator|=
literal|0
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|format
operator|.
name|bitsPerPixel
operator|=
literal|16
expr_stmt|;
name|format
operator|.
name|depth
operator|=
literal|15
expr_stmt|;
name|format
operator|.
name|bigEndian
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|trueColor
operator|=
literal|true
expr_stmt|;
name|format
operator|.
name|redBits
operator|=
literal|5
expr_stmt|;
name|format
operator|.
name|greenBits
operator|=
literal|5
expr_stmt|;
name|format
operator|.
name|blueBits
operator|=
literal|5
expr_stmt|;
name|format
operator|.
name|redShift
operator|=
literal|10
expr_stmt|;
name|format
operator|.
name|greenShift
operator|=
literal|5
expr_stmt|;
name|format
operator|.
name|blueShift
operator|=
literal|0
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|format
operator|.
name|bitsPerPixel
operator|=
literal|16
expr_stmt|;
name|format
operator|.
name|depth
operator|=
literal|12
expr_stmt|;
name|format
operator|.
name|bigEndian
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|trueColor
operator|=
literal|true
expr_stmt|;
name|format
operator|.
name|redBits
operator|=
literal|4
expr_stmt|;
name|format
operator|.
name|greenBits
operator|=
literal|4
expr_stmt|;
name|format
operator|.
name|blueBits
operator|=
literal|4
expr_stmt|;
name|format
operator|.
name|redShift
operator|=
literal|8
expr_stmt|;
name|format
operator|.
name|greenShift
operator|=
literal|4
expr_stmt|;
name|format
operator|.
name|blueShift
operator|=
literal|0
expr_stmt|;
break|break;
case|case
literal|8
case|:
case|case
literal|4
case|:
name|format
operator|.
name|bitsPerPixel
operator|=
literal|8
expr_stmt|;
name|format
operator|.
name|depth
operator|=
literal|8
expr_stmt|;
name|format
operator|.
name|bigEndian
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|trueColor
operator|=
literal|false
expr_stmt|;
name|format
operator|.
name|redBits
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|greenBits
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|blueBits
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|redShift
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|greenShift
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|blueShift
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
name|qDebug
argument_list|(
literal|"QVNC cannot drive depth %d"
argument_list|,
name|qvnc_screen
operator|->
name|depth
argument_list|()
argument_list|)
expr_stmt|;
name|discardClient
argument_list|()
expr_stmt|;
return|return;
block|}
name|sim
operator|.
name|width
operator|=
name|qvnc_screen
operator|->
name|deviceWidth
argument_list|()
expr_stmt|;
name|sim
operator|.
name|height
operator|=
name|qvnc_screen
operator|->
name|deviceHeight
argument_list|()
expr_stmt|;
name|sim
operator|.
name|setName
argument_list|(
literal|"Qt for Embedded Linux VNC Server"
argument_list|)
expr_stmt|;
name|sim
operator|.
name|write
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|state
operator|=
name|Connected
expr_stmt|;
block|}
break|break;
case|case
name|Connected
case|:
do|do
block|{
if|if
condition|(
operator|!
name|handleMsg
condition|)
block|{
name|client
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|msgType
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|handleMsg
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|handleMsg
condition|)
block|{
switch|switch
condition|(
name|msgType
condition|)
block|{
case|case
name|SetPixelFormat
case|:
name|setPixelFormat
argument_list|()
expr_stmt|;
break|break;
case|case
name|FixColourMapEntries
case|:
name|qDebug
argument_list|(
literal|"Not supported: FixColourMapEntries"
argument_list|)
expr_stmt|;
name|handleMsg
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|SetEncodings
case|:
name|setEncodings
argument_list|()
expr_stmt|;
break|break;
case|case
name|FramebufferUpdateRequest
case|:
name|frameBufferUpdateRequest
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyEvent
case|:
name|keyEvent
argument_list|()
expr_stmt|;
break|break;
case|case
name|PointerEvent
case|:
name|pointerEvent
argument_list|()
expr_stmt|;
break|break;
case|case
name|ClientCutText
case|:
name|clientCutText
argument_list|()
expr_stmt|;
break|break;
default|default:
name|qDebug
argument_list|(
literal|"Unknown message type: %d"
argument_list|,
operator|(
name|int
operator|)
name|msgType
argument_list|)
expr_stmt|;
name|handleMsg
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
operator|!
name|handleMsg
operator|&&
name|client
operator|->
name|bytesAvailable
argument_list|()
condition|)
do|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_if
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
end_if
begin_function
DECL|function|swapBytes
name|bool
name|QVNCScreen
operator|::
name|swapBytes
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|depth
argument_list|()
operator|!=
literal|16
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|screen
argument_list|()
condition|)
return|return
name|screen
argument_list|()
operator|->
name|frameBufferLittleEndian
argument_list|()
return|;
return|return
name|frameBufferLittleEndian
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setPixelFormat
name|void
name|QVNCServer
operator|::
name|setPixelFormat
parameter_list|()
block|{
if|if
condition|(
name|client
operator|->
name|bytesAvailable
argument_list|()
operator|>=
literal|19
condition|)
block|{
name|char
name|buf
index|[
literal|3
index|]
decl_stmt|;
name|client
operator|->
name|read
argument_list|(
name|buf
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// just padding
name|pixelFormat
operator|.
name|read
argument_list|(
name|client
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_VNC_DEBUG
name|qDebug
argument_list|(
literal|"Want format: %d %d %d %d %d %d %d %d %d %d"
argument_list|,
name|int
argument_list|(
name|pixelFormat
operator|.
name|bitsPerPixel
argument_list|)
argument_list|,
name|int
argument_list|(
name|pixelFormat
operator|.
name|depth
argument_list|)
argument_list|,
name|int
argument_list|(
name|pixelFormat
operator|.
name|bigEndian
argument_list|)
argument_list|,
name|int
argument_list|(
name|pixelFormat
operator|.
name|trueColor
argument_list|)
argument_list|,
name|int
argument_list|(
name|pixelFormat
operator|.
name|redBits
argument_list|)
argument_list|,
name|int
argument_list|(
name|pixelFormat
operator|.
name|greenBits
argument_list|)
argument_list|,
name|int
argument_list|(
name|pixelFormat
operator|.
name|blueBits
argument_list|)
argument_list|,
name|int
argument_list|(
name|pixelFormat
operator|.
name|redShift
argument_list|)
argument_list|,
name|int
argument_list|(
name|pixelFormat
operator|.
name|greenShift
argument_list|)
argument_list|,
name|int
argument_list|(
name|pixelFormat
operator|.
name|blueShift
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|pixelFormat
operator|.
name|trueColor
condition|)
block|{
name|qDebug
argument_list|(
literal|"Can only handle true color clients"
argument_list|)
expr_stmt|;
name|discardClient
argument_list|()
expr_stmt|;
block|}
name|handleMsg
operator|=
literal|false
expr_stmt|;
name|sameEndian
operator|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
operator|)
operator|==
operator|!
operator|!
name|pixelFormat
operator|.
name|bigEndian
expr_stmt|;
name|needConversion
operator|=
name|pixelConversionNeeded
argument_list|()
expr_stmt|;
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
name|swapBytes
operator|=
name|qvnc_screen
operator|->
name|swapBytes
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|setEncodings
name|void
name|QVNCServer
operator|::
name|setEncodings
parameter_list|()
block|{
name|QRfbSetEncodings
name|enc
decl_stmt|;
if|if
condition|(
operator|!
name|encodingsPending
operator|&&
name|enc
operator|.
name|read
argument_list|(
name|client
argument_list|)
condition|)
block|{
name|encodingsPending
operator|=
name|enc
operator|.
name|count
expr_stmt|;
if|if
condition|(
operator|!
name|encodingsPending
condition|)
name|handleMsg
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|encoder
condition|)
block|{
operator|delete
name|encoder
expr_stmt|;
name|encoder
operator|=
literal|0
expr_stmt|;
block|}
enum|enum
name|Encodings
block|{
name|Raw
init|=
literal|0
block|,
name|CopyRect
init|=
literal|1
block|,
name|RRE
init|=
literal|2
block|,
name|CoRRE
init|=
literal|4
block|,
name|Hextile
init|=
literal|5
block|,
name|ZRLE
init|=
literal|16
block|,
name|Cursor
init|=
operator|-
literal|239
block|,
name|DesktopSize
init|=
operator|-
literal|223
block|}
enum|;
if|if
condition|(
name|encodingsPending
operator|&&
operator|(
name|unsigned
operator|)
name|client
operator|->
name|bytesAvailable
argument_list|()
operator|>=
name|encodingsPending
operator|*
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|encodingsPending
condition|;
operator|++
name|i
control|)
block|{
name|qint32
name|enc
decl_stmt|;
name|client
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|enc
argument_list|,
sizeof|sizeof
argument_list|(
name|qint32
argument_list|)
argument_list|)
expr_stmt|;
name|enc
operator|=
name|ntohl
argument_list|(
name|enc
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_VNC_DEBUG
name|qDebug
argument_list|(
literal|"QVNCServer::setEncodings: %d"
argument_list|,
name|enc
argument_list|)
expr_stmt|;
endif|#
directive|endif
switch|switch
condition|(
name|enc
condition|)
block|{
case|case
name|Raw
case|:
if|if
condition|(
operator|!
name|encoder
condition|)
block|{
name|encoder
operator|=
operator|new
name|QRfbRawEncoder
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_VNC_DEBUG
name|qDebug
argument_list|(
literal|"QVNCServer::setEncodings: using raw"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
break|break;
case|case
name|CopyRect
case|:
name|supportCopyRect
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|RRE
case|:
name|supportRRE
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|CoRRE
case|:
name|supportCoRRE
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Hextile
case|:
name|supportHextile
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|encoder
condition|)
break|break;
switch|switch
condition|(
name|qvnc_screen
operator|->
name|depth
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_8
case|case
literal|8
case|:
name|encoder
operator|=
operator|new
name|QRfbHextileEncoder
argument_list|<
name|quint8
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_12
case|case
literal|12
case|:
name|encoder
operator|=
operator|new
name|QRfbHextileEncoder
argument_list|<
name|qrgb444
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_15
case|case
literal|15
case|:
name|encoder
operator|=
operator|new
name|QRfbHextileEncoder
argument_list|<
name|qrgb555
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_16
case|case
literal|16
case|:
name|encoder
operator|=
operator|new
name|QRfbHextileEncoder
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_18
case|case
literal|18
case|:
name|encoder
operator|=
operator|new
name|QRfbHextileEncoder
argument_list|<
name|qrgb666
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_24
case|case
literal|24
case|:
name|encoder
operator|=
operator|new
name|QRfbHextileEncoder
argument_list|<
name|qrgb888
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_32
case|case
literal|32
case|:
name|encoder
operator|=
operator|new
name|QRfbHextileEncoder
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
break|break;
block|}
ifdef|#
directive|ifdef
name|QT_QWS_VNC_DEBUG
name|qDebug
argument_list|(
literal|"QVNCServer::setEncodings: using hextile"
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|ZRLE
case|:
name|supportZRLE
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Cursor
case|:
name|supportCursor
operator|=
literal|true
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
if|if
condition|(
operator|!
name|qvnc_screen
operator|->
name|screen
argument_list|()
operator|||
name|qt_screencursor
operator|->
name|isAccelerated
argument_list|()
condition|)
block|{
operator|delete
name|qvnc_cursor
expr_stmt|;
name|qvnc_cursor
operator|=
operator|new
name|QVNCClientCursor
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
break|break;
case|case
name|DesktopSize
case|:
name|supportDesktopSize
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|handleMsg
operator|=
literal|false
expr_stmt|;
name|encodingsPending
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|encoder
condition|)
block|{
name|encoder
operator|=
operator|new
name|QRfbRawEncoder
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_VNC_DEBUG
name|qDebug
argument_list|(
literal|"QVNCServer::setEncodings: fallback using raw"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|frameBufferUpdateRequest
name|void
name|QVNCServer
operator|::
name|frameBufferUpdateRequest
parameter_list|()
block|{
name|QRfbFrameBufferUpdateRequest
name|ev
decl_stmt|;
if|if
condition|(
name|ev
operator|.
name|read
argument_list|(
name|client
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|ev
operator|.
name|incremental
condition|)
block|{
name|QRect
name|r
argument_list|(
name|ev
operator|.
name|rect
operator|.
name|x
argument_list|,
name|ev
operator|.
name|rect
operator|.
name|y
argument_list|,
name|ev
operator|.
name|rect
operator|.
name|w
argument_list|,
name|ev
operator|.
name|rect
operator|.
name|h
argument_list|)
decl_stmt|;
name|r
operator|.
name|translate
argument_list|(
name|qvnc_screen
operator|->
name|offset
argument_list|()
argument_list|)
expr_stmt|;
name|qvnc_screen
operator|->
name|d_ptr
operator|->
name|setDirty
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|wantUpdate
operator|=
literal|true
expr_stmt|;
name|checkUpdate
argument_list|()
expr_stmt|;
name|handleMsg
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|pointerEvent
name|void
name|QVNCServer
operator|::
name|pointerEvent
parameter_list|()
block|{
name|QRfbPointerEvent
name|ev
decl_stmt|;
if|if
condition|(
name|ev
operator|.
name|read
argument_list|(
name|client
argument_list|)
condition|)
block|{
specifier|const
name|QPoint
name|offset
init|=
name|qvnc_screen
operator|->
name|offset
argument_list|()
decl_stmt|;
name|QWSServer
operator|::
name|sendMouseEvent
argument_list|(
name|offset
operator|+
name|QPoint
argument_list|(
name|ev
operator|.
name|x
argument_list|,
name|ev
operator|.
name|y
argument_list|)
argument_list|,
name|ev
operator|.
name|buttons
argument_list|)
expr_stmt|;
name|handleMsg
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|keyEvent
name|void
name|QVNCServer
operator|::
name|keyEvent
parameter_list|()
block|{
name|QRfbKeyEvent
name|ev
decl_stmt|;
if|if
condition|(
name|ev
operator|.
name|read
argument_list|(
name|client
argument_list|)
condition|)
block|{
if|if
condition|(
name|ev
operator|.
name|keycode
operator|==
name|Qt
operator|::
name|Key_Shift
condition|)
name|keymod
operator|=
name|ev
operator|.
name|down
condition|?
name|keymod
operator||
name|Qt
operator|::
name|ShiftModifier
else|:
name|keymod
operator|&
operator|~
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
elseif|else
if|if
condition|(
name|ev
operator|.
name|keycode
operator|==
name|Qt
operator|::
name|Key_Control
condition|)
name|keymod
operator|=
name|ev
operator|.
name|down
condition|?
name|keymod
operator||
name|Qt
operator|::
name|ControlModifier
else|:
name|keymod
operator|&
operator|~
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
elseif|else
if|if
condition|(
name|ev
operator|.
name|keycode
operator|==
name|Qt
operator|::
name|Key_Alt
condition|)
name|keymod
operator|=
name|ev
operator|.
name|down
condition|?
name|keymod
operator||
name|Qt
operator|::
name|AltModifier
else|:
name|keymod
operator|&
operator|~
name|Qt
operator|::
name|AltModifier
expr_stmt|;
if|if
condition|(
name|ev
operator|.
name|unicode
operator|||
name|ev
operator|.
name|keycode
condition|)
name|QWSServer
operator|::
name|sendKeyEvent
argument_list|(
name|ev
operator|.
name|unicode
argument_list|,
name|ev
operator|.
name|keycode
argument_list|,
name|keymod
argument_list|,
name|ev
operator|.
name|down
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|handleMsg
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|clientCutText
name|void
name|QVNCServer
operator|::
name|clientCutText
parameter_list|()
block|{
name|QRfbClientCutText
name|ev
decl_stmt|;
if|if
condition|(
name|cutTextPending
operator|==
literal|0
operator|&&
name|ev
operator|.
name|read
argument_list|(
name|client
argument_list|)
condition|)
block|{
name|cutTextPending
operator|=
name|ev
operator|.
name|length
expr_stmt|;
if|if
condition|(
operator|!
name|cutTextPending
condition|)
name|handleMsg
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|cutTextPending
operator|&&
name|client
operator|->
name|bytesAvailable
argument_list|()
operator|>=
name|cutTextPending
condition|)
block|{
name|char
modifier|*
name|text
init|=
operator|new
name|char
index|[
name|cutTextPending
operator|+
literal|1
index|]
decl_stmt|;
name|client
operator|->
name|read
argument_list|(
name|text
argument_list|,
name|cutTextPending
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|text
expr_stmt|;
name|cutTextPending
operator|=
literal|0
expr_stmt|;
name|handleMsg
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// stride in bytes
end_comment
begin_function
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|read
name|bool
name|QRfbSingleColorHextile
argument_list|<
name|SRC
argument_list|>
operator|::
name|read
parameter_list|(
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
specifier|const
name|int
name|depth
init|=
name|encoder
operator|->
name|server
operator|->
name|screen
argument_list|()
operator|->
name|depth
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|%
operator|(
name|depth
operator|/
literal|8
operator|)
condition|)
comment|// hw: should rather fallback to simple loop
return|return
literal|false
return|;
specifier|static
name|int
name|alwaysFalse
init|=
name|qgetenv
argument_list|(
literal|"QT_VNC_NOCHECKFILL"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|alwaysFalse
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|depth
condition|)
block|{
case|case
literal|4
case|:
block|{
specifier|const
name|quint8
modifier|*
name|data8
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint8
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|data8
index|[
literal|0
index|]
operator|&
literal|0xf
operator|)
operator|!=
operator|(
name|data8
index|[
literal|0
index|]
operator|>>
literal|4
operator|)
condition|)
return|return
literal|false
return|;
name|width
operator|/=
literal|2
expr_stmt|;
block|}
comment|// fallthrough
case|case
literal|8
case|:
block|{
specifier|const
name|quint8
modifier|*
name|data8
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint8
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|data8
index|[
literal|0
index|]
operator|!=
name|data8
index|[
literal|1
index|]
condition|)
return|return
literal|false
return|;
name|width
operator|/=
literal|2
expr_stmt|;
block|}
comment|// fallthrough
case|case
literal|12
case|:
case|case
literal|15
case|:
case|case
literal|16
case|:
block|{
specifier|const
name|quint16
modifier|*
name|data16
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint16
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|data16
index|[
literal|0
index|]
operator|!=
name|data16
index|[
literal|1
index|]
condition|)
return|return
literal|false
return|;
name|width
operator|/=
literal|2
expr_stmt|;
block|}
comment|// fallthrough
case|case
literal|18
case|:
case|case
literal|24
case|:
case|case
literal|32
case|:
block|{
specifier|const
name|quint32
modifier|*
name|data32
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|first
init|=
name|data32
index|[
literal|0
index|]
decl_stmt|;
specifier|const
name|int
name|linestep
init|=
operator|(
name|stride
operator|/
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|)
operator|-
name|width
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
operator|*
operator|(
name|data32
operator|++
operator|)
operator|!=
name|first
condition|)
return|return
literal|false
return|;
block|}
name|data32
operator|+=
name|linestep
expr_stmt|;
block|}
break|break;
block|}
default|default:
return|return
literal|false
return|;
block|}
name|SRC
name|color
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|SRC
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|encoder
operator|->
name|newBg
operator||=
operator|(
name|color
operator|!=
name|encoder
operator|->
name|bg
operator|)
expr_stmt|;
name|encoder
operator|->
name|bg
operator|=
name|color
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|write
name|void
name|QRfbSingleColorHextile
argument_list|<
name|SRC
argument_list|>
operator|::
name|write
parameter_list|(
name|QTcpSocket
modifier|*
name|socket
parameter_list|)
specifier|const
block|{
if|if
condition|(
literal|true
operator|||
name|encoder
operator|->
name|newBg
condition|)
block|{
specifier|const
name|int
name|bpp
init|=
name|encoder
operator|->
name|server
operator|->
name|clientBytesPerPixel
argument_list|()
decl_stmt|;
specifier|const
name|int
name|padding
init|=
literal|3
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|char
argument_list|>
name|buffer
argument_list|(
name|padding
operator|+
literal|1
operator|+
name|bpp
argument_list|)
decl_stmt|;
name|buffer
index|[
name|padding
index|]
operator|=
literal|2
expr_stmt|;
comment|// BackgroundSpecified
name|encoder
operator|->
name|server
operator|->
name|convertPixels
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
name|padding
operator|+
literal|1
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
operator|&
name|encoder
operator|->
name|bg
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
name|padding
argument_list|,
name|bpp
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|//        encoder->newBg = false;
block|}
else|else
block|{
name|char
name|subenc
init|=
literal|0
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
operator|&
name|subenc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|read
name|bool
name|QRfbDualColorHextile
argument_list|<
name|SRC
argument_list|>
operator|::
name|read
parameter_list|(
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
specifier|const
name|SRC
modifier|*
name|ptr
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|SRC
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
specifier|const
name|int
name|linestep
init|=
operator|(
name|stride
operator|/
sizeof|sizeof
argument_list|(
name|SRC
argument_list|)
operator|)
operator|-
name|width
decl_stmt|;
name|SRC
name|c1
decl_stmt|;
name|SRC
name|c2
init|=
literal|0
decl_stmt|;
name|int
name|n1
init|=
literal|0
decl_stmt|;
name|int
name|n2
init|=
literal|0
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
literal|0
decl_stmt|;
name|c1
operator|=
operator|*
name|ptr
expr_stmt|;
comment|// find second color
while|while
condition|(
name|y
operator|<
name|height
condition|)
block|{
while|while
condition|(
name|x
operator|<
name|width
condition|)
block|{
if|if
condition|(
operator|*
name|ptr
operator|==
name|c1
condition|)
block|{
operator|++
name|n1
expr_stmt|;
block|}
else|else
block|{
name|c2
operator|=
operator|*
name|ptr
expr_stmt|;
goto|goto
name|found_second_color
goto|;
block|}
operator|++
name|ptr
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
name|x
operator|=
literal|0
expr_stmt|;
name|ptr
operator|+=
name|linestep
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
name|found_second_color
label|:
comment|// finish counting
while|while
condition|(
name|y
operator|<
name|height
condition|)
block|{
while|while
condition|(
name|x
operator|<
name|width
condition|)
block|{
if|if
condition|(
operator|*
name|ptr
operator|==
name|c1
condition|)
block|{
operator|++
name|n1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|*
name|ptr
operator|==
name|c2
condition|)
block|{
operator|++
name|n2
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
operator|++
name|ptr
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
name|x
operator|=
literal|0
expr_stmt|;
name|ptr
operator|+=
name|linestep
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
if|if
condition|(
name|n2
operator|>
name|n1
condition|)
block|{
specifier|const
name|quint32
name|tmpC
init|=
name|c1
decl_stmt|;
name|c1
operator|=
name|c2
expr_stmt|;
name|c2
operator|=
name|tmpC
expr_stmt|;
block|}
name|encoder
operator|->
name|newBg
operator||=
operator|(
name|c1
operator|!=
name|encoder
operator|->
name|bg
operator|)
expr_stmt|;
name|encoder
operator|->
name|newFg
operator||=
operator|(
name|c2
operator|!=
name|encoder
operator|->
name|fg
operator|)
expr_stmt|;
name|encoder
operator|->
name|bg
operator|=
name|c1
expr_stmt|;
name|encoder
operator|->
name|fg
operator|=
name|c2
expr_stmt|;
comment|// create map
name|bool
name|inRect
init|=
literal|false
decl_stmt|;
name|numRects
operator|=
literal|0
expr_stmt|;
name|ptr
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|SRC
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
expr_stmt|;
for|for
control|(
name|y
operator|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|inRect
operator|&&
operator|*
name|ptr
operator|==
name|encoder
operator|->
name|bg
condition|)
block|{
comment|// rect finished
name|setWidth
argument_list|(
name|x
operator|-
name|lastx
argument_list|()
argument_list|)
expr_stmt|;
name|next
argument_list|()
expr_stmt|;
name|inRect
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|inRect
operator|&&
operator|*
name|ptr
operator|==
name|encoder
operator|->
name|fg
condition|)
block|{
comment|// rect start
name|setX
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|setY
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|setHeight
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|inRect
operator|=
literal|true
expr_stmt|;
block|}
operator|++
name|ptr
expr_stmt|;
block|}
if|if
condition|(
name|inRect
condition|)
block|{
comment|// finish rect
name|setWidth
argument_list|(
name|width
operator|-
name|lastx
argument_list|()
argument_list|)
expr_stmt|;
name|next
argument_list|()
expr_stmt|;
name|inRect
operator|=
literal|false
expr_stmt|;
block|}
name|ptr
operator|+=
name|linestep
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|write
name|void
name|QRfbDualColorHextile
argument_list|<
name|SRC
argument_list|>
operator|::
name|write
parameter_list|(
name|QTcpSocket
modifier|*
name|socket
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|bpp
init|=
name|encoder
operator|->
name|server
operator|->
name|clientBytesPerPixel
argument_list|()
decl_stmt|;
specifier|const
name|int
name|padding
init|=
literal|3
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|char
argument_list|>
name|buffer
argument_list|(
name|padding
operator|+
literal|2
operator|*
name|bpp
operator|+
sizeof|sizeof
argument_list|(
name|char
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|numRects
argument_list|)
argument_list|)
decl_stmt|;
name|char
modifier|&
name|subenc
init|=
name|buffer
index|[
name|padding
index|]
decl_stmt|;
name|int
name|n
init|=
name|padding
operator|+
sizeof|sizeof
argument_list|(
name|subenc
argument_list|)
decl_stmt|;
name|subenc
operator|=
literal|0x8
expr_stmt|;
comment|// AnySubrects
if|if
condition|(
name|encoder
operator|->
name|newBg
condition|)
block|{
name|subenc
operator||=
literal|0x2
expr_stmt|;
comment|// Background
name|encoder
operator|->
name|server
operator|->
name|convertPixels
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
name|n
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|encoder
operator|->
name|bg
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|n
operator|+=
name|bpp
expr_stmt|;
comment|//        encoder->newBg = false;
block|}
if|if
condition|(
name|encoder
operator|->
name|newFg
condition|)
block|{
name|subenc
operator||=
literal|0x4
expr_stmt|;
comment|// Foreground
name|encoder
operator|->
name|server
operator|->
name|convertPixels
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
name|n
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|encoder
operator|->
name|fg
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|n
operator|+=
name|bpp
expr_stmt|;
comment|//        encoder->newFg = false;
block|}
name|buffer
index|[
name|n
index|]
operator|=
name|numRects
expr_stmt|;
name|n
operator|+=
sizeof|sizeof
argument_list|(
name|numRects
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
name|padding
argument_list|,
name|n
operator|-
name|padding
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|rects
argument_list|,
name|numRects
operator|*
sizeof|sizeof
argument_list|(
name|Rect
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|next
name|void
name|QRfbDualColorHextile
argument_list|<
name|SRC
argument_list|>
operator|::
name|next
parameter_list|()
block|{
for|for
control|(
name|int
name|r
init|=
name|numRects
operator|-
literal|1
init|;
name|r
operator|>=
literal|0
condition|;
operator|--
name|r
control|)
block|{
if|if
condition|(
name|recty
argument_list|(
name|r
argument_list|)
operator|==
name|lasty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|recty
argument_list|(
name|r
argument_list|)
operator|<
name|lasty
argument_list|()
operator|-
literal|1
condition|)
comment|// only search previous scanline
break|break;
if|if
condition|(
name|rectx
argument_list|(
name|r
argument_list|)
operator|==
name|lastx
argument_list|()
operator|&&
name|width
argument_list|(
name|r
argument_list|)
operator|==
name|width
argument_list|(
name|numRects
argument_list|)
condition|)
block|{
operator|++
name|rects
index|[
name|r
index|]
operator|.
name|wh
expr_stmt|;
return|return;
block|}
block|}
operator|++
name|numRects
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|setColor
specifier|inline
name|void
name|QRfbMultiColorHextile
argument_list|<
name|SRC
argument_list|>
operator|::
name|setColor
parameter_list|(
name|SRC
name|color
parameter_list|)
block|{
name|encoder
operator|->
name|server
operator|->
name|convertPixels
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|rect
argument_list|(
name|numRects
argument_list|)
argument_list|)
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|color
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|beginRect
specifier|inline
name|bool
name|QRfbMultiColorHextile
argument_list|<
name|SRC
argument_list|>
operator|::
name|beginRect
parameter_list|()
block|{
if|if
condition|(
operator|(
name|rects
operator|.
name|size
argument_list|()
operator|+
name|bpp
operator|+
literal|2
operator|)
operator|>
name|maxRectsSize
condition|)
return|return
literal|false
return|;
name|rects
operator|.
name|resize
argument_list|(
name|rects
operator|.
name|size
argument_list|()
operator|+
name|bpp
operator|+
literal|2
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|endRect
specifier|inline
name|void
name|QRfbMultiColorHextile
argument_list|<
name|SRC
argument_list|>
operator|::
name|endRect
parameter_list|()
block|{
name|setHeight
argument_list|(
name|numRects
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|++
name|numRects
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|read
name|bool
name|QRfbMultiColorHextile
argument_list|<
name|SRC
argument_list|>
operator|::
name|read
parameter_list|(
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
specifier|const
name|SRC
modifier|*
name|ptr
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|SRC
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
specifier|const
name|int
name|linestep
init|=
operator|(
name|stride
operator|/
sizeof|sizeof
argument_list|(
name|SRC
argument_list|)
operator|)
operator|-
name|width
decl_stmt|;
name|bpp
operator|=
name|encoder
operator|->
name|server
operator|->
name|clientBytesPerPixel
argument_list|()
expr_stmt|;
if|if
condition|(
name|encoder
operator|->
name|newBg
condition|)
name|encoder
operator|->
name|bg
operator|=
name|ptr
index|[
literal|0
index|]
expr_stmt|;
specifier|const
name|SRC
name|bg
init|=
name|encoder
operator|->
name|bg
decl_stmt|;
name|SRC
name|color
init|=
name|bg
decl_stmt|;
name|bool
name|inRect
init|=
literal|false
decl_stmt|;
name|numRects
operator|=
literal|0
expr_stmt|;
name|rects
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|inRect
operator|&&
operator|*
name|ptr
operator|!=
name|color
condition|)
block|{
comment|// end rect
name|setWidth
argument_list|(
name|numRects
argument_list|,
name|x
operator|-
name|rectx
argument_list|(
name|numRects
argument_list|)
argument_list|)
expr_stmt|;
name|endRect
argument_list|()
expr_stmt|;
name|inRect
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|inRect
operator|&&
operator|*
name|ptr
operator|!=
name|bg
condition|)
block|{
comment|// begin rect
if|if
condition|(
operator|!
name|beginRect
argument_list|()
condition|)
return|return
literal|false
return|;
name|inRect
operator|=
literal|true
expr_stmt|;
name|color
operator|=
operator|*
name|ptr
expr_stmt|;
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|setX
argument_list|(
name|numRects
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|setY
argument_list|(
name|numRects
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
operator|++
name|ptr
expr_stmt|;
block|}
if|if
condition|(
name|inRect
condition|)
block|{
comment|// end rect
name|setWidth
argument_list|(
name|numRects
argument_list|,
name|width
operator|-
name|rectx
argument_list|(
name|numRects
argument_list|)
argument_list|)
expr_stmt|;
name|endRect
argument_list|()
expr_stmt|;
name|inRect
operator|=
literal|false
expr_stmt|;
block|}
name|ptr
operator|+=
name|linestep
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|write
name|void
name|QRfbMultiColorHextile
argument_list|<
name|SRC
argument_list|>
operator|::
name|write
parameter_list|(
name|QTcpSocket
modifier|*
name|socket
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|padding
init|=
literal|3
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|quint8
argument_list|>
name|buffer
argument_list|(
name|bpp
operator|+
name|padding
operator|+
sizeof|sizeof
argument_list|(
name|quint8
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|numRects
argument_list|)
argument_list|)
decl_stmt|;
name|quint8
modifier|&
name|subenc
init|=
name|buffer
index|[
name|padding
index|]
decl_stmt|;
name|int
name|n
init|=
name|padding
operator|+
sizeof|sizeof
argument_list|(
name|quint8
argument_list|)
decl_stmt|;
name|subenc
operator|=
literal|8
operator||
literal|16
expr_stmt|;
comment|// AnySubrects | SubrectsColoured
if|if
condition|(
name|encoder
operator|->
name|newBg
condition|)
block|{
name|subenc
operator||=
literal|0x2
expr_stmt|;
comment|// Background
name|encoder
operator|->
name|server
operator|->
name|convertPixels
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
name|n
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
operator|&
name|encoder
operator|->
name|bg
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|n
operator|+=
name|bpp
expr_stmt|;
comment|//        encoder->newBg = false;
block|}
name|buffer
index|[
name|n
index|]
operator|=
name|numRects
expr_stmt|;
name|n
operator|+=
sizeof|sizeof
argument_list|(
name|numRects
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|+
name|padding
argument_list|)
argument_list|,
name|n
operator|-
name|padding
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|rects
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|rects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixelConversionNeeded
name|bool
name|QVNCServer
operator|::
name|pixelConversionNeeded
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|sameEndian
condition|)
return|return
literal|true
return|;
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
if|if
condition|(
name|qvnc_screen
operator|->
name|swapBytes
argument_list|()
condition|)
return|return
literal|true
return|;
endif|#
directive|endif
specifier|const
name|int
name|screendepth
init|=
name|qvnc_screen
operator|->
name|depth
argument_list|()
decl_stmt|;
if|if
condition|(
name|screendepth
operator|!=
name|pixelFormat
operator|.
name|bitsPerPixel
condition|)
return|return
literal|true
return|;
switch|switch
condition|(
name|screendepth
condition|)
block|{
case|case
literal|32
case|:
case|case
literal|24
case|:
return|return
literal|false
return|;
case|case
literal|18
case|:
return|return
operator|(
name|pixelFormat
operator|.
name|redBits
operator|==
literal|6
operator|&&
name|pixelFormat
operator|.
name|greenBits
operator|==
literal|6
operator|&&
name|pixelFormat
operator|.
name|blueBits
operator|==
literal|6
operator|)
return|;
case|case
literal|16
case|:
return|return
operator|(
name|pixelFormat
operator|.
name|redBits
operator|==
literal|5
operator|&&
name|pixelFormat
operator|.
name|greenBits
operator|==
literal|6
operator|&&
name|pixelFormat
operator|.
name|blueBits
operator|==
literal|5
operator|)
return|;
case|case
literal|15
case|:
return|return
operator|(
name|pixelFormat
operator|.
name|redBits
operator|==
literal|5
operator|&&
name|pixelFormat
operator|.
name|greenBits
operator|==
literal|5
operator|&&
name|pixelFormat
operator|.
name|blueBits
operator|==
literal|5
operator|)
return|;
case|case
literal|12
case|:
return|return
operator|(
name|pixelFormat
operator|.
name|redBits
operator|==
literal|4
operator|&&
name|pixelFormat
operator|.
name|greenBits
operator|==
literal|4
operator|&&
name|pixelFormat
operator|.
name|blueBits
operator|==
literal|4
operator|)
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// count: number of pixels
end_comment
begin_function
DECL|function|convertPixels
name|void
name|QVNCServer
operator|::
name|convertPixels
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|int
name|count
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|screendepth
init|=
name|qvnc_screen
operator|->
name|depth
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isBgr
init|=
name|qvnc_screen
operator|->
name|pixelType
argument_list|()
operator|==
name|QScreen
operator|::
name|BGRPixel
decl_stmt|;
comment|// cutoffs
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
if|if
condition|(
operator|!
name|swapBytes
condition|)
endif|#
directive|endif
if|if
condition|(
name|sameEndian
condition|)
block|{
if|if
condition|(
name|screendepth
operator|==
name|pixelFormat
operator|.
name|bitsPerPixel
condition|)
block|{
comment|// memcpy cutoffs
switch|switch
condition|(
name|screendepth
condition|)
block|{
case|case
literal|32
case|:
name|memcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|count
operator|*
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
literal|16
case|:
if|if
condition|(
name|pixelFormat
operator|.
name|redBits
operator|==
literal|5
operator|&&
name|pixelFormat
operator|.
name|greenBits
operator|==
literal|6
operator|&&
name|pixelFormat
operator|.
name|blueBits
operator|==
literal|5
condition|)
block|{
name|memcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|count
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|screendepth
operator|==
literal|16
operator|&&
name|pixelFormat
operator|.
name|bitsPerPixel
operator|==
literal|32
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
comment|// Currently fails on ARM if dst is not 4 byte aligned
specifier|const
name|quint32
modifier|*
name|src32
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|quint32
modifier|*
name|dst32
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|int
name|count32
init|=
name|count
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
decl_stmt|;
while|while
condition|(
name|count32
operator|--
condition|)
block|{
specifier|const
name|quint32
name|s
init|=
operator|*
name|src32
operator|++
decl_stmt|;
name|quint32
name|result1
decl_stmt|;
name|quint32
name|result2
decl_stmt|;
comment|// red
name|result1
operator|=
operator|(
operator|(
name|s
operator|&
literal|0xf8000000
operator|)
operator||
operator|(
operator|(
name|s
operator|&
literal|0xe0000000
operator|)
operator|>>
literal|5
operator|)
operator|)
operator|>>
literal|8
expr_stmt|;
name|result2
operator|=
operator|(
operator|(
name|s
operator|&
literal|0x0000f800
operator|)
operator||
operator|(
operator|(
name|s
operator|&
literal|0x0000e000
operator|)
operator|>>
literal|5
operator|)
operator|)
operator|<<
literal|8
expr_stmt|;
comment|// green
name|result1
operator||=
operator|(
operator|(
name|s
operator|&
literal|0x07e00000
operator|)
operator||
operator|(
operator|(
name|s
operator|&
literal|0x06000000
operator|)
operator|>>
literal|6
operator|)
operator|)
operator|>>
literal|11
expr_stmt|;
name|result2
operator||=
operator|(
operator|(
name|s
operator|&
literal|0x000007e0
operator|)
operator||
operator|(
operator|(
name|s
operator|&
literal|0x00000600
operator|)
operator|>>
literal|6
operator|)
operator|)
operator|<<
literal|5
expr_stmt|;
comment|// blue
name|result1
operator||=
operator|(
operator|(
name|s
operator|&
literal|0x001f0000
operator|)
operator||
operator|(
operator|(
name|s
operator|&
literal|0x001c0000
operator|)
operator|>>
literal|5
operator|)
operator|)
operator|>>
literal|13
expr_stmt|;
name|result2
operator||=
operator|(
operator|(
name|s
operator|&
literal|0x0000001f
operator|)
operator||
operator|(
operator|(
name|s
operator|&
literal|0x0000001c
operator|)
operator|>>
literal|5
operator|)
operator|)
operator|<<
literal|3
expr_stmt|;
operator|*
name|dst32
operator|++
operator|=
name|result2
expr_stmt|;
operator|*
name|dst32
operator|++
operator|=
name|result1
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|&
literal|0x1
condition|)
block|{
specifier|const
name|quint16
modifier|*
name|src16
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint16
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
decl_stmt|;
operator|*
name|dst32
operator|=
name|qt_conv16ToRgb
argument_list|(
name|src16
index|[
name|count
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return;
endif|#
directive|endif
block|}
block|}
specifier|const
name|int
name|bytesPerPixel
init|=
operator|(
name|pixelFormat
operator|.
name|bitsPerPixel
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
comment|//    nibble = 0;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|int
name|r
decl_stmt|,
name|g
decl_stmt|,
name|b
decl_stmt|;
switch|switch
condition|(
name|screendepth
condition|)
block|{
if|#
directive|if
literal|0
block|case 4: {             if (!nibble) {                 r = ((*src)& 0x0f)<< 4;             } else {                 r = (*src)& 0xf0;                 src++;             }             nibble = !nibble;             g = b = r;             break;         }
endif|#
directive|endif
case|case
literal|8
case|:
block|{
name|QRgb
name|rgb
init|=
name|qvnc_screen
operator|->
name|clut
argument_list|()
index|[
name|int
argument_list|(
operator|*
name|src
argument_list|)
index|]
decl_stmt|;
name|r
operator|=
name|qRed
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|g
operator|=
name|qGreen
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|b
operator|=
name|qBlue
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|src
operator|++
expr_stmt|;
break|break;
block|}
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_12
case|case
literal|12
case|:
block|{
name|quint32
name|p
init|=
name|quint32
argument_list|(
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|qrgb444
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|=
name|qRed
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|g
operator|=
name|qGreen
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|b
operator|=
name|qBlue
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|src
operator|+=
sizeof|sizeof
argument_list|(
name|qrgb444
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_15
case|case
literal|15
case|:
block|{
name|quint32
name|p
init|=
name|quint32
argument_list|(
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|qrgb555
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|=
name|qRed
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|g
operator|=
name|qGreen
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|b
operator|=
name|qBlue
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|src
operator|+=
sizeof|sizeof
argument_list|(
name|qrgb555
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
case|case
literal|16
case|:
block|{
name|quint16
name|p
init|=
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint16
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
if|if
condition|(
name|swapBytes
condition|)
name|p
operator|=
operator|(
operator|(
name|p
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|p
operator|&
literal|0xff00
operator|)
operator|>>
literal|8
operator|)
expr_stmt|;
endif|#
directive|endif
name|r
operator|=
operator|(
name|p
operator|>>
literal|11
operator|)
operator|&
literal|0x1f
expr_stmt|;
name|g
operator|=
operator|(
name|p
operator|>>
literal|5
operator|)
operator|&
literal|0x3f
expr_stmt|;
name|b
operator|=
name|p
operator|&
literal|0x1f
expr_stmt|;
name|r
operator|<<=
literal|3
expr_stmt|;
name|g
operator|<<=
literal|2
expr_stmt|;
name|b
operator|<<=
literal|3
expr_stmt|;
name|src
operator|+=
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
expr_stmt|;
break|break;
block|}
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_18
case|case
literal|18
case|:
block|{
name|quint32
name|p
init|=
name|quint32
argument_list|(
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|qrgb666
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|=
name|qRed
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|g
operator|=
name|qGreen
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|b
operator|=
name|qBlue
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|src
operator|+=
sizeof|sizeof
argument_list|(
name|qrgb666
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_24
case|case
literal|24
case|:
block|{
name|quint32
name|p
init|=
name|quint32
argument_list|(
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|qrgb888
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|=
name|qRed
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|g
operator|=
name|qGreen
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|b
operator|=
name|qBlue
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|src
operator|+=
sizeof|sizeof
argument_list|(
name|qrgb888
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
case|case
literal|32
case|:
block|{
name|quint32
name|p
init|=
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|r
operator|=
operator|(
name|p
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|g
operator|=
operator|(
name|p
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|b
operator|=
name|p
operator|&
literal|0xff
expr_stmt|;
name|src
operator|+=
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|r
operator|=
name|g
operator|=
name|b
operator|=
literal|0
expr_stmt|;
name|qDebug
argument_list|(
literal|"QVNCServer: don't support %dbpp display"
argument_list|,
name|screendepth
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
if|if
condition|(
name|swapBytes
operator|^
name|isBgr
condition|)
else|#
directive|else
if|if
condition|(
name|isBgr
condition|)
endif|#
directive|endif
name|qSwap
argument_list|(
name|r
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|r
operator|>>=
operator|(
literal|8
operator|-
name|pixelFormat
operator|.
name|redBits
operator|)
expr_stmt|;
name|g
operator|>>=
operator|(
literal|8
operator|-
name|pixelFormat
operator|.
name|greenBits
operator|)
expr_stmt|;
name|b
operator|>>=
operator|(
literal|8
operator|-
name|pixelFormat
operator|.
name|blueBits
operator|)
expr_stmt|;
name|int
name|pixel
init|=
operator|(
name|r
operator|<<
name|pixelFormat
operator|.
name|redShift
operator|)
operator||
operator|(
name|g
operator|<<
name|pixelFormat
operator|.
name|greenShift
operator|)
operator||
operator|(
name|b
operator|<<
name|pixelFormat
operator|.
name|blueShift
operator|)
decl_stmt|;
if|if
condition|(
name|sameEndian
operator|||
name|pixelFormat
operator|.
name|bitsPerPixel
operator|==
literal|8
condition|)
block|{
name|memcpy
argument_list|(
name|dst
argument_list|,
operator|&
name|pixel
argument_list|,
name|bytesPerPixel
argument_list|)
expr_stmt|;
comment|// XXX: do a simple for-loop instead?
name|dst
operator|+=
name|bytesPerPixel
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
switch|switch
condition|(
name|pixelFormat
operator|.
name|bitsPerPixel
condition|)
block|{
case|case
literal|16
case|:
name|pixel
operator|=
operator|(
operator|(
operator|(
name|pixel
operator|&
literal|0x0000ff00
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|pixel
operator|&
literal|0x000000ff
operator|)
operator|<<
literal|24
operator|)
operator|)
expr_stmt|;
break|break;
case|case
literal|32
case|:
name|pixel
operator|=
operator|(
operator|(
operator|(
name|pixel
operator|&
literal|0xff000000
operator|)
operator|>>
literal|24
operator|)
operator||
operator|(
operator|(
name|pixel
operator|&
literal|0x00ff0000
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|pixel
operator|&
literal|0x0000ff00
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|pixel
operator|&
literal|0x000000ff
operator|)
operator|<<
literal|24
operator|)
operator|)
expr_stmt|;
break|break;
default|default:
name|qDebug
argument_list|(
literal|"Cannot handle %d bpp client"
argument_list|,
name|pixelFormat
operator|.
name|bitsPerPixel
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// QSysInfo::ByteOrder == QSysInfo::LittleEndian
switch|switch
condition|(
name|pixelFormat
operator|.
name|bitsPerPixel
condition|)
block|{
case|case
literal|16
case|:
name|pixel
operator|=
operator|(
operator|(
operator|(
name|pixel
operator|&
literal|0xff000000
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|pixel
operator|&
literal|0x00ff0000
operator|)
operator|<<
literal|8
operator|)
operator|)
expr_stmt|;
break|break;
case|case
literal|32
case|:
name|pixel
operator|=
operator|(
operator|(
operator|(
name|pixel
operator|&
literal|0xff000000
operator|)
operator|>>
literal|24
operator|)
operator||
operator|(
operator|(
name|pixel
operator|&
literal|0x00ff0000
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|pixel
operator|&
literal|0x0000ff00
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|pixel
operator|&
literal|0x000000ff
operator|)
operator|<<
literal|24
operator|)
operator|)
expr_stmt|;
break|break;
default|default:
name|qDebug
argument_list|(
literal|"Cannot handle %d bpp client"
argument_list|,
name|pixelFormat
operator|.
name|bitsPerPixel
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|memcpy
argument_list|(
name|dst
argument_list|,
operator|&
name|pixel
argument_list|,
name|bytesPerPixel
argument_list|)
expr_stmt|;
comment|// XXX: simple for-loop instead?
name|dst
operator|+=
name|bytesPerPixel
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
end_ifndef
begin_function
DECL|function|blendCursor
specifier|static
name|void
name|blendCursor
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRect
modifier|&
name|imageRect
parameter_list|)
block|{
specifier|const
name|QRect
name|cursorRect
init|=
name|qt_screencursor
operator|->
name|boundingRect
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|intersection
init|=
operator|(
name|cursorRect
operator|&
name|imageRect
operator|)
decl_stmt|;
specifier|const
name|QRect
name|destRect
init|=
name|intersection
operator|.
name|translated
argument_list|(
operator|-
name|imageRect
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|srcRect
init|=
name|intersection
operator|.
name|translated
argument_list|(
operator|-
name|cursorRect
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|painter
operator|.
name|drawImage
argument_list|(
name|destRect
argument_list|,
name|qt_screencursor
operator|->
name|image
argument_list|()
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_CURSOR
end_comment
begin_constructor
DECL|function|QVNCDirtyMap
name|QVNCDirtyMap
operator|::
name|QVNCDirtyMap
parameter_list|(
name|QScreen
modifier|*
name|s
parameter_list|)
member_init_list|:
name|bytesPerPixel
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|numDirty
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|screen
argument_list|(
name|s
argument_list|)
block|{
name|bytesPerPixel
operator|=
operator|(
name|screen
operator|->
name|depth
argument_list|()
operator|+
literal|7
operator|)
operator|/
literal|8
expr_stmt|;
name|bufferWidth
operator|=
name|screen
operator|->
name|deviceWidth
argument_list|()
expr_stmt|;
name|bufferHeight
operator|=
name|screen
operator|->
name|deviceHeight
argument_list|()
expr_stmt|;
name|bufferStride
operator|=
name|bufferWidth
operator|*
name|bytesPerPixel
expr_stmt|;
name|buffer
operator|=
operator|new
name|uchar
index|[
name|bufferHeight
operator|*
name|bufferStride
index|]
expr_stmt|;
name|mapWidth
operator|=
operator|(
name|bufferWidth
operator|+
name|MAP_TILE_SIZE
operator|-
literal|1
operator|)
operator|/
name|MAP_TILE_SIZE
expr_stmt|;
name|mapHeight
operator|=
operator|(
name|bufferHeight
operator|+
name|MAP_TILE_SIZE
operator|-
literal|1
operator|)
operator|/
name|MAP_TILE_SIZE
expr_stmt|;
name|numTiles
operator|=
name|mapWidth
operator|*
name|mapHeight
expr_stmt|;
name|map
operator|=
operator|new
name|uchar
index|[
name|numTiles
index|]
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QVNCDirtyMap
name|QVNCDirtyMap
operator|::
name|~
name|QVNCDirtyMap
parameter_list|()
block|{
operator|delete
index|[]
name|map
expr_stmt|;
operator|delete
index|[]
name|buffer
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|reset
name|void
name|QVNCDirtyMap
operator|::
name|reset
parameter_list|()
block|{
name|memset
argument_list|(
name|map
argument_list|,
literal|1
argument_list|,
name|numTiles
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferHeight
operator|*
name|bufferStride
argument_list|)
expr_stmt|;
name|numDirty
operator|=
name|numTiles
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dirty
specifier|inline
name|bool
name|QVNCDirtyMap
operator|::
name|dirty
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
return|return
name|map
index|[
name|y
operator|*
name|mapWidth
operator|+
name|x
index|]
return|;
block|}
end_function
begin_function
DECL|function|setClean
specifier|inline
name|void
name|QVNCDirtyMap
operator|::
name|setClean
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|map
index|[
name|y
operator|*
name|mapWidth
operator|+
name|x
index|]
operator|=
literal|0
expr_stmt|;
operator|--
name|numDirty
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|setDirty
name|void
name|QVNCDirtyMapOptimized
argument_list|<
name|T
argument_list|>
operator|::
name|setDirty
parameter_list|(
name|int
name|tileX
parameter_list|,
name|int
name|tileY
parameter_list|,
name|bool
name|force
parameter_list|)
block|{
specifier|static
name|bool
name|alwaysForce
init|=
name|qgetenv
argument_list|(
literal|"QT_VNC_NO_COMPAREBUFFER"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|alwaysForce
condition|)
name|force
operator|=
literal|true
expr_stmt|;
name|bool
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|force
condition|)
block|{
specifier|const
name|int
name|lstep
init|=
name|screen
operator|->
name|linestep
argument_list|()
decl_stmt|;
specifier|const
name|int
name|startX
init|=
name|tileX
operator|*
name|MAP_TILE_SIZE
decl_stmt|;
specifier|const
name|int
name|startY
init|=
name|tileY
operator|*
name|MAP_TILE_SIZE
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|scrn
init|=
name|screen
operator|->
name|base
argument_list|()
operator|+
name|startY
operator|*
name|lstep
operator|+
name|startX
operator|*
name|bytesPerPixel
decl_stmt|;
name|uchar
modifier|*
name|old
init|=
name|buffer
operator|+
name|startY
operator|*
name|bufferStride
operator|+
name|startX
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
decl_stmt|;
specifier|const
name|int
name|tileHeight
init|=
operator|(
name|startY
operator|+
name|MAP_TILE_SIZE
operator|>
name|bufferHeight
condition|?
name|bufferHeight
operator|-
name|startY
else|:
name|MAP_TILE_SIZE
operator|)
decl_stmt|;
specifier|const
name|int
name|tileWidth
init|=
operator|(
name|startX
operator|+
name|MAP_TILE_SIZE
operator|>
name|bufferWidth
condition|?
name|bufferWidth
operator|-
name|startX
else|:
name|MAP_TILE_SIZE
operator|)
decl_stmt|;
specifier|const
name|bool
name|doInlines
init|=
operator|(
name|tileWidth
operator|==
name|MAP_TILE_SIZE
operator|)
decl_stmt|;
name|int
name|y
init|=
name|tileHeight
decl_stmt|;
if|if
condition|(
name|doInlines
condition|)
block|{
comment|// hw: memcmp/memcpy is inlined when using constants
while|while
condition|(
name|y
condition|)
block|{
if|if
condition|(
name|memcmp
argument_list|(
name|old
argument_list|,
name|scrn
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|*
name|MAP_TILE_SIZE
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|scrn
operator|+=
name|lstep
expr_stmt|;
name|old
operator|+=
name|bufferStride
expr_stmt|;
operator|--
name|y
expr_stmt|;
block|}
while|while
condition|(
name|y
condition|)
block|{
name|memcpy
argument_list|(
name|old
argument_list|,
name|scrn
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|*
name|MAP_TILE_SIZE
argument_list|)
expr_stmt|;
name|scrn
operator|+=
name|lstep
expr_stmt|;
name|old
operator|+=
name|bufferStride
expr_stmt|;
operator|--
name|y
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|y
condition|)
block|{
if|if
condition|(
name|memcmp
argument_list|(
name|old
argument_list|,
name|scrn
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|*
name|tileWidth
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|scrn
operator|+=
name|lstep
expr_stmt|;
name|old
operator|+=
name|bufferStride
expr_stmt|;
operator|--
name|y
expr_stmt|;
block|}
while|while
condition|(
name|y
condition|)
block|{
name|memcpy
argument_list|(
name|old
argument_list|,
name|scrn
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|*
name|tileWidth
argument_list|)
expr_stmt|;
name|scrn
operator|+=
name|lstep
expr_stmt|;
name|old
operator|+=
name|bufferStride
expr_stmt|;
operator|--
name|y
expr_stmt|;
block|}
block|}
block|}
specifier|const
name|int
name|mapIndex
init|=
name|tileY
operator|*
name|mapWidth
operator|+
name|tileX
decl_stmt|;
if|if
condition|(
operator|(
name|force
operator|||
name|changed
operator|)
operator|&&
operator|!
name|map
index|[
name|mapIndex
index|]
condition|)
block|{
name|map
index|[
name|mapIndex
index|]
operator|=
literal|1
expr_stmt|;
operator|++
name|numDirty
expr_stmt|;
block|}
block|}
end_function
begin_constructor
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|QRfbHextileEncoder
name|QRfbHextileEncoder
argument_list|<
name|SRC
argument_list|>
operator|::
name|QRfbHextileEncoder
parameter_list|(
name|QVNCServer
modifier|*
name|s
parameter_list|)
member_init_list|:
name|QRfbEncoder
argument_list|(
name|s
argument_list|)
member_init_list|,
name|singleColorHextile
argument_list|(
name|this
argument_list|)
member_init_list|,
name|dualColorHextile
argument_list|(
name|this
argument_list|)
member_init_list|,
name|multiColorHextile
argument_list|(
name|this
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*     \internal     Send dirty rects using hextile encoding. */
end_comment
begin_function
template|template
parameter_list|<
name|class
name|SRC
parameter_list|>
DECL|function|write
name|void
name|QRfbHextileEncoder
argument_list|<
name|SRC
argument_list|>
operator|::
name|write
parameter_list|()
block|{
name|QWSDisplay
operator|::
name|grab
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVNCDirtyMap
modifier|*
name|map
init|=
name|server
operator|->
name|dirtyMap
argument_list|()
decl_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
name|server
operator|->
name|clientSocket
argument_list|()
decl_stmt|;
specifier|const
name|quint32
name|encoding
init|=
name|htonl
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|// hextile encoding
specifier|const
name|int
name|bytesPerPixel
init|=
name|server
operator|->
name|clientBytesPerPixel
argument_list|()
decl_stmt|;
block|{
specifier|const
name|char
name|tmp
index|[
literal|2
index|]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
comment|// msg type, padding
name|socket
operator|->
name|write
argument_list|(
name|tmp
argument_list|,
sizeof|sizeof
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|quint16
name|count
init|=
name|htons
argument_list|(
name|map
operator|->
name|numDirty
argument_list|)
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|count
argument_list|,
sizeof|sizeof
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|->
name|numDirty
operator|<=
literal|0
condition|)
block|{
name|QWSDisplay
operator|::
name|ungrab
argument_list|()
expr_stmt|;
return|return;
block|}
name|newBg
operator|=
literal|true
expr_stmt|;
name|newFg
operator|=
literal|true
expr_stmt|;
specifier|const
name|QImage
name|screenImage
init|=
name|server
operator|->
name|screenImage
argument_list|()
decl_stmt|;
name|QRfbRect
name|rect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|MAP_TILE_SIZE
argument_list|,
name|MAP_TILE_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|map
operator|->
name|mapHeight
condition|;
operator|++
name|y
control|)
block|{
if|if
condition|(
name|rect
operator|.
name|y
operator|+
name|MAP_TILE_SIZE
operator|>
name|server
operator|->
name|screen
argument_list|()
operator|->
name|height
argument_list|()
condition|)
name|rect
operator|.
name|h
operator|=
name|server
operator|->
name|screen
argument_list|()
operator|->
name|height
argument_list|()
operator|-
name|rect
operator|.
name|y
expr_stmt|;
name|rect
operator|.
name|w
operator|=
name|MAP_TILE_SIZE
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|map
operator|->
name|mapWidth
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|->
name|dirty
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
continue|continue;
name|map
operator|->
name|setClean
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|rect
operator|.
name|x
operator|=
name|x
operator|*
name|MAP_TILE_SIZE
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|x
operator|+
name|MAP_TILE_SIZE
operator|>
name|server
operator|->
name|screen
argument_list|()
operator|->
name|deviceWidth
argument_list|()
condition|)
name|rect
operator|.
name|w
operator|=
name|server
operator|->
name|screen
argument_list|()
operator|->
name|deviceWidth
argument_list|()
operator|-
name|rect
operator|.
name|x
expr_stmt|;
name|rect
operator|.
name|write
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|encoding
argument_list|,
sizeof|sizeof
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|screendata
init|=
name|screenImage
operator|.
name|scanLine
argument_list|(
name|rect
operator|.
name|y
argument_list|)
operator|+
name|rect
operator|.
name|x
operator|*
name|screenImage
operator|.
name|depth
argument_list|()
operator|/
literal|8
decl_stmt|;
name|int
name|linestep
init|=
name|screenImage
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
comment|// hardware cursors must be blended with the screen memory
specifier|const
name|bool
name|doBlendCursor
init|=
name|qt_screencursor
operator|&&
operator|!
name|server
operator|->
name|hasClientCursor
argument_list|()
operator|&&
name|qt_screencursor
operator|->
name|isAccelerated
argument_list|()
decl_stmt|;
name|QImage
name|tileImage
decl_stmt|;
if|if
condition|(
name|doBlendCursor
condition|)
block|{
specifier|const
name|QRect
name|tileRect
argument_list|(
name|rect
operator|.
name|x
argument_list|,
name|rect
operator|.
name|y
argument_list|,
name|rect
operator|.
name|w
argument_list|,
name|rect
operator|.
name|h
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|cursorRect
init|=
name|qt_screencursor
operator|->
name|boundingRect
argument_list|()
operator|.
name|translated
argument_list|(
operator|-
name|server
operator|->
name|screen
argument_list|()
operator|->
name|offset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tileRect
operator|.
name|intersects
argument_list|(
name|cursorRect
argument_list|)
condition|)
block|{
name|tileImage
operator|=
name|screenImage
operator|.
name|copy
argument_list|(
name|tileRect
argument_list|)
expr_stmt|;
name|blendCursor
argument_list|(
name|tileImage
argument_list|,
name|tileRect
operator|.
name|translated
argument_list|(
name|server
operator|->
name|screen
argument_list|()
operator|->
name|offset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|screendata
operator|=
name|tileImage
operator|.
name|bits
argument_list|()
expr_stmt|;
name|linestep
operator|=
name|tileImage
operator|.
name|bytesPerLine
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_QWS_CURSOR
if|if
condition|(
name|singleColorHextile
operator|.
name|read
argument_list|(
name|screendata
argument_list|,
name|rect
operator|.
name|w
argument_list|,
name|rect
operator|.
name|h
argument_list|,
name|linestep
argument_list|)
condition|)
block|{
name|singleColorHextile
operator|.
name|write
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dualColorHextile
operator|.
name|read
argument_list|(
name|screendata
argument_list|,
name|rect
operator|.
name|w
argument_list|,
name|rect
operator|.
name|h
argument_list|,
name|linestep
argument_list|)
condition|)
block|{
name|dualColorHextile
operator|.
name|write
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|multiColorHextile
operator|.
name|read
argument_list|(
name|screendata
argument_list|,
name|rect
operator|.
name|w
argument_list|,
name|rect
operator|.
name|h
argument_list|,
name|linestep
argument_list|)
condition|)
block|{
name|multiColorHextile
operator|.
name|write
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|server
operator|->
name|doPixelConversion
argument_list|()
condition|)
block|{
specifier|const
name|int
name|bufferSize
init|=
name|rect
operator|.
name|w
operator|*
name|rect
operator|.
name|h
operator|*
name|bytesPerPixel
operator|+
literal|1
decl_stmt|;
specifier|const
name|int
name|padding
init|=
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|-
sizeof|sizeof
argument_list|(
name|char
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|resize
argument_list|(
name|bufferSize
operator|+
name|padding
argument_list|)
expr_stmt|;
name|buffer
index|[
name|padding
index|]
operator|=
literal|1
expr_stmt|;
comment|// Raw subencoding
comment|// convert pixels
name|char
modifier|*
name|b
init|=
name|buffer
operator|.
name|data
argument_list|()
operator|+
name|padding
operator|+
literal|1
decl_stmt|;
specifier|const
name|int
name|bstep
init|=
name|rect
operator|.
name|w
operator|*
name|bytesPerPixel
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rect
operator|.
name|h
condition|;
operator|++
name|i
control|)
block|{
name|server
operator|->
name|convertPixels
argument_list|(
name|b
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|screendata
argument_list|,
name|rect
operator|.
name|w
argument_list|)
expr_stmt|;
name|screendata
operator|+=
name|linestep
expr_stmt|;
name|b
operator|+=
name|bstep
expr_stmt|;
block|}
name|socket
operator|->
name|write
argument_list|(
name|buffer
operator|.
name|constData
argument_list|()
operator|+
name|padding
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|quint8
name|subenc
init|=
literal|1
decl_stmt|;
comment|// Raw subencoding
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|subenc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// send pixels
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rect
operator|.
name|h
condition|;
operator|++
name|i
control|)
block|{
name|socket
operator|->
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|screendata
argument_list|,
name|rect
operator|.
name|w
operator|*
name|bytesPerPixel
argument_list|)
expr_stmt|;
name|screendata
operator|+=
name|linestep
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
break|break;
name|rect
operator|.
name|y
operator|+=
name|MAP_TILE_SIZE
expr_stmt|;
block|}
name|socket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|map
operator|->
name|numDirty
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QWSDisplay
operator|::
name|ungrab
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|QRfbRawEncoder
operator|::
name|write
parameter_list|()
block|{
name|QWSDisplay
operator|::
name|grab
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVNCDirtyMap
modifier|*
name|map
init|=
name|server
operator|->
name|dirtyMap
argument_list|()
decl_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
name|server
operator|->
name|clientSocket
argument_list|()
decl_stmt|;
specifier|const
name|int
name|bytesPerPixel
init|=
name|server
operator|->
name|clientBytesPerPixel
argument_list|()
decl_stmt|;
comment|// create a region from the dirty rects and send the region's merged rects.
name|QRegion
name|rgn
decl_stmt|;
if|if
condition|(
name|map
condition|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|map
operator|->
name|mapHeight
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|map
operator|->
name|mapWidth
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|->
name|dirty
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
continue|continue;
name|rgn
operator|+=
name|QRect
argument_list|(
name|x
operator|*
name|MAP_TILE_SIZE
argument_list|,
name|y
operator|*
name|MAP_TILE_SIZE
argument_list|,
name|MAP_TILE_SIZE
argument_list|,
name|MAP_TILE_SIZE
argument_list|)
expr_stmt|;
name|map
operator|->
name|setClean
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
name|rgn
operator|&=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|server
operator|->
name|screen
argument_list|()
operator|->
name|deviceWidth
argument_list|()
argument_list|,
name|server
operator|->
name|screen
argument_list|()
operator|->
name|deviceHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|rgn
operator|.
name|rects
argument_list|()
decl_stmt|;
block|{
specifier|const
name|char
name|tmp
index|[
literal|2
index|]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
comment|// msg type, padding
name|socket
operator|->
name|write
argument_list|(
name|tmp
argument_list|,
sizeof|sizeof
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|quint16
name|count
init|=
name|htons
argument_list|(
name|rects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|count
argument_list|,
sizeof|sizeof
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rects
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|QWSDisplay
operator|::
name|ungrab
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|const
name|QImage
name|screenImage
init|=
name|server
operator|->
name|screenImage
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|tileRect
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QRfbRect
name|rect
argument_list|(
name|tileRect
operator|.
name|x
argument_list|()
argument_list|,
name|tileRect
operator|.
name|y
argument_list|()
argument_list|,
name|tileRect
operator|.
name|width
argument_list|()
argument_list|,
name|tileRect
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|rect
operator|.
name|write
argument_list|(
name|socket
argument_list|)
expr_stmt|;
specifier|const
name|quint32
name|encoding
init|=
name|htonl
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// raw encoding
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|encoding
argument_list|,
sizeof|sizeof
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|linestep
init|=
name|screenImage
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|screendata
init|=
name|screenImage
operator|.
name|scanLine
argument_list|(
name|rect
operator|.
name|y
argument_list|)
operator|+
name|rect
operator|.
name|x
operator|*
name|screenImage
operator|.
name|depth
argument_list|()
operator|/
literal|8
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
comment|// hardware cursors must be blended with the screen memory
specifier|const
name|bool
name|doBlendCursor
init|=
name|qt_screencursor
operator|&&
operator|!
name|server
operator|->
name|hasClientCursor
argument_list|()
operator|&&
name|qt_screencursor
operator|->
name|isAccelerated
argument_list|()
decl_stmt|;
name|QImage
name|tileImage
decl_stmt|;
if|if
condition|(
name|doBlendCursor
condition|)
block|{
specifier|const
name|QRect
name|cursorRect
init|=
name|qt_screencursor
operator|->
name|boundingRect
argument_list|()
operator|.
name|translated
argument_list|(
operator|-
name|server
operator|->
name|screen
argument_list|()
operator|->
name|offset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tileRect
operator|.
name|intersects
argument_list|(
name|cursorRect
argument_list|)
condition|)
block|{
name|tileImage
operator|=
name|screenImage
operator|.
name|copy
argument_list|(
name|tileRect
argument_list|)
expr_stmt|;
name|blendCursor
argument_list|(
name|tileImage
argument_list|,
name|tileRect
operator|.
name|translated
argument_list|(
name|server
operator|->
name|screen
argument_list|()
operator|->
name|offset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|screendata
operator|=
name|tileImage
operator|.
name|bits
argument_list|()
expr_stmt|;
name|linestep
operator|=
name|tileImage
operator|.
name|bytesPerLine
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_QWS_CURSOR
if|if
condition|(
name|server
operator|->
name|doPixelConversion
argument_list|()
condition|)
block|{
specifier|const
name|int
name|bufferSize
init|=
name|rect
operator|.
name|w
operator|*
name|rect
operator|.
name|h
operator|*
name|bytesPerPixel
decl_stmt|;
if|if
condition|(
name|bufferSize
operator|>
name|buffer
operator|.
name|size
argument_list|()
condition|)
name|buffer
operator|.
name|resize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
comment|// convert pixels
name|char
modifier|*
name|b
init|=
name|buffer
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|int
name|bstep
init|=
name|rect
operator|.
name|w
operator|*
name|bytesPerPixel
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rect
operator|.
name|h
condition|;
operator|++
name|i
control|)
block|{
name|server
operator|->
name|convertPixels
argument_list|(
name|b
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|screendata
argument_list|,
name|rect
operator|.
name|w
argument_list|)
expr_stmt|;
name|screendata
operator|+=
name|linestep
expr_stmt|;
name|b
operator|+=
name|bstep
expr_stmt|;
block|}
name|socket
operator|->
name|write
argument_list|(
name|buffer
operator|.
name|constData
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rect
operator|.
name|h
condition|;
operator|++
name|i
control|)
block|{
name|socket
operator|->
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|screendata
argument_list|,
name|rect
operator|.
name|w
operator|*
name|bytesPerPixel
argument_list|)
expr_stmt|;
name|screendata
operator|+=
name|linestep
expr_stmt|;
block|}
block|}
if|if
condition|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
break|break;
block|}
name|socket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|QWSDisplay
operator|::
name|ungrab
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|screenImage
specifier|inline
name|QImage
name|QVNCServer
operator|::
name|screenImage
parameter_list|()
specifier|const
block|{
return|return
name|QImage
argument_list|(
name|qvnc_screen
operator|->
name|base
argument_list|()
argument_list|,
name|qvnc_screen
operator|->
name|deviceWidth
argument_list|()
argument_list|,
name|qvnc_screen
operator|->
name|deviceHeight
argument_list|()
argument_list|,
name|qvnc_screen
operator|->
name|linestep
argument_list|()
argument_list|,
name|qvnc_screen
operator|->
name|pixelFormat
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|checkUpdate
name|void
name|QVNCServer
operator|::
name|checkUpdate
parameter_list|()
block|{
if|if
condition|(
operator|!
name|wantUpdate
condition|)
return|return;
if|if
condition|(
name|dirtyCursor
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
name|Q_ASSERT
argument_list|(
name|qvnc_cursor
argument_list|)
expr_stmt|;
name|qvnc_cursor
operator|->
name|write
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|dirtyCursor
operator|=
literal|false
expr_stmt|;
name|wantUpdate
operator|=
literal|false
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|dirtyMap
argument_list|()
operator|->
name|numDirty
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|encoder
condition|)
name|encoder
operator|->
name|write
argument_list|()
expr_stmt|;
name|wantUpdate
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|discardClient
name|void
name|QVNCServer
operator|::
name|discardClient
parameter_list|()
block|{
name|timer
operator|->
name|stop
argument_list|()
expr_stmt|;
name|state
operator|=
name|Unconnected
expr_stmt|;
operator|delete
name|encoder
expr_stmt|;
name|encoder
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
operator|delete
name|qvnc_cursor
expr_stmt|;
name|qvnc_cursor
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|qvnc_screen
operator|->
name|screen
argument_list|()
operator|&&
operator|!
name|qvnc_screen
operator|->
name|d_ptr
operator|->
name|noDisablePainting
operator|&&
name|QWSServer
operator|::
name|instance
argument_list|()
condition|)
name|QWSServer
operator|::
name|instance
argument_list|()
operator|->
name|enablePainting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//===========================================================================
end_comment
begin_comment
comment|/*!     \class QVNCScreen     \internal     \ingroup qws      \brief The QVNCScreen class implements a screen driver for VNC     servers.      Note that this class is only available in \l{Qt for Embedded Linux}.     Custom screen drivers can be added by subclassing the QScreen     class, using the QScreenDriverFactory class to dynamically load     the driver into the application.      The VNC protocol allows you to view and interact with the     computer's display from anywhere on the network. See the     \l{The VNC Protocol and Qt for Embedded Linux}{VNC protocol}     documentation for more details.      The default implementation of QVNCScreen inherits QLinuxFbScreen,     but any QScreen subclass, or QScreen itself, can serve as its base     class. This is easily achieved by manipulating the \c     VNCSCREEN_BASE definition in the header file.      \sa QScreen, {Running Applications} */
end_comment
begin_comment
comment|/*!     \fn QVNCScreen::QVNCScreen(int displayId)      Constructs a QVNCScreen object. The \a displayId argument     identifies the Qt for Embedded Linux server to connect to. */
end_comment
begin_constructor
DECL|function|QVNCScreen
name|QVNCScreen
operator|::
name|QVNCScreen
parameter_list|(
name|int
name|display_id
parameter_list|)
member_init_list|:
name|QProxyScreen
argument_list|(
name|display_id
argument_list|,
name|VNCClass
argument_list|)
block|{
name|d_ptr
operator|=
operator|new
name|QVNCScreenPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys this QVNCScreen object. */
end_comment
begin_destructor
DECL|function|~QVNCScreen
name|QVNCScreen
operator|::
name|~
name|QVNCScreen
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setDirty
name|void
name|QVNCScreen
operator|::
name|setDirty
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|d_ptr
operator|->
name|setDirty
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDirty
name|void
name|QVNCScreenPrivate
operator|::
name|setDirty
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|bool
name|force
parameter_list|)
block|{
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|q_ptr
operator|->
name|screen
argument_list|()
condition|)
name|q_ptr
operator|->
name|screen
argument_list|()
operator|->
name|setDirty
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vncServer
operator|||
operator|!
name|vncServer
operator|->
name|isConnected
argument_list|()
condition|)
return|return;
specifier|const
name|QRect
name|r
init|=
name|rect
operator|.
name|translated
argument_list|(
operator|-
name|q_ptr
operator|->
name|offset
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|x1
init|=
name|r
operator|.
name|x
argument_list|()
operator|/
name|MAP_TILE_SIZE
decl_stmt|;
name|int
name|y
init|=
name|r
operator|.
name|y
argument_list|()
operator|/
name|MAP_TILE_SIZE
decl_stmt|;
for|for
control|(
init|;
operator|(
name|y
operator|<=
name|r
operator|.
name|bottom
argument_list|()
operator|/
name|MAP_TILE_SIZE
operator|)
operator|&&
name|y
operator|<
name|dirty
operator|->
name|mapHeight
condition|;
name|y
operator|++
control|)
for|for
control|(
name|int
name|x
init|=
name|x1
init|;
operator|(
name|x
operator|<=
name|r
operator|.
name|right
argument_list|()
operator|/
name|MAP_TILE_SIZE
operator|)
operator|&&
name|x
operator|<
name|dirty
operator|->
name|mapWidth
condition|;
name|x
operator|++
control|)
name|dirty
operator|->
name|setDirty
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|force
argument_list|)
expr_stmt|;
name|vncServer
operator|->
name|setDirty
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getDisplayId
specifier|static
name|int
name|getDisplayId
parameter_list|(
specifier|const
name|QString
modifier|&
name|spec
parameter_list|)
block|{
name|QRegExp
name|regexp
argument_list|(
name|QLatin1String
argument_list|(
literal|":(\\d+)\\b"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regexp
operator|.
name|lastIndexIn
argument_list|(
name|spec
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QString
name|capture
init|=
name|regexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
return|return
name|capture
operator|.
name|toInt
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|connect
name|bool
name|QVNCScreen
operator|::
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
block|{
name|QString
name|dspec
init|=
name|displaySpec
decl_stmt|;
if|if
condition|(
name|dspec
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"vnc:"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|dspec
operator|=
name|dspec
operator|.
name|mid
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"vnc:"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|dspec
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"vnc"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
name|dspec
operator|=
name|QString
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|displayIdSpec
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" :%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|displayId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dspec
operator|.
name|endsWith
argument_list|(
name|displayIdSpec
argument_list|)
condition|)
name|dspec
operator|=
name|dspec
operator|.
name|left
argument_list|(
name|dspec
operator|.
name|size
argument_list|()
operator|-
name|displayIdSpec
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|args
init|=
name|dspec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QRegExp
name|refreshRegexp
argument_list|(
name|QLatin1String
argument_list|(
literal|"^refreshrate=(\\d+)$"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|args
operator|.
name|indexOf
argument_list|(
name|refreshRegexp
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|d_ptr
operator|->
name|refreshRate
operator|=
name|refreshRegexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|args
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|dspec
operator|=
name|args
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QString
name|driver
init|=
name|dspec
decl_stmt|;
name|int
name|colon
init|=
name|driver
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|>=
literal|0
condition|)
name|driver
operator|.
name|truncate
argument_list|(
name|colon
argument_list|)
expr_stmt|;
if|if
condition|(
name|QScreenDriverFactory
operator|::
name|keys
argument_list|()
operator|.
name|contains
argument_list|(
name|driver
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
specifier|const
name|int
name|id
init|=
name|getDisplayId
argument_list|(
name|dspec
argument_list|)
decl_stmt|;
name|QScreen
modifier|*
name|s
init|=
name|qt_get_screen
argument_list|(
name|id
argument_list|,
name|dspec
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|->
name|pixelFormat
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Indexed8
operator|||
name|s
operator|->
name|pixelFormat
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Invalid
operator|&&
name|s
operator|->
name|depth
argument_list|()
operator|==
literal|8
condition|)
name|qFatal
argument_list|(
literal|"QVNCScreen: unsupported screen format"
argument_list|)
expr_stmt|;
name|setScreen
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create virtual screen
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
name|QScreen
operator|::
name|setFrameBufferLittleEndian
argument_list|(
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|=
name|qgetenv
argument_list|(
literal|"QWS_DEPTH"
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
name|d
operator|=
literal|16
expr_stmt|;
name|QByteArray
name|str
init|=
name|qgetenv
argument_list|(
literal|"QWS_SIZE"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sscanf
argument_list|(
name|str
operator|.
name|constData
argument_list|()
argument_list|,
literal|"%dx%d"
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|dw
operator|=
name|w
expr_stmt|;
name|dh
operator|=
name|h
expr_stmt|;
block|}
else|else
block|{
name|dw
operator|=
name|w
operator|=
literal|640
expr_stmt|;
name|dh
operator|=
name|h
operator|=
literal|480
expr_stmt|;
block|}
specifier|const
name|QStringList
name|args
init|=
name|displaySpec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"paintonscreen"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|d_ptr
operator|->
name|doOnScreenSurface
operator|=
literal|true
expr_stmt|;
name|QRegExp
name|depthRegexp
argument_list|(
name|QLatin1String
argument_list|(
literal|"^depth=(\\d+)$"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|indexOf
argument_list|(
name|depthRegexp
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|d
operator|=
name|depthRegexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|QRegExp
name|sizeRegexp
argument_list|(
name|QLatin1String
argument_list|(
literal|"^size=(\\d+)x(\\d+)$"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|indexOf
argument_list|(
name|sizeRegexp
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|dw
operator|=
name|w
operator|=
name|sizeRegexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|dh
operator|=
name|h
operator|=
name|sizeRegexp
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
comment|// Handle display physical size spec.
name|QRegExp
name|mmWidthRegexp
argument_list|(
name|QLatin1String
argument_list|(
literal|"^mmWidth=?(\\d+)$"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|indexOf
argument_list|(
name|mmWidthRegexp
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|int
name|mmWidth
init|=
name|mmWidthRegexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|mmWidth
operator|>
literal|0
condition|)
name|d_ptr
operator|->
name|dpiX
operator|=
name|dw
operator|*
literal|25.4
operator|/
name|mmWidth
expr_stmt|;
block|}
name|QRegExp
name|mmHeightRegexp
argument_list|(
name|QLatin1String
argument_list|(
literal|"^mmHeight=?(\\d+)$"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|indexOf
argument_list|(
name|mmHeightRegexp
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|int
name|mmHeight
init|=
name|mmHeightRegexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|mmHeight
operator|>
literal|0
condition|)
name|d_ptr
operator|->
name|dpiY
operator|=
name|dh
operator|*
literal|25.4
operator|/
name|mmHeight
expr_stmt|;
block|}
name|QRegExp
name|dpiRegexp
argument_list|(
name|QLatin1String
argument_list|(
literal|"^dpi=(\\d+)(?:,(\\d+))?$"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|indexOf
argument_list|(
name|dpiRegexp
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|qreal
name|dpiX
init|=
name|dpiRegexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toFloat
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|dpiY
init|=
name|dpiRegexp
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|toFloat
argument_list|()
decl_stmt|;
if|if
condition|(
name|dpiX
operator|>
literal|0
condition|)
name|d_ptr
operator|->
name|dpiX
operator|=
name|dpiX
expr_stmt|;
name|d_ptr
operator|->
name|dpiY
operator|=
operator|(
name|dpiY
operator|>
literal|0
condition|?
name|dpiY
else|:
name|dpiX
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"noDisablePainting"
argument_list|)
argument_list|)
condition|)
name|d_ptr
operator|->
name|noDisablePainting
operator|=
literal|true
expr_stmt|;
name|QWSServer
operator|::
name|setDefaultMouse
argument_list|(
literal|"None"
argument_list|)
expr_stmt|;
name|QWSServer
operator|::
name|setDefaultKeyboard
argument_list|(
literal|"None"
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|configure
argument_list|()
expr_stmt|;
block|}
comment|// XXX
name|qt_screen
operator|=
name|this
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|disconnect
name|void
name|QVNCScreen
operator|::
name|disconnect
parameter_list|()
block|{
name|QProxyScreen
operator|::
name|disconnect
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_MULTIPROCESS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SHAREDMEMORY
argument_list|)
name|d_ptr
operator|->
name|shm
operator|.
name|detach
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|initDevice
name|bool
name|QVNCScreen
operator|::
name|initDevice
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QProxyScreen
operator|::
name|screen
argument_list|()
operator|&&
name|d
operator|==
literal|4
condition|)
block|{
name|screencols
operator|=
literal|16
expr_stmt|;
name|int
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|16
condition|;
name|idx
operator|++
operator|,
name|val
operator|+=
literal|17
control|)
block|{
name|screenclut
index|[
name|idx
index|]
operator|=
name|qRgb
argument_list|(
name|val
argument_list|,
name|val
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|d_ptr
operator|->
name|vncServer
operator|=
operator|new
name|QVNCServer
argument_list|(
name|this
argument_list|,
name|displayId
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|vncServer
operator|->
name|setRefreshRate
argument_list|(
name|d_ptr
operator|->
name|refreshRate
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|depth
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_32
case|case
literal|32
case|:
name|d_ptr
operator|->
name|dirty
operator|=
operator|new
name|QVNCDirtyMapOptimized
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_24
case|case
literal|24
case|:
name|d_ptr
operator|->
name|dirty
operator|=
operator|new
name|QVNCDirtyMapOptimized
argument_list|<
name|qrgb888
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_18
case|case
literal|18
case|:
name|d_ptr
operator|->
name|dirty
operator|=
operator|new
name|QVNCDirtyMapOptimized
argument_list|<
name|qrgb666
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_16
case|case
literal|16
case|:
name|d_ptr
operator|->
name|dirty
operator|=
operator|new
name|QVNCDirtyMapOptimized
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_15
case|case
literal|15
case|:
name|d_ptr
operator|->
name|dirty
operator|=
operator|new
name|QVNCDirtyMapOptimized
argument_list|<
name|qrgb555
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_12
case|case
literal|12
case|:
name|d_ptr
operator|->
name|dirty
operator|=
operator|new
name|QVNCDirtyMapOptimized
argument_list|<
name|qrgb444
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_8
case|case
literal|8
case|:
name|d_ptr
operator|->
name|dirty
operator|=
operator|new
name|QVNCDirtyMapOptimized
argument_list|<
name|quint8
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
name|qWarning
argument_list|(
literal|"QVNCScreen::initDevice: No support for screen depth %d"
argument_list|,
name|depth
argument_list|()
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|dirty
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|bool
name|ok
init|=
name|QProxyScreen
operator|::
name|initDevice
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
name|qt_screencursor
operator|=
operator|new
name|QVNCCursor
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|QProxyScreen
operator|::
name|screen
argument_list|()
condition|)
return|return
name|ok
return|;
comment|// Disable painting if there is only 1 display and nothing is attached to the VNC server
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|noDisablePainting
condition|)
name|QWSServer
operator|::
name|instance
argument_list|()
operator|->
name|enablePainting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|shutdownDevice
name|void
name|QVNCScreen
operator|::
name|shutdownDevice
parameter_list|()
block|{
name|QProxyScreen
operator|::
name|shutdownDevice
argument_list|()
expr_stmt|;
operator|delete
name|d_ptr
operator|->
name|vncServer
expr_stmt|;
operator|delete
name|d_ptr
operator|->
name|dirty
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_VNC
end_comment
end_unit
