begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"pvreglwindowsurface.h"
end_include
begin_include
include|#
directive|include
file|"pvreglscreen.h"
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QWSDisplay>
end_include
begin_constructor
DECL|function|PvrEglWindowSurface
name|PvrEglWindowSurface
operator|::
name|PvrEglWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|PvrEglScreen
modifier|*
name|screen
parameter_list|,
name|int
name|screenNum
parameter_list|)
member_init_list|:
name|QWSGLWindowSurface
argument_list|(
name|widget
argument_list|)
block|{
name|setSurfaceFlags
argument_list|(
name|QWSWindowSurface
operator|::
name|Opaque
argument_list|)
expr_stmt|;
name|this
operator|->
name|widget
operator|=
name|widget
expr_stmt|;
name|this
operator|->
name|screen
operator|=
name|screen
expr_stmt|;
name|this
operator|->
name|pdevice
operator|=
literal|0
expr_stmt|;
name|QPoint
name|pos
init|=
name|offset
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QSize
name|size
init|=
name|widget
operator|->
name|size
argument_list|()
decl_stmt|;
name|PvrQwsRect
name|pvrRect
decl_stmt|;
name|pvrRect
operator|.
name|x
operator|=
name|pos
operator|.
name|x
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|y
operator|=
name|pos
operator|.
name|y
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|width
operator|=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|height
operator|=
name|size
operator|.
name|height
argument_list|()
expr_stmt|;
name|transformRects
argument_list|(
operator|&
name|pvrRect
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Try to recover a previous PvrQwsDrawable object for the widget
comment|// if there is one.  This can happen when a PvrEglWindowSurface
comment|// is created for a widget, bound to a EGLSurface, and then destroyed.
comment|// When a new PvrEglWindowSurface is created for the widget, it will
comment|// pick up the previous PvrQwsDrawable if the EGLSurface has not been
comment|// destroyed in the meantime.
name|drawable
operator|=
name|pvrQwsFetchWindow
argument_list|(
operator|(
name|long
operator|)
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|drawable
condition|)
name|pvrQwsSetGeometry
argument_list|(
name|drawable
argument_list|,
operator|&
name|pvrRect
argument_list|)
expr_stmt|;
else|else
name|drawable
operator|=
name|pvrQwsCreateWindow
argument_list|(
name|screenNum
argument_list|,
operator|(
name|long
operator|)
name|widget
argument_list|,
operator|&
name|pvrRect
argument_list|)
expr_stmt|;
name|pvrQwsSetRotation
argument_list|(
name|drawable
argument_list|,
name|screen
operator|->
name|transformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|PvrEglWindowSurface
name|PvrEglWindowSurface
operator|::
name|PvrEglWindowSurface
parameter_list|()
member_init_list|:
name|QWSGLWindowSurface
argument_list|()
block|{
name|setSurfaceFlags
argument_list|(
name|QWSWindowSurface
operator|::
name|Opaque
argument_list|)
expr_stmt|;
name|drawable
operator|=
literal|0
expr_stmt|;
name|widget
operator|=
literal|0
expr_stmt|;
name|screen
operator|=
literal|0
expr_stmt|;
name|pdevice
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~PvrEglWindowSurface
name|PvrEglWindowSurface
operator|::
name|~
name|PvrEglWindowSurface
parameter_list|()
block|{
comment|// Release the PvrQwsDrawable.  If it is bound to an EGLSurface,
comment|// then it will stay around until a new PvrEglWindowSurface is
comment|// created for the widget.  If it is not bound to an EGLSurface,
comment|// it will be destroyed immediately.
if|if
condition|(
name|drawable
operator|&&
name|pvrQwsReleaseWindow
argument_list|(
name|drawable
argument_list|)
condition|)
name|pvrQwsDestroyDrawable
argument_list|(
name|drawable
argument_list|)
expr_stmt|;
operator|delete
name|pdevice
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|PvrEglWindowSurface
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|widget
operator|!=
literal|0
operator|)
return|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|PvrEglWindowSurface
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|drawable
condition|)
block|{
comment|// XXX: adjust for the screen offset.
name|PvrQwsRect
name|pvrRect
decl_stmt|;
name|pvrRect
operator|.
name|x
operator|=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|y
operator|=
name|rect
operator|.
name|y
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|width
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|height
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
name|transformRects
argument_list|(
operator|&
name|pvrRect
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|pvrQwsSetGeometry
argument_list|(
name|drawable
argument_list|,
operator|&
name|pvrRect
argument_list|)
expr_stmt|;
name|pvrQwsSetRotation
argument_list|(
name|drawable
argument_list|,
name|screen
operator|->
name|transformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QWSGLWindowSurface
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|move
name|bool
name|PvrEglWindowSurface
operator|::
name|move
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|QRect
name|rect
init|=
name|geometry
argument_list|()
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|drawable
condition|)
block|{
name|PvrQwsRect
name|pvrRect
decl_stmt|;
name|pvrRect
operator|.
name|x
operator|=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|y
operator|=
name|rect
operator|.
name|y
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|width
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|height
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
name|transformRects
argument_list|(
operator|&
name|pvrRect
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|pvrQwsSetGeometry
argument_list|(
name|drawable
argument_list|,
operator|&
name|pvrRect
argument_list|)
expr_stmt|;
name|pvrQwsSetRotation
argument_list|(
name|drawable
argument_list|,
name|screen
operator|->
name|transformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|QWSGLWindowSurface
operator|::
name|move
argument_list|(
name|offset
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|permanentState
name|QByteArray
name|PvrEglWindowSurface
operator|::
name|permanentState
parameter_list|()
specifier|const
block|{
comment|// Nothing interesting to pass to the server just yet.
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setPermanentState
name|void
name|PvrEglWindowSurface
operator|::
name|setPermanentState
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|state
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|PvrEglWindowSurface
operator|::
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
comment|// The GL paint engine is responsible for the swapBuffers() call.
comment|// If we were to call the base class's implementation of flush()
comment|// then it would fetch the image() and manually blit it to the
comment|// screeen instead of using the fast PVR2D blit.
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|image
name|QImage
name|PvrEglWindowSurface
operator|::
name|image
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|drawable
condition|)
block|{
name|PvrQwsRect
name|pvrRect
decl_stmt|;
name|pvrQwsGetGeometry
argument_list|(
name|drawable
argument_list|,
operator|&
name|pvrRect
argument_list|)
expr_stmt|;
name|void
modifier|*
name|data
init|=
name|pvrQwsGetRenderBuffer
argument_list|(
name|drawable
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
condition|)
block|{
return|return
name|QImage
argument_list|(
operator|(
name|uchar
operator|*
operator|)
name|data
argument_list|,
name|pvrRect
operator|.
name|width
argument_list|,
name|pvrRect
operator|.
name|height
argument_list|,
name|pvrQwsGetStride
argument_list|(
name|drawable
argument_list|)
argument_list|,
name|screen
operator|->
name|pixelFormat
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|QImage
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
name|screen
operator|->
name|pixelFormat
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|PvrEglWindowSurface
operator|::
name|paintDevice
parameter_list|()
block|{
return|return
name|widget
return|;
block|}
end_function
begin_function
DECL|function|setDirectRegion
name|void
name|PvrEglWindowSurface
operator|::
name|setDirectRegion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|r
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|QWSGLWindowSurface
operator|::
name|setDirectRegion
argument_list|(
name|r
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|drawable
condition|)
return|return;
comment|// Clip the region to the window boundaries in case the child
comment|// is partially outside the geometry of the parent.
name|QWidget
modifier|*
name|window
init|=
name|widget
operator|->
name|window
argument_list|()
decl_stmt|;
name|QRegion
name|region
init|=
name|r
decl_stmt|;
if|if
condition|(
name|widget
operator|!=
name|window
condition|)
block|{
name|QRect
name|rect
init|=
name|window
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|rect
operator|.
name|moveTo
argument_list|(
name|window
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|=
name|region
operator|.
name|intersect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pvrQwsClearVisibleRegion
argument_list|(
name|drawable
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|region
operator|.
name|rectCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QRect
name|rect
init|=
name|region
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|PvrQwsRect
name|pvrRect
decl_stmt|;
name|pvrRect
operator|.
name|x
operator|=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|y
operator|=
name|rect
operator|.
name|y
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|width
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|pvrRect
operator|.
name|height
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
name|transformRects
argument_list|(
operator|&
name|pvrRect
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|pvrQwsSetVisibleRegion
argument_list|(
name|drawable
argument_list|,
operator|&
name|pvrRect
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|pvrQwsSetRotation
argument_list|(
name|drawable
argument_list|,
name|screen
operator|->
name|transformation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pvrQwsSwapBuffers
argument_list|(
name|drawable
argument_list|,
literal|1
argument_list|)
condition|)
name|screen
operator|->
name|solidFill
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
name|PvrQwsRect
modifier|*
name|pvrRects
init|=
operator|new
name|PvrQwsRect
index|[
name|rects
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
name|QRect
name|rect
init|=
name|rects
index|[
name|index
index|]
decl_stmt|;
name|pvrRects
index|[
name|index
index|]
operator|.
name|x
operator|=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
name|pvrRects
index|[
name|index
index|]
operator|.
name|y
operator|=
name|rect
operator|.
name|y
argument_list|()
expr_stmt|;
name|pvrRects
index|[
name|index
index|]
operator|.
name|width
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|pvrRects
index|[
name|index
index|]
operator|.
name|height
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|transformRects
argument_list|(
name|pvrRects
argument_list|,
name|rects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pvrQwsSetVisibleRegion
argument_list|(
name|drawable
argument_list|,
name|pvrRects
argument_list|,
name|rects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pvrQwsSetRotation
argument_list|(
name|drawable
argument_list|,
name|screen
operator|->
name|transformation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pvrQwsSwapBuffers
argument_list|(
name|drawable
argument_list|,
literal|1
argument_list|)
condition|)
name|screen
operator|->
name|solidFill
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|region
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|pvrRects
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|transformRects
name|void
name|PvrEglWindowSurface
operator|::
name|transformRects
parameter_list|(
name|PvrQwsRect
modifier|*
name|rects
parameter_list|,
name|int
name|count
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|screen
operator|->
name|transformation
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
break|break;
case|case
literal|90
case|:
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|int
name|x
init|=
name|rects
index|[
name|index
index|]
operator|.
name|y
decl_stmt|;
name|int
name|y
init|=
name|screen
operator|->
name|height
argument_list|()
operator|-
operator|(
name|rects
index|[
name|index
index|]
operator|.
name|x
operator|+
name|rects
index|[
name|index
index|]
operator|.
name|width
operator|)
decl_stmt|;
name|rects
index|[
name|index
index|]
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|rects
index|[
name|index
index|]
operator|.
name|y
operator|=
name|y
expr_stmt|;
name|qSwap
argument_list|(
name|rects
index|[
name|index
index|]
operator|.
name|width
argument_list|,
name|rects
index|[
name|index
index|]
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|180
case|:
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|int
name|x
init|=
name|screen
operator|->
name|width
argument_list|()
operator|-
operator|(
name|rects
index|[
name|index
index|]
operator|.
name|x
operator|+
name|rects
index|[
name|index
index|]
operator|.
name|width
operator|)
decl_stmt|;
name|int
name|y
init|=
name|screen
operator|->
name|height
argument_list|()
operator|-
operator|(
name|rects
index|[
name|index
index|]
operator|.
name|y
operator|+
name|rects
index|[
name|index
index|]
operator|.
name|height
operator|)
decl_stmt|;
name|rects
index|[
name|index
index|]
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|rects
index|[
name|index
index|]
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|270
case|:
block|{
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|int
name|x
init|=
name|screen
operator|->
name|width
argument_list|()
operator|-
operator|(
name|rects
index|[
name|index
index|]
operator|.
name|y
operator|+
name|rects
index|[
name|index
index|]
operator|.
name|height
operator|)
decl_stmt|;
name|int
name|y
init|=
name|rects
index|[
name|index
index|]
operator|.
name|x
decl_stmt|;
name|rects
index|[
name|index
index|]
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|rects
index|[
name|index
index|]
operator|.
name|y
operator|=
name|y
expr_stmt|;
name|qSwap
argument_list|(
name|rects
index|[
name|index
index|]
operator|.
name|width
argument_list|,
name|rects
index|[
name|index
index|]
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
end_function
end_unit
