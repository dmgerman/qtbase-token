begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PVRQWSDRAWABLE_H
end_ifndef
begin_define
DECL|macro|PVRQWSDRAWABLE_H
define|#
directive|define
name|PVRQWSDRAWABLE_H
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
struct|struct
block|{
DECL|member|x
DECL|member|y
DECL|member|width
DECL|member|height
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|width
decl_stmt|,
name|height
decl_stmt|;
block|}
DECL|typedef|PvrQwsRect
name|PvrQwsRect
typedef|;
typedef|typedef
enum|enum
block|{
DECL|enumerator|PvrQwsScreen
name|PvrQwsScreen
block|,
DECL|enumerator|PvrQwsWindow
name|PvrQwsWindow
block|,
DECL|enumerator|PvrQwsPixmap
name|PvrQwsPixmap
block|}
DECL|typedef|PvrQwsDrawableType
name|PvrQwsDrawableType
typedef|;
typedef|typedef
enum|enum
block|{
DECL|enumerator|PvrQws_1BPP
name|PvrQws_1BPP
init|=
literal|0
block|,
DECL|enumerator|PvrQws_RGB565
name|PvrQws_RGB565
block|,
DECL|enumerator|PvrQws_ARGB4444
name|PvrQws_ARGB4444
block|,
DECL|enumerator|PvrQws_RGB888
name|PvrQws_RGB888
block|,
DECL|enumerator|PvrQws_ARGB8888
name|PvrQws_ARGB8888
block|,
DECL|enumerator|PvrQws_VGAEMU
name|PvrQws_VGAEMU
block|}
DECL|typedef|PvrQwsPixelFormat
name|PvrQwsPixelFormat
typedef|;
DECL|typedef|PvrQwsDrawable
typedef|typedef
name|struct
name|_PvrQwsDrawable
name|PvrQwsDrawable
typedef|;
DECL|typedef|PvrQwsSwapFunction
typedef|typedef
name|void
function_decl|(
modifier|*
name|PvrQwsSwapFunction
function_decl|)
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|,
name|int
name|repaintOnly
parameter_list|)
function_decl|;
comment|/* Open the display and prepare for window operations.  The display    can be opened multiple times and each time is reference counted.    The display will be finally closed when the same number of    calls to pvrQwsDisplayClose() have been encountered */
name|int
name|pvrQwsDisplayOpen
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Close the display */
name|void
name|pvrQwsDisplayClose
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Determine if the display is already open */
name|int
name|pvrQwsDisplayIsOpen
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Create a window that represents a particular framebuffer screen.    Initially the visible region will be the whole screen.  If the screen    window has already been created, then will return the same value */
name|PvrQwsDrawable
modifier|*
name|pvrQwsScreenWindow
parameter_list|(
name|int
name|screen
parameter_list|)
function_decl|;
comment|/* Create a top-level window on a particular framebuffer screen.    Initially the window will not have a visible region */
name|PvrQwsDrawable
modifier|*
name|pvrQwsCreateWindow
parameter_list|(
name|int
name|screen
parameter_list|,
name|long
name|winId
parameter_list|,
specifier|const
name|PvrQwsRect
modifier|*
name|rect
parameter_list|)
function_decl|;
comment|/* Fetch an existing window for a window id and increase its refcount */
name|PvrQwsDrawable
modifier|*
name|pvrQwsFetchWindow
parameter_list|(
name|long
name|winId
parameter_list|)
function_decl|;
comment|/* Release the refcount on a window.  Returns 1 if refcount is zero */
name|int
name|pvrQwsReleaseWindow
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
comment|/* Create an off-screen pixmap */
name|PvrQwsDrawable
modifier|*
name|pvrQwsCreatePixmap
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|screen
parameter_list|)
function_decl|;
comment|/* Destroy a previously-created drawable.  Will not destroy screens. */
name|void
name|pvrQwsDestroyDrawable
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
comment|/* Get a drawable's type */
name|PvrQwsDrawableType
name|pvrQwsGetDrawableType
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
comment|/* Sets the visible region for a window or screen drawable.  Pixels within    the specified rectangles will be copied to the framebuffer when the window    or screen is swapped.  The rectangles should be in global co-ordinates */
name|void
name|pvrQwsSetVisibleRegion
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|,
specifier|const
name|PvrQwsRect
modifier|*
name|rects
parameter_list|,
name|int
name|numRects
parameter_list|)
function_decl|;
comment|/* Clear the visible region for a window or screen drawable,    effectively removing it from the screen */
name|void
name|pvrQwsClearVisibleRegion
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
comment|/* Set the geometry for a drawable.  This can only be used on windows */
name|void
name|pvrQwsSetGeometry
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|,
specifier|const
name|PvrQwsRect
modifier|*
name|rect
parameter_list|)
function_decl|;
comment|/* Get the current geometry for a drawable */
name|void
name|pvrQwsGetGeometry
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|,
name|PvrQwsRect
modifier|*
name|rect
parameter_list|)
function_decl|;
comment|/* Set the rotation angle in degrees */
name|void
name|pvrQwsSetRotation
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|,
name|int
name|angle
parameter_list|)
function_decl|;
comment|/* Get the line stride for a drawable.  Returns zero if the buffers    are not allocated or have been invalidated */
name|int
name|pvrQwsGetStride
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
comment|/* Get the pixel format for a drawable */
name|PvrQwsPixelFormat
name|pvrQwsGetPixelFormat
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
comment|/* Get a pointer to the beginning of a drawable's current render buffer.    Returns null if the buffers are not allocated or have been invalidated */
name|void
modifier|*
name|pvrQwsGetRenderBuffer
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
comment|/* Allocate the buffers associated with a drawable.  We allocate one buffer    for pixmaps, and several for windows and screens */
name|int
name|pvrQwsAllocBuffers
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
comment|/* Free the buffers associated with a drawable */
name|void
name|pvrQwsFreeBuffers
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
comment|/* Invalidate the buffers associated with a drawable.  The buffers will    still be allocated but the next attempt to swap the buffers will fail */
name|void
name|pvrQwsInvalidateBuffers
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|)
function_decl|;
comment|/* Swap the back buffers for a window or screen and copy to the framebuffer */
name|int
name|pvrQwsSwapBuffers
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|,
name|int
name|repaintOnly
parameter_list|)
function_decl|;
comment|/* Set the swap function for a drawable.  When pvrQwsSwapBuffers()    is called on the drawable, the supplied function will be called    instead of copying the drawable contents to the screen.  This allows    higher-level compositors to know when a drawable has changed.    The swap function can be set to null to return to normal processing */
name|void
name|pvrQwsSetSwapFunction
parameter_list|(
name|PvrQwsDrawable
modifier|*
name|drawable
parameter_list|,
name|PvrQwsSwapFunction
name|func
parameter_list|,
name|void
modifier|*
name|userData
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
end_unit
