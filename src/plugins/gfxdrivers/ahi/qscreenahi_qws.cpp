begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qscreenahi_qws.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_AHI
end_ifndef
begin_include
include|#
directive|include
file|<QtGui/qcolor.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<private/qwssignalhandler_p.h>
end_include
begin_include
include|#
directive|include
file|<ahi.h>
end_include
begin_comment
comment|//#define QAHISCREEN_DEBUG
end_comment
begin_function
DECL|function|depthForPixelFormat
specifier|static
name|int
name|depthForPixelFormat
parameter_list|(
specifier|const
name|AhiPixelFormat_t
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|AhiPix1bpp
case|:
return|return
literal|1
return|;
case|case
name|AhiPix2bpp
case|:
return|return
literal|2
return|;
case|case
name|AhiPix4bpp
case|:
return|return
literal|4
return|;
case|case
name|AhiPix8bpp_332RGB
case|:
case|case
name|AhiPix8bpp
case|:
return|return
literal|8
return|;
case|case
name|AhiPix16bpp_444RGB
case|:
return|return
literal|12
return|;
case|case
name|AhiPix16bpp_555RGB
case|:
return|return
literal|15
return|;
case|case
name|AhiPix16bpp_565RGB
case|:
return|return
literal|16
return|;
case|case
name|AhiPix32bpp_8888ARGB
case|:
case|case
name|AhiPix32bpp_8888BGRA
case|:
return|return
literal|32
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
end_function
begin_function
DECL|function|pixelFormatForImageFormat
specifier|static
name|AhiPixelFormat_t
name|pixelFormatForImageFormat
parameter_list|(
specifier|const
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_Mono
case|:
case|case
name|QImage
operator|::
name|Format_MonoLSB
case|:
return|return
name|AhiPix1bpp
return|;
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
return|return
name|AhiPix8bpp
return|;
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
return|return
name|AhiPix32bpp_8888ARGB
return|;
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
return|return
name|AhiPix16bpp_565RGB
return|;
case|case
name|QImage
operator|::
name|Format_RGB555
case|:
return|return
name|AhiPix16bpp_555RGB
return|;
case|case
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_RGB444
case|:
return|return
name|AhiPix16bpp_444RGB
return|;
default|default:
return|return
name|AhiPixelFormatMax
return|;
block|}
block|}
end_function
begin_class
DECL|class|QAhiScreenCursor
class|class
name|QAhiScreenCursor
super|:
specifier|public
name|QScreenCursor
block|{
public|public:
name|QAhiScreenCursor
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|AhiDevCtx_t
name|context
parameter_list|)
constructor_decl|;
name|void
name|set
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|hotx
parameter_list|,
name|int
name|hoty
parameter_list|)
function_decl|;
name|void
name|move
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
name|void
name|show
parameter_list|()
function_decl|;
name|void
name|hide
parameter_list|()
function_decl|;
private|private:
DECL|member|screen
name|QScreen
modifier|*
name|screen
decl_stmt|;
DECL|member|context
name|AhiDevCtx_t
name|context
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QAhiScreenCursor
name|QAhiScreenCursor
operator|::
name|QAhiScreenCursor
parameter_list|(
name|QScreen
modifier|*
name|s
parameter_list|,
name|AhiDevCtx_t
name|c
parameter_list|)
member_init_list|:
name|QScreenCursor
argument_list|()
member_init_list|,
name|screen
argument_list|(
name|s
argument_list|)
member_init_list|,
name|context
argument_list|(
name|c
argument_list|)
block|{
name|hwaccel
operator|=
literal|true
expr_stmt|;
name|supportsAlpha
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|enable
condition|)
name|show
argument_list|()
expr_stmt|;
else|else
name|hide
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|set
name|void
name|QAhiScreenCursor
operator|::
name|set
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|hotx
parameter_list|,
name|int
name|hoty
parameter_list|)
block|{
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QScreenCursor
operator|::
name|set
argument_list|(
name|image
argument_list|,
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_MonoLSB
condition|)
block|{
name|set
argument_list|(
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_MonoLSB
argument_list|)
argument_list|,
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
return|return;
block|}
name|AhiPixelFormat_t
name|pixFmt
init|=
name|pixelFormatForImageFormat
argument_list|(
name|image
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixFmt
operator|>=
name|AhiPixelFormatMax
condition|)
block|{
comment|// generic fallback
name|QImage
operator|::
name|Format
name|toFormat
init|=
name|screen
operator|->
name|pixelFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|toFormat
operator|==
name|QImage
operator|::
name|Format_Invalid
condition|)
name|toFormat
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
name|set
argument_list|(
name|image
operator|.
name|convertToFormat
argument_list|(
name|toFormat
argument_list|)
argument_list|,
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
return|return;
block|}
name|AhiPoint_t
name|hotSpot
init|=
block|{
name|hotx
block|,
name|hoty
block|}
decl_stmt|;
name|AhiSize_t
name|bitmapSize
init|=
block|{
name|image
operator|.
name|width
argument_list|()
block|,
name|image
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|AhiBitmap_t
name|bitmap
init|=
block|{
name|bitmapSize
block|,
operator|(
name|void
operator|*
operator|)
operator|(
name|image
operator|.
name|bits
argument_list|()
operator|)
block|,
name|image
operator|.
name|bytesPerLine
argument_list|()
block|,
name|pixFmt
block|}
decl_stmt|;
name|AhiSts_t
name|status
decl_stmt|;
name|status
operator|=
name|AhiDispCursorSet
argument_list|(
name|context
argument_list|,
name|AhiCursor1
argument_list|,
operator|&
name|bitmap
argument_list|,
operator|&
name|hotSpot
argument_list|,
name|image
operator|.
name|serialNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
name|qWarning
argument_list|(
literal|"QAhiScreenCursor::set(): AhiDispCursorSet failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|QScreenCursor
operator|::
name|set
argument_list|(
name|image
argument_list|,
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|move
name|void
name|QAhiScreenCursor
operator|::
name|move
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|AhiPoint_t
name|pos
init|=
block|{
name|x
block|,
name|y
block|}
decl_stmt|;
name|AhiSts_t
name|status
init|=
name|AhiDispCursorPos
argument_list|(
name|context
argument_list|,
name|AhiCursor1
argument_list|,
operator|&
name|pos
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
name|qWarning
argument_list|(
literal|"QAhiScreenCursor::move(): error setting mouse position: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|QScreenCursor
operator|::
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|show
name|void
name|QAhiScreenCursor
operator|::
name|show
parameter_list|()
block|{
name|AhiSts_t
name|status
decl_stmt|;
name|status
operator|=
name|AhiDispCursorState
argument_list|(
name|context
argument_list|,
name|AhiCursor1
argument_list|,
name|AhiCursorStateOn
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
name|qWarning
argument_list|(
literal|"QAhiScreenCursor::show(): error setting state: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|QScreenCursor
operator|::
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QAhiScreenCursor
operator|::
name|hide
parameter_list|()
block|{
name|AhiDispCursorState
argument_list|(
name|context
argument_list|,
name|AhiCursor1
argument_list|,
name|AhiCursorStateOff
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QScreenCursor
operator|::
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QAhiScreenPrivate
class|class
name|QAhiScreenPrivate
super|:
specifier|public
name|QObject
block|{
public|public:
name|QAhiScreenPrivate
parameter_list|()
constructor_decl|;
name|~
name|QAhiScreenPrivate
parameter_list|()
destructor_decl|;
name|bool
name|setMode
parameter_list|(
name|AhiDispMode_t
name|mode
parameter_list|)
function_decl|;
DECL|member|context
name|AhiDevCtx_t
name|context
decl_stmt|;
DECL|member|surface
name|AhiSurf_t
name|surface
decl_stmt|;
DECL|member|cursor
name|QAhiScreenCursor
modifier|*
name|cursor
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QAhiScreenPrivate
name|QAhiScreenPrivate
operator|::
name|QAhiScreenPrivate
parameter_list|()
member_init_list|:
name|context
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|surface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cursor
argument_list|(
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_SIGNALHANDLER
name|QWSSignalHandler
operator|::
name|instance
argument_list|()
operator|->
name|addObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QAhiScreenPrivate
name|QAhiScreenPrivate
operator|::
name|~
name|QAhiScreenPrivate
parameter_list|()
block|{
operator|delete
name|cursor
expr_stmt|;
if|if
condition|(
name|surface
condition|)
block|{
name|AhiSurfFree
argument_list|(
name|context
argument_list|,
name|surface
argument_list|)
expr_stmt|;
name|surface
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|context
condition|)
block|{
name|AhiDevClose
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|=
literal|0
expr_stmt|;
block|}
name|AhiTerm
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setMode
name|bool
name|QAhiScreenPrivate
operator|::
name|setMode
parameter_list|(
name|AhiDispMode_t
name|mode
parameter_list|)
block|{
name|AhiSts_t
name|status
decl_stmt|;
name|status
operator|=
name|AhiDispModeSet
argument_list|(
name|context
argument_list|,
operator|&
name|mode
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qCritical
argument_list|(
literal|"QAhiScreenPrivate::setMode(): AhiDispModeSet failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|surface
condition|)
block|{
name|AhiSurfFree
argument_list|(
name|context
argument_list|,
name|surface
argument_list|)
expr_stmt|;
name|surface
operator|=
literal|0
expr_stmt|;
block|}
name|status
operator|=
name|AhiSurfAlloc
argument_list|(
name|context
argument_list|,
operator|&
name|surface
argument_list|,
operator|&
name|mode
operator|.
name|size
argument_list|,
name|mode
operator|.
name|pixFmt
argument_list|,
name|AHIFLAG_SURFFIXED
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qCritical
argument_list|(
literal|"QAhiScreenPrivate::setMode(): AhisurfAlloc failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|status
operator|=
name|AhiDispSurfSet
argument_list|(
name|context
argument_list|,
name|surface
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qCritical
argument_list|(
literal|"QAhiScreenPrivate::setMode(): AhiDispSurfSet failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_constructor
DECL|function|QAhiScreen
name|QAhiScreen
operator|::
name|QAhiScreen
parameter_list|(
name|int
name|displayId
parameter_list|)
member_init_list|:
name|QScreen
argument_list|(
name|displayId
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QAhiScreenPrivate
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QAhiScreen
name|QAhiScreen
operator|::
name|~
name|QAhiScreen
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|configure
name|bool
name|QAhiScreen
operator|::
name|configure
parameter_list|()
block|{
name|AhiSurfInfo_t
name|surfaceInfo
decl_stmt|;
name|AhiSts_t
name|status
decl_stmt|;
name|status
operator|=
name|AhiSurfInfo
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
name|d_ptr
operator|->
name|surface
argument_list|,
operator|&
name|surfaceInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qCritical
argument_list|(
literal|"QAhiScreen::configure(): AhiSurfInfo failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QScreen
operator|::
name|data
operator|=
literal|0
expr_stmt|;
name|QScreen
operator|::
name|w
operator|=
name|QScreen
operator|::
name|dw
operator|=
name|surfaceInfo
operator|.
name|size
operator|.
name|cx
expr_stmt|;
name|QScreen
operator|::
name|h
operator|=
name|QScreen
operator|::
name|dh
operator|=
name|surfaceInfo
operator|.
name|size
operator|.
name|cy
expr_stmt|;
name|QScreen
operator|::
name|lstep
operator|=
name|surfaceInfo
operator|.
name|stride
expr_stmt|;
name|QScreen
operator|::
name|size
operator|=
name|surfaceInfo
operator|.
name|sizeInBytes
expr_stmt|;
switch|switch
condition|(
name|surfaceInfo
operator|.
name|pixFmt
condition|)
block|{
case|case
name|AhiPix1bpp
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
name|QScreen
operator|::
name|d
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|AhiPix4bpp
case|:
name|QScreen
operator|::
name|d
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|AhiPix8bpp_332RGB
case|:
case|case
name|AhiPix8bpp
case|:
name|QScreen
operator|::
name|d
operator|=
literal|8
expr_stmt|;
break|break;
case|case
name|AhiPix16bpp_444RGB
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB444
argument_list|)
expr_stmt|;
name|QScreen
operator|::
name|d
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|AhiPix16bpp_555RGB
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
expr_stmt|;
name|QScreen
operator|::
name|d
operator|=
literal|15
expr_stmt|;
break|break;
case|case
name|AhiPix16bpp_565RGB
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
expr_stmt|;
name|QScreen
operator|::
name|d
operator|=
literal|16
expr_stmt|;
break|break;
case|case
name|AhiPix2bpp
case|:
name|QScreen
operator|::
name|d
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|AhiPix32bpp_8888ARGB
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
comment|// fallthrough
case|case
name|AhiPix32bpp_8888BGRA
case|:
name|QScreen
operator|::
name|d
operator|=
literal|32
expr_stmt|;
break|break;
default|default:
name|qCritical
argument_list|(
literal|"QAhiScreen::configure(): Unknown pixel format: %x"
argument_list|,
name|surfaceInfo
operator|.
name|pixFmt
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|int
name|dpi
init|=
literal|72
decl_stmt|;
name|QScreen
operator|::
name|physWidth
operator|=
name|qRound
argument_list|(
name|QScreen
operator|::
name|dw
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
name|QScreen
operator|::
name|physHeight
operator|=
name|qRound
argument_list|(
name|QScreen
operator|::
name|dh
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|connect
name|bool
name|QAhiScreen
operator|::
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|displaySpec
argument_list|)
expr_stmt|;
name|AhiSts_t
name|status
decl_stmt|;
name|status
operator|=
name|AhiInit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qCritical
argument_list|(
literal|"QAhiScreen::connect(): AhiInit failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|AhiDev_t
name|device
decl_stmt|;
name|AhiDevInfo_t
name|info
decl_stmt|;
name|status
operator|=
name|AhiDevEnum
argument_list|(
operator|&
name|device
argument_list|,
operator|&
name|info
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qCritical
argument_list|(
literal|"QAhiScreen::connect(): AhiDevEnum failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
ifdef|#
directive|ifdef
name|QAHISCREEN_DEBUG
block|{
name|int
name|displayNo
init|=
literal|0
decl_stmt|;
name|AhiDevInfo_t
name|dispInfo
init|=
name|info
decl_stmt|;
name|qDebug
argument_list|(
literal|"AHI supported devices:"
argument_list|)
expr_stmt|;
do|do
block|{
name|qDebug
argument_list|(
literal|"  %2i: %s, sw version: %s (rev %u)\n"
literal|"       chip: 0x%x (rev %u), mem: %i (%i/%i), bus: 0x%x"
argument_list|,
name|displayNo
argument_list|,
name|dispInfo
operator|.
name|name
argument_list|,
name|dispInfo
operator|.
name|swVersion
argument_list|,
name|uint
argument_list|(
name|dispInfo
operator|.
name|swRevision
argument_list|)
argument_list|,
name|uint
argument_list|(
name|dispInfo
operator|.
name|chipId
argument_list|)
argument_list|,
name|uint
argument_list|(
name|dispInfo
operator|.
name|revisionId
argument_list|)
argument_list|,
name|uint
argument_list|(
name|dispInfo
operator|.
name|totalMemory
argument_list|)
argument_list|,
name|uint
argument_list|(
name|dispInfo
operator|.
name|internalMemSize
argument_list|)
argument_list|,
name|uint
argument_list|(
name|dispInfo
operator|.
name|externalMemSize
argument_list|)
argument_list|,
name|uint
argument_list|(
name|dispInfo
operator|.
name|cpuBusInterfaceMode
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|=
name|AhiDevEnum
argument_list|(
operator|&
name|device
argument_list|,
operator|&
name|info
argument_list|,
operator|++
name|displayNo
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|status
operator|==
name|AhiStsOk
condition|)
do|;
block|}
endif|#
directive|endif
name|status
operator|=
name|AhiDevOpen
argument_list|(
operator|&
name|d_ptr
operator|->
name|context
argument_list|,
name|device
argument_list|,
literal|"qscreenahi"
argument_list|,
name|AHIFLAG_USERLEVEL
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qCritical
argument_list|(
literal|"QAhiScreen::connect(): AhiDevOpen failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|AhiDispMode_t
name|mode
decl_stmt|;
name|status
operator|=
name|AhiDispModeEnum
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
operator|&
name|mode
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qCritical
argument_list|(
literal|"QAhiScreen::connect(): AhiDispModeEnum failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
ifdef|#
directive|ifdef
name|QAHISCREEN_DEBUG
block|{
name|int
name|modeNo
init|=
literal|0
decl_stmt|;
name|AhiDispMode_t
name|modeInfo
init|=
name|mode
decl_stmt|;
name|qDebug
argument_list|(
literal|"AHI supported modes:"
argument_list|)
expr_stmt|;
do|do
block|{
name|qDebug
argument_list|(
literal|"  %2i: %ux%u, fmt: %i, %u Hz, rot: %i, mirror: %i"
argument_list|,
name|modeNo
argument_list|,
name|uint
argument_list|(
name|modeInfo
operator|.
name|size
operator|.
name|cx
argument_list|)
argument_list|,
name|uint
argument_list|(
name|modeInfo
operator|.
name|size
operator|.
name|cy
argument_list|)
argument_list|,
name|modeInfo
operator|.
name|pixFmt
argument_list|,
name|uint
argument_list|(
name|modeInfo
operator|.
name|frequency
argument_list|)
argument_list|,
name|modeInfo
operator|.
name|rotation
argument_list|,
name|modeInfo
operator|.
name|mirror
argument_list|)
expr_stmt|;
name|status
operator|=
name|AhiDispModeEnum
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
operator|&
name|modeInfo
argument_list|,
operator|++
name|modeNo
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|status
operator|==
name|AhiStsOk
condition|)
do|;
block|}
endif|#
directive|endif
if|if
condition|(
name|QApplication
operator|::
name|type
argument_list|()
operator|==
name|QApplication
operator|::
name|GuiServer
condition|)
block|{
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|setMode
argument_list|(
name|mode
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
name|status
operator|=
name|AhiDispSurfGet
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
operator|&
name|d_ptr
operator|->
name|surface
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qCritical
argument_list|(
literal|"QAhiScreen::connect(): AhiDispSurfGet failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|status
operator|=
name|AhiDispModeGet
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
operator|&
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qCritical
argument_list|(
literal|"QAhiScreen::context(): AhiDispModeGet failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
name|configure
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|disconnect
name|void
name|QAhiScreen
operator|::
name|disconnect
parameter_list|()
block|{
name|AhiSurfFree
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
name|d_ptr
operator|->
name|surface
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|surface
operator|=
literal|0
expr_stmt|;
name|AhiDevClose
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|context
operator|=
literal|0
expr_stmt|;
name|AhiTerm
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initDevice
name|bool
name|QAhiScreen
operator|::
name|initDevice
parameter_list|()
block|{
name|QScreenCursor
operator|::
name|initSoftwareCursor
argument_list|()
expr_stmt|;
name|AhiSts_t
name|status
init|=
name|AhiDispState
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
name|AhiDispStateOn
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qCritical
argument_list|(
literal|"QAhiScreen::connect(): AhiDispState failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|shutdownDevice
name|void
name|QAhiScreen
operator|::
name|shutdownDevice
parameter_list|()
block|{
name|AhiDispState
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
name|AhiDispStateOff
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMode
name|void
name|QAhiScreen
operator|::
name|setMode
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|int
name|modeNo
init|=
literal|0
decl_stmt|;
name|AhiDispMode_t
name|mode
decl_stmt|;
name|AhiSts_t
name|status
init|=
name|AhiStsOk
decl_stmt|;
while|while
condition|(
name|status
operator|==
name|AhiStsOk
condition|)
block|{
name|status
operator|=
name|AhiDispModeEnum
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
operator|&
name|mode
argument_list|,
name|modeNo
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|.
name|size
operator|.
name|cx
operator|==
name|uint
argument_list|(
name|width
argument_list|)
operator|&&
name|mode
operator|.
name|size
operator|.
name|cy
operator|==
name|uint
argument_list|(
name|height
argument_list|)
operator|&&
name|depthForPixelFormat
argument_list|(
name|mode
operator|.
name|pixFmt
argument_list|)
operator|==
name|depth
condition|)
block|{
name|d_ptr
operator|->
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|configure
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
end_function
begin_function
DECL|function|blit
name|void
name|QAhiScreen
operator|::
name|blit
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|reg
parameter_list|)
block|{
name|AhiPixelFormat_t
name|pixFmt
init|=
name|pixelFormatForImageFormat
argument_list|(
name|image
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixFmt
operator|>=
name|AhiPixelFormatMax
condition|)
block|{
comment|// generic fallback
name|QImage
operator|::
name|Format
name|toFormat
init|=
name|pixelFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|toFormat
operator|==
name|QImage
operator|::
name|Format_Invalid
condition|)
name|toFormat
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
name|blit
argument_list|(
name|image
operator|.
name|convertToFormat
argument_list|(
name|toFormat
argument_list|)
argument_list|,
name|topLeft
argument_list|,
name|reg
argument_list|)
expr_stmt|;
return|return;
block|}
name|AhiSts_t
name|status
decl_stmt|;
name|status
operator|=
name|AhiDrawSurfDstSet
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
name|d_ptr
operator|->
name|surface
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAhiScreen::blit(): AhiDrawSurfDstSet failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
operator|(
name|reg
operator|&
name|region
argument_list|()
operator|)
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|int
name|numRects
init|=
name|rects
operator|.
name|size
argument_list|()
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|AhiPoint_t
argument_list|,
literal|8
argument_list|>
name|src
argument_list|(
name|numRects
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|AhiRect_t
argument_list|,
literal|8
argument_list|>
name|dest
argument_list|(
name|numRects
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRects
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|rect
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|src
index|[
name|i
index|]
operator|.
name|x
operator|=
name|rect
operator|.
name|x
argument_list|()
operator|-
name|topLeft
operator|.
name|x
argument_list|()
expr_stmt|;
name|src
index|[
name|i
index|]
operator|.
name|y
operator|=
name|rect
operator|.
name|y
argument_list|()
operator|-
name|topLeft
operator|.
name|y
argument_list|()
expr_stmt|;
name|dest
index|[
name|i
index|]
operator|.
name|left
operator|=
name|rect
operator|.
name|left
argument_list|()
expr_stmt|;
name|dest
index|[
name|i
index|]
operator|.
name|top
operator|=
name|rect
operator|.
name|top
argument_list|()
expr_stmt|;
name|dest
index|[
name|i
index|]
operator|.
name|right
operator|=
name|rect
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|dest
index|[
name|i
index|]
operator|.
name|bottom
operator|=
name|rect
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|AhiSize_t
name|bitmapSize
init|=
block|{
name|image
operator|.
name|width
argument_list|()
block|,
name|image
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|AhiBitmap_t
name|bitmap
init|=
block|{
name|bitmapSize
block|,
operator|(
name|void
operator|*
operator|)
operator|(
name|image
operator|.
name|bits
argument_list|()
operator|)
block|,
name|image
operator|.
name|bytesPerLine
argument_list|()
block|,
name|pixFmt
block|}
decl_stmt|;
name|status
operator|=
name|AhiDrawRopSet
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
name|AHIMAKEROP3
argument_list|(
name|AHIROPSRCCOPY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAhiScreen::blit(): AhiDrawRopSet failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRects
condition|;
operator|++
name|i
control|)
block|{
name|status
operator|=
name|AhiDrawBitmapBlt
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
operator|&
name|dest
index|[
name|i
index|]
argument_list|,
operator|&
name|src
index|[
name|i
index|]
argument_list|,
operator|&
name|bitmap
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAhiScreen::blit(): AhiDrawBitmapBlt failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|solidFill
name|void
name|QAhiScreen
operator|::
name|solidFill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|reg
parameter_list|)
block|{
name|AhiSts_t
name|status
init|=
name|AhiStsOk
decl_stmt|;
switch|switch
condition|(
name|pixelFormat
argument_list|()
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
name|status
operator|=
name|AhiDrawBrushFgColorSet
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
name|status
operator|=
name|AhiDrawBrushFgColorSet
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
name|qt_convRgbTo16
argument_list|(
name|color
operator|.
name|rgb
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qFatal
argument_list|(
literal|"QAhiScreen::solidFill(): Not implemented for pixel format %d"
argument_list|,
name|int
argument_list|(
name|pixelFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAhiScreen::solidFill(): AhiDrawBrushFgColorSet failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return;
block|}
name|status
operator|=
name|AhiDrawBrushSet
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|AHIFLAG_BRUSHSOLID
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAhiScreen::solidFill(): AhiDrawBrushSet failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return;
block|}
name|status
operator|=
name|AhiDrawRopSet
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
name|AHIMAKEROP3
argument_list|(
name|AHIROPPATCOPY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAhiScreen::solidFill(): AhiDrawRopSet failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return;
block|}
name|status
operator|=
name|AhiDrawSurfDstSet
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
name|d_ptr
operator|->
name|surface
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
block|{
name|qWarning
argument_list|(
literal|"QAhiScreen::solidFill(): AhiDrawSurfDst failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
operator|(
name|reg
operator|&
name|region
argument_list|()
operator|)
operator|.
name|rects
argument_list|()
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|AhiRect_t
argument_list|>
name|ahiRects
argument_list|(
name|rects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|rect
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ahiRects
index|[
name|i
index|]
operator|.
name|left
operator|=
name|rect
operator|.
name|left
argument_list|()
expr_stmt|;
name|ahiRects
index|[
name|i
index|]
operator|.
name|top
operator|=
name|rect
operator|.
name|top
argument_list|()
expr_stmt|;
name|ahiRects
index|[
name|i
index|]
operator|.
name|right
operator|=
name|rect
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|ahiRects
index|[
name|i
index|]
operator|.
name|bottom
operator|=
name|rect
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|status
operator|=
name|AhiDrawBitBltMulti
argument_list|(
name|d_ptr
operator|->
name|context
argument_list|,
name|ahiRects
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|ahiRects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|AhiStsOk
condition|)
name|qWarning
argument_list|(
literal|"QAhiScreen::solidFill(): AhiDrawBitBlt failed: %x"
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_AHI
end_comment
end_unit
