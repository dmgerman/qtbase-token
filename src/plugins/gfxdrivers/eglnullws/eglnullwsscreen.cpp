begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"eglnullwsscreen.h"
end_include
begin_include
include|#
directive|include
file|"eglnullwswindowsurface.h"
end_include
begin_include
include|#
directive|include
file|"eglnullwsscreenplugin.h"
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_namespace
namespace|namespace
block|{
DECL|class|EGLNullWSScreenSurfaceFunctions
class|class
name|EGLNullWSScreenSurfaceFunctions
super|:
specifier|public
name|QGLScreenSurfaceFunctions
block|{
public|public:
DECL|function|createNativeWindow
specifier|virtual
name|bool
name|createNativeWindow
parameter_list|(
name|QWidget
modifier|*
parameter_list|,
name|EGLNativeWindowType
modifier|*
name|native
parameter_list|)
block|{
operator|*
name|native
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
class|;
block|}
end_namespace
begin_constructor
DECL|function|EGLNullWSScreen
name|EGLNullWSScreen
operator|::
name|EGLNullWSScreen
parameter_list|(
name|int
name|displayId
parameter_list|)
member_init_list|:
name|QGLScreen
argument_list|(
name|displayId
argument_list|)
block|{}
end_constructor
begin_destructor
DECL|function|~EGLNullWSScreen
name|EGLNullWSScreen
operator|::
name|~
name|EGLNullWSScreen
parameter_list|()
block|{}
end_destructor
begin_function
DECL|function|initDevice
name|bool
name|EGLNullWSScreen
operator|::
name|initDevice
parameter_list|()
block|{
name|setSurfaceFunctions
argument_list|(
operator|new
name|EGLNullWSScreenSurfaceFunctions
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|formatDictionary
specifier|static
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|QImage
operator|::
name|Format
argument_list|>
name|formatDictionary
parameter_list|()
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QImage
operator|::
name|Format
argument_list|>
name|dictionary
decl_stmt|;
name|dictionary
index|[
literal|"rgb32"
index|]
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|dictionary
index|[
literal|"argb32"
index|]
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
name|dictionary
index|[
literal|"rgb16"
index|]
operator|=
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
name|dictionary
index|[
literal|"rgb666"
index|]
operator|=
name|QImage
operator|::
name|Format_RGB666
expr_stmt|;
name|dictionary
index|[
literal|"rgb555"
index|]
operator|=
name|QImage
operator|::
name|Format_RGB555
expr_stmt|;
name|dictionary
index|[
literal|"rgb888"
index|]
operator|=
name|QImage
operator|::
name|Format_RGB888
expr_stmt|;
name|dictionary
index|[
literal|"rgb444"
index|]
operator|=
name|QImage
operator|::
name|Format_RGB444
expr_stmt|;
return|return
name|dictionary
return|;
block|}
end_function
begin_function
DECL|function|depthForFormat
specifier|static
name|int
name|depthForFormat
parameter_list|(
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
return|return
literal|32
return|;
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
return|return
literal|32
return|;
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
return|return
literal|16
return|;
case|case
name|QImage
operator|::
name|Format_RGB666
case|:
return|return
literal|24
return|;
case|case
name|QImage
operator|::
name|Format_RGB555
case|:
return|return
literal|16
return|;
case|case
name|QImage
operator|::
name|Format_RGB888
case|:
return|return
literal|24
return|;
case|case
name|QImage
operator|::
name|Format_RGB444
case|:
return|return
literal|16
return|;
default|default:
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
literal|"EGLNullWSScreen"
argument_list|,
literal|"Unknown format"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
end_function
begin_function
DECL|function|printHelp
specifier|static
name|void
name|printHelp
parameter_list|(
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|QImage
operator|::
name|Format
argument_list|>
modifier|&
name|formatDictionary
parameter_list|)
block|{
name|QByteArray
name|formatsBuf
decl_stmt|;
name|QTextStream
argument_list|(
operator|&
name|formatsBuf
argument_list|)
operator|<<
name|QStringList
argument_list|(
name|formatDictionary
operator|.
name|keys
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"%s: Valid options are:\n"
literal|"size=WIDTHxHEIGHT   Screen size reported by this driver\n"
literal|"format=FORMAT       Screen format, where FORMAT is one of the following:\n"
literal|"                      %s\n"
argument_list|,
name|PluginName
argument_list|,
name|formatsBuf
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|connect
name|bool
name|EGLNullWSScreen
operator|::
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
block|{
specifier|const
name|QStringList
name|args
init|=
name|displaySpec
operator|.
name|section
argument_list|(
literal|':'
argument_list|,
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|':'
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|QImage
operator|::
name|Format
argument_list|>
name|formatDict
init|=
name|formatDictionary
argument_list|()
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QString arg
argument_list|,
argument|args
argument_list|)
block|{
specifier|const
name|QString
name|optionName
init|=
name|arg
operator|.
name|section
argument_list|(
literal|'='
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|optionArg
init|=
name|arg
operator|.
name|section
argument_list|(
literal|'='
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionName
operator|==
name|QLatin1String
argument_list|(
literal|"size"
argument_list|)
condition|)
block|{
name|w
operator|=
name|optionArg
operator|.
name|section
argument_list|(
literal|'x'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|h
operator|=
name|optionArg
operator|.
name|section
argument_list|(
literal|'x'
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optionName
operator|==
name|QLatin1String
argument_list|(
literal|"format"
argument_list|)
condition|)
block|{
if|if
condition|(
name|formatDict
operator|.
name|contains
argument_list|(
name|optionArg
argument_list|)
condition|)
name|setPixelFormat
argument_list|(
name|formatDict
operator|.
name|value
argument_list|(
name|optionArg
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|printHelp
argument_list|(
name|formatDict
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printHelp
argument_list|(
name|formatDict
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|w
operator|==
literal|0
operator|||
name|h
operator|==
literal|0
condition|)
block|{
name|w
operator|=
literal|640
expr_stmt|;
name|h
operator|=
literal|480
expr_stmt|;
name|qWarning
argument_list|(
literal|"%s: Using default screen size %dx%d"
argument_list|,
name|PluginName
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
name|dw
operator|=
name|w
expr_stmt|;
name|dh
operator|=
name|h
expr_stmt|;
if|if
condition|(
name|pixelFormat
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Invalid
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Using default screen format argb32"
argument_list|,
name|PluginName
argument_list|)
expr_stmt|;
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
block|}
name|d
operator|=
name|depthForFormat
argument_list|(
name|pixelFormat
argument_list|()
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|int
name|Dpi
init|=
literal|120
decl_stmt|;
specifier|static
specifier|const
name|qreal
name|ScalingFactor
init|=
cast|static_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|25.4
argument_list|)
operator|/
name|Dpi
decl_stmt|;
name|physWidth
operator|=
name|qRound
argument_list|(
name|dw
operator|*
name|ScalingFactor
argument_list|)
expr_stmt|;
name|physHeight
operator|=
name|qRound
argument_list|(
name|dh
operator|*
name|ScalingFactor
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|disconnect
name|void
name|EGLNullWSScreen
operator|::
name|disconnect
parameter_list|()
block|{}
end_function
begin_function
DECL|function|shutdownDevice
name|void
name|EGLNullWSScreen
operator|::
name|shutdownDevice
parameter_list|()
block|{}
end_function
begin_function
DECL|function|setMode
name|void
name|EGLNullWSScreen
operator|::
name|setMode
parameter_list|(
name|int
comment|/*width*/
parameter_list|,
name|int
comment|/*height*/
parameter_list|,
name|int
comment|/*depth*/
parameter_list|)
block|{}
end_function
begin_function
DECL|function|blank
name|void
name|EGLNullWSScreen
operator|::
name|blank
parameter_list|(
name|bool
comment|/*on*/
parameter_list|)
block|{}
end_function
begin_function
DECL|function|exposeRegion
name|void
name|EGLNullWSScreen
operator|::
name|exposeRegion
parameter_list|(
name|QRegion
comment|/*r*/
parameter_list|,
name|int
comment|/*changing*/
parameter_list|)
block|{}
end_function
begin_function
DECL|function|createSurface
name|QWSWindowSurface
modifier|*
name|EGLNullWSScreen
operator|::
name|createSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QGLWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
return|return
operator|new
name|EGLNullWSWindowSurface
argument_list|(
name|widget
argument_list|)
return|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"%s: Creating non-GL surface"
argument_list|,
name|PluginName
argument_list|)
expr_stmt|;
return|return
name|QScreen
operator|::
name|createSurface
argument_list|(
name|widget
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|createSurface
name|QWSWindowSurface
modifier|*
name|EGLNullWSScreen
operator|::
name|createSurface
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"eglnullws"
argument_list|)
condition|)
block|{
return|return
operator|new
name|EGLNullWSWindowSurface
return|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"%s: Creating non-GL surface"
argument_list|,
name|PluginName
argument_list|)
expr_stmt|;
return|return
name|QScreen
operator|::
name|createSurface
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_function
end_unit
