begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbpixmap.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_DIRECTFB
end_ifndef
begin_include
include|#
directive|include
file|"qdirectfbscreen.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbpaintengine.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfile.h>
end_include
begin_include
include|#
directive|include
file|<directfb.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|global_ser_no
specifier|static
name|int
name|global_ser_no
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QDirectFBPixmapData
name|QDirectFBPixmapData
operator|::
name|QDirectFBPixmapData
parameter_list|(
name|QDirectFBScreen
modifier|*
name|screen
parameter_list|,
name|PixelType
name|pixelType
parameter_list|)
member_init_list|:
name|QPixmapData
argument_list|(
name|pixelType
argument_list|,
name|DirectFBClass
argument_list|)
member_init_list|,
name|QDirectFBPaintDevice
argument_list|(
name|screen
argument_list|)
member_init_list|,
name|alpha
argument_list|(
literal|false
argument_list|)
block|{
name|setSerialNumber
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFBPixmapData
name|QDirectFBPixmapData
operator|::
name|~
name|QDirectFBPixmapData
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|resize
name|void
name|QDirectFBPixmapData
operator|::
name|resize
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
if|if
condition|(
name|width
operator|<=
literal|0
operator|||
name|height
operator|<=
literal|0
condition|)
block|{
name|invalidate
argument_list|()
expr_stmt|;
return|return;
block|}
name|imageFormat
operator|=
name|screen
operator|->
name|pixelFormat
argument_list|()
expr_stmt|;
name|dfbSurface
operator|=
name|screen
operator|->
name|createDFBSurface
argument_list|(
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|,
name|imageFormat
argument_list|,
name|QDirectFBScreen
operator|::
name|TrackSurface
argument_list|)
expr_stmt|;
name|d
operator|=
name|QDirectFBScreen
operator|::
name|depth
argument_list|(
name|imageFormat
argument_list|)
expr_stmt|;
name|alpha
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|dfbSurface
condition|)
block|{
name|invalidate
argument_list|()
expr_stmt|;
name|qWarning
argument_list|(
literal|"QDirectFBPixmapData::resize(): Unable to allocate surface"
argument_list|)
expr_stmt|;
return|return;
block|}
name|w
operator|=
name|width
expr_stmt|;
name|h
operator|=
name|height
expr_stmt|;
name|is_null
operator|=
operator|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
operator|)
expr_stmt|;
name|setSerialNumber
argument_list|(
operator|++
name|global_ser_no
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_OPAQUE_DETECTION
end_ifdef
begin_comment
comment|// mostly duplicated from qimage.cpp (QImageData::checkForAlphaPixels)
end_comment
begin_function
DECL|function|checkForAlphaPixels
specifier|static
name|bool
name|checkForAlphaPixels
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|)
block|{
specifier|const
name|uchar
modifier|*
name|bits
init|=
name|img
operator|.
name|bits
argument_list|()
decl_stmt|;
specifier|const
name|int
name|bytes_per_line
init|=
name|img
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|end_bits
init|=
name|bits
operator|+
name|bytes_per_line
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|img
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|img
operator|.
name|height
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|img
operator|.
name|format
argument_list|()
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
return|return
name|img
operator|.
name|hasAlphaChannel
argument_list|()
return|;
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
operator|(
operator|(
operator|(
name|uint
operator|*
operator|)
name|bits
operator|)
index|[
name|x
index|]
operator|&
literal|0xff000000
operator|)
operator|!=
literal|0xff000000
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|bits
operator|+=
name|bytes_per_line
expr_stmt|;
block|}
break|break;
case|case
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
while|while
condition|(
name|bits
operator|<
name|end_bits
condition|)
block|{
if|if
condition|(
name|bits
index|[
literal|0
index|]
operator|!=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|bits
operator|+=
literal|3
expr_stmt|;
block|}
name|bits
operator|=
name|end_bits
expr_stmt|;
name|end_bits
operator|+=
name|bytes_per_line
expr_stmt|;
block|}
break|break;
case|case
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
while|while
condition|(
name|bits
operator|<
name|end_bits
condition|)
block|{
if|if
condition|(
operator|(
name|bits
index|[
literal|0
index|]
operator|&
literal|0xfc
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|bits
operator|+=
literal|3
expr_stmt|;
block|}
name|bits
operator|=
name|end_bits
expr_stmt|;
name|end_bits
operator|+=
name|bytes_per_line
expr_stmt|;
block|}
break|break;
case|case
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
while|while
condition|(
name|bits
operator|<
name|end_bits
condition|)
block|{
if|if
condition|(
operator|(
name|bits
index|[
literal|0
index|]
operator|&
literal|0xf0
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|bits
operator|+=
literal|2
expr_stmt|;
block|}
name|bits
operator|=
name|end_bits
expr_stmt|;
name|end_bits
operator|+=
name|bytes_per_line
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_DIRECTFB_OPAQUE_DETECTION
end_comment
begin_function
DECL|function|hasAlphaChannel
name|bool
name|QDirectFBPixmapData
operator|::
name|hasAlphaChannel
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|img
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
return|return
literal|true
return|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_OPAQUE_DETECTION
return|return
operator|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|NoOpaqueDetection
operator|)
condition|?
name|img
operator|.
name|hasAlphaChannel
argument_list|()
else|:
name|checkForAlphaPixels
argument_list|(
name|img
argument_list|)
operator|)
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
return|return
name|img
operator|.
name|hasAlphaChannel
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_IMAGEPROVIDER
end_ifdef
begin_function
DECL|function|fromFile
name|bool
name|QDirectFBPixmapData
operator|::
name|fromFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|filename
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|flags
operator|==
name|Qt
operator|::
name|AutoColor
condition|)
block|{
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
block|{
comment|// resource
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|QByteArray
name|data
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|fromData
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
name|format
argument_list|,
name|flags
argument_list|)
return|;
block|}
else|else
block|{
name|DFBDataBufferDescription
name|description
decl_stmt|;
name|description
operator|.
name|flags
operator|=
name|DBDESC_FILE
expr_stmt|;
specifier|const
name|QByteArray
name|fileNameData
init|=
name|filename
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|description
operator|.
name|file
operator|=
name|fileNameData
operator|.
name|constData
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDataBufferDescription
argument_list|(
name|description
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// fall back to Qt
block|}
block|}
return|return
name|QPixmapData
operator|::
name|fromFile
argument_list|(
name|filename
argument_list|,
name|format
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fromData
name|bool
name|QDirectFBPixmapData
operator|::
name|fromData
parameter_list|(
specifier|const
name|uchar
modifier|*
name|buffer
parameter_list|,
name|uint
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|flags
operator|==
name|Qt
operator|::
name|AutoColor
condition|)
block|{
name|DFBDataBufferDescription
name|description
decl_stmt|;
name|description
operator|.
name|flags
operator|=
name|DBDESC_MEMORY
expr_stmt|;
name|description
operator|.
name|memory
operator|.
name|data
operator|=
name|buffer
expr_stmt|;
name|description
operator|.
name|memory
operator|.
name|length
operator|=
name|len
expr_stmt|;
if|if
condition|(
name|fromDataBufferDescription
argument_list|(
name|description
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// fall back to Qt
block|}
return|return
name|QPixmapData
operator|::
name|fromData
argument_list|(
name|buffer
argument_list|,
name|len
argument_list|,
name|format
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_struct
DECL|struct|QDirectFBInterfaceCleanupHandler
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
name|QDirectFBInterfaceCleanupHandler
block|{
DECL|function|cleanup
specifier|static
name|void
name|cleanup
parameter_list|(
name|T
modifier|*
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
condition|)
name|t
operator|->
name|Release
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_class
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
class|class
DECL|class|QDirectFBPointer
name|QDirectFBPointer
super|:
specifier|public
name|QScopedPointer
argument_list|<
name|T
argument_list|,
name|QDirectFBInterfaceCleanupHandler
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
public|public:
DECL|function|QDirectFBPointer
name|QDirectFBPointer
parameter_list|(
name|T
modifier|*
name|t
init|=
literal|0
parameter_list|)
member_init_list|:
name|QScopedPointer
argument_list|<
name|T
argument_list|,
name|QDirectFBInterfaceCleanupHandler
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|t
argument_list|)
block|{}
block|}
class|;
end_class
begin_function
DECL|function|fromDataBufferDescription
name|bool
name|QDirectFBPixmapData
operator|::
name|fromDataBufferDescription
parameter_list|(
specifier|const
name|DFBDataBufferDescription
modifier|&
name|dataBufferDescription
parameter_list|)
block|{
name|IDirectFB
modifier|*
name|dfb
init|=
name|screen
operator|->
name|dfb
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|dfb
argument_list|)
expr_stmt|;
name|DFBResult
name|result
init|=
name|DFB_OK
decl_stmt|;
name|IDirectFBDataBuffer
modifier|*
name|dataBufferPtr
decl_stmt|;
if|if
condition|(
operator|(
name|result
operator|=
name|dfb
operator|->
name|CreateDataBuffer
argument_list|(
name|dfb
argument_list|,
operator|&
name|dataBufferDescription
argument_list|,
operator|&
name|dataBufferPtr
argument_list|)
operator|)
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBPixmapData::fromDataBufferDescription()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QDirectFBPointer
argument_list|<
name|IDirectFBDataBuffer
argument_list|>
name|dataBuffer
argument_list|(
name|dataBufferPtr
argument_list|)
decl_stmt|;
name|IDirectFBImageProvider
modifier|*
name|providerPtr
decl_stmt|;
if|if
condition|(
operator|(
name|result
operator|=
name|dataBuffer
operator|->
name|CreateImageProvider
argument_list|(
name|dataBuffer
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|providerPtr
argument_list|)
operator|)
operator|!=
name|DFB_OK
condition|)
return|return
literal|false
return|;
name|QDirectFBPointer
argument_list|<
name|IDirectFBImageProvider
argument_list|>
name|provider
argument_list|(
name|providerPtr
argument_list|)
decl_stmt|;
name|DFBImageDescription
name|imageDescription
decl_stmt|;
name|result
operator|=
name|provider
operator|->
name|GetImageDescription
argument_list|(
name|provider
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|imageDescription
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBPixmapData::fromSurfaceDescription(): Can't get image description"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|imageDescription
operator|.
name|caps
operator|&
name|DICAPS_COLORKEY
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DFBSurfaceDescription
name|surfaceDescription
decl_stmt|;
if|if
condition|(
operator|(
name|result
operator|=
name|provider
operator|->
name|GetSurfaceDescription
argument_list|(
name|provider
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|surfaceDescription
argument_list|)
operator|)
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBPixmapData::fromDataBufferDescription(): Can't get surface description"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|alpha
operator|=
name|imageDescription
operator|.
name|caps
operator|&
name|DICAPS_ALPHACHANNEL
expr_stmt|;
name|imageFormat
operator|=
name|alpha
condition|?
name|screen
operator|->
name|alphaPixmapFormat
argument_list|()
else|:
name|screen
operator|->
name|pixelFormat
argument_list|()
expr_stmt|;
name|dfbSurface
operator|=
name|screen
operator|->
name|createDFBSurface
argument_list|(
name|QSize
argument_list|(
name|surfaceDescription
operator|.
name|width
argument_list|,
name|surfaceDescription
operator|.
name|height
argument_list|)
argument_list|,
name|imageFormat
argument_list|,
name|QDirectFBScreen
operator|::
name|TrackSurface
argument_list|)
expr_stmt|;
name|result
operator|=
name|provider
operator|->
name|RenderTo
argument_list|(
name|provider
operator|.
name|data
argument_list|()
argument_list|,
name|dfbSurface
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBPixmapData::fromSurfaceDescription(): Can't render to surface"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|w
operator|=
name|surfaceDescription
operator|.
name|width
expr_stmt|;
name|h
operator|=
name|surfaceDescription
operator|.
name|height
expr_stmt|;
name|is_null
operator|=
operator|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
operator|)
expr_stmt|;
name|d
operator|=
name|QDirectFBScreen
operator|::
name|depth
argument_list|(
name|imageFormat
argument_list|)
expr_stmt|;
name|setSerialNumber
argument_list|(
operator|++
name|global_ser_no
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
name|screen
operator|->
name|setDirectFBImageProvider
argument_list|(
name|providerPtr
argument_list|)
expr_stmt|;
name|provider
operator|.
name|take
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|fromImage
name|void
name|QDirectFBPixmapData
operator|::
name|fromImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|alpha
operator|=
name|QDirectFBPixmapData
operator|::
name|hasAlphaChannel
argument_list|(
name|img
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|imageFormat
operator|=
name|alpha
condition|?
name|screen
operator|->
name|alphaPixmapFormat
argument_list|()
else|:
name|screen
operator|->
name|pixelFormat
argument_list|()
expr_stmt|;
name|QImage
name|image
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
operator|~
name|Qt
operator|::
name|NoOpaqueDetection
operator|)
operator|!=
name|Qt
operator|::
name|AutoColor
condition|)
block|{
name|image
operator|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|imageFormat
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|flags
operator|=
name|Qt
operator|::
name|AutoColor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|||
name|img
operator|.
name|depth
argument_list|()
operator|==
literal|1
condition|)
block|{
name|image
operator|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|imageFormat
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|img
operator|.
name|format
argument_list|()
operator|!=
name|imageFormat
condition|)
block|{
name|image
operator|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|imageFormat
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|image
operator|=
name|img
expr_stmt|;
block|}
name|dfbSurface
operator|=
name|screen
operator|->
name|createDFBSurface
argument_list|(
name|image
argument_list|,
name|image
operator|.
name|format
argument_list|()
argument_list|,
name|QDirectFBScreen
operator|::
name|NoPreallocated
operator||
name|QDirectFBScreen
operator|::
name|TrackSurface
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dfbSurface
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBPixmapData::fromImage()"
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return;
block|}
name|w
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|is_null
operator|=
operator|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
operator|)
expr_stmt|;
name|d
operator|=
name|QDirectFBScreen
operator|::
name|depth
argument_list|(
name|imageFormat
argument_list|)
expr_stmt|;
name|setSerialNumber
argument_list|(
operator|++
name|global_ser_no
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_OPAQUE_DETECTION
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|copy
name|void
name|QDirectFBPixmapData
operator|::
name|copy
parameter_list|(
specifier|const
name|QPixmapData
modifier|*
name|data
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|data
operator|->
name|classId
argument_list|()
operator|!=
name|DirectFBClass
condition|)
block|{
name|QPixmapData
operator|::
name|copy
argument_list|(
name|data
argument_list|,
name|rect
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QDirectFBPixmapData
modifier|*
name|otherData
init|=
cast|static_cast
argument_list|<
specifier|const
name|QDirectFBPixmapData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_SUBSURFACE
if|if
condition|(
name|otherData
operator|->
name|lockFlags
argument_list|()
condition|)
block|{
cast|const_cast
argument_list|<
name|QDirectFBPixmapData
operator|*
argument_list|>
argument_list|(
name|otherData
argument_list|)
operator|->
name|unlockSurface
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|IDirectFBSurface
modifier|*
name|src
init|=
name|otherData
operator|->
name|directFBSurface
argument_list|()
decl_stmt|;
name|alpha
operator|=
name|data
operator|->
name|hasAlphaChannel
argument_list|()
expr_stmt|;
name|imageFormat
operator|=
operator|(
name|alpha
condition|?
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|alphaPixmapFormat
argument_list|()
else|:
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|pixelFormat
argument_list|()
operator|)
expr_stmt|;
name|dfbSurface
operator|=
name|screen
operator|->
name|createDFBSurface
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|imageFormat
argument_list|,
name|QDirectFBScreen
operator|::
name|TrackSurface
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dfbSurface
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBPixmapData::copy()"
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|alpha
condition|)
block|{
name|dfbSurface
operator|->
name|Clear
argument_list|(
name|dfbSurface
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dfbSurface
operator|->
name|SetBlittingFlags
argument_list|(
name|dfbSurface
argument_list|,
name|DSBLIT_BLEND_ALPHACHANNEL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dfbSurface
operator|->
name|SetBlittingFlags
argument_list|(
name|dfbSurface
argument_list|,
name|DSBLIT_NOFX
argument_list|)
expr_stmt|;
block|}
specifier|const
name|DFBRectangle
name|blitRect
init|=
block|{
name|rect
operator|.
name|x
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|w
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
name|d
operator|=
name|otherData
operator|->
name|d
expr_stmt|;
name|is_null
operator|=
operator|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
operator|)
expr_stmt|;
name|unlockSurface
argument_list|()
expr_stmt|;
name|DFBResult
name|result
init|=
name|dfbSurface
operator|->
name|Blit
argument_list|(
name|dfbSurface
argument_list|,
name|src
argument_list|,
operator|&
name|blitRect
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
name|dfbSurface
operator|->
name|ReleaseSource
argument_list|(
name|dfbSurface
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBPixmapData::copy()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return;
block|}
name|setSerialNumber
argument_list|(
operator|++
name|global_ser_no
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isOpaqueFormat
specifier|static
specifier|inline
name|bool
name|isOpaqueFormat
parameter_list|(
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
case|case
name|QImage
operator|::
name|Format_RGB666
case|:
case|case
name|QImage
operator|::
name|Format_RGB555
case|:
case|case
name|QImage
operator|::
name|Format_RGB888
case|:
case|case
name|QImage
operator|::
name|Format_RGB444
case|:
return|return
literal|true
return|;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|fill
name|void
name|QDirectFBPixmapData
operator|::
name|fill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
if|if
condition|(
operator|!
name|serialNumber
argument_list|()
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|dfbSurface
argument_list|)
expr_stmt|;
name|alpha
operator||=
operator|(
name|color
operator|.
name|alpha
argument_list|()
operator|<
literal|255
operator|)
expr_stmt|;
if|if
condition|(
name|alpha
operator|&&
name|isOpaqueFormat
argument_list|(
name|imageFormat
argument_list|)
condition|)
block|{
name|QSize
name|size
decl_stmt|;
name|dfbSurface
operator|->
name|GetSize
argument_list|(
name|dfbSurface
argument_list|,
operator|&
name|size
operator|.
name|rwidth
argument_list|()
argument_list|,
operator|&
name|size
operator|.
name|rheight
argument_list|()
argument_list|)
expr_stmt|;
name|screen
operator|->
name|releaseDFBSurface
argument_list|(
name|dfbSurface
argument_list|)
expr_stmt|;
name|imageFormat
operator|=
name|screen
operator|->
name|alphaPixmapFormat
argument_list|()
expr_stmt|;
name|d
operator|=
name|QDirectFBScreen
operator|::
name|depth
argument_list|(
name|imageFormat
argument_list|)
expr_stmt|;
name|dfbSurface
operator|=
name|screen
operator|->
name|createDFBSurface
argument_list|(
name|size
argument_list|,
name|screen
operator|->
name|alphaPixmapFormat
argument_list|()
argument_list|,
name|QDirectFBScreen
operator|::
name|TrackSurface
argument_list|)
expr_stmt|;
name|setSerialNumber
argument_list|(
operator|++
name|global_ser_no
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dfbSurface
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBPixmapData::fill()"
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|dfbSurface
operator|->
name|Clear
argument_list|(
name|dfbSurface
argument_list|,
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|,
name|color
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transformed
name|QPixmap
name|QDirectFBPixmapData
operator|::
name|transformed
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
name|Qt
operator|::
name|TransformationMode
name|mode
parameter_list|)
specifier|const
block|{
name|QDirectFBPixmapData
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QDirectFBPixmapData
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_SUBSURFACE
if|if
condition|(
name|lockFlags
argument_list|()
condition|)
name|that
operator|->
name|unlockSurface
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|dfbSurface
operator|||
name|transform
operator|.
name|type
argument_list|()
operator|!=
name|QTransform
operator|::
name|TxScale
operator|||
name|mode
operator|!=
name|Qt
operator|::
name|FastTransformation
condition|)
block|{
specifier|const
name|QImage
modifier|*
name|image
init|=
name|that
operator|->
name|buffer
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|image
argument_list|)
expr_stmt|;
specifier|const
name|QImage
name|transformed
init|=
name|image
operator|->
name|transformed
argument_list|(
name|transform
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|QDirectFBPixmapData
modifier|*
name|data
init|=
operator|new
name|QDirectFBPixmapData
argument_list|(
name|screen
argument_list|,
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
decl_stmt|;
name|data
operator|->
name|fromImage
argument_list|(
name|transformed
argument_list|,
name|Qt
operator|::
name|AutoColor
argument_list|)
expr_stmt|;
return|return
name|QPixmap
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|const
name|QSize
name|size
init|=
name|transform
operator|.
name|mapRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QPixmap
argument_list|()
return|;
name|QDirectFBPixmapData
modifier|*
name|data
init|=
operator|new
name|QDirectFBPixmapData
argument_list|(
name|screen
argument_list|,
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
decl_stmt|;
name|data
operator|->
name|setSerialNumber
argument_list|(
operator|++
name|global_ser_no
argument_list|)
expr_stmt|;
name|DFBSurfaceBlittingFlags
name|flags
init|=
name|DSBLIT_NOFX
decl_stmt|;
name|data
operator|->
name|alpha
operator|=
name|alpha
expr_stmt|;
if|if
condition|(
name|alpha
condition|)
block|{
name|flags
operator|=
name|DSBLIT_BLEND_ALPHACHANNEL
expr_stmt|;
block|}
name|data
operator|->
name|dfbSurface
operator|=
name|screen
operator|->
name|createDFBSurface
argument_list|(
name|size
argument_list|,
name|imageFormat
argument_list|,
name|QDirectFBScreen
operator|::
name|TrackSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|DSBLIT_BLEND_ALPHACHANNEL
condition|)
block|{
name|data
operator|->
name|dfbSurface
operator|->
name|Clear
argument_list|(
name|data
operator|->
name|dfbSurface
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|data
operator|->
name|dfbSurface
operator|->
name|SetBlittingFlags
argument_list|(
name|data
operator|->
name|dfbSurface
argument_list|,
name|flags
argument_list|)
expr_stmt|;
specifier|const
name|DFBRectangle
name|destRect
init|=
block|{
literal|0
block|,
literal|0
block|,
name|size
operator|.
name|width
argument_list|()
block|,
name|size
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|data
operator|->
name|dfbSurface
operator|->
name|StretchBlit
argument_list|(
name|data
operator|->
name|dfbSurface
argument_list|,
name|dfbSurface
argument_list|,
literal|0
argument_list|,
operator|&
name|destRect
argument_list|)
expr_stmt|;
name|data
operator|->
name|w
operator|=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|data
operator|->
name|h
operator|=
name|size
operator|.
name|height
argument_list|()
expr_stmt|;
name|data
operator|->
name|is_null
operator|=
operator|(
name|data
operator|->
name|w
operator|<=
literal|0
operator|||
name|data
operator|->
name|h
operator|<=
literal|0
operator|)
expr_stmt|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
name|data
operator|->
name|dfbSurface
operator|->
name|ReleaseSource
argument_list|(
name|data
operator|->
name|dfbSurface
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|QPixmap
argument_list|(
name|data
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toImage
name|QImage
name|QDirectFBPixmapData
operator|::
name|toImage
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|dfbSurface
condition|)
return|return
name|QImage
argument_list|()
return|;
if|#
directive|if
literal|0
comment|// In later versions of DirectFB one can set a flag to tell
comment|// DirectFB not to move the surface to videomemory. When that
comment|// happens we can use this (hopefully faster) codepath
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_PREALLOCATED
block|QImage ret(w, h, QDirectFBScreen::getImageFormat(dfbSurface));     if (IDirectFBSurface *imgSurface = screen->createDFBSurface(ret, QDirectFBScreen::DontTrackSurface)) {         if (hasAlphaChannel()) {             imgSurface->SetBlittingFlags(imgSurface, DSBLIT_BLEND_ALPHACHANNEL);             imgSurface->Clear(imgSurface, 0, 0, 0, 0);         } else {             imgSurface->SetBlittingFlags(imgSurface, DSBLIT_NOFX);         }         imgSurface->Blit(imgSurface, dfbSurface, 0, 0, 0);
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
block|imgSurface->ReleaseSource(imgSurface);
endif|#
directive|endif
block|imgSurface->Release(imgSurface);         return ret;     }
endif|#
directive|endif
endif|#
directive|endif
name|QDirectFBPixmapData
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QDirectFBPixmapData
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|const
name|QImage
modifier|*
name|img
init|=
name|that
operator|->
name|buffer
argument_list|()
decl_stmt|;
return|return
name|img
operator|->
name|copy
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/* This is QPixmapData::paintEngine(), not QPaintDevice::paintEngine() */
end_comment
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QDirectFBPixmapData
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|engine
condition|)
block|{
comment|// QDirectFBPixmapData is also a QCustomRasterPaintDevice, so pass
comment|// that to the paint engine:
name|QDirectFBPixmapData
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QDirectFBPixmapData
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|engine
operator|=
operator|new
name|QDirectFBPaintEngine
argument_list|(
name|that
argument_list|)
expr_stmt|;
block|}
return|return
name|engine
return|;
block|}
end_function
begin_function
DECL|function|buffer
name|QImage
modifier|*
name|QDirectFBPixmapData
operator|::
name|buffer
parameter_list|()
block|{
if|if
condition|(
operator|!
name|lockFlgs
condition|)
block|{
name|lockSurface
argument_list|(
name|DSLF_READ
operator||
name|DSLF_WRITE
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|lockFlgs
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|lockedImage
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|&
name|lockedImage
return|;
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QDirectFBPixmapData
operator|::
name|scroll
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dfbSurface
condition|)
block|{
return|return
literal|false
return|;
block|}
name|unlockSurface
argument_list|()
expr_stmt|;
name|DFBResult
name|result
init|=
name|dfbSurface
operator|->
name|SetBlittingFlags
argument_list|(
name|dfbSurface
argument_list|,
name|DSBLIT_NOFX
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBPixmapData::scroll"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|result
operator|=
name|dfbSurface
operator|->
name|SetPorterDuff
argument_list|(
name|dfbSurface
argument_list|,
name|DSPD_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBPixmapData::scroll"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|DFBRectangle
name|source
init|=
block|{
name|rect
operator|.
name|x
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|result
operator|=
name|dfbSurface
operator|->
name|Blit
argument_list|(
name|dfbSurface
argument_list|,
name|dfbSurface
argument_list|,
operator|&
name|source
argument_list|,
name|source
operator|.
name|x
operator|+
name|dx
argument_list|,
name|source
operator|.
name|y
operator|+
name|dy
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBPixmapData::scroll"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|invalidate
name|void
name|QDirectFBPixmapData
operator|::
name|invalidate
parameter_list|()
block|{
if|if
condition|(
name|dfbSurface
condition|)
block|{
name|screen
operator|->
name|releaseDFBSurface
argument_list|(
name|dfbSurface
argument_list|)
expr_stmt|;
name|dfbSurface
operator|=
literal|0
expr_stmt|;
block|}
name|setSerialNumber
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|alpha
operator|=
literal|false
expr_stmt|;
name|d
operator|=
name|w
operator|=
name|h
operator|=
literal|0
expr_stmt|;
name|is_null
operator|=
literal|true
expr_stmt|;
name|imageFormat
operator|=
name|QImage
operator|::
name|Format_Invalid
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_directfb_surface_for_pixmap
name|Q_GUI_EXPORT
name|IDirectFBSurface
modifier|*
name|qt_directfb_surface_for_pixmap
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
block|{
specifier|const
name|QPixmapData
modifier|*
name|data
init|=
name|pixmap
operator|.
name|pixmapData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|||
name|data
operator|->
name|classId
argument_list|()
operator|!=
name|QPixmapData
operator|::
name|DirectFBClass
condition|)
return|return
literal|0
return|;
specifier|const
name|QDirectFBPixmapData
modifier|*
name|dfbData
init|=
cast|static_cast
argument_list|<
specifier|const
name|QDirectFBPixmapData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
return|return
name|dfbData
operator|->
name|directFBSurface
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DIRECTFB
end_comment
end_unit
