begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbscreen.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbwindowsurface.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbmouse.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbkeyboard.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qwsdisplay_qws.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qcolor.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwindowsystem_qws.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qgraphicssystem_qws_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qwssignalhandler_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_DIRECTFB
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QDirectFBScreenPrivate
class|class
name|QDirectFBScreenPrivate
super|:
specifier|public
name|QObject
super|,
specifier|public
name|QWSGraphicsSystem
block|{
name|Q_OBJECT
public|public:
name|QDirectFBScreenPrivate
parameter_list|(
name|QDirectFBScreen
modifier|*
name|qptr
parameter_list|)
constructor_decl|;
name|~
name|QDirectFBScreenPrivate
parameter_list|()
destructor_decl|;
name|void
name|setFlipFlags
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|args
parameter_list|)
function_decl|;
name|QPixmapData
modifier|*
name|createPixmapData
parameter_list|(
name|QPixmapData
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
function_decl|;
public|public
name|slots
public|:
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WM
name|void
name|onWindowEvent
parameter_list|(
name|QWSWindow
modifier|*
name|window
parameter_list|,
name|QWSServer
operator|::
name|WindowEvent
name|event
parameter_list|)
function_decl|;
endif|#
directive|endif
public|public:
DECL|member|dfb
name|IDirectFB
modifier|*
name|dfb
decl_stmt|;
DECL|member|flipFlags
name|DFBSurfaceFlipFlags
name|flipFlags
decl_stmt|;
DECL|member|directFBFlags
name|QDirectFBScreen
operator|::
name|DirectFBFlags
name|directFBFlags
decl_stmt|;
DECL|member|alphaPixmapFormat
name|QImage
operator|::
name|Format
name|alphaPixmapFormat
decl_stmt|;
DECL|member|dfbScreen
name|IDirectFBScreen
modifier|*
name|dfbScreen
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
DECL|member|primarySurface
name|IDirectFBSurface
modifier|*
name|primarySurface
decl_stmt|;
DECL|member|backgroundColor
name|QColor
name|backgroundColor
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_LAYER
DECL|member|dfbLayer
name|IDirectFBDisplayLayer
modifier|*
name|dfbLayer
decl_stmt|;
endif|#
directive|endif
DECL|member|allocatedSurfaces
name|QSet
argument_list|<
name|IDirectFBSurface
modifier|*
argument_list|>
name|allocatedSurfaces
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_MOUSE
DECL|member|mouse
name|QDirectFBMouseHandler
modifier|*
name|mouse
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_KEYBOARD
DECL|member|keyboard
name|QDirectFBKeyboardHandler
modifier|*
name|keyboard
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER
operator|&&
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
DECL|member|imageProvider
name|IDirectFBImageProvider
modifier|*
name|imageProvider
decl_stmt|;
endif|#
directive|endif
DECL|member|cursorSurface
name|IDirectFBSurface
modifier|*
name|cursorSurface
decl_stmt|;
DECL|member|cursorImageKey
name|qint64
name|cursorImageKey
decl_stmt|;
DECL|member|q
name|QDirectFBScreen
modifier|*
name|q
decl_stmt|;
DECL|member|instance
specifier|static
name|QDirectFBScreen
modifier|*
name|instance
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|instance
name|QDirectFBScreen
modifier|*
name|QDirectFBScreenPrivate
operator|::
name|instance
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QDirectFBScreenPrivate
name|QDirectFBScreenPrivate
operator|::
name|QDirectFBScreenPrivate
parameter_list|(
name|QDirectFBScreen
modifier|*
name|qptr
parameter_list|)
member_init_list|:
name|QWSGraphicsSystem
argument_list|(
name|qptr
argument_list|)
member_init_list|,
name|dfb
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|flipFlags
argument_list|(
name|DSFLIP_NONE
argument_list|)
member_init_list|,
name|directFBFlags
argument_list|(
name|QDirectFBScreen
operator|::
name|NoFlags
argument_list|)
member_init_list|,
name|alphaPixmapFormat
argument_list|(
name|QImage
operator|::
name|Format_Invalid
argument_list|)
member_init_list|,
name|dfbScreen
argument_list|(
literal|0
argument_list|)
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
member_init_list|,
name|primarySurface
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_LAYER
member_init_list|,
name|dfbLayer
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_MOUSE
member_init_list|,
name|mouse
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_KEYBOARD
member_init_list|,
name|keyboard
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
if|#
directive|if
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER
operator|&&
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
member_init_list|,
name|imageProvider
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
member_init_list|,
name|cursorSurface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cursorImageKey
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|q
argument_list|(
name|qptr
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_QWS_SIGNALHANDLER
name|QWSSignalHandler
operator|::
name|instance
argument_list|()
operator|->
name|addObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WM
name|connect
argument_list|(
name|QWSServer
operator|::
name|instance
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|windowEvent
argument_list|(
name|QWSWindow
operator|*
argument_list|,
name|QWSServer
operator|::
name|WindowEvent
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onWindowEvent
argument_list|(
name|QWSWindow
operator|*
argument_list|,
name|QWSServer
operator|::
name|WindowEvent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFBScreenPrivate
name|QDirectFBScreenPrivate
operator|::
name|~
name|QDirectFBScreenPrivate
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_MOUSE
operator|delete
name|mouse
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_KEYBOARD
operator|delete
name|keyboard
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
if|if
condition|(
name|imageProvider
condition|)
name|imageProvider
operator|->
name|Release
argument_list|(
name|imageProvider
argument_list|)
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|QSet
argument_list|<
name|IDirectFBSurface
operator|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|allocatedSurfaces
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|allocatedSurfaces
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
operator|(
operator|*
name|it
operator|)
operator|->
name|Release
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
if|if
condition|(
name|primarySurface
condition|)
name|primarySurface
operator|->
name|Release
argument_list|(
name|primarySurface
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_LAYER
if|if
condition|(
name|dfbLayer
condition|)
name|dfbLayer
operator|->
name|Release
argument_list|(
name|dfbLayer
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|dfbScreen
condition|)
name|dfbScreen
operator|->
name|Release
argument_list|(
name|dfbScreen
argument_list|)
expr_stmt|;
if|if
condition|(
name|dfb
condition|)
name|dfb
operator|->
name|Release
argument_list|(
name|dfb
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|createDFBSurface
name|IDirectFBSurface
modifier|*
name|QDirectFBScreen
operator|::
name|createDFBSurface
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|,
name|SurfaceCreationOptions
name|options
parameter_list|,
name|DFBResult
modifier|*
name|resultPtr
parameter_list|)
block|{
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
comment|// assert?
return|return
literal|0
return|;
if|if
condition|(
name|QDirectFBScreen
operator|::
name|getSurfacePixelFormat
argument_list|(
name|format
argument_list|)
operator|==
name|DSPF_UNKNOWN
condition|)
block|{
name|format
operator|=
name|QDirectFBPixmapData
operator|::
name|hasAlphaChannel
argument_list|(
name|image
argument_list|)
condition|?
name|d_ptr
operator|->
name|alphaPixmapFormat
else|:
name|pixelFormat
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|image
operator|.
name|format
argument_list|()
operator|!=
name|format
condition|)
block|{
return|return
name|createDFBSurface
argument_list|(
name|image
operator|.
name|convertToFormat
argument_list|(
name|format
argument_list|)
argument_list|,
name|format
argument_list|,
name|options
operator||
name|NoPreallocated
argument_list|,
name|resultPtr
argument_list|)
return|;
block|}
name|DFBSurfaceDescription
name|description
decl_stmt|;
name|memset
argument_list|(
operator|&
name|description
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBSurfaceDescription
argument_list|)
argument_list|)
expr_stmt|;
name|description
operator|.
name|width
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
name|description
operator|.
name|height
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|description
operator|.
name|flags
operator|=
name|DSDESC_WIDTH
operator||
name|DSDESC_HEIGHT
operator||
name|DSDESC_PIXELFORMAT
expr_stmt|;
name|initSurfaceDescriptionPixelFormat
argument_list|(
operator|&
name|description
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|bool
name|doMemCopy
init|=
literal|true
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_PREALLOCATED
if|if
condition|(
operator|!
operator|(
name|options
operator|&
name|NoPreallocated
operator|)
condition|)
block|{
name|doMemCopy
operator|=
literal|false
expr_stmt|;
name|description
operator|.
name|flags
operator||=
name|DSDESC_PREALLOCATED
expr_stmt|;
name|description
operator|.
name|preallocated
index|[
literal|0
index|]
operator|.
name|data
operator|=
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|image
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|description
operator|.
name|preallocated
index|[
literal|0
index|]
operator|.
name|pitch
operator|=
name|image
operator|.
name|bytesPerLine
argument_list|()
expr_stmt|;
name|description
operator|.
name|preallocated
index|[
literal|1
index|]
operator|.
name|data
operator|=
literal|0
expr_stmt|;
name|description
operator|.
name|preallocated
index|[
literal|1
index|]
operator|.
name|pitch
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
name|DFBResult
name|result
decl_stmt|;
name|IDirectFBSurface
modifier|*
name|surface
init|=
name|createDFBSurface
argument_list|(
name|description
argument_list|,
name|options
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultPtr
condition|)
operator|*
name|resultPtr
operator|=
name|result
expr_stmt|;
if|if
condition|(
operator|!
name|surface
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"Couldn't create surface createDFBSurface(QImage, QImage::Format, SurfaceCreationOptions)"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|doMemCopy
condition|)
block|{
name|int
name|bplDFB
decl_stmt|;
name|uchar
modifier|*
name|mem
init|=
name|QDirectFBScreen
operator|::
name|lockSurface
argument_list|(
name|surface
argument_list|,
name|DSLF_WRITE
argument_list|,
operator|&
name|bplDFB
argument_list|)
decl_stmt|;
if|if
condition|(
name|mem
condition|)
block|{
specifier|const
name|int
name|height
init|=
name|image
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|int
name|bplQt
init|=
name|image
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|bplQt
operator|==
name|bplDFB
operator|&&
name|bplQt
operator|==
operator|(
name|image
operator|.
name|width
argument_list|()
operator|*
name|image
operator|.
name|depth
argument_list|()
operator|/
literal|8
operator|)
condition|)
block|{
name|memcpy
argument_list|(
name|mem
argument_list|,
name|image
operator|.
name|bits
argument_list|()
argument_list|,
name|image
operator|.
name|byteCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
operator|++
name|i
control|)
block|{
name|memcpy
argument_list|(
name|mem
argument_list|,
name|image
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
argument_list|,
name|bplQt
argument_list|)
expr_stmt|;
name|mem
operator|+=
name|bplDFB
expr_stmt|;
block|}
block|}
name|surface
operator|->
name|Unlock
argument_list|(
name|surface
argument_list|)
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|QT_DIRECTFB_PALETTE
if|if
condition|(
name|image
operator|.
name|colorCount
argument_list|()
operator|!=
literal|0
operator|&&
name|surface
condition|)
name|QDirectFBScreen
operator|::
name|setSurfaceColorTable
argument_list|(
name|surface
argument_list|,
name|image
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|surface
return|;
block|}
end_function
begin_function
DECL|function|copyDFBSurface
name|IDirectFBSurface
modifier|*
name|QDirectFBScreen
operator|::
name|copyDFBSurface
parameter_list|(
name|IDirectFBSurface
modifier|*
name|src
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|,
name|SurfaceCreationOptions
name|options
parameter_list|,
name|DFBResult
modifier|*
name|result
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|QSize
name|size
decl_stmt|;
name|src
operator|->
name|GetSize
argument_list|(
name|src
argument_list|,
operator|&
name|size
operator|.
name|rwidth
argument_list|()
argument_list|,
operator|&
name|size
operator|.
name|rheight
argument_list|()
argument_list|)
expr_stmt|;
name|IDirectFBSurface
modifier|*
name|surface
init|=
name|createDFBSurface
argument_list|(
name|size
argument_list|,
name|format
argument_list|,
name|options
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|DFBSurfaceBlittingFlags
name|flags
init|=
name|QDirectFBScreen
operator|::
name|hasAlphaChannel
argument_list|(
name|surface
argument_list|)
condition|?
name|DSBLIT_BLEND_ALPHACHANNEL
else|:
name|DSBLIT_NOFX
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|DSBLIT_BLEND_ALPHACHANNEL
condition|)
name|surface
operator|->
name|Clear
argument_list|(
name|surface
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|surface
operator|->
name|SetBlittingFlags
argument_list|(
name|surface
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|surface
operator|->
name|Blit
argument_list|(
name|surface
argument_list|,
name|src
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
name|surface
operator|->
name|ReleaseSource
argument_list|(
name|surface
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|surface
return|;
block|}
end_function
begin_function
DECL|function|createDFBSurface
name|IDirectFBSurface
modifier|*
name|QDirectFBScreen
operator|::
name|createDFBSurface
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|,
name|SurfaceCreationOptions
name|options
parameter_list|,
name|DFBResult
modifier|*
name|result
parameter_list|)
block|{
name|DFBSurfaceDescription
name|desc
decl_stmt|;
name|memset
argument_list|(
operator|&
name|desc
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBSurfaceDescription
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|flags
operator||=
name|DSDESC_WIDTH
operator||
name|DSDESC_HEIGHT
expr_stmt|;
if|if
condition|(
operator|!
name|QDirectFBScreen
operator|::
name|initSurfaceDescriptionPixelFormat
argument_list|(
operator|&
name|desc
argument_list|,
name|format
argument_list|)
condition|)
return|return
literal|0
return|;
name|desc
operator|.
name|width
operator|=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|desc
operator|.
name|height
operator|=
name|size
operator|.
name|height
argument_list|()
expr_stmt|;
return|return
name|createDFBSurface
argument_list|(
name|desc
argument_list|,
name|options
argument_list|,
name|result
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createDFBSurface
name|IDirectFBSurface
modifier|*
name|QDirectFBScreen
operator|::
name|createDFBSurface
parameter_list|(
name|DFBSurfaceDescription
name|desc
parameter_list|,
name|SurfaceCreationOptions
name|options
parameter_list|,
name|DFBResult
modifier|*
name|resultPtr
parameter_list|)
block|{
name|DFBResult
name|tmp
decl_stmt|;
name|DFBResult
modifier|&
name|result
init|=
operator|(
name|resultPtr
condition|?
operator|*
name|resultPtr
else|:
name|tmp
operator|)
decl_stmt|;
name|result
operator|=
name|DFB_OK
expr_stmt|;
name|IDirectFBSurface
modifier|*
name|newSurface
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|dfb
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBScreen::createDFBSurface() - not connected"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|d_ptr
operator|->
name|directFBFlags
operator|&
name|VideoOnly
operator|&&
operator|!
operator|(
name|desc
operator|.
name|flags
operator|&
name|DSDESC_PREALLOCATED
operator|)
operator|&&
operator|(
operator|!
operator|(
name|desc
operator|.
name|flags
operator|&
name|DSDESC_CAPS
operator|)
operator|||
operator|!
operator|(
name|desc
operator|.
name|caps
operator|&
name|DSCAPS_SYSTEMONLY
operator|)
operator|)
condition|)
block|{
comment|// Add the video only capability. This means the surface will be created in video ram
if|if
condition|(
operator|!
operator|(
name|desc
operator|.
name|flags
operator|&
name|DSDESC_CAPS
operator|)
condition|)
block|{
name|desc
operator|.
name|caps
operator|=
name|DSCAPS_VIDEOONLY
expr_stmt|;
name|desc
operator|.
name|flags
operator||=
name|DSDESC_CAPS
expr_stmt|;
block|}
else|else
block|{
name|desc
operator|.
name|caps
operator||=
name|DSCAPS_VIDEOONLY
expr_stmt|;
block|}
name|result
operator|=
name|d_ptr
operator|->
name|dfb
operator|->
name|CreateSurface
argument_list|(
name|d_ptr
operator|->
name|dfb
argument_list|,
operator|&
name|desc
argument_list|,
operator|&
name|newSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
ifdef|#
directive|ifdef
name|QT_NO_DEBUG
operator|&&
operator|(
name|desc
operator|.
name|flags
operator|&
name|DSDESC_CAPS
operator|)
operator|&&
operator|(
name|desc
operator|.
name|caps
operator|&
name|DSCAPS_PRIMARY
operator|)
endif|#
directive|endif
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBScreen::createDFBSurface() Failed to create surface in video memory!\n"
literal|"   Flags %0x Caps %0x width %d height %d pixelformat %0x %d preallocated %p %d\n%s"
argument_list|,
name|desc
operator|.
name|flags
argument_list|,
name|desc
operator|.
name|caps
argument_list|,
name|desc
operator|.
name|width
argument_list|,
name|desc
operator|.
name|height
argument_list|,
name|desc
operator|.
name|pixelformat
argument_list|,
name|DFB_PIXELFORMAT_INDEX
argument_list|(
name|desc
operator|.
name|pixelformat
argument_list|)
argument_list|,
name|desc
operator|.
name|preallocated
index|[
literal|0
index|]
operator|.
name|data
argument_list|,
name|desc
operator|.
name|preallocated
index|[
literal|0
index|]
operator|.
name|pitch
argument_list|,
name|DirectFBErrorString
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|desc
operator|.
name|caps
operator|&=
operator|~
name|DSCAPS_VIDEOONLY
expr_stmt|;
block|}
if|if
condition|(
name|d_ptr
operator|->
name|directFBFlags
operator|&
name|SystemOnly
condition|)
name|desc
operator|.
name|caps
operator||=
name|DSCAPS_SYSTEMONLY
expr_stmt|;
if|if
condition|(
operator|!
name|newSurface
condition|)
name|result
operator|=
name|d_ptr
operator|->
name|dfb
operator|->
name|CreateSurface
argument_list|(
name|d_ptr
operator|->
name|dfb
argument_list|,
operator|&
name|desc
argument_list|,
operator|&
name|newSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBScreen::createDFBSurface() Failed!\n"
literal|"   Flags %0x Caps %0x width %d height %d pixelformat %0x %d preallocated %p %d\n%s"
argument_list|,
name|desc
operator|.
name|flags
argument_list|,
name|desc
operator|.
name|caps
argument_list|,
name|desc
operator|.
name|width
argument_list|,
name|desc
operator|.
name|height
argument_list|,
name|desc
operator|.
name|pixelformat
argument_list|,
name|DFB_PIXELFORMAT_INDEX
argument_list|(
name|desc
operator|.
name|pixelformat
argument_list|)
argument_list|,
name|desc
operator|.
name|preallocated
index|[
literal|0
index|]
operator|.
name|data
argument_list|,
name|desc
operator|.
name|preallocated
index|[
literal|0
index|]
operator|.
name|pitch
argument_list|,
name|DirectFBErrorString
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|Q_ASSERT
argument_list|(
name|newSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|&
name|TrackSurface
condition|)
block|{
name|d_ptr
operator|->
name|allocatedSurfaces
operator|.
name|insert
argument_list|(
name|newSurface
argument_list|)
expr_stmt|;
block|}
return|return
name|newSurface
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
end_ifdef
begin_function
DECL|function|getSubSurface
name|IDirectFBSurface
modifier|*
name|QDirectFBScreen
operator|::
name|getSubSurface
parameter_list|(
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|SurfaceCreationOptions
name|options
parameter_list|,
name|DFBResult
modifier|*
name|resultPtr
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
operator|(
name|options
operator|&
name|NoPreallocated
operator|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|DFBResult
name|res
decl_stmt|;
name|DFBResult
modifier|&
name|result
init|=
operator|(
name|resultPtr
condition|?
operator|*
name|resultPtr
else|:
name|res
operator|)
decl_stmt|;
name|IDirectFBSurface
modifier|*
name|subSurface
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|result
operator|=
name|surface
operator|->
name|GetSubSurface
argument_list|(
name|surface
argument_list|,
literal|0
argument_list|,
operator|&
name|subSurface
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|DFBRectangle
name|subRect
init|=
block|{
name|rect
operator|.
name|x
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|result
operator|=
name|surface
operator|->
name|GetSubSurface
argument_list|(
name|surface
argument_list|,
operator|&
name|subRect
argument_list|,
operator|&
name|subSurface
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"Can't get sub surface"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|&
name|TrackSurface
condition|)
block|{
name|d_ptr
operator|->
name|allocatedSurfaces
operator|.
name|insert
argument_list|(
name|subSurface
argument_list|)
expr_stmt|;
block|}
return|return
name|subSurface
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|releaseDFBSurface
name|void
name|QDirectFBScreen
operator|::
name|releaseDFBSurface
parameter_list|(
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|surface
operator|->
name|Release
argument_list|(
name|surface
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|allocatedSurfaces
operator|.
name|remove
argument_list|(
name|surface
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"QDirectFBScreen::releaseDFBSurface() - %p not in list"
argument_list|,
name|surface
argument_list|)
expr_stmt|;
comment|//qDebug("Released surface at %p. New count = %d", surface, d_ptr->allocatedSurfaces.count());
block|}
end_function
begin_function
DECL|function|directFBFlags
name|QDirectFBScreen
operator|::
name|DirectFBFlags
name|QDirectFBScreen
operator|::
name|directFBFlags
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|directFBFlags
return|;
block|}
end_function
begin_function
DECL|function|dfb
name|IDirectFB
modifier|*
name|QDirectFBScreen
operator|::
name|dfb
parameter_list|()
block|{
return|return
name|d_ptr
operator|->
name|dfb
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
end_ifdef
begin_function
DECL|function|primarySurface
name|IDirectFBSurface
modifier|*
name|QDirectFBScreen
operator|::
name|primarySurface
parameter_list|()
block|{
return|return
name|d_ptr
operator|->
name|primarySurface
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_LAYER
end_ifndef
begin_function
DECL|function|dfbDisplayLayer
name|IDirectFBDisplayLayer
modifier|*
name|QDirectFBScreen
operator|::
name|dfbDisplayLayer
parameter_list|()
block|{
return|return
name|d_ptr
operator|->
name|dfbLayer
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|getSurfacePixelFormat
name|DFBSurfacePixelFormat
name|QDirectFBScreen
operator|::
name|getSurfacePixelFormat
parameter_list|(
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_PALETTE
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
return|return
name|DSPF_LUT8
return|;
endif|#
directive|endif
case|case
name|QImage
operator|::
name|Format_RGB888
case|:
return|return
name|DSPF_RGB24
return|;
case|case
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
case|:
return|return
name|DSPF_ARGB4444
return|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010100
operator|)
case|case
name|QImage
operator|::
name|Format_RGB444
case|:
return|return
name|DSPF_RGB444
return|;
case|case
name|QImage
operator|::
name|Format_RGB555
case|:
return|return
name|DSPF_RGB555
return|;
endif|#
directive|endif
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
return|return
name|DSPF_RGB16
return|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
case|case
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
case|:
return|return
name|DSPF_ARGB6666
return|;
case|case
name|QImage
operator|::
name|Format_RGB666
case|:
return|return
name|DSPF_RGB18
return|;
endif|#
directive|endif
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
return|return
name|DSPF_RGB32
return|;
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
return|return
name|DSPF_ARGB
return|;
default|default:
return|return
name|DSPF_UNKNOWN
return|;
block|}
empty_stmt|;
block|}
end_function
begin_function
DECL|function|getImageFormat
name|QImage
operator|::
name|Format
name|QDirectFBScreen
operator|::
name|getImageFormat
parameter_list|(
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|)
block|{
name|DFBSurfacePixelFormat
name|format
decl_stmt|;
name|surface
operator|->
name|GetPixelFormat
argument_list|(
name|surface
argument_list|,
operator|&
name|format
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|DSPF_LUT8
case|:
return|return
name|QImage
operator|::
name|Format_Indexed8
return|;
case|case
name|DSPF_RGB24
case|:
return|return
name|QImage
operator|::
name|Format_RGB888
return|;
case|case
name|DSPF_ARGB4444
case|:
return|return
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
return|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010100
operator|)
case|case
name|DSPF_RGB444
case|:
return|return
name|QImage
operator|::
name|Format_RGB444
return|;
case|case
name|DSPF_RGB555
case|:
endif|#
directive|endif
case|case
name|DSPF_ARGB1555
case|:
return|return
name|QImage
operator|::
name|Format_RGB555
return|;
case|case
name|DSPF_RGB16
case|:
return|return
name|QImage
operator|::
name|Format_RGB16
return|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
case|case
name|DSPF_ARGB6666
case|:
return|return
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
return|;
case|case
name|DSPF_RGB18
case|:
return|return
name|QImage
operator|::
name|Format_RGB666
return|;
endif|#
directive|endif
case|case
name|DSPF_RGB32
case|:
return|return
name|QImage
operator|::
name|Format_RGB32
return|;
case|case
name|DSPF_ARGB
case|:
block|{
name|DFBSurfaceCapabilities
name|caps
decl_stmt|;
specifier|const
name|DFBResult
name|result
init|=
name|surface
operator|->
name|GetCapabilities
argument_list|(
name|surface
argument_list|,
operator|&
name|caps
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|result
operator|==
name|DFB_OK
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
operator|(
name|caps
operator|&
name|DSCAPS_PREMULTIPLIED
condition|?
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
else|:
name|QImage
operator|::
name|Format_ARGB32
operator|)
return|;
block|}
default|default:
break|break;
block|}
return|return
name|QImage
operator|::
name|Format_Invalid
return|;
block|}
end_function
begin_function
DECL|function|getSurfaceDescription
name|DFBSurfaceDescription
name|QDirectFBScreen
operator|::
name|getSurfaceDescription
parameter_list|(
specifier|const
name|uint
modifier|*
name|buffer
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|DFBSurfaceDescription
name|description
decl_stmt|;
name|memset
argument_list|(
operator|&
name|description
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBSurfaceDescription
argument_list|)
argument_list|)
expr_stmt|;
name|description
operator|.
name|flags
operator|=
name|DSDESC_CAPS
operator||
name|DSDESC_WIDTH
operator||
name|DSDESC_HEIGHT
operator||
name|DSDESC_PIXELFORMAT
operator||
name|DSDESC_PREALLOCATED
expr_stmt|;
name|description
operator|.
name|caps
operator|=
name|DSCAPS_PREMULTIPLIED
expr_stmt|;
name|description
operator|.
name|width
operator|=
name|length
expr_stmt|;
name|description
operator|.
name|height
operator|=
literal|1
expr_stmt|;
name|description
operator|.
name|pixelformat
operator|=
name|DSPF_ARGB
expr_stmt|;
name|description
operator|.
name|preallocated
index|[
literal|0
index|]
operator|.
name|data
operator|=
operator|(
name|void
operator|*
operator|)
name|buffer
expr_stmt|;
name|description
operator|.
name|preallocated
index|[
literal|0
index|]
operator|.
name|pitch
operator|=
name|length
operator|*
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
expr_stmt|;
name|description
operator|.
name|preallocated
index|[
literal|1
index|]
operator|.
name|data
operator|=
literal|0
expr_stmt|;
name|description
operator|.
name|preallocated
index|[
literal|1
index|]
operator|.
name|pitch
operator|=
literal|0
expr_stmt|;
return|return
name|description
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_PALETTE
end_ifndef
begin_function
DECL|function|setSurfaceColorTable
name|void
name|QDirectFBScreen
operator|::
name|setSurfaceColorTable
parameter_list|(
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
block|{
if|if
condition|(
operator|!
name|surface
condition|)
return|return;
specifier|const
name|int
name|numColors
init|=
name|image
operator|.
name|colorCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|numColors
operator|==
literal|0
condition|)
return|return;
name|QVarLengthArray
argument_list|<
name|DFBColor
argument_list|,
literal|256
argument_list|>
name|colors
argument_list|(
name|numColors
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColors
condition|;
operator|++
name|i
control|)
block|{
name|QRgb
name|c
init|=
name|image
operator|.
name|color
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|colors
index|[
name|i
index|]
operator|.
name|a
operator|=
name|qAlpha
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|colors
index|[
name|i
index|]
operator|.
name|r
operator|=
name|qRed
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|colors
index|[
name|i
index|]
operator|.
name|g
operator|=
name|qGreen
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|colors
index|[
name|i
index|]
operator|.
name|b
operator|=
name|qBlue
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|IDirectFBPalette
modifier|*
name|palette
decl_stmt|;
name|DFBResult
name|result
decl_stmt|;
name|result
operator|=
name|surface
operator|->
name|GetPalette
argument_list|(
name|surface
argument_list|,
operator|&
name|palette
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen::setSurfaceColorTable GetPalette"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
name|result
operator|=
name|palette
operator|->
name|SetEntries
argument_list|(
name|palette
argument_list|,
name|colors
operator|.
name|data
argument_list|()
argument_list|,
name|numColors
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen::setSurfaceColorTable SetEntries"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|palette
operator|->
name|Release
argument_list|(
name|palette
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DIRECTFB_PALETTE
end_comment
begin_if
if|#
directive|if
name|defined
name|QT_DIRECTFB_CURSOR
end_if
begin_class
DECL|class|QDirectFBScreenCursor
class|class
name|Q_GUI_EXPORT
name|QDirectFBScreenCursor
super|:
specifier|public
name|QScreenCursor
block|{
public|public:
name|QDirectFBScreenCursor
parameter_list|()
constructor_decl|;
specifier|virtual
name|void
name|set
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|hotx
parameter_list|,
name|int
name|hoty
parameter_list|)
function_decl|;
specifier|virtual
name|void
name|move
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
specifier|virtual
name|void
name|show
parameter_list|()
function_decl|;
specifier|virtual
name|void
name|hide
parameter_list|()
function_decl|;
private|private:
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WINDOW_AS_CURSOR
name|~
name|QDirectFBScreenCursor
parameter_list|()
destructor_decl|;
name|bool
name|createWindow
parameter_list|()
function_decl|;
DECL|member|window
name|IDirectFBWindow
modifier|*
name|window
decl_stmt|;
endif|#
directive|endif
DECL|member|layer
name|IDirectFBDisplayLayer
modifier|*
name|layer
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QDirectFBScreenCursor
name|QDirectFBScreenCursor
operator|::
name|QDirectFBScreenCursor
parameter_list|()
block|{
name|IDirectFB
modifier|*
name|fb
init|=
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|dfb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fb
condition|)
name|qFatal
argument_list|(
literal|"QDirectFBScreenCursor: DirectFB not initialized"
argument_list|)
expr_stmt|;
name|layer
operator|=
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|dfbDisplayLayer
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|layer
argument_list|)
expr_stmt|;
name|enable
operator|=
literal|false
expr_stmt|;
name|hwaccel
operator|=
literal|true
expr_stmt|;
name|supportsAlpha
operator|=
literal|true
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WINDOW_AS_CURSOR
name|window
operator|=
literal|0
expr_stmt|;
name|DFBResult
name|result
init|=
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_ADMINISTRATIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::hide: "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|layer
operator|->
name|SetCursorOpacity
argument_list|(
name|layer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::hide: "
literal|"Unable to set cursor opacity"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_SHARED
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::hide: "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_constructor
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WINDOW_AS_CURSOR
end_ifdef
begin_destructor
DECL|function|~QDirectFBScreenCursor
name|QDirectFBScreenCursor
operator|::
name|~
name|QDirectFBScreenCursor
parameter_list|()
block|{
if|if
condition|(
name|window
condition|)
block|{
name|window
operator|->
name|Release
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|window
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|createWindow
name|bool
name|QDirectFBScreenCursor
operator|::
name|createWindow
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|window
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|cursor
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|DFBWindowDescription
name|description
decl_stmt|;
name|memset
argument_list|(
operator|&
name|description
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBWindowDescription
argument_list|)
argument_list|)
expr_stmt|;
name|description
operator|.
name|flags
operator|=
name|DWDESC_POSX
operator||
name|DWDESC_POSY
operator||
name|DWDESC_WIDTH
operator||
name|DWDESC_HEIGHT
operator||
name|DWDESC_CAPS
operator||
name|DWDESC_PIXELFORMAT
operator||
name|DWDESC_SURFACE_CAPS
expr_stmt|;
name|description
operator|.
name|width
operator|=
name|cursor
operator|.
name|width
argument_list|()
expr_stmt|;
name|description
operator|.
name|height
operator|=
name|cursor
operator|.
name|height
argument_list|()
expr_stmt|;
name|description
operator|.
name|posx
operator|=
name|pos
operator|.
name|x
argument_list|()
operator|-
name|hotspot
operator|.
name|x
argument_list|()
expr_stmt|;
name|description
operator|.
name|posy
operator|=
name|pos
operator|.
name|y
argument_list|()
operator|-
name|hotspot
operator|.
name|y
argument_list|()
expr_stmt|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010100
operator|)
name|description
operator|.
name|flags
operator||=
name|DWDESC_OPTIONS
expr_stmt|;
name|description
operator|.
name|options
operator|=
name|DWOP_GHOST
operator||
name|DWOP_ALPHACHANNEL
expr_stmt|;
endif|#
directive|endif
name|description
operator|.
name|caps
operator|=
name|DWCAPS_NODECORATION
operator||
name|DWCAPS_DOUBLEBUFFER
expr_stmt|;
specifier|const
name|QImage
operator|::
name|Format
name|format
init|=
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|alphaPixmapFormat
argument_list|()
decl_stmt|;
name|description
operator|.
name|pixelformat
operator|=
name|QDirectFBScreen
operator|::
name|getSurfacePixelFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|QDirectFBScreen
operator|::
name|isPremultiplied
argument_list|(
name|format
argument_list|)
condition|)
name|description
operator|.
name|surface_caps
operator|=
name|DSCAPS_PREMULTIPLIED
expr_stmt|;
name|DFBResult
name|result
init|=
name|layer
operator|->
name|CreateWindow
argument_list|(
name|layer
argument_list|,
operator|&
name|description
argument_list|,
operator|&
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::createWindow: Unable to create window"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|result
operator|=
name|window
operator|->
name|SetOpacity
argument_list|(
name|window
argument_list|,
literal|255
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::createWindow: Unable to set opacity "
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|result
operator|=
name|window
operator|->
name|SetStackingClass
argument_list|(
name|window
argument_list|,
name|DWSC_UPPER
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::createWindow: Unable to set stacking class "
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|result
operator|=
name|window
operator|->
name|RaiseToTop
argument_list|(
name|window
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::createWindow: Unable to raise window "
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|move
name|void
name|QDirectFBScreenCursor
operator|::
name|move
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|pos
operator|=
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WINDOW_AS_CURSOR
if|if
condition|(
name|window
condition|)
block|{
specifier|const
name|QPoint
name|p
init|=
name|pos
operator|-
name|hotspot
decl_stmt|;
name|DFBResult
name|result
init|=
name|window
operator|->
name|MoveTo
argument_list|(
name|window
argument_list|,
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|p
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::move: Unable to move window"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
name|layer
operator|->
name|WarpCursor
argument_list|(
name|layer
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QDirectFBScreenCursor
operator|::
name|hide
parameter_list|()
block|{
if|if
condition|(
name|enable
condition|)
block|{
name|enable
operator|=
literal|false
expr_stmt|;
name|DFBResult
name|result
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_DIRECTFB_WINDOW_AS_CURSOR
name|result
operator|=
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_ADMINISTRATIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::hide: "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|layer
operator|->
name|SetCursorOpacity
argument_list|(
name|layer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::hide: "
literal|"Unable to set cursor opacity"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_SHARED
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::hide: "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
if|if
condition|(
name|window
condition|)
block|{
name|result
operator|=
name|window
operator|->
name|SetOpacity
argument_list|(
name|window
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::hide: "
literal|"Unable to set window opacity"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|show
name|void
name|QDirectFBScreenCursor
operator|::
name|show
parameter_list|()
block|{
if|if
condition|(
operator|!
name|enable
condition|)
block|{
name|enable
operator|=
literal|true
expr_stmt|;
name|DFBResult
name|result
decl_stmt|;
name|result
operator|=
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_ADMINISTRATIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::show: "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|layer
operator|->
name|SetCursorOpacity
argument_list|(
name|layer
argument_list|,
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WINDOW_AS_CURSOR
literal|0
else|#
directive|else
literal|255
endif|#
directive|endif
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::show: "
literal|"Unable to set cursor shape"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_SHARED
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::show: "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WINDOW_AS_CURSOR
if|if
condition|(
name|window
condition|)
block|{
name|DFBResult
name|result
init|=
name|window
operator|->
name|SetOpacity
argument_list|(
name|window
argument_list|,
literal|255
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::show: "
literal|"Unable to set window opacity"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|set
name|void
name|QDirectFBScreenCursor
operator|::
name|set
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|int
name|hotx
parameter_list|,
name|int
name|hoty
parameter_list|)
block|{
name|QDirectFBScreen
modifier|*
name|screen
init|=
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|QImage
argument_list|()
expr_stmt|;
name|hide
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cursor
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|screen
operator|->
name|alphaPixmapFormat
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|=
name|cursor
operator|.
name|size
argument_list|()
expr_stmt|;
name|hotspot
operator|=
name|QPoint
argument_list|(
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
name|DFBResult
name|result
init|=
name|DFB_OK
decl_stmt|;
name|IDirectFBSurface
modifier|*
name|surface
init|=
name|screen
operator|->
name|createDFBSurface
argument_list|(
name|cursor
argument_list|,
name|screen
operator|->
name|alphaPixmapFormat
argument_list|()
argument_list|,
name|QDirectFBScreen
operator|::
name|DontTrackSurface
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|surface
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::set: Unable to create surface"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_DIRECTFB_WINDOW_AS_CURSOR
name|result
operator|=
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_ADMINISTRATIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::show: "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|layer
operator|->
name|SetCursorShape
argument_list|(
name|layer
argument_list|,
name|surface
argument_list|,
name|hotx
argument_list|,
name|hoty
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::show: "
literal|"Unable to set cursor shape"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_SHARED
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::show: "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
if|if
condition|(
name|window
operator|||
name|createWindow
argument_list|()
condition|)
block|{
name|QSize
name|windowSize
decl_stmt|;
name|result
operator|=
name|window
operator|->
name|GetSize
argument_list|(
name|window
argument_list|,
operator|&
name|windowSize
operator|.
name|rwidth
argument_list|()
argument_list|,
operator|&
name|windowSize
operator|.
name|rheight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::set: "
literal|"Unable to get window size"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|window
operator|->
name|Resize
argument_list|(
name|window
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::set: Unable to resize window"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|IDirectFBSurface
modifier|*
name|windowSurface
decl_stmt|;
name|result
operator|=
name|window
operator|->
name|GetSurface
argument_list|(
name|window
argument_list|,
operator|&
name|windowSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::set: Unable to get window surface"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|windowSurface
operator|->
name|Clear
argument_list|(
name|windowSurface
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::set: Unable to clear surface"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|windowSurface
operator|->
name|Blit
argument_list|(
name|windowSurface
argument_list|,
name|surface
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::set: Unable to blit to surface"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|=
name|windowSurface
operator|->
name|Flip
argument_list|(
name|windowSurface
argument_list|,
literal|0
argument_list|,
name|DSFLIP_NONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::set: Unable to flip window"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|windowSurface
operator|->
name|Release
argument_list|(
name|windowSurface
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|surface
operator|->
name|Release
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|show
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_DIRECTFB_CURSOR
end_comment
begin_constructor
DECL|function|QDirectFBScreen
name|QDirectFBScreen
operator|::
name|QDirectFBScreen
parameter_list|(
name|int
name|display_id
parameter_list|)
member_init_list|:
name|QScreen
argument_list|(
name|display_id
argument_list|,
name|DirectFBClass
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QDirectFBScreenPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
block|{
name|QDirectFBScreenPrivate
operator|::
name|instance
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFBScreen
name|QDirectFBScreen
operator|::
name|~
name|QDirectFBScreen
parameter_list|()
block|{
if|if
condition|(
name|QDirectFBScreenPrivate
operator|::
name|instance
operator|==
name|this
condition|)
name|QDirectFBScreenPrivate
operator|::
name|instance
operator|=
literal|0
expr_stmt|;
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|instance
name|QDirectFBScreen
modifier|*
name|QDirectFBScreen
operator|::
name|instance
parameter_list|()
block|{
return|return
name|QDirectFBScreenPrivate
operator|::
name|instance
return|;
block|}
end_function
begin_function
DECL|function|depth
name|int
name|QDirectFBScreen
operator|::
name|depth
parameter_list|(
name|DFBSurfacePixelFormat
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|DSPF_A1
case|:
return|return
literal|1
return|;
case|case
name|DSPF_A8
case|:
case|case
name|DSPF_RGB332
case|:
case|case
name|DSPF_LUT8
case|:
case|case
name|DSPF_ALUT44
case|:
return|return
literal|8
return|;
case|case
name|DSPF_I420
case|:
case|case
name|DSPF_YV12
case|:
case|case
name|DSPF_NV12
case|:
case|case
name|DSPF_NV21
case|:
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010100
operator|)
case|case
name|DSPF_RGB444
case|:
endif|#
directive|endif
return|return
literal|12
return|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010100
operator|)
case|case
name|DSPF_RGB555
case|:
return|return
literal|15
return|;
endif|#
directive|endif
case|case
name|DSPF_ARGB1555
case|:
case|case
name|DSPF_RGB16
case|:
case|case
name|DSPF_YUY2
case|:
case|case
name|DSPF_UYVY
case|:
case|case
name|DSPF_NV16
case|:
case|case
name|DSPF_ARGB2554
case|:
case|case
name|DSPF_ARGB4444
case|:
return|return
literal|16
return|;
case|case
name|DSPF_RGB24
case|:
return|return
literal|24
return|;
case|case
name|DSPF_RGB32
case|:
case|case
name|DSPF_ARGB
case|:
case|case
name|DSPF_AiRGB
case|:
return|return
literal|32
return|;
case|case
name|DSPF_UNKNOWN
case|:
default|default:
return|return
literal|0
return|;
block|}
empty_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|depth
name|int
name|QDirectFBScreen
operator|::
name|depth
parameter_list|(
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
name|int
name|depth
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_Invalid
case|:
case|case
name|QImage
operator|::
name|NImageFormats
case|:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
case|case
name|QImage
operator|::
name|Format_Mono
case|:
case|case
name|QImage
operator|::
name|Format_MonoLSB
case|:
name|depth
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
name|depth
operator|=
literal|8
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
name|depth
operator|=
literal|32
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB555
case|:
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
case|case
name|QImage
operator|::
name|Format_RGB444
case|:
case|case
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
case|:
name|depth
operator|=
literal|16
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB666
case|:
case|case
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_RGB888
case|:
name|depth
operator|=
literal|24
expr_stmt|;
break|break;
block|}
return|return
name|depth
return|;
block|}
end_function
begin_function
DECL|function|setFlipFlags
name|void
name|QDirectFBScreenPrivate
operator|::
name|setFlipFlags
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|args
parameter_list|)
block|{
name|QRegExp
name|flipRegexp
argument_list|(
name|QLatin1String
argument_list|(
literal|"^flip=([\\w,]*)$"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|args
operator|.
name|indexOf
argument_list|(
name|flipRegexp
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
specifier|const
name|QStringList
name|flips
init|=
name|flipRegexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|flipFlags
operator|=
name|DSFLIP_NONE
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|flip
decl|,
name|flips
control|)
block|{
if|if
condition|(
name|flip
operator|==
name|QLatin1String
argument_list|(
literal|"wait"
argument_list|)
condition|)
name|flipFlags
operator||=
name|DSFLIP_WAIT
expr_stmt|;
elseif|else
if|if
condition|(
name|flip
operator|==
name|QLatin1String
argument_list|(
literal|"blit"
argument_list|)
condition|)
name|flipFlags
operator||=
name|DSFLIP_BLIT
expr_stmt|;
elseif|else
if|if
condition|(
name|flip
operator|==
name|QLatin1String
argument_list|(
literal|"onsync"
argument_list|)
condition|)
name|flipFlags
operator||=
name|DSFLIP_ONSYNC
expr_stmt|;
elseif|else
if|if
condition|(
name|flip
operator|==
name|QLatin1String
argument_list|(
literal|"pipeline"
argument_list|)
condition|)
name|flipFlags
operator||=
name|DSFLIP_PIPELINE
expr_stmt|;
else|else
name|qWarning
argument_list|(
literal|"QDirectFBScreen: Unknown flip argument: %s"
argument_list|,
name|qPrintable
argument_list|(
name|flip
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|flipFlags
operator|=
name|DSFLIP_BLIT
operator||
name|DSFLIP_ONSYNC
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WM
end_ifdef
begin_function
DECL|function|onWindowEvent
name|void
name|QDirectFBScreenPrivate
operator|::
name|onWindowEvent
parameter_list|(
name|QWSWindow
modifier|*
name|window
parameter_list|,
name|QWSServer
operator|::
name|WindowEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|==
name|QWSServer
operator|::
name|Raise
condition|)
block|{
name|QWSWindowSurface
modifier|*
name|windowSurface
init|=
name|window
operator|->
name|windowSurface
argument_list|()
decl_stmt|;
if|if
condition|(
name|windowSurface
operator|&&
name|windowSurface
operator|->
name|key
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"directfb"
argument_list|)
condition|)
block|{
cast|static_cast
argument_list|<
name|QDirectFBWindowSurface
operator|*
argument_list|>
argument_list|(
name|windowSurface
argument_list|)
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|createPixmapData
name|QPixmapData
modifier|*
name|QDirectFBScreenPrivate
operator|::
name|createPixmapData
parameter_list|(
name|QPixmapData
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|type
operator|==
name|QPixmapData
operator|::
name|BitmapType
condition|)
return|return
name|QWSGraphicsSystem
operator|::
name|createPixmapData
argument_list|(
name|type
argument_list|)
return|;
return|return
operator|new
name|QDirectFBPixmapData
argument_list|(
name|q
argument_list|,
name|type
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x000923
operator|)
end_if
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_DEBUG
end_ifdef
begin_struct_decl
struct_decl|struct
name|FlagDescription
struct_decl|;
end_struct_decl
begin_decl_stmt
DECL|variable|accelerationDescriptions
specifier|static
specifier|const
name|FlagDescription
modifier|*
name|accelerationDescriptions
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|blitDescriptions
specifier|static
specifier|const
name|FlagDescription
modifier|*
name|blitDescriptions
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|drawDescriptions
specifier|static
specifier|const
name|FlagDescription
modifier|*
name|drawDescriptions
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_struct
DECL|struct|FlagDescription
struct|struct
name|FlagDescription
block|{
DECL|member|name
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|flag
name|uint
name|flag
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|accelerationDescriptions
specifier|static
specifier|const
name|FlagDescription
name|accelerationDescriptions
index|[]
init|=
block|{
block|{
literal|"DFXL_NONE"
block|,
name|DFXL_NONE
block|}
block|,
block|{
literal|"DFXL_FILLRECTANGLE"
block|,
name|DFXL_FILLRECTANGLE
block|}
block|,
block|{
literal|"DFXL_DRAWRECTANGLE"
block|,
name|DFXL_DRAWRECTANGLE
block|}
block|,
block|{
literal|"DFXL_DRAWLINE"
block|,
name|DFXL_DRAWLINE
block|}
block|,
block|{
literal|"DFXL_FILLTRIANGLE"
block|,
name|DFXL_FILLTRIANGLE
block|}
block|,
block|{
literal|"DFXL_BLIT"
block|,
name|DFXL_BLIT
block|}
block|,
block|{
literal|"DFXL_STRETCHBLIT"
block|,
name|DFXL_STRETCHBLIT
block|}
block|,
block|{
literal|"DFXL_TEXTRIANGLES"
block|,
name|DFXL_TEXTRIANGLES
block|}
block|,
block|{
literal|"DFXL_DRAWSTRING"
block|,
name|DFXL_DRAWSTRING
block|}
block|,
block|{
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|blitDescriptions
specifier|static
specifier|const
name|FlagDescription
name|blitDescriptions
index|[]
init|=
block|{
block|{
literal|"DSBLIT_NOFX"
block|,
name|DSBLIT_NOFX
block|}
block|,
block|{
literal|"DSBLIT_BLEND_ALPHACHANNEL"
block|,
name|DSBLIT_BLEND_ALPHACHANNEL
block|}
block|,
block|{
literal|"DSBLIT_BLEND_COLORALPHA"
block|,
name|DSBLIT_BLEND_COLORALPHA
block|}
block|,
block|{
literal|"DSBLIT_COLORIZE"
block|,
name|DSBLIT_COLORIZE
block|}
block|,
block|{
literal|"DSBLIT_SRC_COLORKEY"
block|,
name|DSBLIT_SRC_COLORKEY
block|}
block|,
block|{
literal|"DSBLIT_DST_COLORKEY"
block|,
name|DSBLIT_DST_COLORKEY
block|}
block|,
block|{
literal|"DSBLIT_SRC_PREMULTIPLY"
block|,
name|DSBLIT_SRC_PREMULTIPLY
block|}
block|,
block|{
literal|"DSBLIT_DST_PREMULTIPLY"
block|,
name|DSBLIT_DST_PREMULTIPLY
block|}
block|,
block|{
literal|"DSBLIT_DEMULTIPLY"
block|,
name|DSBLIT_DEMULTIPLY
block|}
block|,
block|{
literal|"DSBLIT_DEINTERLACE"
block|,
name|DSBLIT_DEINTERLACE
block|}
block|,
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x000923
operator|)
block|{
literal|"DSBLIT_SRC_PREMULTCOLOR"
block|,
name|DSBLIT_SRC_PREMULTCOLOR
block|}
block|,
block|{
literal|"DSBLIT_XOR"
block|,
name|DSBLIT_XOR
block|}
block|,
endif|#
directive|endif
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
block|{
literal|"DSBLIT_INDEX_TRANSLATION"
block|,
name|DSBLIT_INDEX_TRANSLATION
block|}
block|,
endif|#
directive|endif
block|{
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|drawDescriptions
specifier|static
specifier|const
name|FlagDescription
name|drawDescriptions
index|[]
init|=
block|{
block|{
literal|"DSDRAW_NOFX"
block|,
name|DSDRAW_NOFX
block|}
block|,
block|{
literal|"DSDRAW_BLEND"
block|,
name|DSDRAW_BLEND
block|}
block|,
block|{
literal|"DSDRAW_DST_COLORKEY"
block|,
name|DSDRAW_DST_COLORKEY
block|}
block|,
block|{
literal|"DSDRAW_SRC_PREMULTIPLY"
block|,
name|DSDRAW_SRC_PREMULTIPLY
block|}
block|,
block|{
literal|"DSDRAW_DST_PREMULTIPLY"
block|,
name|DSDRAW_DST_PREMULTIPLY
block|}
block|,
block|{
literal|"DSDRAW_DEMULTIPLY"
block|,
name|DSDRAW_DEMULTIPLY
block|}
block|,
block|{
literal|"DSDRAW_XOR"
block|,
name|DSDRAW_XOR
block|}
block|,
block|{
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|flagDescriptions
specifier|static
specifier|const
name|QByteArray
name|flagDescriptions
parameter_list|(
name|uint
name|mask
parameter_list|,
specifier|const
name|FlagDescription
modifier|*
name|flags
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DEBUG
name|Q_UNUSED
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|(
literal|""
argument_list|)
return|;
else|#
directive|else
if|if
condition|(
operator|!
name|mask
condition|)
return|return
name|flags
index|[
literal|0
index|]
operator|.
name|name
return|;
name|QStringList
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|flags
index|[
name|i
index|]
operator|.
name|name
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|mask
operator|&
name|flags
index|[
name|i
index|]
operator|.
name|flag
condition|)
block|{
name|list
operator|.
name|append
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|flags
index|[
name|i
index|]
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Q_ASSERT
argument_list|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|list
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|"|"
argument_list|)
argument_list|)
operator|)
operator|.
name|toLatin1
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|printDirectFBInfo
specifier|static
name|void
name|printDirectFBInfo
parameter_list|(
name|IDirectFB
modifier|*
name|fb
parameter_list|,
name|IDirectFBSurface
modifier|*
name|primarySurface
parameter_list|)
block|{
name|DFBResult
name|result
decl_stmt|;
name|DFBGraphicsDeviceDescription
name|dev
decl_stmt|;
name|result
operator|=
name|fb
operator|->
name|GetDeviceDescription
argument_list|(
name|fb
argument_list|,
operator|&
name|dev
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"Error reading graphics device description"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
name|DFBSurfacePixelFormat
name|pixelFormat
decl_stmt|;
name|primarySurface
operator|->
name|GetPixelFormat
argument_list|(
name|primarySurface
argument_list|,
operator|&
name|pixelFormat
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Device: %s (%s), Driver: %s v%i.%i (%s) Pixelformat: %d (%d)\n"
literal|"acceleration: 0x%x%s\nblit: 0x%x%s\ndraw: 0x%0x%s\nvideo: %iKB\n"
argument_list|,
name|dev
operator|.
name|name
argument_list|,
name|dev
operator|.
name|vendor
argument_list|,
name|dev
operator|.
name|driver
operator|.
name|name
argument_list|,
name|dev
operator|.
name|driver
operator|.
name|major
argument_list|,
name|dev
operator|.
name|driver
operator|.
name|minor
argument_list|,
name|dev
operator|.
name|driver
operator|.
name|vendor
argument_list|,
name|DFB_PIXELFORMAT_INDEX
argument_list|(
name|pixelFormat
argument_list|)
argument_list|,
name|QDirectFBScreen
operator|::
name|getImageFormat
argument_list|(
name|primarySurface
argument_list|)
argument_list|,
name|dev
operator|.
name|acceleration_mask
argument_list|,
name|flagDescriptions
argument_list|(
name|dev
operator|.
name|acceleration_mask
argument_list|,
name|accelerationDescriptions
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|dev
operator|.
name|blitting_flags
argument_list|,
name|flagDescriptions
argument_list|(
name|dev
operator|.
name|blitting_flags
argument_list|,
name|blitDescriptions
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|dev
operator|.
name|drawing_flags
argument_list|,
name|flagDescriptions
argument_list|(
name|dev
operator|.
name|drawing_flags
argument_list|,
name|drawDescriptions
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|dev
operator|.
name|video_memory
operator|>>
literal|10
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setIntOption
specifier|static
specifier|inline
name|bool
name|setIntOption
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|arguments
parameter_list|,
specifier|const
name|QString
modifier|&
name|variable
parameter_list|,
name|int
modifier|*
name|value
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QRegExp
name|rx
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1=?(\\d+)"
argument_list|)
operator|.
name|arg
argument_list|(
name|variable
argument_list|)
argument_list|)
decl_stmt|;
name|rx
operator|.
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|indexOf
argument_list|(
name|rx
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
operator|*
name|value
operator|=
name|rx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|colorFromName
specifier|static
specifier|inline
name|QColor
name|colorFromName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QRegExp
name|rx
argument_list|(
name|QLatin1String
argument_list|(
literal|"#([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])"
argument_list|)
argument_list|)
decl_stmt|;
name|rx
operator|.
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
if|if
condition|(
name|rx
operator|.
name|exactMatch
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|rx
operator|.
name|captureCount
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|int
name|ints
index|[
literal|4
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|ok
decl_stmt|;
name|ints
index|[
name|i
index|]
operator|=
name|rx
operator|.
name|cap
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|,
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
operator|||
name|ints
index|[
name|i
index|]
operator|>
literal|255
condition|)
break|break;
block|}
if|if
condition|(
name|i
operator|==
literal|4
condition|)
return|return
name|QColor
argument_list|(
name|ints
index|[
literal|0
index|]
argument_list|,
name|ints
index|[
literal|1
index|]
argument_list|,
name|ints
index|[
literal|2
index|]
argument_list|,
name|ints
index|[
literal|3
index|]
argument_list|)
return|;
block|}
return|return
name|QColor
argument_list|(
name|name
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|connect
name|bool
name|QDirectFBScreen
operator|::
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
block|{
name|DFBResult
name|result
init|=
name|DFB_OK
decl_stmt|;
block|{
comment|// pass command line arguments to DirectFB
specifier|const
name|QStringList
name|args
init|=
name|QCoreApplication
operator|::
name|arguments
argument_list|()
decl_stmt|;
name|int
name|argc
init|=
name|args
operator|.
name|size
argument_list|()
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
operator|new
name|char
operator|*
index|[
name|argc
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argc
condition|;
operator|++
name|i
control|)
name|argv
index|[
name|i
index|]
operator|=
name|qstrdup
argument_list|(
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|DirectFBInit
argument_list|(
operator|&
name|argc
argument_list|,
operator|&
name|argv
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen: error initializing DirectFB"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|argv
expr_stmt|;
block|}
specifier|const
name|QStringList
name|displayArgs
init|=
name|displaySpec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|d_ptr
operator|->
name|setFlipFlags
argument_list|(
name|displayArgs
argument_list|)
expr_stmt|;
name|result
operator|=
name|DirectFBCreate
argument_list|(
operator|&
name|d_ptr
operator|->
name|dfb
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen: error creating DirectFB interface"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|displayArgs
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"videoonly"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|d_ptr
operator|->
name|directFBFlags
operator||=
name|VideoOnly
expr_stmt|;
if|if
condition|(
name|displayArgs
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"systemonly"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
if|if
condition|(
name|d_ptr
operator|->
name|directFBFlags
operator|&
name|VideoOnly
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBScreen: error. videoonly and systemonly are mutually exclusive"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d_ptr
operator|->
name|directFBFlags
operator||=
name|SystemOnly
expr_stmt|;
block|}
block|}
if|if
condition|(
name|displayArgs
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"boundingrectflip"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|d_ptr
operator|->
name|directFBFlags
operator||=
name|BoundingRectFlip
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|displayArgs
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"nopartialflip"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|d_ptr
operator|->
name|directFBFlags
operator||=
name|NoPartialFlip
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_DIRECTFB_IMAGECACHE
name|int
name|imageCacheSize
init|=
literal|4
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// 4 MB
name|setIntOption
argument_list|(
name|displayArgs
argument_list|,
name|QLatin1String
argument_list|(
literal|"imagecachesize"
argument_list|)
argument_list|,
operator|&
name|imageCacheSize
argument_list|)
expr_stmt|;
name|QDirectFBPaintEngine
operator|::
name|initImageCache
argument_list|(
name|imageCacheSize
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_WM
if|if
condition|(
name|displayArgs
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"fullscreen"
argument_list|)
argument_list|)
condition|)
endif|#
directive|endif
name|d_ptr
operator|->
name|dfb
operator|->
name|SetCooperativeLevel
argument_list|(
name|d_ptr
operator|->
name|dfb
argument_list|,
name|DFSCL_FULLSCREEN
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|forcePremultiplied
init|=
name|displayArgs
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"forcepremultiplied"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
decl_stmt|;
name|DFBSurfaceDescription
name|description
decl_stmt|;
name|memset
argument_list|(
operator|&
name|description
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBSurfaceDescription
argument_list|)
argument_list|)
expr_stmt|;
name|IDirectFBSurface
modifier|*
name|surface
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
name|description
operator|.
name|flags
operator|=
name|DSDESC_CAPS
expr_stmt|;
if|if
condition|(
operator|::
name|setIntOption
argument_list|(
name|displayArgs
argument_list|,
name|QLatin1String
argument_list|(
literal|"width"
argument_list|)
argument_list|,
operator|&
name|description
operator|.
name|width
argument_list|)
condition|)
name|description
operator|.
name|flags
operator||=
name|DSDESC_WIDTH
expr_stmt|;
if|if
condition|(
operator|::
name|setIntOption
argument_list|(
name|displayArgs
argument_list|,
name|QLatin1String
argument_list|(
literal|"height"
argument_list|)
argument_list|,
operator|&
name|description
operator|.
name|height
argument_list|)
condition|)
name|description
operator|.
name|flags
operator||=
name|DSDESC_HEIGHT
expr_stmt|;
name|description
operator|.
name|caps
operator|=
name|DSCAPS_PRIMARY
operator||
name|DSCAPS_DOUBLE
expr_stmt|;
struct|struct
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
specifier|const
name|DFBSurfaceCapabilities
name|cap
decl_stmt|;
block|}
decl|const
name|capabilities
index|[]
init|=
block|{
block|{
literal|"static_alloc"
block|,
name|DSCAPS_STATIC_ALLOC
block|}
block|,
block|{
literal|"triplebuffer"
block|,
name|DSCAPS_TRIPLE
block|}
block|,
block|{
literal|"interlaced"
block|,
name|DSCAPS_INTERLACED
block|}
block|,
block|{
literal|"separated"
block|,
name|DSCAPS_SEPARATED
block|}
block|,
comment|//        { "depthbuffer", DSCAPS_DEPTH }, // only makes sense with TextureTriangles which are not supported
block|{
literal|0
block|,
name|DSCAPS_NONE
block|}
block|}
struct|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|capabilities
index|[
name|i
index|]
operator|.
name|name
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|displayArgs
operator|.
name|contains
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|capabilities
index|[
name|i
index|]
operator|.
name|name
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|description
operator|.
name|caps
operator||=
name|capabilities
index|[
name|i
index|]
operator|.
name|cap
expr_stmt|;
block|}
if|if
condition|(
name|forcePremultiplied
condition|)
block|{
name|description
operator|.
name|caps
operator||=
name|DSCAPS_PREMULTIPLIED
expr_stmt|;
block|}
comment|// We don't track the primary surface as it's released in disconnect
name|d_ptr
operator|->
name|primarySurface
operator|=
name|createDFBSurface
argument_list|(
name|description
argument_list|,
name|DontTrackSurface
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d_ptr
operator|->
name|primarySurface
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen: error creating primary surface"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|surface
operator|=
name|d_ptr
operator|->
name|primarySurface
expr_stmt|;
else|#
directive|else
name|description
operator|.
name|flags
operator|=
name|DSDESC_WIDTH
operator||
name|DSDESC_HEIGHT
expr_stmt|;
name|description
operator|.
name|width
operator|=
name|description
operator|.
name|height
operator|=
literal|1
expr_stmt|;
name|surface
operator|=
name|createDFBSurface
argument_list|(
name|description
argument_list|,
name|DontTrackSurface
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|surface
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen: error creating surface"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
endif|#
directive|endif
comment|// Work out what format we're going to use for surfaces with an alpha channel
name|QImage
operator|::
name|Format
name|pixelFormat
init|=
name|QDirectFBScreen
operator|::
name|getImageFormat
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|d_ptr
operator|->
name|alphaPixmapFormat
operator|=
name|pixelFormat
expr_stmt|;
switch|switch
condition|(
name|pixelFormat
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_RGB666
case|:
name|d_ptr
operator|->
name|alphaPixmapFormat
operator|=
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB444
case|:
name|d_ptr
operator|->
name|alphaPixmapFormat
operator|=
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
name|pixelFormat
operator|=
name|d_ptr
operator|->
name|alphaPixmapFormat
operator|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
comment|// ### Format_RGB32 doesn't work so well with Qt. Force ARGB32 for windows/pixmaps
break|break;
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
name|qWarning
argument_list|(
literal|"QDirectFBScreen::connect(). Qt/DirectFB does not work with the LUT8  pixelformat."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
name|QImage
operator|::
name|NImageFormats
case|:
case|case
name|QImage
operator|::
name|Format_Invalid
case|:
case|case
name|QImage
operator|::
name|Format_Mono
case|:
case|case
name|QImage
operator|::
name|Format_MonoLSB
case|:
case|case
name|QImage
operator|::
name|Format_RGB888
case|:
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
case|case
name|QImage
operator|::
name|Format_RGB555
case|:
name|d_ptr
operator|->
name|alphaPixmapFormat
operator|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
if|if
condition|(
name|forcePremultiplied
condition|)
name|d_ptr
operator|->
name|alphaPixmapFormat
operator|=
name|pixelFormat
operator|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
case|:
comment|// works already
break|break;
block|}
name|setPixelFormat
argument_list|(
name|pixelFormat
argument_list|)
expr_stmt|;
name|QScreen
operator|::
name|d
operator|=
name|QDirectFBScreen
operator|::
name|depth
argument_list|(
name|pixelFormat
argument_list|)
expr_stmt|;
name|data
operator|=
literal|0
expr_stmt|;
name|lstep
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen::connect: "
literal|"Unable to get screen!"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|QString
name|qws_size
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qgetenv
argument_list|(
literal|"QWS_SIZE"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qws_size
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QRegExp
name|rx
argument_list|(
name|QLatin1String
argument_list|(
literal|"(\\d+)x(\\d+)"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rx
operator|.
name|exactMatch
argument_list|(
name|qws_size
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBScreen::connect: Can't parse QWS_SIZE=\"%s\""
argument_list|,
name|qPrintable
argument_list|(
name|qws_size
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
modifier|*
name|ints
index|[
literal|2
index|]
init|=
block|{
operator|&
name|w
block|,
operator|&
name|h
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
operator|*
name|ints
index|[
name|i
index|]
operator|=
name|rx
operator|.
name|cap
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
operator|*
name|ints
index|[
name|i
index|]
operator|<=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBScreen::connect: %s is not a positive integer"
argument_list|,
name|qPrintable
argument_list|(
name|rx
operator|.
name|cap
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|=
name|h
operator|=
literal|0
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|setIntOption
argument_list|(
name|displayArgs
argument_list|,
name|QLatin1String
argument_list|(
literal|"width"
argument_list|)
argument_list|,
operator|&
name|w
argument_list|)
expr_stmt|;
name|setIntOption
argument_list|(
name|displayArgs
argument_list|,
name|QLatin1String
argument_list|(
literal|"height"
argument_list|)
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_LAYER
name|int
name|layerId
init|=
name|DLID_PRIMARY
decl_stmt|;
name|setIntOption
argument_list|(
name|displayArgs
argument_list|,
name|QLatin1String
argument_list|(
literal|"layerid"
argument_list|)
argument_list|,
operator|&
name|layerId
argument_list|)
expr_stmt|;
name|result
operator|=
name|d_ptr
operator|->
name|dfb
operator|->
name|GetDisplayLayer
argument_list|(
name|d_ptr
operator|->
name|dfb
argument_list|,
cast|static_cast
argument_list|<
name|DFBDisplayLayerID
argument_list|>
argument_list|(
name|layerId
argument_list|)
argument_list|,
operator|&
name|d_ptr
operator|->
name|dfbLayer
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen::connect: "
literal|"Unable to get display layer!"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|result
operator|=
name|d_ptr
operator|->
name|dfbLayer
operator|->
name|GetScreen
argument_list|(
name|d_ptr
operator|->
name|dfbLayer
argument_list|,
operator|&
name|d_ptr
operator|->
name|dfbScreen
argument_list|)
expr_stmt|;
else|#
directive|else
name|result
operator|=
name|d_ptr
operator|->
name|dfb
operator|->
name|GetScreen
argument_list|(
name|d_ptr
operator|->
name|dfb
argument_list|,
literal|0
argument_list|,
operator|&
name|d_ptr
operator|->
name|dfbScreen
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
name|result
operator|=
name|d_ptr
operator|->
name|primarySurface
operator|->
name|GetSize
argument_list|(
name|d_ptr
operator|->
name|primarySurface
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
elif|#
directive|elif
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
name|IDirectFBSurface
modifier|*
name|layerSurface
decl_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|dfbLayer
operator|->
name|GetSurface
argument_list|(
name|d_ptr
operator|->
name|dfbLayer
argument_list|,
operator|&
name|layerSurface
argument_list|)
operator|==
name|DFB_OK
condition|)
block|{
name|result
operator|=
name|layerSurface
operator|->
name|GetSize
argument_list|(
name|layerSurface
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|layerSurface
operator|->
name|Release
argument_list|(
name|layerSurface
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|w
operator|<=
literal|0
operator|||
name|h
operator|<=
literal|0
condition|)
block|{
name|result
operator|=
name|d_ptr
operator|->
name|dfbScreen
operator|->
name|GetSize
argument_list|(
name|d_ptr
operator|->
name|dfbScreen
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|qWarning
argument_list|(
literal|"QDirectFBScreen::connect: DirectFB versions prior to 1.0 do not offer a way\n"
literal|"query the size of the primary surface in windowed mode. You have to specify\n"
literal|"the size of the display using QWS_SIZE=[0-9]x[0-9] or\n"
literal|"QWS_DISPLAY=directfb:width=[0-9]:height=[0-9]"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
endif|#
directive|endif
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen::connect: "
literal|"Unable to get screen size!"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|dw
operator|=
name|w
expr_stmt|;
name|dh
operator|=
name|h
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|dw
operator|!=
literal|0
operator|&&
name|dh
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|physWidth
operator|=
name|physHeight
operator|=
operator|-
literal|1
expr_stmt|;
name|setIntOption
argument_list|(
name|displayArgs
argument_list|,
name|QLatin1String
argument_list|(
literal|"mmWidth"
argument_list|)
argument_list|,
operator|&
name|physWidth
argument_list|)
expr_stmt|;
name|setIntOption
argument_list|(
name|displayArgs
argument_list|,
name|QLatin1String
argument_list|(
literal|"mmHeight"
argument_list|)
argument_list|,
operator|&
name|physHeight
argument_list|)
expr_stmt|;
specifier|const
name|int
name|dpi
init|=
literal|72
decl_stmt|;
if|if
condition|(
name|physWidth
operator|<
literal|0
condition|)
name|physWidth
operator|=
name|qRound
argument_list|(
name|dw
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
if|if
condition|(
name|physHeight
operator|<
literal|0
condition|)
name|physHeight
operator|=
name|qRound
argument_list|(
name|dh
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
name|setGraphicsSystem
argument_list|(
name|d_ptr
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x000923
operator|)
if|if
condition|(
name|displayArgs
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"debug"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|printDirectFBInfo
argument_list|(
name|d_ptr
operator|->
name|dfb
argument_list|,
name|surface
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WM
name|surface
operator|->
name|Release
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|QColor
name|backgroundColor
decl_stmt|;
else|#
directive|else
name|QColor
modifier|&
name|backgroundColor
init|=
name|d_ptr
operator|->
name|backgroundColor
decl_stmt|;
endif|#
directive|endif
name|QRegExp
name|backgroundColorRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|"bgcolor=(.+)"
argument_list|)
argument_list|)
decl_stmt|;
name|backgroundColorRegExp
operator|.
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
if|if
condition|(
name|displayArgs
operator|.
name|indexOf
argument_list|(
name|backgroundColorRegExp
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|backgroundColor
operator|=
name|colorFromName
argument_list|(
name|backgroundColorRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
if|if
condition|(
operator|!
name|backgroundColor
operator|.
name|isValid
argument_list|()
condition|)
name|backgroundColor
operator|=
name|Qt
operator|::
name|green
expr_stmt|;
name|d_ptr
operator|->
name|primarySurface
operator|->
name|Clear
argument_list|(
name|d_ptr
operator|->
name|primarySurface
argument_list|,
name|backgroundColor
operator|.
name|red
argument_list|()
argument_list|,
name|backgroundColor
operator|.
name|green
argument_list|()
argument_list|,
name|backgroundColor
operator|.
name|blue
argument_list|()
argument_list|,
name|backgroundColor
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|primarySurface
operator|->
name|Flip
argument_list|(
name|d_ptr
operator|->
name|primarySurface
argument_list|,
literal|0
argument_list|,
name|d_ptr
operator|->
name|flipFlags
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|backgroundColor
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|DFBResult
name|result
init|=
name|d_ptr
operator|->
name|dfbLayer
operator|->
name|SetCooperativeLevel
argument_list|(
name|d_ptr
operator|->
name|dfbLayer
argument_list|,
name|DLSCL_ADMINISTRATIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen::connect "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|d_ptr
operator|->
name|dfbLayer
operator|->
name|SetBackgroundColor
argument_list|(
name|d_ptr
operator|->
name|dfbLayer
argument_list|,
name|backgroundColor
operator|.
name|red
argument_list|()
argument_list|,
name|backgroundColor
operator|.
name|green
argument_list|()
argument_list|,
name|backgroundColor
operator|.
name|blue
argument_list|()
argument_list|,
name|backgroundColor
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::connect: "
literal|"Unable to set background color"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|d_ptr
operator|->
name|dfbLayer
operator|->
name|SetBackgroundMode
argument_list|(
name|d_ptr
operator|->
name|dfbLayer
argument_list|,
name|DLBM_COLOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::connect: "
literal|"Unable to set background mode"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|d_ptr
operator|->
name|dfbLayer
operator|->
name|SetCooperativeLevel
argument_list|(
name|d_ptr
operator|->
name|dfbLayer
argument_list|,
name|DLSCL_SHARED
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen::connect "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|disconnect
name|void
name|QDirectFBScreen
operator|::
name|disconnect
parameter_list|()
block|{
if|#
directive|if
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
if|if
condition|(
name|d_ptr
operator|->
name|imageProvider
condition|)
name|d_ptr
operator|->
name|imageProvider
operator|->
name|Release
argument_list|(
name|d_ptr
operator|->
name|imageProvider
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
name|d_ptr
operator|->
name|primarySurface
operator|->
name|Release
argument_list|(
name|d_ptr
operator|->
name|primarySurface
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|primarySurface
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
foreach|foreach
control|(
name|IDirectFBSurface
modifier|*
name|surf
decl|,
name|d_ptr
operator|->
name|allocatedSurfaces
control|)
name|surf
operator|->
name|Release
argument_list|(
name|surf
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|allocatedSurfaces
operator|.
name|clear
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_LAYER
name|d_ptr
operator|->
name|dfbLayer
operator|->
name|Release
argument_list|(
name|d_ptr
operator|->
name|dfbLayer
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|dfbLayer
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|d_ptr
operator|->
name|dfbScreen
operator|->
name|Release
argument_list|(
name|d_ptr
operator|->
name|dfbScreen
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|dfbScreen
operator|=
literal|0
expr_stmt|;
name|d_ptr
operator|->
name|dfb
operator|->
name|Release
argument_list|(
name|d_ptr
operator|->
name|dfb
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|dfb
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initDevice
name|bool
name|QDirectFBScreen
operator|::
name|initDevice
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_MOUSE
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QWS_MOUSE_PROTO"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWSServer
operator|::
name|instance
argument_list|()
operator|->
name|setDefaultMouse
argument_list|(
literal|"None"
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|mouse
operator|=
operator|new
name|QDirectFBMouseHandler
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_KEYBOARD
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QWS_KEYBOARD"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWSServer
operator|::
name|instance
argument_list|()
operator|->
name|setDefaultKeyboard
argument_list|(
literal|"None"
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|keyboard
operator|=
operator|new
name|QDirectFBKeyboardHandler
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_DIRECTFB_CURSOR
name|qt_screencursor
operator|=
operator|new
name|QDirectFBScreenCursor
expr_stmt|;
elif|#
directive|elif
operator|!
name|defined
name|QT_NO_QWS_CURSOR
name|QScreenCursor
operator|::
name|initSoftwareCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|shutdownDevice
name|void
name|QDirectFBScreen
operator|::
name|shutdownDevice
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_MOUSE
operator|delete
name|d_ptr
operator|->
name|mouse
expr_stmt|;
name|d_ptr
operator|->
name|mouse
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_KEYBOARD
operator|delete
name|d_ptr
operator|->
name|keyboard
expr_stmt|;
name|d_ptr
operator|->
name|keyboard
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
operator|delete
name|qt_screencursor
expr_stmt|;
name|qt_screencursor
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setMode
name|void
name|QDirectFBScreen
operator|::
name|setMode
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|d_ptr
operator|->
name|dfb
operator|->
name|SetVideoMode
argument_list|(
name|d_ptr
operator|->
name|dfb
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blank
name|void
name|QDirectFBScreen
operator|::
name|blank
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|d_ptr
operator|->
name|dfbScreen
operator|->
name|SetPowerMode
argument_list|(
name|d_ptr
operator|->
name|dfbScreen
argument_list|,
operator|(
name|on
condition|?
name|DSPM_ON
else|:
name|DSPM_SUSPEND
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createSurface
name|QWSWindowSurface
modifier|*
name|QDirectFBScreen
operator|::
name|createSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
if|if
condition|(
name|QApplication
operator|::
name|type
argument_list|()
operator|==
name|QApplication
operator|::
name|GuiServer
condition|)
block|{
return|return
operator|new
name|QDirectFBWindowSurface
argument_list|(
name|d_ptr
operator|->
name|flipFlags
argument_list|,
cast|const_cast
argument_list|<
name|QDirectFBScreen
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|,
name|widget
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|QScreen
operator|::
name|createSurface
argument_list|(
name|widget
argument_list|)
return|;
block|}
else|#
directive|else
return|return
operator|new
name|QDirectFBWindowSurface
argument_list|(
name|d_ptr
operator|->
name|flipFlags
argument_list|,
cast|const_cast
argument_list|<
name|QDirectFBScreen
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|,
name|widget
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|createSurface
name|QWSWindowSurface
modifier|*
name|QDirectFBScreen
operator|::
name|createSurface
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"directfb"
argument_list|)
condition|)
block|{
return|return
operator|new
name|QDirectFBWindowSurface
argument_list|(
name|d_ptr
operator|->
name|flipFlags
argument_list|,
cast|const_cast
argument_list|<
name|QDirectFBScreen
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
return|return
name|QScreen
operator|::
name|createSurface
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
name|QT_NO_DIRECTFB_WM
end_if
begin_struct
DECL|struct|PaintCommand
struct|struct
name|PaintCommand
block|{
DECL|function|PaintCommand
name|PaintCommand
parameter_list|()
member_init_list|:
name|dfbSurface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|windowOpacity
argument_list|(
literal|255
argument_list|)
member_init_list|,
name|blittingFlags
argument_list|(
name|DSBLIT_NOFX
argument_list|)
block|{}
DECL|member|dfbSurface
name|IDirectFBSurface
modifier|*
name|dfbSurface
decl_stmt|;
DECL|member|image
name|QImage
name|image
decl_stmt|;
DECL|member|windowPosition
name|QPoint
name|windowPosition
decl_stmt|;
DECL|member|source
name|QRegion
name|source
decl_stmt|;
DECL|member|windowOpacity
name|quint8
name|windowOpacity
decl_stmt|;
DECL|member|blittingFlags
name|DFBSurfaceBlittingFlags
name|blittingFlags
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|initParameters
specifier|static
specifier|inline
name|void
name|initParameters
parameter_list|(
name|DFBRectangle
modifier|&
name|source
parameter_list|,
specifier|const
name|QRect
modifier|&
name|sourceGlobal
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|source
operator|.
name|x
operator|=
name|sourceGlobal
operator|.
name|x
argument_list|()
operator|-
name|pos
operator|.
name|x
argument_list|()
expr_stmt|;
name|source
operator|.
name|y
operator|=
name|sourceGlobal
operator|.
name|y
argument_list|()
operator|-
name|pos
operator|.
name|y
argument_list|()
expr_stmt|;
name|source
operator|.
name|w
operator|=
name|sourceGlobal
operator|.
name|width
argument_list|()
expr_stmt|;
name|source
operator|.
name|h
operator|=
name|sourceGlobal
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|exposeRegion
name|void
name|QDirectFBScreen
operator|::
name|exposeRegion
parameter_list|(
name|QRegion
name|r
parameter_list|,
name|int
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
name|QT_NO_DIRECTFB_WM
name|r
operator|&=
name|region
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|r
operator|=
name|r
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
name|IDirectFBSurface
modifier|*
name|primary
init|=
name|d_ptr
operator|->
name|primarySurface
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QWSWindow
modifier|*
argument_list|>
name|windows
init|=
name|QWSServer
operator|::
name|instance
argument_list|()
operator|->
name|clientWindows
argument_list|()
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|PaintCommand
argument_list|,
literal|4
argument_list|>
name|commands
argument_list|(
name|windows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QRegion
name|region
init|=
name|r
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|windows
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWSWindowSurface
modifier|*
name|surface
init|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|windowSurface
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|surface
condition|)
continue|continue;
specifier|const
name|QRect
name|windowGeometry
init|=
name|surface
operator|->
name|geometry
argument_list|()
decl_stmt|;
specifier|const
name|QRegion
name|intersection
init|=
name|region
operator|&
name|windowGeometry
decl_stmt|;
if|if
condition|(
name|intersection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|PaintCommand
modifier|&
name|cmd
init|=
name|commands
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|surface
operator|->
name|key
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"directfb"
argument_list|)
condition|)
block|{
specifier|const
name|QDirectFBWindowSurface
modifier|*
name|ws
init|=
cast|static_cast
argument_list|<
name|QDirectFBWindowSurface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|dfbSurface
operator|=
name|ws
operator|->
name|directFBSurface
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|cmd
operator|.
name|dfbSurface
condition|)
block|{
continue|continue;
block|}
block|}
else|else
block|{
name|cmd
operator|.
name|image
operator|=
name|surface
operator|->
name|image
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
operator|++
name|idx
expr_stmt|;
name|cmd
operator|.
name|windowPosition
operator|=
name|windowGeometry
operator|.
name|topLeft
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|source
operator|=
name|intersection
expr_stmt|;
if|if
condition|(
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isOpaque
argument_list|()
condition|)
block|{
name|region
operator|-=
name|intersection
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
block|}
else|else
block|{
name|cmd
operator|.
name|windowOpacity
operator|=
name|windows
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|opacity
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|blittingFlags
operator|=
name|cmd
operator|.
name|windowOpacity
operator|==
literal|255
condition|?
name|DSBLIT_BLEND_ALPHACHANNEL
else|:
operator|(
name|DSBLIT_BLEND_ALPHACHANNEL
operator||
name|DSBLIT_BLEND_COLORALPHA
operator|)
expr_stmt|;
block|}
block|}
name|solidFill
argument_list|(
name|d_ptr
operator|->
name|backgroundColor
argument_list|,
name|region
argument_list|)
expr_stmt|;
while|while
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
specifier|const
name|PaintCommand
modifier|&
name|cmd
init|=
name|commands
index|[
operator|--
name|idx
index|]
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|cmd
operator|.
name|dfbSurface
operator|||
operator|!
name|cmd
operator|.
name|image
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|IDirectFBSurface
modifier|*
name|surface
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|dfbSurface
condition|)
block|{
name|surface
operator|=
name|cmd
operator|.
name|dfbSurface
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|cmd
operator|.
name|image
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|DFBResult
name|result
decl_stmt|;
name|surface
operator|=
name|createDFBSurface
argument_list|(
name|cmd
operator|.
name|image
argument_list|,
name|cmd
operator|.
name|image
operator|.
name|format
argument_list|()
argument_list|,
name|DontTrackSurface
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|(
name|result
operator|!=
name|DFB_OK
operator|)
operator|==
operator|!
name|surface
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen::exposeRegion: Can't create surface from image"
argument_list|,
name|result
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|primary
operator|->
name|SetBlittingFlags
argument_list|(
name|primary
argument_list|,
name|cmd
operator|.
name|blittingFlags
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|blittingFlags
operator|&
name|DSBLIT_BLEND_COLORALPHA
condition|)
block|{
name|primary
operator|->
name|SetColor
argument_list|(
name|primary
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
name|cmd
operator|.
name|windowOpacity
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QRegion
modifier|&
name|region
init|=
name|cmd
operator|.
name|source
decl_stmt|;
specifier|const
name|int
name|rectCount
init|=
name|region
operator|.
name|rectCount
argument_list|()
decl_stmt|;
name|DFBRectangle
name|source
decl_stmt|;
if|if
condition|(
name|rectCount
operator|==
literal|1
condition|)
block|{
operator|::
name|initParameters
argument_list|(
name|source
argument_list|,
name|region
operator|.
name|boundingRect
argument_list|()
argument_list|,
name|cmd
operator|.
name|windowPosition
argument_list|)
expr_stmt|;
name|primary
operator|->
name|Blit
argument_list|(
name|primary
argument_list|,
name|surface
argument_list|,
operator|&
name|source
argument_list|,
name|cmd
operator|.
name|windowPosition
operator|.
name|x
argument_list|()
operator|+
name|source
operator|.
name|x
argument_list|,
name|cmd
operator|.
name|windowPosition
operator|.
name|y
argument_list|()
operator|+
name|source
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
block|{
operator|::
name|initParameters
argument_list|(
name|source
argument_list|,
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|cmd
operator|.
name|windowPosition
argument_list|)
expr_stmt|;
name|primary
operator|->
name|Blit
argument_list|(
name|primary
argument_list|,
name|surface
argument_list|,
operator|&
name|source
argument_list|,
name|cmd
operator|.
name|windowPosition
operator|.
name|x
argument_list|()
operator|+
name|source
operator|.
name|x
argument_list|,
name|cmd
operator|.
name|windowPosition
operator|.
name|y
argument_list|()
operator|+
name|source
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|surface
operator|!=
name|cmd
operator|.
name|dfbSurface
condition|)
block|{
name|surface
operator|->
name|Release
argument_list|(
name|surface
argument_list|)
expr_stmt|;
block|}
block|}
name|primary
operator|->
name|SetColor
argument_list|(
name|primary
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
name|QT_NO_DIRECTFB_CURSOR
operator|and
operator|!
name|defined
name|QT_NO_QWS_CURSOR
if|if
condition|(
name|QScreenCursor
modifier|*
name|cursor
init|=
name|QScreenCursor
operator|::
name|instance
argument_list|()
condition|)
block|{
specifier|const
name|QRect
name|cursorRectangle
init|=
name|cursor
operator|->
name|boundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|cursor
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
name|cursor
operator|->
name|isAccelerated
argument_list|()
operator|&&
name|r
operator|.
name|intersects
argument_list|(
name|cursorRectangle
argument_list|)
condition|)
block|{
specifier|const
name|QImage
name|image
init|=
name|cursor
operator|->
name|image
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|cacheKey
argument_list|()
operator|!=
name|d_ptr
operator|->
name|cursorImageKey
condition|)
block|{
if|if
condition|(
name|d_ptr
operator|->
name|cursorSurface
condition|)
block|{
name|releaseDFBSurface
argument_list|(
name|d_ptr
operator|->
name|cursorSurface
argument_list|)
expr_stmt|;
block|}
name|d_ptr
operator|->
name|cursorSurface
operator|=
name|createDFBSurface
argument_list|(
name|image
argument_list|,
name|image
operator|.
name|format
argument_list|()
argument_list|,
name|QDirectFBScreen
operator|::
name|TrackSurface
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|cursorImageKey
operator|=
name|image
operator|.
name|cacheKey
argument_list|()
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|d_ptr
operator|->
name|cursorSurface
argument_list|)
expr_stmt|;
name|primary
operator|->
name|SetBlittingFlags
argument_list|(
name|primary
argument_list|,
name|DSBLIT_BLEND_ALPHACHANNEL
argument_list|)
expr_stmt|;
name|primary
operator|->
name|Blit
argument_list|(
name|primary
argument_list|,
name|d_ptr
operator|->
name|cursorSurface
argument_list|,
literal|0
argument_list|,
name|cursorRectangle
operator|.
name|x
argument_list|()
argument_list|,
name|cursorRectangle
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|flipSurface
argument_list|(
name|primary
argument_list|,
name|d_ptr
operator|->
name|flipFlags
argument_list|,
name|r
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|primary
operator|->
name|SetBlittingFlags
argument_list|(
name|primary
argument_list|,
name|DSBLIT_NOFX
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|solidFill
name|void
name|QDirectFBScreen
operator|::
name|solidFill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WM
name|Q_UNUSED
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
else|#
directive|else
name|QDirectFBScreen
operator|::
name|solidFill
argument_list|(
name|d_ptr
operator|->
name|primarySurface
argument_list|,
name|color
argument_list|,
name|region
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|clearRect
specifier|static
specifier|inline
name|void
name|clearRect
parameter_list|(
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|surface
argument_list|)
expr_stmt|;
specifier|const
name|DFBRegion
name|region
init|=
block|{
name|rect
operator|.
name|left
argument_list|()
block|,
name|rect
operator|.
name|top
argument_list|()
block|,
name|rect
operator|.
name|right
argument_list|()
block|,
name|rect
operator|.
name|bottom
argument_list|()
block|}
decl_stmt|;
comment|// could just reinterpret_cast this to a DFBRegion
name|surface
operator|->
name|SetClip
argument_list|(
name|surface
argument_list|,
operator|&
name|region
argument_list|)
expr_stmt|;
name|surface
operator|->
name|Clear
argument_list|(
name|surface
argument_list|,
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|,
name|color
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|solidFill
name|void
name|QDirectFBScreen
operator|::
name|solidFill
parameter_list|(
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
specifier|const
name|int
name|n
init|=
name|region
operator|.
name|rectCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|1
condition|)
block|{
name|clearRect
argument_list|(
name|surface
argument_list|,
name|color
argument_list|,
name|region
operator|.
name|boundingRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|clearRect
argument_list|(
name|surface
argument_list|,
name|color
argument_list|,
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|surface
operator|->
name|SetClip
argument_list|(
name|surface
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|alphaPixmapFormat
name|QImage
operator|::
name|Format
name|QDirectFBScreen
operator|::
name|alphaPixmapFormat
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|alphaPixmapFormat
return|;
block|}
end_function
begin_function
DECL|function|initSurfaceDescriptionPixelFormat
name|bool
name|QDirectFBScreen
operator|::
name|initSurfaceDescriptionPixelFormat
parameter_list|(
name|DFBSurfaceDescription
modifier|*
name|description
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
specifier|const
name|DFBSurfacePixelFormat
name|pixelformat
init|=
name|QDirectFBScreen
operator|::
name|getSurfacePixelFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixelformat
operator|==
name|DSPF_UNKNOWN
condition|)
return|return
literal|false
return|;
name|description
operator|->
name|flags
operator||=
name|DSDESC_PIXELFORMAT
expr_stmt|;
name|description
operator|->
name|pixelformat
operator|=
name|pixelformat
expr_stmt|;
if|if
condition|(
name|QDirectFBScreen
operator|::
name|isPremultiplied
argument_list|(
name|format
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|description
operator|->
name|flags
operator|&
name|DSDESC_CAPS
operator|)
condition|)
block|{
name|description
operator|->
name|caps
operator|=
name|DSCAPS_PREMULTIPLIED
expr_stmt|;
name|description
operator|->
name|flags
operator||=
name|DSDESC_CAPS
expr_stmt|;
block|}
else|else
block|{
name|description
operator|->
name|caps
operator||=
name|DSCAPS_PREMULTIPLIED
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|lockSurface
name|uchar
modifier|*
name|QDirectFBScreen
operator|::
name|lockSurface
parameter_list|(
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|,
name|DFBSurfaceLockFlags
name|flags
parameter_list|,
name|int
modifier|*
name|bpl
parameter_list|)
block|{
name|void
modifier|*
name|mem
init|=
literal|0
decl_stmt|;
specifier|const
name|DFBResult
name|result
init|=
name|surface
operator|->
name|Lock
argument_list|(
name|surface
argument_list|,
name|flags
argument_list|,
operator|&
name|mem
argument_list|,
name|bpl
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen::lockSurface()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|mem
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isFullUpdate
specifier|static
specifier|inline
name|bool
name|isFullUpdate
parameter_list|(
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|==
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|&&
name|region
operator|.
name|rectCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QSize
name|size
decl_stmt|;
name|surface
operator|->
name|GetSize
argument_list|(
name|surface
argument_list|,
operator|&
name|size
operator|.
name|rwidth
argument_list|()
argument_list|,
operator|&
name|size
operator|.
name|rheight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|.
name|boundingRect
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|size
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|flipSurface
name|void
name|QDirectFBScreen
operator|::
name|flipSurface
parameter_list|(
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|,
name|DFBSurfaceFlipFlags
name|flipFlags
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
if|if
condition|(
name|d_ptr
operator|->
name|directFBFlags
operator|&
name|NoPartialFlip
operator|||
operator|(
operator|!
operator|(
name|flipFlags
operator|&
name|DSFLIP_BLIT
operator|)
operator|&&
name|QT_PREPEND_NAMESPACE
argument_list|(
name|isFullUpdate
argument_list|(
name|surface
argument_list|,
name|region
argument_list|,
name|offset
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|surface
operator|->
name|Flip
argument_list|(
name|surface
argument_list|,
literal|0
argument_list|,
name|flipFlags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|d_ptr
operator|->
name|directFBFlags
operator|&
name|BoundingRectFlip
operator|)
operator|&&
name|region
operator|.
name|rectCount
argument_list|()
operator|>
literal|1
condition|)
block|{
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|DFBSurfaceFlipFlags
name|nonWaitFlags
init|=
name|flipFlags
operator|&
operator|~
name|DSFLIP_WAIT
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
modifier|&
name|r
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|DFBRegion
name|dfbReg
init|=
block|{
name|r
operator|.
name|x
argument_list|()
operator|+
name|offset
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
block|,
name|r
operator|.
name|right
argument_list|()
operator|+
name|offset
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|bottom
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
block|}
decl_stmt|;
name|surface
operator|->
name|Flip
argument_list|(
name|surface
argument_list|,
operator|&
name|dfbReg
argument_list|,
name|i
operator|+
literal|1
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|?
name|nonWaitFlags
else|:
name|flipFlags
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|QRect
name|r
init|=
name|region
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
specifier|const
name|DFBRegion
name|dfbReg
init|=
block|{
name|r
operator|.
name|x
argument_list|()
operator|+
name|offset
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
block|,
name|r
operator|.
name|right
argument_list|()
operator|+
name|offset
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|bottom
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
block|}
decl_stmt|;
name|surface
operator|->
name|Flip
argument_list|(
name|surface
argument_list|,
operator|&
name|dfbReg
argument_list|,
name|flipFlags
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_if
if|#
directive|if
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
end_if
begin_function
DECL|function|setDirectFBImageProvider
name|void
name|QDirectFBScreen
operator|::
name|setDirectFBImageProvider
parameter_list|(
name|IDirectFBImageProvider
modifier|*
name|provider
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|provider
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|imageProvider
condition|)
name|d_ptr
operator|->
name|imageProvider
operator|->
name|Release
argument_list|(
name|d_ptr
operator|->
name|imageProvider
argument_list|)
expr_stmt|;
name|d_ptr
operator|->
name|imageProvider
operator|=
name|provider
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|waitIdle
name|void
name|QDirectFBScreen
operator|::
name|waitIdle
parameter_list|()
block|{
name|d_ptr
operator|->
name|dfb
operator|->
name|WaitIdle
argument_list|(
name|d_ptr
operator|->
name|dfb
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WM
end_ifdef
begin_function
DECL|function|windowForWidget
name|IDirectFBWindow
modifier|*
name|QDirectFBScreen
operator|::
name|windowForWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|widget
condition|)
block|{
specifier|const
name|QWSWindowSurface
modifier|*
name|surface
init|=
cast|static_cast
argument_list|<
specifier|const
name|QWSWindowSurface
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|windowSurface
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|surface
operator|&&
name|surface
operator|->
name|key
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"directfb"
argument_list|)
condition|)
block|{
return|return
cast|static_cast
argument_list|<
specifier|const
name|QDirectFBWindowSurface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
operator|->
name|directFBWindow
argument_list|()
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|surfaceForWidget
name|IDirectFBSurface
modifier|*
name|QDirectFBScreen
operator|::
name|surfaceForWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QRect
modifier|*
name|rect
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|isVisible
argument_list|()
operator|||
name|widget
operator|->
name|size
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|0
return|;
specifier|const
name|QWSWindowSurface
modifier|*
name|surface
init|=
cast|static_cast
argument_list|<
specifier|const
name|QWSWindowSurface
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|windowSurface
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|surface
operator|&&
name|surface
operator|->
name|key
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"directfb"
argument_list|)
condition|)
block|{
return|return
cast|static_cast
argument_list|<
specifier|const
name|QDirectFBWindowSurface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
operator|->
name|surfaceForWidget
argument_list|(
name|widget
argument_list|,
name|rect
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
end_ifdef
begin_function
DECL|function|subSurfaceForWidget
name|IDirectFBSurface
modifier|*
name|QDirectFBScreen
operator|::
name|subSurfaceForWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRect
modifier|&
name|area
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QRect
name|rect
decl_stmt|;
name|IDirectFBSurface
modifier|*
name|surface
init|=
name|surfaceForWidget
argument_list|(
name|widget
argument_list|,
operator|&
name|rect
argument_list|)
decl_stmt|;
name|IDirectFBSurface
modifier|*
name|subSurface
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|surface
condition|)
block|{
if|if
condition|(
operator|!
name|area
operator|.
name|isNull
argument_list|()
condition|)
name|rect
operator|&=
name|area
operator|.
name|translated
argument_list|(
name|widget
operator|->
name|mapTo
argument_list|(
name|widget
operator|->
name|window
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|DFBRectangle
name|subRect
init|=
block|{
name|rect
operator|.
name|x
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
specifier|const
name|DFBResult
name|result
init|=
name|surface
operator|->
name|GetSubSurface
argument_list|(
name|surface
argument_list|,
operator|&
name|subRect
argument_list|,
operator|&
name|subSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen::subSurface(): Can't get sub surface"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|subSurface
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qt_directfb_surface_for_widget
name|Q_GUI_EXPORT
name|IDirectFBSurface
modifier|*
name|qt_directfb_surface_for_widget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QRect
modifier|*
name|rect
parameter_list|)
block|{
return|return
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
condition|?
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|surfaceForWidget
argument_list|(
name|widget
argument_list|,
name|rect
argument_list|)
else|:
literal|0
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
end_ifdef
begin_function
DECL|function|qt_directfb_subsurface_for_widget
name|Q_GUI_EXPORT
name|IDirectFBSurface
modifier|*
name|qt_directfb_subsurface_for_widget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRect
modifier|&
name|area
parameter_list|)
block|{
return|return
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
condition|?
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|subSurfaceForWidget
argument_list|(
name|widget
argument_list|,
name|area
argument_list|)
else|:
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WM
end_ifdef
begin_function
DECL|function|qt_directfb_window_for_widget
name|Q_GUI_EXPORT
name|IDirectFBWindow
modifier|*
name|qt_directfb_window_for_widget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
return|return
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
condition|?
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|windowForWidget
argument_list|(
name|widget
argument_list|)
else|:
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qdirectfbscreen.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DIRECTFB
end_comment
end_unit
