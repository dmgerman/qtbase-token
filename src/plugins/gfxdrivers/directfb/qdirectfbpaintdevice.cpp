begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbscreen.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbpaintdevice.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbpaintengine.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_DIRECTFB
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QDirectFBPaintDevice
name|QDirectFBPaintDevice
operator|::
name|QDirectFBPaintDevice
parameter_list|(
name|QDirectFBScreen
modifier|*
name|scr
parameter_list|)
member_init_list|:
name|QCustomRasterPaintDevice
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dfbSurface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|screen
argument_list|(
name|scr
argument_list|)
member_init_list|,
name|bpl
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|lockFlgs
argument_list|(
name|DFBSurfaceLockFlags
argument_list|(
literal|0
argument_list|)
argument_list|)
member_init_list|,
name|mem
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|engine
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|imageFormat
argument_list|(
name|QImage
operator|::
name|Format_Invalid
argument_list|)
block|{
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
name|subSurface
operator|=
literal|0
expr_stmt|;
name|syncPending
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFBPaintDevice
name|QDirectFBPaintDevice
operator|::
name|~
name|QDirectFBPaintDevice
parameter_list|()
block|{
if|if
condition|(
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
condition|)
block|{
name|unlockSurface
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
name|releaseSubSurface
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|dfbSurface
condition|)
block|{
name|screen
operator|->
name|releaseDFBSurface
argument_list|(
name|dfbSurface
argument_list|)
expr_stmt|;
block|}
block|}
operator|delete
name|engine
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|directFBSurface
name|IDirectFBSurface
modifier|*
name|QDirectFBPaintDevice
operator|::
name|directFBSurface
parameter_list|()
specifier|const
block|{
return|return
name|dfbSurface
return|;
block|}
end_function
begin_function
DECL|function|lockSurface
name|bool
name|QDirectFBPaintDevice
operator|::
name|lockSurface
parameter_list|(
name|DFBSurfaceLockFlags
name|lockFlags
parameter_list|)
block|{
if|if
condition|(
name|lockFlgs
operator|&&
operator|(
name|lockFlags
operator|&
operator|~
name|lockFlgs
operator|)
condition|)
name|unlockSurface
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|mem
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|dfbSurface
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
if|if
condition|(
operator|!
name|subSurface
condition|)
block|{
name|DFBResult
name|result
decl_stmt|;
name|subSurface
operator|=
name|screen
operator|->
name|getSubSurface
argument_list|(
name|dfbSurface
argument_list|,
name|QRect
argument_list|()
argument_list|,
name|QDirectFBScreen
operator|::
name|TrackSurface
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
operator|||
operator|!
name|subSurface
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"Couldn't create sub surface"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|IDirectFBSurface
modifier|*
name|surface
init|=
name|subSurface
decl_stmt|;
else|#
directive|else
name|IDirectFBSurface
modifier|*
name|surface
init|=
name|dfbSurface
decl_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|mem
operator|=
name|QDirectFBScreen
operator|::
name|lockSurface
argument_list|(
name|surface
argument_list|,
name|lockFlags
argument_list|,
operator|&
name|bpl
argument_list|)
expr_stmt|;
name|lockFlgs
operator|=
name|lockFlags
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|mem
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|bpl
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|s
init|=
name|size
argument_list|()
decl_stmt|;
name|lockedImage
operator|=
name|QImage
argument_list|(
name|mem
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|,
name|bpl
argument_list|,
name|QDirectFBScreen
operator|::
name|getImageFormat
argument_list|(
name|dfbSurface
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
if|if
condition|(
name|syncPending
condition|)
block|{
name|syncPending
operator|=
literal|false
expr_stmt|;
name|screen
operator|->
name|waitIdle
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|unlockSurface
name|void
name|QDirectFBPaintDevice
operator|::
name|unlockSurface
parameter_list|()
block|{
if|if
condition|(
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|&&
name|lockFlgs
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
name|IDirectFBSurface
modifier|*
name|surface
init|=
name|subSurface
decl_stmt|;
else|#
directive|else
name|IDirectFBSurface
modifier|*
name|surface
init|=
name|dfbSurface
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|surface
condition|)
block|{
name|surface
operator|->
name|Unlock
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|lockFlgs
operator|=
cast|static_cast
argument_list|<
name|DFBSurfaceLockFlags
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mem
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|memory
name|void
modifier|*
name|QDirectFBPaintDevice
operator|::
name|memory
parameter_list|()
specifier|const
block|{
return|return
name|mem
return|;
block|}
end_function
begin_function
DECL|function|format
name|QImage
operator|::
name|Format
name|QDirectFBPaintDevice
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|imageFormat
return|;
block|}
end_function
begin_function
DECL|function|bytesPerLine
name|int
name|QDirectFBPaintDevice
operator|::
name|bytesPerLine
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|mem
operator|||
name|bpl
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|bpl
return|;
block|}
end_function
begin_function
DECL|function|size
name|QSize
name|QDirectFBPaintDevice
operator|::
name|size
parameter_list|()
specifier|const
block|{
name|int
name|w
decl_stmt|,
name|h
decl_stmt|;
name|dfbSurface
operator|->
name|GetSize
argument_list|(
name|dfbSurface
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
return|return
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QDirectFBPaintDevice
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metric
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|dfbSurface
condition|)
return|return
literal|0
return|;
switch|switch
condition|(
name|metric
condition|)
block|{
case|case
name|QPaintDevice
operator|::
name|PdmWidth
case|:
case|case
name|QPaintDevice
operator|::
name|PdmHeight
case|:
return|return
operator|(
name|metric
operator|==
name|PdmWidth
condition|?
name|size
argument_list|()
operator|.
name|width
argument_list|()
else|:
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|)
return|;
case|case
name|QPaintDevice
operator|::
name|PdmWidthMM
case|:
return|return
operator|(
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|*
literal|1000
operator|)
operator|/
name|dotsPerMeterX
argument_list|()
return|;
case|case
name|QPaintDevice
operator|::
name|PdmHeightMM
case|:
return|return
operator|(
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|*
literal|1000
operator|)
operator|/
name|dotsPerMeterY
argument_list|()
return|;
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiX
case|:
case|case
name|QPaintDevice
operator|::
name|PdmDpiX
case|:
return|return
operator|(
name|dotsPerMeterX
argument_list|()
operator|*
literal|254
operator|)
operator|/
literal|10000
return|;
comment|// 0.0254 meters-per-inch
case|case
name|QPaintDevice
operator|::
name|PdmPhysicalDpiY
case|:
case|case
name|QPaintDevice
operator|::
name|PdmDpiY
case|:
return|return
operator|(
name|dotsPerMeterY
argument_list|()
operator|*
literal|254
operator|)
operator|/
literal|10000
return|;
comment|// 0.0254 meters-per-inch
case|case
name|QPaintDevice
operator|::
name|PdmDepth
case|:
return|return
name|QDirectFBScreen
operator|::
name|depth
argument_list|(
name|imageFormat
argument_list|)
return|;
case|case
name|QPaintDevice
operator|::
name|PdmNumColors
case|:
block|{
if|if
condition|(
operator|!
name|lockedImage
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|lockedImage
operator|.
name|colorCount
argument_list|()
return|;
name|DFBResult
name|result
decl_stmt|;
name|IDirectFBPalette
modifier|*
name|palette
init|=
literal|0
decl_stmt|;
name|unsigned
name|int
name|numColors
init|=
literal|0
decl_stmt|;
name|result
operator|=
name|dfbSurface
operator|->
name|GetPalette
argument_list|(
name|dfbSurface
argument_list|,
operator|&
name|palette
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|result
operator|!=
name|DFB_OK
operator|)
operator|||
operator|!
name|palette
condition|)
return|return
literal|0
return|;
name|result
operator|=
name|palette
operator|->
name|GetSize
argument_list|(
name|palette
argument_list|,
operator|&
name|numColors
argument_list|)
expr_stmt|;
name|palette
operator|->
name|Release
argument_list|(
name|palette
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
return|return
literal|0
return|;
return|return
name|numColors
return|;
block|}
default|default:
name|qCritical
argument_list|(
literal|"QDirectFBPaintDevice::metric(): Unhandled metric!"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QDirectFBPaintDevice
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
return|return
name|engine
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
end_ifdef
begin_function
DECL|function|releaseSubSurface
name|void
name|QDirectFBPaintDevice
operator|::
name|releaseSubSurface
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subSurface
condition|)
block|{
name|unlockSurface
argument_list|()
expr_stmt|;
name|screen
operator|->
name|releaseDFBSurface
argument_list|(
name|subSurface
argument_list|)
expr_stmt|;
name|subSurface
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DIRECTFB
end_comment
end_unit
