begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDIRECTFBSCREEN_H
end_ifndef
begin_define
DECL|macro|QDIRECTFBSCREEN_H
define|#
directive|define
name|QDIRECTFBSCREEN_H
end_define
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_DIRECTFB
end_ifndef
begin_include
include|#
directive|include
file|<QtGui/qscreen_qws.h>
end_include
begin_include
include|#
directive|include
file|<directfb.h>
end_include
begin_include
include|#
directive|include
file|<directfb_version.h>
end_include
begin_function_decl
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
parameter_list|(
name|Gui
parameter_list|)
if|#
directive|if
operator|!
name|defined
name|QT_DIRECTFB_SUBSURFACE
operator|&&
operator|!
name|defined
name|QT_NO_DIRECTFB_SUBSURFACE
DECL|macro|QT_NO_DIRECTFB_SUBSURFACE
define|#
directive|define
name|QT_NO_DIRECTFB_SUBSURFACE
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_NO_DIRECTFB_LAYER
operator|&&
operator|!
name|defined
name|QT_DIRECTFB_LAYER
DECL|macro|QT_DIRECTFB_LAYER
define|#
directive|define
name|QT_DIRECTFB_LAYER
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_NO_DIRECTFB_WM
operator|&&
operator|!
name|defined
name|QT_DIRECTFB_WM
DECL|macro|QT_DIRECTFB_WM
define|#
directive|define
name|QT_DIRECTFB_WM
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_DIRECTFB_IMAGECACHE
operator|&&
operator|!
name|defined
name|QT_NO_DIRECTFB_IMAGECACHE
DECL|macro|QT_NO_DIRECTFB_IMAGECACHE
define|#
directive|define
name|QT_NO_DIRECTFB_IMAGECACHE
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_NO_DIRECTFB_IMAGEPROVIDER
operator|&&
operator|!
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER
DECL|macro|QT_DIRECTFB_IMAGEPROVIDER
define|#
directive|define
name|QT_DIRECTFB_IMAGEPROVIDER
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_NO_DIRECTFB_STRETCHBLIT
operator|&&
operator|!
name|defined
name|QT_DIRECTFB_STRETCHBLIT
DECL|macro|QT_DIRECTFB_STRETCHBLIT
define|#
directive|define
name|QT_DIRECTFB_STRETCHBLIT
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
operator|&&
operator|!
name|defined
name|QT_NO_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
DECL|macro|QT_NO_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
define|#
directive|define
name|QT_NO_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_DIRECTFB_WINDOW_AS_CURSOR
operator|&&
operator|!
name|defined
name|QT_NO_DIRECTFB_WINDOW_AS_CURSOR
DECL|macro|QT_NO_DIRECTFB_WINDOW_AS_CURSOR
define|#
directive|define
name|QT_NO_DIRECTFB_WINDOW_AS_CURSOR
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_DIRECTFB_PALETTE
operator|&&
operator|!
name|defined
name|QT_NO_DIRECTFB_PALETTE
DECL|macro|QT_NO_DIRECTFB_PALETTE
define|#
directive|define
name|QT_NO_DIRECTFB_PALETTE
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_NO_DIRECTFB_PREALLOCATED
operator|&&
operator|!
name|defined
name|QT_DIRECTFB_PREALLOCATED
DECL|macro|QT_DIRECTFB_PREALLOCATED
define|#
directive|define
name|QT_DIRECTFB_PREALLOCATED
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_NO_DIRECTFB_MOUSE
operator|&&
operator|!
name|defined
name|QT_DIRECTFB_MOUSE
DECL|macro|QT_DIRECTFB_MOUSE
define|#
directive|define
name|QT_DIRECTFB_MOUSE
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_NO_DIRECTFB_KEYBOARD
operator|&&
operator|!
name|defined
name|QT_DIRECTFB_KEYBOARD
DECL|macro|QT_DIRECTFB_KEYBOARD
define|#
directive|define
name|QT_DIRECTFB_KEYBOARD
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
name|QT_NO_DIRECTFB_OPAQUE_DETECTION
operator|&&
operator|!
name|defined
name|QT_DIRECTFB_OPAQUE_DETECTION
DECL|macro|QT_DIRECTFB_OPAQUE_DETECTION
define|#
directive|define
name|QT_DIRECTFB_OPAQUE_DETECTION
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
if|#
directive|if
name|defined
name|QT_DIRECTFB_WM
operator|&&
name|defined
name|QT_DIRECTFB_WINDOW_AS_CURSOR
DECL|macro|QT_DIRECTFB_CURSOR
define|#
directive|define
name|QT_DIRECTFB_CURSOR
elif|#
directive|elif
name|defined
name|QT_DIRECTFB_LAYER
define|#
directive|define
name|QT_DIRECTFB_CURSOR
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_DIRECTFB_CURSOR
DECL|macro|QT_NO_DIRECTFB_CURSOR
define|#
directive|define
name|QT_NO_DIRECTFB_CURSOR
endif|#
directive|endif
if|#
directive|if
name|defined
name|QT_NO_DIRECTFB_LAYER
operator|&&
name|defined
name|QT_DIRECTFB_WM
error|#
directive|error
error|QT_NO_DIRECTFB_LAYER requires QT_NO_DIRECTFB_WM
endif|#
directive|endif
if|#
directive|if
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
operator|&&
name|defined
name|QT_NO_DIRECTFB_IMAGEPROVIDER
error|#
directive|error
error|QT_DIRECTFB_IMAGEPROVIDER_KEEPALIVE requires QT_DIRECTFB_IMAGEPROVIDER to be defined
endif|#
directive|endif
if|#
directive|if
name|defined
name|QT_DIRECTFB_WINDOW_AS_CURSOR
operator|&&
name|defined
name|QT_NO_DIRECTFB_WM
error|#
directive|error
error|QT_DIRECTFB_WINDOW_AS_CURSOR requires QT_DIRECTFB_WM to be defined
endif|#
directive|endif
DECL|macro|Q_DIRECTFB_VERSION
define|#
directive|define
name|Q_DIRECTFB_VERSION
value|((DIRECTFB_MAJOR_VERSION<< 16) | (DIRECTFB_MINOR_VERSION<< 8) | DIRECTFB_MICRO_VERSION)
DECL|macro|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
define|#
directive|define
name|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
parameter_list|(
name|F
parameter_list|)
define|\
value|static inline F operator~(F f) { return F(~int(f)); } \     static inline F operator&(F left, F right) { return F(int(left)& int(right)); } \     static inline F operator|(F left, F right) { return F(int(left) | int(right)); } \     static inline F&operator|=(F&left, F right) { left = (left | right); return left; } \     static inline F&operator&=(F&left, F right) { left = (left& right); return left; }
function_decl|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
parameter_list|(
name|DFBInputDeviceCapabilities
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
DECL|variable|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
name|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
name|DFBWindowDescriptionFlags
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|DFBWindowCapabilities
name|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
name|DFBWindowCapabilities
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|DFBWindowOptions
name|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
name|DFBWindowOptions
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|DFBSurfaceDescriptionFlags
name|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
name|DFBSurfaceDescriptionFlags
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|DFBSurfaceCapabilities
name|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
name|DFBSurfaceCapabilities
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|DFBSurfaceLockFlags
name|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
name|DFBSurfaceLockFlags
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|DFBSurfaceBlittingFlags
name|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
name|DFBSurfaceBlittingFlags
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|DFBSurfaceDrawingFlags
name|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
name|DFBSurfaceDrawingFlags
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|DFBSurfaceFlipFlags
name|DIRECTFB_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
name|DFBSurfaceFlipFlags
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|QDirectFBScreenPrivate
name|class
name|QDirectFBScreenPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QDirectFBScreen
range|:
name|public
name|QScreen
block|{
name|public
operator|:
name|QDirectFBScreen
argument_list|(
argument|int display_id
argument_list|)
block|;
operator|~
name|QDirectFBScreen
argument_list|()
block|;      enum
name|DirectFBFlag
block|{
name|NoFlags
operator|=
literal|0x00
block|,
name|VideoOnly
operator|=
literal|0x01
block|,
name|SystemOnly
operator|=
literal|0x02
block|,
name|BoundingRectFlip
operator|=
literal|0x04
block|,
name|NoPartialFlip
operator|=
literal|0x08
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
name|DirectFBFlags
argument_list|,
name|DirectFBFlag
argument_list|)
block|;
name|DirectFBFlags
name|directFBFlags
argument_list|()
specifier|const
block|;
name|bool
name|connect
argument_list|(
specifier|const
name|QString
operator|&
name|displaySpec
argument_list|)
block|;
name|void
name|disconnect
argument_list|()
block|;
name|bool
name|initDevice
argument_list|()
block|;
name|void
name|shutdownDevice
argument_list|()
block|;
name|void
name|exposeRegion
argument_list|(
argument|QRegion r
argument_list|,
argument|int changing
argument_list|)
block|;
name|void
name|solidFill
argument_list|(
specifier|const
name|QColor
operator|&
name|color
argument_list|,
specifier|const
name|QRegion
operator|&
name|region
argument_list|)
block|;
specifier|static
name|void
name|solidFill
argument_list|(
name|IDirectFBSurface
operator|*
name|surface
argument_list|,
specifier|const
name|QColor
operator|&
name|color
argument_list|,
specifier|const
name|QRegion
operator|&
name|region
argument_list|)
block|;
name|void
name|setMode
argument_list|(
argument|int width
argument_list|,
argument|int height
argument_list|,
argument|int depth
argument_list|)
block|;
name|void
name|blank
argument_list|(
argument|bool on
argument_list|)
block|;
name|QWSWindowSurface
operator|*
name|createSurface
argument_list|(
argument|QWidget *widget
argument_list|)
specifier|const
block|;
name|QWSWindowSurface
operator|*
name|createSurface
argument_list|(
argument|const QString&key
argument_list|)
specifier|const
block|;
specifier|static
name|QDirectFBScreen
operator|*
name|instance
argument_list|()
block|;
name|void
name|waitIdle
argument_list|()
block|;
name|IDirectFBSurface
operator|*
name|surfaceForWidget
argument_list|(
argument|const QWidget *widget
argument_list|,
argument|QRect *rect
argument_list|)
specifier|const
block|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
name|IDirectFBSurface
operator|*
name|subSurfaceForWidget
argument_list|(
argument|const QWidget *widget
argument_list|,
argument|const QRect&area = QRect()
argument_list|)
specifier|const
block|;
endif|#
directive|endif
name|IDirectFB
operator|*
name|dfb
argument_list|()
block|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WM
name|IDirectFBWindow
operator|*
name|windowForWidget
argument_list|(
argument|const QWidget *widget
argument_list|)
specifier|const
block|;
else|#
directive|else
name|IDirectFBSurface
operator|*
name|primarySurface
argument_list|()
block|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_LAYER
name|IDirectFBDisplayLayer
operator|*
name|dfbDisplayLayer
argument_list|()
block|;
endif|#
directive|endif
comment|// Track surface creation/release so we can release all on exit
block|enum
name|SurfaceCreationOption
block|{
name|DontTrackSurface
operator|=
literal|0x1
block|,
name|TrackSurface
operator|=
literal|0x2
block|,
name|NoPreallocated
operator|=
literal|0x4
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
name|SurfaceCreationOptions
argument_list|,
name|SurfaceCreationOption
argument_list|)
block|;
name|IDirectFBSurface
operator|*
name|createDFBSurface
argument_list|(
argument|const QImage&image
argument_list|,
argument|QImage::Format format
argument_list|,
argument|SurfaceCreationOptions options
argument_list|,
argument|DFBResult *result =
literal|0
argument_list|)
block|;
name|IDirectFBSurface
operator|*
name|createDFBSurface
argument_list|(
argument|const QSize&size
argument_list|,
argument|QImage::Format format
argument_list|,
argument|SurfaceCreationOptions options
argument_list|,
argument|DFBResult *result =
literal|0
argument_list|)
block|;
name|IDirectFBSurface
operator|*
name|copyDFBSurface
argument_list|(
argument|IDirectFBSurface *src
argument_list|,
argument|QImage::Format format
argument_list|,
argument|SurfaceCreationOptions options
argument_list|,
argument|DFBResult *result =
literal|0
argument_list|)
block|;
name|IDirectFBSurface
operator|*
name|createDFBSurface
argument_list|(
argument|DFBSurfaceDescription desc
argument_list|,
argument|SurfaceCreationOptions options
argument_list|,
argument|DFBResult *result
argument_list|)
block|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
name|IDirectFBSurface
operator|*
name|getSubSurface
argument_list|(
argument|IDirectFBSurface *surface
argument_list|,
argument|const QRect&rect
argument_list|,
argument|SurfaceCreationOptions options
argument_list|,
argument|DFBResult *result
argument_list|)
block|;
endif|#
directive|endif
name|void
name|flipSurface
argument_list|(
argument|IDirectFBSurface *surface
argument_list|,
argument|DFBSurfaceFlipFlags flipFlags
argument_list|,
argument|const QRegion&region
argument_list|,
argument|const QPoint&offset
argument_list|)
block|;
name|void
name|releaseDFBSurface
argument_list|(
name|IDirectFBSurface
operator|*
name|surface
argument_list|)
block|;
name|using
name|QScreen
operator|::
name|depth
block|;
specifier|static
name|int
name|depth
argument_list|(
argument|DFBSurfacePixelFormat format
argument_list|)
block|;
specifier|static
name|int
name|depth
argument_list|(
argument|QImage::Format format
argument_list|)
block|;
specifier|static
name|DFBSurfacePixelFormat
name|getSurfacePixelFormat
argument_list|(
argument|QImage::Format format
argument_list|)
block|;
specifier|static
name|DFBSurfaceDescription
name|getSurfaceDescription
argument_list|(
argument|const uint *buffer
argument_list|,
argument|int length
argument_list|)
block|;
specifier|static
name|QImage
operator|::
name|Format
name|getImageFormat
argument_list|(
name|IDirectFBSurface
operator|*
name|surface
argument_list|)
block|;
specifier|static
name|bool
name|initSurfaceDescriptionPixelFormat
argument_list|(
argument|DFBSurfaceDescription *description
argument_list|,
argument|QImage::Format format
argument_list|)
block|;
specifier|static
specifier|inline
name|bool
name|isPremultiplied
argument_list|(
argument|QImage::Format format
argument_list|)
block|;
specifier|static
specifier|inline
name|bool
name|hasAlphaChannel
argument_list|(
argument|DFBSurfacePixelFormat format
argument_list|)
block|;
specifier|static
specifier|inline
name|bool
name|hasAlphaChannel
argument_list|(
name|IDirectFBSurface
operator|*
name|surface
argument_list|)
block|;
name|QImage
operator|::
name|Format
name|alphaPixmapFormat
argument_list|()
specifier|const
block|;
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_PALETTE
specifier|static
name|void
name|setSurfaceColorTable
argument_list|(
name|IDirectFBSurface
operator|*
name|surface
argument_list|,
specifier|const
name|QImage
operator|&
name|image
argument_list|)
block|;
endif|#
directive|endif
specifier|static
name|uchar
operator|*
name|lockSurface
argument_list|(
argument|IDirectFBSurface *surface
argument_list|,
argument|DFBSurfaceLockFlags flags
argument_list|,
argument|int *bpl =
literal|0
argument_list|)
block|;
if|#
directive|if
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER
operator|&&
name|defined
name|QT_DIRECTFB_IMAGEPROVIDER_KEEPALIVE
name|void
name|setDirectFBImageProvider
argument_list|(
name|IDirectFBImageProvider
operator|*
name|provider
argument_list|)
block|;
endif|#
directive|endif
name|private
operator|:
name|QDirectFBScreenPrivate
operator|*
name|d_ptr
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|SurfaceCreationOptions
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
name|QDirectFBScreen
operator|::
name|SurfaceCreationOptions
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|DirectFBFlags
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
name|QDirectFBScreen
operator|::
name|DirectFBFlags
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|isPremultiplied
specifier|inline
name|bool
name|QDirectFBScreen
operator|::
name|isPremultiplied
argument_list|(
argument|QImage::Format format
argument_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB6666_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB8555_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
case|:
return|return
name|true
return|;
default|default:
break|break;
block|}
end_expr_stmt
begin_return
return|return
name|false
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|hasAlphaChannel
name|bool
name|QDirectFBScreen
operator|::
name|hasAlphaChannel
argument_list|(
argument|DFBSurfacePixelFormat format
argument_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|DSPF_ARGB1555
case|:
case|case
name|DSPF_ARGB
case|:
case|case
name|DSPF_LUT8
case|:
case|case
name|DSPF_AiRGB
case|:
case|case
name|DSPF_A1
case|:
case|case
name|DSPF_ARGB2554
case|:
case|case
name|DSPF_ARGB4444
case|:
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x000923
operator|)
case|case
name|DSPF_AYUV
case|:
endif|#
directive|endif
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
case|case
name|DSPF_A4
case|:
case|case
name|DSPF_ARGB1666
case|:
case|case
name|DSPF_ARGB6666
case|:
case|case
name|DSPF_LUT2
case|:
endif|#
directive|endif
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
end_expr_stmt
begin_expr_stmt
unit|}  inline
DECL|function|hasAlphaChannel
name|bool
name|QDirectFBScreen
operator|::
name|hasAlphaChannel
argument_list|(
argument|IDirectFBSurface *surface
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|surface
argument_list|)
block|;
name|DFBSurfacePixelFormat
name|format
block|;
name|surface
operator|->
name|GetPixelFormat
argument_list|(
name|surface
argument_list|,
operator|&
name|format
argument_list|)
block|;
return|return
name|QDirectFBScreen
operator|::
name|hasAlphaChannel
argument_list|(
name|format
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DIRECTFB
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDIRECTFBSCREEN_H
end_comment
end_unit
