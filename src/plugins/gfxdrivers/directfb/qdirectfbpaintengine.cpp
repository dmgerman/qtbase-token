begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbpaintengine.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_DIRECTFB
end_ifndef
begin_include
include|#
directive|include
file|"qdirectfbwindowsurface.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbscreen.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbpixmap.h"
end_include
begin_include
include|#
directive|include
file|<directfb.h>
end_include
begin_include
include|#
directive|include
file|<qtransform.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<qcache.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmapdata_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qimagepixmapcleanuphooks_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class_decl
class_decl|class
name|SurfaceCache
class_decl|;
end_class_decl
begin_class
DECL|class|QDirectFBPaintEnginePrivate
class|class
name|QDirectFBPaintEnginePrivate
super|:
specifier|public
name|QRasterPaintEnginePrivate
block|{
public|public:
DECL|enum|TransformationTypeFlags
enum|enum
name|TransformationTypeFlags
block|{
DECL|enumerator|Matrix_NegativeScale
name|Matrix_NegativeScale
init|=
literal|0x100
block|,
DECL|enumerator|Matrix_RectsUnsupported
name|Matrix_RectsUnsupported
init|=
operator|(
name|QTransform
operator|::
name|TxRotate
operator||
name|QTransform
operator|::
name|TxShear
operator||
name|QTransform
operator|::
name|TxProject
operator|)
block|,
DECL|enumerator|Matrix_BlitsUnsupported
name|Matrix_BlitsUnsupported
init|=
operator|(
name|Matrix_NegativeScale
operator||
name|Matrix_RectsUnsupported
operator|)
block|}
enum|;
DECL|function|getTransformationType
specifier|inline
specifier|static
name|uint
name|getTransformationType
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|)
block|{
name|int
name|ret
init|=
name|transform
operator|.
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|qMin
argument_list|(
name|transform
operator|.
name|m11
argument_list|()
argument_list|,
name|transform
operator|.
name|m22
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|ret
operator||=
name|QDirectFBPaintEnginePrivate
operator|::
name|Matrix_NegativeScale
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|enum|CompositionModeStatus
enum|enum
name|CompositionModeStatus
block|{
DECL|enumerator|PorterDuff_None
name|PorterDuff_None
init|=
literal|0x0
block|,
DECL|enumerator|PorterDuff_Supported
name|PorterDuff_Supported
init|=
literal|0x1
block|,
DECL|enumerator|PorterDuff_PremultiplyColors
name|PorterDuff_PremultiplyColors
init|=
literal|0x2
block|,
DECL|enumerator|PorterDuff_AlwaysBlend
name|PorterDuff_AlwaysBlend
init|=
literal|0x4
block|}
enum|;
DECL|enum|ClipType
enum|enum
name|ClipType
block|{
DECL|enumerator|ClipUnset
name|ClipUnset
block|,
DECL|enumerator|NoClip
name|NoClip
block|,
DECL|enumerator|RectClip
name|RectClip
block|,
DECL|enumerator|RegionClip
name|RegionClip
block|,
DECL|enumerator|ComplexClip
name|ComplexClip
block|}
enum|;
name|QDirectFBPaintEnginePrivate
parameter_list|(
name|QDirectFBPaintEngine
modifier|*
name|p
parameter_list|)
constructor_decl|;
name|~
name|QDirectFBPaintEnginePrivate
parameter_list|()
destructor_decl|;
specifier|inline
name|void
name|setTransform
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transforma
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setPen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setCompositionMode
parameter_list|(
name|QPainter
operator|::
name|CompositionMode
name|mode
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setRenderHints
parameter_list|(
name|QPainter
operator|::
name|RenderHints
name|hints
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setDFBColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
function_decl|;
specifier|inline
name|void
name|lock
parameter_list|()
function_decl|;
specifier|inline
name|void
name|unlock
parameter_list|()
function_decl|;
specifier|static
specifier|inline
name|void
name|unlock
parameter_list|(
name|QDirectFBPaintDevice
modifier|*
name|device
parameter_list|)
function_decl|;
specifier|inline
name|bool
name|isSimpleBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
specifier|const
function_decl|;
name|void
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|dest
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|pixmapTransform
parameter_list|)
function_decl|;
name|void
name|blit
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|dest
parameter_list|,
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|src
parameter_list|)
function_decl|;
specifier|inline
name|bool
name|supportsStretchBlit
parameter_list|()
specifier|const
function_decl|;
specifier|inline
name|void
name|updateClip
parameter_list|()
function_decl|;
specifier|virtual
name|void
name|systemStateChanged
parameter_list|()
function_decl|;
specifier|static
name|IDirectFBSurface
modifier|*
name|getSurface
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|bool
modifier|*
name|release
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_IMAGECACHE
DECL|function|cacheCost
specifier|static
specifier|inline
name|int
name|cacheCost
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|)
block|{
return|return
name|img
operator|.
name|width
argument_list|()
operator|*
name|img
operator|.
name|height
argument_list|()
operator|*
name|img
operator|.
name|depth
argument_list|()
operator|/
literal|8
return|;
block|}
endif|#
directive|endif
DECL|enum|BlitFlag
enum|enum
name|BlitFlag
block|{
DECL|enumerator|HasAlpha
name|HasAlpha
init|=
literal|0x1
block|,
DECL|enumerator|Premultiplied
name|Premultiplied
init|=
literal|0x2
block|}
enum|;
name|void
name|prepareForBlit
parameter_list|(
name|uint
name|blitFlags
parameter_list|)
function_decl|;
DECL|member|surface
name|IDirectFBSurface
modifier|*
name|surface
decl_stmt|;
DECL|member|antialiased
name|bool
name|antialiased
decl_stmt|;
DECL|member|simplePen
name|bool
name|simplePen
decl_stmt|;
DECL|member|transformationType
name|uint
name|transformationType
decl_stmt|;
comment|// this is QTransform::type() + Matrix_NegativeScale if qMin(transform.m11(), transform.m22())< 0
DECL|member|surfaceCache
name|SurfaceCache
modifier|*
name|surfaceCache
decl_stmt|;
DECL|member|fb
name|IDirectFB
modifier|*
name|fb
decl_stmt|;
DECL|member|opacity
name|quint8
name|opacity
decl_stmt|;
DECL|member|clipType
name|ClipType
name|clipType
decl_stmt|;
DECL|member|dfbDevice
name|QDirectFBPaintDevice
modifier|*
name|dfbDevice
decl_stmt|;
DECL|member|compositionModeStatus
name|uint
name|compositionModeStatus
decl_stmt|;
DECL|member|isPremultiplied
name|bool
name|isPremultiplied
decl_stmt|;
DECL|member|inClip
name|bool
name|inClip
decl_stmt|;
DECL|member|currentClip
name|QRect
name|currentClip
decl_stmt|;
DECL|member|q
name|QDirectFBPaintEngine
modifier|*
name|q
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|SurfaceCache
class|class
name|SurfaceCache
block|{
public|public:
DECL|function|SurfaceCache
name|SurfaceCache
parameter_list|()
member_init_list|:
name|surface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|buffer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bufsize
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~SurfaceCache
name|~
name|SurfaceCache
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
name|IDirectFBSurface
modifier|*
name|getSurface
parameter_list|(
specifier|const
name|uint
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
private|private:
DECL|member|surface
name|IDirectFBSurface
modifier|*
name|surface
decl_stmt|;
DECL|member|buffer
name|uint
modifier|*
name|buffer
decl_stmt|;
DECL|member|bufsize
name|int
name|bufsize
decl_stmt|;
block|}
class|;
end_class
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_IMAGECACHE
end_ifdef
begin_expr_stmt
name|QT_BEGIN_INCLUDE_NAMESPACE
include|#
directive|include
file|<private/qimage_p.h>
name|QT_END_INCLUDE_NAMESPACE
expr|struct
DECL|struct|CachedImage
name|CachedImage
block|{
DECL|member|surface
name|IDirectFBSurface
operator|*
name|surface
block|;
DECL|function|~CachedImage
operator|~
name|CachedImage
argument_list|()
block|{
if|if
condition|(
name|surface
operator|&&
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
condition|)
block|{
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|releaseDFBSurface
argument_list|(
name|surface
argument_list|)
expr_stmt|;
block|}
block|}
end_expr_stmt
begin_decl_stmt
unit|};
specifier|static
name|QCache
argument_list|<
name|qint64
argument_list|,
name|CachedImage
argument_list|>
name|imageCache
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// 4 MB
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|VOID_ARG
define|#
directive|define
name|VOID_ARG
parameter_list|()
value|static_cast<bool>(false)
end_define
begin_enum
DECL|enum|PaintOperation
enum|enum
name|PaintOperation
block|{
DECL|enumerator|DRAW_RECTS
DECL|enumerator|DRAW_LINES
DECL|enumerator|DRAW_IMAGE
name|DRAW_RECTS
init|=
literal|0x0001
block|,
name|DRAW_LINES
init|=
literal|0x0002
block|,
name|DRAW_IMAGE
init|=
literal|0x0004
block|,
DECL|enumerator|DRAW_PIXMAP
DECL|enumerator|DRAW_TILED_PIXMAP
DECL|enumerator|STROKE_PATH
name|DRAW_PIXMAP
init|=
literal|0x0008
block|,
name|DRAW_TILED_PIXMAP
init|=
literal|0x0010
block|,
name|STROKE_PATH
init|=
literal|0x0020
block|,
DECL|enumerator|DRAW_PATH
DECL|enumerator|DRAW_POINTS
DECL|enumerator|DRAW_ELLIPSE
name|DRAW_PATH
init|=
literal|0x0040
block|,
name|DRAW_POINTS
init|=
literal|0x0080
block|,
name|DRAW_ELLIPSE
init|=
literal|0x0100
block|,
DECL|enumerator|DRAW_POLYGON
DECL|enumerator|DRAW_TEXT
DECL|enumerator|FILL_PATH
name|DRAW_POLYGON
init|=
literal|0x0200
block|,
name|DRAW_TEXT
init|=
literal|0x0400
block|,
name|FILL_PATH
init|=
literal|0x0800
block|,
DECL|enumerator|FILL_RECT
DECL|enumerator|DRAW_COLORSPANS
DECL|enumerator|DRAW_ROUNDED_RECT
name|FILL_RECT
init|=
literal|0x1000
block|,
name|DRAW_COLORSPANS
init|=
literal|0x2000
block|,
name|DRAW_ROUNDED_RECT
init|=
literal|0x4000
block|,
DECL|enumerator|DRAW_STATICTEXT
DECL|enumerator|ALL
name|DRAW_STATICTEXT
init|=
literal|0x8000
block|,
name|ALL
init|=
literal|0xffff
block|}
enum|;
end_enum
begin_enum
DECL|enumerator|RasterWarn
DECL|enumerator|RasterDisable
enum|enum
block|{
name|RasterWarn
init|=
literal|1
block|,
name|RasterDisable
init|=
literal|2
block|}
enum|;
end_enum
begin_function
DECL|function|rasterFallbacksMask
specifier|static
specifier|inline
name|uint
name|rasterFallbacksMask
parameter_list|(
name|PaintOperation
name|op
parameter_list|)
block|{
name|uint
name|ret
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WARN_ON_RASTERFALLBACKS
if|if
condition|(
name|op
operator|&
name|QT_DIRECTFB_WARN_ON_RASTERFALLBACKS
condition|)
name|ret
operator||=
name|RasterWarn
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_DIRECTFB_DISABLE_RASTERFALLBACKS
if|if
condition|(
name|op
operator|&
name|QT_DIRECTFB_DISABLE_RASTERFALLBACKS
condition|)
name|ret
operator||=
name|RasterDisable
expr_stmt|;
endif|#
directive|endif
specifier|static
name|int
name|warningMask
init|=
operator|-
literal|1
decl_stmt|;
specifier|static
name|int
name|disableMask
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|warningMask
operator|<
literal|0
condition|)
block|{
struct|struct
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|PaintOperation
name|operation
decl_stmt|;
block|}
decl|const
name|operations
index|[]
init|=
block|{
block|{
literal|"DRAW_RECTS"
block|,
name|DRAW_RECTS
block|}
block|,
block|{
literal|"DRAW_LINES"
block|,
name|DRAW_LINES
block|}
block|,
block|{
literal|"DRAW_IMAGE"
block|,
name|DRAW_IMAGE
block|}
block|,
block|{
literal|"DRAW_PIXMAP"
block|,
name|DRAW_PIXMAP
block|}
block|,
block|{
literal|"DRAW_TILED_PIXMAP"
block|,
name|DRAW_TILED_PIXMAP
block|}
block|,
block|{
literal|"STROKE_PATH"
block|,
name|STROKE_PATH
block|}
block|,
block|{
literal|"DRAW_PATH"
block|,
name|DRAW_PATH
block|}
block|,
block|{
literal|"DRAW_POINTS"
block|,
name|DRAW_POINTS
block|}
block|,
block|{
literal|"DRAW_ELLIPSE"
block|,
name|DRAW_ELLIPSE
block|}
block|,
block|{
literal|"DRAW_POLYGON"
block|,
name|DRAW_POLYGON
block|}
block|,
block|{
literal|"DRAW_TEXT"
block|,
name|DRAW_TEXT
block|}
block|,
block|{
literal|"FILL_PATH"
block|,
name|FILL_PATH
block|}
block|,
block|{
literal|"FILL_RECT"
block|,
name|FILL_RECT
block|}
block|,
block|{
literal|"DRAW_COLORSPANS"
block|,
name|DRAW_COLORSPANS
block|}
block|,
block|{
literal|"DRAW_ROUNDED_RECT"
block|,
name|DRAW_ROUNDED_RECT
block|}
block|,
block|{
literal|"ALL"
block|,
name|ALL
block|}
block|,
block|{
literal|0
block|,
name|ALL
block|}
block|}
struct|;
name|QStringList
name|warning
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_DIRECTFB_WARN_ON_RASTERFALLBACKS"
argument_list|)
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QStringList
name|disable
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_DIRECTFB_DISABLE_RASTERFALLBACKS"
argument_list|)
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|warningMask
operator|=
literal|0
expr_stmt|;
name|disableMask
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|warning
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|disable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|operations
index|[
name|i
index|]
operator|.
name|name
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|name
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|operations
index|[
name|i
index|]
operator|.
name|name
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|warning
operator|.
name|indexOf
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|warningMask
operator||=
name|operations
index|[
name|i
index|]
operator|.
name|operation
expr_stmt|;
name|warning
operator|.
name|erase
argument_list|(
name|warning
operator|.
name|begin
argument_list|()
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
name|idx
operator|=
name|disable
operator|.
name|indexOf
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|disableMask
operator||=
name|operations
index|[
name|i
index|]
operator|.
name|operation
expr_stmt|;
name|disable
operator|.
name|erase
argument_list|(
name|disable
operator|.
name|begin
argument_list|()
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|warning
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBPaintEngine QT_DIRECTFB_WARN_ON_RASTERFALLBACKS Unknown operation(s): %s"
argument_list|,
name|qPrintable
argument_list|(
name|warning
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|"|"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|disable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBPaintEngine QT_DIRECTFB_DISABLE_RASTERFALLBACKS Unknown operation(s): %s"
argument_list|,
name|qPrintable
argument_list|(
name|disable
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|"|"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|&
name|warningMask
condition|)
name|ret
operator||=
name|RasterWarn
expr_stmt|;
if|if
condition|(
name|op
operator|&
name|disableMask
condition|)
name|ret
operator||=
name|RasterDisable
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function_decl
template|template
parameter_list|<
name|typename
name|device
parameter_list|,
name|typename
name|T1
parameter_list|,
name|typename
name|T2
parameter_list|,
name|typename
name|T3
parameter_list|>
specifier|static
name|void
name|rasterFallbackWarn
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
specifier|const
name|char
modifier|*
name|func
parameter_list|,
specifier|const
name|device
modifier|*
name|dev
parameter_list|,
name|uint
name|transformationType
parameter_list|,
name|bool
name|simplePen
parameter_list|,
name|uint
name|clipType
parameter_list|,
name|uint
name|compositionModeStatus
parameter_list|,
specifier|const
name|char
modifier|*
name|nameOne
parameter_list|,
specifier|const
name|T1
modifier|&
name|one
parameter_list|,
specifier|const
name|char
modifier|*
name|nameTwo
parameter_list|,
specifier|const
name|T2
modifier|&
name|two
parameter_list|,
specifier|const
name|char
modifier|*
name|nameThree
parameter_list|,
specifier|const
name|T3
modifier|&
name|three
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|RASTERFALLBACK
define|#
directive|define
name|RASTERFALLBACK
parameter_list|(
name|op
parameter_list|,
name|one
parameter_list|,
name|two
parameter_list|,
name|three
parameter_list|)
define|\
value|{                                                                   \         static const uint rasterFallbacks = rasterFallbacksMask(op);    \         switch (rasterFallbacks) {                                      \         case 0: break;                                                  \         case RasterWarn:                                                \             rasterFallbackWarn("Falling back to raster engine for",     \                                __FUNCTION__,                            \                                state()->painter->device(),              \                                d_func()->transformationType,            \                                d_func()->simplePen,                     \                                d_func()->clipType,                      \                                d_func()->compositionModeStatus,         \                                #one, one, #two, two, #three, three);    \             break;                                                      \         case RasterDisable|RasterWarn:                                  \             rasterFallbackWarn("Disabled raster engine operation",      \                                __FUNCTION__,                            \                                state()->painter->device(),              \                                d_func()->transformationType,            \                                d_func()->simplePen,                     \                                d_func()->clipType,                      \                                d_func()->compositionModeStatus,         \                                #one, one, #two, two, #three, three);    \         case RasterDisable:                                             \             return;                                                     \         }                                                               \     }
end_define
begin_function_decl
template|template
parameter_list|<
name|class
name|T
parameter_list|>
specifier|static
specifier|inline
name|void
name|drawLines
parameter_list|(
specifier|const
name|T
modifier|*
name|lines
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
template|template
parameter_list|<
name|class
name|T
parameter_list|>
specifier|static
specifier|inline
name|void
name|fillRects
parameter_list|(
specifier|const
name|T
modifier|*
name|rects
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
template|template
parameter_list|<
name|class
name|T
parameter_list|>
specifier|static
specifier|inline
name|void
name|drawRects
parameter_list|(
specifier|const
name|T
modifier|*
name|rects
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|)
function_decl|;
end_function_decl
begin_define
DECL|macro|CLIPPED_PAINT
define|#
directive|define
name|CLIPPED_PAINT
parameter_list|(
name|operation
parameter_list|)
value|{                                      \         d->unlock();                                                    \         DFBRegion clipRegion;                                           \         switch (d->clipType) {                                          \         case QDirectFBPaintEnginePrivate::NoClip:                       \         case QDirectFBPaintEnginePrivate::RectClip:                     \             operation;                                                  \             break;                                                      \         case QDirectFBPaintEnginePrivate::RegionClip: {                 \             Q_ASSERT(d->clip());                                        \             const QVector<QRect> cr = d->clip()->clipRegion.rects();    \             const int size = cr.size();                                 \             for (int i=0; i<size; ++i) {                                \                 d->currentClip = cr.at(i);                              \                 clipRegion.x1 = d->currentClip.x();                     \                 clipRegion.y1 = d->currentClip.y();                     \                 clipRegion.x2 = d->currentClip.right();                 \                 clipRegion.y2 = d->currentClip.bottom();                \                 d->surface->SetClip(d->surface,&clipRegion);           \                 operation;                                              \             }                                                           \             d->updateClip();                                            \             break; }                                                    \         case QDirectFBPaintEnginePrivate::ComplexClip:                  \         case QDirectFBPaintEnginePrivate::ClipUnset:                    \             qFatal("CLIPPED_PAINT internal error %d", d->clipType);     \             break;                                                      \         }                                                               \     }
end_define
begin_constructor
DECL|function|QDirectFBPaintEngine
name|QDirectFBPaintEngine
operator|::
name|QDirectFBPaintEngine
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|)
member_init_list|:
name|QRasterPaintEngine
argument_list|(
operator|*
operator|(
operator|new
name|QDirectFBPaintEnginePrivate
argument_list|(
name|this
argument_list|)
operator|)
argument_list|,
name|device
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QDirectFBPaintEngine
name|QDirectFBPaintEngine
operator|::
name|~
name|QDirectFBPaintEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|begin
name|bool
name|QDirectFBPaintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|device
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|device
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|CustomRaster
condition|)
block|{
name|d
operator|->
name|dfbDevice
operator|=
cast|static_cast
argument_list|<
name|QDirectFBPaintDevice
operator|*
argument_list|>
argument_list|(
name|device
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|device
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Pixmap
condition|)
block|{
name|QPixmapData
modifier|*
name|data
init|=
cast|static_cast
argument_list|<
name|QPixmap
operator|*
argument_list|>
argument_list|(
name|device
argument_list|)
operator|->
name|pixmapData
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|DirectFBClass
argument_list|)
expr_stmt|;
name|QDirectFBPixmapData
modifier|*
name|dfbPixmapData
init|=
cast|static_cast
argument_list|<
name|QDirectFBPixmapData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QDirectFBPaintEnginePrivate
operator|::
name|unlock
argument_list|(
name|dfbPixmapData
argument_list|)
expr_stmt|;
name|d
operator|->
name|dfbDevice
operator|=
cast|static_cast
argument_list|<
name|QDirectFBPaintDevice
operator|*
argument_list|>
argument_list|(
name|dfbPixmapData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|dfbDevice
condition|)
name|d
operator|->
name|surface
operator|=
name|d
operator|->
name|dfbDevice
operator|->
name|directFBSurface
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|surface
condition|)
block|{
name|qFatal
argument_list|(
literal|"QDirectFBPaintEngine used on an invalid device: 0x%x"
argument_list|,
name|device
operator|->
name|devType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|isPremultiplied
operator|=
name|QDirectFBScreen
operator|::
name|isPremultiplied
argument_list|(
name|d
operator|->
name|dfbDevice
operator|->
name|format
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|prepare
argument_list|(
name|d
operator|->
name|dfbDevice
argument_list|)
expr_stmt|;
name|gccaps
operator|=
name|AllFeatures
expr_stmt|;
name|d
operator|->
name|setCompositionMode
argument_list|(
name|state
argument_list|()
operator|->
name|composition_mode
argument_list|)
expr_stmt|;
return|return
name|QRasterPaintEngine
operator|::
name|begin
argument_list|(
name|device
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QDirectFBPaintEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|unlock
argument_list|()
expr_stmt|;
name|d
operator|->
name|dfbDevice
operator|=
literal|0
expr_stmt|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
name|d
operator|->
name|surface
operator|->
name|ReleaseSource
argument_list|(
name|d
operator|->
name|surface
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|currentClip
operator|=
name|QRect
argument_list|()
expr_stmt|;
name|d
operator|->
name|surface
operator|->
name|SetClip
argument_list|(
name|d
operator|->
name|surface
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|d
operator|->
name|surface
operator|=
literal|0
expr_stmt|;
return|return
name|QRasterPaintEngine
operator|::
name|end
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|clipEnabledChanged
name|void
name|QDirectFBPaintEngine
operator|::
name|clipEnabledChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|clipEnabledChanged
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateClip
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|penChanged
name|void
name|QDirectFBPaintEngine
operator|::
name|penChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPen
argument_list|(
name|state
argument_list|()
operator|->
name|pen
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|penChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|opacityChanged
name|void
name|QDirectFBPaintEngine
operator|::
name|opacityChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|opacity
operator|=
name|quint8
argument_list|(
name|state
argument_list|()
operator|->
name|opacity
operator|*
literal|255
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|opacityChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compositionModeChanged
name|void
name|QDirectFBPaintEngine
operator|::
name|compositionModeChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|setCompositionMode
argument_list|(
name|state
argument_list|()
operator|->
name|compositionMode
argument_list|()
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|compositionModeChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderHintsChanged
name|void
name|QDirectFBPaintEngine
operator|::
name|renderHintsChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|setRenderHints
argument_list|(
name|state
argument_list|()
operator|->
name|renderHints
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|renderHintsChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transformChanged
name|void
name|QDirectFBPaintEngine
operator|::
name|transformChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|setTransform
argument_list|(
name|state
argument_list|()
operator|->
name|matrix
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|transformChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setState
name|void
name|QDirectFBPaintEngine
operator|::
name|setState
parameter_list|(
name|QPainterState
modifier|*
name|state
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|d
operator|->
name|setPen
argument_list|(
name|state
operator|->
name|pen
argument_list|)
expr_stmt|;
name|d
operator|->
name|opacity
operator|=
name|quint8
argument_list|(
name|state
operator|->
name|opacity
operator|*
literal|255
argument_list|)
expr_stmt|;
name|d
operator|->
name|setCompositionMode
argument_list|(
name|state
operator|->
name|compositionMode
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|setTransform
argument_list|(
name|state
operator|->
name|transform
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|setRenderHints
argument_list|(
name|state
operator|->
name|renderHints
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|surface
condition|)
name|d
operator|->
name|updateClip
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QDirectFBPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|wasInClip
init|=
name|d
operator|->
name|inClip
decl_stmt|;
name|d
operator|->
name|inClip
operator|=
literal|true
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|clip
argument_list|(
name|path
argument_list|,
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wasInClip
condition|)
block|{
name|d
operator|->
name|inClip
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|updateClip
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QDirectFBPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|wasInClip
init|=
name|d
operator|->
name|inClip
decl_stmt|;
name|d
operator|->
name|inClip
operator|=
literal|true
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|clip
argument_list|(
name|region
argument_list|,
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wasInClip
condition|)
block|{
name|d
operator|->
name|inClip
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|updateClip
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QDirectFBPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|wasInClip
init|=
name|d
operator|->
name|inClip
decl_stmt|;
name|d
operator|->
name|inClip
operator|=
literal|true
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|clip
argument_list|(
name|rect
argument_list|,
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wasInClip
condition|)
block|{
name|d
operator|->
name|inClip
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|updateClip
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QDirectFBPaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRect
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QPen
modifier|&
name|pen
init|=
name|state
argument_list|()
operator|->
name|pen
decl_stmt|;
specifier|const
name|QBrush
modifier|&
name|brush
init|=
name|state
argument_list|()
operator|->
name|brush
decl_stmt|;
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
operator|&&
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoPen
condition|)
return|return;
if|if
condition|(
operator|(
name|d
operator|->
name|transformationType
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|Matrix_RectsUnsupported
operator|)
operator|||
operator|!
name|d
operator|->
name|simplePen
operator|||
name|d
operator|->
name|clipType
operator|==
name|QDirectFBPaintEnginePrivate
operator|::
name|ComplexClip
operator|||
operator|!
name|d
operator|->
name|isSimpleBrush
argument_list|(
name|brush
argument_list|)
operator|||
operator|!
operator|(
name|d
operator|->
name|compositionModeStatus
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|PorterDuff_Supported
operator|)
condition|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_RECTS
argument_list|,
name|rectCount
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|d
operator|->
name|setDFBColor
argument_list|(
name|brush
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|CLIPPED_PAINT
argument_list|(
name|QT_PREPEND_NAMESPACE
argument_list|(
name|fillRects
argument_list|<
name|QRect
argument_list|>
argument_list|)
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|,
name|state
argument_list|()
operator|->
name|matrix
argument_list|,
name|d
operator|->
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoPen
condition|)
block|{
name|d
operator|->
name|setDFBColor
argument_list|(
name|pen
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|CLIPPED_PAINT
argument_list|(
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawRects
argument_list|<
name|QRect
argument_list|>
argument_list|)
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|,
name|state
argument_list|()
operator|->
name|matrix
argument_list|,
name|d
operator|->
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QDirectFBPaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QPen
modifier|&
name|pen
init|=
name|state
argument_list|()
operator|->
name|pen
decl_stmt|;
specifier|const
name|QBrush
modifier|&
name|brush
init|=
name|state
argument_list|()
operator|->
name|brush
decl_stmt|;
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
operator|&&
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoPen
condition|)
return|return;
if|if
condition|(
operator|(
name|d
operator|->
name|transformationType
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|Matrix_RectsUnsupported
operator|)
operator|||
operator|!
name|d
operator|->
name|simplePen
operator|||
name|d
operator|->
name|clipType
operator|==
name|QDirectFBPaintEnginePrivate
operator|::
name|ComplexClip
operator|||
operator|!
name|d
operator|->
name|isSimpleBrush
argument_list|(
name|brush
argument_list|)
operator|||
operator|!
operator|(
name|d
operator|->
name|compositionModeStatus
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|PorterDuff_Supported
operator|)
condition|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_RECTS
argument_list|,
name|rectCount
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|d
operator|->
name|setDFBColor
argument_list|(
name|brush
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|CLIPPED_PAINT
argument_list|(
name|fillRects
argument_list|<
name|QRectF
argument_list|>
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|,
name|state
argument_list|()
operator|->
name|matrix
argument_list|,
name|d
operator|->
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoPen
condition|)
block|{
name|d
operator|->
name|setDFBColor
argument_list|(
name|pen
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|CLIPPED_PAINT
argument_list|(
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawRects
argument_list|<
name|QRectF
argument_list|>
argument_list|)
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|,
name|state
argument_list|()
operator|->
name|matrix
argument_list|,
name|d
operator|->
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawLines
name|void
name|QDirectFBPaintEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLine
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QPen
modifier|&
name|pen
init|=
name|state
argument_list|()
operator|->
name|pen
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|simplePen
operator|||
name|d
operator|->
name|clipType
operator|==
name|QDirectFBPaintEnginePrivate
operator|::
name|ComplexClip
operator|||
operator|!
operator|(
name|d
operator|->
name|compositionModeStatus
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|PorterDuff_Supported
operator|)
condition|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_LINES
argument_list|,
name|lineCount
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawLines
argument_list|(
name|lines
argument_list|,
name|lineCount
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoPen
condition|)
block|{
name|d
operator|->
name|setDFBColor
argument_list|(
name|pen
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|CLIPPED_PAINT
argument_list|(
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawLines
argument_list|<
name|QLine
argument_list|>
argument_list|)
argument_list|(
name|lines
argument_list|,
name|lineCount
argument_list|,
name|state
argument_list|()
operator|->
name|matrix
argument_list|,
name|d
operator|->
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawLines
name|void
name|QDirectFBPaintEngine
operator|::
name|drawLines
parameter_list|(
specifier|const
name|QLineF
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QPen
modifier|&
name|pen
init|=
name|state
argument_list|()
operator|->
name|pen
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|simplePen
operator|||
name|d
operator|->
name|clipType
operator|==
name|QDirectFBPaintEnginePrivate
operator|::
name|ComplexClip
operator|||
operator|!
operator|(
name|d
operator|->
name|compositionModeStatus
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|PorterDuff_Supported
operator|)
condition|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_LINES
argument_list|,
name|lineCount
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawLines
argument_list|(
name|lines
argument_list|,
name|lineCount
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoPen
condition|)
block|{
name|d
operator|->
name|setDFBColor
argument_list|(
name|pen
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|CLIPPED_PAINT
argument_list|(
name|QT_PREPEND_NAMESPACE
argument_list|(
name|drawLines
argument_list|<
name|QLineF
argument_list|>
argument_list|)
argument_list|(
name|lines
argument_list|,
name|lineCount
argument_list|,
name|state
argument_list|()
operator|->
name|matrix
argument_list|,
name|d
operator|->
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QDirectFBPaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
comment|/*  This is hard to read. The way it works is like this:      - If you do not have support for preallocated surfaces and do not use an     image cache we always fall back to raster engine.      - If it's rotated/sheared/mirrored (negative scale) or we can't     clip it we fall back to raster engine.      - If we don't cache the image, but we do have support for     preallocated surfaces we fall back to the raster engine if the     image is in a format DirectFB can't handle.      - If we do cache the image but don't have support for preallocated     images and the cost of caching the image (bytes used) is higher     than the max image cache size we fall back to raster engine.     */
if|#
directive|if
operator|!
name|defined
name|QT_NO_DIRECTFB_PREALLOCATED
operator|||
name|defined
name|QT_DIRECTFB_IMAGECACHE
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|compositionModeStatus
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|PorterDuff_Supported
operator|)
operator|||
operator|(
name|d
operator|->
name|transformationType
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|Matrix_BlitsUnsupported
operator|)
operator|||
operator|(
name|d
operator|->
name|clipType
operator|==
name|QDirectFBPaintEnginePrivate
operator|::
name|ComplexClip
operator|)
operator|||
operator|(
operator|!
name|d
operator|->
name|supportsStretchBlit
argument_list|()
operator|&&
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|r
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
name|sr
operator|.
name|size
argument_list|()
operator|)
ifndef|#
directive|ifndef
name|QT_DIRECTFB_IMAGECACHE
operator|||
operator|(
name|QDirectFBScreen
operator|::
name|getSurfacePixelFormat
argument_list|(
name|image
operator|.
name|format
argument_list|()
argument_list|)
operator|==
name|DSPF_UNKNOWN
operator|)
elif|#
directive|elif
name|defined
name|QT_NO_DIRECTFB_PREALLOCATED
operator|||
operator|(
name|QDirectFBPaintEnginePrivate
operator|::
name|cacheCost
argument_list|(
name|image
argument_list|)
operator|>
name|imageCache
operator|.
name|maxCost
argument_list|()
operator|)
endif|#
directive|endif
condition|)
endif|#
directive|endif
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_IMAGE
argument_list|,
name|r
argument_list|,
name|image
operator|.
name|size
argument_list|()
argument_list|,
name|sr
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawImage
argument_list|(
name|r
argument_list|,
name|image
argument_list|,
name|sr
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return;
block|}
if|#
directive|if
operator|!
name|defined
name|QT_NO_DIRECTFB_PREALLOCATED
operator|||
name|defined
name|QT_DIRECTFB_IMAGECACHE
name|bool
name|release
decl_stmt|;
name|IDirectFBSurface
modifier|*
name|imgSurface
init|=
name|d
operator|->
name|getSurface
argument_list|(
name|image
argument_list|,
operator|&
name|release
argument_list|)
decl_stmt|;
name|uint
name|blitFlags
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|hasAlphaChannel
argument_list|()
condition|)
name|blitFlags
operator||=
name|QDirectFBPaintEnginePrivate
operator|::
name|HasAlpha
expr_stmt|;
if|if
condition|(
name|QDirectFBScreen
operator|::
name|isPremultiplied
argument_list|(
name|image
operator|.
name|format
argument_list|()
argument_list|)
condition|)
name|blitFlags
operator||=
name|QDirectFBPaintEnginePrivate
operator|::
name|Premultiplied
expr_stmt|;
name|d
operator|->
name|prepareForBlit
argument_list|(
name|blitFlags
argument_list|)
expr_stmt|;
name|CLIPPED_PAINT
argument_list|(
name|d
operator|->
name|blit
argument_list|(
name|r
argument_list|,
name|imgSurface
argument_list|,
name|sr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|release
condition|)
block|{
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
name|d
operator|->
name|surface
operator|->
name|ReleaseSource
argument_list|(
name|d
operator|->
name|surface
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|imgSurface
operator|->
name|Release
argument_list|(
name|imgSurface
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QDirectFBPaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|)
block|{
name|drawImage
argument_list|(
name|QRectF
argument_list|(
name|p
argument_list|,
name|img
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|img
argument_list|,
name|img
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QDirectFBPaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|pixmapData
argument_list|()
operator|->
name|classId
argument_list|()
operator|!=
name|QPixmapData
operator|::
name|DirectFBClass
condition|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_PIXMAP
argument_list|,
name|r
argument_list|,
name|pixmap
operator|.
name|size
argument_list|()
argument_list|,
name|sr
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawPixmap
argument_list|(
name|r
argument_list|,
name|pixmap
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPixmapData
modifier|*
name|data
init|=
name|pixmap
operator|.
name|pixmapData
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|DirectFBClass
argument_list|)
expr_stmt|;
name|QDirectFBPixmapData
modifier|*
name|dfbData
init|=
cast|static_cast
argument_list|<
name|QDirectFBPixmapData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|compositionModeStatus
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|PorterDuff_Supported
operator|)
operator|||
operator|(
name|d
operator|->
name|transformationType
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|Matrix_BlitsUnsupported
operator|)
operator|||
operator|(
name|d
operator|->
name|clipType
operator|==
name|QDirectFBPaintEnginePrivate
operator|::
name|ComplexClip
operator|)
operator|||
operator|(
operator|!
name|d
operator|->
name|supportsStretchBlit
argument_list|()
operator|&&
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|r
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
name|sr
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_PIXMAP
argument_list|,
name|r
argument_list|,
name|pixmap
operator|.
name|size
argument_list|()
argument_list|,
name|sr
argument_list|)
expr_stmt|;
specifier|const
name|QImage
modifier|*
name|img
init|=
name|dfbData
operator|->
name|buffer
argument_list|()
decl_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawImage
argument_list|(
name|r
argument_list|,
operator|*
name|img
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QDirectFBPaintEnginePrivate
operator|::
name|unlock
argument_list|(
name|dfbData
argument_list|)
expr_stmt|;
name|IDirectFBSurface
modifier|*
name|s
init|=
name|dfbData
operator|->
name|directFBSurface
argument_list|()
decl_stmt|;
name|uint
name|blitFlags
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|hasAlphaChannel
argument_list|()
condition|)
name|blitFlags
operator||=
name|QDirectFBPaintEnginePrivate
operator|::
name|HasAlpha
expr_stmt|;
if|if
condition|(
name|QDirectFBScreen
operator|::
name|isPremultiplied
argument_list|(
name|dfbData
operator|->
name|pixelFormat
argument_list|()
argument_list|)
condition|)
name|blitFlags
operator||=
name|QDirectFBPaintEnginePrivate
operator|::
name|Premultiplied
expr_stmt|;
name|d
operator|->
name|prepareForBlit
argument_list|(
name|blitFlags
argument_list|)
expr_stmt|;
name|CLIPPED_PAINT
argument_list|(
name|d
operator|->
name|blit
argument_list|(
name|r
argument_list|,
name|s
argument_list|,
name|sr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QDirectFBPaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|)
block|{
name|drawPixmap
argument_list|(
name|QRectF
argument_list|(
name|p
argument_list|,
name|pm
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|pm
argument_list|,
name|pm
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTiledPixmap
name|void
name|QDirectFBPaintEngine
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|pixmapData
argument_list|()
operator|->
name|classId
argument_list|()
operator|!=
name|QPixmapData
operator|::
name|DirectFBClass
condition|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_TILED_PIXMAP
argument_list|,
name|r
argument_list|,
name|pixmap
operator|.
name|size
argument_list|()
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|pixmap
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|compositionModeStatus
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|PorterDuff_Supported
operator|)
operator|||
operator|(
name|d
operator|->
name|transformationType
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|Matrix_BlitsUnsupported
operator|)
operator|||
operator|(
name|d
operator|->
name|clipType
operator|==
name|QDirectFBPaintEnginePrivate
operator|::
name|ComplexClip
operator|)
operator|||
operator|(
operator|!
name|d
operator|->
name|supportsStretchBlit
argument_list|()
operator|&&
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|isScaling
argument_list|()
operator|)
condition|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_TILED_PIXMAP
argument_list|,
name|r
argument_list|,
name|pixmap
operator|.
name|size
argument_list|()
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|QPixmapData
modifier|*
name|pixmapData
init|=
name|pixmap
operator|.
name|pixmapData
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|pixmapData
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|DirectFBClass
argument_list|)
expr_stmt|;
name|QDirectFBPixmapData
modifier|*
name|dfbData
init|=
cast|static_cast
argument_list|<
name|QDirectFBPixmapData
operator|*
argument_list|>
argument_list|(
name|pixmapData
argument_list|)
decl_stmt|;
specifier|const
name|QImage
modifier|*
name|img
init|=
name|dfbData
operator|->
name|buffer
argument_list|()
decl_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPixmapData
modifier|*
name|data
init|=
operator|new
name|QRasterPixmapData
argument_list|(
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
decl_stmt|;
name|data
operator|->
name|fromImage
argument_list|(
operator|*
name|img
argument_list|,
name|Qt
operator|::
name|AutoColor
argument_list|)
expr_stmt|;
specifier|const
name|QPixmap
name|pix
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QRasterPaintEngine
operator|::
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|pix
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTransform
name|transform
argument_list|(
name|state
argument_list|()
operator|->
name|matrix
argument_list|)
decl_stmt|;
name|CLIPPED_PAINT
argument_list|(
name|d
operator|->
name|drawTiledPixmap
argument_list|(
name|r
argument_list|,
name|pixmap
argument_list|,
name|offset
argument_list|,
name|transform
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stroke
name|void
name|QDirectFBPaintEngine
operator|::
name|stroke
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|RASTERFALLBACK
argument_list|(
name|STROKE_PATH
argument_list|,
name|path
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPath
name|void
name|QDirectFBPaintEngine
operator|::
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_PATH
argument_list|,
name|path
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QDirectFBPaintEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_POINTS
argument_list|,
name|pointCount
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawPoints
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPoints
name|void
name|QDirectFBPaintEngine
operator|::
name|drawPoints
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_POINTS
argument_list|,
name|pointCount
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawPoints
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawEllipse
name|void
name|QDirectFBPaintEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_ELLIPSE
argument_list|,
name|rect
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QDirectFBPaintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_POLYGON
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawPolygon
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPolygon
name|void
name|QDirectFBPaintEngine
operator|::
name|drawPolygon
parameter_list|(
specifier|const
name|QPoint
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_POLYGON
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawPolygon
argument_list|(
name|points
argument_list|,
name|pointCount
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QDirectFBPaintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_TEXT
argument_list|,
name|p
argument_list|,
name|textItem
operator|.
name|text
argument_list|()
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fill
name|void
name|QDirectFBPaintEngine
operator|::
name|fill
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
condition|)
return|return;
name|RASTERFALLBACK
argument_list|(
name|FILL_PATH
argument_list|,
name|path
argument_list|,
name|brush
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|fill
argument_list|(
name|path
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawRoundedRect
name|void
name|QDirectFBPaintEngine
operator|::
name|drawRoundedRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|qreal
name|xrad
parameter_list|,
name|qreal
name|yrad
parameter_list|,
name|Qt
operator|::
name|SizeMode
name|mode
parameter_list|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_ROUNDED_RECT
argument_list|,
name|rect
argument_list|,
name|xrad
argument_list|,
name|yrad
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawRoundedRect
argument_list|(
name|rect
argument_list|,
name|xrad
argument_list|,
name|yrad
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawStaticTextItem
name|void
name|QDirectFBPaintEngine
operator|::
name|drawStaticTextItem
parameter_list|(
name|QStaticTextItem
modifier|*
name|item
parameter_list|)
block|{
name|RASTERFALLBACK
argument_list|(
name|DRAW_STATICTEXT
argument_list|,
name|item
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|drawStaticTextItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QDirectFBPaintEngine
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|clipType
operator|!=
name|QDirectFBPaintEnginePrivate
operator|::
name|ComplexClip
condition|)
block|{
switch|switch
condition|(
name|brush
operator|.
name|style
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|SolidPattern
case|:
block|{
specifier|const
name|QColor
name|color
init|=
name|brush
operator|.
name|color
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|color
operator|.
name|isValid
argument_list|()
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|transformationType
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|Matrix_RectsUnsupported
operator|||
operator|!
operator|(
name|d
operator|->
name|compositionModeStatus
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|PorterDuff_Supported
operator|)
condition|)
block|{
break|break;
block|}
name|d
operator|->
name|setDFBColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|r
init|=
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|CLIPPED_PAINT
argument_list|(
name|d
operator|->
name|surface
operator|->
name|FillRectangle
argument_list|(
name|d
operator|->
name|surface
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|Qt
operator|::
name|TexturePattern
case|:
block|{
specifier|const
name|QPointF
modifier|&
name|brushOrigin
init|=
name|state
argument_list|()
operator|->
name|brushOrigin
decl_stmt|;
specifier|const
name|QTransform
name|stateTransform
init|=
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|QTransform
name|transform
argument_list|(
name|stateTransform
argument_list|)
decl_stmt|;
name|transform
operator|.
name|translate
argument_list|(
name|brushOrigin
operator|.
name|x
argument_list|()
argument_list|,
name|brushOrigin
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|transform
operator|=
name|brush
operator|.
name|transform
argument_list|()
operator|*
name|transform
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|compositionModeStatus
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|PorterDuff_Supported
operator|)
operator|||
operator|(
name|QDirectFBPaintEnginePrivate
operator|::
name|getTransformationType
argument_list|(
name|transform
argument_list|)
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|Matrix_BlitsUnsupported
operator|)
operator|||
operator|(
operator|!
name|d
operator|->
name|supportsStretchBlit
argument_list|()
operator|&&
name|transform
operator|.
name|isScaling
argument_list|()
operator|)
condition|)
block|{
break|break;
block|}
specifier|const
name|QPixmap
name|texture
init|=
name|brush
operator|.
name|texture
argument_list|()
decl_stmt|;
if|if
condition|(
name|texture
operator|.
name|pixmapData
argument_list|()
operator|->
name|classId
argument_list|()
operator|!=
name|QPixmapData
operator|::
name|DirectFBClass
condition|)
break|break;
name|CLIPPED_PAINT
argument_list|(
name|d
operator|->
name|drawTiledPixmap
argument_list|(
name|stateTransform
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
argument_list|,
name|texture
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
operator|-
name|brushOrigin
argument_list|,
name|transform
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
default|default:
break|break;
block|}
block|}
name|RASTERFALLBACK
argument_list|(
name|FILL_RECT
argument_list|,
name|rect
argument_list|,
name|brush
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|fillRect
argument_list|(
name|rect
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QDirectFBPaintEngine
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
if|if
condition|(
operator|!
name|color
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|transformationType
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|Matrix_RectsUnsupported
operator|)
operator|||
operator|(
name|d
operator|->
name|clipType
operator|==
name|QDirectFBPaintEnginePrivate
operator|::
name|ComplexClip
operator|)
operator|||
operator|!
operator|(
name|d
operator|->
name|compositionModeStatus
operator|&
name|QDirectFBPaintEnginePrivate
operator|::
name|PorterDuff_Supported
operator|)
condition|)
block|{
name|RASTERFALLBACK
argument_list|(
name|FILL_RECT
argument_list|,
name|rect
argument_list|,
name|color
argument_list|,
name|VOID_ARG
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|lock
argument_list|()
expr_stmt|;
name|QRasterPaintEngine
operator|::
name|fillRect
argument_list|(
name|rect
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|setDFBColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|r
init|=
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|CLIPPED_PAINT
argument_list|(
name|d
operator|->
name|surface
operator|->
name|FillRectangle
argument_list|(
name|d
operator|->
name|surface
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawBufferSpan
name|void
name|QDirectFBPaintEngine
operator|::
name|drawBufferSpan
parameter_list|(
specifier|const
name|uint
modifier|*
name|buffer
parameter_list|,
name|int
name|bufsize
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|const_alpha
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDirectFBPaintEngine
argument_list|)
expr_stmt|;
name|IDirectFBSurface
modifier|*
name|src
init|=
name|d
operator|->
name|surfaceCache
operator|->
name|getSurface
argument_list|(
name|buffer
argument_list|,
name|bufsize
argument_list|)
decl_stmt|;
comment|// ### how does this play with setDFBColor
name|src
operator|->
name|SetColor
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|const_alpha
argument_list|)
expr_stmt|;
specifier|const
name|DFBRectangle
name|rect
init|=
block|{
literal|0
block|,
literal|0
block|,
name|length
block|,
literal|1
block|}
decl_stmt|;
name|d
operator|->
name|surface
operator|->
name|Blit
argument_list|(
name|d
operator|->
name|surface
argument_list|,
name|src
argument_list|,
operator|&
name|rect
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_IMAGECACHE
end_ifdef
begin_function
DECL|function|cachedImageCleanupHook
specifier|static
name|void
name|cachedImageCleanupHook
parameter_list|(
name|qint64
name|key
parameter_list|)
block|{
operator|delete
name|imageCache
operator|.
name|take
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initImageCache
name|void
name|QDirectFBPaintEngine
operator|::
name|initImageCache
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|size
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|imageCache
operator|.
name|setMaxCost
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|QImagePixmapCleanupHooks
operator|::
name|instance
argument_list|()
operator|->
name|addImageHook
argument_list|(
name|cachedImageCleanupHook
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_DIRECTFB_IMAGECACHE
end_comment
begin_comment
comment|// ---- QDirectFBPaintEnginePrivate ----
end_comment
begin_constructor
DECL|function|QDirectFBPaintEnginePrivate
name|QDirectFBPaintEnginePrivate
operator|::
name|QDirectFBPaintEnginePrivate
parameter_list|(
name|QDirectFBPaintEngine
modifier|*
name|p
parameter_list|)
member_init_list|:
name|surface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|antialiased
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|simplePen
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|transformationType
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|opacity
argument_list|(
literal|255
argument_list|)
member_init_list|,
name|clipType
argument_list|(
name|ClipUnset
argument_list|)
member_init_list|,
name|dfbDevice
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|compositionModeStatus
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|isPremultiplied
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|inClip
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|q
argument_list|(
name|p
argument_list|)
block|{
name|fb
operator|=
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|dfb
argument_list|()
expr_stmt|;
name|surfaceCache
operator|=
operator|new
name|SurfaceCache
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFBPaintEnginePrivate
name|QDirectFBPaintEnginePrivate
operator|::
name|~
name|QDirectFBPaintEnginePrivate
parameter_list|()
block|{
operator|delete
name|surfaceCache
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isSimpleBrush
name|bool
name|QDirectFBPaintEnginePrivate
operator|::
name|isSimpleBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
operator|)
operator|||
operator|(
name|brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
operator|&&
operator|!
name|antialiased
operator|)
return|;
block|}
end_function
begin_function
DECL|function|lock
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|lock
parameter_list|()
block|{
comment|// We will potentially get a new pointer to the buffer after a
comment|// lock so we need to call the base implementation of prepare so
comment|// it updates its rasterBuffer to point to the new buffer address.
name|Q_ASSERT
argument_list|(
name|dfbDevice
argument_list|)
expr_stmt|;
if|if
condition|(
name|dfbDevice
operator|->
name|lockSurface
argument_list|(
name|DSLF_READ
operator||
name|DSLF_WRITE
argument_list|)
condition|)
block|{
name|prepare
argument_list|(
name|dfbDevice
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|unlock
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|unlock
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|dfbDevice
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
name|dfbDevice
operator|->
name|syncPending
operator|=
literal|true
expr_stmt|;
else|#
directive|else
name|QDirectFBPaintEnginePrivate
operator|::
name|unlock
argument_list|(
name|dfbDevice
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|unlock
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|unlock
parameter_list|(
name|QDirectFBPaintDevice
modifier|*
name|device
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_SUBSURFACE
name|Q_ASSERT
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|device
operator|->
name|unlockSurface
argument_list|()
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|device
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setTransform
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|setTransform
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|)
block|{
name|transformationType
operator|=
name|getTransformationType
argument_list|(
name|transform
argument_list|)
expr_stmt|;
name|setPen
argument_list|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPen
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|setPen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoPen
condition|)
block|{
name|simplePen
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidLine
operator|&&
operator|!
name|antialiased
operator|&&
name|pen
operator|.
name|brush
argument_list|()
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
operator|&&
name|pen
operator|.
name|widthF
argument_list|()
operator|<=
literal|1.0
operator|&&
operator|(
name|transformationType
operator|<
name|QTransform
operator|::
name|TxScale
operator|||
name|pen
operator|.
name|isCosmetic
argument_list|()
operator|)
condition|)
block|{
name|simplePen
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|simplePen
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setCompositionMode
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|setCompositionMode
parameter_list|(
name|QPainter
operator|::
name|CompositionMode
name|mode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|surface
condition|)
return|return;
specifier|static
specifier|const
name|bool
name|forceRasterFallBack
init|=
name|qgetenv
argument_list|(
literal|"QT_DIRECTFB_FORCE_RASTER"
argument_list|)
operator|.
name|toInt
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|forceRasterFallBack
condition|)
block|{
name|compositionModeStatus
operator|=
name|PorterDuff_None
expr_stmt|;
return|return;
block|}
name|compositionModeStatus
operator|=
name|PorterDuff_Supported
operator||
name|PorterDuff_PremultiplyColors
operator||
name|PorterDuff_AlwaysBlend
expr_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|QPainter
operator|::
name|CompositionMode_Clear
case|:
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_CLEAR
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Source
case|:
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_SRC
argument_list|)
expr_stmt|;
name|compositionModeStatus
operator|&=
operator|~
name|PorterDuff_AlwaysBlend
expr_stmt|;
if|if
condition|(
operator|!
name|isPremultiplied
condition|)
name|compositionModeStatus
operator|&=
operator|~
name|PorterDuff_PremultiplyColors
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceOver
case|:
name|compositionModeStatus
operator|&=
operator|~
name|PorterDuff_AlwaysBlend
expr_stmt|;
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_SRC_OVER
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationOver
case|:
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_DST_OVER
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceIn
case|:
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_SRC_IN
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isPremultiplied
condition|)
name|compositionModeStatus
operator|&=
operator|~
name|PorterDuff_PremultiplyColors
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationIn
case|:
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_DST_IN
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceOut
case|:
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_SRC_OUT
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationOut
case|:
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_DST_OUT
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Destination
case|:
name|surface
operator|->
name|SetSrcBlendFunction
argument_list|(
name|surface
argument_list|,
name|DSBF_ZERO
argument_list|)
expr_stmt|;
name|surface
operator|->
name|SetDstBlendFunction
argument_list|(
name|surface
argument_list|,
name|DSBF_ONE
argument_list|)
expr_stmt|;
break|break;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
case|case
name|QPainter
operator|::
name|CompositionMode_SourceAtop
case|:
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_SRC_ATOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_DestinationAtop
case|:
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_DST_ATOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Plus
case|:
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_ADD
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_Xor
case|:
name|surface
operator|->
name|SetPorterDuff
argument_list|(
name|surface
argument_list|,
name|DSPD_XOR
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
name|compositionModeStatus
operator|=
name|PorterDuff_None
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|setRenderHints
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|setRenderHints
parameter_list|(
name|QPainter
operator|::
name|RenderHints
name|hints
parameter_list|)
block|{
specifier|const
name|bool
name|old
init|=
name|antialiased
decl_stmt|;
name|antialiased
operator|=
name|bool
argument_list|(
name|hints
operator|&
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
if|if
condition|(
name|old
operator|!=
name|antialiased
condition|)
block|{
name|setPen
argument_list|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|pen
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|prepareForBlit
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|prepareForBlit
parameter_list|(
name|uint
name|flags
parameter_list|)
block|{
name|DFBSurfaceBlittingFlags
name|blittingFlags
init|=
name|DSBLIT_NOFX
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Premultiplied
condition|)
name|blittingFlags
operator||=
name|DSBLIT_SRC_PREMULTIPLY
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|HasAlpha
condition|)
name|blittingFlags
operator||=
name|DSBLIT_BLEND_ALPHACHANNEL
expr_stmt|;
if|if
condition|(
name|opacity
operator|!=
literal|255
condition|)
block|{
name|blittingFlags
operator||=
name|DSBLIT_BLEND_COLORALPHA
expr_stmt|;
name|surface
operator|->
name|SetColor
argument_list|(
name|surface
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
name|opacity
argument_list|)
expr_stmt|;
block|}
name|surface
operator|->
name|SetBlittingFlags
argument_list|(
name|surface
argument_list|,
name|blittingFlags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ALPHA_MUL
specifier|static
specifier|inline
name|uint
name|ALPHA_MUL
parameter_list|(
name|uint
name|x
parameter_list|,
name|uint
name|a
parameter_list|)
block|{
name|uint
name|t
init|=
name|x
operator|*
name|a
decl_stmt|;
name|t
operator|=
operator|(
operator|(
name|t
operator|+
operator|(
name|t
operator|>>
literal|8
operator|)
operator|+
literal|0x80
operator|)
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|setDFBColor
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|setDFBColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|compositionModeStatus
operator|&
name|PorterDuff_Supported
argument_list|)
expr_stmt|;
specifier|const
name|quint8
name|alpha
init|=
operator|(
name|opacity
operator|==
literal|255
condition|?
name|color
operator|.
name|alpha
argument_list|()
else|:
name|ALPHA_MUL
argument_list|(
name|color
operator|.
name|alpha
argument_list|()
argument_list|,
name|opacity
argument_list|)
operator|)
decl_stmt|;
name|QColor
name|col
decl_stmt|;
if|if
condition|(
name|compositionModeStatus
operator|&
name|PorterDuff_PremultiplyColors
condition|)
block|{
name|col
operator|=
name|QColor
argument_list|(
name|ALPHA_MUL
argument_list|(
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|alpha
argument_list|)
argument_list|,
name|ALPHA_MUL
argument_list|(
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|alpha
argument_list|)
argument_list|,
name|ALPHA_MUL
argument_list|(
name|color
operator|.
name|blue
argument_list|()
argument_list|,
name|alpha
argument_list|)
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|col
operator|=
name|QColor
argument_list|(
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
name|surface
operator|->
name|SetColor
argument_list|(
name|surface
argument_list|,
name|col
operator|.
name|red
argument_list|()
argument_list|,
name|col
operator|.
name|green
argument_list|()
argument_list|,
name|col
operator|.
name|blue
argument_list|()
argument_list|,
name|col
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|surface
operator|->
name|SetDrawingFlags
argument_list|(
name|surface
argument_list|,
name|alpha
operator|==
literal|255
operator|&&
operator|!
operator|(
name|compositionModeStatus
operator|&
name|PorterDuff_AlwaysBlend
operator|)
condition|?
name|DSDRAW_NOFX
else|:
name|DSDRAW_BLEND
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getSurface
name|IDirectFBSurface
modifier|*
name|QDirectFBPaintEnginePrivate
operator|::
name|getSurface
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|bool
modifier|*
name|release
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_IMAGECACHE
operator|*
name|release
operator|=
literal|true
expr_stmt|;
return|return
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|createDFBSurface
argument_list|(
name|img
argument_list|,
name|img
operator|.
name|format
argument_list|()
argument_list|,
name|QDirectFBScreen
operator|::
name|DontTrackSurface
argument_list|)
return|;
else|#
directive|else
specifier|const
name|qint64
name|key
init|=
name|img
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
operator|*
name|release
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|imageCache
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|imageCache
index|[
name|key
index|]
operator|->
name|surface
return|;
block|}
specifier|const
name|int
name|cost
init|=
name|cacheCost
argument_list|(
name|img
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|cache
init|=
name|cost
operator|<=
name|imageCache
operator|.
name|maxCost
argument_list|()
decl_stmt|;
name|QDirectFBScreen
modifier|*
name|screen
init|=
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|QImage
operator|::
name|Format
name|format
init|=
operator|(
name|img
operator|.
name|format
argument_list|()
operator|==
name|screen
operator|->
name|alphaPixmapFormat
argument_list|()
operator|||
name|QDirectFBPixmapData
operator|::
name|hasAlphaChannel
argument_list|(
name|img
argument_list|)
condition|?
name|screen
operator|->
name|alphaPixmapFormat
argument_list|()
else|:
name|screen
operator|->
name|pixelFormat
argument_list|()
operator|)
decl_stmt|;
name|IDirectFBSurface
modifier|*
name|surface
init|=
name|screen
operator|->
name|createDFBSurface
argument_list|(
name|img
argument_list|,
name|format
argument_list|,
name|cache
condition|?
name|QDirectFBScreen
operator|::
name|TrackSurface
else|:
name|QDirectFBScreen
operator|::
name|DontTrackSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
condition|)
block|{
name|CachedImage
modifier|*
name|cachedImage
init|=
operator|new
name|CachedImage
decl_stmt|;
cast|const_cast
argument_list|<
name|QImage
operator|&
argument_list|>
argument_list|(
name|img
argument_list|)
operator|.
name|data_ptr
argument_list|()
operator|->
name|is_cached
operator|=
literal|true
expr_stmt|;
name|cachedImage
operator|->
name|surface
operator|=
name|surface
expr_stmt|;
name|imageCache
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|cachedImage
argument_list|,
name|cost
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|release
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|surface
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|blit
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|blit
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|dest
parameter_list|,
name|IDirectFBSurface
modifier|*
name|s
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|src
parameter_list|)
block|{
specifier|const
name|QRect
name|sr
init|=
name|src
operator|.
name|toRect
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|dr
init|=
name|q
operator|->
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|mapRect
argument_list|(
name|dest
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|dr
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
specifier|const
name|DFBRectangle
name|sRect
init|=
block|{
name|sr
operator|.
name|x
argument_list|()
block|,
name|sr
operator|.
name|y
argument_list|()
block|,
name|sr
operator|.
name|width
argument_list|()
block|,
name|sr
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|DFBResult
name|result
decl_stmt|;
if|if
condition|(
name|dr
operator|.
name|size
argument_list|()
operator|==
name|sr
operator|.
name|size
argument_list|()
condition|)
block|{
name|result
operator|=
name|surface
operator|->
name|Blit
argument_list|(
name|surface
argument_list|,
name|s
argument_list|,
operator|&
name|sRect
argument_list|,
name|dr
operator|.
name|x
argument_list|()
argument_list|,
name|dr
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|supportsStretchBlit
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|DFBRectangle
name|dRect
init|=
block|{
name|dr
operator|.
name|x
argument_list|()
block|,
name|dr
operator|.
name|y
argument_list|()
block|,
name|dr
operator|.
name|width
argument_list|()
block|,
name|dr
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|result
operator|=
name|surface
operator|->
name|StretchBlit
argument_list|(
name|surface
argument_list|,
name|s
argument_list|,
operator|&
name|sRect
argument_list|,
operator|&
name|dRect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBError
argument_list|(
literal|"QDirectFBPaintEngine::drawPixmap()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fixCoord
specifier|static
specifier|inline
name|qreal
name|fixCoord
parameter_list|(
name|qreal
name|rect_pos
parameter_list|,
name|qreal
name|pixmapSize
parameter_list|,
name|qreal
name|offset
parameter_list|)
block|{
name|qreal
name|pos
init|=
name|rect_pos
operator|-
name|offset
decl_stmt|;
while|while
condition|(
name|pos
operator|>
name|rect_pos
condition|)
name|pos
operator|-=
name|pixmapSize
expr_stmt|;
while|while
condition|(
name|pos
operator|+
name|pixmapSize
operator|<
name|rect_pos
condition|)
name|pos
operator|+=
name|pixmapSize
expr_stmt|;
return|return
name|pos
return|;
block|}
end_function
begin_function
DECL|function|drawTiledPixmap
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|dest
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|off
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|pixmapTransform
parameter_list|)
block|{
specifier|const
name|QTransform
modifier|&
name|transform
init|=
name|q
operator|->
name|state
argument_list|()
operator|->
name|matrix
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
operator|(
name|getTransformationType
argument_list|(
name|transform
argument_list|)
operator|&
name|Matrix_BlitsUnsupported
operator|)
operator|&&
operator|!
operator|(
name|getTransformationType
argument_list|(
name|pixmapTransform
argument_list|)
operator|&
name|Matrix_BlitsUnsupported
operator|)
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|destinationRect
init|=
name|transform
operator|.
name|mapRect
argument_list|(
name|dest
argument_list|)
operator|.
name|toRect
argument_list|()
operator|.
name|normalized
argument_list|()
decl_stmt|;
name|QRect
name|newClip
init|=
name|destinationRect
decl_stmt|;
if|if
condition|(
operator|!
name|currentClip
operator|.
name|isEmpty
argument_list|()
condition|)
name|newClip
operator|&=
name|currentClip
expr_stmt|;
if|if
condition|(
name|newClip
operator|.
name|isNull
argument_list|()
condition|)
return|return;
specifier|const
name|DFBRegion
name|clip
init|=
block|{
name|newClip
operator|.
name|x
argument_list|()
block|,
name|newClip
operator|.
name|y
argument_list|()
block|,
name|newClip
operator|.
name|right
argument_list|()
block|,
name|newClip
operator|.
name|bottom
argument_list|()
block|}
decl_stmt|;
name|surface
operator|->
name|SetClip
argument_list|(
name|surface
argument_list|,
operator|&
name|clip
argument_list|)
expr_stmt|;
name|QPointF
name|offset
init|=
name|pixmapTransform
operator|.
name|inverted
argument_list|()
operator|.
name|map
argument_list|(
name|off
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|transform
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxScale
argument_list|)
expr_stmt|;
name|QPixmapData
modifier|*
name|data
init|=
name|pixmap
operator|.
name|pixmapData
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|DirectFBClass
argument_list|)
expr_stmt|;
name|QDirectFBPixmapData
modifier|*
name|dfbData
init|=
cast|static_cast
argument_list|<
name|QDirectFBPixmapData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|IDirectFBSurface
modifier|*
name|sourceSurface
init|=
name|dfbData
operator|->
name|directFBSurface
argument_list|()
decl_stmt|;
name|uint
name|blitFlags
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dfbData
operator|->
name|hasAlphaChannel
argument_list|()
condition|)
name|blitFlags
operator||=
name|HasAlpha
expr_stmt|;
if|if
condition|(
name|QDirectFBScreen
operator|::
name|isPremultiplied
argument_list|(
name|dfbData
operator|->
name|pixelFormat
argument_list|()
argument_list|)
condition|)
name|blitFlags
operator||=
name|Premultiplied
expr_stmt|;
name|prepareForBlit
argument_list|(
name|blitFlags
argument_list|)
expr_stmt|;
name|QDirectFBPaintEnginePrivate
operator|::
name|unlock
argument_list|(
name|dfbData
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|pixmapSize
init|=
name|dfbData
operator|->
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|transform
operator|.
name|isScaling
argument_list|()
operator|||
name|pixmapTransform
operator|.
name|isScaling
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|supportsStretchBlit
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|qMin
argument_list|(
name|transform
operator|.
name|m11
argument_list|()
argument_list|,
name|transform
operator|.
name|m22
argument_list|()
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|offset
operator|.
name|rx
argument_list|()
operator|*=
name|transform
operator|.
name|m11
argument_list|()
expr_stmt|;
name|offset
operator|.
name|ry
argument_list|()
operator|*=
name|transform
operator|.
name|m22
argument_list|()
expr_stmt|;
specifier|const
name|QSizeF
name|mappedSize
argument_list|(
name|pixmapSize
operator|.
name|width
argument_list|()
operator|*
name|pixmapTransform
operator|.
name|m11
argument_list|()
argument_list|,
name|pixmapSize
operator|.
name|height
argument_list|()
operator|*
name|pixmapTransform
operator|.
name|m22
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|y
init|=
name|fixCoord
argument_list|(
name|destinationRect
operator|.
name|y
argument_list|()
argument_list|,
name|mappedSize
operator|.
name|height
argument_list|()
argument_list|,
name|offset
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|startX
init|=
name|fixCoord
argument_list|(
name|destinationRect
operator|.
name|x
argument_list|()
argument_list|,
name|mappedSize
operator|.
name|width
argument_list|()
argument_list|,
name|offset
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|y
operator|<=
name|destinationRect
operator|.
name|bottom
argument_list|()
condition|)
block|{
name|qreal
name|x
init|=
name|startX
decl_stmt|;
while|while
condition|(
name|x
operator|<=
name|destinationRect
operator|.
name|right
argument_list|()
condition|)
block|{
specifier|const
name|DFBRectangle
name|destination
init|=
block|{
name|qRound
argument_list|(
name|x
argument_list|)
block|,
name|qRound
argument_list|(
name|y
argument_list|)
block|,
name|mappedSize
operator|.
name|width
argument_list|()
block|,
name|mappedSize
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|surface
operator|->
name|StretchBlit
argument_list|(
name|surface
argument_list|,
name|sourceSurface
argument_list|,
literal|0
argument_list|,
operator|&
name|destination
argument_list|)
expr_stmt|;
name|x
operator|+=
name|mappedSize
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
name|y
operator|+=
name|mappedSize
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|qreal
name|y
init|=
name|fixCoord
argument_list|(
name|destinationRect
operator|.
name|y
argument_list|()
argument_list|,
name|pixmapSize
operator|.
name|height
argument_list|()
argument_list|,
name|offset
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|startX
init|=
name|fixCoord
argument_list|(
name|destinationRect
operator|.
name|x
argument_list|()
argument_list|,
name|pixmapSize
operator|.
name|width
argument_list|()
argument_list|,
name|offset
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|horizontal
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|destinationRect
operator|.
name|width
argument_list|()
operator|/
name|pixmapSize
operator|.
name|width
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|startX
operator|!=
name|destinationRect
operator|.
name|x
argument_list|()
condition|)
operator|++
name|horizontal
expr_stmt|;
name|int
name|vertical
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|destinationRect
operator|.
name|height
argument_list|()
operator|/
name|pixmapSize
operator|.
name|height
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|y
operator|!=
name|destinationRect
operator|.
name|y
argument_list|()
condition|)
operator|++
name|vertical
expr_stmt|;
specifier|const
name|int
name|maxCount
init|=
operator|(
name|vertical
operator|*
name|horizontal
operator|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|DFBRectangle
argument_list|,
literal|16
argument_list|>
name|sourceRects
argument_list|(
name|maxCount
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|DFBPoint
argument_list|,
literal|16
argument_list|>
name|points
argument_list|(
name|maxCount
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|y
operator|<=
name|destinationRect
operator|.
name|bottom
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|i
operator|<
name|maxCount
argument_list|)
expr_stmt|;
name|qreal
name|x
init|=
name|startX
decl_stmt|;
while|while
condition|(
name|x
operator|<=
name|destinationRect
operator|.
name|right
argument_list|()
condition|)
block|{
name|points
index|[
name|i
index|]
operator|.
name|x
operator|=
name|qRound
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|points
index|[
name|i
index|]
operator|.
name|y
operator|=
name|qRound
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|sourceRects
index|[
name|i
index|]
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|sourceRects
index|[
name|i
index|]
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|sourceRects
index|[
name|i
index|]
operator|.
name|w
operator|=
name|int
argument_list|(
name|pixmapSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|sourceRects
index|[
name|i
index|]
operator|.
name|h
operator|=
name|int
argument_list|(
name|pixmapSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|+=
name|pixmapSize
operator|.
name|width
argument_list|()
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|y
operator|+=
name|pixmapSize
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|surface
operator|->
name|BatchBlit
argument_list|(
name|surface
argument_list|,
name|sourceSurface
argument_list|,
name|sourceRects
operator|.
name|constData
argument_list|()
argument_list|,
name|points
operator|.
name|constData
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentClip
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|surface
operator|->
name|SetClip
argument_list|(
name|surface
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|DFBRegion
name|clip
init|=
block|{
name|currentClip
operator|.
name|x
argument_list|()
block|,
name|currentClip
operator|.
name|y
argument_list|()
block|,
name|currentClip
operator|.
name|right
argument_list|()
block|,
name|currentClip
operator|.
name|bottom
argument_list|()
block|}
decl_stmt|;
name|surface
operator|->
name|SetClip
argument_list|(
name|surface
argument_list|,
operator|&
name|clip
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateClip
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|updateClip
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|currentClip
operator|=
name|QRect
argument_list|()
expr_stmt|;
specifier|const
name|QClipData
modifier|*
name|clipData
init|=
name|clip
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clipData
operator|||
operator|!
name|clipData
operator|->
name|enabled
condition|)
block|{
name|surface
operator|->
name|SetClip
argument_list|(
name|surface
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|clipType
operator|=
name|NoClip
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clipData
operator|->
name|hasRectClip
condition|)
block|{
specifier|const
name|DFBRegion
name|r
init|=
block|{
name|clipData
operator|->
name|clipRect
operator|.
name|x
argument_list|()
block|,
name|clipData
operator|->
name|clipRect
operator|.
name|y
argument_list|()
block|,
name|clipData
operator|->
name|clipRect
operator|.
name|right
argument_list|()
block|,
name|clipData
operator|->
name|clipRect
operator|.
name|bottom
argument_list|()
block|}
decl_stmt|;
name|surface
operator|->
name|SetClip
argument_list|(
name|surface
argument_list|,
operator|&
name|r
argument_list|)
expr_stmt|;
name|currentClip
operator|=
name|clipData
operator|->
name|clipRect
operator|.
name|normalized
argument_list|()
expr_stmt|;
comment|// ### is this guaranteed to always be normalized?
name|clipType
operator|=
name|RectClip
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clipData
operator|->
name|hasRegionClip
condition|)
block|{
name|clipType
operator|=
name|RegionClip
expr_stmt|;
block|}
else|else
block|{
name|clipType
operator|=
name|ComplexClip
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|supportsStretchBlit
name|bool
name|QDirectFBPaintEnginePrivate
operator|::
name|supportsStretchBlit
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|QT_DIRECTFB_STRETCHBLIT
return|return
operator|!
operator|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|SmoothPixmapTransform
operator|)
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|systemStateChanged
name|void
name|QDirectFBPaintEnginePrivate
operator|::
name|systemStateChanged
parameter_list|()
block|{
name|QRasterPaintEnginePrivate
operator|::
name|systemStateChanged
argument_list|()
expr_stmt|;
name|updateClip
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getSurface
name|IDirectFBSurface
modifier|*
name|SurfaceCache
operator|::
name|getSurface
parameter_list|(
specifier|const
name|uint
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|==
name|buf
operator|&&
name|bufsize
operator|==
name|size
condition|)
return|return
name|surface
return|;
name|clear
argument_list|()
expr_stmt|;
specifier|const
name|DFBSurfaceDescription
name|description
init|=
name|QDirectFBScreen
operator|::
name|getSurfaceDescription
argument_list|(
name|buf
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|surface
operator|=
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|createDFBSurface
argument_list|(
name|description
argument_list|,
name|QDirectFBScreen
operator|::
name|TrackSurface
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|surface
condition|)
name|qWarning
argument_list|(
literal|"QDirectFBPaintEngine: SurfaceCache: Unable to create surface"
argument_list|)
expr_stmt|;
name|buffer
operator|=
cast|const_cast
argument_list|<
name|uint
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|bufsize
operator|=
name|size
expr_stmt|;
return|return
name|surface
return|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|SurfaceCache
operator|::
name|clear
parameter_list|()
block|{
if|if
condition|(
name|surface
operator|&&
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
condition|)
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|releaseDFBSurface
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|surface
operator|=
literal|0
expr_stmt|;
name|buffer
operator|=
literal|0
expr_stmt|;
name|bufsize
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapRect
specifier|static
specifier|inline
name|QRect
name|mapRect
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
return|return
name|transform
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mapRect
specifier|static
specifier|inline
name|QRect
name|mapRect
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
return|return
name|transform
operator|.
name|mapRect
argument_list|(
name|rect
argument_list|)
operator|.
name|toRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|map
specifier|static
specifier|inline
name|QLine
name|map
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
specifier|const
name|QLine
modifier|&
name|line
parameter_list|)
block|{
return|return
name|transform
operator|.
name|map
argument_list|(
name|line
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|map
specifier|static
specifier|inline
name|QLine
name|map
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
specifier|const
name|QLineF
modifier|&
name|line
parameter_list|)
block|{
return|return
name|transform
operator|.
name|map
argument_list|(
name|line
argument_list|)
operator|.
name|toLine
argument_list|()
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|drawLines
specifier|static
specifier|inline
name|void
name|drawLines
parameter_list|(
specifier|const
name|T
modifier|*
name|lines
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|1
condition|)
block|{
specifier|const
name|QLine
name|l
init|=
name|map
argument_list|(
name|transform
argument_list|,
name|lines
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|surface
operator|->
name|DrawLine
argument_list|(
name|surface
argument_list|,
name|l
operator|.
name|x1
argument_list|()
argument_list|,
name|l
operator|.
name|y1
argument_list|()
argument_list|,
name|l
operator|.
name|x2
argument_list|()
argument_list|,
name|l
operator|.
name|y2
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVarLengthArray
argument_list|<
name|DFBRegion
argument_list|,
literal|32
argument_list|>
name|lineArray
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QLine
name|l
init|=
name|map
argument_list|(
name|transform
argument_list|,
name|lines
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|lineArray
index|[
name|i
index|]
operator|.
name|x1
operator|=
name|l
operator|.
name|x1
argument_list|()
expr_stmt|;
name|lineArray
index|[
name|i
index|]
operator|.
name|y1
operator|=
name|l
operator|.
name|y1
argument_list|()
expr_stmt|;
name|lineArray
index|[
name|i
index|]
operator|.
name|x2
operator|=
name|l
operator|.
name|x2
argument_list|()
expr_stmt|;
name|lineArray
index|[
name|i
index|]
operator|.
name|y2
operator|=
name|l
operator|.
name|y2
argument_list|()
expr_stmt|;
block|}
name|surface
operator|->
name|DrawLines
argument_list|(
name|surface
argument_list|,
name|lineArray
operator|.
name|constData
argument_list|()
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|fillRects
specifier|static
specifier|inline
name|void
name|fillRects
parameter_list|(
specifier|const
name|T
modifier|*
name|rects
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|1
condition|)
block|{
specifier|const
name|QRect
name|r
init|=
name|mapRect
argument_list|(
name|transform
argument_list|,
name|rects
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|surface
operator|->
name|FillRectangle
argument_list|(
name|surface
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVarLengthArray
argument_list|<
name|DFBRectangle
argument_list|,
literal|32
argument_list|>
name|rectArray
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|r
init|=
name|mapRect
argument_list|(
name|transform
argument_list|,
name|rects
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|rectArray
index|[
name|i
index|]
operator|.
name|x
operator|=
name|r
operator|.
name|x
argument_list|()
expr_stmt|;
name|rectArray
index|[
name|i
index|]
operator|.
name|y
operator|=
name|r
operator|.
name|y
argument_list|()
expr_stmt|;
name|rectArray
index|[
name|i
index|]
operator|.
name|w
operator|=
name|r
operator|.
name|width
argument_list|()
expr_stmt|;
name|rectArray
index|[
name|i
index|]
operator|.
name|h
operator|=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|surface
operator|->
name|FillRectangles
argument_list|(
name|surface
argument_list|,
name|rectArray
operator|.
name|constData
argument_list|()
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|drawRects
specifier|static
specifier|inline
name|void
name|drawRects
parameter_list|(
specifier|const
name|T
modifier|*
name|rects
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|r
init|=
name|mapRect
argument_list|(
name|transform
argument_list|,
name|rects
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|surface
operator|->
name|DrawRectangle
argument_list|(
name|surface
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ptr
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
specifier|inline
specifier|const
name|T
modifier|*
name|ptr
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
return|return
operator|&
name|t
return|;
block|}
end_function
begin_function
DECL|function|ptr
template|template
parameter_list|<>
specifier|inline
specifier|const
name|bool
modifier|*
name|ptr
argument_list|<
name|bool
argument_list|>
parameter_list|(
specifier|const
name|bool
modifier|&
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|device
parameter_list|,
name|typename
name|T1
parameter_list|,
name|typename
name|T2
parameter_list|,
name|typename
name|T3
parameter_list|>
DECL|function|rasterFallbackWarn
specifier|static
name|void
name|rasterFallbackWarn
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
specifier|const
name|char
modifier|*
name|func
parameter_list|,
specifier|const
name|device
modifier|*
name|dev
parameter_list|,
name|uint
name|transformationType
parameter_list|,
name|bool
name|simplePen
parameter_list|,
name|uint
name|clipType
parameter_list|,
name|uint
name|compositionModeStatus
parameter_list|,
specifier|const
name|char
modifier|*
name|nameOne
parameter_list|,
specifier|const
name|T1
modifier|&
name|one
parameter_list|,
specifier|const
name|char
modifier|*
name|nameTwo
parameter_list|,
specifier|const
name|T2
modifier|&
name|two
parameter_list|,
specifier|const
name|char
modifier|*
name|nameThree
parameter_list|,
specifier|const
name|T3
modifier|&
name|three
parameter_list|)
block|{
name|QString
name|out
decl_stmt|;
name|QDebug
name|dbg
argument_list|(
operator|&
name|out
argument_list|)
decl_stmt|;
name|dbg
operator|<<
name|msg
operator|<<
operator|(
name|QByteArray
argument_list|(
name|func
argument_list|)
operator|+
literal|"()"
operator|)
operator|<<
literal|"painting on"
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Widget
condition|)
block|{
name|dbg
operator|<<
cast|static_cast
argument_list|<
specifier|const
name|QWidget
operator|*
argument_list|>
argument_list|(
name|dev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dbg
operator|<<
name|dev
operator|<<
literal|"of type"
operator|<<
name|dev
operator|->
name|devType
argument_list|()
expr_stmt|;
block|}
name|dbg
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"transformationType 0x%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|transformationType
argument_list|,
literal|3
argument_list|,
literal|16
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
operator|<<
literal|"simplePen"
operator|<<
name|simplePen
operator|<<
literal|"clipType"
operator|<<
name|clipType
operator|<<
literal|"compositionModeStatus"
operator|<<
name|compositionModeStatus
expr_stmt|;
specifier|const
name|T1
modifier|*
name|t1
init|=
name|ptr
argument_list|(
name|one
argument_list|)
decl_stmt|;
specifier|const
name|T2
modifier|*
name|t2
init|=
name|ptr
argument_list|(
name|two
argument_list|)
decl_stmt|;
specifier|const
name|T3
modifier|*
name|t3
init|=
name|ptr
argument_list|(
name|three
argument_list|)
decl_stmt|;
if|if
condition|(
name|t1
condition|)
block|{
name|dbg
operator|<<
name|nameOne
operator|<<
operator|*
name|t1
expr_stmt|;
if|if
condition|(
name|t2
condition|)
block|{
name|dbg
operator|<<
name|nameTwo
operator|<<
operator|*
name|t2
expr_stmt|;
if|if
condition|(
name|t3
condition|)
block|{
name|dbg
operator|<<
name|nameThree
operator|<<
operator|*
name|t3
expr_stmt|;
block|}
block|}
block|}
name|qWarning
argument_list|(
literal|"%s"
argument_list|,
name|qPrintable
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DIRECTFB
end_comment
end_unit
