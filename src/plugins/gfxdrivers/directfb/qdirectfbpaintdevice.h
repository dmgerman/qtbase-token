begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDIRECTFBPAINTDEVICE_H
end_ifndef
begin_define
DECL|macro|QDIRECTFBPAINTDEVICE_H
define|#
directive|define
name|QDIRECTFBPAINTDEVICE_H
end_define
begin_include
include|#
directive|include
file|<private/qpaintengine_raster_p.h>
end_include
begin_include
include|#
directive|include
file|"qdirectfbscreen.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_DIRECTFB
end_ifndef
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
comment|// Inherited by both window surface and pixmap
name|class
name|QDirectFBPaintEngine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QDirectFBPaintDevice
range|:
name|public
name|QCustomRasterPaintDevice
block|{
name|public
operator|:
operator|~
name|QDirectFBPaintDevice
argument_list|()
block|;
name|virtual
name|IDirectFBSurface
operator|*
name|directFBSurface
argument_list|()
specifier|const
block|;
name|bool
name|lockSurface
argument_list|(
argument|DFBSurfaceLockFlags lockFlags
argument_list|)
block|;
name|void
name|unlockSurface
argument_list|()
block|;
comment|// Reimplemented from QCustomRasterPaintDevice:
name|void
operator|*
name|memory
argument_list|()
specifier|const
block|;
name|QImage
operator|::
name|Format
name|format
argument_list|()
specifier|const
block|;
name|int
name|bytesPerLine
argument_list|()
specifier|const
block|;
name|QSize
name|size
argument_list|()
specifier|const
block|;
name|int
name|metric
argument_list|(
argument|QPaintDevice::PaintDeviceMetric metric
argument_list|)
specifier|const
block|;
name|DFBSurfaceLockFlags
name|lockFlags
argument_list|()
specifier|const
block|{
return|return
name|lockFlgs
return|;
block|}
name|QPaintEngine
operator|*
name|paintEngine
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|QDirectFBPaintDevice
argument_list|(
name|QDirectFBScreen
operator|*
name|scr
argument_list|)
block|;
specifier|inline
name|int
name|dotsPerMeterX
argument_list|()
specifier|const
block|{
return|return
operator|(
name|screen
operator|->
name|deviceWidth
argument_list|()
operator|*
literal|1000
operator|)
operator|/
name|screen
operator|->
name|physicalWidth
argument_list|()
return|;
block|}
specifier|inline
name|int
name|dotsPerMeterY
argument_list|()
specifier|const
block|{
return|return
operator|(
name|screen
operator|->
name|deviceHeight
argument_list|()
operator|*
literal|1000
operator|)
operator|/
name|screen
operator|->
name|physicalHeight
argument_list|()
return|;
block|}
name|IDirectFBSurface
operator|*
name|dfbSurface
block|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
name|void
name|releaseSubSurface
argument_list|()
block|;
name|IDirectFBSurface
operator|*
name|subSurface
block|;
name|friend
name|class
name|QDirectFBPaintEnginePrivate
block|;
name|bool
name|syncPending
block|;
endif|#
directive|endif
name|QImage
name|lockedImage
block|;
name|QDirectFBScreen
operator|*
name|screen
block|;
name|int
name|bpl
block|;
name|DFBSurfaceLockFlags
name|lockFlgs
block|;
name|uchar
operator|*
name|mem
block|;
name|QDirectFBPaintEngine
operator|*
name|engine
block|;
name|QImage
operator|::
name|Format
name|imageFormat
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DIRECTFB
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QDIRECTFBPAINTDEVICE_H
end_comment
end_unit
