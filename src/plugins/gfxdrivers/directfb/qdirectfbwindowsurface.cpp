begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbwindowsurface.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbscreen.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbpaintengine.h"
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<qwidget.h>
end_include
begin_include
include|#
directive|include
file|<qwindowsystem_qws.h>
end_include
begin_include
include|#
directive|include
file|<qpaintdevice.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_DIRECTFB
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QDirectFBWindowSurface
name|QDirectFBWindowSurface
operator|::
name|QDirectFBWindowSurface
parameter_list|(
name|DFBSurfaceFlipFlags
name|flip
parameter_list|,
name|QDirectFBScreen
modifier|*
name|scr
parameter_list|)
member_init_list|:
name|QDirectFBPaintDevice
argument_list|(
name|scr
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_WM
member_init_list|,
name|dfbWindow
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
member_init_list|,
name|flipFlags
argument_list|(
name|flip
argument_list|)
member_init_list|,
name|boundingRectFlip
argument_list|(
name|scr
operator|->
name|directFBFlags
argument_list|()
operator|&
name|QDirectFBScreen
operator|::
name|BoundingRectFlip
argument_list|)
member_init_list|,
name|flushPending
argument_list|(
literal|false
argument_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
name|mode
operator|=
name|Offscreen
expr_stmt|;
endif|#
directive|endif
name|setSurfaceFlags
argument_list|(
name|Opaque
operator||
name|Buffered
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_TIMING
name|frames
operator|=
literal|0
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_constructor
DECL|function|QDirectFBWindowSurface
name|QDirectFBWindowSurface
operator|::
name|QDirectFBWindowSurface
parameter_list|(
name|DFBSurfaceFlipFlags
name|flip
parameter_list|,
name|QDirectFBScreen
modifier|*
name|scr
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QWSWindowSurface
argument_list|(
name|widget
argument_list|)
member_init_list|,
name|QDirectFBPaintDevice
argument_list|(
name|scr
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_WM
member_init_list|,
name|dfbWindow
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
member_init_list|,
name|flipFlags
argument_list|(
name|flip
argument_list|)
member_init_list|,
name|boundingRectFlip
argument_list|(
name|scr
operator|->
name|directFBFlags
argument_list|()
operator|&
name|QDirectFBScreen
operator|::
name|BoundingRectFlip
argument_list|)
member_init_list|,
name|flushPending
argument_list|(
literal|false
argument_list|)
block|{
name|SurfaceFlags
name|flags
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|widget
operator|||
name|widget
operator|->
name|window
argument_list|()
operator|->
name|windowOpacity
argument_list|()
operator|==
literal|0xff
condition|)
name|flags
operator||=
name|Opaque
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_PaintOnScreen
argument_list|)
condition|)
block|{
name|flags
operator|=
name|RegionReserved
expr_stmt|;
name|mode
operator|=
name|Primary
expr_stmt|;
block|}
else|else
block|{
name|mode
operator|=
name|Offscreen
expr_stmt|;
name|flags
operator|=
name|Buffered
expr_stmt|;
block|}
endif|#
directive|endif
name|setSurfaceFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_TIMING
name|frames
operator|=
literal|0
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFBWindowSurface
name|QDirectFBWindowSurface
operator|::
name|~
name|QDirectFBWindowSurface
parameter_list|()
block|{
name|releaseSurface
argument_list|()
expr_stmt|;
comment|// these are not tracked by QDirectFBScreen so we don't want QDirectFBPaintDevice to release it
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QDirectFBWindowSurface
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WM
end_ifdef
begin_function
DECL|function|raise
name|void
name|QDirectFBWindowSurface
operator|::
name|raise
parameter_list|()
block|{
if|if
condition|(
name|IDirectFBWindow
modifier|*
name|window
init|=
name|directFBWindow
argument_list|()
condition|)
block|{
name|window
operator|->
name|RaiseToTop
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|directFBWindow
name|IDirectFBWindow
modifier|*
name|QDirectFBWindowSurface
operator|::
name|directFBWindow
parameter_list|()
specifier|const
block|{
return|return
name|dfbWindow
return|;
block|}
end_function
begin_function
DECL|function|createWindow
name|void
name|QDirectFBWindowSurface
operator|::
name|createWindow
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|IDirectFBDisplayLayer
modifier|*
name|layer
init|=
name|screen
operator|->
name|dfbDisplayLayer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|layer
condition|)
name|qFatal
argument_list|(
literal|"QDirectFBWindowSurface: Unable to get primary display layer!"
argument_list|)
expr_stmt|;
name|updateIsOpaque
argument_list|()
expr_stmt|;
name|DFBWindowDescription
name|description
decl_stmt|;
name|memset
argument_list|(
operator|&
name|description
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBWindowDescription
argument_list|)
argument_list|)
expr_stmt|;
name|description
operator|.
name|flags
operator|=
name|DWDESC_CAPS
operator||
name|DWDESC_HEIGHT
operator||
name|DWDESC_WIDTH
operator||
name|DWDESC_POSX
operator||
name|DWDESC_POSY
operator||
name|DWDESC_SURFACE_CAPS
operator||
name|DWDESC_PIXELFORMAT
expr_stmt|;
name|description
operator|.
name|caps
operator|=
name|DWCAPS_NODECORATION
expr_stmt|;
name|description
operator|.
name|surface_caps
operator|=
name|DSCAPS_NONE
expr_stmt|;
name|imageFormat
operator|=
name|screen
operator|->
name|pixelFormat
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|surfaceFlags
argument_list|()
operator|&
name|Opaque
operator|)
condition|)
block|{
name|imageFormat
operator|=
name|screen
operator|->
name|alphaPixmapFormat
argument_list|()
expr_stmt|;
name|description
operator|.
name|caps
operator||=
name|DWCAPS_ALPHACHANNEL
expr_stmt|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010200
operator|)
name|description
operator|.
name|flags
operator||=
name|DWDESC_OPTIONS
expr_stmt|;
name|description
operator|.
name|options
operator||=
name|DWOP_ALPHACHANNEL
expr_stmt|;
endif|#
directive|endif
block|}
name|description
operator|.
name|pixelformat
operator|=
name|QDirectFBScreen
operator|::
name|getSurfacePixelFormat
argument_list|(
name|imageFormat
argument_list|)
expr_stmt|;
name|description
operator|.
name|posx
operator|=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
name|description
operator|.
name|posy
operator|=
name|rect
operator|.
name|y
argument_list|()
expr_stmt|;
name|description
operator|.
name|width
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|description
operator|.
name|height
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|QDirectFBScreen
operator|::
name|isPremultiplied
argument_list|(
name|imageFormat
argument_list|)
condition|)
name|description
operator|.
name|surface_caps
operator|=
name|DSCAPS_PREMULTIPLIED
expr_stmt|;
if|if
condition|(
name|screen
operator|->
name|directFBFlags
argument_list|()
operator|&
name|QDirectFBScreen
operator|::
name|VideoOnly
condition|)
name|description
operator|.
name|surface_caps
operator||=
name|DSCAPS_VIDEOONLY
expr_stmt|;
name|DFBResult
name|result
init|=
name|layer
operator|->
name|CreateWindow
argument_list|(
name|layer
argument_list|,
operator|&
name|description
argument_list|,
operator|&
name|dfbWindow
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBErrorFatal
argument_list|(
literal|"QDirectFBWindowSurface::createWindow"
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
condition|)
block|{
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
condition|)
block|{
name|dfbWindow
operator|->
name|SetStackingClass
argument_list|(
name|dfbWindow
argument_list|,
name|DWSC_UPPER
argument_list|)
expr_stmt|;
block|}
name|DFBWindowID
name|winid
decl_stmt|;
name|result
operator|=
name|dfbWindow
operator|->
name|GetID
argument_list|(
name|dfbWindow
argument_list|,
operator|&
name|winid
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBWindowSurface::createWindow. Can't get ID"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|window
argument_list|()
operator|->
name|setProperty
argument_list|(
literal|"_q_DirectFBWindowID"
argument_list|,
name|winid
argument_list|)
expr_stmt|;
block|}
block|}
name|Q_ASSERT
argument_list|(
operator|!
name|dfbSurface
argument_list|)
expr_stmt|;
name|dfbWindow
operator|->
name|GetSurface
argument_list|(
name|dfbWindow
argument_list|,
operator|&
name|dfbSurface
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowGeometry
specifier|static
name|DFBResult
name|setWindowGeometry
parameter_list|(
name|IDirectFBWindow
modifier|*
name|dfbWindow
parameter_list|,
specifier|const
name|QRect
modifier|&
name|old
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|DFBResult
name|result
init|=
name|DFB_OK
decl_stmt|;
specifier|const
name|bool
name|isMove
init|=
name|old
operator|.
name|isEmpty
argument_list|()
operator|||
name|rect
operator|.
name|topLeft
argument_list|()
operator|!=
name|old
operator|.
name|topLeft
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isResize
init|=
name|rect
operator|.
name|size
argument_list|()
operator|!=
name|old
operator|.
name|size
argument_list|()
decl_stmt|;
if|#
directive|if
operator|(
name|Q_DIRECTFB_VERSION
operator|>=
literal|0x010000
operator|)
if|if
condition|(
name|isResize
operator|&&
name|isMove
condition|)
block|{
name|result
operator|=
name|dfbWindow
operator|->
name|SetBounds
argument_list|(
name|dfbWindow
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isResize
condition|)
block|{
name|result
operator|=
name|dfbWindow
operator|->
name|Resize
argument_list|(
name|dfbWindow
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isMove
condition|)
block|{
name|result
operator|=
name|dfbWindow
operator|->
name|MoveTo
argument_list|(
name|dfbWindow
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
if|if
condition|(
name|isResize
condition|)
block|{
name|result
operator|=
name|dfbWindow
operator|->
name|Resize
argument_list|(
name|dfbWindow
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMove
condition|)
block|{
name|result
operator|=
name|dfbWindow
operator|->
name|MoveTo
argument_list|(
name|dfbWindow
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DIRECTFB_WM
end_comment
begin_function
DECL|function|setGeometry
name|void
name|QDirectFBWindowSurface
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|QRect
name|oldRect
init|=
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldRect
operator|==
name|rect
condition|)
return|return;
name|IDirectFBSurface
modifier|*
name|oldSurface
init|=
name|dfbSurface
decl_stmt|;
specifier|const
name|bool
name|sizeChanged
init|=
name|oldRect
operator|.
name|size
argument_list|()
operator|!=
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|sizeChanged
condition|)
block|{
operator|delete
name|engine
expr_stmt|;
name|engine
operator|=
literal|0
expr_stmt|;
name|releaseSurface
argument_list|()
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|dfbSurface
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|isNull
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_WM
if|if
condition|(
name|dfbWindow
condition|)
block|{
if|if
condition|(
name|window
argument_list|()
condition|)
name|window
argument_list|()
operator|->
name|setProperty
argument_list|(
literal|"_q_DirectFBWindowID"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|dfbWindow
operator|->
name|Release
argument_list|(
name|dfbWindow
argument_list|)
expr_stmt|;
name|dfbWindow
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
operator|!
name|dfbSurface
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
name|Q_ASSERT
argument_list|(
operator|!
name|subSurface
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WM
if|if
condition|(
operator|!
name|dfbWindow
condition|)
block|{
name|createWindow
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setWindowGeometry
argument_list|(
name|dfbWindow
argument_list|,
name|oldRect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|sizeChanged
operator|||
operator|!
name|dfbSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|sizeChanged
condition|)
name|dfbWindow
operator|->
name|GetSurface
argument_list|(
name|dfbWindow
argument_list|,
operator|&
name|dfbSurface
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|IDirectFBSurface
modifier|*
name|primarySurface
init|=
name|screen
operator|->
name|primarySurface
argument_list|()
decl_stmt|;
name|DFBResult
name|result
init|=
name|DFB_OK
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|Primary
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|primarySurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|==
name|screen
operator|->
name|region
argument_list|()
operator|.
name|boundingRect
argument_list|()
condition|)
block|{
name|dfbSurface
operator|=
name|primarySurface
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|DFBRectangle
name|r
init|=
block|{
name|rect
operator|.
name|x
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|result
operator|=
name|primarySurface
operator|->
name|GetSubSurface
argument_list|(
name|primarySurface
argument_list|,
operator|&
name|r
argument_list|,
operator|&
name|dfbSurface
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// mode == Offscreen
if|if
condition|(
operator|!
name|dfbSurface
condition|)
block|{
name|dfbSurface
operator|=
name|screen
operator|->
name|createDFBSurface
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|surfaceFlags
argument_list|()
operator|&
name|Opaque
condition|?
name|screen
operator|->
name|pixelFormat
argument_list|()
else|:
name|screen
operator|->
name|alphaPixmapFormat
argument_list|()
argument_list|,
name|QDirectFBScreen
operator|::
name|DontTrackSurface
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBErrorFatal
argument_list|(
literal|"QDirectFBWindowSurface::setGeometry()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|oldSurface
operator|!=
name|dfbSurface
condition|)
block|{
name|imageFormat
operator|=
name|dfbSurface
condition|?
name|QDirectFBScreen
operator|::
name|getImageFormat
argument_list|(
name|dfbSurface
argument_list|)
else|:
name|QImage
operator|::
name|Format_Invalid
expr_stmt|;
block|}
if|if
condition|(
name|oldRect
operator|.
name|size
argument_list|()
operator|!=
name|rect
operator|.
name|size
argument_list|()
condition|)
block|{
name|QWSWindowSurface
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowSurface
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|permanentState
name|QByteArray
name|QDirectFBWindowSurface
operator|::
name|permanentState
parameter_list|()
specifier|const
block|{
name|QByteArray
name|state
argument_list|(
sizeof|sizeof
argument_list|(
name|SurfaceFlags
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|DFBWindowID
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|char
modifier|*
name|ptr
init|=
name|state
operator|.
name|data
argument_list|()
decl_stmt|;
name|SurfaceFlags
name|flags
init|=
name|surfaceFlags
argument_list|()
decl_stmt|;
name|memcpy
argument_list|(
name|ptr
argument_list|,
operator|&
name|flags
argument_list|,
sizeof|sizeof
argument_list|(
name|SurfaceFlags
argument_list|)
argument_list|)
expr_stmt|;
name|ptr
operator|+=
sizeof|sizeof
argument_list|(
name|SurfaceFlags
argument_list|)
expr_stmt|;
name|DFBWindowID
name|did
init|=
call|(
name|DFBWindowID
call|)
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|dfbWindow
condition|)
name|dfbWindow
operator|->
name|GetID
argument_list|(
name|dfbWindow
argument_list|,
operator|&
name|did
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|ptr
argument_list|,
operator|&
name|did
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBWindowID
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|setPermanentState
name|void
name|QDirectFBWindowSurface
operator|::
name|setPermanentState
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|state
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|ptr
init|=
name|state
operator|.
name|constData
argument_list|()
decl_stmt|;
name|IDirectFBDisplayLayer
modifier|*
name|layer
init|=
name|screen
operator|->
name|dfbDisplayLayer
argument_list|()
decl_stmt|;
name|SurfaceFlags
name|flags
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|flags
argument_list|,
name|ptr
argument_list|,
sizeof|sizeof
argument_list|(
name|SurfaceFlags
argument_list|)
argument_list|)
expr_stmt|;
name|setSurfaceFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|ptr
operator|+=
sizeof|sizeof
argument_list|(
name|SurfaceFlags
argument_list|)
expr_stmt|;
name|DFBWindowID
name|id
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|id
argument_list|,
name|ptr
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBWindowID
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dfbSurface
condition|)
name|dfbSurface
operator|->
name|Release
argument_list|(
name|dfbSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|!=
operator|(
name|DFBWindowID
operator|)
operator|-
literal|1
condition|)
block|{
name|IDirectFBWindow
modifier|*
name|dw
decl_stmt|;
name|layer
operator|->
name|GetWindow
argument_list|(
name|layer
argument_list|,
name|id
argument_list|,
operator|&
name|dw
argument_list|)
expr_stmt|;
if|if
condition|(
name|dw
operator|->
name|GetSurface
argument_list|(
name|dw
argument_list|,
operator|&
name|dfbSurface
argument_list|)
operator|!=
name|DFB_OK
condition|)
name|dfbSurface
operator|=
literal|0
expr_stmt|;
name|dw
operator|->
name|Release
argument_list|(
name|dw
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dfbSurface
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QDirectFBWindowSurface
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dfbSurface
operator|||
operator|!
operator|(
name|flipFlags
operator|&
name|DSFLIP_BLIT
operator|)
operator|||
name|region
operator|.
name|rectCount
argument_list|()
operator|!=
literal|1
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|flushPending
condition|)
block|{
name|dfbSurface
operator|->
name|Flip
argument_list|(
name|dfbSurface
argument_list|,
literal|0
argument_list|,
name|DSFLIP_BLIT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|flushPending
operator|=
literal|true
expr_stmt|;
block|}
name|dfbSurface
operator|->
name|SetBlittingFlags
argument_list|(
name|dfbSurface
argument_list|,
name|DSBLIT_NOFX
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|r
init|=
name|region
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
specifier|const
name|DFBRectangle
name|rect
init|=
block|{
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|,
name|r
operator|.
name|width
argument_list|()
block|,
name|r
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|dfbSurface
operator|->
name|Blit
argument_list|(
name|dfbSurface
argument_list|,
name|dfbSurface
argument_list|,
operator|&
name|rect
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|dx
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|dy
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|move
name|bool
name|QDirectFBWindowSurface
operator|::
name|move
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|moveBy
parameter_list|)
block|{
name|setGeometry
argument_list|(
name|geometry
argument_list|()
operator|.
name|translated
argument_list|(
name|moveBy
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setOpaque
name|void
name|QDirectFBWindowSurface
operator|::
name|setOpaque
parameter_list|(
name|bool
name|opaque
parameter_list|)
block|{
name|SurfaceFlags
name|flags
init|=
name|surfaceFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|opaque
operator|!=
operator|(
name|flags
operator|&
name|Opaque
operator|)
condition|)
block|{
if|if
condition|(
name|opaque
condition|)
block|{
name|flags
operator||=
name|Opaque
expr_stmt|;
block|}
else|else
block|{
name|flags
operator|&=
operator|~
name|Opaque
expr_stmt|;
block|}
name|setSurfaceFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QDirectFBWindowSurface
operator|::
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|QWidget
modifier|*
name|win
init|=
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|win
condition|)
return|return;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_QWS_PROXYSCREEN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_GRAPHICSVIEW
argument_list|)
name|QWExtra
modifier|*
name|extra
init|=
name|qt_widget_private
argument_list|(
name|widget
argument_list|)
operator|->
name|extraData
argument_list|()
decl_stmt|;
if|if
condition|(
name|extra
operator|&&
name|extra
operator|->
name|proxyWidget
condition|)
return|return;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|quint8
name|windowOpacity
init|=
name|quint8
argument_list|(
name|win
operator|->
name|windowOpacity
argument_list|()
operator|*
literal|0xff
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|windowGeometry
init|=
name|geometry
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DIRECTFB_WM
name|quint8
name|currentOpacity
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|dfbWindow
argument_list|)
expr_stmt|;
name|dfbWindow
operator|->
name|GetOpacity
argument_list|(
name|dfbWindow
argument_list|,
operator|&
name|currentOpacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentOpacity
operator|!=
name|windowOpacity
condition|)
block|{
name|dfbWindow
operator|->
name|SetOpacity
argument_list|(
name|dfbWindow
argument_list|,
name|windowOpacity
argument_list|)
expr_stmt|;
block|}
name|screen
operator|->
name|flipSurface
argument_list|(
name|dfbSurface
argument_list|,
name|flipFlags
argument_list|,
name|region
argument_list|,
name|offset
argument_list|)
expr_stmt|;
else|#
directive|else
name|setOpaque
argument_list|(
name|windowOpacity
operator|==
literal|0xff
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|Offscreen
condition|)
block|{
name|screen
operator|->
name|exposeRegion
argument_list|(
name|region
operator|.
name|translated
argument_list|(
name|offset
operator|+
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|screen
operator|->
name|flipSurface
argument_list|(
name|dfbSurface
argument_list|,
name|flipFlags
argument_list|,
name|region
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_DIRECTFB_TIMING
enum|enum
block|{
name|Secs
init|=
literal|3
block|}
enum|;
operator|++
name|frames
expr_stmt|;
if|if
condition|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|>=
name|Secs
operator|*
literal|1000
condition|)
block|{
name|qDebug
argument_list|(
literal|"%d fps"
argument_list|,
name|int
argument_list|(
name|double
argument_list|(
name|frames
argument_list|)
operator|/
name|double
argument_list|(
name|Secs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|frames
operator|=
literal|0
expr_stmt|;
name|timer
operator|.
name|restart
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|flushPending
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QDirectFBWindowSurface
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
operator|!
name|engine
condition|)
block|{
name|engine
operator|=
operator|new
name|QDirectFBPaintEngine
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dfbSurface
condition|)
block|{
specifier|const
name|QWidget
modifier|*
name|win
init|=
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|win
operator|&&
name|win
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoSystemBackground
argument_list|)
condition|)
block|{
name|QDirectFBScreen
operator|::
name|solidFill
argument_list|(
name|dfbSurface
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
block|}
name|flushPending
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QDirectFBWindowSurface
operator|::
name|endPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_SUBSURFACE
name|unlockSurface
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|directFBSurface
name|IDirectFBSurface
modifier|*
name|QDirectFBWindowSurface
operator|::
name|directFBSurface
parameter_list|()
specifier|const
block|{
return|return
name|dfbSurface
return|;
block|}
end_function
begin_function
DECL|function|surfaceForWidget
name|IDirectFBSurface
modifier|*
name|QDirectFBWindowSurface
operator|::
name|surfaceForWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QRect
modifier|*
name|rect
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dfbSurface
condition|)
return|return
literal|0
return|;
name|QWidget
modifier|*
name|win
init|=
name|window
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|win
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
condition|)
block|{
if|if
condition|(
name|win
operator|==
name|widget
condition|)
block|{
operator|*
name|rect
operator|=
name|widget
operator|->
name|rect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|*
name|rect
operator|=
name|QRect
argument_list|(
name|widget
operator|->
name|mapTo
argument_list|(
name|win
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|widget
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Q_ASSERT
argument_list|(
name|win
operator|==
name|widget
operator|||
name|win
operator|->
name|isAncestorOf
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dfbSurface
return|;
block|}
end_function
begin_function
DECL|function|releaseSurface
name|void
name|QDirectFBWindowSurface
operator|::
name|releaseSurface
parameter_list|()
block|{
if|if
condition|(
name|dfbSurface
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_DIRECTFB_SUBSURFACE
name|releaseSubSurface
argument_list|()
expr_stmt|;
else|#
directive|else
name|unlockSurface
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_NO_DIRECTFB_WM
name|Q_ASSERT
argument_list|(
name|screen
operator|->
name|primarySurface
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dfbSurface
operator|!=
name|screen
operator|->
name|primarySurface
argument_list|()
condition|)
endif|#
directive|endif
name|dfbSurface
operator|->
name|Release
argument_list|(
name|dfbSurface
argument_list|)
expr_stmt|;
name|dfbSurface
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateIsOpaque
name|void
name|QDirectFBWindowSurface
operator|::
name|updateIsOpaque
parameter_list|()
block|{
specifier|const
name|QWidget
modifier|*
name|win
init|=
name|window
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|win
argument_list|)
expr_stmt|;
if|if
condition|(
name|win
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|)
operator|||
name|win
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_PaintOnScreen
argument_list|)
condition|)
block|{
name|setOpaque
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|qFuzzyCompare
argument_list|(
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|win
operator|->
name|windowOpacity
argument_list|()
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
condition|)
block|{
specifier|const
name|QPalette
modifier|&
name|pal
init|=
name|win
operator|->
name|palette
argument_list|()
decl_stmt|;
if|if
condition|(
name|win
operator|->
name|autoFillBackground
argument_list|()
condition|)
block|{
specifier|const
name|QBrush
modifier|&
name|autoFillBrush
init|=
name|pal
operator|.
name|brush
argument_list|(
name|win
operator|->
name|backgroundRole
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|autoFillBrush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
operator|&&
name|autoFillBrush
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
name|setOpaque
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|win
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|win
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoSystemBackground
argument_list|)
condition|)
block|{
specifier|const
name|QBrush
modifier|&
name|windowBrush
init|=
name|win
operator|->
name|palette
argument_list|()
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
decl_stmt|;
if|if
condition|(
name|windowBrush
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
operator|&&
name|windowBrush
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
name|setOpaque
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|setOpaque
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DIRECTFB
end_comment
end_unit
