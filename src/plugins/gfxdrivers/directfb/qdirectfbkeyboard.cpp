begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbkeyboard.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_DIRECTFB
end_ifndef
begin_include
include|#
directive|include
file|"qdirectfbscreen.h"
end_include
begin_include
include|#
directive|include
file|<qobject.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<directfb.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|KeyMap
class|class
name|KeyMap
super|:
specifier|public
name|QHash
argument_list|<
name|DFBInputDeviceKeySymbol
argument_list|,
name|Qt
operator|::
name|Key
argument_list|>
block|{
public|public:
name|KeyMap
parameter_list|()
constructor_decl|;
block|}
class|;
end_class
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|KeyMap
argument_list|,
name|keymap
argument_list|)
expr_stmt|;
end_expr_stmt
begin_class
DECL|class|QDirectFBKeyboardHandlerPrivate
class|class
name|QDirectFBKeyboardHandlerPrivate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|QDirectFBKeyboardHandlerPrivate
parameter_list|(
name|QDirectFBKeyboardHandler
modifier|*
name|handler
parameter_list|)
constructor_decl|;
name|~
name|QDirectFBKeyboardHandlerPrivate
parameter_list|()
destructor_decl|;
name|void
name|suspend
parameter_list|()
function_decl|;
name|void
name|resume
parameter_list|()
function_decl|;
private|private:
DECL|member|handler
name|QDirectFBKeyboardHandler
modifier|*
name|handler
decl_stmt|;
DECL|member|eventBuffer
name|IDirectFBEventBuffer
modifier|*
name|eventBuffer
decl_stmt|;
DECL|member|keyboardNotifier
name|QSocketNotifier
modifier|*
name|keyboardNotifier
decl_stmt|;
DECL|member|event
name|DFBEvent
name|event
decl_stmt|;
DECL|member|bytesRead
name|int
name|bytesRead
decl_stmt|;
DECL|member|lastUnicode
DECL|member|lastKeycode
name|int
name|lastUnicode
decl_stmt|,
name|lastKeycode
decl_stmt|;
DECL|member|lastModifiers
name|Qt
operator|::
name|KeyboardModifiers
name|lastModifiers
decl_stmt|;
private|private
name|Q_SLOTS
private|:
name|void
name|readKeyboardData
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QDirectFBKeyboardHandlerPrivate
name|QDirectFBKeyboardHandlerPrivate
operator|::
name|QDirectFBKeyboardHandlerPrivate
parameter_list|(
name|QDirectFBKeyboardHandler
modifier|*
name|h
parameter_list|)
member_init_list|:
name|handler
argument_list|(
name|h
argument_list|)
member_init_list|,
name|eventBuffer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|keyboardNotifier
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bytesRead
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lastUnicode
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lastKeycode
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lastModifiers
argument_list|(
literal|0
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qt_screen
argument_list|)
expr_stmt|;
name|IDirectFB
modifier|*
name|fb
init|=
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|dfb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fb
condition|)
block|{
name|qCritical
argument_list|(
literal|"QDirectFBKeyboardHandler: DirectFB not initialized"
argument_list|)
expr_stmt|;
return|return;
block|}
name|DFBResult
name|result
decl_stmt|;
name|result
operator|=
name|fb
operator|->
name|CreateInputEventBuffer
argument_list|(
name|fb
argument_list|,
name|DICAPS_KEYS
argument_list|,
name|DFB_TRUE
argument_list|,
operator|&
name|eventBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBKeyboardHandler: "
literal|"Unable to create input event buffer"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|fd
decl_stmt|;
name|result
operator|=
name|eventBuffer
operator|->
name|CreateFileDescriptor
argument_list|(
name|eventBuffer
argument_list|,
operator|&
name|fd
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBKeyboardHandler: "
literal|"Unable to create file descriptor"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|flags
init|=
operator|::
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_GETFL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
operator|::
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETFL
argument_list|,
name|flags
operator||
name|O_NONBLOCK
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|event
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|keyboardNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|keyboardNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readKeyboardData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resume
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|suspend
name|void
name|QDirectFBKeyboardHandlerPrivate
operator|::
name|suspend
parameter_list|()
block|{
name|keyboardNotifier
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resume
name|void
name|QDirectFBKeyboardHandlerPrivate
operator|::
name|resume
parameter_list|()
block|{
name|eventBuffer
operator|->
name|Reset
argument_list|(
name|eventBuffer
argument_list|)
expr_stmt|;
name|keyboardNotifier
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QDirectFBKeyboardHandlerPrivate
name|QDirectFBKeyboardHandlerPrivate
operator|::
name|~
name|QDirectFBKeyboardHandlerPrivate
parameter_list|()
block|{
if|if
condition|(
name|eventBuffer
condition|)
name|eventBuffer
operator|->
name|Release
argument_list|(
name|eventBuffer
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|readKeyboardData
name|void
name|QDirectFBKeyboardHandlerPrivate
operator|::
name|readKeyboardData
parameter_list|()
block|{
if|if
condition|(
operator|!
name|qt_screen
condition|)
return|return;
for|for
control|(
init|;
condition|;
control|)
block|{
comment|// GetEvent returns DFB_UNSUPPORTED after CreateFileDescriptor().
comment|// This seems stupid and I really hope it's a bug which will be fixed.
comment|// DFBResult ret = eventBuffer->GetEvent(eventBuffer,&event);
name|char
modifier|*
name|buf
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
operator|&
name|event
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
operator|::
name|read
argument_list|(
name|keyboardNotifier
operator|->
name|socket
argument_list|()
argument_list|,
name|buf
operator|+
name|bytesRead
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBEvent
argument_list|)
operator|-
name|bytesRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|errno
operator|!=
name|EAGAIN
condition|)
name|qWarning
argument_list|(
literal|"QDirectFBKeyboardHandlerPrivate::readKeyboardData(): %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Q_ASSERT
argument_list|(
name|ret
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|bytesRead
operator|+=
name|ret
expr_stmt|;
if|if
condition|(
name|bytesRead
operator|<
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|DFBEvent
argument_list|)
argument_list|)
condition|)
break|break;
name|bytesRead
operator|=
literal|0
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|event
operator|.
name|clazz
operator|==
name|DFEC_INPUT
argument_list|)
expr_stmt|;
specifier|const
name|DFBInputEvent
name|input
init|=
name|event
operator|.
name|input
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
comment|// Not implemented:
comment|// if (input.modifiers& DIMM_SUPER)
comment|// if (input.modifiers& DIMM_HYPER)
if|if
condition|(
operator|!
operator|(
name|input
operator|.
name|flags
operator|&
name|DIEF_KEYSYMBOL
operator|)
operator|||
operator|!
operator|(
name|input
operator|.
name|flags
operator|&
name|DIEF_KEYID
operator|)
operator|||
operator|!
operator|(
name|input
operator|.
name|type
operator|&
operator|(
name|DIET_KEYPRESS
operator||
name|DIET_KEYRELEASE
operator|)
operator|)
condition|)
block|{
specifier|static
name|bool
name|first
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDirectFBKeyboardHandler - Getting unexpected non-keyboard related events"
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|input
operator|.
name|flags
operator|&
name|DIEF_MODIFIERS
condition|)
block|{
if|if
condition|(
name|input
operator|.
name|modifiers
operator|&
name|DIMM_SHIFT
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|modifiers
operator|&
name|DIMM_CONTROL
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|modifiers
operator|&
name|DIMM_ALT
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|modifiers
operator|&
name|DIMM_ALTGR
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|modifiers
operator|&
name|DIMM_META
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
block|}
specifier|const
name|bool
name|press
init|=
name|input
operator|.
name|type
operator|&
name|DIET_KEYPRESS
decl_stmt|;
name|DFBInputDeviceKeySymbol
name|symbol
init|=
name|input
operator|.
name|key_symbol
decl_stmt|;
name|int
name|unicode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|keycode
init|=
literal|0
decl_stmt|;
name|keycode
operator|=
name|keymap
argument_list|()
operator|->
name|value
argument_list|(
name|symbol
argument_list|)
expr_stmt|;
if|if
condition|(
name|DFB_KEY_TYPE
argument_list|(
name|symbol
argument_list|)
operator|==
name|DIKT_UNICODE
condition|)
name|unicode
operator|=
name|symbol
expr_stmt|;
if|if
condition|(
name|unicode
operator|!=
operator|-
literal|1
operator|||
name|keycode
operator|!=
literal|0
condition|)
block|{
name|bool
name|autoRepeat
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|press
condition|)
block|{
if|if
condition|(
name|unicode
operator|==
name|lastUnicode
operator|&&
name|keycode
operator|==
name|lastKeycode
operator|&&
name|modifiers
operator|==
name|lastModifiers
condition|)
block|{
name|autoRepeat
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|lastUnicode
operator|=
name|unicode
expr_stmt|;
name|lastKeycode
operator|=
name|keycode
expr_stmt|;
name|lastModifiers
operator|=
name|modifiers
expr_stmt|;
block|}
block|}
else|else
block|{
name|lastUnicode
operator|=
name|lastKeycode
operator|=
operator|-
literal|1
expr_stmt|;
name|lastModifiers
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|autoRepeat
condition|)
block|{
name|handler
operator|->
name|processKeyEvent
argument_list|(
name|unicode
argument_list|,
name|keycode
argument_list|,
name|modifiers
argument_list|,
literal|false
argument_list|,
name|autoRepeat
argument_list|)
expr_stmt|;
block|}
name|handler
operator|->
name|processKeyEvent
argument_list|(
name|unicode
argument_list|,
name|keycode
argument_list|,
name|modifiers
argument_list|,
name|press
argument_list|,
name|autoRepeat
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|QDirectFBKeyboardHandler
name|QDirectFBKeyboardHandler
operator|::
name|QDirectFBKeyboardHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QWSKeyboardHandler
argument_list|()
block|{
name|Q_UNUSED
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|QDirectFBKeyboardHandlerPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFBKeyboardHandler
name|QDirectFBKeyboardHandler
operator|::
name|~
name|QDirectFBKeyboardHandler
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_constructor
DECL|function|KeyMap
name|KeyMap
operator|::
name|KeyMap
parameter_list|()
block|{
name|insert
argument_list|(
name|DIKS_BACKSPACE
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_TAB
argument_list|,
name|Qt
operator|::
name|Key_Tab
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_RETURN
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_ESCAPE
argument_list|,
name|Qt
operator|::
name|Key_Escape
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DELETE
argument_list|,
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CURSOR_LEFT
argument_list|,
name|Qt
operator|::
name|Key_Left
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CURSOR_RIGHT
argument_list|,
name|Qt
operator|::
name|Key_Right
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CURSOR_UP
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CURSOR_DOWN
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_INSERT
argument_list|,
name|Qt
operator|::
name|Key_Insert
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_HOME
argument_list|,
name|Qt
operator|::
name|Key_Home
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_END
argument_list|,
name|Qt
operator|::
name|Key_End
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PAGE_UP
argument_list|,
name|Qt
operator|::
name|Key_PageUp
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PAGE_DOWN
argument_list|,
name|Qt
operator|::
name|Key_PageDown
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PRINT
argument_list|,
name|Qt
operator|::
name|Key_Print
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PAUSE
argument_list|,
name|Qt
operator|::
name|Key_Pause
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SELECT
argument_list|,
name|Qt
operator|::
name|Key_Select
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_GOTO
argument_list|,
name|Qt
operator|::
name|Key_OpenUrl
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CLEAR
argument_list|,
name|Qt
operator|::
name|Key_Clear
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_MENU
argument_list|,
name|Qt
operator|::
name|Key_Menu
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_HELP
argument_list|,
name|Qt
operator|::
name|Key_Help
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_INTERNET
argument_list|,
name|Qt
operator|::
name|Key_HomePage
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_MAIL
argument_list|,
name|Qt
operator|::
name|Key_LaunchMail
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_FAVORITES
argument_list|,
name|Qt
operator|::
name|Key_Favorites
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_BACK
argument_list|,
name|Qt
operator|::
name|Key_Back
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_FORWARD
argument_list|,
name|Qt
operator|::
name|Key_Forward
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_VOLUME_UP
argument_list|,
name|Qt
operator|::
name|Key_VolumeUp
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_VOLUME_DOWN
argument_list|,
name|Qt
operator|::
name|Key_VolumeDown
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_MUTE
argument_list|,
name|Qt
operator|::
name|Key_VolumeMute
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PLAYPAUSE
argument_list|,
name|Qt
operator|::
name|Key_Pause
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PLAY
argument_list|,
name|Qt
operator|::
name|Key_MediaPlay
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_STOP
argument_list|,
name|Qt
operator|::
name|Key_MediaStop
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_RECORD
argument_list|,
name|Qt
operator|::
name|Key_MediaRecord
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PREVIOUS
argument_list|,
name|Qt
operator|::
name|Key_MediaPrevious
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_NEXT
argument_list|,
name|Qt
operator|::
name|Key_MediaNext
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F1
argument_list|,
name|Qt
operator|::
name|Key_F1
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F2
argument_list|,
name|Qt
operator|::
name|Key_F2
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F3
argument_list|,
name|Qt
operator|::
name|Key_F3
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F4
argument_list|,
name|Qt
operator|::
name|Key_F4
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F5
argument_list|,
name|Qt
operator|::
name|Key_F5
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F6
argument_list|,
name|Qt
operator|::
name|Key_F6
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F7
argument_list|,
name|Qt
operator|::
name|Key_F7
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F8
argument_list|,
name|Qt
operator|::
name|Key_F8
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F9
argument_list|,
name|Qt
operator|::
name|Key_F9
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F10
argument_list|,
name|Qt
operator|::
name|Key_F10
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F11
argument_list|,
name|Qt
operator|::
name|Key_F11
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_F12
argument_list|,
name|Qt
operator|::
name|Key_F12
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SHIFT
argument_list|,
name|Qt
operator|::
name|Key_Shift
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CONTROL
argument_list|,
name|Qt
operator|::
name|Key_Control
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_ALT
argument_list|,
name|Qt
operator|::
name|Key_Alt
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_ALTGR
argument_list|,
name|Qt
operator|::
name|Key_AltGr
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_META
argument_list|,
name|Qt
operator|::
name|Key_Meta
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SUPER
argument_list|,
name|Qt
operator|::
name|Key_Super_L
argument_list|)
expr_stmt|;
comment|// ???
name|insert
argument_list|(
name|DIKS_HYPER
argument_list|,
name|Qt
operator|::
name|Key_Hyper_L
argument_list|)
expr_stmt|;
comment|// ???
name|insert
argument_list|(
name|DIKS_CAPS_LOCK
argument_list|,
name|Qt
operator|::
name|Key_CapsLock
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_NUM_LOCK
argument_list|,
name|Qt
operator|::
name|Key_NumLock
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SCROLL_LOCK
argument_list|,
name|Qt
operator|::
name|Key_ScrollLock
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_ABOVEDOT
argument_list|,
name|Qt
operator|::
name|Key_Dead_Abovedot
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_ABOVERING
argument_list|,
name|Qt
operator|::
name|Key_Dead_Abovering
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_ACUTE
argument_list|,
name|Qt
operator|::
name|Key_Dead_Acute
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_BREVE
argument_list|,
name|Qt
operator|::
name|Key_Dead_Breve
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_CARON
argument_list|,
name|Qt
operator|::
name|Key_Dead_Caron
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_CEDILLA
argument_list|,
name|Qt
operator|::
name|Key_Dead_Cedilla
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_CIRCUMFLEX
argument_list|,
name|Qt
operator|::
name|Key_Dead_Circumflex
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_DIAERESIS
argument_list|,
name|Qt
operator|::
name|Key_Dead_Diaeresis
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_DOUBLEACUTE
argument_list|,
name|Qt
operator|::
name|Key_Dead_Doubleacute
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_GRAVE
argument_list|,
name|Qt
operator|::
name|Key_Dead_Grave
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_IOTA
argument_list|,
name|Qt
operator|::
name|Key_Dead_Iota
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_MACRON
argument_list|,
name|Qt
operator|::
name|Key_Dead_Macron
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_OGONEK
argument_list|,
name|Qt
operator|::
name|Key_Dead_Ogonek
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_SEMIVOICED_SOUND
argument_list|,
name|Qt
operator|::
name|Key_Dead_Semivoiced_Sound
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_TILDE
argument_list|,
name|Qt
operator|::
name|Key_Dead_Tilde
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DEAD_VOICED_SOUND
argument_list|,
name|Qt
operator|::
name|Key_Dead_Voiced_Sound
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SPACE
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_EXCLAMATION_MARK
argument_list|,
name|Qt
operator|::
name|Key_Exclam
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_QUOTATION
argument_list|,
name|Qt
operator|::
name|Key_QuoteDbl
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_NUMBER_SIGN
argument_list|,
name|Qt
operator|::
name|Key_NumberSign
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_DOLLAR_SIGN
argument_list|,
name|Qt
operator|::
name|Key_Dollar
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PERCENT_SIGN
argument_list|,
name|Qt
operator|::
name|Key_Percent
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_AMPERSAND
argument_list|,
name|Qt
operator|::
name|Key_Ampersand
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_APOSTROPHE
argument_list|,
name|Qt
operator|::
name|Key_Apostrophe
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PARENTHESIS_LEFT
argument_list|,
name|Qt
operator|::
name|Key_ParenLeft
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PARENTHESIS_RIGHT
argument_list|,
name|Qt
operator|::
name|Key_ParenRight
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_ASTERISK
argument_list|,
name|Qt
operator|::
name|Key_Asterisk
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PLUS_SIGN
argument_list|,
name|Qt
operator|::
name|Key_Plus
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_COMMA
argument_list|,
name|Qt
operator|::
name|Key_Comma
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_MINUS_SIGN
argument_list|,
name|Qt
operator|::
name|Key_Minus
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_PERIOD
argument_list|,
name|Qt
operator|::
name|Key_Period
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SLASH
argument_list|,
name|Qt
operator|::
name|Key_Slash
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_0
argument_list|,
name|Qt
operator|::
name|Key_0
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_1
argument_list|,
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_2
argument_list|,
name|Qt
operator|::
name|Key_2
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_3
argument_list|,
name|Qt
operator|::
name|Key_3
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_4
argument_list|,
name|Qt
operator|::
name|Key_4
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_5
argument_list|,
name|Qt
operator|::
name|Key_5
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_6
argument_list|,
name|Qt
operator|::
name|Key_6
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_7
argument_list|,
name|Qt
operator|::
name|Key_7
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_8
argument_list|,
name|Qt
operator|::
name|Key_8
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_9
argument_list|,
name|Qt
operator|::
name|Key_9
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_COLON
argument_list|,
name|Qt
operator|::
name|Key_Colon
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SEMICOLON
argument_list|,
name|Qt
operator|::
name|Key_Semicolon
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_LESS_THAN_SIGN
argument_list|,
name|Qt
operator|::
name|Key_Less
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_EQUALS_SIGN
argument_list|,
name|Qt
operator|::
name|Key_Equal
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_GREATER_THAN_SIGN
argument_list|,
name|Qt
operator|::
name|Key_Greater
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_QUESTION_MARK
argument_list|,
name|Qt
operator|::
name|Key_Question
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_AT
argument_list|,
name|Qt
operator|::
name|Key_At
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_A
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_B
argument_list|,
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_C
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_D
argument_list|,
name|Qt
operator|::
name|Key_D
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_E
argument_list|,
name|Qt
operator|::
name|Key_E
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_F
argument_list|,
name|Qt
operator|::
name|Key_F
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_G
argument_list|,
name|Qt
operator|::
name|Key_G
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_H
argument_list|,
name|Qt
operator|::
name|Key_H
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_I
argument_list|,
name|Qt
operator|::
name|Key_I
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_J
argument_list|,
name|Qt
operator|::
name|Key_J
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_K
argument_list|,
name|Qt
operator|::
name|Key_K
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_L
argument_list|,
name|Qt
operator|::
name|Key_L
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_M
argument_list|,
name|Qt
operator|::
name|Key_M
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_N
argument_list|,
name|Qt
operator|::
name|Key_N
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_O
argument_list|,
name|Qt
operator|::
name|Key_O
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_P
argument_list|,
name|Qt
operator|::
name|Key_P
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_Q
argument_list|,
name|Qt
operator|::
name|Key_Q
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_R
argument_list|,
name|Qt
operator|::
name|Key_R
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_S
argument_list|,
name|Qt
operator|::
name|Key_S
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_T
argument_list|,
name|Qt
operator|::
name|Key_T
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_U
argument_list|,
name|Qt
operator|::
name|Key_U
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_V
argument_list|,
name|Qt
operator|::
name|Key_V
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_W
argument_list|,
name|Qt
operator|::
name|Key_W
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_X
argument_list|,
name|Qt
operator|::
name|Key_X
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_Y
argument_list|,
name|Qt
operator|::
name|Key_Y
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CAPITAL_Z
argument_list|,
name|Qt
operator|::
name|Key_Z
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SQUARE_BRACKET_LEFT
argument_list|,
name|Qt
operator|::
name|Key_BracketLeft
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_BACKSLASH
argument_list|,
name|Qt
operator|::
name|Key_Backslash
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SQUARE_BRACKET_RIGHT
argument_list|,
name|Qt
operator|::
name|Key_BracketRight
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CIRCUMFLEX_ACCENT
argument_list|,
name|Qt
operator|::
name|Key_AsciiCircum
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_UNDERSCORE
argument_list|,
name|Qt
operator|::
name|Key_Underscore
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_A
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_B
argument_list|,
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_C
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_D
argument_list|,
name|Qt
operator|::
name|Key_D
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_E
argument_list|,
name|Qt
operator|::
name|Key_E
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_F
argument_list|,
name|Qt
operator|::
name|Key_F
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_G
argument_list|,
name|Qt
operator|::
name|Key_G
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_H
argument_list|,
name|Qt
operator|::
name|Key_H
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_I
argument_list|,
name|Qt
operator|::
name|Key_I
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_J
argument_list|,
name|Qt
operator|::
name|Key_J
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_K
argument_list|,
name|Qt
operator|::
name|Key_K
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_L
argument_list|,
name|Qt
operator|::
name|Key_L
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_M
argument_list|,
name|Qt
operator|::
name|Key_M
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_N
argument_list|,
name|Qt
operator|::
name|Key_N
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_O
argument_list|,
name|Qt
operator|::
name|Key_O
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_P
argument_list|,
name|Qt
operator|::
name|Key_P
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_Q
argument_list|,
name|Qt
operator|::
name|Key_Q
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_R
argument_list|,
name|Qt
operator|::
name|Key_R
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_S
argument_list|,
name|Qt
operator|::
name|Key_S
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_T
argument_list|,
name|Qt
operator|::
name|Key_T
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_U
argument_list|,
name|Qt
operator|::
name|Key_U
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_V
argument_list|,
name|Qt
operator|::
name|Key_V
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_W
argument_list|,
name|Qt
operator|::
name|Key_W
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_X
argument_list|,
name|Qt
operator|::
name|Key_X
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_Y
argument_list|,
name|Qt
operator|::
name|Key_Y
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_SMALL_Z
argument_list|,
name|Qt
operator|::
name|Key_Z
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CURLY_BRACKET_LEFT
argument_list|,
name|Qt
operator|::
name|Key_BraceLeft
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_VERTICAL_BAR
argument_list|,
name|Qt
operator|::
name|Key_Bar
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_CURLY_BRACKET_RIGHT
argument_list|,
name|Qt
operator|::
name|Key_BraceRight
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|DIKS_TILDE
argument_list|,
name|Qt
operator|::
name|Key_AsciiTilde
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qdirectfbkeyboard.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DIRECTFB
end_comment
end_unit
