begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbmouse.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_QWS_DIRECTFB
end_ifndef
begin_include
include|#
directive|include
file|"qdirectfbscreen.h"
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<directfb.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QDirectFBMouseHandlerPrivate
class|class
name|QDirectFBMouseHandlerPrivate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|QDirectFBMouseHandlerPrivate
parameter_list|(
name|QDirectFBMouseHandler
modifier|*
name|h
parameter_list|)
constructor_decl|;
name|~
name|QDirectFBMouseHandlerPrivate
parameter_list|()
destructor_decl|;
name|void
name|setEnabled
parameter_list|(
name|bool
name|on
parameter_list|)
function_decl|;
private|private:
DECL|member|handler
name|QDirectFBMouseHandler
modifier|*
name|handler
decl_stmt|;
DECL|member|eventBuffer
name|IDirectFBEventBuffer
modifier|*
name|eventBuffer
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_LAYER
DECL|member|layer
name|IDirectFBDisplayLayer
modifier|*
name|layer
decl_stmt|;
endif|#
directive|endif
DECL|member|mouseNotifier
name|QSocketNotifier
modifier|*
name|mouseNotifier
decl_stmt|;
DECL|member|prevPoint
name|QPoint
name|prevPoint
decl_stmt|;
DECL|member|prevbuttons
name|Qt
operator|::
name|MouseButtons
name|prevbuttons
decl_stmt|;
DECL|member|event
name|DFBEvent
name|event
decl_stmt|;
DECL|member|bytesRead
name|uint
name|bytesRead
decl_stmt|;
private|private
name|Q_SLOTS
private|:
name|void
name|readMouseData
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QDirectFBMouseHandlerPrivate
name|QDirectFBMouseHandlerPrivate
operator|::
name|QDirectFBMouseHandlerPrivate
parameter_list|(
name|QDirectFBMouseHandler
modifier|*
name|h
parameter_list|)
member_init_list|:
name|handler
argument_list|(
name|h
argument_list|)
member_init_list|,
name|eventBuffer
argument_list|(
literal|0
argument_list|)
block|{
name|DFBResult
name|result
decl_stmt|;
name|QScreen
modifier|*
name|screen
init|=
name|QScreen
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
block|{
name|qCritical
argument_list|(
literal|"QDirectFBMouseHandler: no screen instance found"
argument_list|)
expr_stmt|;
return|return;
block|}
name|IDirectFB
modifier|*
name|fb
init|=
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|dfb
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fb
condition|)
block|{
name|qCritical
argument_list|(
literal|"QDirectFBMouseHandler: DirectFB not initialized"
argument_list|)
expr_stmt|;
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_LAYER
name|layer
operator|=
name|QDirectFBScreen
operator|::
name|instance
argument_list|()
operator|->
name|dfbDisplayLayer
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|layer
condition|)
block|{
name|qCritical
argument_list|(
literal|"QDirectFBMouseHandler: Unable to get primary display layer"
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|DFBInputDeviceCapabilities
name|caps
decl_stmt|;
name|caps
operator|=
name|DICAPS_BUTTONS
operator||
name|DICAPS_AXES
expr_stmt|;
name|result
operator|=
name|fb
operator|->
name|CreateInputEventBuffer
argument_list|(
name|fb
argument_list|,
name|caps
argument_list|,
name|DFB_TRUE
argument_list|,
operator|&
name|eventBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBMouseHandler: "
literal|"Unable to create input event buffer"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|fd
decl_stmt|;
name|result
operator|=
name|eventBuffer
operator|->
name|CreateFileDescriptor
argument_list|(
name|eventBuffer
argument_list|,
operator|&
name|fd
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBMouseHandler: "
literal|"Unable to create file descriptor"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|flags
init|=
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_GETFL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETFL
argument_list|,
name|flags
operator||
name|O_NONBLOCK
argument_list|)
expr_stmt|;
comment|// DirectFB seems to assume that the mouse always starts centered
name|prevPoint
operator|=
name|QPoint
argument_list|(
name|screen
operator|->
name|deviceWidth
argument_list|()
operator|/
literal|2
argument_list|,
name|screen
operator|->
name|deviceHeight
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|prevbuttons
operator|=
name|Qt
operator|::
name|NoButton
expr_stmt|;
name|memset
argument_list|(
operator|&
name|event
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
literal|0
expr_stmt|;
name|mouseNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|mouseNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readMouseData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFBMouseHandlerPrivate
name|QDirectFBMouseHandlerPrivate
operator|::
name|~
name|QDirectFBMouseHandlerPrivate
parameter_list|()
block|{
if|if
condition|(
name|eventBuffer
condition|)
name|eventBuffer
operator|->
name|Release
argument_list|(
name|eventBuffer
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setEnabled
name|void
name|QDirectFBMouseHandlerPrivate
operator|::
name|setEnabled
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
if|if
condition|(
name|mouseNotifier
operator|->
name|isEnabled
argument_list|()
operator|!=
name|on
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DIRECTFB_LAYER
name|DFBResult
name|result
decl_stmt|;
name|result
operator|=
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_ADMINISTRATIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::QDirectFBScreenCursor: "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|layer
operator|->
name|EnableCursor
argument_list|(
name|layer
argument_list|,
name|on
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::QDirectFBScreenCursor: "
literal|"Unable to enable cursor"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_SHARED
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreenCursor::show: "
literal|"Unable to set cooperative level"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_SHARED
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|mouseNotifier
operator|->
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readMouseData
name|void
name|QDirectFBMouseHandlerPrivate
operator|::
name|readMouseData
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QScreen
operator|::
name|instance
argument_list|()
condition|)
return|return;
for|for
control|(
init|;
condition|;
control|)
block|{
comment|// GetEvent returns DFB_UNSUPPORTED after CreateFileDescriptor().
comment|// This seems stupid and I really hope it's a bug which will be fixed.
comment|// DFBResult ret = eventBuffer->GetEvent(eventBuffer,&event);
name|char
modifier|*
name|buf
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
operator|&
name|event
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
operator|::
name|read
argument_list|(
name|mouseNotifier
operator|->
name|socket
argument_list|()
argument_list|,
name|buf
operator|+
name|bytesRead
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBEvent
argument_list|)
operator|-
name|bytesRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|errno
operator|==
name|EINTR
condition|)
continue|continue;
if|if
condition|(
name|errno
operator|==
name|EAGAIN
condition|)
return|return;
name|qWarning
argument_list|(
literal|"QDirectFBMouseHandlerPrivate::readMouseData(): %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Q_ASSERT
argument_list|(
name|ret
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|bytesRead
operator|+=
name|ret
expr_stmt|;
if|if
condition|(
name|bytesRead
operator|<
sizeof|sizeof
argument_list|(
name|DFBEvent
argument_list|)
condition|)
break|break;
name|bytesRead
operator|=
literal|0
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|event
operator|.
name|clazz
operator|==
name|DFEC_INPUT
argument_list|)
expr_stmt|;
specifier|const
name|DFBInputEvent
name|input
init|=
name|event
operator|.
name|input
decl_stmt|;
name|int
name|x
init|=
name|prevPoint
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|prevPoint
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|wheel
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|type
operator|==
name|DIET_AXISMOTION
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_DIRECTFB_LAYER
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_DIRECTFB_WINDOW_AS_CURSOR
argument_list|)
if|if
condition|(
name|input
operator|.
name|flags
operator|&
name|DIEF_AXISABS
condition|)
block|{
switch|switch
condition|(
name|input
operator|.
name|axis
condition|)
block|{
case|case
name|DIAI_X
case|:
name|x
operator|=
name|input
operator|.
name|axisabs
expr_stmt|;
break|break;
case|case
name|DIAI_Y
case|:
name|y
operator|=
name|input
operator|.
name|axisabs
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QDirectFBMouseHandlerPrivate::readMouseData: "
literal|"unknown axis (absolute) %d"
argument_list|,
name|input
operator|.
name|axis
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|input
operator|.
name|flags
operator|&
name|DIEF_AXISREL
condition|)
block|{
switch|switch
condition|(
name|input
operator|.
name|axis
condition|)
block|{
case|case
name|DIAI_X
case|:
name|x
operator|+=
name|input
operator|.
name|axisrel
expr_stmt|;
break|break;
case|case
name|DIAI_Y
case|:
name|y
operator|+=
name|input
operator|.
name|axisrel
expr_stmt|;
break|break;
case|case
name|DIAI_Z
case|:
name|wheel
operator|=
operator|-
literal|120
operator|*
name|input
operator|.
name|axisrel
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QDirectFBMouseHandlerPrivate::readMouseData: "
literal|"unknown axis (releative) %d"
argument_list|,
name|input
operator|.
name|axis
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
if|if
condition|(
name|input
operator|.
name|axis
operator|==
name|DIAI_X
operator|||
name|input
operator|.
name|axis
operator|==
name|DIAI_Y
condition|)
block|{
name|DFBResult
name|result
init|=
name|layer
operator|->
name|GetCursorPosition
argument_list|(
name|layer
argument_list|,
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBMouseHandler::readMouseData"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|input
operator|.
name|axis
operator|==
name|DIAI_Z
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|input
operator|.
name|flags
operator|&
name|DIEF_AXISREL
argument_list|)
expr_stmt|;
name|wheel
operator|=
name|input
operator|.
name|axisrel
expr_stmt|;
name|wheel
operator|*=
operator|-
literal|120
expr_stmt|;
block|}
endif|#
directive|endif
block|}
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|flags
operator|&
name|DIEF_BUTTONS
condition|)
block|{
if|if
condition|(
name|input
operator|.
name|buttons
operator|&
name|DIBM_LEFT
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|buttons
operator|&
name|DIBM_MIDDLE
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|buttons
operator|&
name|DIBM_RIGHT
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
block|}
name|QPoint
name|p
init|=
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|handler
operator|->
name|limitToScreen
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
name|prevPoint
operator|&&
name|wheel
operator|==
literal|0
operator|&&
name|buttons
operator|==
name|prevbuttons
condition|)
continue|continue;
name|prevPoint
operator|=
name|p
expr_stmt|;
name|prevbuttons
operator|=
name|buttons
expr_stmt|;
name|handler
operator|->
name|mouseChanged
argument_list|(
name|p
argument_list|,
name|buttons
argument_list|,
name|wheel
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QDirectFBMouseHandler
name|QDirectFBMouseHandler
operator|::
name|QDirectFBMouseHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|driver
parameter_list|,
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QWSMouseHandler
argument_list|(
name|driver
argument_list|,
name|device
argument_list|)
block|{
name|d
operator|=
operator|new
name|QDirectFBMouseHandlerPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFBMouseHandler
name|QDirectFBMouseHandler
operator|::
name|~
name|QDirectFBMouseHandler
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|suspend
name|void
name|QDirectFBMouseHandler
operator|::
name|suspend
parameter_list|()
block|{
name|d
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resume
name|void
name|QDirectFBMouseHandler
operator|::
name|resume
parameter_list|()
block|{
name|d
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qdirectfbmouse.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QWS_DIRECTFB
end_comment
end_unit
