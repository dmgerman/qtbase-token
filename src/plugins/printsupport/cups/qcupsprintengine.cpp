begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcupsprintengine_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|<qpa/qplatformprintplugin.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformprintersupport.h>
end_include
begin_include
include|#
directive|include
file|<qiodevice.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qbuffer.h>
end_include
begin_include
include|#
directive|include
file|"private/qcups_p.h"
end_include
begin_comment
comment|// Only needed for PPK_CupsOptions
end_comment
begin_include
include|#
directive|include
file|<QtGui/qpagelayout.h>
end_include
begin_include
include|#
directive|include
file|<cups/cups.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|"private/qcore_unix_p.h"
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|QMarginsF
name|qt_convertMargins
parameter_list|(
specifier|const
name|QMarginsF
modifier|&
name|margins
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|fromUnits
parameter_list|,
name|QPageLayout
operator|::
name|Unit
name|toUnits
parameter_list|)
function_decl|;
end_function_decl
begin_constructor
DECL|function|QCupsPrintEngine
name|QCupsPrintEngine
operator|::
name|QCupsPrintEngine
parameter_list|(
name|QPrinter
operator|::
name|PrinterMode
name|m
parameter_list|)
member_init_list|:
name|QPdfPrintEngine
argument_list|(
operator|*
operator|new
name|QCupsPrintEnginePrivate
argument_list|(
name|m
argument_list|)
argument_list|)
block|{
name|Q_D
argument_list|(
name|QCupsPrintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|setupDefaultPrinter
argument_list|()
expr_stmt|;
name|state
operator|=
name|QPrinter
operator|::
name|Idle
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QCupsPrintEngine
name|QCupsPrintEngine
operator|::
name|~
name|QCupsPrintEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|setProperty
name|void
name|QCupsPrintEngine
operator|::
name|setProperty
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCupsPrintEngine
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|int
argument_list|(
name|key
argument_list|)
condition|)
block|{
case|case
name|PPK_PageSize
case|:
name|d
operator|->
name|setPageSize
argument_list|(
name|QPageSize
argument_list|(
name|QPageSize
operator|::
name|PageSizeId
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_WindowsPageSize
case|:
name|d
operator|->
name|setPageSize
argument_list|(
name|QPageSize
argument_list|(
name|QPageSize
operator|::
name|id
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_CustomPaperSize
case|:
name|d
operator|->
name|setPageSize
argument_list|(
name|QPageSize
argument_list|(
name|value
operator|.
name|toSizeF
argument_list|()
argument_list|,
name|QPageSize
operator|::
name|Point
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_PaperName
case|:
comment|// Get the named page size from the printer if supported
name|d
operator|->
name|setPageSize
argument_list|(
name|d
operator|->
name|m_printDevice
operator|.
name|supportedPageSize
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_PrinterName
case|:
name|d
operator|->
name|changePrinter
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_CupsOptions
case|:
name|d
operator|->
name|cupsOptions
operator|=
name|value
operator|.
name|toStringList
argument_list|()
expr_stmt|;
break|break;
case|case
name|PPK_QPageSize
case|:
name|d
operator|->
name|setPageSize
argument_list|(
name|value
operator|.
name|value
argument_list|<
name|QPageSize
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PPK_QPageLayout
case|:
block|{
name|QPageLayout
name|pageLayout
init|=
name|value
operator|.
name|value
argument_list|<
name|QPageLayout
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|pageLayout
operator|.
name|isValid
argument_list|()
operator|&&
name|d
operator|->
name|m_printDevice
operator|.
name|isValidPageLayout
argument_list|(
name|pageLayout
argument_list|,
name|d
operator|->
name|resolution
argument_list|)
condition|)
block|{
name|d
operator|->
name|m_pageLayout
operator|=
name|pageLayout
expr_stmt|;
comment|// Replace the page size with the CUPS page size
name|d
operator|->
name|setPageSize
argument_list|(
name|d
operator|->
name|m_printDevice
operator|.
name|supportedPageSize
argument_list|(
name|pageLayout
operator|.
name|pageSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
name|QPdfPrintEngine
operator|::
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|property
name|QVariant
name|QCupsPrintEngine
operator|::
name|property
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCupsPrintEngine
argument_list|)
expr_stmt|;
name|QVariant
name|ret
decl_stmt|;
switch|switch
condition|(
name|int
argument_list|(
name|key
argument_list|)
condition|)
block|{
case|case
name|PPK_SupportsMultipleCopies
case|:
comment|// CUPS server always supports multiple copies, even if individual m_printDevice doesn't
name|ret
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|PPK_NumberOfCopies
case|:
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|PPK_CupsOptions
case|:
name|ret
operator|=
name|d
operator|->
name|cupsOptions
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|QPdfPrintEngine
operator|::
name|property
argument_list|(
name|key
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_constructor
DECL|function|QCupsPrintEnginePrivate
name|QCupsPrintEnginePrivate
operator|::
name|QCupsPrintEnginePrivate
parameter_list|(
name|QPrinter
operator|::
name|PrinterMode
name|m
parameter_list|)
member_init_list|:
name|QPdfPrintEnginePrivate
argument_list|(
name|m
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QCupsPrintEnginePrivate
name|QCupsPrintEnginePrivate
operator|::
name|~
name|QCupsPrintEnginePrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|openPrintDevice
name|bool
name|QCupsPrintEnginePrivate
operator|::
name|openPrintDevice
parameter_list|()
block|{
if|if
condition|(
name|outDevice
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|outputFileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFile
modifier|*
name|file
init|=
operator|new
name|QFile
argument_list|(
name|outputFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|->
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
condition|)
block|{
operator|delete
name|file
expr_stmt|;
return|return
literal|false
return|;
block|}
name|outDevice
operator|=
name|file
expr_stmt|;
block|}
else|else
block|{
name|char
name|filename
index|[
literal|512
index|]
decl_stmt|;
name|fd
operator|=
name|cupsTempFd
argument_list|(
name|filename
argument_list|,
literal|512
argument_list|)
expr_stmt|;
if|if
condition|(
name|fd
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPdfPrinter: Could not open temporary file to print"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|cupsTempFile
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|outDevice
operator|=
operator|new
name|QFile
argument_list|()
expr_stmt|;
cast|static_cast
argument_list|<
name|QFile
operator|*
argument_list|>
argument_list|(
name|outDevice
argument_list|)
operator|->
name|open
argument_list|(
name|fd
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|closePrintDevice
name|void
name|QCupsPrintEnginePrivate
operator|::
name|closePrintDevice
parameter_list|()
block|{
name|QPdfPrintEnginePrivate
operator|::
name|closePrintDevice
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|cupsTempFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|tempFile
init|=
name|cupsTempFile
decl_stmt|;
name|cupsTempFile
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Should never have got here without a printer, but check anyway
if|if
condition|(
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not determine printer to print to"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Set up print options.
name|QList
argument_list|<
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|>
name|options
decl_stmt|;
name|QVector
argument_list|<
name|cups_option_t
argument_list|>
name|cupsOptStruct
decl_stmt|;
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"media"
argument_list|,
name|m_pageLayout
operator|.
name|pageSize
argument_list|()
operator|.
name|key
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|copies
operator|>
literal|1
condition|)
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"copies"
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|copies
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|copies
operator|>
literal|1
operator|&&
name|collate
condition|)
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"Collate"
argument_list|,
literal|"True"
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|duplex
condition|)
block|{
case|case
name|QPrint
operator|::
name|DuplexNone
case|:
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"one-sided"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrint
operator|::
name|DuplexAuto
case|:
if|if
condition|(
name|m_pageLayout
operator|.
name|orientation
argument_list|()
operator|==
name|QPageLayout
operator|::
name|Portrait
condition|)
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-long-edge"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-short-edge"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrint
operator|::
name|DuplexLongSide
case|:
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-long-edge"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPrint
operator|::
name|DuplexShortSide
case|:
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"sides"
argument_list|,
literal|"two-sided-short-edge"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|m_pageLayout
operator|.
name|orientation
argument_list|()
operator|==
name|QPageLayout
operator|::
name|Landscape
condition|)
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
literal|"landscape"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
operator|::
name|const_iterator
name|it
init|=
name|cupsOptions
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|cupsOptions
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|,
operator|(
operator|*
operator|(
name|it
operator|+
literal|1
operator|)
operator|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|+=
literal|2
expr_stmt|;
block|}
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|options
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
name|cups_option_t
name|opt
decl_stmt|;
name|opt
operator|.
name|name
operator|=
name|options
index|[
name|c
index|]
operator|.
name|first
operator|.
name|data
argument_list|()
expr_stmt|;
name|opt
operator|.
name|value
operator|=
name|options
index|[
name|c
index|]
operator|.
name|second
operator|.
name|data
argument_list|()
expr_stmt|;
name|cupsOptStruct
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
comment|// Print the file.
name|cups_option_t
modifier|*
name|optPtr
init|=
name|cupsOptStruct
operator|.
name|size
argument_list|()
condition|?
operator|&
name|cupsOptStruct
operator|.
name|first
argument_list|()
else|:
literal|0
decl_stmt|;
name|cupsPrintFile
argument_list|(
name|printerName
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|tempFile
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|title
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|cupsOptStruct
operator|.
name|size
argument_list|()
argument_list|,
name|optPtr
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setupDefaultPrinter
name|void
name|QCupsPrintEnginePrivate
operator|::
name|setupDefaultPrinter
parameter_list|()
block|{
comment|// Should never have reached here if no plugin available, but check just in case
name|QPlatformPrinterSupport
modifier|*
name|ps
init|=
name|QPlatformPrinterSupportPlugin
operator|::
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ps
condition|)
return|return;
comment|// Get default printer id, if no default then use the first available
comment|// TODO Find way to remove printerName from base class?
name|printerName
operator|=
name|ps
operator|->
name|defaultPrintDeviceId
argument_list|()
expr_stmt|;
if|if
condition|(
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|list
init|=
name|ps
operator|->
name|availablePrintDeviceIds
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|printerName
operator|=
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Should never have reached here if no printers available, but check just in case
if|if
condition|(
name|printerName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|m_printDevice
operator|=
name|ps
operator|->
name|createPrintDevice
argument_list|(
name|printerName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_printDevice
operator|.
name|isValid
argument_list|()
condition|)
return|return;
comment|// Setup the printer defaults
name|duplex
operator|=
name|m_printDevice
operator|.
name|defaultDuplexMode
argument_list|()
expr_stmt|;
name|grayscale
operator|=
name|m_printDevice
operator|.
name|defaultColorMode
argument_list|()
operator|==
name|QPrint
operator|::
name|GrayScale
expr_stmt|;
comment|// CUPS server always supports collation, even if individual m_printDevice doesn't
name|collate
operator|=
literal|true
expr_stmt|;
name|setPageSize
argument_list|(
name|m_printDevice
operator|.
name|defaultPageSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changePrinter
name|void
name|QCupsPrintEnginePrivate
operator|::
name|changePrinter
parameter_list|(
specifier|const
name|QString
modifier|&
name|newPrinter
parameter_list|)
block|{
comment|// Don't waste time if same printer name
if|if
condition|(
name|newPrinter
operator|==
name|printerName
condition|)
return|return;
comment|// Should never have reached here if no plugin available, but check just in case
name|QPlatformPrinterSupport
modifier|*
name|ps
init|=
name|QPlatformPrinterSupportPlugin
operator|::
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ps
condition|)
return|return;
comment|// Try create the printer, only use it if it returns valid
name|QPrintDevice
name|printDevice
init|=
name|ps
operator|->
name|createPrintDevice
argument_list|(
name|newPrinter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_printDevice
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|m_printDevice
operator|.
name|swap
argument_list|(
name|printDevice
argument_list|)
expr_stmt|;
name|printerName
operator|=
name|m_printDevice
operator|.
name|id
argument_list|()
expr_stmt|;
comment|// Check if new printer supports current settings, otherwise us defaults
if|if
condition|(
name|duplex
operator|!=
name|QPrint
operator|::
name|DuplexAuto
operator|&&
operator|!
name|m_printDevice
operator|.
name|supportedDuplexModes
argument_list|()
operator|.
name|contains
argument_list|(
name|duplex
argument_list|)
condition|)
name|duplex
operator|=
name|m_printDevice
operator|.
name|defaultDuplexMode
argument_list|()
expr_stmt|;
name|QPrint
operator|::
name|ColorMode
name|colorMode
init|=
name|grayscale
condition|?
name|QPrint
operator|::
name|GrayScale
else|:
name|QPrint
operator|::
name|Color
decl_stmt|;
if|if
condition|(
operator|!
name|m_printDevice
operator|.
name|supportedColorModes
argument_list|()
operator|.
name|contains
argument_list|(
name|colorMode
argument_list|)
condition|)
name|grayscale
operator|=
name|m_printDevice
operator|.
name|defaultColorMode
argument_list|()
operator|==
name|QPrint
operator|::
name|GrayScale
expr_stmt|;
comment|// Get the equivalent page size for this printer as supported names may be different
name|setPageSize
argument_list|(
name|m_pageLayout
operator|.
name|pageSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPageSize
name|void
name|QCupsPrintEnginePrivate
operator|::
name|setPageSize
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|pageSize
parameter_list|)
block|{
if|if
condition|(
name|pageSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// Find if the requested page size has a matching printer page size, if so use its defined name instead
name|QPageSize
name|printerPageSize
init|=
name|m_printDevice
operator|.
name|supportedPageSize
argument_list|(
name|pageSize
argument_list|)
decl_stmt|;
name|QPageSize
name|usePageSize
init|=
name|printerPageSize
operator|.
name|isValid
argument_list|()
condition|?
name|printerPageSize
else|:
name|pageSize
decl_stmt|;
name|QMarginsF
name|printable
init|=
name|m_printDevice
operator|.
name|printableMargins
argument_list|(
name|usePageSize
argument_list|,
name|m_pageLayout
operator|.
name|orientation
argument_list|()
argument_list|,
name|resolution
argument_list|)
decl_stmt|;
name|m_pageLayout
operator|.
name|setPageSize
argument_list|(
name|usePageSize
argument_list|,
name|qt_convertMargins
argument_list|(
name|printable
argument_list|,
name|QPageLayout
operator|::
name|Point
argument_list|,
name|m_pageLayout
operator|.
name|units
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
end_unit
