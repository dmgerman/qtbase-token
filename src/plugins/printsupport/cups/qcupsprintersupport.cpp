begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcupsprintersupport_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|"qcupsprintengine_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qprinterinfo_p.h>
end_include
begin_include
include|#
directive|include
file|<QtPrintSupport/QPrinterInfo>
end_include
begin_include
include|#
directive|include
file|<cups/ppd.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_LINUXBASE
end_ifndef
begin_comment
comment|// LSB merges everything into cups.h
end_comment
begin_include
include|#
directive|include
file|<cups/language.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QCupsPrinterSupport
name|QCupsPrinterSupport
operator|::
name|QCupsPrinterSupport
parameter_list|()
member_init_list|:
name|QPlatformPrinterSupport
argument_list|()
member_init_list|,
name|m_cups
argument_list|(
name|QLatin1String
argument_list|(
literal|"cups"
argument_list|)
argument_list|,
literal|2
argument_list|)
member_init_list|,
name|m_cupsPrinters
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_cupsPrintersCount
argument_list|(
literal|0
argument_list|)
block|{
name|loadCups
argument_list|()
expr_stmt|;
name|loadCupsPrinters
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QCupsPrinterSupport
name|QCupsPrinterSupport
operator|::
name|~
name|QCupsPrinterSupport
parameter_list|()
block|{
if|if
condition|(
name|cupsFreeDests
condition|)
name|cupsFreeDests
argument_list|(
name|m_cupsPrintersCount
argument_list|,
name|m_cupsPrinters
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|createNativePrintEngine
name|QPrintEngine
modifier|*
name|QCupsPrinterSupport
operator|::
name|createNativePrintEngine
parameter_list|(
name|QPrinter
operator|::
name|PrinterMode
name|printerMode
parameter_list|)
block|{
return|return
operator|new
name|QCupsPrintEngine
argument_list|(
name|printerMode
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createPaintEngine
name|QPaintEngine
modifier|*
name|QCupsPrinterSupport
operator|::
name|createPaintEngine
parameter_list|(
name|QPrintEngine
modifier|*
name|engine
parameter_list|,
name|QPrinter
operator|::
name|PrinterMode
name|printerMode
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|printerMode
argument_list|)
return|return
cast|static_cast
argument_list|<
name|QCupsPrintEngine
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|supportedPaperSizes
name|QList
argument_list|<
name|QPrinter
operator|::
name|PaperSize
argument_list|>
name|QCupsPrinterSupport
operator|::
name|supportedPaperSizes
parameter_list|(
specifier|const
name|QPrinterInfo
modifier|&
name|printerInfo
parameter_list|)
specifier|const
block|{
return|return
name|QCUPSSupport
operator|::
name|getCupsPrinterPaperSizes
argument_list|(
name|printerIndex
argument_list|(
name|printerInfo
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|loadCups
name|void
name|QCupsPrinterSupport
operator|::
name|loadCups
parameter_list|()
block|{
name|cupsGetDests
operator|=
operator|(
name|CupsGetDests
operator|)
name|m_cups
operator|.
name|resolve
argument_list|(
literal|"cupsGetDests"
argument_list|)
expr_stmt|;
name|cupsFreeDests
operator|=
operator|(
name|CupsFreeDests
operator|)
name|m_cups
operator|.
name|resolve
argument_list|(
literal|"cupsFreeDests"
argument_list|)
expr_stmt|;
name|cupsGetOption
operator|=
operator|(
name|CupsGetOption
operator|)
name|m_cups
operator|.
name|resolve
argument_list|(
literal|"cupsGetOption"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadCupsPrinters
name|void
name|QCupsPrinterSupport
operator|::
name|loadCupsPrinters
parameter_list|()
block|{
name|m_cupsPrintersCount
operator|=
literal|0
expr_stmt|;
name|m_printers
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|cupsFreeDests
condition|)
name|cupsFreeDests
argument_list|(
name|m_cupsPrintersCount
argument_list|,
name|m_cupsPrinters
argument_list|)
expr_stmt|;
if|if
condition|(
name|cupsGetDests
condition|)
name|m_cupsPrintersCount
operator|=
name|cupsGetDests
argument_list|(
operator|&
name|m_cupsPrinters
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_cupsPrintersCount
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|printerName
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|m_cupsPrinters
index|[
name|i
index|]
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_cupsPrinters
index|[
name|i
index|]
operator|.
name|instance
condition|)
name|printerName
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|m_cupsPrinters
index|[
name|i
index|]
operator|.
name|instance
argument_list|)
expr_stmt|;
name|QString
name|description
init|=
name|cupsOption
argument_list|(
name|i
argument_list|,
literal|"printer-info"
argument_list|)
decl_stmt|;
name|QString
name|location
init|=
name|cupsOption
argument_list|(
name|i
argument_list|,
literal|"printer-location"
argument_list|)
decl_stmt|;
name|QString
name|makeAndModel
init|=
name|cupsOption
argument_list|(
name|i
argument_list|,
literal|"printer-make-and-model"
argument_list|)
decl_stmt|;
name|QPrinterInfo
name|printer
init|=
name|createPrinterInfo
argument_list|(
name|printerName
argument_list|,
name|description
argument_list|,
name|location
argument_list|,
name|makeAndModel
argument_list|,
name|m_cupsPrinters
index|[
name|i
index|]
operator|.
name|is_default
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|m_printers
operator|.
name|append
argument_list|(
name|printer
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|printerOption
name|QString
name|QCupsPrinterSupport
operator|::
name|printerOption
parameter_list|(
specifier|const
name|QPrinterInfo
modifier|&
name|printer
parameter_list|,
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
return|return
name|cupsOption
argument_list|(
name|printerIndex
argument_list|(
name|printer
argument_list|)
argument_list|,
name|key
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|cupsOption
name|QString
name|QCupsPrinterSupport
operator|::
name|cupsOption
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
name|QString
name|value
decl_stmt|;
if|if
condition|(
name|i
operator|>
operator|-
literal|1
operator|&&
name|i
operator|<
name|m_cupsPrintersCount
operator|&&
name|cupsGetOption
condition|)
name|value
operator|=
name|cupsGetOption
argument_list|(
name|key
operator|.
name|toLocal8Bit
argument_list|()
argument_list|,
name|m_cupsPrinters
index|[
name|i
index|]
operator|.
name|num_options
argument_list|,
name|m_cupsPrinters
index|[
name|i
index|]
operator|.
name|options
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|printerOptions
name|PrinterOptions
name|QCupsPrinterSupport
operator|::
name|printerOptions
parameter_list|(
specifier|const
name|QPrinterInfo
modifier|&
name|printer
parameter_list|)
specifier|const
block|{
name|PrinterOptions
name|options
decl_stmt|;
name|int
name|p
init|=
name|printerIndex
argument_list|(
name|printer
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<=
operator|-
literal|1
operator|||
name|p
operator|>=
name|m_cupsPrintersCount
condition|)
return|return
name|options
return|;
name|int
name|numOptions
init|=
name|m_cupsPrinters
index|[
name|p
index|]
operator|.
name|num_options
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOptions
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|name
init|=
name|m_cupsPrinters
index|[
name|p
index|]
operator|.
name|options
index|[
name|i
index|]
operator|.
name|name
decl_stmt|;
name|QString
name|value
init|=
name|m_cupsPrinters
index|[
name|p
index|]
operator|.
name|options
index|[
name|i
index|]
operator|.
name|value
decl_stmt|;
name|options
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|options
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
end_unit
