begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 John Layt<jlayt@kde.org> ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsprintdevice.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|DC_COLLATE
end_ifndef
begin_define
DECL|macro|DC_COLLATE
define|#
directive|define
name|DC_COLLATE
value|22
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_WARNING_DISABLE_GCC
argument_list|(
literal|"-Wsign-compare"
argument_list|)
decl|extern
name|qreal
name|qt_pointMultiplier
argument_list|(
name|QPageLayout
operator|::
name|Unit
name|unit
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qwcsnlen
specifier|static
specifier|inline
name|uint
name|qwcsnlen
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|str
parameter_list|,
name|uint
name|maxlen
parameter_list|)
block|{
name|uint
name|length
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|str
condition|)
block|{
while|while
condition|(
name|length
operator|<
name|maxlen
operator|&&
operator|*
name|str
operator|++
condition|)
name|length
operator|++
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
end_function
begin_function
DECL|function|paperBinToInputSlot
specifier|static
name|QPrint
operator|::
name|InputSlot
name|paperBinToInputSlot
parameter_list|(
name|int
name|windowsId
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QPrint
operator|::
name|InputSlot
name|slot
decl_stmt|;
name|slot
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|inputSlotMap
index|[
name|i
index|]
operator|.
name|id
operator|!=
name|QPrint
operator|::
name|CustomInputSlot
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|inputSlotMap
index|[
name|i
index|]
operator|.
name|windowsId
operator|==
name|windowsId
condition|)
block|{
name|slot
operator|.
name|key
operator|=
name|inputSlotMap
index|[
name|i
index|]
operator|.
name|key
expr_stmt|;
name|slot
operator|.
name|id
operator|=
name|inputSlotMap
index|[
name|i
index|]
operator|.
name|id
expr_stmt|;
name|slot
operator|.
name|windowsId
operator|=
name|inputSlotMap
index|[
name|i
index|]
operator|.
name|windowsId
expr_stmt|;
return|return
name|slot
return|;
block|}
block|}
name|slot
operator|.
name|key
operator|=
name|inputSlotMap
index|[
name|i
index|]
operator|.
name|key
expr_stmt|;
name|slot
operator|.
name|id
operator|=
name|inputSlotMap
index|[
name|i
index|]
operator|.
name|id
expr_stmt|;
name|slot
operator|.
name|windowsId
operator|=
name|windowsId
expr_stmt|;
return|return
name|slot
return|;
block|}
end_function
begin_function
DECL|function|getDevmode
specifier|static
name|LPDEVMODE
name|getDevmode
parameter_list|(
name|HANDLE
name|hPrinter
parameter_list|,
specifier|const
name|QString
modifier|&
name|printerId
parameter_list|)
block|{
name|LPWSTR
name|printerIdUtf16
init|=
cast|const_cast
argument_list|<
name|LPWSTR
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|printerId
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Allocate the required DEVMODE buffer
name|LONG
name|dmSize
init|=
name|DocumentProperties
argument_list|(
name|NULL
argument_list|,
name|hPrinter
argument_list|,
name|printerIdUtf16
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|dmSize
operator|<
literal|0
condition|)
return|return
name|Q_NULLPTR
return|;
name|LPDEVMODE
name|pDevMode
init|=
cast|reinterpret_cast
argument_list|<
name|LPDEVMODE
argument_list|>
argument_list|(
name|malloc
argument_list|(
name|dmSize
argument_list|)
argument_list|)
decl_stmt|;
comment|// Get the default DevMode
name|LONG
name|result
init|=
name|DocumentProperties
argument_list|(
name|NULL
argument_list|,
name|hPrinter
argument_list|,
name|printerIdUtf16
argument_list|,
name|pDevMode
argument_list|,
name|NULL
argument_list|,
name|DM_OUT_BUFFER
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|IDOK
condition|)
block|{
name|free
argument_list|(
name|pDevMode
argument_list|)
expr_stmt|;
name|pDevMode
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
return|return
name|pDevMode
return|;
block|}
end_function
begin_constructor
DECL|function|QWindowsPrintDevice
name|QWindowsPrintDevice
operator|::
name|QWindowsPrintDevice
parameter_list|()
member_init_list|:
name|QPlatformPrintDevice
argument_list|()
member_init_list|,
name|m_hPrinter
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QWindowsPrintDevice
name|QWindowsPrintDevice
operator|::
name|QWindowsPrintDevice
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
member_init_list|:
name|QPlatformPrintDevice
argument_list|(
name|id
argument_list|)
member_init_list|,
name|m_hPrinter
argument_list|(
literal|0
argument_list|)
block|{
comment|// First do a fast lookup to see if printer exists, if it does then open it
if|if
condition|(
operator|!
name|id
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QWindowsPrintDevice
operator|::
name|availablePrintDeviceIds
argument_list|()
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
if|if
condition|(
name|OpenPrinter
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
operator|&
name|m_hPrinter
argument_list|,
name|NULL
argument_list|)
condition|)
block|{
name|DWORD
name|needed
init|=
literal|0
decl_stmt|;
name|GetPrinter
argument_list|(
name|m_hPrinter
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|needed
argument_list|)
expr_stmt|;
name|QScopedArrayPointer
argument_list|<
name|BYTE
argument_list|>
name|buffer
argument_list|(
operator|new
name|BYTE
index|[
name|needed
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetPrinter
argument_list|(
name|m_hPrinter
argument_list|,
literal|2
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|needed
argument_list|,
operator|&
name|needed
argument_list|)
condition|)
block|{
name|PPRINTER_INFO_2
name|info
init|=
cast|reinterpret_cast
argument_list|<
name|PPRINTER_INFO_2
argument_list|>
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|m_name
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|info
operator|->
name|pPrinterName
argument_list|)
expr_stmt|;
name|m_location
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|info
operator|->
name|pLocation
argument_list|)
expr_stmt|;
name|m_makeAndModel
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|info
operator|->
name|pDriverName
argument_list|)
expr_stmt|;
comment|// TODO Check is not available elsewhere
name|m_isRemote
operator|=
name|info
operator|->
name|Attributes
operator|&
name|PRINTER_ATTRIBUTE_NETWORK
expr_stmt|;
block|}
name|m_supportsMultipleCopies
operator|=
operator|(
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_COPIES
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
operator|>
literal|1
operator|)
expr_stmt|;
name|m_supportsCollateCopies
operator|=
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_COLLATE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
comment|// Min/Max custom size is in tenths of a millimeter
specifier|const
name|qreal
name|multiplier
init|=
name|qt_pointMultiplier
argument_list|(
name|QPageLayout
operator|::
name|Millimeter
argument_list|)
decl_stmt|;
name|DWORD
name|min
init|=
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_MINEXTENT
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|m_minimumPhysicalPageSize
operator|=
name|QSize
argument_list|(
operator|(
name|LOWORD
argument_list|(
name|min
argument_list|)
operator|/
literal|10.0
operator|)
operator|*
name|multiplier
argument_list|,
operator|(
name|HIWORD
argument_list|(
name|min
argument_list|)
operator|/
literal|10.0
operator|)
operator|*
name|multiplier
argument_list|)
expr_stmt|;
name|DWORD
name|max
init|=
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_MAXEXTENT
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|m_maximumPhysicalPageSize
operator|=
name|QSize
argument_list|(
operator|(
name|LOWORD
argument_list|(
name|max
argument_list|)
operator|/
literal|10.0
operator|)
operator|*
name|multiplier
argument_list|,
operator|(
name|HIWORD
argument_list|(
name|max
argument_list|)
operator|/
literal|10.0
operator|)
operator|*
name|multiplier
argument_list|)
expr_stmt|;
name|m_supportsCustomPageSizes
operator|=
operator|(
name|m_maximumPhysicalPageSize
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|m_maximumPhysicalPageSize
operator|.
name|height
argument_list|()
operator|>
literal|0
operator|)
expr_stmt|;
block|}
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsPrintDevice
name|QWindowsPrintDevice
operator|::
name|~
name|QWindowsPrintDevice
parameter_list|()
block|{
name|ClosePrinter
argument_list|(
name|m_hPrinter
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QWindowsPrintDevice
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|m_hPrinter
return|;
block|}
end_function
begin_function
DECL|function|isDefault
name|bool
name|QWindowsPrintDevice
operator|::
name|isDefault
parameter_list|()
specifier|const
block|{
return|return
name|m_id
operator|==
name|defaultPrintDeviceId
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|state
name|QPrint
operator|::
name|DeviceState
name|QWindowsPrintDevice
operator|::
name|state
parameter_list|()
specifier|const
block|{
name|DWORD
name|needed
init|=
literal|0
decl_stmt|;
name|GetPrinter
argument_list|(
name|m_hPrinter
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|needed
argument_list|)
expr_stmt|;
name|QScopedArrayPointer
argument_list|<
name|BYTE
argument_list|>
name|buffer
argument_list|(
operator|new
name|BYTE
index|[
name|needed
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetPrinter
argument_list|(
name|m_hPrinter
argument_list|,
literal|6
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|needed
argument_list|,
operator|&
name|needed
argument_list|)
condition|)
block|{
name|PPRINTER_INFO_6
name|info
init|=
cast|reinterpret_cast
argument_list|<
name|PPRINTER_INFO_6
argument_list|>
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO Check mapping
if|if
condition|(
name|info
operator|->
name|dwStatus
operator|==
literal|0
operator|||
operator|(
name|info
operator|->
name|dwStatus
operator|&
name|PRINTER_STATUS_WAITING
operator|)
operator|==
name|PRINTER_STATUS_WAITING
operator|||
operator|(
name|info
operator|->
name|dwStatus
operator|&
name|PRINTER_STATUS_POWER_SAVE
operator|)
operator|==
name|PRINTER_STATUS_POWER_SAVE
condition|)
block|{
return|return
name|QPrint
operator|::
name|Idle
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|info
operator|->
name|dwStatus
operator|&
name|PRINTER_STATUS_PRINTING
operator|)
operator|==
name|PRINTER_STATUS_PRINTING
operator|||
operator|(
name|info
operator|->
name|dwStatus
operator|&
name|PRINTER_STATUS_BUSY
operator|)
operator|==
name|PRINTER_STATUS_BUSY
operator|||
operator|(
name|info
operator|->
name|dwStatus
operator|&
name|PRINTER_STATUS_INITIALIZING
operator|)
operator|==
name|PRINTER_STATUS_INITIALIZING
operator|||
operator|(
name|info
operator|->
name|dwStatus
operator|&
name|PRINTER_STATUS_IO_ACTIVE
operator|)
operator|==
name|PRINTER_STATUS_IO_ACTIVE
operator|||
operator|(
name|info
operator|->
name|dwStatus
operator|&
name|PRINTER_STATUS_PROCESSING
operator|)
operator|==
name|PRINTER_STATUS_PROCESSING
operator|||
operator|(
name|info
operator|->
name|dwStatus
operator|&
name|PRINTER_STATUS_WARMING_UP
operator|)
operator|==
name|PRINTER_STATUS_WARMING_UP
condition|)
block|{
return|return
name|QPrint
operator|::
name|Active
return|;
block|}
block|}
return|return
name|QPrint
operator|::
name|Error
return|;
block|}
end_function
begin_function
DECL|function|loadPageSizes
name|void
name|QWindowsPrintDevice
operator|::
name|loadPageSizes
parameter_list|()
specifier|const
block|{
comment|// Get the number of paper sizes and check all 3 attributes have same count
name|DWORD
name|paperCount
init|=
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_PAPERNAMES
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|int
argument_list|(
name|paperCount
argument_list|)
operator|>
literal|0
operator|&&
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_PAPERSIZE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
operator|==
name|paperCount
operator|&&
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_PAPERS
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
operator|==
name|paperCount
condition|)
block|{
name|QScopedArrayPointer
argument_list|<
name|wchar_t
argument_list|>
name|paperNames
argument_list|(
operator|new
name|wchar_t
index|[
name|paperCount
operator|*
literal|64
index|]
argument_list|)
decl_stmt|;
name|QScopedArrayPointer
argument_list|<
name|POINT
argument_list|>
name|winSizes
argument_list|(
operator|new
name|POINT
index|[
name|paperCount
operator|*
sizeof|sizeof
argument_list|(
name|POINT
argument_list|)
index|]
argument_list|)
decl_stmt|;
name|QScopedArrayPointer
argument_list|<
name|wchar_t
argument_list|>
name|papers
argument_list|(
operator|new
name|wchar_t
index|[
name|paperCount
index|]
argument_list|)
decl_stmt|;
comment|// Get the details and match the default paper size
if|if
condition|(
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_PAPERNAMES
argument_list|,
name|paperNames
operator|.
name|data
argument_list|()
argument_list|,
name|NULL
argument_list|)
operator|==
name|paperCount
operator|&&
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_PAPERSIZE
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|winSizes
operator|.
name|data
argument_list|()
argument_list|,
name|NULL
argument_list|)
operator|==
name|paperCount
operator|&&
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_PAPERS
argument_list|,
name|papers
operator|.
name|data
argument_list|()
argument_list|,
name|NULL
argument_list|)
operator|==
name|paperCount
condition|)
block|{
comment|// Returned size is in tenths of a millimeter
specifier|const
name|qreal
name|multiplier
init|=
name|qt_pointMultiplier
argument_list|(
name|QPageLayout
operator|::
name|Millimeter
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
name|paperCount
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QSize
name|size
init|=
name|QSize
argument_list|(
name|qRound
argument_list|(
operator|(
name|winSizes
index|[
name|i
index|]
operator|.
name|x
operator|/
literal|10.0
operator|)
operator|*
name|multiplier
argument_list|)
argument_list|,
name|qRound
argument_list|(
operator|(
name|winSizes
index|[
name|i
index|]
operator|.
name|y
operator|/
literal|10.0
operator|)
operator|*
name|multiplier
argument_list|)
argument_list|)
decl_stmt|;
name|wchar_t
modifier|*
name|paper
init|=
name|paperNames
operator|.
name|data
argument_list|()
operator|+
operator|(
name|i
operator|*
literal|64
operator|)
decl_stmt|;
name|QString
name|name
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|paper
argument_list|,
name|qwcsnlen
argument_list|(
name|paper
argument_list|,
literal|64
argument_list|)
argument_list|)
decl_stmt|;
name|m_pageSizes
operator|.
name|append
argument_list|(
name|createPageSize
argument_list|(
name|papers
index|[
name|i
index|]
argument_list|,
name|size
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|m_havePageSizes
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultPageSize
name|QPageSize
name|QWindowsPrintDevice
operator|::
name|defaultPageSize
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_havePageSizes
condition|)
name|loadPageSizes
argument_list|()
expr_stmt|;
name|QPageSize
name|pageSize
decl_stmt|;
if|if
condition|(
name|LPDEVMODE
name|pDevMode
init|=
name|getDevmode
argument_list|(
name|m_hPrinter
argument_list|,
name|m_id
argument_list|)
condition|)
block|{
comment|// Get the default paper size
if|if
condition|(
name|pDevMode
operator|->
name|dmFields
operator|&
name|DM_PAPERSIZE
condition|)
block|{
comment|// Find the supported page size that matches, in theory default should be one of them
foreach|foreach
control|(
specifier|const
name|QPageSize
modifier|&
name|ps
decl|,
name|m_pageSizes
control|)
block|{
if|if
condition|(
name|ps
operator|.
name|windowsId
argument_list|()
operator|==
name|pDevMode
operator|->
name|dmPaperSize
condition|)
block|{
name|pageSize
operator|=
name|ps
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// Clean-up
name|free
argument_list|(
name|pDevMode
argument_list|)
expr_stmt|;
block|}
return|return
name|pageSize
return|;
block|}
end_function
begin_function
DECL|function|printableMargins
name|QMarginsF
name|QWindowsPrintDevice
operator|::
name|printableMargins
parameter_list|(
specifier|const
name|QPageSize
modifier|&
name|pageSize
parameter_list|,
name|QPageLayout
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|resolution
parameter_list|)
specifier|const
block|{
comment|// TODO This is slow, need to cache values or find better way!
comment|// Modify the DevMode to get the DC printable margins in device pixels
name|QMarginsF
name|margins
init|=
name|QMarginsF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DWORD
name|needed
init|=
literal|0
decl_stmt|;
name|GetPrinter
argument_list|(
name|m_hPrinter
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|needed
argument_list|)
expr_stmt|;
name|QScopedArrayPointer
argument_list|<
name|BYTE
argument_list|>
name|buffer
argument_list|(
operator|new
name|BYTE
index|[
name|needed
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetPrinter
argument_list|(
name|m_hPrinter
argument_list|,
literal|2
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|needed
argument_list|,
operator|&
name|needed
argument_list|)
condition|)
block|{
name|PPRINTER_INFO_2
name|info
init|=
cast|reinterpret_cast
argument_list|<
name|PPRINTER_INFO_2
argument_list|>
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|LPDEVMODE
name|devMode
init|=
name|info
operator|->
name|pDevMode
decl_stmt|;
name|bool
name|separateDevMode
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|devMode
condition|)
block|{
comment|// GetPrinter() didn't include the DEVMODE. Get it a different way.
name|devMode
operator|=
name|getDevmode
argument_list|(
name|m_hPrinter
argument_list|,
name|m_id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|devMode
condition|)
return|return
name|margins
return|;
name|separateDevMode
operator|=
literal|true
expr_stmt|;
block|}
name|HDC
name|pDC
init|=
name|CreateDC
argument_list|(
name|NULL
argument_list|,
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|devMode
argument_list|)
decl_stmt|;
if|if
condition|(
name|pageSize
operator|.
name|id
argument_list|()
operator|==
name|QPageSize
operator|::
name|Custom
operator|||
name|pageSize
operator|.
name|windowsId
argument_list|()
operator|<=
literal|0
operator|||
name|pageSize
operator|.
name|windowsId
argument_list|()
operator|>
name|DMPAPER_LAST
condition|)
block|{
name|devMode
operator|->
name|dmPaperSize
operator|=
literal|0
expr_stmt|;
name|devMode
operator|->
name|dmPaperWidth
operator|=
name|pageSize
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Millimeter
argument_list|)
operator|.
name|width
argument_list|()
operator|*
literal|10.0
expr_stmt|;
name|devMode
operator|->
name|dmPaperLength
operator|=
name|pageSize
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Millimeter
argument_list|)
operator|.
name|height
argument_list|()
operator|*
literal|10.0
expr_stmt|;
block|}
else|else
block|{
name|devMode
operator|->
name|dmPaperSize
operator|=
name|pageSize
operator|.
name|windowsId
argument_list|()
expr_stmt|;
block|}
name|devMode
operator|->
name|dmPrintQuality
operator|=
name|resolution
expr_stmt|;
name|devMode
operator|->
name|dmOrientation
operator|=
name|orientation
operator|==
name|QPageLayout
operator|::
name|Portrait
condition|?
name|DMORIENT_PORTRAIT
else|:
name|DMORIENT_LANDSCAPE
expr_stmt|;
name|ResetDC
argument_list|(
name|pDC
argument_list|,
name|devMode
argument_list|)
expr_stmt|;
specifier|const
name|int
name|dpiWidth
init|=
name|GetDeviceCaps
argument_list|(
name|pDC
argument_list|,
name|LOGPIXELSX
argument_list|)
decl_stmt|;
specifier|const
name|int
name|dpiHeight
init|=
name|GetDeviceCaps
argument_list|(
name|pDC
argument_list|,
name|LOGPIXELSY
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|wMult
init|=
literal|72.0
operator|/
name|dpiWidth
decl_stmt|;
specifier|const
name|qreal
name|hMult
init|=
literal|72.0
operator|/
name|dpiHeight
decl_stmt|;
specifier|const
name|qreal
name|physicalWidth
init|=
name|GetDeviceCaps
argument_list|(
name|pDC
argument_list|,
name|PHYSICALWIDTH
argument_list|)
operator|*
name|wMult
decl_stmt|;
specifier|const
name|qreal
name|physicalHeight
init|=
name|GetDeviceCaps
argument_list|(
name|pDC
argument_list|,
name|PHYSICALHEIGHT
argument_list|)
operator|*
name|hMult
decl_stmt|;
specifier|const
name|qreal
name|printableWidth
init|=
name|GetDeviceCaps
argument_list|(
name|pDC
argument_list|,
name|HORZRES
argument_list|)
operator|*
name|wMult
decl_stmt|;
specifier|const
name|qreal
name|printableHeight
init|=
name|GetDeviceCaps
argument_list|(
name|pDC
argument_list|,
name|VERTRES
argument_list|)
operator|*
name|hMult
decl_stmt|;
specifier|const
name|qreal
name|leftMargin
init|=
name|GetDeviceCaps
argument_list|(
name|pDC
argument_list|,
name|PHYSICALOFFSETX
argument_list|)
operator|*
name|wMult
decl_stmt|;
specifier|const
name|qreal
name|topMargin
init|=
name|GetDeviceCaps
argument_list|(
name|pDC
argument_list|,
name|PHYSICALOFFSETY
argument_list|)
operator|*
name|hMult
decl_stmt|;
specifier|const
name|qreal
name|rightMargin
init|=
name|physicalWidth
operator|-
name|leftMargin
operator|-
name|printableWidth
decl_stmt|;
specifier|const
name|qreal
name|bottomMargin
init|=
name|physicalHeight
operator|-
name|topMargin
operator|-
name|printableHeight
decl_stmt|;
name|margins
operator|=
name|QMarginsF
argument_list|(
name|leftMargin
argument_list|,
name|topMargin
argument_list|,
name|rightMargin
argument_list|,
name|bottomMargin
argument_list|)
expr_stmt|;
if|if
condition|(
name|separateDevMode
condition|)
name|free
argument_list|(
name|devMode
argument_list|)
expr_stmt|;
name|DeleteDC
argument_list|(
name|pDC
argument_list|)
expr_stmt|;
block|}
return|return
name|margins
return|;
block|}
end_function
begin_function
DECL|function|loadResolutions
name|void
name|QWindowsPrintDevice
operator|::
name|loadResolutions
parameter_list|()
specifier|const
block|{
name|DWORD
name|resCount
init|=
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_ENUMRESOLUTIONS
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|int
argument_list|(
name|resCount
argument_list|)
operator|>
literal|0
condition|)
block|{
name|QScopedArrayPointer
argument_list|<
name|LONG
argument_list|>
name|resolutions
argument_list|(
operator|new
name|LONG
index|[
name|resCount
operator|*
literal|2
index|]
argument_list|)
decl_stmt|;
comment|// Get the details and match the default paper size
if|if
condition|(
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_ENUMRESOLUTIONS
argument_list|,
operator|(
name|LPWSTR
operator|)
name|resolutions
operator|.
name|data
argument_list|()
argument_list|,
name|NULL
argument_list|)
operator|==
name|resCount
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
name|resCount
operator|*
literal|2
argument_list|)
condition|;
name|i
operator|+=
literal|2
control|)
name|m_resolutions
operator|.
name|append
argument_list|(
name|resolutions
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|m_haveResolutions
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultResolution
name|int
name|QWindowsPrintDevice
operator|::
name|defaultResolution
parameter_list|()
specifier|const
block|{
name|int
name|resolution
init|=
literal|72
decl_stmt|;
comment|// TODO Set a sensible default?
if|if
condition|(
name|LPDEVMODE
name|pDevMode
init|=
name|getDevmode
argument_list|(
name|m_hPrinter
argument_list|,
name|m_id
argument_list|)
condition|)
block|{
comment|// Get the default resolution
if|if
condition|(
name|pDevMode
operator|->
name|dmFields
operator|&
name|DM_YRESOLUTION
condition|)
block|{
if|if
condition|(
name|pDevMode
operator|->
name|dmPrintQuality
operator|>
literal|0
condition|)
name|resolution
operator|=
name|pDevMode
operator|->
name|dmPrintQuality
expr_stmt|;
else|else
name|resolution
operator|=
name|pDevMode
operator|->
name|dmYResolution
expr_stmt|;
block|}
comment|// Clean-up
name|free
argument_list|(
name|pDevMode
argument_list|)
expr_stmt|;
block|}
return|return
name|resolution
return|;
block|}
end_function
begin_function
DECL|function|loadInputSlots
name|void
name|QWindowsPrintDevice
operator|::
name|loadInputSlots
parameter_list|()
specifier|const
block|{
name|DWORD
name|binCount
init|=
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_BINS
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|int
argument_list|(
name|binCount
argument_list|)
operator|>
literal|0
operator|&&
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_BINNAMES
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
operator|==
name|binCount
condition|)
block|{
name|QScopedArrayPointer
argument_list|<
name|WORD
argument_list|>
name|bins
argument_list|(
operator|new
name|WORD
index|[
name|binCount
operator|*
sizeof|sizeof
argument_list|(
name|WORD
argument_list|)
index|]
argument_list|)
decl_stmt|;
name|QScopedArrayPointer
argument_list|<
name|wchar_t
argument_list|>
name|binNames
argument_list|(
operator|new
name|wchar_t
index|[
name|binCount
operator|*
literal|24
index|]
argument_list|)
decl_stmt|;
comment|// Get the details and match the default paper size
if|if
condition|(
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_BINS
argument_list|,
operator|(
name|LPWSTR
operator|)
name|bins
operator|.
name|data
argument_list|()
argument_list|,
name|NULL
argument_list|)
operator|==
name|binCount
operator|&&
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_BINNAMES
argument_list|,
name|binNames
operator|.
name|data
argument_list|()
argument_list|,
name|NULL
argument_list|)
operator|==
name|binCount
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
name|binCount
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|wchar_t
modifier|*
name|binName
init|=
name|binNames
operator|.
name|data
argument_list|()
operator|+
operator|(
name|i
operator|*
literal|24
operator|)
decl_stmt|;
name|QString
name|name
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|binName
argument_list|,
name|qwcsnlen
argument_list|(
name|binName
argument_list|,
literal|24
argument_list|)
argument_list|)
decl_stmt|;
name|m_inputSlots
operator|.
name|append
argument_list|(
name|paperBinToInputSlot
argument_list|(
name|bins
index|[
name|i
index|]
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|m_haveInputSlots
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultInputSlot
name|QPrint
operator|::
name|InputSlot
name|QWindowsPrintDevice
operator|::
name|defaultInputSlot
parameter_list|()
specifier|const
block|{
name|QPrint
operator|::
name|InputSlot
name|inputSlot
init|=
name|QPlatformPrintDevice
operator|::
name|defaultInputSlot
argument_list|()
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|LPDEVMODE
name|pDevMode
init|=
name|getDevmode
argument_list|(
name|m_hPrinter
argument_list|,
name|m_id
argument_list|)
condition|)
block|{
comment|// Get the default input slot
if|if
condition|(
name|pDevMode
operator|->
name|dmFields
operator|&
name|DM_DEFAULTSOURCE
condition|)
block|{
name|QPrint
operator|::
name|InputSlot
name|tempSlot
init|=
name|paperBinToInputSlot
argument_list|(
name|pDevMode
operator|->
name|dmDefaultSource
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QPrint
operator|::
name|InputSlot
modifier|&
name|slot
decl|,
name|supportedInputSlots
argument_list|()
control|)
block|{
if|if
condition|(
name|slot
operator|.
name|key
operator|==
name|tempSlot
operator|.
name|key
condition|)
block|{
name|inputSlot
operator|=
name|slot
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// Clean-up
name|free
argument_list|(
name|pDevMode
argument_list|)
expr_stmt|;
block|}
return|return
name|inputSlot
return|;
block|}
end_function
begin_function
DECL|function|loadOutputBins
name|void
name|QWindowsPrintDevice
operator|::
name|loadOutputBins
parameter_list|()
specifier|const
block|{
name|m_outputBins
operator|.
name|append
argument_list|(
name|QPlatformPrintDevice
operator|::
name|defaultOutputBin
argument_list|()
argument_list|)
expr_stmt|;
name|m_haveOutputBins
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadDuplexModes
name|void
name|QWindowsPrintDevice
operator|::
name|loadDuplexModes
parameter_list|()
specifier|const
block|{
name|m_duplexModes
operator|.
name|append
argument_list|(
name|QPrint
operator|::
name|DuplexNone
argument_list|)
expr_stmt|;
name|DWORD
name|duplex
init|=
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_DUPLEX
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|int
argument_list|(
name|duplex
argument_list|)
operator|==
literal|1
condition|)
block|{
comment|// TODO Assume if duplex flag supports both modes
name|m_duplexModes
operator|.
name|append
argument_list|(
name|QPrint
operator|::
name|DuplexAuto
argument_list|)
expr_stmt|;
name|m_duplexModes
operator|.
name|append
argument_list|(
name|QPrint
operator|::
name|DuplexLongSide
argument_list|)
expr_stmt|;
name|m_duplexModes
operator|.
name|append
argument_list|(
name|QPrint
operator|::
name|DuplexShortSide
argument_list|)
expr_stmt|;
block|}
name|m_haveDuplexModes
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultDuplexMode
name|QPrint
operator|::
name|DuplexMode
name|QWindowsPrintDevice
operator|::
name|defaultDuplexMode
parameter_list|()
specifier|const
block|{
name|QPrint
operator|::
name|DuplexMode
name|duplexMode
init|=
name|QPrint
operator|::
name|DuplexNone
decl_stmt|;
if|if
condition|(
name|LPDEVMODE
name|pDevMode
init|=
name|getDevmode
argument_list|(
name|m_hPrinter
argument_list|,
name|m_id
argument_list|)
condition|)
block|{
comment|// Get the default duplex mode
if|if
condition|(
name|pDevMode
operator|->
name|dmFields
operator|&
name|DM_DUPLEX
condition|)
block|{
if|if
condition|(
name|pDevMode
operator|->
name|dmDuplex
operator|==
name|DMDUP_VERTICAL
condition|)
name|duplexMode
operator|=
name|QPrint
operator|::
name|DuplexLongSide
expr_stmt|;
elseif|else
if|if
condition|(
name|pDevMode
operator|->
name|dmDuplex
operator|==
name|DMDUP_HORIZONTAL
condition|)
name|duplexMode
operator|=
name|QPrint
operator|::
name|DuplexShortSide
expr_stmt|;
block|}
comment|// Clean-up
name|free
argument_list|(
name|pDevMode
argument_list|)
expr_stmt|;
block|}
return|return
name|duplexMode
return|;
block|}
end_function
begin_function
DECL|function|loadColorModes
name|void
name|QWindowsPrintDevice
operator|::
name|loadColorModes
parameter_list|()
specifier|const
block|{
name|m_colorModes
operator|.
name|append
argument_list|(
name|QPrint
operator|::
name|GrayScale
argument_list|)
expr_stmt|;
name|DWORD
name|color
init|=
name|DeviceCapabilities
argument_list|(
operator|(
name|LPWSTR
operator|)
name|m_id
operator|.
name|utf16
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|DC_COLORDEVICE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|int
argument_list|(
name|color
argument_list|)
operator|==
literal|1
condition|)
name|m_colorModes
operator|.
name|append
argument_list|(
name|QPrint
operator|::
name|Color
argument_list|)
expr_stmt|;
name|m_haveColorModes
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultColorMode
name|QPrint
operator|::
name|ColorMode
name|QWindowsPrintDevice
operator|::
name|defaultColorMode
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_haveColorModes
condition|)
name|loadColorModes
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_colorModes
operator|.
name|contains
argument_list|(
name|QPrint
operator|::
name|Color
argument_list|)
condition|)
return|return
name|QPrint
operator|::
name|GrayScale
return|;
name|QPrint
operator|::
name|ColorMode
name|colorMode
init|=
name|QPrint
operator|::
name|GrayScale
decl_stmt|;
if|if
condition|(
name|LPDEVMODE
name|pDevMode
init|=
name|getDevmode
argument_list|(
name|m_hPrinter
argument_list|,
name|m_id
argument_list|)
condition|)
block|{
comment|// Get the default color mode
if|if
condition|(
name|pDevMode
operator|->
name|dmFields
operator|&
name|DM_COLOR
operator|&&
name|pDevMode
operator|->
name|dmColor
operator|==
name|DMCOLOR_COLOR
condition|)
name|colorMode
operator|=
name|QPrint
operator|::
name|Color
expr_stmt|;
comment|// Clean-up
name|free
argument_list|(
name|pDevMode
argument_list|)
expr_stmt|;
block|}
return|return
name|colorMode
return|;
block|}
end_function
begin_function
DECL|function|availablePrintDeviceIds
name|QStringList
name|QWindowsPrintDevice
operator|::
name|availablePrintDeviceIds
parameter_list|()
block|{
name|QStringList
name|list
decl_stmt|;
name|DWORD
name|needed
init|=
literal|0
decl_stmt|;
name|DWORD
name|returned
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|EnumPrinters
argument_list|(
name|PRINTER_ENUM_LOCAL
operator||
name|PRINTER_ENUM_CONNECTIONS
argument_list|,
name|NULL
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|needed
argument_list|,
operator|&
name|returned
argument_list|)
operator|&&
name|GetLastError
argument_list|()
operator|!=
name|ERROR_INSUFFICIENT_BUFFER
operator|)
operator|||
operator|!
name|needed
condition|)
block|{
return|return
name|list
return|;
block|}
name|QScopedArrayPointer
argument_list|<
name|BYTE
argument_list|>
name|buffer
argument_list|(
operator|new
name|BYTE
index|[
name|needed
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|EnumPrinters
argument_list|(
name|PRINTER_ENUM_LOCAL
operator||
name|PRINTER_ENUM_CONNECTIONS
argument_list|,
name|NULL
argument_list|,
literal|4
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|needed
argument_list|,
operator|&
name|needed
argument_list|,
operator|&
name|returned
argument_list|)
condition|)
return|return
name|list
return|;
name|PPRINTER_INFO_4
name|infoList
init|=
cast|reinterpret_cast
argument_list|<
name|PPRINTER_INFO_4
argument_list|>
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|returned
condition|;
operator|++
name|i
control|)
name|list
operator|.
name|append
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|infoList
index|[
name|i
index|]
operator|.
name|pPrinterName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|defaultPrintDeviceId
name|QString
name|QWindowsPrintDevice
operator|::
name|defaultPrintDeviceId
parameter_list|()
block|{
name|DWORD
name|size
init|=
literal|0
decl_stmt|;
name|GetDefaultPrinter
argument_list|(
name|NULL
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
name|QScopedArrayPointer
argument_list|<
name|wchar_t
argument_list|>
name|name
argument_list|(
operator|new
name|wchar_t
index|[
name|size
index|]
argument_list|)
decl_stmt|;
name|GetDefaultPrinter
argument_list|(
name|name
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|size
argument_list|)
expr_stmt|;
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|name
operator|.
name|data
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
