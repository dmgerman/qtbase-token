begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlinuxinput.h"
end_include
begin_include
include|#
directive|include
file|<QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QPoint>
end_include
begin_include
include|#
directive|include
file|<QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|<qkbd_qws.h>
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<termios.h>
end_include
begin_include
include|#
directive|include
file|<linux/kd.h>
end_include
begin_include
include|#
directive|include
file|<linux/input.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|//#define QT_QPA_EXPERIMENTAL_TOUCHEVENT
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_QPA_EXPERIMENTAL_TOUCHEVENT
end_ifdef
begin_class
DECL|class|QLinuxInputMouseHandlerData
class|class
name|QLinuxInputMouseHandlerData
block|{
public|public:
DECL|function|QLinuxInputMouseHandlerData
name|QLinuxInputMouseHandlerData
parameter_list|()
member_init_list|:
name|seenMT
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|state
argument_list|(
name|QEvent
operator|::
name|TouchBegin
argument_list|)
member_init_list|,
name|currentIdx
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|ensureCurrentPoint
name|void
name|ensureCurrentPoint
parameter_list|()
block|{
if|if
condition|(
name|currentIdx
operator|>=
name|touchPoints
operator|.
name|size
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|currentIdx
operator|==
name|touchPoints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp
decl_stmt|;
name|tp
operator|.
name|id
operator|=
name|currentIdx
expr_stmt|;
name|tp
operator|.
name|isPrimary
operator|=
operator|(
name|currentIdx
operator|==
literal|0
operator|)
expr_stmt|;
name|tp
operator|.
name|pressure
operator|=
literal|1
expr_stmt|;
name|tp
operator|.
name|area
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tp
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
comment|// init in neutral state
name|touchPoints
operator|.
name|append
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|setCurrentPoint
name|void
name|setCurrentPoint
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|currentIdx
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|currentIdx
operator|<
name|touchPoints
operator|.
name|size
argument_list|()
condition|)
block|{
name|currentX
operator|=
name|int
argument_list|(
name|touchPoints
index|[
name|currentIdx
index|]
operator|.
name|area
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|currentY
operator|=
name|int
argument_list|(
name|touchPoints
index|[
name|currentIdx
index|]
operator|.
name|area
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentY
operator|=
name|currentX
operator|=
operator|-
literal|999
expr_stmt|;
block|}
block|}
DECL|function|advanceCurrentPoint
name|void
name|advanceCurrentPoint
parameter_list|()
block|{
name|setCurrentPoint
argument_list|(
name|currentIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|function|currentPoint
name|int
name|currentPoint
parameter_list|()
block|{
return|return
name|currentIdx
return|;
block|}
DECL|function|setCurrentX
name|void
name|setCurrentX
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|ensureCurrentPoint
argument_list|()
expr_stmt|;
name|touchPoints
index|[
name|currentIdx
index|]
operator|.
name|area
operator|.
name|moveLeft
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|function|currentMoved
name|bool
name|currentMoved
parameter_list|()
block|{
return|return
name|currentX
operator|!=
name|touchPoints
index|[
name|currentIdx
index|]
operator|.
name|area
operator|.
name|left
argument_list|()
operator|||
name|currentY
operator|!=
name|touchPoints
index|[
name|currentIdx
index|]
operator|.
name|area
operator|.
name|top
argument_list|()
return|;
block|}
DECL|function|updateCurrentPos
name|void
name|updateCurrentPos
parameter_list|()
block|{
name|ensureCurrentPoint
argument_list|()
expr_stmt|;
name|touchPoints
index|[
name|currentIdx
index|]
operator|.
name|area
operator|.
name|moveTopLeft
argument_list|(
name|QPointF
argument_list|(
name|currentX
argument_list|,
name|currentY
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setCurrentState
name|void
name|setCurrentState
parameter_list|(
name|Qt
operator|::
name|TouchPointState
name|state
parameter_list|)
block|{
name|ensureCurrentPoint
argument_list|()
expr_stmt|;
name|touchPoints
index|[
name|currentIdx
index|]
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
DECL|function|currentState
name|Qt
operator|::
name|TouchPointState
name|currentState
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|currentIdx
operator|<
name|touchPoints
operator|.
name|size
argument_list|()
condition|)
return|return
name|touchPoints
index|[
name|currentIdx
index|]
operator|.
name|state
return|;
return|return
name|Qt
operator|::
name|TouchPointReleased
return|;
block|}
DECL|member|touchPoints
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|touchPoints
decl_stmt|;
DECL|member|currentX
name|int
name|currentX
decl_stmt|;
DECL|member|currentY
name|int
name|currentY
decl_stmt|;
DECL|member|seenMT
name|bool
name|seenMT
decl_stmt|;
DECL|member|state
name|QEvent
operator|::
name|Type
name|state
decl_stmt|;
private|private:
DECL|member|currentIdx
name|int
name|currentIdx
decl_stmt|;
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QLinuxInputMouseHandler
name|QLinuxInputMouseHandler
operator|::
name|QLinuxInputMouseHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|specification
parameter_list|)
member_init_list|:
name|m_notify
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_x
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_y
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_prevx
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_prevy
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_xoffset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_yoffset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_buttons
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
literal|0
argument_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"QLinuxInputMouseHandler"
operator|<<
name|key
operator|<<
name|specification
expr_stmt|;
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"LinuxInputSubsystem Mouse Handler"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|dev
init|=
name|QLatin1String
argument_list|(
literal|"/dev/input/event0"
argument_list|)
decl_stmt|;
name|m_compression
operator|=
literal|true
expr_stmt|;
name|m_smooth
operator|=
literal|false
expr_stmt|;
name|int
name|jitterLimit
init|=
literal|0
decl_stmt|;
name|QStringList
name|args
init|=
name|specification
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|arg
decl|,
name|args
control|)
block|{
if|if
condition|(
name|arg
operator|==
literal|"nocompress"
condition|)
name|m_compression
operator|=
literal|false
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"dejitter="
argument_list|)
condition|)
name|jitterLimit
operator|=
name|arg
operator|.
name|mid
argument_list|(
literal|9
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"xoffset="
argument_list|)
condition|)
name|m_xoffset
operator|=
name|arg
operator|.
name|mid
argument_list|(
literal|8
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"yoffset="
argument_list|)
condition|)
name|m_yoffset
operator|=
name|arg
operator|.
name|mid
argument_list|(
literal|8
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/dev/"
argument_list|)
argument_list|)
condition|)
name|dev
operator|=
name|arg
expr_stmt|;
block|}
name|m_jitterLimitSquared
operator|=
name|jitterLimit
operator|*
name|jitterLimit
expr_stmt|;
name|m_fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
operator||
name|O_NDELAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
block|{
name|m_notify
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_notify
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readMouseData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Cannot open mouse input device '%s': %s"
argument_list|,
name|qPrintable
argument_list|(
name|dev
argument_list|)
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
ifdef|#
directive|ifdef
name|QT_QPA_EXPERIMENTAL_TOUCHEVENT
name|d
operator|=
operator|new
name|QLinuxInputMouseHandlerData
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QLinuxInputMouseHandler
name|QLinuxInputMouseHandler
operator|::
name|~
name|QLinuxInputMouseHandler
parameter_list|()
block|{
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
name|QT_CLOSE
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QPA_EXPERIMENTAL_TOUCHEVENT
operator|delete
name|d
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|sendMouseEvent
name|void
name|QLinuxInputMouseHandler
operator|::
name|sendMouseEvent
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|)
block|{
name|QPoint
name|pos
argument_list|(
name|x
operator|+
name|m_xoffset
argument_list|,
name|y
operator|+
name|m_yoffset
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|,
name|pos
argument_list|,
name|m_buttons
argument_list|)
expr_stmt|;
name|m_prevx
operator|=
name|x
expr_stmt|;
name|m_prevy
operator|=
name|y
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readMouseData
name|void
name|QLinuxInputMouseHandler
operator|::
name|readMouseData
parameter_list|()
block|{
name|struct
operator|::
name|input_event
name|buffer
index|[
literal|32
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|bool
name|posChanged
init|=
literal|false
decl_stmt|;
name|bool
name|pendingMouseEvent
init|=
literal|false
decl_stmt|;
name|int
name|eventCompressCount
init|=
literal|0
decl_stmt|;
forever|forever
block|{
name|n
operator|=
name|QT_READ
argument_list|(
name|m_fd
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
operator|+
name|n
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
operator|-
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"Got EOF from the input device."
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|n
operator|<
literal|0
operator|&&
operator|(
name|errno
operator|!=
name|EINTR
operator|&&
name|errno
operator|!=
name|EAGAIN
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not read from input device: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|n
operator|%
sizeof|sizeof
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|n
operator|/=
sizeof|sizeof
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|struct
operator|::
name|input_event
modifier|*
name|data
init|=
operator|&
name|buffer
index|[
name|i
index|]
decl_stmt|;
comment|//qDebug()<< ">>"<< hex<< data->type<< data->code<< dec<< data->value;
name|bool
name|unknown
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_ABS
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_X
operator|&&
name|m_x
operator|!=
name|data
operator|->
name|value
condition|)
block|{
name|m_x
operator|=
name|data
operator|->
name|value
expr_stmt|;
name|posChanged
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_Y
operator|&&
name|m_y
operator|!=
name|data
operator|->
name|value
condition|)
block|{
name|m_y
operator|=
name|data
operator|->
name|value
expr_stmt|;
name|posChanged
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_PRESSURE
condition|)
block|{
comment|//ignore for now...
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_TOOL_WIDTH
condition|)
block|{
comment|//ignore for now...
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_HAT0X
condition|)
block|{
comment|//ignore for now...
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_HAT0Y
condition|)
block|{
comment|//ignore for now...
ifdef|#
directive|ifdef
name|QT_QPA_EXPERIMENTAL_TOUCHEVENT
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_POSITION_X
condition|)
block|{
name|d
operator|->
name|currentX
operator|=
name|data
operator|->
name|value
expr_stmt|;
name|d
operator|->
name|seenMT
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_POSITION_Y
condition|)
block|{
name|d
operator|->
name|currentY
operator|=
name|data
operator|->
name|value
expr_stmt|;
name|d
operator|->
name|seenMT
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_TOUCH_MAJOR
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|value
operator|==
literal|0
condition|)
name|d
operator|->
name|setCurrentState
argument_list|(
name|Qt
operator|::
name|TouchPointReleased
argument_list|)
expr_stmt|;
comment|//otherwise, ignore for now...
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_TOUCH_MINOR
condition|)
block|{
comment|//ignore for now...
endif|#
directive|endif
block|}
else|else
block|{
name|unknown
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_REL
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|REL_X
condition|)
block|{
name|m_x
operator|+=
name|data
operator|->
name|value
expr_stmt|;
name|posChanged
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|REL_Y
condition|)
block|{
name|m_y
operator|+=
name|data
operator|->
name|value
expr_stmt|;
name|posChanged
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_WHEEL
condition|)
block|{
comment|// vertical scroll
comment|// data->value: 1 == up, -1 == down
name|int
name|delta
init|=
literal|120
operator|*
name|data
operator|->
name|value
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
literal|0
argument_list|,
name|QPoint
argument_list|(
name|m_x
argument_list|,
name|m_y
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|m_x
argument_list|,
name|m_y
argument_list|)
argument_list|,
name|delta
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_THROTTLE
condition|)
block|{
comment|// horizontal scroll
comment|// data->value: 1 == right, -1 == left
name|int
name|delta
init|=
literal|120
operator|*
operator|-
name|data
operator|->
name|value
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
literal|0
argument_list|,
name|QPoint
argument_list|(
name|m_x
argument_list|,
name|m_y
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|m_x
argument_list|,
name|m_y
argument_list|)
argument_list|,
name|delta
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unknown
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_KEY
operator|&&
name|data
operator|->
name|code
operator|==
name|BTN_TOUCH
condition|)
block|{
name|m_buttons
operator|=
name|data
operator|->
name|value
condition|?
name|Qt
operator|::
name|LeftButton
else|:
name|Qt
operator|::
name|NoButton
expr_stmt|;
name|sendMouseEvent
argument_list|(
name|m_x
argument_list|,
name|m_y
argument_list|,
name|m_buttons
argument_list|)
expr_stmt|;
name|pendingMouseEvent
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_KEY
operator|&&
name|data
operator|->
name|code
operator|>=
name|BTN_LEFT
operator|&&
name|data
operator|->
name|code
operator|<=
name|BTN_MIDDLE
condition|)
block|{
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
switch|switch
condition|(
name|data
operator|->
name|code
condition|)
block|{
case|case
name|BTN_LEFT
case|:
name|button
operator|=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
break|break;
case|case
name|BTN_MIDDLE
case|:
name|button
operator|=
name|Qt
operator|::
name|MidButton
expr_stmt|;
break|break;
case|case
name|BTN_RIGHT
case|:
name|button
operator|=
name|Qt
operator|::
name|RightButton
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|data
operator|->
name|value
condition|)
name|m_buttons
operator||=
name|button
expr_stmt|;
else|else
name|m_buttons
operator|&=
operator|~
name|button
expr_stmt|;
name|sendMouseEvent
argument_list|(
name|m_x
argument_list|,
name|m_y
argument_list|,
name|m_buttons
argument_list|)
expr_stmt|;
name|pendingMouseEvent
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_SYN
operator|&&
name|data
operator|->
name|code
operator|==
name|SYN_REPORT
condition|)
block|{
if|if
condition|(
name|posChanged
condition|)
block|{
name|posChanged
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|m_compression
condition|)
block|{
name|pendingMouseEvent
operator|=
literal|true
expr_stmt|;
name|eventCompressCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sendMouseEvent
argument_list|(
name|m_x
argument_list|,
name|m_y
argument_list|,
name|m_buttons
argument_list|)
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|QT_QPA_EXPERIMENTAL_TOUCHEVENT
if|if
condition|(
name|d
operator|->
name|state
operator|==
name|QEvent
operator|::
name|TouchBegin
operator|&&
operator|!
name|d
operator|->
name|seenMT
condition|)
block|{
comment|//no multipoint-touch events to send
block|}
else|else
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|seenMT
condition|)
name|d
operator|->
name|state
operator|=
name|QEvent
operator|::
name|TouchEnd
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|currentPoint
argument_list|()
init|;
name|i
operator|<
name|d
operator|->
name|touchPoints
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|->
name|touchPoints
index|[
name|i
index|]
operator|.
name|pressure
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|touchPoints
index|[
name|i
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
block|}
comment|//qDebug()<< "handleTouchEvent"<< d->state<< d->touchPoints.size()<< d->touchPoints[0].state;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|state
argument_list|,
name|QTouchEvent
operator|::
name|TouchScreen
argument_list|,
name|d
operator|->
name|touchPoints
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|seenMT
condition|)
block|{
name|d
operator|->
name|state
operator|=
name|QEvent
operator|::
name|TouchUpdate
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|state
operator|=
name|QEvent
operator|::
name|TouchBegin
expr_stmt|;
name|d
operator|->
name|touchPoints
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|setCurrentPoint
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|seenMT
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_SYN
operator|&&
name|data
operator|->
name|code
operator|==
name|SYN_MT_REPORT
condition|)
block|{
comment|//store data for this touch point
if|if
condition|(
operator|!
name|d
operator|->
name|seenMT
condition|)
block|{
name|d
operator|->
name|setCurrentState
argument_list|(
name|Qt
operator|::
name|TouchPointReleased
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|currentState
argument_list|()
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|)
block|{
name|d
operator|->
name|updateCurrentPos
argument_list|()
expr_stmt|;
name|d
operator|->
name|setCurrentState
argument_list|(
name|Qt
operator|::
name|TouchPointPressed
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|currentMoved
argument_list|()
condition|)
block|{
name|d
operator|->
name|updateCurrentPos
argument_list|()
expr_stmt|;
name|d
operator|->
name|setCurrentState
argument_list|(
name|Qt
operator|::
name|TouchPointMoved
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|setCurrentState
argument_list|(
name|Qt
operator|::
name|TouchPointStationary
argument_list|)
expr_stmt|;
block|}
comment|//qDebug()<< "end of point"<< d->currentPoint()<< d->currentX<< d->currentY<< d->currentState();
comment|//advance to next tp:
name|d
operator|->
name|advanceCurrentPoint
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_MSC
operator|&&
name|data
operator|->
name|code
operator|==
name|MSC_SCAN
condition|)
block|{
comment|// kernel encountered an unmapped key - just ignore it
continue|continue;
block|}
else|else
block|{
name|unknown
operator|=
literal|true
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QLINUXINPUT_EXTRA_DEBUG
if|if
condition|(
name|unknown
condition|)
block|{
name|qWarning
argument_list|(
literal|"unknown mouse event type=%x, code=%x, value=%x"
argument_list|,
name|data
operator|->
name|type
argument_list|,
name|data
operator|->
name|code
argument_list|,
name|data
operator|->
name|value
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
if|if
condition|(
name|m_compression
operator|&&
name|pendingMouseEvent
condition|)
block|{
name|int
name|distanceSquared
init|=
operator|(
name|m_x
operator|-
name|m_prevx
operator|)
operator|*
operator|(
name|m_x
operator|-
name|m_prevx
operator|)
operator|+
operator|(
name|m_y
operator|-
name|m_prevy
operator|)
operator|*
operator|(
name|m_y
operator|-
name|m_prevy
operator|)
decl_stmt|;
if|if
condition|(
name|distanceSquared
operator|>
name|m_jitterLimitSquared
condition|)
name|sendMouseEvent
argument_list|(
name|m_x
argument_list|,
name|m_y
argument_list|,
name|m_buttons
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
end_comment
begin_comment
comment|//Keyboard handler
end_comment
begin_class
DECL|class|QWSLinuxInputKeyboardHandler
class|class
name|QWSLinuxInputKeyboardHandler
super|:
specifier|public
name|QWSKeyboardHandler
block|{
public|public:
name|QWSLinuxInputKeyboardHandler
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
constructor_decl|;
name|~
name|QWSLinuxInputKeyboardHandler
parameter_list|()
destructor_decl|;
specifier|virtual
name|bool
name|filterInputEvent
parameter_list|(
name|quint16
modifier|&
name|input_code
parameter_list|,
name|qint32
modifier|&
name|input_value
parameter_list|)
function_decl|;
comment|//private:
comment|//    QWSLinuxInputKbPrivate *d;
block|}
class|;
end_class
begin_constructor
DECL|function|QWSLinuxInputKeyboardHandler
name|QWSLinuxInputKeyboardHandler
operator|::
name|QWSLinuxInputKeyboardHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|device
parameter_list|)
member_init_list|:
name|QWSKeyboardHandler
argument_list|(
name|device
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWSLinuxInputKeyboardHandler
name|QWSLinuxInputKeyboardHandler
operator|::
name|~
name|QWSLinuxInputKeyboardHandler
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|filterInputEvent
name|bool
name|QWSLinuxInputKeyboardHandler
operator|::
name|filterInputEvent
parameter_list|(
name|quint16
modifier|&
parameter_list|,
name|qint32
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|QLinuxInputKeyboardHandler
name|QLinuxInputKeyboardHandler
operator|::
name|QLinuxInputKeyboardHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|specification
parameter_list|)
member_init_list|:
name|m_handler
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_tty_fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_orig_kbmode
argument_list|(
name|K_XLATE
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"LinuxInputSubsystem Keyboard Handler"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|dev
init|=
name|QLatin1String
argument_list|(
literal|"/dev/input/event1"
argument_list|)
decl_stmt|;
name|int
name|repeat_delay
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|repeat_rate
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|ttymode
init|=
literal|false
decl_stmt|;
name|QStringList
name|args
init|=
name|specification
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|arg
decl|,
name|args
control|)
block|{
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"repeat-delay="
argument_list|)
argument_list|)
condition|)
name|repeat_delay
operator|=
name|arg
operator|.
name|mid
argument_list|(
literal|13
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"repeat-rate="
argument_list|)
argument_list|)
condition|)
name|repeat_rate
operator|=
name|arg
operator|.
name|mid
argument_list|(
literal|12
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ttymode"
argument_list|)
argument_list|)
condition|)
name|ttymode
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/dev/"
argument_list|)
argument_list|)
condition|)
name|dev
operator|=
name|arg
expr_stmt|;
block|}
name|m_handler
operator|=
operator|new
name|QWSLinuxInputKeyboardHandler
argument_list|(
name|dev
argument_list|)
expr_stmt|;
comment|//This is a hack to avoid copying all the QWS code
name|m_fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|repeat_delay
operator|>
literal|0
operator|&&
name|repeat_rate
operator|>
literal|0
condition|)
block|{
name|int
name|kbdrep
index|[
literal|2
index|]
init|=
block|{
name|repeat_delay
block|,
name|repeat_rate
block|}
decl_stmt|;
operator|::
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCSREP
argument_list|,
name|kbdrep
argument_list|)
expr_stmt|;
block|}
name|QSocketNotifier
modifier|*
name|notifier
decl_stmt|;
name|notifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|notifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readKeycode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ttymode
condition|)
block|{
comment|// play nice in case we are started from a shell (e.g. for debugging)
name|m_tty_fd
operator|=
name|isatty
argument_list|(
literal|0
argument_list|)
condition|?
literal|0
else|:
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|m_tty_fd
operator|>=
literal|0
condition|)
block|{
comment|// save tty config for restore.
name|tcgetattr
argument_list|(
name|m_tty_fd
argument_list|,
operator|&
name|m_tty_attr
argument_list|)
expr_stmt|;
name|struct
operator|::
name|termios
name|termdata
decl_stmt|;
name|tcgetattr
argument_list|(
name|m_tty_fd
argument_list|,
operator|&
name|termdata
argument_list|)
expr_stmt|;
comment|// record the original mode so we can restore it again in the destructor.
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDGKBMODE
argument_list|,
operator|&
name|m_orig_kbmode
argument_list|)
expr_stmt|;
comment|// setting this translation mode is even needed in INPUT mode to prevent
comment|// the shell from also interpreting codes, if the process has a tty
comment|// attached: e.g. Ctrl+C wouldn't copy, but kill the application.
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDSKBMODE
argument_list|,
name|K_MEDIUMRAW
argument_list|)
expr_stmt|;
comment|// set the tty layer to pass-through
name|termdata
operator|.
name|c_iflag
operator|=
operator|(
name|IGNPAR
operator||
name|IGNBRK
operator|)
operator|&
operator|(
operator|~
name|PARMRK
operator|)
operator|&
operator|(
operator|~
name|ISTRIP
operator|)
expr_stmt|;
name|termdata
operator|.
name|c_oflag
operator|=
literal|0
expr_stmt|;
name|termdata
operator|.
name|c_cflag
operator|=
name|CREAD
operator||
name|CS8
expr_stmt|;
name|termdata
operator|.
name|c_lflag
operator|=
literal|0
expr_stmt|;
name|termdata
operator|.
name|c_cc
index|[
name|VTIME
index|]
operator|=
literal|0
expr_stmt|;
name|termdata
operator|.
name|c_cc
index|[
name|VMIN
index|]
operator|=
literal|1
expr_stmt|;
name|cfsetispeed
argument_list|(
operator|&
name|termdata
argument_list|,
literal|9600
argument_list|)
expr_stmt|;
name|cfsetospeed
argument_list|(
operator|&
name|termdata
argument_list|,
literal|9600
argument_list|)
expr_stmt|;
name|tcsetattr
argument_list|(
name|m_tty_fd
argument_list|,
name|TCSANOW
argument_list|,
operator|&
name|termdata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Cannot open keyboard input device '%s': %s"
argument_list|,
name|qPrintable
argument_list|(
name|dev
argument_list|)
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QLinuxInputKeyboardHandler
name|QLinuxInputKeyboardHandler
operator|::
name|~
name|QLinuxInputKeyboardHandler
parameter_list|()
block|{
if|if
condition|(
name|m_tty_fd
operator|>=
literal|0
condition|)
block|{
operator|::
name|ioctl
argument_list|(
name|m_tty_fd
argument_list|,
name|KDSKBMODE
argument_list|,
name|m_orig_kbmode
argument_list|)
expr_stmt|;
name|tcsetattr
argument_list|(
name|m_tty_fd
argument_list|,
name|TCSANOW
argument_list|,
operator|&
name|m_tty_attr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
name|QT_CLOSE
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
operator|delete
name|m_handler
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|switchLed
name|void
name|QLinuxInputKeyboardHandler
operator|::
name|switchLed
parameter_list|(
name|int
name|led
parameter_list|,
name|bool
name|state
parameter_list|)
block|{
name|struct
operator|::
name|input_event
name|led_ie
decl_stmt|;
operator|::
name|gettimeofday
argument_list|(
operator|&
name|led_ie
operator|.
name|time
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|led_ie
operator|.
name|type
operator|=
name|EV_LED
expr_stmt|;
name|led_ie
operator|.
name|code
operator|=
name|led
expr_stmt|;
name|led_ie
operator|.
name|value
operator|=
name|state
expr_stmt|;
name|QT_WRITE
argument_list|(
name|m_fd
argument_list|,
operator|&
name|led_ie
argument_list|,
sizeof|sizeof
argument_list|(
name|led_ie
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readKeycode
name|void
name|QLinuxInputKeyboardHandler
operator|::
name|readKeycode
parameter_list|()
block|{
name|struct
operator|::
name|input_event
name|buffer
index|[
literal|32
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
forever|forever
block|{
name|n
operator|=
name|QT_READ
argument_list|(
name|m_fd
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
operator|+
name|n
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
operator|-
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"Got EOF from the input device."
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|n
operator|<
literal|0
operator|&&
operator|(
name|errno
operator|!=
name|EINTR
operator|&&
name|errno
operator|!=
name|EAGAIN
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not read from input device: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|n
operator|%
sizeof|sizeof
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|)
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|n
operator|/=
sizeof|sizeof
argument_list|(
name|buffer
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|.
name|type
operator|!=
name|EV_KEY
condition|)
continue|continue;
name|quint16
name|code
init|=
name|buffer
index|[
name|i
index|]
operator|.
name|code
decl_stmt|;
name|qint32
name|value
init|=
name|buffer
index|[
name|i
index|]
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|m_handler
operator|->
name|filterInputEvent
argument_list|(
name|code
argument_list|,
name|value
argument_list|)
condition|)
continue|continue;
name|QWSKeyboardHandler
operator|::
name|KeycodeAction
name|ka
decl_stmt|;
name|ka
operator|=
name|m_handler
operator|->
name|processKeycode
argument_list|(
name|code
argument_list|,
name|value
operator|!=
literal|0
argument_list|,
name|value
operator|==
literal|2
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ka
condition|)
block|{
case|case
name|QWSKeyboardHandler
operator|::
name|CapsLockOn
case|:
case|case
name|QWSKeyboardHandler
operator|::
name|CapsLockOff
case|:
name|switchLed
argument_list|(
name|LED_CAPSL
argument_list|,
name|ka
operator|==
name|QWSKeyboardHandler
operator|::
name|CapsLockOn
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSKeyboardHandler
operator|::
name|NumLockOn
case|:
case|case
name|QWSKeyboardHandler
operator|::
name|NumLockOff
case|:
name|switchLed
argument_list|(
name|LED_NUML
argument_list|,
name|ka
operator|==
name|QWSKeyboardHandler
operator|::
name|NumLockOn
argument_list|)
expr_stmt|;
break|break;
case|case
name|QWSKeyboardHandler
operator|::
name|ScrollLockOn
case|:
case|case
name|QWSKeyboardHandler
operator|::
name|ScrollLockOff
case|:
name|switchLed
argument_list|(
name|LED_SCROLLL
argument_list|,
name|ka
operator|==
name|QWSKeyboardHandler
operator|::
name|ScrollLockOn
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// ignore console switching and reboot
break|break;
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
