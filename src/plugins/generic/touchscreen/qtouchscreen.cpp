begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtouchscreen.h"
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_unix_p.h>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<libudev.h>
end_include
begin_extern
extern|extern
literal|"C"
block|{
include|#
directive|include
file|<mtdev.h>
block|}
end_extern
begin_comment
comment|//#define POINT_DEBUG
end_comment
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QTouchScreenData
class|class
name|QTouchScreenData
block|{
public|public:
name|QTouchScreenData
parameter_list|(
name|QTouchScreenHandler
modifier|*
name|q_ptr
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|args
parameter_list|)
constructor_decl|;
name|void
name|processInputEvent
parameter_list|(
name|input_event
modifier|*
name|data
parameter_list|)
function_decl|;
DECL|member|q
name|QTouchScreenHandler
modifier|*
name|q
decl_stmt|;
DECL|member|m_state
name|QEvent
operator|::
name|Type
name|m_state
decl_stmt|;
DECL|member|m_prevState
name|QEvent
operator|::
name|Type
name|m_prevState
decl_stmt|;
DECL|member|m_touchPoints
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|m_touchPoints
decl_stmt|;
DECL|struct|Slot
struct|struct
name|Slot
block|{
DECL|member|trackingId
name|int
name|trackingId
decl_stmt|;
DECL|member|x
name|int
name|x
decl_stmt|;
DECL|member|y
name|int
name|y
decl_stmt|;
DECL|member|state
name|Qt
operator|::
name|TouchPointState
name|state
decl_stmt|;
DECL|member|primary
name|bool
name|primary
decl_stmt|;
DECL|function|Slot
name|Slot
parameter_list|()
member_init_list|:
name|trackingId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|x
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|y
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Qt
operator|::
name|TouchPointPressed
argument_list|)
member_init_list|,
name|primary
argument_list|(
literal|false
argument_list|)
block|{ }
block|}
struct|;
DECL|member|m_slots
name|QMap
argument_list|<
name|int
argument_list|,
name|Slot
argument_list|>
name|m_slots
decl_stmt|;
DECL|member|m_lastReport
name|QMap
argument_list|<
name|int
argument_list|,
name|QPoint
argument_list|>
name|m_lastReport
decl_stmt|;
DECL|member|m_currentSlot
name|int
name|m_currentSlot
decl_stmt|;
DECL|member|m_clearTimer
name|QTimer
name|m_clearTimer
decl_stmt|;
DECL|member|m_clearTimerEnabled
name|bool
name|m_clearTimerEnabled
decl_stmt|;
DECL|member|hw_range_x_min
name|int
name|hw_range_x_min
decl_stmt|;
DECL|member|hw_range_x_max
name|int
name|hw_range_x_max
decl_stmt|;
DECL|member|hw_range_y_min
name|int
name|hw_range_y_min
decl_stmt|;
DECL|member|hw_range_y_max
name|int
name|hw_range_y_max
decl_stmt|;
DECL|member|hw_name
name|QString
name|hw_name
decl_stmt|;
DECL|member|m_observers
name|QList
argument_list|<
name|QTouchScreenObserver
modifier|*
argument_list|>
name|m_observers
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QTouchScreenData
name|QTouchScreenData
operator|::
name|QTouchScreenData
parameter_list|(
name|QTouchScreenHandler
modifier|*
name|q_ptr
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|args
parameter_list|)
member_init_list|:
name|q
argument_list|(
name|q_ptr
argument_list|)
member_init_list|,
name|m_state
argument_list|(
name|QEvent
operator|::
name|TouchBegin
argument_list|)
member_init_list|,
name|m_prevState
argument_list|(
name|m_state
argument_list|)
member_init_list|,
name|m_currentSlot
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_range_x_min
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_range_x_max
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_range_y_min
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_range_y_max
argument_list|(
literal|0
argument_list|)
block|{
name|m_clearTimerEnabled
operator|=
operator|!
name|args
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"no_timeout"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_clearTimerEnabled
condition|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|m_clearTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|onTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_clearTimer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m_clearTimer
operator|.
name|setInterval
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// default timeout is 2 seconds
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"timeout="
argument_list|)
argument_list|)
condition|)
name|m_clearTimer
operator|.
name|setInterval
argument_list|(
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|mid
argument_list|(
literal|8
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_constructor
DECL|function|QTouchScreenHandler
name|QTouchScreenHandler
operator|::
name|QTouchScreenHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|spec
parameter_list|)
member_init_list|:
name|m_notify
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_mtdev
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
literal|0
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"LinuxInputSubsystem Touch Handler"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|dev
init|=
name|QLatin1String
argument_list|(
literal|"/dev/input/event5"
argument_list|)
decl_stmt|;
name|try_udev
argument_list|(
operator|&
name|dev
argument_list|)
expr_stmt|;
name|QStringList
name|args
init|=
name|spec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/dev/"
argument_list|)
argument_list|)
condition|)
name|dev
operator|=
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Using device '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|dev
argument_list|)
argument_list|)
expr_stmt|;
name|m_fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
operator||
name|O_NDELAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
block|{
name|m_notify
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_notify
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Cannot open input device '%s': %s"
argument_list|,
name|qPrintable
argument_list|(
name|dev
argument_list|)
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_mtdev
operator|=
operator|(
name|mtdev
operator|*
operator|)
name|calloc
argument_list|(
literal|1
argument_list|,
sizeof|sizeof
argument_list|(
name|mtdev
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|mtdeverr
init|=
name|mtdev_open
argument_list|(
name|m_mtdev
argument_list|,
name|m_fd
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtdeverr
condition|)
block|{
name|qWarning
argument_list|(
literal|"mtdev_open failed: %d"
argument_list|,
name|mtdeverr
argument_list|)
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|=
operator|new
name|QTouchScreenData
argument_list|(
name|this
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|input_absinfo
name|absInfo
decl_stmt|;
name|memset
argument_list|(
operator|&
name|absInfo
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|input_absinfo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGABS
argument_list|(
name|ABS_X
argument_list|)
argument_list|,
operator|&
name|absInfo
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|qDebug
argument_list|(
literal|"min X: %d max X: %d"
argument_list|,
name|absInfo
operator|.
name|minimum
argument_list|,
name|absInfo
operator|.
name|maximum
argument_list|)
expr_stmt|;
name|d
operator|->
name|hw_range_x_min
operator|=
name|absInfo
operator|.
name|minimum
expr_stmt|;
name|d
operator|->
name|hw_range_x_max
operator|=
name|absInfo
operator|.
name|maximum
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGABS
argument_list|(
name|ABS_Y
argument_list|)
argument_list|,
operator|&
name|absInfo
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|qDebug
argument_list|(
literal|"min Y: %d max Y: %d"
argument_list|,
name|absInfo
operator|.
name|minimum
argument_list|,
name|absInfo
operator|.
name|maximum
argument_list|)
expr_stmt|;
name|d
operator|->
name|hw_range_y_min
operator|=
name|absInfo
operator|.
name|minimum
expr_stmt|;
name|d
operator|->
name|hw_range_y_max
operator|=
name|absInfo
operator|.
name|maximum
expr_stmt|;
block|}
name|char
name|name
index|[
literal|1024
index|]
decl_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGNAME
argument_list|(
sizeof|sizeof
argument_list|(
name|name
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|,
name|name
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|d
operator|->
name|hw_name
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"device name"
operator|<<
name|d
operator|->
name|hw_name
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QTouchScreenHandler
name|QTouchScreenHandler
operator|::
name|~
name|QTouchScreenHandler
parameter_list|()
block|{
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
name|QT_CLOSE
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_mtdev
condition|)
block|{
name|mtdev_close
argument_list|(
name|m_mtdev
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|m_mtdev
argument_list|)
expr_stmt|;
block|}
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|addObserver
name|void
name|QTouchScreenHandler
operator|::
name|addObserver
parameter_list|(
name|QTouchScreenObserver
modifier|*
name|observer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|||
operator|!
name|observer
condition|)
return|return;
name|d
operator|->
name|m_observers
operator|.
name|append
argument_list|(
name|observer
argument_list|)
expr_stmt|;
name|observer
operator|->
name|touch_configure
argument_list|(
name|d
operator|->
name|hw_range_x_min
argument_list|,
name|d
operator|->
name|hw_range_x_max
argument_list|,
name|d
operator|->
name|hw_range_y_min
argument_list|,
name|d
operator|->
name|hw_range_y_max
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|try_udev
name|void
name|QTouchScreenHandler
operator|::
name|try_udev
parameter_list|(
name|QString
modifier|*
name|path
parameter_list|)
block|{
name|udev
modifier|*
name|u
init|=
name|udev_new
argument_list|()
decl_stmt|;
name|udev_enumerate
modifier|*
name|ue
init|=
name|udev_enumerate_new
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|udev_enumerate_add_match_subsystem
argument_list|(
name|ue
argument_list|,
literal|"input"
argument_list|)
expr_stmt|;
name|udev_enumerate_add_match_property
argument_list|(
name|ue
argument_list|,
literal|"QT_TOUCH"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|udev_enumerate_scan_devices
argument_list|(
name|ue
argument_list|)
expr_stmt|;
name|udev_list_entry
modifier|*
name|entry
decl_stmt|;
name|udev_list_entry_foreach
argument_list|(
argument|entry
argument_list|,
argument|udev_enumerate_get_list_entry(ue)
argument_list|)
block|{
specifier|const
name|char
modifier|*
name|syspath
init|=
name|udev_list_entry_get_name
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|udev_device
modifier|*
name|udevice
init|=
name|udev_device_new_from_syspath
argument_list|(
name|u
argument_list|,
name|syspath
argument_list|)
decl_stmt|;
operator|*
name|path
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|udev_device_get_devnode
argument_list|(
name|udevice
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"from udev: %s"
argument_list|,
name|qPrintable
argument_list|(
operator|*
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|udev_device_unref
argument_list|(
name|udevice
argument_list|)
expr_stmt|;
block|}
name|udev_enumerate_unref
argument_list|(
name|ue
argument_list|)
expr_stmt|;
name|udev_unref
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readData
name|void
name|QTouchScreenHandler
operator|::
name|readData
parameter_list|()
block|{
name|input_event
name|buffer
index|[
literal|32
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|n
operator|=
name|mtdev_get
argument_list|(
name|m_mtdev
argument_list|,
name|m_fd
argument_list|,
name|buffer
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|input_event
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|errno
operator|!=
name|EINTR
operator|&&
name|errno
operator|!=
name|EAGAIN
condition|)
name|qWarning
argument_list|(
literal|"Could not read from input device: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|input_event
modifier|*
name|data
init|=
operator|&
name|buffer
index|[
name|i
index|]
decl_stmt|;
name|d
operator|->
name|processInputEvent
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|onTimeout
name|void
name|QTouchScreenHandler
operator|::
name|onTimeout
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|POINT_DEBUG
name|qDebug
argument_list|(
literal|"TIMEOUT (%d slots)"
argument_list|,
name|d
operator|->
name|m_slots
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|m_slots
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_state
operator|!=
name|QEvent
operator|::
name|TouchEnd
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|m_observers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|m_observers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|touch_point
argument_list|(
name|QEvent
operator|::
name|TouchEnd
argument_list|,
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_state
operator|=
name|QEvent
operator|::
name|TouchBegin
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processInputEvent
name|void
name|QTouchScreenData
operator|::
name|processInputEvent
parameter_list|(
name|input_event
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_ABS
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_POSITION_X
condition|)
block|{
name|m_slots
index|[
name|m_currentSlot
index|]
operator|.
name|x
operator|=
name|data
operator|->
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_POSITION_Y
condition|)
block|{
name|m_slots
index|[
name|m_currentSlot
index|]
operator|.
name|y
operator|=
name|data
operator|->
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_SLOT
condition|)
block|{
name|m_currentSlot
operator|=
name|data
operator|->
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_TRACKING_ID
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|value
operator|==
operator|-
literal|1
condition|)
block|{
name|bool
name|wasPrimary
init|=
name|m_slots
index|[
name|m_currentSlot
index|]
operator|.
name|primary
decl_stmt|;
name|m_lastReport
operator|.
name|remove
argument_list|(
name|m_slots
index|[
name|m_currentSlot
index|]
operator|.
name|trackingId
argument_list|)
expr_stmt|;
name|m_slots
operator|.
name|remove
argument_list|(
name|m_currentSlot
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasPrimary
operator|&&
operator|!
name|m_slots
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_slots
index|[
name|m_slots
operator|.
name|keys
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|primary
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|m_slots
index|[
name|m_currentSlot
index|]
operator|.
name|trackingId
operator|=
name|data
operator|->
name|value
expr_stmt|;
name|m_slots
index|[
name|m_currentSlot
index|]
operator|.
name|primary
operator|=
name|m_slots
operator|.
name|count
argument_list|()
operator|==
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_TOUCH_MAJOR
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|value
operator|==
literal|0
condition|)
name|m_slots
index|[
name|m_currentSlot
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_SYN
operator|&&
name|data
operator|->
name|code
operator|==
name|SYN_REPORT
condition|)
block|{
if|if
condition|(
name|m_clearTimerEnabled
condition|)
name|m_clearTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|m_touchPoints
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|keys
init|=
name|m_slots
operator|.
name|keys
argument_list|()
decl_stmt|;
name|int
name|ignoredSlotCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Slot
modifier|&
name|slot
argument_list|(
name|m_slots
operator|.
name|value
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|slot
operator|.
name|trackingId
operator|==
literal|0
condition|)
block|{
operator|++
name|ignoredSlotCount
expr_stmt|;
continue|continue;
block|}
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp
decl_stmt|;
name|tp
operator|.
name|id
operator|=
name|slot
operator|.
name|trackingId
expr_stmt|;
name|tp
operator|.
name|isPrimary
operator|=
name|slot
operator|.
name|primary
expr_stmt|;
name|tp
operator|.
name|pressure
operator|=
name|slot
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|?
literal|0
else|:
literal|1
expr_stmt|;
name|tp
operator|.
name|area
operator|=
name|QRectF
argument_list|(
name|slot
operator|.
name|x
argument_list|,
name|slot
operator|.
name|y
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tp
operator|.
name|state
operator|=
name|slot
operator|.
name|state
expr_stmt|;
if|if
condition|(
name|slot
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointMoved
operator|&&
name|m_lastReport
operator|.
name|contains
argument_list|(
name|slot
operator|.
name|trackingId
argument_list|)
condition|)
block|{
name|QPoint
name|lastPos
init|=
name|m_lastReport
operator|.
name|value
argument_list|(
name|slot
operator|.
name|trackingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastPos
operator|.
name|x
argument_list|()
operator|==
name|slot
operator|.
name|x
operator|&&
name|lastPos
operator|.
name|y
argument_list|()
operator|==
name|slot
operator|.
name|y
condition|)
name|tp
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointStationary
expr_stmt|;
block|}
name|m_touchPoints
operator|.
name|append
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|m_lastReport
operator|.
name|insert
argument_list|(
name|slot
operator|.
name|trackingId
argument_list|,
name|QPoint
argument_list|(
name|slot
operator|.
name|x
argument_list|,
name|slot
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_slots
operator|.
name|count
argument_list|()
operator|-
name|ignoredSlotCount
operator|==
literal|0
condition|)
name|m_state
operator|=
name|QEvent
operator|::
name|TouchEnd
expr_stmt|;
comment|// Skip if state is TouchUpdate and all points are Stationary.
name|bool
name|skip
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|m_state
operator|==
name|QEvent
operator|::
name|TouchUpdate
condition|)
block|{
name|skip
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_touchPoints
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|m_touchPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|state
operator|!=
name|Qt
operator|::
name|TouchPointStationary
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
ifdef|#
directive|ifdef
name|POINT_DEBUG
name|qDebug
argument_list|()
operator|<<
name|m_touchPoints
operator|.
name|count
argument_list|()
operator|<<
literal|"touchpoints, event type"
operator|<<
name|m_state
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_touchPoints
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|qDebug
argument_list|()
operator|<<
literal|"    "
operator|<<
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|id
operator|<<
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|state
operator|<<
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|area
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|skip
operator|&&
operator|!
operator|(
name|m_state
operator|==
name|m_prevState
operator|&&
name|m_state
operator|==
name|QEvent
operator|::
name|TouchEnd
operator|)
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_observers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|m_observers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|touch_point
argument_list|(
name|m_state
argument_list|,
name|m_touchPoints
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Slot
modifier|&
name|slot
argument_list|(
name|m_slots
index|[
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|slot
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointPressed
condition|)
name|slot
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
block|}
name|m_prevState
operator|=
name|m_state
expr_stmt|;
if|if
condition|(
name|m_state
operator|==
name|QEvent
operator|::
name|TouchBegin
condition|)
name|m_state
operator|=
name|QEvent
operator|::
name|TouchUpdate
expr_stmt|;
elseif|else
if|if
condition|(
name|m_state
operator|==
name|QEvent
operator|::
name|TouchEnd
condition|)
name|m_state
operator|=
name|QEvent
operator|::
name|TouchBegin
expr_stmt|;
comment|// The user's finger may fall off the touchscreen which in some rare
comment|// cases may mean there will be no released event ever received for that
comment|// particular point. Use a timer to clear all points when no activity
comment|// occurs for a certain period of time.
if|if
condition|(
name|m_clearTimerEnabled
operator|&&
name|m_state
operator|!=
name|QEvent
operator|::
name|TouchBegin
condition|)
name|m_clearTimer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QTouchScreenHandlerThread
name|QTouchScreenHandlerThread
operator|::
name|QTouchScreenHandlerThread
parameter_list|(
specifier|const
name|QString
modifier|&
name|spec
parameter_list|,
name|QTouchScreenObserver
modifier|*
name|observer
parameter_list|)
member_init_list|:
name|m_spec
argument_list|(
name|spec
argument_list|)
member_init_list|,
name|m_handler
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_observer
argument_list|(
name|observer
argument_list|)
block|{
name|start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QTouchScreenHandlerThread
name|QTouchScreenHandlerThread
operator|::
name|~
name|QTouchScreenHandlerThread
parameter_list|()
block|{
name|quit
argument_list|()
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|run
name|void
name|QTouchScreenHandlerThread
operator|::
name|run
parameter_list|()
block|{
name|m_handler
operator|=
operator|new
name|QTouchScreenHandler
argument_list|(
name|m_spec
argument_list|)
expr_stmt|;
name|m_handler
operator|->
name|addObserver
argument_list|(
name|m_observer
argument_list|)
expr_stmt|;
name|exec
argument_list|()
expr_stmt|;
operator|delete
name|m_handler
expr_stmt|;
name|m_handler
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
