begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtouchscreen.h"
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_unix_p.h>
end_include
begin_include
include|#
directive|include
file|<linux/input.h>
end_include
begin_include
include|#
directive|include
file|<libudev.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|//#define POINT_DEBUG
end_comment
begin_class
DECL|class|QTouchScreenData
class|class
name|QTouchScreenData
block|{
public|public:
name|QTouchScreenData
parameter_list|(
name|QTouchScreenHandler
modifier|*
name|q_ptr
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|args
parameter_list|)
constructor_decl|;
name|void
name|processInputEvent
parameter_list|(
name|input_event
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|dump
parameter_list|()
function_decl|;
DECL|member|q
name|QTouchScreenHandler
modifier|*
name|q
decl_stmt|;
DECL|member|m_state
name|QEvent
operator|::
name|Type
name|m_state
decl_stmt|;
DECL|member|m_prevState
name|QEvent
operator|::
name|Type
name|m_prevState
decl_stmt|;
DECL|member|m_lastEventType
name|int
name|m_lastEventType
decl_stmt|;
DECL|member|m_touchPoints
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|m_touchPoints
decl_stmt|;
DECL|struct|Contact
struct|struct
name|Contact
block|{
DECL|member|trackingId
name|int
name|trackingId
decl_stmt|;
DECL|member|x
name|int
name|x
decl_stmt|;
DECL|member|y
name|int
name|y
decl_stmt|;
DECL|member|maj
name|int
name|maj
decl_stmt|;
DECL|member|state
name|Qt
operator|::
name|TouchPointState
name|state
decl_stmt|;
DECL|member|primary
name|bool
name|primary
decl_stmt|;
DECL|function|Contact
name|Contact
parameter_list|()
member_init_list|:
name|trackingId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|x
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|y
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maj
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Qt
operator|::
name|TouchPointPressed
argument_list|)
member_init_list|,
name|primary
argument_list|(
literal|false
argument_list|)
block|{ }
block|}
struct|;
DECL|member|m_contacts
DECL|member|m_lastContacts
name|QMap
argument_list|<
name|int
argument_list|,
name|Contact
argument_list|>
name|m_contacts
decl_stmt|,
name|m_lastContacts
decl_stmt|;
DECL|member|m_currentData
name|Contact
name|m_currentData
decl_stmt|;
DECL|member|hw_range_x_min
name|int
name|hw_range_x_min
decl_stmt|;
DECL|member|hw_range_x_max
name|int
name|hw_range_x_max
decl_stmt|;
DECL|member|hw_range_y_min
name|int
name|hw_range_y_min
decl_stmt|;
DECL|member|hw_range_y_max
name|int
name|hw_range_y_max
decl_stmt|;
DECL|member|hw_name
name|QString
name|hw_name
decl_stmt|;
DECL|member|m_observers
name|QList
argument_list|<
name|QTouchScreenObserver
modifier|*
argument_list|>
name|m_observers
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QTouchScreenData
name|QTouchScreenData
operator|::
name|QTouchScreenData
parameter_list|(
name|QTouchScreenHandler
modifier|*
name|q_ptr
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|args
parameter_list|)
member_init_list|:
name|q
argument_list|(
name|q_ptr
argument_list|)
member_init_list|,
name|m_state
argument_list|(
name|QEvent
operator|::
name|TouchBegin
argument_list|)
member_init_list|,
name|m_prevState
argument_list|(
name|m_state
argument_list|)
member_init_list|,
name|m_lastEventType
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|hw_range_x_min
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_range_x_max
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_range_y_min
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hw_range_y_max
argument_list|(
literal|0
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QTouchScreenHandler
name|QTouchScreenHandler
operator|::
name|QTouchScreenHandler
parameter_list|(
specifier|const
name|QString
modifier|&
name|spec
parameter_list|)
member_init_list|:
name|m_notify
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|d
argument_list|(
literal|0
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"LinuxInputSubsystem Touch Handler"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|dev
init|=
name|QLatin1String
argument_list|(
literal|"/dev/input/event5"
argument_list|)
decl_stmt|;
name|try_udev
argument_list|(
operator|&
name|dev
argument_list|)
expr_stmt|;
name|QStringList
name|args
init|=
name|spec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"/dev/"
argument_list|)
argument_list|)
condition|)
name|dev
operator|=
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Using device '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|dev
argument_list|)
argument_list|)
expr_stmt|;
name|m_fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
operator||
name|O_NDELAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
block|{
name|m_notify
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_notify
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Cannot open input device '%s': %s"
argument_list|,
name|qPrintable
argument_list|(
name|dev
argument_list|)
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|=
operator|new
name|QTouchScreenData
argument_list|(
name|this
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|input_absinfo
name|absInfo
decl_stmt|;
name|memset
argument_list|(
operator|&
name|absInfo
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|input_absinfo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGABS
argument_list|(
name|ABS_X
argument_list|)
argument_list|,
operator|&
name|absInfo
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|qDebug
argument_list|(
literal|"min X: %d max X: %d"
argument_list|,
name|absInfo
operator|.
name|minimum
argument_list|,
name|absInfo
operator|.
name|maximum
argument_list|)
expr_stmt|;
name|d
operator|->
name|hw_range_x_min
operator|=
name|absInfo
operator|.
name|minimum
expr_stmt|;
name|d
operator|->
name|hw_range_x_max
operator|=
name|absInfo
operator|.
name|maximum
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGABS
argument_list|(
name|ABS_Y
argument_list|)
argument_list|,
operator|&
name|absInfo
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|qDebug
argument_list|(
literal|"min Y: %d max Y: %d"
argument_list|,
name|absInfo
operator|.
name|minimum
argument_list|,
name|absInfo
operator|.
name|maximum
argument_list|)
expr_stmt|;
name|d
operator|->
name|hw_range_y_min
operator|=
name|absInfo
operator|.
name|minimum
expr_stmt|;
name|d
operator|->
name|hw_range_y_max
operator|=
name|absInfo
operator|.
name|maximum
expr_stmt|;
block|}
name|char
name|name
index|[
literal|1024
index|]
decl_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|m_fd
argument_list|,
name|EVIOCGNAME
argument_list|(
sizeof|sizeof
argument_list|(
name|name
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|,
name|name
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|d
operator|->
name|hw_name
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"device name: %s"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QTouchScreenHandler
name|QTouchScreenHandler
operator|::
name|~
name|QTouchScreenHandler
parameter_list|()
block|{
if|if
condition|(
name|m_fd
operator|>=
literal|0
condition|)
name|QT_CLOSE
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|addObserver
name|void
name|QTouchScreenHandler
operator|::
name|addObserver
parameter_list|(
name|QTouchScreenObserver
modifier|*
name|observer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|||
operator|!
name|observer
condition|)
return|return;
name|d
operator|->
name|m_observers
operator|.
name|append
argument_list|(
name|observer
argument_list|)
expr_stmt|;
name|observer
operator|->
name|touch_configure
argument_list|(
name|d
operator|->
name|hw_range_x_min
argument_list|,
name|d
operator|->
name|hw_range_x_max
argument_list|,
name|d
operator|->
name|hw_range_y_min
argument_list|,
name|d
operator|->
name|hw_range_y_max
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|try_udev
name|void
name|QTouchScreenHandler
operator|::
name|try_udev
parameter_list|(
name|QString
modifier|*
name|path
parameter_list|)
block|{
name|udev
modifier|*
name|u
init|=
name|udev_new
argument_list|()
decl_stmt|;
name|udev_enumerate
modifier|*
name|ue
init|=
name|udev_enumerate_new
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|udev_enumerate_add_match_subsystem
argument_list|(
name|ue
argument_list|,
literal|"input"
argument_list|)
expr_stmt|;
name|udev_enumerate_add_match_property
argument_list|(
name|ue
argument_list|,
literal|"ID_INPUT_TOUCHPAD"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|udev_enumerate_scan_devices
argument_list|(
name|ue
argument_list|)
expr_stmt|;
name|udev_list_entry
modifier|*
name|entry
decl_stmt|;
name|udev_list_entry_foreach
argument_list|(
argument|entry
argument_list|,
argument|udev_enumerate_get_list_entry(ue)
argument_list|)
block|{
specifier|const
name|char
modifier|*
name|syspath
init|=
name|udev_list_entry_get_name
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|udev_device
modifier|*
name|udevice
init|=
name|udev_device_new_from_syspath
argument_list|(
name|u
argument_list|,
name|syspath
argument_list|)
decl_stmt|;
operator|*
name|path
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|udev_device_get_devnode
argument_list|(
name|udevice
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"from udev: %s"
argument_list|,
name|qPrintable
argument_list|(
operator|*
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|udev_device_unref
argument_list|(
name|udevice
argument_list|)
expr_stmt|;
block|}
name|udev_enumerate_unref
argument_list|(
name|ue
argument_list|)
expr_stmt|;
name|udev_unref
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readData
name|void
name|QTouchScreenHandler
operator|::
name|readData
parameter_list|()
block|{
operator|::
name|input_event
name|buffer
index|[
literal|32
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|n
operator|=
name|QT_READ
argument_list|(
name|m_fd
argument_list|,
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
operator|+
name|n
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
operator|-
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|n
condition|)
block|{
name|qWarning
argument_list|(
literal|"Got EOF from input device"
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|n
operator|<
literal|0
operator|&&
operator|(
name|errno
operator|!=
name|EINTR
operator|&&
name|errno
operator|!=
name|EAGAIN
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not read from input device: %s"
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|errno
operator|==
name|ENODEV
condition|)
block|{
comment|// device got disconnected -> stop reading
operator|delete
name|m_notify
expr_stmt|;
name|m_notify
operator|=
literal|0
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
name|m_fd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return;
block|}
elseif|else
if|if
condition|(
name|n
operator|%
sizeof|sizeof
argument_list|(
operator|::
name|input_event
argument_list|)
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|n
operator|/=
sizeof|sizeof
argument_list|(
operator|::
name|input_event
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|processInputEvent
argument_list|(
operator|&
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processInputEvent
name|void
name|QTouchScreenData
operator|::
name|processInputEvent
parameter_list|(
name|input_event
modifier|*
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_ABS
condition|)
block|{
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_POSITION_X
condition|)
block|{
name|m_currentData
operator|.
name|x
operator|=
name|data
operator|->
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_POSITION_Y
condition|)
block|{
name|m_currentData
operator|.
name|y
operator|=
name|data
operator|->
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_TRACKING_ID
condition|)
block|{
name|m_currentData
operator|.
name|trackingId
operator|=
name|data
operator|->
name|value
expr_stmt|;
name|m_currentData
operator|.
name|primary
operator|=
name|m_contacts
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|code
operator|==
name|ABS_MT_TOUCH_MAJOR
condition|)
block|{
name|m_currentData
operator|.
name|maj
operator|=
name|data
operator|->
name|value
expr_stmt|;
if|if
condition|(
name|data
operator|->
name|value
operator|==
literal|0
condition|)
name|m_currentData
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_SYN
operator|&&
name|data
operator|->
name|code
operator|==
name|SYN_MT_REPORT
operator|&&
name|m_lastEventType
operator|!=
name|EV_SYN
condition|)
block|{
name|m_contacts
operator|.
name|insert
argument_list|(
name|m_currentData
operator|.
name|trackingId
argument_list|,
name|m_currentData
argument_list|)
expr_stmt|;
name|m_currentData
operator|=
name|Contact
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|->
name|type
operator|==
name|EV_SYN
operator|&&
name|data
operator|->
name|code
operator|==
name|SYN_REPORT
condition|)
block|{
name|m_touchPoints
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|int
argument_list|,
name|Contact
argument_list|>
operator|::
name|iterator
name|it
init|=
name|m_contacts
operator|.
name|begin
argument_list|()
init|,
name|ite
init|=
name|m_contacts
operator|.
name|end
argument_list|()
init|;
name|it
operator|!=
name|ite
condition|;
operator|++
name|it
control|)
block|{
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|tp
decl_stmt|;
name|tp
operator|.
name|id
operator|=
name|it
operator|->
name|trackingId
expr_stmt|;
name|tp
operator|.
name|isPrimary
operator|=
name|it
operator|->
name|primary
expr_stmt|;
name|tp
operator|.
name|pressure
operator|=
name|it
operator|->
name|state
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|?
literal|0
else|:
literal|1
expr_stmt|;
if|if
condition|(
name|m_lastContacts
operator|.
name|contains
argument_list|(
name|it
operator|->
name|trackingId
argument_list|)
condition|)
block|{
specifier|const
name|Contact
modifier|&
name|prev
argument_list|(
name|m_lastContacts
operator|.
name|value
argument_list|(
name|it
operator|->
name|trackingId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|->
name|state
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|)
block|{
comment|// Copy over the previous values for released points, just in case.
name|it
operator|->
name|x
operator|=
name|prev
operator|.
name|x
expr_stmt|;
name|it
operator|->
name|y
operator|=
name|prev
operator|.
name|y
expr_stmt|;
name|it
operator|->
name|maj
operator|=
name|prev
operator|.
name|maj
expr_stmt|;
block|}
else|else
block|{
name|it
operator|->
name|state
operator|=
operator|(
name|prev
operator|.
name|x
operator|==
name|it
operator|->
name|x
operator|&&
name|prev
operator|.
name|y
operator|==
name|it
operator|->
name|y
operator|)
condition|?
name|Qt
operator|::
name|TouchPointStationary
else|:
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
block|}
block|}
name|tp
operator|.
name|state
operator|=
name|it
operator|->
name|state
expr_stmt|;
name|tp
operator|.
name|area
operator|=
name|QRectF
argument_list|(
name|it
operator|->
name|x
argument_list|,
name|it
operator|->
name|y
argument_list|,
name|it
operator|->
name|maj
argument_list|,
name|it
operator|->
name|maj
argument_list|)
expr_stmt|;
comment|// Translate so that (0, 0) is the top-left corner.
specifier|const
name|int
name|hw_x
init|=
name|qBound
argument_list|(
name|hw_range_x_min
argument_list|,
name|int
argument_list|(
name|tp
operator|.
name|area
operator|.
name|left
argument_list|()
argument_list|)
argument_list|,
name|hw_range_x_max
argument_list|)
operator|-
name|hw_range_x_min
decl_stmt|;
specifier|const
name|int
name|hw_y
init|=
name|qBound
argument_list|(
name|hw_range_y_min
argument_list|,
name|int
argument_list|(
name|tp
operator|.
name|area
operator|.
name|top
argument_list|()
argument_list|)
argument_list|,
name|hw_range_y_max
argument_list|)
operator|-
name|hw_range_y_min
decl_stmt|;
comment|// Get a normalized position in range 0..1.
specifier|const
name|int
name|hw_w
init|=
name|hw_range_x_max
operator|-
name|hw_range_x_min
decl_stmt|;
specifier|const
name|int
name|hw_h
init|=
name|hw_range_y_max
operator|-
name|hw_range_y_min
decl_stmt|;
name|tp
operator|.
name|normalPosition
operator|=
name|QPointF
argument_list|(
name|hw_x
operator|/
name|qreal
argument_list|(
name|hw_w
argument_list|)
argument_list|,
name|hw_y
operator|/
name|qreal
argument_list|(
name|hw_h
argument_list|)
argument_list|)
expr_stmt|;
name|m_touchPoints
operator|.
name|append
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_contacts
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_state
operator|=
name|QEvent
operator|::
name|TouchEnd
expr_stmt|;
name|m_lastContacts
operator|=
name|m_contacts
expr_stmt|;
name|m_contacts
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// No need to deliver if all points are stationary.
name|bool
name|skip
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|m_state
operator|==
name|QEvent
operator|::
name|TouchUpdate
condition|)
block|{
name|skip
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_touchPoints
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|m_touchPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|state
operator|!=
name|Qt
operator|::
name|TouchPointStationary
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
ifdef|#
directive|ifdef
name|POINT_DEBUG
name|dump
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|skip
operator|&&
operator|!
operator|(
name|m_state
operator|==
name|m_prevState
operator|&&
name|m_state
operator|==
name|QEvent
operator|::
name|TouchEnd
operator|)
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_observers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|m_observers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|touch_point
argument_list|(
name|m_touchPoints
argument_list|)
expr_stmt|;
name|m_prevState
operator|=
name|m_state
expr_stmt|;
if|if
condition|(
name|m_state
operator|==
name|QEvent
operator|::
name|TouchBegin
condition|)
name|m_state
operator|=
name|QEvent
operator|::
name|TouchUpdate
expr_stmt|;
elseif|else
if|if
condition|(
name|m_state
operator|==
name|QEvent
operator|::
name|TouchEnd
condition|)
name|m_state
operator|=
name|QEvent
operator|::
name|TouchBegin
expr_stmt|;
block|}
name|m_lastEventType
operator|=
name|data
operator|->
name|type
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dump
name|void
name|QTouchScreenData
operator|::
name|dump
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|eventType
decl_stmt|;
switch|switch
condition|(
name|m_state
condition|)
block|{
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
name|eventType
operator|=
literal|"TouchBegin"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
name|eventType
operator|=
literal|"TouchUpdate"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
name|eventType
operator|=
literal|"TouchEnd"
expr_stmt|;
break|break;
default|default:
name|eventType
operator|=
literal|"unknown"
expr_stmt|;
break|break;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"touch event"
operator|<<
name|eventType
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QWindowSystemInterface
operator|::
name|TouchPoint
modifier|&
name|tp
decl|,
name|m_touchPoints
control|)
block|{
specifier|const
name|char
modifier|*
name|pointState
decl_stmt|;
switch|switch
condition|(
name|tp
operator|.
name|state
operator|&
name|Qt
operator|::
name|TouchPointStateMask
condition|)
block|{
case|case
name|Qt
operator|::
name|TouchPointPressed
case|:
name|pointState
operator|=
literal|"pressed"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TouchPointMoved
case|:
name|pointState
operator|=
literal|"moved"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TouchPointStationary
case|:
name|pointState
operator|=
literal|"stationary"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TouchPointReleased
case|:
name|pointState
operator|=
literal|"released"
expr_stmt|;
break|break;
default|default:
name|pointState
operator|=
literal|"unknown"
expr_stmt|;
break|break;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"  "
operator|<<
name|tp
operator|.
name|id
operator|<<
name|tp
operator|.
name|area
operator|<<
name|pointState
operator|<<
name|tp
operator|.
name|normalPosition
operator|<<
name|tp
operator|.
name|pressure
operator|<<
name|tp
operator|.
name|isPrimary
operator|<<
name|tp
operator|.
name|area
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QTouchScreenHandlerThread
name|QTouchScreenHandlerThread
operator|::
name|QTouchScreenHandlerThread
parameter_list|(
specifier|const
name|QString
modifier|&
name|spec
parameter_list|,
name|QTouchScreenObserver
modifier|*
name|observer
parameter_list|)
member_init_list|:
name|m_spec
argument_list|(
name|spec
argument_list|)
member_init_list|,
name|m_handler
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_observer
argument_list|(
name|observer
argument_list|)
block|{
name|start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QTouchScreenHandlerThread
name|QTouchScreenHandlerThread
operator|::
name|~
name|QTouchScreenHandlerThread
parameter_list|()
block|{
name|quit
argument_list|()
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|run
name|void
name|QTouchScreenHandlerThread
operator|::
name|run
parameter_list|()
block|{
name|m_handler
operator|=
operator|new
name|QTouchScreenHandler
argument_list|(
name|m_spec
argument_list|)
expr_stmt|;
name|m_handler
operator|->
name|addObserver
argument_list|(
name|m_observer
argument_list|)
expr_stmt|;
name|exec
argument_list|()
expr_stmt|;
operator|delete
name|m_handler
expr_stmt|;
name|m_handler
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
