begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/**************************************************************************** ** ** Implementation of QMultiInputContext class ** ** Copyright (C) 2004 immodule for Qt Project.  All rights reserved. ** ** This file is written to contribute to Nokia Corporation and/or its subsidiary(-ies) under their own ** licence. You may use this file under your Qt license. Following ** description is copied from their original file headers. Contact ** immodule-qt@freedesktop.org if any conditions of this licensing are ** not clear to you. ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IM
end_ifndef
begin_include
include|#
directive|include
file|"qmultiinputcontext.h"
end_include
begin_include
include|#
directive|include
file|<qinputcontextfactory.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qaction.h>
end_include
begin_include
include|#
directive|include
file|<qsettings.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QMultiInputContext
name|QMultiInputContext
operator|::
name|QMultiInputContext
parameter_list|()
member_init_list|:
name|QInputContext
argument_list|()
member_init_list|,
name|current
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|keys
operator|=
name|QInputContextFactory
operator|::
name|keys
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|keys
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
if|if
condition|(
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"imsw"
argument_list|)
argument_list|)
condition|)
name|keys
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QString
name|def
init|=
name|QLatin1String
argument_list|(
name|getenv
argument_list|(
literal|"QT4_IM_MODULE"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|.
name|isEmpty
argument_list|()
condition|)
name|def
operator|=
name|QLatin1String
argument_list|(
name|getenv
argument_list|(
literal|"QT_IM_MODULE"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|def
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"Trolltech"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
expr_stmt|;
name|def
operator|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"DefaultInputMethod"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"xim"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|current
operator|=
name|keys
operator|.
name|indexOf
argument_list|(
name|def
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|<
literal|0
condition|)
name|current
operator|=
literal|0
expr_stmt|;
name|menu
operator|=
operator|new
name|QMenu
argument_list|(
name|tr
argument_list|(
literal|"Select IM"
argument_list|)
argument_list|)
expr_stmt|;
name|separator
operator|=
operator|new
name|QAction
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|separator
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QActionGroup
modifier|*
name|group
init|=
operator|new
name|QActionGroup
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|slaves
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|key
init|=
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|a
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|QInputContextFactory
operator|::
name|displayName
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|->
name|setData
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|a
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|group
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|current
condition|)
block|{
name|slaves
operator|.
name|replace
argument_list|(
name|current
argument_list|,
name|QInputContextFactory
operator|::
name|create
argument_list|(
name|key
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|connect
argument_list|(
name|group
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|changeSlave
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QMultiInputContext
name|QMultiInputContext
operator|::
name|~
name|QMultiInputContext
parameter_list|()
block|{
operator|delete
name|menu
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|identifierName
name|QString
name|QMultiInputContext
operator|::
name|identifierName
parameter_list|()
block|{
return|return
operator|(
name|slave
argument_list|()
operator|)
condition|?
name|slave
argument_list|()
operator|->
name|identifierName
argument_list|()
else|:
name|QLatin1String
argument_list|(
literal|""
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|language
name|QString
name|QMultiInputContext
operator|::
name|language
parameter_list|()
block|{
return|return
operator|(
name|slave
argument_list|()
operator|)
condition|?
name|slave
argument_list|()
operator|->
name|language
argument_list|()
else|:
name|QLatin1String
argument_list|(
literal|""
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
end_if
begin_function
DECL|function|x11FilterEvent
name|bool
name|QMultiInputContext
operator|::
name|x11FilterEvent
parameter_list|(
name|QWidget
modifier|*
name|keywidget
parameter_list|,
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
return|return
operator|(
name|slave
argument_list|()
operator|)
condition|?
name|slave
argument_list|()
operator|->
name|x11FilterEvent
argument_list|(
name|keywidget
argument_list|,
name|event
argument_list|)
else|:
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_WS_X11
end_comment
begin_function
DECL|function|filterEvent
name|bool
name|QMultiInputContext
operator|::
name|filterEvent
parameter_list|(
specifier|const
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
return|return
operator|(
name|slave
argument_list|()
operator|)
condition|?
name|slave
argument_list|()
operator|->
name|filterEvent
argument_list|(
name|event
argument_list|)
else|:
literal|false
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QMultiInputContext
operator|::
name|reset
parameter_list|()
block|{
if|if
condition|(
name|slave
argument_list|()
condition|)
name|slave
argument_list|()
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|update
name|void
name|QMultiInputContext
operator|::
name|update
parameter_list|()
block|{
if|if
condition|(
name|slave
argument_list|()
condition|)
name|slave
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseHandler
name|void
name|QMultiInputContext
operator|::
name|mouseHandler
parameter_list|(
name|int
name|x
parameter_list|,
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|slave
argument_list|()
condition|)
name|slave
argument_list|()
operator|->
name|mouseHandler
argument_list|(
name|x
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|font
name|QFont
name|QMultiInputContext
operator|::
name|font
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|slave
argument_list|()
operator|)
condition|?
name|slave
argument_list|()
operator|->
name|font
argument_list|()
else|:
name|QInputContext
operator|::
name|font
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setFocusWidget
name|void
name|QMultiInputContext
operator|::
name|setFocusWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QInputContext
operator|::
name|setFocusWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|slave
argument_list|()
condition|)
name|slave
argument_list|()
operator|->
name|setFocusWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|focusWidget
name|QWidget
modifier|*
name|QMultiInputContext
operator|::
name|focusWidget
parameter_list|()
specifier|const
block|{
return|return
name|QInputContext
operator|::
name|focusWidget
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|widgetDestroyed
name|void
name|QMultiInputContext
operator|::
name|widgetDestroyed
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|slave
argument_list|()
condition|)
name|slave
argument_list|()
operator|->
name|widgetDestroyed
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isComposing
name|bool
name|QMultiInputContext
operator|::
name|isComposing
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|slave
argument_list|()
operator|)
condition|?
name|slave
argument_list|()
operator|->
name|isComposing
argument_list|()
else|:
literal|false
return|;
block|}
end_function
begin_function
DECL|function|actions
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|QMultiInputContext
operator|::
name|actions
parameter_list|()
block|{
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|a
init|=
name|slave
argument_list|()
operator|->
name|actions
argument_list|()
decl_stmt|;
name|a
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
name|menu
operator|->
name|menuAction
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_function
DECL|function|changeSlave
name|void
name|QMultiInputContext
operator|::
name|changeSlave
parameter_list|(
name|QAction
modifier|*
name|a
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slaves
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|a
operator|->
name|data
argument_list|()
operator|.
name|toString
argument_list|()
condition|)
block|{
if|if
condition|(
name|slaves
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|0
condition|)
name|slaves
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|QInputContextFactory
operator|::
name|create
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|QInputContext
modifier|*
name|qic
init|=
name|slaves
operator|.
name|at
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|oldWidget
init|=
name|qic
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
name|qic
operator|->
name|reset
argument_list|()
expr_stmt|;
name|qic
operator|->
name|setFocusWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|current
operator|=
name|i
expr_stmt|;
name|qic
operator|=
name|slaves
operator|.
name|at
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|qic
operator|->
name|setFocusWidget
argument_list|(
name|oldWidget
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_IM
end_comment
end_unit
