begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*!     \class QtIcoHandler     \since 4.4     \brief The QtIcoHandler class provides support for the ICO image format.     \internal */
end_comment
begin_include
include|#
directive|include
file|"qicohandler.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qendian.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QImage>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QBuffer>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// These next two structs represent how the icon information is stored
end_comment
begin_comment
comment|// in an ICO file.
end_comment
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|bWidth
name|quint8
name|bWidth
decl_stmt|;
comment|// Width of the image
DECL|member|bHeight
name|quint8
name|bHeight
decl_stmt|;
comment|// Height of the image (times 2)
DECL|member|bColorCount
name|quint8
name|bColorCount
decl_stmt|;
comment|// Number of colors in image (0 if>=8bpp) [ not ture ]
DECL|member|bReserved
name|quint8
name|bReserved
decl_stmt|;
comment|// Reserved
DECL|member|wPlanes
name|quint16
name|wPlanes
decl_stmt|;
comment|// Color Planes
DECL|member|wBitCount
name|quint16
name|wBitCount
decl_stmt|;
comment|// Bits per pixel
DECL|member|dwBytesInRes
name|quint32
name|dwBytesInRes
decl_stmt|;
comment|// how many bytes in this resource?
DECL|member|dwImageOffset
name|quint32
name|dwImageOffset
decl_stmt|;
comment|// where in the file is this image
block|}
DECL|typedef|ICONDIRENTRY
DECL|typedef|LPICONDIRENTRY
name|ICONDIRENTRY
operator|,
typedef|*
name|LPICONDIRENTRY
typedef|;
end_typedef
begin_define
DECL|macro|ICONDIRENTRY_SIZE
define|#
directive|define
name|ICONDIRENTRY_SIZE
value|16
end_define
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|idReserved
name|quint16
name|idReserved
decl_stmt|;
comment|// Reserved
DECL|member|idType
name|quint16
name|idType
decl_stmt|;
comment|// resource type (1 for icons, 2 for cursors)
DECL|member|idCount
name|quint16
name|idCount
decl_stmt|;
comment|// how many images?
DECL|member|idEntries
name|ICONDIRENTRY
name|idEntries
index|[
literal|1
index|]
decl_stmt|;
comment|// the entries for each image
block|}
DECL|typedef|ICONDIR
DECL|typedef|LPICONDIR
name|ICONDIR
operator|,
typedef|*
name|LPICONDIR
typedef|;
end_typedef
begin_define
DECL|macro|ICONDIR_SIZE
define|#
directive|define
name|ICONDIR_SIZE
value|6
end_define
begin_comment
DECL|macro|ICONDIR_SIZE
comment|// Exclude the idEntries field
end_comment
begin_typedef
typedef|typedef
struct|struct
block|{
comment|// BMP information header
DECL|member|biSize
name|quint32
name|biSize
decl_stmt|;
comment|// size of this struct
DECL|member|biWidth
name|quint32
name|biWidth
decl_stmt|;
comment|// pixmap width
DECL|member|biHeight
name|quint32
name|biHeight
decl_stmt|;
comment|// pixmap height     (specifies the combined height of the XOR and AND masks)
DECL|member|biPlanes
name|quint16
name|biPlanes
decl_stmt|;
comment|// should be 1
DECL|member|biBitCount
name|quint16
name|biBitCount
decl_stmt|;
comment|// number of bits per pixel
DECL|member|biCompression
name|quint32
name|biCompression
decl_stmt|;
comment|// compression method
DECL|member|biSizeImage
name|quint32
name|biSizeImage
decl_stmt|;
comment|// size of image
DECL|member|biXPelsPerMeter
name|quint32
name|biXPelsPerMeter
decl_stmt|;
comment|// horizontal resolution
DECL|member|biYPelsPerMeter
name|quint32
name|biYPelsPerMeter
decl_stmt|;
comment|// vertical resolution
DECL|member|biClrUsed
name|quint32
name|biClrUsed
decl_stmt|;
comment|// number of colors used
DECL|member|biClrImportant
name|quint32
name|biClrImportant
decl_stmt|;
comment|// number of important colors
block|}
DECL|typedef|BMP_INFOHDR
DECL|typedef|LPBMP_INFOHDR
name|BMP_INFOHDR
operator|,
typedef|*
name|LPBMP_INFOHDR
typedef|;
end_typedef
begin_define
DECL|macro|BMP_INFOHDR_SIZE
define|#
directive|define
name|BMP_INFOHDR_SIZE
value|40
end_define
begin_class
DECL|class|ICOReader
class|class
name|ICOReader
block|{
public|public:
name|ICOReader
parameter_list|(
name|QIODevice
modifier|*
name|iodevice
parameter_list|)
constructor_decl|;
name|int
name|count
parameter_list|()
function_decl|;
name|QImage
name|iconAt
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
specifier|static
name|bool
name|canRead
parameter_list|(
name|QIODevice
modifier|*
name|iodev
parameter_list|)
function_decl|;
specifier|static
name|QList
argument_list|<
name|QImage
argument_list|>
name|read
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
function_decl|;
specifier|static
name|bool
name|write
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QImage
argument_list|>
modifier|&
name|images
parameter_list|)
function_decl|;
private|private:
name|bool
name|readHeader
parameter_list|()
function_decl|;
name|bool
name|readIconEntry
parameter_list|(
name|int
name|index
parameter_list|,
name|ICONDIRENTRY
modifier|*
name|iconEntry
parameter_list|)
function_decl|;
name|bool
name|readBMPHeader
parameter_list|(
name|quint32
name|imageOffset
parameter_list|,
name|BMP_INFOHDR
modifier|*
name|header
parameter_list|)
function_decl|;
name|void
name|findColorInfo
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
function_decl|;
name|void
name|readColorTable
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
function_decl|;
name|void
name|readBMP
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
function_decl|;
name|void
name|read1BitBMP
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
function_decl|;
name|void
name|read4BitBMP
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
function_decl|;
name|void
name|read8BitBMP
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
function_decl|;
name|void
name|read16_24_32BMP
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
function_decl|;
DECL|struct|IcoAttrib
struct|struct
name|IcoAttrib
block|{
DECL|member|nbits
name|int
name|nbits
decl_stmt|;
DECL|member|ncolors
name|int
name|ncolors
decl_stmt|;
DECL|member|h
name|int
name|h
decl_stmt|;
DECL|member|w
name|int
name|w
decl_stmt|;
DECL|member|depth
name|int
name|depth
decl_stmt|;
DECL|member|icoAttrib
block|}
name|icoAttrib
struct|;
DECL|member|iod
name|QIODevice
modifier|*
name|iod
decl_stmt|;
DECL|member|startpos
name|qint64
name|startpos
decl_stmt|;
DECL|member|headerRead
name|bool
name|headerRead
decl_stmt|;
DECL|member|iconDir
name|ICONDIR
name|iconDir
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Data readers and writers that takes care of alignment and endian stuff.
end_comment
begin_function
DECL|function|readIconDirEntry
specifier|static
name|bool
name|readIconDirEntry
parameter_list|(
name|QIODevice
modifier|*
name|iodev
parameter_list|,
name|ICONDIRENTRY
modifier|*
name|iconDirEntry
parameter_list|)
block|{
if|if
condition|(
name|iodev
condition|)
block|{
name|uchar
name|tmp
index|[
name|ICONDIRENTRY_SIZE
index|]
decl_stmt|;
if|if
condition|(
name|iodev
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|tmp
argument_list|,
name|ICONDIRENTRY_SIZE
argument_list|)
operator|==
name|ICONDIRENTRY_SIZE
condition|)
block|{
name|iconDirEntry
operator|->
name|bWidth
operator|=
name|tmp
index|[
literal|0
index|]
expr_stmt|;
name|iconDirEntry
operator|->
name|bHeight
operator|=
name|tmp
index|[
literal|1
index|]
expr_stmt|;
name|iconDirEntry
operator|->
name|bColorCount
operator|=
name|tmp
index|[
literal|2
index|]
expr_stmt|;
name|iconDirEntry
operator|->
name|bReserved
operator|=
name|tmp
index|[
literal|3
index|]
expr_stmt|;
name|iconDirEntry
operator|->
name|wPlanes
operator|=
name|qFromLittleEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
operator|&
name|tmp
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|iconDirEntry
operator|->
name|wBitCount
operator|=
name|qFromLittleEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
operator|&
name|tmp
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|iconDirEntry
operator|->
name|dwBytesInRes
operator|=
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|tmp
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|iconDirEntry
operator|->
name|dwImageOffset
operator|=
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|tmp
index|[
literal|12
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|writeIconDirEntry
specifier|static
name|bool
name|writeIconDirEntry
parameter_list|(
name|QIODevice
modifier|*
name|iodev
parameter_list|,
specifier|const
name|ICONDIRENTRY
modifier|&
name|iconEntry
parameter_list|)
block|{
if|if
condition|(
name|iodev
condition|)
block|{
name|uchar
name|tmp
index|[
name|ICONDIRENTRY_SIZE
index|]
decl_stmt|;
name|tmp
index|[
literal|0
index|]
operator|=
name|iconEntry
operator|.
name|bWidth
expr_stmt|;
name|tmp
index|[
literal|1
index|]
operator|=
name|iconEntry
operator|.
name|bHeight
expr_stmt|;
name|tmp
index|[
literal|2
index|]
operator|=
name|iconEntry
operator|.
name|bColorCount
expr_stmt|;
name|tmp
index|[
literal|3
index|]
operator|=
name|iconEntry
operator|.
name|bReserved
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|iconEntry
operator|.
name|wPlanes
argument_list|,
operator|&
name|tmp
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|iconEntry
operator|.
name|wBitCount
argument_list|,
operator|&
name|tmp
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|iconEntry
operator|.
name|dwBytesInRes
argument_list|,
operator|&
name|tmp
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|iconEntry
operator|.
name|dwImageOffset
argument_list|,
operator|&
name|tmp
index|[
literal|12
index|]
argument_list|)
expr_stmt|;
return|return
operator|(
name|iodev
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|tmp
argument_list|,
name|ICONDIRENTRY_SIZE
argument_list|)
operator|==
name|ICONDIRENTRY_SIZE
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|readIconDir
specifier|static
name|bool
name|readIconDir
parameter_list|(
name|QIODevice
modifier|*
name|iodev
parameter_list|,
name|ICONDIR
modifier|*
name|iconDir
parameter_list|)
block|{
if|if
condition|(
name|iodev
condition|)
block|{
name|uchar
name|tmp
index|[
name|ICONDIR_SIZE
index|]
decl_stmt|;
if|if
condition|(
name|iodev
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|tmp
argument_list|,
name|ICONDIR_SIZE
argument_list|)
operator|==
name|ICONDIR_SIZE
condition|)
block|{
name|iconDir
operator|->
name|idReserved
operator|=
name|qFromLittleEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
operator|&
name|tmp
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|iconDir
operator|->
name|idType
operator|=
name|qFromLittleEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
operator|&
name|tmp
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|iconDir
operator|->
name|idCount
operator|=
name|qFromLittleEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
operator|&
name|tmp
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|writeIconDir
specifier|static
name|bool
name|writeIconDir
parameter_list|(
name|QIODevice
modifier|*
name|iodev
parameter_list|,
specifier|const
name|ICONDIR
modifier|&
name|iconDir
parameter_list|)
block|{
if|if
condition|(
name|iodev
condition|)
block|{
name|uchar
name|tmp
index|[
literal|6
index|]
decl_stmt|;
name|qToLittleEndian
argument_list|(
name|iconDir
operator|.
name|idReserved
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|(
name|iconDir
operator|.
name|idType
argument_list|,
operator|&
name|tmp
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|(
name|iconDir
operator|.
name|idCount
argument_list|,
operator|&
name|tmp
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
return|return
operator|(
name|iodev
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|tmp
argument_list|,
literal|6
argument_list|)
operator|==
literal|6
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|readBMPInfoHeader
specifier|static
name|bool
name|readBMPInfoHeader
parameter_list|(
name|QIODevice
modifier|*
name|iodev
parameter_list|,
name|BMP_INFOHDR
modifier|*
name|pHeader
parameter_list|)
block|{
if|if
condition|(
name|iodev
condition|)
block|{
name|uchar
name|header
index|[
name|BMP_INFOHDR_SIZE
index|]
decl_stmt|;
if|if
condition|(
name|iodev
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|header
argument_list|,
name|BMP_INFOHDR_SIZE
argument_list|)
operator|==
name|BMP_INFOHDR_SIZE
condition|)
block|{
name|pHeader
operator|->
name|biSize
operator|=
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|header
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|pHeader
operator|->
name|biWidth
operator|=
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|header
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|pHeader
operator|->
name|biHeight
operator|=
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|header
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|pHeader
operator|->
name|biPlanes
operator|=
name|qFromLittleEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
operator|&
name|header
index|[
literal|12
index|]
argument_list|)
expr_stmt|;
name|pHeader
operator|->
name|biBitCount
operator|=
name|qFromLittleEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
operator|&
name|header
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|pHeader
operator|->
name|biCompression
operator|=
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|header
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|pHeader
operator|->
name|biSizeImage
operator|=
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|header
index|[
literal|20
index|]
argument_list|)
expr_stmt|;
name|pHeader
operator|->
name|biXPelsPerMeter
operator|=
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|header
index|[
literal|24
index|]
argument_list|)
expr_stmt|;
name|pHeader
operator|->
name|biYPelsPerMeter
operator|=
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|header
index|[
literal|28
index|]
argument_list|)
expr_stmt|;
name|pHeader
operator|->
name|biClrUsed
operator|=
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|header
index|[
literal|32
index|]
argument_list|)
expr_stmt|;
name|pHeader
operator|->
name|biClrImportant
operator|=
name|qFromLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|&
name|header
index|[
literal|36
index|]
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|writeBMPInfoHeader
specifier|static
name|bool
name|writeBMPInfoHeader
parameter_list|(
name|QIODevice
modifier|*
name|iodev
parameter_list|,
specifier|const
name|BMP_INFOHDR
modifier|&
name|header
parameter_list|)
block|{
if|if
condition|(
name|iodev
condition|)
block|{
name|uchar
name|tmp
index|[
name|BMP_INFOHDR_SIZE
index|]
decl_stmt|;
name|qToLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|header
operator|.
name|biSize
argument_list|,
operator|&
name|tmp
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|header
operator|.
name|biWidth
argument_list|,
operator|&
name|tmp
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|header
operator|.
name|biHeight
argument_list|,
operator|&
name|tmp
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|.
name|biPlanes
argument_list|,
operator|&
name|tmp
index|[
literal|12
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|header
operator|.
name|biBitCount
argument_list|,
operator|&
name|tmp
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|header
operator|.
name|biCompression
argument_list|,
operator|&
name|tmp
index|[
literal|16
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|header
operator|.
name|biSizeImage
argument_list|,
operator|&
name|tmp
index|[
literal|20
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|header
operator|.
name|biXPelsPerMeter
argument_list|,
operator|&
name|tmp
index|[
literal|24
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|header
operator|.
name|biYPelsPerMeter
argument_list|,
operator|&
name|tmp
index|[
literal|28
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|header
operator|.
name|biClrUsed
argument_list|,
operator|&
name|tmp
index|[
literal|32
index|]
argument_list|)
expr_stmt|;
name|qToLittleEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|header
operator|.
name|biClrImportant
argument_list|,
operator|&
name|tmp
index|[
literal|36
index|]
argument_list|)
expr_stmt|;
return|return
operator|(
name|iodev
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|tmp
argument_list|,
name|BMP_INFOHDR_SIZE
argument_list|)
operator|==
name|BMP_INFOHDR_SIZE
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|ICOReader
name|ICOReader
operator|::
name|ICOReader
parameter_list|(
name|QIODevice
modifier|*
name|iodevice
parameter_list|)
member_init_list|:
name|iod
argument_list|(
name|iodevice
argument_list|)
member_init_list|,
name|startpos
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|headerRead
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|count
name|int
name|ICOReader
operator|::
name|count
parameter_list|()
block|{
if|if
condition|(
name|readHeader
argument_list|()
condition|)
return|return
name|iconDir
operator|.
name|idCount
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|canRead
name|bool
name|ICOReader
operator|::
name|canRead
parameter_list|(
name|QIODevice
modifier|*
name|iodev
parameter_list|)
block|{
name|bool
name|isProbablyICO
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|iodev
condition|)
block|{
name|qint64
name|oldPos
init|=
name|iodev
operator|->
name|pos
argument_list|()
decl_stmt|;
name|ICONDIR
name|ikonDir
decl_stmt|;
if|if
condition|(
name|readIconDir
argument_list|(
name|iodev
argument_list|,
operator|&
name|ikonDir
argument_list|)
condition|)
block|{
name|qint64
name|readBytes
init|=
name|ICONDIR_SIZE
decl_stmt|;
if|if
condition|(
name|readIconDirEntry
argument_list|(
name|iodev
argument_list|,
operator|&
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|readBytes
operator|+=
name|ICONDIRENTRY_SIZE
expr_stmt|;
comment|// ICO format does not have a magic identifier, so we read 6 different values, which will hopefully be enough to identify the file.
if|if
condition|(
name|ikonDir
operator|.
name|idReserved
operator|==
literal|0
operator|&&
operator|(
name|ikonDir
operator|.
name|idType
operator|==
literal|1
operator|||
name|ikonDir
operator|.
name|idType
operator|==
literal|2
operator|)
operator|&&
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|bReserved
operator|==
literal|0
operator|&&
operator|(
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|wPlanes
operator|<=
literal|1
operator|||
name|ikonDir
operator|.
name|idType
operator|==
literal|2
operator|)
operator|&&
operator|(
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|wBitCount
operator|<=
literal|32
operator|||
name|ikonDir
operator|.
name|idType
operator|==
literal|2
operator|)
comment|// Bits per pixel
operator|&&
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|dwBytesInRes
operator|>=
literal|40
comment|// Must be over 40, since sizeof (infoheader) == 40
condition|)
block|{
name|isProbablyICO
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|iodev
operator|->
name|isSequential
argument_list|()
condition|)
block|{
comment|// Our structs might be padded due to alignment, so we need to fetch each member before we ungetChar() !
name|quint32
name|tmp
init|=
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|dwImageOffset
decl_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
operator|(
name|tmp
operator|>>
literal|24
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
operator|(
name|tmp
operator|>>
literal|16
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
operator|(
name|tmp
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
name|tmp
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|dwBytesInRes
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
operator|(
name|tmp
operator|>>
literal|24
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
operator|(
name|tmp
operator|>>
literal|16
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
operator|(
name|tmp
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
name|tmp
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|wBitCount
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
operator|(
name|tmp
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
name|tmp
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|wPlanes
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
operator|(
name|tmp
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
name|tmp
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|bReserved
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|bColorCount
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|bHeight
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
name|ikonDir
operator|.
name|idEntries
index|[
literal|0
index|]
operator|.
name|bWidth
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iodev
operator|->
name|isSequential
argument_list|()
condition|)
block|{
comment|// Our structs might be padded due to alignment, so we need to fetch each member before we ungetChar() !
name|quint32
name|tmp
init|=
name|ikonDir
operator|.
name|idCount
decl_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
operator|(
name|tmp
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
name|tmp
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|ikonDir
operator|.
name|idType
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
operator|(
name|tmp
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
name|tmp
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|ikonDir
operator|.
name|idReserved
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
operator|(
name|tmp
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|iodev
operator|->
name|ungetChar
argument_list|(
name|tmp
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|iodev
operator|->
name|isSequential
argument_list|()
condition|)
name|iodev
operator|->
name|seek
argument_list|(
name|oldPos
argument_list|)
expr_stmt|;
block|}
return|return
name|isProbablyICO
return|;
block|}
end_function
begin_function
DECL|function|readHeader
name|bool
name|ICOReader
operator|::
name|readHeader
parameter_list|()
block|{
if|if
condition|(
name|iod
operator|&&
operator|!
name|headerRead
condition|)
block|{
name|startpos
operator|=
name|iod
operator|->
name|pos
argument_list|()
expr_stmt|;
if|if
condition|(
name|readIconDir
argument_list|(
name|iod
argument_list|,
operator|&
name|iconDir
argument_list|)
condition|)
block|{
if|if
condition|(
name|iconDir
operator|.
name|idReserved
operator|==
literal|0
operator|&&
operator|(
name|iconDir
operator|.
name|idType
operator|==
literal|1
operator|||
name|iconDir
operator|.
name|idType
operator|==
literal|2
operator|)
condition|)
name|headerRead
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|headerRead
return|;
block|}
end_function
begin_function
DECL|function|readIconEntry
name|bool
name|ICOReader
operator|::
name|readIconEntry
parameter_list|(
name|int
name|index
parameter_list|,
name|ICONDIRENTRY
modifier|*
name|iconEntry
parameter_list|)
block|{
if|if
condition|(
name|iod
condition|)
block|{
if|if
condition|(
name|iod
operator|->
name|seek
argument_list|(
name|startpos
operator|+
name|ICONDIR_SIZE
operator|+
operator|(
name|index
operator|*
name|ICONDIRENTRY_SIZE
operator|)
argument_list|)
condition|)
block|{
return|return
name|readIconDirEntry
argument_list|(
name|iod
argument_list|,
name|iconEntry
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|readBMPHeader
name|bool
name|ICOReader
operator|::
name|readBMPHeader
parameter_list|(
name|quint32
name|imageOffset
parameter_list|,
name|BMP_INFOHDR
modifier|*
name|header
parameter_list|)
block|{
if|if
condition|(
name|iod
condition|)
block|{
if|if
condition|(
name|iod
operator|->
name|seek
argument_list|(
name|startpos
operator|+
name|imageOffset
argument_list|)
condition|)
block|{
if|if
condition|(
name|readBMPInfoHeader
argument_list|(
name|iod
argument_list|,
name|header
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|findColorInfo
name|void
name|ICOReader
operator|::
name|findColorInfo
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
block|{
if|if
condition|(
name|icoAttrib
operator|.
name|ncolors
operator|>
literal|0
condition|)
block|{
comment|// set color table
name|readColorTable
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|icoAttrib
operator|.
name|nbits
operator|==
literal|16
condition|)
block|{
comment|// don't support RGB values for 15/16 bpp
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readColorTable
name|void
name|ICOReader
operator|::
name|readColorTable
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
block|{
if|if
condition|(
name|iod
condition|)
block|{
name|image
operator|.
name|setColorCount
argument_list|(
name|icoAttrib
operator|.
name|ncolors
argument_list|)
expr_stmt|;
name|uchar
name|rgb
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|icoAttrib
operator|.
name|ncolors
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iod
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|rgb
argument_list|,
literal|4
argument_list|)
operator|!=
literal|4
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
break|break;
block|}
name|image
operator|.
name|setColor
argument_list|(
name|i
argument_list|,
name|qRgb
argument_list|(
name|rgb
index|[
literal|2
index|]
argument_list|,
name|rgb
index|[
literal|1
index|]
argument_list|,
name|rgb
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readBMP
name|void
name|ICOReader
operator|::
name|readBMP
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
block|{
if|if
condition|(
name|icoAttrib
operator|.
name|nbits
operator|==
literal|1
condition|)
block|{
comment|// 1 bit BMP image
name|read1BitBMP
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|icoAttrib
operator|.
name|nbits
operator|==
literal|4
condition|)
block|{
comment|// 4 bit BMP image
name|read4BitBMP
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|icoAttrib
operator|.
name|nbits
operator|==
literal|8
condition|)
block|{
name|read8BitBMP
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|icoAttrib
operator|.
name|nbits
operator|==
literal|16
operator|||
name|icoAttrib
operator|.
name|nbits
operator|==
literal|24
operator|||
name|icoAttrib
operator|.
name|nbits
operator|==
literal|32
condition|)
block|{
comment|// 16,24,32 bit BMP image
name|read16_24_32BMP
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/**  * NOTE: A 1 bit BMP is only flipped vertically, and not horizontally like all other color depths!  * (This is the same with the bitmask)  *  */
end_comment
begin_function
DECL|function|read1BitBMP
name|void
name|ICOReader
operator|::
name|read1BitBMP
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
block|{
if|if
condition|(
name|iod
condition|)
block|{
name|int
name|h
init|=
name|image
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|bpl
init|=
name|image
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
while|while
condition|(
operator|--
name|h
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|iod
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|image
operator|.
name|scanLine
argument_list|(
name|h
argument_list|)
argument_list|,
name|bpl
argument_list|)
operator|!=
name|bpl
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|read4BitBMP
name|void
name|ICOReader
operator|::
name|read4BitBMP
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
block|{
if|if
condition|(
name|iod
condition|)
block|{
name|int
name|h
init|=
name|icoAttrib
operator|.
name|h
decl_stmt|;
name|int
name|buflen
init|=
operator|(
operator|(
name|icoAttrib
operator|.
name|w
operator|+
literal|7
operator|)
operator|/
literal|8
operator|)
operator|*
literal|4
decl_stmt|;
name|uchar
modifier|*
name|buf
init|=
operator|new
name|uchar
index|[
name|buflen
index|]
decl_stmt|;
name|Q_CHECK_PTR
argument_list|(
name|buf
argument_list|)
expr_stmt|;
while|while
condition|(
operator|--
name|h
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|iod
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|buf
argument_list|,
name|buflen
argument_list|)
operator|!=
name|buflen
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
break|break;
block|}
name|uchar
modifier|*
name|p
init|=
name|image
operator|.
name|scanLine
argument_list|(
name|h
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|b
init|=
name|buf
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|icoAttrib
operator|.
name|w
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
comment|// convert nibbles to bytes
operator|*
name|p
operator|++
operator|=
operator|*
name|b
operator|>>
literal|4
expr_stmt|;
operator|*
name|p
operator|++
operator|=
operator|*
name|b
operator|++
operator|&
literal|0x0f
expr_stmt|;
block|}
if|if
condition|(
name|icoAttrib
operator|.
name|w
operator|&
literal|1
condition|)
comment|// the last nibble
operator|*
name|p
operator|=
operator|*
name|b
operator|>>
literal|4
expr_stmt|;
block|}
operator|delete
index|[]
name|buf
expr_stmt|;
block|}
else|else
block|{
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|read8BitBMP
name|void
name|ICOReader
operator|::
name|read8BitBMP
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
block|{
if|if
condition|(
name|iod
condition|)
block|{
name|int
name|h
init|=
name|icoAttrib
operator|.
name|h
decl_stmt|;
name|int
name|bpl
init|=
name|image
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
while|while
condition|(
operator|--
name|h
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|iod
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|image
operator|.
name|scanLine
argument_list|(
name|h
argument_list|)
argument_list|,
name|bpl
argument_list|)
operator|!=
name|bpl
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|read16_24_32BMP
name|void
name|ICOReader
operator|::
name|read16_24_32BMP
parameter_list|(
name|QImage
modifier|&
name|image
parameter_list|)
block|{
if|if
condition|(
name|iod
condition|)
block|{
name|int
name|h
init|=
name|icoAttrib
operator|.
name|h
decl_stmt|;
name|QRgb
modifier|*
name|p
decl_stmt|;
name|QRgb
modifier|*
name|end
decl_stmt|;
name|uchar
modifier|*
name|buf
init|=
operator|new
name|uchar
index|[
name|image
operator|.
name|bytesPerLine
argument_list|()
index|]
decl_stmt|;
name|int
name|bpl
init|=
operator|(
operator|(
name|icoAttrib
operator|.
name|w
operator|*
name|icoAttrib
operator|.
name|nbits
operator|+
literal|31
operator|)
operator|/
literal|32
operator|)
operator|*
literal|4
decl_stmt|;
name|uchar
modifier|*
name|b
decl_stmt|;
while|while
condition|(
operator|--
name|h
operator|>=
literal|0
condition|)
block|{
name|p
operator|=
operator|(
name|QRgb
operator|*
operator|)
name|image
operator|.
name|scanLine
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|end
operator|=
name|p
operator|+
name|icoAttrib
operator|.
name|w
expr_stmt|;
if|if
condition|(
name|iod
operator|->
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|buf
argument_list|,
name|bpl
argument_list|)
operator|!=
name|bpl
condition|)
block|{
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
break|break;
block|}
name|b
operator|=
name|buf
expr_stmt|;
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|icoAttrib
operator|.
name|nbits
operator|==
literal|24
condition|)
operator|*
name|p
operator|++
operator|=
name|qRgb
argument_list|(
operator|*
operator|(
name|b
operator|+
literal|2
operator|)
argument_list|,
operator|*
operator|(
name|b
operator|+
literal|1
operator|)
argument_list|,
operator|*
name|b
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|icoAttrib
operator|.
name|nbits
operator|==
literal|32
condition|)
operator|*
name|p
operator|++
operator|=
name|qRgba
argument_list|(
operator|*
operator|(
name|b
operator|+
literal|2
operator|)
argument_list|,
operator|*
operator|(
name|b
operator|+
literal|1
operator|)
argument_list|,
operator|*
name|b
argument_list|,
operator|*
operator|(
name|b
operator|+
literal|3
operator|)
argument_list|)
expr_stmt|;
name|b
operator|+=
name|icoAttrib
operator|.
name|nbits
operator|/
literal|8
expr_stmt|;
block|}
block|}
operator|delete
index|[]
name|buf
expr_stmt|;
block|}
else|else
block|{
name|image
operator|=
name|QImage
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|icoOrigDepthKey
specifier|static
specifier|const
name|char
name|icoOrigDepthKey
index|[]
init|=
literal|"_q_icoOrigDepth"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|iconAt
name|QImage
name|ICOReader
operator|::
name|iconAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|QImage
name|img
decl_stmt|;
if|if
condition|(
name|count
argument_list|()
operator|>
name|index
condition|)
block|{
comment|// forces header to be read
name|ICONDIRENTRY
name|iconEntry
decl_stmt|;
if|if
condition|(
name|readIconEntry
argument_list|(
name|index
argument_list|,
operator|&
name|iconEntry
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|uchar
name|pngMagicData
index|[]
init|=
block|{
literal|137
block|,
literal|80
block|,
literal|78
block|,
literal|71
block|,
literal|13
block|,
literal|10
block|,
literal|26
block|,
literal|10
block|}
decl_stmt|;
name|iod
operator|->
name|seek
argument_list|(
name|iconEntry
operator|.
name|dwImageOffset
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|pngMagic
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
operator|(
name|char
operator|*
operator|)
name|pngMagicData
argument_list|,
sizeof|sizeof
argument_list|(
name|pngMagicData
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|isPngImage
init|=
operator|(
name|iod
operator|->
name|read
argument_list|(
name|pngMagic
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|pngMagic
operator|)
decl_stmt|;
if|if
condition|(
name|isPngImage
condition|)
block|{
name|iod
operator|->
name|seek
argument_list|(
name|iconEntry
operator|.
name|dwImageOffset
argument_list|)
expr_stmt|;
name|QImage
name|image
init|=
name|QImage
operator|::
name|fromData
argument_list|(
name|iod
operator|->
name|read
argument_list|(
name|iconEntry
operator|.
name|dwBytesInRes
argument_list|)
argument_list|,
literal|"png"
argument_list|)
decl_stmt|;
name|image
operator|.
name|setText
argument_list|(
name|QLatin1String
argument_list|(
name|icoOrigDepthKey
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|iconEntry
operator|.
name|wBitCount
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|image
return|;
block|}
name|BMP_INFOHDR
name|header
decl_stmt|;
if|if
condition|(
name|readBMPHeader
argument_list|(
name|iconEntry
operator|.
name|dwImageOffset
argument_list|,
operator|&
name|header
argument_list|)
condition|)
block|{
name|icoAttrib
operator|.
name|nbits
operator|=
name|header
operator|.
name|biBitCount
condition|?
name|header
operator|.
name|biBitCount
else|:
name|iconEntry
operator|.
name|wBitCount
expr_stmt|;
switch|switch
condition|(
name|icoAttrib
operator|.
name|nbits
condition|)
block|{
case|case
literal|32
case|:
case|case
literal|24
case|:
case|case
literal|16
case|:
name|icoAttrib
operator|.
name|depth
operator|=
literal|32
expr_stmt|;
break|break;
case|case
literal|8
case|:
case|case
literal|4
case|:
name|icoAttrib
operator|.
name|depth
operator|=
literal|8
expr_stmt|;
break|break;
default|default:
name|icoAttrib
operator|.
name|depth
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|icoAttrib
operator|.
name|depth
operator|==
literal|32
condition|)
comment|// there's no colormap
name|icoAttrib
operator|.
name|ncolors
operator|=
literal|0
expr_stmt|;
else|else
comment|// # colors used
name|icoAttrib
operator|.
name|ncolors
operator|=
name|header
operator|.
name|biClrUsed
condition|?
name|header
operator|.
name|biClrUsed
else|:
literal|1
operator|<<
name|icoAttrib
operator|.
name|nbits
expr_stmt|;
if|if
condition|(
name|icoAttrib
operator|.
name|ncolors
operator|>
literal|256
condition|)
comment|//color table can't be more than 256
return|return
name|img
return|;
name|icoAttrib
operator|.
name|w
operator|=
name|iconEntry
operator|.
name|bWidth
expr_stmt|;
if|if
condition|(
name|icoAttrib
operator|.
name|w
operator|==
literal|0
condition|)
name|icoAttrib
operator|.
name|w
operator|=
name|header
operator|.
name|biWidth
expr_stmt|;
name|icoAttrib
operator|.
name|h
operator|=
name|iconEntry
operator|.
name|bHeight
expr_stmt|;
if|if
condition|(
name|icoAttrib
operator|.
name|h
operator|==
literal|0
condition|)
name|icoAttrib
operator|.
name|h
operator|=
name|header
operator|.
name|biHeight
operator|/
literal|2
expr_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|QImage
operator|::
name|Format_ARGB32
decl_stmt|;
if|if
condition|(
name|icoAttrib
operator|.
name|nbits
operator|==
literal|24
condition|)
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
elseif|else
if|if
condition|(
name|icoAttrib
operator|.
name|ncolors
operator|==
literal|2
condition|)
name|format
operator|=
name|QImage
operator|::
name|Format_Mono
expr_stmt|;
elseif|else
if|if
condition|(
name|icoAttrib
operator|.
name|ncolors
operator|>
literal|0
condition|)
name|format
operator|=
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
name|QImage
name|image
argument_list|(
name|icoAttrib
operator|.
name|w
argument_list|,
name|icoAttrib
operator|.
name|h
argument_list|,
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|findColorInfo
argument_list|(
name|image
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|readBMP
argument_list|(
name|image
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QImage
name|mask
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mask
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|mask
operator|.
name|setColorCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|mask
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|qRgba
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
name|mask
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
name|read1BitBMP
argument_list|(
name|mask
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mask
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|img
operator|=
name|image
expr_stmt|;
name|img
operator|.
name|setAlphaChannel
argument_list|(
name|mask
argument_list|)
expr_stmt|;
comment|// (Luckily, it seems that setAlphaChannel() does not ruin the alpha values
comment|// of partially transparent pixels in those icons that have that)
block|}
block|}
block|}
block|}
block|}
name|img
operator|.
name|setText
argument_list|(
name|QLatin1String
argument_list|(
name|icoOrigDepthKey
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|iconEntry
operator|.
name|wBitCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|img
return|;
block|}
end_function
begin_comment
comment|/*!     Reads all the icons from the given \a device, and returns them as     a list of QImage objects.      Each image has an alpha channel that represents the mask from the     corresponding icon.      \sa write() */
end_comment
begin_function
DECL|function|read
name|QList
argument_list|<
name|QImage
argument_list|>
name|ICOReader
operator|::
name|read
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
block|{
name|QList
argument_list|<
name|QImage
argument_list|>
name|images
decl_stmt|;
name|ICOReader
name|reader
argument_list|(
name|device
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|images
operator|+=
name|reader
operator|.
name|iconAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|images
return|;
block|}
end_function
begin_comment
comment|/*!     Writes all the QImages in the \a images list to the given \a     device. Returns \c true if the images are written successfully;     otherwise returns \c false.      The first image in the list is stored as the first icon in the     device, and is therefore used as the default icon by applications.     The alpha channel of each image is converted to a mask for each     corresponding icon.      \sa read() */
end_comment
begin_function
DECL|function|write
name|bool
name|ICOReader
operator|::
name|write
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QImage
argument_list|>
modifier|&
name|images
parameter_list|)
block|{
name|bool
name|retValue
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|images
operator|.
name|count
argument_list|()
condition|)
block|{
name|qint64
name|origOffset
init|=
name|device
operator|->
name|pos
argument_list|()
decl_stmt|;
name|ICONDIR
name|id
decl_stmt|;
name|id
operator|.
name|idReserved
operator|=
literal|0
expr_stmt|;
name|id
operator|.
name|idType
operator|=
literal|1
expr_stmt|;
name|id
operator|.
name|idCount
operator|=
name|images
operator|.
name|count
argument_list|()
expr_stmt|;
name|ICONDIRENTRY
modifier|*
name|entries
init|=
operator|new
name|ICONDIRENTRY
index|[
name|id
operator|.
name|idCount
index|]
decl_stmt|;
name|BMP_INFOHDR
modifier|*
name|bmpHeaders
init|=
operator|new
name|BMP_INFOHDR
index|[
name|id
operator|.
name|idCount
index|]
decl_stmt|;
name|QByteArray
modifier|*
name|imageData
init|=
operator|new
name|QByteArray
index|[
name|id
operator|.
name|idCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|id
operator|.
name|idCount
condition|;
name|i
operator|++
control|)
block|{
name|QImage
name|image
init|=
name|images
index|[
name|i
index|]
decl_stmt|;
comment|// Scale down the image if it is larger than 128 pixels in either width or height
if|if
condition|(
name|image
operator|.
name|width
argument_list|()
operator|>
literal|128
operator|||
name|image
operator|.
name|height
argument_list|()
operator|>
literal|128
condition|)
block|{
name|image
operator|=
name|image
operator|.
name|scaled
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
expr_stmt|;
block|}
name|QImage
name|maskImage
argument_list|(
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|hasAlphaChannel
argument_list|()
condition|)
block|{
name|maskImage
operator|=
name|image
operator|.
name|createAlphaMask
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|maskImage
operator|.
name|fill
argument_list|(
literal|0xff
argument_list|)
expr_stmt|;
block|}
name|maskImage
operator|=
name|maskImage
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
name|int
name|nbits
init|=
literal|32
decl_stmt|;
name|int
name|bpl_bmp
init|=
operator|(
operator|(
name|image
operator|.
name|width
argument_list|()
operator|*
name|nbits
operator|+
literal|31
operator|)
operator|/
literal|32
operator|)
operator|*
literal|4
decl_stmt|;
name|entries
index|[
name|i
index|]
operator|.
name|bColorCount
operator|=
literal|0
expr_stmt|;
name|entries
index|[
name|i
index|]
operator|.
name|bReserved
operator|=
literal|0
expr_stmt|;
name|entries
index|[
name|i
index|]
operator|.
name|wBitCount
operator|=
name|nbits
expr_stmt|;
name|entries
index|[
name|i
index|]
operator|.
name|bHeight
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|entries
index|[
name|i
index|]
operator|.
name|bWidth
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
name|entries
index|[
name|i
index|]
operator|.
name|dwBytesInRes
operator|=
name|BMP_INFOHDR_SIZE
operator|+
operator|(
name|bpl_bmp
operator|*
name|image
operator|.
name|height
argument_list|()
operator|)
operator|+
operator|(
name|maskImage
operator|.
name|bytesPerLine
argument_list|()
operator|*
name|maskImage
operator|.
name|height
argument_list|()
operator|)
expr_stmt|;
name|entries
index|[
name|i
index|]
operator|.
name|wPlanes
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|entries
index|[
name|i
index|]
operator|.
name|dwImageOffset
operator|=
name|origOffset
operator|+
name|ICONDIR_SIZE
operator|+
operator|(
name|id
operator|.
name|idCount
operator|*
name|ICONDIRENTRY_SIZE
operator|)
expr_stmt|;
else|else
name|entries
index|[
name|i
index|]
operator|.
name|dwImageOffset
operator|=
name|entries
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|dwImageOffset
operator|+
name|entries
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|dwBytesInRes
expr_stmt|;
name|bmpHeaders
index|[
name|i
index|]
operator|.
name|biBitCount
operator|=
name|entries
index|[
name|i
index|]
operator|.
name|wBitCount
expr_stmt|;
name|bmpHeaders
index|[
name|i
index|]
operator|.
name|biClrImportant
operator|=
literal|0
expr_stmt|;
name|bmpHeaders
index|[
name|i
index|]
operator|.
name|biClrUsed
operator|=
name|entries
index|[
name|i
index|]
operator|.
name|bColorCount
expr_stmt|;
name|bmpHeaders
index|[
name|i
index|]
operator|.
name|biCompression
operator|=
literal|0
expr_stmt|;
name|bmpHeaders
index|[
name|i
index|]
operator|.
name|biHeight
operator|=
name|entries
index|[
name|i
index|]
operator|.
name|bHeight
operator|*
literal|2
expr_stmt|;
comment|// 2 is for the mask
name|bmpHeaders
index|[
name|i
index|]
operator|.
name|biPlanes
operator|=
name|entries
index|[
name|i
index|]
operator|.
name|wPlanes
expr_stmt|;
name|bmpHeaders
index|[
name|i
index|]
operator|.
name|biSize
operator|=
name|BMP_INFOHDR_SIZE
expr_stmt|;
name|bmpHeaders
index|[
name|i
index|]
operator|.
name|biSizeImage
operator|=
name|entries
index|[
name|i
index|]
operator|.
name|dwBytesInRes
operator|-
name|BMP_INFOHDR_SIZE
expr_stmt|;
name|bmpHeaders
index|[
name|i
index|]
operator|.
name|biWidth
operator|=
name|entries
index|[
name|i
index|]
operator|.
name|bWidth
expr_stmt|;
name|bmpHeaders
index|[
name|i
index|]
operator|.
name|biXPelsPerMeter
operator|=
literal|0
expr_stmt|;
name|bmpHeaders
index|[
name|i
index|]
operator|.
name|biYPelsPerMeter
operator|=
literal|0
expr_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|imageData
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|buf
init|=
operator|new
name|uchar
index|[
name|bpl_bmp
index|]
decl_stmt|;
name|uchar
modifier|*
name|b
decl_stmt|;
name|memset
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|bpl_bmp
argument_list|)
expr_stmt|;
name|int
name|y
decl_stmt|;
for|for
control|(
name|y
operator|=
name|image
operator|.
name|height
argument_list|()
operator|-
literal|1
init|;
name|y
operator|>=
literal|0
condition|;
name|y
operator|--
control|)
block|{
comment|// write the image bits
comment|// 32 bits
name|QRgb
modifier|*
name|p
init|=
operator|(
name|QRgb
operator|*
operator|)
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
decl_stmt|;
name|QRgb
modifier|*
name|end
init|=
name|p
operator|+
name|image
operator|.
name|width
argument_list|()
decl_stmt|;
name|b
operator|=
name|buf
expr_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|end
condition|)
block|{
operator|*
name|b
operator|++
operator|=
name|qBlue
argument_list|(
operator|*
name|p
argument_list|)
expr_stmt|;
operator|*
name|b
operator|++
operator|=
name|qGreen
argument_list|(
operator|*
name|p
argument_list|)
expr_stmt|;
operator|*
name|b
operator|++
operator|=
name|qRed
argument_list|(
operator|*
name|p
argument_list|)
expr_stmt|;
operator|*
name|b
operator|++
operator|=
name|qAlpha
argument_list|(
operator|*
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|qAlpha
argument_list|(
operator|*
name|p
argument_list|)
operator|>
literal|0
condition|)
comment|// Even mostly transparent pixels must not be masked away
name|maskImage
operator|.
name|setPixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
comment|// (i.e. createAlphaMask() takes away too much)
name|p
operator|++
expr_stmt|;
name|x
operator|++
expr_stmt|;
block|}
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|buf
argument_list|,
name|bpl_bmp
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|buf
expr_stmt|;
name|maskImage
operator|.
name|invertPixels
argument_list|()
expr_stmt|;
comment|// seems as though it needs this
comment|// NOTE! !! The mask is only flipped vertically - not horizontally !!
for|for
control|(
name|y
operator|=
name|maskImage
operator|.
name|height
argument_list|()
operator|-
literal|1
init|;
name|y
operator|>=
literal|0
condition|;
name|y
operator|--
control|)
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|maskImage
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|,
name|maskImage
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writeIconDir
argument_list|(
name|device
argument_list|,
name|id
argument_list|)
condition|)
block|{
name|int
name|i
decl_stmt|;
name|bool
name|bOK
init|=
literal|true
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|id
operator|.
name|idCount
operator|&&
name|bOK
condition|;
name|i
operator|++
control|)
block|{
name|bOK
operator|=
name|writeIconDirEntry
argument_list|(
name|device
argument_list|,
name|entries
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bOK
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|id
operator|.
name|idCount
operator|&&
name|bOK
condition|;
name|i
operator|++
control|)
block|{
name|bOK
operator|=
name|writeBMPInfoHeader
argument_list|(
name|device
argument_list|,
name|bmpHeaders
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|bOK
operator|&=
operator|(
name|device
operator|->
name|write
argument_list|(
name|imageData
index|[
name|i
index|]
argument_list|)
operator|==
operator|(
name|int
operator|)
name|imageData
index|[
name|i
index|]
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
block|}
name|retValue
operator|=
name|bOK
expr_stmt|;
block|}
block|}
operator|delete
index|[]
name|entries
expr_stmt|;
operator|delete
index|[]
name|bmpHeaders
expr_stmt|;
operator|delete
index|[]
name|imageData
expr_stmt|;
block|}
return|return
name|retValue
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs an instance of QtIcoHandler initialized to use \a device. */
end_comment
begin_constructor
DECL|function|QtIcoHandler
name|QtIcoHandler
operator|::
name|QtIcoHandler
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
block|{
name|m_currentIconIndex
operator|=
literal|0
expr_stmt|;
name|setDevice
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|m_pICOReader
operator|=
operator|new
name|ICOReader
argument_list|(
name|device
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destructor for QtIcoHandler. */
end_comment
begin_destructor
DECL|function|~QtIcoHandler
name|QtIcoHandler
operator|::
name|~
name|QtIcoHandler
parameter_list|()
block|{
operator|delete
name|m_pICOReader
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|option
name|QVariant
name|QtIcoHandler
operator|::
name|option
parameter_list|(
name|ImageOption
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|option
operator|==
name|Size
condition|)
block|{
name|QIODevice
modifier|*
name|device
init|=
name|QImageIOHandler
operator|::
name|device
argument_list|()
decl_stmt|;
name|qint64
name|oldPos
init|=
name|device
operator|->
name|pos
argument_list|()
decl_stmt|;
name|ICONDIRENTRY
name|iconEntry
decl_stmt|;
if|if
condition|(
name|device
operator|->
name|seek
argument_list|(
name|oldPos
operator|+
name|ICONDIR_SIZE
operator|+
operator|(
name|m_currentIconIndex
operator|*
name|ICONDIRENTRY_SIZE
operator|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|readIconDirEntry
argument_list|(
name|device
argument_list|,
operator|&
name|iconEntry
argument_list|)
condition|)
block|{
name|device
operator|->
name|seek
argument_list|(
name|oldPos
argument_list|)
expr_stmt|;
return|return
name|QSize
argument_list|(
name|iconEntry
operator|.
name|bWidth
argument_list|,
name|iconEntry
operator|.
name|bHeight
argument_list|)
return|;
block|}
block|}
if|if
condition|(
operator|!
name|device
operator|->
name|isSequential
argument_list|()
condition|)
name|device
operator|->
name|seek
argument_list|(
name|oldPos
argument_list|)
expr_stmt|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|supportsOption
name|bool
name|QtIcoHandler
operator|::
name|supportsOption
parameter_list|(
name|ImageOption
name|option
parameter_list|)
specifier|const
block|{
return|return
name|option
operator|==
name|Size
return|;
block|}
end_function
begin_comment
comment|/*!  * Verifies if some values (magic bytes) are set as expected in the header of the file.  * If the magic bytes were found, it is assumed that the QtIcoHandler can read the file.  *  */
end_comment
begin_function
DECL|function|canRead
name|bool
name|QtIcoHandler
operator|::
name|canRead
parameter_list|()
specifier|const
block|{
name|bool
name|bCanRead
init|=
literal|false
decl_stmt|;
name|QIODevice
modifier|*
name|device
init|=
name|QImageIOHandler
operator|::
name|device
argument_list|()
decl_stmt|;
if|if
condition|(
name|device
condition|)
block|{
name|bCanRead
operator|=
name|ICOReader
operator|::
name|canRead
argument_list|(
name|device
argument_list|)
expr_stmt|;
if|if
condition|(
name|bCanRead
condition|)
name|setFormat
argument_list|(
literal|"ico"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QtIcoHandler::canRead() called with no device"
argument_list|)
expr_stmt|;
block|}
return|return
name|bCanRead
return|;
block|}
end_function
begin_comment
comment|/*! This static function is used by the plugin code, and is provided for convenience only.     \a device must be an opened device with pointing to the start of the header data of the ICO file. */
end_comment
begin_function
DECL|function|canRead
name|bool
name|QtIcoHandler
operator|::
name|canRead
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|device
argument_list|)
expr_stmt|;
return|return
name|ICOReader
operator|::
name|canRead
argument_list|(
name|device
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp  */
end_comment
begin_function
DECL|function|read
name|bool
name|QtIcoHandler
operator|::
name|read
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|)
block|{
name|bool
name|bSuccess
init|=
literal|false
decl_stmt|;
name|QImage
name|img
init|=
name|m_pICOReader
operator|->
name|iconAt
argument_list|(
name|m_currentIconIndex
argument_list|)
decl_stmt|;
comment|// Make sure we only write to \a image when we succeed.
if|if
condition|(
operator|!
name|img
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|bSuccess
operator|=
literal|true
expr_stmt|;
operator|*
name|image
operator|=
name|img
expr_stmt|;
block|}
return|return
name|bSuccess
return|;
block|}
end_function
begin_comment
comment|/*! \reimp  */
end_comment
begin_function
DECL|function|write
name|bool
name|QtIcoHandler
operator|::
name|write
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
block|{
name|QIODevice
modifier|*
name|device
init|=
name|QImageIOHandler
operator|::
name|device
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QImage
argument_list|>
name|imgs
decl_stmt|;
name|imgs
operator|.
name|append
argument_list|(
name|image
argument_list|)
expr_stmt|;
return|return
name|ICOReader
operator|::
name|write
argument_list|(
name|device
argument_list|,
name|imgs
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!  * Return the common identifier of the format.  * For ICO format this will return "ico".  */
end_comment
begin_function
DECL|function|name
name|QByteArray
name|QtIcoHandler
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
literal|"ico"
return|;
block|}
end_function
begin_comment
comment|/*! \reimp  */
end_comment
begin_function
DECL|function|imageCount
name|int
name|QtIcoHandler
operator|::
name|imageCount
parameter_list|()
specifier|const
block|{
return|return
name|m_pICOReader
operator|->
name|count
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*! \reimp  */
end_comment
begin_function
DECL|function|jumpToImage
name|bool
name|QtIcoHandler
operator|::
name|jumpToImage
parameter_list|(
name|int
name|imageNumber
parameter_list|)
block|{
if|if
condition|(
name|imageNumber
operator|<
name|imageCount
argument_list|()
condition|)
block|{
name|m_currentIconIndex
operator|=
name|imageNumber
expr_stmt|;
block|}
return|return
operator|(
name|imageNumber
operator|<
name|imageCount
argument_list|()
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
end_function
begin_comment
comment|/*! \reimp  */
end_comment
begin_function
DECL|function|jumpToNextImage
name|bool
name|QtIcoHandler
operator|::
name|jumpToNextImage
parameter_list|()
block|{
return|return
name|jumpToImage
argument_list|(
name|m_currentIconIndex
operator|+
literal|1
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
