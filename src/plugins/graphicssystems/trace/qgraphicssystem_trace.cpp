begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgraphicssystem_trace_p.h"
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpaintbuffer_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QTraceWindowSurface
class|class
name|QTraceWindowSurface
super|:
specifier|public
name|QRasterWindowSurface
block|{
public|public:
name|QTraceWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
constructor_decl|;
name|~
name|QTraceWindowSurface
parameter_list|()
destructor_decl|;
name|QPaintDevice
modifier|*
name|paintDevice
parameter_list|()
function_decl|;
name|void
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
function_decl|;
name|void
name|endPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
function_decl|;
name|bool
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
function_decl|;
private|private:
DECL|member|buffer
name|QPaintBuffer
modifier|*
name|buffer
decl_stmt|;
DECL|member|updates
name|QList
argument_list|<
name|QRegion
argument_list|>
name|updates
decl_stmt|;
DECL|member|winId
name|qulonglong
name|winId
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QTraceWindowSurface
name|QTraceWindowSurface
operator|::
name|QTraceWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QRasterWindowSurface
argument_list|(
name|widget
argument_list|)
member_init_list|,
name|buffer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|winId
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QTraceWindowSurface
name|QTraceWindowSurface
operator|::
name|~
name|QTraceWindowSurface
parameter_list|()
block|{
if|if
condition|(
name|buffer
condition|)
block|{
name|QFile
name|outputFile
argument_list|(
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"qtgraphics-%0.trace"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|winId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|QDataStream
name|out
argument_list|(
operator|&
name|outputFile
argument_list|)
decl_stmt|;
name|out
operator|.
name|setFloatingPointPrecision
argument_list|(
name|QDataStream
operator|::
name|SinglePrecision
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"qttraceV2"
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|uint
name|version
init|=
literal|1
decl_stmt|;
name|out
operator|<<
name|version
operator|<<
operator|*
name|buffer
operator|<<
name|updates
expr_stmt|;
block|}
operator|delete
name|buffer
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QTraceWindowSurface
operator|::
name|paintDevice
parameter_list|()
block|{
if|if
condition|(
operator|!
name|buffer
condition|)
block|{
name|buffer
operator|=
operator|new
name|QPaintBuffer
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QPA
name|buffer
operator|->
name|setBoundingRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|buffer
operator|->
name|setBoundingRect
argument_list|(
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QTraceWindowSurface
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
comment|// ensure paint buffer is created
name|paintDevice
argument_list|()
expr_stmt|;
name|buffer
operator|->
name|beginNewFrame
argument_list|()
expr_stmt|;
name|QRasterWindowSurface
operator|::
name|beginPaint
argument_list|(
name|rgn
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QTraceWindowSurface
operator|::
name|endPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|rgn
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|QRasterWindowSurface
operator|::
name|paintDevice
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|->
name|draw
argument_list|(
operator|&
name|p
argument_list|,
name|buffer
operator|->
name|numFrames
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|winId
operator|=
operator|(
name|qulonglong
operator|)
name|window
argument_list|()
operator|->
name|winId
argument_list|()
expr_stmt|;
name|updates
operator|<<
name|rgn
expr_stmt|;
name|QRasterWindowSurface
operator|::
name|endPaint
argument_list|(
name|rgn
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QTraceWindowSurface
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{
comment|// TODO: scrolling should also be streamed and replayed
comment|// to test scrolling performance
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|QTraceGraphicsSystem
name|QTraceGraphicsSystem
operator|::
name|QTraceGraphicsSystem
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|createPixmapData
name|QPixmapData
modifier|*
name|QTraceGraphicsSystem
operator|::
name|createPixmapData
parameter_list|(
name|QPixmapData
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QRasterPixmapData
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createWindowSurface
name|QWindowSurface
modifier|*
name|QTraceGraphicsSystem
operator|::
name|createWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QTraceWindowSurface
argument_list|(
name|widget
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
