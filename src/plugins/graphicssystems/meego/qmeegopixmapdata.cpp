begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmeegopixmapdata.h"
end_include
begin_include
include|#
directive|include
file|"qmeegoextensions.h"
end_include
begin_include
include|#
directive|include
file|"qmeegorasterpixmapdata.h"
end_include
begin_include
include|#
directive|include
file|<private/qimage_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_gl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qeglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgraphicssystem_runtime_p.h>
end_include
begin_comment
comment|// from dithering.cpp
end_comment
begin_function_decl
specifier|extern
name|unsigned
name|short
modifier|*
name|convertRGB32_to_RGB565
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|unsigned
name|short
modifier|*
name|convertARGB32_to_RGBA4444
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|unsigned
name|char
modifier|*
name|convertBGRA32_to_RGBA32
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|preserved_image_attribs
specifier|static
name|EGLint
name|preserved_image_attribs
index|[]
init|=
block|{
name|EGL_IMAGE_PRESERVED_KHR
block|,
name|EGL_TRUE
block|,
name|EGL_NONE
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|sharedImagesMap
name|QHash
argument_list|<
name|void
modifier|*
argument_list|,
name|QMeeGoImageInfo
modifier|*
argument_list|>
name|QMeeGoPixmapData
operator|::
name|sharedImagesMap
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* Public */
end_comment
begin_constructor
DECL|function|QMeeGoPixmapData
name|QMeeGoPixmapData
operator|::
name|QMeeGoPixmapData
parameter_list|()
member_init_list|:
name|QGLPixmapData
argument_list|(
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|fromTexture
name|void
name|QMeeGoPixmapData
operator|::
name|fromTexture
parameter_list|(
name|GLuint
name|textureId
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|bool
name|alpha
parameter_list|)
block|{
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|texture
argument_list|()
operator|->
name|id
operator|=
name|textureId
expr_stmt|;
name|m_hasAlpha
operator|=
name|alpha
expr_stmt|;
name|softImage
operator|=
name|QImage
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toImage
name|QImage
name|QMeeGoPixmapData
operator|::
name|toImage
parameter_list|()
specifier|const
block|{
return|return
name|softImage
return|;
block|}
end_function
begin_function
DECL|function|fromImage
name|void
name|QMeeGoPixmapData
operator|::
name|fromImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|void
modifier|*
name|rawResource
init|=
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|(
operator|(
name|QImage
operator|&
operator|)
name|image
operator|)
operator|.
name|data_ptr
argument_list|()
operator|->
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|sharedImagesMap
operator|.
name|contains
argument_list|(
name|rawResource
argument_list|)
condition|)
block|{
name|QMeeGoImageInfo
modifier|*
name|info
init|=
name|sharedImagesMap
operator|.
name|value
argument_list|(
name|rawResource
argument_list|)
decl_stmt|;
name|fromEGLSharedImage
argument_list|(
name|info
operator|->
name|handle
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This should *never* happen since the graphics system should never
comment|// create a QMeeGoPixmapData for an origin that doesn't contain a raster
comment|// image we know about. But...
name|qWarning
argument_list|(
literal|"QMeeGoPixmapData::fromImage called on non-know resource. Falling back..."
argument_list|)
expr_stmt|;
name|QGLPixmapData
operator|::
name|fromImage
argument_list|(
name|image
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fromEGLSharedImage
name|void
name|QMeeGoPixmapData
operator|::
name|fromEGLSharedImage
parameter_list|(
name|Qt
operator|::
name|HANDLE
name|handle
parameter_list|,
specifier|const
name|QImage
modifier|&
name|si
parameter_list|)
block|{
if|if
condition|(
name|si
operator|.
name|isNull
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"Trying to build pixmap with an empty/null softimage!"
argument_list|)
expr_stmt|;
name|QGLShareContextScope
name|ctx
argument_list|(
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|QMeeGoExtensions
operator|::
name|ensureInitialized
argument_list|()
expr_stmt|;
name|bool
name|textureIsBound
init|=
literal|false
decl_stmt|;
name|GLuint
name|newTextureId
decl_stmt|;
name|GLint
name|newWidth
decl_stmt|,
name|newHeight
decl_stmt|;
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|newTextureId
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|newTextureId
argument_list|)
expr_stmt|;
name|EGLImageKHR
name|image
init|=
name|QEgl
operator|::
name|eglCreateImageKHR
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|EGL_NO_CONTEXT
argument_list|,
name|EGL_SHARED_IMAGE_NOK
argument_list|,
operator|(
name|EGLClientBuffer
operator|)
name|handle
argument_list|,
name|preserved_image_attribs
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|!=
name|EGL_NO_IMAGE_KHR
condition|)
block|{
name|glEGLImageTargetTexture2DOES
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|GLint
name|err
init|=
name|glGetError
argument_list|()
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|GL_NO_ERROR
condition|)
name|textureIsBound
operator|=
literal|true
expr_stmt|;
name|QMeeGoExtensions
operator|::
name|eglQueryImageNOK
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|image
argument_list|,
name|EGL_WIDTH
argument_list|,
operator|&
name|newWidth
argument_list|)
expr_stmt|;
name|QMeeGoExtensions
operator|::
name|eglQueryImageNOK
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|image
argument_list|,
name|EGL_HEIGHT
argument_list|,
operator|&
name|newHeight
argument_list|)
expr_stmt|;
name|QEgl
operator|::
name|eglDestroyImageKHR
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|textureIsBound
condition|)
block|{
name|fromTexture
argument_list|(
name|newTextureId
argument_list|,
name|newWidth
argument_list|,
name|newHeight
argument_list|,
operator|(
name|si
operator|.
name|hasAlphaChannel
argument_list|()
operator|&&
cast|const_cast
argument_list|<
name|QImage
operator|&
argument_list|>
argument_list|(
name|si
argument_list|)
operator|.
name|data_ptr
argument_list|()
operator|->
name|checkForAlphaPixels
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|texture
argument_list|()
operator|->
name|options
operator|&=
operator|~
name|QGLContext
operator|::
name|InvertedYBindOption
expr_stmt|;
name|softImage
operator|=
name|si
expr_stmt|;
name|QMeeGoPixmapData
operator|::
name|registerSharedImage
argument_list|(
name|handle
argument_list|,
name|softImage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Failed to create a texture from a shared image!"
argument_list|)
expr_stmt|;
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|newTextureId
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|imageToEGLSharedImage
name|Qt
operator|::
name|HANDLE
name|QMeeGoPixmapData
operator|::
name|imageToEGLSharedImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
block|{
name|QGLShareContextScope
name|ctx
argument_list|(
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|QMeeGoExtensions
operator|::
name|ensureInitialized
argument_list|()
expr_stmt|;
name|GLuint
name|textureId
decl_stmt|;
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|textureId
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|textureId
argument_list|)
expr_stmt|;
if|if
condition|(
name|image
operator|.
name|hasAlphaChannel
argument_list|()
operator|&&
cast|const_cast
argument_list|<
name|QImage
operator|&
argument_list|>
argument_list|(
name|image
argument_list|)
operator|.
name|data_ptr
argument_list|()
operator|->
name|checkForAlphaPixels
argument_list|()
condition|)
block|{
name|void
modifier|*
name|converted
init|=
name|convertBGRA32_to_RGBA32
argument_list|(
name|image
operator|.
name|bits
argument_list|()
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|image
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
decl_stmt|;
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|converted
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|converted
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|void
modifier|*
name|converted
init|=
name|convertRGB32_to_RGB565
argument_list|(
name|image
operator|.
name|bits
argument_list|()
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
name|image
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
decl_stmt|;
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_SHORT_5_6_5
argument_list|,
name|converted
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|converted
argument_list|)
expr_stmt|;
block|}
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|textureId
argument_list|)
expr_stmt|;
name|EGLImageKHR
name|eglimage
init|=
name|QEgl
operator|::
name|eglCreateImageKHR
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|QEglContext
operator|::
name|currentContext
argument_list|(
name|QEgl
operator|::
name|OpenGL
argument_list|)
operator|->
name|context
argument_list|()
argument_list|,
name|EGL_GL_TEXTURE_2D_KHR
argument_list|,
operator|(
name|EGLClientBuffer
operator|)
name|textureId
argument_list|,
name|preserved_image_attribs
argument_list|)
decl_stmt|;
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|textureId
argument_list|)
expr_stmt|;
if|if
condition|(
name|eglimage
condition|)
block|{
name|EGLNativeSharedImageTypeNOK
name|handle
init|=
name|QMeeGoExtensions
operator|::
name|eglCreateSharedImageNOK
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|eglimage
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|QEgl
operator|::
name|eglDestroyImageKHR
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|eglimage
argument_list|)
expr_stmt|;
return|return
operator|(
name|Qt
operator|::
name|HANDLE
operator|)
name|handle
return|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Failed to create shared image from pixmap/texture!"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_function
begin_function
DECL|function|updateFromSoftImage
name|void
name|QMeeGoPixmapData
operator|::
name|updateFromSoftImage
parameter_list|()
block|{
comment|// FIXME That's broken with recent 16bit textures changes.
name|m_dirty
operator|=
literal|true
expr_stmt|;
name|m_source
operator|=
name|softImage
expr_stmt|;
name|ensureCreated
argument_list|()
expr_stmt|;
if|if
condition|(
name|softImage
operator|.
name|width
argument_list|()
operator|!=
name|w
operator|||
name|softImage
operator|.
name|height
argument_list|()
operator|!=
name|h
condition|)
name|qWarning
argument_list|(
literal|"Ooops, looks like softImage changed dimensions since last updated! Corruption ahead?!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destroyEGLSharedImage
name|bool
name|QMeeGoPixmapData
operator|::
name|destroyEGLSharedImage
parameter_list|(
name|Qt
operator|::
name|HANDLE
name|h
parameter_list|)
block|{
name|QGLShareContextScope
name|ctx
argument_list|(
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|QMeeGoExtensions
operator|::
name|ensureInitialized
argument_list|()
expr_stmt|;
name|QMutableHashIterator
argument_list|<
name|void
modifier|*
argument_list|,
name|QMeeGoImageInfo
modifier|*
argument_list|>
name|i
argument_list|(
name|sharedImagesMap
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|->
name|handle
operator|==
name|h
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|QMeeGoExtensions
operator|::
name|eglDestroySharedImageNOK
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
operator|(
name|EGLNativeSharedImageTypeNOK
operator|)
name|h
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|registerSharedImage
name|void
name|QMeeGoPixmapData
operator|::
name|registerSharedImage
parameter_list|(
name|Qt
operator|::
name|HANDLE
name|handle
parameter_list|,
specifier|const
name|QImage
modifier|&
name|si
parameter_list|)
block|{
name|void
modifier|*
name|raw
init|=
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|(
operator|(
name|QImage
operator|)
name|si
operator|)
operator|.
name|data_ptr
argument_list|()
operator|->
name|data
argument_list|)
decl_stmt|;
name|QMeeGoImageInfo
modifier|*
name|info
decl_stmt|;
if|if
condition|(
operator|!
name|sharedImagesMap
operator|.
name|contains
argument_list|(
name|raw
argument_list|)
condition|)
block|{
name|info
operator|=
operator|new
name|QMeeGoImageInfo
expr_stmt|;
name|info
operator|->
name|handle
operator|=
name|handle
expr_stmt|;
name|info
operator|->
name|rawFormat
operator|=
name|si
operator|.
name|format
argument_list|()
expr_stmt|;
name|sharedImagesMap
operator|.
name|insert
argument_list|(
name|raw
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|=
name|sharedImagesMap
operator|.
name|value
argument_list|(
name|raw
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|->
name|handle
operator|!=
name|handle
operator|||
name|info
operator|->
name|rawFormat
operator|!=
name|si
operator|.
name|format
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"Inconsistency detected: overwriting entry in sharedImagesMap but handle/format different"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createCompatiblePixmapData
name|QPixmapData
modifier|*
name|QMeeGoPixmapData
operator|::
name|createCompatiblePixmapData
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QMeeGoRasterPixmapData
argument_list|(
name|pixelType
argument_list|()
argument_list|)
return|;
block|}
end_function
end_unit
