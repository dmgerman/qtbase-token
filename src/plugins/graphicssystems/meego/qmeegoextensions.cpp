begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmeegoextensions.h"
end_include
begin_include
include|#
directive|include
file|<private/qeglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmapdata_gl_p.h>
end_include
begin_decl_stmt
DECL|member|initialized
name|bool
name|QMeeGoExtensions
operator|::
name|initialized
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|hasImageShared
name|bool
name|QMeeGoExtensions
operator|::
name|hasImageShared
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|hasSurfaceScaling
name|bool
name|QMeeGoExtensions
operator|::
name|hasSurfaceScaling
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|hasLockSurface
name|bool
name|QMeeGoExtensions
operator|::
name|hasLockSurface
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|hasFenceSync
name|bool
name|QMeeGoExtensions
operator|::
name|hasFenceSync
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* Extension funcs */
end_comment
begin_typedef
DECL|typedef|eglQueryImageNOKFunc
typedef|typedef
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglQueryImageNOKFunc
function_decl|)
parameter_list|(
name|EGLDisplay
parameter_list|,
name|EGLImageKHR
parameter_list|,
name|EGLint
parameter_list|,
name|EGLint
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|eglCreateSharedImageNOKFunc
typedef|typedef
name|EGLNativeSharedImageTypeNOK
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglCreateSharedImageNOKFunc
function_decl|)
parameter_list|(
name|EGLDisplay
parameter_list|,
name|EGLImageKHR
parameter_list|,
name|EGLint
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|eglDestroySharedImageNOKFunc
typedef|typedef
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglDestroySharedImageNOKFunc
function_decl|)
parameter_list|(
name|EGLDisplay
parameter_list|,
name|EGLNativeSharedImageTypeNOK
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|eglSetSurfaceScalingNOKFunc
typedef|typedef
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglSetSurfaceScalingNOKFunc
function_decl|)
parameter_list|(
name|EGLDisplay
parameter_list|,
name|EGLSurface
parameter_list|,
name|EGLint
parameter_list|,
name|EGLint
parameter_list|,
name|EGLint
parameter_list|,
name|EGLint
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|eglLockSurfaceKHRFunc
typedef|typedef
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglLockSurfaceKHRFunc
function_decl|)
parameter_list|(
name|EGLDisplay
parameter_list|,
name|EGLSurface
parameter_list|,
specifier|const
name|EGLint
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|eglUnlockSurfaceKHRFunc
typedef|typedef
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglUnlockSurfaceKHRFunc
function_decl|)
parameter_list|(
name|EGLDisplay
parameter_list|,
name|EGLSurface
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|eglCreateSyncKHRFunc
typedef|typedef
name|EGLSyncKHR
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglCreateSyncKHRFunc
function_decl|)
parameter_list|(
name|EGLDisplay
parameter_list|,
name|EGLenum
parameter_list|,
specifier|const
name|EGLint
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|eglDestroySyncKHRFunc
typedef|typedef
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglDestroySyncKHRFunc
function_decl|)
parameter_list|(
name|EGLDisplay
parameter_list|,
name|EGLSyncKHR
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|eglClientWaitSyncKHRFunc
typedef|typedef
name|EGLint
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglClientWaitSyncKHRFunc
function_decl|)
parameter_list|(
name|EGLDisplay
parameter_list|,
name|EGLSyncKHR
parameter_list|,
name|EGLint
parameter_list|,
name|EGLTimeKHR
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|eglGetSyncAttribKHRFunc
typedef|typedef
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglGetSyncAttribKHRFunc
function_decl|)
parameter_list|(
name|EGLDisplay
parameter_list|,
name|EGLSyncKHR
parameter_list|,
name|EGLint
parameter_list|,
name|EGLint
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|_eglQueryImageNOK
specifier|static
name|eglQueryImageNOKFunc
name|_eglQueryImageNOK
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_eglCreateSharedImageNOK
specifier|static
name|eglCreateSharedImageNOKFunc
name|_eglCreateSharedImageNOK
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_eglDestroySharedImageNOK
specifier|static
name|eglDestroySharedImageNOKFunc
name|_eglDestroySharedImageNOK
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_eglSetSurfaceScalingNOK
specifier|static
name|eglSetSurfaceScalingNOKFunc
name|_eglSetSurfaceScalingNOK
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_eglLockSurfaceKHR
specifier|static
name|eglLockSurfaceKHRFunc
name|_eglLockSurfaceKHR
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_eglUnlockSurfaceKHR
specifier|static
name|eglUnlockSurfaceKHRFunc
name|_eglUnlockSurfaceKHR
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_eglCreateSyncKHR
specifier|static
name|eglCreateSyncKHRFunc
name|_eglCreateSyncKHR
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_eglDestroySyncKHR
specifier|static
name|eglDestroySyncKHRFunc
name|_eglDestroySyncKHR
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_eglClientWaitSyncKHR
specifier|static
name|eglClientWaitSyncKHRFunc
name|_eglClientWaitSyncKHR
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_eglGetSyncAttribKHR
specifier|static
name|eglGetSyncAttribKHRFunc
name|_eglGetSyncAttribKHR
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* Public */
end_comment
begin_function
DECL|function|ensureInitialized
name|void
name|QMeeGoExtensions
operator|::
name|ensureInitialized
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
name|initialize
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eglCreateSharedImageNOK
name|EGLNativeSharedImageTypeNOK
name|QMeeGoExtensions
operator|::
name|eglCreateSharedImageNOK
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLImageKHR
name|image
parameter_list|,
name|EGLint
modifier|*
name|props
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasImageShared
condition|)
name|qFatal
argument_list|(
literal|"EGL_NOK_image_shared not found but trying to use capability!"
argument_list|)
expr_stmt|;
return|return
name|_eglCreateSharedImageNOK
argument_list|(
name|dpy
argument_list|,
name|image
argument_list|,
name|props
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|eglQueryImageNOK
name|bool
name|QMeeGoExtensions
operator|::
name|eglQueryImageNOK
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLImageKHR
name|image
parameter_list|,
name|EGLint
name|prop
parameter_list|,
name|EGLint
modifier|*
name|v
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasImageShared
condition|)
name|qFatal
argument_list|(
literal|"EGL_NOK_image_shared not found but trying to use capability!"
argument_list|)
expr_stmt|;
return|return
name|_eglQueryImageNOK
argument_list|(
name|dpy
argument_list|,
name|image
argument_list|,
name|prop
argument_list|,
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|eglDestroySharedImageNOK
name|bool
name|QMeeGoExtensions
operator|::
name|eglDestroySharedImageNOK
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLNativeSharedImageTypeNOK
name|img
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasImageShared
condition|)
name|qFatal
argument_list|(
literal|"EGL_NOK_image_shared not found but trying to use capability!"
argument_list|)
expr_stmt|;
return|return
name|_eglDestroySharedImageNOK
argument_list|(
name|dpy
argument_list|,
name|img
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|eglSetSurfaceScalingNOK
name|bool
name|QMeeGoExtensions
operator|::
name|eglSetSurfaceScalingNOK
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasSurfaceScaling
condition|)
name|qFatal
argument_list|(
literal|"EGL_NOK_surface_scaling not found but trying to use capability!"
argument_list|)
expr_stmt|;
return|return
name|_eglSetSurfaceScalingNOK
argument_list|(
name|dpy
argument_list|,
name|surface
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|eglLockSurfaceKHR
name|bool
name|QMeeGoExtensions
operator|::
name|eglLockSurfaceKHR
parameter_list|(
name|EGLDisplay
name|display
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasLockSurface
condition|)
name|qFatal
argument_list|(
literal|"EGL_KHR_lock_surface2 not found but trying to use capability!"
argument_list|)
expr_stmt|;
return|return
name|_eglLockSurfaceKHR
argument_list|(
name|display
argument_list|,
name|surface
argument_list|,
name|attrib_list
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|eglUnlockSurfaceKHR
name|bool
name|QMeeGoExtensions
operator|::
name|eglUnlockSurfaceKHR
parameter_list|(
name|EGLDisplay
name|display
parameter_list|,
name|EGLSurface
name|surface
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasLockSurface
condition|)
name|qFatal
argument_list|(
literal|"EGL_KHR_lock_surface2 not found but trying to use capability!"
argument_list|)
expr_stmt|;
return|return
name|_eglUnlockSurfaceKHR
argument_list|(
name|display
argument_list|,
name|surface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|eglCreateSyncKHR
name|EGLSyncKHR
name|QMeeGoExtensions
operator|::
name|eglCreateSyncKHR
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLenum
name|type
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasFenceSync
condition|)
name|qFatal
argument_list|(
literal|"EGL_KHR_fence_sync not found but trying to use capability!"
argument_list|)
expr_stmt|;
return|return
name|_eglCreateSyncKHR
argument_list|(
name|dpy
argument_list|,
name|type
argument_list|,
name|attrib_list
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|eglDestroySyncKHR
name|bool
name|QMeeGoExtensions
operator|::
name|eglDestroySyncKHR
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSyncKHR
name|sync
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasFenceSync
condition|)
name|qFatal
argument_list|(
literal|"EGL_KHR_fence_sync not found but trying to use capability!"
argument_list|)
expr_stmt|;
return|return
name|_eglDestroySyncKHR
argument_list|(
name|dpy
argument_list|,
name|sync
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|eglClientWaitSyncKHR
name|EGLint
name|QMeeGoExtensions
operator|::
name|eglClientWaitSyncKHR
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSyncKHR
name|sync
parameter_list|,
name|EGLint
name|flags
parameter_list|,
name|EGLTimeKHR
name|timeout
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasFenceSync
condition|)
name|qFatal
argument_list|(
literal|"EGL_KHR_fence_sync not found but trying to use capability!"
argument_list|)
expr_stmt|;
return|return
name|_eglClientWaitSyncKHR
argument_list|(
name|dpy
argument_list|,
name|sync
argument_list|,
name|flags
argument_list|,
name|timeout
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|eglGetSyncAttribKHR
name|EGLBoolean
name|QMeeGoExtensions
operator|::
name|eglGetSyncAttribKHR
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSyncKHR
name|sync
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasFenceSync
condition|)
name|qFatal
argument_list|(
literal|"EGL_KHR_fence_sync not found but trying to use capability!"
argument_list|)
expr_stmt|;
return|return
name|_eglGetSyncAttribKHR
argument_list|(
name|dpy
argument_list|,
name|sync
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/* Private */
end_comment
begin_function
DECL|function|initialize
name|void
name|QMeeGoExtensions
operator|::
name|initialize
parameter_list|()
block|{
name|QGLContext
modifier|*
name|ctx
init|=
operator|(
name|QGLContext
operator|*
operator|)
name|QGLContext
operator|::
name|currentContext
argument_list|()
decl_stmt|;
name|qt_resolve_eglimage_gl_extensions
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|QEgl
operator|::
name|hasExtension
argument_list|(
literal|"EGL_NOK_image_shared"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"MeegoGraphics: found EGL_NOK_image_shared"
argument_list|)
expr_stmt|;
name|_eglQueryImageNOK
operator|=
operator|(
name|eglQueryImageNOKFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglQueryImageNOK"
argument_list|)
expr_stmt|;
name|_eglCreateSharedImageNOK
operator|=
operator|(
name|eglCreateSharedImageNOKFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglCreateSharedImageNOK"
argument_list|)
expr_stmt|;
name|_eglDestroySharedImageNOK
operator|=
operator|(
name|eglDestroySharedImageNOKFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglDestroySharedImageNOK"
argument_list|)
expr_stmt|;
name|_eglLockSurfaceKHR
operator|=
operator|(
name|eglLockSurfaceKHRFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglLockSurfaceKHR"
argument_list|)
expr_stmt|;
name|_eglUnlockSurfaceKHR
operator|=
operator|(
name|eglUnlockSurfaceKHRFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglUnlockSurfaceKHR"
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|_eglQueryImageNOK
operator|&&
name|_eglCreateSharedImageNOK
operator|&&
name|_eglDestroySharedImageNOK
argument_list|)
expr_stmt|;
name|hasImageShared
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|QEgl
operator|::
name|hasExtension
argument_list|(
literal|"EGL_NOK_surface_scaling"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"MeegoGraphics: found EGL_NOK_surface_scaling"
argument_list|)
expr_stmt|;
name|_eglSetSurfaceScalingNOK
operator|=
operator|(
name|eglSetSurfaceScalingNOKFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglSetSurfaceScalingNOK"
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|_eglSetSurfaceScalingNOK
argument_list|)
expr_stmt|;
name|hasSurfaceScaling
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|QEgl
operator|::
name|hasExtension
argument_list|(
literal|"EGL_KHR_lock_surface2"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"MeegoGraphics: found EGL_KHR_lock_surface2"
argument_list|)
expr_stmt|;
name|_eglLockSurfaceKHR
operator|=
operator|(
name|eglLockSurfaceKHRFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglLockSurfaceKHR"
argument_list|)
expr_stmt|;
name|_eglUnlockSurfaceKHR
operator|=
operator|(
name|eglUnlockSurfaceKHRFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglUnlockSurfaceKHR"
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|_eglLockSurfaceKHR
operator|&&
name|_eglUnlockSurfaceKHR
argument_list|)
expr_stmt|;
name|hasLockSurface
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|QEgl
operator|::
name|hasExtension
argument_list|(
literal|"EGL_KHR_fence_sync"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"MeegoGraphics: found EGL_KHR_fence_sync"
argument_list|)
expr_stmt|;
name|_eglCreateSyncKHR
operator|=
operator|(
name|eglCreateSyncKHRFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglCreateSyncKHR"
argument_list|)
expr_stmt|;
name|_eglDestroySyncKHR
operator|=
operator|(
name|eglDestroySyncKHRFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglDestroySyncKHR"
argument_list|)
expr_stmt|;
name|_eglClientWaitSyncKHR
operator|=
operator|(
name|eglClientWaitSyncKHRFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglClientWaitSyncKHR"
argument_list|)
expr_stmt|;
name|_eglGetSyncAttribKHR
operator|=
operator|(
name|eglGetSyncAttribKHRFunc
operator|)
name|eglGetProcAddress
argument_list|(
literal|"eglGetSyncAttribKHR"
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|_eglCreateSyncKHR
operator|&&
name|_eglDestroySyncKHR
operator|&&
name|_eglClientWaitSyncKHR
operator|&&
name|_eglGetSyncAttribKHR
argument_list|)
expr_stmt|;
name|hasFenceSync
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
end_unit
