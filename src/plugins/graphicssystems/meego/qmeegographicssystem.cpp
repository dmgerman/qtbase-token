begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_gl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qegl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qglextensions_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qimagepixmapcleanuphooks_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgraphicssystem_runtime_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qimage_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qeglproperties_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qeglcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_x11_p.h>
end_include
begin_include
include|#
directive|include
file|"qmeegopixmapdata.h"
end_include
begin_include
include|#
directive|include
file|"qmeegolivepixmapdata.h"
end_include
begin_include
include|#
directive|include
file|"qmeegographicssystem.h"
end_include
begin_include
include|#
directive|include
file|"qmeegoextensions.h"
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_decl_stmt
DECL|member|surfaceWasCreated
name|bool
name|QMeeGoGraphicsSystem
operator|::
name|surfaceWasCreated
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|liveTexturePixmaps
name|QHash
argument_list|<
name|Qt
operator|::
name|HANDLE
argument_list|,
name|QPixmap
modifier|*
argument_list|>
name|QMeeGoGraphicsSystem
operator|::
name|liveTexturePixmaps
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|switchCallbacks
name|QList
argument_list|<
name|QMeeGoSwitchCallback
argument_list|>
name|QMeeGoGraphicsSystem
operator|::
name|switchCallbacks
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|switchPolicy
name|QMeeGoGraphicsSystem
operator|::
name|SwitchPolicy
name|QMeeGoGraphicsSystem
operator|::
name|switchPolicy
init|=
name|QMeeGoGraphicsSystem
operator|::
name|AutomaticSwitch
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QMeeGoGraphicsSystem
name|QMeeGoGraphicsSystem
operator|::
name|QMeeGoGraphicsSystem
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|"Using the meego graphics system"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QMeeGoGraphicsSystem
name|QMeeGoGraphicsSystem
operator|::
name|~
name|QMeeGoGraphicsSystem
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|"Meego graphics system destroyed"
argument_list|)
expr_stmt|;
name|qt_destroy_gl_share_widget
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_class
DECL|class|QMeeGoGraphicsSystemSwitchHandler
class|class
name|QMeeGoGraphicsSystemSwitchHandler
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|QMeeGoGraphicsSystemSwitchHandler
parameter_list|()
constructor_decl|;
name|void
name|addWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|handleMapNotify
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|removeWidget
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
function_decl|;
name|void
name|switchToRaster
parameter_list|()
function_decl|;
name|void
name|switchToMeeGo
parameter_list|()
function_decl|;
private|private:
name|int
name|visibleWidgets
parameter_list|()
specifier|const
function_decl|;
private|private:
DECL|member|m_widgets
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|m_widgets
decl_stmt|;
block|}
class|;
end_class
begin_typedef
DECL|typedef|QX11FilterFunction
typedef|typedef
name|bool
function_decl|(
modifier|*
name|QX11FilterFunction
function_decl|)
parameter_list|(
name|XEvent
modifier|*
name|event
parameter_list|)
function_decl|;
end_typedef
begin_function_decl
name|Q_GUI_EXPORT
name|void
name|qt_installX11EventFilter
parameter_list|(
name|QX11FilterFunction
name|func
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|x11EventFilter
parameter_list|(
name|XEvent
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl
begin_constructor
DECL|function|QMeeGoGraphicsSystemSwitchHandler
name|QMeeGoGraphicsSystemSwitchHandler
operator|::
name|QMeeGoGraphicsSystemSwitchHandler
parameter_list|()
block|{
name|qt_installX11EventFilter
argument_list|(
name|x11EventFilter
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|addWidget
name|void
name|QMeeGoGraphicsSystemSwitchHandler
operator|::
name|addWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|widget
operator|!=
name|qt_gl_share_widget
argument_list|()
operator|&&
operator|!
name|m_widgets
operator|.
name|contains
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|removeWidget
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m_widgets
operator|<<
name|widget
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleMapNotify
name|void
name|QMeeGoGraphicsSystemSwitchHandler
operator|::
name|handleMapNotify
parameter_list|()
block|{
if|if
condition|(
name|m_widgets
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QMeeGoGraphicsSystem
operator|::
name|switchPolicy
operator|==
name|QMeeGoGraphicsSystem
operator|::
name|AutomaticSwitch
condition|)
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|switchToMeeGo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeWidget
name|void
name|QMeeGoGraphicsSystemSwitchHandler
operator|::
name|removeWidget
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|m_widgets
operator|.
name|removeOne
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_widgets
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QMeeGoGraphicsSystem
operator|::
name|switchPolicy
operator|==
name|QMeeGoGraphicsSystem
operator|::
name|AutomaticSwitch
condition|)
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|switchToRaster
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|switchToRaster
name|void
name|QMeeGoGraphicsSystemSwitchHandler
operator|::
name|switchToRaster
parameter_list|()
block|{
name|QMeeGoGraphicsSystem
operator|::
name|switchToRaster
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|switchToMeeGo
name|void
name|QMeeGoGraphicsSystemSwitchHandler
operator|::
name|switchToMeeGo
parameter_list|()
block|{
name|QMeeGoGraphicsSystem
operator|::
name|switchToMeeGo
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visibleWidgets
name|int
name|QMeeGoGraphicsSystemSwitchHandler
operator|::
name|visibleWidgets
parameter_list|()
specifier|const
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_widgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|count
operator|+=
name|m_widgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
operator|(
name|m_widgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
expr_stmt|;
return|return
name|count
return|;
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|QMeeGoGraphicsSystemSwitchHandler
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowStateChange
operator|&&
name|QMeeGoGraphicsSystem
operator|::
name|switchPolicy
operator|==
name|QMeeGoGraphicsSystem
operator|::
name|AutomaticSwitch
condition|)
block|{
name|QWindowStateChangeEvent
modifier|*
name|change
init|=
cast|static_cast
argument_list|<
name|QWindowStateChangeEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|current
init|=
name|widget
operator|->
name|windowState
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|old
init|=
name|change
operator|->
name|oldState
argument_list|()
decl_stmt|;
comment|// did minimized flag change?
if|if
condition|(
operator|(
name|current
operator|^
name|old
operator|)
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
if|if
condition|(
name|current
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
if|if
condition|(
name|visibleWidgets
argument_list|()
operator|==
literal|0
condition|)
name|QMeeGoGraphicsSystem
operator|::
name|switchToRaster
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|visibleWidgets
argument_list|()
operator|>
literal|0
condition|)
name|QMeeGoGraphicsSystem
operator|::
name|switchToMeeGo
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// resume processing of event
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QMeeGoGraphicsSystemSwitchHandler
argument_list|,
argument|switch_handler
argument_list|)
end_macro
begin_function
DECL|function|x11EventFilter
name|bool
name|x11EventFilter
parameter_list|(
name|XEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|MapNotify
condition|)
name|switch_handler
argument_list|()
operator|->
name|handleMapNotify
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|createWindowSurface
name|QWindowSurface
modifier|*
name|QMeeGoGraphicsSystem
operator|::
name|createWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QGLWidget
modifier|*
name|shareWidget
init|=
name|qt_gl_share_widget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|shareWidget
condition|)
return|return
operator|new
name|QRasterWindowSurface
argument_list|(
name|widget
argument_list|)
return|;
name|QGLShareContextScope
name|ctx
argument_list|(
name|shareWidget
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|graphics_system_name
operator|==
name|QLatin1String
argument_list|(
literal|"runtime"
argument_list|)
condition|)
name|switch_handler
argument_list|()
operator|->
name|addWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QMeeGoGraphicsSystem
operator|::
name|surfaceWasCreated
operator|=
literal|true
expr_stmt|;
name|QWindowSurface
modifier|*
name|surface
init|=
operator|new
name|QGLWindowSurface
argument_list|(
name|widget
argument_list|)
decl_stmt|;
return|return
name|surface
return|;
block|}
end_function
begin_function
DECL|function|createPixmapData
name|QPixmapData
modifier|*
name|QMeeGoGraphicsSystem
operator|::
name|createPixmapData
parameter_list|(
name|QPixmapData
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QRasterPixmapData
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createPixmapData
name|QPixmapData
modifier|*
name|QMeeGoGraphicsSystem
operator|::
name|createPixmapData
parameter_list|(
name|QPixmapData
modifier|*
name|origin
parameter_list|)
block|{
comment|// If the pixmap is a raster type...
comment|// and if the pixmap pointer matches our mapping...
comment|// create a shared image instead with the given handle.
if|if
condition|(
operator|!
name|origin
operator|->
name|isNull
argument_list|()
operator|&&
name|origin
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|RasterClass
condition|)
block|{
name|QRasterPixmapData
modifier|*
name|rasterClass
init|=
cast|static_cast
argument_list|<
name|QRasterPixmapData
operator|*
argument_list|>
argument_list|(
name|origin
argument_list|)
decl_stmt|;
name|void
modifier|*
name|rawResource
init|=
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|rasterClass
operator|->
name|buffer
argument_list|()
operator|->
name|data_ptr
argument_list|()
operator|->
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|QMeeGoPixmapData
operator|::
name|sharedImagesMap
operator|.
name|contains
argument_list|(
name|rawResource
argument_list|)
condition|)
return|return
operator|new
name|QMeeGoPixmapData
argument_list|()
return|;
block|}
return|return
operator|new
name|QRasterPixmapData
argument_list|(
name|origin
operator|->
name|pixelType
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|wrapPixmapData
name|QPixmapData
modifier|*
name|QMeeGoGraphicsSystem
operator|::
name|wrapPixmapData
parameter_list|(
name|QPixmapData
modifier|*
name|pmd
parameter_list|)
block|{
name|QString
name|name
init|=
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|graphics_system_name
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|"runtime"
condition|)
block|{
name|QRuntimeGraphicsSystem
modifier|*
name|rsystem
init|=
operator|(
name|QRuntimeGraphicsSystem
operator|*
operator|)
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|graphics_system
decl_stmt|;
name|QRuntimePixmapData
modifier|*
name|rt
init|=
operator|new
name|QRuntimePixmapData
argument_list|(
name|rsystem
argument_list|,
name|pmd
operator|->
name|pixelType
argument_list|()
argument_list|)
decl_stmt|;
empty_stmt|;
name|rt
operator|->
name|m_data
operator|=
name|pmd
expr_stmt|;
name|rt
operator|->
name|readBackInfo
argument_list|()
expr_stmt|;
name|rsystem
operator|->
name|m_pixmapDatas
operator|<<
name|rt
expr_stmt|;
return|return
name|rt
return|;
block|}
else|else
return|return
name|pmd
return|;
block|}
end_function
begin_function
DECL|function|setSurfaceFixedSize
name|void
name|QMeeGoGraphicsSystem
operator|::
name|setSurfaceFixedSize
parameter_list|(
name|int
comment|/*width*/
parameter_list|,
name|int
comment|/*height*/
parameter_list|)
block|{
if|if
condition|(
name|QMeeGoGraphicsSystem
operator|::
name|surfaceWasCreated
condition|)
block|{
name|qWarning
argument_list|(
literal|"Trying to set surface fixed size but surface already created!"
argument_list|)
expr_stmt|;
return|return;
block|}
ifdef|#
directive|ifdef
name|QT_WAS_PATCHED
name|QEglProperties
modifier|*
name|properties
init|=
operator|new
name|QEglProperties
argument_list|()
decl_stmt|;
name|properties
operator|->
name|setValue
argument_list|(
name|EGL_FIXED_WIDTH_NOK
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|properties
operator|->
name|setValue
argument_list|(
name|EGL_FIXED_HEIGHT_NOK
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|QGLContextPrivate
operator|::
name|setExtraWindowSurfaceCreationProps
argument_list|(
name|properties
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setSurfaceScaling
name|void
name|QMeeGoGraphicsSystem
operator|::
name|setSurfaceScaling
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|QMeeGoExtensions
operator|::
name|ensureInitialized
argument_list|()
expr_stmt|;
name|QMeeGoExtensions
operator|::
name|eglSetSurfaceScalingNOK
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|QEglContext
operator|::
name|currentContext
argument_list|(
name|QEgl
operator|::
name|OpenGL
argument_list|)
operator|->
name|currentSurface
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTranslucent
name|void
name|QMeeGoGraphicsSystem
operator|::
name|setTranslucent
parameter_list|(
name|bool
name|translucent
parameter_list|)
block|{
if|if
condition|(
name|QMeeGoGraphicsSystem
operator|::
name|surfaceWasCreated
condition|)
block|{
name|qWarning
argument_list|(
literal|"Trying to set translucency but surface already created!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|QGLWindowSurface
operator|::
name|surfaceFormat
operator|.
name|setSampleBuffers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QGLWindowSurface
operator|::
name|surfaceFormat
operator|.
name|setSamples
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QGLWindowSurface
operator|::
name|surfaceFormat
operator|.
name|setAlpha
argument_list|(
name|translucent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixmapDataFromEGLSharedImage
name|QPixmapData
modifier|*
name|QMeeGoGraphicsSystem
operator|::
name|pixmapDataFromEGLSharedImage
parameter_list|(
name|Qt
operator|::
name|HANDLE
name|handle
parameter_list|,
specifier|const
name|QImage
modifier|&
name|softImage
parameter_list|)
block|{
if|if
condition|(
name|softImage
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|&&
name|softImage
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
name|qFatal
argument_list|(
literal|"For egl shared images, the soft image has to be ARGB32_Premultiplied or RGB32"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|QMeeGoGraphicsSystem
operator|::
name|meeGoRunning
argument_list|()
condition|)
block|{
name|QMeeGoPixmapData
modifier|*
name|pmd
init|=
operator|new
name|QMeeGoPixmapData
decl_stmt|;
name|pmd
operator|->
name|fromEGLSharedImage
argument_list|(
name|handle
argument_list|,
name|softImage
argument_list|)
expr_stmt|;
return|return
name|QMeeGoGraphicsSystem
operator|::
name|wrapPixmapData
argument_list|(
name|pmd
argument_list|)
return|;
block|}
else|else
block|{
name|QRasterPixmapData
modifier|*
name|pmd
init|=
operator|new
name|QRasterPixmapData
argument_list|(
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
decl_stmt|;
name|pmd
operator|->
name|fromImage
argument_list|(
name|softImage
argument_list|,
name|Qt
operator|::
name|NoFormatConversion
argument_list|)
expr_stmt|;
comment|// Make sure that the image was not converted in any way
if|if
condition|(
name|pmd
operator|->
name|buffer
argument_list|()
operator|->
name|data_ptr
argument_list|()
operator|->
name|data
operator|!=
cast|const_cast
argument_list|<
name|QImage
operator|&
argument_list|>
argument_list|(
name|softImage
argument_list|)
operator|.
name|data_ptr
argument_list|()
operator|->
name|data
condition|)
name|qFatal
argument_list|(
literal|"Iternal misalignment of raster data detected. Prolly a QImage copy fail."
argument_list|)
expr_stmt|;
name|QMeeGoPixmapData
operator|::
name|registerSharedImage
argument_list|(
name|handle
argument_list|,
name|softImage
argument_list|)
expr_stmt|;
return|return
name|QMeeGoGraphicsSystem
operator|::
name|wrapPixmapData
argument_list|(
name|pmd
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|updateEGLSharedImagePixmap
name|void
name|QMeeGoGraphicsSystem
operator|::
name|updateEGLSharedImagePixmap
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|)
block|{
name|QMeeGoPixmapData
modifier|*
name|pmd
init|=
operator|(
name|QMeeGoPixmapData
operator|*
operator|)
name|pixmap
operator|->
name|pixmapData
argument_list|()
decl_stmt|;
comment|// Basic sanity check to make sure this is really a QMeeGoPixmapData...
if|if
condition|(
name|pmd
operator|->
name|classId
argument_list|()
operator|!=
name|QPixmapData
operator|::
name|OpenGLClass
condition|)
name|qFatal
argument_list|(
literal|"Trying to updated EGLSharedImage pixmap but it's not really a shared image pixmap!"
argument_list|)
expr_stmt|;
name|pmd
operator|->
name|updateFromSoftImage
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixmapDataWithGLTexture
name|QPixmapData
modifier|*
name|QMeeGoGraphicsSystem
operator|::
name|pixmapDataWithGLTexture
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
name|QGLPixmapData
modifier|*
name|pmd
init|=
operator|new
name|QGLPixmapData
argument_list|(
name|QPixmapData
operator|::
name|PixmapType
argument_list|)
decl_stmt|;
name|pmd
operator|->
name|resize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
return|return
name|QMeeGoGraphicsSystem
operator|::
name|wrapPixmapData
argument_list|(
name|pmd
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|meeGoRunning
name|bool
name|QMeeGoGraphicsSystem
operator|::
name|meeGoRunning
parameter_list|()
block|{
return|return
name|runningGraphicsSystemName
argument_list|()
operator|==
literal|"meego"
return|;
block|}
end_function
begin_function
DECL|function|pixmapDataWithNewLiveTexture
name|QPixmapData
modifier|*
name|QMeeGoGraphicsSystem
operator|::
name|pixmapDataWithNewLiveTexture
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
return|return
operator|new
name|QMeeGoLivePixmapData
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|format
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|pixmapDataFromLiveTextureHandle
name|QPixmapData
modifier|*
name|QMeeGoGraphicsSystem
operator|::
name|pixmapDataFromLiveTextureHandle
parameter_list|(
name|Qt
operator|::
name|HANDLE
name|handle
parameter_list|)
block|{
return|return
operator|new
name|QMeeGoLivePixmapData
argument_list|(
name|handle
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|lockLiveTexture
name|QImage
modifier|*
name|QMeeGoGraphicsSystem
operator|::
name|lockLiveTexture
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|,
name|void
modifier|*
name|fenceSync
parameter_list|)
block|{
name|QMeeGoLivePixmapData
modifier|*
name|pixmapData
init|=
cast|static_cast
argument_list|<
name|QMeeGoLivePixmapData
operator|*
argument_list|>
argument_list|(
name|pixmap
operator|->
name|data_ptr
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|pixmapData
operator|->
name|lock
argument_list|(
name|fenceSync
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|releaseLiveTexture
name|bool
name|QMeeGoGraphicsSystem
operator|::
name|releaseLiveTexture
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|,
name|QImage
modifier|*
name|image
parameter_list|)
block|{
name|QMeeGoLivePixmapData
modifier|*
name|pixmapData
init|=
cast|static_cast
argument_list|<
name|QMeeGoLivePixmapData
operator|*
argument_list|>
argument_list|(
name|pixmap
operator|->
name|data_ptr
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|pixmapData
operator|->
name|release
argument_list|(
name|image
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getLiveTextureHandle
name|Qt
operator|::
name|HANDLE
name|QMeeGoGraphicsSystem
operator|::
name|getLiveTextureHandle
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|)
block|{
name|QMeeGoLivePixmapData
modifier|*
name|pixmapData
init|=
cast|static_cast
argument_list|<
name|QMeeGoLivePixmapData
operator|*
argument_list|>
argument_list|(
name|pixmap
operator|->
name|data_ptr
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|pixmapData
operator|->
name|handle
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|createFenceSync
name|void
modifier|*
name|QMeeGoGraphicsSystem
operator|::
name|createFenceSync
parameter_list|()
block|{
name|QGLShareContextScope
name|ctx
argument_list|(
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|QMeeGoExtensions
operator|::
name|ensureInitialized
argument_list|()
expr_stmt|;
return|return
name|QMeeGoExtensions
operator|::
name|eglCreateSyncKHR
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|EGL_SYNC_FENCE_KHR
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|destroyFenceSync
name|void
name|QMeeGoGraphicsSystem
operator|::
name|destroyFenceSync
parameter_list|(
name|void
modifier|*
name|fenceSync
parameter_list|)
block|{
name|QGLShareContextScope
name|ctx
argument_list|(
name|qt_gl_share_widget
argument_list|()
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|QMeeGoExtensions
operator|::
name|ensureInitialized
argument_list|()
expr_stmt|;
name|QMeeGoExtensions
operator|::
name|eglDestroySyncKHR
argument_list|(
name|QEgl
operator|::
name|display
argument_list|()
argument_list|,
name|fenceSync
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|runningGraphicsSystemName
name|QString
name|QMeeGoGraphicsSystem
operator|::
name|runningGraphicsSystemName
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Querying graphics system but application not running yet!"
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|QString
name|name
init|=
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|graphics_system_name
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"runtime"
argument_list|)
condition|)
block|{
name|QRuntimeGraphicsSystem
modifier|*
name|rsystem
init|=
operator|(
name|QRuntimeGraphicsSystem
operator|*
operator|)
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|graphics_system
decl_stmt|;
name|name
operator|=
name|rsystem
operator|->
name|graphicsSystemName
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
end_function
begin_function
DECL|function|switchToMeeGo
name|void
name|QMeeGoGraphicsSystem
operator|::
name|switchToMeeGo
parameter_list|()
block|{
if|if
condition|(
name|switchPolicy
operator|==
name|NoSwitch
operator|||
name|meeGoRunning
argument_list|()
condition|)
return|return;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|graphics_system_name
operator|!=
name|QLatin1String
argument_list|(
literal|"runtime"
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Can't switch to meego - switching only supported with 'runtime' graphics system."
argument_list|)
expr_stmt|;
else|else
block|{
name|triggerSwitchCallbacks
argument_list|(
literal|0
argument_list|,
literal|"meego"
argument_list|)
expr_stmt|;
name|QApplication
modifier|*
name|app
init|=
cast|static_cast
argument_list|<
name|QApplication
operator|*
argument_list|>
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|app
operator|->
name|setGraphicsSystem
argument_list|(
name|QLatin1String
argument_list|(
literal|"meego"
argument_list|)
argument_list|)
expr_stmt|;
name|triggerSwitchCallbacks
argument_list|(
literal|1
argument_list|,
literal|"meego"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|switchToRaster
name|void
name|QMeeGoGraphicsSystem
operator|::
name|switchToRaster
parameter_list|()
block|{
if|if
condition|(
name|switchPolicy
operator|==
name|NoSwitch
operator|||
name|runningGraphicsSystemName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"raster"
argument_list|)
condition|)
return|return;
if|if
condition|(
name|QApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|graphics_system_name
operator|!=
name|QLatin1String
argument_list|(
literal|"runtime"
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Can't switch to raster - switching only supported with 'runtime' graphics system."
argument_list|)
expr_stmt|;
else|else
block|{
name|triggerSwitchCallbacks
argument_list|(
literal|0
argument_list|,
literal|"raster"
argument_list|)
expr_stmt|;
name|QApplication
modifier|*
name|app
init|=
cast|static_cast
argument_list|<
name|QApplication
operator|*
argument_list|>
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|app
operator|->
name|setGraphicsSystem
argument_list|(
name|QLatin1String
argument_list|(
literal|"raster"
argument_list|)
argument_list|)
expr_stmt|;
name|QMeeGoLivePixmapData
operator|::
name|invalidateSurfaces
argument_list|()
expr_stmt|;
name|triggerSwitchCallbacks
argument_list|(
literal|1
argument_list|,
literal|"raster"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|registerSwitchCallback
name|void
name|QMeeGoGraphicsSystem
operator|::
name|registerSwitchCallback
parameter_list|(
name|QMeeGoSwitchCallback
name|callback
parameter_list|)
block|{
name|switchCallbacks
operator|<<
name|callback
expr_stmt|;
block|}
end_function
begin_function
DECL|function|triggerSwitchCallbacks
name|void
name|QMeeGoGraphicsSystem
operator|::
name|triggerSwitchCallbacks
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|switchCallbacks
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|switchCallbacks
operator|.
name|at
function_decl|(
name|i
function_decl|)
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
function_decl|;
block|}
end_function
begin_comment
comment|/* C API */
end_comment
begin_function
DECL|function|qt_meego_image_to_egl_shared_image
name|int
name|qt_meego_image_to_egl_shared_image
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
block|{
return|return
name|QMeeGoPixmapData
operator|::
name|imageToEGLSharedImage
argument_list|(
name|image
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_pixmapdata_from_egl_shared_image
name|QPixmapData
modifier|*
name|qt_meego_pixmapdata_from_egl_shared_image
parameter_list|(
name|Qt
operator|::
name|HANDLE
name|handle
parameter_list|,
specifier|const
name|QImage
modifier|&
name|softImage
parameter_list|)
block|{
return|return
name|QMeeGoGraphicsSystem
operator|::
name|pixmapDataFromEGLSharedImage
argument_list|(
name|handle
argument_list|,
name|softImage
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_pixmapdata_with_gl_texture
name|QPixmapData
modifier|*
name|qt_meego_pixmapdata_with_gl_texture
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
return|return
name|QMeeGoGraphicsSystem
operator|::
name|pixmapDataWithGLTexture
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_destroy_egl_shared_image
name|bool
name|qt_meego_destroy_egl_shared_image
parameter_list|(
name|Qt
operator|::
name|HANDLE
name|handle
parameter_list|)
block|{
return|return
name|QMeeGoPixmapData
operator|::
name|destroyEGLSharedImage
argument_list|(
name|handle
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_set_surface_fixed_size
name|void
name|qt_meego_set_surface_fixed_size
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|QMeeGoGraphicsSystem
operator|::
name|setSurfaceFixedSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_meego_set_surface_scaling
name|void
name|qt_meego_set_surface_scaling
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|QMeeGoGraphicsSystem
operator|::
name|setSurfaceScaling
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_meego_set_translucent
name|void
name|qt_meego_set_translucent
parameter_list|(
name|bool
name|translucent
parameter_list|)
block|{
name|QMeeGoGraphicsSystem
operator|::
name|setTranslucent
argument_list|(
name|translucent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_meego_update_egl_shared_image_pixmap
name|void
name|qt_meego_update_egl_shared_image_pixmap
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|)
block|{
name|QMeeGoGraphicsSystem
operator|::
name|updateEGLSharedImagePixmap
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_meego_pixmapdata_with_new_live_texture
name|QPixmapData
modifier|*
name|qt_meego_pixmapdata_with_new_live_texture
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
return|return
name|QMeeGoGraphicsSystem
operator|::
name|pixmapDataWithNewLiveTexture
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|format
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_pixmapdata_from_live_texture_handle
name|QPixmapData
modifier|*
name|qt_meego_pixmapdata_from_live_texture_handle
parameter_list|(
name|Qt
operator|::
name|HANDLE
name|handle
parameter_list|)
block|{
return|return
name|QMeeGoGraphicsSystem
operator|::
name|pixmapDataFromLiveTextureHandle
argument_list|(
name|handle
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_live_texture_lock
name|QImage
modifier|*
name|qt_meego_live_texture_lock
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|,
name|void
modifier|*
name|fenceSync
parameter_list|)
block|{
return|return
name|QMeeGoGraphicsSystem
operator|::
name|lockLiveTexture
argument_list|(
name|pixmap
argument_list|,
name|fenceSync
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_live_texture_release
name|bool
name|qt_meego_live_texture_release
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|,
name|QImage
modifier|*
name|image
parameter_list|)
block|{
return|return
name|QMeeGoGraphicsSystem
operator|::
name|releaseLiveTexture
argument_list|(
name|pixmap
argument_list|,
name|image
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_live_texture_get_handle
name|Qt
operator|::
name|HANDLE
name|qt_meego_live_texture_get_handle
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|)
block|{
return|return
name|QMeeGoGraphicsSystem
operator|::
name|getLiveTextureHandle
argument_list|(
name|pixmap
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_create_fence_sync
name|void
modifier|*
name|qt_meego_create_fence_sync
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|QMeeGoGraphicsSystem
operator|::
name|createFenceSync
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_destroy_fence_sync
name|void
name|qt_meego_destroy_fence_sync
parameter_list|(
name|void
modifier|*
name|fs
parameter_list|)
block|{
return|return
name|QMeeGoGraphicsSystem
operator|::
name|destroyFenceSync
argument_list|(
name|fs
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_invalidate_live_surfaces
name|void
name|qt_meego_invalidate_live_surfaces
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|QMeeGoLivePixmapData
operator|::
name|invalidateSurfaces
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qt_meego_switch_to_raster
name|void
name|qt_meego_switch_to_raster
parameter_list|(
name|void
parameter_list|)
block|{
name|QMeeGoGraphicsSystem
operator|::
name|switchToRaster
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_meego_switch_to_meego
name|void
name|qt_meego_switch_to_meego
parameter_list|(
name|void
parameter_list|)
block|{
name|QMeeGoGraphicsSystem
operator|::
name|switchToMeeGo
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_meego_register_switch_callback
name|void
name|qt_meego_register_switch_callback
parameter_list|(
name|QMeeGoSwitchCallback
name|callback
parameter_list|)
block|{
name|QMeeGoGraphicsSystem
operator|::
name|registerSwitchCallback
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_meego_set_switch_policy
name|void
name|qt_meego_set_switch_policy
parameter_list|(
name|int
name|policy
parameter_list|)
block|{
name|QMeeGoGraphicsSystem
operator|::
name|switchPolicy
operator|=
name|QMeeGoGraphicsSystem
operator|::
name|SwitchPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|"qmeegographicssystem.moc"
end_include
end_unit
