begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// Implements two dithering methods:
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//  * convertRGBA32_to_RGB565
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This is implemented using Ordered Bayer Dithering. The code has been adapted
end_comment
begin_comment
comment|// from QX11PixmapData::fromImage. This method was originally implemented using
end_comment
begin_comment
comment|// Floyd-Steinberg dithering but was later changed to Ordered Dithering because
end_comment
begin_comment
comment|// of the better quality of the results.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//  * convertRGBA32_to_RGBA4444
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This is implemented using Floyd-Steinberg dithering.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// The alghorithm used here is not the fastest possible but it's prolly fast enough:
end_comment
begin_comment
comment|// uses look-up tables, integer-only arthmetics and works in one pass on two lines
end_comment
begin_comment
comment|// at a time. It's a high-quality dithering using 1/8 diffusion precission.
end_comment
begin_comment
comment|// Each channel (RGBA) is diffused independently and alpha is dithered too.
end_comment
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<QVarLengthArray>
end_include
begin_comment
comment|// Gets a component (red = 1, green = 2...) from a RGBA data structure.
end_comment
begin_comment
comment|// data is unsigned char. stride is the number of bytes per line.
end_comment
begin_define
DECL|macro|GET_RGBA_COMPONENT
define|#
directive|define
name|GET_RGBA_COMPONENT
parameter_list|(
name|data
parameter_list|,
name|x
parameter_list|,
name|y
parameter_list|,
name|stride
parameter_list|,
name|c
parameter_list|)
value|(data[(y * stride) + (x<< 2) + c])
end_define
begin_comment
comment|// Writes a new pixel with r, g, b to data in 565 16bit format. Data is a short.
end_comment
begin_define
DECL|macro|PUT_565
define|#
directive|define
name|PUT_565
parameter_list|(
name|data
parameter_list|,
name|x
parameter_list|,
name|y
parameter_list|,
name|width
parameter_list|,
name|r
parameter_list|,
name|g
parameter_list|,
name|b
parameter_list|)
value|(data[(y * width) + x] = (r<< 11) | (g<< 5) | b)
end_define
begin_comment
comment|// Writes a new pixel with r, g, b, a to data in 4444 RGBA 16bit format. Data is a short.
end_comment
begin_define
DECL|macro|PUT_4444
define|#
directive|define
name|PUT_4444
parameter_list|(
name|data
parameter_list|,
name|x
parameter_list|,
name|y
parameter_list|,
name|width
parameter_list|,
name|r
parameter_list|,
name|g
parameter_list|,
name|b
parameter_list|,
name|a
parameter_list|)
value|(data[(y * width) + x] = (r<< 12) | (g<< 8) | (b<< 4) | a)
end_define
begin_comment
comment|// Writes(ads) a new value to the diffusion accumulator. accumulator is a short.
end_comment
begin_comment
comment|// x, y is a position in the accumulation buffer. y can be 0 or 1 -- we operate on two lines at time.
end_comment
begin_define
DECL|macro|ACCUMULATE
define|#
directive|define
name|ACCUMULATE
parameter_list|(
name|accumulator
parameter_list|,
name|x
parameter_list|,
name|y
parameter_list|,
name|width
parameter_list|,
name|v
parameter_list|)
value|if (x< width&& x>= 0) accumulator[(y * width) + x] += v
end_define
begin_comment
comment|// Clamps a value to be in 0..255 range.
end_comment
begin_define
DECL|macro|CLAMP_256
define|#
directive|define
name|CLAMP_256
parameter_list|(
name|v
parameter_list|)
value|if (v> 255) v = 255; if (v< 0) v = 0;
end_define
begin_comment
comment|// Converts incoming RGB32 (QImage::Format_RGB32) to RGB565. Returns the newly allocated data.
end_comment
begin_function
DECL|function|convertRGB32_to_RGB565
name|unsigned
name|short
modifier|*
name|convertRGB32_to_RGB565
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
specifier|static
name|bool
name|thresholdMapInitialized
init|=
literal|false
decl_stmt|;
specifier|static
name|int
name|thresholdMap
index|[
literal|16
index|]
index|[
literal|16
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|thresholdMapInitialized
condition|)
block|{
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
name|int
name|n
decl_stmt|;
name|thresholdMap
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|thresholdMap
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
literal|2
expr_stmt|;
name|thresholdMap
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
literal|3
expr_stmt|;
name|thresholdMap
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|2
init|;
name|n
operator|<
literal|16
condition|;
name|n
operator|*=
literal|2
control|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
name|thresholdMap
index|[
name|i
index|]
index|[
name|j
index|]
operator|*=
literal|4
expr_stmt|;
name|thresholdMap
index|[
name|i
operator|+
name|n
index|]
index|[
name|j
index|]
operator|=
name|thresholdMap
index|[
name|i
index|]
index|[
name|j
index|]
operator|+
literal|2
expr_stmt|;
name|thresholdMap
index|[
name|i
index|]
index|[
name|j
operator|+
name|n
index|]
operator|=
name|thresholdMap
index|[
name|i
index|]
index|[
name|j
index|]
operator|+
literal|3
expr_stmt|;
name|thresholdMap
index|[
name|i
operator|+
name|n
index|]
index|[
name|j
operator|+
name|n
index|]
operator|=
name|thresholdMap
index|[
name|i
index|]
index|[
name|j
index|]
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
name|thresholdMapInitialized
operator|=
literal|true
expr_stmt|;
block|}
comment|// Output line stride. Aligned to 4 bytes.
name|int
name|alignedWidth
init|=
name|width
decl_stmt|;
if|if
condition|(
name|alignedWidth
operator|%
literal|2
operator|>
literal|0
condition|)
name|alignedWidth
operator|++
expr_stmt|;
comment|// Will store output
name|unsigned
name|short
modifier|*
name|out
init|=
operator|(
name|unsigned
name|short
operator|*
operator|)
name|malloc
argument_list|(
name|alignedWidth
operator|*
name|height
operator|*
literal|2
argument_list|)
decl_stmt|;
name|int
name|x
decl_stmt|;
name|int
name|y
decl_stmt|;
name|int
name|threshold
decl_stmt|;
comment|// For each line...
for|for
control|(
name|y
operator|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
comment|// For each column....
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|int
name|r
init|=
name|GET_RGBA_COMPONENT
argument_list|(
name|in
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|stride
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|g
init|=
name|GET_RGBA_COMPONENT
argument_list|(
name|in
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|stride
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|GET_RGBA_COMPONENT
argument_list|(
name|in
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|stride
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|threshold
operator|=
name|thresholdMap
index|[
name|x
operator|%
literal|16
index|]
index|[
name|y
operator|%
literal|16
index|]
expr_stmt|;
if|if
condition|(
name|r
operator|<=
operator|(
literal|255
operator|-
operator|(
literal|1
operator|<<
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|r
operator|<<
literal|5
operator|)
operator|&
literal|255
operator|)
operator|>
name|threshold
condition|)
name|r
operator|+=
operator|(
literal|1
operator|<<
literal|3
operator|)
expr_stmt|;
if|if
condition|(
name|g
operator|<=
operator|(
literal|255
operator|-
operator|(
literal|1
operator|<<
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|g
operator|<<
literal|6
operator|)
operator|&
literal|255
operator|)
operator|>
name|threshold
condition|)
name|g
operator|+=
operator|(
literal|1
operator|<<
literal|2
operator|)
expr_stmt|;
if|if
condition|(
name|b
operator|<=
operator|(
literal|255
operator|-
operator|(
literal|1
operator|<<
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|b
operator|<<
literal|5
operator|)
operator|&
literal|255
operator|)
operator|>
name|threshold
condition|)
name|b
operator|+=
operator|(
literal|1
operator|<<
literal|3
operator|)
expr_stmt|;
comment|// Write the newly produced pixel
name|PUT_565
argument_list|(
name|out
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|alignedWidth
argument_list|,
operator|(
operator|(
name|b
operator|>>
literal|3
operator|)
operator|&
literal|0x1f
operator|)
argument_list|,
operator|(
operator|(
name|g
operator|>>
literal|2
operator|)
operator|&
literal|0x3f
operator|)
argument_list|,
operator|(
operator|(
name|r
operator|>>
literal|3
operator|)
operator|&
literal|0x1f
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|out
return|;
block|}
end_function
begin_comment
comment|// Converts incoming RGBA32 (QImage::Format_ARGB32_Premultiplied) to RGB565. Returns the newly allocated data.
end_comment
begin_comment
comment|// This function is similar (yet different) to the _565 variant but it makes sense to duplicate it here for simplicity.
end_comment
begin_comment
comment|// The output has each scan line aligned to 4 bytes (as expected by GL by default).
end_comment
begin_function
DECL|function|convertARGB32_to_RGBA4444
name|unsigned
name|short
modifier|*
name|convertARGB32_to_RGBA4444
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
comment|// Output line stride. Aligned to 4 bytes.
name|int
name|alignedWidth
init|=
name|width
decl_stmt|;
if|if
condition|(
name|alignedWidth
operator|%
literal|2
operator|>
literal|0
condition|)
name|alignedWidth
operator|++
expr_stmt|;
comment|// Will store output
name|unsigned
name|short
modifier|*
name|out
init|=
operator|(
name|unsigned
name|short
operator|*
operator|)
name|malloc
argument_list|(
name|alignedWidth
operator|*
literal|2
operator|*
name|height
argument_list|)
decl_stmt|;
comment|// Lookup tables for the 8bit => 4bit conversion
name|unsigned
name|char
name|lookup_8bit_to_4bit
index|[
literal|256
index|]
decl_stmt|;
name|short
name|lookup_8bit_to_4bit_diff
index|[
literal|256
index|]
decl_stmt|;
comment|// Macros for the conversion using the lookup table.
DECL|macro|CONVERT_8BIT_TO_4BIT
define|#
directive|define
name|CONVERT_8BIT_TO_4BIT
parameter_list|(
name|v
parameter_list|)
value|(lookup_8bit_to_4bit[v])
DECL|macro|DIFF_8BIT_TO_4BIT
define|#
directive|define
name|DIFF_8BIT_TO_4BIT
parameter_list|(
name|v
parameter_list|)
value|(lookup_8bit_to_4bit_diff[v])
name|int
name|i
decl_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|c
decl_stmt|;
comment|// Pixel we're processing. c is component number (0, 1, 2, 3 for r, b, b, a)
name|short
name|component
index|[
literal|4
index|]
decl_stmt|;
comment|// Stores the new components (r, g, b, a) for pixel produced during conversion
name|short
name|diff
decl_stmt|;
comment|// The difference between the converted value and the original one. To be accumulated.
name|QVarLengthArray
argument_list|<
name|short
argument_list|>
name|accumulatorData
argument_list|(
literal|4
operator|*
name|width
operator|*
literal|2
argument_list|)
decl_stmt|;
comment|// Data for three acumulators for r, g, b. Each accumulator is two lines.
name|short
modifier|*
name|accumulator
index|[
literal|4
index|]
decl_stmt|;
comment|// Helper for accessing the accumulator on a per-channel basis more easily.
name|accumulator
index|[
literal|0
index|]
operator|=
name|accumulatorData
operator|.
name|data
argument_list|()
expr_stmt|;
name|accumulator
index|[
literal|1
index|]
operator|=
name|accumulatorData
operator|.
name|data
argument_list|()
operator|+
name|width
expr_stmt|;
name|accumulator
index|[
literal|2
index|]
operator|=
name|accumulatorData
operator|.
name|data
argument_list|()
operator|+
operator|(
name|width
operator|*
literal|2
operator|)
expr_stmt|;
name|accumulator
index|[
literal|3
index|]
operator|=
name|accumulatorData
operator|.
name|data
argument_list|()
operator|+
operator|(
name|width
operator|*
literal|3
operator|)
expr_stmt|;
comment|// Produce the conversion lookup tables.
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|lookup_8bit_to_4bit
index|[
name|i
index|]
operator|=
name|round
argument_list|(
name|i
operator|/
literal|16.0
argument_list|)
expr_stmt|;
comment|// Before bitshifts: (i * 8) - (... * 16 * 8)
name|lookup_8bit_to_4bit_diff
index|[
name|i
index|]
operator|=
operator|(
name|i
operator|<<
literal|3
operator|)
operator|-
operator|(
name|lookup_8bit_to_4bit
index|[
name|i
index|]
operator|<<
literal|7
operator|)
expr_stmt|;
if|if
condition|(
name|lookup_8bit_to_4bit
index|[
name|i
index|]
operator|>
literal|15
condition|)
name|lookup_8bit_to_4bit
index|[
name|i
index|]
operator|=
literal|15
expr_stmt|;
block|}
comment|// Clear the accumulators
name|memset
argument_list|(
name|accumulator
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
name|width
operator|*
literal|4
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|accumulator
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|,
name|width
operator|*
literal|4
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|accumulator
index|[
literal|2
index|]
argument_list|,
literal|0
argument_list|,
name|width
operator|*
literal|4
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|accumulator
index|[
literal|3
index|]
argument_list|,
literal|0
argument_list|,
name|width
operator|*
literal|4
argument_list|)
expr_stmt|;
comment|// For each line...
for|for
control|(
name|y
operator|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
comment|// For each component (r, g, b, a)...
name|memcpy
argument_list|(
name|accumulator
index|[
literal|0
index|]
argument_list|,
name|accumulator
index|[
literal|0
index|]
operator|+
name|width
argument_list|,
name|width
operator|*
literal|2
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|accumulator
index|[
literal|0
index|]
operator|+
name|width
argument_list|,
literal|0
argument_list|,
name|width
operator|*
literal|2
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|accumulator
index|[
literal|1
index|]
argument_list|,
name|accumulator
index|[
literal|1
index|]
operator|+
name|width
argument_list|,
name|width
operator|*
literal|2
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|accumulator
index|[
literal|1
index|]
operator|+
name|width
argument_list|,
literal|0
argument_list|,
name|width
operator|*
literal|2
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|accumulator
index|[
literal|2
index|]
argument_list|,
name|accumulator
index|[
literal|2
index|]
operator|+
name|width
argument_list|,
name|width
operator|*
literal|2
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|accumulator
index|[
literal|2
index|]
operator|+
name|width
argument_list|,
literal|0
argument_list|,
name|width
operator|*
literal|2
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|accumulator
index|[
literal|3
index|]
argument_list|,
name|accumulator
index|[
literal|3
index|]
operator|+
name|width
argument_list|,
name|width
operator|*
literal|2
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|accumulator
index|[
literal|3
index|]
operator|+
name|width
argument_list|,
literal|0
argument_list|,
name|width
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// For each column....
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
comment|// For each component (r, g, b, a)...
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
literal|4
condition|;
name|c
operator|++
control|)
block|{
comment|// Get the 8bit value from the original image
name|component
index|[
name|c
index|]
operator|=
name|GET_RGBA_COMPONENT
argument_list|(
name|in
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|stride
argument_list|,
name|c
argument_list|)
expr_stmt|;
comment|// Add the diffusion for this pixel we stored in the accumulator.
comment|//>> 7 because the values in accumulator are stored * 128
name|component
index|[
name|c
index|]
operator|+=
name|accumulator
index|[
name|c
index|]
index|[
name|x
index|]
operator|>>
literal|7
expr_stmt|;
comment|// Make sure we're not over the boundaries.
name|CLAMP_256
argument_list|(
name|component
index|[
name|c
index|]
argument_list|)
expr_stmt|;
comment|// Store the difference from converting 8bit => 4bit and the orig pixel.
comment|// Convert 8bit => 4bit.
name|diff
operator|=
name|DIFF_8BIT_TO_4BIT
argument_list|(
name|component
index|[
name|c
index|]
argument_list|)
expr_stmt|;
name|component
index|[
name|c
index|]
operator|=
name|CONVERT_8BIT_TO_4BIT
argument_list|(
name|component
index|[
name|c
index|]
argument_list|)
expr_stmt|;
comment|// Distribute the difference according to the matrix in the
comment|// accumulation bufffer.
name|ACCUMULATE
argument_list|(
name|accumulator
index|[
name|c
index|]
argument_list|,
name|x
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|diff
operator|*
literal|7
argument_list|)
expr_stmt|;
name|ACCUMULATE
argument_list|(
name|accumulator
index|[
name|c
index|]
argument_list|,
name|x
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|width
argument_list|,
name|diff
operator|*
literal|3
argument_list|)
expr_stmt|;
name|ACCUMULATE
argument_list|(
name|accumulator
index|[
name|c
index|]
argument_list|,
name|x
argument_list|,
literal|1
argument_list|,
name|width
argument_list|,
name|diff
operator|*
literal|5
argument_list|)
expr_stmt|;
name|ACCUMULATE
argument_list|(
name|accumulator
index|[
name|c
index|]
argument_list|,
name|x
operator|+
literal|1
argument_list|,
literal|1
argument_list|,
name|width
argument_list|,
name|diff
operator|*
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Write the newly produced pixel
name|PUT_4444
argument_list|(
name|out
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|alignedWidth
argument_list|,
name|component
index|[
literal|0
index|]
argument_list|,
name|component
index|[
literal|1
index|]
argument_list|,
name|component
index|[
literal|2
index|]
argument_list|,
name|component
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|out
return|;
block|}
end_function
begin_function
DECL|function|convertBGRA32_to_RGBA32
name|unsigned
name|char
modifier|*
name|convertBGRA32_to_RGBA32
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|stride
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|out
init|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|malloc
argument_list|(
name|stride
operator|*
name|height
argument_list|)
decl_stmt|;
comment|// For each line...
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
comment|// For each column
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|out
index|[
operator|(
name|stride
operator|*
name|y
operator|)
operator|+
operator|(
name|x
operator|*
literal|4
operator|)
operator|+
literal|0
index|]
operator|=
name|in
index|[
operator|(
name|stride
operator|*
name|y
operator|)
operator|+
operator|(
name|x
operator|*
literal|4
operator|)
operator|+
literal|2
index|]
expr_stmt|;
name|out
index|[
operator|(
name|stride
operator|*
name|y
operator|)
operator|+
operator|(
name|x
operator|*
literal|4
operator|)
operator|+
literal|1
index|]
operator|=
name|in
index|[
operator|(
name|stride
operator|*
name|y
operator|)
operator|+
operator|(
name|x
operator|*
literal|4
operator|)
operator|+
literal|1
index|]
expr_stmt|;
name|out
index|[
operator|(
name|stride
operator|*
name|y
operator|)
operator|+
operator|(
name|x
operator|*
literal|4
operator|)
operator|+
literal|2
index|]
operator|=
name|in
index|[
operator|(
name|stride
operator|*
name|y
operator|)
operator|+
operator|(
name|x
operator|*
literal|4
operator|)
operator|+
literal|0
index|]
expr_stmt|;
name|out
index|[
operator|(
name|stride
operator|*
name|y
operator|)
operator|+
operator|(
name|x
operator|*
literal|4
operator|)
operator|+
literal|3
index|]
operator|=
name|in
index|[
operator|(
name|stride
operator|*
name|y
operator|)
operator|+
operator|(
name|x
operator|*
literal|4
operator|)
operator|+
literal|3
index|]
expr_stmt|;
block|}
block|}
return|return
name|out
return|;
block|}
end_function
end_unit
