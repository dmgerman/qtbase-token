begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|MGRAPHICSSYSTEM_H
end_ifndef
begin_define
DECL|macro|MGRAPHICSSYSTEM_H
define|#
directive|define
name|MGRAPHICSSYSTEM_H
end_define
begin_include
include|#
directive|include
file|<private/qgraphicssystem_p.h>
end_include
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_include
include|#
directive|include
file|<GLES2/gl2ext.h>
end_include
begin_extern
DECL|typedef|QMeeGoSwitchCallback
extern|extern
literal|"C"
typedef|typedef
name|void
function_decl|(
modifier|*
name|QMeeGoSwitchCallback
function_decl|)
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_extern
begin_decl_stmt
name|class
name|QMeeGoGraphicsSystem
range|:
name|public
name|QGraphicsSystem
block|{
name|public
operator|:
expr|enum
name|SwitchPolicy
block|{
name|AutomaticSwitch
block|,
name|ManualSwitch
block|,
name|NoSwitch
block|}
block|;
name|QMeeGoGraphicsSystem
argument_list|()
block|;
operator|~
name|QMeeGoGraphicsSystem
argument_list|()
block|;
name|virtual
name|QWindowSurface
operator|*
name|createWindowSurface
argument_list|(
argument|QWidget *widget
argument_list|)
specifier|const
block|;
name|virtual
name|QPixmapData
operator|*
name|createPixmapData
argument_list|(
argument|QPixmapData::PixelType
argument_list|)
specifier|const
block|;
name|virtual
name|QPixmapData
operator|*
name|createPixmapData
argument_list|(
name|QPixmapData
operator|*
name|origin
argument_list|)
block|;
specifier|static
name|QPixmapData
operator|*
name|wrapPixmapData
argument_list|(
name|QPixmapData
operator|*
name|pmd
argument_list|)
block|;
specifier|static
name|void
name|setSurfaceFixedSize
argument_list|(
argument|int width
argument_list|,
argument|int height
argument_list|)
block|;
specifier|static
name|void
name|setSurfaceScaling
argument_list|(
argument|int x
argument_list|,
argument|int y
argument_list|,
argument|int width
argument_list|,
argument|int height
argument_list|)
block|;
specifier|static
name|void
name|setTranslucent
argument_list|(
argument|bool translucent
argument_list|)
block|;
specifier|static
name|QPixmapData
operator|*
name|pixmapDataFromEGLSharedImage
argument_list|(
argument|Qt::HANDLE handle
argument_list|,
argument|const QImage&softImage
argument_list|)
block|;
specifier|static
name|QPixmapData
operator|*
name|pixmapDataFromEGLImage
argument_list|(
argument|Qt::HANDLE handle
argument_list|)
block|;
specifier|static
name|QPixmapData
operator|*
name|pixmapDataWithGLTexture
argument_list|(
argument|int w
argument_list|,
argument|int h
argument_list|)
block|;
specifier|static
name|void
name|updateEGLSharedImagePixmap
argument_list|(
name|QPixmap
operator|*
name|pixmap
argument_list|)
block|;
specifier|static
name|QPixmapData
operator|*
name|pixmapDataWithNewLiveTexture
argument_list|(
argument|int w
argument_list|,
argument|int h
argument_list|,
argument|QImage::Format format
argument_list|)
block|;
specifier|static
name|QPixmapData
operator|*
name|pixmapDataFromLiveTextureHandle
argument_list|(
argument|Qt::HANDLE handle
argument_list|)
block|;
specifier|static
name|QImage
operator|*
name|lockLiveTexture
argument_list|(
name|QPixmap
operator|*
name|pixmap
argument_list|,
name|void
operator|*
name|fenceSync
argument_list|)
block|;
specifier|static
name|bool
name|releaseLiveTexture
argument_list|(
name|QPixmap
operator|*
name|pixmap
argument_list|,
name|QImage
operator|*
name|image
argument_list|)
block|;
specifier|static
name|Qt
operator|::
name|HANDLE
name|getLiveTextureHandle
argument_list|(
name|QPixmap
operator|*
name|pixmap
argument_list|)
block|;
specifier|static
name|void
operator|*
name|createFenceSync
argument_list|()
block|;
specifier|static
name|void
name|destroyFenceSync
argument_list|(
name|void
operator|*
name|fenceSync
argument_list|)
block|;
specifier|static
name|void
name|switchToRaster
argument_list|()
block|;
specifier|static
name|void
name|switchToMeeGo
argument_list|()
block|;
specifier|static
name|QString
name|runningGraphicsSystemName
argument_list|()
block|;
specifier|static
name|void
name|registerSwitchCallback
argument_list|(
argument|QMeeGoSwitchCallback callback
argument_list|)
block|;
specifier|static
name|SwitchPolicy
name|switchPolicy
block|;
name|private
operator|:
specifier|static
name|bool
name|meeGoRunning
argument_list|()
block|;
specifier|static
name|EGLSurface
name|getSurfaceForLiveTexturePixmap
argument_list|(
name|QPixmap
operator|*
name|pixmap
argument_list|)
block|;
specifier|static
name|void
name|destroySurfaceForLiveTexturePixmap
argument_list|(
name|QPixmapData
operator|*
name|pmd
argument_list|)
block|;
specifier|static
name|void
name|triggerSwitchCallbacks
argument_list|(
argument|int type
argument_list|,
argument|const char *name
argument_list|)
block|;
specifier|static
name|bool
name|surfaceWasCreated
block|;
specifier|static
name|QHash
operator|<
name|Qt
operator|::
name|HANDLE
block|,
name|QPixmap
operator|*
operator|>
name|liveTexturePixmaps
block|;
specifier|static
name|QList
operator|<
name|QMeeGoSwitchCallback
operator|>
name|switchCallbacks
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|/* C api */
end_comment
begin_extern
extern|extern
literal|"C"
block|{
name|Q_DECL_EXPORT
name|int
name|qt_meego_image_to_egl_shared_image
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|QPixmapData
modifier|*
name|qt_meego_pixmapdata_from_egl_shared_image
argument_list|(
name|Qt
operator|::
name|HANDLE
name|handle
argument_list|,
specifier|const
name|QImage
operator|&
name|softImage
argument_list|)
decl_stmt|;
name|Q_DECL_EXPORT
name|QPixmapData
modifier|*
name|qt_meego_pixmapdata_with_gl_texture
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|void
name|qt_meego_update_egl_shared_image_pixmap
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|bool
name|qt_meego_destroy_egl_shared_image
argument_list|(
name|Qt
operator|::
name|HANDLE
name|handle
argument_list|)
decl_stmt|;
name|Q_DECL_EXPORT
name|void
name|qt_meego_set_surface_fixed_size
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|void
name|qt_meego_set_surface_scaling
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|void
name|qt_meego_set_translucent
parameter_list|(
name|bool
name|translucent
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|QPixmapData
modifier|*
name|qt_meego_pixmapdata_with_new_live_texture
argument_list|(
name|int
name|w
argument_list|,
name|int
name|h
argument_list|,
name|QImage
operator|::
name|Format
name|format
argument_list|)
decl_stmt|;
name|Q_DECL_EXPORT
name|QPixmapData
modifier|*
name|qt_meego_pixmapdata_from_live_texture_handle
argument_list|(
name|Qt
operator|::
name|HANDLE
name|handle
argument_list|)
decl_stmt|;
name|Q_DECL_EXPORT
name|QImage
modifier|*
name|qt_meego_live_texture_lock
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|,
name|void
modifier|*
name|fenceSync
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|bool
name|qt_meego_live_texture_release
parameter_list|(
name|QPixmap
modifier|*
name|pixmap
parameter_list|,
name|QImage
modifier|*
name|image
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|Qt
operator|::
name|HANDLE
name|qt_meego_live_texture_get_handle
argument_list|(
name|QPixmap
operator|*
name|pixmap
argument_list|)
expr_stmt|;
name|Q_DECL_EXPORT
name|void
modifier|*
name|qt_meego_create_fence_sync
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|void
name|qt_meego_destroy_fence_sync
parameter_list|(
name|void
modifier|*
name|fs
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|void
name|qt_meego_invalidate_live_surfaces
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|void
name|qt_meego_switch_to_raster
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|void
name|qt_meego_switch_to_meego
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|void
name|qt_meego_register_switch_callback
parameter_list|(
name|QMeeGoSwitchCallback
name|callback
parameter_list|)
function_decl|;
name|Q_DECL_EXPORT
name|void
name|qt_meego_set_switch_policy
parameter_list|(
name|int
name|policy
parameter_list|)
function_decl|;
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
end_unit
