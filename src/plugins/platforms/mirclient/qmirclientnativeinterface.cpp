begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Canonical, Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL3$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPLv3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or later as published by the Free ** Software Foundation and appearing in the file LICENSE.GPL included in ** the packaging of this file. Please review the following information to ** ensure the GNU General Public License version 2.0 requirements will be ** met: http://www.gnu.org/licenses/gpl-2.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// Qt
end_comment
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qopenglcontext.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qscreen.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMap>
end_include
begin_comment
comment|// Local
end_comment
begin_include
include|#
directive|include
file|"qmirclientnativeinterface.h"
end_include
begin_include
include|#
directive|include
file|"qmirclientscreen.h"
end_include
begin_include
include|#
directive|include
file|"qmirclientglcontext.h"
end_include
begin_class
DECL|class|QMirClientResourceMap
class|class
name|QMirClientResourceMap
super|:
specifier|public
name|QMap
argument_list|<
name|QByteArray
argument_list|,
name|QMirClientNativeInterface
operator|::
name|ResourceType
argument_list|>
block|{
public|public:
DECL|function|QMirClientResourceMap
name|QMirClientResourceMap
parameter_list|()
member_init_list|:
name|QMap
argument_list|<
name|QByteArray
argument_list|,
name|QMirClientNativeInterface
operator|::
name|ResourceType
argument_list|>
argument_list|()
block|{
name|insert
argument_list|(
literal|"egldisplay"
argument_list|,
name|QMirClientNativeInterface
operator|::
name|EglDisplay
argument_list|)
expr_stmt|;
name|insert
argument_list|(
literal|"eglcontext"
argument_list|,
name|QMirClientNativeInterface
operator|::
name|EglContext
argument_list|)
expr_stmt|;
name|insert
argument_list|(
literal|"nativeorientation"
argument_list|,
name|QMirClientNativeInterface
operator|::
name|NativeOrientation
argument_list|)
expr_stmt|;
name|insert
argument_list|(
literal|"display"
argument_list|,
name|QMirClientNativeInterface
operator|::
name|Display
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QMirClientResourceMap
argument_list|,
argument|ubuntuResourceMap
argument_list|)
end_macro
begin_constructor
DECL|function|QMirClientNativeInterface
name|QMirClientNativeInterface
operator|::
name|QMirClientNativeInterface
parameter_list|()
member_init_list|:
name|mGenericEventFilterType
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"Event"
argument_list|)
argument_list|)
member_init_list|,
name|mNativeOrientation
argument_list|(
literal|nullptr
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QMirClientNativeInterface
name|QMirClientNativeInterface
operator|::
name|~
name|QMirClientNativeInterface
parameter_list|()
block|{
operator|delete
name|mNativeOrientation
expr_stmt|;
name|mNativeOrientation
operator|=
literal|nullptr
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|nativeResourceForContext
name|void
modifier|*
name|QMirClientNativeInterface
operator|::
name|nativeResourceForContext
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|,
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
condition|)
return|return
literal|nullptr
return|;
specifier|const
name|QByteArray
name|kLowerCaseResource
init|=
name|resourceString
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ubuntuResourceMap
argument_list|()
operator|->
name|contains
argument_list|(
name|kLowerCaseResource
argument_list|)
condition|)
return|return
literal|nullptr
return|;
specifier|const
name|ResourceType
name|kResourceType
init|=
name|ubuntuResourceMap
argument_list|()
operator|->
name|value
argument_list|(
name|kLowerCaseResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|kResourceType
operator|==
name|QMirClientNativeInterface
operator|::
name|EglContext
condition|)
return|return
cast|static_cast
argument_list|<
name|QMirClientOpenGLContext
operator|*
argument_list|>
argument_list|(
name|context
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|eglContext
argument_list|()
return|;
else|else
return|return
literal|nullptr
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceForWindow
name|void
modifier|*
name|QMirClientNativeInterface
operator|::
name|nativeResourceForWindow
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|,
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
specifier|const
name|QByteArray
name|kLowerCaseResource
init|=
name|resourceString
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ubuntuResourceMap
argument_list|()
operator|->
name|contains
argument_list|(
name|kLowerCaseResource
argument_list|)
condition|)
return|return
name|NULL
return|;
specifier|const
name|ResourceType
name|kResourceType
init|=
name|ubuntuResourceMap
argument_list|()
operator|->
name|value
argument_list|(
name|kLowerCaseResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|kResourceType
operator|==
name|QMirClientNativeInterface
operator|::
name|EglDisplay
condition|)
block|{
if|if
condition|(
name|window
condition|)
block|{
return|return
cast|static_cast
argument_list|<
name|QMirClientScreen
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|eglDisplay
argument_list|()
return|;
block|}
else|else
block|{
return|return
cast|static_cast
argument_list|<
name|QMirClientScreen
operator|*
argument_list|>
argument_list|(
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|eglDisplay
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|kResourceType
operator|==
name|QMirClientNativeInterface
operator|::
name|NativeOrientation
condition|)
block|{
comment|// Return the device's native screen orientation.
if|if
condition|(
name|window
condition|)
block|{
name|QMirClientScreen
modifier|*
name|ubuntuScreen
init|=
cast|static_cast
argument_list|<
name|QMirClientScreen
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|mNativeOrientation
operator|=
operator|new
name|Qt
operator|::
name|ScreenOrientation
argument_list|(
name|ubuntuScreen
operator|->
name|nativeOrientation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPlatformScreen
modifier|*
name|platformScreen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|handle
argument_list|()
decl_stmt|;
name|mNativeOrientation
operator|=
operator|new
name|Qt
operator|::
name|ScreenOrientation
argument_list|(
name|platformScreen
operator|->
name|nativeOrientation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mNativeOrientation
return|;
block|}
else|else
block|{
return|return
name|NULL
return|;
block|}
block|}
end_function
begin_function
DECL|function|nativeResourceForScreen
name|void
modifier|*
name|QMirClientNativeInterface
operator|::
name|nativeResourceForScreen
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|,
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
specifier|const
name|QByteArray
name|kLowerCaseResource
init|=
name|resourceString
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ubuntuResourceMap
argument_list|()
operator|->
name|contains
argument_list|(
name|kLowerCaseResource
argument_list|)
condition|)
return|return
name|NULL
return|;
specifier|const
name|ResourceType
name|kResourceType
init|=
name|ubuntuResourceMap
argument_list|()
operator|->
name|value
argument_list|(
name|kLowerCaseResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|kResourceType
operator|==
name|QMirClientNativeInterface
operator|::
name|Display
condition|)
block|{
if|if
condition|(
operator|!
name|screen
condition|)
name|screen
operator|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|QMirClientScreen
operator|*
argument_list|>
argument_list|(
name|screen
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|eglNativeDisplay
argument_list|()
return|;
block|}
else|else
return|return
name|NULL
return|;
block|}
end_function
end_unit
