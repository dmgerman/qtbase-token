begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Canonical, Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL3$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPLv3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or later as published by the Free ** Software Foundation and appearing in the file LICENSE.GPL included in ** the packaging of this file. Please review the following information to ** ensure the GNU General Public License version 2.0 requirements will be ** met: http://www.gnu.org/licenses/gpl-2.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmirclientbackingstore.h"
end_include
begin_include
include|#
directive|include
file|"qmirclientlogging.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLContext>
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLTexture>
end_include
begin_include
include|#
directive|include
file|<QtGui/QMatrix4x4>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qopengltextureblitter_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qopenglfunctions.h>
end_include
begin_constructor
DECL|function|QMirClientBackingStore
name|QMirClientBackingStore
operator|::
name|QMirClientBackingStore
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QPlatformBackingStore
argument_list|(
name|window
argument_list|)
member_init_list|,
name|mContext
argument_list|(
operator|new
name|QOpenGLContext
argument_list|)
member_init_list|,
name|mTexture
argument_list|(
operator|new
name|QOpenGLTexture
argument_list|(
name|QOpenGLTexture
operator|::
name|Target2D
argument_list|)
argument_list|)
member_init_list|,
name|mBlitter
argument_list|(
operator|new
name|QOpenGLTextureBlitter
argument_list|)
block|{
name|mContext
operator|->
name|setFormat
argument_list|(
name|window
operator|->
name|requestedFormat
argument_list|()
argument_list|)
expr_stmt|;
name|mContext
operator|->
name|setScreen
argument_list|(
name|window
operator|->
name|screen
argument_list|()
argument_list|)
expr_stmt|;
name|mContext
operator|->
name|create
argument_list|()
expr_stmt|;
name|window
operator|->
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QMirClientBackingStore
name|QMirClientBackingStore
operator|::
name|~
name|QMirClientBackingStore
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|flush
name|void
name|QMirClientBackingStore
operator|::
name|flush
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|mContext
operator|->
name|makeCurrent
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|window
operator|->
name|width
argument_list|()
argument_list|,
name|window
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|updateTexture
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|mBlitter
operator|->
name|isCreated
argument_list|()
condition|)
name|mBlitter
operator|->
name|create
argument_list|()
expr_stmt|;
name|mBlitter
operator|->
name|bind
argument_list|()
expr_stmt|;
name|mBlitter
operator|->
name|setSwizzleRB
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mBlitter
operator|->
name|blit
argument_list|(
name|mTexture
operator|->
name|textureId
argument_list|()
argument_list|,
name|QMatrix4x4
argument_list|()
argument_list|,
name|QOpenGLTextureBlitter
operator|::
name|OriginTopLeft
argument_list|)
expr_stmt|;
name|mBlitter
operator|->
name|release
argument_list|()
expr_stmt|;
name|mContext
operator|->
name|swapBuffers
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateTexture
name|void
name|QMirClientBackingStore
operator|::
name|updateTexture
parameter_list|()
block|{
if|if
condition|(
name|mDirty
operator|.
name|isNull
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|mTexture
operator|->
name|isCreated
argument_list|()
condition|)
block|{
name|mTexture
operator|->
name|setMinificationFilter
argument_list|(
name|QOpenGLTexture
operator|::
name|Nearest
argument_list|)
expr_stmt|;
name|mTexture
operator|->
name|setMagnificationFilter
argument_list|(
name|QOpenGLTexture
operator|::
name|Nearest
argument_list|)
expr_stmt|;
name|mTexture
operator|->
name|setWrapMode
argument_list|(
name|QOpenGLTexture
operator|::
name|ClampToEdge
argument_list|)
expr_stmt|;
name|mTexture
operator|->
name|setData
argument_list|(
name|mImage
argument_list|,
name|QOpenGLTexture
operator|::
name|DontGenerateMipMaps
argument_list|)
expr_stmt|;
name|mTexture
operator|->
name|create
argument_list|()
expr_stmt|;
block|}
name|mTexture
operator|->
name|bind
argument_list|()
expr_stmt|;
name|QRegion
name|fixed
decl_stmt|;
name|QRect
name|imageRect
init|=
name|mImage
operator|.
name|rect
argument_list|()
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QRect&rect
argument_list|,
argument|mDirty.rects()
argument_list|)
block|{
comment|// intersect with image rect to be sure
name|QRect
name|r
init|=
name|imageRect
operator|&
name|rect
decl_stmt|;
comment|// if the rect is wide enough it is cheaper to just extend it instead of doing an image copy
if|if
condition|(
name|r
operator|.
name|width
argument_list|()
operator|>=
name|imageRect
operator|.
name|width
argument_list|()
operator|/
literal|2
condition|)
block|{
name|r
operator|.
name|setX
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|r
operator|.
name|setWidth
argument_list|(
name|imageRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fixed
operator||=
name|r
expr_stmt|;
block|}
name|Q_FOREACH
argument_list|(
argument|const QRect&rect
argument_list|,
argument|fixed.rects()
argument_list|)
block|{
comment|// if the sub-rect is full-width we can pass the image data directly to
comment|// OpenGL instead of copying, since there is no gap between scanlines
if|if
condition|(
name|rect
operator|.
name|width
argument_list|()
operator|==
name|imageRect
operator|.
name|width
argument_list|()
condition|)
block|{
name|glTexSubImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|mImage
operator|.
name|constScanLine
argument_list|(
name|rect
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|glTexSubImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|mImage
operator|.
name|copy
argument_list|(
name|rect
argument_list|)
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* End of code taken from QEGLPlatformBackingStore */
name|mDirty
operator|=
name|QRegion
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QMirClientBackingStore
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|mDirty
operator||=
name|region
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resize
name|void
name|QMirClientBackingStore
operator|::
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QRegion
modifier|&
comment|/*staticContents*/
parameter_list|)
block|{
name|mImage
operator|=
name|QImage
argument_list|(
name|size
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
if|if
condition|(
name|mTexture
operator|->
name|isCreated
argument_list|()
condition|)
name|mTexture
operator|->
name|destroy
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QMirClientBackingStore
operator|::
name|paintDevice
parameter_list|()
block|{
return|return
operator|&
name|mImage
return|;
block|}
end_function
end_unit
