begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsdrag.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsscreen.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_include
include|#
directive|include
file|"qwindowsclipboard.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qwindowsintegration.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsole.h"
end_include
begin_include
include|#
directive|include
file|"qtwindows_additional.h"
end_include
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsmousehandler.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscursor.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPixmap>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtGui/QRasterWindow>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qhighdpiscaling_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QBuffer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QPoint>
end_include
begin_include
include|#
directive|include
file|<shlobj.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QWindowsDragCursorWindow     \brief A toplevel window showing the drag icon in case of touch drag.      \sa QWindowsOleDropSource     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_class
DECL|class|QWindowsDragCursorWindow
class|class
name|QWindowsDragCursorWindow
super|:
specifier|public
name|QRasterWindow
block|{
public|public:
specifier|explicit
name|QWindowsDragCursorWindow
parameter_list|(
name|QWindow
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|void
name|setPixmap
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|p
parameter_list|)
function_decl|;
protected|protected:
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_pixmap
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|m_pixmap
name|QPixmap
name|m_pixmap
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWindowsDragCursorWindow
name|QWindowsDragCursorWindow
operator|::
name|QWindowsDragCursorWindow
parameter_list|(
name|QWindow
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QRasterWindow
argument_list|(
name|parent
argument_list|)
block|{
name|QSurfaceFormat
name|windowFormat
init|=
name|format
argument_list|()
decl_stmt|;
name|windowFormat
operator|.
name|setAlphaBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|setFormat
argument_list|(
name|windowFormat
argument_list|)
expr_stmt|;
name|setObjectName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QWindowsDragCursorWindow"
argument_list|)
argument_list|)
expr_stmt|;
name|setFlags
argument_list|(
name|Qt
operator|::
name|Popup
operator||
name|Qt
operator|::
name|NoDropShadowWindowHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
operator||
name|Qt
operator|::
name|WindowDoesNotAcceptFocus
operator||
name|Qt
operator|::
name|WindowTransparentForInput
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|setPixmap
name|void
name|QWindowsDragCursorWindow
operator|::
name|setPixmap
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|.
name|cacheKey
argument_list|()
operator|==
name|m_pixmap
operator|.
name|cacheKey
argument_list|()
condition|)
return|return;
specifier|const
name|QSize
name|oldSize
init|=
name|m_pixmap
operator|.
name|size
argument_list|()
decl_stmt|;
name|QSize
name|newSize
init|=
name|p
operator|.
name|size
argument_list|()
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|p
operator|.
name|cacheKey
argument_list|()
operator|<<
name|newSize
expr_stmt|;
name|m_pixmap
operator|=
name|p
expr_stmt|;
if|if
condition|(
name|oldSize
operator|!=
name|newSize
condition|)
block|{
specifier|const
name|qreal
name|pixDevicePixelRatio
init|=
name|p
operator|.
name|devicePixelRatio
argument_list|()
decl_stmt|;
if|if
condition|(
name|pixDevicePixelRatio
operator|>
literal|1.0
operator|&&
name|qFuzzyCompare
argument_list|(
name|pixDevicePixelRatio
argument_list|,
name|devicePixelRatio
argument_list|()
argument_list|)
condition|)
name|newSize
operator|/=
name|qRound
argument_list|(
name|pixDevicePixelRatio
argument_list|)
expr_stmt|;
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsDropMimeData     \brief Special mime data class for data retrieval from Drag operations.      Implementation of QWindowsInternalMimeDataBase which retrieves the     current drop data object from QWindowsDrag.      \sa QWindowsDrag     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_function
DECL|function|retrieveDataObject
name|IDataObject
modifier|*
name|QWindowsDropMimeData
operator|::
name|retrieveDataObject
parameter_list|()
specifier|const
block|{
return|return
name|QWindowsDrag
operator|::
name|instance
argument_list|()
operator|->
name|dropDataObject
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|translateToQDragDropActions
specifier|static
specifier|inline
name|Qt
operator|::
name|DropActions
name|translateToQDragDropActions
parameter_list|(
name|DWORD
name|pdwEffects
parameter_list|)
block|{
name|Qt
operator|::
name|DropActions
name|actions
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
if|if
condition|(
name|pdwEffects
operator|&
name|DROPEFFECT_LINK
condition|)
name|actions
operator||=
name|Qt
operator|::
name|LinkAction
expr_stmt|;
if|if
condition|(
name|pdwEffects
operator|&
name|DROPEFFECT_COPY
condition|)
name|actions
operator||=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
if|if
condition|(
name|pdwEffects
operator|&
name|DROPEFFECT_MOVE
condition|)
name|actions
operator||=
name|Qt
operator|::
name|MoveAction
expr_stmt|;
return|return
name|actions
return|;
block|}
end_function
begin_function
DECL|function|translateToQDragDropAction
specifier|static
specifier|inline
name|Qt
operator|::
name|DropAction
name|translateToQDragDropAction
parameter_list|(
name|DWORD
name|pdwEffect
parameter_list|)
block|{
if|if
condition|(
name|pdwEffect
operator|&
name|DROPEFFECT_LINK
condition|)
return|return
name|Qt
operator|::
name|LinkAction
return|;
if|if
condition|(
name|pdwEffect
operator|&
name|DROPEFFECT_COPY
condition|)
return|return
name|Qt
operator|::
name|CopyAction
return|;
if|if
condition|(
name|pdwEffect
operator|&
name|DROPEFFECT_MOVE
condition|)
return|return
name|Qt
operator|::
name|MoveAction
return|;
return|return
name|Qt
operator|::
name|IgnoreAction
return|;
block|}
end_function
begin_function
DECL|function|translateToWinDragEffects
specifier|static
specifier|inline
name|DWORD
name|translateToWinDragEffects
parameter_list|(
name|Qt
operator|::
name|DropActions
name|action
parameter_list|)
block|{
name|DWORD
name|effect
init|=
name|DROPEFFECT_NONE
decl_stmt|;
if|if
condition|(
name|action
operator|&
name|Qt
operator|::
name|LinkAction
condition|)
name|effect
operator||=
name|DROPEFFECT_LINK
expr_stmt|;
if|if
condition|(
name|action
operator|&
name|Qt
operator|::
name|CopyAction
condition|)
name|effect
operator||=
name|DROPEFFECT_COPY
expr_stmt|;
if|if
condition|(
name|action
operator|&
name|Qt
operator|::
name|MoveAction
condition|)
name|effect
operator||=
name|DROPEFFECT_MOVE
expr_stmt|;
return|return
name|effect
return|;
block|}
end_function
begin_function
DECL|function|toQtKeyboardModifiers
specifier|static
specifier|inline
name|Qt
operator|::
name|KeyboardModifiers
name|toQtKeyboardModifiers
parameter_list|(
name|DWORD
name|keyState
parameter_list|)
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_SHIFT
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_CONTROL
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_ALT
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
return|return
name|modifiers
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsOleDropSource     \brief Implementation of IDropSource      Used for drag operations.      \sa QWindowsDrag     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_class
DECL|class|QWindowsOleDropSource
class|class
name|QWindowsOleDropSource
super|:
specifier|public
name|IDropSource
block|{
public|public:
DECL|enum|Mode
enum|enum
name|Mode
block|{
DECL|enumerator|MouseDrag
name|MouseDrag
block|,
DECL|enumerator|TouchDrag
name|TouchDrag
comment|// Mouse cursor suppressed, use window as cursor.
block|}
enum|;
specifier|explicit
name|QWindowsOleDropSource
parameter_list|(
name|QWindowsDrag
modifier|*
name|drag
parameter_list|)
constructor_decl|;
specifier|virtual
name|~
name|QWindowsOleDropSource
parameter_list|()
destructor_decl|;
name|void
name|createCursors
parameter_list|()
function_decl|;
comment|// IUnknown methods
name|STDMETHOD
function_decl|(
name|QueryInterface
function_decl|)
parameter_list|(
name|REFIID
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|ppvObj
parameter_list|)
function_decl|;
name|STDMETHOD_
argument_list|(
argument|ULONG
argument_list|,
argument|AddRef
argument_list|)
operator|(
name|void
operator|)
expr_stmt|;
name|STDMETHOD_
argument_list|(
argument|ULONG
argument_list|,
argument|Release
argument_list|)
operator|(
name|void
operator|)
expr_stmt|;
comment|// IDropSource methods
name|STDMETHOD
function_decl|(
name|QueryContinueDrag
function_decl|)
parameter_list|(
name|BOOL
name|fEscapePressed
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|)
function_decl|;
name|STDMETHOD
function_decl|(
name|GiveFeedback
function_decl|)
parameter_list|(
name|DWORD
name|dwEffect
parameter_list|)
function_decl|;
private|private:
DECL|struct|CursorEntry
struct|struct
name|CursorEntry
block|{
DECL|function|CursorEntry
name|CursorEntry
parameter_list|()
member_init_list|:
name|cacheKey
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|CursorEntry
name|CursorEntry
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|p
parameter_list|,
name|qint64
name|cK
parameter_list|,
specifier|const
name|CursorHandlePtr
modifier|&
name|c
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|h
parameter_list|)
member_init_list|:
name|pixmap
argument_list|(
name|p
argument_list|)
member_init_list|,
name|cacheKey
argument_list|(
name|cK
argument_list|)
member_init_list|,
name|cursor
argument_list|(
name|c
argument_list|)
member_init_list|,
name|hotSpot
argument_list|(
name|h
argument_list|)
block|{}
DECL|member|pixmap
name|QPixmap
name|pixmap
decl_stmt|;
DECL|member|cacheKey
name|qint64
name|cacheKey
decl_stmt|;
comment|// Cache key of cursor
DECL|member|cursor
name|CursorHandlePtr
name|cursor
decl_stmt|;
DECL|member|hotSpot
name|QPoint
name|hotSpot
decl_stmt|;
block|}
struct|;
DECL|typedef|ActionCursorMap
typedef|typedef
name|QMap
argument_list|<
name|Qt
operator|::
name|DropAction
argument_list|,
name|CursorEntry
argument_list|>
name|ActionCursorMap
typedef|;
DECL|member|m_mode
specifier|const
name|Mode
name|m_mode
decl_stmt|;
DECL|member|m_drag
name|QWindowsDrag
modifier|*
name|m_drag
decl_stmt|;
DECL|member|m_currentButtons
name|Qt
operator|::
name|MouseButtons
name|m_currentButtons
decl_stmt|;
DECL|member|m_cursors
name|ActionCursorMap
name|m_cursors
decl_stmt|;
DECL|member|m_touchDragWindow
name|QWindowsDragCursorWindow
modifier|*
name|m_touchDragWindow
decl_stmt|;
DECL|member|m_refs
name|ULONG
name|m_refs
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
friend|friend
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
parameter_list|,
specifier|const
name|QWindowsOleDropSource
operator|::
name|CursorEntry
modifier|&
parameter_list|)
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|QWindowsOleDropSource
name|QWindowsOleDropSource
operator|::
name|QWindowsOleDropSource
parameter_list|(
name|QWindowsDrag
modifier|*
name|drag
parameter_list|)
member_init_list|:
name|m_mode
argument_list|(
name|QWindowsCursor
operator|::
name|cursorState
argument_list|()
operator|!=
name|QWindowsCursor
operator|::
name|CursorSuppressed
condition|?
name|MouseDrag
else|:
name|TouchDrag
argument_list|)
member_init_list|,
name|m_drag
argument_list|(
name|drag
argument_list|)
member_init_list|,
name|m_currentButtons
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
member_init_list|,
name|m_touchDragWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_refs
argument_list|(
literal|1
argument_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|m_mode
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsOleDropSource
name|QWindowsOleDropSource
operator|::
name|~
name|QWindowsOleDropSource
parameter_list|()
block|{
name|m_cursors
operator|.
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|m_touchDragWindow
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
expr_stmt|;
block|}
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|QWindowsOleDropSource
operator|::
name|CursorEntry
modifier|&
name|e
parameter_list|)
block|{
name|d
operator|<<
literal|"CursorEntry:"
operator|<<
name|e
operator|.
name|pixmap
operator|.
name|size
argument_list|()
operator|<<
literal|'#'
operator|<<
name|e
operator|.
name|cacheKey
operator|<<
literal|"HCURSOR"
operator|<<
name|e
operator|.
name|cursor
operator|->
name|handle
argument_list|()
operator|<<
literal|"hotspot:"
operator|<<
name|e
operator|.
name|hotSpot
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_DEBUG_STREAM
end_comment
begin_comment
comment|/*!     \brief Blend custom pixmap with cursors. */
end_comment
begin_function
DECL|function|createCursors
name|void
name|QWindowsOleDropSource
operator|::
name|createCursors
parameter_list|()
block|{
specifier|const
name|QDrag
modifier|*
name|drag
init|=
name|m_drag
operator|->
name|currentDrag
argument_list|()
decl_stmt|;
specifier|const
name|QPixmap
name|pixmap
init|=
name|drag
operator|->
name|pixmap
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|hasPixmap
init|=
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
decl_stmt|;
comment|// Find screen for drag. Could be obtained from QDrag::source(), but that might be a QWidget.
name|qreal
name|scaleFactor
init|=
literal|1
decl_stmt|;
name|QPlatformCursor
modifier|*
name|platformCursor
init|=
name|Q_NULLPTR
decl_stmt|;
if|if
condition|(
specifier|const
name|QPlatformScreen
modifier|*
name|platformScreen
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|screenManager
argument_list|()
operator|.
name|screenAtDp
argument_list|(
name|QWindowsCursor
operator|::
name|mousePosition
argument_list|()
argument_list|)
condition|)
block|{
name|scaleFactor
operator|=
name|QHighDpiScaling
operator|::
name|factor
argument_list|(
name|platformScreen
argument_list|)
expr_stmt|;
name|platformCursor
operator|=
name|platformScreen
operator|->
name|cursor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|platformCursor
operator|&&
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
condition|)
name|platformCursor
operator|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|handle
argument_list|()
operator|->
name|cursor
argument_list|()
expr_stmt|;
specifier|const
name|bool
name|scalePixmap
init|=
name|hasPixmap
operator|&&
name|m_mode
operator|!=
name|TouchDrag
comment|// Touch drag: pixmap is shown in a separate QWindow, which will be scaled.
operator|&&
operator|(
name|scaleFactor
operator|!=
literal|1
operator|&&
name|scaleFactor
operator|!=
name|qRound
argument_list|(
name|pixmap
operator|.
name|devicePixelRatio
argument_list|()
argument_list|)
operator|)
decl_stmt|;
specifier|const
name|QPixmap
name|scaledPixmap
init|=
name|scalePixmap
condition|?
name|pixmap
operator|.
name|scaled
argument_list|(
operator|(
name|QSizeF
argument_list|(
name|pixmap
operator|.
name|size
argument_list|()
argument_list|)
operator|*
name|scaleFactor
operator|)
operator|.
name|toSize
argument_list|()
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
else|:
name|pixmap
decl_stmt|;
name|Qt
operator|::
name|DropAction
name|actions
index|[]
init|=
block|{
name|Qt
operator|::
name|MoveAction
block|,
name|Qt
operator|::
name|CopyAction
block|,
name|Qt
operator|::
name|LinkAction
block|,
name|Qt
operator|::
name|IgnoreAction
block|}
decl_stmt|;
name|int
name|actionCount
init|=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|actions
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|actions
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasPixmap
condition|)
operator|--
name|actionCount
expr_stmt|;
comment|// No Qt::IgnoreAction unless pixmap
specifier|const
name|QPoint
name|hotSpot
init|=
name|scalePixmap
condition|?
operator|(
name|QPointF
argument_list|(
name|drag
operator|->
name|hotSpot
argument_list|()
argument_list|)
operator|*
name|scaleFactor
operator|)
operator|.
name|toPoint
argument_list|()
else|:
name|drag
operator|->
name|hotSpot
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cnum
init|=
literal|0
init|;
name|cnum
operator|<
name|actionCount
condition|;
operator|++
name|cnum
control|)
block|{
specifier|const
name|Qt
operator|::
name|DropAction
name|action
init|=
name|actions
index|[
name|cnum
index|]
decl_stmt|;
name|QPixmap
name|cursorPixmap
init|=
name|drag
operator|->
name|dragCursor
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursorPixmap
operator|.
name|isNull
argument_list|()
operator|&&
name|platformCursor
condition|)
name|cursorPixmap
operator|=
cast|static_cast
argument_list|<
name|QWindowsCursor
operator|*
argument_list|>
argument_list|(
name|platformCursor
argument_list|)
operator|->
name|dragDefaultCursor
argument_list|(
name|action
argument_list|)
expr_stmt|;
specifier|const
name|qint64
name|cacheKey
init|=
name|cursorPixmap
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
specifier|const
specifier|auto
name|it
init|=
name|m_cursors
operator|.
name|find
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_cursors
operator|.
name|end
argument_list|()
operator|&&
name|it
operator|.
name|value
argument_list|()
operator|.
name|cacheKey
operator|==
name|cacheKey
condition|)
continue|continue;
if|if
condition|(
name|cursorPixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Unable to obtain drag cursor for %d."
argument_list|,
name|__FUNCTION__
argument_list|,
name|action
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QPoint
name|newHotSpot
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPixmap
name|newPixmap
init|=
name|cursorPixmap
decl_stmt|;
if|if
condition|(
name|hasPixmap
condition|)
block|{
specifier|const
name|int
name|x1
init|=
name|qMin
argument_list|(
operator|-
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|int
name|x2
init|=
name|qMax
argument_list|(
name|scaledPixmap
operator|.
name|width
argument_list|()
operator|-
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|,
name|cursorPixmap
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|y1
init|=
name|qMin
argument_list|(
operator|-
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|int
name|y2
init|=
name|qMax
argument_list|(
name|scaledPixmap
operator|.
name|height
argument_list|()
operator|-
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|,
name|cursorPixmap
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QPixmap
name|newCursor
argument_list|(
name|x2
operator|-
name|x1
operator|+
literal|1
argument_list|,
name|y2
operator|-
name|y1
operator|+
literal|1
argument_list|)
decl_stmt|;
name|newCursor
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|newCursor
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|pmDest
init|=
name|QPoint
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
operator|-
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
operator|-
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|pmDest
argument_list|,
name|scaledPixmap
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|cursorPixmap
argument_list|)
expr_stmt|;
name|newPixmap
operator|=
name|newCursor
expr_stmt|;
name|newHotSpot
operator|=
name|QPoint
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
specifier|const
name|HCURSOR
name|sysCursor
init|=
name|QWindowsCursor
operator|::
name|createPixmapCursor
argument_list|(
name|newPixmap
argument_list|,
name|newHotSpot
argument_list|)
condition|)
block|{
specifier|const
name|CursorEntry
name|entry
argument_list|(
name|newPixmap
argument_list|,
name|cacheKey
argument_list|,
name|CursorHandlePtr
argument_list|(
operator|new
name|CursorHandle
argument_list|(
name|sysCursor
argument_list|)
argument_list|)
argument_list|,
name|newHotSpot
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|m_cursors
operator|.
name|end
argument_list|()
condition|)
name|m_cursors
operator|.
name|insert
argument_list|(
name|action
argument_list|,
name|entry
argument_list|)
expr_stmt|;
else|else
name|it
operator|.
name|value
argument_list|()
operator|=
name|entry
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_OUTPUT
if|if
condition|(
name|lcQpaMime
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"pixmap"
operator|<<
name|pixmap
operator|.
name|size
argument_list|()
operator|<<
name|m_cursors
operator|.
name|size
argument_list|()
operator|<<
literal|"cursors:\n"
operator|<<
name|m_cursors
expr_stmt|;
endif|#
directive|endif
comment|// !QT_NO_DEBUG_OUTPUT
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_comment
comment|//                    IUnknown Methods
end_comment
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_function
name|STDMETHODIMP
DECL|function|QueryInterface
name|QWindowsOleDropSource
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
name|FAR
modifier|*
name|FAR
modifier|*
name|ppv
parameter_list|)
block|{
if|if
condition|(
name|iid
operator|==
name|IID_IUnknown
operator|||
name|iid
operator|==
name|IID_IDropSource
condition|)
block|{
operator|*
name|ppv
operator|=
name|this
expr_stmt|;
operator|++
name|m_refs
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
operator|*
name|ppv
operator|=
name|NULL
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|E_NOINTERFACE
argument_list|)
return|;
block|}
end_function
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|AddRef
name|QWindowsOleDropSource
end_macro
begin_expr_stmt
DECL|function|AddRef
operator|::
name|AddRef
operator|(
name|void
operator|)
block|{
return|return
operator|++
name|m_refs
return|;
block|}
end_expr_stmt
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|Release
name|QWindowsOleDropSource
end_macro
begin_expr_stmt
DECL|function|Release
operator|::
name|Release
operator|(
name|void
operator|)
block|{
if|if
condition|(
operator|--
name|m_refs
operator|==
literal|0
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_return
return|return
name|m_refs
return|;
end_return
begin_comment
unit|}
comment|/*!     \brief Check for cancel. */
end_comment
begin_function
unit|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|QueryContinueDrag
name|QWindowsOleDropSource
operator|::
name|QueryContinueDrag
parameter_list|(
name|BOOL
name|fEscapePressed
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|)
block|{
name|HRESULT
name|hr
init|=
name|S_OK
decl_stmt|;
do|do
block|{
if|if
condition|(
name|fEscapePressed
operator|||
name|QWindowsDrag
operator|::
name|isCanceled
argument_list|()
condition|)
block|{
name|hr
operator|=
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_CANCEL
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// grfKeyState is broken on CE& some Windows XP versions,
comment|// therefore we need to check the state manually
if|if
condition|(
operator|(
name|GetAsyncKeyState
argument_list|(
name|VK_LBUTTON
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|GetAsyncKeyState
argument_list|(
name|VK_MBUTTON
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|GetAsyncKeyState
argument_list|(
name|VK_RBUTTON
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
name|hr
operator|=
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_DROP
argument_list|)
expr_stmt|;
break|break;
block|}
specifier|const
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|QWindowsMouseHandler
operator|::
name|keyStateToMouseButtons
argument_list|(
name|grfKeyState
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_currentButtons
operator|==
name|Qt
operator|::
name|NoButton
condition|)
block|{
name|m_currentButtons
operator|=
name|buttons
expr_stmt|;
block|}
else|else
block|{
comment|// Button changed: Complete Drop operation.
if|if
condition|(
operator|!
operator|(
name|m_currentButtons
operator|&
name|buttons
operator|)
condition|)
block|{
name|hr
operator|=
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_DROP
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|1
operator|||
name|hr
operator|!=
name|S_OK
condition|)
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"fEscapePressed="
operator|<<
name|fEscapePressed
operator|<<
literal|"grfKeyState="
operator|<<
name|grfKeyState
operator|<<
literal|"buttons"
operator|<<
name|m_currentButtons
operator|<<
literal|"returns 0x"
operator|<<
name|hex
operator|<<
name|int
argument_list|(
name|hr
argument_list|)
operator|<<
name|dec
expr_stmt|;
block|}
return|return
name|hr
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Give feedback: Change cursor accoding to action. */
end_comment
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|GiveFeedback
name|QWindowsOleDropSource
operator|::
name|GiveFeedback
parameter_list|(
name|DWORD
name|dwEffect
parameter_list|)
block|{
specifier|const
name|Qt
operator|::
name|DropAction
name|action
init|=
name|translateToQDragDropAction
argument_list|(
name|dwEffect
argument_list|)
decl_stmt|;
name|m_drag
operator|->
name|updateAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
specifier|const
name|qint64
name|currentCacheKey
init|=
name|m_drag
operator|->
name|currentDrag
argument_list|()
operator|->
name|dragCursor
argument_list|(
name|action
argument_list|)
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
name|auto
name|it
init|=
name|m_cursors
operator|.
name|constFind
argument_list|(
name|action
argument_list|)
decl_stmt|;
comment|// If a custom drag cursor is set, check its cache key to detect changes.
if|if
condition|(
name|it
operator|==
name|m_cursors
operator|.
name|constEnd
argument_list|()
operator|||
operator|(
name|currentCacheKey
operator|&&
name|currentCacheKey
operator|!=
name|it
operator|.
name|value
argument_list|()
operator|.
name|cacheKey
operator|)
condition|)
block|{
name|createCursors
argument_list|()
expr_stmt|;
name|it
operator|=
name|m_cursors
operator|.
name|constFind
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|it
operator|!=
name|m_cursors
operator|.
name|constEnd
argument_list|()
condition|)
block|{
specifier|const
name|CursorEntry
modifier|&
name|e
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|m_mode
condition|)
block|{
case|case
name|MouseDrag
case|:
name|SetCursor
argument_list|(
name|e
operator|.
name|cursor
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TouchDrag
case|:
if|if
condition|(
operator|!
name|m_touchDragWindow
condition|)
name|m_touchDragWindow
operator|=
operator|new
name|QWindowsDragCursorWindow
expr_stmt|;
name|m_touchDragWindow
operator|->
name|setPixmap
argument_list|(
name|e
operator|.
name|pixmap
argument_list|)
expr_stmt|;
name|m_touchDragWindow
operator|->
name|setFramePosition
argument_list|(
name|QWindowsCursor
operator|::
name|mousePosition
argument_list|()
operator|-
name|e
operator|.
name|hotSpot
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_touchDragWindow
operator|->
name|isVisible
argument_list|()
condition|)
name|m_touchDragWindow
operator|->
name|show
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
name|ResultFromScode
argument_list|(
name|S_OK
argument_list|)
return|;
block|}
return|return
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_USEDEFAULTCURSORS
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsOleDropTarget     \brief Implementation of IDropTarget      To be registered for each window. Currently, drop sites     are enabled for top levels. The child window handling     (sending DragEnter/Leave, etc) is handled in here.      \sa QWindowsDrag     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsOleDropTarget
name|QWindowsOleDropTarget
operator|::
name|QWindowsOleDropTarget
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|)
member_init_list|:
name|m_refs
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|m_window
argument_list|(
name|w
argument_list|)
member_init_list|,
name|m_chosenEffect
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_lastKeyState
argument_list|(
literal|0
argument_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|w
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsOleDropTarget
name|QWindowsOleDropTarget
operator|::
name|~
name|QWindowsOleDropTarget
parameter_list|()
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
expr_stmt|;
block|}
end_destructor
begin_function
name|STDMETHODIMP
DECL|function|QueryInterface
name|QWindowsOleDropTarget
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
name|FAR
modifier|*
name|FAR
modifier|*
name|ppv
parameter_list|)
block|{
if|if
condition|(
name|iid
operator|==
name|IID_IUnknown
operator|||
name|iid
operator|==
name|IID_IDropTarget
condition|)
block|{
operator|*
name|ppv
operator|=
name|this
expr_stmt|;
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
operator|*
name|ppv
operator|=
name|NULL
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|E_NOINTERFACE
argument_list|)
return|;
block|}
end_function
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|AddRef
name|QWindowsOleDropTarget
end_macro
begin_expr_stmt
DECL|function|AddRef
operator|::
name|AddRef
operator|(
name|void
operator|)
block|{
return|return
operator|++
name|m_refs
return|;
block|}
end_expr_stmt
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|Release
name|QWindowsOleDropTarget
end_macro
begin_expr_stmt
DECL|function|Release
operator|::
name|Release
operator|(
name|void
operator|)
block|{
if|if
condition|(
operator|--
name|m_refs
operator|==
literal|0
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_return
return|return
name|m_refs
return|;
end_return
begin_macro
unit|}  void
DECL|function|handleDrag
name|QWindowsOleDropTarget
end_macro
begin_expr_stmt
DECL|function|handleDrag
operator|::
name|handleDrag
operator|(
name|QWindow
operator|*
name|window
operator|,
name|DWORD
name|grfKeyState
operator|,
specifier|const
name|QPoint
operator|&
name|point
operator|,
name|LPDWORD
name|pdwEffect
operator|)
block|{
name|Q_ASSERT
argument_list|(
name|window
argument_list|)
block|;
name|m_lastPoint
operator|=
name|point
block|;
name|m_lastKeyState
operator|=
name|grfKeyState
block|;
name|QWindowsDrag
operator|*
name|windowsDrag
operator|=
name|QWindowsDrag
operator|::
name|instance
argument_list|()
block|;
specifier|const
name|Qt
operator|::
name|DropActions
name|actions
operator|=
name|translateToQDragDropActions
argument_list|(
operator|*
name|pdwEffect
argument_list|)
block|;
name|QGuiApplicationPrivate
operator|::
name|modifier_buttons
operator|=
name|toQtKeyboardModifiers
argument_list|(
name|grfKeyState
argument_list|)
block|;
name|QGuiApplicationPrivate
operator|::
name|mouse_buttons
operator|=
name|QWindowsMouseHandler
operator|::
name|keyStateToMouseButtons
argument_list|(
name|grfKeyState
argument_list|)
block|;
specifier|const
name|QPlatformDragQtResponse
name|response
operator|=
name|QWindowSystemInterface
operator|::
name|handleDrag
argument_list|(
name|window
argument_list|,
name|windowsDrag
operator|->
name|dropData
argument_list|()
argument_list|,
name|m_lastPoint
argument_list|,
name|actions
argument_list|)
block|;
name|m_answerRect
operator|=
name|response
operator|.
name|answerRect
argument_list|()
block|;
specifier|const
name|Qt
operator|::
name|DropAction
name|action
operator|=
name|response
operator|.
name|acceptedAction
argument_list|()
block|;
if|if
condition|(
name|response
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
name|m_chosenEffect
operator|=
name|translateToWinDragEffects
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|m_chosenEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
block|}
end_else
begin_expr_stmt
operator|*
name|pdwEffect
operator|=
name|m_chosenEffect
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|m_window
operator|<<
name|windowsDrag
operator|->
name|dropData
argument_list|()
operator|<<
literal|" supported actions="
operator|<<
name|actions
operator|<<
literal|" mods="
operator|<<
name|QGuiApplicationPrivate
operator|::
name|modifier_buttons
operator|<<
literal|" mouse="
operator|<<
name|QGuiApplicationPrivate
operator|::
name|mouse_buttons
operator|<<
literal|" accepted: "
operator|<<
name|response
operator|.
name|isAccepted
argument_list|()
operator|<<
name|action
operator|<<
name|m_answerRect
operator|<<
literal|" effect"
operator|<<
operator|*
name|pdwEffect
expr_stmt|;
end_expr_stmt
begin_function
unit|}  QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|DragEnter
name|QWindowsOleDropTarget
operator|::
name|DragEnter
parameter_list|(
name|LPDATAOBJECT
name|pDataObj
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|,
name|POINTL
name|pt
parameter_list|,
name|LPDWORD
name|pdwEffect
parameter_list|)
block|{
if|if
condition|(
name|IDropTargetHelper
modifier|*
name|dh
init|=
name|QWindowsDrag
operator|::
name|instance
argument_list|()
operator|->
name|dropHelper
argument_list|()
condition|)
name|dh
operator|->
name|DragEnter
argument_list|(
cast|reinterpret_cast
argument_list|<
name|HWND
argument_list|>
argument_list|(
name|m_window
operator|->
name|winId
argument_list|()
argument_list|)
argument_list|,
name|pDataObj
argument_list|,
cast|reinterpret_cast
argument_list|<
name|POINT
operator|*
argument_list|>
argument_list|(
operator|&
name|pt
argument_list|)
argument_list|,
operator|*
name|pdwEffect
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"widget="
operator|<<
name|m_window
operator|<<
literal|" key="
operator|<<
name|grfKeyState
operator|<<
literal|"pt="
operator|<<
name|pt
operator|.
name|x
operator|<<
name|pt
operator|.
name|y
expr_stmt|;
name|QWindowsDrag
operator|::
name|instance
argument_list|()
operator|->
name|setDropDataObject
argument_list|(
name|pDataObj
argument_list|)
expr_stmt|;
name|pDataObj
operator|->
name|AddRef
argument_list|()
expr_stmt|;
specifier|const
name|QPoint
name|point
init|=
name|QWindowsGeometryHint
operator|::
name|mapFromGlobal
argument_list|(
name|m_window
argument_list|,
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|handleDrag
argument_list|(
name|m_window
argument_list|,
name|grfKeyState
argument_list|,
name|point
argument_list|,
name|pdwEffect
argument_list|)
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|DragOver
name|QWindowsOleDropTarget
operator|::
name|DragOver
parameter_list|(
name|DWORD
name|grfKeyState
parameter_list|,
name|POINTL
name|pt
parameter_list|,
name|LPDWORD
name|pdwEffect
parameter_list|)
block|{
if|if
condition|(
name|IDropTargetHelper
modifier|*
name|dh
init|=
name|QWindowsDrag
operator|::
name|instance
argument_list|()
operator|->
name|dropHelper
argument_list|()
condition|)
name|dh
operator|->
name|DragOver
argument_list|(
cast|reinterpret_cast
argument_list|<
name|POINT
operator|*
argument_list|>
argument_list|(
operator|&
name|pt
argument_list|)
argument_list|,
operator|*
name|pdwEffect
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"m_window"
operator|<<
name|m_window
operator|<<
literal|"key="
operator|<<
name|grfKeyState
operator|<<
literal|"pt="
operator|<<
name|pt
operator|.
name|x
operator|<<
name|pt
operator|.
name|y
expr_stmt|;
specifier|const
name|QPoint
name|tmpPoint
init|=
name|QWindowsGeometryHint
operator|::
name|mapFromGlobal
argument_list|(
name|m_window
argument_list|,
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
decl_stmt|;
comment|// see if we should compress this event
if|if
condition|(
operator|(
name|tmpPoint
operator|==
name|m_lastPoint
operator|||
name|m_answerRect
operator|.
name|contains
argument_list|(
name|tmpPoint
argument_list|)
operator|)
operator|&&
name|m_lastKeyState
operator|==
name|grfKeyState
condition|)
block|{
operator|*
name|pdwEffect
operator|=
name|m_chosenEffect
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"compressed event"
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
name|handleDrag
argument_list|(
name|m_window
argument_list|,
name|grfKeyState
argument_list|,
name|tmpPoint
argument_list|,
name|pdwEffect
argument_list|)
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|DragLeave
name|QWindowsOleDropTarget
operator|::
name|DragLeave
parameter_list|()
block|{
if|if
condition|(
name|IDropTargetHelper
modifier|*
name|dh
init|=
name|QWindowsDrag
operator|::
name|instance
argument_list|()
operator|->
name|dropHelper
argument_list|()
condition|)
name|dh
operator|->
name|DragLeave
argument_list|()
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|m_window
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleDrag
argument_list|(
name|m_window
argument_list|,
literal|0
argument_list|,
name|QPoint
argument_list|()
argument_list|,
name|Qt
operator|::
name|IgnoreAction
argument_list|)
expr_stmt|;
name|QWindowsDrag
operator|::
name|instance
argument_list|()
operator|->
name|releaseDropDataObject
argument_list|()
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_define
DECL|macro|KEY_STATE_BUTTON_MASK
define|#
directive|define
name|KEY_STATE_BUTTON_MASK
value|(MK_LBUTTON | MK_MBUTTON | MK_RBUTTON)
end_define
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|Drop
name|QWindowsOleDropTarget
operator|::
name|Drop
parameter_list|(
name|LPDATAOBJECT
name|pDataObj
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|,
name|POINTL
name|pt
parameter_list|,
name|LPDWORD
name|pdwEffect
parameter_list|)
block|{
if|if
condition|(
name|IDropTargetHelper
modifier|*
name|dh
init|=
name|QWindowsDrag
operator|::
name|instance
argument_list|()
operator|->
name|dropHelper
argument_list|()
condition|)
name|dh
operator|->
name|Drop
argument_list|(
name|pDataObj
argument_list|,
cast|reinterpret_cast
argument_list|<
name|POINT
operator|*
argument_list|>
argument_list|(
operator|&
name|pt
argument_list|)
argument_list|,
operator|*
name|pdwEffect
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|m_window
operator|<<
literal|"keys="
operator|<<
name|grfKeyState
operator|<<
literal|"pt="
operator|<<
name|pt
operator|.
name|x
operator|<<
literal|','
operator|<<
name|pt
operator|.
name|y
expr_stmt|;
name|m_lastPoint
operator|=
name|QWindowsGeometryHint
operator|::
name|mapFromGlobal
argument_list|(
name|m_window
argument_list|,
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
comment|// grfKeyState does not all ways contain button state in the drop so if
comment|// it doesn't then use the last known button state;
if|if
condition|(
operator|(
name|grfKeyState
operator|&
name|KEY_STATE_BUTTON_MASK
operator|)
operator|==
literal|0
condition|)
name|grfKeyState
operator||=
name|m_lastKeyState
operator|&
name|KEY_STATE_BUTTON_MASK
expr_stmt|;
name|m_lastKeyState
operator|=
name|grfKeyState
expr_stmt|;
name|QWindowsDrag
modifier|*
name|windowsDrag
init|=
name|QWindowsDrag
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|QPlatformDropQtResponse
name|response
init|=
name|QWindowSystemInterface
operator|::
name|handleDrop
argument_list|(
name|m_window
argument_list|,
name|windowsDrag
operator|->
name|dropData
argument_list|()
argument_list|,
name|m_lastPoint
argument_list|,
name|translateToQDragDropActions
argument_list|(
operator|*
name|pdwEffect
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
specifier|const
name|Qt
operator|::
name|DropAction
name|action
init|=
name|response
operator|.
name|acceptedAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|Qt
operator|::
name|MoveAction
operator|||
name|action
operator|==
name|Qt
operator|::
name|TargetMoveAction
condition|)
block|{
if|if
condition|(
name|action
operator|==
name|Qt
operator|::
name|MoveAction
condition|)
name|m_chosenEffect
operator|=
name|DROPEFFECT_MOVE
expr_stmt|;
else|else
name|m_chosenEffect
operator|=
name|DROPEFFECT_COPY
expr_stmt|;
name|HGLOBAL
name|hData
init|=
name|GlobalAlloc
argument_list|(
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DWORD
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hData
condition|)
block|{
name|DWORD
modifier|*
name|moveEffect
init|=
operator|(
name|DWORD
operator|*
operator|)
name|GlobalLock
argument_list|(
name|hData
argument_list|)
decl_stmt|;
empty_stmt|;
operator|*
name|moveEffect
operator|=
name|DROPEFFECT_MOVE
expr_stmt|;
name|GlobalUnlock
argument_list|(
name|hData
argument_list|)
expr_stmt|;
name|STGMEDIUM
name|medium
decl_stmt|;
name|memset
argument_list|(
operator|&
name|medium
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|STGMEDIUM
argument_list|)
argument_list|)
expr_stmt|;
name|medium
operator|.
name|tymed
operator|=
name|TYMED_HGLOBAL
expr_stmt|;
name|medium
operator|.
name|hGlobal
operator|=
name|hData
expr_stmt|;
name|FORMATETC
name|format
decl_stmt|;
name|format
operator|.
name|cfFormat
operator|=
name|RegisterClipboardFormat
argument_list|(
name|CFSTR_PERFORMEDDROPEFFECT
argument_list|)
expr_stmt|;
name|format
operator|.
name|tymed
operator|=
name|TYMED_HGLOBAL
expr_stmt|;
name|format
operator|.
name|ptd
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|dwAspect
operator|=
literal|1
expr_stmt|;
name|format
operator|.
name|lindex
operator|=
operator|-
literal|1
expr_stmt|;
name|windowsDrag
operator|->
name|dropDataObject
argument_list|()
operator|->
name|SetData
argument_list|(
operator|&
name|format
argument_list|,
operator|&
name|medium
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|m_chosenEffect
operator|=
name|translateToWinDragEffects
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|m_chosenEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
block|}
operator|*
name|pdwEffect
operator|=
name|m_chosenEffect
expr_stmt|;
name|windowsDrag
operator|->
name|releaseDropDataObject
argument_list|()
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsDrag     \brief Windows drag implementation.     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_decl_stmt
DECL|member|m_canceled
name|bool
name|QWindowsDrag
operator|::
name|m_canceled
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QWindowsDrag
name|QWindowsDrag
operator|::
name|QWindowsDrag
parameter_list|()
member_init_list|:
name|m_dropDataObject
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_cachedDropTargetHelper
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWindowsDrag
name|QWindowsDrag
operator|::
name|~
name|QWindowsDrag
parameter_list|()
block|{
if|if
condition|(
name|m_cachedDropTargetHelper
condition|)
name|m_cachedDropTargetHelper
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \brief Return data for a drop in process. If it stems from a current drag, use a shortcut. */
end_comment
begin_function
DECL|function|dropData
name|QMimeData
modifier|*
name|QWindowsDrag
operator|::
name|dropData
parameter_list|()
block|{
if|if
condition|(
specifier|const
name|QDrag
modifier|*
name|drag
init|=
name|currentDrag
argument_list|()
condition|)
return|return
name|drag
operator|->
name|mimeData
argument_list|()
return|;
return|return
operator|&
name|m_dropData
return|;
block|}
end_function
begin_comment
comment|/*!     \brief May be used to handle extended cursors functionality for drags from outside the app. */
end_comment
begin_function
DECL|function|dropHelper
name|IDropTargetHelper
modifier|*
name|QWindowsDrag
operator|::
name|dropHelper
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_cachedDropTargetHelper
condition|)
block|{
name|CoCreateInstance
argument_list|(
name|CLSID_DragDropHelper
argument_list|,
literal|0
argument_list|,
name|CLSCTX_INPROC_SERVER
argument_list|,
name|IID_IDropTargetHelper
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|m_cachedDropTargetHelper
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|m_cachedDropTargetHelper
return|;
block|}
end_function
begin_function
DECL|function|drag
name|Qt
operator|::
name|DropAction
name|QWindowsDrag
operator|::
name|drag
parameter_list|(
name|QDrag
modifier|*
name|drag
parameter_list|)
block|{
comment|// TODO: Accessibility handling?
name|QMimeData
modifier|*
name|dropData
init|=
name|drag
operator|->
name|mimeData
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|DropAction
name|dragResult
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
name|DWORD
name|resultEffect
decl_stmt|;
name|QWindowsDrag
operator|::
name|m_canceled
operator|=
literal|false
expr_stmt|;
name|QWindowsOleDropSource
modifier|*
name|windowDropSource
init|=
operator|new
name|QWindowsOleDropSource
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|windowDropSource
operator|->
name|createCursors
argument_list|()
expr_stmt|;
name|QWindowsOleDataObject
modifier|*
name|dropDataObject
init|=
operator|new
name|QWindowsOleDataObject
argument_list|(
name|dropData
argument_list|)
decl_stmt|;
specifier|const
name|Qt
operator|::
name|DropActions
name|possibleActions
init|=
name|drag
operator|->
name|supportedActions
argument_list|()
decl_stmt|;
specifier|const
name|DWORD
name|allowedEffects
init|=
name|translateToWinDragEffects
argument_list|(
name|possibleActions
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
literal|"possible Actions=0x"
operator|<<
name|hex
operator|<<
name|int
argument_list|(
name|possibleActions
argument_list|)
operator|<<
literal|"effects=0x"
operator|<<
name|allowedEffects
operator|<<
name|dec
expr_stmt|;
specifier|const
name|HRESULT
name|r
init|=
name|DoDragDrop
argument_list|(
name|dropDataObject
argument_list|,
name|windowDropSource
argument_list|,
name|allowedEffects
argument_list|,
operator|&
name|resultEffect
argument_list|)
decl_stmt|;
specifier|const
name|DWORD
name|reportedPerformedEffect
init|=
name|dropDataObject
operator|->
name|reportedPerformedEffect
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|DRAGDROP_S_DROP
condition|)
block|{
if|if
condition|(
name|reportedPerformedEffect
operator|==
name|DROPEFFECT_MOVE
operator|&&
name|resultEffect
operator|!=
name|DROPEFFECT_MOVE
condition|)
block|{
name|dragResult
operator|=
name|Qt
operator|::
name|TargetMoveAction
expr_stmt|;
name|resultEffect
operator|=
name|DROPEFFECT_MOVE
expr_stmt|;
block|}
else|else
block|{
name|dragResult
operator|=
name|translateToQDragDropAction
argument_list|(
name|resultEffect
argument_list|)
expr_stmt|;
block|}
comment|// Force it to be a copy if an unsupported operation occurred.
comment|// This indicates a bug in the drop target.
if|if
condition|(
name|resultEffect
operator|!=
name|DROPEFFECT_NONE
operator|&&
operator|!
operator|(
name|resultEffect
operator|&
name|allowedEffects
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Forcing Qt::CopyAction"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|dragResult
operator|=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
block|}
block|}
comment|// clean up
name|dropDataObject
operator|->
name|releaseQt
argument_list|()
expr_stmt|;
name|dropDataObject
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Will delete obj if refcount becomes 0
name|windowDropSource
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Will delete src if refcount becomes 0
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
literal|'<'
operator|<<
name|__FUNCTION__
operator|<<
name|hex
operator|<<
literal|"allowedEffects=0x"
operator|<<
name|allowedEffects
operator|<<
literal|"reportedPerformedEffect=0x"
operator|<<
name|reportedPerformedEffect
operator|<<
literal|" resultEffect=0x"
operator|<<
name|resultEffect
operator|<<
literal|"hr=0x"
operator|<<
name|int
argument_list|(
name|r
argument_list|)
operator|<<
name|dec
operator|<<
literal|"dropAction="
operator|<<
name|dragResult
expr_stmt|;
return|return
name|dragResult
return|;
block|}
end_function
begin_function
DECL|function|instance
name|QWindowsDrag
modifier|*
name|QWindowsDrag
operator|::
name|instance
parameter_list|()
block|{
return|return
cast|static_cast
argument_list|<
name|QWindowsDrag
operator|*
argument_list|>
argument_list|(
name|QWindowsIntegration
operator|::
name|instance
argument_list|()
operator|->
name|drag
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|releaseDropDataObject
name|void
name|QWindowsDrag
operator|::
name|releaseDropDataObject
parameter_list|()
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|m_dropDataObject
expr_stmt|;
if|if
condition|(
name|m_dropDataObject
condition|)
block|{
name|m_dropDataObject
operator|->
name|Release
argument_list|()
expr_stmt|;
name|m_dropDataObject
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
