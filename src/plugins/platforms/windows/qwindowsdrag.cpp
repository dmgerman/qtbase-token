begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (info@qt.nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsdrag.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsintegration.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsole.h"
end_include
begin_include
include|#
directive|include
file|"qtwindows_additional.h"
end_include
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsmousehandler.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscursor.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPixmap>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QPoint>
end_include
begin_include
include|#
directive|include
file|<shlobj.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QWindowsDropMimeData     \brief Special mime data class for data retrieval from Drag operations.      Implementation of QWindowsInternalMimeDataBase which retrieves the     current drop data object from QWindowsDrag.      \sa QWindowsDrag     \ingroup qt-lighthouse-win */
DECL|function|retrieveDataObject
name|IDataObject
modifier|*
name|QWindowsDropMimeData
operator|::
name|retrieveDataObject
parameter_list|()
specifier|const
block|{
return|return
name|QWindowsDrag
operator|::
name|instance
argument_list|()
operator|->
name|dropDataObject
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|translateToQDragDropActions
specifier|static
specifier|inline
name|Qt
operator|::
name|DropActions
name|translateToQDragDropActions
parameter_list|(
name|DWORD
name|pdwEffects
parameter_list|)
block|{
name|Qt
operator|::
name|DropActions
name|actions
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
if|if
condition|(
name|pdwEffects
operator|&
name|DROPEFFECT_LINK
condition|)
name|actions
operator||=
name|Qt
operator|::
name|LinkAction
expr_stmt|;
if|if
condition|(
name|pdwEffects
operator|&
name|DROPEFFECT_COPY
condition|)
name|actions
operator||=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
if|if
condition|(
name|pdwEffects
operator|&
name|DROPEFFECT_MOVE
condition|)
name|actions
operator||=
name|Qt
operator|::
name|MoveAction
expr_stmt|;
return|return
name|actions
return|;
block|}
end_function
begin_function
DECL|function|translateToQDragDropAction
specifier|static
specifier|inline
name|Qt
operator|::
name|DropAction
name|translateToQDragDropAction
parameter_list|(
name|DWORD
name|pdwEffect
parameter_list|)
block|{
if|if
condition|(
name|pdwEffect
operator|&
name|DROPEFFECT_LINK
condition|)
return|return
name|Qt
operator|::
name|LinkAction
return|;
if|if
condition|(
name|pdwEffect
operator|&
name|DROPEFFECT_COPY
condition|)
return|return
name|Qt
operator|::
name|CopyAction
return|;
if|if
condition|(
name|pdwEffect
operator|&
name|DROPEFFECT_MOVE
condition|)
return|return
name|Qt
operator|::
name|MoveAction
return|;
return|return
name|Qt
operator|::
name|IgnoreAction
return|;
block|}
end_function
begin_function
DECL|function|translateToWinDragEffects
specifier|static
specifier|inline
name|DWORD
name|translateToWinDragEffects
parameter_list|(
name|Qt
operator|::
name|DropActions
name|action
parameter_list|)
block|{
name|DWORD
name|effect
init|=
name|DROPEFFECT_NONE
decl_stmt|;
if|if
condition|(
name|action
operator|&
name|Qt
operator|::
name|LinkAction
condition|)
name|effect
operator||=
name|DROPEFFECT_LINK
expr_stmt|;
if|if
condition|(
name|action
operator|&
name|Qt
operator|::
name|CopyAction
condition|)
name|effect
operator||=
name|DROPEFFECT_COPY
expr_stmt|;
if|if
condition|(
name|action
operator|&
name|Qt
operator|::
name|MoveAction
condition|)
name|effect
operator||=
name|DROPEFFECT_MOVE
expr_stmt|;
return|return
name|effect
return|;
block|}
end_function
begin_function
DECL|function|toQtKeyboardModifiers
specifier|static
specifier|inline
name|Qt
operator|::
name|KeyboardModifiers
name|toQtKeyboardModifiers
parameter_list|(
name|DWORD
name|keyState
parameter_list|)
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_SHIFT
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_CONTROL
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|keyState
operator|&
name|MK_ALT
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
return|return
name|modifiers
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsOleDropSource     \brief Implementation of IDropSource      Used for drag operations.      \sa QWindowsDrag     \ingroup qt-lighthouse-win */
end_comment
begin_class
DECL|class|QWindowsOleDropSource
class|class
name|QWindowsOleDropSource
super|:
specifier|public
name|IDropSource
block|{
public|public:
name|QWindowsOleDropSource
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|QWindowsOleDropSource
parameter_list|()
destructor_decl|;
name|void
name|createCursors
parameter_list|()
function_decl|;
comment|// IUnknown methods
name|STDMETHOD
function_decl|(
name|QueryInterface
function_decl|)
parameter_list|(
name|REFIID
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|ppvObj
parameter_list|)
function_decl|;
name|STDMETHOD_
argument_list|(
argument|ULONG
argument_list|,
argument|AddRef
argument_list|)
operator|(
name|void
operator|)
expr_stmt|;
name|STDMETHOD_
argument_list|(
argument|ULONG
argument_list|,
argument|Release
argument_list|)
operator|(
name|void
operator|)
expr_stmt|;
comment|// IDropSource methods
name|STDMETHOD
function_decl|(
name|QueryContinueDrag
function_decl|)
parameter_list|(
name|BOOL
name|fEscapePressed
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|)
function_decl|;
name|STDMETHOD
function_decl|(
name|GiveFeedback
function_decl|)
parameter_list|(
name|DWORD
name|dwEffect
parameter_list|)
function_decl|;
private|private:
DECL|typedef|ActionCursorMap
typedef|typedef
name|QMap
argument_list|<
name|Qt
operator|::
name|DropAction
argument_list|,
name|HCURSOR
argument_list|>
name|ActionCursorMap
typedef|;
specifier|inline
name|void
name|clearCursors
parameter_list|()
function_decl|;
DECL|member|m_currentButtons
name|Qt
operator|::
name|MouseButtons
name|m_currentButtons
decl_stmt|;
DECL|member|m_currentAction
name|Qt
operator|::
name|DropAction
name|m_currentAction
decl_stmt|;
DECL|member|m_cursors
name|ActionCursorMap
name|m_cursors
decl_stmt|;
DECL|member|m_refs
name|ULONG
name|m_refs
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWindowsOleDropSource
name|QWindowsOleDropSource
operator|::
name|QWindowsOleDropSource
parameter_list|()
member_init_list|:
name|m_currentButtons
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
member_init_list|,
name|m_currentAction
argument_list|(
name|Qt
operator|::
name|IgnoreAction
argument_list|)
member_init_list|,
name|m_refs
argument_list|(
literal|1
argument_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsOleDropSource
name|QWindowsOleDropSource
operator|::
name|~
name|QWindowsOleDropSource
parameter_list|()
block|{
name|clearCursors
argument_list|()
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|createCursors
name|void
name|QWindowsOleDropSource
operator|::
name|createCursors
parameter_list|()
block|{
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|||
operator|!
name|manager
operator|->
name|object
condition|)
return|return;
specifier|const
name|QPixmap
name|pixmap
init|=
name|manager
operator|->
name|object
operator|->
name|pixmap
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|hasPixmap
init|=
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasPixmap
operator|&&
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|customCursors
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QList
argument_list|<
name|Qt
operator|::
name|DropAction
argument_list|>
name|actions
decl_stmt|;
name|actions
operator|<<
name|Qt
operator|::
name|MoveAction
operator|<<
name|Qt
operator|::
name|CopyAction
operator|<<
name|Qt
operator|::
name|LinkAction
expr_stmt|;
if|if
condition|(
name|hasPixmap
condition|)
name|actions
operator|<<
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
specifier|const
name|QPoint
name|hotSpot
init|=
name|manager
operator|->
name|object
operator|->
name|hotSpot
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cnum
init|=
literal|0
init|;
name|cnum
operator|<
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|cnum
control|)
block|{
specifier|const
name|QPixmap
name|cpm
init|=
name|manager
operator|->
name|dragCursor
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|cnum
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|cpm
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|cpm
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasPixmap
condition|)
block|{
specifier|const
name|int
name|x1
init|=
name|qMin
argument_list|(
operator|-
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|int
name|x2
init|=
name|qMax
argument_list|(
name|pixmap
operator|.
name|width
argument_list|()
operator|-
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|,
name|cpm
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|y1
init|=
name|qMin
argument_list|(
operator|-
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|int
name|y2
init|=
name|qMax
argument_list|(
name|pixmap
operator|.
name|height
argument_list|()
operator|-
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|,
name|cpm
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|=
name|x2
operator|-
name|x1
operator|+
literal|1
expr_stmt|;
name|h
operator|=
name|y2
operator|-
name|y1
operator|+
literal|1
expr_stmt|;
block|}
specifier|const
name|QRect
name|srcRect
init|=
name|pixmap
operator|.
name|rect
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|pmDest
init|=
name|QPoint
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
operator|-
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
operator|-
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|newHotSpot
init|=
name|hotSpot
decl_stmt|;
name|QPixmap
name|newCursor
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasPixmap
condition|)
block|{
name|newCursor
operator|.
name|fill
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|newCursor
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|pmDest
argument_list|,
name|pixmap
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|newHotSpot
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
name|newHotSpot
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|cpm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newCursor
operator|=
name|cpm
expr_stmt|;
block|}
specifier|const
name|int
name|hotX
init|=
name|hasPixmap
condition|?
name|qMax
argument_list|(
literal|0
argument_list|,
name|newHotSpot
operator|.
name|x
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|hotY
init|=
name|hasPixmap
condition|?
name|qMax
argument_list|(
literal|0
argument_list|,
name|newHotSpot
operator|.
name|y
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
specifier|const
name|HCURSOR
name|sysCursor
init|=
name|QWindowsCursor
operator|::
name|createPixmapCursor
argument_list|(
name|newCursor
argument_list|,
name|hotX
argument_list|,
name|hotY
argument_list|)
condition|)
name|m_cursors
operator|.
name|insert
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|cnum
argument_list|)
argument_list|,
name|sysCursor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|(
literal|"%s %d cursors"
argument_list|,
name|__FUNCTION__
argument_list|,
name|m_cursors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearCursors
name|void
name|QWindowsOleDropSource
operator|::
name|clearCursors
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_cursors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|ActionCursorMap
operator|::
name|const_iterator
name|cend
init|=
name|m_cursors
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|ActionCursorMap
operator|::
name|const_iterator
name|it
init|=
name|m_cursors
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
name|DestroyCursor
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|m_cursors
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_comment
comment|//                    IUnknown Methods
end_comment
begin_comment
comment|//---------------------------------------------------------------------
end_comment
begin_function
name|STDMETHODIMP
DECL|function|QueryInterface
name|QWindowsOleDropSource
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
name|FAR
modifier|*
name|FAR
modifier|*
name|ppv
parameter_list|)
block|{
if|if
condition|(
name|iid
operator|==
name|IID_IUnknown
operator|||
name|iid
operator|==
name|IID_IDropSource
condition|)
block|{
operator|*
name|ppv
operator|=
name|this
expr_stmt|;
operator|++
name|m_refs
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
operator|*
name|ppv
operator|=
name|NULL
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|E_NOINTERFACE
argument_list|)
return|;
block|}
end_function
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|AddRef
name|QWindowsOleDropSource
end_macro
begin_expr_stmt
DECL|function|AddRef
operator|::
name|AddRef
operator|(
name|void
operator|)
block|{
return|return
operator|++
name|m_refs
return|;
block|}
end_expr_stmt
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|Release
name|QWindowsOleDropSource
end_macro
begin_expr_stmt
DECL|function|Release
operator|::
name|Release
operator|(
name|void
operator|)
block|{
if|if
condition|(
operator|--
name|m_refs
operator|==
literal|0
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_return
return|return
name|m_refs
return|;
end_return
begin_comment
unit|}
comment|/*!     \brief Check for cancel. */
end_comment
begin_function
unit|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|QueryContinueDrag
name|QWindowsOleDropSource
operator|::
name|QueryContinueDrag
parameter_list|(
name|BOOL
name|fEscapePressed
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|)
block|{
name|HRESULT
name|hr
init|=
name|S_OK
decl_stmt|;
do|do
block|{
if|if
condition|(
name|fEscapePressed
operator|||
name|QWindowsDrag
operator|::
name|instance
argument_list|()
operator|->
name|dragBeingCancelled
argument_list|()
condition|)
block|{
name|hr
operator|=
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_CANCEL
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// grfKeyState is broken on CE& some Windows XP versions,
comment|// therefore we need to check the state manually
if|if
condition|(
operator|(
name|GetAsyncKeyState
argument_list|(
name|VK_LBUTTON
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|GetAsyncKeyState
argument_list|(
name|VK_MBUTTON
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|GetAsyncKeyState
argument_list|(
name|VK_RBUTTON
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
name|hr
operator|=
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_DROP
argument_list|)
expr_stmt|;
break|break;
block|}
specifier|const
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|QWindowsMouseHandler
operator|::
name|keyStateToMouseButtons
argument_list|(
name|grfKeyState
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_currentButtons
operator|==
name|Qt
operator|::
name|NoButton
condition|)
block|{
name|m_currentButtons
operator|=
name|buttons
expr_stmt|;
block|}
else|else
block|{
comment|// Button changed: Complete Drop operation.
if|if
condition|(
operator|!
operator|(
name|m_currentButtons
operator|&
name|buttons
operator|)
condition|)
block|{
name|hr
operator|=
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_DROP
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|QGuiApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|QDragManager
operator|::
name|self
argument_list|()
operator|->
name|willDrop
operator|=
name|hr
operator|==
name|DRAGDROP_S_DROP
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
operator|&&
operator|(
name|QWindowsContext
operator|::
name|verboseOLE
operator|>
literal|1
operator|||
name|hr
operator|!=
name|S_OK
operator|)
condition|)
name|qDebug
argument_list|(
literal|"%s fEscapePressed=%d, grfKeyState=%lu buttons=%d willDrop = %d returns 0x%x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|fEscapePressed
argument_list|,
name|grfKeyState
argument_list|,
name|int
argument_list|(
name|m_currentButtons
argument_list|)
argument_list|,
name|QDragManager
operator|::
name|self
argument_list|()
operator|->
name|willDrop
argument_list|,
name|int
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|hr
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Give feedback: Change cursor accoding to action. */
end_comment
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|GiveFeedback
name|QWindowsOleDropSource
operator|::
name|GiveFeedback
parameter_list|(
name|DWORD
name|dwEffect
parameter_list|)
block|{
specifier|const
name|Qt
operator|::
name|DropAction
name|action
init|=
name|translateToQDragDropAction
argument_list|(
name|dwEffect
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
operator|>
literal|2
condition|)
name|qDebug
argument_list|(
literal|"%s dwEffect=%lu, action=%d"
argument_list|,
name|__FUNCTION__
argument_list|,
name|dwEffect
argument_list|,
name|action
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_currentAction
operator|!=
name|action
condition|)
block|{
name|m_currentAction
operator|=
name|action
expr_stmt|;
name|QDragManager
operator|::
name|self
argument_list|()
operator|->
name|emitActionChanged
argument_list|(
name|m_currentAction
argument_list|)
expr_stmt|;
block|}
specifier|const
name|ActionCursorMap
operator|::
name|const_iterator
name|it
init|=
name|m_cursors
operator|.
name|constFind
argument_list|(
name|m_currentAction
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_cursors
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|SetCursor
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|S_OK
argument_list|)
return|;
block|}
return|return
name|ResultFromScode
argument_list|(
name|DRAGDROP_S_USEDEFAULTCURSORS
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsOleDropTarget     \brief Implementation of IDropTarget      To be registered for each window. Currently, drop sites     are enabled for top levels. The child window handling     (sending DragEnter/Leave, etc) is handled in here.      \sa QWindowsDrag     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsOleDropTarget
name|QWindowsOleDropTarget
operator|::
name|QWindowsOleDropTarget
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|)
member_init_list|:
name|m_refs
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|m_window
argument_list|(
name|w
argument_list|)
member_init_list|,
name|m_currentWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_chosenEffect
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_lastKeyState
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|w
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsOleDropTarget
name|QWindowsOleDropTarget
operator|::
name|~
name|QWindowsOleDropTarget
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|(
literal|"%s %p"
argument_list|,
name|__FUNCTION__
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
name|STDMETHODIMP
DECL|function|QueryInterface
name|QWindowsOleDropTarget
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
name|FAR
modifier|*
name|FAR
modifier|*
name|ppv
parameter_list|)
block|{
if|if
condition|(
name|iid
operator|==
name|IID_IUnknown
operator|||
name|iid
operator|==
name|IID_IDropTarget
condition|)
block|{
operator|*
name|ppv
operator|=
name|this
expr_stmt|;
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
operator|*
name|ppv
operator|=
name|NULL
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|E_NOINTERFACE
argument_list|)
return|;
block|}
end_function
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|AddRef
name|QWindowsOleDropTarget
end_macro
begin_expr_stmt
DECL|function|AddRef
operator|::
name|AddRef
operator|(
name|void
operator|)
block|{
return|return
operator|++
name|m_refs
return|;
block|}
end_expr_stmt
begin_macro
name|STDMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
end_macro
begin_macro
DECL|function|Release
name|QWindowsOleDropTarget
end_macro
begin_expr_stmt
DECL|function|Release
operator|::
name|Release
operator|(
name|void
operator|)
block|{
if|if
condition|(
operator|--
name|m_refs
operator|==
literal|0
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_return
return|return
name|m_refs
return|;
end_return
begin_expr_stmt
unit|}  QWindow
DECL|function|findDragOverWindow
operator|*
name|QWindowsOleDropTarget
operator|::
name|findDragOverWindow
operator|(
specifier|const
name|POINTL
operator|&
name|pt
operator|)
specifier|const
block|{
if|if
condition|(
name|QWindowsWindow
modifier|*
name|child
init|=
name|QWindowsWindow
operator|::
name|baseWindowOf
argument_list|(
name|m_window
argument_list|)
operator|->
name|childAtScreenPoint
argument_list|(
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
condition|)
return|return
name|child
operator|->
name|window
argument_list|()
return|;
end_expr_stmt
begin_return
return|return
name|m_window
return|;
end_return
begin_function
unit|}  QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|DragEnter
name|QWindowsOleDropTarget
operator|::
name|DragEnter
parameter_list|(
name|LPDATAOBJECT
name|pDataObj
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|,
name|POINTL
name|pt
parameter_list|,
name|LPDWORD
name|pdwEffect
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|(
literal|"%s widget=%p key=%lu, pt=%ld,%ld"
argument_list|,
name|__FUNCTION__
argument_list|,
name|m_window
argument_list|,
name|grfKeyState
argument_list|,
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
expr_stmt|;
name|QWindowsDrag
operator|::
name|instance
argument_list|()
operator|->
name|setDropDataObject
argument_list|(
name|pDataObj
argument_list|)
expr_stmt|;
name|pDataObj
operator|->
name|AddRef
argument_list|()
expr_stmt|;
name|m_currentWindow
operator|=
name|m_window
expr_stmt|;
name|sendDragEnterEvent
argument_list|(
name|m_window
argument_list|,
name|grfKeyState
argument_list|,
name|pt
argument_list|,
name|pdwEffect
argument_list|)
expr_stmt|;
operator|*
name|pdwEffect
operator|=
name|m_chosenEffect
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_function
DECL|function|sendDragEnterEvent
name|void
name|QWindowsOleDropTarget
operator|::
name|sendDragEnterEvent
parameter_list|(
name|QWindow
modifier|*
name|dragEnterWidget
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|,
name|POINTL
name|pt
parameter_list|,
name|LPDWORD
name|pdwEffect
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|dragEnterWidget
argument_list|)
expr_stmt|;
name|m_lastPoint
operator|=
name|QWindowsGeometryHint
operator|::
name|mapFromGlobal
argument_list|(
name|dragEnterWidget
argument_list|,
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|m_lastKeyState
operator|=
name|grfKeyState
expr_stmt|;
name|m_chosenEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|md
init|=
name|manager
operator|->
name|dropData
argument_list|()
decl_stmt|;
specifier|const
name|Qt
operator|::
name|MouseButtons
name|mouseButtons
init|=
name|QWindowsMouseHandler
operator|::
name|keyStateToMouseButtons
argument_list|(
name|grfKeyState
argument_list|)
decl_stmt|;
specifier|const
name|Qt
operator|::
name|DropActions
name|actions
init|=
name|translateToQDragDropActions
argument_list|(
operator|*
name|pdwEffect
argument_list|)
decl_stmt|;
specifier|const
name|Qt
operator|::
name|KeyboardModifiers
name|keyMods
init|=
name|toQtKeyboardModifiers
argument_list|(
name|grfKeyState
argument_list|)
decl_stmt|;
name|QDragEnterEvent
name|enterEvent
argument_list|(
name|m_lastPoint
argument_list|,
name|actions
argument_list|,
name|md
argument_list|,
name|mouseButtons
argument_list|,
name|keyMods
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|m_currentWindow
argument_list|,
operator|&
name|enterEvent
argument_list|)
expr_stmt|;
name|m_answerRect
operator|=
name|enterEvent
operator|.
name|answerRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|" sent drag enter to "
operator|<<
name|m_window
operator|<<
operator|*
name|md
operator|<<
literal|" actions="
operator|<<
name|actions
operator|<<
literal|" mods="
operator|<<
name|keyMods
operator|<<
literal|" accepted: "
operator|<<
name|enterEvent
operator|.
name|isAccepted
argument_list|()
expr_stmt|;
if|if
condition|(
name|enterEvent
operator|.
name|isAccepted
argument_list|()
condition|)
name|m_chosenEffect
operator|=
name|translateToWinDragEffects
argument_list|(
name|enterEvent
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// Documentation states that a drag move event is sent immediately after
comment|// a drag enter event. This will honor widgets overriding dragMoveEvent only:
if|if
condition|(
name|enterEvent
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
name|QDragMoveEvent
name|moveEvent
argument_list|(
name|m_lastPoint
argument_list|,
name|actions
argument_list|,
name|md
argument_list|,
name|mouseButtons
argument_list|,
name|keyMods
argument_list|)
decl_stmt|;
name|m_answerRect
operator|=
name|enterEvent
operator|.
name|answerRect
argument_list|()
expr_stmt|;
name|moveEvent
operator|.
name|setDropAction
argument_list|(
name|enterEvent
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
name|moveEvent
operator|.
name|accept
argument_list|()
expr_stmt|;
comment|// accept by default, since enter event was accepted.
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|dragEnterWidget
argument_list|,
operator|&
name|moveEvent
argument_list|)
expr_stmt|;
if|if
condition|(
name|moveEvent
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
name|m_answerRect
operator|=
name|moveEvent
operator|.
name|answerRect
argument_list|()
expr_stmt|;
name|m_chosenEffect
operator|=
name|translateToWinDragEffects
argument_list|(
name|moveEvent
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_chosenEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|DragOver
name|QWindowsOleDropTarget
operator|::
name|DragOver
parameter_list|(
name|DWORD
name|grfKeyState
parameter_list|,
name|POINTL
name|pt
parameter_list|,
name|LPDWORD
name|pdwEffect
parameter_list|)
block|{
name|QWindow
modifier|*
name|dragOverWindow
init|=
name|findDragOverWindow
argument_list|(
name|pt
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|tmpPoint
init|=
name|QWindowsGeometryHint
operator|::
name|mapFromGlobal
argument_list|(
name|dragOverWindow
argument_list|,
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
decl_stmt|;
comment|// see if we should compress this event
if|if
condition|(
operator|(
name|tmpPoint
operator|==
name|m_lastPoint
operator|||
name|m_answerRect
operator|.
name|contains
argument_list|(
name|tmpPoint
argument_list|)
operator|)
operator|&&
name|m_lastKeyState
operator|==
name|grfKeyState
condition|)
block|{
operator|*
name|pdwEffect
operator|=
name|m_chosenEffect
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
operator|>
literal|1
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|m_window
operator|<<
literal|" current "
operator|<<
name|dragOverWindow
operator|<<
literal|" key="
operator|<<
name|grfKeyState
operator|<<
literal|" pt="
operator|<<
name|pt
operator|.
name|x
operator|<<
literal|','
operator|<<
name|pt
operator|.
name|y
expr_stmt|;
if|if
condition|(
name|dragOverWindow
operator|!=
name|m_currentWindow
condition|)
block|{
name|QPointer
argument_list|<
name|QWindow
argument_list|>
name|dragOverWindowGuard
argument_list|(
name|dragOverWindow
argument_list|)
decl_stmt|;
comment|// Send drag leave event to the previous drag widget.
comment|// Drag-Over widget might be deleted in DragLeave,
comment|// (tasktracker 218353).
name|QDragLeaveEvent
name|dragLeave
decl_stmt|;
if|if
condition|(
name|m_currentWindow
condition|)
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|m_currentWindow
argument_list|,
operator|&
name|dragLeave
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dragOverWindowGuard
condition|)
block|{
name|dragOverWindow
operator|=
name|findDragOverWindow
argument_list|(
name|pt
argument_list|)
expr_stmt|;
block|}
comment|// Send drag enter event to the current drag widget.
name|m_currentWindow
operator|=
name|dragOverWindow
expr_stmt|;
name|sendDragEnterEvent
argument_list|(
name|dragOverWindow
argument_list|,
name|grfKeyState
argument_list|,
name|pt
argument_list|,
name|pdwEffect
argument_list|)
expr_stmt|;
block|}
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|md
init|=
name|manager
operator|->
name|dropData
argument_list|()
decl_stmt|;
specifier|const
name|Qt
operator|::
name|DropActions
name|actions
init|=
name|translateToQDragDropActions
argument_list|(
operator|*
name|pdwEffect
argument_list|)
decl_stmt|;
name|QDragMoveEvent
name|oldEvent
argument_list|(
name|m_lastPoint
argument_list|,
name|actions
argument_list|,
name|md
argument_list|,
name|QWindowsMouseHandler
operator|::
name|keyStateToMouseButtons
argument_list|(
name|m_lastKeyState
argument_list|)
argument_list|,
name|toQtKeyboardModifiers
argument_list|(
name|m_lastKeyState
argument_list|)
argument_list|)
decl_stmt|;
name|m_lastPoint
operator|=
name|tmpPoint
expr_stmt|;
name|m_lastKeyState
operator|=
name|grfKeyState
expr_stmt|;
name|QDragMoveEvent
name|e
argument_list|(
name|tmpPoint
argument_list|,
name|actions
argument_list|,
name|md
argument_list|,
name|QWindowsMouseHandler
operator|::
name|keyStateToMouseButtons
argument_list|(
name|grfKeyState
argument_list|)
argument_list|,
name|toQtKeyboardModifiers
argument_list|(
name|grfKeyState
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_chosenEffect
operator|!=
name|DROPEFFECT_NONE
condition|)
block|{
if|if
condition|(
name|oldEvent
operator|.
name|dropAction
argument_list|()
operator|==
name|e
operator|.
name|dropAction
argument_list|()
operator|&&
name|oldEvent
operator|.
name|keyboardModifiers
argument_list|()
operator|==
name|e
operator|.
name|keyboardModifiers
argument_list|()
condition|)
name|e
operator|.
name|setDropAction
argument_list|(
name|translateToQDragDropAction
argument_list|(
name|m_chosenEffect
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|dragOverWindow
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|m_answerRect
operator|=
name|e
operator|.
name|answerRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isAccepted
argument_list|()
condition|)
name|m_chosenEffect
operator|=
name|translateToWinDragEffects
argument_list|(
name|e
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|m_chosenEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
operator|*
name|pdwEffect
operator|=
name|m_chosenEffect
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
operator|>
literal|1
condition|)
name|qDebug
argument_list|(
literal|"<%s effect=0x%lx"
argument_list|,
name|__FUNCTION__
argument_list|,
name|m_chosenEffect
argument_list|)
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|DragLeave
name|QWindowsOleDropTarget
operator|::
name|DragLeave
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|m_window
expr_stmt|;
name|m_currentWindow
operator|=
literal|0
expr_stmt|;
name|QDragLeaveEvent
name|e
decl_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|m_window
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|QWindowsDrag
operator|::
name|instance
argument_list|()
operator|->
name|releaseDropDataObject
argument_list|()
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_define
DECL|macro|KEY_STATE_BUTTON_MASK
define|#
directive|define
name|KEY_STATE_BUTTON_MASK
value|(MK_LBUTTON | MK_MBUTTON | MK_RBUTTON)
end_define
begin_function
name|QT_ENSURE_STACK_ALIGNED_FOR_SSE
name|STDMETHODIMP
DECL|function|Drop
name|QWindowsOleDropTarget
operator|::
name|Drop
parameter_list|(
name|LPDATAOBJECT
comment|/*pDataObj*/
parameter_list|,
name|DWORD
name|grfKeyState
parameter_list|,
name|POINTL
name|pt
parameter_list|,
name|LPDWORD
name|pdwEffect
parameter_list|)
block|{
name|QWindow
modifier|*
name|dropWindow
init|=
name|findDragOverWindow
argument_list|(
name|pt
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|m_window
operator|<<
literal|" on "
operator|<<
name|dropWindow
operator|<<
literal|" keys="
operator|<<
name|grfKeyState
operator|<<
literal|" pt="
operator|<<
name|pt
operator|.
name|x
operator|<<
literal|','
operator|<<
name|pt
operator|.
name|y
expr_stmt|;
name|m_lastPoint
operator|=
name|QWindowsGeometryHint
operator|::
name|mapFromGlobal
argument_list|(
name|dropWindow
argument_list|,
name|QPoint
argument_list|(
name|pt
operator|.
name|x
argument_list|,
name|pt
operator|.
name|y
argument_list|)
argument_list|)
expr_stmt|;
comment|// grfKeyState does not all ways contain button state in the drop so if
comment|// it doesn't then use the last known button state;
if|if
condition|(
operator|(
name|grfKeyState
operator|&
name|KEY_STATE_BUTTON_MASK
operator|)
operator|==
literal|0
condition|)
name|grfKeyState
operator||=
name|m_lastKeyState
operator|&
name|KEY_STATE_BUTTON_MASK
expr_stmt|;
name|m_lastKeyState
operator|=
name|grfKeyState
expr_stmt|;
name|QWindowsDrag
modifier|*
name|windowsDrag
init|=
name|QWindowsDrag
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|md
init|=
name|manager
operator|->
name|dropData
argument_list|()
decl_stmt|;
name|QDropEvent
name|e
argument_list|(
name|m_lastPoint
argument_list|,
name|translateToQDragDropActions
argument_list|(
operator|*
name|pdwEffect
argument_list|)
argument_list|,
name|md
argument_list|,
name|QWindowsMouseHandler
operator|::
name|keyStateToMouseButtons
argument_list|(
name|grfKeyState
argument_list|)
argument_list|,
name|toQtKeyboardModifiers
argument_list|(
name|grfKeyState
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_chosenEffect
operator|!=
name|DROPEFFECT_NONE
condition|)
name|e
operator|.
name|setDropAction
argument_list|(
name|translateToQDragDropAction
argument_list|(
name|m_chosenEffect
argument_list|)
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|dropWindow
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_chosenEffect
operator|!=
name|DROPEFFECT_NONE
condition|)
name|e
operator|.
name|accept
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|dropAction
argument_list|()
operator|==
name|Qt
operator|::
name|MoveAction
operator|||
name|e
operator|.
name|dropAction
argument_list|()
operator|==
name|Qt
operator|::
name|TargetMoveAction
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|dropAction
argument_list|()
operator|==
name|Qt
operator|::
name|MoveAction
condition|)
name|m_chosenEffect
operator|=
name|DROPEFFECT_MOVE
expr_stmt|;
else|else
name|m_chosenEffect
operator|=
name|DROPEFFECT_COPY
expr_stmt|;
name|HGLOBAL
name|hData
init|=
name|GlobalAlloc
argument_list|(
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DWORD
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hData
condition|)
block|{
name|DWORD
modifier|*
name|moveEffect
init|=
operator|(
name|DWORD
operator|*
operator|)
name|GlobalLock
argument_list|(
name|hData
argument_list|)
decl_stmt|;
empty_stmt|;
operator|*
name|moveEffect
operator|=
name|DROPEFFECT_MOVE
expr_stmt|;
name|GlobalUnlock
argument_list|(
name|hData
argument_list|)
expr_stmt|;
name|STGMEDIUM
name|medium
decl_stmt|;
name|memset
argument_list|(
operator|&
name|medium
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|STGMEDIUM
argument_list|)
argument_list|)
expr_stmt|;
name|medium
operator|.
name|tymed
operator|=
name|TYMED_HGLOBAL
expr_stmt|;
name|medium
operator|.
name|hGlobal
operator|=
name|hData
expr_stmt|;
name|FORMATETC
name|format
decl_stmt|;
name|format
operator|.
name|cfFormat
operator|=
name|RegisterClipboardFormat
argument_list|(
name|CFSTR_PERFORMEDDROPEFFECT
argument_list|)
expr_stmt|;
name|format
operator|.
name|tymed
operator|=
name|TYMED_HGLOBAL
expr_stmt|;
name|format
operator|.
name|ptd
operator|=
literal|0
expr_stmt|;
name|format
operator|.
name|dwAspect
operator|=
literal|1
expr_stmt|;
name|format
operator|.
name|lindex
operator|=
operator|-
literal|1
expr_stmt|;
name|windowsDrag
operator|->
name|dropDataObject
argument_list|()
operator|->
name|SetData
argument_list|(
operator|&
name|format
argument_list|,
operator|&
name|medium
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|m_chosenEffect
operator|=
name|translateToWinDragEffects
argument_list|(
name|e
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|m_chosenEffect
operator|=
name|DROPEFFECT_NONE
expr_stmt|;
block|}
operator|*
name|pdwEffect
operator|=
name|m_chosenEffect
expr_stmt|;
name|windowsDrag
operator|->
name|releaseDropDataObject
argument_list|()
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsDrag     \brief Windows drag implementation.      \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsDrag
name|QWindowsDrag
operator|::
name|QWindowsDrag
parameter_list|()
member_init_list|:
name|m_dropDataObject
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_dragBeingCancelled
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWindowsDrag
name|QWindowsDrag
operator|::
name|~
name|QWindowsDrag
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|startDrag
name|void
name|QWindowsDrag
operator|::
name|startDrag
parameter_list|()
block|{
comment|// TODO: Accessibility handling?
name|QDragManager
modifier|*
name|dragManager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|dropData
init|=
name|dragManager
operator|->
name|dropData
argument_list|()
decl_stmt|;
name|m_dragBeingCancelled
operator|=
literal|false
expr_stmt|;
name|DWORD
name|resultEffect
decl_stmt|;
name|QWindowsOleDropSource
modifier|*
name|windowDropSource
init|=
operator|new
name|QWindowsOleDropSource
argument_list|()
decl_stmt|;
name|windowDropSource
operator|->
name|createCursors
argument_list|()
expr_stmt|;
name|QWindowsOleDataObject
modifier|*
name|dropDataObject
init|=
operator|new
name|QWindowsOleDataObject
argument_list|(
name|dropData
argument_list|)
decl_stmt|;
specifier|const
name|Qt
operator|::
name|DropActions
name|possibleActions
init|=
name|dragManager
operator|->
name|possible_actions
decl_stmt|;
specifier|const
name|DWORD
name|allowedEffects
init|=
name|translateToWinDragEffects
argument_list|(
name|possibleActions
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|(
literal|">%s possible Actions=%x, effects=0x%lx"
argument_list|,
name|__FUNCTION__
argument_list|,
name|int
argument_list|(
name|possibleActions
argument_list|)
argument_list|,
name|allowedEffects
argument_list|)
expr_stmt|;
specifier|const
name|HRESULT
name|r
init|=
name|DoDragDrop
argument_list|(
name|dropDataObject
argument_list|,
name|windowDropSource
argument_list|,
name|allowedEffects
argument_list|,
operator|&
name|resultEffect
argument_list|)
decl_stmt|;
specifier|const
name|DWORD
name|reportedPerformedEffect
init|=
name|dropDataObject
operator|->
name|reportedPerformedEffect
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|DropAction
name|ret
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|DRAGDROP_S_DROP
condition|)
block|{
if|if
condition|(
name|reportedPerformedEffect
operator|==
name|DROPEFFECT_MOVE
operator|&&
name|resultEffect
operator|!=
name|DROPEFFECT_MOVE
condition|)
block|{
name|ret
operator|=
name|Qt
operator|::
name|TargetMoveAction
expr_stmt|;
name|resultEffect
operator|=
name|DROPEFFECT_MOVE
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|translateToQDragDropAction
argument_list|(
name|resultEffect
argument_list|)
expr_stmt|;
block|}
comment|// Force it to be a copy if an unsupported operation occurred.
comment|// This indicates a bug in the drop target.
if|if
condition|(
name|resultEffect
operator|!=
name|DROPEFFECT_NONE
operator|&&
operator|!
operator|(
name|resultEffect
operator|&
name|allowedEffects
operator|)
condition|)
name|ret
operator|=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
block|}
else|else
block|{
name|dragManager
operator|->
name|setCurrentTarget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// clean up
name|dropDataObject
operator|->
name|releaseQt
argument_list|()
expr_stmt|;
name|dropDataObject
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Will delete obj if refcount becomes 0
name|windowDropSource
operator|->
name|Release
argument_list|()
expr_stmt|;
comment|// Will delete src if refcount becomes 0
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|(
literal|"<%s allowedEffects=0x%lx, reportedPerformedEffect=0x%lx, resultEffect=0x%lx, hr=0x%x, dropAction=%d"
argument_list|,
name|__FUNCTION__
argument_list|,
name|allowedEffects
argument_list|,
name|reportedPerformedEffect
argument_list|,
name|resultEffect
argument_list|,
name|int
argument_list|(
name|r
argument_list|)
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|move
name|void
name|QWindowsDrag
operator|::
name|move
parameter_list|(
specifier|const
name|QMouseEvent
modifier|*
name|me
parameter_list|)
block|{
specifier|const
name|QPoint
name|pos
init|=
name|me
operator|->
name|pos
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|(
literal|"%s %d %d"
argument_list|,
name|__FUNCTION__
argument_list|,
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drop
name|void
name|QWindowsDrag
operator|::
name|drop
parameter_list|(
specifier|const
name|QMouseEvent
modifier|*
name|me
parameter_list|)
block|{
specifier|const
name|QPoint
name|pos
init|=
name|me
operator|->
name|pos
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|(
literal|"%s %d %d"
argument_list|,
name|__FUNCTION__
argument_list|,
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cancel
name|void
name|QWindowsDrag
operator|::
name|cancel
parameter_list|()
block|{
comment|// TODO: Accessibility handling?
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|m_dragBeingCancelled
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|instance
name|QWindowsDrag
modifier|*
name|QWindowsDrag
operator|::
name|instance
parameter_list|()
block|{
return|return
cast|static_cast
argument_list|<
name|QWindowsDrag
operator|*
argument_list|>
argument_list|(
name|QWindowsIntegration
operator|::
name|instance
argument_list|()
operator|->
name|drag
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|releaseDropDataObject
name|void
name|QWindowsDrag
operator|::
name|releaseDropDataObject
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseOLE
condition|)
name|qDebug
argument_list|(
literal|"%s %p"
argument_list|,
name|__FUNCTION__
argument_list|,
name|m_dropDataObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_dropDataObject
condition|)
block|{
name|m_dropDataObject
operator|->
name|Release
argument_list|()
expr_stmt|;
name|m_dropDataObject
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
