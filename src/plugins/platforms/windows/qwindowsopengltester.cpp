begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsopengltester.h"
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|testDesktopGL
name|bool
name|QWindowsOpenGLTester
operator|::
name|testDesktopGL
parameter_list|()
block|{
name|HMODULE
name|lib
init|=
literal|0
decl_stmt|;
name|HWND
name|wnd
init|=
literal|0
decl_stmt|;
name|HDC
name|dc
init|=
literal|0
decl_stmt|;
name|HGLRC
name|context
init|=
literal|0
decl_stmt|;
name|LPCTSTR
name|className
init|=
literal|L"qtopengltest"
decl_stmt|;
name|HGLRC
function_decl|(
name|WINAPI
modifier|*
name|CreateContext
function_decl|)
parameter_list|(
name|HDC
name|dc
parameter_list|)
function_decl|=
literal|0
function_decl|;
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|DeleteContext
function_decl|)
parameter_list|(
name|HGLRC
name|context
parameter_list|)
function_decl|=
literal|0
function_decl|;
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|MakeCurrent
function_decl|)
parameter_list|(
name|HDC
name|dc
parameter_list|,
name|HGLRC
name|context
parameter_list|)
function_decl|=
literal|0
function_decl|;
name|PROC
function_decl|(
name|WINAPI
modifier|*
name|WGL_GetProcAddress
function_decl|)
parameter_list|(
name|LPCSTR
name|name
parameter_list|)
function_decl|=
literal|0
function_decl|;
name|bool
name|result
init|=
literal|false
decl_stmt|;
comment|// Test #1: Load opengl32.dll and try to resolve an OpenGL 2 function.
comment|// This will typically fail on systems that do not have a real OpenGL driver.
name|lib
operator|=
name|LoadLibraryA
argument_list|(
literal|"opengl32.dll"
argument_list|)
expr_stmt|;
if|if
condition|(
name|lib
condition|)
block|{
name|CreateContext
operator|=
cast|reinterpret_cast
argument_list|<
name|HGLRC
operator|(
name|WINAPI
operator|*
operator|)
operator|(
name|HDC
operator|)
argument_list|>
argument_list|(
operator|::
name|GetProcAddress
argument_list|(
name|lib
argument_list|,
literal|"wglCreateContext"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|CreateContext
condition|)
goto|goto
name|cleanup
goto|;
name|DeleteContext
operator|=
cast|reinterpret_cast
argument_list|<
name|BOOL
operator|(
name|WINAPI
operator|*
operator|)
operator|(
name|HGLRC
operator|)
argument_list|>
argument_list|(
operator|::
name|GetProcAddress
argument_list|(
name|lib
argument_list|,
literal|"wglDeleteContext"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|DeleteContext
condition|)
goto|goto
name|cleanup
goto|;
name|MakeCurrent
operator|=
expr|reinterpret_cast
operator|<
name|BOOL
argument_list|(
name|WINAPI
operator|*
argument_list|)
argument_list|(
name|HDC
argument_list|,
name|HGLRC
argument_list|)
operator|>
operator|(
operator|::
name|GetProcAddress
argument_list|(
name|lib
argument_list|,
literal|"wglMakeCurrent"
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|MakeCurrent
condition|)
goto|goto
name|cleanup
goto|;
name|WGL_GetProcAddress
operator|=
cast|reinterpret_cast
argument_list|<
name|PROC
operator|(
name|WINAPI
operator|*
operator|)
operator|(
name|LPCSTR
operator|)
argument_list|>
argument_list|(
operator|::
name|GetProcAddress
argument_list|(
name|lib
argument_list|,
literal|"wglGetProcAddress"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|WGL_GetProcAddress
condition|)
goto|goto
name|cleanup
goto|;
name|WNDCLASS
name|wclass
decl_stmt|;
name|wclass
operator|.
name|cbClsExtra
operator|=
literal|0
expr_stmt|;
name|wclass
operator|.
name|cbWndExtra
operator|=
literal|0
expr_stmt|;
name|wclass
operator|.
name|hInstance
operator|=
operator|(
name|HINSTANCE
operator|)
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|wclass
operator|.
name|hIcon
operator|=
literal|0
expr_stmt|;
name|wclass
operator|.
name|hCursor
operator|=
literal|0
expr_stmt|;
name|wclass
operator|.
name|hbrBackground
operator|=
call|(
name|HBRUSH
call|)
argument_list|(
name|COLOR_BACKGROUND
argument_list|)
expr_stmt|;
name|wclass
operator|.
name|lpszMenuName
operator|=
literal|0
expr_stmt|;
name|wclass
operator|.
name|lpfnWndProc
operator|=
name|DefWindowProc
expr_stmt|;
name|wclass
operator|.
name|lpszClassName
operator|=
name|className
expr_stmt|;
name|wclass
operator|.
name|style
operator|=
name|CS_OWNDC
expr_stmt|;
if|if
condition|(
operator|!
name|RegisterClass
argument_list|(
operator|&
name|wclass
argument_list|)
condition|)
goto|goto
name|cleanup
goto|;
name|wnd
operator|=
name|CreateWindow
argument_list|(
name|className
argument_list|,
literal|L"qtopenglproxytest"
argument_list|,
name|WS_OVERLAPPED
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|640
argument_list|,
literal|480
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|wclass
operator|.
name|hInstance
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wnd
condition|)
goto|goto
name|cleanup
goto|;
name|dc
operator|=
name|GetDC
argument_list|(
name|wnd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dc
condition|)
goto|goto
name|cleanup
goto|;
name|PIXELFORMATDESCRIPTOR
name|pfd
decl_stmt|;
name|memset
argument_list|(
operator|&
name|pfd
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|)
expr_stmt|;
name|pfd
operator|.
name|nSize
operator|=
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
expr_stmt|;
name|pfd
operator|.
name|nVersion
operator|=
literal|1
expr_stmt|;
name|pfd
operator|.
name|dwFlags
operator|=
name|PFD_SUPPORT_OPENGL
operator||
name|PFD_DRAW_TO_WINDOW
operator||
name|PFD_GENERIC_FORMAT
expr_stmt|;
name|pfd
operator|.
name|iPixelType
operator|=
name|PFD_TYPE_RGBA
expr_stmt|;
comment|// Use the GDI functions. Under the hood this will call the wgl variants in opengl32.dll.
name|int
name|pixelFormat
init|=
name|ChoosePixelFormat
argument_list|(
name|dc
argument_list|,
operator|&
name|pfd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pixelFormat
condition|)
goto|goto
name|cleanup
goto|;
if|if
condition|(
operator|!
name|SetPixelFormat
argument_list|(
name|dc
argument_list|,
name|pixelFormat
argument_list|,
operator|&
name|pfd
argument_list|)
condition|)
goto|goto
name|cleanup
goto|;
name|context
operator|=
name|CreateContext
argument_list|(
name|dc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
condition|)
goto|goto
name|cleanup
goto|;
if|if
condition|(
operator|!
name|MakeCurrent
argument_list|(
name|dc
argument_list|,
name|context
argument_list|)
condition|)
goto|goto
name|cleanup
goto|;
comment|// Now that there is finally a context current, try doing something useful.
if|if
condition|(
name|WGL_GetProcAddress
argument_list|(
literal|"glCreateShader"
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|,
literal|"OpenGL 2.0 entry points available"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|,
literal|"OpenGL 2.0 entry points not found"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|,
literal|"Failed to load opengl32.dll"
argument_list|)
expr_stmt|;
block|}
name|cleanup
label|:
if|if
condition|(
name|MakeCurrent
condition|)
name|MakeCurrent
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
condition|)
name|DeleteContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|dc
operator|&&
name|wnd
condition|)
name|ReleaseDC
argument_list|(
name|wnd
argument_list|,
name|dc
argument_list|)
expr_stmt|;
if|if
condition|(
name|wnd
condition|)
block|{
name|DestroyWindow
argument_list|(
name|wnd
argument_list|)
expr_stmt|;
name|UnregisterClass
argument_list|(
name|className
argument_list|,
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// No FreeLibrary. Some implementations, Mesa in particular, deadlock when trying to unload.
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
