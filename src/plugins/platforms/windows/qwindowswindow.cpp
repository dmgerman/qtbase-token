begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsnativeimage.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdrag.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsscreen.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscursor.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<private/qwindow_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|debugWinStyle
specifier|static
name|QByteArray
name|debugWinStyle
parameter_list|(
name|DWORD
name|style
parameter_list|)
block|{
name|QByteArray
name|rc
init|=
literal|"0x"
decl_stmt|;
name|rc
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|qulonglong
argument_list|(
name|style
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_POPUP
condition|)
name|rc
operator|+=
literal|" WS_POPUP"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_CHILD
condition|)
name|rc
operator|+=
literal|" WS_CHILD"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_OVERLAPPED
condition|)
name|rc
operator|+=
literal|" WS_OVERLAPPED"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_CLIPSIBLINGS
condition|)
name|rc
operator|+=
literal|" WS_CLIPSIBLINGS"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_CLIPCHILDREN
condition|)
name|rc
operator|+=
literal|" WS_CLIPCHILDREN"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_THICKFRAME
condition|)
name|rc
operator|+=
literal|" WS_THICKFRAME"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_DLGFRAME
condition|)
name|rc
operator|+=
literal|" WS_DLGFRAME"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_SYSMENU
condition|)
name|rc
operator|+=
literal|" WS_SYSMENU"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_MINIMIZEBOX
condition|)
name|rc
operator|+=
literal|" WS_MINIMIZEBOX"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_MAXIMIZEBOX
condition|)
name|rc
operator|+=
literal|" WS_MAXIMIZEBOX"
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function
begin_function
DECL|function|debugWinExStyle
specifier|static
name|QByteArray
name|debugWinExStyle
parameter_list|(
name|DWORD
name|exStyle
parameter_list|)
block|{
name|QByteArray
name|rc
init|=
literal|"0x"
decl_stmt|;
name|rc
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|qulonglong
argument_list|(
name|exStyle
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
name|exStyle
operator|&
name|WS_EX_TOOLWINDOW
condition|)
name|rc
operator|+=
literal|" WS_EX_TOOLWINDOW"
expr_stmt|;
if|if
condition|(
name|exStyle
operator|&
name|WS_EX_CONTEXTHELP
condition|)
name|rc
operator|+=
literal|" WS_EX_CONTEXTHELP"
expr_stmt|;
if|if
condition|(
name|exStyle
operator|&
name|WS_EX_LAYERED
condition|)
name|rc
operator|+=
literal|" WS_EX_LAYERED"
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function
begin_function
DECL|function|debugWindowStates
specifier|static
name|QByteArray
name|debugWindowStates
parameter_list|(
name|Qt
operator|::
name|WindowStates
name|s
parameter_list|)
block|{
name|QByteArray
name|rc
init|=
literal|"0x"
decl_stmt|;
name|rc
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|int
argument_list|(
name|s
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
name|rc
operator|+=
literal|" WindowMinimized"
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
name|rc
operator|+=
literal|" WindowMaximized"
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
name|rc
operator|+=
literal|" WindowFullScreen"
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|rc
operator|+=
literal|" WindowActive"
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|MINMAXINFO
modifier|&
name|i
parameter_list|)
block|{
name|d
operator|.
name|nospace
argument_list|()
operator|<<
literal|"MINMAXINFO maxSize="
operator|<<
name|i
operator|.
name|ptMaxSize
operator|.
name|x
operator|<<
literal|','
operator|<<
name|i
operator|.
name|ptMaxSize
operator|.
name|y
operator|<<
literal|" maxpos="
operator|<<
name|i
operator|.
name|ptMaxPosition
operator|.
name|x
operator|<<
literal|','
operator|<<
name|i
operator|.
name|ptMaxPosition
operator|.
name|y
operator|<<
literal|" mintrack="
operator|<<
name|i
operator|.
name|ptMinTrackSize
operator|.
name|x
operator|<<
literal|','
operator|<<
name|i
operator|.
name|ptMinTrackSize
operator|.
name|y
operator|<<
literal|" maxtrack="
operator|<<
name|i
operator|.
name|ptMaxTrackSize
operator|.
name|x
operator|<<
literal|','
operator|<<
name|i
operator|.
name|ptMaxTrackSize
operator|.
name|y
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|qSizeOfRect
specifier|static
specifier|inline
name|QSize
name|qSizeOfRect
parameter_list|(
specifier|const
name|RECT
modifier|&
name|rect
parameter_list|)
block|{
return|return
name|QSize
argument_list|(
name|rect
operator|.
name|right
operator|-
name|rect
operator|.
name|left
argument_list|,
name|rect
operator|.
name|bottom
operator|-
name|rect
operator|.
name|top
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qrectFromRECT
specifier|static
specifier|inline
name|QRect
name|qrectFromRECT
parameter_list|(
specifier|const
name|RECT
modifier|&
name|rect
parameter_list|)
block|{
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|rect
operator|.
name|left
argument_list|,
name|rect
operator|.
name|top
argument_list|)
argument_list|,
name|qSizeOfRect
argument_list|(
name|rect
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|RECTfromQRect
specifier|static
specifier|inline
name|RECT
name|RECTfromQRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|int
name|x
init|=
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|int
name|y
init|=
name|rect
operator|.
name|top
argument_list|()
decl_stmt|;
name|RECT
name|result
init|=
block|{
name|x
block|,
name|y
block|,
name|x
operator|+
name|rect
operator|.
name|width
argument_list|()
block|,
name|y
operator|+
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|RECT
modifier|&
name|r
parameter_list|)
block|{
name|d
operator|.
name|nospace
argument_list|()
operator|<<
literal|"RECT: left/top="
operator|<<
name|r
operator|.
name|left
operator|<<
literal|','
operator|<<
name|r
operator|.
name|top
operator|<<
literal|" right/bottom="
operator|<<
name|r
operator|.
name|right
operator|<<
literal|','
operator|<<
name|r
operator|.
name|bottom
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|NCCALCSIZE_PARAMS
modifier|&
name|p
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|"NCCALCSIZE_PARAMS "
operator|<<
name|qrectFromRECT
argument_list|(
name|p
operator|.
name|rgrc
index|[
literal|0
index|]
argument_list|)
operator|<<
literal|' '
operator|<<
name|qrectFromRECT
argument_list|(
name|p
operator|.
name|rgrc
index|[
literal|1
index|]
argument_list|)
operator|<<
literal|' '
operator|<<
name|qrectFromRECT
argument_list|(
name|p
operator|.
name|rgrc
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_comment
comment|// Return the frame geometry relative to the parent
end_comment
begin_comment
comment|// if there is one.
end_comment
begin_function
DECL|function|frameGeometry
specifier|static
specifier|inline
name|QRect
name|frameGeometry
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|bool
name|topLevel
parameter_list|)
block|{
name|RECT
name|rect
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|GetWindowRect
argument_list|(
name|hwnd
argument_list|,
operator|&
name|rect
argument_list|)
expr_stmt|;
comment|// Screen coordinates.
specifier|const
name|HWND
name|parent
init|=
name|GetParent
argument_list|(
name|hwnd
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
operator|!
name|topLevel
condition|)
block|{
specifier|const
name|int
name|width
init|=
name|rect
operator|.
name|right
operator|-
name|rect
operator|.
name|left
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|rect
operator|.
name|bottom
operator|-
name|rect
operator|.
name|top
decl_stmt|;
name|POINT
name|leftTop
init|=
block|{
name|rect
operator|.
name|left
block|,
name|rect
operator|.
name|top
block|}
decl_stmt|;
name|ScreenToClient
argument_list|(
name|parent
argument_list|,
operator|&
name|leftTop
argument_list|)
expr_stmt|;
name|rect
operator|.
name|left
operator|=
name|leftTop
operator|.
name|x
expr_stmt|;
name|rect
operator|.
name|top
operator|=
name|leftTop
operator|.
name|y
expr_stmt|;
name|rect
operator|.
name|right
operator|=
name|leftTop
operator|.
name|x
operator|+
name|width
expr_stmt|;
name|rect
operator|.
name|bottom
operator|=
name|leftTop
operator|.
name|y
operator|+
name|height
expr_stmt|;
block|}
return|return
name|qrectFromRECT
argument_list|(
name|rect
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|clientSize
specifier|static
specifier|inline
name|QSize
name|clientSize
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
block|{
name|RECT
name|rect
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|GetClientRect
argument_list|(
name|hwnd
argument_list|,
operator|&
name|rect
argument_list|)
expr_stmt|;
comment|// Always returns point 0,0, thus unusable for geometry.
return|return
name|qSizeOfRect
argument_list|(
name|rect
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// from qwidget_win.cpp/maximum layout size check removed.
end_comment
begin_function
DECL|function|shouldShowMaximizeButton
specifier|static
name|bool
name|shouldShowMaximizeButton
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
condition|)
return|return
literal|false
return|;
comment|// if the user explicitly asked for the maximize button, we try to add
comment|// it even if the window has fixed size.
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
return|return
literal|true
return|;
return|return
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
return|;
block|}
end_function
begin_comment
comment|/*!     \class WindowCreationData     \brief Window creation code.      This struct gathers all information required to create a window.     Window creation is split in 3 steps:      \list     \o fromWindow() Gather all required information     \o create() Create the system handle.     \o initialize() Post creation initialization steps.     \endlist      The reason for this split is to also enable changing the QWindowFlags     by calling:      \list     \o fromWindow() Gather information and determine new system styles     \o applyWindowFlags() to apply the new window system styles.     \o initialize() Post creation initialization steps.     \endlist      Contains the window creation code formerly in qwidget_win.cpp.      \sa QWindowCreationContext     \ingroup qt-lighthouse-win */
end_comment
begin_struct
DECL|struct|WindowCreationData
struct|struct
name|WindowCreationData
block|{
DECL|typedef|WindowData
typedef|typedef
name|QWindowsWindow
operator|::
name|WindowData
name|WindowData
typedef|;
DECL|enum|Flags
DECL|enumerator|ForceChild
enum|enum
name|Flags
block|{
name|ForceChild
init|=
literal|0x1
block|}
enum|;
DECL|function|WindowCreationData
name|WindowCreationData
parameter_list|()
member_init_list|:
name|parentHandle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|type
argument_list|(
name|Qt
operator|::
name|Widget
argument_list|)
member_init_list|,
name|style
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|exStyle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|topLevel
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|popup
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|dialog
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|desktop
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|tool
argument_list|(
literal|false
argument_list|)
block|{}
name|void
name|fromWindow
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|unsigned
name|creationFlags
init|=
literal|0
parameter_list|)
function_decl|;
specifier|inline
name|WindowData
name|create
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QRect
modifier|&
name|geometry
parameter_list|,
name|QString
name|title
parameter_list|)
specifier|const
function_decl|;
specifier|inline
name|void
name|applyWindowFlags
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
specifier|const
function_decl|;
name|void
name|initialize
parameter_list|(
name|HWND
name|h
parameter_list|,
name|bool
name|frameChange
parameter_list|)
specifier|const
function_decl|;
DECL|member|flags
name|Qt
operator|::
name|WindowFlags
name|flags
decl_stmt|;
DECL|member|parentHandle
name|HWND
name|parentHandle
decl_stmt|;
DECL|member|type
name|Qt
operator|::
name|WindowType
name|type
decl_stmt|;
DECL|member|style
name|unsigned
name|style
decl_stmt|;
DECL|member|exStyle
name|unsigned
name|exStyle
decl_stmt|;
DECL|member|isGL
name|bool
name|isGL
decl_stmt|;
DECL|member|topLevel
name|bool
name|topLevel
decl_stmt|;
DECL|member|popup
name|bool
name|popup
decl_stmt|;
DECL|member|dialog
name|bool
name|dialog
decl_stmt|;
DECL|member|desktop
name|bool
name|desktop
decl_stmt|;
DECL|member|tool
name|bool
name|tool
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
specifier|const
name|WindowCreationData
modifier|&
name|d
parameter_list|)
block|{
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
name|QWindowsWindow
operator|::
name|debugWindowFlags
argument_list|(
name|d
operator|.
name|flags
argument_list|)
operator|<<
literal|" GL="
operator|<<
name|d
operator|.
name|isGL
operator|<<
literal|" topLevel="
operator|<<
name|d
operator|.
name|topLevel
operator|<<
literal|" popup="
operator|<<
name|d
operator|.
name|popup
operator|<<
literal|" dialog="
operator|<<
name|d
operator|.
name|dialog
operator|<<
literal|" desktop="
operator|<<
name|d
operator|.
name|desktop
operator|<<
literal|" tool="
operator|<<
name|d
operator|.
name|tool
operator|<<
literal|" style="
operator|<<
name|debugWinStyle
argument_list|(
name|d
operator|.
name|style
argument_list|)
operator|<<
literal|" exStyle="
operator|<<
name|debugWinExStyle
argument_list|(
name|d
operator|.
name|exStyle
argument_list|)
operator|<<
literal|" parent="
operator|<<
name|d
operator|.
name|parentHandle
expr_stmt|;
return|return
name|debug
return|;
block|}
end_function
begin_function
DECL|function|fromWindow
name|void
name|WindowCreationData
operator|::
name|fromWindow
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|Qt
operator|::
name|WindowFlags
name|flagsIn
parameter_list|,
name|unsigned
name|creationFlags
parameter_list|)
block|{
name|isGL
operator|=
name|w
operator|->
name|surfaceType
argument_list|()
operator|==
name|QWindow
operator|::
name|OpenGLSurface
expr_stmt|;
name|flags
operator|=
name|flagsIn
expr_stmt|;
name|topLevel
operator|=
operator|(
name|creationFlags
operator|&
name|ForceChild
operator|)
condition|?
literal|false
else|:
name|w
operator|->
name|isTopLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|topLevel
operator|&&
name|flags
operator|==
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"Remove me: fixing toplevel window flags"
argument_list|)
expr_stmt|;
name|flags
operator||=
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
expr_stmt|;
block|}
name|type
operator|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
name|int
argument_list|(
name|flags
argument_list|)
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Qt
operator|::
name|Dialog
case|:
case|case
name|Qt
operator|::
name|Sheet
case|:
name|dialog
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Drawer
case|:
case|case
name|Qt
operator|::
name|Tool
case|:
name|tool
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Popup
case|:
name|popup
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Desktop
case|:
name|desktop
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator|)
condition|)
name|dialog
operator|=
literal|true
expr_stmt|;
comment|// Parent: Use transient parent for top levels.
if|if
condition|(
name|popup
condition|)
block|{
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
expr_stmt|;
comment|// a popup stays on top, no parent.
block|}
else|else
block|{
if|if
condition|(
specifier|const
name|QWindow
modifier|*
name|parentWindow
init|=
name|topLevel
condition|?
name|w
operator|->
name|transientParent
argument_list|()
else|:
name|w
operator|->
name|parent
argument_list|()
condition|)
name|parentHandle
operator|=
name|QWindowsWindow
operator|::
name|handleOf
argument_list|(
name|parentWindow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|popup
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
operator|)
condition|)
block|{
name|style
operator|=
name|WS_POPUP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
operator|&&
operator|!
name|desktop
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
name|style
operator|=
name|WS_POPUP
expr_stmt|;
comment|// no border
elseif|else
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|style
operator|=
name|WS_OVERLAPPED
expr_stmt|;
else|else
name|style
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|style
operator|=
name|WS_CHILD
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|desktop
condition|)
block|{
comment|// if (!testAttribute(Qt::WA_PaintUnclipped))
comment|// ### Commented out for now as it causes some problems, but
comment|// this should be correct anyway, so dig some more into this
ifdef|#
directive|ifdef
name|Q_FLATTEN_EXPOSE
if|if
condition|(
name|isGL
condition|)
name|style
operator||=
name|WS_CLIPSIBLINGS
operator||
name|WS_CLIPCHILDREN
expr_stmt|;
comment|// see SetPixelFormat
else|#
directive|else
name|style
operator||=
name|WS_CLIPSIBLINGS
operator||
name|WS_CLIPCHILDREN
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|topLevel
condition|)
block|{
if|if
condition|(
operator|(
name|type
operator|==
name|Qt
operator|::
name|Window
operator|||
name|dialog
operator|||
name|tool
operator|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
name|style
operator||=
name|WS_POPUP
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
condition|)
block|{
name|style
operator||=
name|WS_DLGFRAME
expr_stmt|;
block|}
else|else
block|{
name|style
operator||=
name|WS_THICKFRAME
expr_stmt|;
block|}
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|style
operator||=
name|WS_CAPTION
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|style
operator||=
name|WS_SYSMENU
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
name|style
operator||=
name|WS_MINIMIZEBOX
expr_stmt|;
if|if
condition|(
name|shouldShowMaximizeButton
argument_list|(
name|flags
argument_list|)
condition|)
name|style
operator||=
name|WS_MAXIMIZEBOX
expr_stmt|;
if|if
condition|(
name|tool
condition|)
name|exStyle
operator||=
name|WS_EX_TOOLWINDOW
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|exStyle
operator||=
name|WS_EX_CONTEXTHELP
expr_stmt|;
block|}
else|else
block|{
name|exStyle
operator||=
name|WS_EX_TOOLWINDOW
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
name|QWindowsWindow
operator|::
name|WindowData
DECL|function|create
name|WindowCreationData
operator|::
name|create
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QRect
modifier|&
name|geometry
parameter_list|,
name|QString
name|title
parameter_list|)
specifier|const
block|{
typedef|typedef
name|QSharedPointer
argument_list|<
name|QWindowCreationContext
argument_list|>
name|QWindowCreationContextPtr
typedef|;
name|WindowData
name|result
decl_stmt|;
name|result
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
if|if
condition|(
name|desktop
condition|)
block|{
comment|// desktop widget. No frame, hopefully?
name|result
operator|.
name|hwnd
operator|=
name|GetDesktopWindow
argument_list|()
expr_stmt|;
name|result
operator|.
name|geometry
operator|=
name|frameGeometry
argument_list|(
name|result
operator|.
name|hwnd
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|"Created desktop window "
operator|<<
name|w
operator|<<
name|result
operator|.
name|hwnd
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|const
name|HINSTANCE
name|appinst
init|=
operator|(
name|HINSTANCE
operator|)
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|windowClassName
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|registerWindowClass
argument_list|(
name|w
argument_list|,
name|isGL
argument_list|)
decl_stmt|;
if|if
condition|(
name|title
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|result
operator|.
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|)
condition|)
name|title
operator|=
name|topLevel
condition|?
name|qAppName
argument_list|()
else|:
name|w
operator|->
name|objectName
argument_list|()
expr_stmt|;
specifier|const
name|wchar_t
modifier|*
name|titleUtf16
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|wchar_t
modifier|*
name|classNameUtf16
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|windowClassName
operator|.
name|utf16
argument_list|()
argument_list|)
decl_stmt|;
comment|// Capture events before CreateWindowEx() returns.
specifier|const
name|QWindowCreationContextPtr
name|context
argument_list|(
operator|new
name|QWindowCreationContext
argument_list|(
name|w
argument_list|,
name|geometry
argument_list|,
name|style
argument_list|,
name|exStyle
argument_list|)
argument_list|)
decl_stmt|;
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|setWindowCreationContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|"CreateWindowEx: "
operator|<<
name|w
operator|<<
operator|*
name|this
operator|<<
literal|" class="
operator|<<
name|windowClassName
operator|<<
literal|" title="
operator|<<
name|title
operator|<<
literal|"\nrequested: "
operator|<<
name|geometry
operator|<<
literal|": "
operator|<<
name|context
operator|->
name|frameWidth
operator|<<
literal|'x'
operator|<<
name|context
operator|->
name|frameHeight
operator|<<
literal|'+'
operator|<<
name|context
operator|->
name|frameX
operator|<<
literal|'+'
operator|<<
name|context
operator|->
name|frameY
expr_stmt|;
name|result
operator|.
name|hwnd
operator|=
name|CreateWindowEx
argument_list|(
name|exStyle
argument_list|,
name|classNameUtf16
argument_list|,
name|titleUtf16
argument_list|,
name|style
argument_list|,
name|context
operator|->
name|frameX
argument_list|,
name|context
operator|->
name|frameY
argument_list|,
name|context
operator|->
name|frameWidth
argument_list|,
name|context
operator|->
name|frameHeight
argument_list|,
name|parentHandle
argument_list|,
name|NULL
argument_list|,
name|appinst
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|setWindowCreationContext
argument_list|(
name|QWindowCreationContextPtr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|"CreateWindowEx: returns "
operator|<<
name|w
operator|<<
literal|' '
operator|<<
name|result
operator|.
name|hwnd
operator|<<
literal|" obtained geometry: "
operator|<<
name|context
operator|->
name|obtainedGeometry
operator|<<
name|context
operator|->
name|margins
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|hwnd
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: CreateWindowEx failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|result
operator|.
name|geometry
operator|=
name|context
operator|->
name|obtainedGeometry
expr_stmt|;
name|result
operator|.
name|frame
operator|=
name|context
operator|->
name|margins
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|applyWindowFlags
name|void
name|WindowCreationData
operator|::
name|applyWindowFlags
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
specifier|const
block|{
comment|// Keep enabled and visible from the current style.
specifier|const
name|LONG_PTR
name|oldStyle
init|=
name|GetWindowLongPtr
argument_list|(
name|hwnd
argument_list|,
name|GWL_STYLE
argument_list|)
decl_stmt|;
specifier|const
name|LONG_PTR
name|oldExStyle
init|=
name|GetWindowLongPtr
argument_list|(
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|)
decl_stmt|;
specifier|const
name|LONG_PTR
name|newStyle
init|=
name|style
operator||
operator|(
name|oldStyle
operator|&
operator|(
name|WS_DISABLED
operator||
name|WS_VISIBLE
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|oldStyle
operator|!=
name|newStyle
condition|)
name|SetWindowLongPtr
argument_list|(
name|hwnd
argument_list|,
name|GWL_STYLE
argument_list|,
name|newStyle
argument_list|)
expr_stmt|;
specifier|const
name|LONG_PTR
name|newExStyle
init|=
name|exStyle
decl_stmt|;
if|if
condition|(
name|newExStyle
operator|!=
name|oldExStyle
condition|)
name|SetWindowLongPtr
argument_list|(
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|newExStyle
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|hwnd
operator|<<
operator|*
name|this
operator|<<
literal|"\n    Style from "
operator|<<
name|debugWinStyle
argument_list|(
name|oldStyle
argument_list|)
operator|<<
literal|"\n    to "
operator|<<
name|debugWinStyle
argument_list|(
name|newStyle
argument_list|)
operator|<<
literal|"\n    ExStyle from "
operator|<<
name|debugWinExStyle
argument_list|(
name|oldExStyle
argument_list|)
operator|<<
literal|" to "
operator|<<
name|debugWinExStyle
argument_list|(
name|newExStyle
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initialize
name|void
name|WindowCreationData
operator|::
name|initialize
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|bool
name|frameChange
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|desktop
operator|||
operator|!
name|hwnd
condition|)
return|return;
name|UINT
name|flags
init|=
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
decl_stmt|;
if|if
condition|(
name|frameChange
condition|)
name|flags
operator||=
name|SWP_FRAMECHANGED
expr_stmt|;
if|if
condition|(
name|topLevel
condition|)
block|{
name|flags
operator||=
name|SWP_NOACTIVATE
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
condition|)
block|{
name|SetWindowPos
argument_list|(
name|hwnd
argument_list|,
name|HWND_TOPMOST
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"QWidget: Incompatible window flags: the window can't be on top and on bottom at the same time"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
block|{
name|SetWindowPos
argument_list|(
name|hwnd
argument_list|,
name|HWND_BOTTOM
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|CustomizeWindowHint
operator||
name|Qt
operator|::
name|WindowTitleHint
operator|)
condition|)
block|{
name|HMENU
name|systemMenu
init|=
name|GetSystemMenu
argument_list|(
name|hwnd
argument_list|,
name|FALSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|EnableMenuItem
argument_list|(
name|systemMenu
argument_list|,
name|SC_CLOSE
argument_list|,
name|MF_BYCOMMAND
operator||
name|MF_ENABLED
argument_list|)
expr_stmt|;
else|else
name|EnableMenuItem
argument_list|(
name|systemMenu
argument_list|,
name|SC_CLOSE
argument_list|,
name|MF_BYCOMMAND
operator||
name|MF_GRAYED
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// child.
name|SetWindowPos
argument_list|(
name|hwnd
argument_list|,
name|HWND_TOP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \class QWindowsGeometryHint     \brief Stores geometry constraints and provides utility functions.      Geometry constraints ready to apply to a MINMAXINFO taking frame     into account.      \ingroup qt-lighthouse-win */
end_comment
begin_define
DECL|macro|QWINDOWSIZE_MAX
define|#
directive|define
name|QWINDOWSIZE_MAX
value|((1<<24)-1)
end_define
begin_constructor
DECL|function|QWindowsGeometryHint
name|QWindowsGeometryHint
operator|::
name|QWindowsGeometryHint
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|)
member_init_list|:
name|minimumSize
argument_list|(
name|w
operator|->
name|minimumSize
argument_list|()
argument_list|)
member_init_list|,
name|maximumSize
argument_list|(
name|w
operator|->
name|maximumSize
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|validSize
name|bool
name|QWindowsGeometryHint
operator|::
name|validSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|width
init|=
name|s
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|s
operator|.
name|height
argument_list|()
decl_stmt|;
return|return
name|width
operator|>=
name|minimumSize
operator|.
name|width
argument_list|()
operator|&&
name|width
operator|<=
name|maximumSize
operator|.
name|width
argument_list|()
operator|&&
name|height
operator|>=
name|minimumSize
operator|.
name|height
argument_list|()
operator|&&
name|height
operator|<=
name|maximumSize
operator|.
name|height
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|frame
name|QMargins
name|QWindowsGeometryHint
operator|::
name|frame
parameter_list|(
name|DWORD
name|style
parameter_list|,
name|DWORD
name|exStyle
parameter_list|)
block|{
name|RECT
name|rect
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|style
operator|&=
operator|~
operator|(
name|WS_OVERLAPPED
operator|)
expr_stmt|;
comment|// Not permitted, see docs.
if|if
condition|(
operator|!
name|AdjustWindowRectEx
argument_list|(
operator|&
name|rect
argument_list|,
name|style
argument_list|,
name|FALSE
argument_list|,
name|exStyle
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
literal|"%s: AdjustWindowRectEx failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
specifier|const
name|QMargins
name|result
argument_list|(
name|qAbs
argument_list|(
name|rect
operator|.
name|left
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|rect
operator|.
name|top
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|rect
operator|.
name|right
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|rect
operator|.
name|bottom
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|" style= 0x"
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|style
argument_list|,
literal|16
argument_list|)
operator|<<
literal|" exStyle=0x"
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|exStyle
argument_list|,
literal|16
argument_list|)
operator|<<
literal|' '
operator|<<
name|rect
operator|<<
literal|' '
operator|<<
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|applyToMinMaxInfo
name|void
name|QWindowsGeometryHint
operator|::
name|applyToMinMaxInfo
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|MINMAXINFO
modifier|*
name|mmi
parameter_list|)
specifier|const
block|{
return|return
name|applyToMinMaxInfo
argument_list|(
name|GetWindowLong
argument_list|(
name|hwnd
argument_list|,
name|GWL_STYLE
argument_list|)
argument_list|,
name|GetWindowLong
argument_list|(
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|)
argument_list|,
name|mmi
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|applyToMinMaxInfo
name|void
name|QWindowsGeometryHint
operator|::
name|applyToMinMaxInfo
parameter_list|(
name|DWORD
name|style
parameter_list|,
name|DWORD
name|exStyle
parameter_list|,
name|MINMAXINFO
modifier|*
name|mmi
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
literal|'<'
operator|<<
literal|" min="
operator|<<
name|minimumSize
operator|.
name|width
argument_list|()
operator|<<
literal|','
operator|<<
name|minimumSize
operator|.
name|height
argument_list|()
operator|<<
literal|" max="
operator|<<
name|maximumSize
operator|.
name|width
argument_list|()
operator|<<
literal|','
operator|<<
name|maximumSize
operator|.
name|height
argument_list|()
operator|<<
literal|" in "
operator|<<
operator|*
name|mmi
expr_stmt|;
specifier|const
name|QMargins
name|margins
init|=
name|QWindowsGeometryHint
operator|::
name|frame
argument_list|(
name|style
argument_list|,
name|exStyle
argument_list|)
decl_stmt|;
specifier|const
name|int
name|frameWidth
init|=
name|margins
operator|.
name|left
argument_list|()
operator|+
name|margins
operator|.
name|right
argument_list|()
decl_stmt|;
specifier|const
name|int
name|frameHeight
init|=
name|margins
operator|.
name|top
argument_list|()
operator|+
name|margins
operator|.
name|bottom
argument_list|()
decl_stmt|;
if|if
condition|(
name|minimumSize
operator|.
name|width
argument_list|()
operator|>
literal|0
condition|)
name|mmi
operator|->
name|ptMinTrackSize
operator|.
name|x
operator|=
name|minimumSize
operator|.
name|width
argument_list|()
operator|+
name|frameWidth
expr_stmt|;
if|if
condition|(
name|minimumSize
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
name|mmi
operator|->
name|ptMinTrackSize
operator|.
name|y
operator|=
name|minimumSize
operator|.
name|height
argument_list|()
operator|+
name|frameHeight
expr_stmt|;
specifier|const
name|int
name|maximumWidth
init|=
name|qMax
argument_list|(
name|maximumSize
operator|.
name|width
argument_list|()
argument_list|,
name|minimumSize
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|maximumHeight
init|=
name|qMax
argument_list|(
name|maximumSize
operator|.
name|height
argument_list|()
argument_list|,
name|minimumSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|maximumWidth
operator|<
name|QWINDOWSIZE_MAX
condition|)
name|mmi
operator|->
name|ptMaxTrackSize
operator|.
name|x
operator|=
name|maximumWidth
operator|+
name|frameWidth
expr_stmt|;
comment|// windows with title bar have an implicit size limit of 112 pixels
if|if
condition|(
name|maximumHeight
operator|<
name|QWINDOWSIZE_MAX
condition|)
name|mmi
operator|->
name|ptMaxTrackSize
operator|.
name|y
operator|=
name|qMax
argument_list|(
name|maximumHeight
operator|+
name|frameHeight
argument_list|,
literal|112
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|'<'
operator|<<
name|__FUNCTION__
operator|<<
literal|" frame="
operator|<<
name|margins
operator|<<
literal|' '
operator|<<
name|frameWidth
operator|<<
literal|','
operator|<<
name|frameHeight
operator|<<
literal|" out "
operator|<<
operator|*
name|mmi
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowCreationContext     \brief Active Context for creating windows.      There is a phase in window creation (WindowCreationData::create())     in which events are sent before the system API CreateWindowEx() returns     the handle. These cannot be handled by the platform window as the association     of the unknown handle value to the window does not exist yet and as not     to trigger recursive handle creation, etc.      In that phase, an instance of  QWindowCreationContext is set on     QWindowsContext.      QWindowCreationContext stores the information to answer the initial     WM_GETMINMAXINFO and obtains the corrected size/position.      \sa WindowCreationData, QWindowsContext     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowCreationContext
name|QWindowCreationContext
operator|::
name|QWindowCreationContext
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QRect
modifier|&
name|geometry
parameter_list|,
name|DWORD
name|style_
parameter_list|,
name|DWORD
name|exStyle_
parameter_list|)
member_init_list|:
name|geometryHint
argument_list|(
name|w
argument_list|)
member_init_list|,
name|style
argument_list|(
name|style_
argument_list|)
member_init_list|,
name|exStyle
argument_list|(
name|exStyle_
argument_list|)
member_init_list|,
name|requestedGeometry
argument_list|(
name|geometry
argument_list|)
member_init_list|,
name|obtainedGeometry
argument_list|(
name|geometry
argument_list|)
member_init_list|,
name|margins
argument_list|(
name|QWindowsGeometryHint
operator|::
name|frame
argument_list|(
name|style
argument_list|,
name|exStyle
argument_list|)
argument_list|)
member_init_list|,
name|frameX
argument_list|(
name|CW_USEDEFAULT
argument_list|)
member_init_list|,
name|frameY
argument_list|(
name|CW_USEDEFAULT
argument_list|)
member_init_list|,
name|frameWidth
argument_list|(
name|CW_USEDEFAULT
argument_list|)
member_init_list|,
name|frameHeight
argument_list|(
name|CW_USEDEFAULT
argument_list|)
block|{
comment|// Geometry of toplevels does not consider window frames.
comment|// TODO: No concept of WA_wasMoved yet that would indicate a
comment|// CW_USEDEFAULT unless set. For now, assume that 0,0 means 'default'
comment|// for toplevels.
if|if
condition|(
name|geometry
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|w
operator|->
name|isTopLevel
argument_list|()
operator|||
name|geometry
operator|.
name|y
argument_list|()
operator|>=
name|margins
operator|.
name|top
argument_list|()
condition|)
block|{
name|frameX
operator|=
name|geometry
operator|.
name|x
argument_list|()
operator|-
name|margins
operator|.
name|left
argument_list|()
expr_stmt|;
name|frameY
operator|=
name|geometry
operator|.
name|y
argument_list|()
operator|-
name|margins
operator|.
name|top
argument_list|()
expr_stmt|;
block|}
name|frameWidth
operator|=
name|geometry
operator|.
name|width
argument_list|()
operator|+
name|margins
operator|.
name|left
argument_list|()
operator|+
name|margins
operator|.
name|right
argument_list|()
expr_stmt|;
name|frameHeight
operator|=
name|geometry
operator|.
name|height
argument_list|()
operator|+
name|margins
operator|.
name|top
argument_list|()
operator|+
name|margins
operator|.
name|bottom
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|w
operator|<<
literal|" min"
operator|<<
name|geometryHint
operator|.
name|minimumSize
operator|<<
literal|" min"
operator|<<
name|geometryHint
operator|.
name|maximumSize
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \class QWindowsBaseWindow     \brief Raster or OpenGL Window.      \list     \o Raster type: handleWmPaint() is implemented to        to bitblt the image. The DC can be accessed        via getDC/Relase DC, which has a special handling        when within a paint event (in that case, the DC obtained        from BeginPaint() is returned).      \o Open GL: The first time QWindowsGLContext accesses        the handle, it sets up the pixelformat on the DC        which in turn sets it on the window (see flag        PixelFormatInitialized).        handleWmPaint() is empty (although required).     \endlist      \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsWindow
name|QWindowsWindow
operator|::
name|QWindowsWindow
parameter_list|(
name|QWindow
modifier|*
name|aWindow
parameter_list|,
specifier|const
name|WindowData
modifier|&
name|data
parameter_list|)
member_init_list|:
name|QPlatformWindow
argument_list|(
name|aWindow
argument_list|)
member_init_list|,
name|m_data
argument_list|(
name|data
argument_list|)
member_init_list|,
name|m_flags
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_hdc
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_windowState
argument_list|(
name|aWindow
operator|->
name|windowState
argument_list|()
argument_list|)
member_init_list|,
name|m_opacity
argument_list|(
literal|1.0
argument_list|)
member_init_list|,
name|m_mouseGrab
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_cursor
argument_list|(
name|QWindowsScreen
operator|::
name|screenOf
argument_list|(
name|aWindow
argument_list|)
operator|->
name|cursor
argument_list|()
operator|.
name|standardWindowCursor
argument_list|()
argument_list|)
member_init_list|,
name|m_dropTarget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_savedStyle
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|aWindow
operator|->
name|surfaceType
argument_list|()
operator|==
name|QWindow
operator|::
name|OpenGLSurface
condition|)
name|setFlag
argument_list|(
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|addWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|aWindow
operator|->
name|isTopLevel
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|aWindow
operator|->
name|windowType
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Window
case|:
case|case
name|Qt
operator|::
name|Dialog
case|:
case|case
name|Qt
operator|::
name|Sheet
case|:
case|case
name|Qt
operator|::
name|Drawer
case|:
case|case
name|Qt
operator|::
name|Popup
case|:
case|case
name|Qt
operator|::
name|Tool
case|:
name|registerDropSite
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsWindow
name|QWindowsWindow
operator|::
name|~
name|QWindowsWindow
parameter_list|()
block|{
name|destroyWindow
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|destroyWindow
name|void
name|QWindowsWindow
operator|::
name|destroyWindow
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseIntegration
operator|||
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|m_data
operator|.
name|hwnd
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
comment|// Stop event dispatching before Window is destroyed.
name|unregisterDropSite
argument_list|()
expr_stmt|;
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|removeWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
operator|!=
name|GetDesktopWindow
argument_list|()
condition|)
name|DestroyWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|m_data
operator|.
name|hwnd
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|registerDropSite
name|void
name|QWindowsWindow
operator|::
name|registerDropSite
parameter_list|()
block|{
if|if
condition|(
name|m_data
operator|.
name|hwnd
operator|&&
operator|!
name|m_dropTarget
condition|)
block|{
name|m_dropTarget
operator|=
operator|new
name|QWindowsOleDropTarget
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
name|RegisterDragDrop
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|m_dropTarget
argument_list|)
expr_stmt|;
name|CoLockObjectExternal
argument_list|(
name|m_dropTarget
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|unregisterDropSite
name|void
name|QWindowsWindow
operator|::
name|unregisterDropSite
parameter_list|()
block|{
if|if
condition|(
name|m_data
operator|.
name|hwnd
operator|&&
name|m_dropTarget
condition|)
block|{
name|m_dropTarget
operator|->
name|Release
argument_list|()
expr_stmt|;
name|CoLockObjectExternal
argument_list|(
name|m_dropTarget
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RevokeDragDrop
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|m_dropTarget
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|topLevelOf
name|QWindow
modifier|*
name|QWindowsWindow
operator|::
name|topLevelOf
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
while|while
condition|(
name|QWindow
modifier|*
name|parent
init|=
name|w
operator|->
name|parent
argument_list|()
condition|)
name|w
operator|=
name|parent
expr_stmt|;
return|return
name|w
return|;
block|}
end_function
begin_function
name|QWindowsWindow
operator|::
name|WindowData
DECL|function|create
name|QWindowsWindow
operator|::
name|WindowData
operator|::
name|create
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|WindowData
modifier|&
name|parameters
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|WindowCreationData
name|creationData
decl_stmt|;
name|creationData
operator|.
name|fromWindow
argument_list|(
name|w
argument_list|,
name|parameters
operator|.
name|flags
argument_list|)
expr_stmt|;
name|WindowData
name|result
init|=
name|creationData
operator|.
name|create
argument_list|(
name|w
argument_list|,
name|parameters
operator|.
name|geometry
argument_list|,
name|title
argument_list|)
decl_stmt|;
name|creationData
operator|.
name|initialize
argument_list|(
name|result
operator|.
name|hwnd
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QWindowsWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|m_data
operator|.
name|hwnd
operator|<<
name|visible
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
if|if
condition|(
name|visible
condition|)
block|{
name|show_sys
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hide_sys
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|isVisible
name|bool
name|QWindowsWindow
operator|::
name|isVisible
parameter_list|()
specifier|const
block|{
return|return
name|m_data
operator|.
name|hwnd
operator|&&
name|IsWindowVisible
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// partially from QWidgetPrivate::show_sys()
end_comment
begin_function
DECL|function|show_sys
name|void
name|QWindowsWindow
operator|::
name|show_sys
parameter_list|()
specifier|const
block|{
name|int
name|sm
init|=
name|SW_SHOWNORMAL
decl_stmt|;
name|bool
name|fakedMaximize
init|=
literal|false
decl_stmt|;
specifier|const
name|QWindow
modifier|*
name|w
init|=
name|window
argument_list|()
decl_stmt|;
specifier|const
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|w
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
specifier|const
name|Qt
operator|::
name|WindowType
name|type
init|=
name|w
operator|->
name|windowType
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|isTopLevel
argument_list|()
condition|)
block|{
specifier|const
name|Qt
operator|::
name|WindowState
name|state
init|=
name|w
operator|->
name|windowState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
name|sm
operator|=
name|SW_SHOWMINIMIZED
expr_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
name|sm
operator|=
name|SW_SHOWMINNOACTIVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
name|sm
operator|=
name|SW_SHOWMAXIMIZED
expr_stmt|;
comment|// Windows will not behave correctly when we try to maximize a window which does not
comment|// have minimize nor maximize buttons in the window frame. Windows would then ignore
comment|// non-available geometry, and rather maximize the widget to the full screen, minus the
comment|// window frame (caption). So, we do a trick here, by adding a maximize button before
comment|// maximizing the widget, and then remove the maximize button afterwards.
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|&&
operator|!
operator|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|)
condition|)
block|{
name|fakedMaximize
operator|=
name|TRUE
expr_stmt|;
name|setStyle
argument_list|(
name|style
argument_list|()
operator||
name|WS_MAXIMIZEBOX
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|type
operator|==
name|Qt
operator|::
name|Tool
condition|)
name|sm
operator|=
name|SW_SHOWNOACTIVATE
expr_stmt|;
name|ShowWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|sm
argument_list|)
expr_stmt|;
if|if
condition|(
name|fakedMaximize
condition|)
block|{
name|setStyle
argument_list|(
name|style
argument_list|()
operator|&
operator|~
name|WS_MAXIMIZEBOX
argument_list|)
expr_stmt|;
name|SetWindowPos
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
operator||
name|SWP_NOZORDER
operator||
name|SWP_NOOWNERZORDER
operator||
name|SWP_FRAMECHANGED
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// partially from QWidgetPrivate::hide_sys()
end_comment
begin_function
DECL|function|hide_sys
name|void
name|QWindowsWindow
operator|::
name|hide_sys
parameter_list|()
specifier|const
block|{
specifier|const
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|!=
name|Qt
operator|::
name|Desktop
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|Popup
condition|)
name|ShowWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|SW_HIDE
argument_list|)
expr_stmt|;
else|else
name|SetWindowPos
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_HIDEWINDOW
operator||
name|SWP_NOSIZE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOZORDER
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setParent
name|void
name|QWindowsWindow
operator|::
name|setParent
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|newParent
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|window
argument_list|()
operator|<<
name|newParent
expr_stmt|;
if|if
condition|(
name|newParent
operator|!=
name|parent
argument_list|()
operator|&&
name|m_data
operator|.
name|hwnd
condition|)
name|setParent_sys
argument_list|(
name|newParent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setParent_sys
name|void
name|QWindowsWindow
operator|::
name|setParent_sys
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|parent
parameter_list|)
specifier|const
block|{
name|HWND
name|parentHWND
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|parent
condition|)
block|{
specifier|const
name|QWindowsWindow
modifier|*
name|parentW
init|=
cast|static_cast
argument_list|<
specifier|const
name|QWindowsWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|parentHWND
operator|=
name|parentW
operator|->
name|handle
argument_list|()
expr_stmt|;
block|}
specifier|const
name|bool
name|wasTopLevel
init|=
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isTopLevel
init|=
name|parentHWND
operator|==
literal|0
decl_stmt|;
name|setFlag
argument_list|(
name|WithinSetParent
argument_list|)
expr_stmt|;
name|SetParent
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|parentHWND
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|WithinSetParent
argument_list|)
expr_stmt|;
comment|// WS_CHILD/WS_POPUP must be manually set/cleared in addition
comment|// to dialog frames, etc (see  SetParent() ) if the top level state changes.
if|if
condition|(
name|wasTopLevel
operator|!=
name|isTopLevel
condition|)
block|{
specifier|const
name|unsigned
name|flags
init|=
name|isTopLevel
condition|?
name|unsigned
argument_list|(
literal|0
argument_list|)
else|:
name|unsigned
argument_list|(
name|WindowCreationData
operator|::
name|ForceChild
argument_list|)
decl_stmt|;
name|setWindowFlags_sys
argument_list|(
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleShown
name|void
name|QWindowsWindow
operator|::
name|handleShown
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleMapEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleHidden
name|void
name|QWindowsWindow
operator|::
name|handleHidden
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleUnmapEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QWindowsWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rectIn
parameter_list|)
block|{
name|QRect
name|rect
init|=
name|rectIn
decl_stmt|;
comment|// This means it is a call from QWindow::setFramePos() and
comment|// the coordinates include the frame (size is still the contents rectangle).
if|if
condition|(
name|qt_window_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|positionPolicy
operator|==
name|QWindowPrivate
operator|::
name|WindowFrameInclusive
condition|)
block|{
specifier|const
name|QMargins
name|margins
init|=
name|frameMargins
argument_list|()
decl_stmt|;
name|rect
operator|.
name|moveTopLeft
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|margins
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QSize
name|oldSize
init|=
name|m_data
operator|.
name|geometry
operator|.
name|size
argument_list|()
decl_stmt|;
name|m_data
operator|.
name|geometry
operator|=
name|rect
expr_stmt|;
specifier|const
name|QSize
name|newSize
init|=
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Check on hint.
if|if
condition|(
name|newSize
operator|!=
name|oldSize
condition|)
block|{
specifier|const
name|QWindowsGeometryHint
name|hint
argument_list|(
name|window
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hint
operator|.
name|validSize
argument_list|(
name|newSize
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Attempt to set a size (%dx%d) violating the constraints"
literal|"(%dx%d - %dx%d) on window '%s'."
argument_list|,
name|__FUNCTION__
argument_list|,
name|newSize
operator|.
name|width
argument_list|()
argument_list|,
name|newSize
operator|.
name|height
argument_list|()
argument_list|,
name|hint
operator|.
name|minimumSize
operator|.
name|width
argument_list|()
argument_list|,
name|hint
operator|.
name|minimumSize
operator|.
name|height
argument_list|()
argument_list|,
name|hint
operator|.
name|maximumSize
operator|.
name|width
argument_list|()
argument_list|,
name|hint
operator|.
name|maximumSize
operator|.
name|height
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|window
argument_list|()
operator|->
name|objectName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
comment|// A ResizeEvent with resulting geometry will be sent. If we cannot
comment|// achieve that size (for example, window title minimal constraint),
comment|// notify and warn.
name|setGeometry_sys
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|geometry
operator|!=
name|rect
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Unable to set geometry %dx%d+%d+%d on '%s'."
literal|" Resulting geometry:  %dx%d+%d+%d "
literal|"(frame: %d, %d, %d, %d)."
argument_list|,
name|__FUNCTION__
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|window
argument_list|()
operator|->
name|objectName
argument_list|()
argument_list|)
argument_list|,
name|m_data
operator|.
name|geometry
operator|.
name|width
argument_list|()
argument_list|,
name|m_data
operator|.
name|geometry
operator|.
name|height
argument_list|()
argument_list|,
name|m_data
operator|.
name|geometry
operator|.
name|x
argument_list|()
argument_list|,
name|m_data
operator|.
name|geometry
operator|.
name|y
argument_list|()
argument_list|,
name|m_data
operator|.
name|frame
operator|.
name|left
argument_list|()
argument_list|,
name|m_data
operator|.
name|frame
operator|.
name|top
argument_list|()
argument_list|,
name|m_data
operator|.
name|frame
operator|.
name|right
argument_list|()
argument_list|,
name|m_data
operator|.
name|frame
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleMoved
name|void
name|QWindowsWindow
operator|::
name|handleMoved
parameter_list|()
block|{
comment|// Minimize/Set parent can send nonsensical move events.
if|if
condition|(
operator|!
name|IsIconic
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
operator|&&
operator|!
name|testFlag
argument_list|(
name|WithinSetParent
argument_list|)
condition|)
name|handleGeometryChange
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleResized
name|void
name|QWindowsWindow
operator|::
name|handleResized
parameter_list|(
name|int
name|wParam
parameter_list|)
block|{
switch|switch
condition|(
name|wParam
condition|)
block|{
case|case
name|SIZE_MAXHIDE
case|:
comment|// Some other window affected.
case|case
name|SIZE_MAXSHOW
case|:
return|return;
case|case
name|SIZE_MINIMIZED
case|:
name|handleWindowStateChange
argument_list|(
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
return|return;
case|case
name|SIZE_MAXIMIZED
case|:
name|handleWindowStateChange
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|handleGeometryChange
argument_list|()
expr_stmt|;
break|break;
case|case
name|SIZE_RESTORED
case|:
if|if
condition|(
name|m_windowState
operator|!=
name|Qt
operator|::
name|WindowNoState
condition|)
name|handleWindowStateChange
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|handleGeometryChange
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|handleGeometryChange
name|void
name|QWindowsWindow
operator|::
name|handleGeometryChange
parameter_list|()
block|{
name|m_data
operator|.
name|geometry
operator|=
name|geometry_sys
argument_list|()
expr_stmt|;
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|m_data
operator|.
name|geometry
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|m_data
operator|.
name|geometry
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseEvents
operator|||
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|m_data
operator|.
name|geometry
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometry_sys
name|void
name|QWindowsWindow
operator|::
name|setGeometry_sys
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
specifier|const
name|QMargins
name|margins
init|=
name|frameMargins
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|frameGeometry
init|=
name|rect
operator|+
name|margins
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
literal|"    \n from "
operator|<<
name|geometry_sys
argument_list|()
operator|<<
literal|" frame: "
operator|<<
name|margins
operator|<<
literal|" to "
operator|<<
name|rect
operator|<<
literal|" new frame: "
operator|<<
name|frameGeometry
expr_stmt|;
specifier|const
name|bool
name|rc
init|=
name|MoveWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|frameGeometry
operator|.
name|x
argument_list|()
argument_list|,
name|frameGeometry
operator|.
name|y
argument_list|()
argument_list|,
name|frameGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|frameGeometry
operator|.
name|height
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
literal|'<'
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
literal|"    \n resulting "
operator|<<
name|rc
operator|<<
name|geometry_sys
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|frameGeometry_sys
name|QRect
name|QWindowsWindow
operator|::
name|frameGeometry_sys
parameter_list|()
specifier|const
block|{
comment|// Warning: Returns bogus values when minimized.
return|return
name|frameGeometry
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|geometry_sys
name|QRect
name|QWindowsWindow
operator|::
name|geometry_sys
parameter_list|()
specifier|const
block|{
return|return
name|frameGeometry_sys
argument_list|()
operator|-
name|frameMargins
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Allocates a HDC for the window or returns the temporary one     obtained from WinAPI BeginPaint within a WM_PAINT event.      \sa releaseDC() */
end_comment
begin_function
DECL|function|getDC
name|HDC
name|QWindowsWindow
operator|::
name|getDC
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_hdc
condition|)
name|m_hdc
operator|=
name|GetDC
argument_list|(
name|handle
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m_hdc
return|;
block|}
end_function
begin_comment
comment|/*!     Relases the HDC for the window or does nothing in     case it was obtained from WinAPI BeginPaint within a WM_PAINT event.      \sa getDC() */
end_comment
begin_function
DECL|function|releaseDC
name|void
name|QWindowsWindow
operator|::
name|releaseDC
parameter_list|()
block|{
if|if
condition|(
name|m_hdc
operator|&&
operator|!
name|testFlag
argument_list|(
name|WithinWmPaint
argument_list|)
condition|)
block|{
name|ReleaseDC
argument_list|(
name|handle
argument_list|()
argument_list|,
name|m_hdc
argument_list|)
expr_stmt|;
name|m_hdc
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleWmPaint
name|bool
name|QWindowsWindow
operator|::
name|handleWmPaint
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|UINT
name|message
parameter_list|,
name|WPARAM
parameter_list|,
name|LPARAM
parameter_list|)
block|{
comment|// Ignore invalid update bounding rectangles
if|if
condition|(
operator|!
name|GetUpdateRect
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
literal|0
argument_list|,
name|FALSE
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|message
operator|==
name|WM_ERASEBKGND
condition|)
comment|// Backing store - ignored.
return|return
literal|true
return|;
name|PAINTSTRUCT
name|ps
decl_stmt|;
if|if
condition|(
name|testFlag
argument_list|(
name|OpenGLSurface
argument_list|)
condition|)
block|{
comment|// Observed painting problems with Aero style disabled (QTBUG-7865).
if|if
condition|(
name|testFlag
argument_list|(
name|OpenGLDoubleBuffered
argument_list|)
condition|)
name|InvalidateRect
argument_list|(
name|hwnd
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|BeginPaint
argument_list|(
name|hwnd
argument_list|,
operator|&
name|ps
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleSynchronousExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRegion
argument_list|(
name|qrectFromRECT
argument_list|(
name|ps
operator|.
name|rcPaint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|EndPaint
argument_list|(
name|hwnd
argument_list|,
operator|&
name|ps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|releaseDC
argument_list|()
expr_stmt|;
name|m_hdc
operator|=
name|BeginPaint
argument_list|(
name|hwnd
argument_list|,
operator|&
name|ps
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|WithinWmPaint
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|updateRect
init|=
name|qrectFromRECT
argument_list|(
name|ps
operator|.
name|rcPaint
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseIntegration
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|updateRect
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleSynchronousExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRegion
argument_list|(
name|updateRect
argument_list|)
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|WithinWmPaint
argument_list|)
expr_stmt|;
name|m_hdc
operator|=
literal|0
expr_stmt|;
name|EndPaint
argument_list|(
name|hwnd
argument_list|,
operator|&
name|ps
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setWindowTitle
name|void
name|QWindowsWindow
operator|::
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|title
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
name|SetWindowText
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
operator|(
specifier|const
name|wchar_t
operator|*
operator|)
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowFlags
name|Qt
operator|::
name|WindowFlags
name|QWindowsWindow
operator|::
name|setWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
literal|"\n    from: "
operator|<<
name|QWindowsWindow
operator|::
name|debugWindowFlags
argument_list|(
name|m_data
operator|.
name|flags
argument_list|)
operator|<<
literal|"\n    to: "
operator|<<
name|QWindowsWindow
operator|::
name|debugWindowFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|flags
operator|!=
name|flags
condition|)
block|{
name|m_data
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
name|m_data
operator|=
name|setWindowFlags_sys
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
literal|'<'
operator|<<
name|__FUNCTION__
operator|<<
literal|"\n    returns: "
operator|<<
name|QWindowsWindow
operator|::
name|debugWindowFlags
argument_list|(
name|m_data
operator|.
name|flags
argument_list|)
expr_stmt|;
return|return
name|m_data
operator|.
name|flags
return|;
block|}
end_function
begin_function
DECL|function|setWindowFlags_sys
name|QWindowsWindow
operator|::
name|WindowData
name|QWindowsWindow
operator|::
name|setWindowFlags_sys
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|wt
parameter_list|,
name|unsigned
name|flags
parameter_list|)
specifier|const
block|{
comment|// Geometry changes have not been observed here. Frames change, though.
name|WindowCreationData
name|creationData
decl_stmt|;
name|creationData
operator|.
name|fromWindow
argument_list|(
name|window
argument_list|()
argument_list|,
name|wt
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|creationData
operator|.
name|applyWindowFlags
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|creationData
operator|.
name|initialize
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|WindowData
name|result
init|=
name|m_data
decl_stmt|;
name|result
operator|.
name|flags
operator|=
name|creationData
operator|.
name|flags
expr_stmt|;
name|setFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|handleWindowStateChange
name|void
name|QWindowsWindow
operator|::
name|handleWindowStateChange
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
literal|"\n    from "
operator|<<
name|debugWindowStates
argument_list|(
name|m_windowState
argument_list|)
operator|<<
literal|" to "
operator|<<
name|debugWindowStates
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
name|m_windowState
operator|=
name|state
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowStateChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|Qt
operator|::
name|WindowState
name|QWindowsWindow
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
name|setWindowState_sys
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|m_windowState
operator|=
name|state
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|windowState_sys
name|Qt
operator|::
name|WindowState
name|QWindowsWindow
operator|::
name|windowState_sys
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|IsIconic
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
condition|)
return|return
name|Qt
operator|::
name|WindowMinimized
return|;
if|if
condition|(
name|IsZoomed
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
condition|)
return|return
name|Qt
operator|::
name|WindowMaximized
return|;
if|if
condition|(
name|geometry_sys
argument_list|()
operator|==
name|window
argument_list|()
operator|->
name|screen
argument_list|()
operator|->
name|geometry
argument_list|()
condition|)
return|return
name|Qt
operator|::
name|WindowFullScreen
return|;
return|return
name|Qt
operator|::
name|WindowNoState
return|;
block|}
end_function
begin_function
DECL|function|windowStates_sys
name|Qt
operator|::
name|WindowStates
name|QWindowsWindow
operator|::
name|windowStates_sys
parameter_list|()
specifier|const
block|{
name|Qt
operator|::
name|WindowStates
name|result
init|=
name|windowState_sys
argument_list|()
decl_stmt|;
if|if
condition|(
name|GetActiveWindow
argument_list|()
operator|==
name|m_data
operator|.
name|hwnd
condition|)
name|result
operator||=
name|Qt
operator|::
name|WindowActive
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Change the window state.      \note Window frames change when maximized;     the top margin shrinks somewhat but that cannot be obtained using     AdjustWindowRectEx().      \note Some calls to SetWindowLong require a subsequent call     to ShowWindow. */
end_comment
begin_function
DECL|function|setWindowState_sys
name|void
name|QWindowsWindow
operator|::
name|setWindowState_sys
parameter_list|(
name|Qt
operator|::
name|WindowState
name|newState
parameter_list|)
block|{
specifier|const
name|Qt
operator|::
name|WindowStates
name|oldStates
init|=
name|windowStates_sys
argument_list|()
decl_stmt|;
comment|// Maintain the active flag as the platform window API does not
comment|// use it.
name|Qt
operator|::
name|WindowStates
name|newStates
init|=
name|newState
decl_stmt|;
if|if
condition|(
name|oldStates
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|newStates
operator||=
name|Qt
operator|::
name|WindowActive
expr_stmt|;
if|if
condition|(
name|oldStates
operator|==
name|newStates
condition|)
return|return;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
literal|" from "
operator|<<
name|debugWindowStates
argument_list|(
name|oldStates
argument_list|)
operator|<<
literal|" to "
operator|<<
name|debugWindowStates
argument_list|(
name|newStates
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|isActive
init|=
name|newStates
operator|&
name|Qt
operator|::
name|WindowActive
decl_stmt|;
specifier|const
name|int
name|max
init|=
name|isActive
condition|?
name|SW_SHOWMAXIMIZED
else|:
name|SW_MAXIMIZE
decl_stmt|;
specifier|const
name|int
name|normal
init|=
name|isActive
condition|?
name|SW_SHOWNORMAL
else|:
name|SW_SHOWNOACTIVATE
decl_stmt|;
specifier|const
name|int
name|min
init|=
name|isActive
condition|?
name|SW_SHOWMINIMIZED
else|:
name|SW_MINIMIZE
decl_stmt|;
specifier|const
name|bool
name|visible
init|=
name|isVisible
argument_list|()
decl_stmt|;
name|setFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|oldStates
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|!=
operator|(
name|newStates
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
block|{
if|if
condition|(
name|visible
operator|&&
operator|!
operator|(
name|newStates
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
name|ShowWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
operator|(
name|newStates
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|max
else|:
name|normal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|oldStates
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
operator|!=
operator|(
name|newStates
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
block|{
if|if
condition|(
name|newStates
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_FLATTEN_EXPOSE
name|UINT
name|newStyle
init|=
name|WS_CLIPCHILDREN
operator||
name|WS_CLIPSIBLINGS
operator||
name|WS_POPUP
decl_stmt|;
else|#
directive|else
name|UINT
name|newStyle
init|=
name|WS_POPUP
decl_stmt|;
endif|#
directive|endif
comment|// Save geometry and style to be restored when fullscreen
comment|// is turned off again, since on Windows, it is not a real
comment|// Window state but emulated by changing geometry and style.
name|m_savedStyle
operator|=
name|style
argument_list|()
expr_stmt|;
name|m_savedFrameGeometry
operator|=
name|frameGeometry_sys
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_savedStyle
operator|&
name|WS_SYSMENU
condition|)
name|newStyle
operator||=
name|WS_SYSMENU
expr_stmt|;
if|if
condition|(
name|visible
condition|)
name|newStyle
operator||=
name|WS_VISIBLE
expr_stmt|;
name|setStyle
argument_list|(
name|newStyle
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|r
init|=
name|window
argument_list|()
operator|->
name|screen
argument_list|()
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|UINT
name|swpf
init|=
name|SWP_FRAMECHANGED
decl_stmt|;
if|if
condition|(
name|newStates
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|swpf
operator||=
name|SWP_NOACTIVATE
expr_stmt|;
name|SetWindowPos
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|HWND_TOP
argument_list|,
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|swpf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Restore saved state.
name|unsigned
name|newStyle
init|=
name|m_savedStyle
condition|?
name|m_savedStyle
else|:
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|visible
condition|)
name|newStyle
operator||=
name|WS_VISIBLE
expr_stmt|;
name|setStyle
argument_list|(
name|newStyle
argument_list|)
expr_stmt|;
name|UINT
name|swpf
init|=
name|SWP_FRAMECHANGED
operator||
name|SWP_NOZORDER
decl_stmt|;
if|if
condition|(
name|newStates
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|swpf
operator||=
name|SWP_NOACTIVATE
expr_stmt|;
if|if
condition|(
operator|!
name|m_savedFrameGeometry
operator|.
name|isValid
argument_list|()
condition|)
name|swpf
operator||=
name|SWP_NOSIZE
operator||
name|SWP_NOMOVE
expr_stmt|;
name|SetWindowPos
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
literal|0
argument_list|,
name|m_savedFrameGeometry
operator|.
name|x
argument_list|()
argument_list|,
name|m_savedFrameGeometry
operator|.
name|y
argument_list|()
argument_list|,
name|m_savedFrameGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|m_savedFrameGeometry
operator|.
name|height
argument_list|()
argument_list|,
name|swpf
argument_list|)
expr_stmt|;
comment|// preserve maximized state
if|if
condition|(
name|visible
condition|)
name|ShowWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
operator|(
name|newStates
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|max
else|:
name|normal
argument_list|)
expr_stmt|;
name|m_savedStyle
operator|=
literal|0
expr_stmt|;
name|m_savedFrameGeometry
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|oldStates
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|!=
operator|(
name|newStates
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
if|if
condition|(
name|visible
condition|)
name|ShowWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
operator|(
name|newStates
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|?
name|min
else|:
operator|(
name|newStates
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|max
else|:
name|normal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
literal|'<'
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|debugWindowStates
argument_list|(
name|newStates
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setStyle
name|void
name|QWindowsWindow
operator|::
name|setStyle
parameter_list|(
name|unsigned
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|debugWinStyle
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
name|SetWindowLongPtr
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|GWL_STYLE
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setExStyle
name|void
name|QWindowsWindow
operator|::
name|setExStyle
parameter_list|(
name|unsigned
name|s
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|this
operator|<<
literal|' '
operator|<<
name|window
argument_list|()
operator|<<
literal|" 0x"
operator|<<
name|QByteArray
operator|::
name|number
argument_list|(
name|s
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
name|SetWindowLongPtr
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|raise
name|void
name|QWindowsWindow
operator|::
name|raise
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
expr_stmt|;
name|SetWindowPos
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|HWND_TOP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lower
name|void
name|QWindowsWindow
operator|::
name|lower
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
name|SetWindowPos
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|HWND_BOTTOM
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|propagateSizeHints
name|void
name|QWindowsWindow
operator|::
name|propagateSizeHints
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|frameMargins
name|QMargins
name|QWindowsWindow
operator|::
name|frameMargins
parameter_list|()
specifier|const
block|{
comment|// Frames are invalidated by style changes (window state, flags).
comment|// As they are also required for geometry calculations in resize
comment|// event sequences, introduce a dirty flag mechanism to be able
comment|// to cache results.
if|if
condition|(
name|testFlag
argument_list|(
name|FrameDirty
argument_list|)
condition|)
block|{
name|m_data
operator|.
name|frame
operator|=
name|QWindowsGeometryHint
operator|::
name|frame
argument_list|(
name|style
argument_list|()
argument_list|,
name|exStyle
argument_list|()
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
block|}
return|return
name|m_data
operator|.
name|frame
return|;
block|}
end_function
begin_function
DECL|function|setOpacity
name|void
name|QWindowsWindow
operator|::
name|setOpacity
parameter_list|(
name|qreal
name|level
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|level
expr_stmt|;
if|if
condition|(
name|m_opacity
operator|!=
name|level
condition|)
block|{
name|m_opacity
operator|=
name|level
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
name|setOpacity_sys
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setOpacity_sys
name|void
name|QWindowsWindow
operator|::
name|setOpacity_sys
parameter_list|(
name|qreal
name|level
parameter_list|)
specifier|const
block|{
specifier|const
name|long
name|wl
init|=
name|GetWindowLong
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|isOpaque
init|=
name|level
operator|==
literal|1.0
decl_stmt|;
if|if
condition|(
name|isOpaque
condition|)
block|{
if|if
condition|(
name|wl
operator|&
name|WS_EX_LAYERED
condition|)
name|SetWindowLong
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|wl
operator|&
operator|~
name|WS_EX_LAYERED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|wl
operator|&
name|WS_EX_LAYERED
operator|)
operator|==
literal|0
condition|)
name|SetWindowLong
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|wl
operator||
name|WS_EX_LAYERED
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
block|{
name|BLENDFUNCTION
name|blend
init|=
block|{
name|AC_SRC_OVER
block|,
literal|0
block|,
call|(
name|int
call|)
argument_list|(
literal|255.0
operator|*
name|level
argument_list|)
block|,
name|AC_SRC_ALPHA
block|}
decl_stmt|;
name|QWindowsContext
operator|::
name|user32dll
operator|.
name|updateLayeredWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|blend
argument_list|,
name|ULW_ALPHA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowsContext
operator|::
name|user32dll
operator|.
name|setLayeredWindowAttributes
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
literal|0
argument_list|,
call|(
name|int
call|)
argument_list|(
name|level
operator|*
literal|255
argument_list|)
argument_list|,
name|LWA_ALPHA
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|requestActivateWindow
name|void
name|QWindowsWindow
operator|::
name|requestActivateWindow
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
expr_stmt|;
comment|// 'Active' state handling is based in focus since it needs to work for
comment|// child windows as well.
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
name|SetForegroundWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|SetFocus
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setKeyboardGrabEnabled
name|bool
name|QWindowsWindow
operator|::
name|setKeyboardGrabEnabled
parameter_list|(
name|bool
name|grab
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_data
operator|.
name|hwnd
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: No handle"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|grab
expr_stmt|;
name|QWindowsContext
modifier|*
name|context
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|grab
condition|)
block|{
name|context
operator|->
name|setKeyGrabber
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|context
operator|->
name|keyGrabber
argument_list|()
operator|==
name|window
argument_list|()
condition|)
name|context
operator|->
name|setKeyGrabber
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setMouseGrabEnabled
name|bool
name|QWindowsWindow
operator|::
name|setMouseGrabEnabled
parameter_list|(
name|bool
name|grab
parameter_list|)
block|{
name|bool
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|m_data
operator|.
name|hwnd
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: No handle"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|window
argument_list|()
operator|<<
name|grab
expr_stmt|;
if|if
condition|(
name|m_mouseGrab
operator|!=
name|grab
condition|)
block|{
name|m_mouseGrab
operator|=
name|grab
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|setMouseGrabEnabled_sys
argument_list|(
name|grab
argument_list|)
expr_stmt|;
block|}
return|return
name|grab
return|;
block|}
end_function
begin_function
DECL|function|setMouseGrabEnabled_sys
name|void
name|QWindowsWindow
operator|::
name|setMouseGrabEnabled_sys
parameter_list|(
name|bool
name|grab
parameter_list|)
block|{
if|if
condition|(
name|grab
condition|)
block|{
name|SetCapture
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ReleaseCapture
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getSizeHints
name|void
name|QWindowsWindow
operator|::
name|getSizeHints
parameter_list|(
name|MINMAXINFO
modifier|*
name|mmi
parameter_list|)
specifier|const
block|{
specifier|const
name|QWindowsGeometryHint
name|hint
argument_list|(
name|window
argument_list|()
argument_list|)
decl_stmt|;
name|hint
operator|.
name|applyToMinMaxInfo
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|mmi
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|window
argument_list|()
operator|<<
operator|*
name|mmi
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \brief Applies to cursor property set on the window to the global cursor     unless there is an override cursor.      \sa QWindowsCursor */
end_comment
begin_function
DECL|function|applyCursor
name|void
name|QWindowsWindow
operator|::
name|applyCursor
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|overrideCursor
argument_list|()
condition|)
name|SetCursor
argument_list|(
name|m_cursor
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCursor
name|void
name|QWindowsWindow
operator|::
name|setCursor
parameter_list|(
specifier|const
name|QWindowsWindowCursor
modifier|&
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|handle
argument_list|()
operator|!=
name|m_cursor
operator|.
name|handle
argument_list|()
condition|)
block|{
specifier|const
name|bool
name|underMouse
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|windowUnderMouse
argument_list|()
operator|==
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|<<
name|window
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|"Shape="
operator|<<
name|c
operator|.
name|cursor
argument_list|()
operator|.
name|shape
argument_list|()
operator|<<
literal|" isWUM="
operator|<<
name|underMouse
expr_stmt|;
name|m_cursor
operator|=
name|c
expr_stmt|;
if|if
condition|(
name|underMouse
condition|)
name|applyCursor
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \brief Find a child window using flags from  ChildWindowFromPointEx. */
end_comment
begin_function
DECL|function|childAtScreenPoint
name|QWindowsWindow
modifier|*
name|QWindowsWindow
operator|::
name|childAtScreenPoint
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|screenPoint
parameter_list|,
name|unsigned
name|cwexflags
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
return|return
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|findPlatformWindowAt
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|screenPoint
argument_list|,
name|cwexflags
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|QWindowsWindow
modifier|*
name|QWindowsWindow
operator|::
name|childAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|clientPoint
parameter_list|,
name|unsigned
name|cwexflags
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
return|return
name|childAtScreenPoint
argument_list|(
name|QWindowsGeometryHint
operator|::
name|mapToGlobal
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|clientPoint
argument_list|)
argument_list|,
name|cwexflags
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|debugWindowFlags
name|QByteArray
name|QWindowsWindow
operator|::
name|debugWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|wf
parameter_list|)
block|{
specifier|const
name|int
name|iwf
init|=
name|int
argument_list|(
name|wf
argument_list|)
decl_stmt|;
name|QByteArray
name|rc
init|=
literal|"0x"
decl_stmt|;
name|rc
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|iwf
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|rc
operator|+=
literal|" ["
expr_stmt|;
switch|switch
condition|(
operator|(
name|iwf
operator|&
name|Qt
operator|::
name|WindowType_Mask
operator|)
condition|)
block|{
case|case
name|Qt
operator|::
name|Widget
case|:
name|rc
operator|+=
literal|" Widget"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Window
case|:
name|rc
operator|+=
literal|" Window"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Dialog
case|:
name|rc
operator|+=
literal|" Dialog"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Sheet
case|:
name|rc
operator|+=
literal|" Sheet"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Popup
case|:
name|rc
operator|+=
literal|" Popup"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Tool
case|:
name|rc
operator|+=
literal|" Tool"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ToolTip
case|:
name|rc
operator|+=
literal|" ToolTip"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SplashScreen
case|:
name|rc
operator|+=
literal|" SplashScreen"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Desktop
case|:
name|rc
operator|+=
literal|" Desktop"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SubWindow
case|:
name|rc
operator|+=
literal|" SubWindow"
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
condition|)
name|rc
operator|+=
literal|" MSWindowsFixedSizeDialogHint"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|MSWindowsOwnDC
condition|)
name|rc
operator|+=
literal|" MSWindowsOwnDC"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
name|rc
operator|+=
literal|" FramelessWindowHint"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|rc
operator|+=
literal|" WindowTitleHint"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|rc
operator|+=
literal|" WindowSystemMenuHint"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
name|rc
operator|+=
literal|" WindowMinimizeButtonHint"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
name|rc
operator|+=
literal|" WindowMaximizeButtonHint"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|rc
operator|+=
literal|" WindowContextHelpButtonHint"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
condition|)
name|rc
operator|+=
literal|" WindowShadeButtonHint"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
condition|)
name|rc
operator|+=
literal|" WindowStaysOnTopHint"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
condition|)
name|rc
operator|+=
literal|" CustomizeWindowHint"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
name|rc
operator|+=
literal|" WindowStaysOnBottomHint"
expr_stmt|;
if|if
condition|(
name|iwf
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|rc
operator|+=
literal|" WindowCloseButtonHint"
expr_stmt|;
name|rc
operator|+=
literal|']'
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
