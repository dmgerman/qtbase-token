begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsnativeimage.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdrag.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsscreen.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsintegration.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsnativeinterface.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsopenglcontext.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_CURSOR
end_ifdef
begin_include
include|#
directive|include
file|"qwindowscursor.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<QtGui/QRegion>
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLContext>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindow_p.h>
end_include
begin_comment
comment|// QWINDOWSIZE_MAX
end_comment
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qhighdpiscaling_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|enum
type|{
DECL|enumerator|defaultWindowWidth
name|defaultWindowWidth
init|=
literal|160
decl_stmt|,
DECL|enumerator|defaultWindowHeight
name|defaultWindowHeight
init|=
literal|160
end_decl_stmt
begin_function_decl
DECL|enumerator|defaultWindowHeight
unit|};
name|Q_GUI_EXPORT
name|HICON
name|qt_pixmapToWinHICON
parameter_list|(
specifier|const
name|QPixmap
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|debugWinStyle
specifier|static
name|QByteArray
name|debugWinStyle
parameter_list|(
name|DWORD
name|style
parameter_list|)
block|{
name|QByteArray
name|rc
init|=
literal|"0x"
decl_stmt|;
name|rc
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|qulonglong
argument_list|(
name|style
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_POPUP
condition|)
name|rc
operator|+=
literal|" WS_POPUP"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_CHILD
condition|)
name|rc
operator|+=
literal|" WS_CHILD"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_OVERLAPPED
condition|)
name|rc
operator|+=
literal|" WS_OVERLAPPED"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_CLIPSIBLINGS
condition|)
name|rc
operator|+=
literal|" WS_CLIPSIBLINGS"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_CLIPCHILDREN
condition|)
name|rc
operator|+=
literal|" WS_CLIPCHILDREN"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_THICKFRAME
condition|)
name|rc
operator|+=
literal|" WS_THICKFRAME"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_DLGFRAME
condition|)
name|rc
operator|+=
literal|" WS_DLGFRAME"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_SYSMENU
condition|)
name|rc
operator|+=
literal|" WS_SYSMENU"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_MINIMIZEBOX
condition|)
name|rc
operator|+=
literal|" WS_MINIMIZEBOX"
expr_stmt|;
if|if
condition|(
name|style
operator|&
name|WS_MAXIMIZEBOX
condition|)
name|rc
operator|+=
literal|" WS_MAXIMIZEBOX"
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function
begin_function
DECL|function|debugWinExStyle
specifier|static
name|QByteArray
name|debugWinExStyle
parameter_list|(
name|DWORD
name|exStyle
parameter_list|)
block|{
name|QByteArray
name|rc
init|=
literal|"0x"
decl_stmt|;
name|rc
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
name|qulonglong
argument_list|(
name|exStyle
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
name|exStyle
operator|&
name|WS_EX_TOOLWINDOW
condition|)
name|rc
operator|+=
literal|" WS_EX_TOOLWINDOW"
expr_stmt|;
if|if
condition|(
name|exStyle
operator|&
name|WS_EX_CONTEXTHELP
condition|)
name|rc
operator|+=
literal|" WS_EX_CONTEXTHELP"
expr_stmt|;
if|if
condition|(
name|exStyle
operator|&
name|WS_EX_LAYERED
condition|)
name|rc
operator|+=
literal|" WS_EX_LAYERED"
expr_stmt|;
if|if
condition|(
name|exStyle
operator|&
name|WS_EX_DLGMODALFRAME
condition|)
name|rc
operator|+=
literal|" WS_EX_DLGMODALFRAME"
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function
begin_function
DECL|function|qSizeOfRect
specifier|static
specifier|inline
name|QSize
name|qSizeOfRect
parameter_list|(
specifier|const
name|RECT
modifier|&
name|rect
parameter_list|)
block|{
return|return
name|QSize
argument_list|(
name|rect
operator|.
name|right
operator|-
name|rect
operator|.
name|left
argument_list|,
name|rect
operator|.
name|bottom
operator|-
name|rect
operator|.
name|top
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qrectFromRECT
specifier|static
specifier|inline
name|QRect
name|qrectFromRECT
parameter_list|(
specifier|const
name|RECT
modifier|&
name|rect
parameter_list|)
block|{
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|rect
operator|.
name|left
argument_list|,
name|rect
operator|.
name|top
argument_list|)
argument_list|,
name|qSizeOfRect
argument_list|(
name|rect
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|RECTfromQRect
specifier|static
specifier|inline
name|RECT
name|RECTfromQRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|int
name|x
init|=
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|int
name|y
init|=
name|rect
operator|.
name|top
argument_list|()
decl_stmt|;
name|RECT
name|result
init|=
block|{
name|x
block|,
name|y
block|,
name|x
operator|+
name|rect
operator|.
name|width
argument_list|()
block|,
name|y
operator|+
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|RECT
modifier|&
name|r
parameter_list|)
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|d
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|d
operator|<<
literal|"RECT: left/top="
operator|<<
name|r
operator|.
name|left
operator|<<
literal|','
operator|<<
name|r
operator|.
name|top
operator|<<
literal|" right/bottom="
operator|<<
name|r
operator|.
name|right
operator|<<
literal|','
operator|<<
name|r
operator|.
name|bottom
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|POINT
modifier|&
name|p
parameter_list|)
block|{
name|d
operator|<<
name|p
operator|.
name|x
operator|<<
literal|','
operator|<<
name|p
operator|.
name|y
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|NCCALCSIZE_PARAMS
modifier|&
name|p
parameter_list|)
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|d
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|d
operator|<<
literal|"NCCALCSIZE_PARAMS "
operator|<<
name|qrectFromRECT
argument_list|(
name|p
operator|.
name|rgrc
index|[
literal|0
index|]
argument_list|)
operator|<<
literal|' '
operator|<<
name|qrectFromRECT
argument_list|(
name|p
operator|.
name|rgrc
index|[
literal|1
index|]
argument_list|)
operator|<<
literal|' '
operator|<<
name|qrectFromRECT
argument_list|(
name|p
operator|.
name|rgrc
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|MINMAXINFO
modifier|&
name|i
parameter_list|)
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|d
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|d
operator|<<
literal|"MINMAXINFO maxSize="
operator|<<
name|i
operator|.
name|ptMaxSize
operator|.
name|x
operator|<<
literal|','
operator|<<
name|i
operator|.
name|ptMaxSize
operator|.
name|y
operator|<<
literal|" maxpos="
operator|<<
name|i
operator|.
name|ptMaxPosition
operator|.
name|x
operator|<<
literal|','
operator|<<
name|i
operator|.
name|ptMaxPosition
operator|.
name|y
operator|<<
literal|" mintrack="
operator|<<
name|i
operator|.
name|ptMinTrackSize
operator|.
name|x
operator|<<
literal|','
operator|<<
name|i
operator|.
name|ptMinTrackSize
operator|.
name|y
operator|<<
literal|" maxtrack="
operator|<<
name|i
operator|.
name|ptMaxTrackSize
operator|.
name|x
operator|<<
literal|','
operator|<<
name|i
operator|.
name|ptMaxTrackSize
operator|.
name|y
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|WINDOWPLACEMENT
modifier|&
name|wp
parameter_list|)
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|d
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|d
operator|<<
literal|"WINDOWPLACEMENT(flags=0x"
operator|<<
name|hex
operator|<<
name|wp
operator|.
name|flags
operator|<<
name|dec
operator|<<
literal|", showCmd="
operator|<<
name|wp
operator|.
name|showCmd
operator|<<
literal|", ptMinPosition="
operator|<<
name|wp
operator|.
name|ptMinPosition
operator|<<
literal|", ptMaxPosition="
operator|<<
name|wp
operator|.
name|ptMaxPosition
operator|<<
literal|", rcNormalPosition="
operator|<<
name|wp
operator|.
name|rcNormalPosition
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_OS_WINCE
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_DEBUG_STREAM
end_comment
begin_comment
comment|// QTBUG-43872, for windows that do not have WS_EX_TOOLWINDOW set, WINDOWPLACEMENT
end_comment
begin_comment
comment|// is in workspace/available area coordinates.
end_comment
begin_function
DECL|function|windowPlacementOffset
specifier|static
name|QPoint
name|windowPlacementOffset
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|GetWindowLongPtr
argument_list|(
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|)
operator|&
name|WS_EX_TOOLWINDOW
condition|)
return|return
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
specifier|const
name|QWindowsScreenManager
modifier|&
name|screenManager
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|screenManager
argument_list|()
decl_stmt|;
specifier|const
name|QWindowsScreen
modifier|*
name|screen
init|=
name|screenManager
operator|.
name|screens
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|screenManager
operator|.
name|screens
argument_list|()
operator|.
name|constFirst
argument_list|()
else|:
name|screenManager
operator|.
name|screenAtDp
argument_list|(
name|point
argument_list|)
decl_stmt|;
if|if
condition|(
name|screen
condition|)
return|return
name|screen
operator|->
name|availableGeometry
argument_list|()
operator|.
name|topLeft
argument_list|()
operator|-
name|screen
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|hwnd
argument_list|)
name|Q_UNUSED
argument_list|(
argument|point
argument_list|)
endif|#
directive|endif
return|return
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Return the frame geometry relative to the parent
end_comment
begin_comment
comment|// if there is one.
end_comment
begin_function
DECL|function|frameGeometry
specifier|static
specifier|inline
name|QRect
name|frameGeometry
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|bool
name|topLevel
parameter_list|)
block|{
name|RECT
name|rect
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|topLevel
condition|)
block|{
name|WINDOWPLACEMENT
name|windowPlacement
decl_stmt|;
name|windowPlacement
operator|.
name|length
operator|=
sizeof|sizeof
argument_list|(
name|WINDOWPLACEMENT
argument_list|)
expr_stmt|;
name|GetWindowPlacement
argument_list|(
name|hwnd
argument_list|,
operator|&
name|windowPlacement
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowPlacement
operator|.
name|showCmd
operator|==
name|SW_SHOWMINIMIZED
condition|)
block|{
specifier|const
name|QRect
name|result
init|=
name|qrectFromRECT
argument_list|(
name|windowPlacement
operator|.
name|rcNormalPosition
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|translated
argument_list|(
name|windowPlacementOffset
argument_list|(
name|hwnd
argument_list|,
name|result
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
endif|#
directive|endif
comment|// !Q_OS_WINCE
name|GetWindowRect
argument_list|(
name|hwnd
argument_list|,
operator|&
name|rect
argument_list|)
expr_stmt|;
comment|// Screen coordinates.
specifier|const
name|HWND
name|parent
init|=
name|GetParent
argument_list|(
name|hwnd
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
operator|!
name|topLevel
condition|)
block|{
specifier|const
name|int
name|width
init|=
name|rect
operator|.
name|right
operator|-
name|rect
operator|.
name|left
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|rect
operator|.
name|bottom
operator|-
name|rect
operator|.
name|top
decl_stmt|;
name|POINT
name|leftTop
init|=
block|{
name|rect
operator|.
name|left
block|,
name|rect
operator|.
name|top
block|}
decl_stmt|;
name|ScreenToClient
argument_list|(
name|parent
argument_list|,
operator|&
name|leftTop
argument_list|)
expr_stmt|;
name|rect
operator|.
name|left
operator|=
name|leftTop
operator|.
name|x
expr_stmt|;
name|rect
operator|.
name|top
operator|=
name|leftTop
operator|.
name|y
expr_stmt|;
name|rect
operator|.
name|right
operator|=
name|leftTop
operator|.
name|x
operator|+
name|width
expr_stmt|;
name|rect
operator|.
name|bottom
operator|=
name|leftTop
operator|.
name|y
operator|+
name|height
expr_stmt|;
block|}
return|return
name|qrectFromRECT
argument_list|(
name|rect
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Return the visibility of the Window (except full screen since it is not a window state).
end_comment
begin_function
DECL|function|windowVisibility_sys
specifier|static
name|QWindow
operator|::
name|Visibility
name|windowVisibility_sys
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
block|{
if|if
condition|(
operator|!
name|IsWindowVisible
argument_list|(
name|hwnd
argument_list|)
condition|)
return|return
name|QWindow
operator|::
name|Hidden
return|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|WINDOWPLACEMENT
name|windowPlacement
decl_stmt|;
name|windowPlacement
operator|.
name|length
operator|=
sizeof|sizeof
argument_list|(
name|WINDOWPLACEMENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|GetWindowPlacement
argument_list|(
name|hwnd
argument_list|,
operator|&
name|windowPlacement
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|windowPlacement
operator|.
name|showCmd
condition|)
block|{
case|case
name|SW_SHOWMINIMIZED
case|:
case|case
name|SW_MINIMIZE
case|:
case|case
name|SW_FORCEMINIMIZE
case|:
return|return
name|QWindow
operator|::
name|Minimized
return|;
case|case
name|SW_SHOWMAXIMIZED
case|:
return|return
name|QWindow
operator|::
name|Maximized
return|;
default|default:
break|break;
block|}
block|}
endif|#
directive|endif
comment|// !Q_OS_WINCE
return|return
name|QWindow
operator|::
name|Windowed
return|;
block|}
end_function
begin_function
DECL|function|windowIsOpenGL
specifier|static
specifier|inline
name|bool
name|windowIsOpenGL
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
switch|switch
condition|(
name|w
operator|->
name|surfaceType
argument_list|()
condition|)
block|{
case|case
name|QSurface
operator|::
name|OpenGLSurface
case|:
return|return
literal|true
return|;
case|case
name|QSurface
operator|::
name|RasterGLSurface
case|:
return|return
name|qt_window_private
argument_list|(
cast|const_cast
argument_list|<
name|QWindow
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
argument_list|)
operator|->
name|compositing
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|applyBlurBehindWindow
specifier|static
name|bool
name|applyBlurBehindWindow
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|Q_UNUSED
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
else|#
directive|else
enum|enum
block|{
name|dwmBbEnable
init|=
literal|0x1
block|,
name|dwmBbBlurRegion
init|=
literal|0x2
block|}
enum|;
struct|struct
name|DwmBlurBehind
block|{
name|DWORD
name|dwFlags
decl_stmt|;
name|BOOL
name|fEnable
decl_stmt|;
name|HRGN
name|hRgnBlur
decl_stmt|;
name|BOOL
name|fTransitionOnMaximized
decl_stmt|;
block|}
struct|;
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrDwmEnableBlurBehindWindow
function_decl|)
parameter_list|(
name|HWND
parameter_list|,
specifier|const
name|DwmBlurBehind
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PtrDwmIsCompositionEnabled
function_decl|)
parameter_list|(
name|BOOL
modifier|*
parameter_list|)
function_decl|;
comment|// DWM API is available only from Windows Vista
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|<
name|QSysInfo
operator|::
name|WV_VISTA
condition|)
return|return
literal|false
return|;
specifier|static
name|bool
name|functionPointersResolved
init|=
literal|false
decl_stmt|;
specifier|static
name|PtrDwmEnableBlurBehindWindow
name|dwmBlurBehind
init|=
literal|0
decl_stmt|;
specifier|static
name|PtrDwmIsCompositionEnabled
name|dwmIsCompositionEnabled
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|functionPointersResolved
argument_list|)
condition|)
block|{
name|QSystemLibrary
name|library
argument_list|(
name|QStringLiteral
argument_list|(
literal|"dwmapi"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|library
operator|.
name|load
argument_list|()
condition|)
block|{
name|dwmBlurBehind
operator|=
call|(
name|PtrDwmEnableBlurBehindWindow
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"DwmEnableBlurBehindWindow"
argument_list|)
argument_list|)
expr_stmt|;
name|dwmIsCompositionEnabled
operator|=
call|(
name|PtrDwmIsCompositionEnabled
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"DwmIsCompositionEnabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|functionPointersResolved
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|dwmBlurBehind
operator|||
operator|!
name|dwmIsCompositionEnabled
argument_list|)
condition|)
return|return
literal|false
return|;
name|BOOL
name|compositionEnabled
decl_stmt|;
if|if
condition|(
name|dwmIsCompositionEnabled
argument_list|(
operator|&
name|compositionEnabled
argument_list|)
operator|!=
name|S_OK
condition|)
return|return
literal|false
return|;
name|DwmBlurBehind
name|blurBehind
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|compositionEnabled
condition|)
block|{
name|blurBehind
operator|.
name|dwFlags
operator|=
name|dwmBbEnable
operator||
name|dwmBbBlurRegion
expr_stmt|;
name|blurBehind
operator|.
name|fEnable
operator|=
name|TRUE
expr_stmt|;
name|blurBehind
operator|.
name|hRgnBlur
operator|=
name|CreateRectRgn
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|blurBehind
operator|.
name|dwFlags
operator|=
name|dwmBbEnable
expr_stmt|;
name|blurBehind
operator|.
name|fEnable
operator|=
name|FALSE
expr_stmt|;
block|}
specifier|const
name|bool
name|result
init|=
name|dwmBlurBehind
argument_list|(
name|hwnd
argument_list|,
operator|&
name|blurBehind
argument_list|)
operator|==
name|S_OK
decl_stmt|;
if|if
condition|(
name|blurBehind
operator|.
name|hRgnBlur
condition|)
name|DeleteObject
argument_list|(
name|blurBehind
operator|.
name|hRgnBlur
argument_list|)
expr_stmt|;
return|return
name|result
return|;
endif|#
directive|endif
comment|// Q_OS_WINCE
block|}
end_function
begin_comment
comment|// from qwidget_win.cpp, pass flags separately in case they have been "autofixed".
end_comment
begin_function
DECL|function|shouldShowMaximizeButton
specifier|static
name|bool
name|shouldShowMaximizeButton
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator|)
operator|||
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
return|return
literal|false
return|;
comment|// if the user explicitly asked for the maximize button, we try to add
comment|// it even if the window has fixed size.
return|return
operator|(
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
operator|)
operator|||
name|w
operator|->
name|maximumSize
argument_list|()
operator|==
name|QSize
argument_list|(
name|QWINDOWSIZE_MAX
argument_list|,
name|QWINDOWSIZE_MAX
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Set the WS_EX_LAYERED flag on a HWND if required. This is required for
end_comment
begin_comment
comment|// translucent backgrounds, not fully opaque windows and for
end_comment
begin_comment
comment|// Qt::WindowTransparentForInput (in combination with WS_EX_TRANSPARENT).
end_comment
begin_function
DECL|function|setWindowLayered
name|bool
name|QWindowsWindow
operator|::
name|setWindowLayered
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|bool
name|hasAlpha
parameter_list|,
name|qreal
name|opacity
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|// maybe needs revisiting WS_EX_LAYERED
specifier|const
name|LONG
name|exStyle
init|=
name|GetWindowLong
argument_list|(
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|needsLayered
init|=
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTransparentForInput
operator|)
operator|||
operator|(
name|hasAlpha
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|)
operator|||
name|opacity
operator|<
literal|1.0
decl_stmt|;
specifier|const
name|bool
name|isLayered
init|=
operator|(
name|exStyle
operator|&
name|WS_EX_LAYERED
operator|)
decl_stmt|;
if|if
condition|(
name|needsLayered
operator|!=
name|isLayered
condition|)
block|{
if|if
condition|(
name|needsLayered
condition|)
block|{
name|SetWindowLong
argument_list|(
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|exStyle
operator||
name|WS_EX_LAYERED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SetWindowLong
argument_list|(
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|exStyle
operator|&
operator|~
name|WS_EX_LAYERED
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|needsLayered
return|;
else|#
directive|else
comment|// !Q_OS_WINCE
name|Q_UNUSED
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|hasAlpha
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|opacity
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
endif|#
directive|endif
comment|// Q_OS_WINCE
block|}
end_function
begin_function
DECL|function|setWindowOpacity
specifier|static
name|void
name|setWindowOpacity
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|bool
name|hasAlpha
parameter_list|,
name|bool
name|openGL
parameter_list|,
name|qreal
name|level
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|// WINCE does not support that feature and microsoft explicitly warns to use those calls
name|Q_UNUSED
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|hasAlpha
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|level
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|QWindowsWindow
operator|::
name|setWindowLayered
argument_list|(
name|hwnd
argument_list|,
name|flags
argument_list|,
name|hasAlpha
argument_list|,
name|level
argument_list|)
condition|)
block|{
specifier|const
name|BYTE
name|alpha
init|=
name|BYTE
argument_list|(
name|qRound
argument_list|(
literal|255.0
operator|*
name|level
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasAlpha
operator|&&
operator|!
name|openGL
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
comment|// Non-GL windows with alpha: Use blend function to update.
name|BLENDFUNCTION
name|blend
init|=
block|{
name|AC_SRC_OVER
block|,
literal|0
block|,
name|alpha
block|,
name|AC_SRC_ALPHA
block|}
decl_stmt|;
name|QWindowsContext
operator|::
name|user32dll
operator|.
name|updateLayeredWindow
argument_list|(
name|hwnd
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|blend
argument_list|,
name|ULW_ALPHA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowsContext
operator|::
name|user32dll
operator|.
name|setLayeredWindowAttributes
argument_list|(
name|hwnd
argument_list|,
literal|0
argument_list|,
name|alpha
argument_list|,
name|LWA_ALPHA
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|IsWindowVisible
argument_list|(
name|hwnd
argument_list|)
condition|)
block|{
comment|// Repaint when switching from layered.
name|InvalidateRect
argument_list|(
name|hwnd
argument_list|,
name|NULL
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// !Q_OS_WINCE
block|}
end_function
begin_function
DECL|function|updateGLWindowSettings
specifier|static
specifier|inline
name|void
name|updateGLWindowSettings
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
name|HWND
name|hwnd
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|qreal
name|opacity
parameter_list|)
block|{
specifier|const
name|bool
name|isGL
init|=
name|windowIsOpenGL
argument_list|(
name|w
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|hasAlpha
init|=
name|w
operator|->
name|format
argument_list|()
operator|.
name|hasAlpha
argument_list|()
decl_stmt|;
if|if
condition|(
name|isGL
operator|&&
name|hasAlpha
condition|)
name|applyBlurBehindWindow
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
name|setWindowOpacity
argument_list|(
name|hwnd
argument_list|,
name|flags
argument_list|,
name|hasAlpha
argument_list|,
name|isGL
argument_list|,
name|opacity
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class WindowCreationData     \brief Window creation code.      This struct gathers all information required to create a window.     Window creation is split in 3 steps:      \list     \li fromWindow() Gather all required information     \li create() Create the system handle.     \li initialize() Post creation initialization steps.     \endlist      The reason for this split is to also enable changing the QWindowFlags     by calling:      \list     \li fromWindow() Gather information and determine new system styles     \li applyWindowFlags() to apply the new window system styles.     \li initialize() Post creation initialization steps.     \endlist      Contains the window creation code formerly in qwidget_win.cpp.      \sa QWindowCreationContext     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_struct
DECL|struct|WindowCreationData
struct|struct
name|WindowCreationData
block|{
DECL|typedef|WindowData
typedef|typedef
name|QWindowsWindowData
name|WindowData
typedef|;
DECL|enum|Flags
DECL|enumerator|ForceChild
DECL|enumerator|ForceTopLevel
enum|enum
name|Flags
block|{
name|ForceChild
init|=
literal|0x1
block|,
name|ForceTopLevel
init|=
literal|0x2
block|}
enum|;
DECL|function|WindowCreationData
name|WindowCreationData
parameter_list|()
member_init_list|:
name|parentHandle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|type
argument_list|(
name|Qt
operator|::
name|Widget
argument_list|)
member_init_list|,
name|style
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|exStyle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|topLevel
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|popup
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|dialog
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|tool
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|embedded
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|hasAlpha
argument_list|(
literal|false
argument_list|)
block|{}
name|void
name|fromWindow
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|,
name|unsigned
name|creationFlags
init|=
literal|0
parameter_list|)
function_decl|;
specifier|inline
name|WindowData
name|create
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|WindowData
modifier|&
name|data
parameter_list|,
name|QString
name|title
parameter_list|)
specifier|const
function_decl|;
specifier|inline
name|void
name|applyWindowFlags
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
specifier|const
function_decl|;
name|void
name|initialize
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
name|HWND
name|h
parameter_list|,
name|bool
name|frameChange
parameter_list|,
name|qreal
name|opacityLevel
parameter_list|)
specifier|const
function_decl|;
DECL|member|flags
name|Qt
operator|::
name|WindowFlags
name|flags
decl_stmt|;
DECL|member|parentHandle
name|HWND
name|parentHandle
decl_stmt|;
DECL|member|type
name|Qt
operator|::
name|WindowType
name|type
decl_stmt|;
DECL|member|style
name|unsigned
name|style
decl_stmt|;
DECL|member|exStyle
name|unsigned
name|exStyle
decl_stmt|;
DECL|member|topLevel
name|bool
name|topLevel
decl_stmt|;
DECL|member|popup
name|bool
name|popup
decl_stmt|;
DECL|member|dialog
name|bool
name|dialog
decl_stmt|;
DECL|member|tool
name|bool
name|tool
decl_stmt|;
DECL|member|embedded
name|bool
name|embedded
decl_stmt|;
DECL|member|hasAlpha
name|bool
name|hasAlpha
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
specifier|const
name|WindowCreationData
modifier|&
name|d
parameter_list|)
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|debug
argument_list|)
decl_stmt|;
name|debug
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|debug
operator|.
name|noquote
argument_list|()
expr_stmt|;
name|debug
operator|<<
literal|"WindowCreationData: "
operator|<<
name|d
operator|.
name|flags
operator|<<
literal|"\n  topLevel="
operator|<<
name|d
operator|.
name|topLevel
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|parentHandle
condition|)
name|debug
operator|<<
literal|" parent="
operator|<<
name|d
operator|.
name|parentHandle
expr_stmt|;
name|debug
operator|<<
literal|" popup="
operator|<<
name|d
operator|.
name|popup
operator|<<
literal|" dialog="
operator|<<
name|d
operator|.
name|dialog
operator|<<
literal|" embedded="
operator|<<
name|d
operator|.
name|embedded
operator|<<
literal|" tool="
operator|<<
name|d
operator|.
name|tool
operator|<<
literal|"\n  style="
operator|<<
name|debugWinStyle
argument_list|(
name|d
operator|.
name|style
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|exStyle
condition|)
name|debug
operator|<<
literal|"\n  exStyle="
operator|<<
name|debugWinExStyle
argument_list|(
name|d
operator|.
name|exStyle
argument_list|)
expr_stmt|;
return|return
name|debug
return|;
block|}
end_function
begin_comment
comment|// Fix top level window flags in case only the type flags are passed.
end_comment
begin_function
DECL|function|fixTopLevelWindowFlags
specifier|static
specifier|inline
name|void
name|fixTopLevelWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
modifier|&
name|flags
parameter_list|)
block|{
comment|// Not supported on Windows, also do correction when it is set.
name|flags
operator|&=
operator|~
name|Qt
operator|::
name|WindowFullscreenButtonHint
expr_stmt|;
switch|switch
condition|(
name|flags
condition|)
block|{
case|case
name|Qt
operator|::
name|Window
case|:
name|flags
operator||=
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Dialog
case|:
name|flags
operator||=
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Tool
case|:
name|flags
operator||=
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|fromWindow
name|void
name|WindowCreationData
operator|::
name|fromWindow
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|Qt
operator|::
name|WindowFlags
name|flagsIn
parameter_list|,
name|unsigned
name|creationFlags
parameter_list|)
block|{
name|flags
operator|=
name|flagsIn
expr_stmt|;
comment|// Sometimes QWindow doesn't have a QWindow parent but does have a native parent window,
comment|// e.g. in case of embedded ActiveQt servers. They should not be considered a top-level
comment|// windows in such cases.
name|QVariant
name|prop
init|=
name|w
operator|->
name|property
argument_list|(
literal|"_q_embedded_native_parent_handle"
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|embedded
operator|=
literal|true
expr_stmt|;
name|parentHandle
operator|=
cast|reinterpret_cast
argument_list|<
name|HWND
argument_list|>
argument_list|(
name|prop
operator|.
name|value
argument_list|<
name|WId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|creationFlags
operator|&
name|ForceChild
condition|)
block|{
name|topLevel
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|embedded
condition|)
block|{
comment|// Embedded native windows (for example Active X server windows) are by
comment|// definition never toplevel, even though they do not have QWindow parents.
name|topLevel
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|topLevel
operator|=
operator|(
name|creationFlags
operator|&
name|ForceTopLevel
operator|)
condition|?
literal|true
else|:
name|w
operator|->
name|isTopLevel
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|topLevel
condition|)
name|fixTopLevelWindowFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|type
operator|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
name|int
argument_list|(
name|flags
argument_list|)
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Qt
operator|::
name|Dialog
case|:
case|case
name|Qt
operator|::
name|Sheet
case|:
name|dialog
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Drawer
case|:
case|case
name|Qt
operator|::
name|Tool
case|:
name|tool
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Popup
case|:
name|popup
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator|)
condition|)
name|dialog
operator|=
literal|true
expr_stmt|;
comment|// Parent: Use transient parent for top levels.
if|if
condition|(
name|popup
condition|)
block|{
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
expr_stmt|;
comment|// a popup stays on top, no parent.
block|}
elseif|else
if|if
condition|(
operator|!
name|embedded
condition|)
block|{
if|if
condition|(
specifier|const
name|QWindow
modifier|*
name|parentWindow
init|=
name|topLevel
condition|?
name|w
operator|->
name|transientParent
argument_list|()
else|:
name|w
operator|->
name|parent
argument_list|()
condition|)
name|parentHandle
operator|=
name|QWindowsWindow
operator|::
name|handleOf
argument_list|(
name|parentWindow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|popup
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
operator|)
condition|)
block|{
name|style
operator|=
name|WS_POPUP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topLevel
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
name|style
operator|=
name|WS_POPUP
expr_stmt|;
comment|// no border
elseif|else
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|style
operator|=
name|WS_OVERLAPPED
expr_stmt|;
else|else
name|style
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|style
operator|=
name|WS_CHILD
expr_stmt|;
block|}
comment|// if (!testAttribute(Qt::WA_PaintUnclipped))
comment|// ### Commented out for now as it causes some problems, but
comment|// this should be correct anyway, so dig some more into this
ifdef|#
directive|ifdef
name|Q_FLATTEN_EXPOSE
if|if
condition|(
name|windowIsOpenGL
argument_list|(
name|w
argument_list|)
condition|)
comment|// a bit incorrect since the is-opengl status may change from false to true at any time later on
name|style
operator||=
name|WS_CLIPSIBLINGS
operator||
name|WS_CLIPCHILDREN
expr_stmt|;
comment|// see SetPixelFormat
else|#
directive|else
name|style
operator||=
name|WS_CLIPSIBLINGS
operator||
name|WS_CLIPCHILDREN
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|topLevel
condition|)
block|{
if|if
condition|(
operator|(
name|type
operator|==
name|Qt
operator|::
name|Window
operator|||
name|dialog
operator|||
name|tool
operator|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
name|style
operator||=
name|WS_POPUP
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
condition|)
block|{
name|style
operator||=
name|WS_DLGFRAME
expr_stmt|;
block|}
else|else
block|{
name|style
operator||=
name|WS_THICKFRAME
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|style
operator||=
name|WS_CAPTION
expr_stmt|;
comment|// Contains WS_DLGFRAME
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|style
operator||=
name|WS_SYSMENU
expr_stmt|;
elseif|else
if|if
condition|(
name|dialog
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
operator|)
operator|&&
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
name|style
operator||=
name|WS_SYSMENU
operator||
name|WS_BORDER
expr_stmt|;
comment|// QTBUG-2027, dialogs without system menu.
name|exStyle
operator||=
name|WS_EX_DLGMODALFRAME
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
name|style
operator||=
name|WS_MINIMIZEBOX
expr_stmt|;
if|if
condition|(
name|shouldShowMaximizeButton
argument_list|(
name|w
argument_list|,
name|flags
argument_list|)
condition|)
name|style
operator||=
name|WS_MAXIMIZEBOX
expr_stmt|;
if|if
condition|(
name|tool
condition|)
name|exStyle
operator||=
name|WS_EX_TOOLWINDOW
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|exStyle
operator||=
name|WS_EX_CONTEXTHELP
expr_stmt|;
block|}
else|else
block|{
name|exStyle
operator||=
name|WS_EX_TOOLWINDOW
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|// make mouse events fall through this window
comment|// NOTE: WS_EX_TRANSPARENT flag can make mouse inputs fall through a layered window
if|if
condition|(
name|flagsIn
operator|&
name|Qt
operator|::
name|WindowTransparentForInput
condition|)
name|exStyle
operator||=
name|WS_EX_LAYERED
operator||
name|WS_EX_TRANSPARENT
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
name|QWindowsWindowData
DECL|function|create
name|WindowCreationData
operator|::
name|create
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|WindowData
modifier|&
name|data
parameter_list|,
name|QString
name|title
parameter_list|)
specifier|const
block|{
typedef|typedef
name|QSharedPointer
argument_list|<
name|QWindowCreationContext
argument_list|>
name|QWindowCreationContextPtr
typedef|;
name|WindowData
name|result
decl_stmt|;
name|result
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
specifier|const
name|HINSTANCE
name|appinst
init|=
operator|(
name|HINSTANCE
operator|)
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|windowClassName
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|registerWindowClass
argument_list|(
name|w
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|rect
init|=
name|QPlatformWindow
operator|::
name|initialGeometry
argument_list|(
name|w
argument_list|,
name|data
operator|.
name|geometry
argument_list|,
name|defaultWindowWidth
argument_list|,
name|defaultWindowHeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|title
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|result
operator|.
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|)
condition|)
name|title
operator|=
name|topLevel
condition|?
name|qAppName
argument_list|()
else|:
name|w
operator|->
name|objectName
argument_list|()
expr_stmt|;
specifier|const
name|wchar_t
modifier|*
name|titleUtf16
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|wchar_t
modifier|*
name|classNameUtf16
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|windowClassName
operator|.
name|utf16
argument_list|()
argument_list|)
decl_stmt|;
comment|// Capture events before CreateWindowEx() returns. The context is cleared in
comment|// the QWindowsWindow constructor.
specifier|const
name|QWindowCreationContextPtr
name|context
argument_list|(
operator|new
name|QWindowCreationContext
argument_list|(
name|w
argument_list|,
name|rect
argument_list|,
name|data
operator|.
name|customMargins
argument_list|,
name|style
argument_list|,
name|exStyle
argument_list|)
argument_list|)
decl_stmt|;
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|setWindowCreationContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
literal|"CreateWindowEx: "
operator|<<
name|w
operator|<<
literal|" class="
operator|<<
name|windowClassName
operator|<<
literal|" title="
operator|<<
name|title
operator|<<
literal|'\n'
operator|<<
operator|*
name|this
operator|<<
literal|"\nrequested: "
operator|<<
name|rect
operator|<<
literal|": "
operator|<<
name|context
operator|->
name|frameWidth
operator|<<
literal|'x'
operator|<<
name|context
operator|->
name|frameHeight
operator|<<
literal|'+'
operator|<<
name|context
operator|->
name|frameX
operator|<<
literal|'+'
operator|<<
name|context
operator|->
name|frameY
operator|<<
literal|" custom margins: "
operator|<<
name|context
operator|->
name|customMargins
expr_stmt|;
name|result
operator|.
name|hwnd
operator|=
name|CreateWindowEx
argument_list|(
name|exStyle
argument_list|,
name|classNameUtf16
argument_list|,
name|titleUtf16
argument_list|,
name|style
argument_list|,
name|context
operator|->
name|frameX
argument_list|,
name|context
operator|->
name|frameY
argument_list|,
name|context
operator|->
name|frameWidth
argument_list|,
name|context
operator|->
name|frameHeight
argument_list|,
name|parentHandle
argument_list|,
name|NULL
argument_list|,
name|appinst
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
if|if
condition|(
name|DisableGestures
argument_list|(
name|result
operator|.
name|hwnd
argument_list|,
name|TGF_GID_ALL
argument_list|,
name|TGF_SCOPE_WINDOW
argument_list|)
condition|)
name|EnableGestures
argument_list|(
name|result
operator|.
name|hwnd
argument_list|,
name|TGF_GID_DIRECTMANIPULATION
argument_list|,
name|TGF_SCOPE_WINDOW
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
literal|"CreateWindowEx: returns "
operator|<<
name|w
operator|<<
literal|' '
operator|<<
name|result
operator|.
name|hwnd
operator|<<
literal|" obtained geometry: "
operator|<<
name|context
operator|->
name|obtainedGeometry
operator|<<
literal|' '
operator|<<
name|context
operator|->
name|margins
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|hwnd
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: CreateWindowEx failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|result
operator|.
name|geometry
operator|=
name|context
operator|->
name|obtainedGeometry
expr_stmt|;
name|result
operator|.
name|frame
operator|=
name|context
operator|->
name|margins
expr_stmt|;
name|result
operator|.
name|embedded
operator|=
name|embedded
expr_stmt|;
name|result
operator|.
name|customMargins
operator|=
name|context
operator|->
name|customMargins
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|applyWindowFlags
name|void
name|WindowCreationData
operator|::
name|applyWindowFlags
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
specifier|const
block|{
comment|// Keep enabled and visible from the current style.
specifier|const
name|LONG_PTR
name|oldStyle
init|=
name|GetWindowLongPtr
argument_list|(
name|hwnd
argument_list|,
name|GWL_STYLE
argument_list|)
decl_stmt|;
specifier|const
name|LONG_PTR
name|oldExStyle
init|=
name|GetWindowLongPtr
argument_list|(
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|)
decl_stmt|;
specifier|const
name|LONG_PTR
name|newStyle
init|=
name|style
operator||
operator|(
name|oldStyle
operator|&
operator|(
name|WS_DISABLED
operator||
name|WS_VISIBLE
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|oldStyle
operator|!=
name|newStyle
condition|)
name|SetWindowLongPtr
argument_list|(
name|hwnd
argument_list|,
name|GWL_STYLE
argument_list|,
name|newStyle
argument_list|)
expr_stmt|;
specifier|const
name|LONG_PTR
name|newExStyle
init|=
name|exStyle
decl_stmt|;
if|if
condition|(
name|newExStyle
operator|!=
name|oldExStyle
condition|)
name|SetWindowLongPtr
argument_list|(
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|newExStyle
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|hwnd
operator|<<
operator|*
name|this
operator|<<
literal|"\n    Style from "
operator|<<
name|debugWinStyle
argument_list|(
name|DWORD
argument_list|(
name|oldStyle
argument_list|)
argument_list|)
operator|<<
literal|"\n    to "
operator|<<
name|debugWinStyle
argument_list|(
name|DWORD
argument_list|(
name|newStyle
argument_list|)
argument_list|)
operator|<<
literal|"\n    ExStyle from "
operator|<<
name|debugWinExStyle
argument_list|(
name|DWORD
argument_list|(
name|oldExStyle
argument_list|)
argument_list|)
operator|<<
literal|" to "
operator|<<
name|debugWinExStyle
argument_list|(
name|DWORD
argument_list|(
name|newExStyle
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initialize
name|void
name|WindowCreationData
operator|::
name|initialize
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
name|HWND
name|hwnd
parameter_list|,
name|bool
name|frameChange
parameter_list|,
name|qreal
name|opacityLevel
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|hwnd
condition|)
return|return;
name|UINT
name|swpFlags
init|=
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
decl_stmt|;
if|if
condition|(
name|frameChange
condition|)
name|swpFlags
operator||=
name|SWP_FRAMECHANGED
expr_stmt|;
if|if
condition|(
name|topLevel
condition|)
block|{
name|swpFlags
operator||=
name|SWP_NOACTIVATE
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
condition|)
block|{
name|SetWindowPos
argument_list|(
name|hwnd
argument_list|,
name|HWND_TOPMOST
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|swpFlags
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"QWidget: Incompatible window flags: the window can't be on top and on bottom at the same time"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
block|{
name|SetWindowPos
argument_list|(
name|hwnd
argument_list|,
name|HWND_BOTTOM
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|swpFlags
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|frameChange
condition|)
block|{
comment|// Force WM_NCCALCSIZE with wParam=1 in case of custom margins.
name|SetWindowPos
argument_list|(
name|hwnd
argument_list|,
name|HWND_NOTOPMOST
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|swpFlags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|CustomizeWindowHint
operator||
name|Qt
operator|::
name|WindowTitleHint
operator|)
condition|)
block|{
name|HMENU
name|systemMenu
init|=
name|GetSystemMenu
argument_list|(
name|hwnd
argument_list|,
name|FALSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|EnableMenuItem
argument_list|(
name|systemMenu
argument_list|,
name|SC_CLOSE
argument_list|,
name|MF_BYCOMMAND
operator||
name|MF_ENABLED
argument_list|)
expr_stmt|;
else|else
name|EnableMenuItem
argument_list|(
name|systemMenu
argument_list|,
name|SC_CLOSE
argument_list|,
name|MF_BYCOMMAND
operator||
name|MF_GRAYED
argument_list|)
expr_stmt|;
block|}
name|updateGLWindowSettings
argument_list|(
name|w
argument_list|,
name|hwnd
argument_list|,
name|flags
argument_list|,
name|opacityLevel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// child.
name|SetWindowPos
argument_list|(
name|hwnd
argument_list|,
name|HWND_TOP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|swpFlags
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Scaling helpers for size constraints.
end_comment
begin_function
DECL|function|toNativeSizeConstrained
specifier|static
name|QSize
name|toNativeSizeConstrained
parameter_list|(
name|QSize
name|dip
parameter_list|,
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|QHighDpiScaling
operator|::
name|isActive
argument_list|()
condition|)
block|{
specifier|const
name|qreal
name|factor
init|=
name|QHighDpiScaling
operator|::
name|factor
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|dip
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|dip
operator|.
name|width
argument_list|()
operator|<
name|QWINDOWSIZE_MAX
condition|)
name|dip
operator|.
name|rwidth
argument_list|()
operator|*=
name|factor
expr_stmt|;
if|if
condition|(
name|dip
operator|.
name|height
argument_list|()
operator|>
literal|0
operator|&&
name|dip
operator|.
name|height
argument_list|()
operator|<
name|QWINDOWSIZE_MAX
condition|)
name|dip
operator|.
name|rheight
argument_list|()
operator|*=
name|factor
expr_stmt|;
block|}
return|return
name|dip
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsGeometryHint     \brief Stores geometry constraints and provides utility functions.      Geometry constraints ready to apply to a MINMAXINFO taking frame     into account.      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsGeometryHint
name|QWindowsGeometryHint
operator|::
name|QWindowsGeometryHint
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QMargins
modifier|&
name|cm
parameter_list|)
member_init_list|:
name|minimumSize
argument_list|(
name|toNativeSizeConstrained
argument_list|(
name|w
operator|->
name|minimumSize
argument_list|()
argument_list|,
name|w
argument_list|)
argument_list|)
member_init_list|,
name|maximumSize
argument_list|(
name|toNativeSizeConstrained
argument_list|(
name|w
operator|->
name|maximumSize
argument_list|()
argument_list|,
name|w
argument_list|)
argument_list|)
member_init_list|,
name|customMargins
argument_list|(
name|cm
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|validSize
name|bool
name|QWindowsGeometryHint
operator|::
name|validSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|width
init|=
name|s
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|s
operator|.
name|height
argument_list|()
decl_stmt|;
return|return
name|width
operator|>=
name|minimumSize
operator|.
name|width
argument_list|()
operator|&&
name|width
operator|<=
name|maximumSize
operator|.
name|width
argument_list|()
operator|&&
name|height
operator|>=
name|minimumSize
operator|.
name|height
argument_list|()
operator|&&
name|height
operator|<=
name|maximumSize
operator|.
name|height
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|frame
name|QMargins
name|QWindowsGeometryHint
operator|::
name|frame
parameter_list|(
name|DWORD
name|style
parameter_list|,
name|DWORD
name|exStyle
parameter_list|)
block|{
name|RECT
name|rect
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|style
operator|&=
operator|~
operator|(
name|WS_OVERLAPPED
operator|)
expr_stmt|;
comment|// Not permitted, see docs.
endif|#
directive|endif
if|if
condition|(
operator|!
name|AdjustWindowRectEx
argument_list|(
operator|&
name|rect
argument_list|,
name|style
argument_list|,
name|FALSE
argument_list|,
name|exStyle
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
literal|"%s: AdjustWindowRectEx failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
specifier|const
name|QMargins
name|result
argument_list|(
name|qAbs
argument_list|(
name|rect
operator|.
name|left
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|rect
operator|.
name|top
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|rect
operator|.
name|right
argument_list|)
argument_list|,
name|qAbs
argument_list|(
name|rect
operator|.
name|bottom
argument_list|)
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|" style="
operator|<<
name|showbase
operator|<<
name|hex
operator|<<
name|style
operator|<<
literal|" exStyle="
operator|<<
name|exStyle
operator|<<
name|dec
operator|<<
name|noshowbase
operator|<<
literal|' '
operator|<<
name|rect
operator|<<
literal|' '
operator|<<
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|handleCalculateSize
name|bool
name|QWindowsGeometryHint
operator|::
name|handleCalculateSize
parameter_list|(
specifier|const
name|QMargins
modifier|&
name|customMargins
parameter_list|,
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|,
name|LRESULT
modifier|*
name|result
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|// NCCALCSIZE_PARAMS structure if wParam==TRUE
if|if
condition|(
operator|!
name|msg
operator|.
name|wParam
operator|||
name|customMargins
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
operator|*
name|result
operator|=
name|DefWindowProc
argument_list|(
name|msg
operator|.
name|hwnd
argument_list|,
name|msg
operator|.
name|message
argument_list|,
name|msg
operator|.
name|wParam
argument_list|,
name|msg
operator|.
name|lParam
argument_list|)
expr_stmt|;
name|NCCALCSIZE_PARAMS
modifier|*
name|ncp
init|=
cast|reinterpret_cast
argument_list|<
name|NCCALCSIZE_PARAMS
operator|*
argument_list|>
argument_list|(
name|msg
operator|.
name|lParam
argument_list|)
decl_stmt|;
specifier|const
name|RECT
name|oldClientArea
init|=
name|ncp
operator|->
name|rgrc
index|[
literal|0
index|]
decl_stmt|;
name|ncp
operator|->
name|rgrc
index|[
literal|0
index|]
operator|.
name|left
operator|+=
name|customMargins
operator|.
name|left
argument_list|()
expr_stmt|;
name|ncp
operator|->
name|rgrc
index|[
literal|0
index|]
operator|.
name|top
operator|+=
name|customMargins
operator|.
name|top
argument_list|()
expr_stmt|;
name|ncp
operator|->
name|rgrc
index|[
literal|0
index|]
operator|.
name|right
operator|-=
name|customMargins
operator|.
name|right
argument_list|()
expr_stmt|;
name|ncp
operator|->
name|rgrc
index|[
literal|0
index|]
operator|.
name|bottom
operator|-=
name|customMargins
operator|.
name|bottom
argument_list|()
expr_stmt|;
name|result
operator|=
literal|0
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|oldClientArea
operator|<<
literal|'+'
operator|<<
name|customMargins
operator|<<
literal|"-->"
operator|<<
name|ncp
operator|->
name|rgrc
index|[
literal|0
index|]
operator|<<
literal|' '
operator|<<
name|ncp
operator|->
name|rgrc
index|[
literal|1
index|]
operator|<<
literal|' '
operator|<<
name|ncp
operator|->
name|rgrc
index|[
literal|2
index|]
operator|<<
literal|' '
operator|<<
name|ncp
operator|->
name|lppos
operator|->
name|cx
operator|<<
literal|','
operator|<<
name|ncp
operator|->
name|lppos
operator|->
name|cy
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|customMargins
argument_list|)
name|Q_UNUSED
argument_list|(
argument|msg
argument_list|)
name|Q_UNUSED
argument_list|(
argument|result
argument_list|)
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_function
DECL|function|applyToMinMaxInfo
name|void
name|QWindowsGeometryHint
operator|::
name|applyToMinMaxInfo
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|MINMAXINFO
modifier|*
name|mmi
parameter_list|)
specifier|const
block|{
return|return
name|applyToMinMaxInfo
argument_list|(
name|DWORD
argument_list|(
name|GetWindowLong
argument_list|(
name|hwnd
argument_list|,
name|GWL_STYLE
argument_list|)
argument_list|)
argument_list|,
name|DWORD
argument_list|(
name|GetWindowLong
argument_list|(
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|)
argument_list|)
argument_list|,
name|mmi
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|applyToMinMaxInfo
name|void
name|QWindowsGeometryHint
operator|::
name|applyToMinMaxInfo
parameter_list|(
name|DWORD
name|style
parameter_list|,
name|DWORD
name|exStyle
parameter_list|,
name|MINMAXINFO
modifier|*
name|mmi
parameter_list|)
specifier|const
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
literal|'<'
operator|<<
literal|" min="
operator|<<
name|minimumSize
operator|.
name|width
argument_list|()
operator|<<
literal|','
operator|<<
name|minimumSize
operator|.
name|height
argument_list|()
operator|<<
literal|" max="
operator|<<
name|maximumSize
operator|.
name|width
argument_list|()
operator|<<
literal|','
operator|<<
name|maximumSize
operator|.
name|height
argument_list|()
operator|<<
literal|" in "
operator|<<
operator|*
name|mmi
expr_stmt|;
specifier|const
name|QMargins
name|margins
init|=
name|QWindowsGeometryHint
operator|::
name|frame
argument_list|(
name|style
argument_list|,
name|exStyle
argument_list|)
decl_stmt|;
specifier|const
name|int
name|frameWidth
init|=
name|margins
operator|.
name|left
argument_list|()
operator|+
name|margins
operator|.
name|right
argument_list|()
operator|+
name|customMargins
operator|.
name|left
argument_list|()
operator|+
name|customMargins
operator|.
name|right
argument_list|()
decl_stmt|;
specifier|const
name|int
name|frameHeight
init|=
name|margins
operator|.
name|top
argument_list|()
operator|+
name|margins
operator|.
name|bottom
argument_list|()
operator|+
name|customMargins
operator|.
name|top
argument_list|()
operator|+
name|customMargins
operator|.
name|bottom
argument_list|()
decl_stmt|;
if|if
condition|(
name|minimumSize
operator|.
name|width
argument_list|()
operator|>
literal|0
condition|)
name|mmi
operator|->
name|ptMinTrackSize
operator|.
name|x
operator|=
name|minimumSize
operator|.
name|width
argument_list|()
operator|+
name|frameWidth
expr_stmt|;
if|if
condition|(
name|minimumSize
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
name|mmi
operator|->
name|ptMinTrackSize
operator|.
name|y
operator|=
name|minimumSize
operator|.
name|height
argument_list|()
operator|+
name|frameHeight
expr_stmt|;
specifier|const
name|int
name|maximumWidth
init|=
name|qMax
argument_list|(
name|maximumSize
operator|.
name|width
argument_list|()
argument_list|,
name|minimumSize
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|maximumHeight
init|=
name|qMax
argument_list|(
name|maximumSize
operator|.
name|height
argument_list|()
argument_list|,
name|minimumSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|maximumWidth
operator|<
name|QWINDOWSIZE_MAX
condition|)
name|mmi
operator|->
name|ptMaxTrackSize
operator|.
name|x
operator|=
name|maximumWidth
operator|+
name|frameWidth
expr_stmt|;
if|if
condition|(
name|maximumHeight
operator|<
name|QWINDOWSIZE_MAX
condition|)
name|mmi
operator|->
name|ptMaxTrackSize
operator|.
name|y
operator|=
name|maximumHeight
operator|+
name|frameHeight
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
literal|'<'
operator|<<
name|__FUNCTION__
operator|<<
literal|" frame="
operator|<<
name|margins
operator|<<
literal|' '
operator|<<
name|frameWidth
operator|<<
literal|','
operator|<<
name|frameHeight
operator|<<
literal|" out "
operator|<<
operator|*
name|mmi
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_OS_WINCE
end_comment
begin_function
DECL|function|positionIncludesFrame
name|bool
name|QWindowsGeometryHint
operator|::
name|positionIncludesFrame
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
return|return
name|qt_window_private
argument_list|(
cast|const_cast
argument_list|<
name|QWindow
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
argument_list|)
operator|->
name|positionPolicy
operator|==
name|QWindowPrivate
operator|::
name|WindowFrameInclusive
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsBaseWindow     \brief Base class for QWindowsForeignWindow, QWindowsWindow      The class provides some _sys() getters for querying window     data from a HWND and some _sys() setters.      Derived classes wrapping foreign windows may use them directly     to calculate geometry, margins, etc.      Derived classes representing windows created by Qt may defer     expensive calculations until change notifications are received.      \since 5.6     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_function
DECL|function|baseWindowOf
name|QWindowsBaseWindow
modifier|*
name|QWindowsBaseWindow
operator|::
name|baseWindowOf
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|w
condition|)
block|{
if|if
condition|(
name|QPlatformWindow
modifier|*
name|pw
init|=
name|w
operator|->
name|handle
argument_list|()
condition|)
return|return
cast|static_cast
argument_list|<
name|QWindowsBaseWindow
operator|*
argument_list|>
argument_list|(
name|pw
argument_list|)
return|;
block|}
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|handleOf
name|HWND
name|QWindowsBaseWindow
operator|::
name|handleOf
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
specifier|const
name|QWindowsBaseWindow
modifier|*
name|bw
init|=
name|QWindowsBaseWindow
operator|::
name|baseWindowOf
argument_list|(
name|w
argument_list|)
decl_stmt|;
return|return
name|bw
condition|?
name|bw
operator|->
name|handle
argument_list|()
else|:
name|HWND
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isTopLevel_sys
name|bool
name|QWindowsBaseWindow
operator|::
name|isTopLevel_sys
parameter_list|()
specifier|const
block|{
specifier|const
name|HWND
name|parent
init|=
name|parentHwnd
argument_list|()
decl_stmt|;
return|return
operator|!
name|parent
operator|||
name|parent
operator|==
name|GetDesktopWindow
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|frameGeometry_sys
name|QRect
name|QWindowsBaseWindow
operator|::
name|frameGeometry_sys
parameter_list|()
specifier|const
block|{
return|return
name|frameGeometry
argument_list|(
name|handle
argument_list|()
argument_list|,
name|isTopLevel
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|geometry_sys
name|QRect
name|QWindowsBaseWindow
operator|::
name|geometry_sys
parameter_list|()
specifier|const
block|{
return|return
name|frameGeometry_sys
argument_list|()
operator|.
name|marginsRemoved
argument_list|(
name|frameMargins
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|frameMargins_sys
name|QMargins
name|QWindowsBaseWindow
operator|::
name|frameMargins_sys
parameter_list|()
specifier|const
block|{
return|return
name|QWindowsGeometryHint
operator|::
name|frame
argument_list|(
name|style
argument_list|()
argument_list|,
name|exStyle
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hide_sys
name|void
name|QWindowsBaseWindow
operator|::
name|hide_sys
parameter_list|()
comment|// Normal hide, do not activate other windows.
block|{
name|SetWindowPos
argument_list|(
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_HIDEWINDOW
operator||
name|SWP_NOSIZE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOZORDER
operator||
name|SWP_NOACTIVATE
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|raise_sys
name|void
name|QWindowsBaseWindow
operator|::
name|raise_sys
parameter_list|()
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
expr_stmt|;
name|SetWindowPos
argument_list|(
name|handle
argument_list|()
argument_list|,
name|HWND_TOP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lower_sys
name|void
name|QWindowsBaseWindow
operator|::
name|lower_sys
parameter_list|()
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
expr_stmt|;
name|SetWindowPos
argument_list|(
name|handle
argument_list|()
argument_list|,
name|HWND_BOTTOM
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowTitle_sys
name|void
name|QWindowsBaseWindow
operator|::
name|setWindowTitle_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|title
expr_stmt|;
name|SetWindowText
argument_list|(
name|handle
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapToGlobal
name|QPoint
name|QWindowsBaseWindow
operator|::
name|mapToGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
return|return
name|QWindowsGeometryHint
operator|::
name|mapToGlobal
argument_list|(
name|handle
argument_list|()
argument_list|,
name|pos
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mapFromGlobal
name|QPoint
name|QWindowsBaseWindow
operator|::
name|mapFromGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
return|return
name|QWindowsGeometryHint
operator|::
name|mapFromGlobal
argument_list|(
name|handle
argument_list|()
argument_list|,
name|pos
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsDesktopWindow     \brief Window wrapping GetDesktopWindow not allowing any manipulation.     \since 5.6     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_comment
comment|/*!     \class QWindowsForeignWindow     \brief Window wrapping a foreign native window.      QWindowsForeignWindow stores a native HWND and implements getters for     geometry, margins, etc. reparenting and geometry manipulation for use as a     child window in Qt.      \since 5.6     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsForeignWindow
name|QWindowsForeignWindow
operator|::
name|QWindowsForeignWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|HWND
name|hwnd
parameter_list|)
member_init_list|:
name|QWindowsBaseWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_hwnd
argument_list|(
name|hwnd
argument_list|)
member_init_list|,
name|m_topLevelStyle
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setParent
name|void
name|QWindowsForeignWindow
operator|::
name|setParent
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|newParentWindow
parameter_list|)
block|{
specifier|const
name|bool
name|wasTopLevel
init|=
name|isTopLevel_sys
argument_list|()
decl_stmt|;
specifier|const
name|HWND
name|newParent
init|=
name|newParentWindow
condition|?
cast|reinterpret_cast
argument_list|<
name|HWND
argument_list|>
argument_list|(
name|newParentWindow
operator|->
name|winId
argument_list|()
argument_list|)
else|:
name|HWND
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|isTopLevel
init|=
operator|!
name|newParent
decl_stmt|;
specifier|const
name|DWORD
name|oldStyle
init|=
name|style
argument_list|()
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|window
argument_list|()
operator|<<
literal|"newParent="
operator|<<
name|newParentWindow
operator|<<
name|newParent
operator|<<
literal|"oldStyle="
operator|<<
name|debugWinStyle
argument_list|(
name|oldStyle
argument_list|)
expr_stmt|;
name|SetParent
argument_list|(
name|m_hwnd
argument_list|,
name|newParent
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasTopLevel
operator|!=
name|isTopLevel
condition|)
block|{
comment|// Top level window flags need to be set/cleared manually.
name|DWORD
name|newStyle
init|=
name|oldStyle
decl_stmt|;
if|if
condition|(
name|isTopLevel
condition|)
block|{
name|newStyle
operator|=
name|m_topLevelStyle
expr_stmt|;
block|}
else|else
block|{
name|m_topLevelStyle
operator|=
name|oldStyle
expr_stmt|;
name|newStyle
operator|&=
operator|~
operator|(
name|WS_OVERLAPPEDWINDOW
operator||
name|WS_POPUPWINDOW
operator|)
expr_stmt|;
name|newStyle
operator||=
name|WS_CHILD
expr_stmt|;
block|}
name|SetWindowLongPtr
argument_list|(
name|m_hwnd
argument_list|,
name|GWL_STYLE
argument_list|,
name|newStyle
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QWindowsForeignWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|window
argument_list|()
operator|<<
name|visible
expr_stmt|;
if|if
condition|(
name|visible
condition|)
name|ShowWindow
argument_list|(
name|handle
argument_list|()
argument_list|,
name|SW_SHOWNOACTIVATE
argument_list|)
expr_stmt|;
else|else
name|hide_sys
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowCreationContext     \brief Active Context for creating windows.      There is a phase in window creation (WindowCreationData::create())     in which events are sent before the system API CreateWindowEx() returns     the handle. These cannot be handled by the platform window as the association     of the unknown handle value to the window does not exist yet and as not     to trigger recursive handle creation, etc.      In that phase, an instance of  QWindowCreationContext is set on     QWindowsContext.      QWindowCreationContext stores the information to answer the initial     WM_GETMINMAXINFO and obtains the corrected size/position.      \sa WindowCreationData, QWindowsContext     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowCreationContext
name|QWindowCreationContext
operator|::
name|QWindowCreationContext
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QRect
modifier|&
name|geometry
parameter_list|,
specifier|const
name|QMargins
modifier|&
name|cm
parameter_list|,
name|DWORD
name|style_
parameter_list|,
name|DWORD
name|exStyle_
parameter_list|)
member_init_list|:
name|geometryHint
argument_list|(
name|w
argument_list|,
name|cm
argument_list|)
member_init_list|,
name|window
argument_list|(
name|w
argument_list|)
member_init_list|,
name|style
argument_list|(
name|style_
argument_list|)
member_init_list|,
name|exStyle
argument_list|(
name|exStyle_
argument_list|)
member_init_list|,
name|requestedGeometry
argument_list|(
name|geometry
argument_list|)
member_init_list|,
name|obtainedGeometry
argument_list|(
name|geometry
argument_list|)
member_init_list|,
name|margins
argument_list|(
name|QWindowsGeometryHint
operator|::
name|frame
argument_list|(
name|style
argument_list|,
name|exStyle
argument_list|)
argument_list|)
member_init_list|,
name|customMargins
argument_list|(
name|cm
argument_list|)
member_init_list|,
name|frameX
argument_list|(
name|CW_USEDEFAULT
argument_list|)
member_init_list|,
name|frameY
argument_list|(
name|CW_USEDEFAULT
argument_list|)
member_init_list|,
name|frameWidth
argument_list|(
name|CW_USEDEFAULT
argument_list|)
member_init_list|,
name|frameHeight
argument_list|(
name|CW_USEDEFAULT
argument_list|)
block|{
comment|// Geometry of toplevels does not consider window frames.
comment|// TODO: No concept of WA_wasMoved yet that would indicate a
comment|// CW_USEDEFAULT unless set. For now, assume that 0,0 means 'default'
comment|// for toplevels.
if|if
condition|(
name|geometry
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|frameX
operator|=
name|geometry
operator|.
name|x
argument_list|()
expr_stmt|;
name|frameY
operator|=
name|geometry
operator|.
name|y
argument_list|()
expr_stmt|;
specifier|const
name|QMargins
name|effectiveMargins
init|=
name|margins
operator|+
name|customMargins
decl_stmt|;
name|frameWidth
operator|=
name|effectiveMargins
operator|.
name|left
argument_list|()
operator|+
name|geometry
operator|.
name|width
argument_list|()
operator|+
name|effectiveMargins
operator|.
name|right
argument_list|()
expr_stmt|;
name|frameHeight
operator|=
name|effectiveMargins
operator|.
name|top
argument_list|()
operator|+
name|geometry
operator|.
name|height
argument_list|()
operator|+
name|effectiveMargins
operator|.
name|bottom
argument_list|()
expr_stmt|;
specifier|const
name|bool
name|isDefaultPosition
init|=
operator|!
name|frameX
operator|&&
operator|!
name|frameY
operator|&&
name|w
operator|->
name|isTopLevel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|QWindowsGeometryHint
operator|::
name|positionIncludesFrame
argument_list|(
name|w
argument_list|)
operator|&&
operator|!
name|isDefaultPosition
condition|)
block|{
name|frameX
operator|-=
name|effectiveMargins
operator|.
name|left
argument_list|()
expr_stmt|;
name|frameY
operator|-=
name|effectiveMargins
operator|.
name|top
argument_list|()
expr_stmt|;
block|}
block|}
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|w
operator|<<
literal|' '
operator|<<
name|geometry
operator|<<
literal|" pos incl. frame="
operator|<<
name|QWindowsGeometryHint
operator|::
name|positionIncludesFrame
argument_list|(
name|w
argument_list|)
operator|<<
literal|" frame="
operator|<<
name|frameWidth
operator|<<
literal|'x'
operator|<<
name|frameHeight
operator|<<
literal|'+'
operator|<<
name|frameX
operator|<<
literal|'+'
operator|<<
name|frameY
operator|<<
literal|" min="
operator|<<
name|geometryHint
operator|.
name|minimumSize
operator|<<
literal|" max="
operator|<<
name|geometryHint
operator|.
name|maximumSize
operator|<<
literal|" custom margins="
operator|<<
name|customMargins
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \class QWindowsWindow     \brief Raster or OpenGL Window.      \list     \li Raster type: handleWmPaint() is implemented to        to bitblt the image. The DC can be accessed        via getDC/Relase DC, which has a special handling        when within a paint event (in that case, the DC obtained        from BeginPaint() is returned).      \li Open GL: The first time QWindowsGLContext accesses        the handle, it sets up the pixelformat on the DC        which in turn sets it on the window (see flag        PixelFormatInitialized).        handleWmPaint() is empty (although required).     \endlist      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsWindow
name|QWindowsWindow
operator|::
name|QWindowsWindow
parameter_list|(
name|QWindow
modifier|*
name|aWindow
parameter_list|,
specifier|const
name|QWindowsWindowData
modifier|&
name|data
parameter_list|)
member_init_list|:
name|QWindowsBaseWindow
argument_list|(
name|aWindow
argument_list|)
member_init_list|,
name|m_data
argument_list|(
name|data
argument_list|)
member_init_list|,
name|m_flags
argument_list|(
name|WithinCreate
argument_list|)
member_init_list|,
name|m_hdc
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_windowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
member_init_list|,
name|m_opacity
argument_list|(
literal|1.0
argument_list|)
member_init_list|,
name|m_cursor
argument_list|(
operator|new
name|CursorHandle
argument_list|)
member_init_list|,
name|m_dropTarget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_savedStyle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_format
argument_list|(
name|aWindow
operator|->
name|requestedFormat
argument_list|()
argument_list|)
member_init_list|,
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|m_previouslyHidden
argument_list|(
literal|false
argument_list|)
member_init_list|,
endif|#
directive|endif
name|m_iconSmall
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_iconBig
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_surface
argument_list|(
literal|0
argument_list|)
block|{
comment|// Clear the creation context as the window can be found in QWindowsContext's map.
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|setWindowCreationContext
argument_list|(
name|QSharedPointer
argument_list|<
name|QWindowCreationContext
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|addWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|this
argument_list|)
expr_stmt|;
specifier|const
name|Qt
operator|::
name|WindowType
name|type
init|=
name|aWindow
operator|->
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Desktop
condition|)
return|return;
comment|// No further handling for Qt::Desktop
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
if|if
condition|(
name|aWindow
operator|->
name|surfaceType
argument_list|()
operator|==
name|QWindow
operator|::
name|OpenGLSurface
condition|)
block|{
if|if
condition|(
name|QOpenGLContext
operator|::
name|openGLModuleType
argument_list|()
operator|==
name|QOpenGLContext
operator|::
name|LibGL
condition|)
name|setFlag
argument_list|(
name|OpenGLSurface
argument_list|)
expr_stmt|;
else|else
name|setFlag
argument_list|(
name|OpenGL_ES2
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_OPENGL
name|updateDropSite
argument_list|(
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
argument_list|)
expr_stmt|;
name|registerTouchWindow
argument_list|()
expr_stmt|;
name|setWindowState
argument_list|(
name|aWindow
operator|->
name|windowState
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|opacity
init|=
name|qt_window_private
argument_list|(
name|aWindow
argument_list|)
operator|->
name|opacity
decl_stmt|;
if|if
condition|(
operator|!
name|qFuzzyCompare
argument_list|(
name|opacity
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
condition|)
name|setOpacity
argument_list|(
name|opacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|aWindow
operator|->
name|isTopLevel
argument_list|()
condition|)
name|setWindowIcon
argument_list|(
name|aWindow
operator|->
name|icon
argument_list|()
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|WithinCreate
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsWindow
name|QWindowsWindow
operator|::
name|~
name|QWindowsWindow
parameter_list|()
block|{
name|setFlag
argument_list|(
name|WithinDestroy
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|testFlag
argument_list|(
name|TouchRegistered
argument_list|)
condition|)
name|QWindowsContext
operator|::
name|user32dll
operator|.
name|unregisterTouchWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !Q_OS_WINCE
name|destroyWindow
argument_list|()
expr_stmt|;
name|destroyIcon
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|fireExpose
name|void
name|QWindowsWindow
operator|::
name|fireExpose
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|bool
name|force
parameter_list|)
block|{
if|if
condition|(
name|region
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|force
condition|)
name|clearFlag
argument_list|(
name|Exposed
argument_list|)
expr_stmt|;
else|else
name|setFlag
argument_list|(
name|Exposed
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findTransientChild
specifier|static
specifier|inline
name|QWindow
modifier|*
name|findTransientChild
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|parent
parameter_list|)
block|{
foreach|foreach
control|(
name|QWindow
modifier|*
name|w
decl|,
name|QGuiApplication
operator|::
name|topLevelWindows
argument_list|()
control|)
if|if
condition|(
name|w
operator|->
name|transientParent
argument_list|()
operator|==
name|parent
condition|)
return|return
name|w
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|destroyWindow
name|void
name|QWindowsWindow
operator|::
name|destroyWindow
parameter_list|()
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|m_data
operator|.
name|hwnd
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
comment|// Stop event dispatching before Window is destroyed.
name|setFlag
argument_list|(
name|WithinDestroy
argument_list|)
expr_stmt|;
comment|// Clear any transient child relationships as Windows will otherwise destroy them (QTBUG-35499, QTBUG-36666)
if|if
condition|(
name|QWindow
modifier|*
name|transientChild
init|=
name|findTransientChild
argument_list|(
name|window
argument_list|()
argument_list|)
condition|)
if|if
condition|(
name|QWindowsWindow
modifier|*
name|tw
init|=
name|QWindowsWindow
operator|::
name|windowsWindowOf
argument_list|(
name|transientChild
argument_list|)
condition|)
name|tw
operator|->
name|updateTransientParent
argument_list|()
expr_stmt|;
name|QWindowsContext
modifier|*
name|context
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|->
name|windowUnderMouse
argument_list|()
operator|==
name|window
argument_list|()
condition|)
name|context
operator|->
name|clearWindowUnderMouse
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasMouseCapture
argument_list|()
condition|)
name|setMouseGrabEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setDropSiteEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
if|if
condition|(
name|m_surface
condition|)
block|{
if|if
condition|(
name|QWindowsStaticOpenGLContext
modifier|*
name|staticOpenGLContext
init|=
name|QWindowsIntegration
operator|::
name|staticOpenGLContext
argument_list|()
condition|)
name|staticOpenGLContext
operator|->
name|destroyWindowSurface
argument_list|(
name|m_surface
argument_list|)
expr_stmt|;
name|m_surface
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_WINCE
if|if
condition|(
operator|(
name|m_windowState
operator|&
name|Qt
operator|::
name|WindowFullScreen
operator|)
operator|&&
operator|!
name|m_previouslyHidden
condition|)
block|{
name|HWND
name|handle
init|=
name|FindWindow
argument_list|(
literal|L"HHTaskBar"
argument_list|,
literal|L""
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
name|ShowWindow
argument_list|(
name|handle
argument_list|,
name|SW_SHOW
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// !Q_OS_WINCE
name|DestroyWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|context
operator|->
name|removeWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|m_data
operator|.
name|hwnd
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateDropSite
name|void
name|QWindowsWindow
operator|::
name|updateDropSite
parameter_list|(
name|bool
name|topLevel
parameter_list|)
block|{
name|bool
name|enabled
init|=
literal|false
decl_stmt|;
name|bool
name|parentIsEmbedded
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|topLevel
condition|)
block|{
comment|// if the parent window is a foreign window wrapped via QWindow::fromWinId, we need to enable the drop site
comment|// on the first child window
specifier|const
name|QWindow
modifier|*
name|parent
init|=
name|window
argument_list|()
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
operator|(
name|parent
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|ForeignWindow
operator|)
condition|)
name|parentIsEmbedded
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|topLevel
operator|||
name|parentIsEmbedded
condition|)
block|{
switch|switch
condition|(
name|window
argument_list|()
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Window
case|:
case|case
name|Qt
operator|::
name|Dialog
case|:
case|case
name|Qt
operator|::
name|Sheet
case|:
case|case
name|Qt
operator|::
name|Drawer
case|:
case|case
name|Qt
operator|::
name|Popup
case|:
case|case
name|Qt
operator|::
name|Tool
case|:
name|enabled
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|setDropSiteEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDropSiteEnabled
name|void
name|QWindowsWindow
operator|::
name|setDropSiteEnabled
parameter_list|(
name|bool
name|dropEnabled
parameter_list|)
block|{
if|if
condition|(
name|isDropSiteEnabled
argument_list|()
operator|==
name|dropEnabled
condition|)
return|return;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|window
argument_list|()
operator|<<
name|dropEnabled
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CLIPBOARD
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_DRAGANDDROP
argument_list|)
if|if
condition|(
name|dropEnabled
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|m_dropTarget
operator|=
operator|new
name|QWindowsOleDropTarget
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
name|RegisterDragDrop
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|m_dropTarget
argument_list|)
expr_stmt|;
name|CoLockObjectExternal
argument_list|(
name|m_dropTarget
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CoLockObjectExternal
argument_list|(
name|m_dropTarget
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|m_dropTarget
operator|->
name|Release
argument_list|()
expr_stmt|;
name|RevokeDragDrop
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|m_dropTarget
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
comment|// !QT_NO_CLIPBOARD&& !QT_NO_DRAGANDDROP
block|}
end_function
begin_comment
comment|// Returns topmost QWindowsWindow ancestor even if there are embedded windows in the chain.
end_comment
begin_comment
comment|// Returns this window if it is the topmost ancestor.
end_comment
begin_function
DECL|function|topLevelOf
name|QWindow
modifier|*
name|QWindowsWindow
operator|::
name|topLevelOf
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
while|while
condition|(
name|QWindow
modifier|*
name|parent
init|=
name|w
operator|->
name|parent
argument_list|()
condition|)
name|w
operator|=
name|parent
expr_stmt|;
if|if
condition|(
specifier|const
name|QPlatformWindow
modifier|*
name|handle
init|=
name|w
operator|->
name|handle
argument_list|()
condition|)
block|{
specifier|const
name|QWindowsWindow
modifier|*
name|ww
init|=
cast|static_cast
argument_list|<
specifier|const
name|QWindowsWindow
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|ww
operator|->
name|isEmbedded
argument_list|()
condition|)
block|{
name|HWND
name|parentHWND
init|=
name|GetAncestor
argument_list|(
name|ww
operator|->
name|handle
argument_list|()
argument_list|,
name|GA_PARENT
argument_list|)
decl_stmt|;
specifier|const
name|HWND
name|desktopHwnd
init|=
name|GetDesktopWindow
argument_list|()
decl_stmt|;
specifier|const
name|QWindowsContext
modifier|*
name|ctx
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
decl_stmt|;
while|while
condition|(
name|parentHWND
operator|&&
name|parentHWND
operator|!=
name|desktopHwnd
condition|)
block|{
if|if
condition|(
name|QWindowsWindow
modifier|*
name|ancestor
init|=
name|ctx
operator|->
name|findPlatformWindow
argument_list|(
name|parentHWND
argument_list|)
condition|)
return|return
name|topLevelOf
argument_list|(
name|ancestor
operator|->
name|window
argument_list|()
argument_list|)
return|;
name|parentHWND
operator|=
name|GetAncestor
argument_list|(
name|parentHWND
argument_list|,
name|GA_PARENT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|w
return|;
block|}
end_function
begin_function
name|QWindowsWindowData
DECL|function|create
name|QWindowsWindowData
operator|::
name|create
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|QWindowsWindowData
modifier|&
name|parameters
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|WindowCreationData
name|creationData
decl_stmt|;
name|creationData
operator|.
name|fromWindow
argument_list|(
name|w
argument_list|,
name|parameters
operator|.
name|flags
argument_list|)
expr_stmt|;
name|QWindowsWindowData
name|result
init|=
name|creationData
operator|.
name|create
argument_list|(
name|w
argument_list|,
name|parameters
argument_list|,
name|title
argument_list|)
decl_stmt|;
comment|// Force WM_NCCALCSIZE (with wParam=1) via SWP_FRAMECHANGED for custom margin.
name|creationData
operator|.
name|initialize
argument_list|(
name|w
argument_list|,
name|result
operator|.
name|hwnd
argument_list|,
operator|!
name|parameters
operator|.
name|customMargins
operator|.
name|isNull
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QWindowsWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
specifier|const
name|QWindow
modifier|*
name|win
init|=
name|window
argument_list|()
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|win
operator|<<
name|m_data
operator|.
name|hwnd
operator|<<
name|visible
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
if|if
condition|(
name|visible
condition|)
block|{
name|show_sys
argument_list|()
expr_stmt|;
comment|// When the window is layered, we won't get WM_PAINT, and "we" are in control
comment|// over the rendering of the window
comment|// There is nobody waiting for this, so we don't need to flush afterwards.
if|if
condition|(
name|isLayered
argument_list|()
condition|)
name|fireExpose
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|win
operator|->
name|width
argument_list|()
argument_list|,
name|win
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// QTBUG-44928, QTBUG-7386: This is to resolve the problem where popups are
comment|// opened from the system tray and not being implicitly activated
if|if
condition|(
name|win
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|&&
operator|!
name|win
operator|->
name|parent
argument_list|()
operator|&&
operator|!
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
condition|)
name|SetForegroundWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasMouseCapture
argument_list|()
condition|)
name|setMouseGrabEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|Popup
condition|)
comment|// from QWidgetPrivate::hide_sys(), activate other
name|ShowWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|SW_HIDE
argument_list|)
expr_stmt|;
else|else
name|hide_sys
argument_list|()
expr_stmt|;
name|fireExpose
argument_list|(
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|isVisible
name|bool
name|QWindowsWindow
operator|::
name|isVisible
parameter_list|()
specifier|const
block|{
return|return
name|m_data
operator|.
name|hwnd
operator|&&
name|IsWindowVisible
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isActive
name|bool
name|QWindowsWindow
operator|::
name|isActive
parameter_list|()
specifier|const
block|{
comment|// Check for native windows or children of the active native window.
if|if
condition|(
specifier|const
name|HWND
name|activeHwnd
init|=
name|GetForegroundWindow
argument_list|()
condition|)
if|if
condition|(
name|m_data
operator|.
name|hwnd
operator|==
name|activeHwnd
operator|||
name|IsChild
argument_list|(
name|activeHwnd
argument_list|,
name|m_data
operator|.
name|hwnd
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isEmbedded
name|bool
name|QWindowsWindow
operator|::
name|isEmbedded
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|parentWindow
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|parentWindow
condition|)
block|{
specifier|const
name|QWindowsWindow
modifier|*
name|ww
init|=
cast|static_cast
argument_list|<
specifier|const
name|QWindowsWindow
operator|*
argument_list|>
argument_list|(
name|parentWindow
argument_list|)
decl_stmt|;
specifier|const
name|HWND
name|hwnd
init|=
name|ww
operator|->
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|IsChild
argument_list|(
name|hwnd
argument_list|,
name|m_data
operator|.
name|hwnd
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|m_data
operator|.
name|embedded
operator|&&
name|parent
argument_list|()
condition|)
return|return
name|parent
argument_list|()
operator|->
name|isEmbedded
argument_list|()
return|;
return|return
name|m_data
operator|.
name|embedded
return|;
block|}
end_function
begin_function
DECL|function|mapToGlobal
name|QPoint
name|QWindowsWindow
operator|::
name|mapToGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
return|return
name|QWindowsGeometryHint
operator|::
name|mapToGlobal
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|pos
argument_list|)
return|;
else|else
return|return
name|pos
return|;
block|}
end_function
begin_function
DECL|function|mapFromGlobal
name|QPoint
name|QWindowsWindow
operator|::
name|mapFromGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
return|return
name|QWindowsGeometryHint
operator|::
name|mapFromGlobal
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|pos
argument_list|)
return|;
else|else
return|return
name|pos
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_function
DECL|function|transientParentHwnd
specifier|static
specifier|inline
name|HWND
name|transientParentHwnd
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
block|{
if|if
condition|(
name|GetAncestor
argument_list|(
name|hwnd
argument_list|,
name|GA_PARENT
argument_list|)
operator|==
name|GetDesktopWindow
argument_list|()
condition|)
block|{
specifier|const
name|HWND
name|rootOwnerHwnd
init|=
name|GetAncestor
argument_list|(
name|hwnd
argument_list|,
name|GA_ROOTOWNER
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootOwnerHwnd
operator|!=
name|hwnd
condition|)
comment|// May return itself for toplevels.
return|return
name|rootOwnerHwnd
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_OS_WINCE
end_comment
begin_comment
comment|// Update the transient parent for a toplevel window. The concept does not
end_comment
begin_comment
comment|// really exist on Windows, the relationship is set by passing a parent along with !WS_CHILD
end_comment
begin_comment
comment|// to window creation or by setting the parent using  GWL_HWNDPARENT (as opposed to
end_comment
begin_comment
comment|// SetParent, which would make it a real child).
end_comment
begin_function
DECL|function|updateTransientParent
name|void
name|QWindowsWindow
operator|::
name|updateTransientParent
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|window
argument_list|()
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
condition|)
return|return;
comment|// QTBUG-34503, // a popup stays on top, no parent, see also WindowCreationData::fromWindow().
comment|// Update transient parent.
specifier|const
name|HWND
name|oldTransientParent
init|=
name|transientParentHwnd
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
decl_stmt|;
name|HWND
name|newTransientParent
init|=
literal|0
decl_stmt|;
if|if
condition|(
specifier|const
name|QWindow
modifier|*
name|tp
init|=
name|window
argument_list|()
operator|->
name|transientParent
argument_list|()
condition|)
if|if
condition|(
specifier|const
name|QWindowsWindow
modifier|*
name|tw
init|=
name|QWindowsWindow
operator|::
name|windowsWindowOf
argument_list|(
name|tp
argument_list|)
condition|)
if|if
condition|(
operator|!
name|tw
operator|->
name|testFlag
argument_list|(
name|WithinDestroy
argument_list|)
condition|)
comment|// Prevent destruction by parent window (QTBUG-35499, QTBUG-36666)
name|newTransientParent
operator|=
name|tw
operator|->
name|handle
argument_list|()
expr_stmt|;
if|if
condition|(
name|newTransientParent
operator|!=
name|oldTransientParent
condition|)
name|SetWindowLongPtr
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|GWL_HWNDPARENT
argument_list|,
name|LONG_PTR
argument_list|(
name|newTransientParent
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !Q_OS_WINCE
block|}
end_function
begin_function
DECL|function|testShowWithoutActivating
specifier|static
specifier|inline
name|bool
name|testShowWithoutActivating
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
comment|// QWidget-attribute Qt::WA_ShowWithoutActivating .
specifier|const
name|QVariant
name|showWithoutActivating
init|=
name|window
operator|->
name|property
argument_list|(
literal|"_q_showWithoutActivating"
argument_list|)
decl_stmt|;
return|return
name|showWithoutActivating
operator|.
name|isValid
argument_list|()
operator|&&
name|showWithoutActivating
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// partially from QWidgetPrivate::show_sys()
end_comment
begin_function
DECL|function|show_sys
name|void
name|QWindowsWindow
operator|::
name|show_sys
parameter_list|()
specifier|const
block|{
name|int
name|sm
init|=
name|SW_SHOWNORMAL
decl_stmt|;
name|bool
name|fakedMaximize
init|=
literal|false
decl_stmt|;
specifier|const
name|QWindow
modifier|*
name|w
init|=
name|window
argument_list|()
decl_stmt|;
specifier|const
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|w
operator|->
name|flags
argument_list|()
decl_stmt|;
specifier|const
name|Qt
operator|::
name|WindowType
name|type
init|=
name|w
operator|->
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|isTopLevel
argument_list|()
condition|)
block|{
specifier|const
name|Qt
operator|::
name|WindowState
name|state
init|=
name|w
operator|->
name|windowState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
name|sm
operator|=
name|SW_SHOWMINIMIZED
expr_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
name|sm
operator|=
name|SW_SHOWMINNOACTIVE
expr_stmt|;
block|}
else|else
block|{
name|updateTransientParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
name|sm
operator|=
name|SW_SHOWMAXIMIZED
expr_stmt|;
comment|// Windows will not behave correctly when we try to maximize a window which does not
comment|// have minimize nor maximize buttons in the window frame. Windows would then ignore
comment|// non-available geometry, and rather maximize the widget to the full screen, minus the
comment|// window frame (caption). So, we do a trick here, by adding a maximize button before
comment|// maximizing the widget, and then remove the maximize button afterwards.
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|&&
operator|!
operator|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|)
condition|)
block|{
name|fakedMaximize
operator|=
name|TRUE
expr_stmt|;
name|setStyle
argument_list|(
name|style
argument_list|()
operator||
name|WS_MAXIMIZEBOX
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Qt::WindowMaximized
block|}
comment|// !Qt::WindowMinimized
block|}
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|testShowWithoutActivating
argument_list|(
name|w
argument_list|)
condition|)
name|sm
operator|=
name|SW_SHOWNOACTIVATE
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
name|setFlag
argument_list|(
name|WithinMaximize
argument_list|)
expr_stmt|;
comment|// QTBUG-8361
name|ShowWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|sm
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|WithinMaximize
argument_list|)
expr_stmt|;
if|if
condition|(
name|fakedMaximize
condition|)
block|{
name|setStyle
argument_list|(
name|style
argument_list|()
operator|&
operator|~
name|WS_MAXIMIZEBOX
argument_list|)
expr_stmt|;
name|SetWindowPos
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SWP_NOACTIVATE
operator||
name|SWP_NOMOVE
operator||
name|SWP_NOSIZE
operator||
name|SWP_NOZORDER
operator||
name|SWP_NOOWNERZORDER
operator||
name|SWP_FRAMECHANGED
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setParent
name|void
name|QWindowsWindow
operator|::
name|setParent
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|newParent
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|window
argument_list|()
operator|<<
name|newParent
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
name|setParent_sys
argument_list|(
name|newParent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setParent_sys
name|void
name|QWindowsWindow
operator|::
name|setParent_sys
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|parent
parameter_list|)
block|{
comment|// Use GetAncestor instead of GetParent, as GetParent can return owner window for toplevels
name|HWND
name|oldParentHWND
init|=
name|parentHwnd
argument_list|()
decl_stmt|;
name|HWND
name|newParentHWND
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|parent
condition|)
block|{
specifier|const
name|QWindowsWindow
modifier|*
name|parentW
init|=
cast|static_cast
argument_list|<
specifier|const
name|QWindowsWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|newParentHWND
operator|=
name|parentW
operator|->
name|handle
argument_list|()
expr_stmt|;
block|}
comment|// NULL handle means desktop window, which also has its proper handle -> disambiguate
name|HWND
name|desktopHwnd
init|=
name|GetDesktopWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldParentHWND
operator|==
name|desktopHwnd
condition|)
name|oldParentHWND
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|newParentHWND
operator|==
name|desktopHwnd
condition|)
name|newParentHWND
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|newParentHWND
operator|!=
name|oldParentHWND
condition|)
block|{
specifier|const
name|bool
name|wasTopLevel
init|=
name|oldParentHWND
operator|==
literal|0
decl_stmt|;
specifier|const
name|bool
name|isTopLevel
init|=
name|newParentHWND
operator|==
literal|0
decl_stmt|;
name|setFlag
argument_list|(
name|WithinSetParent
argument_list|)
expr_stmt|;
name|SetParent
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|newParentHWND
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|WithinSetParent
argument_list|)
expr_stmt|;
comment|// WS_CHILD/WS_POPUP must be manually set/cleared in addition
comment|// to dialog frames, etc (see  SetParent() ) if the top level state changes.
comment|// Force toplevel state as QWindow::isTopLevel cannot be relied upon here.
if|if
condition|(
name|wasTopLevel
operator|!=
name|isTopLevel
condition|)
block|{
name|setDropSiteEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setWindowFlags_sys
argument_list|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
argument_list|,
name|unsigned
argument_list|(
name|isTopLevel
condition|?
name|WindowCreationData
operator|::
name|ForceTopLevel
else|:
name|WindowCreationData
operator|::
name|ForceChild
argument_list|)
argument_list|)
expr_stmt|;
name|updateDropSite
argument_list|(
name|isTopLevel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|handleHidden
name|void
name|QWindowsWindow
operator|::
name|handleHidden
parameter_list|()
block|{
name|fireExpose
argument_list|(
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleCompositionSettingsChanged
name|void
name|QWindowsWindow
operator|::
name|handleCompositionSettingsChanged
parameter_list|()
block|{
specifier|const
name|QWindow
modifier|*
name|w
init|=
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|surfaceType
argument_list|()
operator|==
name|QWindow
operator|::
name|OpenGLSurface
operator|&&
name|w
operator|->
name|format
argument_list|()
operator|.
name|hasAlpha
argument_list|()
condition|)
name|applyBlurBehindWindow
argument_list|(
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalFrameGeometry
specifier|static
name|QRect
name|normalFrameGeometry
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|WINDOWPLACEMENT
name|wp
decl_stmt|;
name|wp
operator|.
name|length
operator|=
sizeof|sizeof
argument_list|(
name|WINDOWPLACEMENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|GetWindowPlacement
argument_list|(
name|hwnd
argument_list|,
operator|&
name|wp
argument_list|)
condition|)
block|{
specifier|const
name|QRect
name|result
init|=
name|qrectFromRECT
argument_list|(
name|wp
operator|.
name|rcNormalPosition
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|translated
argument_list|(
name|windowPlacementOffset
argument_list|(
name|hwnd
argument_list|,
name|result
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|hwnd
argument_list|)
endif|#
directive|endif
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|normalGeometry
name|QRect
name|QWindowsWindow
operator|::
name|normalGeometry
parameter_list|()
specifier|const
block|{
comment|// Check for fake 'fullscreen' mode.
specifier|const
name|bool
name|fakeFullScreen
init|=
name|m_savedFrameGeometry
operator|.
name|isValid
argument_list|()
operator|&&
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
operator|==
name|Qt
operator|::
name|WindowFullScreen
decl_stmt|;
specifier|const
name|QRect
name|frame
init|=
name|fakeFullScreen
condition|?
name|m_savedFrameGeometry
else|:
name|normalFrameGeometry
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
decl_stmt|;
specifier|const
name|QMargins
name|margins
init|=
name|fakeFullScreen
condition|?
name|QWindowsGeometryHint
operator|::
name|frame
argument_list|(
name|m_savedStyle
argument_list|,
literal|0
argument_list|)
else|:
name|frameMargins
argument_list|()
decl_stmt|;
return|return
name|frame
operator|.
name|isValid
argument_list|()
condition|?
name|frame
operator|.
name|marginsRemoved
argument_list|(
name|margins
argument_list|)
else|:
name|frame
return|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QWindowsWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rectIn
parameter_list|)
block|{
name|QRect
name|rect
init|=
name|rectIn
decl_stmt|;
comment|// This means it is a call from QWindow::setFramePosition() and
comment|// the coordinates include the frame (size is still the contents rectangle).
if|if
condition|(
name|QWindowsGeometryHint
operator|::
name|positionIncludesFrame
argument_list|(
name|window
argument_list|()
argument_list|)
condition|)
block|{
specifier|const
name|QMargins
name|margins
init|=
name|frameMargins
argument_list|()
decl_stmt|;
name|rect
operator|.
name|moveTopLeft
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|margins
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_windowState
operator|==
name|Qt
operator|::
name|WindowMinimized
condition|)
name|m_data
operator|.
name|geometry
operator|=
name|rect
expr_stmt|;
comment|// Otherwise set by handleGeometryChange() triggered by event.
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
comment|// A ResizeEvent with resulting geometry will be sent. If we cannot
comment|// achieve that size (for example, window title minimal constraint),
comment|// notify and warn.
name|setGeometry_sys
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|geometry
operator|!=
name|rect
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Unable to set geometry %dx%d+%d+%d on %s/'%s'."
literal|" Resulting geometry:  %dx%d+%d+%d "
literal|"(frame: %d, %d, %d, %d, custom margin: %d, %d, %d, %d"
literal|", minimum size: %dx%d, maximum size: %dx%d)."
argument_list|,
name|__FUNCTION__
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|window
argument_list|()
operator|->
name|objectName
argument_list|()
argument_list|)
argument_list|,
name|m_data
operator|.
name|geometry
operator|.
name|width
argument_list|()
argument_list|,
name|m_data
operator|.
name|geometry
operator|.
name|height
argument_list|()
argument_list|,
name|m_data
operator|.
name|geometry
operator|.
name|x
argument_list|()
argument_list|,
name|m_data
operator|.
name|geometry
operator|.
name|y
argument_list|()
argument_list|,
name|m_data
operator|.
name|frame
operator|.
name|left
argument_list|()
argument_list|,
name|m_data
operator|.
name|frame
operator|.
name|top
argument_list|()
argument_list|,
name|m_data
operator|.
name|frame
operator|.
name|right
argument_list|()
argument_list|,
name|m_data
operator|.
name|frame
operator|.
name|bottom
argument_list|()
argument_list|,
name|m_data
operator|.
name|customMargins
operator|.
name|left
argument_list|()
argument_list|,
name|m_data
operator|.
name|customMargins
operator|.
name|top
argument_list|()
argument_list|,
name|m_data
operator|.
name|customMargins
operator|.
name|right
argument_list|()
argument_list|,
name|m_data
operator|.
name|customMargins
operator|.
name|bottom
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|minimumWidth
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|minimumHeight
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|maximumWidth
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|maximumHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleMoved
name|void
name|QWindowsWindow
operator|::
name|handleMoved
parameter_list|()
block|{
comment|// Minimize/Set parent can send nonsensical move events.
if|if
condition|(
operator|!
name|IsIconic
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
operator|&&
operator|!
name|testFlag
argument_list|(
name|WithinSetParent
argument_list|)
condition|)
name|handleGeometryChange
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleResized
name|void
name|QWindowsWindow
operator|::
name|handleResized
parameter_list|(
name|int
name|wParam
parameter_list|)
block|{
switch|switch
condition|(
name|wParam
condition|)
block|{
case|case
name|SIZE_MAXHIDE
case|:
comment|// Some other window affected.
case|case
name|SIZE_MAXSHOW
case|:
return|return;
case|case
name|SIZE_MINIMIZED
case|:
name|handleWindowStateChange
argument_list|(
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
return|return;
case|case
name|SIZE_MAXIMIZED
case|:
name|handleWindowStateChange
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|handleGeometryChange
argument_list|()
expr_stmt|;
break|break;
case|case
name|SIZE_RESTORED
case|:
if|if
condition|(
name|isFullScreen_sys
argument_list|()
condition|)
name|handleWindowStateChange
argument_list|(
name|Qt
operator|::
name|WindowFullScreen
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|m_windowState
operator|!=
name|Qt
operator|::
name|WindowNoState
operator|&&
operator|!
name|testFlag
argument_list|(
name|MaximizeToFullScreen
argument_list|)
condition|)
name|handleWindowStateChange
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|handleGeometryChange
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|handleGeometryChange
name|void
name|QWindowsWindow
operator|::
name|handleGeometryChange
parameter_list|()
block|{
comment|//Prevent recursive resizes for Windows CE
if|if
condition|(
name|testFlag
argument_list|(
name|WithinSetStyle
argument_list|)
condition|)
return|return;
specifier|const
name|QRect
name|previousGeometry
init|=
name|m_data
operator|.
name|geometry
decl_stmt|;
name|m_data
operator|.
name|geometry
operator|=
name|geometry_sys
argument_list|()
expr_stmt|;
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|m_data
operator|.
name|geometry
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|m_data
operator|.
name|geometry
argument_list|)
expr_stmt|;
comment|// QTBUG-32121: OpenGL/normal windows (with exception of ANGLE) do not receive
comment|// expose events when shrinking, synthesize.
if|if
condition|(
operator|!
name|testFlag
argument_list|(
name|OpenGL_ES2
argument_list|)
operator|&&
name|isExposed
argument_list|()
operator|&&
name|m_data
operator|.
name|geometry
operator|.
name|size
argument_list|()
operator|!=
name|previousGeometry
operator|.
name|size
argument_list|()
comment|// Exclude plain move
comment|// One dimension grew -> Windows will send expose, no need to synthesize.
operator|&&
operator|!
operator|(
name|m_data
operator|.
name|geometry
operator|.
name|width
argument_list|()
operator|>
name|previousGeometry
operator|.
name|width
argument_list|()
operator|||
name|m_data
operator|.
name|geometry
operator|.
name|height
argument_list|()
operator|>
name|previousGeometry
operator|.
name|height
argument_list|()
operator|)
condition|)
block|{
name|fireExpose
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|m_data
operator|.
name|geometry
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previousGeometry
operator|.
name|topLeft
argument_list|()
operator|!=
name|m_data
operator|.
name|geometry
operator|.
name|topLeft
argument_list|()
condition|)
block|{
name|QPlatformScreen
modifier|*
name|newScreen
init|=
name|screenForGeometry
argument_list|(
name|m_data
operator|.
name|geometry
argument_list|)
decl_stmt|;
if|if
condition|(
name|newScreen
operator|!=
name|screen
argument_list|()
condition|)
name|QWindowSystemInterface
operator|::
name|handleWindowScreenChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|newScreen
operator|->
name|screen
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testFlag
argument_list|(
name|SynchronousGeometryChangeEvent
argument_list|)
condition|)
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaEvents
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|m_data
operator|.
name|geometry
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometry_sys
name|void
name|QWindowsBaseWindow
operator|::
name|setGeometry_sys
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
specifier|const
name|QMargins
name|margins
init|=
name|frameMargins
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|frameGeometry
init|=
name|rect
operator|+
name|margins
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
name|window
argument_list|()
operator|<<
literal|"\n from "
operator|<<
name|geometry_sys
argument_list|()
operator|<<
literal|" frame: "
operator|<<
name|margins
operator|<<
literal|" to "
operator|<<
name|rect
operator|<<
literal|" new frame: "
operator|<<
name|frameGeometry
expr_stmt|;
name|bool
name|result
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
specifier|const
name|HWND
name|hwnd
init|=
name|handle
argument_list|()
decl_stmt|;
name|WINDOWPLACEMENT
name|windowPlacement
decl_stmt|;
name|windowPlacement
operator|.
name|length
operator|=
sizeof|sizeof
argument_list|(
name|WINDOWPLACEMENT
argument_list|)
expr_stmt|;
name|GetWindowPlacement
argument_list|(
name|hwnd
argument_list|,
operator|&
name|windowPlacement
argument_list|)
expr_stmt|;
comment|// If the window is hidden and in maximized state or minimized, instead of moving the
comment|// window, set the normal position of the window.
if|if
condition|(
operator|(
name|windowPlacement
operator|.
name|showCmd
operator|==
name|SW_MAXIMIZE
operator|&&
operator|!
name|IsWindowVisible
argument_list|(
name|hwnd
argument_list|)
operator|)
operator|||
name|windowPlacement
operator|.
name|showCmd
operator|==
name|SW_SHOWMINIMIZED
condition|)
block|{
name|windowPlacement
operator|.
name|rcNormalPosition
operator|=
name|RECTfromQRect
argument_list|(
name|frameGeometry
operator|.
name|translated
argument_list|(
operator|-
name|windowPlacementOffset
argument_list|(
name|hwnd
argument_list|,
name|frameGeometry
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|windowPlacement
operator|.
name|showCmd
operator|=
name|windowPlacement
operator|.
name|showCmd
operator|==
name|SW_SHOWMINIMIZED
condition|?
name|SW_SHOWMINIMIZED
else|:
name|SW_HIDE
expr_stmt|;
name|result
operator|=
name|SetWindowPlacement
argument_list|(
name|hwnd
argument_list|,
operator|&
name|windowPlacement
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|// !Q_OS_WINCE
block|{
name|result
operator|=
name|MoveWindow
argument_list|(
name|hwnd
argument_list|,
name|frameGeometry
operator|.
name|x
argument_list|()
argument_list|,
name|frameGeometry
operator|.
name|y
argument_list|()
argument_list|,
name|frameGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|frameGeometry
operator|.
name|height
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
literal|'<'
operator|<<
name|__FUNCTION__
operator|<<
name|window
argument_list|()
operator|<<
literal|"\n resulting "
operator|<<
name|result
operator|<<
name|geometry_sys
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Allocates a HDC for the window or returns the temporary one     obtained from WinAPI BeginPaint within a WM_PAINT event.      \sa releaseDC() */
end_comment
begin_function
DECL|function|getDC
name|HDC
name|QWindowsWindow
operator|::
name|getDC
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_hdc
condition|)
name|m_hdc
operator|=
name|GetDC
argument_list|(
name|handle
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m_hdc
return|;
block|}
end_function
begin_comment
comment|/*!     Relases the HDC for the window or does nothing in     case it was obtained from WinAPI BeginPaint within a WM_PAINT event.      \sa getDC() */
end_comment
begin_function
DECL|function|releaseDC
name|void
name|QWindowsWindow
operator|::
name|releaseDC
parameter_list|()
block|{
if|if
condition|(
name|m_hdc
condition|)
block|{
name|ReleaseDC
argument_list|(
name|handle
argument_list|()
argument_list|,
name|m_hdc
argument_list|)
expr_stmt|;
name|m_hdc
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleWmPaint
name|bool
name|QWindowsWindow
operator|::
name|handleWmPaint
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|UINT
name|message
parameter_list|,
name|WPARAM
parameter_list|,
name|LPARAM
parameter_list|)
block|{
if|if
condition|(
name|message
operator|==
name|WM_ERASEBKGND
condition|)
comment|// Backing store - ignored.
return|return
literal|true
return|;
comment|// Ignore invalid update bounding rectangles
if|if
condition|(
operator|!
name|GetUpdateRect
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
literal|0
argument_list|,
name|FALSE
argument_list|)
condition|)
return|return
literal|false
return|;
name|PAINTSTRUCT
name|ps
decl_stmt|;
comment|// Observed painting problems with Aero style disabled (QTBUG-7865).
if|if
condition|(
name|testFlag
argument_list|(
name|OpenGLSurface
argument_list|)
operator|&&
name|testFlag
argument_list|(
name|OpenGLDoubleBuffered
argument_list|)
condition|)
name|InvalidateRect
argument_list|(
name|hwnd
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|BeginPaint
argument_list|(
name|hwnd
argument_list|,
operator|&
name|ps
argument_list|)
expr_stmt|;
comment|// If the a window is obscured by another window (such as a child window)
comment|// we still need to send isExposed=true, for compatibility.
comment|// Our tests depend on it.
name|fireExpose
argument_list|(
name|QRegion
argument_list|(
name|qrectFromRECT
argument_list|(
name|ps
operator|.
name|rcPaint
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|asyncExpose
argument_list|()
condition|)
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
name|EndPaint
argument_list|(
name|hwnd
argument_list|,
operator|&
name|ps
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setWindowTitle
name|void
name|QWindowsWindow
operator|::
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|setWindowTitle_sys
argument_list|(
name|QWindowsWindow
operator|::
name|formatWindowTitle
argument_list|(
name|title
argument_list|,
name|QStringLiteral
argument_list|(
literal|" - "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowFlags
name|void
name|QWindowsWindow
operator|::
name|setWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
literal|"\n    from: "
operator|<<
name|m_data
operator|.
name|flags
operator|<<
literal|"\n    to: "
operator|<<
name|flags
expr_stmt|;
specifier|const
name|QRect
name|oldGeometry
init|=
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_data
operator|.
name|flags
operator|!=
name|flags
condition|)
block|{
name|m_data
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
name|m_data
operator|=
name|setWindowFlags_sys
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|updateDropSite
argument_list|(
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// When switching to a frameless window, geometry
comment|// may change without a WM_MOVE. Report change manually.
comment|// Do not send synchronously as not to clobber the widget
comment|// geometry in a sequence of setting flags and geometry.
specifier|const
name|QRect
name|newGeometry
init|=
name|geometry_sys
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldGeometry
operator|!=
name|newGeometry
condition|)
name|handleGeometryChange
argument_list|()
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
literal|'<'
operator|<<
name|__FUNCTION__
operator|<<
literal|"\n    returns: "
operator|<<
name|m_data
operator|.
name|flags
operator|<<
literal|" geometry "
operator|<<
name|oldGeometry
operator|<<
literal|"->"
operator|<<
name|newGeometry
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowFlags_sys
name|QWindowsWindowData
name|QWindowsWindow
operator|::
name|setWindowFlags_sys
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|wt
parameter_list|,
name|unsigned
name|flags
parameter_list|)
specifier|const
block|{
name|WindowCreationData
name|creationData
decl_stmt|;
name|creationData
operator|.
name|fromWindow
argument_list|(
name|window
argument_list|()
argument_list|,
name|wt
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|creationData
operator|.
name|applyWindowFlags
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|creationData
operator|.
name|initialize
argument_list|(
name|window
argument_list|()
argument_list|,
name|m_data
operator|.
name|hwnd
argument_list|,
literal|true
argument_list|,
name|m_opacity
argument_list|)
expr_stmt|;
name|QWindowsWindowData
name|result
init|=
name|m_data
decl_stmt|;
name|result
operator|.
name|flags
operator|=
name|creationData
operator|.
name|flags
expr_stmt|;
name|result
operator|.
name|embedded
operator|=
name|creationData
operator|.
name|embedded
expr_stmt|;
name|setFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|handleWindowStateChange
name|void
name|QWindowsWindow
operator|::
name|handleWindowStateChange
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
literal|"\n    from "
operator|<<
name|m_windowState
operator|<<
literal|" to "
operator|<<
name|state
expr_stmt|;
name|setFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
name|m_windowState
operator|=
name|state
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowStateChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowMinimized
case|:
name|handleHidden
argument_list|()
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
comment|// Tell QQuickWindow to stop rendering now.
break|break;
case|case
name|Qt
operator|::
name|WindowMaximized
case|:
case|case
name|Qt
operator|::
name|WindowFullScreen
case|:
case|case
name|Qt
operator|::
name|WindowNoState
case|:
block|{
comment|// QTBUG-17548: We send expose events when receiving WM_Paint, but for
comment|// layered windows and transient children, we won't receive any WM_Paint.
name|QWindow
modifier|*
name|w
init|=
name|window
argument_list|()
decl_stmt|;
name|bool
name|exposeEventsSent
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isLayered
argument_list|()
condition|)
block|{
name|fireExpose
argument_list|(
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
operator|->
name|width
argument_list|()
argument_list|,
name|w
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposeEventsSent
operator|=
literal|true
expr_stmt|;
block|}
foreach|foreach
control|(
name|QWindow
modifier|*
name|child
decl|,
name|QGuiApplication
operator|::
name|allWindows
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|!=
name|w
operator|&&
name|child
operator|->
name|isVisible
argument_list|()
operator|&&
name|child
operator|->
name|transientParent
argument_list|()
operator|==
name|w
condition|)
block|{
name|QWindowsWindow
modifier|*
name|platformWindow
init|=
name|QWindowsWindow
operator|::
name|windowsWindowOf
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|platformWindow
operator|&&
name|platformWindow
operator|->
name|isLayered
argument_list|()
condition|)
block|{
name|platformWindow
operator|->
name|fireExpose
argument_list|(
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|child
operator|->
name|width
argument_list|()
argument_list|,
name|child
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposeEventsSent
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|exposeEventsSent
operator|&&
operator|!
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|asyncExpose
argument_list|()
condition|)
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|QWindowsWindow
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
name|setWindowState_sys
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|m_windowState
operator|=
name|state
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isFullScreen_sys
name|bool
name|QWindowsWindow
operator|::
name|isFullScreen_sys
parameter_list|()
specifier|const
block|{
specifier|const
name|QWindow
modifier|*
name|w
init|=
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isTopLevel
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|w
operator|->
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
name|screen
operator|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
expr_stmt|;
return|return
name|screen
operator|&&
name|geometry_sys
argument_list|()
operator|==
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|screen
operator|->
name|geometry
argument_list|()
argument_list|,
name|w
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Change the window state.      \note Window frames change when maximized;     the top margin shrinks somewhat but that cannot be obtained using     AdjustWindowRectEx().      \note Some calls to SetWindowLong require a subsequent call     to ShowWindow. */
end_comment
begin_function
DECL|function|setWindowState_sys
name|void
name|QWindowsWindow
operator|::
name|setWindowState_sys
parameter_list|(
name|Qt
operator|::
name|WindowState
name|newState
parameter_list|)
block|{
specifier|const
name|Qt
operator|::
name|WindowState
name|oldState
init|=
name|m_windowState
decl_stmt|;
if|if
condition|(
name|oldState
operator|==
name|newState
condition|)
return|return;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
literal|" from "
operator|<<
name|oldState
operator|<<
literal|" to "
operator|<<
name|newState
expr_stmt|;
specifier|const
name|bool
name|visible
init|=
name|isVisible
argument_list|()
decl_stmt|;
name|setFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|oldState
operator|==
name|Qt
operator|::
name|WindowFullScreen
operator|)
operator|!=
operator|(
name|newState
operator|==
name|Qt
operator|::
name|WindowFullScreen
operator|)
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|HWND
name|handle
init|=
name|FindWindow
argument_list|(
literal|L"HHTaskBar"
argument_list|,
literal|L""
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
if|if
condition|(
name|newState
operator|==
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
name|BOOL
name|hidden
init|=
name|ShowWindow
argument_list|(
name|handle
argument_list|,
name|SW_HIDE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hidden
condition|)
name|m_previouslyHidden
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|m_previouslyHidden
condition|)
block|{
name|ShowWindow
argument_list|(
name|handle
argument_list|,
name|SW_SHOW
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|newState
operator|==
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_FLATTEN_EXPOSE
name|UINT
name|newStyle
init|=
name|WS_CLIPCHILDREN
operator||
name|WS_CLIPSIBLINGS
operator||
name|WS_POPUP
decl_stmt|;
else|#
directive|else
name|UINT
name|newStyle
init|=
name|WS_POPUP
decl_stmt|;
endif|#
directive|endif
comment|// Save geometry and style to be restored when fullscreen
comment|// is turned off again, since on Windows, it is not a real
comment|// Window state but emulated by changing geometry and style.
if|if
condition|(
operator|!
name|m_savedStyle
condition|)
block|{
name|m_savedStyle
operator|=
name|style
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|oldState
operator|==
name|Qt
operator|::
name|WindowMinimized
operator|||
name|oldState
operator|==
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
specifier|const
name|QRect
name|nf
init|=
name|normalFrameGeometry
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
decl_stmt|;
if|if
condition|(
name|nf
operator|.
name|isValid
argument_list|()
condition|)
name|m_savedFrameGeometry
operator|=
name|nf
expr_stmt|;
block|}
else|else
block|{
endif|#
directive|endif
name|m_savedFrameGeometry
operator|=
name|frameGeometry_sys
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
block|}
endif|#
directive|endif
block|}
if|if
condition|(
name|m_savedStyle
operator|&
name|WS_SYSMENU
condition|)
name|newStyle
operator||=
name|WS_SYSMENU
expr_stmt|;
if|if
condition|(
name|visible
condition|)
name|newStyle
operator||=
name|WS_VISIBLE
expr_stmt|;
if|if
condition|(
name|testFlag
argument_list|(
name|HasBorderInFullScreen
argument_list|)
condition|)
name|newStyle
operator||=
name|WS_BORDER
expr_stmt|;
name|setStyle
argument_list|(
name|newStyle
argument_list|)
expr_stmt|;
comment|// Use geometry of QWindow::screen() within creation or the virtual screen the
comment|// window is in (QTBUG-31166, QTBUG-30724).
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|window
argument_list|()
operator|->
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
name|screen
operator|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
expr_stmt|;
specifier|const
name|QRect
name|r
init|=
name|screen
condition|?
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|screen
operator|->
name|geometry
argument_list|()
argument_list|,
name|window
argument_list|()
argument_list|)
else|:
name|m_savedFrameGeometry
decl_stmt|;
specifier|const
name|UINT
name|swpf
init|=
name|SWP_FRAMECHANGED
operator||
name|SWP_NOACTIVATE
decl_stmt|;
specifier|const
name|bool
name|wasSync
init|=
name|testFlag
argument_list|(
name|SynchronousGeometryChangeEvent
argument_list|)
decl_stmt|;
name|setFlag
argument_list|(
name|SynchronousGeometryChangeEvent
argument_list|)
expr_stmt|;
name|SetWindowPos
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|HWND_TOP
argument_list|,
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|swpf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wasSync
condition|)
name|clearFlag
argument_list|(
name|SynchronousGeometryChangeEvent
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newState
operator|!=
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
comment|// Restore saved state.
name|unsigned
name|newStyle
init|=
name|m_savedStyle
condition|?
name|m_savedStyle
else|:
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|visible
condition|)
name|newStyle
operator||=
name|WS_VISIBLE
expr_stmt|;
name|setStyle
argument_list|(
name|newStyle
argument_list|)
expr_stmt|;
name|UINT
name|swpf
init|=
name|SWP_FRAMECHANGED
operator||
name|SWP_NOZORDER
operator||
name|SWP_NOACTIVATE
decl_stmt|;
if|if
condition|(
operator|!
name|m_savedFrameGeometry
operator|.
name|isValid
argument_list|()
condition|)
name|swpf
operator||=
name|SWP_NOSIZE
operator||
name|SWP_NOMOVE
expr_stmt|;
specifier|const
name|bool
name|wasSync
init|=
name|testFlag
argument_list|(
name|SynchronousGeometryChangeEvent
argument_list|)
decl_stmt|;
name|setFlag
argument_list|(
name|SynchronousGeometryChangeEvent
argument_list|)
expr_stmt|;
comment|// After maximized/fullscreen; the window can be in a maximized state. Clear
comment|// it before applying the normal geometry.
if|if
condition|(
name|windowVisibility_sys
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
operator|==
name|QWindow
operator|::
name|Maximized
condition|)
name|ShowWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|SW_SHOWNOACTIVATE
argument_list|)
expr_stmt|;
name|SetWindowPos
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
literal|0
argument_list|,
name|m_savedFrameGeometry
operator|.
name|x
argument_list|()
argument_list|,
name|m_savedFrameGeometry
operator|.
name|y
argument_list|()
argument_list|,
name|m_savedFrameGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|m_savedFrameGeometry
operator|.
name|height
argument_list|()
argument_list|,
name|swpf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wasSync
condition|)
name|clearFlag
argument_list|(
name|SynchronousGeometryChangeEvent
argument_list|)
expr_stmt|;
comment|// preserve maximized state
if|if
condition|(
name|visible
condition|)
block|{
name|setFlag
argument_list|(
name|WithinMaximize
argument_list|)
expr_stmt|;
name|ShowWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
operator|(
name|newState
operator|==
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|SW_MAXIMIZE
else|:
name|SW_SHOWNA
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|WithinMaximize
argument_list|)
expr_stmt|;
block|}
name|m_savedStyle
operator|=
literal|0
expr_stmt|;
name|m_savedFrameGeometry
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|oldState
operator|==
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|!=
operator|(
name|newState
operator|==
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
block|{
if|if
condition|(
name|visible
operator|&&
operator|!
operator|(
name|newState
operator|==
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
name|setFlag
argument_list|(
name|WithinMaximize
argument_list|)
expr_stmt|;
if|if
condition|(
name|newState
operator|==
name|Qt
operator|::
name|WindowFullScreen
condition|)
name|setFlag
argument_list|(
name|MaximizeToFullScreen
argument_list|)
expr_stmt|;
name|ShowWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
operator|(
name|newState
operator|==
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|SW_MAXIMIZE
else|:
name|SW_SHOWNOACTIVATE
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|WithinMaximize
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|MaximizeToFullScreen
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|oldState
operator|==
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|!=
operator|(
name|newState
operator|==
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
block|{
if|if
condition|(
name|visible
condition|)
name|ShowWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
operator|(
name|newState
operator|==
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|?
name|SW_MINIMIZE
else|:
operator|(
name|newState
operator|==
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|?
name|SW_MAXIMIZE
else|:
name|SW_SHOWNORMAL
argument_list|)
expr_stmt|;
block|}
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
literal|'<'
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|newState
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setStyle
name|void
name|QWindowsWindow
operator|::
name|setStyle
parameter_list|(
name|unsigned
name|s
parameter_list|)
specifier|const
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|debugWinStyle
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|WithinSetStyle
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
name|SetWindowLongPtr
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|GWL_STYLE
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|WithinSetStyle
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setExStyle
name|void
name|QWindowsWindow
operator|::
name|setExStyle
parameter_list|(
name|unsigned
name|s
parameter_list|)
specifier|const
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|this
operator|<<
literal|' '
operator|<<
name|window
argument_list|()
operator|<<
literal|" 0x"
operator|<<
name|QByteArray
operator|::
name|number
argument_list|(
name|s
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
name|SetWindowLongPtr
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|GWL_EXSTYLE
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowEvent
name|void
name|QWindowsWindow
operator|::
name|windowEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|WindowBlocked
case|:
comment|// Blocked by another modal window.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|BlockedByModal
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasMouseCapture
argument_list|()
condition|)
name|ReleaseCapture
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|WindowUnblocked
case|:
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|BlockedByModal
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|propagateSizeHints
name|void
name|QWindowsWindow
operator|::
name|propagateSizeHints
parameter_list|()
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleGeometryChangingMessage
name|bool
name|QWindowsWindow
operator|::
name|handleGeometryChangingMessage
parameter_list|(
name|MSG
modifier|*
name|message
parameter_list|,
specifier|const
name|QWindow
modifier|*
name|qWindow
parameter_list|,
specifier|const
name|QMargins
modifier|&
name|margins
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
operator|!
name|qWindow
operator|->
name|isTopLevel
argument_list|()
condition|)
comment|// Implement hasHeightForWidth().
return|return
literal|false
return|;
name|WINDOWPOS
modifier|*
name|windowPos
init|=
cast|reinterpret_cast
argument_list|<
name|WINDOWPOS
operator|*
argument_list|>
argument_list|(
name|message
operator|->
name|lParam
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|windowPos
operator|->
name|flags
operator|&
operator|(
name|SWP_NOCOPYBITS
operator||
name|SWP_NOSIZE
operator|)
operator|)
condition|)
return|return
literal|false
return|;
specifier|const
name|QRect
name|suggestedFrameGeometry
argument_list|(
name|windowPos
operator|->
name|x
argument_list|,
name|windowPos
operator|->
name|y
argument_list|,
name|windowPos
operator|->
name|cx
argument_list|,
name|windowPos
operator|->
name|cy
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|suggestedGeometry
init|=
name|suggestedFrameGeometry
operator|-
name|margins
decl_stmt|;
specifier|const
name|QRectF
name|correctedGeometryF
init|=
name|QPlatformWindow
operator|::
name|closestAcceptableGeometry
argument_list|(
name|qWindow
argument_list|,
name|suggestedGeometry
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|correctedGeometryF
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QRect
name|correctedFrameGeometry
init|=
name|correctedGeometryF
operator|.
name|toRect
argument_list|()
operator|+
name|margins
decl_stmt|;
if|if
condition|(
name|correctedFrameGeometry
operator|==
name|suggestedFrameGeometry
condition|)
return|return
literal|false
return|;
name|windowPos
operator|->
name|x
operator|=
name|correctedFrameGeometry
operator|.
name|left
argument_list|()
expr_stmt|;
name|windowPos
operator|->
name|y
operator|=
name|correctedFrameGeometry
operator|.
name|top
argument_list|()
expr_stmt|;
name|windowPos
operator|->
name|cx
operator|=
name|correctedFrameGeometry
operator|.
name|width
argument_list|()
expr_stmt|;
name|windowPos
operator|->
name|cy
operator|=
name|correctedFrameGeometry
operator|.
name|height
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
comment|// !Q_OS_WINCE
name|Q_UNUSED
argument_list|(
argument|message
argument_list|)
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|handleGeometryChanging
name|bool
name|QWindowsWindow
operator|::
name|handleGeometryChanging
parameter_list|(
name|MSG
modifier|*
name|message
parameter_list|)
specifier|const
block|{
specifier|const
name|QMargins
name|margins
init|=
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
condition|?
name|frameMargins
argument_list|()
else|:
name|QMargins
argument_list|()
decl_stmt|;
return|return
name|QWindowsWindow
operator|::
name|handleGeometryChangingMessage
argument_list|(
name|message
argument_list|,
name|window
argument_list|()
argument_list|,
name|margins
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|frameMargins
name|QMargins
name|QWindowsWindow
operator|::
name|frameMargins
parameter_list|()
specifier|const
block|{
comment|// Frames are invalidated by style changes (window state, flags).
comment|// As they are also required for geometry calculations in resize
comment|// event sequences, introduce a dirty flag mechanism to be able
comment|// to cache results.
if|if
condition|(
name|testFlag
argument_list|(
name|FrameDirty
argument_list|)
condition|)
block|{
comment|// Always skip calculating style-dependent margins for windows claimed to be frameless.
comment|// This allows users to remove the margins by handling WM_NCCALCSIZE with WS_THICKFRAME set
comment|// to ensure Areo snap still works (QTBUG-40578).
name|m_data
operator|.
name|frame
operator|=
name|m_data
operator|.
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|?
name|QMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|QWindowsGeometryHint
operator|::
name|frame
argument_list|(
name|style
argument_list|()
argument_list|,
name|exStyle
argument_list|()
argument_list|)
expr_stmt|;
name|clearFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
block|}
return|return
name|m_data
operator|.
name|frame
operator|+
name|m_data
operator|.
name|customMargins
return|;
block|}
end_function
begin_function
DECL|function|setOpacity
name|void
name|QWindowsWindow
operator|::
name|setOpacity
parameter_list|(
name|qreal
name|level
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|level
expr_stmt|;
if|if
condition|(
operator|!
name|qFuzzyCompare
argument_list|(
name|m_opacity
argument_list|,
name|level
argument_list|)
condition|)
block|{
name|m_opacity
operator|=
name|level
expr_stmt|;
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
name|setWindowOpacity
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|m_data
operator|.
name|flags
argument_list|,
name|window
argument_list|()
operator|->
name|format
argument_list|()
operator|.
name|hasAlpha
argument_list|()
argument_list|,
name|testFlag
argument_list|(
name|OpenGLSurface
argument_list|)
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createRectRegion
specifier|static
specifier|inline
name|HRGN
name|createRectRegion
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
return|return
name|CreateRectRgn
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addRectToWinRegion
specifier|static
specifier|inline
name|void
name|addRectToWinRegion
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|HRGN
modifier|*
name|winRegion
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|HRGN
name|rectRegion
init|=
name|createRectRegion
argument_list|(
name|rect
argument_list|)
condition|)
block|{
name|HRGN
name|result
init|=
name|CreateRectRgn
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|CombineRgn
argument_list|(
name|result
argument_list|,
operator|*
name|winRegion
argument_list|,
name|rectRegion
argument_list|,
name|RGN_OR
argument_list|)
condition|)
block|{
name|DeleteObject
argument_list|(
operator|*
name|winRegion
argument_list|)
expr_stmt|;
operator|*
name|winRegion
operator|=
name|result
expr_stmt|;
block|}
name|DeleteObject
argument_list|(
name|rectRegion
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qRegionToWinRegion
specifier|static
name|HRGN
name|qRegionToWinRegion
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
if|if
condition|(
name|rects
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|NULL
return|;
specifier|const
name|int
name|rectCount
init|=
name|rects
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|rectCount
operator|==
literal|1
condition|)
return|return
name|createRectRegion
argument_list|(
name|region
operator|.
name|boundingRect
argument_list|()
argument_list|)
return|;
name|HRGN
name|hRegion
init|=
name|createRectRegion
argument_list|(
name|rects
operator|.
name|front
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|rectCount
condition|;
operator|++
name|i
control|)
name|addRectToWinRegion
argument_list|(
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
operator|&
name|hRegion
argument_list|)
expr_stmt|;
return|return
name|hRegion
return|;
block|}
end_function
begin_function
DECL|function|setMask
name|void
name|QWindowsWindow
operator|::
name|setMask
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SetWindowRgn
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|HRGN
name|winRegion
init|=
name|qRegionToWinRegion
argument_list|(
name|region
argument_list|)
decl_stmt|;
comment|// Mask is in client area coordinates, so offset it in case we have a frame
if|if
condition|(
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
condition|)
block|{
specifier|const
name|QMargins
name|margins
init|=
name|frameMargins
argument_list|()
decl_stmt|;
name|OffsetRgn
argument_list|(
name|winRegion
argument_list|,
name|margins
operator|.
name|left
argument_list|()
argument_list|,
name|margins
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// SetWindowRgn takes ownership.
if|if
condition|(
operator|!
name|SetWindowRgn
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|winRegion
argument_list|,
literal|true
argument_list|)
condition|)
name|DeleteObject
argument_list|(
name|winRegion
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|requestActivateWindow
name|void
name|QWindowsWindow
operator|::
name|requestActivateWindow
parameter_list|()
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
expr_stmt|;
comment|// 'Active' state handling is based in focus since it needs to work for
comment|// child windows as well.
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
specifier|const
name|DWORD
name|currentThread
init|=
name|GetCurrentThreadId
argument_list|()
decl_stmt|;
name|bool
name|attached
init|=
literal|false
decl_stmt|;
name|DWORD
name|foregroundThread
init|=
literal|0
decl_stmt|;
comment|// QTBUG-14062, QTBUG-37435: Windows normally only flashes the taskbar entry
comment|// when activating windows of inactive applications. Attach to the input of the
comment|// currently active window while setting the foreground window to always activate
comment|// the window when desired.
if|if
condition|(
name|QGuiApplication
operator|::
name|applicationState
argument_list|()
operator|!=
name|Qt
operator|::
name|ApplicationActive
operator|&&
name|QWindowsNativeInterface
operator|::
name|windowActivationBehavior
argument_list|()
operator|==
name|QWindowsWindowFunctions
operator|::
name|AlwaysActivateWindow
condition|)
block|{
if|if
condition|(
specifier|const
name|HWND
name|foregroundWindow
init|=
name|GetForegroundWindow
argument_list|()
condition|)
block|{
name|foregroundThread
operator|=
name|GetWindowThreadProcessId
argument_list|(
name|foregroundWindow
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|foregroundThread
operator|&&
name|foregroundThread
operator|!=
name|currentThread
condition|)
name|attached
operator|=
name|AttachThreadInput
argument_list|(
name|foregroundThread
argument_list|,
name|currentThread
argument_list|,
name|TRUE
argument_list|)
operator|==
name|TRUE
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// !Q_OS_WINCE
name|SetForegroundWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|SetFocus
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|attached
condition|)
name|AttachThreadInput
argument_list|(
name|foregroundThread
argument_list|,
name|currentThread
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !Q_OS_WINCE
block|}
block|}
end_function
begin_function
DECL|function|setKeyboardGrabEnabled
name|bool
name|QWindowsWindow
operator|::
name|setKeyboardGrabEnabled
parameter_list|(
name|bool
name|grab
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_data
operator|.
name|hwnd
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: No handle"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|window
argument_list|()
operator|<<
name|grab
expr_stmt|;
name|QWindowsContext
modifier|*
name|context
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|grab
condition|)
block|{
name|context
operator|->
name|setKeyGrabber
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|context
operator|->
name|keyGrabber
argument_list|()
operator|==
name|window
argument_list|()
condition|)
name|context
operator|->
name|setKeyGrabber
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setMouseGrabEnabled
name|bool
name|QWindowsWindow
operator|::
name|setMouseGrabEnabled
parameter_list|(
name|bool
name|grab
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|window
argument_list|()
operator|<<
name|grab
expr_stmt|;
if|if
condition|(
operator|!
name|m_data
operator|.
name|hwnd
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: No handle"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|isVisible
argument_list|()
operator|&&
name|grab
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Not setting mouse grab for invisible window %s/'%s'"
argument_list|,
name|__FUNCTION__
argument_list|,
name|window
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|window
argument_list|()
operator|->
name|objectName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// release grab or an explicit grab overriding autocapture: Clear flag.
name|clearFlag
argument_list|(
name|QWindowsWindow
operator|::
name|AutoMouseCapture
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasMouseCapture
argument_list|()
operator|!=
name|grab
condition|)
block|{
if|if
condition|(
name|grab
condition|)
block|{
name|SetCapture
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ReleaseCapture
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|grab
return|;
block|}
end_function
begin_function
DECL|function|cornerToWinOrientation
specifier|static
specifier|inline
name|DWORD
name|cornerToWinOrientation
parameter_list|(
name|Qt
operator|::
name|Corner
name|corner
parameter_list|)
block|{
switch|switch
condition|(
name|corner
condition|)
block|{
case|case
name|Qt
operator|::
name|TopLeftCorner
case|:
return|return
literal|0xf004
return|;
comment|// SZ_SIZETOPLEFT;
case|case
name|Qt
operator|::
name|TopRightCorner
case|:
return|return
literal|0xf005
return|;
comment|// SZ_SIZETOPRIGHT
case|case
name|Qt
operator|::
name|BottomLeftCorner
case|:
return|return
literal|0xf007
return|;
comment|// SZ_SIZEBOTTOMLEFT
case|case
name|Qt
operator|::
name|BottomRightCorner
case|:
return|return
literal|0xf008
return|;
comment|// SZ_SIZEBOTTOMRIGHT
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|startSystemResize
name|bool
name|QWindowsWindow
operator|::
name|startSystemResize
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|,
name|Qt
operator|::
name|Corner
name|corner
parameter_list|)
block|{
if|if
condition|(
operator|!
name|GetSystemMenu
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|FALSE
argument_list|)
condition|)
return|return
literal|false
return|;
name|ReleaseCapture
argument_list|()
expr_stmt|;
name|PostMessage
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|WM_SYSCOMMAND
argument_list|,
name|cornerToWinOrientation
argument_list|(
name|corner
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|SizeGripOperation
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setFrameStrutEventsEnabled
name|void
name|QWindowsWindow
operator|::
name|setFrameStrutEventsEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|setFlag
argument_list|(
name|FrameStrutEventsEnabled
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clearFlag
argument_list|(
name|FrameStrutEventsEnabled
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// maybe available on some SDKs revisit WM_GETMINMAXINFO
end_comment
begin_function
DECL|function|getSizeHints
name|void
name|QWindowsWindow
operator|::
name|getSizeHints
parameter_list|(
name|MINMAXINFO
modifier|*
name|mmi
parameter_list|)
specifier|const
block|{
specifier|const
name|QWindowsGeometryHint
name|hint
argument_list|(
name|window
argument_list|()
argument_list|,
name|m_data
operator|.
name|customMargins
argument_list|)
decl_stmt|;
name|hint
operator|.
name|applyToMinMaxInfo
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|mmi
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|testFlag
argument_list|(
name|WithinMaximize
argument_list|)
operator|||
operator|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
operator|==
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|)
operator|&&
operator|(
name|m_data
operator|.
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
comment|// This block fixes QTBUG-8361: Frameless windows shouldn't cover the
comment|// taskbar when maximized
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|window
argument_list|()
operator|->
name|screen
argument_list|()
decl_stmt|;
comment|// Documentation of MINMAXINFO states that it will only work for the primary screen
if|if
condition|(
name|screen
operator|&&
name|screen
operator|==
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
condition|)
block|{
specifier|const
name|QRect
name|availableGeometry
init|=
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|screen
operator|->
name|availableGeometry
argument_list|()
argument_list|,
name|screen
argument_list|)
decl_stmt|;
name|mmi
operator|->
name|ptMaxSize
operator|.
name|y
operator|=
name|availableGeometry
operator|.
name|height
argument_list|()
expr_stmt|;
comment|// Width, because you can have the taskbar on the sides too.
name|mmi
operator|->
name|ptMaxSize
operator|.
name|x
operator|=
name|availableGeometry
operator|.
name|width
argument_list|()
expr_stmt|;
comment|// If you have the taskbar on top, or on the left you don't want it at (0,0):
name|mmi
operator|->
name|ptMaxPosition
operator|.
name|x
operator|=
name|availableGeometry
operator|.
name|x
argument_list|()
expr_stmt|;
name|mmi
operator|->
name|ptMaxPosition
operator|.
name|y
operator|=
name|availableGeometry
operator|.
name|y
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|screen
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"window()->screen() returned a null screen"
expr_stmt|;
block|}
block|}
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|window
argument_list|()
operator|<<
operator|*
name|mmi
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleNonClientHitTest
name|bool
name|QWindowsWindow
operator|::
name|handleNonClientHitTest
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|,
name|LRESULT
modifier|*
name|result
parameter_list|)
specifier|const
block|{
comment|// QTBUG-32663, suppress resize cursor for fixed size windows.
specifier|const
name|QWindow
modifier|*
name|w
init|=
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isTopLevel
argument_list|()
comment|// Task 105852, minimized windows need to respond to user input.
operator|||
operator|(
name|m_windowState
operator|!=
name|Qt
operator|::
name|WindowNoState
operator|&&
name|m_windowState
operator|!=
name|Qt
operator|::
name|WindowActive
operator|)
operator|||
operator|(
name|m_data
operator|.
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|const
name|QSize
name|minimumSize
init|=
name|w
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|minimumSize
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QSize
name|maximumSize
init|=
name|w
operator|->
name|maximumSize
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|fixedWidth
init|=
name|minimumSize
operator|.
name|width
argument_list|()
operator|==
name|maximumSize
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|fixedHeight
init|=
name|minimumSize
operator|.
name|height
argument_list|()
operator|==
name|maximumSize
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fixedWidth
operator|&&
operator|!
name|fixedHeight
condition|)
return|return
literal|false
return|;
specifier|const
name|QPoint
name|localPos
init|=
name|w
operator|->
name|mapFromGlobal
argument_list|(
name|QHighDpi
operator|::
name|fromNativePixels
argument_list|(
name|globalPos
argument_list|,
name|w
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QSize
name|size
init|=
name|w
operator|->
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|fixedHeight
condition|)
block|{
if|if
condition|(
name|localPos
operator|.
name|y
argument_list|()
operator|>=
name|size
operator|.
name|height
argument_list|()
condition|)
block|{
operator|*
name|result
operator|=
name|HTBORDER
expr_stmt|;
comment|// Unspecified border, no resize cursor.
return|return
literal|true
return|;
block|}
if|if
condition|(
name|localPos
operator|.
name|y
argument_list|()
operator|<
literal|0
condition|)
block|{
specifier|const
name|QMargins
name|margins
init|=
name|frameMargins
argument_list|()
decl_stmt|;
specifier|const
name|int
name|topResizeBarPos
init|=
name|margins
operator|.
name|left
argument_list|()
operator|-
name|margins
operator|.
name|top
argument_list|()
decl_stmt|;
if|if
condition|(
name|localPos
operator|.
name|y
argument_list|()
operator|<
name|topResizeBarPos
condition|)
block|{
operator|*
name|result
operator|=
name|HTCAPTION
expr_stmt|;
comment|// Extend caption over top resize bar, let's user move the window.
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|fixedWidth
operator|&&
operator|(
name|localPos
operator|.
name|x
argument_list|()
operator|<
literal|0
operator|||
name|localPos
operator|.
name|x
argument_list|()
operator|>=
name|size
operator|.
name|width
argument_list|()
operator|)
condition|)
block|{
operator|*
name|result
operator|=
name|HTBORDER
expr_stmt|;
comment|// Unspecified border, no resize cursor.
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_OS_WINCE
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_comment
comment|// Return the default cursor (Arrow) from QWindowsCursor's cache.
end_comment
begin_function
DECL|function|defaultCursor
specifier|static
specifier|inline
name|CursorHandlePtr
name|defaultCursor
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|QScreen
modifier|*
name|screen
init|=
name|w
operator|->
name|screen
argument_list|()
condition|)
if|if
condition|(
specifier|const
name|QPlatformScreen
modifier|*
name|platformScreen
init|=
name|screen
operator|->
name|handle
argument_list|()
condition|)
if|if
condition|(
name|QPlatformCursor
modifier|*
name|cursor
init|=
name|platformScreen
operator|->
name|cursor
argument_list|()
condition|)
return|return
cast|static_cast
argument_list|<
name|QWindowsCursor
operator|*
argument_list|>
argument_list|(
name|cursor
argument_list|)
operator|->
name|standardWindowCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
return|;
return|return
name|CursorHandlePtr
argument_list|(
operator|new
name|CursorHandle
argument_list|(
name|QWindowsCursor
operator|::
name|createCursorFromShape
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Check whether to apply a new cursor. Either the window in question is
end_comment
begin_comment
comment|// currently under mouse, or it is the parent of the window under mouse and
end_comment
begin_comment
comment|// there is no other window with an explicitly set cursor in-between.
end_comment
begin_function
DECL|function|applyNewCursor
specifier|static
specifier|inline
name|bool
name|applyNewCursor
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
specifier|const
name|QWindow
modifier|*
name|underMouse
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|windowUnderMouse
argument_list|()
decl_stmt|;
if|if
condition|(
name|underMouse
operator|==
name|w
condition|)
return|return
literal|true
return|;
for|for
control|(
specifier|const
name|QWindow
modifier|*
name|p
init|=
name|underMouse
init|;
name|p
condition|;
name|p
operator|=
name|p
operator|->
name|parent
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|==
name|w
condition|)
return|return
literal|true
return|;
specifier|const
name|QWindowsWindow
modifier|*
name|platformWindow
init|=
name|QWindowsWindow
operator|::
name|windowsWindowOf
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|platformWindow
operator|&&
operator|!
name|platformWindow
operator|->
name|cursor
argument_list|()
operator|->
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_CURSOR
end_comment
begin_comment
comment|/*!     \brief Applies to cursor property set on the window to the global cursor.      \sa QWindowsCursor */
end_comment
begin_function
DECL|function|applyCursor
name|void
name|QWindowsWindow
operator|::
name|applyCursor
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|m_cursor
operator|->
name|isNull
argument_list|()
condition|)
block|{
comment|// Recurse up to parent with non-null cursor. Set default for toplevel.
if|if
condition|(
specifier|const
name|QWindow
modifier|*
name|p
init|=
name|window
argument_list|()
operator|->
name|parent
argument_list|()
condition|)
block|{
if|if
condition|(
name|QWindowsWindow
modifier|*
name|platformWindow
init|=
name|QWindowsWindow
operator|::
name|windowsWindowOf
argument_list|(
name|p
argument_list|)
condition|)
name|platformWindow
operator|->
name|applyCursor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SetCursor
argument_list|(
name|defaultCursor
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SetCursor
argument_list|(
name|m_cursor
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setCursor
name|void
name|QWindowsWindow
operator|::
name|setCursor
parameter_list|(
specifier|const
name|CursorHandlePtr
modifier|&
name|c
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|c
operator|->
name|handle
argument_list|()
operator|!=
name|m_cursor
operator|->
name|handle
argument_list|()
condition|)
block|{
specifier|const
name|bool
name|apply
init|=
name|applyNewCursor
argument_list|(
name|window
argument_list|()
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|window
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|c
operator|->
name|handle
argument_list|()
operator|<<
literal|" doApply="
operator|<<
name|apply
expr_stmt|;
name|m_cursor
operator|=
name|c
expr_stmt|;
if|if
condition|(
name|apply
condition|)
name|applyCursor
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_function
DECL|function|setAlertState
name|void
name|QWindowsWindow
operator|::
name|setAlertState
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|isAlertState
argument_list|()
operator|==
name|enabled
condition|)
return|return;
if|if
condition|(
name|enabled
condition|)
block|{
name|alertWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|AlertState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stopAlertWindow
argument_list|()
expr_stmt|;
name|clearFlag
argument_list|(
name|AlertState
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|alertWindow
name|void
name|QWindowsWindow
operator|::
name|alertWindow
parameter_list|(
name|int
name|durationMs
parameter_list|)
block|{
name|UINT
name|timeOutMs
init|=
name|GetCaretBlinkTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|timeOutMs
operator|||
name|timeOutMs
operator|==
name|INFINITE
condition|)
name|timeOutMs
operator|=
literal|250
expr_stmt|;
name|FLASHWINFO
name|info
decl_stmt|;
name|info
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|info
operator|.
name|hwnd
operator|=
name|m_data
operator|.
name|hwnd
expr_stmt|;
name|info
operator|.
name|dwFlags
operator|=
name|FLASHW_TRAY
expr_stmt|;
name|info
operator|.
name|dwTimeout
operator|=
name|timeOutMs
expr_stmt|;
name|info
operator|.
name|uCount
operator|=
name|durationMs
operator|==
literal|0
condition|?
literal|10
else|:
name|UINT
argument_list|(
name|durationMs
argument_list|)
operator|/
name|timeOutMs
expr_stmt|;
name|FlashWindowEx
argument_list|(
operator|&
name|info
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stopAlertWindow
name|void
name|QWindowsWindow
operator|::
name|stopAlertWindow
parameter_list|()
block|{
name|FLASHWINFO
name|info
decl_stmt|;
name|info
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|info
operator|.
name|hwnd
operator|=
name|m_data
operator|.
name|hwnd
expr_stmt|;
name|info
operator|.
name|dwFlags
operator|=
name|FLASHW_STOP
expr_stmt|;
name|info
operator|.
name|dwTimeout
operator|=
literal|0
expr_stmt|;
name|info
operator|.
name|uCount
operator|=
literal|0
expr_stmt|;
name|FlashWindowEx
argument_list|(
operator|&
name|info
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_OS_WINCE
end_comment
begin_function
DECL|function|isEnabled
name|bool
name|QWindowsWindow
operator|::
name|isEnabled
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|style
argument_list|()
operator|&
name|WS_DISABLED
operator|)
operator|==
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setEnabled
name|void
name|QWindowsWindow
operator|::
name|setEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
specifier|const
name|unsigned
name|oldStyle
init|=
name|style
argument_list|()
decl_stmt|;
name|unsigned
name|newStyle
init|=
name|oldStyle
decl_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|newStyle
operator|&=
operator|~
name|WS_DISABLED
expr_stmt|;
block|}
else|else
block|{
name|newStyle
operator||=
name|WS_DISABLED
expr_stmt|;
block|}
if|if
condition|(
name|newStyle
operator|!=
name|oldStyle
condition|)
name|setStyle
argument_list|(
name|newStyle
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createHIcon
specifier|static
name|HICON
name|createHIcon
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
name|int
name|xSize
parameter_list|,
name|int
name|ySize
parameter_list|)
block|{
if|if
condition|(
operator|!
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|QPixmap
name|pm
init|=
name|icon
operator|.
name|pixmap
argument_list|(
name|icon
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
name|xSize
argument_list|,
name|ySize
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|qt_pixmapToWinHICON
argument_list|(
name|pm
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setWindowIcon
name|void
name|QWindowsWindow
operator|::
name|setWindowIcon
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
block|{
if|if
condition|(
name|m_data
operator|.
name|hwnd
condition|)
block|{
name|destroyIcon
argument_list|()
expr_stmt|;
name|m_iconSmall
operator|=
name|createHIcon
argument_list|(
name|icon
argument_list|,
name|GetSystemMetrics
argument_list|(
name|SM_CXSMICON
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
name|SM_CYSMICON
argument_list|)
argument_list|)
expr_stmt|;
name|m_iconBig
operator|=
name|createHIcon
argument_list|(
name|icon
argument_list|,
name|GetSystemMetrics
argument_list|(
name|SM_CXICON
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
name|SM_CYICON
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_iconBig
condition|)
block|{
name|SendMessage
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|WM_SETICON
argument_list|,
literal|0
comment|/* ICON_SMALL */
argument_list|,
name|LPARAM
argument_list|(
name|m_iconSmall
argument_list|)
argument_list|)
expr_stmt|;
name|SendMessage
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|WM_SETICON
argument_list|,
literal|1
comment|/* ICON_BIG */
argument_list|,
name|LPARAM
argument_list|(
name|m_iconBig
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SendMessage
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|WM_SETICON
argument_list|,
literal|0
comment|/* ICON_SMALL */
argument_list|,
name|LPARAM
argument_list|(
name|m_iconSmall
argument_list|)
argument_list|)
expr_stmt|;
name|SendMessage
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|WM_SETICON
argument_list|,
literal|1
comment|/* ICON_BIG */
argument_list|,
name|LPARAM
argument_list|(
name|m_iconSmall
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|isTopLevel
name|bool
name|QWindowsWindow
operator|::
name|isTopLevel
parameter_list|()
specifier|const
block|{
return|return
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
operator|&&
operator|!
name|m_data
operator|.
name|embedded
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Sets custom margins to be added to the default margins determined by     the windows style in the handling of the WM_NCCALCSIZE message.      This is currently used to give the Aero-style QWizard a smaller top margin.     The property can be set using QPlatformNativeInterface::setWindowProperty() or,     before platform window creation, by setting a dynamic property     on the QWindow (see QWindowsIntegration::createPlatformWindow()). */
end_comment
begin_function
DECL|function|setCustomMargins
name|void
name|QWindowsWindow
operator|::
name|setCustomMargins
parameter_list|(
specifier|const
name|QMargins
modifier|&
name|newCustomMargins
parameter_list|)
block|{
if|if
condition|(
name|newCustomMargins
operator|!=
name|m_data
operator|.
name|customMargins
condition|)
block|{
specifier|const
name|QMargins
name|oldCustomMargins
init|=
name|m_data
operator|.
name|customMargins
decl_stmt|;
name|m_data
operator|.
name|customMargins
operator|=
name|newCustomMargins
expr_stmt|;
comment|// Re-trigger WM_NCALCSIZE with wParam=1 by passing SWP_FRAMECHANGED
specifier|const
name|QRect
name|currentFrameGeometry
init|=
name|frameGeometry_sys
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|topLeft
init|=
name|currentFrameGeometry
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QRect
name|newFrame
init|=
name|currentFrameGeometry
operator|.
name|marginsRemoved
argument_list|(
name|oldCustomMargins
argument_list|)
operator|+
name|m_data
operator|.
name|customMargins
decl_stmt|;
name|newFrame
operator|.
name|moveTo
argument_list|(
name|topLeft
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|FrameDirty
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaWindows
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|oldCustomMargins
operator|<<
literal|"->"
operator|<<
name|newCustomMargins
operator|<<
name|currentFrameGeometry
operator|<<
literal|"->"
operator|<<
name|newFrame
expr_stmt|;
name|SetWindowPos
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
literal|0
argument_list|,
name|newFrame
operator|.
name|x
argument_list|()
argument_list|,
name|newFrame
operator|.
name|y
argument_list|()
argument_list|,
name|newFrame
operator|.
name|width
argument_list|()
argument_list|,
name|newFrame
operator|.
name|height
argument_list|()
argument_list|,
name|SWP_NOZORDER
operator||
name|SWP_FRAMECHANGED
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|surface
name|void
modifier|*
name|QWindowsWindow
operator|::
name|surface
parameter_list|(
name|void
modifier|*
name|nativeConfig
parameter_list|,
name|int
modifier|*
name|err
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_OPENGL
name|Q_UNUSED
argument_list|(
argument|err
argument_list|)
name|Q_UNUSED
argument_list|(
argument|nativeConfig
argument_list|)
return|return
literal|0
return|;
else|#
directive|else
if|if
condition|(
operator|!
name|m_surface
condition|)
block|{
if|if
condition|(
name|QWindowsStaticOpenGLContext
modifier|*
name|staticOpenGLContext
init|=
name|QWindowsIntegration
operator|::
name|staticOpenGLContext
argument_list|()
condition|)
name|m_surface
operator|=
name|staticOpenGLContext
operator|->
name|createWindowSurface
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|nativeConfig
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
return|return
name|m_surface
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|invalidateSurface
name|void
name|QWindowsWindow
operator|::
name|invalidateSurface
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
if|if
condition|(
name|m_surface
condition|)
block|{
if|if
condition|(
name|QWindowsStaticOpenGLContext
modifier|*
name|staticOpenGLContext
init|=
name|QWindowsIntegration
operator|::
name|staticOpenGLContext
argument_list|()
condition|)
name|staticOpenGLContext
operator|->
name|destroyWindowSurface
argument_list|(
name|m_surface
argument_list|)
expr_stmt|;
name|m_surface
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_OPENGL
block|}
end_function
begin_function
DECL|function|setTouchWindowTouchTypeStatic
name|void
name|QWindowsWindow
operator|::
name|setTouchWindowTouchTypeStatic
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|QWindowsWindowFunctions
operator|::
name|TouchWindowTouchTypes
name|touchTypes
parameter_list|)
block|{
if|if
condition|(
operator|!
name|window
operator|->
name|handle
argument_list|()
condition|)
return|return;
cast|static_cast
argument_list|<
name|QWindowsWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|registerTouchWindow
argument_list|(
name|touchTypes
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerTouchWindow
name|void
name|QWindowsWindow
operator|::
name|registerTouchWindow
parameter_list|(
name|QWindowsWindowFunctions
operator|::
name|TouchWindowTouchTypes
name|touchTypes
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
operator|(
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|systemInfo
argument_list|()
operator|&
name|QWindowsContext
operator|::
name|SI_SupportsTouch
operator|)
condition|)
block|{
name|ULONG
name|touchFlags
init|=
literal|0
decl_stmt|;
specifier|const
name|bool
name|ret
init|=
name|QWindowsContext
operator|::
name|user32dll
operator|.
name|isTouchWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
operator|&
name|touchFlags
argument_list|)
decl_stmt|;
comment|// Return if it is not a touch window or the flags are already set by a hook
comment|// such as HCBT_CREATEWND
if|if
condition|(
name|ret
operator|||
name|touchFlags
operator|!=
literal|0
condition|)
return|return;
if|if
condition|(
name|QWindowsContext
operator|::
name|user32dll
operator|.
name|registerTouchWindow
argument_list|(
name|m_data
operator|.
name|hwnd
argument_list|,
name|ULONG
argument_list|(
name|touchTypes
argument_list|)
argument_list|)
condition|)
name|setFlag
argument_list|(
name|TouchRegistered
argument_list|)
expr_stmt|;
else|else
name|qErrnoWarning
argument_list|(
literal|"RegisterTouchWindow() failed for window '%s'."
argument_list|,
name|qPrintable
argument_list|(
name|window
argument_list|()
operator|->
name|objectName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// !Q_OS_WINCE
block|}
end_function
begin_function
DECL|function|aboutToMakeCurrent
name|void
name|QWindowsWindow
operator|::
name|aboutToMakeCurrent
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
comment|// For RasterGLSurface windows, that become OpenGL windows dynamically, it might be
comment|// time to set up some GL specifics.  This is particularly important for layered
comment|// windows (WS_EX_LAYERED due to alpha> 0).
specifier|const
name|bool
name|isCompositing
init|=
name|qt_window_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|compositing
decl_stmt|;
if|if
condition|(
name|isCompositing
operator|!=
name|testFlag
argument_list|(
name|Compositing
argument_list|)
condition|)
block|{
if|if
condition|(
name|isCompositing
condition|)
name|setFlag
argument_list|(
name|Compositing
argument_list|)
expr_stmt|;
else|else
name|clearFlag
argument_list|(
name|Compositing
argument_list|)
expr_stmt|;
name|updateGLWindowSettings
argument_list|(
name|window
argument_list|()
argument_list|,
name|m_data
operator|.
name|hwnd
argument_list|,
name|m_data
operator|.
name|flags
argument_list|,
name|m_opacity
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setHasBorderInFullScreenStatic
name|void
name|QWindowsWindow
operator|::
name|setHasBorderInFullScreenStatic
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|bool
name|border
parameter_list|)
block|{
if|if
condition|(
operator|!
name|window
operator|->
name|handle
argument_list|()
condition|)
return|return;
cast|static_cast
argument_list|<
name|QWindowsWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|setHasBorderInFullScreen
argument_list|(
name|border
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setHasBorderInFullScreen
name|void
name|QWindowsWindow
operator|::
name|setHasBorderInFullScreen
parameter_list|(
name|bool
name|border
parameter_list|)
block|{
if|if
condition|(
name|border
condition|)
name|setFlag
argument_list|(
name|HasBorderInFullScreen
argument_list|)
expr_stmt|;
else|else
name|clearFlag
argument_list|(
name|HasBorderInFullScreen
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
