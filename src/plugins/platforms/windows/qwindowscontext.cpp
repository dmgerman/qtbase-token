begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowskeymapper.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsguieventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsmousehandler.h"
end_include
begin_include
include|#
directive|include
file|"qtwindowsglobal.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsmime.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsinputcontext.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"accessible/qwindowsaccessibility.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qwindowsscreen.h"
end_include
begin_include
include|#
directive|include
file|"qwindowstheme.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSet>
end_include
begin_include
include|#
directive|include
file|<QtCore/QHash>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSysInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedArrayPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<windowsx.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// Verbosity of components
DECL|member|verboseIntegration
name|int
name|QWindowsContext
operator|::
name|verboseIntegration
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|verboseWindows
name|int
name|QWindowsContext
operator|::
name|verboseWindows
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|verboseEvents
name|int
name|QWindowsContext
operator|::
name|verboseEvents
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|verboseBackingStore
name|int
name|QWindowsContext
operator|::
name|verboseBackingStore
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|verboseFonts
name|int
name|QWindowsContext
operator|::
name|verboseFonts
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|verboseGL
name|int
name|QWindowsContext
operator|::
name|verboseGL
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|verboseOLE
name|int
name|QWindowsContext
operator|::
name|verboseOLE
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|verboseInputMethods
name|int
name|QWindowsContext
operator|::
name|verboseInputMethods
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|verboseDialogs
name|int
name|QWindowsContext
operator|::
name|verboseDialogs
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|verboseTheming
name|int
name|QWindowsContext
operator|::
name|verboseTheming
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Get verbosity of components from "foo:2,bar:3"
end_comment
begin_function
DECL|function|componentVerbose
specifier|static
specifier|inline
name|int
name|componentVerbose
parameter_list|(
specifier|const
name|char
modifier|*
name|v
parameter_list|,
specifier|const
name|char
modifier|*
name|keyWord
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|char
modifier|*
name|k
init|=
name|strstr
argument_list|(
name|v
argument_list|,
name|keyWord
argument_list|)
condition|)
block|{
name|k
operator|+=
name|qstrlen
argument_list|(
name|keyWord
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|k
operator|==
literal|':'
condition|)
block|{
operator|++
name|k
expr_stmt|;
if|if
condition|(
name|isdigit
argument_list|(
operator|*
name|k
argument_list|)
condition|)
return|return
operator|*
name|k
operator|-
literal|'0'
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|hasTouchSupport
specifier|static
specifier|inline
name|bool
name|hasTouchSupport
parameter_list|(
name|QSysInfo
operator|::
name|WinVersion
name|wv
parameter_list|)
block|{
enum|enum
block|{
name|QT_SM_DIGITIZER
init|=
literal|94
block|,
name|QT_NID_INTEGRATED_TOUCH
init|=
literal|0x1
block|,
name|QT_NID_EXTERNAL_TOUCH
init|=
literal|0x02
block|,
name|QT_NID_MULTI_INPUT
init|=
literal|0x40
block|}
enum|;
return|return
name|wv
operator|<
name|QSysInfo
operator|::
name|WV_WINDOWS7
condition|?
literal|false
else|:
operator|(
name|GetSystemMetrics
argument_list|(
name|QT_SM_DIGITIZER
argument_list|)
operator|&
operator|(
name|QT_NID_INTEGRATED_TOUCH
operator||
name|QT_NID_EXTERNAL_TOUCH
operator||
name|QT_NID_MULTI_INPUT
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|LANG_SYRIAC
argument_list|)
end_if
begin_define
DECL|macro|LANG_SYRIAC
define|#
directive|define
name|LANG_SYRIAC
value|0x5a
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|useRTL_Extensions
specifier|static
specifier|inline
name|bool
name|useRTL_Extensions
parameter_list|(
name|QSysInfo
operator|::
name|WinVersion
name|ver
parameter_list|)
block|{
comment|// This is SDK dependent on CE so out of scope for now
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|&
name|QSysInfo
operator|::
name|WV_CE_based
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|ver
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
operator|&&
operator|(
name|ver
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
operator|)
condition|)
block|{
comment|// Since the IsValidLanguageGroup/IsValidLocale functions always return true on
comment|// Vista, check the Keyboard Layouts for enabling RTL.
if|if
condition|(
specifier|const
name|UINT
name|nLayouts
init|=
name|GetKeyboardLayoutList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|QScopedArrayPointer
argument_list|<
name|HKL
argument_list|>
name|lpList
argument_list|(
operator|new
name|HKL
index|[
name|nLayouts
index|]
argument_list|)
decl_stmt|;
name|GetKeyboardLayoutList
argument_list|(
name|nLayouts
argument_list|,
name|lpList
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|UINT
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nLayouts
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|PRIMARYLANGID
argument_list|(
operator|(
name|quintptr
operator|)
name|lpList
index|[
name|i
index|]
argument_list|)
condition|)
block|{
case|case
name|LANG_ARABIC
case|:
case|case
name|LANG_HEBREW
case|:
case|case
name|LANG_FARSI
case|:
case|case
name|LANG_SYRIAC
case|:
return|return
literal|true
return|;
default|default:
break|break;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// NT/Vista
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|// Pre-NT: figure out whether a RTL language is installed
return|return
name|IsValidLanguageGroup
argument_list|(
name|LGRPID_ARABIC
argument_list|,
name|LGRPID_INSTALLED
argument_list|)
operator|||
name|IsValidLanguageGroup
argument_list|(
name|LGRPID_HEBREW
argument_list|,
name|LGRPID_INSTALLED
argument_list|)
operator|||
name|IsValidLocale
argument_list|(
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_ARABIC
argument_list|,
name|SUBLANG_DEFAULT
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
argument_list|,
name|LCID_INSTALLED
argument_list|)
operator|||
name|IsValidLocale
argument_list|(
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_HEBREW
argument_list|,
name|SUBLANG_DEFAULT
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
argument_list|,
name|LCID_INSTALLED
argument_list|)
operator|||
name|IsValidLocale
argument_list|(
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_SYRIAC
argument_list|,
name|SUBLANG_DEFAULT
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
argument_list|,
name|LCID_INSTALLED
argument_list|)
operator|||
name|IsValidLocale
argument_list|(
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_FARSI
argument_list|,
name|SUBLANG_DEFAULT
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
argument_list|,
name|LCID_INSTALLED
argument_list|)
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \class QWindowsUser32DLL     \brief Struct that contains dynamically resolved symbols of User32.dll.      The stub libraries shipped with the MinGW compiler miss some of the     functions. They need to be retrieved dynamically.      In addition, touch-related functions are available only from Windows onwards.     These need to resolved dynamically for Q_CC_MSVC as well.      \sa QWindowsShell32DLL      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_constructor
DECL|function|QWindowsUser32DLL
name|QWindowsUser32DLL
operator|::
name|QWindowsUser32DLL
parameter_list|()
member_init_list|:
name|setLayeredWindowAttributes
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|updateLayeredWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|updateLayeredWindowIndirect
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|isHungAppWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|registerTouchWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|unregisterTouchWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|getTouchInputInfo
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|closeTouchInputHandle
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|init
name|void
name|QWindowsUser32DLL
operator|::
name|init
parameter_list|()
block|{
name|QSystemLibrary
name|library
argument_list|(
name|QStringLiteral
argument_list|(
literal|"user32"
argument_list|)
argument_list|)
decl_stmt|;
comment|// MinGW (g++ 3.4.5) accepts only C casts.
name|setLayeredWindowAttributes
operator|=
call|(
name|SetLayeredWindowAttributes
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"SetLayeredWindowAttributes"
argument_list|)
argument_list|)
expr_stmt|;
name|updateLayeredWindow
operator|=
call|(
name|UpdateLayeredWindow
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"UpdateLayeredWindow"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|setLayeredWindowAttributes
operator|||
operator|!
name|updateLayeredWindow
condition|)
name|qFatal
argument_list|(
literal|"This version of Windows is not supported (User32.dll is missing the symbols 'SetLayeredWindowAttributes', 'UpdateLayeredWindow')."
argument_list|)
expr_stmt|;
name|updateLayeredWindowIndirect
operator|=
call|(
name|UpdateLayeredWindowIndirect
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"UpdateLayeredWindowIndirect"
argument_list|)
argument_list|)
expr_stmt|;
name|isHungAppWindow
operator|=
operator|(
name|IsHungAppWindow
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"IsHungAppWindow"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTouch
name|bool
name|QWindowsUser32DLL
operator|::
name|initTouch
parameter_list|()
block|{
name|QSystemLibrary
name|library
argument_list|(
name|QStringLiteral
argument_list|(
literal|"user32"
argument_list|)
argument_list|)
decl_stmt|;
name|registerTouchWindow
operator|=
call|(
name|RegisterTouchWindow
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"RegisterTouchWindow"
argument_list|)
argument_list|)
expr_stmt|;
name|unregisterTouchWindow
operator|=
call|(
name|UnregisterTouchWindow
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"UnregisterTouchWindow"
argument_list|)
argument_list|)
expr_stmt|;
name|getTouchInputInfo
operator|=
call|(
name|GetTouchInputInfo
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"GetTouchInputInfo"
argument_list|)
argument_list|)
expr_stmt|;
name|closeTouchInputHandle
operator|=
call|(
name|CloseTouchInputHandle
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"CloseTouchInputHandle"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|registerTouchWindow
operator|&&
name|unregisterTouchWindow
operator|&&
name|getTouchInputInfo
operator|&&
name|getTouchInputInfo
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsShell32DLL     \brief Struct that contains dynamically resolved symbols of Shell32.dll.      The stub libraries shipped with the MinGW compiler miss some of the     functions. They need to be retrieved dynamically.      \sa QWindowsUser32DLL      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsShell32DLL
name|QWindowsShell32DLL
operator|::
name|QWindowsShell32DLL
parameter_list|()
member_init_list|:
name|sHCreateItemFromParsingName
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sHGetStockIconInfo
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|init
name|void
name|QWindowsShell32DLL
operator|::
name|init
parameter_list|()
block|{
name|QSystemLibrary
name|library
argument_list|(
name|QStringLiteral
argument_list|(
literal|"shell32"
argument_list|)
argument_list|)
decl_stmt|;
name|sHCreateItemFromParsingName
operator|=
call|(
name|SHCreateItemFromParsingName
call|)
argument_list|(
name|library
operator|.
name|resolve
argument_list|(
literal|"SHCreateItemFromParsingName"
argument_list|)
argument_list|)
expr_stmt|;
name|sHGetStockIconInfo
operator|=
operator|(
name|SHGetStockIconInfo
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"SHGetStockIconInfo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|member|user32dll
name|QWindowsUser32DLL
name|QWindowsContext
operator|::
name|user32dll
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|shell32dll
name|QWindowsShell32DLL
name|QWindowsContext
operator|::
name|shell32dll
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_OS_WINCE
end_comment
begin_decl_stmt
DECL|member|m_instance
name|QWindowsContext
modifier|*
name|QWindowsContext
operator|::
name|m_instance
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \class QWindowsContext     \brief Singleton container for all relevant information.      Holds state information formerly stored in \c qapplication_win.cpp.      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_typedef
DECL|typedef|HandleBaseWindowHash
typedef|typedef
name|QHash
argument_list|<
name|HWND
argument_list|,
name|QWindowsWindow
modifier|*
argument_list|>
name|HandleBaseWindowHash
typedef|;
end_typedef
begin_struct
DECL|struct|QWindowsContextPrivate
struct|struct
name|QWindowsContextPrivate
block|{
name|QWindowsContextPrivate
parameter_list|()
constructor_decl|;
DECL|member|m_systemInfo
name|unsigned
name|m_systemInfo
decl_stmt|;
DECL|member|m_registeredWindowClassNames
name|QSet
argument_list|<
name|QString
argument_list|>
name|m_registeredWindowClassNames
decl_stmt|;
DECL|member|m_windows
name|HandleBaseWindowHash
name|m_windows
decl_stmt|;
DECL|member|m_displayContext
name|HDC
name|m_displayContext
decl_stmt|;
DECL|member|m_defaultDPI
specifier|const
name|int
name|m_defaultDPI
decl_stmt|;
DECL|member|m_keyMapper
name|QWindowsKeyMapper
name|m_keyMapper
decl_stmt|;
DECL|member|m_mouseHandler
name|QWindowsMouseHandler
name|m_mouseHandler
decl_stmt|;
DECL|member|m_mimeConverter
name|QWindowsMimeConverter
name|m_mimeConverter
decl_stmt|;
DECL|member|m_screenManager
name|QWindowsScreenManager
name|m_screenManager
decl_stmt|;
DECL|member|m_creationContext
name|QSharedPointer
argument_list|<
name|QWindowCreationContext
argument_list|>
name|m_creationContext
decl_stmt|;
DECL|member|m_oleInitializeResult
specifier|const
name|HRESULT
name|m_oleInitializeResult
decl_stmt|;
DECL|member|m_eventType
specifier|const
name|QByteArray
name|m_eventType
decl_stmt|;
DECL|member|m_lastActiveWindow
name|QWindow
modifier|*
name|m_lastActiveWindow
decl_stmt|;
DECL|member|m_asyncExpose
name|bool
name|m_asyncExpose
decl_stmt|;
block|}
struct|;
end_struct
begin_constructor
DECL|function|QWindowsContextPrivate
name|QWindowsContextPrivate
operator|::
name|QWindowsContextPrivate
parameter_list|()
member_init_list|:
name|m_systemInfo
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_displayContext
argument_list|(
name|GetDC
argument_list|(
literal|0
argument_list|)
argument_list|)
member_init_list|,
name|m_defaultDPI
argument_list|(
name|GetDeviceCaps
argument_list|(
name|m_displayContext
argument_list|,
name|LOGPIXELSY
argument_list|)
argument_list|)
member_init_list|,
name|m_oleInitializeResult
argument_list|(
name|OleInitialize
argument_list|(
name|NULL
argument_list|)
argument_list|)
member_init_list|,
name|m_eventType
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"windows_generic_MSG"
argument_list|)
argument_list|)
member_init_list|,
name|m_lastActiveWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_asyncExpose
argument_list|(
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|QWindowsContext
operator|::
name|user32dll
operator|.
name|init
argument_list|()
expr_stmt|;
name|QWindowsContext
operator|::
name|shell32dll
operator|.
name|init
argument_list|()
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QSysInfo
operator|::
name|WinVersion
name|ver
init|=
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
if|if
condition|(
name|hasTouchSupport
argument_list|(
name|ver
argument_list|)
operator|&&
name|QWindowsContext
operator|::
name|user32dll
operator|.
name|initTouch
argument_list|()
condition|)
name|m_systemInfo
operator||=
name|QWindowsContext
operator|::
name|SI_SupportsTouch
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|useRTL_Extensions
argument_list|(
name|ver
argument_list|)
condition|)
block|{
name|m_systemInfo
operator||=
name|QWindowsContext
operator|::
name|SI_RTL_Extensions
expr_stmt|;
name|m_keyMapper
operator|.
name|setUseRTLExtensions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_constructor
DECL|function|QWindowsContext
name|QWindowsContext
operator|::
name|QWindowsContext
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QWindowsContextPrivate
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_CC_MSVC
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4996
name|)
endif|#
directive|endif
name|m_instance
operator|=
name|this
expr_stmt|;
specifier|const
name|QByteArray
name|bv
init|=
name|qgetenv
argument_list|(
literal|"QT_QPA_VERBOSE"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bv
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|char
modifier|*
name|v
init|=
name|bv
operator|.
name|data
argument_list|()
decl_stmt|;
name|QWindowsContext
operator|::
name|verboseIntegration
operator|=
name|componentVerbose
argument_list|(
name|v
argument_list|,
literal|"integration"
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|verboseWindows
operator|=
name|componentVerbose
argument_list|(
name|v
argument_list|,
literal|"windows"
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|verboseEvents
operator|=
name|componentVerbose
argument_list|(
name|v
argument_list|,
literal|"events"
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|verboseBackingStore
operator|=
name|componentVerbose
argument_list|(
name|v
argument_list|,
literal|"backingstore"
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|verboseFonts
operator|=
name|componentVerbose
argument_list|(
name|v
argument_list|,
literal|"fonts"
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|verboseGL
operator|=
name|componentVerbose
argument_list|(
name|v
argument_list|,
literal|"gl"
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|verboseOLE
operator|=
name|componentVerbose
argument_list|(
name|v
argument_list|,
literal|"ole"
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|verboseInputMethods
operator|=
name|componentVerbose
argument_list|(
name|v
argument_list|,
literal|"im"
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|verboseDialogs
operator|=
name|componentVerbose
argument_list|(
name|v
argument_list|,
literal|"dialogs"
argument_list|)
expr_stmt|;
name|QWindowsContext
operator|::
name|verboseTheming
operator|=
name|componentVerbose
argument_list|(
name|v
argument_list|,
literal|"theming"
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsContext
name|QWindowsContext
operator|::
name|~
name|QWindowsContext
parameter_list|()
block|{
name|unregisterWindowClasses
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_oleInitializeResult
operator|==
name|S_OK
operator|||
name|d
operator|->
name|m_oleInitializeResult
operator|==
name|S_FALSE
condition|)
name|OleUninitialize
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_screenManager
operator|.
name|clearScreens
argument_list|()
expr_stmt|;
comment|// Order: Potentially calls back to the windows.
name|m_instance
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|instance
name|QWindowsContext
modifier|*
name|QWindowsContext
operator|::
name|instance
parameter_list|()
block|{
return|return
name|m_instance
return|;
block|}
end_function
begin_function
DECL|function|systemInfo
name|unsigned
name|QWindowsContext
operator|::
name|systemInfo
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_systemInfo
return|;
block|}
end_function
begin_function
DECL|function|useRTLExtensions
name|bool
name|QWindowsContext
operator|::
name|useRTLExtensions
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_keyMapper
operator|.
name|useRTLExtensions
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|possibleKeys
name|QList
argument_list|<
name|int
argument_list|>
name|QWindowsContext
operator|::
name|possibleKeys
parameter_list|(
specifier|const
name|QKeyEvent
modifier|*
name|e
parameter_list|)
specifier|const
block|{
return|return
name|d
operator|->
name|m_keyMapper
operator|.
name|possibleKeys
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setWindowCreationContext
name|void
name|QWindowsContext
operator|::
name|setWindowCreationContext
parameter_list|(
specifier|const
name|QSharedPointer
argument_list|<
name|QWindowCreationContext
argument_list|>
modifier|&
name|ctx
parameter_list|)
block|{
name|d
operator|->
name|m_creationContext
operator|=
name|ctx
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultDPI
name|int
name|QWindowsContext
operator|::
name|defaultDPI
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_defaultDPI
return|;
block|}
end_function
begin_function
DECL|function|displayContext
name|HDC
name|QWindowsContext
operator|::
name|displayContext
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_displayContext
return|;
block|}
end_function
begin_function
DECL|function|keyGrabber
name|QWindow
modifier|*
name|QWindowsContext
operator|::
name|keyGrabber
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_keyMapper
operator|.
name|keyGrabber
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setKeyGrabber
name|void
name|QWindowsContext
operator|::
name|setKeyGrabber
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
name|d
operator|->
name|m_keyMapper
operator|.
name|setKeyGrabber
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Window class registering code (from qapplication_win.cpp)
end_comment
begin_comment
comment|// If 0 is passed as the widget pointer, register a window class
end_comment
begin_comment
comment|// for QWidget as default. This is used in QGLTemporaryContext
end_comment
begin_comment
comment|// during GL initialization, where we don't want to use temporary
end_comment
begin_comment
comment|// QWidgets or QGLWidgets, neither do we want to have separate code
end_comment
begin_comment
comment|// to register window classes.
end_comment
begin_function
DECL|function|registerWindowClass
name|QString
name|QWindowsContext
operator|::
name|registerWindowClass
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
name|bool
name|isGL
parameter_list|)
block|{
specifier|const
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|w
condition|?
name|w
operator|->
name|flags
argument_list|()
else|:
operator|(
name|Qt
operator|::
name|WindowFlags
operator|)
literal|0
decl_stmt|;
specifier|const
name|Qt
operator|::
name|WindowFlags
name|type
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
decl_stmt|;
name|uint
name|style
init|=
literal|0
decl_stmt|;
name|bool
name|icon
init|=
literal|false
decl_stmt|;
name|QString
name|cname
init|=
name|QStringLiteral
argument_list|(
literal|"Qt5"
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|&&
name|isGL
condition|)
block|{
name|cname
operator|+=
name|QStringLiteral
argument_list|(
literal|"QGLWindow"
argument_list|)
expr_stmt|;
name|style
operator|=
name|CS_DBLCLKS
operator||
name|CS_OWNDC
expr_stmt|;
name|icon
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|w
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsOwnDC
operator|)
condition|)
block|{
name|cname
operator|+=
name|QStringLiteral
argument_list|(
literal|"QWindowOwnDC"
argument_list|)
expr_stmt|;
name|style
operator|=
name|CS_DBLCLKS
operator||
name|CS_OWNDC
expr_stmt|;
name|icon
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|w
operator|&&
operator|(
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
condition|)
block|{
name|style
operator|=
name|CS_DBLCLKS
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|inherits
argument_list|(
literal|"QTipLabel"
argument_list|)
operator|||
name|w
operator|->
name|inherits
argument_list|(
literal|"QAlphaWidget"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
operator|)
condition|)
block|{
name|style
operator||=
name|CS_DROPSHADOW
expr_stmt|;
block|}
name|cname
operator|+=
name|QStringLiteral
argument_list|(
literal|"QToolTip"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cname
operator|+=
name|QStringLiteral
argument_list|(
literal|"QTool"
argument_list|)
expr_stmt|;
block|}
name|style
operator||=
name|CS_SAVEBITS
expr_stmt|;
name|icon
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|w
operator|&&
operator|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|)
condition|)
block|{
name|cname
operator|+=
name|QStringLiteral
argument_list|(
literal|"QPopup"
argument_list|)
expr_stmt|;
name|style
operator|=
name|CS_DBLCLKS
operator||
name|CS_SAVEBITS
expr_stmt|;
if|if
condition|(
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
operator|)
condition|)
name|style
operator||=
name|CS_DROPSHADOW
expr_stmt|;
name|icon
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|cname
operator|+=
name|QStringLiteral
argument_list|(
literal|"QWindow"
argument_list|)
expr_stmt|;
name|style
operator|=
name|CS_DBLCLKS
expr_stmt|;
name|icon
operator|=
literal|true
expr_stmt|;
block|}
name|HBRUSH
name|brush
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|w
operator|&&
operator|!
name|isGL
condition|)
name|brush
operator|=
name|GetSysColorBrush
argument_list|(
name|COLOR_WINDOW
argument_list|)
expr_stmt|;
return|return
name|registerWindowClass
argument_list|(
name|cname
argument_list|,
name|qWindowsWndProc
argument_list|,
name|style
argument_list|,
name|brush
argument_list|,
name|icon
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|registerWindowClass
name|QString
name|QWindowsContext
operator|::
name|registerWindowClass
parameter_list|(
name|QString
name|cname
parameter_list|,
name|WNDPROC
name|proc
parameter_list|,
name|unsigned
name|style
parameter_list|,
name|HBRUSH
name|brush
parameter_list|,
name|bool
name|icon
parameter_list|)
block|{
comment|// since multiple Qt versions can be used in one process
comment|// each one has to have window class names with a unique name
comment|// The first instance gets the unmodified name; if the class
comment|// has already been registered by another instance of Qt then
comment|// add an instance-specific ID, the address of the window proc.
specifier|static
name|int
name|classExists
init|=
operator|-
literal|1
decl_stmt|;
specifier|const
name|HINSTANCE
name|appInstance
init|=
operator|(
name|HINSTANCE
operator|)
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|classExists
operator|==
operator|-
literal|1
condition|)
block|{
name|WNDCLASS
name|wcinfo
decl_stmt|;
name|classExists
operator|=
name|GetClassInfo
argument_list|(
name|appInstance
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|cname
operator|.
name|utf16
argument_list|()
argument_list|,
operator|&
name|wcinfo
argument_list|)
expr_stmt|;
name|classExists
operator|=
name|classExists
operator|&&
name|wcinfo
operator|.
name|lpfnWndProc
operator|!=
name|proc
expr_stmt|;
block|}
if|if
condition|(
name|classExists
condition|)
name|cname
operator|+=
name|QString
operator|::
name|number
argument_list|(
operator|(
name|quintptr
operator|)
name|proc
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_registeredWindowClassNames
operator|.
name|contains
argument_list|(
name|cname
argument_list|)
condition|)
comment|// already registered in our list
return|return
name|cname
return|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|WNDCLASSEX
name|wc
decl_stmt|;
name|wc
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|WNDCLASSEX
argument_list|)
expr_stmt|;
else|#
directive|else
name|WNDCLASS
name|wc
decl_stmt|;
endif|#
directive|endif
name|wc
operator|.
name|style
operator|=
name|style
expr_stmt|;
name|wc
operator|.
name|lpfnWndProc
operator|=
name|proc
expr_stmt|;
name|wc
operator|.
name|cbClsExtra
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|cbWndExtra
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|hInstance
operator|=
name|appInstance
expr_stmt|;
name|wc
operator|.
name|hCursor
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|wc
operator|.
name|hbrBackground
operator|=
name|brush
expr_stmt|;
if|if
condition|(
name|icon
condition|)
block|{
name|wc
operator|.
name|hIcon
operator|=
operator|(
name|HICON
operator|)
name|LoadImage
argument_list|(
name|appInstance
argument_list|,
literal|L"IDI_ICON1"
argument_list|,
name|IMAGE_ICON
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|LR_DEFAULTSIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|wc
operator|.
name|hIcon
condition|)
block|{
name|int
name|sw
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CXSMICON
argument_list|)
decl_stmt|;
name|int
name|sh
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CYSMICON
argument_list|)
decl_stmt|;
name|wc
operator|.
name|hIconSm
operator|=
operator|(
name|HICON
operator|)
name|LoadImage
argument_list|(
name|appInstance
argument_list|,
literal|L"IDI_ICON1"
argument_list|,
name|IMAGE_ICON
argument_list|,
name|sw
argument_list|,
name|sh
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wc
operator|.
name|hIcon
operator|=
operator|(
name|HICON
operator|)
name|LoadImage
argument_list|(
literal|0
argument_list|,
name|IDI_APPLICATION
argument_list|,
name|IMAGE_ICON
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|LR_DEFAULTSIZE
operator||
name|LR_SHARED
argument_list|)
expr_stmt|;
name|wc
operator|.
name|hIconSm
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|wc
operator|.
name|hIcon
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|hIconSm
operator|=
literal|0
expr_stmt|;
block|}
else|#
directive|else
if|if
condition|(
name|icon
condition|)
block|{
name|wc
operator|.
name|hIcon
operator|=
operator|(
name|HICON
operator|)
name|LoadImage
argument_list|(
name|appInstance
argument_list|,
literal|L"IDI_ICON1"
argument_list|,
name|IMAGE_ICON
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|LR_DEFAULTSIZE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wc
operator|.
name|hIcon
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
name|wc
operator|.
name|lpszMenuName
operator|=
literal|0
expr_stmt|;
name|wc
operator|.
name|lpszClassName
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|cname
operator|.
name|utf16
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|ATOM
name|atom
init|=
name|RegisterClassEx
argument_list|(
operator|&
name|wc
argument_list|)
decl_stmt|;
else|#
directive|else
name|ATOM
name|atom
init|=
name|RegisterClass
argument_list|(
operator|&
name|wc
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|atom
condition|)
name|qErrnoWarning
argument_list|(
literal|"QApplication::regClass: Registering window class '%s' failed."
argument_list|,
name|qPrintable
argument_list|(
name|cname
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_registeredWindowClassNames
operator|.
name|insert
argument_list|(
name|cname
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseIntegration
operator|||
name|QWindowsContext
operator|::
name|verboseWindows
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|cname
operator|<<
literal|" style=0x"
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|style
argument_list|,
literal|16
argument_list|)
operator|<<
literal|" brush="
operator|<<
name|brush
operator|<<
literal|" icon="
operator|<<
name|icon
operator|<<
literal|" atom="
operator|<<
name|atom
expr_stmt|;
return|return
name|cname
return|;
block|}
end_function
begin_function
DECL|function|unregisterWindowClasses
name|void
name|QWindowsContext
operator|::
name|unregisterWindowClasses
parameter_list|()
block|{
specifier|const
name|HINSTANCE
name|appInstance
init|=
operator|(
name|HINSTANCE
operator|)
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|name
decl|,
name|d
operator|->
name|m_registeredWindowClassNames
control|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseIntegration
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|name
expr_stmt|;
name|UnregisterClass
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|name
operator|.
name|utf16
argument_list|()
argument_list|,
name|appInstance
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|m_registeredWindowClassNames
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|screenDepth
name|int
name|QWindowsContext
operator|::
name|screenDepth
parameter_list|()
specifier|const
block|{
return|return
name|GetDeviceCaps
argument_list|(
name|d
operator|->
name|m_displayContext
argument_list|,
name|BITSPIXEL
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|windowsErrorMessage
name|QString
name|QWindowsContext
operator|::
name|windowsErrorMessage
parameter_list|(
name|unsigned
name|long
name|errorCode
parameter_list|)
block|{
name|QString
name|rc
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"#%1: "
argument_list|)
operator|.
name|arg
argument_list|(
name|errorCode
argument_list|)
decl_stmt|;
name|ushort
modifier|*
name|lpMsgBuf
decl_stmt|;
specifier|const
name|int
name|len
init|=
name|FormatMessage
argument_list|(
name|FORMAT_MESSAGE_ALLOCATE_BUFFER
operator||
name|FORMAT_MESSAGE_FROM_SYSTEM
operator||
name|FORMAT_MESSAGE_IGNORE_INSERTS
argument_list|,
name|NULL
argument_list|,
name|errorCode
argument_list|,
literal|0
argument_list|,
operator|(
name|LPTSTR
operator|)
operator|&
name|lpMsgBuf
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
condition|)
block|{
name|rc
operator|=
name|QString
operator|::
name|fromUtf16
argument_list|(
name|lpMsgBuf
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|LocalFree
argument_list|(
name|lpMsgBuf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"<unknown error>"
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
end_function
begin_function
DECL|function|addWindow
name|void
name|QWindowsContext
operator|::
name|addWindow
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|QWindowsWindow
modifier|*
name|w
parameter_list|)
block|{
name|d
operator|->
name|m_windows
operator|.
name|insert
argument_list|(
name|hwnd
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeWindow
name|void
name|QWindowsContext
operator|::
name|removeWindow
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
block|{
specifier|const
name|HandleBaseWindowHash
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|m_windows
operator|.
name|find
argument_list|(
name|hwnd
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|d
operator|->
name|m_windows
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|m_keyMapper
operator|.
name|keyGrabber
argument_list|()
operator|==
name|it
operator|.
name|value
argument_list|()
operator|->
name|window
argument_list|()
condition|)
name|d
operator|->
name|m_keyMapper
operator|.
name|setKeyGrabber
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_windows
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|findPlatformWindow
name|QWindowsWindow
modifier|*
name|QWindowsContext
operator|::
name|findPlatformWindow
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
specifier|const
block|{
return|return
name|d
operator|->
name|m_windows
operator|.
name|value
argument_list|(
name|hwnd
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|findClosestPlatformWindow
name|QWindowsWindow
modifier|*
name|QWindowsContext
operator|::
name|findClosestPlatformWindow
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
specifier|const
block|{
name|QWindowsWindow
modifier|*
name|window
init|=
name|d
operator|->
name|m_windows
operator|.
name|value
argument_list|(
name|hwnd
argument_list|)
decl_stmt|;
comment|// Requested hwnd may also be a child of a platform window in case of embedded native windows.
comment|// Find the closest parent that has a platform window.
if|if
condition|(
operator|!
name|window
condition|)
block|{
for|for
control|(
name|HWND
name|w
init|=
name|hwnd
init|;
name|w
condition|;
name|w
operator|=
name|GetParent
argument_list|(
name|w
argument_list|)
control|)
block|{
name|window
operator|=
name|d
operator|->
name|m_windows
operator|.
name|value
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
condition|)
break|break;
block|}
block|}
return|return
name|window
return|;
block|}
end_function
begin_function
DECL|function|findWindow
name|QWindow
modifier|*
name|QWindowsContext
operator|::
name|findWindow
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|QWindowsWindow
modifier|*
name|bw
init|=
name|findPlatformWindow
argument_list|(
name|hwnd
argument_list|)
condition|)
return|return
name|bw
operator|->
name|window
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|windowUnderMouse
name|QWindow
modifier|*
name|QWindowsContext
operator|::
name|windowUnderMouse
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_mouseHandler
operator|.
name|windowUnderMouse
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Find a child window at a screen point.      Deep search for a QWindow at global point, skipping non-owned     windows (accessibility?). Implemented using ChildWindowFromPointEx()     instead of (historically used) WindowFromPoint() to get a well-defined     behaviour for hidden/transparent windows.      \a cwex_flags are flags of ChildWindowFromPointEx().     \a parent is the parent window, pass GetDesktopWindow() for top levels. */
end_comment
begin_function
DECL|function|findPlatformWindowAt
name|QWindowsWindow
modifier|*
name|QWindowsContext
operator|::
name|findPlatformWindowAt
parameter_list|(
name|HWND
name|parent
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|screenPointIn
parameter_list|,
name|unsigned
name|cwex_flags
parameter_list|)
specifier|const
block|{
name|QWindowsWindow
modifier|*
name|result
init|=
literal|0
decl_stmt|;
specifier|const
name|POINT
name|screenPoint
init|=
block|{
name|screenPointIn
operator|.
name|x
argument_list|()
block|,
name|screenPointIn
operator|.
name|y
argument_list|()
block|}
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|POINT
name|point
init|=
name|screenPoint
decl_stmt|;
name|ScreenToClient
argument_list|(
name|parent
argument_list|,
operator|&
name|point
argument_list|)
expr_stmt|;
comment|// Returns parent if inside& none matched.
specifier|const
name|HWND
name|child
init|=
name|ChildWindowFromPointEx
argument_list|(
name|parent
argument_list|,
name|point
argument_list|,
name|cwex_flags
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|&&
name|child
operator|!=
name|parent
condition|)
block|{
if|if
condition|(
name|QWindowsWindow
modifier|*
name|window
init|=
name|findPlatformWindow
argument_list|(
name|child
argument_list|)
condition|)
name|result
operator|=
name|window
expr_stmt|;
name|parent
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|mimeConverter
name|QWindowsMimeConverter
modifier|&
name|QWindowsContext
operator|::
name|mimeConverter
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_mimeConverter
return|;
block|}
end_function
begin_function
DECL|function|screenManager
name|QWindowsScreenManager
modifier|&
name|QWindowsContext
operator|::
name|screenManager
parameter_list|()
block|{
return|return
name|d
operator|->
name|m_screenManager
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Convenience to create a non-visible, message-only dummy     window for example used as clipboard watcher or for GL. */
end_comment
begin_function
DECL|function|createDummyWindow
name|HWND
name|QWindowsContext
operator|::
name|createDummyWindow
parameter_list|(
specifier|const
name|QString
modifier|&
name|classNameIn
parameter_list|,
specifier|const
name|wchar_t
modifier|*
name|windowName
parameter_list|,
name|WNDPROC
name|wndProc
parameter_list|,
name|DWORD
name|style
parameter_list|)
block|{
if|if
condition|(
operator|!
name|wndProc
condition|)
name|wndProc
operator|=
name|DefWindowProc
expr_stmt|;
name|QString
name|className
init|=
name|registerWindowClass
argument_list|(
name|classNameIn
argument_list|,
name|wndProc
argument_list|)
decl_stmt|;
return|return
name|CreateWindowEx
argument_list|(
literal|0
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|className
operator|.
name|utf16
argument_list|()
argument_list|,
name|windowName
argument_list|,
name|style
argument_list|,
name|CW_USEDEFAULT
argument_list|,
name|CW_USEDEFAULT
argument_list|,
name|CW_USEDEFAULT
argument_list|,
name|CW_USEDEFAULT
argument_list|,
name|HWND_MESSAGE
argument_list|,
name|NULL
argument_list|,
operator|(
name|HINSTANCE
operator|)
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Common COM error strings. */
end_comment
begin_function
DECL|function|comErrorString
name|QByteArray
name|QWindowsContext
operator|::
name|comErrorString
parameter_list|(
name|HRESULT
name|hr
parameter_list|)
block|{
switch|switch
condition|(
name|hr
condition|)
block|{
case|case
name|S_OK
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"S_OK"
argument_list|)
return|;
case|case
name|S_FALSE
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"S_FALSE"
argument_list|)
return|;
case|case
name|E_UNEXPECTED
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"E_UNEXPECTED"
argument_list|)
return|;
case|case
name|CO_E_ALREADYINITIALIZED
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"CO_E_ALREADYINITIALIZED"
argument_list|)
return|;
case|case
name|CO_E_NOTINITIALIZED
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"CO_E_NOTINITIALIZED"
argument_list|)
return|;
case|case
name|RPC_E_CHANGED_MODE
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"RPC_E_CHANGED_MODE"
argument_list|)
return|;
case|case
name|OLE_E_WRONGCOMPOBJ
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"OLE_E_WRONGCOMPOBJ"
argument_list|)
return|;
case|case
name|CO_E_NOT_SUPPORTED
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"CO_E_NOT_SUPPORTED"
argument_list|)
return|;
case|case
name|E_NOTIMPL
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"E_NOTIMPL"
argument_list|)
return|;
case|case
name|E_INVALIDARG
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"E_INVALIDARG"
argument_list|)
return|;
case|case
name|E_NOINTERFACE
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"E_NOINTERFACE"
argument_list|)
return|;
case|case
name|E_POINTER
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"E_POINTER"
argument_list|)
return|;
case|case
name|E_HANDLE
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"E_HANDLE"
argument_list|)
return|;
case|case
name|E_ABORT
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"E_ABORT"
argument_list|)
return|;
case|case
name|E_FAIL
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"E_FAIL"
argument_list|)
return|;
case|case
name|RPC_E_WRONG_THREAD
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"RPC_E_WRONG_THREAD"
argument_list|)
return|;
case|case
name|RPC_E_THREAD_NOT_INIT
case|:
return|return
name|QByteArrayLiteral
argument_list|(
literal|"RPC_E_THREAD_NOT_INIT"
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
literal|"Unknown error 0x"
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|quint64
argument_list|(
name|hr
argument_list|)
argument_list|,
literal|16
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!      \brief Main windows procedure registered for windows.       \sa QWindowsGuiEventDispatcher */
end_comment
begin_function
DECL|function|windowsProc
name|bool
name|QWindowsContext
operator|::
name|windowsProc
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|UINT
name|message
parameter_list|,
name|QtWindows
operator|::
name|WindowsEventType
name|et
parameter_list|,
name|WPARAM
name|wParam
parameter_list|,
name|LPARAM
name|lParam
parameter_list|,
name|LRESULT
modifier|*
name|result
parameter_list|)
block|{
operator|*
name|result
operator|=
literal|0
expr_stmt|;
name|MSG
name|msg
decl_stmt|;
name|msg
operator|.
name|hwnd
operator|=
name|hwnd
expr_stmt|;
comment|// re-create MSG structure
name|msg
operator|.
name|message
operator|=
name|message
expr_stmt|;
comment|// time and pt fields ignored
name|msg
operator|.
name|wParam
operator|=
name|wParam
expr_stmt|;
name|msg
operator|.
name|lParam
operator|=
name|lParam
expr_stmt|;
name|msg
operator|.
name|pt
operator|.
name|x
operator|=
name|GET_X_LPARAM
argument_list|(
name|lParam
argument_list|)
expr_stmt|;
name|msg
operator|.
name|pt
operator|.
name|y
operator|=
name|GET_Y_LPARAM
argument_list|(
name|lParam
argument_list|)
expr_stmt|;
comment|// Run the native event filters.
name|long
name|filterResult
init|=
literal|0
decl_stmt|;
name|QAbstractEventDispatcher
modifier|*
name|dispatcher
init|=
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|dispatcher
operator|&&
name|dispatcher
operator|->
name|filterNativeEvent
argument_list|(
name|d
operator|->
name|m_eventType
argument_list|,
operator|&
name|msg
argument_list|,
operator|&
name|filterResult
argument_list|)
condition|)
block|{
operator|*
name|result
operator|=
name|LRESULT
argument_list|(
name|filterResult
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|QWindowsWindow
modifier|*
name|platformWindow
init|=
name|findPlatformWindow
argument_list|(
name|hwnd
argument_list|)
decl_stmt|;
if|if
condition|(
name|platformWindow
condition|)
block|{
name|filterResult
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QWindowSystemInterface
operator|::
name|handleNativeEvent
argument_list|(
name|platformWindow
operator|->
name|window
argument_list|()
argument_list|,
name|d
operator|->
name|m_eventType
argument_list|,
operator|&
name|msg
argument_list|,
operator|&
name|filterResult
argument_list|)
condition|)
block|{
operator|*
name|result
operator|=
name|LRESULT
argument_list|(
name|filterResult
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
switch|switch
condition|(
name|et
condition|)
block|{
case|case
name|QtWindows
operator|::
name|InputMethodStartCompositionEvent
case|:
return|return
name|QWindowsInputContext
operator|::
name|instance
argument_list|()
operator|->
name|startComposition
argument_list|(
name|hwnd
argument_list|)
return|;
case|case
name|QtWindows
operator|::
name|InputMethodCompositionEvent
case|:
return|return
name|QWindowsInputContext
operator|::
name|instance
argument_list|()
operator|->
name|composition
argument_list|(
name|hwnd
argument_list|,
name|lParam
argument_list|)
return|;
case|case
name|QtWindows
operator|::
name|InputMethodEndCompositionEvent
case|:
return|return
name|QWindowsInputContext
operator|::
name|instance
argument_list|()
operator|->
name|endComposition
argument_list|(
name|hwnd
argument_list|)
return|;
case|case
name|QtWindows
operator|::
name|InputMethodRequest
case|:
return|return
name|QWindowsInputContext
operator|::
name|instance
argument_list|()
operator|->
name|handleIME_Request
argument_list|(
name|wParam
argument_list|,
name|lParam
argument_list|,
name|result
argument_list|)
return|;
case|case
name|QtWindows
operator|::
name|InputMethodOpenCandidateWindowEvent
case|:
case|case
name|QtWindows
operator|::
name|InputMethodCloseCandidateWindowEvent
case|:
comment|// TODO: Release/regrab mouse if a popup has mouse grab.
return|return
literal|false
return|;
case|case
name|QtWindows
operator|::
name|ClipboardEvent
case|:
case|case
name|QtWindows
operator|::
name|DestroyEvent
case|:
case|case
name|QtWindows
operator|::
name|UnknownEvent
case|:
return|return
literal|false
return|;
case|case
name|QtWindows
operator|::
name|AccessibleObjectFromWindowRequest
case|:
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
return|return
name|QWindowsAccessibility
operator|::
name|handleAccessibleObjectFromWindowRequest
argument_list|(
name|hwnd
argument_list|,
name|wParam
argument_list|,
name|lParam
argument_list|,
name|result
argument_list|)
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
case|case
name|QtWindows
operator|::
name|DisplayChangedEvent
case|:
return|return
name|d
operator|->
name|m_screenManager
operator|.
name|handleDisplayChange
argument_list|(
name|wParam
argument_list|,
name|lParam
argument_list|)
return|;
case|case
name|QtWindows
operator|::
name|SettingChangedEvent
case|:
return|return
name|d
operator|->
name|m_screenManager
operator|.
name|handleScreenChanges
argument_list|()
return|;
default|default:
break|break;
block|}
comment|// Before CreateWindowEx() returns, some events are sent,
comment|// for example WM_GETMINMAXINFO asking for size constraints for top levels.
comment|// Pass on to current creation context
if|if
condition|(
operator|!
name|platformWindow
operator|&&
operator|!
name|d
operator|->
name|m_creationContext
operator|.
name|isNull
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|et
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|// maybe available on some SDKs revisit WM_GETMINMAXINFO
case|case
name|QtWindows
operator|::
name|QuerySizeHints
case|:
name|d
operator|->
name|m_creationContext
operator|->
name|applyToMinMaxInfo
argument_list|(
cast|reinterpret_cast
argument_list|<
name|MINMAXINFO
operator|*
argument_list|>
argument_list|(
name|lParam
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
case|case
name|QtWindows
operator|::
name|ResizeEvent
case|:
name|d
operator|->
name|m_creationContext
operator|->
name|obtainedGeometry
operator|.
name|setSize
argument_list|(
name|QSize
argument_list|(
name|GET_X_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|GET_Y_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QtWindows
operator|::
name|MoveEvent
case|:
name|d
operator|->
name|m_creationContext
operator|->
name|obtainedGeometry
operator|.
name|moveTo
argument_list|(
name|GET_X_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|GET_Y_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QtWindows
operator|::
name|CalculateSize
case|:
return|return
name|QWindowsGeometryHint
operator|::
name|handleCalculateSize
argument_list|(
name|d
operator|->
name|m_creationContext
operator|->
name|customMargins
argument_list|,
name|msg
argument_list|,
name|result
argument_list|)
return|;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|platformWindow
condition|)
block|{
comment|// Suppress events sent during DestroyWindow() for native children.
if|if
condition|(
name|platformWindow
operator|->
name|testFlag
argument_list|(
name|QWindowsWindow
operator|::
name|WithinDestroy
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseEvents
operator|>
literal|1
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|"Event window: "
operator|<<
name|platformWindow
operator|->
name|window
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"%s: No Qt Window found for event 0x%x (%s), hwnd=0x%p."
argument_list|,
name|__FUNCTION__
argument_list|,
name|message
argument_list|,
name|QWindowsGuiEventDispatcher
operator|::
name|windowsMessageName
argument_list|(
name|message
argument_list|)
argument_list|,
name|hwnd
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|et
condition|)
block|{
case|case
name|QtWindows
operator|::
name|KeyDownEvent
case|:
case|case
name|QtWindows
operator|::
name|KeyEvent
case|:
case|case
name|QtWindows
operator|::
name|InputMethodKeyEvent
case|:
case|case
name|QtWindows
operator|::
name|InputMethodKeyDownEvent
case|:
return|return
name|d
operator|->
name|m_keyMapper
operator|.
name|translateKeyEvent
argument_list|(
name|platformWindow
operator|->
name|window
argument_list|()
argument_list|,
name|hwnd
argument_list|,
name|msg
argument_list|,
name|result
argument_list|)
return|;
case|case
name|QtWindows
operator|::
name|MoveEvent
case|:
name|platformWindow
operator|->
name|handleMoved
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QtWindows
operator|::
name|ResizeEvent
case|:
name|platformWindow
operator|->
name|handleResized
argument_list|(
operator|(
name|int
operator|)
name|wParam
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|// maybe available on some SDKs revisit WM_GETMINMAXINFO
case|case
name|QtWindows
operator|::
name|QuerySizeHints
case|:
name|platformWindow
operator|->
name|getSizeHints
argument_list|(
cast|reinterpret_cast
argument_list|<
name|MINMAXINFO
operator|*
argument_list|>
argument_list|(
name|lParam
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// maybe available on some SDKs revisit WM_NCCALCSIZE
case|case
name|QtWindows
operator|::
name|CalculateSize
case|:
return|return
name|QWindowsGeometryHint
operator|::
name|handleCalculateSize
argument_list|(
name|platformWindow
operator|->
name|customMargins
argument_list|()
argument_list|,
name|msg
argument_list|,
name|result
argument_list|)
return|;
endif|#
directive|endif
case|case
name|QtWindows
operator|::
name|ExposeEvent
case|:
return|return
name|platformWindow
operator|->
name|handleWmPaint
argument_list|(
name|hwnd
argument_list|,
name|message
argument_list|,
name|wParam
argument_list|,
name|lParam
argument_list|)
return|;
case|case
name|QtWindows
operator|::
name|NonClientMouseEvent
case|:
if|if
condition|(
name|platformWindow
operator|->
name|frameStrutEventsEnabled
argument_list|()
condition|)
return|return
name|d
operator|->
name|m_mouseHandler
operator|.
name|translateMouseEvent
argument_list|(
name|platformWindow
operator|->
name|window
argument_list|()
argument_list|,
name|hwnd
argument_list|,
name|et
argument_list|,
name|msg
argument_list|,
name|result
argument_list|)
return|;
break|break;
comment|/* the mouse tracking on windows already handles the reset of the cursor  * and does not like somebody else handling it.  * on WINCE its necessary to handle this event to get the correct cursor  */
ifdef|#
directive|ifdef
name|Q_OS_WINCE
case|case
name|QtWindows
operator|::
name|CursorEvent
case|:
block|{
name|QWindowsWindow
operator|::
name|baseWindowOf
argument_list|(
name|platformWindow
operator|->
name|window
argument_list|()
argument_list|)
operator|->
name|applyCursor
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
case|case
name|QtWindows
operator|::
name|MouseWheelEvent
case|:
case|case
name|QtWindows
operator|::
name|MouseEvent
case|:
case|case
name|QtWindows
operator|::
name|LeaveEvent
case|:
return|return
name|d
operator|->
name|m_mouseHandler
operator|.
name|translateMouseEvent
argument_list|(
name|platformWindow
operator|->
name|window
argument_list|()
argument_list|,
name|hwnd
argument_list|,
name|et
argument_list|,
name|msg
argument_list|,
name|result
argument_list|)
return|;
case|case
name|QtWindows
operator|::
name|TouchEvent
case|:
return|return
name|d
operator|->
name|m_mouseHandler
operator|.
name|translateTouchEvent
argument_list|(
name|platformWindow
operator|->
name|window
argument_list|()
argument_list|,
name|hwnd
argument_list|,
name|et
argument_list|,
name|msg
argument_list|,
name|result
argument_list|)
return|;
case|case
name|QtWindows
operator|::
name|FocusInEvent
case|:
comment|// see QWindowsWindow::requestActivateWindow().
case|case
name|QtWindows
operator|::
name|FocusOutEvent
case|:
name|handleFocusEvent
argument_list|(
name|et
argument_list|,
name|platformWindow
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QtWindows
operator|::
name|ShowEvent
case|:
name|platformWindow
operator|->
name|handleShown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QtWindows
operator|::
name|HideEvent
case|:
name|platformWindow
operator|->
name|handleHidden
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QtWindows
operator|::
name|CloseEvent
case|:
name|QWindowSystemInterface
operator|::
name|handleCloseEvent
argument_list|(
name|platformWindow
operator|->
name|window
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QtWindows
operator|::
name|ThemeChanged
case|:
comment|// ### fixme: Compress these events?
if|if
condition|(
name|QWindowsTheme
modifier|*
name|theme
init|=
name|QWindowsTheme
operator|::
name|instance
argument_list|()
condition|)
name|theme
operator|->
name|windowsThemeChanged
argument_list|(
name|platformWindow
operator|->
name|window
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
case|case
name|QtWindows
operator|::
name|ActivateWindowEvent
case|:
if|if
condition|(
name|platformWindow
operator|->
name|testFlag
argument_list|(
name|QWindowsWindow
operator|::
name|BlockedByModal
argument_list|)
condition|)
if|if
condition|(
specifier|const
name|QWindow
modifier|*
name|modalWindow
init|=
name|QGuiApplication
operator|::
name|modalWindow
argument_list|()
condition|)
name|QWindowsWindow
operator|::
name|baseWindowOf
argument_list|(
name|modalWindow
argument_list|)
operator|->
name|alertWindow
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
case|case
name|QtWindows
operator|::
name|ContextMenu
case|:
name|handleContextMenuEvent
argument_list|(
name|platformWindow
operator|->
name|window
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/* Compress activation events. If the next focus window is already known  * at the time the current one receives focus-out, pass that to  * QWindowSystemInterface instead of sending 0 and ignore its consecutive  * focus-in event.  * This helps applications that do handling in focus-out events. */
end_comment
begin_function
DECL|function|handleFocusEvent
name|void
name|QWindowsContext
operator|::
name|handleFocusEvent
parameter_list|(
name|QtWindows
operator|::
name|WindowsEventType
name|et
parameter_list|,
name|QWindowsWindow
modifier|*
name|platformWindow
parameter_list|)
block|{
name|QWindow
modifier|*
name|nextActiveWindow
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|et
operator|==
name|QtWindows
operator|::
name|FocusInEvent
condition|)
block|{
name|nextActiveWindow
operator|=
name|platformWindow
operator|->
name|window
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Focus out: Is the next window known and different
comment|// from the receiving the focus out.
if|if
condition|(
specifier|const
name|HWND
name|nextActiveHwnd
init|=
name|GetFocus
argument_list|()
condition|)
if|if
condition|(
name|QWindowsWindow
modifier|*
name|nextActivePlatformWindow
init|=
name|findClosestPlatformWindow
argument_list|(
name|nextActiveHwnd
argument_list|)
condition|)
if|if
condition|(
name|nextActivePlatformWindow
operator|!=
name|platformWindow
condition|)
name|nextActiveWindow
operator|=
name|nextActivePlatformWindow
operator|->
name|window
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nextActiveWindow
operator|!=
name|d
operator|->
name|m_lastActiveWindow
condition|)
block|{
name|d
operator|->
name|m_lastActiveWindow
operator|=
name|nextActiveWindow
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|nextActiveWindow
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_function
DECL|function|handleContextMenuEvent
name|void
name|QWindowsContext
operator|::
name|handleContextMenuEvent
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
block|{
name|bool
name|mouseTriggered
init|=
literal|false
decl_stmt|;
name|QPoint
name|globalPos
decl_stmt|;
name|QPoint
name|pos
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|lParam
operator|!=
operator|(
name|int
operator|)
literal|0xffffffff
condition|)
block|{
name|mouseTriggered
operator|=
literal|true
expr_stmt|;
name|globalPos
operator|.
name|setX
argument_list|(
name|msg
operator|.
name|pt
operator|.
name|x
argument_list|)
expr_stmt|;
name|globalPos
operator|.
name|setY
argument_list|(
name|msg
operator|.
name|pt
operator|.
name|y
argument_list|)
expr_stmt|;
name|pos
operator|=
name|QWindowsGeometryHint
operator|::
name|mapFromGlobal
argument_list|(
name|msg
operator|.
name|hwnd
argument_list|,
name|globalPos
argument_list|)
expr_stmt|;
block|}
name|QWindowSystemInterface
operator|::
name|handleContextMenuEvent
argument_list|(
name|window
argument_list|,
name|mouseTriggered
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|QWindowsKeyMapper
operator|::
name|queryKeyboardModifiers
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|asyncExpose
name|bool
name|QWindowsContext
operator|::
name|asyncExpose
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_asyncExpose
return|;
block|}
end_function
begin_function
DECL|function|setAsyncExpose
name|void
name|QWindowsContext
operator|::
name|setAsyncExpose
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|d
operator|->
name|m_asyncExpose
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \brief Windows functions for actual windows.      There is another one for timers, sockets, etc in     QEventDispatcherWin32.      \ingroup qt-lighthouse-win */
end_comment
begin_extern
DECL|function|qWindowsWndProc
extern|extern
literal|"C"
name|LRESULT
name|QT_WIN_CALLBACK
name|qWindowsWndProc
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|UINT
name|message
parameter_list|,
name|WPARAM
name|wParam
parameter_list|,
name|LPARAM
name|lParam
parameter_list|)
block|{
name|LRESULT
name|result
decl_stmt|;
specifier|const
name|QtWindows
operator|::
name|WindowsEventType
name|et
init|=
name|windowsEventType
argument_list|(
name|message
argument_list|,
name|wParam
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|handled
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|windowsProc
argument_list|(
name|hwnd
argument_list|,
name|message
argument_list|,
name|et
argument_list|,
name|wParam
argument_list|,
name|lParam
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseEvents
operator|>
literal|1
condition|)
if|if
condition|(
specifier|const
name|char
modifier|*
name|eventName
init|=
name|QWindowsGuiEventDispatcher
operator|::
name|windowsMessageName
argument_list|(
name|message
argument_list|)
condition|)
name|qDebug
argument_list|(
literal|"EVENT: hwd=%p %s msg=0x%x et=0x%x wp=%d at %d,%d handled=%d"
argument_list|,
name|hwnd
argument_list|,
name|eventName
argument_list|,
name|message
argument_list|,
name|et
argument_list|,
name|int
argument_list|(
name|wParam
argument_list|)
argument_list|,
name|GET_X_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|GET_Y_LPARAM
argument_list|(
name|lParam
argument_list|)
argument_list|,
name|handled
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|handled
condition|)
name|result
operator|=
name|DefWindowProc
argument_list|(
name|hwnd
argument_list|,
name|message
argument_list|,
name|wParam
argument_list|,
name|lParam
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_extern
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
