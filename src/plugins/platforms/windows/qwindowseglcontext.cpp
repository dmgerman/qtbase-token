begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowseglcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLContext>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qeglconvenience_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QWindowsEGLStaticContext     \brief Static data for QWindowsEGLContext.      Keeps the display. The class is shared via     QSharedPointer in the windows, the contexts     and in QWindowsIntegration. The display will     be closed if the last instance is deleted.      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsEGLStaticContext
name|QWindowsEGLStaticContext
operator|::
name|QWindowsEGLStaticContext
parameter_list|(
name|EGLDisplay
name|display
parameter_list|,
name|int
name|version
parameter_list|)
member_init_list|:
name|m_display
argument_list|(
name|display
argument_list|)
member_init_list|,
name|m_version
argument_list|(
name|version
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|create
name|QWindowsEGLStaticContext
modifier|*
name|QWindowsEGLStaticContext
operator|::
name|create
parameter_list|()
block|{
specifier|const
name|HDC
name|dc
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|displayContext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dc
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: No Display"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|EGLDisplay
name|display
init|=
name|eglGetDisplay
argument_list|(
operator|(
name|EGLNativeDisplayType
operator|)
name|dc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|display
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not obtain EGL display"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|EGLint
name|major
decl_stmt|;
name|EGLint
name|minor
decl_stmt|;
if|if
condition|(
operator|!
name|eglInitialize
argument_list|(
name|display
argument_list|,
operator|&
name|major
argument_list|,
operator|&
name|minor
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not initialize egl display: error %d\n"
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|eglGetError
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseGL
condition|)
name|qDebug
argument_list|(
literal|"%s: Created EGL display %p v%d.%d"
argument_list|,
name|__FUNCTION__
argument_list|,
name|display
argument_list|,
name|major
argument_list|,
name|minor
argument_list|)
expr_stmt|;
return|return
operator|new
name|QWindowsEGLStaticContext
argument_list|(
name|display
argument_list|,
operator|(
name|major
operator|<<
literal|8
operator|)
operator||
name|minor
argument_list|)
return|;
block|}
end_function
begin_destructor
DECL|function|~QWindowsEGLStaticContext
name|QWindowsEGLStaticContext
operator|::
name|~
name|QWindowsEGLStaticContext
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseGL
condition|)
name|qDebug
argument_list|(
literal|"%s: Releasing EGL display %p"
argument_list|,
name|__FUNCTION__
argument_list|,
name|m_display
argument_list|)
expr_stmt|;
name|eglTerminate
argument_list|(
name|m_display
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \class QWindowsEGLContext     \brief Open EGL context.      \section1 Using QWindowsEGLContext for Desktop with ANGLE     \section2 Build Instructions     \list     \o Install the Direct X SDK     \o Checkout and build ANGLE (SVN repository) as explained here:        \l{http://code.google.com/p/angleproject/wiki/DevSetup}{ANGLE-Project}.        When building for 64bit, de-activate the "WarnAsError" option        in every project file (as otherwise integer conversion        warnings will break the build).     \o Run configure.exe with the options "-opengl es2 -angle<path>".     \o Build qtbase and test some examples.     \endlist      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsEGLContext
name|QWindowsEGLContext
operator|::
name|QWindowsEGLContext
parameter_list|(
specifier|const
name|QWindowsEGLStaticContextPtr
modifier|&
name|staticContext
parameter_list|,
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|,
name|QPlatformOpenGLContext
modifier|*
name|share
parameter_list|)
member_init_list|:
name|QEGLPlatformContext
argument_list|(
name|format
argument_list|,
name|share
argument_list|,
name|staticContext
operator|->
name|display
argument_list|()
argument_list|,
name|EGL_OPENGL_ES_API
argument_list|)
member_init_list|,
name|m_staticContext
argument_list|(
name|staticContext
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWindowsEGLContext
name|QWindowsEGLContext
operator|::
name|~
name|QWindowsEGLContext
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|hasThreadedOpenGLCapability
name|bool
name|QWindowsEGLContext
operator|::
name|hasThreadedOpenGLCapability
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_OPENGL_ES_2_ANGLE
return|return
literal|false
return|;
else|#
directive|else
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|eglSurfaceForPlatformSurface
name|EGLSurface
name|QWindowsEGLContext
operator|::
name|eglSurfaceForPlatformSurface
parameter_list|(
name|QPlatformSurface
modifier|*
name|surface
parameter_list|)
block|{
specifier|const
name|QWindowsWindow
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
specifier|const
name|QWindowsWindow
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
return|return
name|window
operator|->
name|eglSurfaceHandle
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|makeCurrent
name|bool
name|QWindowsEGLContext
operator|::
name|makeCurrent
parameter_list|(
name|QPlatformSurface
modifier|*
name|surface
parameter_list|)
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|QWindowsWindow
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QWindowsWindow
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
if|if
condition|(
name|EGLSurface
name|eglSurface
init|=
name|window
operator|->
name|ensureEglSurfaceHandle
argument_list|(
name|m_staticContext
argument_list|,
name|eglConfig
argument_list|()
argument_list|)
condition|)
block|{
name|ok
operator|=
name|eglMakeCurrent
argument_list|(
name|eglDisplay
argument_list|()
argument_list|,
name|eglSurface
argument_list|,
name|eglSurface
argument_list|,
name|eglContext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|qWarning
argument_list|(
literal|"%s: eglMakeCurrent() failed, eglError: 0x%x, this: %p \n"
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|eglGetError
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|ok
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
