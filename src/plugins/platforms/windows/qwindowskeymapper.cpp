begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowskeymapper.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsguieventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QKeyEvent>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QWindowsKeyMapper     \brief Translates Windows keys to QWindowSystemInterface events.     \internal     \ingroup qt-lighthouse-win      In addition, handles some special keys to display system menus, etc.     The code originates from \c qkeymapper_win.cpp. */
end_comment
begin_constructor
DECL|function|QWindowsKeyMapper
name|QWindowsKeyMapper
operator|::
name|QWindowsKeyMapper
parameter_list|()
member_init_list|:
name|m_useRTLExtensions
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_keyGrabber
argument_list|(
literal|0
argument_list|)
block|{
name|memset
argument_list|(
name|keyLayout
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|keyLayout
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsKeyMapper
name|QWindowsKeyMapper
operator|::
name|~
name|QWindowsKeyMapper
parameter_list|()
block|{ }
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|LANG_PASHTO
end_ifndef
begin_define
DECL|macro|LANG_PASHTO
define|#
directive|define
name|LANG_PASHTO
value|0x63
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|LANG_SYRIAC
end_ifndef
begin_define
DECL|macro|LANG_SYRIAC
define|#
directive|define
name|LANG_SYRIAC
value|0x5a
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|LANG_DIVEHI
end_ifndef
begin_define
DECL|macro|LANG_DIVEHI
define|#
directive|define
name|LANG_DIVEHI
value|0x65
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|VK_OEM_PLUS
end_ifndef
begin_define
DECL|macro|VK_OEM_PLUS
define|#
directive|define
name|VK_OEM_PLUS
value|0xBB
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|VK_OEM_3
end_ifndef
begin_define
DECL|macro|VK_OEM_3
define|#
directive|define
name|VK_OEM_3
value|0xC0
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Key recorder ------------------------------------------------------------------------[ start ] --
end_comment
begin_struct
DECL|struct|KeyRecord
struct|struct
name|KeyRecord
block|{
DECL|function|KeyRecord
name|KeyRecord
parameter_list|(
name|int
name|c
parameter_list|,
name|int
name|a
parameter_list|,
name|int
name|s
parameter_list|,
specifier|const
name|QString
modifier|&
name|t
parameter_list|)
member_init_list|:
name|code
argument_list|(
name|c
argument_list|)
member_init_list|,
name|ascii
argument_list|(
name|a
argument_list|)
member_init_list|,
name|state
argument_list|(
name|s
argument_list|)
member_init_list|,
name|text
argument_list|(
name|t
argument_list|)
block|{}
DECL|function|KeyRecord
name|KeyRecord
parameter_list|()
block|{}
DECL|member|code
name|int
name|code
decl_stmt|;
DECL|member|ascii
name|int
name|ascii
decl_stmt|;
DECL|member|state
name|int
name|state
decl_stmt|;
DECL|member|text
name|QString
name|text
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|QT_MAX_KEY_RECORDINGS
specifier|static
specifier|const
name|int
name|QT_MAX_KEY_RECORDINGS
init|=
literal|64
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|QT_MAX_KEY_RECORDINGS
comment|// User has LOTS of fingers...
end_comment
begin_struct
DECL|struct|KeyRecorder
struct|struct
name|KeyRecorder
block|{
DECL|function|KeyRecorder
name|KeyRecorder
parameter_list|()
member_init_list|:
name|nrecs
argument_list|(
literal|0
argument_list|)
block|{}
specifier|inline
name|KeyRecord
modifier|*
name|findKey
parameter_list|(
name|int
name|code
parameter_list|,
name|bool
name|remove
parameter_list|)
function_decl|;
specifier|inline
name|void
name|storeKey
parameter_list|(
name|int
name|code
parameter_list|,
name|int
name|ascii
parameter_list|,
name|int
name|state
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
specifier|inline
name|void
name|clearKeys
parameter_list|()
function_decl|;
DECL|member|nrecs
name|int
name|nrecs
decl_stmt|;
DECL|member|deleted_record
name|KeyRecord
name|deleted_record
decl_stmt|;
comment|// A copy of last entry removed from records[]
DECL|member|records
name|KeyRecord
name|records
index|[
name|QT_MAX_KEY_RECORDINGS
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|key_recorder
specifier|static
name|KeyRecorder
name|key_recorder
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|findKey
name|KeyRecord
modifier|*
name|KeyRecorder
operator|::
name|findKey
parameter_list|(
name|int
name|code
parameter_list|,
name|bool
name|remove
parameter_list|)
block|{
name|KeyRecord
modifier|*
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrecs
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|records
index|[
name|i
index|]
operator|.
name|code
operator|==
name|code
condition|)
block|{
if|if
condition|(
name|remove
condition|)
block|{
name|deleted_record
operator|=
name|records
index|[
name|i
index|]
expr_stmt|;
comment|// Move rest down, and decrease count
while|while
condition|(
name|i
operator|+
literal|1
operator|<
name|nrecs
condition|)
block|{
name|records
index|[
name|i
index|]
operator|=
name|records
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
operator|--
name|nrecs
expr_stmt|;
name|result
operator|=
operator|&
name|deleted_record
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|&
name|records
index|[
name|i
index|]
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|storeKey
name|void
name|KeyRecorder
operator|::
name|storeKey
parameter_list|(
name|int
name|code
parameter_list|,
name|int
name|ascii
parameter_list|,
name|int
name|state
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|nrecs
operator|!=
name|QT_MAX_KEY_RECORDINGS
argument_list|,
literal|"Internal KeyRecorder"
argument_list|,
literal|"Keyboard recorder buffer overflow, consider increasing QT_MAX_KEY_RECORDINGS"
argument_list|)
expr_stmt|;
if|if
condition|(
name|nrecs
operator|==
name|QT_MAX_KEY_RECORDINGS
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: Internal keyboard buffer overflow"
argument_list|)
expr_stmt|;
return|return;
block|}
name|records
index|[
name|nrecs
operator|++
index|]
operator|=
name|KeyRecord
argument_list|(
name|code
argument_list|,
name|ascii
argument_list|,
name|state
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearKeys
name|void
name|KeyRecorder
operator|::
name|clearKeys
parameter_list|()
block|{
name|nrecs
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|// Key recorder --------------------------------------------------------------------------[ end ] --
end_comment
begin_comment
comment|// Key translation ---------------------------------------------------------------------[ start ] --
end_comment
begin_comment
comment|// Meaning of values:
end_comment
begin_comment
comment|//             0 = Character output key, needs keyboard driver mapping
end_comment
begin_comment
comment|//   Key_unknown = Unknown Virtual Key, no translation possible, ignore
end_comment
begin_decl_stmt
DECL|variable|KeyTbl
specifier|static
specifier|const
name|uint
name|KeyTbl
index|[]
init|=
block|{
comment|// Keyboard mapping table
comment|// Dec |  Hex | Windows Virtual key
name|Qt
operator|::
name|Key_unknown
block|,
comment|//   0   0x00
name|Qt
operator|::
name|Key_unknown
block|,
comment|//   1   0x01   VK_LBUTTON          | Left mouse button
name|Qt
operator|::
name|Key_unknown
block|,
comment|//   2   0x02   VK_RBUTTON          | Right mouse button
name|Qt
operator|::
name|Key_Cancel
block|,
comment|//   3   0x03   VK_CANCEL           | Control-Break processing
name|Qt
operator|::
name|Key_unknown
block|,
comment|//   4   0x04   VK_MBUTTON          | Middle mouse button
name|Qt
operator|::
name|Key_unknown
block|,
comment|//   5   0x05   VK_XBUTTON1         | X1 mouse button
name|Qt
operator|::
name|Key_unknown
block|,
comment|//   6   0x06   VK_XBUTTON2         | X2 mouse button
name|Qt
operator|::
name|Key_unknown
block|,
comment|//   7   0x07   -- unassigned --
name|Qt
operator|::
name|Key_Backspace
block|,
comment|//   8   0x08   VK_BACK             | BackSpace key
name|Qt
operator|::
name|Key_Tab
block|,
comment|//   9   0x09   VK_TAB              | Tab key
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  10   0x0A   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  11   0x0B   -- reserved --
name|Qt
operator|::
name|Key_Clear
block|,
comment|//  12   0x0C   VK_CLEAR            | Clear key
name|Qt
operator|::
name|Key_Return
block|,
comment|//  13   0x0D   VK_RETURN           | Enter key
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  14   0x0E   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  15   0x0F   -- unassigned --
name|Qt
operator|::
name|Key_Shift
block|,
comment|//  16   0x10   VK_SHIFT            | Shift key
name|Qt
operator|::
name|Key_Control
block|,
comment|//  17   0x11   VK_CONTROL          | Ctrl key
name|Qt
operator|::
name|Key_Alt
block|,
comment|//  18   0x12   VK_MENU             | Alt key
name|Qt
operator|::
name|Key_Pause
block|,
comment|//  19   0x13   VK_PAUSE            | Pause key
name|Qt
operator|::
name|Key_CapsLock
block|,
comment|//  20   0x14   VK_CAPITAL          | Caps-Lock
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  21   0x15   VK_KANA / VK_HANGUL | IME Kana or Hangul mode
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  22   0x16   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  23   0x17   VK_JUNJA            | IME Junja mode
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  24   0x18   VK_FINAL            | IME final mode
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  25   0x19   VK_HANJA / VK_KANJI | IME Hanja or Kanji mode
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  26   0x1A   -- unassigned --
name|Qt
operator|::
name|Key_Escape
block|,
comment|//  27   0x1B   VK_ESCAPE           | Esc key
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  28   0x1C   VK_CONVERT          | IME convert
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  29   0x1D   VK_NONCONVERT       | IME non-convert
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  30   0x1E   VK_ACCEPT           | IME accept
name|Qt
operator|::
name|Key_Mode_switch
block|,
comment|//  31   0x1F   VK_MODECHANGE       | IME mode change request
name|Qt
operator|::
name|Key_Space
block|,
comment|//  32   0x20   VK_SPACE            | Spacebar
name|Qt
operator|::
name|Key_PageUp
block|,
comment|//  33   0x21   VK_PRIOR            | Page Up key
name|Qt
operator|::
name|Key_PageDown
block|,
comment|//  34   0x22   VK_NEXT             | Page Down key
name|Qt
operator|::
name|Key_End
block|,
comment|//  35   0x23   VK_END              | End key
name|Qt
operator|::
name|Key_Home
block|,
comment|//  36   0x24   VK_HOME             | Home key
name|Qt
operator|::
name|Key_Left
block|,
comment|//  37   0x25   VK_LEFT             | Left arrow key
name|Qt
operator|::
name|Key_Up
block|,
comment|//  38   0x26   VK_UP               | Up arrow key
name|Qt
operator|::
name|Key_Right
block|,
comment|//  39   0x27   VK_RIGHT            | Right arrow key
name|Qt
operator|::
name|Key_Down
block|,
comment|//  40   0x28   VK_DOWN             | Down arrow key
name|Qt
operator|::
name|Key_Select
block|,
comment|//  41   0x29   VK_SELECT           | Select key
name|Qt
operator|::
name|Key_Printer
block|,
comment|//  42   0x2A   VK_PRINT            | Print key
name|Qt
operator|::
name|Key_Execute
block|,
comment|//  43   0x2B   VK_EXECUTE          | Execute key
name|Qt
operator|::
name|Key_Print
block|,
comment|//  44   0x2C   VK_SNAPSHOT         | Print Screen key
name|Qt
operator|::
name|Key_Insert
block|,
comment|//  45   0x2D   VK_INSERT           | Ins key
name|Qt
operator|::
name|Key_Delete
block|,
comment|//  46   0x2E   VK_DELETE           | Del key
name|Qt
operator|::
name|Key_Help
block|,
comment|//  47   0x2F   VK_HELP             | Help key
literal|0
block|,
comment|//  48   0x30   (VK_0)              | 0 key
literal|0
block|,
comment|//  49   0x31   (VK_1)              | 1 key
literal|0
block|,
comment|//  50   0x32   (VK_2)              | 2 key
literal|0
block|,
comment|//  51   0x33   (VK_3)              | 3 key
literal|0
block|,
comment|//  52   0x34   (VK_4)              | 4 key
literal|0
block|,
comment|//  53   0x35   (VK_5)              | 5 key
literal|0
block|,
comment|//  54   0x36   (VK_6)              | 6 key
literal|0
block|,
comment|//  55   0x37   (VK_7)              | 7 key
literal|0
block|,
comment|//  56   0x38   (VK_8)              | 8 key
literal|0
block|,
comment|//  57   0x39   (VK_9)              | 9 key
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  58   0x3A   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  59   0x3B   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  60   0x3C   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  61   0x3D   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  62   0x3E   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  63   0x3F   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  64   0x40   -- unassigned --
literal|0
block|,
comment|//  65   0x41   (VK_A)              | A key
literal|0
block|,
comment|//  66   0x42   (VK_B)              | B key
literal|0
block|,
comment|//  67   0x43   (VK_C)              | C key
literal|0
block|,
comment|//  68   0x44   (VK_D)              | D key
literal|0
block|,
comment|//  69   0x45   (VK_E)              | E key
literal|0
block|,
comment|//  70   0x46   (VK_F)              | F key
literal|0
block|,
comment|//  71   0x47   (VK_G)              | G key
literal|0
block|,
comment|//  72   0x48   (VK_H)              | H key
literal|0
block|,
comment|//  73   0x49   (VK_I)              | I key
literal|0
block|,
comment|//  74   0x4A   (VK_J)              | J key
literal|0
block|,
comment|//  75   0x4B   (VK_K)              | K key
literal|0
block|,
comment|//  76   0x4C   (VK_L)              | L key
literal|0
block|,
comment|//  77   0x4D   (VK_M)              | M key
literal|0
block|,
comment|//  78   0x4E   (VK_N)              | N key
literal|0
block|,
comment|//  79   0x4F   (VK_O)              | O key
literal|0
block|,
comment|//  80   0x50   (VK_P)              | P key
literal|0
block|,
comment|//  81   0x51   (VK_Q)              | Q key
literal|0
block|,
comment|//  82   0x52   (VK_R)              | R key
literal|0
block|,
comment|//  83   0x53   (VK_S)              | S key
literal|0
block|,
comment|//  84   0x54   (VK_T)              | T key
literal|0
block|,
comment|//  85   0x55   (VK_U)              | U key
literal|0
block|,
comment|//  86   0x56   (VK_V)              | V key
literal|0
block|,
comment|//  87   0x57   (VK_W)              | W key
literal|0
block|,
comment|//  88   0x58   (VK_X)              | X key
literal|0
block|,
comment|//  89   0x59   (VK_Y)              | Y key
literal|0
block|,
comment|//  90   0x5A   (VK_Z)              | Z key
name|Qt
operator|::
name|Key_Meta
block|,
comment|//  91   0x5B   VK_LWIN             | Left Windows  - MS Natural kbd
name|Qt
operator|::
name|Key_Meta
block|,
comment|//  92   0x5C   VK_RWIN             | Right Windows - MS Natural kbd
name|Qt
operator|::
name|Key_Menu
block|,
comment|//  93   0x5D   VK_APPS             | Application key-MS Natural kbd
name|Qt
operator|::
name|Key_unknown
block|,
comment|//  94   0x5E   -- reserved --
name|Qt
operator|::
name|Key_Sleep
block|,
comment|//  95   0x5F   VK_SLEEP
name|Qt
operator|::
name|Key_0
block|,
comment|//  96   0x60   VK_NUMPAD0          | Numeric keypad 0 key
name|Qt
operator|::
name|Key_1
block|,
comment|//  97   0x61   VK_NUMPAD1          | Numeric keypad 1 key
name|Qt
operator|::
name|Key_2
block|,
comment|//  98   0x62   VK_NUMPAD2          | Numeric keypad 2 key
name|Qt
operator|::
name|Key_3
block|,
comment|//  99   0x63   VK_NUMPAD3          | Numeric keypad 3 key
name|Qt
operator|::
name|Key_4
block|,
comment|// 100   0x64   VK_NUMPAD4          | Numeric keypad 4 key
name|Qt
operator|::
name|Key_5
block|,
comment|// 101   0x65   VK_NUMPAD5          | Numeric keypad 5 key
name|Qt
operator|::
name|Key_6
block|,
comment|// 102   0x66   VK_NUMPAD6          | Numeric keypad 6 key
name|Qt
operator|::
name|Key_7
block|,
comment|// 103   0x67   VK_NUMPAD7          | Numeric keypad 7 key
name|Qt
operator|::
name|Key_8
block|,
comment|// 104   0x68   VK_NUMPAD8          | Numeric keypad 8 key
name|Qt
operator|::
name|Key_9
block|,
comment|// 105   0x69   VK_NUMPAD9          | Numeric keypad 9 key
name|Qt
operator|::
name|Key_Asterisk
block|,
comment|// 106   0x6A   VK_MULTIPLY         | Multiply key
name|Qt
operator|::
name|Key_Plus
block|,
comment|// 107   0x6B   VK_ADD              | Add key
name|Qt
operator|::
name|Key_Comma
block|,
comment|// 108   0x6C   VK_SEPARATOR        | Separator key
name|Qt
operator|::
name|Key_Minus
block|,
comment|// 109   0x6D   VK_SUBTRACT         | Subtract key
name|Qt
operator|::
name|Key_Period
block|,
comment|// 110   0x6E   VK_DECIMAL          | Decimal key
name|Qt
operator|::
name|Key_Slash
block|,
comment|// 111   0x6F   VK_DIVIDE           | Divide key
name|Qt
operator|::
name|Key_F1
block|,
comment|// 112   0x70   VK_F1               | F1 key
name|Qt
operator|::
name|Key_F2
block|,
comment|// 113   0x71   VK_F2               | F2 key
name|Qt
operator|::
name|Key_F3
block|,
comment|// 114   0x72   VK_F3               | F3 key
name|Qt
operator|::
name|Key_F4
block|,
comment|// 115   0x73   VK_F4               | F4 key
name|Qt
operator|::
name|Key_F5
block|,
comment|// 116   0x74   VK_F5               | F5 key
name|Qt
operator|::
name|Key_F6
block|,
comment|// 117   0x75   VK_F6               | F6 key
name|Qt
operator|::
name|Key_F7
block|,
comment|// 118   0x76   VK_F7               | F7 key
name|Qt
operator|::
name|Key_F8
block|,
comment|// 119   0x77   VK_F8               | F8 key
name|Qt
operator|::
name|Key_F9
block|,
comment|// 120   0x78   VK_F9               | F9 key
name|Qt
operator|::
name|Key_F10
block|,
comment|// 121   0x79   VK_F10              | F10 key
name|Qt
operator|::
name|Key_F11
block|,
comment|// 122   0x7A   VK_F11              | F11 key
name|Qt
operator|::
name|Key_F12
block|,
comment|// 123   0x7B   VK_F12              | F12 key
name|Qt
operator|::
name|Key_F13
block|,
comment|// 124   0x7C   VK_F13              | F13 key
name|Qt
operator|::
name|Key_F14
block|,
comment|// 125   0x7D   VK_F14              | F14 key
name|Qt
operator|::
name|Key_F15
block|,
comment|// 126   0x7E   VK_F15              | F15 key
name|Qt
operator|::
name|Key_F16
block|,
comment|// 127   0x7F   VK_F16              | F16 key
name|Qt
operator|::
name|Key_F17
block|,
comment|// 128   0x80   VK_F17              | F17 key
name|Qt
operator|::
name|Key_F18
block|,
comment|// 129   0x81   VK_F18              | F18 key
name|Qt
operator|::
name|Key_F19
block|,
comment|// 130   0x82   VK_F19              | F19 key
name|Qt
operator|::
name|Key_F20
block|,
comment|// 131   0x83   VK_F20              | F20 key
name|Qt
operator|::
name|Key_F21
block|,
comment|// 132   0x84   VK_F21              | F21 key
name|Qt
operator|::
name|Key_F22
block|,
comment|// 133   0x85   VK_F22              | F22 key
name|Qt
operator|::
name|Key_F23
block|,
comment|// 134   0x86   VK_F23              | F23 key
name|Qt
operator|::
name|Key_F24
block|,
comment|// 135   0x87   VK_F24              | F24 key
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 136   0x88   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 137   0x89   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 138   0x8A   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 139   0x8B   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 140   0x8C   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 141   0x8D   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 142   0x8E   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 143   0x8F   -- unassigned --
name|Qt
operator|::
name|Key_NumLock
block|,
comment|// 144   0x90   VK_NUMLOCK          | Num Lock key
name|Qt
operator|::
name|Key_ScrollLock
block|,
comment|// 145   0x91   VK_SCROLL           | Scroll Lock key
comment|// Fujitsu/OASYS kbd --------------------
literal|0
block|,
comment|//Qt::Key_Jisho, // 146   0x92   VK_OEM_FJ_JISHO     | 'Dictionary' key /
comment|//              VK_OEM_NEC_EQUAL  = key on numpad on NEC PC-9800 kbd
name|Qt
operator|::
name|Key_Massyo
block|,
comment|// 147   0x93   VK_OEM_FJ_MASSHOU   | 'Unregister word' key
name|Qt
operator|::
name|Key_Touroku
block|,
comment|// 148   0x94   VK_OEM_FJ_TOUROKU   | 'Register word' key
literal|0
block|,
comment|//Qt::Key_Oyayubi_Left,//149   0x95  VK_OEM_FJ_LOYA  | 'Left OYAYUBI' key
literal|0
block|,
comment|//Qt::Key_Oyayubi_Right,//150  0x96  VK_OEM_FJ_ROYA  | 'Right OYAYUBI' key
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 151   0x97   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 152   0x98   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 153   0x99   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 154   0x9A   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 155   0x9B   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 156   0x9C   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 157   0x9D   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 158   0x9E   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 159   0x9F   -- unassigned --
name|Qt
operator|::
name|Key_Shift
block|,
comment|// 160   0xA0   VK_LSHIFT           | Left Shift key
name|Qt
operator|::
name|Key_Shift
block|,
comment|// 161   0xA1   VK_RSHIFT           | Right Shift key
name|Qt
operator|::
name|Key_Control
block|,
comment|// 162   0xA2   VK_LCONTROL         | Left Ctrl key
name|Qt
operator|::
name|Key_Control
block|,
comment|// 163   0xA3   VK_RCONTROL         | Right Ctrl key
name|Qt
operator|::
name|Key_Alt
block|,
comment|// 164   0xA4   VK_LMENU            | Left Menu key
name|Qt
operator|::
name|Key_Alt
block|,
comment|// 165   0xA5   VK_RMENU            | Right Menu key
name|Qt
operator|::
name|Key_Back
block|,
comment|// 166   0xA6   VK_BROWSER_BACK     | Browser Back key
name|Qt
operator|::
name|Key_Forward
block|,
comment|// 167   0xA7   VK_BROWSER_FORWARD  | Browser Forward key
name|Qt
operator|::
name|Key_Refresh
block|,
comment|// 168   0xA8   VK_BROWSER_REFRESH  | Browser Refresh key
name|Qt
operator|::
name|Key_Stop
block|,
comment|// 169   0xA9   VK_BROWSER_STOP     | Browser Stop key
name|Qt
operator|::
name|Key_Search
block|,
comment|// 170   0xAA   VK_BROWSER_SEARCH   | Browser Search key
name|Qt
operator|::
name|Key_Favorites
block|,
comment|// 171   0xAB   VK_BROWSER_FAVORITES| Browser Favorites key
name|Qt
operator|::
name|Key_HomePage
block|,
comment|// 172   0xAC   VK_BROWSER_HOME     | Browser Start and Home key
name|Qt
operator|::
name|Key_VolumeMute
block|,
comment|// 173   0xAD   VK_VOLUME_MUTE      | Volume Mute key
name|Qt
operator|::
name|Key_VolumeDown
block|,
comment|// 174   0xAE   VK_VOLUME_DOWN      | Volume Down key
name|Qt
operator|::
name|Key_VolumeUp
block|,
comment|// 175   0xAF   VK_VOLUME_UP        | Volume Up key
name|Qt
operator|::
name|Key_MediaNext
block|,
comment|// 176   0xB0   VK_MEDIA_NEXT_TRACK | Next Track key
name|Qt
operator|::
name|Key_MediaPrevious
block|,
comment|//177 0xB1   VK_MEDIA_PREV_TRACK | Previous Track key
name|Qt
operator|::
name|Key_MediaStop
block|,
comment|// 178   0xB2   VK_MEDIA_STOP       | Stop Media key
name|Qt
operator|::
name|Key_MediaPlay
block|,
comment|// 179   0xB3   VK_MEDIA_PLAY_PAUSE | Play/Pause Media key
name|Qt
operator|::
name|Key_LaunchMail
block|,
comment|// 180   0xB4   VK_LAUNCH_MAIL      | Start Mail key
name|Qt
operator|::
name|Key_LaunchMedia
block|,
comment|// 181   0xB5   VK_LAUNCH_MEDIA_SELECT Select Media key
name|Qt
operator|::
name|Key_Launch0
block|,
comment|// 182   0xB6   VK_LAUNCH_APP1      | Start Application 1 key
name|Qt
operator|::
name|Key_Launch1
block|,
comment|// 183   0xB7   VK_LAUNCH_APP2      | Start Application 2 key
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 184   0xB8   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 185   0xB9   -- reserved --
literal|0
block|,
comment|// 186   0xBA   VK_OEM_1            | ';:' for US
literal|0
block|,
comment|// 187   0xBB   VK_OEM_PLUS         | '+' any country
literal|0
block|,
comment|// 188   0xBC   VK_OEM_COMMA        | ',' any country
literal|0
block|,
comment|// 189   0xBD   VK_OEM_MINUS        | '-' any country
literal|0
block|,
comment|// 190   0xBE   VK_OEM_PERIOD       | '.' any country
literal|0
block|,
comment|// 191   0xBF   VK_OEM_2            | '/?' for US
literal|0
block|,
comment|// 192   0xC0   VK_OEM_3            | '`~' for US
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 193   0xC1   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 194   0xC2   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 195   0xC3   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 196   0xC4   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 197   0xC5   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 198   0xC6   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 199   0xC7   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 200   0xC8   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 201   0xC9   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 202   0xCA   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 203   0xCB   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 204   0xCC   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 205   0xCD   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 206   0xCE   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 207   0xCF   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 208   0xD0   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 209   0xD1   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 210   0xD2   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 211   0xD3   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 212   0xD4   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 213   0xD5   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 214   0xD6   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 215   0xD7   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 216   0xD8   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 217   0xD9   -- unassigned --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 218   0xDA   -- unassigned --
literal|0
block|,
comment|// 219   0xDB   VK_OEM_4            | '[{' for US
literal|0
block|,
comment|// 220   0xDC   VK_OEM_5            | '\|' for US
literal|0
block|,
comment|// 221   0xDD   VK_OEM_6            | ']}' for US
literal|0
block|,
comment|// 222   0xDE   VK_OEM_7            | ''"' for US
literal|0
block|,
comment|// 223   0xDF   VK_OEM_8
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 224   0xE0   -- reserved --
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 225   0xE1   VK_OEM_AX           | 'AX' key on Japanese AX kbd
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 226   0xE2   VK_OEM_102          | "<>" or "\|" on RT 102-key kbd
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 227   0xE3   VK_ICO_HELP         | Help key on ICO
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 228   0xE4   VK_ICO_00           | 00 key on ICO
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 229   0xE5   VK_PROCESSKEY       | IME Process key
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 230   0xE6   VK_ICO_CLEAR        |
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 231   0xE7   VK_PACKET           | Unicode char as keystrokes
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 232   0xE8   -- unassigned --
comment|// Nokia/Ericsson definitions ---------------
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 233   0xE9   VK_OEM_RESET
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 234   0xEA   VK_OEM_JUMP
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 235   0xEB   VK_OEM_PA1
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 236   0xEC   VK_OEM_PA2
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 237   0xED   VK_OEM_PA3
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 238   0xEE   VK_OEM_WSCTRL
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 239   0xEF   VK_OEM_CUSEL
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 240   0xF0   VK_OEM_ATTN
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 241   0xF1   VK_OEM_FINISH
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 242   0xF2   VK_OEM_COPY
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 243   0xF3   VK_OEM_AUTO
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 244   0xF4   VK_OEM_ENLW
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 245   0xF5   VK_OEM_BACKTAB
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 246   0xF6   VK_ATTN             | Attn key
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 247   0xF7   VK_CRSEL            | CrSel key
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 248   0xF8   VK_EXSEL            | ExSel key
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 249   0xF9   VK_EREOF            | Erase EOF key
name|Qt
operator|::
name|Key_Play
block|,
comment|// 250   0xFA   VK_PLAY             | Play key
name|Qt
operator|::
name|Key_Zoom
block|,
comment|// 251   0xFB   VK_ZOOM             | Zoom key
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 252   0xFC   VK_NONAME           | Reserved
name|Qt
operator|::
name|Key_unknown
block|,
comment|// 253   0xFD   VK_PA1              | PA1 key
name|Qt
operator|::
name|Key_Clear
block|,
comment|// 254   0xFE   VK_OEM_CLEAR        | Clear key
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Possible modifier states.
end_comment
begin_comment
comment|// NOTE: The order of these states match the order in QWindowsKeyMapper::updatePossibleKeyCodes()!
end_comment
begin_decl_stmt
DECL|variable|ModsTbl
specifier|static
specifier|const
name|Qt
operator|::
name|KeyboardModifiers
name|ModsTbl
index|[]
init|=
block|{
name|Qt
operator|::
name|NoModifier
block|,
comment|// 0
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 1
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 2
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 3
name|Qt
operator|::
name|AltModifier
block|,
comment|// 4
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 5
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 6
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 7
name|Qt
operator|::
name|NoModifier
block|,
comment|// Fall-back to raw Key_*
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|NumMods
specifier|static
specifier|const
name|size_t
name|NumMods
init|=
sizeof|sizeof
name|ModsTbl
operator|/
sizeof|sizeof
expr|*
name|ModsTbl
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|(
name|NumMods
operator|==
name|KeyboardLayoutItem
operator|::
name|NumQtKeys
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|/**   Remap return or action key to select key for windows mobile. */
end_comment
begin_function
DECL|function|winceKeyBend
specifier|inline
name|int
name|winceKeyBend
parameter_list|(
name|int
name|keyCode
parameter_list|)
block|{
return|return
name|KeyTbl
index|[
name|keyCode
index|]
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_function
name|QT_BEGIN_INCLUDE_NAMESPACE
DECL|function|ToUnicode
name|int
name|ToUnicode
parameter_list|(
name|UINT
name|vk
parameter_list|,
name|int
comment|/*scancode*/
parameter_list|,
name|unsigned
name|char
modifier|*
comment|/*kbdBuffer*/
parameter_list|,
name|LPWSTR
name|unicodeBuffer
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{
name|QT_USE_NAMESPACE
name|QChar
modifier|*
name|buf
init|=
cast|reinterpret_cast
argument_list|<
name|QChar
operator|*
argument_list|>
argument_list|(
name|unicodeBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|KeyTbl
index|[
name|vk
index|]
operator|==
literal|0
condition|)
block|{
name|buf
index|[
literal|0
index|]
operator|=
name|vk
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|ToAscii
name|int
name|ToAscii
parameter_list|(
name|UINT
name|vk
parameter_list|,
name|int
name|scancode
parameter_list|,
name|unsigned
name|char
modifier|*
name|kbdBuffer
parameter_list|,
name|LPWORD
name|unicodeBuffer
parameter_list|,
name|int
name|flag
parameter_list|)
block|{
return|return
name|ToUnicode
argument_list|(
name|vk
argument_list|,
name|scancode
argument_list|,
name|kbdBuffer
argument_list|,
operator|(
name|LPWSTR
operator|)
name|unicodeBuffer
argument_list|,
literal|0
argument_list|,
name|flag
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|GetKeyboardState
name|bool
name|GetKeyboardState
parameter_list|(
name|unsigned
name|char
modifier|*
name|kbuffer
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|kbuffer
index|[
name|i
index|]
operator|=
name|GetAsyncKeyState
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
name|QT_END_INCLUDE_NAMESPACE
endif|#
directive|endif
comment|// Q_OS_WINCE
comment|// Translate a VK into a Qt key code, or unicode character
DECL|function|toKeyOrUnicode
specifier|static
specifier|inline
name|int
name|toKeyOrUnicode
parameter_list|(
name|int
name|vk
parameter_list|,
name|int
name|scancode
parameter_list|,
name|unsigned
name|char
modifier|*
name|kbdBuffer
parameter_list|,
name|bool
modifier|*
name|isDeadkey
init|=
literal|0
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|vk
operator|>
literal|0
operator|&&
name|vk
operator|<
literal|256
argument_list|)
expr_stmt|;
name|int
name|code
init|=
literal|0
decl_stmt|;
name|QChar
name|unicodeBuffer
index|[
literal|5
index|]
decl_stmt|;
name|int
name|res
init|=
name|ToUnicode
argument_list|(
name|vk
argument_list|,
name|scancode
argument_list|,
name|kbdBuffer
argument_list|,
cast|reinterpret_cast
argument_list|<
name|LPWSTR
argument_list|>
argument_list|(
name|unicodeBuffer
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// When Ctrl modifier is used ToUnicode does not return correct values. In order to assign the
comment|// right key the control modifier is removed for just that function if the previous call failed.
if|if
condition|(
name|res
operator|==
literal|0
operator|&&
name|kbdBuffer
index|[
name|VK_CONTROL
index|]
condition|)
block|{
specifier|const
name|unsigned
name|char
name|controlState
init|=
name|kbdBuffer
index|[
name|VK_CONTROL
index|]
decl_stmt|;
name|kbdBuffer
index|[
name|VK_CONTROL
index|]
operator|=
literal|0
expr_stmt|;
name|res
operator|=
name|ToUnicode
argument_list|(
name|vk
argument_list|,
name|scancode
argument_list|,
name|kbdBuffer
argument_list|,
cast|reinterpret_cast
argument_list|<
name|LPWSTR
argument_list|>
argument_list|(
name|unicodeBuffer
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|kbdBuffer
index|[
name|VK_CONTROL
index|]
operator|=
name|controlState
expr_stmt|;
block|}
if|if
condition|(
name|res
condition|)
name|code
operator|=
name|unicodeBuffer
index|[
literal|0
index|]
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
comment|// Qt::Key_*'s are not encoded below 0x20, so try again, and DEL keys (0x7f) is encoded with a
comment|// proper Qt::Key_ code
if|if
condition|(
name|code
operator|<
literal|0x20
operator|||
name|code
operator|==
literal|0x7f
condition|)
comment|// Handles res==0 too
name|code
operator|=
name|winceKeyBend
argument_list|(
name|vk
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDeadkey
condition|)
operator|*
name|isDeadkey
operator|=
operator|(
name|res
operator|==
operator|-
literal|1
operator|)
expr_stmt|;
return|return
name|code
operator|==
name|Qt
operator|::
name|Key_unknown
condition|?
literal|0
else|:
name|code
return|;
block|}
end_function
begin_function
DECL|function|qt_translateKeyCode
name|int
name|qt_translateKeyCode
parameter_list|(
name|int
name|vk
parameter_list|)
block|{
name|int
name|code
init|=
name|winceKeyBend
argument_list|(
operator|(
name|vk
argument_list|<
literal|0
operator|||
name|vk
argument_list|>
literal|255
operator|)
condition|?
literal|0
else|:
name|vk
argument_list|)
decl_stmt|;
return|return
name|code
operator|==
name|Qt
operator|::
name|Key_unknown
condition|?
literal|0
else|:
name|code
return|;
block|}
end_function
begin_function
DECL|function|asciiToKeycode
specifier|static
specifier|inline
name|int
name|asciiToKeycode
parameter_list|(
name|char
name|a
parameter_list|,
name|int
name|state
parameter_list|)
block|{
if|if
condition|(
name|a
operator|>=
literal|'a'
operator|&&
name|a
operator|<=
literal|'z'
condition|)
name|a
operator|=
name|toupper
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|state
operator|&
name|Qt
operator|::
name|ControlModifier
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|a
operator|>=
literal|0
operator|&&
name|a
operator|<=
literal|31
condition|)
comment|// Ctrl+@..Ctrl+A..CTRL+Z..Ctrl+_
name|a
operator|+=
literal|'@'
expr_stmt|;
comment|// to @..A..Z.._
block|}
return|return
name|a
operator|&
literal|0xff
return|;
block|}
end_function
begin_function
DECL|function|isModifierKey
specifier|static
specifier|inline
name|bool
name|isModifierKey
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
operator|(
name|code
operator|>=
name|Qt
operator|::
name|Key_Shift
operator|)
operator|&&
operator|(
name|code
operator|<=
name|Qt
operator|::
name|Key_ScrollLock
operator|)
return|;
block|}
end_function
begin_comment
comment|// Key translation -----------------------------------------------------------------------[ end ]---
end_comment
begin_comment
comment|// Keyboard map private ----------------------------------------------------------------[ start ]---
end_comment
begin_function
DECL|function|deleteLayouts
name|void
name|QWindowsKeyMapper
operator|::
name|deleteLayouts
parameter_list|()
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumKeyboardLayoutItems
condition|;
operator|++
name|i
control|)
name|keyLayout
index|[
name|i
index|]
operator|.
name|exists
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeKeyboard
name|void
name|QWindowsKeyMapper
operator|::
name|changeKeyboard
parameter_list|()
block|{
name|deleteLayouts
argument_list|()
expr_stmt|;
comment|/* MAKELCID()'s first argument is a WORD, and GetKeyboardLayout()      * returns a DWORD. */
name|LCID
name|newLCID
init|=
name|MAKELCID
argument_list|(
operator|(
name|quintptr
operator|)
name|GetKeyboardLayout
argument_list|(
literal|0
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
decl_stmt|;
comment|//    keyboardInputLocale = qt_localeFromLCID(newLCID);
name|bool
name|bidi
init|=
literal|false
decl_stmt|;
name|wchar_t
name|LCIDFontSig
index|[
literal|16
index|]
decl_stmt|;
if|if
condition|(
name|GetLocaleInfo
argument_list|(
name|newLCID
argument_list|,
name|LOCALE_FONTSIGNATURE
argument_list|,
name|LCIDFontSig
argument_list|,
sizeof|sizeof
argument_list|(
name|LCIDFontSig
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
operator|&&
operator|(
name|LCIDFontSig
index|[
literal|7
index|]
operator|&
operator|(
name|wchar_t
operator|)
literal|0x0800
operator|)
condition|)
name|bidi
operator|=
literal|true
expr_stmt|;
name|keyboardInputDirection
operator|=
name|bidi
condition|?
name|Qt
operator|::
name|RightToLeft
else|:
name|Qt
operator|::
name|LeftToRight
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearRecordedKeys
name|void
name|QWindowsKeyMapper
operator|::
name|clearRecordedKeys
parameter_list|()
block|{
name|key_recorder
operator|.
name|clearKeys
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setKbdState
specifier|inline
name|void
name|setKbdState
parameter_list|(
name|unsigned
name|char
modifier|*
name|kbd
parameter_list|,
name|bool
name|shift
parameter_list|,
name|bool
name|ctrl
parameter_list|,
name|bool
name|alt
parameter_list|)
block|{
name|kbd
index|[
name|VK_LSHIFT
index|]
operator|=
operator|(
name|shift
condition|?
literal|0x80
else|:
literal|0
operator|)
expr_stmt|;
name|kbd
index|[
name|VK_SHIFT
index|]
operator|=
operator|(
name|shift
condition|?
literal|0x80
else|:
literal|0
operator|)
expr_stmt|;
name|kbd
index|[
name|VK_LCONTROL
index|]
operator|=
operator|(
name|ctrl
condition|?
literal|0x80
else|:
literal|0
operator|)
expr_stmt|;
name|kbd
index|[
name|VK_CONTROL
index|]
operator|=
operator|(
name|ctrl
condition|?
literal|0x80
else|:
literal|0
operator|)
expr_stmt|;
name|kbd
index|[
name|VK_RMENU
index|]
operator|=
operator|(
name|alt
condition|?
literal|0x80
else|:
literal|0
operator|)
expr_stmt|;
name|kbd
index|[
name|VK_MENU
index|]
operator|=
operator|(
name|alt
condition|?
literal|0x80
else|:
literal|0
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateKeyMap
name|void
name|QWindowsKeyMapper
operator|::
name|updateKeyMap
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
block|{
name|unsigned
name|char
name|kbdBuffer
index|[
literal|256
index|]
decl_stmt|;
comment|// Will hold the complete keyboard state
name|GetKeyboardState
argument_list|(
name|kbdBuffer
argument_list|)
expr_stmt|;
name|quint32
name|scancode
init|=
operator|(
name|msg
operator|.
name|lParam
operator|>>
literal|16
operator|)
operator|&
literal|0xfff
decl_stmt|;
name|updatePossibleKeyCodes
argument_list|(
name|kbdBuffer
argument_list|,
name|scancode
argument_list|,
name|msg
operator|.
name|wParam
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updatePossibleKeyCodes
name|void
name|QWindowsKeyMapper
operator|::
name|updatePossibleKeyCodes
parameter_list|(
name|unsigned
name|char
modifier|*
name|kbdBuffer
parameter_list|,
name|quint32
name|scancode
parameter_list|,
name|quint32
name|vk_key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|vk_key
operator|||
operator|(
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|exists
operator|&&
operator|!
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|dirty
operator|)
condition|)
return|return;
comment|// Copy keyboard state, so we can modify and query output for each possible permutation
name|unsigned
name|char
name|buffer
index|[
literal|256
index|]
decl_stmt|;
name|memcpy
argument_list|(
name|buffer
argument_list|,
name|kbdBuffer
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
comment|// Always 0, as Windows doesn't treat these as modifiers;
name|buffer
index|[
name|VK_LWIN
index|]
operator|=
literal|0
expr_stmt|;
name|buffer
index|[
name|VK_RWIN
index|]
operator|=
literal|0
expr_stmt|;
name|buffer
index|[
name|VK_CAPITAL
index|]
operator|=
literal|0
expr_stmt|;
name|buffer
index|[
name|VK_NUMLOCK
index|]
operator|=
literal|0
expr_stmt|;
name|buffer
index|[
name|VK_SCROLL
index|]
operator|=
literal|0
expr_stmt|;
comment|// Always 0, since we'll only change the other versions
name|buffer
index|[
name|VK_RSHIFT
index|]
operator|=
literal|0
expr_stmt|;
name|buffer
index|[
name|VK_RCONTROL
index|]
operator|=
literal|0
expr_stmt|;
name|buffer
index|[
name|VK_LMENU
index|]
operator|=
literal|0
expr_stmt|;
comment|// Use right Alt, since left Ctrl + right Alt is considered AltGraph
name|bool
name|isDeadKey
init|=
literal|false
decl_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|deadkeys
operator|=
literal|0
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|dirty
operator|=
literal|false
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|exists
operator|=
literal|true
expr_stmt|;
name|setKbdState
argument_list|(
name|buffer
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
literal|0
index|]
operator|=
name|toKeyOrUnicode
argument_list|(
name|vk_key
argument_list|,
name|scancode
argument_list|,
name|buffer
argument_list|,
operator|&
name|isDeadKey
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|deadkeys
operator||=
name|isDeadKey
condition|?
literal|0x01
else|:
literal|0
expr_stmt|;
name|setKbdState
argument_list|(
name|buffer
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
literal|1
index|]
operator|=
name|toKeyOrUnicode
argument_list|(
name|vk_key
argument_list|,
name|scancode
argument_list|,
name|buffer
argument_list|,
operator|&
name|isDeadKey
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|deadkeys
operator||=
name|isDeadKey
condition|?
literal|0x02
else|:
literal|0
expr_stmt|;
name|setKbdState
argument_list|(
name|buffer
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
literal|2
index|]
operator|=
name|toKeyOrUnicode
argument_list|(
name|vk_key
argument_list|,
name|scancode
argument_list|,
name|buffer
argument_list|,
operator|&
name|isDeadKey
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|deadkeys
operator||=
name|isDeadKey
condition|?
literal|0x04
else|:
literal|0
expr_stmt|;
name|setKbdState
argument_list|(
name|buffer
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
literal|3
index|]
operator|=
name|toKeyOrUnicode
argument_list|(
name|vk_key
argument_list|,
name|scancode
argument_list|,
name|buffer
argument_list|,
operator|&
name|isDeadKey
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|deadkeys
operator||=
name|isDeadKey
condition|?
literal|0x08
else|:
literal|0
expr_stmt|;
name|setKbdState
argument_list|(
name|buffer
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
literal|4
index|]
operator|=
name|toKeyOrUnicode
argument_list|(
name|vk_key
argument_list|,
name|scancode
argument_list|,
name|buffer
argument_list|,
operator|&
name|isDeadKey
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|deadkeys
operator||=
name|isDeadKey
condition|?
literal|0x10
else|:
literal|0
expr_stmt|;
name|setKbdState
argument_list|(
name|buffer
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
literal|5
index|]
operator|=
name|toKeyOrUnicode
argument_list|(
name|vk_key
argument_list|,
name|scancode
argument_list|,
name|buffer
argument_list|,
operator|&
name|isDeadKey
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|deadkeys
operator||=
name|isDeadKey
condition|?
literal|0x20
else|:
literal|0
expr_stmt|;
name|setKbdState
argument_list|(
name|buffer
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
literal|6
index|]
operator|=
name|toKeyOrUnicode
argument_list|(
name|vk_key
argument_list|,
name|scancode
argument_list|,
name|buffer
argument_list|,
operator|&
name|isDeadKey
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|deadkeys
operator||=
name|isDeadKey
condition|?
literal|0x40
else|:
literal|0
expr_stmt|;
name|setKbdState
argument_list|(
name|buffer
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
literal|7
index|]
operator|=
name|toKeyOrUnicode
argument_list|(
name|vk_key
argument_list|,
name|scancode
argument_list|,
name|buffer
argument_list|,
operator|&
name|isDeadKey
argument_list|)
expr_stmt|;
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|deadkeys
operator||=
name|isDeadKey
condition|?
literal|0x80
else|:
literal|0
expr_stmt|;
comment|// Add a fall back key for layouts which don't do composition and show non-latin1 characters
name|int
name|fallbackKey
init|=
name|winceKeyBend
argument_list|(
name|vk_key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fallbackKey
operator|||
name|fallbackKey
operator|==
name|Qt
operator|::
name|Key_unknown
condition|)
block|{
name|fallbackKey
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|vk_key
operator|!=
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
literal|0
index|]
operator|&&
name|vk_key
argument_list|<
literal|0x5B
operator|&&
name|vk_key
argument_list|>
literal|0x2F
condition|)
name|fallbackKey
operator|=
name|vk_key
expr_stmt|;
block|}
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
literal|8
index|]
operator|=
name|fallbackKey
expr_stmt|;
comment|// If this vk_key a Dead Key
if|if
condition|(
name|MapVirtualKey
argument_list|(
name|vk_key
argument_list|,
literal|2
argument_list|)
operator|&
literal|0x80000000
condition|)
block|{
comment|// Push a Space, then the original key through the low-level ToAscii functions.
comment|// We do this because these functions (ToAscii / ToUnicode) will alter the internal state of
comment|// the keyboard driver By doing the following, we set the keyboard driver state back to what
comment|// it was before we wrecked it with the code above.
comment|// We need to push the space with an empty keystate map, since the driver checks the map for
comment|// transitions in modifiers, so this helps us capture all possible deadkeys.
name|unsigned
name|char
name|emptyBuffer
index|[
literal|256
index|]
decl_stmt|;
name|memset
argument_list|(
name|emptyBuffer
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|emptyBuffer
argument_list|)
argument_list|)
expr_stmt|;
operator|::
name|ToAscii
argument_list|(
name|VK_SPACE
argument_list|,
literal|0
argument_list|,
name|emptyBuffer
argument_list|,
cast|reinterpret_cast
argument_list|<
name|LPWORD
argument_list|>
argument_list|(
operator|&
name|buffer
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|::
name|ToAscii
argument_list|(
name|vk_key
argument_list|,
name|scancode
argument_list|,
name|kbdBuffer
argument_list|,
cast|reinterpret_cast
argument_list|<
name|LPWORD
argument_list|>
argument_list|(
operator|&
name|buffer
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseEvents
operator|>
literal|1
condition|)
block|{
name|qDebug
argument_list|(
literal|"updatePossibleKeyCodes for virtual key = 0x%02x!"
argument_list|,
name|vk_key
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumMods
condition|;
operator|++
name|i
control|)
block|{
name|qDebug
argument_list|(
literal|"    [%d] (%d,0x%02x,'%c')  %s"
argument_list|,
name|int
argument_list|(
name|i
argument_list|)
argument_list|,
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
name|i
index|]
argument_list|,
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
name|i
index|]
argument_list|,
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
name|i
index|]
condition|?
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|qtKey
index|[
name|i
index|]
else|:
literal|0x03
argument_list|,
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|deadkeys
operator|&
operator|(
literal|1
operator|<<
name|i
operator|)
condition|?
literal|"deadkey"
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|isADeadKey
name|bool
name|QWindowsKeyMapper
operator|::
name|isADeadKey
parameter_list|(
name|unsigned
name|int
name|vk_key
parameter_list|,
name|unsigned
name|int
name|modifiers
parameter_list|)
block|{
if|if
condition|(
operator|(
name|vk_key
operator|<
name|NumKeyboardLayoutItems
operator|)
operator|&&
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|exists
condition|)
block|{
for|for
control|(
specifier|register
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumMods
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|uint
argument_list|(
name|ModsTbl
index|[
name|i
index|]
argument_list|)
operator|==
name|modifiers
condition|)
return|return
name|bool
argument_list|(
name|keyLayout
index|[
name|vk_key
index|]
operator|.
name|deadkeys
operator|&
literal|1
operator|<<
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|messageKeyText
specifier|static
specifier|inline
name|QString
name|messageKeyText
parameter_list|(
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|)
block|{
specifier|const
name|QChar
name|ch
init|=
name|QChar
argument_list|(
operator|(
name|ushort
operator|)
name|msg
operator|.
name|wParam
argument_list|)
decl_stmt|;
return|return
name|ch
operator|.
name|isNull
argument_list|()
condition|?
name|QString
argument_list|()
else|:
name|QString
argument_list|(
name|ch
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|showSystemMenu
specifier|static
name|void
name|showSystemMenu
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
name|QWindow
modifier|*
name|topLevel
init|=
name|QWindowsWindow
operator|::
name|topLevelOf
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|HWND
name|topLevelHwnd
init|=
name|QWindowsWindow
operator|::
name|handleOf
argument_list|(
name|topLevel
argument_list|)
decl_stmt|;
name|HMENU
name|menu
init|=
name|GetSystemMenu
argument_list|(
name|topLevelHwnd
argument_list|,
name|FALSE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|menu
condition|)
return|return;
comment|// no menu for this window
ifndef|#
directive|ifndef
name|Q_OS_WINCE
DECL|macro|enabled
define|#
directive|define
name|enabled
value|(MF_BYCOMMAND | MF_ENABLED)
DECL|macro|disabled
define|#
directive|define
name|disabled
value|(MF_BYCOMMAND | MF_GRAYED)
name|EnableMenuItem
argument_list|(
name|menu
argument_list|,
name|SC_MINIMIZE
argument_list|,
operator|(
name|topLevel
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|?
name|enabled
else|:
name|disabled
argument_list|)
expr_stmt|;
name|bool
name|maximized
init|=
name|IsZoomed
argument_list|(
name|topLevelHwnd
argument_list|)
decl_stmt|;
name|EnableMenuItem
argument_list|(
name|menu
argument_list|,
name|SC_MAXIMIZE
argument_list|,
operator|!
operator|(
name|topLevel
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
operator|||
name|maximized
condition|?
name|disabled
else|:
name|enabled
argument_list|)
expr_stmt|;
name|EnableMenuItem
argument_list|(
name|menu
argument_list|,
name|SC_RESTORE
argument_list|,
name|maximized
condition|?
name|enabled
else|:
name|disabled
argument_list|)
expr_stmt|;
comment|// We should _not_ check with the setFixedSize(x,y) case here, since Windows is not able to check
comment|// this and our menu here would be out-of-sync with the menu produced by mouse-click on the
comment|// System Menu, or right-click on the title bar.
name|EnableMenuItem
argument_list|(
name|menu
argument_list|,
name|SC_SIZE
argument_list|,
operator|(
name|topLevel
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator|)
operator|||
name|maximized
condition|?
name|disabled
else|:
name|enabled
argument_list|)
expr_stmt|;
name|EnableMenuItem
argument_list|(
name|menu
argument_list|,
name|SC_MOVE
argument_list|,
name|maximized
condition|?
name|disabled
else|:
name|enabled
argument_list|)
expr_stmt|;
name|EnableMenuItem
argument_list|(
name|menu
argument_list|,
name|SC_CLOSE
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
comment|// Set bold on close menu item
name|MENUITEMINFO
name|closeItem
decl_stmt|;
name|closeItem
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|MENUITEMINFO
argument_list|)
expr_stmt|;
name|closeItem
operator|.
name|fMask
operator|=
name|MIIM_STATE
expr_stmt|;
name|closeItem
operator|.
name|fState
operator|=
name|MFS_DEFAULT
expr_stmt|;
name|SetMenuItemInfo
argument_list|(
name|menu
argument_list|,
name|SC_CLOSE
argument_list|,
name|FALSE
argument_list|,
operator|&
name|closeItem
argument_list|)
expr_stmt|;
DECL|macro|enabled
undef|#
directive|undef
name|enabled
DECL|macro|disabled
undef|#
directive|undef
name|disabled
endif|#
directive|endif
comment|// !Q_OS_WINCE
specifier|const
name|int
name|ret
init|=
name|TrackPopupMenuEx
argument_list|(
name|menu
argument_list|,
name|TPM_LEFTALIGN
operator||
name|TPM_TOPALIGN
operator||
name|TPM_NONOTIFY
operator||
name|TPM_RETURNCMD
argument_list|,
name|topLevel
operator|->
name|geometry
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|topLevel
operator|->
name|geometry
argument_list|()
operator|.
name|y
argument_list|()
argument_list|,
name|topLevelHwnd
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
name|qWindowsWndProc
argument_list|(
name|topLevelHwnd
argument_list|,
name|WM_SYSCOMMAND
argument_list|,
name|ret
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendExtendedPressRelease
specifier|static
specifier|inline
name|void
name|sendExtendedPressRelease
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
name|int
name|k
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|mods
parameter_list|,
name|quint32
name|nativeScanCode
parameter_list|,
name|quint32
name|nativeVirtualKey
parameter_list|,
name|quint32
name|nativeModifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
init|=
name|QString
argument_list|()
parameter_list|,
name|bool
name|autorep
init|=
literal|false
parameter_list|,
name|ushort
name|count
init|=
literal|1
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|w
argument_list|,
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|w
argument_list|,
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|k
argument_list|,
name|mods
argument_list|,
name|nativeScanCode
argument_list|,
name|nativeVirtualKey
argument_list|,
name|nativeModifiers
argument_list|,
name|text
argument_list|,
name|autorep
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \brief To be called from the window procedure. */
end_comment
begin_function
DECL|function|translateKeyEvent
name|bool
name|QWindowsKeyMapper
operator|::
name|translateKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|widget
parameter_list|,
name|HWND
name|hwnd
parameter_list|,
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|,
name|LRESULT
modifier|*
name|result
parameter_list|)
block|{
operator|*
name|result
operator|=
literal|0
expr_stmt|;
name|MSG
name|peekedMsg
decl_stmt|;
comment|// consume dead chars?(for example, typing '`','a' resulting in a-accent).
if|if
condition|(
name|PeekMessage
argument_list|(
operator|&
name|peekedMsg
argument_list|,
name|hwnd
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|PM_NOREMOVE
argument_list|)
operator|&&
name|peekedMsg
operator|.
name|message
operator|==
name|WM_DEADCHAR
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|msg
operator|.
name|message
operator|==
name|WM_KEYDOWN
operator|||
name|msg
operator|.
name|message
operator|==
name|WM_SYSKEYDOWN
condition|)
name|updateKeyMap
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
name|translateKeyEventInternal
argument_list|(
name|widget
argument_list|,
name|msg
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|translateKeyEventInternal
name|bool
name|QWindowsKeyMapper
operator|::
name|translateKeyEventInternal
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|MSG
modifier|&
name|msg
parameter_list|,
name|bool
comment|/* grab */
parameter_list|)
block|{
specifier|const
name|int
name|msgType
init|=
name|msg
operator|.
name|message
decl_stmt|;
specifier|const
name|quint32
name|scancode
init|=
operator|(
name|msg
operator|.
name|lParam
operator|>>
literal|16
operator|)
operator|&
literal|0xfff
decl_stmt|;
specifier|const
name|quint32
name|vk_key
init|=
name|MapVirtualKey
argument_list|(
name|scancode
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|isNumpad
init|=
operator|(
name|msg
operator|.
name|wParam
operator|>=
name|VK_NUMPAD0
operator|&&
name|msg
operator|.
name|wParam
operator|<=
name|VK_NUMPAD9
operator|)
decl_stmt|;
name|quint32
name|nModifiers
init|=
literal|0
decl_stmt|;
name|QWindow
modifier|*
name|receiver
init|=
name|m_keyGrabber
condition|?
name|m_keyGrabber
else|:
name|window
decl_stmt|;
comment|// Map native modifiers to some bit representation
name|nModifiers
operator||=
operator|(
name|GetKeyState
argument_list|(
name|VK_LSHIFT
argument_list|)
operator|&
literal|0x80
condition|?
name|ShiftLeft
else|:
literal|0
operator|)
expr_stmt|;
name|nModifiers
operator||=
operator|(
name|GetKeyState
argument_list|(
name|VK_RSHIFT
argument_list|)
operator|&
literal|0x80
condition|?
name|ShiftRight
else|:
literal|0
operator|)
expr_stmt|;
name|nModifiers
operator||=
operator|(
name|GetKeyState
argument_list|(
name|VK_LCONTROL
argument_list|)
operator|&
literal|0x80
condition|?
name|ControlLeft
else|:
literal|0
operator|)
expr_stmt|;
name|nModifiers
operator||=
operator|(
name|GetKeyState
argument_list|(
name|VK_RCONTROL
argument_list|)
operator|&
literal|0x80
condition|?
name|ControlRight
else|:
literal|0
operator|)
expr_stmt|;
name|nModifiers
operator||=
operator|(
name|GetKeyState
argument_list|(
name|VK_LMENU
argument_list|)
operator|&
literal|0x80
condition|?
name|AltLeft
else|:
literal|0
operator|)
expr_stmt|;
name|nModifiers
operator||=
operator|(
name|GetKeyState
argument_list|(
name|VK_RMENU
argument_list|)
operator|&
literal|0x80
condition|?
name|AltRight
else|:
literal|0
operator|)
expr_stmt|;
name|nModifiers
operator||=
operator|(
name|GetKeyState
argument_list|(
name|VK_LWIN
argument_list|)
operator|&
literal|0x80
condition|?
name|MetaLeft
else|:
literal|0
operator|)
expr_stmt|;
name|nModifiers
operator||=
operator|(
name|GetKeyState
argument_list|(
name|VK_RWIN
argument_list|)
operator|&
literal|0x80
condition|?
name|MetaRight
else|:
literal|0
operator|)
expr_stmt|;
comment|// Add Lock keys to the same bits
name|nModifiers
operator||=
operator|(
name|GetKeyState
argument_list|(
name|VK_CAPITAL
argument_list|)
operator|&
literal|0x01
condition|?
name|CapsLock
else|:
literal|0
operator|)
expr_stmt|;
name|nModifiers
operator||=
operator|(
name|GetKeyState
argument_list|(
name|VK_NUMLOCK
argument_list|)
operator|&
literal|0x01
condition|?
name|NumLock
else|:
literal|0
operator|)
expr_stmt|;
name|nModifiers
operator||=
operator|(
name|GetKeyState
argument_list|(
name|VK_SCROLL
argument_list|)
operator|&
literal|0x01
condition|?
name|ScrollLock
else|:
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|lParam
operator|&
name|ExtendedKey
condition|)
name|nModifiers
operator||=
name|msg
operator|.
name|lParam
operator|&
name|ExtendedKey
expr_stmt|;
comment|// Get the modifier states (may be altered later, depending on key code)
name|int
name|state
init|=
literal|0
decl_stmt|;
name|state
operator||=
operator|(
name|nModifiers
operator|&
name|ShiftAny
condition|?
name|int
argument_list|(
name|Qt
operator|::
name|ShiftModifier
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|state
operator||=
operator|(
name|nModifiers
operator|&
name|ControlAny
condition|?
name|int
argument_list|(
name|Qt
operator|::
name|ControlModifier
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|state
operator||=
operator|(
name|nModifiers
operator|&
name|AltAny
condition|?
name|int
argument_list|(
name|Qt
operator|::
name|AltModifier
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|state
operator||=
operator|(
name|nModifiers
operator|&
name|MetaAny
condition|?
name|int
argument_list|(
name|Qt
operator|::
name|MetaModifier
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
comment|// Now we know enough to either have MapVirtualKey or our own keymap tell us if it's a deadkey
specifier|const
name|bool
name|isDeadKey
init|=
name|isADeadKey
argument_list|(
name|msg
operator|.
name|wParam
argument_list|,
name|state
argument_list|)
operator|||
name|MapVirtualKey
argument_list|(
name|msg
operator|.
name|wParam
argument_list|,
literal|2
argument_list|)
operator|&
literal|0x80000000
decl_stmt|;
comment|// A multi-character key or a Input method character
comment|// not found by our look-ahead
if|if
condition|(
name|msgType
operator|==
name|WM_CHAR
operator|||
name|msgType
operator|==
name|WM_IME_CHAR
condition|)
block|{
name|sendExtendedPressRelease
argument_list|(
name|receiver
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|KeyboardModifier
argument_list|(
name|state
argument_list|)
argument_list|,
name|scancode
argument_list|,
name|vk_key
argument_list|,
name|nModifiers
argument_list|,
name|messageKeyText
argument_list|(
name|msg
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|bool
name|result
init|=
literal|false
decl_stmt|;
comment|// handle Directionality changes (BiDi) with RTL extensions
if|if
condition|(
name|m_useRTLExtensions
condition|)
block|{
specifier|static
name|int
name|dirStatus
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|dirStatus
operator|&&
name|state
operator|==
name|Qt
operator|::
name|ControlModifier
operator|&&
name|msg
operator|.
name|wParam
operator|==
name|VK_CONTROL
operator|&&
name|msgType
operator|==
name|WM_KEYDOWN
condition|)
block|{
if|if
condition|(
name|GetKeyState
argument_list|(
name|VK_LCONTROL
argument_list|)
operator|<
literal|0
condition|)
name|dirStatus
operator|=
name|VK_LCONTROL
expr_stmt|;
elseif|else
if|if
condition|(
name|GetKeyState
argument_list|(
name|VK_RCONTROL
argument_list|)
operator|<
literal|0
condition|)
name|dirStatus
operator|=
name|VK_RCONTROL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dirStatus
condition|)
block|{
if|if
condition|(
name|msgType
operator|==
name|WM_KEYDOWN
condition|)
block|{
if|if
condition|(
name|msg
operator|.
name|wParam
operator|==
name|VK_SHIFT
condition|)
block|{
if|if
condition|(
name|dirStatus
operator|==
name|VK_LCONTROL
operator|&&
name|GetKeyState
argument_list|(
name|VK_LSHIFT
argument_list|)
operator|<
literal|0
condition|)
name|dirStatus
operator|=
name|VK_LSHIFT
expr_stmt|;
elseif|else
if|if
condition|(
name|dirStatus
operator|==
name|VK_RCONTROL
operator|&&
name|GetKeyState
argument_list|(
name|VK_RSHIFT
argument_list|)
operator|<
literal|0
condition|)
name|dirStatus
operator|=
name|VK_RSHIFT
expr_stmt|;
block|}
else|else
block|{
name|dirStatus
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|msgType
operator|==
name|WM_KEYUP
condition|)
block|{
if|if
condition|(
name|dirStatus
operator|==
name|VK_LSHIFT
operator|&&
operator|(
operator|(
name|msg
operator|.
name|wParam
operator|==
name|VK_SHIFT
operator|&&
name|GetKeyState
argument_list|(
name|VK_LCONTROL
argument_list|)
operator|)
operator|||
operator|(
name|msg
operator|.
name|wParam
operator|==
name|VK_CONTROL
operator|&&
name|GetKeyState
argument_list|(
name|VK_LSHIFT
argument_list|)
operator|)
operator|)
condition|)
block|{
name|sendExtendedPressRelease
argument_list|(
name|receiver
argument_list|,
name|Qt
operator|::
name|Key_Direction_L
argument_list|,
literal|0
argument_list|,
name|scancode
argument_list|,
name|msg
operator|.
name|wParam
argument_list|,
name|nModifiers
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
name|dirStatus
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dirStatus
operator|==
name|VK_RSHIFT
operator|&&
operator|(
operator|(
name|msg
operator|.
name|wParam
operator|==
name|VK_SHIFT
operator|&&
name|GetKeyState
argument_list|(
name|VK_RCONTROL
argument_list|)
operator|)
operator|||
operator|(
name|msg
operator|.
name|wParam
operator|==
name|VK_CONTROL
operator|&&
name|GetKeyState
argument_list|(
name|VK_RSHIFT
argument_list|)
operator|)
operator|)
condition|)
block|{
name|sendExtendedPressRelease
argument_list|(
name|receiver
argument_list|,
name|Qt
operator|::
name|Key_Direction_R
argument_list|,
literal|0
argument_list|,
name|scancode
argument_list|,
name|msg
operator|.
name|wParam
argument_list|,
name|nModifiers
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
name|dirStatus
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|dirStatus
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|dirStatus
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
comment|// RTL
comment|// IME will process these keys, so simply return
if|if
condition|(
name|msg
operator|.
name|wParam
operator|==
name|VK_PROCESSKEY
condition|)
return|return
literal|true
return|;
comment|// Ignore invalid virtual keycodes (see bugs 127424, QTBUG-3630)
if|if
condition|(
name|msg
operator|.
name|wParam
operator|==
literal|0
operator|||
name|msg
operator|.
name|wParam
operator|==
literal|0xFF
condition|)
return|return
literal|true
return|;
comment|// Translate VK_* (native) -> Key_* (Qt) keys
comment|// If it's a dead key, we cannot use the toKeyOrUnicode() function, since that will change
comment|// the internal state of the keyboard driver, resulting in that dead keys no longer works.
comment|// ..also if we're typing numbers on the keypad, while holding down the Alt modifier.
name|int
name|code
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isNumpad
operator|&&
operator|(
name|nModifiers
operator|&
name|AltAny
operator|)
condition|)
block|{
name|code
operator|=
name|winceKeyBend
argument_list|(
name|msg
operator|.
name|wParam
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isDeadKey
condition|)
block|{
name|unsigned
name|char
name|kbdBuffer
index|[
literal|256
index|]
decl_stmt|;
comment|// Will hold the complete keyboard state
name|GetKeyboardState
argument_list|(
name|kbdBuffer
argument_list|)
expr_stmt|;
name|code
operator|=
name|toKeyOrUnicode
argument_list|(
name|msg
operator|.
name|wParam
argument_list|,
name|scancode
argument_list|,
name|kbdBuffer
argument_list|)
expr_stmt|;
block|}
comment|// Invert state logic:
comment|// If the key actually pressed is a modifier key, then we remove its modifier key from the
comment|// state, since a modifier-key can't have itself as a modifier
if|if
condition|(
name|code
operator|==
name|Qt
operator|::
name|Key_Control
condition|)
name|state
operator|=
name|state
operator|^
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
elseif|else
if|if
condition|(
name|code
operator|==
name|Qt
operator|::
name|Key_Shift
condition|)
name|state
operator|=
name|state
operator|^
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
elseif|else
if|if
condition|(
name|code
operator|==
name|Qt
operator|::
name|Key_Alt
condition|)
name|state
operator|=
name|state
operator|^
name|Qt
operator|::
name|AltModifier
expr_stmt|;
comment|// If the bit 24 of lParm is set you received a enter,
comment|// otherwise a Return. (This is the extended key bit)
if|if
condition|(
operator|(
name|code
operator|==
name|Qt
operator|::
name|Key_Return
operator|)
operator|&&
operator|(
name|msg
operator|.
name|lParam
operator|&
literal|0x1000000
operator|)
condition|)
name|code
operator|=
name|Qt
operator|::
name|Key_Enter
expr_stmt|;
comment|// All cursor keys without extended bit
if|if
condition|(
operator|!
operator|(
name|msg
operator|.
name|lParam
operator|&
literal|0x1000000
operator|)
condition|)
block|{
switch|switch
condition|(
name|code
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Left
case|:
case|case
name|Qt
operator|::
name|Key_Right
case|:
case|case
name|Qt
operator|::
name|Key_Up
case|:
case|case
name|Qt
operator|::
name|Key_Down
case|:
case|case
name|Qt
operator|::
name|Key_PageUp
case|:
case|case
name|Qt
operator|::
name|Key_PageDown
case|:
case|case
name|Qt
operator|::
name|Key_Home
case|:
case|case
name|Qt
operator|::
name|Key_End
case|:
case|case
name|Qt
operator|::
name|Key_Insert
case|:
case|case
name|Qt
operator|::
name|Key_Delete
case|:
case|case
name|Qt
operator|::
name|Key_Asterisk
case|:
case|case
name|Qt
operator|::
name|Key_Plus
case|:
case|case
name|Qt
operator|::
name|Key_Minus
case|:
case|case
name|Qt
operator|::
name|Key_Period
case|:
case|case
name|Qt
operator|::
name|Key_0
case|:
case|case
name|Qt
operator|::
name|Key_1
case|:
case|case
name|Qt
operator|::
name|Key_2
case|:
case|case
name|Qt
operator|::
name|Key_3
case|:
case|case
name|Qt
operator|::
name|Key_4
case|:
case|case
name|Qt
operator|::
name|Key_5
case|:
case|case
name|Qt
operator|::
name|Key_6
case|:
case|case
name|Qt
operator|::
name|Key_7
case|:
case|case
name|Qt
operator|::
name|Key_8
case|:
case|case
name|Qt
operator|::
name|Key_9
case|:
name|state
operator||=
operator|(
operator|(
name|msg
operator|.
name|wParam
operator|>=
literal|'0'
operator|&&
name|msg
operator|.
name|wParam
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|msg
operator|.
name|wParam
operator|>=
name|VK_OEM_PLUS
operator|&&
name|msg
operator|.
name|wParam
operator|<=
name|VK_OEM_3
operator|)
operator|)
condition|?
literal|0
else|:
name|int
argument_list|(
name|Qt
operator|::
name|KeypadModifier
argument_list|)
expr_stmt|;
default|default:
if|if
condition|(
operator|(
name|uint
operator|)
name|msg
operator|.
name|lParam
operator|==
literal|0x004c0001
operator|||
operator|(
name|uint
operator|)
name|msg
operator|.
name|lParam
operator|==
literal|0xc04c0001
condition|)
name|state
operator||=
name|Qt
operator|::
name|KeypadModifier
expr_stmt|;
break|break;
block|}
block|}
comment|// Other keys with with extended bit
else|else
block|{
switch|switch
condition|(
name|code
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Slash
case|:
case|case
name|Qt
operator|::
name|Key_NumLock
case|:
name|state
operator||=
name|Qt
operator|::
name|KeypadModifier
expr_stmt|;
default|default:
break|break;
block|}
block|}
comment|// KEYDOWN ---------------------------------------------------------------------------------
if|if
condition|(
name|msgType
operator|==
name|WM_KEYDOWN
operator|||
name|msgType
operator|==
name|WM_IME_KEYDOWN
operator|||
name|msgType
operator|==
name|WM_SYSKEYDOWN
condition|)
block|{
comment|// Get the last record of this key press, so we can validate the current state
comment|// The record is not removed from the list
name|KeyRecord
modifier|*
name|rec
init|=
name|key_recorder
operator|.
name|findKey
argument_list|(
name|msg
operator|.
name|wParam
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// If rec's state doesn't match the current state, something has changed behind our back
comment|// (Consumed by modal widget is one possibility) So, remove the record from the list
comment|// This will stop the auto-repeat of the key, should a modifier change, for example
if|if
condition|(
name|rec
operator|&&
name|rec
operator|->
name|state
operator|!=
name|state
condition|)
block|{
name|key_recorder
operator|.
name|findKey
argument_list|(
name|msg
operator|.
name|wParam
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rec
operator|=
literal|0
expr_stmt|;
block|}
comment|// Find unicode character from Windows Message Queue
name|MSG
name|wm_char
decl_stmt|;
name|UINT
name|charType
init|=
operator|(
name|msgType
operator|==
name|WM_KEYDOWN
condition|?
name|WM_CHAR
else|:
name|msgType
operator|==
name|WM_IME_KEYDOWN
condition|?
name|WM_IME_CHAR
else|:
name|WM_SYSCHAR
operator|)
decl_stmt|;
name|QChar
name|uch
decl_stmt|;
if|if
condition|(
name|PeekMessage
argument_list|(
operator|&
name|wm_char
argument_list|,
literal|0
argument_list|,
name|charType
argument_list|,
name|charType
argument_list|,
name|PM_REMOVE
argument_list|)
condition|)
block|{
comment|// Found a ?_CHAR
name|uch
operator|=
name|QChar
argument_list|(
operator|(
name|ushort
operator|)
name|wm_char
operator|.
name|wParam
argument_list|)
expr_stmt|;
if|if
condition|(
name|msgType
operator|==
name|WM_SYSKEYDOWN
operator|&&
name|uch
operator|.
name|isLetter
argument_list|()
operator|&&
operator|(
name|msg
operator|.
name|lParam
operator|&
name|KF_ALTDOWN
operator|)
condition|)
name|uch
operator|=
name|uch
operator|.
name|toLower
argument_list|()
expr_stmt|;
comment|// (See doc of WM_SYSCHAR) Alt-letter
if|if
condition|(
operator|!
name|code
operator|&&
operator|!
name|uch
operator|.
name|row
argument_list|()
condition|)
name|code
operator|=
name|asciiToKeycode
argument_list|(
name|uch
operator|.
name|cell
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|// Special handling for the WM_IME_KEYDOWN message. Microsoft IME (Korean) will not
comment|// generate a WM_IME_CHAR message corresponding to this message. We might get wrong
comment|// results, if we map this virtual key-code directly (for eg '?' US layouts). So try
comment|// to find the correct key using the current message parameters& keyboard state.
if|if
condition|(
name|uch
operator|.
name|isNull
argument_list|()
operator|&&
name|msgType
operator|==
name|WM_IME_KEYDOWN
condition|)
block|{
name|BYTE
name|keyState
index|[
literal|256
index|]
decl_stmt|;
name|wchar_t
name|newKey
index|[
literal|3
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
name|GetKeyboardState
argument_list|(
name|keyState
argument_list|)
expr_stmt|;
name|int
name|val
init|=
name|ToUnicode
argument_list|(
name|vk_key
argument_list|,
name|scancode
argument_list|,
name|keyState
argument_list|,
name|newKey
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|1
condition|)
block|{
name|uch
operator|=
name|QChar
argument_list|(
name|newKey
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If we are still not able to find a unicode key, pass the WM_IME_KEYDOWN
comment|// message to DefWindowProc() for generating a proper WM_KEYDOWN.
return|return
literal|false
return|;
block|}
block|}
comment|// If no ?_CHAR was found in the queue; deduct character from the ?_KEYDOWN parameters
if|if
condition|(
name|uch
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|msg
operator|.
name|wParam
operator|==
name|VK_DELETE
condition|)
block|{
name|uch
operator|=
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|0x7f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Windows doesn't know this one.
block|}
else|else
block|{
if|if
condition|(
name|msgType
operator|!=
name|WM_SYSKEYDOWN
operator|||
operator|!
name|code
condition|)
block|{
name|UINT
name|map
init|=
name|MapVirtualKey
argument_list|(
name|msg
operator|.
name|wParam
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// If the high bit of the return value is set, it's a deadkey
if|if
condition|(
operator|!
operator|(
name|map
operator|&
literal|0x80000000
operator|)
condition|)
name|uch
operator|=
name|QChar
argument_list|(
operator|(
name|ushort
operator|)
name|map
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|code
operator|&&
operator|!
name|uch
operator|.
name|row
argument_list|()
condition|)
name|code
operator|=
name|asciiToKeycode
argument_list|(
name|uch
operator|.
name|cell
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|// Special handling of global Windows hotkeys
if|if
condition|(
name|state
operator|==
name|Qt
operator|::
name|AltModifier
condition|)
block|{
switch|switch
condition|(
name|code
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Escape
case|:
case|case
name|Qt
operator|::
name|Key_Tab
case|:
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_F4
case|:
return|return
literal|false
return|;
comment|// Send the event on to Windows
case|case
name|Qt
operator|::
name|Key_Space
case|:
comment|// do not pass this key to windows, we will process it ourselves
name|showSystemMenu
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
default|default:
break|break;
block|}
block|}
comment|// Map SHIFT + Tab to SHIFT + BackTab, QShortcutMap knows about this translation
if|if
condition|(
name|code
operator|==
name|Qt
operator|::
name|Key_Tab
operator|&&
operator|(
name|state
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
operator|==
name|Qt
operator|::
name|ShiftModifier
condition|)
name|code
operator|=
name|Qt
operator|::
name|Key_Backtab
expr_stmt|;
comment|// If we have a record, it means that the key is already pressed, the state is the same
comment|// so, we have an auto-repeating key
if|if
condition|(
name|rec
condition|)
block|{
if|if
condition|(
name|code
argument_list|<
name|Qt
operator|::
name|Key_Shift
operator|||
name|code
argument_list|>
name|Qt
operator|::
name|Key_ScrollLock
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|receiver
argument_list|,
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|code
argument_list|,
name|Qt
operator|::
name|KeyboardModifier
argument_list|(
name|state
argument_list|)
argument_list|,
name|scancode
argument_list|,
name|msg
operator|.
name|wParam
argument_list|,
name|nModifiers
argument_list|,
name|rec
operator|->
name|text
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|receiver
argument_list|,
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|code
argument_list|,
name|Qt
operator|::
name|KeyboardModifier
argument_list|(
name|state
argument_list|)
argument_list|,
name|scancode
argument_list|,
name|msg
operator|.
name|wParam
argument_list|,
name|nModifiers
argument_list|,
name|rec
operator|->
name|text
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// No record of the key being previous pressed, so we now send a QEvent::KeyPress event,
comment|// and store the key data into our records.
else|else
block|{
specifier|const
name|QString
name|text
init|=
name|uch
operator|.
name|isNull
argument_list|()
condition|?
name|QString
argument_list|()
else|:
name|QString
argument_list|(
name|uch
argument_list|)
decl_stmt|;
specifier|const
name|char
name|a
init|=
name|uch
operator|.
name|row
argument_list|()
condition|?
literal|0
else|:
name|uch
operator|.
name|cell
argument_list|()
decl_stmt|;
name|key_recorder
operator|.
name|storeKey
argument_list|(
name|msg
operator|.
name|wParam
argument_list|,
name|a
argument_list|,
name|state
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|receiver
argument_list|,
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|code
argument_list|,
name|Qt
operator|::
name|KeyboardModifier
argument_list|(
name|state
argument_list|)
argument_list|,
name|scancode
argument_list|,
name|msg
operator|.
name|wParam
argument_list|,
name|nModifiers
argument_list|,
name|text
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
name|bool
name|store
init|=
literal|true
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|// Alt+<alphanumerical> go to the Win32 menu system if unhandled by Qt
if|if
condition|(
name|msgType
operator|==
name|WM_SYSKEYDOWN
operator|&&
operator|!
name|result
operator|&&
name|a
condition|)
block|{
name|HWND
name|parent
init|=
name|GetParent
argument_list|(
name|QWindowsWindow
operator|::
name|handleOf
argument_list|(
name|receiver
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|parent
condition|)
block|{
if|if
condition|(
name|GetMenu
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|SendMessage
argument_list|(
name|parent
argument_list|,
name|WM_SYSCOMMAND
argument_list|,
name|SC_KEYMENU
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|store
operator|=
literal|false
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|parent
operator|=
name|GetParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// !Q_OS_WINCE
if|if
condition|(
operator|!
name|store
condition|)
name|key_recorder
operator|.
name|findKey
argument_list|(
name|msg
operator|.
name|wParam
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// KEYUP -----------------------------------------------------------------------------------
else|else
block|{
comment|// Try to locate the key in our records, and remove it if it exists.
comment|// The key may not be in our records if, for example, the down event was handled by
comment|// win32 natively, or our window gets focus while a key is already press, but now gets
comment|// the key release event.
name|KeyRecord
modifier|*
name|rec
init|=
name|key_recorder
operator|.
name|findKey
argument_list|(
name|msg
operator|.
name|wParam
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rec
operator|&&
operator|!
operator|(
name|code
operator|==
name|Qt
operator|::
name|Key_Shift
operator|||
name|code
operator|==
name|Qt
operator|::
name|Key_Control
operator|||
name|code
operator|==
name|Qt
operator|::
name|Key_Meta
operator|||
name|code
operator|==
name|Qt
operator|::
name|Key_Alt
operator|)
condition|)
block|{
comment|// Someone ate the key down event
block|}
else|else
block|{
if|if
condition|(
operator|!
name|code
condition|)
name|code
operator|=
name|asciiToKeycode
argument_list|(
name|rec
operator|->
name|ascii
condition|?
name|rec
operator|->
name|ascii
else|:
name|msg
operator|.
name|wParam
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// Map SHIFT + Tab to SHIFT + BackTab, QShortcutMap knows about this translation
if|if
condition|(
name|code
operator|==
name|Qt
operator|::
name|Key_Tab
operator|&&
operator|(
name|state
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
operator|==
name|Qt
operator|::
name|ShiftModifier
condition|)
name|code
operator|=
name|Qt
operator|::
name|Key_Backtab
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|receiver
argument_list|,
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|code
argument_list|,
name|Qt
operator|::
name|KeyboardModifier
argument_list|(
name|state
argument_list|)
argument_list|,
name|scancode
argument_list|,
name|msg
operator|.
name|wParam
argument_list|,
name|nModifiers
argument_list|,
operator|(
name|rec
condition|?
name|rec
operator|->
name|text
else|:
name|QString
argument_list|()
operator|)
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|// don't pass Alt to Windows unless we are embedded in a non-Qt window
if|if
condition|(
name|code
operator|==
name|Qt
operator|::
name|Key_Alt
condition|)
block|{
specifier|const
name|QWindowsContext
modifier|*
name|context
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
decl_stmt|;
name|HWND
name|parent
init|=
name|GetParent
argument_list|(
name|QWindowsWindow
operator|::
name|handleOf
argument_list|(
name|receiver
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|parent
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|findPlatformWindow
argument_list|(
name|parent
argument_list|)
operator|&&
name|GetMenu
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|parent
operator|=
name|GetParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|queryKeyboardModifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QWindowsKeyMapper
operator|::
name|queryKeyboardModifiers
parameter_list|()
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
if|if
condition|(
name|GetKeyState
argument_list|(
name|VK_SHIFT
argument_list|)
operator|<
literal|0
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|GetKeyState
argument_list|(
name|VK_CONTROL
argument_list|)
operator|<
literal|0
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|GetKeyState
argument_list|(
name|VK_MENU
argument_list|)
operator|<
literal|0
condition|)
name|modifiers
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
return|return
name|modifiers
return|;
block|}
end_function
begin_function
DECL|function|possibleKeys
name|QList
argument_list|<
name|int
argument_list|>
name|QWindowsKeyMapper
operator|::
name|possibleKeys
parameter_list|(
specifier|const
name|QKeyEvent
modifier|*
name|e
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|result
decl_stmt|;
specifier|const
name|KeyboardLayoutItem
modifier|&
name|kbItem
init|=
name|keyLayout
index|[
name|e
operator|->
name|nativeVirtualKey
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|kbItem
operator|.
name|exists
condition|)
return|return
name|result
return|;
name|quint32
name|baseKey
init|=
name|kbItem
operator|.
name|qtKey
index|[
literal|0
index|]
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|keyMods
init|=
name|e
operator|->
name|modifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseKey
operator|==
name|Qt
operator|::
name|Key_Return
operator|&&
operator|(
name|e
operator|->
name|nativeModifiers
argument_list|()
operator|&
name|ExtendedKey
operator|)
condition|)
block|{
name|result
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Enter
operator|+
name|keyMods
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|result
operator|<<
name|int
argument_list|(
name|baseKey
operator|+
name|keyMods
argument_list|)
expr_stmt|;
comment|// The base key is _always_ valid, of course
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|NumMods
condition|;
operator|++
name|i
control|)
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|neededMods
init|=
name|ModsTbl
index|[
name|i
index|]
decl_stmt|;
name|quint32
name|key
init|=
name|kbItem
operator|.
name|qtKey
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|key
operator|&&
name|key
operator|!=
name|baseKey
operator|&&
operator|(
operator|(
name|keyMods
operator|&
name|neededMods
operator|)
operator|==
name|neededMods
operator|)
condition|)
name|result
operator|<<
name|int
argument_list|(
name|key
operator|+
operator|(
name|keyMods
operator|&
operator|~
name|neededMods
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
