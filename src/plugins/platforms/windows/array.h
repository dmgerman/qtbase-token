begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|ARRAY_H
end_ifndef
begin_define
DECL|macro|ARRAY_H
define|#
directive|define
name|ARRAY_H
end_define
begin_include
include|#
directive|include
file|<QtCore/QtGlobal>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
comment|/* A simple, non-shared array. */
name|template
operator|<
name|class
name|T
operator|>
name|class
name|Array
block|{
name|Q_DISABLE_COPY
argument_list|(
argument|Array
argument_list|)
name|public
operator|:
expr|enum
block|{
name|initialSize
operator|=
literal|5
block|}
block|;
typedef|typedef
name|T
modifier|*
name|const_iterator
typedef|;
name|explicit
name|Array
argument_list|(
argument|size_t size=
literal|0
argument_list|)
operator|:
name|data
argument_list|(
literal|0
argument_list|)
operator|,
name|m_capacity
argument_list|(
literal|0
argument_list|)
operator|,
name|m_size
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|size
condition|)
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
operator|~
name|Array
argument_list|()
block|{
name|delete
index|[]
name|data
block|; }
name|T
operator|*
name|data
expr_stmt|;
end_expr_stmt
begin_expr_stmt
specifier|inline
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|m_size
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|data
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|data
operator|+
name|m_size
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|append
parameter_list|(
specifier|const
name|T
modifier|&
name|value
parameter_list|)
block|{
specifier|const
name|size_t
name|oldSize
init|=
name|m_size
decl_stmt|;
name|resize
argument_list|(
name|m_size
operator|+
literal|1
argument_list|)
expr_stmt|;
name|data
index|[
name|oldSize
index|]
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|void
name|resize
parameter_list|(
name|size_t
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
name|m_size
condition|)
name|reserve
argument_list|(
name|size
operator|>
literal|1
condition|?
name|size
operator|+
name|size
operator|/
literal|2
else|:
name|size_t
argument_list|(
name|initialSize
argument_list|)
argument_list|)
expr_stmt|;
name|m_size
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_function
name|void
name|reserve
parameter_list|(
name|size_t
name|capacity
parameter_list|)
block|{
if|if
condition|(
name|capacity
operator|>
name|m_capacity
condition|)
block|{
specifier|const
name|T
modifier|*
name|oldData
init|=
name|data
decl_stmt|;
name|data
operator|=
name|new
name|T
index|[
name|capacity
index|]
expr_stmt|;
if|if
condition|(
name|oldData
condition|)
block|{
name|std
operator|::
name|copy
argument_list|(
name|oldData
argument_list|,
name|oldData
operator|+
name|m_size
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|delete
index|[]
name|oldData
decl_stmt|;
block|}
name|m_capacity
operator|=
name|capacity
expr_stmt|;
block|}
block|}
end_function
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|size_t
name|m_capacity
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|size_t
name|m_size
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ARRAY_H
end_comment
end_unit
