begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_include
include|#
directive|include
file|"qwindowscursor.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsscreen.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QBitmap>
end_include
begin_include
include|#
directive|include
file|<QtGui/QImage>
end_include
begin_include
include|#
directive|include
file|<QtGui/QBitmap>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_comment
comment|// getPixmapCursor()
end_comment
begin_include
include|#
directive|include
file|<QtGui/private/qhighdpiscaling_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedArrayPointer>
end_include
begin_function
DECL|function|initResources
specifier|static
name|bool
name|initResources
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_IMAGEFORMAT_PNG
argument_list|)
name|Q_INIT_RESOURCE
argument_list|(
name|cursors
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_GUI_EXPORT
name|HBITMAP
name|qt_pixmapToWinHBITMAP
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|p
parameter_list|,
name|int
name|hbitmapFormat
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_GUI_EXPORT
name|HBITMAP
name|qt_createIconMask
parameter_list|(
specifier|const
name|QBitmap
modifier|&
name|bitmap
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*!     \class QWindowsCursorCacheKey     \brief Cache key for storing values in a QHash with a QCursor as key.      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsPixmapCursorCacheKey
name|QWindowsPixmapCursorCacheKey
operator|::
name|QWindowsPixmapCursorCacheKey
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
member_init_list|:
name|bitmapCacheKey
argument_list|(
name|c
operator|.
name|pixmap
argument_list|()
operator|.
name|cacheKey
argument_list|()
argument_list|)
member_init_list|,
name|maskCacheKey
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
operator|!
name|bitmapCacheKey
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|c
operator|.
name|bitmap
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|c
operator|.
name|mask
argument_list|()
argument_list|)
expr_stmt|;
name|bitmapCacheKey
operator|=
name|c
operator|.
name|bitmap
argument_list|()
operator|->
name|cacheKey
argument_list|()
expr_stmt|;
name|maskCacheKey
operator|=
name|c
operator|.
name|mask
argument_list|()
operator|->
name|cacheKey
argument_list|()
expr_stmt|;
block|}
block|}
end_constructor
begin_comment
comment|/*!     \class QWindowsCursor     \brief Platform cursor implementation      Note that whereas under X11, a cursor can be set as a property of     a window, there is only a global SetCursor() function on Windows.     Each Window sets on the global cursor on receiving a Enter-event     as do the Window manager frames (resize/move handles).      \internal     \ingroup qt-lighthouse-win     \sa QWindowsWindowCursor */
end_comment
begin_function
DECL|function|createPixmapCursor
name|HCURSOR
name|QWindowsCursor
operator|::
name|createPixmapCursor
parameter_list|(
name|QPixmap
name|pixmap
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|hotSpot
parameter_list|,
name|qreal
name|scaleFactor
parameter_list|)
block|{
name|HCURSOR
name|cur
init|=
literal|0
decl_stmt|;
specifier|const
name|qreal
name|pixmapScaleFactor
init|=
name|scaleFactor
operator|/
name|pixmap
operator|.
name|devicePixelRatioF
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qFuzzyCompare
argument_list|(
name|pixmapScaleFactor
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|pixmap
operator|=
name|pixmap
operator|.
name|scaled
argument_list|(
operator|(
name|pixmapScaleFactor
operator|*
name|QSizeF
argument_list|(
name|pixmap
operator|.
name|size
argument_list|()
argument_list|)
operator|)
operator|.
name|toSize
argument_list|()
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
expr_stmt|;
block|}
name|QBitmap
name|mask
init|=
name|pixmap
operator|.
name|mask
argument_list|()
decl_stmt|;
if|if
condition|(
name|mask
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|mask
operator|=
name|QBitmap
argument_list|(
name|pixmap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mask
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
block|}
name|HBITMAP
name|ic
init|=
name|qt_pixmapToWinHBITMAP
argument_list|(
name|pixmap
argument_list|,
comment|/* HBitmapAlpha */
literal|2
argument_list|)
decl_stmt|;
specifier|const
name|HBITMAP
name|im
init|=
name|qt_createIconMask
argument_list|(
name|mask
argument_list|)
decl_stmt|;
name|ICONINFO
name|ii
decl_stmt|;
name|ii
operator|.
name|fIcon
operator|=
literal|0
expr_stmt|;
name|ii
operator|.
name|xHotspot
operator|=
name|DWORD
argument_list|(
name|qRound
argument_list|(
name|hotSpot
operator|.
name|x
argument_list|()
operator|*
name|scaleFactor
argument_list|)
argument_list|)
expr_stmt|;
name|ii
operator|.
name|yHotspot
operator|=
name|DWORD
argument_list|(
name|qRound
argument_list|(
name|hotSpot
operator|.
name|y
argument_list|()
operator|*
name|scaleFactor
argument_list|)
argument_list|)
expr_stmt|;
name|ii
operator|.
name|hbmMask
operator|=
name|im
expr_stmt|;
name|ii
operator|.
name|hbmColor
operator|=
name|ic
expr_stmt|;
name|cur
operator|=
name|CreateIconIndirect
argument_list|(
operator|&
name|ii
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|im
argument_list|)
expr_stmt|;
return|return
name|cur
return|;
block|}
end_function
begin_comment
comment|// Create a cursor from image and mask of the format QImage::Format_Mono.
end_comment
begin_function
DECL|function|createBitmapCursor
specifier|static
name|HCURSOR
name|createBitmapCursor
parameter_list|(
specifier|const
name|QImage
modifier|&
name|bbits
parameter_list|,
specifier|const
name|QImage
modifier|&
name|mbits
parameter_list|,
name|QPoint
name|hotSpot
init|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
parameter_list|,
name|bool
name|invb
init|=
literal|false
parameter_list|,
name|bool
name|invm
init|=
literal|false
parameter_list|)
block|{
specifier|const
name|int
name|width
init|=
name|bbits
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|bbits
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|hotSpot
operator|.
name|x
argument_list|()
operator|<
literal|0
condition|)
name|hotSpot
operator|.
name|setX
argument_list|(
name|width
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|hotSpot
operator|.
name|y
argument_list|()
operator|<
literal|0
condition|)
name|hotSpot
operator|.
name|setY
argument_list|(
name|height
operator|/
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|int
name|n
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|width
operator|/
literal|8
argument_list|)
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QScopedArrayPointer
argument_list|<
name|uchar
argument_list|>
name|xBits
argument_list|(
operator|new
name|uchar
index|[
name|height
operator|*
name|n
index|]
argument_list|)
decl_stmt|;
name|QScopedArrayPointer
argument_list|<
name|uchar
argument_list|>
name|xMask
argument_list|(
operator|new
name|uchar
index|[
name|height
operator|*
name|n
index|]
argument_list|)
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uchar
modifier|*
name|bits
init|=
name|bbits
operator|.
name|constScanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|mask
init|=
name|mbits
operator|.
name|constScanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
operator|++
name|j
control|)
block|{
name|uchar
name|b
init|=
name|bits
index|[
name|j
index|]
decl_stmt|;
name|uchar
name|m
init|=
name|mask
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|invb
condition|)
name|b
operator|^=
literal|0xff
expr_stmt|;
if|if
condition|(
name|invm
condition|)
name|m
operator|^=
literal|0xff
expr_stmt|;
name|xBits
index|[
name|x
index|]
operator|=
operator|~
name|m
expr_stmt|;
name|xMask
index|[
name|x
index|]
operator|=
name|b
operator|^
name|m
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
block|}
return|return
name|CreateCursor
argument_list|(
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
argument_list|,
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|,
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|xBits
operator|.
name|data
argument_list|()
argument_list|,
name|xMask
operator|.
name|data
argument_list|()
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|GWES_ICONCURS
argument_list|)
comment|// Q_OS_WINCE
comment|// Windows CE only supports fixed cursor size.
name|int
name|sysW
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CXCURSOR
argument_list|)
decl_stmt|;
name|int
name|sysH
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CYCURSOR
argument_list|)
decl_stmt|;
name|int
name|sysN
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|sysW
operator|/
literal|8
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|xBits
init|=
operator|new
name|uchar
index|[
name|sysH
operator|*
name|sysN
index|]
decl_stmt|;
name|uchar
modifier|*
name|xMask
init|=
operator|new
name|uchar
index|[
name|sysH
operator|*
name|sysN
index|]
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sysH
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|>=
name|height
condition|)
block|{
name|memset
argument_list|(
operator|&
name|xBits
index|[
name|x
index|]
argument_list|,
literal|255
argument_list|,
name|sysN
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|xMask
index|[
name|x
index|]
argument_list|,
literal|0
argument_list|,
name|sysN
argument_list|)
expr_stmt|;
name|x
operator|+=
name|sysN
expr_stmt|;
block|}
else|else
block|{
name|int
name|fillWidth
init|=
name|n
operator|>
name|sysN
condition|?
name|sysN
else|:
name|n
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|bits
init|=
name|bbits
operator|.
name|constScanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|mask
init|=
name|mbits
operator|.
name|constScanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fillWidth
condition|;
operator|++
name|j
control|)
block|{
name|uchar
name|b
init|=
name|bits
index|[
name|j
index|]
decl_stmt|;
name|uchar
name|m
init|=
name|mask
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|invb
condition|)
name|b
operator|^=
literal|0xFF
expr_stmt|;
if|if
condition|(
name|invm
condition|)
name|m
operator|^=
literal|0xFF
expr_stmt|;
name|xBits
index|[
name|x
index|]
operator|=
operator|~
name|m
expr_stmt|;
name|xMask
index|[
name|x
index|]
operator|=
name|b
operator|^
name|m
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|fillWidth
init|;
name|j
operator|<
name|sysN
condition|;
operator|++
name|j
control|)
block|{
name|xBits
index|[
name|x
index|]
operator|=
literal|255
expr_stmt|;
name|xMask
index|[
name|x
index|]
operator|=
literal|0
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
block|}
block|}
name|HCURSOR
name|hcurs
init|=
name|CreateCursor
argument_list|(
name|qWinAppInst
argument_list|()
argument_list|,
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|,
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|,
name|sysW
argument_list|,
name|sysH
argument_list|,
name|xBits
argument_list|,
name|xMask
argument_list|)
decl_stmt|;
operator|delete
index|[]
name|xBits
expr_stmt|;
operator|delete
index|[]
name|xMask
expr_stmt|;
return|return
name|hcurs
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|invm
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|invb
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|mbits
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Create a cursor from image and mask of the format QImage::Format_Mono.
end_comment
begin_function
DECL|function|createBitmapCursor
specifier|static
name|HCURSOR
name|createBitmapCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|,
name|qreal
name|scaleFactor
init|=
literal|1
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|cursor
operator|.
name|shape
argument_list|()
operator|==
name|Qt
operator|::
name|BitmapCursor
operator|&&
name|cursor
operator|.
name|bitmap
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|bbits
init|=
name|cursor
operator|.
name|bitmap
argument_list|()
operator|->
name|toImage
argument_list|()
decl_stmt|;
name|QImage
name|mbits
init|=
name|cursor
operator|.
name|mask
argument_list|()
operator|->
name|toImage
argument_list|()
decl_stmt|;
name|scaleFactor
operator|/=
name|bbits
operator|.
name|devicePixelRatioF
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|qFuzzyCompare
argument_list|(
name|scaleFactor
argument_list|,
literal|1
argument_list|)
condition|)
block|{
specifier|const
name|QSize
name|scaledSize
init|=
operator|(
name|QSizeF
argument_list|(
name|bbits
operator|.
name|size
argument_list|()
argument_list|)
operator|*
name|scaleFactor
operator|)
operator|.
name|toSize
argument_list|()
decl_stmt|;
name|bbits
operator|=
name|bbits
operator|.
name|scaled
argument_list|(
name|scaledSize
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
expr_stmt|;
name|mbits
operator|=
name|mbits
operator|.
name|scaled
argument_list|(
name|scaledSize
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
expr_stmt|;
block|}
name|bbits
operator|=
name|bbits
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
name|mbits
operator|=
name|mbits
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|invb
init|=
name|bbits
operator|.
name|colorCount
argument_list|()
operator|>
literal|1
operator|&&
name|qGray
argument_list|(
name|bbits
operator|.
name|color
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|<
name|qGray
argument_list|(
name|bbits
operator|.
name|color
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|invm
init|=
name|mbits
operator|.
name|colorCount
argument_list|()
operator|>
literal|1
operator|&&
name|qGray
argument_list|(
name|mbits
operator|.
name|color
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|<
name|qGray
argument_list|(
name|mbits
operator|.
name|color
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|createBitmapCursor
argument_list|(
name|bbits
argument_list|,
name|mbits
argument_list|,
name|cursor
operator|.
name|hotSpot
argument_list|()
argument_list|,
name|invb
argument_list|,
name|invm
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|systemCursorSize
specifier|static
name|QSize
name|systemCursorSize
parameter_list|(
specifier|const
name|QPlatformScreen
modifier|*
name|screen
init|=
name|Q_NULLPTR
parameter_list|)
block|{
specifier|const
name|QSize
name|primaryScreenCursorSize
argument_list|(
name|GetSystemMetrics
argument_list|(
name|SM_CXCURSOR
argument_list|)
argument_list|,
name|GetSystemMetrics
argument_list|(
name|SM_CYCURSOR
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|screen
condition|)
block|{
comment|// Correct the size if the DPI value of the screen differs from
comment|// that of the primary screen.
if|if
condition|(
specifier|const
name|QScreen
modifier|*
name|primaryQScreen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
condition|)
block|{
specifier|const
name|QPlatformScreen
modifier|*
name|primaryScreen
init|=
name|primaryQScreen
operator|->
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
name|screen
operator|!=
name|primaryScreen
condition|)
block|{
specifier|const
name|qreal
name|logicalDpi
init|=
name|screen
operator|->
name|logicalDpi
argument_list|()
operator|.
name|first
decl_stmt|;
specifier|const
name|qreal
name|primaryScreenLogicalDpi
init|=
name|primaryScreen
operator|->
name|logicalDpi
argument_list|()
operator|.
name|first
decl_stmt|;
if|if
condition|(
operator|!
name|qFuzzyCompare
argument_list|(
name|logicalDpi
argument_list|,
name|primaryScreenLogicalDpi
argument_list|)
condition|)
return|return
operator|(
name|QSizeF
argument_list|(
name|primaryScreenCursorSize
argument_list|)
operator|*
name|logicalDpi
operator|/
name|primaryScreenLogicalDpi
operator|)
operator|.
name|toSize
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|primaryScreenCursorSize
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_NO_IMAGEFORMAT_PNG
argument_list|)
end_if
begin_function
DECL|function|standardCursorSize
specifier|static
specifier|inline
name|QSize
name|standardCursorSize
parameter_list|()
block|{
return|return
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Create pixmap cursors from data and scale the image if the cursor size is
end_comment
begin_comment
comment|// higher than the standard 32. Note that bitmap cursors as produced by
end_comment
begin_comment
comment|// createBitmapCursor() only work for standard sizes (32,48,64...), which does
end_comment
begin_comment
comment|// not work when scaling the 16x16 openhand cursor bitmaps to 150% (resulting
end_comment
begin_comment
comment|// in a non-standard 24x24 size).
end_comment
begin_function
DECL|function|createPixmapCursorFromData
specifier|static
name|QWindowsCursor
operator|::
name|PixmapCursor
name|createPixmapCursorFromData
parameter_list|(
specifier|const
name|QSize
modifier|&
name|systemCursorSize
parameter_list|,
comment|// The cursor size the bitmap is targeted for
specifier|const
name|QSize
modifier|&
name|bitmapTargetCursorSize
parameter_list|,
comment|// The actual size of the bitmap data
name|int
name|bitmapSize
parameter_list|,
specifier|const
name|uchar
modifier|*
name|bits
parameter_list|,
specifier|const
name|uchar
modifier|*
name|maskBits
parameter_list|)
block|{
name|QPixmap
name|rawImage
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|QBitmap
operator|::
name|fromData
argument_list|(
name|QSize
argument_list|(
name|bitmapSize
argument_list|,
name|bitmapSize
argument_list|)
argument_list|,
name|bits
argument_list|)
operator|.
name|toImage
argument_list|()
argument_list|)
decl_stmt|;
name|rawImage
operator|.
name|setMask
argument_list|(
name|QBitmap
operator|::
name|fromData
argument_list|(
name|QSize
argument_list|(
name|bitmapSize
argument_list|,
name|bitmapSize
argument_list|)
argument_list|,
name|maskBits
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|factor
init|=
name|qreal
argument_list|(
name|systemCursorSize
operator|.
name|width
argument_list|()
argument_list|)
operator|/
name|qreal
argument_list|(
name|bitmapTargetCursorSize
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
comment|// Scale images if the cursor size is significantly different, starting with 150% where the system cursor
comment|// size is 48.
if|if
condition|(
name|qAbs
argument_list|(
name|factor
operator|-
literal|1.0
argument_list|)
operator|>
literal|0.4
condition|)
block|{
specifier|const
name|QTransform
name|transform
init|=
name|QTransform
operator|::
name|fromScale
argument_list|(
name|factor
argument_list|,
name|factor
argument_list|)
decl_stmt|;
name|rawImage
operator|=
name|rawImage
operator|.
name|transformed
argument_list|(
name|transform
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QPoint
name|hotSpot
argument_list|(
name|rawImage
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|rawImage
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
return|return
name|QWindowsCursor
operator|::
name|PixmapCursor
argument_list|(
name|rawImage
argument_list|,
name|hotSpot
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|customCursor
name|QWindowsCursor
operator|::
name|PixmapCursor
name|QWindowsCursor
operator|::
name|customCursor
parameter_list|(
name|Qt
operator|::
name|CursorShape
name|cursorShape
parameter_list|,
specifier|const
name|QPlatformScreen
modifier|*
name|screen
parameter_list|)
block|{
comment|// Non-standard Windows cursors are created from bitmaps
specifier|static
specifier|const
name|uchar
name|vsplit_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|vsplitm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|hsplit_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|hsplitm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe2
block|,
literal|0x47
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe2
block|,
literal|0x47
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|openhand_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x01
block|,
literal|0x58
block|,
literal|0x0e
block|,
literal|0x64
block|,
literal|0x12
block|,
literal|0x64
block|,
literal|0x52
block|,
literal|0x48
block|,
literal|0xb2
block|,
literal|0x48
block|,
literal|0x92
block|,
literal|0x16
block|,
literal|0x90
block|,
literal|0x19
block|,
literal|0x80
block|,
literal|0x11
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|openhandm_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x01
block|,
literal|0xd8
block|,
literal|0x0f
block|,
literal|0xfc
block|,
literal|0x1f
block|,
literal|0xfc
block|,
literal|0x5f
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0xf6
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|closedhand_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xb0
block|,
literal|0x0d
block|,
literal|0x48
block|,
literal|0x32
block|,
literal|0x08
block|,
literal|0x50
block|,
literal|0x10
block|,
literal|0x40
block|,
literal|0x18
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|closedhandm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xb0
block|,
literal|0x0d
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0xf0
block|,
literal|0x7f
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|moveDragCursorXpmC
index|[]
init|=
block|{
literal|"11 20 3 1"
block|,
literal|".        c None"
block|,
literal|"a        c #FFFFFF"
block|,
literal|"X        c #000000"
block|,
comment|// X11 cursor is traditionally black
literal|"aa........."
block|,
literal|"aXa........"
block|,
literal|"aXXa......."
block|,
literal|"aXXXa......"
block|,
literal|"aXXXXa....."
block|,
literal|"aXXXXXa...."
block|,
literal|"aXXXXXXa..."
block|,
literal|"aXXXXXXXa.."
block|,
literal|"aXXXXXXXXa."
block|,
literal|"aXXXXXXXXXa"
block|,
literal|"aXXXXXXaaaa"
block|,
literal|"aXXXaXXa..."
block|,
literal|"aXXaaXXa..."
block|,
literal|"aXa..aXXa.."
block|,
literal|"aa...aXXa.."
block|,
literal|"a.....aXXa."
block|,
literal|"......aXXa."
block|,
literal|".......aXXa"
block|,
literal|".......aXXa"
block|,
literal|"........aa."
block|}
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|copyDragCursorXpmC
index|[]
init|=
block|{
literal|"24 30 3 1"
block|,
literal|".        c None"
block|,
literal|"a        c #000000"
block|,
literal|"X        c #FFFFFF"
block|,
literal|"XX......................"
block|,
literal|"XaX....................."
block|,
literal|"XaaX...................."
block|,
literal|"XaaaX..................."
block|,
literal|"XaaaaX.................."
block|,
literal|"XaaaaaX................."
block|,
literal|"XaaaaaaX................"
block|,
literal|"XaaaaaaaX..............."
block|,
literal|"XaaaaaaaaX.............."
block|,
literal|"XaaaaaaaaaX............."
block|,
literal|"XaaaaaaXXXX............."
block|,
literal|"XaaaXaaX................"
block|,
literal|"XaaXXaaX................"
block|,
literal|"XaX..XaaX..............."
block|,
literal|"XX...XaaX..............."
block|,
literal|"X.....XaaX.............."
block|,
literal|"......XaaX.............."
block|,
literal|".......XaaX............."
block|,
literal|".......XaaX............."
block|,
literal|"........XX...aaaaaaaaaaa"
block|,
literal|".............aXXXXXXXXXa"
block|,
literal|".............aXXXXXXXXXa"
block|,
literal|".............aXXXXaXXXXa"
block|,
literal|".............aXXXXaXXXXa"
block|,
literal|".............aXXaaaaaXXa"
block|,
literal|".............aXXXXaXXXXa"
block|,
literal|".............aXXXXaXXXXa"
block|,
literal|".............aXXXXXXXXXa"
block|,
literal|".............aXXXXXXXXXa"
block|,
literal|".............aaaaaaaaaaa"
block|}
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|linkDragCursorXpmC
index|[]
init|=
block|{
literal|"24 30 3 1"
block|,
literal|".        c None"
block|,
literal|"a        c #000000"
block|,
literal|"X        c #FFFFFF"
block|,
literal|"XX......................"
block|,
literal|"XaX....................."
block|,
literal|"XaaX...................."
block|,
literal|"XaaaX..................."
block|,
literal|"XaaaaX.................."
block|,
literal|"XaaaaaX................."
block|,
literal|"XaaaaaaX................"
block|,
literal|"XaaaaaaaX..............."
block|,
literal|"XaaaaaaaaX.............."
block|,
literal|"XaaaaaaaaaX............."
block|,
literal|"XaaaaaaXXXX............."
block|,
literal|"XaaaXaaX................"
block|,
literal|"XaaXXaaX................"
block|,
literal|"XaX..XaaX..............."
block|,
literal|"XX...XaaX..............."
block|,
literal|"X.....XaaX.............."
block|,
literal|"......XaaX.............."
block|,
literal|".......XaaX............."
block|,
literal|".......XaaX............."
block|,
literal|"........XX...aaaaaaaaaaa"
block|,
literal|".............aXXXXXXXXXa"
block|,
literal|".............aXXXaaaaXXa"
block|,
literal|".............aXXXXaaaXXa"
block|,
literal|".............aXXXaaaaXXa"
block|,
literal|".............aXXaaaXaXXa"
block|,
literal|".............aXXaaXXXXXa"
block|,
literal|".............aXXaXXXXXXa"
block|,
literal|".............aXXXaXXXXXa"
block|,
literal|".............aXXXXXXXXXa"
block|,
literal|".............aaaaaaaaaaa"
block|}
decl_stmt|;
switch|switch
condition|(
name|cursorShape
condition|)
block|{
case|case
name|Qt
operator|::
name|SplitVCursor
case|:
return|return
name|createPixmapCursorFromData
argument_list|(
name|systemCursorSize
argument_list|(
name|screen
argument_list|)
argument_list|,
name|standardCursorSize
argument_list|()
argument_list|,
literal|32
argument_list|,
name|vsplit_bits
argument_list|,
name|vsplitm_bits
argument_list|)
return|;
case|case
name|Qt
operator|::
name|SplitHCursor
case|:
return|return
name|createPixmapCursorFromData
argument_list|(
name|systemCursorSize
argument_list|(
name|screen
argument_list|)
argument_list|,
name|standardCursorSize
argument_list|()
argument_list|,
literal|32
argument_list|,
name|hsplit_bits
argument_list|,
name|hsplitm_bits
argument_list|)
return|;
case|case
name|Qt
operator|::
name|OpenHandCursor
case|:
return|return
name|createPixmapCursorFromData
argument_list|(
name|systemCursorSize
argument_list|(
name|screen
argument_list|)
argument_list|,
name|standardCursorSize
argument_list|()
argument_list|,
literal|16
argument_list|,
name|openhand_bits
argument_list|,
name|openhandm_bits
argument_list|)
return|;
case|case
name|Qt
operator|::
name|ClosedHandCursor
case|:
return|return
name|createPixmapCursorFromData
argument_list|(
name|systemCursorSize
argument_list|(
name|screen
argument_list|)
argument_list|,
name|standardCursorSize
argument_list|()
argument_list|,
literal|16
argument_list|,
name|closedhand_bits
argument_list|,
name|closedhandm_bits
argument_list|)
return|;
case|case
name|Qt
operator|::
name|DragCopyCursor
case|:
return|return
name|QWindowsCursor
operator|::
name|PixmapCursor
argument_list|(
name|QPixmap
argument_list|(
name|copyDragCursorXpmC
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|Qt
operator|::
name|DragMoveCursor
case|:
return|return
name|QWindowsCursor
operator|::
name|PixmapCursor
argument_list|(
name|QPixmap
argument_list|(
name|moveDragCursorXpmC
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|Qt
operator|::
name|DragLinkCursor
case|:
return|return
name|QWindowsCursor
operator|::
name|PixmapCursor
argument_list|(
name|QPixmap
argument_list|(
name|linkDragCursorXpmC
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
return|return
name|QWindowsCursor
operator|::
name|PixmapCursor
argument_list|()
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// Q_OS_WINCE || QT_NO_IMAGEFORMAT_PNG
end_comment
begin_struct
DECL|struct|QWindowsCustomPngCursor
struct|struct
name|QWindowsCustomPngCursor
block|{
DECL|member|shape
name|Qt
operator|::
name|CursorShape
name|shape
decl_stmt|;
DECL|member|size
name|int
name|size
decl_stmt|;
DECL|member|fileName
specifier|const
name|char
modifier|*
name|fileName
decl_stmt|;
DECL|member|hotSpotX
name|int
name|hotSpotX
decl_stmt|;
DECL|member|hotSpotY
name|int
name|hotSpotY
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|customCursor
name|QWindowsCursor
operator|::
name|PixmapCursor
name|QWindowsCursor
operator|::
name|customCursor
parameter_list|(
name|Qt
operator|::
name|CursorShape
name|cursorShape
parameter_list|,
specifier|const
name|QPlatformScreen
modifier|*
name|screen
parameter_list|)
block|{
specifier|static
specifier|const
name|QWindowsCustomPngCursor
name|pngCursors
index|[]
init|=
block|{
block|{
name|Qt
operator|::
name|SplitVCursor
block|,
literal|32
block|,
literal|"splitvcursor_32.png"
block|,
literal|11
block|,
literal|11
block|}
block|,
block|{
name|Qt
operator|::
name|SplitVCursor
block|,
literal|48
block|,
literal|"splitvcursor_48.png"
block|,
literal|16
block|,
literal|17
block|}
block|,
block|{
name|Qt
operator|::
name|SplitVCursor
block|,
literal|64
block|,
literal|"splitvcursor_64.png"
block|,
literal|22
block|,
literal|22
block|}
block|,
block|{
name|Qt
operator|::
name|SplitHCursor
block|,
literal|32
block|,
literal|"splithcursor_32.png"
block|,
literal|11
block|,
literal|11
block|}
block|,
block|{
name|Qt
operator|::
name|SplitHCursor
block|,
literal|48
block|,
literal|"splithcursor_48.png"
block|,
literal|16
block|,
literal|17
block|}
block|,
block|{
name|Qt
operator|::
name|SplitHCursor
block|,
literal|64
block|,
literal|"splithcursor_64.png"
block|,
literal|22
block|,
literal|22
block|}
block|,
block|{
name|Qt
operator|::
name|OpenHandCursor
block|,
literal|32
block|,
literal|"openhandcursor_32.png"
block|,
literal|10
block|,
literal|12
block|}
block|,
block|{
name|Qt
operator|::
name|OpenHandCursor
block|,
literal|48
block|,
literal|"openhandcursor_48.png"
block|,
literal|15
block|,
literal|16
block|}
block|,
block|{
name|Qt
operator|::
name|OpenHandCursor
block|,
literal|64
block|,
literal|"openhandcursor_64.png"
block|,
literal|20
block|,
literal|24
block|}
block|,
block|{
name|Qt
operator|::
name|ClosedHandCursor
block|,
literal|32
block|,
literal|"closedhandcursor_32.png"
block|,
literal|10
block|,
literal|12
block|}
block|,
block|{
name|Qt
operator|::
name|ClosedHandCursor
block|,
literal|48
block|,
literal|"closedhandcursor_48.png"
block|,
literal|15
block|,
literal|16
block|}
block|,
block|{
name|Qt
operator|::
name|ClosedHandCursor
block|,
literal|64
block|,
literal|"closedhandcursor_64.png"
block|,
literal|20
block|,
literal|24
block|}
block|,
block|{
name|Qt
operator|::
name|DragCopyCursor
block|,
literal|32
block|,
literal|"dragcopycursor_32.png"
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
name|Qt
operator|::
name|DragCopyCursor
block|,
literal|48
block|,
literal|"dragcopycursor_48.png"
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
name|Qt
operator|::
name|DragCopyCursor
block|,
literal|64
block|,
literal|"dragcopycursor_64.png"
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
name|Qt
operator|::
name|DragMoveCursor
block|,
literal|32
block|,
literal|"dragmovecursor_32.png"
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
name|Qt
operator|::
name|DragMoveCursor
block|,
literal|48
block|,
literal|"dragmovecursor_48.png"
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
name|Qt
operator|::
name|DragMoveCursor
block|,
literal|64
block|,
literal|"dragmovecursor_64.png"
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
name|Qt
operator|::
name|DragLinkCursor
block|,
literal|32
block|,
literal|"draglinkcursor_32.png"
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
name|Qt
operator|::
name|DragLinkCursor
block|,
literal|48
block|,
literal|"draglinkcursor_48.png"
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
name|Qt
operator|::
name|DragLinkCursor
block|,
literal|64
block|,
literal|"draglinkcursor_64.png"
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
specifier|const
name|QSize
name|cursorSize
init|=
name|systemCursorSize
argument_list|(
name|screen
argument_list|)
decl_stmt|;
specifier|const
name|QWindowsCustomPngCursor
modifier|*
name|sEnd
init|=
name|pngCursors
operator|+
sizeof|sizeof
argument_list|(
name|pngCursors
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|pngCursors
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|const
name|QWindowsCustomPngCursor
modifier|*
name|bestFit
init|=
literal|0
decl_stmt|;
name|int
name|sizeDelta
init|=
name|INT_MAX
decl_stmt|;
for|for
control|(
specifier|const
name|QWindowsCustomPngCursor
modifier|*
name|s
init|=
name|pngCursors
init|;
name|s
operator|<
name|sEnd
condition|;
operator|++
name|s
control|)
block|{
if|if
condition|(
name|s
operator|->
name|shape
operator|!=
name|cursorShape
condition|)
continue|continue;
specifier|const
name|int
name|currentSizeDelta
init|=
name|qMax
argument_list|(
name|s
operator|->
name|size
argument_list|,
name|cursorSize
operator|.
name|width
argument_list|()
argument_list|)
operator|-
name|qMin
argument_list|(
name|s
operator|->
name|size
argument_list|,
name|cursorSize
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSizeDelta
operator|<
name|sizeDelta
condition|)
block|{
name|bestFit
operator|=
name|s
expr_stmt|;
if|if
condition|(
name|currentSizeDelta
operator|==
literal|0
condition|)
break|break;
comment|// Perfect match found
name|sizeDelta
operator|=
name|currentSizeDelta
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|bestFit
condition|)
return|return
name|PixmapCursor
argument_list|()
return|;
specifier|const
name|QPixmap
name|rawImage
argument_list|(
name|QStringLiteral
argument_list|(
literal|":/qt-project.org/windows/cursors/images/"
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
name|bestFit
operator|->
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|PixmapCursor
argument_list|(
name|rawImage
argument_list|,
name|QPoint
argument_list|(
name|bestFit
operator|->
name|hotSpotX
argument_list|,
name|bestFit
operator|->
name|hotSpotY
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WINCE || QT_NO_IMAGEFORMAT_PNG
end_comment
begin_struct
DECL|struct|QWindowsStandardCursorMapping
struct|struct
name|QWindowsStandardCursorMapping
block|{
DECL|member|shape
name|Qt
operator|::
name|CursorShape
name|shape
decl_stmt|;
DECL|member|resource
name|LPCWSTR
name|resource
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|createCursorFromShape
name|HCURSOR
name|QWindowsCursor
operator|::
name|createCursorFromShape
parameter_list|(
name|Qt
operator|::
name|CursorShape
name|cursorShape
parameter_list|,
specifier|const
name|QPlatformScreen
modifier|*
name|screen
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|cursorShape
operator|!=
name|Qt
operator|::
name|BitmapCursor
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|QWindowsStandardCursorMapping
name|standardCursors
index|[]
init|=
block|{
block|{
name|Qt
operator|::
name|ArrowCursor
block|,
name|IDC_ARROW
block|}
block|,
block|{
name|Qt
operator|::
name|UpArrowCursor
block|,
name|IDC_UPARROW
block|}
block|,
block|{
name|Qt
operator|::
name|CrossCursor
block|,
name|IDC_CROSS
block|}
block|,
block|{
name|Qt
operator|::
name|WaitCursor
block|,
name|IDC_WAIT
block|}
block|,
block|{
name|Qt
operator|::
name|IBeamCursor
block|,
name|IDC_IBEAM
block|}
block|,
block|{
name|Qt
operator|::
name|SizeVerCursor
block|,
name|IDC_SIZENS
block|}
block|,
block|{
name|Qt
operator|::
name|SizeHorCursor
block|,
name|IDC_SIZEWE
block|}
block|,
block|{
name|Qt
operator|::
name|SizeBDiagCursor
block|,
name|IDC_SIZENESW
block|}
block|,
block|{
name|Qt
operator|::
name|SizeFDiagCursor
block|,
name|IDC_SIZENWSE
block|}
block|,
block|{
name|Qt
operator|::
name|SizeAllCursor
block|,
name|IDC_SIZEALL
block|}
block|,
block|{
name|Qt
operator|::
name|ForbiddenCursor
block|,
name|IDC_NO
block|}
block|,
block|{
name|Qt
operator|::
name|WhatsThisCursor
block|,
name|IDC_HELP
block|}
block|,
block|{
name|Qt
operator|::
name|BusyCursor
block|,
name|IDC_APPSTARTING
block|}
block|,
block|{
name|Qt
operator|::
name|PointingHandCursor
block|,
name|IDC_HAND
block|}
block|}
decl_stmt|;
switch|switch
condition|(
name|cursorShape
condition|)
block|{
case|case
name|Qt
operator|::
name|BlankCursor
case|:
block|{
name|QImage
name|blank
init|=
name|QImage
argument_list|(
name|systemCursorSize
argument_list|(
name|screen
argument_list|)
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|blank
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// ignore color table
return|return
name|createBitmapCursor
argument_list|(
name|blank
argument_list|,
name|blank
argument_list|)
return|;
block|}
case|case
name|Qt
operator|::
name|SplitVCursor
case|:
case|case
name|Qt
operator|::
name|SplitHCursor
case|:
case|case
name|Qt
operator|::
name|OpenHandCursor
case|:
case|case
name|Qt
operator|::
name|ClosedHandCursor
case|:
case|case
name|Qt
operator|::
name|DragCopyCursor
case|:
case|case
name|Qt
operator|::
name|DragMoveCursor
case|:
case|case
name|Qt
operator|::
name|DragLinkCursor
case|:
return|return
name|QWindowsCursor
operator|::
name|createPixmapCursor
argument_list|(
name|customCursor
argument_list|(
name|cursorShape
argument_list|,
name|screen
argument_list|)
argument_list|)
return|;
default|default:
break|break;
block|}
comment|// Load available standard cursors from resources
specifier|const
name|QWindowsStandardCursorMapping
modifier|*
name|sEnd
init|=
name|standardCursors
operator|+
sizeof|sizeof
argument_list|(
name|standardCursors
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|standardCursors
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
specifier|const
name|QWindowsStandardCursorMapping
modifier|*
name|s
init|=
name|standardCursors
init|;
name|s
operator|<
name|sEnd
condition|;
operator|++
name|s
control|)
block|{
if|if
condition|(
name|s
operator|->
name|shape
operator|==
name|cursorShape
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
return|return
cast|static_cast
argument_list|<
name|HCURSOR
argument_list|>
argument_list|(
name|LoadImage
argument_list|(
literal|0
argument_list|,
name|s
operator|->
name|resource
argument_list|,
name|IMAGE_CURSOR
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|LR_DEFAULTSIZE
operator||
name|LR_SHARED
argument_list|)
argument_list|)
return|;
else|#
directive|else
return|return
name|LoadCursor
argument_list|(
literal|0
argument_list|,
name|s
operator|->
name|resource
argument_list|)
return|;
endif|#
directive|endif
block|}
block|}
name|qWarning
argument_list|(
literal|"%s: Invalid cursor shape %d"
argument_list|,
name|__FUNCTION__
argument_list|,
name|cursorShape
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Return cached standard cursor resources or create new ones. */
end_comment
begin_function
DECL|function|standardWindowCursor
name|CursorHandlePtr
name|QWindowsCursor
operator|::
name|standardWindowCursor
parameter_list|(
name|Qt
operator|::
name|CursorShape
name|shape
parameter_list|)
block|{
name|StandardCursorCache
operator|::
name|Iterator
name|it
init|=
name|m_standardCursorCache
operator|.
name|find
argument_list|(
name|shape
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|m_standardCursorCache
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
specifier|const
name|HCURSOR
name|hc
init|=
name|QWindowsCursor
operator|::
name|createCursorFromShape
argument_list|(
name|shape
argument_list|,
name|m_screen
argument_list|)
condition|)
name|it
operator|=
name|m_standardCursorCache
operator|.
name|insert
argument_list|(
name|shape
argument_list|,
name|CursorHandlePtr
argument_list|(
operator|new
name|CursorHandle
argument_list|(
name|hc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|it
operator|!=
name|m_standardCursorCache
operator|.
name|end
argument_list|()
condition|?
name|it
operator|.
name|value
argument_list|()
else|:
name|CursorHandlePtr
argument_list|(
operator|new
name|CursorHandle
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Return cached pixmap cursor or create new one. */
end_comment
begin_function
DECL|function|pixmapWindowCursor
name|CursorHandlePtr
name|QWindowsCursor
operator|::
name|pixmapWindowCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
block|{
specifier|const
name|QWindowsPixmapCursorCacheKey
name|cacheKey
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|PixmapCursorCache
operator|::
name|iterator
name|it
init|=
name|m_pixmapCursorCache
operator|.
name|find
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|m_pixmapCursorCache
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|m_pixmapCursorCache
operator|.
name|size
argument_list|()
operator|>
literal|50
condition|)
block|{
comment|// Prevent the cursor cache from growing indefinitely hitting GDI resource
comment|// limits if new pixmap cursors are created repetitively by purging out
comment|// all-noncurrent pixmap cursors (QTBUG-43515)
specifier|const
name|HCURSOR
name|currentCursor
init|=
name|GetCursor
argument_list|()
decl_stmt|;
for|for
control|(
name|it
operator|=
name|m_pixmapCursorCache
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|m_pixmapCursorCache
operator|.
name|end
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|->
name|handle
argument_list|()
operator|!=
name|currentCursor
condition|)
name|it
operator|=
name|m_pixmapCursorCache
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
else|else
operator|++
name|it
expr_stmt|;
block|}
block|}
specifier|const
name|qreal
name|scaleFactor
init|=
name|QHighDpiScaling
operator|::
name|factor
argument_list|(
name|m_screen
argument_list|)
decl_stmt|;
specifier|const
name|QPixmap
name|pixmap
init|=
name|c
operator|.
name|pixmap
argument_list|()
decl_stmt|;
specifier|const
name|HCURSOR
name|hc
init|=
name|pixmap
operator|.
name|isNull
argument_list|()
condition|?
name|createBitmapCursor
argument_list|(
name|c
argument_list|,
name|scaleFactor
argument_list|)
else|:
name|QWindowsCursor
operator|::
name|createPixmapCursor
argument_list|(
name|pixmap
argument_list|,
name|c
operator|.
name|hotSpot
argument_list|()
argument_list|,
name|scaleFactor
argument_list|)
decl_stmt|;
name|it
operator|=
name|m_pixmapCursorCache
operator|.
name|insert
argument_list|(
name|cacheKey
argument_list|,
name|CursorHandlePtr
argument_list|(
operator|new
name|CursorHandle
argument_list|(
name|hc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|it
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|QWindowsCursor
name|QWindowsCursor
operator|::
name|QWindowsCursor
parameter_list|(
specifier|const
name|QPlatformScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|m_screen
argument_list|(
name|screen
argument_list|)
block|{
specifier|static
specifier|const
name|bool
name|dummy
init|=
name|initResources
argument_list|()
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|dummy
argument_list|)
block|}
end_constructor
begin_comment
comment|/*!     \brief Set a cursor on a window.      This is called frequently as the mouse moves over widgets in the window     (QLineEdits, etc). */
end_comment
begin_function
DECL|function|changeCursor
name|void
name|QWindowsCursor
operator|::
name|changeCursor
parameter_list|(
name|QCursor
modifier|*
name|cursorIn
parameter_list|,
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
operator|!
name|window
condition|)
return|return;
if|if
condition|(
operator|!
name|cursorIn
condition|)
block|{
name|QWindowsWindow
operator|::
name|baseWindowOf
argument_list|(
name|window
argument_list|)
operator|->
name|setCursor
argument_list|(
name|CursorHandlePtr
argument_list|(
operator|new
name|CursorHandle
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|CursorHandlePtr
name|wcursor
init|=
name|cursorIn
operator|->
name|shape
argument_list|()
operator|==
name|Qt
operator|::
name|BitmapCursor
condition|?
name|pixmapWindowCursor
argument_list|(
operator|*
name|cursorIn
argument_list|)
else|:
name|standardWindowCursor
argument_list|(
name|cursorIn
operator|->
name|shape
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|wcursor
operator|->
name|handle
argument_list|()
condition|)
block|{
name|QWindowsWindow
operator|::
name|baseWindowOf
argument_list|(
name|window
argument_list|)
operator|->
name|setCursor
argument_list|(
name|wcursor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"%s: Unable to obtain system cursor for %d"
argument_list|,
name|__FUNCTION__
argument_list|,
name|cursorIn
operator|->
name|shape
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mousePosition
name|QPoint
name|QWindowsCursor
operator|::
name|mousePosition
parameter_list|()
block|{
name|POINT
name|p
decl_stmt|;
name|GetCursorPos
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
return|return
name|QPoint
argument_list|(
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|cursorState
name|QWindowsCursor
operator|::
name|CursorState
name|QWindowsCursor
operator|::
name|cursorState
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
enum|enum
block|{
name|cursorShowing
init|=
literal|0x1
block|,
name|cursorSuppressed
init|=
literal|0x2
block|}
enum|;
comment|// Windows 8: CURSOR_SUPPRESSED
name|CURSORINFO
name|cursorInfo
decl_stmt|;
name|cursorInfo
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|CURSORINFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|GetCursorInfo
argument_list|(
operator|&
name|cursorInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|cursorInfo
operator|.
name|flags
operator|&
name|CursorShowing
condition|)
return|return
name|CursorShowing
return|;
if|if
condition|(
name|cursorInfo
operator|.
name|flags
operator|&
name|cursorSuppressed
condition|)
return|return
name|CursorSuppressed
return|;
block|}
endif|#
directive|endif
comment|// !Q_OS_WINCE
return|return
name|CursorHidden
return|;
block|}
end_function
begin_function
DECL|function|pos
name|QPoint
name|QWindowsCursor
operator|::
name|pos
parameter_list|()
specifier|const
block|{
return|return
name|mousePosition
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setPos
name|void
name|QWindowsCursor
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|SetCursorPos
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dragDefaultCursor
name|QPixmap
name|QWindowsCursor
operator|::
name|dragDefaultCursor
parameter_list|(
name|Qt
operator|::
name|DropAction
name|action
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|Qt
operator|::
name|CopyAction
case|:
if|if
condition|(
name|m_copyDragCursor
operator|.
name|isNull
argument_list|()
condition|)
name|m_copyDragCursor
operator|=
name|QWindowsCursor
operator|::
name|customCursor
argument_list|(
name|Qt
operator|::
name|DragCopyCursor
argument_list|,
name|m_screen
argument_list|)
operator|.
name|pixmap
expr_stmt|;
return|return
name|m_copyDragCursor
return|;
case|case
name|Qt
operator|::
name|TargetMoveAction
case|:
case|case
name|Qt
operator|::
name|MoveAction
case|:
if|if
condition|(
name|m_moveDragCursor
operator|.
name|isNull
argument_list|()
condition|)
name|m_moveDragCursor
operator|=
name|QWindowsCursor
operator|::
name|customCursor
argument_list|(
name|Qt
operator|::
name|DragMoveCursor
argument_list|,
name|m_screen
argument_list|)
operator|.
name|pixmap
expr_stmt|;
return|return
name|m_moveDragCursor
return|;
case|case
name|Qt
operator|::
name|LinkAction
case|:
if|if
condition|(
name|m_linkDragCursor
operator|.
name|isNull
argument_list|()
condition|)
name|m_linkDragCursor
operator|=
name|QWindowsCursor
operator|::
name|customCursor
argument_list|(
name|Qt
operator|::
name|DragLinkCursor
argument_list|,
name|m_screen
argument_list|)
operator|.
name|pixmap
expr_stmt|;
return|return
name|m_linkDragCursor
return|;
default|default:
break|break;
block|}
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|ignoreDragCursorXpmC
index|[]
init|=
block|{
literal|"24 30 3 1"
block|,
literal|".        c None"
block|,
literal|"a        c #000000"
block|,
literal|"X        c #FFFFFF"
block|,
literal|"aa......................"
block|,
literal|"aXa....................."
block|,
literal|"aXXa...................."
block|,
literal|"aXXXa..................."
block|,
literal|"aXXXXa.................."
block|,
literal|"aXXXXXa................."
block|,
literal|"aXXXXXXa................"
block|,
literal|"aXXXXXXXa..............."
block|,
literal|"aXXXXXXXXa.............."
block|,
literal|"aXXXXXXXXXa............."
block|,
literal|"aXXXXXXaaaa............."
block|,
literal|"aXXXaXXa................"
block|,
literal|"aXXaaXXa................"
block|,
literal|"aXa..aXXa..............."
block|,
literal|"aa...aXXa..............."
block|,
literal|"a.....aXXa.............."
block|,
literal|"......aXXa.....XXXX....."
block|,
literal|".......aXXa..XXaaaaXX..."
block|,
literal|".......aXXa.XaaaaaaaaX.."
block|,
literal|"........aa.XaaaXXXXaaaX."
block|,
literal|"...........XaaaaX..XaaX."
block|,
literal|"..........XaaXaaaX..XaaX"
block|,
literal|"..........XaaXXaaaX.XaaX"
block|,
literal|"..........XaaX.XaaaXXaaX"
block|,
literal|"..........XaaX..XaaaXaaX"
block|,
literal|"...........XaaX..XaaaaX."
block|,
literal|"...........XaaaXXXXaaaX."
block|,
literal|"............XaaaaaaaaX.."
block|,
literal|".............XXaaaaXX..."
block|,
literal|"...............XXXX....."
block|}
decl_stmt|;
if|if
condition|(
name|m_ignoreDragCursor
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|HCURSOR
name|cursor
init|=
name|LoadCursor
argument_list|(
name|NULL
argument_list|,
name|IDC_NO
argument_list|)
decl_stmt|;
name|ICONINFO
name|iconInfo
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|GetIconInfo
argument_list|(
name|cursor
argument_list|,
operator|&
name|iconInfo
argument_list|)
expr_stmt|;
name|BITMAP
name|bmColor
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|iconInfo
operator|.
name|hbmColor
operator|&&
name|GetObject
argument_list|(
name|iconInfo
operator|.
name|hbmColor
argument_list|,
sizeof|sizeof
argument_list|(
name|BITMAP
argument_list|)
argument_list|,
operator|&
name|bmColor
argument_list|)
operator|&&
name|bmColor
operator|.
name|bmWidth
operator|==
name|bmColor
operator|.
name|bmWidthBytes
operator|/
literal|4
condition|)
block|{
specifier|const
name|int
name|colorBitsLength
init|=
name|bmColor
operator|.
name|bmHeight
operator|*
name|bmColor
operator|.
name|bmWidthBytes
decl_stmt|;
name|uchar
modifier|*
name|colorBits
init|=
operator|new
name|uchar
index|[
name|colorBitsLength
index|]
decl_stmt|;
name|GetBitmapBits
argument_list|(
name|iconInfo
operator|.
name|hbmColor
argument_list|,
name|colorBitsLength
argument_list|,
name|colorBits
argument_list|)
expr_stmt|;
specifier|const
name|QImage
name|colorImage
argument_list|(
name|colorBits
argument_list|,
name|bmColor
operator|.
name|bmWidth
argument_list|,
name|bmColor
operator|.
name|bmHeight
argument_list|,
name|bmColor
operator|.
name|bmWidthBytes
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|m_ignoreDragCursor
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|colorImage
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|colorBits
expr_stmt|;
block|}
else|else
block|{
name|m_ignoreDragCursor
operator|=
name|QPixmap
argument_list|(
name|ignoreDragCursorXpmC
argument_list|)
expr_stmt|;
block|}
name|DeleteObject
argument_list|(
name|iconInfo
operator|.
name|hbmMask
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|iconInfo
operator|.
name|hbmColor
argument_list|)
expr_stmt|;
name|DestroyCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// !Q_OS_WINCE
name|m_ignoreDragCursor
operator|=
name|QPixmap
argument_list|(
name|ignoreDragCursorXpmC
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !Q_OS_WINCE
block|}
return|return
name|m_ignoreDragCursor
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsWindowCursor     \brief Per-Window cursor. Contains a QCursor and manages its associated system      cursor handle resource.      \internal     \ingroup qt-lighthouse-win     \sa QWindowsCursor */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_CURSOR
end_comment
end_unit
