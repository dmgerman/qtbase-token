begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_include
include|#
directive|include
file|"qwindowscursor.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsscreen.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QBitmap>
end_include
begin_include
include|#
directive|include
file|<QtGui/QImage>
end_include
begin_include
include|#
directive|include
file|<QtGui/QBitmap>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_comment
comment|// getPixmapCursor()
end_comment
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedArrayPointer>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_GUI_EXPORT
name|HBITMAP
name|qt_pixmapToWinHBITMAP
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|p
parameter_list|,
name|int
name|hbitmapFormat
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_GUI_EXPORT
name|HBITMAP
name|qt_createIconMask
parameter_list|(
specifier|const
name|QBitmap
modifier|&
name|bitmap
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*!     \class QWindowsCursorCacheKey     \brief Cache key for storing values in a QHash with a QCursor as key.      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsCursorCacheKey
name|QWindowsCursorCacheKey
operator|::
name|QWindowsCursorCacheKey
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
member_init_list|:
name|shape
argument_list|(
name|c
operator|.
name|shape
argument_list|()
argument_list|)
member_init_list|,
name|bitmapCacheKey
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maskCacheKey
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|shape
operator|==
name|Qt
operator|::
name|BitmapCursor
condition|)
block|{
specifier|const
name|qint64
name|pixmapCacheKey
init|=
name|c
operator|.
name|pixmap
argument_list|()
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|pixmapCacheKey
condition|)
block|{
name|bitmapCacheKey
operator|=
name|pixmapCacheKey
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|c
operator|.
name|bitmap
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|c
operator|.
name|mask
argument_list|()
argument_list|)
expr_stmt|;
name|bitmapCacheKey
operator|=
name|c
operator|.
name|bitmap
argument_list|()
operator|->
name|cacheKey
argument_list|()
expr_stmt|;
name|maskCacheKey
operator|=
name|c
operator|.
name|mask
argument_list|()
operator|->
name|cacheKey
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_constructor
begin_comment
comment|/*!     \class QWindowsCursor     \brief Platform cursor implementation      Note that whereas under X11, a cursor can be set as a property of     a window, there is only a global SetCursor() function on Windows.     Each Window sets on the global cursor on receiving a Enter-event     as do the Window manager frames (resize/move handles).      \internal     \ingroup qt-lighthouse-win     \sa QWindowsWindowCursor */
end_comment
begin_function
DECL|function|createPixmapCursor
name|HCURSOR
name|QWindowsCursor
operator|::
name|createPixmapCursor
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|hotSpot
parameter_list|)
block|{
name|HCURSOR
name|cur
init|=
literal|0
decl_stmt|;
name|QBitmap
name|mask
init|=
name|pixmap
operator|.
name|mask
argument_list|()
decl_stmt|;
if|if
condition|(
name|mask
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|mask
operator|=
name|QBitmap
argument_list|(
name|pixmap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mask
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
block|}
name|HBITMAP
name|ic
init|=
name|qt_pixmapToWinHBITMAP
argument_list|(
name|pixmap
argument_list|,
comment|/* HBitmapAlpha */
literal|2
argument_list|)
decl_stmt|;
specifier|const
name|HBITMAP
name|im
init|=
name|qt_createIconMask
argument_list|(
name|mask
argument_list|)
decl_stmt|;
name|ICONINFO
name|ii
decl_stmt|;
name|ii
operator|.
name|fIcon
operator|=
literal|0
expr_stmt|;
name|ii
operator|.
name|xHotspot
operator|=
name|hotSpot
operator|.
name|x
argument_list|()
expr_stmt|;
name|ii
operator|.
name|yHotspot
operator|=
name|hotSpot
operator|.
name|y
argument_list|()
expr_stmt|;
name|ii
operator|.
name|hbmMask
operator|=
name|im
expr_stmt|;
name|ii
operator|.
name|hbmColor
operator|=
name|ic
expr_stmt|;
name|cur
operator|=
name|CreateIconIndirect
argument_list|(
operator|&
name|ii
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|im
argument_list|)
expr_stmt|;
return|return
name|cur
return|;
block|}
end_function
begin_comment
comment|// Create a cursor from image and mask of the format QImage::Format_Mono.
end_comment
begin_function
DECL|function|createBitmapCursor
specifier|static
name|HCURSOR
name|createBitmapCursor
parameter_list|(
specifier|const
name|QImage
modifier|&
name|bbits
parameter_list|,
specifier|const
name|QImage
modifier|&
name|mbits
parameter_list|,
name|QPoint
name|hotSpot
init|=
name|QPoint
argument_list|()
parameter_list|,
name|bool
name|invb
init|=
literal|false
parameter_list|,
name|bool
name|invm
init|=
literal|false
parameter_list|)
block|{
specifier|const
name|int
name|width
init|=
name|bbits
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|bbits
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|hotSpot
operator|.
name|isNull
argument_list|()
condition|)
name|hotSpot
operator|=
name|QPoint
argument_list|(
name|width
operator|/
literal|2
argument_list|,
name|height
operator|/
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|int
name|n
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|width
operator|/
literal|8
argument_list|)
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QScopedArrayPointer
argument_list|<
name|uchar
argument_list|>
name|xBits
argument_list|(
operator|new
name|uchar
index|[
name|height
operator|*
name|n
index|]
argument_list|)
decl_stmt|;
name|QScopedArrayPointer
argument_list|<
name|uchar
argument_list|>
name|xMask
argument_list|(
operator|new
name|uchar
index|[
name|height
operator|*
name|n
index|]
argument_list|)
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uchar
modifier|*
name|bits
init|=
name|bbits
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|mask
init|=
name|mbits
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
operator|++
name|j
control|)
block|{
name|uchar
name|b
init|=
name|bits
index|[
name|j
index|]
decl_stmt|;
name|uchar
name|m
init|=
name|mask
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|invb
condition|)
name|b
operator|^=
literal|0xff
expr_stmt|;
if|if
condition|(
name|invm
condition|)
name|m
operator|^=
literal|0xff
expr_stmt|;
name|xBits
index|[
name|x
index|]
operator|=
operator|~
name|m
expr_stmt|;
name|xMask
index|[
name|x
index|]
operator|=
name|b
operator|^
name|m
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
block|}
return|return
name|CreateCursor
argument_list|(
name|GetModuleHandle
argument_list|(
literal|0
argument_list|)
argument_list|,
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|,
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|xBits
operator|.
name|data
argument_list|()
argument_list|,
name|xMask
operator|.
name|data
argument_list|()
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|GWES_ICONCURS
argument_list|)
comment|// Q_OS_WINCE
comment|// Windows CE only supports fixed cursor size.
name|int
name|sysW
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CXCURSOR
argument_list|)
decl_stmt|;
name|int
name|sysH
init|=
name|GetSystemMetrics
argument_list|(
name|SM_CYCURSOR
argument_list|)
decl_stmt|;
name|int
name|sysN
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|sysW
operator|/
literal|8
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|xBits
init|=
operator|new
name|uchar
index|[
name|sysH
operator|*
name|sysN
index|]
decl_stmt|;
name|uchar
modifier|*
name|xMask
init|=
operator|new
name|uchar
index|[
name|sysH
operator|*
name|sysN
index|]
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sysH
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|>=
name|height
condition|)
block|{
name|memset
argument_list|(
operator|&
name|xBits
index|[
name|x
index|]
argument_list|,
literal|255
argument_list|,
name|sysN
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|xMask
index|[
name|x
index|]
argument_list|,
literal|0
argument_list|,
name|sysN
argument_list|)
expr_stmt|;
name|x
operator|+=
name|sysN
expr_stmt|;
block|}
else|else
block|{
name|int
name|fillWidth
init|=
name|n
operator|>
name|sysN
condition|?
name|sysN
else|:
name|n
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|bits
init|=
name|bbits
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|mask
init|=
name|mbits
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fillWidth
condition|;
operator|++
name|j
control|)
block|{
name|uchar
name|b
init|=
name|bits
index|[
name|j
index|]
decl_stmt|;
name|uchar
name|m
init|=
name|mask
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|invb
condition|)
name|b
operator|^=
literal|0xFF
expr_stmt|;
if|if
condition|(
name|invm
condition|)
name|m
operator|^=
literal|0xFF
expr_stmt|;
name|xBits
index|[
name|x
index|]
operator|=
operator|~
name|m
expr_stmt|;
name|xMask
index|[
name|x
index|]
operator|=
name|b
operator|^
name|m
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|fillWidth
init|;
name|j
operator|<
name|sysN
condition|;
operator|++
name|j
control|)
block|{
name|xBits
index|[
name|x
index|]
operator|=
literal|255
expr_stmt|;
name|xMask
index|[
name|x
index|]
operator|=
literal|0
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
block|}
block|}
name|HCURSOR
name|hcurs
init|=
name|CreateCursor
argument_list|(
name|qWinAppInst
argument_list|()
argument_list|,
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|,
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|,
name|sysW
argument_list|,
name|sysH
argument_list|,
name|xBits
argument_list|,
name|xMask
argument_list|)
decl_stmt|;
operator|delete
index|[]
name|xBits
expr_stmt|;
operator|delete
index|[]
name|xMask
expr_stmt|;
return|return
name|hcurs
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|invm
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|invb
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|mbits
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|createBitmapCursorFromData
specifier|static
name|HCURSOR
name|createBitmapCursorFromData
parameter_list|(
name|int
name|size
parameter_list|,
specifier|const
name|uchar
modifier|*
name|bits
parameter_list|,
specifier|const
name|uchar
modifier|*
name|maskBits
parameter_list|)
block|{
specifier|const
name|QImage
name|rawImage
init|=
name|QBitmap
operator|::
name|fromData
argument_list|(
name|QSize
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
argument_list|,
name|bits
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
specifier|const
name|QImage
name|rawMaskImage
init|=
name|QBitmap
operator|::
name|fromData
argument_list|(
name|QSize
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
argument_list|,
name|maskBits
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
return|return
name|createBitmapCursor
argument_list|(
name|rawImage
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
argument_list|,
name|rawMaskImage
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_struct
DECL|struct|QWindowsStandardCursorMapping
struct|struct
name|QWindowsStandardCursorMapping
block|{
DECL|member|shape
name|Qt
operator|::
name|CursorShape
name|shape
decl_stmt|;
DECL|member|resource
name|LPCWSTR
name|resource
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|createSystemCursor
name|HCURSOR
name|QWindowsCursor
operator|::
name|createSystemCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
block|{
specifier|static
specifier|const
name|QWindowsStandardCursorMapping
name|standardCursors
index|[]
init|=
block|{
block|{
name|Qt
operator|::
name|ArrowCursor
block|,
name|IDC_ARROW
block|}
block|,
block|{
name|Qt
operator|::
name|UpArrowCursor
block|,
name|IDC_UPARROW
block|}
block|,
block|{
name|Qt
operator|::
name|CrossCursor
block|,
name|IDC_CROSS
block|}
block|,
block|{
name|Qt
operator|::
name|WaitCursor
block|,
name|IDC_WAIT
block|}
block|,
block|{
name|Qt
operator|::
name|IBeamCursor
block|,
name|IDC_IBEAM
block|}
block|,
block|{
name|Qt
operator|::
name|SizeVerCursor
block|,
name|IDC_SIZENS
block|}
block|,
block|{
name|Qt
operator|::
name|SizeHorCursor
block|,
name|IDC_SIZEWE
block|}
block|,
block|{
name|Qt
operator|::
name|SizeBDiagCursor
block|,
name|IDC_SIZENESW
block|}
block|,
block|{
name|Qt
operator|::
name|SizeFDiagCursor
block|,
name|IDC_SIZENWSE
block|}
block|,
block|{
name|Qt
operator|::
name|SizeAllCursor
block|,
name|IDC_SIZEALL
block|}
block|,
block|{
name|Qt
operator|::
name|ForbiddenCursor
block|,
name|IDC_NO
block|}
block|,
block|{
name|Qt
operator|::
name|WhatsThisCursor
block|,
name|IDC_HELP
block|}
block|,
block|{
name|Qt
operator|::
name|BusyCursor
block|,
name|IDC_APPSTARTING
block|}
block|,
block|{
name|Qt
operator|::
name|PointingHandCursor
block|,
name|IDC_HAND
block|}
block|}
decl_stmt|;
comment|// Non-standard Windows cursors are created from bitmaps
specifier|static
specifier|const
name|uchar
name|vsplit_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|vsplitm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|hsplit_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|hsplitm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe2
block|,
literal|0x47
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe2
block|,
literal|0x47
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|openhand_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x01
block|,
literal|0x58
block|,
literal|0x0e
block|,
literal|0x64
block|,
literal|0x12
block|,
literal|0x64
block|,
literal|0x52
block|,
literal|0x48
block|,
literal|0xb2
block|,
literal|0x48
block|,
literal|0x92
block|,
literal|0x16
block|,
literal|0x90
block|,
literal|0x19
block|,
literal|0x80
block|,
literal|0x11
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|openhandm_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x01
block|,
literal|0xd8
block|,
literal|0x0f
block|,
literal|0xfc
block|,
literal|0x1f
block|,
literal|0xfc
block|,
literal|0x5f
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0xf6
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|closedhand_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xb0
block|,
literal|0x0d
block|,
literal|0x48
block|,
literal|0x32
block|,
literal|0x08
block|,
literal|0x50
block|,
literal|0x10
block|,
literal|0x40
block|,
literal|0x18
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|static
specifier|const
name|uchar
name|closedhandm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xb0
block|,
literal|0x0d
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0xf0
block|,
literal|0x7f
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
specifier|const
name|Qt
operator|::
name|CursorShape
name|cursorShape
init|=
name|c
operator|.
name|shape
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|cursorShape
condition|)
block|{
case|case
name|Qt
operator|::
name|BitmapCursor
case|:
block|{
specifier|const
name|QPixmap
name|pixmap
init|=
name|c
operator|.
name|pixmap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QWindowsCursor
operator|::
name|createPixmapCursor
argument_list|(
name|pixmap
argument_list|,
name|c
operator|.
name|hotSpot
argument_list|()
argument_list|)
return|;
specifier|const
name|QImage
name|bbits
init|=
name|c
operator|.
name|bitmap
argument_list|()
operator|->
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
specifier|const
name|QImage
name|mbits
init|=
name|c
operator|.
name|mask
argument_list|()
operator|->
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|invb
init|=
name|bbits
operator|.
name|colorCount
argument_list|()
operator|>
literal|1
operator|&&
name|qGray
argument_list|(
name|bbits
operator|.
name|color
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|<
name|qGray
argument_list|(
name|bbits
operator|.
name|color
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|invm
init|=
name|mbits
operator|.
name|colorCount
argument_list|()
operator|>
literal|1
operator|&&
name|qGray
argument_list|(
name|mbits
operator|.
name|color
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|<
name|qGray
argument_list|(
name|mbits
operator|.
name|color
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|createBitmapCursor
argument_list|(
name|bbits
argument_list|,
name|mbits
argument_list|,
name|c
operator|.
name|hotSpot
argument_list|()
argument_list|,
name|invb
argument_list|,
name|invm
argument_list|)
return|;
block|}
case|case
name|Qt
operator|::
name|BlankCursor
case|:
block|{
name|QImage
name|blank
init|=
name|QImage
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|blank
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// ignore color table
return|return
name|createBitmapCursor
argument_list|(
name|blank
argument_list|,
name|blank
argument_list|)
return|;
block|}
case|case
name|Qt
operator|::
name|SplitVCursor
case|:
return|return
name|createBitmapCursorFromData
argument_list|(
literal|32
argument_list|,
name|vsplit_bits
argument_list|,
name|vsplitm_bits
argument_list|)
return|;
case|case
name|Qt
operator|::
name|SplitHCursor
case|:
return|return
name|createBitmapCursorFromData
argument_list|(
literal|32
argument_list|,
name|hsplit_bits
argument_list|,
name|hsplitm_bits
argument_list|)
return|;
case|case
name|Qt
operator|::
name|OpenHandCursor
case|:
return|return
name|createBitmapCursorFromData
argument_list|(
literal|16
argument_list|,
name|openhand_bits
argument_list|,
name|openhandm_bits
argument_list|)
return|;
case|case
name|Qt
operator|::
name|ClosedHandCursor
case|:
return|return
name|createBitmapCursorFromData
argument_list|(
literal|16
argument_list|,
name|closedhand_bits
argument_list|,
name|closedhandm_bits
argument_list|)
return|;
case|case
name|Qt
operator|::
name|DragCopyCursor
case|:
case|case
name|Qt
operator|::
name|DragMoveCursor
case|:
case|case
name|Qt
operator|::
name|DragLinkCursor
case|:
return|return
name|createPixmapCursor
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|getPixmapCursor
argument_list|(
name|cursorShape
argument_list|)
argument_list|,
name|c
operator|.
name|hotSpot
argument_list|()
argument_list|)
return|;
default|default:
break|break;
block|}
comment|// Load available standard cursors from resources
specifier|const
name|QWindowsStandardCursorMapping
modifier|*
name|sEnd
init|=
name|standardCursors
operator|+
sizeof|sizeof
argument_list|(
name|standardCursors
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|standardCursors
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
specifier|const
name|QWindowsStandardCursorMapping
modifier|*
name|s
init|=
name|standardCursors
init|;
name|s
operator|<
name|sEnd
condition|;
operator|++
name|s
control|)
block|{
if|if
condition|(
name|s
operator|->
name|shape
operator|==
name|cursorShape
condition|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
return|return
operator|(
name|HCURSOR
operator|)
name|LoadImage
argument_list|(
literal|0
argument_list|,
name|s
operator|->
name|resource
argument_list|,
name|IMAGE_CURSOR
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|LR_DEFAULTSIZE
operator||
name|LR_SHARED
argument_list|)
return|;
else|#
directive|else
return|return
name|LoadCursor
argument_list|(
literal|0
argument_list|,
name|s
operator|->
name|resource
argument_list|)
return|;
endif|#
directive|endif
block|}
block|}
name|qWarning
argument_list|(
literal|"%s: Invalid cursor shape %d"
argument_list|,
name|__FUNCTION__
argument_list|,
name|cursorShape
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Return cached standard cursor resources or create new ones. */
end_comment
begin_function
DECL|function|standardWindowCursor
name|QWindowsWindowCursor
name|QWindowsCursor
operator|::
name|standardWindowCursor
parameter_list|(
name|Qt
operator|::
name|CursorShape
name|shape
parameter_list|)
block|{
specifier|const
name|QWindowsCursorCacheKey
name|key
argument_list|(
name|shape
argument_list|)
decl_stmt|;
name|CursorCache
operator|::
name|iterator
name|it
init|=
name|m_cursorCache
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|m_cursorCache
operator|.
name|end
argument_list|()
condition|)
name|it
operator|=
name|m_cursorCache
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|QWindowsWindowCursor
argument_list|(
name|QCursor
argument_list|(
name|shape
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|it
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Return cached pixmap cursor or create new one. */
end_comment
begin_function
DECL|function|pixmapWindowCursor
name|QWindowsWindowCursor
name|QWindowsCursor
operator|::
name|pixmapWindowCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
block|{
specifier|const
name|QWindowsCursorCacheKey
name|cacheKey
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|CursorCache
operator|::
name|iterator
name|it
init|=
name|m_cursorCache
operator|.
name|find
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|m_cursorCache
operator|.
name|end
argument_list|()
condition|)
name|it
operator|=
name|m_cursorCache
operator|.
name|insert
argument_list|(
name|cacheKey
argument_list|,
name|QWindowsWindowCursor
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|it
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Set a cursor on a window.      This is called frequently as the mouse moves over widgets in the window     (QLineEdits, etc). */
end_comment
begin_function
DECL|function|changeCursor
name|void
name|QWindowsCursor
operator|::
name|changeCursor
parameter_list|(
name|QCursor
modifier|*
name|cursorIn
parameter_list|,
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
operator|!
name|window
condition|)
return|return;
if|if
condition|(
operator|!
name|cursorIn
condition|)
block|{
name|QWindowsWindow
operator|::
name|baseWindowOf
argument_list|(
name|window
argument_list|)
operator|->
name|setCursor
argument_list|(
name|QWindowsWindowCursor
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QWindowsWindowCursor
name|wcursor
init|=
name|cursorIn
operator|->
name|shape
argument_list|()
operator|==
name|Qt
operator|::
name|BitmapCursor
condition|?
name|pixmapWindowCursor
argument_list|(
operator|*
name|cursorIn
argument_list|)
else|:
name|standardWindowCursor
argument_list|(
name|cursorIn
operator|->
name|shape
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|wcursor
operator|.
name|handle
argument_list|()
condition|)
block|{
name|QWindowsWindow
operator|::
name|baseWindowOf
argument_list|(
name|window
argument_list|)
operator|->
name|setCursor
argument_list|(
name|wcursor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"%s: Unable to obtain system cursor for %d"
argument_list|,
name|__FUNCTION__
argument_list|,
name|cursorIn
operator|->
name|shape
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mousePosition
name|QPoint
name|QWindowsCursor
operator|::
name|mousePosition
parameter_list|()
block|{
name|POINT
name|p
decl_stmt|;
name|GetCursorPos
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
return|return
name|QPoint
argument_list|(
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|cursorState
name|QWindowsCursor
operator|::
name|CursorState
name|QWindowsCursor
operator|::
name|cursorState
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
enum|enum
block|{
name|cursorShowing
init|=
literal|0x1
block|,
name|cursorSuppressed
init|=
literal|0x2
block|}
enum|;
comment|// Windows 8: CURSOR_SUPPRESSED
name|CURSORINFO
name|cursorInfo
decl_stmt|;
name|cursorInfo
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|CURSORINFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|GetCursorInfo
argument_list|(
operator|&
name|cursorInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|cursorInfo
operator|.
name|flags
operator|&
name|CursorShowing
condition|)
return|return
name|CursorShowing
return|;
if|if
condition|(
name|cursorInfo
operator|.
name|flags
operator|&
name|cursorSuppressed
condition|)
return|return
name|CursorSuppressed
return|;
block|}
endif|#
directive|endif
comment|// !Q_OS_WINCE
return|return
name|CursorHidden
return|;
block|}
end_function
begin_function
DECL|function|setPos
name|void
name|QWindowsCursor
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|SetCursorPos
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsWindowCursor     \brief Per-Window cursor. Contains a QCursor and manages its associated system      cursor handle resource.      Based on QSharedDataPointer, so that it can be passed around and     used as a property of QWindowsBaseWindow.      \internal     \ingroup qt-lighthouse-win     \sa QWindowsCursor */
end_comment
begin_class
DECL|class|QWindowsWindowCursorData
class|class
name|QWindowsWindowCursorData
super|:
specifier|public
name|QSharedData
block|{
public|public:
DECL|function|QWindowsWindowCursorData
name|QWindowsWindowCursorData
parameter_list|()
member_init_list|:
name|m_cursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
member_init_list|,
name|m_handle
argument_list|(
literal|0
argument_list|)
block|{}
specifier|explicit
name|QWindowsWindowCursorData
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
constructor_decl|;
name|~
name|QWindowsWindowCursorData
parameter_list|()
destructor_decl|;
DECL|member|m_cursor
specifier|const
name|QCursor
name|m_cursor
decl_stmt|;
DECL|member|m_handle
specifier|const
name|HCURSOR
name|m_handle
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWindowsWindowCursorData
name|QWindowsWindowCursorData
operator|::
name|QWindowsWindowCursorData
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
member_init_list|:
name|m_cursor
argument_list|(
name|c
argument_list|)
member_init_list|,
name|m_handle
argument_list|(
name|QWindowsCursor
operator|::
name|createSystemCursor
argument_list|(
name|c
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWindowsWindowCursorData
name|QWindowsWindowCursorData
operator|::
name|~
name|QWindowsWindowCursorData
parameter_list|()
block|{
if|if
condition|(
name|m_handle
condition|)
name|DestroyCursor
argument_list|(
name|m_handle
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_constructor
DECL|function|QWindowsWindowCursor
name|QWindowsWindowCursor
operator|::
name|QWindowsWindowCursor
parameter_list|()
member_init_list|:
name|m_data
argument_list|(
operator|new
name|QWindowsWindowCursorData
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QWindowsWindowCursor
name|QWindowsWindowCursor
operator|::
name|QWindowsWindowCursor
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
member_init_list|:
name|m_data
argument_list|(
operator|new
name|QWindowsWindowCursorData
argument_list|(
name|c
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWindowsWindowCursor
name|QWindowsWindowCursor
operator|::
name|~
name|QWindowsWindowCursor
parameter_list|()
block|{ }
end_destructor
begin_constructor
DECL|function|QWindowsWindowCursor
name|QWindowsWindowCursor
operator|::
name|QWindowsWindowCursor
parameter_list|(
specifier|const
name|QWindowsWindowCursor
modifier|&
name|rhs
parameter_list|)
member_init_list|:
name|m_data
argument_list|(
name|rhs
operator|.
name|m_data
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|operator =
name|QWindowsWindowCursor
modifier|&
name|QWindowsWindowCursor
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|QWindowsWindowCursor
modifier|&
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|rhs
condition|)
name|m_data
operator|.
name|operator
name|=
parameter_list|(
name|rhs
operator|.
name|m_data
parameter_list|)
function_decl|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_function
DECL|function|isNull
name|bool
name|QWindowsWindowCursor
operator|::
name|isNull
parameter_list|()
specifier|const
block|{
return|return
name|m_data
operator|->
name|m_handle
operator|==
literal|0
return|;
block|}
end_function
begin_function
DECL|function|cursor
name|QCursor
name|QWindowsWindowCursor
operator|::
name|cursor
parameter_list|()
specifier|const
block|{
return|return
name|m_data
operator|->
name|m_cursor
return|;
block|}
end_function
begin_function
DECL|function|handle
name|HCURSOR
name|QWindowsWindowCursor
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|m_data
operator|->
name|m_handle
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_CURSOR
end_comment
end_unit
