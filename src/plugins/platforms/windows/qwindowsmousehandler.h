begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWINDOWSMOUSEHANDLER_H
end_ifndef
begin_define
DECL|macro|QWINDOWSMOUSEHANDLER_H
define|#
directive|define
name|QWINDOWSMOUSEHANDLER_H
end_define
begin_include
include|#
directive|include
file|"qtwindowsglobal.h"
end_include
begin_include
include|#
directive|include
file|"qtwindows_additional.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QHash>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QWindow
name|class
name|QWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTouchDevice
name|class
name|QTouchDevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QWindowsMouseHandler
block|{
name|Q_DISABLE_COPY
argument_list|(
argument|QWindowsMouseHandler
argument_list|)
name|public
label|:
name|QWindowsMouseHandler
argument_list|()
expr_stmt|;
name|QTouchDevice
operator|*
name|touchDevice
argument_list|()
specifier|const
block|{
return|return
name|m_touchDevice
return|;
block|}
name|QTouchDevice
modifier|*
name|ensureTouchDevice
parameter_list|()
function_decl|;
name|bool
name|translateMouseEvent
argument_list|(
name|QWindow
operator|*
name|widget
argument_list|,
name|HWND
name|hwnd
argument_list|,
name|QtWindows
operator|::
name|WindowsEventType
name|t
argument_list|,
name|MSG
name|msg
argument_list|,
name|LRESULT
operator|*
name|result
argument_list|)
decl_stmt|;
name|bool
name|translateTouchEvent
argument_list|(
name|QWindow
operator|*
name|widget
argument_list|,
name|HWND
name|hwnd
argument_list|,
name|QtWindows
operator|::
name|WindowsEventType
name|t
argument_list|,
name|MSG
name|msg
argument_list|,
name|LRESULT
operator|*
name|result
argument_list|)
decl_stmt|;
name|bool
name|translateGestureEvent
argument_list|(
name|QWindow
operator|*
name|window
argument_list|,
name|HWND
name|hwnd
argument_list|,
name|QtWindows
operator|::
name|WindowsEventType
argument_list|,
name|MSG
name|msg
argument_list|,
name|LRESULT
operator|*
argument_list|)
decl_stmt|;
name|bool
name|translateScrollEvent
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|HWND
name|hwnd
parameter_list|,
name|MSG
name|msg
parameter_list|,
name|LRESULT
modifier|*
name|result
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|Qt
operator|::
name|MouseButtons
name|keyStateToMouseButtons
argument_list|(
name|int
argument_list|)
expr_stmt|;
specifier|static
specifier|inline
name|Qt
operator|::
name|KeyboardModifiers
name|keyStateToModifiers
argument_list|(
name|int
argument_list|)
expr_stmt|;
specifier|static
specifier|inline
name|int
name|mouseButtonsToKeyState
argument_list|(
name|Qt
operator|::
name|MouseButtons
argument_list|)
decl_stmt|;
specifier|static
name|Qt
operator|::
name|MouseButtons
name|queryMouseButtons
argument_list|()
expr_stmt|;
name|QWindow
operator|*
name|windowUnderMouse
argument_list|()
specifier|const
block|{
return|return
name|m_windowUnderMouse
operator|.
name|data
argument_list|()
return|;
block|}
name|void
name|clearWindowUnderMouse
parameter_list|()
block|{
name|m_windowUnderMouse
operator|=
literal|0
expr_stmt|;
block|}
name|private
label|:
specifier|inline
name|bool
name|translateMouseWheelEvent
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|HWND
name|hwnd
parameter_list|,
name|MSG
name|msg
parameter_list|,
name|LRESULT
modifier|*
name|result
parameter_list|)
function_decl|;
name|QPointer
operator|<
name|QWindow
operator|>
name|m_windowUnderMouse
expr_stmt|;
name|QPointer
operator|<
name|QWindow
operator|>
name|m_trackedWindow
expr_stmt|;
name|QHash
operator|<
name|DWORD
operator|,
name|int
operator|>
name|m_touchInputIDToTouchPointID
expr_stmt|;
name|QHash
operator|<
name|int
operator|,
name|QPointF
operator|>
name|m_lastTouchPositions
expr_stmt|;
name|QTouchDevice
modifier|*
name|m_touchDevice
decl_stmt|;
name|bool
name|m_leftButtonDown
decl_stmt|;
name|QWindow
modifier|*
name|m_previousCaptureWindow
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|//This is required to send a touch up if we don't get a second touch position any more
name|bool
name|m_had2ndTouchPoint
decl_stmt|;
endif|#
directive|endif
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|function|keyStateToMouseButtons
name|Qt
operator|::
name|MouseButtons
name|QWindowsMouseHandler
operator|::
name|keyStateToMouseButtons
argument_list|(
argument|int wParam
argument_list|)
block|{
name|Qt
operator|::
name|MouseButtons
name|mb
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
block|;
if|if
condition|(
name|wParam
operator|&
name|MK_LBUTTON
condition|)
name|mb
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|wParam
operator|&
name|MK_MBUTTON
condition|)
name|mb
operator||=
name|Qt
operator|::
name|MiddleButton
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|wParam
operator|&
name|MK_RBUTTON
condition|)
name|mb
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|wParam
operator|&
name|MK_XBUTTON1
condition|)
name|mb
operator||=
name|Qt
operator|::
name|XButton1
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|wParam
operator|&
name|MK_XBUTTON2
condition|)
name|mb
operator||=
name|Qt
operator|::
name|XButton2
expr_stmt|;
end_if
begin_return
return|return
name|mb
return|;
end_return
begin_expr_stmt
unit|}  Qt
DECL|function|keyStateToModifiers
operator|::
name|KeyboardModifiers
name|QWindowsMouseHandler
operator|::
name|keyStateToModifiers
argument_list|(
argument|int wParam
argument_list|)
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|mods
argument_list|(
name|Qt
operator|::
name|NoModifier
argument_list|)
block|;
if|if
condition|(
name|wParam
operator|&
name|MK_CONTROL
condition|)
name|mods
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|wParam
operator|&
name|MK_SHIFT
condition|)
name|mods
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|GetKeyState
argument_list|(
name|VK_MENU
argument_list|)
operator|<
literal|0
condition|)
name|mods
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
end_if
begin_return
return|return
name|mods
return|;
end_return
begin_expr_stmt
unit|}  int
DECL|function|mouseButtonsToKeyState
name|QWindowsMouseHandler
operator|::
name|mouseButtonsToKeyState
argument_list|(
argument|Qt::MouseButtons mb
argument_list|)
block|{
name|int
name|result
operator|=
literal|0
block|;
if|if
condition|(
name|mb
operator|&
name|Qt
operator|::
name|LeftButton
condition|)
name|result
operator||=
name|MK_LBUTTON
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|mb
operator|&
name|Qt
operator|::
name|MiddleButton
condition|)
name|result
operator||=
name|MK_MBUTTON
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|mb
operator|&
name|Qt
operator|::
name|RightButton
condition|)
name|result
operator||=
name|MK_RBUTTON
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|mb
operator|&
name|Qt
operator|::
name|XButton1
condition|)
name|result
operator||=
name|MK_XBUTTON1
expr_stmt|;
end_if
begin_if
if|if
condition|(
name|mb
operator|&
name|Qt
operator|::
name|XButton2
condition|)
name|result
operator||=
name|MK_XBUTTON2
expr_stmt|;
end_if
begin_return
return|return
name|result
return|;
end_return
begin_endif
unit|}  QT_END_NAMESPACE
endif|#
directive|endif
end_endif
begin_comment
comment|// QWINDOWSMOUSEHANDLER_H
end_comment
end_unit
