begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsglcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsintegration.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSysInfo>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<wingdi.h>
end_include
begin_include
include|#
directive|include
file|<GL/gl.h>
end_include
begin_comment
comment|// #define DEBUG_GL
end_comment
begin_comment
comment|// ARB extension API
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|WGL_ARB_multisample
end_ifndef
begin_define
DECL|macro|WGL_SAMPLE_BUFFERS_ARB
define|#
directive|define
name|WGL_SAMPLE_BUFFERS_ARB
value|0x2041
end_define
begin_define
DECL|macro|WGL_SAMPLES_ARB
define|#
directive|define
name|WGL_SAMPLES_ARB
value|0x2042
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|WGL_ARB_pixel_format
end_ifndef
begin_define
DECL|macro|WGL_NUMBER_PIXEL_FORMATS_ARB
define|#
directive|define
name|WGL_NUMBER_PIXEL_FORMATS_ARB
value|0x2000
end_define
begin_define
DECL|macro|WGL_DRAW_TO_WINDOW_ARB
define|#
directive|define
name|WGL_DRAW_TO_WINDOW_ARB
value|0x2001
end_define
begin_define
DECL|macro|WGL_DRAW_TO_BITMAP_ARB
define|#
directive|define
name|WGL_DRAW_TO_BITMAP_ARB
value|0x2002
end_define
begin_define
DECL|macro|WGL_ACCELERATION_ARB
define|#
directive|define
name|WGL_ACCELERATION_ARB
value|0x2003
end_define
begin_define
DECL|macro|WGL_NEED_PALETTE_ARB
define|#
directive|define
name|WGL_NEED_PALETTE_ARB
value|0x2004
end_define
begin_define
DECL|macro|WGL_NEED_SYSTEM_PALETTE_ARB
define|#
directive|define
name|WGL_NEED_SYSTEM_PALETTE_ARB
value|0x2005
end_define
begin_define
DECL|macro|WGL_SWAP_LAYER_BUFFERS_ARB
define|#
directive|define
name|WGL_SWAP_LAYER_BUFFERS_ARB
value|0x2006
end_define
begin_define
DECL|macro|WGL_SWAP_METHOD_ARB
define|#
directive|define
name|WGL_SWAP_METHOD_ARB
value|0x2007
end_define
begin_define
DECL|macro|WGL_NUMBER_OVERLAYS_ARB
define|#
directive|define
name|WGL_NUMBER_OVERLAYS_ARB
value|0x2008
end_define
begin_define
DECL|macro|WGL_NUMBER_UNDERLAYS_ARB
define|#
directive|define
name|WGL_NUMBER_UNDERLAYS_ARB
value|0x2009
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_ARB
define|#
directive|define
name|WGL_TRANSPARENT_ARB
value|0x200A
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_RED_VALUE_ARB
define|#
directive|define
name|WGL_TRANSPARENT_RED_VALUE_ARB
value|0x2037
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_GREEN_VALUE_ARB
define|#
directive|define
name|WGL_TRANSPARENT_GREEN_VALUE_ARB
value|0x2038
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_BLUE_VALUE_ARB
define|#
directive|define
name|WGL_TRANSPARENT_BLUE_VALUE_ARB
value|0x2039
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_ALPHA_VALUE_ARB
define|#
directive|define
name|WGL_TRANSPARENT_ALPHA_VALUE_ARB
value|0x203A
end_define
begin_define
DECL|macro|WGL_TRANSPARENT_INDEX_VALUE_ARB
define|#
directive|define
name|WGL_TRANSPARENT_INDEX_VALUE_ARB
value|0x203B
end_define
begin_define
DECL|macro|WGL_SHARE_DEPTH_ARB
define|#
directive|define
name|WGL_SHARE_DEPTH_ARB
value|0x200C
end_define
begin_define
DECL|macro|WGL_SHARE_STENCIL_ARB
define|#
directive|define
name|WGL_SHARE_STENCIL_ARB
value|0x200D
end_define
begin_define
DECL|macro|WGL_SHARE_ACCUM_ARB
define|#
directive|define
name|WGL_SHARE_ACCUM_ARB
value|0x200E
end_define
begin_define
DECL|macro|WGL_SUPPORT_GDI_ARB
define|#
directive|define
name|WGL_SUPPORT_GDI_ARB
value|0x200F
end_define
begin_define
DECL|macro|WGL_SUPPORT_OPENGL_ARB
define|#
directive|define
name|WGL_SUPPORT_OPENGL_ARB
value|0x2010
end_define
begin_define
DECL|macro|WGL_DOUBLE_BUFFER_ARB
define|#
directive|define
name|WGL_DOUBLE_BUFFER_ARB
value|0x2011
end_define
begin_define
DECL|macro|WGL_STEREO_ARB
define|#
directive|define
name|WGL_STEREO_ARB
value|0x2012
end_define
begin_define
DECL|macro|WGL_PIXEL_TYPE_ARB
define|#
directive|define
name|WGL_PIXEL_TYPE_ARB
value|0x2013
end_define
begin_define
DECL|macro|WGL_COLOR_BITS_ARB
define|#
directive|define
name|WGL_COLOR_BITS_ARB
value|0x2014
end_define
begin_define
DECL|macro|WGL_RED_BITS_ARB
define|#
directive|define
name|WGL_RED_BITS_ARB
value|0x2015
end_define
begin_define
DECL|macro|WGL_RED_SHIFT_ARB
define|#
directive|define
name|WGL_RED_SHIFT_ARB
value|0x2016
end_define
begin_define
DECL|macro|WGL_GREEN_BITS_ARB
define|#
directive|define
name|WGL_GREEN_BITS_ARB
value|0x2017
end_define
begin_define
DECL|macro|WGL_GREEN_SHIFT_ARB
define|#
directive|define
name|WGL_GREEN_SHIFT_ARB
value|0x2018
end_define
begin_define
DECL|macro|WGL_BLUE_BITS_ARB
define|#
directive|define
name|WGL_BLUE_BITS_ARB
value|0x2019
end_define
begin_define
DECL|macro|WGL_BLUE_SHIFT_ARB
define|#
directive|define
name|WGL_BLUE_SHIFT_ARB
value|0x201A
end_define
begin_define
DECL|macro|WGL_ALPHA_BITS_ARB
define|#
directive|define
name|WGL_ALPHA_BITS_ARB
value|0x201B
end_define
begin_define
DECL|macro|WGL_ALPHA_SHIFT_ARB
define|#
directive|define
name|WGL_ALPHA_SHIFT_ARB
value|0x201C
end_define
begin_define
DECL|macro|WGL_ACCUM_BITS_ARB
define|#
directive|define
name|WGL_ACCUM_BITS_ARB
value|0x201D
end_define
begin_define
DECL|macro|WGL_ACCUM_RED_BITS_ARB
define|#
directive|define
name|WGL_ACCUM_RED_BITS_ARB
value|0x201E
end_define
begin_define
DECL|macro|WGL_ACCUM_GREEN_BITS_ARB
define|#
directive|define
name|WGL_ACCUM_GREEN_BITS_ARB
value|0x201F
end_define
begin_define
DECL|macro|WGL_ACCUM_BLUE_BITS_ARB
define|#
directive|define
name|WGL_ACCUM_BLUE_BITS_ARB
value|0x2020
end_define
begin_define
DECL|macro|WGL_ACCUM_ALPHA_BITS_ARB
define|#
directive|define
name|WGL_ACCUM_ALPHA_BITS_ARB
value|0x2021
end_define
begin_define
DECL|macro|WGL_DEPTH_BITS_ARB
define|#
directive|define
name|WGL_DEPTH_BITS_ARB
value|0x2022
end_define
begin_define
DECL|macro|WGL_STENCIL_BITS_ARB
define|#
directive|define
name|WGL_STENCIL_BITS_ARB
value|0x2023
end_define
begin_define
DECL|macro|WGL_AUX_BUFFERS_ARB
define|#
directive|define
name|WGL_AUX_BUFFERS_ARB
value|0x2024
end_define
begin_define
DECL|macro|WGL_NO_ACCELERATION_ARB
define|#
directive|define
name|WGL_NO_ACCELERATION_ARB
value|0x2025
end_define
begin_define
DECL|macro|WGL_GENERIC_ACCELERATION_ARB
define|#
directive|define
name|WGL_GENERIC_ACCELERATION_ARB
value|0x2026
end_define
begin_define
DECL|macro|WGL_FULL_ACCELERATION_ARB
define|#
directive|define
name|WGL_FULL_ACCELERATION_ARB
value|0x2027
end_define
begin_define
DECL|macro|WGL_SWAP_EXCHANGE_ARB
define|#
directive|define
name|WGL_SWAP_EXCHANGE_ARB
value|0x2028
end_define
begin_define
DECL|macro|WGL_SWAP_COPY_ARB
define|#
directive|define
name|WGL_SWAP_COPY_ARB
value|0x2029
end_define
begin_define
DECL|macro|WGL_SWAP_UNDEFINED_ARB
define|#
directive|define
name|WGL_SWAP_UNDEFINED_ARB
value|0x202A
end_define
begin_define
DECL|macro|WGL_TYPE_RGBA_ARB
define|#
directive|define
name|WGL_TYPE_RGBA_ARB
value|0x202B
end_define
begin_define
DECL|macro|WGL_TYPE_COLORINDEX_ARB
define|#
directive|define
name|WGL_TYPE_COLORINDEX_ARB
value|0x202C
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|WGL_ARB_create_context
end_ifndef
begin_define
DECL|macro|WGL_CONTEXT_MAJOR_VERSION_ARB
define|#
directive|define
name|WGL_CONTEXT_MAJOR_VERSION_ARB
value|0x2091
end_define
begin_define
DECL|macro|WGL_CONTEXT_MINOR_VERSION_ARB
define|#
directive|define
name|WGL_CONTEXT_MINOR_VERSION_ARB
value|0x2092
end_define
begin_define
DECL|macro|WGL_CONTEXT_LAYER_PLANE_ARB
define|#
directive|define
name|WGL_CONTEXT_LAYER_PLANE_ARB
value|0x2093
end_define
begin_define
DECL|macro|WGL_CONTEXT_FLAGS_ARB
define|#
directive|define
name|WGL_CONTEXT_FLAGS_ARB
value|0x2094
end_define
begin_define
DECL|macro|WGL_CONTEXT_PROFILE_MASK_ARB
define|#
directive|define
name|WGL_CONTEXT_PROFILE_MASK_ARB
value|0x9126
end_define
begin_define
DECL|macro|WGL_CONTEXT_DEBUG_BIT_ARB
define|#
directive|define
name|WGL_CONTEXT_DEBUG_BIT_ARB
value|0x0001
end_define
begin_define
DECL|macro|WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB
define|#
directive|define
name|WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB
value|0x0002
end_define
begin_define
DECL|macro|WGL_CONTEXT_CORE_PROFILE_BIT_ARB
define|#
directive|define
name|WGL_CONTEXT_CORE_PROFILE_BIT_ARB
value|0x0001
end_define
begin_define
DECL|macro|WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB
define|#
directive|define
name|WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB
value|0x0002
end_define
begin_comment
comment|// Error codes returned by GetLastError().
end_comment
begin_define
DECL|macro|ERROR_INVALID_VERSION_ARB
define|#
directive|define
name|ERROR_INVALID_VERSION_ARB
value|0x2095
end_define
begin_define
DECL|macro|ERROR_INVALID_PROFILE_ARB
define|#
directive|define
name|ERROR_INVALID_PROFILE_ARB
value|0x2096
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_VERSION_3_2
end_ifndef
begin_define
DECL|macro|GL_CONTEXT_PROFILE_MASK
define|#
directive|define
name|GL_CONTEXT_PROFILE_MASK
value|0x9126
end_define
begin_define
DECL|macro|GL_MAJOR_VERSION
define|#
directive|define
name|GL_MAJOR_VERSION
value|0x821B
end_define
begin_define
DECL|macro|GL_MINOR_VERSION
define|#
directive|define
name|GL_MINOR_VERSION
value|0x821C
end_define
begin_define
DECL|macro|GL_NUM_EXTENSIONS
define|#
directive|define
name|GL_NUM_EXTENSIONS
value|0x821D
end_define
begin_define
DECL|macro|GL_CONTEXT_FLAGS
define|#
directive|define
name|GL_CONTEXT_FLAGS
value|0x821E
end_define
begin_define
DECL|macro|GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
define|#
directive|define
name|GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
value|0x0001
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_CONTEXT_FLAG_DEBUG_BIT
end_ifndef
begin_define
DECL|macro|GL_CONTEXT_FLAG_DEBUG_BIT
define|#
directive|define
name|GL_CONTEXT_FLAG_DEBUG_BIT
value|0x00000002
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|testFlag
specifier|template
type|<class
name|MaskType
operator|,
name|class
name|FlagType
function|>
specifier|inline
name|bool
name|testFlag
parameter_list|(
name|MaskType
name|mask
parameter_list|,
name|FlagType
name|flag
parameter_list|)
block|{
return|return
operator|(
name|mask
operator|&
name|MaskType
argument_list|(
name|flag
argument_list|)
operator|)
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|hasGLOverlay
specifier|static
specifier|inline
name|bool
name|hasGLOverlay
parameter_list|(
specifier|const
name|PIXELFORMATDESCRIPTOR
modifier|&
name|pd
parameter_list|)
block|{
return|return
operator|(
name|pd
operator|.
name|bReserved
operator|&
literal|0x0f
operator|)
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|isDirectRendering
specifier|static
specifier|inline
name|bool
name|isDirectRendering
parameter_list|(
specifier|const
name|PIXELFORMATDESCRIPTOR
modifier|&
name|pfd
parameter_list|)
block|{
return|return
operator|(
name|pfd
operator|.
name|dwFlags
operator|&
name|PFD_GENERIC_ACCELERATED
operator|)
operator|||
operator|!
operator|(
name|pfd
operator|.
name|dwFlags
operator|&
name|PFD_GENERIC_FORMAT
operator|)
return|;
block|}
end_function
begin_function
DECL|function|initPixelFormatDescriptor
specifier|static
specifier|inline
name|void
name|initPixelFormatDescriptor
parameter_list|(
name|PIXELFORMATDESCRIPTOR
modifier|*
name|d
parameter_list|)
block|{
name|memset
argument_list|(
name|d
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|nSize
operator|=
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
expr_stmt|;
name|d
operator|->
name|nVersion
operator|=
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|PIXELFORMATDESCRIPTOR
modifier|&
name|pd
parameter_list|)
block|{
name|QDebug
name|nsp
init|=
name|d
operator|.
name|nospace
argument_list|()
decl_stmt|;
name|nsp
operator|<<
literal|"PIXELFORMATDESCRIPTOR "
operator|<<
literal|"dwFlags="
operator|<<
name|hex
operator|<<
name|showbase
operator|<<
name|pd
operator|.
name|dwFlags
operator|<<
name|dec
operator|<<
name|noshowbase
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_DRAW_TO_WINDOW
condition|)
name|nsp
operator|<<
literal|" PFD_DRAW_TO_WINDOW"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_DRAW_TO_BITMAP
condition|)
name|nsp
operator|<<
literal|" PFD_DRAW_TO_BITMAP"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_SUPPORT_GDI
condition|)
name|nsp
operator|<<
literal|" PFD_SUPPORT_GDI"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_SUPPORT_OPENGL
condition|)
name|nsp
operator|<<
literal|" PFD_SUPPORT_OPENGL"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_GENERIC_ACCELERATED
condition|)
name|nsp
operator|<<
literal|" PFD_GENERIC_ACCELERATED"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_SUPPORT_DIRECTDRAW
condition|)
name|nsp
operator|<<
literal|" PFD_SUPPORT_DIRECTDRAW"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_DIRECT3D_ACCELERATED
condition|)
name|nsp
operator|<<
literal|" PFD_DIRECT3D_ACCELERATED"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_SUPPORT_COMPOSITION
condition|)
name|nsp
operator|<<
literal|" PFD_SUPPORT_COMPOSITION"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_GENERIC_FORMAT
condition|)
name|nsp
operator|<<
literal|" PFD_GENERIC_FORMAT"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_NEED_PALETTE
condition|)
name|nsp
operator|<<
literal|" PFD_NEED_PALETTE"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_NEED_SYSTEM_PALETTE
condition|)
name|nsp
operator|<<
literal|" PFD_NEED_SYSTEM_PALETTE"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_DOUBLEBUFFER
condition|)
name|nsp
operator|<<
literal|" PFD_DOUBLEBUFFER"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_STEREO
condition|)
name|nsp
operator|<<
literal|" PFD_STEREO"
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwFlags
operator|&
name|PFD_SWAP_LAYER_BUFFERS
condition|)
name|nsp
operator|<<
literal|" PFD_SWAP_LAYER_BUFFERS"
expr_stmt|;
if|if
condition|(
name|hasGLOverlay
argument_list|(
name|pd
argument_list|)
condition|)
name|nsp
operator|<<
literal|" overlay"
expr_stmt|;
name|nsp
operator|<<
literal|" iPixelType="
operator|<<
name|pd
operator|.
name|iPixelType
operator|<<
literal|" cColorBits="
operator|<<
name|pd
operator|.
name|cColorBits
operator|<<
literal|" cRedBits="
operator|<<
name|pd
operator|.
name|cRedBits
operator|<<
literal|" cRedShift="
operator|<<
name|pd
operator|.
name|cRedShift
operator|<<
literal|" cGreenBits="
operator|<<
name|pd
operator|.
name|cGreenBits
operator|<<
literal|" cGreenShift="
operator|<<
name|pd
operator|.
name|cGreenShift
operator|<<
literal|" cBlueBits="
operator|<<
name|pd
operator|.
name|cBlueBits
operator|<<
literal|" cBlueShift="
operator|<<
name|pd
operator|.
name|cBlueShift
expr_stmt|;
name|nsp
operator|<<
literal|" cDepthBits="
operator|<<
name|pd
operator|.
name|cDepthBits
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|cStencilBits
condition|)
name|nsp
operator|<<
literal|" cStencilBits="
operator|<<
name|pd
operator|.
name|cStencilBits
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|cAuxBuffers
condition|)
name|nsp
operator|<<
literal|" cAuxBuffers="
operator|<<
name|pd
operator|.
name|cAuxBuffers
expr_stmt|;
name|nsp
operator|<<
literal|" iLayerType="
operator|<<
name|pd
operator|.
name|iLayerType
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|dwVisibleMask
condition|)
name|nsp
operator|<<
literal|" dwVisibleMask="
operator|<<
name|pd
operator|.
name|dwVisibleMask
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|cAlphaBits
condition|)
name|nsp
operator|<<
literal|" cAlphaBits="
operator|<<
name|pd
operator|.
name|cAlphaBits
operator|<<
literal|" cAlphaShift="
operator|<<
name|pd
operator|.
name|cAlphaShift
expr_stmt|;
if|if
condition|(
name|pd
operator|.
name|cAccumBits
condition|)
name|nsp
operator|<<
literal|" cAccumBits="
operator|<<
name|pd
operator|.
name|cAccumBits
operator|<<
literal|" cAccumRedBits="
operator|<<
name|pd
operator|.
name|cAccumRedBits
operator|<<
literal|" cAccumGreenBits="
operator|<<
name|pd
operator|.
name|cAccumGreenBits
operator|<<
literal|" cAccumBlueBits="
operator|<<
name|pd
operator|.
name|cAccumBlueBits
operator|<<
literal|" cAccumAlphaBits="
operator|<<
name|pd
operator|.
name|cAccumAlphaBits
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_comment
comment|// Check whether an obtained PIXELFORMATDESCRIPTOR matches the request.
end_comment
begin_function
specifier|static
specifier|inline
name|bool
DECL|function|isAcceptableFormat
name|isAcceptableFormat
parameter_list|(
specifier|const
name|QWindowsOpenGLAdditionalFormat
modifier|&
name|additional
parameter_list|,
specifier|const
name|PIXELFORMATDESCRIPTOR
modifier|&
name|pfd
parameter_list|,
name|bool
name|ignoreGLSupport
init|=
literal|false
parameter_list|)
comment|// ARB format may not contain it.
block|{
specifier|const
name|bool
name|pixmapRequested
init|=
name|testFlag
argument_list|(
name|additional
operator|.
name|formatFlags
argument_list|,
name|QWindowsGLRenderToPixmap
argument_list|)
decl_stmt|;
return|return
operator|(
name|ignoreGLSupport
operator|||
name|testFlag
argument_list|(
name|pfd
operator|.
name|dwFlags
argument_list|,
name|PFD_SUPPORT_OPENGL
argument_list|)
operator|)
operator|&&
name|testFlag
argument_list|(
name|pfd
operator|.
name|dwFlags
argument_list|,
name|PFD_DRAW_TO_BITMAP
argument_list|)
operator|==
name|pixmapRequested
operator|&&
name|hasGLOverlay
argument_list|(
name|pfd
argument_list|)
operator|==
name|testFlag
argument_list|(
name|additional
operator|.
name|formatFlags
argument_list|,
name|QWindowsGLOverlay
argument_list|)
operator|&&
operator|(
operator|!
name|pixmapRequested
operator|||
name|pfd
operator|.
name|cColorBits
operator|==
name|additional
operator|.
name|pixmapDepth
operator|)
return|;
block|}
end_function
begin_function
DECL|function|describeFormats
specifier|static
name|void
name|describeFormats
parameter_list|(
name|HDC
name|hdc
parameter_list|)
block|{
specifier|const
name|int
name|pfiMax
init|=
name|DescribePixelFormat
argument_list|(
name|hdc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pfiMax
condition|;
name|i
operator|++
control|)
block|{
name|PIXELFORMATDESCRIPTOR
name|pfd
decl_stmt|;
name|initPixelFormatDescriptor
argument_list|(
operator|&
name|pfd
argument_list|)
expr_stmt|;
name|DescribePixelFormat
argument_list|(
name|hdc
argument_list|,
name|i
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|,
operator|&
name|pfd
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|)
operator|<<
literal|'#'
operator|<<
name|i
operator|<<
literal|'/'
operator|<<
name|pfiMax
operator|<<
literal|':'
operator|<<
name|pfd
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Classic GDI API
end_comment
begin_namespace
DECL|namespace|GDI
namespace|namespace
name|GDI
block|{
specifier|static
name|QSurfaceFormat
DECL|function|qSurfaceFormatFromPixelFormat
name|qSurfaceFormatFromPixelFormat
parameter_list|(
specifier|const
name|PIXELFORMATDESCRIPTOR
modifier|&
name|pfd
parameter_list|,
name|QWindowsOpenGLAdditionalFormat
modifier|*
name|additionalIn
init|=
literal|0
parameter_list|)
block|{
name|QSurfaceFormat
name|format
decl_stmt|;
name|format
operator|.
name|setRenderableType
argument_list|(
name|QSurfaceFormat
operator|::
name|OpenGL
argument_list|)
expr_stmt|;
if|if
condition|(
name|pfd
operator|.
name|dwFlags
operator|&
name|PFD_DOUBLEBUFFER
condition|)
name|format
operator|.
name|setSwapBehavior
argument_list|(
name|QSurfaceFormat
operator|::
name|DoubleBuffer
argument_list|)
expr_stmt|;
name|format
operator|.
name|setDepthBufferSize
argument_list|(
name|pfd
operator|.
name|cDepthBits
argument_list|)
expr_stmt|;
if|if
condition|(
name|pfd
operator|.
name|iPixelType
operator|==
name|PFD_TYPE_RGBA
condition|)
name|format
operator|.
name|setAlphaBufferSize
argument_list|(
name|pfd
operator|.
name|cAlphaBits
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRedBufferSize
argument_list|(
name|pfd
operator|.
name|cRedBits
argument_list|)
expr_stmt|;
name|format
operator|.
name|setGreenBufferSize
argument_list|(
name|pfd
operator|.
name|cGreenBits
argument_list|)
expr_stmt|;
name|format
operator|.
name|setBlueBufferSize
argument_list|(
name|pfd
operator|.
name|cBlueBits
argument_list|)
expr_stmt|;
name|format
operator|.
name|setStencilBufferSize
argument_list|(
name|pfd
operator|.
name|cStencilBits
argument_list|)
expr_stmt|;
name|format
operator|.
name|setStereo
argument_list|(
name|pfd
operator|.
name|dwFlags
operator|&
name|PFD_STEREO
argument_list|)
expr_stmt|;
if|if
condition|(
name|additionalIn
condition|)
block|{
name|QWindowsOpenGLAdditionalFormat
name|additional
decl_stmt|;
if|if
condition|(
name|isDirectRendering
argument_list|(
name|pfd
argument_list|)
condition|)
name|additional
operator|.
name|formatFlags
operator||=
name|QWindowsGLDirectRendering
expr_stmt|;
if|if
condition|(
name|hasGLOverlay
argument_list|(
name|pfd
argument_list|)
condition|)
name|additional
operator|.
name|formatFlags
operator||=
name|QWindowsGLOverlay
expr_stmt|;
if|if
condition|(
name|pfd
operator|.
name|cAccumRedBits
condition|)
name|additional
operator|.
name|formatFlags
operator||=
name|QWindowsGLAccumBuffer
expr_stmt|;
if|if
condition|(
name|testFlag
argument_list|(
name|pfd
operator|.
name|dwFlags
argument_list|,
name|PFD_DRAW_TO_BITMAP
argument_list|)
condition|)
block|{
name|additional
operator|.
name|formatFlags
operator||=
name|QWindowsGLRenderToPixmap
expr_stmt|;
name|additional
operator|.
name|pixmapDepth
operator|=
name|pfd
operator|.
name|cColorBits
expr_stmt|;
block|}
operator|*
name|additionalIn
operator|=
name|additional
expr_stmt|;
block|}
return|return
name|format
return|;
block|}
specifier|static
name|PIXELFORMATDESCRIPTOR
DECL|function|qPixelFormatFromSurfaceFormat
name|qPixelFormatFromSurfaceFormat
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|,
specifier|const
name|QWindowsOpenGLAdditionalFormat
modifier|&
name|additional
parameter_list|)
block|{
name|PIXELFORMATDESCRIPTOR
name|pfd
decl_stmt|;
name|initPixelFormatDescriptor
argument_list|(
operator|&
name|pfd
argument_list|)
expr_stmt|;
name|pfd
operator|.
name|iPixelType
operator|=
name|PFD_TYPE_RGBA
expr_stmt|;
name|pfd
operator|.
name|iLayerType
operator|=
name|PFD_MAIN_PLANE
expr_stmt|;
name|pfd
operator|.
name|dwFlags
operator|=
name|PFD_SUPPORT_OPENGL
expr_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
condition|)
name|pfd
operator|.
name|dwFlags
operator|=
name|PFD_SUPPORT_COMPOSITION
expr_stmt|;
specifier|const
name|bool
name|isPixmap
init|=
operator|(
name|additional
operator|.
name|formatFlags
operator|&
name|QWindowsGLRenderToPixmap
operator|)
operator|!=
literal|0
decl_stmt|;
name|pfd
operator|.
name|dwFlags
operator||=
name|isPixmap
condition|?
name|PFD_DRAW_TO_BITMAP
else|:
name|PFD_DRAW_TO_WINDOW
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|additional
operator|.
name|formatFlags
operator|&
name|QWindowsGLDirectRendering
operator|)
condition|)
name|pfd
operator|.
name|dwFlags
operator||=
name|PFD_GENERIC_FORMAT
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|stereo
argument_list|()
condition|)
name|pfd
operator|.
name|dwFlags
operator||=
name|PFD_STEREO
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|swapBehavior
argument_list|()
operator|!=
name|QSurfaceFormat
operator|::
name|SingleBuffer
operator|&&
operator|!
name|isPixmap
condition|)
name|pfd
operator|.
name|dwFlags
operator||=
name|PFD_DOUBLEBUFFER
expr_stmt|;
name|pfd
operator|.
name|cDepthBits
operator|=
name|format
operator|.
name|depthBufferSize
argument_list|()
operator|>=
literal|0
condition|?
name|format
operator|.
name|depthBufferSize
argument_list|()
else|:
literal|32
expr_stmt|;
name|pfd
operator|.
name|cAlphaBits
operator|=
name|format
operator|.
name|alphaBufferSize
argument_list|()
operator|>
literal|0
condition|?
name|format
operator|.
name|alphaBufferSize
argument_list|()
else|:
literal|8
expr_stmt|;
name|pfd
operator|.
name|cStencilBits
operator|=
name|format
operator|.
name|stencilBufferSize
argument_list|()
operator|>
literal|0
condition|?
name|format
operator|.
name|stencilBufferSize
argument_list|()
else|:
literal|8
expr_stmt|;
if|if
condition|(
name|additional
operator|.
name|formatFlags
operator|&
name|QWindowsGLAccumBuffer
condition|)
name|pfd
operator|.
name|cAccumRedBits
operator|=
name|pfd
operator|.
name|cAccumGreenBits
operator|=
name|pfd
operator|.
name|cAccumBlueBits
operator|=
name|pfd
operator|.
name|cAccumAlphaBits
operator|=
literal|16
expr_stmt|;
return|return
name|pfd
return|;
block|}
comment|// Choose a suitable pixelformat using GDI WinAPI in case ARB
comment|// functions cannot be found. First tries to find a suitable
comment|// format using GDI function ChoosePixelFormat(). Since that
comment|// does not handle overlay and direct-rendering requests, manually loop
comment|// over the available formats to find the best one.
comment|// Note: As of Windows 7, it seems direct-rendering is handled, so,
comment|// the code might be obsolete?
DECL|function|choosePixelFormat
specifier|static
name|int
name|choosePixelFormat
parameter_list|(
name|HDC
name|hdc
parameter_list|,
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|,
specifier|const
name|QWindowsOpenGLAdditionalFormat
modifier|&
name|additional
parameter_list|,
name|PIXELFORMATDESCRIPTOR
modifier|*
name|obtainedPfd
parameter_list|)
block|{
comment|// 1) Try ChoosePixelFormat().
name|PIXELFORMATDESCRIPTOR
name|requestedPfd
init|=
name|qPixelFormatFromSurfaceFormat
argument_list|(
name|format
argument_list|,
name|QWindowsGLDirectRendering
argument_list|)
decl_stmt|;
name|initPixelFormatDescriptor
argument_list|(
name|obtainedPfd
argument_list|)
expr_stmt|;
name|int
name|pixelFormat
init|=
name|ChoosePixelFormat
argument_list|(
name|hdc
argument_list|,
operator|&
name|requestedPfd
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixelFormat
operator|>=
literal|0
condition|)
block|{
name|DescribePixelFormat
argument_list|(
name|hdc
argument_list|,
name|pixelFormat
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|,
name|obtainedPfd
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAcceptableFormat
argument_list|(
name|additional
argument_list|,
operator|*
name|obtainedPfd
argument_list|)
condition|)
return|return
name|pixelFormat
return|;
block|}
comment|// 2) No matching format found, manual search loop.
specifier|const
name|int
name|pfiMax
init|=
name|DescribePixelFormat
argument_list|(
name|hdc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|int
name|bestScore
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|bestPfi
init|=
operator|-
literal|1
decl_stmt|;
specifier|const
name|bool
name|stereoRequested
init|=
name|format
operator|.
name|stereo
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|accumBufferRequested
init|=
name|testFlag
argument_list|(
name|additional
operator|.
name|formatFlags
argument_list|,
name|QWindowsGLAccumBuffer
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|doubleBufferRequested
init|=
name|format
operator|.
name|swapBehavior
argument_list|()
operator|==
name|QSurfaceFormat
operator|::
name|DoubleBuffer
decl_stmt|;
specifier|const
name|bool
name|directRenderingRequested
init|=
name|testFlag
argument_list|(
name|additional
operator|.
name|formatFlags
argument_list|,
name|QWindowsGLDirectRendering
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|pfi
init|=
literal|1
init|;
name|pfi
operator|<=
name|pfiMax
condition|;
name|pfi
operator|++
control|)
block|{
name|PIXELFORMATDESCRIPTOR
name|checkPfd
decl_stmt|;
name|initPixelFormatDescriptor
argument_list|(
operator|&
name|checkPfd
argument_list|)
expr_stmt|;
name|DescribePixelFormat
argument_list|(
name|hdc
argument_list|,
name|pfi
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|,
operator|&
name|checkPfd
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAcceptableFormat
argument_list|(
name|additional
argument_list|,
name|checkPfd
argument_list|)
condition|)
block|{
name|int
name|score
init|=
name|checkPfd
operator|.
name|cColorBits
operator|+
name|checkPfd
operator|.
name|cAlphaBits
operator|+
name|checkPfd
operator|.
name|cStencilBits
decl_stmt|;
if|if
condition|(
name|accumBufferRequested
condition|)
name|score
operator|+=
name|checkPfd
operator|.
name|cAccumBits
expr_stmt|;
if|if
condition|(
name|doubleBufferRequested
operator|==
name|testFlag
argument_list|(
name|checkPfd
operator|.
name|dwFlags
argument_list|,
name|PFD_DOUBLEBUFFER
argument_list|)
condition|)
name|score
operator|+=
literal|1000
expr_stmt|;
if|if
condition|(
name|stereoRequested
operator|==
name|testFlag
argument_list|(
name|checkPfd
operator|.
name|dwFlags
argument_list|,
name|PFD_STEREO
argument_list|)
condition|)
name|score
operator|+=
literal|2000
expr_stmt|;
if|if
condition|(
name|directRenderingRequested
operator|==
name|isDirectRendering
argument_list|(
name|checkPfd
argument_list|)
condition|)
name|score
operator|+=
literal|4000
expr_stmt|;
if|if
condition|(
name|checkPfd
operator|.
name|iPixelType
operator|==
name|PFD_TYPE_RGBA
condition|)
name|score
operator|+=
literal|8000
expr_stmt|;
if|if
condition|(
name|score
operator|>
name|bestScore
condition|)
block|{
name|bestScore
operator|=
name|score
expr_stmt|;
name|bestPfi
operator|=
name|pfi
expr_stmt|;
operator|*
name|obtainedPfd
operator|=
name|checkPfd
expr_stmt|;
block|}
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"    checking  "
operator|<<
name|pfi
operator|<<
literal|'/'
operator|<<
name|pfiMax
operator|<<
literal|" score="
operator|<<
name|score
operator|<<
literal|" (best "
operator|<<
name|bestPfi
operator|<<
literal|'/'
operator|<<
name|bestScore
operator|<<
literal|") "
operator|<<
name|checkPfd
expr_stmt|;
block|}
block|}
comment|// for
if|if
condition|(
name|bestPfi
operator|>
literal|0
condition|)
name|pixelFormat
operator|=
name|bestPfi
expr_stmt|;
return|return
name|pixelFormat
return|;
block|}
DECL|function|createContext
specifier|static
specifier|inline
name|HGLRC
name|createContext
parameter_list|(
name|HDC
name|hdc
parameter_list|,
name|HGLRC
name|shared
parameter_list|)
block|{
name|HGLRC
name|result
init|=
name|wglCreateContext
argument_list|(
name|hdc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: wglCreateContext failed."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|shared
operator|&&
operator|!
name|wglShareLists
argument_list|(
name|shared
argument_list|,
name|result
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
literal|"%s: wglShareLists() failed."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace GDI
end_comment
begin_comment
comment|// ARB OpenGL extension API
end_comment
begin_namespace
DECL|namespace|ARB
namespace|namespace
name|ARB
block|{
comment|// Choose a suitable pixelformat using ARB extension functions.
DECL|function|choosePixelFormat
specifier|static
name|int
name|choosePixelFormat
parameter_list|(
name|HDC
name|hdc
parameter_list|,
specifier|const
name|QOpenGLStaticContext
modifier|&
name|staticContext
parameter_list|,
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|,
specifier|const
name|QWindowsOpenGLAdditionalFormat
modifier|&
name|additional
parameter_list|,
name|PIXELFORMATDESCRIPTOR
modifier|*
name|obtainedPfd
parameter_list|)
block|{
enum|enum
block|{
name|attribSize
init|=
literal|40
block|}
enum|;
if|if
condition|(
operator|(
name|additional
operator|.
name|formatFlags
operator|&
name|QWindowsGLRenderToPixmap
operator|)
operator|||
operator|!
name|staticContext
operator|.
name|hasExtensions
argument_list|()
condition|)
return|return
literal|0
return|;
name|int
name|iAttributes
index|[
name|attribSize
index|]
decl_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|iAttributes
argument_list|,
name|iAttributes
operator|+
name|attribSize
argument_list|,
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ACCELERATION_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|testFlag
argument_list|(
name|additional
operator|.
name|formatFlags
argument_list|,
name|QWindowsGLDirectRendering
argument_list|)
condition|?
name|WGL_FULL_ACCELERATION_ARB
else|:
name|WGL_NO_ACCELERATION_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_SUPPORT_OPENGL_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|TRUE
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_DRAW_TO_WINDOW_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|TRUE
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_COLOR_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
literal|24
expr_stmt|;
switch|switch
condition|(
name|format
operator|.
name|swapBehavior
argument_list|()
condition|)
block|{
case|case
name|QSurfaceFormat
operator|::
name|SingleBuffer
case|:
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_DOUBLE_BUFFER_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|FALSE
expr_stmt|;
break|break;
case|case
name|QSurfaceFormat
operator|::
name|DefaultSwapBehavior
case|:
case|case
name|QSurfaceFormat
operator|::
name|DoubleBuffer
case|:
case|case
name|QSurfaceFormat
operator|::
name|TripleBuffer
case|:
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_DOUBLE_BUFFER_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|TRUE
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|format
operator|.
name|stereo
argument_list|()
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_STEREO_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|TRUE
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|depthBufferSize
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_DEPTH_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|format
operator|.
name|depthBufferSize
argument_list|()
expr_stmt|;
block|}
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_PIXEL_TYPE_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_TYPE_RGBA_ARB
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|redBufferSize
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_RED_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|format
operator|.
name|redBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|greenBufferSize
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_GREEN_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|format
operator|.
name|greenBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|.
name|blueBufferSize
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_BLUE_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|format
operator|.
name|blueBufferSize
argument_list|()
expr_stmt|;
block|}
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ALPHA_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|format
operator|.
name|alphaBufferSize
argument_list|()
operator|>=
literal|0
condition|?
name|format
operator|.
name|alphaBufferSize
argument_list|()
else|:
literal|8
expr_stmt|;
if|if
condition|(
name|additional
operator|.
name|formatFlags
operator|&
name|QWindowsGLAccumBuffer
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ACCUM_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
literal|16
expr_stmt|;
block|}
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_STENCIL_BITS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
literal|8
expr_stmt|;
if|if
condition|(
name|additional
operator|.
name|formatFlags
operator|&
name|QWindowsGLOverlay
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_NUMBER_OVERLAYS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
literal|1
expr_stmt|;
block|}
specifier|const
name|int
name|samples
init|=
name|format
operator|.
name|samples
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|sampleBuffersRequested
init|=
name|samples
operator|>
literal|1
operator|&&
name|testFlag
argument_list|(
name|staticContext
operator|.
name|extensions
argument_list|,
name|QOpenGLStaticContext
operator|::
name|SampleBuffers
argument_list|)
decl_stmt|;
name|int
name|samplesValuePosition
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|sampleBuffersRequested
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_SAMPLE_BUFFERS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|TRUE
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_SAMPLES_ARB
expr_stmt|;
name|samplesValuePosition
operator|=
name|i
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|format
operator|.
name|samples
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_SAMPLE_BUFFERS_ARB
expr_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|FALSE
expr_stmt|;
block|}
comment|// If sample buffer request cannot be satisfied, reduce request.
name|int
name|pixelFormat
init|=
literal|0
decl_stmt|;
name|uint
name|numFormats
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|const
name|bool
name|valid
init|=
name|staticContext
operator|.
name|wglChoosePixelFormatARB
argument_list|(
name|hdc
argument_list|,
name|iAttributes
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|pixelFormat
argument_list|,
operator|&
name|numFormats
argument_list|)
operator|&&
name|numFormats
operator|>=
literal|1
decl_stmt|;
if|if
condition|(
name|valid
operator|||
operator|!
name|sampleBuffersRequested
condition|)
break|break;
if|if
condition|(
name|iAttributes
index|[
name|samplesValuePosition
index|]
operator|>
literal|1
condition|)
block|{
name|iAttributes
index|[
name|samplesValuePosition
index|]
operator|/=
literal|2
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// Verify if format is acceptable. Note that the returned
comment|// formats have been observed to not contain PFD_SUPPORT_OPENGL, ignore.
name|initPixelFormatDescriptor
argument_list|(
name|obtainedPfd
argument_list|)
expr_stmt|;
name|DescribePixelFormat
argument_list|(
name|hdc
argument_list|,
name|pixelFormat
argument_list|,
sizeof|sizeof
argument_list|(
name|PIXELFORMATDESCRIPTOR
argument_list|)
argument_list|,
name|obtainedPfd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAcceptableFormat
argument_list|(
name|additional
argument_list|,
operator|*
name|obtainedPfd
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|" obtained px #"
operator|<<
name|pixelFormat
operator|<<
literal|" not acceptable="
operator|<<
operator|*
name|obtainedPfd
expr_stmt|;
name|pixelFormat
operator|=
literal|0
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_OUTPUT
if|if
condition|(
name|lcQpaGl
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|QString
name|message
decl_stmt|;
name|QDebug
name|nsp
argument_list|(
operator|&
name|message
argument_list|)
decl_stmt|;
name|nsp
operator|<<
name|__FUNCTION__
expr_stmt|;
if|if
condition|(
name|sampleBuffersRequested
condition|)
name|nsp
operator|<<
literal|" samples="
operator|<<
name|iAttributes
index|[
name|samplesValuePosition
index|]
expr_stmt|;
name|nsp
operator|<<
literal|" Attributes: "
operator|<<
name|hex
operator|<<
name|showbase
expr_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|i
condition|;
operator|++
name|ii
control|)
name|nsp
operator|<<
name|iAttributes
index|[
name|ii
index|]
operator|<<
literal|','
expr_stmt|;
name|nsp
operator|<<
name|noshowbase
operator|<<
name|dec
operator|<<
literal|"\n    obtained px #"
operator|<<
name|pixelFormat
operator|<<
literal|" of "
operator|<<
name|numFormats
operator|<<
literal|"\n    "
operator|<<
operator|*
name|obtainedPfd
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|)
operator|<<
name|message
expr_stmt|;
block|}
comment|// Debug
endif|#
directive|endif
return|return
name|pixelFormat
return|;
block|}
specifier|static
name|QSurfaceFormat
DECL|function|qSurfaceFormatFromHDC
name|qSurfaceFormatFromHDC
parameter_list|(
specifier|const
name|QOpenGLStaticContext
modifier|&
name|staticContext
parameter_list|,
name|HDC
name|hdc
parameter_list|,
name|int
name|pixelFormat
parameter_list|,
name|QWindowsOpenGLAdditionalFormat
modifier|*
name|additionalIn
init|=
literal|0
parameter_list|)
block|{
enum|enum
block|{
name|attribSize
init|=
literal|40
block|}
enum|;
name|QSurfaceFormat
name|result
decl_stmt|;
name|result
operator|.
name|setRenderableType
argument_list|(
name|QSurfaceFormat
operator|::
name|OpenGL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|staticContext
operator|.
name|hasExtensions
argument_list|()
condition|)
return|return
name|result
return|;
name|int
name|iAttributes
index|[
name|attribSize
index|]
decl_stmt|;
name|int
name|iValues
index|[
name|attribSize
index|]
decl_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|iAttributes
argument_list|,
name|iAttributes
operator|+
name|attribSize
argument_list|,
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|iValues
argument_list|,
name|iValues
operator|+
name|attribSize
argument_list|,
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|const
name|bool
name|hasSampleBuffers
init|=
name|testFlag
argument_list|(
name|staticContext
operator|.
name|extensions
argument_list|,
name|QOpenGLStaticContext
operator|::
name|SampleBuffers
argument_list|)
decl_stmt|;
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_DOUBLE_BUFFER_ARB
expr_stmt|;
comment|// 0
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_DEPTH_BITS_ARB
expr_stmt|;
comment|// 1
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_PIXEL_TYPE_ARB
expr_stmt|;
comment|// 2
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_RED_BITS_ARB
expr_stmt|;
comment|// 3
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_GREEN_BITS_ARB
expr_stmt|;
comment|// 4
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_BLUE_BITS_ARB
expr_stmt|;
comment|// 5
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ALPHA_BITS_ARB
expr_stmt|;
comment|// 6
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ACCUM_BITS_ARB
expr_stmt|;
comment|// 7
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_STENCIL_BITS_ARB
expr_stmt|;
comment|// 8
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_STEREO_ARB
expr_stmt|;
comment|// 9
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_ACCELERATION_ARB
expr_stmt|;
comment|// 10
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_NUMBER_OVERLAYS_ARB
expr_stmt|;
comment|// 11
if|if
condition|(
name|hasSampleBuffers
condition|)
block|{
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_SAMPLE_BUFFERS_ARB
expr_stmt|;
comment|// 12
name|iAttributes
index|[
name|i
operator|++
index|]
operator|=
name|WGL_SAMPLES_ARB
expr_stmt|;
comment|// 13
block|}
if|if
condition|(
operator|!
name|staticContext
operator|.
name|wglGetPixelFormatAttribIVARB
argument_list|(
name|hdc
argument_list|,
name|pixelFormat
argument_list|,
literal|0
argument_list|,
name|i
argument_list|,
name|iAttributes
argument_list|,
name|iValues
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: wglGetPixelFormatAttribIVARB() failed for basic parameters."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|result
operator|.
name|setSwapBehavior
argument_list|(
name|iValues
index|[
literal|0
index|]
condition|?
name|QSurfaceFormat
operator|::
name|DoubleBuffer
else|:
name|QSurfaceFormat
operator|::
name|SingleBuffer
argument_list|)
expr_stmt|;
name|result
operator|.
name|setDepthBufferSize
argument_list|(
name|iValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRedBufferSize
argument_list|(
name|iValues
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|setGreenBufferSize
argument_list|(
name|iValues
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|setBlueBufferSize
argument_list|(
name|iValues
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|setAlphaBufferSize
argument_list|(
name|iValues
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|setStencilBufferSize
argument_list|(
name|iValues
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|iValues
index|[
literal|9
index|]
condition|)
name|result
operator|.
name|setOption
argument_list|(
name|QSurfaceFormat
operator|::
name|StereoBuffers
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSampleBuffers
condition|)
name|result
operator|.
name|setSamples
argument_list|(
name|iValues
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|additionalIn
condition|)
block|{
if|if
condition|(
name|iValues
index|[
literal|7
index|]
condition|)
name|additionalIn
operator|->
name|formatFlags
operator||=
name|QWindowsGLAccumBuffer
expr_stmt|;
if|if
condition|(
name|iValues
index|[
literal|10
index|]
operator|==
name|WGL_FULL_ACCELERATION_ARB
condition|)
name|additionalIn
operator|->
name|formatFlags
operator||=
name|QWindowsGLDirectRendering
expr_stmt|;
if|if
condition|(
name|iValues
index|[
literal|11
index|]
condition|)
name|additionalIn
operator|->
name|formatFlags
operator||=
name|QWindowsGLOverlay
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|function|createContext
specifier|static
name|HGLRC
name|createContext
parameter_list|(
specifier|const
name|QOpenGLStaticContext
modifier|&
name|staticContext
parameter_list|,
name|HDC
name|hdc
parameter_list|,
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|,
specifier|const
name|QWindowsOpenGLAdditionalFormat
modifier|&
parameter_list|,
name|HGLRC
name|shared
init|=
literal|0
parameter_list|)
block|{
enum|enum
block|{
name|attribSize
init|=
literal|11
block|}
enum|;
if|if
condition|(
operator|!
name|staticContext
operator|.
name|hasExtensions
argument_list|()
condition|)
return|return
literal|0
return|;
name|int
name|attributes
index|[
name|attribSize
index|]
decl_stmt|;
name|int
name|attribIndex
init|=
literal|0
decl_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|attributes
argument_list|,
name|attributes
operator|+
name|attribSize
argument_list|,
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// We limit the requested version by the version of the static context as
comment|// wglCreateContextAttribsARB fails and returns NULL if the requested context
comment|// version is not supported. This means that we will get the closest supported
comment|// context format that that which was requested and is supported by the driver
specifier|const
name|int
name|requestedVersion
init|=
name|qMin
argument_list|(
operator|(
name|format
operator|.
name|majorVersion
argument_list|()
operator|<<
literal|8
operator|)
operator|+
name|format
operator|.
name|minorVersion
argument_list|()
argument_list|,
name|staticContext
operator|.
name|defaultFormat
operator|.
name|version
argument_list|)
decl_stmt|;
specifier|const
name|int
name|majorVersion
init|=
name|requestedVersion
operator|>>
literal|8
decl_stmt|;
specifier|const
name|int
name|minorVersion
init|=
name|requestedVersion
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|requestedVersion
operator|>
literal|0x0101
condition|)
block|{
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_MAJOR_VERSION_ARB
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|majorVersion
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_MINOR_VERSION_ARB
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|minorVersion
expr_stmt|;
block|}
name|int
name|flags
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|testOption
argument_list|(
name|QSurfaceFormat
operator|::
name|DebugContext
argument_list|)
condition|)
name|flags
operator||=
name|WGL_CONTEXT_DEBUG_BIT_ARB
expr_stmt|;
if|if
condition|(
name|requestedVersion
operator|>=
literal|0x0300
condition|)
block|{
if|if
condition|(
operator|!
name|format
operator|.
name|testOption
argument_list|(
name|QSurfaceFormat
operator|::
name|DeprecatedFunctions
argument_list|)
condition|)
name|flags
operator||=
name|WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB
expr_stmt|;
block|}
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_FLAGS_ARB
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|flags
expr_stmt|;
if|if
condition|(
name|requestedVersion
operator|>=
literal|0x0302
condition|)
block|{
switch|switch
condition|(
name|format
operator|.
name|profile
argument_list|()
condition|)
block|{
case|case
name|QSurfaceFormat
operator|::
name|NoProfile
case|:
break|break;
case|case
name|QSurfaceFormat
operator|::
name|CoreProfile
case|:
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_PROFILE_MASK_ARB
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_CORE_PROFILE_BIT_ARB
expr_stmt|;
break|break;
case|case
name|QSurfaceFormat
operator|::
name|CompatibilityProfile
case|:
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_PROFILE_MASK_ARB
expr_stmt|;
name|attributes
index|[
name|attribIndex
operator|++
index|]
operator|=
name|WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB
expr_stmt|;
break|break;
block|}
block|}
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"Creating context version"
operator|<<
name|majorVersion
operator|<<
literal|'.'
operator|<<
name|minorVersion
operator|<<
name|attribIndex
operator|/
literal|2
operator|<<
literal|"attributes"
expr_stmt|;
specifier|const
name|HGLRC
name|result
init|=
name|staticContext
operator|.
name|wglCreateContextAttribsARB
argument_list|(
name|hdc
argument_list|,
name|shared
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|QString
name|message
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|message
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|": wglCreateContextAttribsARB() failed (GL error code: 0x"
operator|<<
name|hex
operator|<<
name|glGetError
argument_list|()
operator|<<
name|dec
operator|<<
literal|") for format: "
operator|<<
name|format
operator|<<
literal|", shared context: "
operator|<<
name|shared
expr_stmt|;
name|qErrnoWarning
argument_list|(
literal|"%s"
argument_list|,
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace ARB
end_comment
begin_comment
comment|// Helpers for temporary contexts
end_comment
begin_function
DECL|function|createDummyGLWindow
specifier|static
specifier|inline
name|HWND
name|createDummyGLWindow
parameter_list|()
block|{
return|return
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|createDummyWindow
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QtOpenGLDummyWindow"
argument_list|)
argument_list|,
literal|L"OpenGLDummyWindow"
argument_list|,
literal|0
argument_list|,
name|WS_OVERLAPPED
operator||
name|WS_CLIPCHILDREN
operator||
name|WS_CLIPSIBLINGS
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Create a dummy GL context (see QOpenGLTemporaryContext).
end_comment
begin_function
DECL|function|createDummyGLContext
specifier|static
specifier|inline
name|HGLRC
name|createDummyGLContext
parameter_list|(
name|HDC
name|dc
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dc
condition|)
return|return
literal|0
return|;
name|PIXELFORMATDESCRIPTOR
name|pixelFormDescriptor
decl_stmt|;
name|initPixelFormatDescriptor
argument_list|(
operator|&
name|pixelFormDescriptor
argument_list|)
expr_stmt|;
name|pixelFormDescriptor
operator|.
name|dwFlags
operator|=
name|PFD_SUPPORT_OPENGL
operator||
name|PFD_DRAW_TO_WINDOW
operator||
name|PFD_GENERIC_FORMAT
expr_stmt|;
name|pixelFormDescriptor
operator|.
name|iPixelType
operator|=
name|PFD_TYPE_RGBA
expr_stmt|;
specifier|const
name|int
name|pixelFormat
init|=
name|ChoosePixelFormat
argument_list|(
name|dc
argument_list|,
operator|&
name|pixelFormDescriptor
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pixelFormat
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: ChoosePixelFormat failed."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|SetPixelFormat
argument_list|(
name|dc
argument_list|,
name|pixelFormat
argument_list|,
operator|&
name|pixelFormDescriptor
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: SetPixelFormat failed."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|HGLRC
name|rc
init|=
name|wglCreateContext
argument_list|(
name|dc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rc
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: wglCreateContext failed."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|rc
return|;
block|}
end_function
begin_function
DECL|function|currentOpenGLContextData
specifier|static
specifier|inline
name|QOpenGLContextData
name|currentOpenGLContextData
parameter_list|()
block|{
name|QOpenGLContextData
name|result
decl_stmt|;
name|result
operator|.
name|hdc
operator|=
name|wglGetCurrentDC
argument_list|()
expr_stmt|;
name|result
operator|.
name|renderingContext
operator|=
name|wglGetCurrentContext
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|createDummyWindowOpenGLContextData
specifier|static
specifier|inline
name|QOpenGLContextData
name|createDummyWindowOpenGLContextData
parameter_list|()
block|{
name|QOpenGLContextData
name|result
decl_stmt|;
name|result
operator|.
name|hwnd
operator|=
name|createDummyGLWindow
argument_list|()
expr_stmt|;
name|result
operator|.
name|hdc
operator|=
name|GetDC
argument_list|(
name|result
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|result
operator|.
name|renderingContext
operator|=
name|createDummyGLContext
argument_list|(
name|result
operator|.
name|hdc
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \class QOpenGLContextFormat     \brief Format options that are related to the context (not pixelformats)      Provides utility function to retrieve from currently active     context and to apply to a QSurfaceFormat.      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsOpenGLContextFormat
name|QWindowsOpenGLContextFormat
operator|::
name|QWindowsOpenGLContextFormat
parameter_list|()
member_init_list|:
name|profile
argument_list|(
name|QSurfaceFormat
operator|::
name|NoProfile
argument_list|)
member_init_list|,
name|version
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|options
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|current
name|QWindowsOpenGLContextFormat
name|QWindowsOpenGLContextFormat
operator|::
name|current
parameter_list|()
block|{
name|QWindowsOpenGLContextFormat
name|result
decl_stmt|;
specifier|const
name|QByteArray
name|version
init|=
name|QOpenGLStaticContext
operator|::
name|getGlString
argument_list|(
name|GL_VERSION
argument_list|)
decl_stmt|;
specifier|const
name|int
name|majorDot
init|=
name|version
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|majorDot
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|minorDot
init|=
name|version
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|majorDot
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|minorDot
operator|==
operator|-
literal|1
condition|)
name|minorDot
operator|=
name|version
operator|.
name|size
argument_list|()
expr_stmt|;
name|result
operator|.
name|version
operator|=
operator|(
name|version
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|majorDot
argument_list|)
operator|.
name|toInt
argument_list|()
operator|<<
literal|8
operator|)
operator|+
name|version
operator|.
name|mid
argument_list|(
name|majorDot
operator|+
literal|1
argument_list|,
name|minorDot
operator|-
name|majorDot
operator|-
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|profile
operator|=
name|QSurfaceFormat
operator|::
name|NoProfile
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|version
operator|<
literal|0x0300
condition|)
block|{
name|result
operator|.
name|options
operator||=
name|QSurfaceFormat
operator|::
name|DeprecatedFunctions
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// v3 onwards
name|GLint
name|value
init|=
literal|0
decl_stmt|;
name|glGetIntegerv
argument_list|(
name|GL_CONTEXT_FLAGS
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|&
name|GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
operator|)
condition|)
name|result
operator|.
name|options
operator||=
name|QSurfaceFormat
operator|::
name|DeprecatedFunctions
expr_stmt|;
if|if
condition|(
name|value
operator|&
name|GL_CONTEXT_FLAG_DEBUG_BIT
condition|)
name|result
operator|.
name|options
operator||=
name|QSurfaceFormat
operator|::
name|DebugContext
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|version
operator|<
literal|0x0302
condition|)
return|return
name|result
return|;
comment|// v3.2 onwards: Profiles
name|value
operator|=
literal|0
expr_stmt|;
name|glGetIntegerv
argument_list|(
name|GL_CONTEXT_PROFILE_MASK
argument_list|,
operator|&
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|&
name|GL_CONTEXT_CORE_PROFILE_BIT
condition|)
name|result
operator|.
name|profile
operator|=
name|QSurfaceFormat
operator|::
name|CoreProfile
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|&
name|GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
condition|)
name|result
operator|.
name|profile
operator|=
name|QSurfaceFormat
operator|::
name|CompatibilityProfile
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|apply
name|void
name|QWindowsOpenGLContextFormat
operator|::
name|apply
parameter_list|(
name|QSurfaceFormat
modifier|*
name|format
parameter_list|)
specifier|const
block|{
name|format
operator|->
name|setMajorVersion
argument_list|(
name|version
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|format
operator|->
name|setMinorVersion
argument_list|(
name|version
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|format
operator|->
name|setProfile
argument_list|(
name|profile
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|&
name|QSurfaceFormat
operator|::
name|DebugContext
condition|)
name|format
operator|->
name|setOption
argument_list|(
name|QSurfaceFormat
operator|::
name|DebugContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|&
name|QSurfaceFormat
operator|::
name|DeprecatedFunctions
condition|)
name|format
operator|->
name|setOption
argument_list|(
name|QSurfaceFormat
operator|::
name|DeprecatedFunctions
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|QWindowsOpenGLContextFormat
modifier|&
name|f
parameter_list|)
block|{
name|d
operator|.
name|nospace
argument_list|()
operator|<<
literal|"ContextFormat: v"
operator|<<
operator|(
name|f
operator|.
name|version
operator|>>
literal|8
operator|)
operator|<<
literal|'.'
operator|<<
operator|(
name|f
operator|.
name|version
operator|&
literal|0xFF
operator|)
operator|<<
literal|" profile: "
operator|<<
name|f
operator|.
name|profile
operator|<<
literal|" options: "
operator|<<
name|f
operator|.
name|options
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_comment
comment|/*!     \class QOpenGLTemporaryContext     \brief A temporary context that can be instantiated on the stack.      Functions like wglGetProcAddress() or glGetString() only work if there     is a current GL context.      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_class
DECL|class|QOpenGLTemporaryContext
class|class
name|QOpenGLTemporaryContext
block|{
name|Q_DISABLE_COPY
parameter_list|(
name|QOpenGLTemporaryContext
parameter_list|)
specifier|public
private|:
name|QOpenGLTemporaryContext
parameter_list|()
constructor_decl|;
name|~
name|QOpenGLTemporaryContext
parameter_list|()
destructor_decl|;
private|private:
DECL|member|m_previous
specifier|const
name|QOpenGLContextData
name|m_previous
decl_stmt|;
DECL|member|m_current
specifier|const
name|QOpenGLContextData
name|m_current
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QOpenGLTemporaryContext
name|QOpenGLTemporaryContext
operator|::
name|QOpenGLTemporaryContext
parameter_list|()
member_init_list|:
name|m_previous
argument_list|(
name|currentOpenGLContextData
argument_list|()
argument_list|)
member_init_list|,
name|m_current
argument_list|(
name|createDummyWindowOpenGLContextData
argument_list|()
argument_list|)
block|{
name|wglMakeCurrent
argument_list|(
name|m_current
operator|.
name|hdc
argument_list|,
name|m_current
operator|.
name|renderingContext
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QOpenGLTemporaryContext
name|QOpenGLTemporaryContext
operator|::
name|~
name|QOpenGLTemporaryContext
parameter_list|()
block|{
name|wglMakeCurrent
argument_list|(
name|m_previous
operator|.
name|hdc
argument_list|,
name|m_previous
operator|.
name|renderingContext
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
name|m_current
operator|.
name|hwnd
argument_list|,
name|m_current
operator|.
name|hdc
argument_list|)
expr_stmt|;
name|DestroyWindow
argument_list|(
name|m_current
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|wglDeleteContext
argument_list|(
name|m_current
operator|.
name|renderingContext
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \class QWindowsOpenGLAdditionalFormat     \brief Additional format information that is not in QSurfaceFormat     \ingroup qt-lighthouse-win */
end_comment
begin_comment
comment|/*!     \class QOpenGLStaticContext     \brief Static Open GL context containing version information, extension function pointers, etc.      Functions pending integration in the next version of OpenGL are post-fixed ARB.      \note Initialization requires an active context (see create()).      \sa QWindowsGLContext     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_define
DECL|macro|SAMPLE_BUFFER_EXTENSION
define|#
directive|define
name|SAMPLE_BUFFER_EXTENSION
value|"GL_ARB_multisample"
end_define
begin_constructor
DECL|function|QOpenGLStaticContext
name|QOpenGLStaticContext
operator|::
name|QOpenGLStaticContext
parameter_list|()
member_init_list|:
name|vendor
argument_list|(
name|QOpenGLStaticContext
operator|::
name|getGlString
argument_list|(
name|GL_VENDOR
argument_list|)
argument_list|)
member_init_list|,
name|renderer
argument_list|(
name|QOpenGLStaticContext
operator|::
name|getGlString
argument_list|(
name|GL_RENDERER
argument_list|)
argument_list|)
member_init_list|,
name|extensionNames
argument_list|(
name|QOpenGLStaticContext
operator|::
name|getGlString
argument_list|(
name|GL_EXTENSIONS
argument_list|)
argument_list|)
member_init_list|,
name|extensions
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|defaultFormat
argument_list|(
name|QWindowsOpenGLContextFormat
operator|::
name|current
argument_list|()
argument_list|)
member_init_list|,
name|wglGetPixelFormatAttribIVARB
argument_list|(
operator|(
name|WglGetPixelFormatAttribIVARB
operator|)
name|wglGetProcAddress
argument_list|(
literal|"wglGetPixelFormatAttribivARB"
argument_list|)
argument_list|)
member_init_list|,
name|wglChoosePixelFormatARB
argument_list|(
operator|(
name|WglChoosePixelFormatARB
operator|)
name|wglGetProcAddress
argument_list|(
literal|"wglChoosePixelFormatARB"
argument_list|)
argument_list|)
member_init_list|,
name|wglCreateContextAttribsARB
argument_list|(
operator|(
name|WglCreateContextAttribsARB
operator|)
name|wglGetProcAddress
argument_list|(
literal|"wglCreateContextAttribsARB"
argument_list|)
argument_list|)
member_init_list|,
name|wglSwapInternalExt
argument_list|(
operator|(
name|WglSwapInternalExt
operator|)
name|wglGetProcAddress
argument_list|(
literal|"wglSwapIntervalEXT"
argument_list|)
argument_list|)
member_init_list|,
name|wglGetSwapInternalExt
argument_list|(
operator|(
name|WglGetSwapInternalExt
operator|)
name|wglGetProcAddress
argument_list|(
literal|"wglGetSwapIntervalEXT"
argument_list|)
argument_list|)
block|{
if|if
condition|(
name|extensionNames
operator|.
name|startsWith
argument_list|(
name|SAMPLE_BUFFER_EXTENSION
literal|" "
argument_list|)
operator|||
name|extensionNames
operator|.
name|indexOf
argument_list|(
literal|" "
name|SAMPLE_BUFFER_EXTENSION
literal|" "
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|extensions
operator||=
name|SampleBuffers
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|getGlString
name|QByteArray
name|QOpenGLStaticContext
operator|::
name|getGlString
parameter_list|(
name|unsigned
name|int
name|which
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|GLubyte
modifier|*
name|s
init|=
name|glGetString
argument_list|(
name|which
argument_list|)
condition|)
return|return
name|QByteArray
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|s
argument_list|)
return|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|create
name|QOpenGLStaticContext
modifier|*
name|QOpenGLStaticContext
operator|::
name|create
parameter_list|()
block|{
comment|// We need a current context for wglGetProcAdress()/getGLString() to work.
name|QScopedPointer
argument_list|<
name|QOpenGLTemporaryContext
argument_list|>
name|temporaryContext
decl_stmt|;
if|if
condition|(
operator|!
name|wglGetCurrentContext
argument_list|()
condition|)
name|temporaryContext
operator|.
name|reset
argument_list|(
operator|new
name|QOpenGLTemporaryContext
argument_list|)
expr_stmt|;
name|QOpenGLStaticContext
modifier|*
name|result
init|=
operator|new
name|QOpenGLStaticContext
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
operator|*
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|QOpenGLStaticContext
modifier|&
name|s
parameter_list|)
block|{
name|QDebug
name|nsp
init|=
name|d
operator|.
name|nospace
argument_list|()
decl_stmt|;
name|nsp
operator|<<
literal|"OpenGL: "
operator|<<
name|s
operator|.
name|vendor
operator|<<
literal|','
operator|<<
name|s
operator|.
name|renderer
operator|<<
literal|" default "
operator|<<
name|s
operator|.
name|defaultFormat
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|extensions
operator|&
name|QOpenGLStaticContext
operator|::
name|SampleBuffers
condition|)
name|nsp
operator|<<
literal|",SampleBuffers"
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|hasExtensions
argument_list|()
condition|)
name|nsp
operator|<<
literal|", Extension-API present"
expr_stmt|;
name|nsp
operator|<<
literal|"\nExtensions: "
operator|<<
operator|(
name|s
operator|.
name|extensionNames
operator|.
name|count
argument_list|(
literal|' '
argument_list|)
operator|+
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|1
condition|)
name|nsp
operator|<<
name|s
operator|.
name|extensionNames
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsGLContext     \brief Open GL context.      An Open GL context for use with several windows.     As opposed to other implementations, activating a GL context for     a window requires a HDC allocated for it. The first time this     HDC is created for the window, the pixel format must be applied,     which will affect the window as well. The HDCs are stored in a list of     QOpenGLContextData and are released in doneCurrent().      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsGLContext
name|QWindowsGLContext
operator|::
name|QWindowsGLContext
parameter_list|(
specifier|const
name|QOpenGLStaticContextPtr
modifier|&
name|staticContext
parameter_list|,
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
member_init_list|:
name|m_staticContext
argument_list|(
name|staticContext
argument_list|)
member_init_list|,
name|m_context
argument_list|(
name|context
argument_list|)
member_init_list|,
name|m_renderingContext
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_pixelFormat
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_extensionsUsed
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_swapInterval
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|QSurfaceFormat
name|format
init|=
name|context
operator|->
name|format
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|renderableType
argument_list|()
operator|==
name|QSurfaceFormat
operator|::
name|DefaultRenderableType
condition|)
name|format
operator|.
name|setRenderableType
argument_list|(
name|QSurfaceFormat
operator|::
name|OpenGL
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|renderableType
argument_list|()
operator|!=
name|QSurfaceFormat
operator|::
name|OpenGL
condition|)
return|return;
comment|// workaround for matrox driver:
comment|// make a cheap call to opengl to force loading of DLL
specifier|static
name|bool
name|opengl32dll
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|opengl32dll
condition|)
block|{
name|GLint
name|params
decl_stmt|;
name|glGetIntegerv
argument_list|(
name|GL_DEPTH_BITS
argument_list|,
operator|&
name|params
argument_list|)
expr_stmt|;
name|opengl32dll
operator|=
literal|true
expr_stmt|;
block|}
comment|// SetPixelFormat (as of Windows 7) requires a real window.
comment|// Create a dummy one as we are not associated with a window yet.
comment|// Try to find a suitable pixel format using preferably ARB extensions
comment|// (default to GDI) and store that.
name|HWND
name|dummyWindow
init|=
literal|0
decl_stmt|;
name|HDC
name|hdc
init|=
literal|0
decl_stmt|;
name|bool
name|tryExtensions
init|=
literal|false
decl_stmt|;
name|int
name|obtainedSwapInternal
init|=
operator|-
literal|1
decl_stmt|;
do|do
block|{
name|dummyWindow
operator|=
name|createDummyGLWindow
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dummyWindow
condition|)
break|break;
name|hdc
operator|=
name|GetDC
argument_list|(
name|dummyWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hdc
condition|)
break|break;
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|1
condition|)
name|describeFormats
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
comment|// Preferably use direct rendering and ARB extensions (unless pixmap
comment|// or explicitly turned off on command line).
specifier|const
name|QWindowsOpenGLAdditionalFormat
name|requestedAdditional
argument_list|(
name|QWindowsGLDirectRendering
argument_list|)
decl_stmt|;
name|tryExtensions
operator|=
name|m_staticContext
operator|->
name|hasExtensions
argument_list|()
operator|&&
operator|!
name|testFlag
argument_list|(
name|requestedAdditional
operator|.
name|formatFlags
argument_list|,
name|QWindowsGLRenderToPixmap
argument_list|)
operator|&&
operator|!
operator|(
name|QWindowsIntegration
operator|::
name|instance
argument_list|()
operator|->
name|options
argument_list|()
operator|&
name|QWindowsIntegration
operator|::
name|DisableArb
operator|)
expr_stmt|;
name|QWindowsOpenGLAdditionalFormat
name|obtainedAdditional
decl_stmt|;
if|if
condition|(
name|tryExtensions
condition|)
block|{
name|m_pixelFormat
operator|=
name|ARB
operator|::
name|choosePixelFormat
argument_list|(
name|hdc
argument_list|,
operator|*
name|m_staticContext
argument_list|,
name|format
argument_list|,
name|requestedAdditional
argument_list|,
operator|&
name|m_obtainedPixelFormatDescriptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_pixelFormat
operator|>
literal|0
condition|)
block|{
name|m_obtainedFormat
operator|=
name|ARB
operator|::
name|qSurfaceFormatFromHDC
argument_list|(
operator|*
name|m_staticContext
argument_list|,
name|hdc
argument_list|,
name|m_pixelFormat
argument_list|,
operator|&
name|obtainedAdditional
argument_list|)
expr_stmt|;
name|m_extensionsUsed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// tryExtensions
if|if
condition|(
operator|!
name|m_pixelFormat
condition|)
block|{
comment|// Failed, try GDI
name|m_pixelFormat
operator|=
name|GDI
operator|::
name|choosePixelFormat
argument_list|(
name|hdc
argument_list|,
name|format
argument_list|,
name|requestedAdditional
argument_list|,
operator|&
name|m_obtainedPixelFormatDescriptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_pixelFormat
condition|)
name|m_obtainedFormat
operator|=
name|GDI
operator|::
name|qSurfaceFormatFromPixelFormat
argument_list|(
name|m_obtainedPixelFormatDescriptor
argument_list|,
operator|&
name|obtainedAdditional
argument_list|)
expr_stmt|;
block|}
comment|// try GDI
if|if
condition|(
operator|!
name|m_pixelFormat
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Unable find a suitable pixel format."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|SetPixelFormat
argument_list|(
name|hdc
argument_list|,
name|m_pixelFormat
argument_list|,
operator|&
name|m_obtainedPixelFormatDescriptor
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"SetPixelFormat failed."
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Create context with sharing, again preferably using ARB.
name|HGLRC
name|sharingRenderingContext
init|=
literal|0
decl_stmt|;
if|if
condition|(
specifier|const
name|QPlatformOpenGLContext
modifier|*
name|sc
init|=
name|context
operator|->
name|shareHandle
argument_list|()
condition|)
name|sharingRenderingContext
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QWindowsGLContext
operator|*
argument_list|>
argument_list|(
name|sc
argument_list|)
operator|->
name|renderingContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_extensionsUsed
condition|)
name|m_renderingContext
operator|=
name|ARB
operator|::
name|createContext
argument_list|(
operator|*
name|m_staticContext
argument_list|,
name|hdc
argument_list|,
name|format
argument_list|,
name|requestedAdditional
argument_list|,
name|sharingRenderingContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_renderingContext
condition|)
name|m_renderingContext
operator|=
name|GDI
operator|::
name|createContext
argument_list|(
name|hdc
argument_list|,
name|sharingRenderingContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_renderingContext
condition|)
block|{
name|qWarning
argument_list|(
literal|"Unable to create a GL Context."
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Query obtained parameters and apply swap interval.
if|if
condition|(
operator|!
name|wglMakeCurrent
argument_list|(
name|hdc
argument_list|,
name|m_renderingContext
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to make context current."
argument_list|)
expr_stmt|;
break|break;
block|}
name|QWindowsOpenGLContextFormat
operator|::
name|current
argument_list|()
operator|.
name|apply
argument_list|(
operator|&
name|m_obtainedFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_staticContext
operator|->
name|wglGetSwapInternalExt
condition|)
name|obtainedSwapInternal
operator|=
name|m_staticContext
operator|->
name|wglGetSwapInternalExt
argument_list|()
expr_stmt|;
name|wglMakeCurrent
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|hdc
condition|)
name|ReleaseDC
argument_list|(
name|dummyWindow
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
if|if
condition|(
name|dummyWindow
condition|)
name|DestroyWindow
argument_list|(
name|dummyWindow
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
operator|(
name|tryExtensions
condition|?
literal|"ARB"
else|:
literal|"GDI"
operator|)
operator|<<
literal|" requested: "
operator|<<
name|context
operator|->
name|format
argument_list|()
operator|<<
literal|"\n    obtained #"
operator|<<
name|m_pixelFormat
operator|<<
operator|(
name|m_extensionsUsed
condition|?
literal|"ARB"
else|:
literal|"GDI"
operator|)
operator|<<
name|m_obtainedFormat
operator|<<
literal|"\n    "
operator|<<
name|m_obtainedPixelFormatDescriptor
operator|<<
literal|" swap interval: "
operator|<<
name|obtainedSwapInternal
operator|<<
literal|"\n    default: "
operator|<<
name|m_staticContext
operator|->
name|defaultFormat
operator|<<
literal|"\n    HGLRC="
operator|<<
name|m_renderingContext
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsGLContext
name|QWindowsGLContext
operator|::
name|~
name|QWindowsGLContext
parameter_list|()
block|{
if|if
condition|(
name|m_renderingContext
condition|)
name|wglDeleteContext
argument_list|(
name|m_renderingContext
argument_list|)
expr_stmt|;
name|releaseDCs
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|releaseDCs
name|void
name|QWindowsGLContext
operator|::
name|releaseDCs
parameter_list|()
block|{
specifier|const
name|QOpenGLContextData
modifier|*
name|end
init|=
name|m_windowContexts
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
specifier|const
name|QOpenGLContextData
modifier|*
name|p
init|=
name|m_windowContexts
operator|.
name|begin
argument_list|()
init|;
name|p
operator|<
name|end
condition|;
operator|++
name|p
control|)
name|ReleaseDC
argument_list|(
name|p
operator|->
name|hwnd
argument_list|,
name|p
operator|->
name|hdc
argument_list|)
expr_stmt|;
name|m_windowContexts
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|glWindowOf
specifier|static
specifier|inline
name|QWindowsWindow
modifier|*
name|glWindowOf
parameter_list|(
name|QPlatformSurface
modifier|*
name|s
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|QWindowsWindow
operator|*
argument_list|>
argument_list|(
name|s
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleOf
specifier|static
specifier|inline
name|HWND
name|handleOf
parameter_list|(
name|QPlatformSurface
modifier|*
name|s
parameter_list|)
block|{
return|return
name|glWindowOf
argument_list|(
name|s
argument_list|)
operator|->
name|handle
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// Find a window in a context list.
end_comment
begin_function
specifier|static
specifier|inline
specifier|const
name|QOpenGLContextData
modifier|*
DECL|function|findByHWND
name|findByHWND
parameter_list|(
specifier|const
name|Array
argument_list|<
name|QOpenGLContextData
argument_list|>
modifier|&
name|data
parameter_list|,
name|HWND
name|hwnd
parameter_list|)
block|{
specifier|const
name|QOpenGLContextData
modifier|*
name|end
init|=
name|data
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
specifier|const
name|QOpenGLContextData
modifier|*
name|p
init|=
name|data
operator|.
name|begin
argument_list|()
init|;
name|p
operator|<
name|end
condition|;
operator|++
name|p
control|)
if|if
condition|(
name|p
operator|->
name|hwnd
operator|==
name|hwnd
condition|)
return|return
name|p
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|swapBuffers
name|void
name|QWindowsGLContext
operator|::
name|swapBuffers
parameter_list|(
name|QPlatformSurface
modifier|*
name|surface
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|1
condition|)
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|surface
expr_stmt|;
if|if
condition|(
specifier|const
name|QOpenGLContextData
modifier|*
name|contextData
init|=
name|findByHWND
argument_list|(
name|m_windowContexts
argument_list|,
name|handleOf
argument_list|(
name|surface
argument_list|)
argument_list|)
condition|)
block|{
name|SwapBuffers
argument_list|(
name|contextData
operator|->
name|hdc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"%s: Cannot find window %p"
argument_list|,
name|__FUNCTION__
argument_list|,
name|handleOf
argument_list|(
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|makeCurrent
name|bool
name|QWindowsGLContext
operator|::
name|makeCurrent
parameter_list|(
name|QPlatformSurface
modifier|*
name|surface
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_GL
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|1
condition|)
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|m_windowContexts
operator|.
name|size
argument_list|()
operator|<<
literal|"contexts"
expr_stmt|;
endif|#
directive|endif
comment|// DEBUG_GL
name|Q_ASSERT
argument_list|(
name|surface
operator|->
name|surface
argument_list|()
operator|->
name|supportsOpenGL
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do we already have a DC entry for that window?
name|QWindowsWindow
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QWindowsWindow
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
specifier|const
name|HWND
name|hwnd
init|=
name|window
operator|->
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|QOpenGLContextData
modifier|*
name|contextData
init|=
name|findByHWND
argument_list|(
name|m_windowContexts
argument_list|,
name|hwnd
argument_list|)
condition|)
block|{
comment|// Repeated calls to wglMakeCurrent when vsync is enabled in the driver will
comment|// often result in 100% cpuload. This check is cheap and avoids the problem.
comment|// This is reproducable on NVidia cards and Intel onboard chips.
if|if
condition|(
name|wglGetCurrentContext
argument_list|()
operator|==
name|contextData
operator|->
name|renderingContext
operator|&&
name|wglGetCurrentDC
argument_list|()
operator|==
name|contextData
operator|->
name|hdc
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|wglMakeCurrent
argument_list|(
name|contextData
operator|->
name|hdc
argument_list|,
name|contextData
operator|->
name|renderingContext
argument_list|)
return|;
block|}
comment|// Create a new entry.
specifier|const
name|QOpenGLContextData
name|newContext
argument_list|(
name|m_renderingContext
argument_list|,
name|hwnd
argument_list|,
name|GetDC
argument_list|(
name|hwnd
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newContext
operator|.
name|hdc
condition|)
return|return
literal|false
return|;
comment|// Initialize pixel format first time. This will apply to
comment|// the HWND as well and  must be done only once.
if|if
condition|(
operator|!
name|window
operator|->
name|testFlag
argument_list|(
name|QWindowsWindow
operator|::
name|OpenGlPixelFormatInitialized
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|SetPixelFormat
argument_list|(
name|newContext
operator|.
name|hdc
argument_list|,
name|m_pixelFormat
argument_list|,
operator|&
name|m_obtainedPixelFormatDescriptor
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: SetPixelFormat() failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
name|newContext
operator|.
name|hwnd
argument_list|,
name|newContext
operator|.
name|hdc
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|window
operator|->
name|setFlag
argument_list|(
name|QWindowsWindow
operator|::
name|OpenGlPixelFormatInitialized
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_obtainedFormat
operator|.
name|swapBehavior
argument_list|()
operator|==
name|QSurfaceFormat
operator|::
name|DoubleBuffer
condition|)
name|window
operator|->
name|setFlag
argument_list|(
name|QWindowsWindow
operator|::
name|OpenGLDoubleBuffered
argument_list|)
expr_stmt|;
block|}
name|m_windowContexts
operator|.
name|append
argument_list|(
name|newContext
argument_list|)
expr_stmt|;
name|bool
name|success
init|=
name|wglMakeCurrent
argument_list|(
name|newContext
operator|.
name|hdc
argument_list|,
name|newContext
operator|.
name|renderingContext
argument_list|)
decl_stmt|;
comment|// Set the swap interval
if|if
condition|(
name|m_staticContext
operator|->
name|wglSwapInternalExt
condition|)
block|{
specifier|const
name|int
name|interval
init|=
name|surface
operator|->
name|format
argument_list|()
operator|.
name|swapInterval
argument_list|()
decl_stmt|;
if|if
condition|(
name|interval
operator|>=
literal|0
operator|&&
name|m_swapInterval
operator|!=
name|interval
condition|)
block|{
name|m_swapInterval
operator|=
name|interval
expr_stmt|;
name|m_staticContext
operator|->
name|wglSwapInternalExt
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|doneCurrent
name|void
name|QWindowsGLContext
operator|::
name|doneCurrent
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|DEBUG_GL
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|1
condition|)
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|this
operator|<<
name|m_windowContexts
operator|.
name|size
argument_list|()
operator|<<
literal|"contexts"
expr_stmt|;
endif|#
directive|endif
comment|// DEBUG_GL
name|wglMakeCurrent
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|releaseDCs
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getProcAddress
name|QWindowsGLContext
operator|::
name|GL_Proc
name|QWindowsGLContext
operator|::
name|getProcAddress
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|procName
parameter_list|)
block|{
comment|// TODO: Will that work with the calling conventions?
name|GL_Proc
name|procAddress
init|=
cast|reinterpret_cast
argument_list|<
name|GL_Proc
argument_list|>
argument_list|(
name|wglGetProcAddress
argument_list|(
name|procName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|1
condition|)
name|qCDebug
argument_list|(
name|lcQpaGl
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|procName
operator|<<
name|wglGetCurrentContext
argument_list|()
operator|<<
literal|"returns"
operator|<<
name|procAddress
expr_stmt|;
if|if
condition|(
operator|!
name|procAddress
condition|)
name|qWarning
argument_list|(
literal|"%s: Unable to resolve '%s'"
argument_list|,
name|__FUNCTION__
argument_list|,
name|procName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|procAddress
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
