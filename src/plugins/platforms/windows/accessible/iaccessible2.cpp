begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QtConfig>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"iaccessible2.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsaccessibility.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qaccessiblebridgeutils_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qaccessible.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qclipboard.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/**************************************************************\  *                     AccessibleApplication                  *  **************************************************************/
comment|//  IUnknown
DECL|function|QueryInterface
name|HRESULT
name|STDMETHODCALLTYPE
name|AccessibleApplication
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|id
parameter_list|,
name|LPVOID
modifier|*
name|iface
parameter_list|)
block|{
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|id
operator|==
name|IID_IUnknown
condition|)
block|{
name|qCDebug
argument_list|(
name|lcQpaAccessibility
argument_list|)
operator|<<
literal|"AccessibleApplication::QI(): IID_IUnknown"
expr_stmt|;
operator|*
name|iface
operator|=
operator|(
name|IUnknown
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleApplication
condition|)
block|{
name|qCDebug
argument_list|(
name|lcQpaAccessibility
argument_list|)
operator|<<
literal|"AccessibleApplication::QI(): IID_IAccessibleApplication"
expr_stmt|;
operator|*
name|iface
operator|=
cast|static_cast
argument_list|<
name|IAccessibleApplication
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|*
name|iface
condition|)
block|{
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_NOINTERFACE
return|;
block|}
end_function
begin_function
DECL|function|AddRef
name|ULONG
name|STDMETHODCALLTYPE
name|AccessibleApplication
operator|::
name|AddRef
parameter_list|()
block|{
return|return
operator|++
name|m_ref
return|;
block|}
end_function
begin_function
DECL|function|Release
name|ULONG
name|STDMETHODCALLTYPE
name|AccessibleApplication
operator|::
name|Release
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|--
name|m_ref
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|m_ref
return|;
block|}
end_function
begin_comment
comment|/* IAccessibleApplication */
end_comment
begin_function
DECL|function|get_appName
name|HRESULT
name|STDMETHODCALLTYPE
name|AccessibleApplication
operator|::
name|get_appName
parameter_list|(
comment|/* [retval][out] */
name|BSTR
modifier|*
name|name
parameter_list|)
block|{
specifier|const
name|QString
name|appName
init|=
name|QGuiApplication
operator|::
name|applicationName
argument_list|()
decl_stmt|;
operator|*
name|name
operator|=
name|QStringToBSTR
argument_list|(
name|appName
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_appVersion
name|HRESULT
name|STDMETHODCALLTYPE
name|AccessibleApplication
operator|::
name|get_appVersion
parameter_list|(
comment|/* [retval][out] */
name|BSTR
modifier|*
name|version
parameter_list|)
block|{
specifier|const
name|QString
name|appName
init|=
name|QGuiApplication
operator|::
name|applicationVersion
argument_list|()
decl_stmt|;
operator|*
name|version
operator|=
name|QStringToBSTR
argument_list|(
name|appName
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_toolkitName
name|HRESULT
name|STDMETHODCALLTYPE
name|AccessibleApplication
operator|::
name|get_toolkitName
parameter_list|(
comment|/* [retval][out] */
name|BSTR
modifier|*
name|name
parameter_list|)
block|{
operator|*
name|name
operator|=
operator|::
name|SysAllocString
argument_list|(
literal|L"Qt"
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_toolkitVersion
name|HRESULT
name|STDMETHODCALLTYPE
name|AccessibleApplication
operator|::
name|get_toolkitVersion
parameter_list|(
comment|/* [retval][out] */
name|BSTR
modifier|*
name|version
parameter_list|)
block|{
operator|*
name|version
operator|=
operator|::
name|SysAllocString
argument_list|(
name|QT_UNICODE_LITERAL
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                     AccessibleRelation                     *  **************************************************************/
end_comment
begin_constructor
DECL|function|AccessibleRelation
name|AccessibleRelation
operator|::
name|AccessibleRelation
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
modifier|&
name|targets
parameter_list|,
name|QAccessible
operator|::
name|Relation
name|relation
parameter_list|)
member_init_list|:
name|m_targets
argument_list|(
name|targets
argument_list|)
member_init_list|,
name|m_relation
argument_list|(
name|relation
argument_list|)
member_init_list|,
name|m_ref
argument_list|(
literal|1
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|m_targets
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/* IUnknown */
end_comment
begin_function
DECL|function|QueryInterface
name|HRESULT
name|STDMETHODCALLTYPE
name|AccessibleRelation
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|id
parameter_list|,
name|LPVOID
modifier|*
name|iface
parameter_list|)
block|{
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|id
operator|==
name|IID_IUnknown
operator|||
name|id
operator|==
name|IID_IAccessibleRelation
condition|)
operator|*
name|iface
operator|=
operator|(
name|IUnknown
operator|*
operator|)
name|this
expr_stmt|;
if|if
condition|(
operator|*
name|iface
condition|)
block|{
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_NOINTERFACE
return|;
block|}
end_function
begin_function
DECL|function|AddRef
name|ULONG
name|STDMETHODCALLTYPE
name|AccessibleRelation
operator|::
name|AddRef
parameter_list|()
block|{
return|return
operator|++
name|m_ref
return|;
block|}
end_function
begin_function
DECL|function|Release
name|ULONG
name|STDMETHODCALLTYPE
name|AccessibleRelation
operator|::
name|Release
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|--
name|m_ref
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|m_ref
return|;
block|}
end_function
begin_comment
comment|/* IAccessibleRelation */
end_comment
begin_function
DECL|function|get_relationType
name|HRESULT
name|STDMETHODCALLTYPE
name|AccessibleRelation
operator|::
name|get_relationType
parameter_list|(
comment|/* [retval][out] */
name|BSTR
modifier|*
name|relationType
parameter_list|)
block|{
operator|*
name|relationType
operator|=
name|relationToBSTR
argument_list|(
name|m_relation
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_localizedRelationType
name|HRESULT
name|STDMETHODCALLTYPE
name|AccessibleRelation
operator|::
name|get_localizedRelationType
parameter_list|(
comment|/* [retval][out] */
name|BSTR
modifier|*
name|localizedRelationType
parameter_list|)
block|{
comment|// Who ever needs this???
operator|*
name|localizedRelationType
operator|=
name|relationToBSTR
argument_list|(
name|m_relation
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_nTargets
name|HRESULT
name|STDMETHODCALLTYPE
name|AccessibleRelation
operator|::
name|get_nTargets
parameter_list|(
comment|/* [retval][out] */
name|long
modifier|*
name|nTargets
parameter_list|)
block|{
comment|// ### always one target
operator|*
name|nTargets
operator|=
name|m_targets
operator|.
name|count
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   Client allocates and deallocates array   (see "Special Consideration when using Arrays", in Accessible2.idl)   */
end_comment
begin_function
DECL|function|get_target
name|HRESULT
name|STDMETHODCALLTYPE
name|AccessibleRelation
operator|::
name|get_target
parameter_list|(
comment|/* [in] */
name|long
name|targetIndex
parameter_list|,
comment|/* [retval][out] */
name|IUnknown
modifier|*
modifier|*
name|target
parameter_list|)
block|{
if|if
condition|(
name|targetIndex
operator|>=
literal|0
operator|&&
name|targetIndex
operator|<
name|m_targets
operator|.
name|count
argument_list|()
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|m_targets
operator|.
name|at
argument_list|(
name|targetIndex
argument_list|)
decl_stmt|;
operator|*
name|target
operator|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|iface
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|target
condition|)
return|return
name|S_OK
return|;
return|return
name|E_FAIL
return|;
block|}
return|return
name|E_INVALIDARG
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   Client allocates and deallocates \a targets array   (see "Special Consideration when using Arrays", in Accessible2.idl)   */
end_comment
begin_function
DECL|function|get_targets
name|HRESULT
name|STDMETHODCALLTYPE
name|AccessibleRelation
operator|::
name|get_targets
parameter_list|(
comment|/* [in] */
name|long
name|maxTargets
parameter_list|,
comment|/* [length_is][size_is][out] */
name|IUnknown
modifier|*
modifier|*
name|targets
parameter_list|,
comment|/* [retval][out] */
name|long
modifier|*
name|nTargets
parameter_list|)
block|{
specifier|const
name|int
name|numTargets
init|=
name|qMin
argument_list|(
operator|(
name|int
operator|)
name|maxTargets
argument_list|,
name|m_targets
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTargets
condition|;
operator|++
name|i
control|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|m_targets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|IAccessible
modifier|*
name|iacc
init|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|iface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iacc
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|targets
operator|=
name|iacc
expr_stmt|;
operator|++
name|targets
expr_stmt|;
block|}
operator|*
name|nTargets
operator|=
name|numTargets
expr_stmt|;
comment|// \a targets array is allocated by client.
return|return
name|numTargets
operator|>
literal|0
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                                                             *  *                        IUnknown                             *  *                                                             *  **************************************************************/
end_comment
begin_function
DECL|function|QueryInterface
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|id
parameter_list|,
name|LPVOID
modifier|*
name|iface
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_NOINTERFACE
return|;
name|HRESULT
name|hr
init|=
name|QWindowsMsaaAccessible
operator|::
name|QueryInterface
argument_list|(
name|id
argument_list|,
name|iface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
if|if
condition|(
name|id
operator|==
name|IID_IServiceProvider
condition|)
block|{
operator|*
name|iface
operator|=
operator|(
name|IServiceProvider
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessible2
condition|)
block|{
operator|*
name|iface
operator|=
operator|(
name|IAccessible2
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleAction
condition|)
block|{
if|if
condition|(
name|accessible
operator|->
name|actionInterface
argument_list|()
condition|)
operator|*
name|iface
operator|=
operator|(
name|IAccessibleAction
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleComponent
condition|)
block|{
operator|*
name|iface
operator|=
operator|(
name|IAccessibleComponent
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleEditableText
condition|)
block|{
if|if
condition|(
name|accessible
operator|->
name|editableTextInterface
argument_list|()
operator|||
name|accessible
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|EditableText
condition|)
block|{
operator|*
name|iface
operator|=
operator|(
name|IAccessibleEditableText
operator|*
operator|)
name|this
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleHyperlink
condition|)
block|{
comment|//*iface = (IAccessibleHyperlink*)this;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleHypertext
condition|)
block|{
comment|//*iface = (IAccessibleHypertext*)this;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleImage
condition|)
block|{
comment|//*iface = (IAccessibleImage*)this;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleRelation
condition|)
block|{
operator|*
name|iface
operator|=
operator|(
name|IAccessibleRelation
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleTable
condition|)
block|{
comment|//*iface = (IAccessibleTable*)this; // not supported
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleTable2
condition|)
block|{
if|if
condition|(
name|accessible
operator|->
name|tableInterface
argument_list|()
condition|)
operator|*
name|iface
operator|=
operator|(
name|IAccessibleTable2
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleTableCell
condition|)
block|{
if|if
condition|(
name|accessible
operator|->
name|tableCellInterface
argument_list|()
condition|)
operator|*
name|iface
operator|=
operator|(
name|IAccessibleTableCell
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleText
condition|)
block|{
if|if
condition|(
name|accessible
operator|->
name|textInterface
argument_list|()
condition|)
operator|*
name|iface
operator|=
operator|(
name|IAccessibleText
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessibleValue
condition|)
block|{
if|if
condition|(
name|accessible
operator|->
name|valueInterface
argument_list|()
condition|)
operator|*
name|iface
operator|=
operator|(
name|IAccessibleValue
operator|*
operator|)
name|this
expr_stmt|;
block|}
if|if
condition|(
operator|*
name|iface
condition|)
block|{
name|AddRef
argument_list|()
expr_stmt|;
name|hr
operator|=
name|S_OK
expr_stmt|;
block|}
else|else
block|{
name|hr
operator|=
name|E_NOINTERFACE
expr_stmt|;
block|}
block|}
return|return
name|hr
return|;
block|}
end_function
begin_comment
comment|/* Note that IUnknown is inherited from several interfaces. Therefore we must reimplement all its    functions in the concrete class to avoid ambiguity. */
end_comment
begin_function
DECL|function|AddRef
name|ULONG
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|AddRef
parameter_list|()
block|{
return|return
name|QWindowsMsaaAccessible
operator|::
name|AddRef
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|Release
name|ULONG
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|Release
parameter_list|()
block|{
return|return
name|QWindowsMsaaAccessible
operator|::
name|Release
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                                                             *  *                        IAccessible2                         *  *                                                             *  **************************************************************/
end_comment
begin_function
DECL|function|get_nRelations
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_nRelations
parameter_list|(
name|long
modifier|*
name|nRelations
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nRelations
condition|)
return|return
name|E_INVALIDARG
return|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
return|return
name|getRelationsHelper
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|nRelations
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|get_relation
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_relation
parameter_list|(
name|long
name|relationIndex
parameter_list|,
name|IAccessibleRelation
modifier|*
modifier|*
name|relation
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|relation
condition|)
return|return
name|E_INVALIDARG
return|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
return|return
name|getRelationsHelper
argument_list|(
name|relation
argument_list|,
name|relationIndex
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   Client allocates and deallocates array   (see "Special Consideration when using Arrays", in Accessible2.idl)   */
end_comment
begin_function
DECL|function|get_relations
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_relations
parameter_list|(
name|long
name|maxRelations
parameter_list|,
name|IAccessibleRelation
modifier|*
modifier|*
name|relations
parameter_list|,
name|long
modifier|*
name|nRelations
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
return|return
name|getRelationsHelper
argument_list|(
name|relations
argument_list|,
literal|0
argument_list|,
name|maxRelations
argument_list|,
name|nRelations
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|role
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|role
parameter_list|(
name|long
modifier|*
name|ia2role
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|long
name|r
init|=
name|accessible
operator|->
name|role
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
name|QAccessible
operator|::
name|LayeredPane
case|:
name|r
operator|=
name|IA2_ROLE_LAYERED_PANE
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Terminal
case|:
name|r
operator|=
name|IA2_ROLE_TERMINAL
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Desktop
case|:
name|r
operator|=
name|IA2_ROLE_DESKTOP_PANE
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Paragraph
case|:
name|r
operator|=
name|IA2_ROLE_PARAGRAPH
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Section
case|:
name|r
operator|=
name|IA2_ROLE_SECTION
expr_stmt|;
break|break;
default|default:
break|break;
block|}
operator|*
name|ia2role
operator|=
name|r
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|scrollTo
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|scrollTo
parameter_list|(
name|enum
name|IA2ScrollType
comment|/*scrollType*/
parameter_list|)
block|{
comment|//### Ignore for now
return|return
name|E_NOTIMPL
return|;
block|}
end_function
begin_function
DECL|function|scrollToPoint
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|scrollToPoint
parameter_list|(
name|enum
name|IA2CoordinateType
comment|/*coordinateType*/
parameter_list|,
name|long
comment|/*x*/
parameter_list|,
name|long
comment|/*y*/
parameter_list|)
block|{
comment|//### Ignore for now
return|return
name|E_NOTIMPL
return|;
block|}
end_function
begin_function
DECL|function|get_groupPosition
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_groupPosition
parameter_list|(
name|long
modifier|*
name|groupLevel
parameter_list|,
name|long
modifier|*
name|similarItemsInGroup
parameter_list|,
name|long
modifier|*
name|positionInGroup
parameter_list|)
block|{
comment|// ### Ignore for now. Not sure what this is used for.....
operator|*
name|groupLevel
operator|=
literal|0
expr_stmt|;
comment|// Not applicable
operator|*
name|similarItemsInGroup
operator|=
literal|0
expr_stmt|;
comment|// Not applicable
operator|*
name|positionInGroup
operator|=
literal|0
expr_stmt|;
comment|// Not applicable
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_states
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_states
parameter_list|(
name|AccessibleStates
modifier|*
name|states
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
operator|!
name|states
condition|)
return|return
name|E_POINTER
return|;
name|QAccessible
operator|::
name|State
name|st
init|=
name|accessible
operator|->
name|state
argument_list|()
decl_stmt|;
name|AccessibleStates
name|ia2states
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|active
condition|)
name|ia2states
operator||=
name|IA2_STATE_ACTIVE
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|invalid
condition|)
name|ia2states
operator||=
name|IA2_STATE_DEFUNCT
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|editable
condition|)
name|ia2states
operator||=
name|IA2_STATE_EDITABLE
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|multiLine
condition|)
name|ia2states
operator||=
name|IA2_STATE_MULTI_LINE
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|selectableText
condition|)
name|ia2states
operator||=
name|IA2_STATE_SELECTABLE_TEXT
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|supportsAutoCompletion
condition|)
name|ia2states
operator||=
name|IA2_STATE_SUPPORTS_AUTOCOMPLETION
expr_stmt|;
operator|*
name|states
operator|=
name|ia2states
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_extendedRole
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_extendedRole
parameter_list|(
name|BSTR
modifier|*
name|extendedRole
parameter_list|)
block|{
comment|//###
operator|*
name|extendedRole
operator|=
literal|0
expr_stmt|;
return|return
name|E_NOTIMPL
return|;
comment|// mozilla does this
comment|//return S_FALSE;
block|}
end_function
begin_function
DECL|function|get_localizedExtendedRole
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_localizedExtendedRole
parameter_list|(
name|BSTR
modifier|*
name|localizedExtendedRole
parameter_list|)
block|{
comment|//###
operator|*
name|localizedExtendedRole
operator|=
literal|0
expr_stmt|;
return|return
name|E_NOTIMPL
return|;
comment|// mozilla does this
comment|//return S_FALSE;
block|}
end_function
begin_function
DECL|function|get_nExtendedStates
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_nExtendedStates
parameter_list|(
name|long
modifier|*
name|nExtendedStates
parameter_list|)
block|{
comment|// Who will ever intepret these values into something meaningful??
operator|*
name|nExtendedStates
operator|=
literal|0
expr_stmt|;
return|return
name|E_NOTIMPL
return|;
comment|// mozilla does this
comment|//return S_FALSE;
block|}
end_function
begin_function
DECL|function|get_extendedStates
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_extendedStates
parameter_list|(
name|long
comment|/*maxExtendedStates*/
parameter_list|,
name|BSTR
modifier|*
modifier|*
name|extendedStates
parameter_list|,
name|long
modifier|*
name|nExtendedStates
parameter_list|)
block|{
operator|*
name|extendedStates
operator|=
literal|0
expr_stmt|;
operator|*
name|nExtendedStates
operator|=
literal|0
expr_stmt|;
return|return
name|E_NOTIMPL
return|;
comment|// mozilla does this
comment|//return S_FALSE;
block|}
end_function
begin_function
DECL|function|get_localizedExtendedStates
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_localizedExtendedStates
parameter_list|(
name|long
comment|/*maxLocalizedExtendedStates*/
parameter_list|,
name|BSTR
modifier|*
modifier|*
name|localizedExtendedStates
parameter_list|,
name|long
modifier|*
name|nLocalizedExtendedStates
parameter_list|)
block|{
operator|*
name|localizedExtendedStates
operator|=
literal|0
expr_stmt|;
operator|*
name|nLocalizedExtendedStates
operator|=
literal|0
expr_stmt|;
return|return
name|E_NOTIMPL
return|;
comment|// mozilla does this
comment|//return S_FALSE;
block|}
end_function
begin_function
DECL|function|get_uniqueID
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_uniqueID
parameter_list|(
name|long
modifier|*
name|outUniqueID
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|qCDebug
argument_list|(
name|lcQpaAccessibility
argument_list|)
operator|<<
literal|"uniqueID: "
operator|<<
name|showbase
operator|<<
name|hex
operator|<<
name|id
expr_stmt|;
operator|*
name|outUniqueID
operator|=
operator|(
name|long
operator|)
name|id
expr_stmt|;
return|return
name|int
argument_list|(
name|id
argument_list|)
operator|<
literal|0
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_windowHandle
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_windowHandle
parameter_list|(
name|HWND
modifier|*
name|windowHandle
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
return|return
name|GetWindow
argument_list|(
name|windowHandle
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|get_indexInParent
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_indexInParent
parameter_list|(
name|long
modifier|*
name|indexInParent
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
operator|!
name|indexInParent
condition|)
return|return
name|E_INVALIDARG
return|;
name|QAccessibleInterface
modifier|*
name|par
init|=
name|accessible
operator|->
name|parent
argument_list|()
decl_stmt|;
operator|*
name|indexInParent
operator|=
name|par
condition|?
name|par
operator|->
name|indexOfChild
argument_list|(
name|accessible
argument_list|)
else|:
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|*
name|indexInParent
operator|<
literal|0
condition|)
block|{
name|qCWarning
argument_list|(
name|lcQpaAccessibility
argument_list|)
operator|<<
literal|"index in parent invalid:"
operator|<<
name|accessible
operator|<<
literal|"parent:"
operator|<<
name|par
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_locale
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_locale
parameter_list|(
name|IA2Locale
modifier|*
name|locale
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|IA2Locale
name|res
decl_stmt|;
name|QLocale
name|l
decl_stmt|;
name|res
operator|.
name|country
operator|=
name|QStringToBSTR
argument_list|(
name|QLocale
operator|::
name|countryToString
argument_list|(
name|l
operator|.
name|country
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|language
operator|=
name|QStringToBSTR
argument_list|(
name|QLocale
operator|::
name|languageToString
argument_list|(
name|l
operator|.
name|language
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|variant
operator|=
name|QStringToBSTR
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|locale
operator|=
name|res
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_attributes
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_attributes
parameter_list|(
name|BSTR
modifier|*
name|attributes
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|attributes
operator|=
literal|0
expr_stmt|;
comment|//QStringToBSTR(QString());
return|return
name|S_FALSE
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                      IAccessibleAction                      *  **************************************************************/
end_comment
begin_function
DECL|function|nActions
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|nActions
parameter_list|(
name|long
modifier|*
name|nActions
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|nActions
operator|=
name|QAccessibleBridgeUtils
operator|::
name|effectiveActionNames
argument_list|(
name|accessible
argument_list|)
operator|.
name|count
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|doAction
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|doAction
parameter_list|(
name|long
name|actionIndex
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
specifier|const
name|QStringList
name|actionNames
init|=
name|QAccessibleBridgeUtils
operator|::
name|effectiveActionNames
argument_list|(
name|accessible
argument_list|)
decl_stmt|;
if|if
condition|(
name|actionIndex
operator|<
literal|0
operator|||
name|actionIndex
operator|>=
name|actionNames
operator|.
name|count
argument_list|()
condition|)
return|return
name|E_INVALIDARG
return|;
specifier|const
name|QString
name|actionName
init|=
name|actionNames
operator|.
name|at
argument_list|(
name|actionIndex
argument_list|)
decl_stmt|;
return|return
name|QAccessibleBridgeUtils
operator|::
name|performEffectiveAction
argument_list|(
name|accessible
argument_list|,
name|actionName
argument_list|)
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_description
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_description
parameter_list|(
name|long
name|actionIndex
parameter_list|,
name|BSTR
modifier|*
name|description
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|description
operator|=
literal|0
expr_stmt|;
specifier|const
name|QStringList
name|actionNames
init|=
name|QAccessibleBridgeUtils
operator|::
name|effectiveActionNames
argument_list|(
name|accessible
argument_list|)
decl_stmt|;
if|if
condition|(
name|actionIndex
operator|<
literal|0
operator|||
name|actionIndex
operator|>=
name|actionNames
operator|.
name|count
argument_list|()
condition|)
return|return
name|E_INVALIDARG
return|;
specifier|const
name|QString
name|actionName
init|=
name|actionNames
operator|.
name|at
argument_list|(
name|actionIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|QAccessibleActionInterface
modifier|*
name|actionIface
init|=
name|actionInterface
argument_list|()
condition|)
operator|*
name|description
operator|=
name|QStringToBSTR
argument_list|(
name|actionIface
operator|->
name|localizedActionDescription
argument_list|(
name|actionName
argument_list|)
argument_list|)
expr_stmt|;
else|else
operator|*
name|description
operator|=
name|QStringToBSTR
argument_list|(
name|qAccessibleLocalizedActionDescription
argument_list|(
name|actionName
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|description
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_keyBinding
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_keyBinding
parameter_list|(
name|long
name|actionIndex
parameter_list|,
name|long
name|nMaxBindings
parameter_list|,
name|BSTR
modifier|*
modifier|*
name|keyBindings
parameter_list|,
name|long
modifier|*
name|nBindings
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|Q_UNUSED
argument_list|(
name|nMaxBindings
argument_list|)
expr_stmt|;
name|BSTR
modifier|*
name|arrayOfBindingsToReturn
init|=
literal|0
decl_stmt|;
name|int
name|numBindings
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QAccessibleActionInterface
modifier|*
name|actionIface
init|=
name|actionInterface
argument_list|()
condition|)
block|{
specifier|const
name|QStringList
name|actionNames
init|=
name|actionIface
operator|->
name|actionNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionIndex
operator|<
literal|0
operator|||
name|actionIndex
operator|>=
name|actionNames
operator|.
name|count
argument_list|()
condition|)
return|return
name|E_INVALIDARG
return|;
specifier|const
name|QString
name|actionName
init|=
name|actionNames
operator|.
name|at
argument_list|(
name|actionIndex
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|keyBindings
init|=
name|actionIface
operator|->
name|keyBindingsForAction
argument_list|(
name|actionName
argument_list|)
decl_stmt|;
name|numBindings
operator|=
name|keyBindings
operator|.
name|count
argument_list|()
expr_stmt|;
if|if
condition|(
name|numBindings
operator|>
literal|0
condition|)
block|{
comment|// The IDL documents that the client must free with CoTaskMemFree
name|arrayOfBindingsToReturn
operator|=
operator|(
name|BSTR
operator|*
operator|)
operator|::
name|CoTaskMemAlloc
argument_list|(
sizeof|sizeof
argument_list|(
name|BSTR
argument_list|)
operator|*
name|numBindings
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBindings
condition|;
operator|++
name|i
control|)
name|arrayOfBindingsToReturn
index|[
name|i
index|]
operator|=
name|QStringToBSTR
argument_list|(
name|keyBindings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|*
name|keyBindings
operator|=
name|arrayOfBindingsToReturn
expr_stmt|;
operator|*
name|nBindings
operator|=
name|numBindings
expr_stmt|;
return|return
name|numBindings
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_name
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_name
parameter_list|(
name|long
name|actionIndex
parameter_list|,
name|BSTR
modifier|*
name|name
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|name
operator|=
literal|0
expr_stmt|;
specifier|const
name|QStringList
name|actionNames
init|=
name|QAccessibleBridgeUtils
operator|::
name|effectiveActionNames
argument_list|(
name|accessible
argument_list|)
decl_stmt|;
if|if
condition|(
name|actionIndex
operator|<
literal|0
operator|||
name|actionIndex
operator|>=
name|actionNames
operator|.
name|count
argument_list|()
condition|)
return|return
name|E_INVALIDARG
return|;
specifier|const
name|QString
name|actionName
init|=
name|actionNames
operator|.
name|at
argument_list|(
name|actionIndex
argument_list|)
decl_stmt|;
operator|*
name|name
operator|=
name|QStringToBSTR
argument_list|(
name|actionName
argument_list|)
expr_stmt|;
return|return
operator|*
name|name
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_localizedName
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_localizedName
parameter_list|(
name|long
name|actionIndex
parameter_list|,
name|BSTR
modifier|*
name|localizedName
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|localizedName
operator|=
literal|0
expr_stmt|;
specifier|const
name|QStringList
name|actionNames
init|=
name|QAccessibleBridgeUtils
operator|::
name|effectiveActionNames
argument_list|(
name|accessible
argument_list|)
decl_stmt|;
if|if
condition|(
name|actionIndex
operator|<
literal|0
operator|||
name|actionIndex
operator|>=
name|actionNames
operator|.
name|count
argument_list|()
condition|)
return|return
name|E_INVALIDARG
return|;
specifier|const
name|QString
name|actionName
init|=
name|actionNames
operator|.
name|at
argument_list|(
name|actionIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|QAccessibleActionInterface
modifier|*
name|actionIface
init|=
name|actionInterface
argument_list|()
condition|)
operator|*
name|localizedName
operator|=
name|QStringToBSTR
argument_list|(
name|actionIface
operator|->
name|localizedActionName
argument_list|(
name|actionName
argument_list|)
argument_list|)
expr_stmt|;
else|else
operator|*
name|localizedName
operator|=
name|QStringToBSTR
argument_list|(
name|QAccessibleActionInterface
operator|::
name|tr
argument_list|(
name|qPrintable
argument_list|(
name|actionName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|localizedName
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                     IAccessibleComponent                    *  **************************************************************/
end_comment
begin_function
DECL|function|get_locationInParent
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_locationInParent
parameter_list|(
name|long
modifier|*
name|x
parameter_list|,
name|long
modifier|*
name|y
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QPoint
name|topLeft
init|=
name|accessible
operator|->
name|rect
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|parentIface
init|=
name|accessible
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentIface
operator|&&
name|parentIface
operator|->
name|isValid
argument_list|()
condition|)
name|topLeft
operator|-=
name|parentIface
operator|->
name|rect
argument_list|()
operator|.
name|topLeft
argument_list|()
expr_stmt|;
operator|*
name|x
operator|=
name|topLeft
operator|.
name|x
argument_list|()
expr_stmt|;
operator|*
name|y
operator|=
name|topLeft
operator|.
name|y
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_foreground
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_foreground
parameter_list|(
name|IA2Color
modifier|*
name|foreground
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
comment|// IA2Color is a typedef for long
operator|*
name|foreground
operator|=
operator|(
name|IA2Color
operator|)
name|accessible
operator|->
name|foregroundColor
argument_list|()
operator|.
name|rgb
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_background
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_background
parameter_list|(
name|IA2Color
modifier|*
name|background
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
comment|// IA2Color is a typedef for long
operator|*
name|background
operator|=
operator|(
name|IA2Color
operator|)
name|accessible
operator|->
name|backgroundColor
argument_list|()
operator|.
name|rgb
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                     IAccessibleEditableText                *  **************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_comment
comment|/*!     \internal      if \a endOffset == -1 it means end of the text */
end_comment
begin_function
DECL|function|textForRange
name|QString
name|QWindowsIA2Accessible
operator|::
name|textForRange
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
specifier|const
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|accessible
operator|->
name|textInterface
argument_list|()
condition|)
block|{
if|if
condition|(
name|endOffset
operator|==
name|IA2_TEXT_OFFSET_LENGTH
condition|)
name|endOffset
operator|=
name|textIface
operator|->
name|characterCount
argument_list|()
expr_stmt|;
return|return
name|textIface
operator|->
name|text
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
return|;
block|}
name|QString
name|txt
init|=
name|accessible
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
decl_stmt|;
if|if
condition|(
name|endOffset
operator|==
name|IA2_TEXT_OFFSET_LENGTH
condition|)
name|endOffset
operator|=
name|txt
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|txt
operator|.
name|mid
argument_list|(
name|startOffset
argument_list|,
name|endOffset
operator|-
name|startOffset
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|replaceTextFallback
name|void
name|QWindowsIA2Accessible
operator|::
name|replaceTextFallback
parameter_list|(
name|long
name|startOffset
parameter_list|,
name|long
name|endOffset
parameter_list|,
specifier|const
name|QString
modifier|&
name|txt
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|QString
name|t
init|=
name|textForRange
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|endOffset
operator|==
name|IA2_TEXT_OFFSET_LENGTH
condition|)
name|endOffset
operator|=
name|t
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|endOffset
operator|-
name|startOffset
operator|==
literal|0
condition|)
block|{
name|t
operator|.
name|insert
argument_list|(
name|startOffset
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|replace
argument_list|(
name|startOffset
argument_list|,
name|endOffset
operator|-
name|startOffset
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
name|accessible
operator|->
name|setText
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyText
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|copyText
parameter_list|(
name|long
name|startOffset
parameter_list|,
name|long
name|endOffset
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
specifier|const
name|QString
name|t
init|=
name|textForRange
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
else|#
directive|else
return|return
name|E_NOTIMPL
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|deleteText
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|deleteText
parameter_list|(
name|long
name|startOffset
parameter_list|,
name|long
name|endOffset
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleEditableTextInterface
modifier|*
name|editableTextIface
init|=
name|accessible
operator|->
name|editableTextInterface
argument_list|()
condition|)
name|editableTextIface
operator|->
name|deleteText
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
else|else
name|replaceTextFallback
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|insertText
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|insertText
parameter_list|(
name|long
name|offset
parameter_list|,
name|BSTR
modifier|*
name|text
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|txt
argument_list|(
name|BSTRToQString
argument_list|(
operator|*
name|text
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|QAccessibleEditableTextInterface
modifier|*
name|editableTextIface
init|=
name|accessible
operator|->
name|editableTextInterface
argument_list|()
condition|)
name|editableTextIface
operator|->
name|insertText
argument_list|(
name|offset
argument_list|,
name|txt
argument_list|)
expr_stmt|;
else|else
name|replaceTextFallback
argument_list|(
name|offset
argument_list|,
name|offset
argument_list|,
name|txt
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|cutText
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|cutText
parameter_list|(
name|long
name|startOffset
parameter_list|,
name|long
name|endOffset
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
specifier|const
name|QString
name|t
init|=
name|textForRange
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|QAccessibleEditableTextInterface
modifier|*
name|editableTextIface
init|=
name|accessible
operator|->
name|editableTextInterface
argument_list|()
condition|)
name|editableTextIface
operator|->
name|deleteText
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
else|else
name|replaceTextFallback
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setText
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
else|#
directive|else
return|return
name|E_NOTIMPL
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|pasteText
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|pasteText
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
specifier|const
name|QString
name|txt
init|=
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|QAccessibleEditableTextInterface
modifier|*
name|editableTextIface
init|=
name|accessible
operator|->
name|editableTextInterface
argument_list|()
condition|)
name|editableTextIface
operator|->
name|insertText
argument_list|(
name|offset
argument_list|,
name|txt
argument_list|)
expr_stmt|;
else|else
name|replaceTextFallback
argument_list|(
name|offset
argument_list|,
name|offset
argument_list|,
name|txt
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
else|#
directive|else
return|return
name|E_NOTIMPL
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|replaceText
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|replaceText
parameter_list|(
name|long
name|startOffset
parameter_list|,
name|long
name|endOffset
parameter_list|,
name|BSTR
modifier|*
name|text
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|txt
argument_list|(
name|BSTRToQString
argument_list|(
operator|*
name|text
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|QAccessibleEditableTextInterface
modifier|*
name|editableTextIface
init|=
name|accessible
operator|->
name|editableTextInterface
argument_list|()
condition|)
name|editableTextIface
operator|->
name|replaceText
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|txt
argument_list|)
expr_stmt|;
else|else
name|replaceTextFallback
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|txt
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|setAttributes
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|setAttributes
parameter_list|(
name|long
comment|/*startOffset*/
parameter_list|,
name|long
comment|/*endOffset*/
parameter_list|,
name|BSTR
modifier|*
comment|/*attributes*/
parameter_list|)
block|{
return|return
name|E_NOTIMPL
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                     IAccessibleTable2                      *  **************************************************************/
end_comment
begin_function
DECL|function|get_cellAt
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_cellAt
parameter_list|(
name|long
name|row
parameter_list|,
name|long
name|column
parameter_list|,
name|IUnknown
modifier|*
modifier|*
name|cell
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|cell
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
if|if
condition|(
name|QAccessibleInterface
modifier|*
name|qtCell
init|=
name|tableIface
operator|->
name|cellAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
condition|)
block|{
operator|*
name|cell
operator|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|qtCell
argument_list|)
expr_stmt|;
block|}
block|}
name|qCDebug
argument_list|(
name|lcQpaAccessibility
argument_list|)
operator|<<
literal|"found cell? "
operator|<<
operator|*
name|cell
expr_stmt|;
return|return
operator|*
name|cell
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_caption
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_caption
parameter_list|(
name|IUnknown
modifier|*
modifier|*
name|captionInterface
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|captionInterface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
if|if
condition|(
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|tableIface
operator|->
name|caption
argument_list|()
condition|)
operator|*
name|captionInterface
operator|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|iface
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|captionInterface
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_columnDescription
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_columnDescription
parameter_list|(
name|long
name|column
parameter_list|,
name|BSTR
modifier|*
name|description
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|description
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|qtDesc
init|=
name|tableIface
operator|->
name|columnDescription
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qtDesc
operator|.
name|isEmpty
argument_list|()
condition|)
operator|*
name|description
operator|=
name|QStringToBSTR
argument_list|(
name|qtDesc
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|description
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_nColumns
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_nColumns
parameter_list|(
name|long
modifier|*
name|columnCount
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
operator|*
name|columnCount
operator|=
name|tableIface
operator|->
name|columnCount
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_nRows
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_nRows
parameter_list|(
name|long
modifier|*
name|rowCount
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
operator|*
name|rowCount
operator|=
name|tableIface
operator|->
name|rowCount
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_nSelectedCells
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_nSelectedCells
parameter_list|(
name|long
modifier|*
name|cellCount
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
operator|*
name|cellCount
operator|=
name|tableIface
operator|->
name|selectedCellCount
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_nSelectedColumns
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_nSelectedColumns
parameter_list|(
name|long
modifier|*
name|columnCount
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
operator|*
name|columnCount
operator|=
name|tableIface
operator|->
name|selectedColumnCount
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_nSelectedRows
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_nSelectedRows
parameter_list|(
name|long
modifier|*
name|rowCount
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
operator|*
name|rowCount
operator|=
name|tableIface
operator|->
name|selectedRowCount
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_rowDescription
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_rowDescription
parameter_list|(
name|long
name|row
parameter_list|,
name|BSTR
modifier|*
name|description
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|description
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|qtDesc
init|=
name|tableIface
operator|->
name|rowDescription
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qtDesc
operator|.
name|isEmpty
argument_list|()
condition|)
operator|*
name|description
operator|=
name|QStringToBSTR
argument_list|(
name|qtDesc
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|description
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_selectedCells
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_selectedCells
parameter_list|(
name|IUnknown
modifier|*
modifier|*
modifier|*
name|cells
parameter_list|,
name|long
modifier|*
name|nSelectedCells
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|cells
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|nSelectedCells
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|selectedCells
init|=
name|tableInterface
argument_list|()
operator|->
name|selectedCells
argument_list|()
decl_stmt|;
return|return
name|wrapListOfCells
argument_list|(
name|selectedCells
argument_list|,
name|cells
argument_list|,
name|nSelectedCells
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|get_selectedColumns
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_selectedColumns
parameter_list|(
name|long
modifier|*
modifier|*
name|selectedColumns
parameter_list|,
name|long
modifier|*
name|nColumns
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
name|selectedIndices
init|=
name|tableIface
operator|->
name|selectedColumns
argument_list|()
decl_stmt|;
specifier|const
name|int
modifier|&
name|count
init|=
name|selectedIndices
operator|.
name|count
argument_list|()
decl_stmt|;
name|long
modifier|*
name|selected
init|=
operator|(
name|count
condition|?
operator|(
name|long
operator|*
operator|)
operator|::
name|CoTaskMemAlloc
argument_list|(
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|*
name|count
argument_list|)
else|:
operator|(
name|long
operator|*
operator|)
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|selected
index|[
name|i
index|]
operator|=
name|selectedIndices
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|*
name|selectedColumns
operator|=
name|selected
expr_stmt|;
operator|*
name|nColumns
operator|=
name|count
expr_stmt|;
return|return
name|count
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_selectedRows
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_selectedRows
parameter_list|(
name|long
modifier|*
modifier|*
name|selectedRows
parameter_list|,
name|long
modifier|*
name|nRows
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
name|selectedIndices
init|=
name|tableIface
operator|->
name|selectedRows
argument_list|()
decl_stmt|;
specifier|const
name|int
modifier|&
name|count
init|=
name|selectedIndices
operator|.
name|count
argument_list|()
decl_stmt|;
name|long
modifier|*
name|selected
init|=
operator|(
name|count
condition|?
operator|(
name|long
operator|*
operator|)
operator|::
name|CoTaskMemAlloc
argument_list|(
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|*
name|count
argument_list|)
else|:
operator|(
name|long
operator|*
operator|)
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|selected
index|[
name|i
index|]
operator|=
name|selectedIndices
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|*
name|selectedRows
operator|=
name|selected
expr_stmt|;
operator|*
name|nRows
operator|=
name|count
expr_stmt|;
return|return
name|count
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_summary
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_summary
parameter_list|(
name|IUnknown
modifier|*
modifier|*
name|summaryInterface
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|summaryInterface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
if|if
condition|(
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|tableIface
operator|->
name|summary
argument_list|()
condition|)
operator|*
name|summaryInterface
operator|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|iface
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|summaryInterface
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_isColumnSelected
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_isColumnSelected
parameter_list|(
name|long
name|column
parameter_list|,
name|boolean
modifier|*
name|isSelected
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
operator|*
name|isSelected
operator|=
name|tableIface
operator|->
name|isColumnSelected
argument_list|(
name|column
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_isRowSelected
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_isRowSelected
parameter_list|(
name|long
name|row
parameter_list|,
name|boolean
modifier|*
name|isSelected
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
operator|*
name|isSelected
operator|=
name|tableIface
operator|->
name|isRowSelected
argument_list|(
name|row
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|selectRow
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|selectRow
parameter_list|(
name|long
name|row
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
name|bool
name|ok
init|=
name|tableIface
operator|->
name|selectRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|ok
condition|?
name|S_OK
else|:
name|E_INVALIDARG
return|;
comment|//### Not sure of the return value if it fails???
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|selectColumn
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|selectColumn
parameter_list|(
name|long
name|column
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
name|bool
name|ok
init|=
name|tableIface
operator|->
name|selectColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
return|return
name|ok
condition|?
name|S_OK
else|:
name|E_INVALIDARG
return|;
comment|//### Not sure of the return value if it fails???
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|unselectRow
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|unselectRow
parameter_list|(
name|long
name|row
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
name|bool
name|ok
init|=
name|tableIface
operator|->
name|unselectRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|ok
condition|?
name|S_OK
else|:
name|E_INVALIDARG
return|;
comment|//### Not sure of the return value if it fails???
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|unselectColumn
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|unselectColumn
parameter_list|(
name|long
name|column
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleTableInterface
modifier|*
name|tableIface
init|=
name|tableInterface
argument_list|()
condition|)
block|{
name|bool
name|ok
init|=
name|tableIface
operator|->
name|unselectColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
return|return
name|ok
condition|?
name|S_OK
else|:
name|E_INVALIDARG
return|;
comment|//### Not sure of the return value if it fails???
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_modelChange
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_modelChange
parameter_list|(
name|IA2TableModelChange
modifier|*
comment|/*modelChange*/
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
return|return
name|E_NOTIMPL
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                     IAccessibleTableCell                   * \**************************************************************/
end_comment
begin_function
DECL|function|get_columnExtent
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_columnExtent
parameter_list|(
name|long
modifier|*
name|nColumnsSpanned
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|nColumnsSpanned
operator|=
name|tableCellInterface
argument_list|()
operator|->
name|columnExtent
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_columnHeaderCells
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_columnHeaderCells
parameter_list|(
name|IUnknown
modifier|*
modifier|*
modifier|*
name|cellAccessibles
parameter_list|,
name|long
modifier|*
name|nColumnHeaderCells
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
specifier|const
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|headerCells
init|=
name|tableCellInterface
argument_list|()
operator|->
name|columnHeaderCells
argument_list|()
decl_stmt|;
return|return
name|wrapListOfCells
argument_list|(
name|headerCells
argument_list|,
name|cellAccessibles
argument_list|,
name|nColumnHeaderCells
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|get_columnIndex
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_columnIndex
parameter_list|(
name|long
modifier|*
name|columnIndex
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|columnIndex
operator|=
name|tableCellInterface
argument_list|()
operator|->
name|columnIndex
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_rowExtent
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_rowExtent
parameter_list|(
name|long
modifier|*
name|nRowsSpanned
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|nRowsSpanned
operator|=
name|tableCellInterface
argument_list|()
operator|->
name|rowExtent
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_rowHeaderCells
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_rowHeaderCells
parameter_list|(
name|IUnknown
modifier|*
modifier|*
modifier|*
name|cellAccessibles
parameter_list|,
name|long
modifier|*
name|nRowHeaderCells
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
specifier|const
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|headerCells
init|=
name|tableCellInterface
argument_list|()
operator|->
name|rowHeaderCells
argument_list|()
decl_stmt|;
return|return
name|wrapListOfCells
argument_list|(
name|headerCells
argument_list|,
name|cellAccessibles
argument_list|,
name|nRowHeaderCells
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|get_rowIndex
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_rowIndex
parameter_list|(
name|long
modifier|*
name|rowIndex
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|rowIndex
operator|=
name|tableCellInterface
argument_list|()
operator|->
name|rowIndex
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_isSelected
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_isSelected
parameter_list|(
name|boolean
modifier|*
name|isSelected
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|isSelected
operator|=
name|tableCellInterface
argument_list|()
operator|->
name|isSelected
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_rowColumnExtents
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_rowColumnExtents
parameter_list|(
name|long
modifier|*
name|row
parameter_list|,
name|long
modifier|*
name|column
parameter_list|,
name|long
modifier|*
name|rowExtents
parameter_list|,
name|long
modifier|*
name|columnExtents
parameter_list|,
name|boolean
modifier|*
name|isSelected
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
operator|||
operator|!
name|tableCellInterface
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|row
operator|=
operator|(
name|long
operator|)
name|tableCellInterface
argument_list|()
operator|->
name|rowIndex
argument_list|()
expr_stmt|;
operator|*
name|column
operator|=
operator|(
name|long
operator|)
name|tableCellInterface
argument_list|()
operator|->
name|columnIndex
argument_list|()
expr_stmt|;
operator|*
name|rowExtents
operator|=
operator|(
name|long
operator|)
name|tableCellInterface
argument_list|()
operator|->
name|rowExtent
argument_list|()
expr_stmt|;
operator|*
name|columnExtents
operator|=
operator|(
name|long
operator|)
name|tableCellInterface
argument_list|()
operator|->
name|columnExtent
argument_list|()
expr_stmt|;
operator|*
name|isSelected
operator|=
name|tableCellInterface
argument_list|()
operator|->
name|isSelected
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_table
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_table
parameter_list|(
name|IUnknown
modifier|*
modifier|*
name|table
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QAccessibleInterface
modifier|*
name|tableIface
init|=
name|tableCellInterface
argument_list|()
operator|->
name|table
argument_list|()
decl_stmt|;
operator|*
name|table
operator|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|tableIface
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                     IAccessibleText                        * \**************************************************************/
end_comment
begin_function
DECL|function|addSelection
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|addSelection
parameter_list|(
name|long
name|startOffset
parameter_list|,
name|long
name|endOffset
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|text
init|=
name|textInterface
argument_list|()
condition|)
block|{
name|text
operator|->
name|addSelection
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_attributes
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_attributes
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
modifier|*
name|startOffset
parameter_list|,
name|long
modifier|*
name|endOffset
parameter_list|,
name|BSTR
modifier|*
name|textAttributes
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|text
init|=
name|textInterface
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|attrs
init|=
name|text
operator|->
name|attributes
argument_list|(
name|offset
argument_list|,
operator|(
name|int
operator|*
operator|)
name|startOffset
argument_list|,
operator|(
name|int
operator|*
operator|)
name|endOffset
argument_list|)
decl_stmt|;
operator|*
name|textAttributes
operator|=
name|QStringToBSTR
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_caretOffset
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_caretOffset
parameter_list|(
name|long
modifier|*
name|offset
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|text
init|=
name|textInterface
argument_list|()
condition|)
block|{
operator|*
name|offset
operator|=
name|text
operator|->
name|cursorPosition
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_characterExtents
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_characterExtents
parameter_list|(
name|long
name|offset
parameter_list|,
name|enum
name|IA2CoordinateType
name|coordType
parameter_list|,
name|long
modifier|*
name|x
parameter_list|,
name|long
modifier|*
name|y
parameter_list|,
name|long
modifier|*
name|width
parameter_list|,
name|long
modifier|*
name|height
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|text
init|=
name|textInterface
argument_list|()
condition|)
block|{
name|QRect
name|rect
init|=
name|text
operator|->
name|characterRect
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|mapFromScreenPos
argument_list|(
name|coordType
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
operator|*
name|width
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
operator|*
name|height
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_nSelections
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_nSelections
parameter_list|(
name|long
modifier|*
name|nSelections
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|text
init|=
name|textInterface
argument_list|()
condition|)
block|{
operator|*
name|nSelections
operator|=
name|text
operator|->
name|selectionCount
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_offsetAtPoint
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_offsetAtPoint
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|enum
name|IA2CoordinateType
name|coordType
parameter_list|,
name|long
modifier|*
name|offset
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|text
init|=
name|textInterface
argument_list|()
condition|)
block|{
name|QPoint
name|screenPos
init|=
name|mapToScreenPos
argument_list|(
name|coordType
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
operator|*
name|offset
operator|=
name|text
operator|->
name|offsetAtPoint
argument_list|(
name|screenPos
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|offset
operator|>=
literal|0
condition|?
name|S_OK
else|:
name|S_FALSE
operator|)
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_selection
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_selection
parameter_list|(
name|long
name|selectionIndex
parameter_list|,
name|long
modifier|*
name|startOffset
parameter_list|,
name|long
modifier|*
name|endOffset
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|text
init|=
name|textInterface
argument_list|()
condition|)
block|{
name|text
operator|->
name|selection
argument_list|(
name|selectionIndex
argument_list|,
operator|(
name|int
operator|*
operator|)
name|startOffset
argument_list|,
operator|(
name|int
operator|*
operator|)
name|endOffset
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_text
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_text
parameter_list|(
name|long
name|startOffset
parameter_list|,
name|long
name|endOffset
parameter_list|,
name|BSTR
modifier|*
name|text
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textif
init|=
name|textInterface
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|t
init|=
name|textif
operator|->
name|text
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|text
operator|=
name|QStringToBSTR
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_INVALIDARG
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_textBeforeOffset
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_textBeforeOffset
parameter_list|(
name|long
name|offset
parameter_list|,
name|enum
name|IA2TextBoundaryType
name|boundaryType
parameter_list|,
name|long
modifier|*
name|startOffset
parameter_list|,
name|long
modifier|*
name|endOffset
parameter_list|,
name|BSTR
modifier|*
name|text
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|textInterface
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|txt
init|=
name|textIface
operator|->
name|textBeforeOffset
argument_list|(
name|offset
argument_list|,
operator|(
name|QAccessible
operator|::
name|TextBoundaryType
operator|)
name|boundaryType
argument_list|,
operator|(
name|int
operator|*
operator|)
name|startOffset
argument_list|,
operator|(
name|int
operator|*
operator|)
name|endOffset
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|txt
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|text
operator|=
name|QStringToBSTR
argument_list|(
name|txt
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|S_FALSE
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_textAfterOffset
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_textAfterOffset
parameter_list|(
name|long
name|offset
parameter_list|,
name|enum
name|IA2TextBoundaryType
name|boundaryType
parameter_list|,
name|long
modifier|*
name|startOffset
parameter_list|,
name|long
modifier|*
name|endOffset
parameter_list|,
name|BSTR
modifier|*
name|text
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|textInterface
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|txt
init|=
name|textIface
operator|->
name|textAfterOffset
argument_list|(
name|offset
argument_list|,
operator|(
name|QAccessible
operator|::
name|TextBoundaryType
operator|)
name|boundaryType
argument_list|,
operator|(
name|int
operator|*
operator|)
name|startOffset
argument_list|,
operator|(
name|int
operator|*
operator|)
name|endOffset
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|txt
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|text
operator|=
name|QStringToBSTR
argument_list|(
name|txt
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|S_FALSE
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_textAtOffset
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_textAtOffset
parameter_list|(
name|long
name|offset
parameter_list|,
name|enum
name|IA2TextBoundaryType
name|boundaryType
parameter_list|,
name|long
modifier|*
name|startOffset
parameter_list|,
name|long
modifier|*
name|endOffset
parameter_list|,
name|BSTR
modifier|*
name|text
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|textInterface
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|txt
init|=
name|textIface
operator|->
name|textAtOffset
argument_list|(
name|offset
argument_list|,
operator|(
name|QAccessible
operator|::
name|TextBoundaryType
operator|)
name|boundaryType
argument_list|,
operator|(
name|int
operator|*
operator|)
name|startOffset
argument_list|,
operator|(
name|int
operator|*
operator|)
name|endOffset
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|txt
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|text
operator|=
name|QStringToBSTR
argument_list|(
name|txt
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|S_FALSE
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|removeSelection
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|removeSelection
parameter_list|(
name|long
name|selectionIndex
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|textInterface
argument_list|()
condition|)
block|{
name|textIface
operator|->
name|removeSelection
argument_list|(
name|selectionIndex
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|setCaretOffset
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|setCaretOffset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|textInterface
argument_list|()
condition|)
block|{
name|textIface
operator|->
name|setCursorPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|setSelection
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|setSelection
parameter_list|(
name|long
name|selectionIndex
parameter_list|,
name|long
name|startOffset
parameter_list|,
name|long
name|endOffset
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|textInterface
argument_list|()
condition|)
block|{
name|textIface
operator|->
name|setSelection
argument_list|(
name|selectionIndex
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|get_nCharacters
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_nCharacters
parameter_list|(
name|long
modifier|*
name|nCharacters
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|textInterface
argument_list|()
condition|)
block|{
operator|*
name|nCharacters
operator|=
name|textIface
operator|->
name|characterCount
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|scrollSubstringTo
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|scrollSubstringTo
parameter_list|(
name|long
name|startIndex
parameter_list|,
name|long
name|endIndex
parameter_list|,
name|enum
name|IA2ScrollType
name|scrollType
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|textInterface
argument_list|()
condition|)
block|{
name|Q_UNUSED
argument_list|(
name|scrollType
argument_list|)
expr_stmt|;
comment|//###
name|textIface
operator|->
name|scrollToSubstring
argument_list|(
name|startIndex
argument_list|,
name|endIndex
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_function
DECL|function|scrollSubstringToPoint
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|scrollSubstringToPoint
parameter_list|(
name|long
name|startIndex
parameter_list|,
name|long
name|endIndex
parameter_list|,
name|enum
name|IA2CoordinateType
name|coordinateType
parameter_list|,
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|startIndex
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|endIndex
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|coordinateType
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|y
argument_list|)
expr_stmt|;
return|return
name|E_NOTIMPL
return|;
block|}
end_function
begin_function
DECL|function|get_newText
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_newText
parameter_list|(
name|IA2TextSegment
modifier|*
name|newText
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|newText
argument_list|)
expr_stmt|;
return|return
name|E_NOTIMPL
return|;
block|}
end_function
begin_function
DECL|function|get_oldText
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_oldText
parameter_list|(
name|IA2TextSegment
modifier|*
name|oldText
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|oldText
argument_list|)
expr_stmt|;
return|return
name|E_NOTIMPL
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                         IAccessibleValue                    *  **************************************************************/
end_comment
begin_function
DECL|function|get_currentValue
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_currentValue
parameter_list|(
name|VARIANT
modifier|*
name|currentValue
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleValueInterface
modifier|*
name|valueIface
init|=
name|valueInterface
argument_list|()
condition|)
block|{
specifier|const
name|QVariant
name|var
init|=
name|valueIface
operator|->
name|currentValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|QVariant2VARIANT
argument_list|(
name|var
argument_list|,
operator|*
name|currentValue
argument_list|,
name|QByteArray
argument_list|()
argument_list|,
literal|false
argument_list|)
condition|)
return|return
name|S_OK
return|;
block|}
name|currentValue
operator|->
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|setCurrentValue
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|setCurrentValue
parameter_list|(
name|VARIANT
name|value
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|HRESULT
name|hr
init|=
name|S_FALSE
decl_stmt|;
if|if
condition|(
name|QAccessibleValueInterface
modifier|*
name|valueIface
init|=
name|valueInterface
argument_list|()
condition|)
block|{
name|hr
operator|=
name|VariantChangeType
argument_list|(
operator|&
name|value
argument_list|,
operator|&
name|value
argument_list|,
literal|0
argument_list|,
name|VT_R8
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
comment|// ### works only for numbers (not date, strings, etc)
name|valueIface
operator|->
name|setCurrentValue
argument_list|(
name|QVariant
argument_list|(
name|value
operator|.
name|dblVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|hr
return|;
block|}
end_function
begin_function
DECL|function|get_maximumValue
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_maximumValue
parameter_list|(
name|VARIANT
modifier|*
name|maximumValue
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleValueInterface
modifier|*
name|valueIface
init|=
name|valueInterface
argument_list|()
condition|)
block|{
specifier|const
name|QVariant
name|var
init|=
name|valueIface
operator|->
name|maximumValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|QVariant2VARIANT
argument_list|(
name|var
argument_list|,
operator|*
name|maximumValue
argument_list|,
name|QByteArray
argument_list|()
argument_list|,
literal|false
argument_list|)
condition|)
return|return
name|S_OK
return|;
block|}
name|maximumValue
operator|->
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_minimumValue
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|get_minimumValue
parameter_list|(
name|VARIANT
modifier|*
name|minimumValue
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleValueInterface
modifier|*
name|valueIface
init|=
name|valueInterface
argument_list|()
condition|)
block|{
specifier|const
name|QVariant
name|var
init|=
name|valueIface
operator|->
name|minimumValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|QVariant2VARIANT
argument_list|(
name|var
argument_list|,
operator|*
name|minimumValue
argument_list|,
name|QByteArray
argument_list|()
argument_list|,
literal|false
argument_list|)
condition|)
return|return
name|S_OK
return|;
block|}
name|minimumValue
operator|->
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                      IServiceProvider                       *  **************************************************************/
end_comment
begin_comment
comment|/*!   \internal   Reimplemented from IServiceProvider */
end_comment
begin_function
DECL|function|QueryService
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsIA2Accessible
operator|::
name|QueryService
parameter_list|(
name|REFGUID
name|guidService
parameter_list|,
name|REFIID
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|iface
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iface
condition|)
return|return
name|E_POINTER
return|;
name|Q_UNUSED
argument_list|(
name|guidService
argument_list|)
expr_stmt|;
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaAccessibility
argument_list|)
operator|<<
literal|"QWindowsIA2Accessible::QS(): "
operator|<<
name|IIDToString
argument_list|(
name|riid
argument_list|)
expr_stmt|;
if|if
condition|(
name|guidService
operator|==
name|IID_IAccessible
condition|)
block|{
if|if
condition|(
name|riid
operator|==
name|IID_IServiceProvider
condition|)
block|{
comment|// do not end up calling QueryInterface for IID_IServiceProvider
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|riid
operator|==
name|IID_IAccessible
operator|||
name|riid
operator|==
name|IID_IUnknown
operator|||
name|riid
operator|==
name|IID_IDispatch
condition|)
block|{
comment|// The above conditions works with AccProbe and NVDA.
operator|*
name|iface
operator|=
cast|static_cast
argument_list|<
name|IAccessible
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// According to _dicoveringInterfaces Discovery of Interfaces, we should really only
comment|// enter here if riid == IID_IAccessible2, but some screen readers does not like that,
comment|// and other servers seems to have realized that. (Chrome and Mozilla for instance,
comment|// calls QueryInterface more or less in the same way)
comment|// For instance, accProbe discovers IID_IAccessibleTable2 by a QueryService only.
return|return
name|QueryInterface
argument_list|(
name|riid
argument_list|,
name|iface
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|riid
operator|==
name|IID_IAccessibleApplication
condition|)
block|{
operator|*
name|iface
operator|=
operator|new
name|AccessibleApplication
expr_stmt|;
return|return
name|S_OK
return|;
block|}
if|if
condition|(
operator|*
name|iface
condition|)
block|{
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_NOINTERFACE
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   private function..   \a maxRelations max number of relations to return in \a relations   \a relations the array of relations matching   \a startIndex Index to start to return from,                    it will return only that specific relation in \a relations    If \a relations is null, \a startIndex and \a maxRelations are ignored, causing   it to return the number of relations in \a nRelations */
end_comment
begin_function
DECL|function|getRelationsHelper
name|HRESULT
name|QWindowsIA2Accessible
operator|::
name|getRelationsHelper
parameter_list|(
name|IAccessibleRelation
modifier|*
modifier|*
name|relations
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|long
name|maxRelations
parameter_list|,
name|long
modifier|*
name|nRelations
comment|/* = 0*/
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|nRelations
condition|)
operator|*
name|nRelations
operator|=
literal|0
expr_stmt|;
typedef|typedef
name|QPair
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|,
name|QAccessible
operator|::
name|Relation
argument_list|>
name|RelationEntry
typedef|;
name|QVector
argument_list|<
name|RelationEntry
argument_list|>
name|rels
init|=
name|accessible
operator|->
name|relations
argument_list|()
decl_stmt|;
name|QMap
argument_list|<
name|QAccessible
operator|::
name|Relation
argument_list|,
name|QAccessibleInterface
modifier|*
argument_list|>
name|relationMap
decl_stmt|;
for|for
control|(
name|QVector
argument_list|<
name|RelationEntry
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|rels
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|rels
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|RelationEntry
name|e
init|=
operator|*
name|it
decl_stmt|;
name|relationMap
operator|.
name|insertMulti
argument_list|(
name|e
operator|.
name|second
argument_list|,
name|e
operator|.
name|first
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QAccessible
operator|::
name|Relation
argument_list|>
name|keys
init|=
name|relationMap
operator|.
name|keys
argument_list|()
decl_stmt|;
specifier|const
name|int
name|numRelations
init|=
name|keys
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|relations
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|startIndex
init|;
name|i
operator|<
name|qMin
argument_list|(
name|startIndex
operator|+
operator|(
name|int
operator|)
name|maxRelations
argument_list|,
name|numRelations
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QAccessible
operator|::
name|Relation
name|relation
init|=
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|targets
init|=
name|relationMap
operator|.
name|values
argument_list|(
name|relation
argument_list|)
decl_stmt|;
name|AccessibleRelation
modifier|*
name|rel
init|=
operator|new
name|AccessibleRelation
argument_list|(
name|targets
argument_list|,
name|relation
argument_list|)
decl_stmt|;
operator|*
name|relations
operator|=
name|rel
expr_stmt|;
operator|++
name|relations
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nRelations
condition|)
operator|*
name|nRelations
operator|=
name|numRelations
expr_stmt|;
return|return
name|numRelations
operator|>
literal|0
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_comment
comment|/*!   \internal   helper to wrap a QList<QAccessibleInterface*> inside an array of IAccessible*   The IAccessible* array is returned as a IUnknown* */
end_comment
begin_function
DECL|function|wrapListOfCells
name|HRESULT
name|QWindowsIA2Accessible
operator|::
name|wrapListOfCells
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
modifier|&
name|inputCells
parameter_list|,
name|IUnknown
modifier|*
modifier|*
modifier|*
name|outputAccessibles
parameter_list|,
name|long
modifier|*
name|nCellCount
parameter_list|)
block|{
specifier|const
name|int
name|count
init|=
name|inputCells
operator|.
name|count
argument_list|()
decl_stmt|;
comment|// Server allocates array
name|IUnknown
modifier|*
modifier|*
name|outputCells
init|=
name|count
condition|?
operator|(
name|IUnknown
operator|*
operator|*
operator|)
operator|::
name|CoTaskMemAlloc
argument_list|(
sizeof|sizeof
argument_list|(
name|IUnknown
operator|*
argument_list|)
operator|*
name|count
argument_list|)
else|:
operator|(
name|IUnknown
operator|*
operator|*
operator|)
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|outputCells
index|[
name|i
index|]
operator|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|inputCells
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|outputAccessibles
operator|=
name|outputCells
expr_stmt|;
operator|*
name|nCellCount
operator|=
name|count
expr_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_define
DECL|macro|IF_EQUAL_RETURN_IIDSTRING
define|#
directive|define
name|IF_EQUAL_RETURN_IIDSTRING
parameter_list|(
name|id
parameter_list|,
name|iid
parameter_list|)
value|if (id == iid) return QByteArray(#iid)
end_define
begin_function
DECL|function|IIDToString
name|QByteArray
name|QWindowsIA2Accessible
operator|::
name|IIDToString
parameter_list|(
name|REFIID
name|id
parameter_list|)
block|{
name|QByteArray
name|strGuid
init|=
name|QWindowsMsaaAccessible
operator|::
name|IIDToString
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|strGuid
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|strGuid
return|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IUnknown
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IDispatch
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessible
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IOleWindow
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IServiceProvider
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessible2
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleAction
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleApplication
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleComponent
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleEditableText
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleHyperlink
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleHypertext
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleImage
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleRelation
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleTable
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleTable2
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleTableCell
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleText
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessibleValue
argument_list|)
expr_stmt|;
comment|// else...
if|#
directive|if
literal|0
comment|// Can be useful for debugging, but normally we'd like to reduce the noise a bit...
block|OLECHAR szGuid[39]={0};     ::StringFromGUID2(id, szGuid, 39);     strGuid.reserve(40);     ::WideCharToMultiByte(CP_UTF8, 0, szGuid, 39, strGuid.data(), 39, NULL, NULL);     strGuid[38] = '\0';
endif|#
directive|endif
return|return
name|strGuid
return|;
block|}
end_function
begin_comment
comment|// Q_STATIC_ASSERT(IA2_ROLE_CANVAS == QAccessible::Canvas); // ### Qt 6: make them the same
end_comment
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
name|IA2_ROLE_COLOR_CHOOSER
operator|==
name|QAccessible
operator|::
name|ColorChooser
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
name|IA2_ROLE_FOOTER
operator|==
name|QAccessible
operator|::
name|Footer
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
name|IA2_ROLE_FORM
operator|==
name|QAccessible
operator|::
name|Form
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
name|IA2_ROLE_HEADING
operator|==
name|QAccessible
operator|::
name|Heading
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
name|IA2_ROLE_NOTE
operator|==
name|QAccessible
operator|::
name|Note
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
name|IA2_ROLE_COMPLEMENTARY_CONTENT
operator|==
name|QAccessible
operator|::
name|ComplementaryContent
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_ACCESSIBILITY
end_comment
end_unit
