begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QtConfig>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qwindowsmsaaaccessible.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsaccessibility.h"
end_include
begin_include
include|#
directive|include
file|<oleacc.h>
end_include
begin_include
include|#
directive|include
file|<servprov.h>
end_include
begin_include
include|#
directive|include
file|<winuser.h>
end_include
begin_include
include|#
directive|include
file|"comutils.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpair.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qsettings.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qaccessible.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwindow.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsitem.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsview.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qmessagebox.h>
end_include
begin_comment
comment|//#include<uiautomationcoreapi.h>
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|UiaRootObjectId
end_ifndef
begin_define
DECL|macro|UiaRootObjectId
define|#
directive|define
name|UiaRootObjectId
value|-25
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_CC_BOR
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_if
begin_include
include|#
directive|include
file|<comdef.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"../qtwindows_additional.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QWindowsEnumerate
class|class
name|QWindowsEnumerate
super|:
specifier|public
name|IEnumVARIANT
block|{
public|public:
DECL|function|QWindowsEnumerate
name|QWindowsEnumerate
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
name|a
parameter_list|)
member_init_list|:
name|ref
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|current
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|array
argument_list|(
name|a
argument_list|)
block|{     }
DECL|function|~QWindowsEnumerate
specifier|virtual
name|~
name|QWindowsEnumerate
parameter_list|()
block|{}
name|HRESULT
name|STDMETHODCALLTYPE
name|QueryInterface
parameter_list|(
name|REFIID
parameter_list|,
name|LPVOID
modifier|*
parameter_list|)
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|AddRef
parameter_list|()
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|Release
parameter_list|()
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|Clone
parameter_list|(
name|IEnumVARIANT
modifier|*
modifier|*
name|ppEnum
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|Next
parameter_list|(
name|unsigned
name|long
name|celt
parameter_list|,
name|VARIANT
name|FAR
modifier|*
name|rgVar
parameter_list|,
name|unsigned
name|long
name|FAR
modifier|*
name|pCeltFetched
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|Reset
parameter_list|()
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|Skip
parameter_list|(
name|unsigned
name|long
name|celt
parameter_list|)
function_decl|;
private|private:
DECL|member|ref
name|ULONG
name|ref
decl_stmt|;
DECL|member|current
name|ULONG
name|current
decl_stmt|;
DECL|member|array
name|QVector
argument_list|<
name|int
argument_list|>
name|array
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|QueryInterface
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|id
parameter_list|,
name|LPVOID
modifier|*
name|iface
parameter_list|)
block|{
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|id
operator|==
name|IID_IUnknown
condition|)
operator|*
name|iface
operator|=
operator|(
name|IUnknown
operator|*
operator|)
name|this
expr_stmt|;
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IEnumVARIANT
condition|)
operator|*
name|iface
operator|=
operator|(
name|IEnumVARIANT
operator|*
operator|)
name|this
expr_stmt|;
if|if
condition|(
operator|*
name|iface
condition|)
block|{
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_NOINTERFACE
return|;
block|}
end_function
begin_function
DECL|function|AddRef
name|ULONG
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|AddRef
parameter_list|()
block|{
return|return
operator|++
name|ref
return|;
block|}
end_function
begin_function
DECL|function|Release
name|ULONG
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|Release
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|--
name|ref
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|ref
return|;
block|}
end_function
begin_function
DECL|function|Clone
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|Clone
parameter_list|(
name|IEnumVARIANT
modifier|*
modifier|*
name|ppEnum
parameter_list|)
block|{
name|QWindowsEnumerate
modifier|*
name|penum
init|=
literal|0
decl_stmt|;
operator|*
name|ppEnum
operator|=
literal|0
expr_stmt|;
name|penum
operator|=
operator|new
name|QWindowsEnumerate
argument_list|(
name|array
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|penum
condition|)
return|return
name|E_OUTOFMEMORY
return|;
name|penum
operator|->
name|current
operator|=
name|current
expr_stmt|;
name|penum
operator|->
name|array
operator|=
name|array
expr_stmt|;
name|penum
operator|->
name|AddRef
argument_list|()
expr_stmt|;
operator|*
name|ppEnum
operator|=
name|penum
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|Next
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|Next
parameter_list|(
name|unsigned
name|long
name|celt
parameter_list|,
name|VARIANT
name|FAR
modifier|*
name|rgVar
parameter_list|,
name|unsigned
name|long
name|FAR
modifier|*
name|pCeltFetched
parameter_list|)
block|{
if|if
condition|(
name|pCeltFetched
condition|)
operator|*
name|pCeltFetched
operator|=
literal|0
expr_stmt|;
name|ULONG
name|l
decl_stmt|;
for|for
control|(
name|l
operator|=
literal|0
init|;
name|l
operator|<
name|celt
condition|;
name|l
operator|++
control|)
block|{
name|VariantInit
argument_list|(
operator|&
name|rgVar
index|[
name|l
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|current
operator|+
literal|1
operator|)
operator|>
operator|(
name|ULONG
operator|)
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|pCeltFetched
operator|=
name|l
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
name|rgVar
index|[
name|l
index|]
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
name|rgVar
index|[
name|l
index|]
operator|.
name|lVal
operator|=
name|array
index|[
operator|(
name|int
operator|)
name|current
index|]
expr_stmt|;
operator|++
name|current
expr_stmt|;
block|}
operator|*
name|pCeltFetched
operator|=
name|l
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|Reset
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|Reset
parameter_list|()
block|{
name|current
operator|=
literal|0
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|Skip
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsEnumerate
operator|::
name|Skip
parameter_list|(
name|unsigned
name|long
name|celt
parameter_list|)
block|{
name|current
operator|+=
name|celt
expr_stmt|;
if|if
condition|(
name|current
operator|>
operator|(
name|ULONG
operator|)
name|array
operator|.
name|size
argument_list|()
condition|)
block|{
name|current
operator|=
name|array
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_SHOW_ATCLIENT_COMMANDS
argument_list|)
end_if
begin_function
DECL|function|accessibleDebugClientCalls_helper
name|void
name|accessibleDebugClientCalls_helper
parameter_list|(
specifier|const
name|char
modifier|*
name|funcName
parameter_list|,
specifier|const
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaAccessibility
argument_list|)
operator|<<
name|iface
operator|<<
name|funcName
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/**************************************************************\  *                                                             *  *                        IUnknown                             *  *                                                             *  **************************************************************/
end_comment
begin_function
DECL|function|QueryInterface
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|id
parameter_list|,
name|LPVOID
modifier|*
name|iface
parameter_list|)
block|{
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
name|QByteArray
name|strIID
init|=
name|IIDToString
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|strIID
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qCDebug
argument_list|(
name|lcQpaAccessibility
argument_list|)
operator|<<
literal|"QWindowsIA2Accessible::QI() - IID:"
operator|<<
name|strIID
operator|<<
literal|", iface:"
operator|<<
name|accessibleInterface
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
name|IID_IUnknown
condition|)
block|{
operator|*
name|iface
operator|=
operator|(
name|IUnknown
operator|*
operator|)
operator|(
name|IDispatch
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IDispatch
condition|)
block|{
operator|*
name|iface
operator|=
operator|(
name|IDispatch
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IAccessible
condition|)
block|{
operator|*
name|iface
operator|=
operator|(
name|IAccessible
operator|*
operator|)
name|this
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
name|IID_IOleWindow
condition|)
block|{
operator|*
name|iface
operator|=
operator|(
name|IOleWindow
operator|*
operator|)
name|this
expr_stmt|;
block|}
if|if
condition|(
operator|*
name|iface
condition|)
block|{
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_NOINTERFACE
return|;
block|}
end_function
begin_function
DECL|function|AddRef
name|ULONG
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|AddRef
parameter_list|()
block|{
return|return
operator|++
name|ref
return|;
block|}
end_function
begin_function
DECL|function|Release
name|ULONG
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|Release
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|--
name|ref
condition|)
block|{
operator|delete
name|this
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|ref
return|;
block|}
end_function
begin_comment
comment|/*   IDispatch */
end_comment
begin_function
DECL|function|GetTypeInfoCount
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|GetTypeInfoCount
parameter_list|(
name|unsigned
name|int
modifier|*
name|pctinfo
parameter_list|)
block|{
comment|// We don't use a type library
operator|*
name|pctinfo
operator|=
literal|0
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|GetTypeInfo
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|GetTypeInfo
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|ITypeInfo
modifier|*
modifier|*
name|pptinfo
parameter_list|)
block|{
comment|// We don't use a type library
operator|*
name|pptinfo
operator|=
literal|0
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|GetIDsOfNames
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|GetIDsOfNames
parameter_list|(
specifier|const
name|_GUID
modifier|&
parameter_list|,
name|wchar_t
modifier|*
modifier|*
name|rgszNames
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|long
modifier|*
name|rgdispid
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_CC_BOR
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
comment|// PROPERTIES:  Hierarchical
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accParent"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_PARENT
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accChildCount"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_CHILDCOUNT
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accChild"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_CHILD
expr_stmt|;
comment|// PROPERTIES:  Descriptional
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accName("
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_NAME
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accValue"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_VALUE
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accDescription"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_DESCRIPTION
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accRole"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_ROLE
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accState"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_STATE
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accHelp"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_HELP
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accHelpTopic"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_HELPTOPIC
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accKeyboardShortcut"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_KEYBOARDSHORTCUT
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accFocus"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_FOCUS
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accSelection"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_SELECTION
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accDefaultAction"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_DEFAULTACTION
expr_stmt|;
comment|// METHODS
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accSelect"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_SELECT
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accLocation"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_LOCATION
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accNavigate"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_NAVIGATE
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accHitTest"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_HITTEST
expr_stmt|;
elseif|else
if|if
condition|(
name|_bstr_t
argument_list|(
name|rgszNames
index|[
literal|0
index|]
argument_list|)
operator|==
name|_bstr_t
argument_list|(
literal|L"accDoDefaultAction"
argument_list|)
condition|)
name|rgdispid
index|[
literal|0
index|]
operator|=
name|DISPID_ACC_DODEFAULTACTION
expr_stmt|;
else|else
return|return
name|DISP_E_UNKNOWNINTERFACE
return|;
return|return
name|S_OK
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|rgszNames
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|rgdispid
argument_list|)
expr_stmt|;
return|return
name|DISP_E_MEMBERNOTFOUND
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|Invoke
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|Invoke
parameter_list|(
name|long
name|dispIdMember
parameter_list|,
specifier|const
name|_GUID
modifier|&
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|unsigned
name|short
name|wFlags
parameter_list|,
name|tagDISPPARAMS
modifier|*
name|pDispParams
parameter_list|,
name|tagVARIANT
modifier|*
name|pVarResult
parameter_list|,
name|tagEXCEPINFO
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|)
block|{
name|HRESULT
name|hr
init|=
name|DISP_E_MEMBERNOTFOUND
decl_stmt|;
switch|switch
condition|(
name|dispIdMember
condition|)
block|{
case|case
name|DISPID_ACC_PARENT
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
block|{
if|if
condition|(
operator|!
name|pVarResult
condition|)
return|return
name|E_INVALIDARG
return|;
name|hr
operator|=
name|get_accParent
argument_list|(
operator|&
name|pVarResult
operator|->
name|pdispVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
block|}
break|break;
case|case
name|DISPID_ACC_CHILDCOUNT
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
block|{
if|if
condition|(
operator|!
name|pVarResult
condition|)
return|return
name|E_INVALIDARG
return|;
name|hr
operator|=
name|get_accChildCount
argument_list|(
operator|&
name|pVarResult
operator|->
name|lVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
block|}
break|break;
case|case
name|DISPID_ACC_CHILD
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accChild
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|pdispVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_NAME
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accName
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYPUT
condition|)
name|hr
operator|=
name|put_accName
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_VALUE
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accValue
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYPUT
condition|)
name|hr
operator|=
name|put_accValue
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_DESCRIPTION
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accDescription
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_ROLE
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accRole
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_STATE
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accState
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_HELP
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accHelp
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_HELPTOPIC
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accHelpTopic
argument_list|(
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|2
index|]
operator|.
name|bstrVal
argument_list|,
name|pDispParams
operator|->
name|rgvarg
index|[
literal|1
index|]
argument_list|,
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
operator|.
name|lVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_KEYBOARDSHORTCUT
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accKeyboardShortcut
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_FOCUS
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accFocus
argument_list|(
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_SELECTION
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accSelection
argument_list|(
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_DEFAULTACTION
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_PROPERTYGET
condition|)
name|hr
operator|=
name|get_accDefaultAction
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
operator|&
name|pVarResult
operator|->
name|bstrVal
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_SELECT
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_METHOD
condition|)
name|hr
operator|=
name|accSelect
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|1
index|]
operator|.
name|lVal
argument_list|,
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_LOCATION
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_METHOD
condition|)
name|hr
operator|=
name|accLocation
argument_list|(
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|4
index|]
operator|.
name|lVal
argument_list|,
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|3
index|]
operator|.
name|lVal
argument_list|,
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|2
index|]
operator|.
name|lVal
argument_list|,
operator|&
name|pDispParams
operator|->
name|rgvarg
index|[
literal|1
index|]
operator|.
name|lVal
argument_list|,
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_NAVIGATE
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_METHOD
condition|)
name|hr
operator|=
name|accNavigate
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|1
index|]
operator|.
name|lVal
argument_list|,
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|,
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_HITTEST
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_METHOD
condition|)
name|hr
operator|=
name|accHitTest
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|1
index|]
operator|.
name|lVal
argument_list|,
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
operator|.
name|lVal
argument_list|,
name|pVarResult
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
case|case
name|DISPID_ACC_DODEFAULTACTION
case|:
if|if
condition|(
name|wFlags
operator|==
name|DISPATCH_METHOD
condition|)
name|hr
operator|=
name|accDoDefaultAction
argument_list|(
name|pDispParams
operator|->
name|rgvarg
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
else|else
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
default|default:
name|hr
operator|=
name|DISP_E_MEMBERNOTFOUND
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
return|return
name|hr
return|;
block|}
return|return
name|hr
return|;
block|}
end_function
begin_comment
comment|/*   IAccessible  IAccessible::accHitTest documents the value returned in pvarID like this:  | *Point location*                                       | *vt member* | *Value member*          | +========================================================+=============+=========================+ | Outside of the object's boundaries, and either inside  | VT_EMPTY    | None.                   | | or outside of the object's bounding rectangle.         |             |                         | +--------------------------------------------------------+-------------+-------------------------+ |  Within the object but not within a child element or a | VT_I4       | lVal is CHILDID_SELF    | |  child object.                                         |             |                         | +--------------------------------------------------------+-------------+-------------------------+ | Within a child element.                                | VT_I4       | lVal contains           | |                                                        |             | the child ID.           | +--------------------------------------------------------+-------------+-------------------------+ | Within a child object.                                 | VT_DISPATCH | pdispVal is set to the  | |                                                        |             | child object's IDispatch| |                                                        |             | interface pointer       | +--------------------------------------------------------+-------------+-------------------------+ */
end_comment
begin_function
DECL|function|accHitTest
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|accHitTest
parameter_list|(
name|long
name|xLeft
parameter_list|,
name|long
name|yTop
parameter_list|,
name|VARIANT
modifier|*
name|pvarID
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QAccessibleInterface
modifier|*
name|child
init|=
name|accessible
operator|->
name|childAt
argument_list|(
name|xLeft
argument_list|,
name|yTop
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
block|{
comment|// no child found, return this item if it contains the coordinates
if|if
condition|(
name|accessible
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|xLeft
argument_list|,
name|yTop
argument_list|)
condition|)
block|{
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|lVal
operator|=
name|CHILDID_SELF
expr_stmt|;
return|return
name|S_OK
return|;
block|}
block|}
else|else
block|{
name|IAccessible
modifier|*
name|iface
init|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|iface
condition|)
block|{
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_DISPATCH
expr_stmt|;
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|pdispVal
operator|=
name|iface
expr_stmt|;
return|return
name|S_OK
return|;
block|}
block|}
comment|// Did not find anything
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_comment
comment|/*  It is recommended to read     "Implementing a Microsoft Active Accessibility (MSAA) Server.     Practical Tips for Developers and How Mozilla Does It"     (https://developer.mozilla.org/En/Accessibility/Implementing_an_MSAA_Server)   to get an overview of what's important to implement and what parts of MSAA  can be ignored. All stuff prefixed with "moz" are information from that page. */
end_comment
begin_comment
comment|// moz: [important]
end_comment
begin_function
DECL|function|accLocation
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|accLocation
parameter_list|(
name|long
modifier|*
name|pxLeft
parameter_list|,
name|long
modifier|*
name|pyTop
parameter_list|,
name|long
modifier|*
name|pcxWidth
parameter_list|,
name|long
modifier|*
name|pcyHeight
parameter_list|,
name|VARIANT
name|varID
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QAccessibleInterface
modifier|*
name|acc
init|=
name|childPointer
argument_list|(
name|accessible
argument_list|,
name|varID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|acc
operator|||
operator|!
name|acc
operator|->
name|isValid
argument_list|()
condition|)
return|return
name|E_FAIL
return|;
specifier|const
name|QRect
name|rect
init|=
name|acc
operator|->
name|rect
argument_list|()
decl_stmt|;
operator|*
name|pxLeft
operator|=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
operator|*
name|pyTop
operator|=
name|rect
operator|.
name|y
argument_list|()
expr_stmt|;
operator|*
name|pcxWidth
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
operator|*
name|pcyHeight
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|// moz: [important, but no need to implement up/down/left/right]
end_comment
begin_function
DECL|function|accNavigate
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|accNavigate
parameter_list|(
name|long
name|navDir
parameter_list|,
name|VARIANT
name|varStart
parameter_list|,
name|VARIANT
modifier|*
name|pvarEnd
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QAccessibleInterface
modifier|*
name|acc
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|navDir
condition|)
block|{
case|case
name|NAVDIR_FIRSTCHILD
case|:
name|acc
operator|=
name|accessible
operator|->
name|child
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|NAVDIR_LASTCHILD
case|:
name|acc
operator|=
name|accessible
operator|->
name|child
argument_list|(
name|accessible
operator|->
name|childCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|NAVDIR_NEXT
case|:
case|case
name|NAVDIR_PREVIOUS
case|:
if|if
condition|(
operator|!
name|varStart
operator|.
name|lVal
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|parent
init|=
name|accessible
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
name|parent
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|int
name|index
init|=
name|parent
operator|->
name|indexOfChild
argument_list|(
name|accessible
argument_list|)
decl_stmt|;
name|index
operator|+=
operator|(
name|navDir
operator|==
name|NAVDIR_NEXT
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|parent
operator|->
name|childCount
argument_list|()
condition|)
name|acc
operator|=
name|parent
operator|->
name|child
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|index
init|=
name|varStart
operator|.
name|lVal
decl_stmt|;
name|index
operator|+=
operator|(
name|navDir
operator|==
name|NAVDIR_NEXT
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
operator|&&
name|index
operator|<=
name|accessible
operator|->
name|childCount
argument_list|()
condition|)
name|acc
operator|=
name|accessible
operator|->
name|child
argument_list|(
name|index
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
comment|// Geometrical
case|case
name|NAVDIR_UP
case|:
case|case
name|NAVDIR_DOWN
case|:
case|case
name|NAVDIR_LEFT
case|:
case|case
name|NAVDIR_RIGHT
case|:
block|{
name|QAccessibleInterface
modifier|*
name|pIface
init|=
name|accessible
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|pIface
operator|&&
name|pIface
operator|->
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|int
name|indexOfOurself
init|=
name|pIface
operator|->
name|indexOfChild
argument_list|(
name|accessible
argument_list|)
decl_stmt|;
name|QRect
name|startg
init|=
name|accessible
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QPoint
name|startc
init|=
name|startg
operator|.
name|center
argument_list|()
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|candidate
init|=
literal|0
decl_stmt|;
name|unsigned
name|mindist
init|=
name|UINT_MAX
decl_stmt|;
comment|// will work on screen sizes at least up to 46340x46340
specifier|const
name|int
name|sibCount
init|=
name|pIface
operator|->
name|childCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sibCount
condition|;
operator|++
name|i
control|)
block|{
name|QAccessibleInterface
modifier|*
name|sibling
init|=
literal|0
decl_stmt|;
name|sibling
operator|=
name|pIface
operator|->
name|child
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|sibling
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|indexOfOurself
operator|||
name|sibling
operator|->
name|state
argument_list|()
operator|.
name|invisible
condition|)
block|{
comment|//ignore ourself and invisible siblings
continue|continue;
block|}
name|QRect
name|sibg
init|=
name|sibling
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QPoint
name|sibc
init|=
name|sibg
operator|.
name|center
argument_list|()
decl_stmt|;
name|QPoint
name|sibp
decl_stmt|;
name|QPoint
name|startp
decl_stmt|;
name|QPoint
name|distp
decl_stmt|;
switch|switch
condition|(
name|navDir
condition|)
block|{
case|case
name|NAVDIR_LEFT
case|:
name|startp
operator|=
name|QPoint
argument_list|(
name|startg
operator|.
name|left
argument_list|()
argument_list|,
name|startg
operator|.
name|top
argument_list|()
operator|+
name|startg
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sibp
operator|=
name|QPoint
argument_list|(
name|sibg
operator|.
name|right
argument_list|()
argument_list|,
name|sibg
operator|.
name|top
argument_list|()
operator|+
name|sibg
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPoint
argument_list|(
name|sibc
operator|-
name|startc
argument_list|)
operator|.
name|x
argument_list|()
operator|>=
literal|0
condition|)
block|{
continue|continue;
block|}
name|distp
operator|=
name|sibp
operator|-
name|startp
expr_stmt|;
break|break;
case|case
name|NAVDIR_RIGHT
case|:
name|startp
operator|=
name|QPoint
argument_list|(
name|startg
operator|.
name|right
argument_list|()
argument_list|,
name|startg
operator|.
name|top
argument_list|()
operator|+
name|startg
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|sibp
operator|=
name|QPoint
argument_list|(
name|sibg
operator|.
name|left
argument_list|()
argument_list|,
name|sibg
operator|.
name|top
argument_list|()
operator|+
name|sibg
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPoint
argument_list|(
name|sibc
operator|-
name|startc
argument_list|)
operator|.
name|x
argument_list|()
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
name|distp
operator|=
name|sibp
operator|-
name|startp
expr_stmt|;
break|break;
case|case
name|NAVDIR_UP
case|:
name|startp
operator|=
name|QPoint
argument_list|(
name|startg
operator|.
name|left
argument_list|()
operator|+
name|startg
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|startg
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|sibp
operator|=
name|QPoint
argument_list|(
name|sibg
operator|.
name|left
argument_list|()
operator|+
name|sibg
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|sibg
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPoint
argument_list|(
name|sibc
operator|-
name|startc
argument_list|)
operator|.
name|y
argument_list|()
operator|>=
literal|0
condition|)
block|{
continue|continue;
block|}
name|distp
operator|=
name|sibp
operator|-
name|startp
expr_stmt|;
break|break;
case|case
name|NAVDIR_DOWN
case|:
name|startp
operator|=
name|QPoint
argument_list|(
name|startg
operator|.
name|left
argument_list|()
operator|+
name|startg
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|startg
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|sibp
operator|=
name|QPoint
argument_list|(
name|sibg
operator|.
name|left
argument_list|()
operator|+
name|sibg
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|sibg
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPoint
argument_list|(
name|sibc
operator|-
name|startc
argument_list|)
operator|.
name|y
argument_list|()
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
name|distp
operator|=
name|sibp
operator|-
name|startp
expr_stmt|;
break|break;
default|default:
break|break;
block|}
comment|// Since we're *comparing* (and not measuring) distances, we can compare the
comment|// squared distance, (thus, no need to take the sqrt()).
name|unsigned
name|dist
init|=
name|distp
operator|.
name|x
argument_list|()
operator|*
name|distp
operator|.
name|x
argument_list|()
operator|+
name|distp
operator|.
name|y
argument_list|()
operator|*
name|distp
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|dist
operator|<
name|mindist
condition|)
block|{
name|candidate
operator|=
name|sibling
expr_stmt|;
name|mindist
operator|=
name|dist
expr_stmt|;
block|}
block|}
name|acc
operator|=
name|candidate
expr_stmt|;
block|}
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|acc
condition|)
block|{
operator|(
operator|*
name|pvarEnd
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
if|if
condition|(
name|IAccessible
modifier|*
name|iface
init|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|acc
argument_list|)
condition|)
block|{
operator|(
operator|*
name|pvarEnd
operator|)
operator|.
name|vt
operator|=
name|VT_DISPATCH
expr_stmt|;
operator|(
operator|*
name|pvarEnd
operator|)
operator|.
name|pdispVal
operator|=
name|iface
expr_stmt|;
return|return
name|S_OK
return|;
block|}
operator|(
operator|*
name|pvarEnd
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_comment
comment|// moz: [important]
end_comment
begin_function
DECL|function|get_accChild
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accChild
parameter_list|(
name|VARIANT
name|varChildID
parameter_list|,
name|IDispatch
modifier|*
modifier|*
name|ppdispChild
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|varChildID
operator|.
name|vt
operator|!=
name|VT_I4
condition|)
return|return
name|E_INVALIDARG
return|;
name|QAccessibleInterface
modifier|*
name|acc
init|=
name|childPointer
argument_list|(
name|accessible
argument_list|,
name|varChildID
argument_list|)
decl_stmt|;
if|if
condition|(
name|acc
condition|)
block|{
operator|*
name|ppdispChild
operator|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|acc
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
return|return
name|E_FAIL
return|;
block|}
end_function
begin_comment
comment|// moz: [important]
end_comment
begin_function
DECL|function|get_accChildCount
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accChildCount
parameter_list|(
name|long
modifier|*
name|pcountChildren
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|pcountChildren
operator|=
name|accessible
operator|->
name|childCount
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|// moz: [important]
end_comment
begin_function
DECL|function|get_accParent
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accParent
parameter_list|(
name|IDispatch
modifier|*
modifier|*
name|ppdispParent
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QAccessibleInterface
modifier|*
name|acc
init|=
name|accessible
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|acc
condition|)
block|{
if|if
condition|(
name|IAccessible
modifier|*
name|iface
init|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|acc
argument_list|)
condition|)
block|{
operator|*
name|ppdispParent
operator|=
name|iface
expr_stmt|;
return|return
name|S_OK
return|;
block|}
block|}
operator|*
name|ppdispParent
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_comment
comment|/*   Properties and methods */
end_comment
begin_function
DECL|function|accDoDefaultAction
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|accDoDefaultAction
parameter_list|(
name|VARIANT
name|varID
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|varID
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleActionInterface
modifier|*
name|actionIface
init|=
name|accessible
operator|->
name|actionInterface
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|def
init|=
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|def
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|actionIface
operator|->
name|doAction
argument_list|(
name|def
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
block|}
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accDefaultAction
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accDefaultAction
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszDefaultAction
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|varID
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|pszDefaultAction
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QAccessibleActionInterface
modifier|*
name|actionIface
init|=
name|accessible
operator|->
name|actionInterface
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|def
init|=
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|def
operator|.
name|isEmpty
argument_list|()
condition|)
operator|*
name|pszDefaultAction
operator|=
name|QStringToBSTR
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|pszDefaultAction
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accDescription
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accDescription
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszDescription
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QString
name|descr
decl_stmt|;
if|if
condition|(
name|varID
operator|.
name|lVal
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|child
init|=
name|childPointer
argument_list|(
name|accessible
argument_list|,
name|varID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|E_FAIL
return|;
name|descr
operator|=
name|child
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Description
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|descr
operator|=
name|accessible
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Description
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|descr
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|pszDescription
operator|=
name|QStringToBSTR
argument_list|(
name|descr
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
operator|*
name|pszDescription
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accHelp
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accHelp
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszHelp
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QString
name|help
decl_stmt|;
if|if
condition|(
name|varID
operator|.
name|lVal
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|child
init|=
name|childPointer
argument_list|(
name|accessible
argument_list|,
name|varID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|E_FAIL
return|;
name|help
operator|=
name|child
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Help
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|help
operator|=
name|accessible
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Help
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|help
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|pszHelp
operator|=
name|QStringToBSTR
argument_list|(
name|help
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
operator|*
name|pszHelp
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accHelpTopic
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accHelpTopic
parameter_list|(
name|BSTR
modifier|*
parameter_list|,
name|VARIANT
parameter_list|,
name|long
modifier|*
parameter_list|)
block|{
return|return
name|DISP_E_MEMBERNOTFOUND
return|;
block|}
end_function
begin_function
DECL|function|get_accKeyboardShortcut
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accKeyboardShortcut
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszKeyboardShortcut
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|varID
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
operator|*
name|pszKeyboardShortcut
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QAccessibleActionInterface
modifier|*
name|actionIface
init|=
name|accessible
operator|->
name|actionInterface
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|def
init|=
name|actionIface
operator|->
name|actionNames
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|def
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|keyBoardShortCut
init|=
name|actionIface
operator|->
name|keyBindingsForAction
argument_list|(
name|def
argument_list|)
operator|.
name|value
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keyBoardShortCut
operator|.
name|isEmpty
argument_list|()
condition|)
operator|*
name|pszKeyboardShortcut
operator|=
name|QStringToBSTR
argument_list|(
name|keyBoardShortCut
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|*
name|pszKeyboardShortcut
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|relatedInterface
specifier|static
name|QAccessibleInterface
modifier|*
name|relatedInterface
parameter_list|(
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|,
name|QAccessible
operator|::
name|RelationFlag
name|flag
parameter_list|)
block|{
typedef|typedef
name|QPair
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|,
name|QAccessible
operator|::
name|Relation
argument_list|>
name|RelationPair
typedef|;
name|QVector
argument_list|<
name|RelationPair
argument_list|>
name|rels
init|=
name|iface
operator|->
name|relations
argument_list|(
name|flag
argument_list|)
decl_stmt|;
return|return
name|rels
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|first
return|;
block|}
end_function
begin_comment
comment|// moz: [important]
end_comment
begin_function
DECL|function|get_accName
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accName
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszName
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QString
name|name
decl_stmt|;
if|if
condition|(
name|varID
operator|.
name|lVal
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|child
init|=
name|childPointer
argument_list|(
name|accessible
argument_list|,
name|varID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|E_FAIL
return|;
name|name
operator|=
name|child
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|QAccessibleInterface
modifier|*
name|labelInterface
init|=
name|relatedInterface
argument_list|(
name|child
argument_list|,
name|QAccessible
operator|::
name|Label
argument_list|)
condition|)
block|{
name|name
operator|=
name|labelInterface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|name
operator|=
name|accessible
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|QAccessibleInterface
modifier|*
name|labelInterface
init|=
name|relatedInterface
argument_list|(
name|accessible
argument_list|,
name|QAccessible
operator|::
name|Label
argument_list|)
condition|)
block|{
name|name
operator|=
name|labelInterface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QString
name|shortcut
init|=
name|accessible
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Accelerator
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shortcut
operator|.
name|isEmpty
argument_list|()
condition|)
name|name
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|shortcut
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|pszName
operator|=
name|QStringToBSTR
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
operator|*
name|pszName
operator|=
literal|0
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|put_accName
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|put_accName
parameter_list|(
name|VARIANT
parameter_list|,
name|BSTR
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
return|return
name|DISP_E_MEMBERNOTFOUND
return|;
block|}
end_function
begin_comment
comment|// moz: [important]
end_comment
begin_function
DECL|function|get_accRole
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accRole
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|VARIANT
modifier|*
name|pvarRole
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QAccessible
operator|::
name|Role
name|role
decl_stmt|;
if|if
condition|(
name|varID
operator|.
name|lVal
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|child
init|=
name|childPointer
argument_list|(
name|accessible
argument_list|,
name|varID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|E_FAIL
return|;
name|role
operator|=
name|child
operator|->
name|role
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|role
operator|=
name|accessible
operator|->
name|role
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|role
operator|!=
name|QAccessible
operator|::
name|NoRole
condition|)
block|{
if|if
condition|(
name|role
operator|>=
name|QAccessible
operator|::
name|LayeredPane
condition|)
block|{
comment|// This block should hopefully only be entered if the AT client
comment|// does not support IAccessible2, since it should prefer IA2::role() then.
if|if
condition|(
name|role
operator|==
name|QAccessible
operator|::
name|LayeredPane
condition|)
name|role
operator|=
name|QAccessible
operator|::
name|Pane
expr_stmt|;
elseif|else
if|if
condition|(
name|role
operator|==
name|QAccessible
operator|::
name|WebDocument
condition|)
name|role
operator|=
name|QAccessible
operator|::
name|Document
expr_stmt|;
else|else
name|role
operator|=
name|QAccessible
operator|::
name|Client
expr_stmt|;
block|}
operator|(
operator|*
name|pvarRole
operator|)
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
operator|(
operator|*
name|pvarRole
operator|)
operator|.
name|lVal
operator|=
name|role
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|*
name|pvarRole
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|// moz: [important]
end_comment
begin_function
DECL|function|get_accState
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accState
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|VARIANT
modifier|*
name|pvarState
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QAccessible
operator|::
name|State
name|state
decl_stmt|;
if|if
condition|(
name|varID
operator|.
name|lVal
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|child
init|=
name|childPointer
argument_list|(
name|accessible
argument_list|,
name|varID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|E_FAIL
return|;
name|state
operator|=
name|child
operator|->
name|state
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|accessible
operator|->
name|state
argument_list|()
expr_stmt|;
block|}
name|LONG
name|st
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|animated
condition|)
name|st
operator||=
name|STATE_SYSTEM_ANIMATED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|busy
condition|)
name|st
operator||=
name|STATE_SYSTEM_BUSY
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|checked
condition|)
name|st
operator||=
name|STATE_SYSTEM_CHECKED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|collapsed
condition|)
name|st
operator||=
name|STATE_SYSTEM_COLLAPSED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|defaultButton
condition|)
name|st
operator||=
name|STATE_SYSTEM_DEFAULT
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|expanded
condition|)
name|st
operator||=
name|STATE_SYSTEM_EXPANDED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|extSelectable
condition|)
name|st
operator||=
name|STATE_SYSTEM_EXTSELECTABLE
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|focusable
condition|)
name|st
operator||=
name|STATE_SYSTEM_FOCUSABLE
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|focused
condition|)
name|st
operator||=
name|STATE_SYSTEM_FOCUSED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|hasPopup
condition|)
name|st
operator||=
name|STATE_SYSTEM_HASPOPUP
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|hotTracked
condition|)
name|st
operator||=
name|STATE_SYSTEM_HOTTRACKED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|invisible
condition|)
name|st
operator||=
name|STATE_SYSTEM_INVISIBLE
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|linked
condition|)
name|st
operator||=
name|STATE_SYSTEM_LINKED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|marqueed
condition|)
name|st
operator||=
name|STATE_SYSTEM_MARQUEED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|checkStateMixed
condition|)
name|st
operator||=
name|STATE_SYSTEM_MIXED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|movable
condition|)
name|st
operator||=
name|STATE_SYSTEM_MOVEABLE
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|multiSelectable
condition|)
name|st
operator||=
name|STATE_SYSTEM_MULTISELECTABLE
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|offscreen
condition|)
name|st
operator||=
name|STATE_SYSTEM_OFFSCREEN
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|pressed
condition|)
name|st
operator||=
name|STATE_SYSTEM_PRESSED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|passwordEdit
condition|)
name|st
operator||=
name|STATE_SYSTEM_PROTECTED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|readOnly
condition|)
name|st
operator||=
name|STATE_SYSTEM_READONLY
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|selectable
condition|)
name|st
operator||=
name|STATE_SYSTEM_SELECTABLE
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|selected
condition|)
name|st
operator||=
name|STATE_SYSTEM_SELECTED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|selfVoicing
condition|)
name|st
operator||=
name|STATE_SYSTEM_SELFVOICING
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|sizeable
condition|)
name|st
operator||=
name|STATE_SYSTEM_SIZEABLE
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|traversed
condition|)
name|st
operator||=
name|STATE_SYSTEM_TRAVERSED
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|disabled
condition|)
name|st
operator||=
name|STATE_SYSTEM_UNAVAILABLE
expr_stmt|;
operator|(
operator|*
name|pvarState
operator|)
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
operator|(
operator|*
name|pvarState
operator|)
operator|.
name|lVal
operator|=
name|st
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|// moz: [important]
end_comment
begin_function
DECL|function|get_accValue
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accValue
parameter_list|(
name|VARIANT
name|varID
parameter_list|,
name|BSTR
modifier|*
name|pszValue
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
name|varID
operator|.
name|vt
operator|!=
name|VT_I4
condition|)
return|return
name|E_INVALIDARG
return|;
if|if
condition|(
operator|!
name|accessible
operator|||
operator|!
name|accessible
operator|->
name|isValid
argument_list|()
operator|||
name|varID
operator|.
name|lVal
condition|)
block|{
return|return
name|E_FAIL
return|;
block|}
name|QString
name|value
decl_stmt|;
if|if
condition|(
name|accessible
operator|->
name|valueInterface
argument_list|()
condition|)
block|{
name|value
operator|=
name|accessible
operator|->
name|valueInterface
argument_list|()
operator|->
name|currentValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|accessible
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|value
operator|.
name|isNull
argument_list|()
condition|)
block|{
operator|*
name|pszValue
operator|=
name|QStringToBSTR
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
operator|*
name|pszValue
operator|=
literal|0
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaAccessibility
argument_list|)
operator|<<
literal|"return S_FALSE"
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|put_accValue
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|put_accValue
parameter_list|(
name|VARIANT
parameter_list|,
name|BSTR
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
return|return
name|DISP_E_MEMBERNOTFOUND
return|;
block|}
end_function
begin_comment
comment|// moz: [important]
end_comment
begin_function
DECL|function|accSelect
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|accSelect
parameter_list|(
name|long
name|flagsSelect
parameter_list|,
name|VARIANT
name|varID
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|flagsSelect
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|varID
argument_list|)
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|bool
name|res
init|=
literal|false
decl_stmt|;
comment|/*   ### Check for accessibleTableInterface() or accessibleTextInterface()    ### and if there are no ia2 interfaces we should do nothing??     if (flagsSelect& SELFLAG_TAKEFOCUS)         res = accessible()->doAction(SetFocus, varID.lVal, QVariantList());     if (flagsSelect& SELFLAG_TAKESELECTION) {         accessible()->doAction(ClearSelection, 0, QVariantList());         res = accessible()->doAction(AddToSelection, varID.lVal, QVariantList());     }     if (flagsSelect& SELFLAG_EXTENDSELECTION)         res = accessible()->doAction(ExtendSelection, varID.lVal, QVariantList());     if (flagsSelect& SELFLAG_ADDSELECTION)         res = accessible()->doAction(AddToSelection, varID.lVal, QVariantList());     if (flagsSelect& SELFLAG_REMOVESELECTION)         res = accessible()->doAction(RemoveSelection, varID.lVal, QVariantList()); */
return|return
name|res
condition|?
name|S_OK
else|:
name|S_FALSE
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Can return:    +-------------+------------------------------------------------------------------------------+   | VT_EMPTY    | None. Neither this object nor any of its children has the keyboard focus.    |   +-------------+------------------------------------------------------------------------------+   | VT_I4       | lVal is CHILDID_SELF. The object itself has the keyboard focus.              |   +-------------+------------------------------------------------------------------------------+   | VT_I4       | lVal contains the child ID of the child element that has the keyboard focus. |   +-------------+------------------------------------------------------------------------------+   | VT_DISPATCH | pdispVal member is the address of the IDispatch interface for the child      |   |             | object that has the keyboard focus.                                          |   +-------------+------------------------------------------------------------------------------+     moz: [important] */
end_comment
begin_function
DECL|function|get_accFocus
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accFocus
parameter_list|(
name|VARIANT
modifier|*
name|pvarID
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
if|if
condition|(
name|QAccessibleInterface
modifier|*
name|acc
init|=
name|accessible
operator|->
name|focusChild
argument_list|()
condition|)
block|{
if|if
condition|(
name|acc
operator|==
name|accessible
condition|)
block|{
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|lVal
operator|=
name|CHILDID_SELF
expr_stmt|;
return|return
name|S_OK
return|;
block|}
else|else
block|{
if|if
condition|(
name|IAccessible
modifier|*
name|iface
init|=
name|QWindowsAccessibility
operator|::
name|wrap
argument_list|(
name|acc
argument_list|)
condition|)
block|{
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_DISPATCH
expr_stmt|;
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|pdispVal
operator|=
name|iface
expr_stmt|;
return|return
name|S_OK
return|;
block|}
block|}
block|}
operator|(
operator|*
name|pvarID
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
end_function
begin_function
DECL|function|get_accSelection
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|get_accSelection
parameter_list|(
name|VARIANT
modifier|*
name|pvarChildren
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|int
name|cc
init|=
name|accessible
operator|->
name|childCount
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|sel
argument_list|(
name|cc
argument_list|)
decl_stmt|;
name|int
name|selIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cc
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|isSelected
init|=
literal|false
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|child
init|=
name|accessible
operator|->
name|child
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
condition|)
block|{
name|isSelected
operator|=
name|child
operator|->
name|state
argument_list|()
operator|.
name|selected
expr_stmt|;
block|}
if|if
condition|(
name|isSelected
condition|)
name|sel
index|[
name|selIndex
operator|++
index|]
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
name|sel
operator|.
name|resize
argument_list|(
name|selIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|sel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|(
operator|*
name|pvarChildren
operator|)
operator|.
name|vt
operator|=
name|VT_EMPTY
expr_stmt|;
return|return
name|S_FALSE
return|;
block|}
if|if
condition|(
name|sel
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
operator|(
operator|*
name|pvarChildren
operator|)
operator|.
name|vt
operator|=
name|VT_I4
expr_stmt|;
operator|(
operator|*
name|pvarChildren
operator|)
operator|.
name|lVal
operator|=
name|sel
index|[
literal|0
index|]
expr_stmt|;
return|return
name|S_OK
return|;
block|}
name|IEnumVARIANT
modifier|*
name|iface
init|=
operator|new
name|QWindowsEnumerate
argument_list|(
name|sel
argument_list|)
decl_stmt|;
name|IUnknown
modifier|*
name|uiface
decl_stmt|;
name|iface
operator|->
name|QueryInterface
argument_list|(
name|IID_IUnknown
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|uiface
argument_list|)
expr_stmt|;
operator|(
operator|*
name|pvarChildren
operator|)
operator|.
name|vt
operator|=
name|VT_UNKNOWN
expr_stmt|;
operator|(
operator|*
name|pvarChildren
operator|)
operator|.
name|punkVal
operator|=
name|uiface
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|/**************************************************************\  *                         IOleWindow                          *  **************************************************************/
end_comment
begin_function
DECL|function|GetWindow
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|GetWindow
parameter_list|(
name|HWND
modifier|*
name|phwnd
parameter_list|)
block|{
operator|*
name|phwnd
operator|=
literal|0
expr_stmt|;
name|QAccessibleInterface
modifier|*
name|accessible
init|=
name|accessibleInterface
argument_list|()
decl_stmt|;
name|accessibleDebugClientCalls
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|accessible
condition|)
return|return
name|E_FAIL
return|;
name|QWindow
modifier|*
name|window
init|=
name|QWindowsAccessibility
operator|::
name|windowHelper
argument_list|(
name|accessible
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
return|return
name|E_FAIL
return|;
name|QPlatformNativeInterface
modifier|*
name|platform
init|=
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|platform
argument_list|)
expr_stmt|;
operator|*
name|phwnd
operator|=
operator|(
name|HWND
operator|)
name|platform
operator|->
name|nativeResourceForWindow
argument_list|(
literal|"handle"
argument_list|,
name|window
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaAccessibility
argument_list|)
operator|<<
literal|"QWindowsAccessible::GetWindow(): "
operator|<<
operator|*
name|phwnd
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|ContextSensitiveHelp
name|HRESULT
name|STDMETHODCALLTYPE
name|QWindowsMsaaAccessible
operator|::
name|ContextSensitiveHelp
parameter_list|(
name|BOOL
parameter_list|)
block|{
return|return
name|S_OK
return|;
block|}
end_function
begin_define
DECL|macro|IF_EQUAL_RETURN_IIDSTRING
define|#
directive|define
name|IF_EQUAL_RETURN_IIDSTRING
parameter_list|(
name|id
parameter_list|,
name|iid
parameter_list|)
value|if (id == iid) return QByteArray(#iid)
end_define
begin_function
DECL|function|IIDToString
name|QByteArray
name|QWindowsMsaaAccessible
operator|::
name|IIDToString
parameter_list|(
name|REFIID
name|id
parameter_list|)
block|{
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IUnknown
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IDispatch
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IAccessible
argument_list|)
expr_stmt|;
name|IF_EQUAL_RETURN_IIDSTRING
argument_list|(
name|id
argument_list|,
name|IID_IOleWindow
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_ACCESSIBILITY
end_comment
end_unit
