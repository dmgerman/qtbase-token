begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontdatabase_ft.h"
end_include
begin_comment
comment|// for default font
end_comment
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontengine.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontenginedirectwrite.h"
end_include
begin_include
include|#
directive|include
file|"qtwindows_additional.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QFont>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmath.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QtEndian>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThreadStorage>
end_include
begin_include
include|#
directive|include
file|<wchar.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|"qplatformfunctions_wince.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<dwrite.h>
end_include
begin_include
include|#
directive|include
file|<d2d1.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// Helper classes for creating font engines directly from font data
end_comment
begin_namespace
namespace|namespace
block|{
pragma|#
directive|pragma
name|pack
name|(
name|1
name|)
comment|// Common structure for all formats of the "name" table
DECL|struct|NameTable
struct|struct
name|NameTable
block|{
DECL|member|format
name|quint16
name|format
decl_stmt|;
DECL|member|count
name|quint16
name|count
decl_stmt|;
DECL|member|stringOffset
name|quint16
name|stringOffset
decl_stmt|;
block|}
struct|;
DECL|struct|NameRecord
struct|struct
name|NameRecord
block|{
DECL|member|platformID
name|quint16
name|platformID
decl_stmt|;
DECL|member|encodingID
name|quint16
name|encodingID
decl_stmt|;
DECL|member|languageID
name|quint16
name|languageID
decl_stmt|;
DECL|member|nameID
name|quint16
name|nameID
decl_stmt|;
DECL|member|length
name|quint16
name|length
decl_stmt|;
DECL|member|offset
name|quint16
name|offset
decl_stmt|;
block|}
struct|;
DECL|struct|OffsetSubTable
struct|struct
name|OffsetSubTable
block|{
DECL|member|scalerType
name|quint32
name|scalerType
decl_stmt|;
DECL|member|numTables
name|quint16
name|numTables
decl_stmt|;
DECL|member|searchRange
name|quint16
name|searchRange
decl_stmt|;
DECL|member|entrySelector
name|quint16
name|entrySelector
decl_stmt|;
DECL|member|rangeShift
name|quint16
name|rangeShift
decl_stmt|;
block|}
struct|;
DECL|struct|TableDirectory
struct|struct
name|TableDirectory
block|{
DECL|member|identifier
name|quint32
name|identifier
decl_stmt|;
DECL|member|checkSum
name|quint32
name|checkSum
decl_stmt|;
DECL|member|offset
name|quint32
name|offset
decl_stmt|;
DECL|member|length
name|quint32
name|length
decl_stmt|;
block|}
struct|;
DECL|struct|OS2Table
struct|struct
name|OS2Table
block|{
DECL|member|version
name|quint16
name|version
decl_stmt|;
DECL|member|avgCharWidth
name|qint16
name|avgCharWidth
decl_stmt|;
DECL|member|weightClass
name|quint16
name|weightClass
decl_stmt|;
DECL|member|widthClass
name|quint16
name|widthClass
decl_stmt|;
DECL|member|type
name|quint16
name|type
decl_stmt|;
DECL|member|subscriptXSize
name|qint16
name|subscriptXSize
decl_stmt|;
DECL|member|subscriptYSize
name|qint16
name|subscriptYSize
decl_stmt|;
DECL|member|subscriptXOffset
name|qint16
name|subscriptXOffset
decl_stmt|;
DECL|member|subscriptYOffset
name|qint16
name|subscriptYOffset
decl_stmt|;
DECL|member|superscriptXSize
name|qint16
name|superscriptXSize
decl_stmt|;
DECL|member|superscriptYSize
name|qint16
name|superscriptYSize
decl_stmt|;
DECL|member|superscriptXOffset
name|qint16
name|superscriptXOffset
decl_stmt|;
DECL|member|superscriptYOffset
name|qint16
name|superscriptYOffset
decl_stmt|;
DECL|member|strikeOutSize
name|qint16
name|strikeOutSize
decl_stmt|;
DECL|member|strikeOutPosition
name|qint16
name|strikeOutPosition
decl_stmt|;
DECL|member|familyClass
name|qint16
name|familyClass
decl_stmt|;
DECL|member|panose
name|quint8
name|panose
index|[
literal|10
index|]
decl_stmt|;
DECL|member|unicodeRanges
name|quint32
name|unicodeRanges
index|[
literal|4
index|]
decl_stmt|;
DECL|member|vendorID
name|quint8
name|vendorID
index|[
literal|4
index|]
decl_stmt|;
DECL|member|selection
name|quint16
name|selection
decl_stmt|;
DECL|member|firstCharIndex
name|quint16
name|firstCharIndex
decl_stmt|;
DECL|member|lastCharIndex
name|quint16
name|lastCharIndex
decl_stmt|;
DECL|member|typoAscender
name|qint16
name|typoAscender
decl_stmt|;
DECL|member|typoDescender
name|qint16
name|typoDescender
decl_stmt|;
DECL|member|typoLineGap
name|qint16
name|typoLineGap
decl_stmt|;
DECL|member|winAscent
name|quint16
name|winAscent
decl_stmt|;
DECL|member|winDescent
name|quint16
name|winDescent
decl_stmt|;
DECL|member|codepageRanges
name|quint32
name|codepageRanges
index|[
literal|2
index|]
decl_stmt|;
DECL|member|height
name|qint16
name|height
decl_stmt|;
DECL|member|capHeight
name|qint16
name|capHeight
decl_stmt|;
DECL|member|defaultChar
name|quint16
name|defaultChar
decl_stmt|;
DECL|member|breakChar
name|quint16
name|breakChar
decl_stmt|;
DECL|member|maxContext
name|quint16
name|maxContext
decl_stmt|;
block|}
struct|;
pragma|#
directive|pragma
name|pack
name|(
name|)
DECL|class|EmbeddedFont
class|class
name|EmbeddedFont
block|{
public|public:
DECL|function|EmbeddedFont
name|EmbeddedFont
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
member_init_list|:
name|m_fontData
argument_list|(
name|fontData
argument_list|)
block|{}
name|QString
name|changeFamilyName
parameter_list|(
specifier|const
name|QString
modifier|&
name|newFamilyName
parameter_list|)
function_decl|;
DECL|function|data
name|QByteArray
name|data
parameter_list|()
specifier|const
block|{
return|return
name|m_fontData
return|;
block|}
name|TableDirectory
modifier|*
name|tableDirectoryEntry
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|tagName
parameter_list|)
function_decl|;
name|QString
name|familyName
parameter_list|(
name|TableDirectory
modifier|*
name|nameTableDirectory
init|=
literal|0
parameter_list|)
function_decl|;
private|private:
DECL|member|m_fontData
name|QByteArray
name|m_fontData
decl_stmt|;
block|}
class|;
DECL|function|tableDirectoryEntry
name|TableDirectory
modifier|*
name|EmbeddedFont
operator|::
name|tableDirectoryEntry
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|tagName
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|tagName
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|quint32
name|tagId
init|=
operator|*
operator|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|tagName
operator|.
name|constData
argument_list|()
argument_list|)
operator|)
decl_stmt|;
specifier|const
name|size_t
name|fontDataSize
init|=
name|m_fontData
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|fontDataSize
operator|<
sizeof|sizeof
argument_list|(
name|OffsetSubTable
argument_list|)
argument_list|)
condition|)
return|return
literal|0
return|;
name|OffsetSubTable
modifier|*
name|offsetSubTable
init|=
cast|reinterpret_cast
argument_list|<
name|OffsetSubTable
operator|*
argument_list|>
argument_list|(
name|m_fontData
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|TableDirectory
modifier|*
name|tableDirectory
init|=
cast|reinterpret_cast
argument_list|<
name|TableDirectory
operator|*
argument_list|>
argument_list|(
name|offsetSubTable
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|size_t
name|tableCount
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|offsetSubTable
operator|->
name|numTables
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|fontDataSize
operator|<
sizeof|sizeof
argument_list|(
name|OffsetSubTable
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|TableDirectory
argument_list|)
operator|*
name|tableCount
argument_list|)
condition|)
return|return
literal|0
return|;
name|TableDirectory
modifier|*
name|tableDirectoryEnd
init|=
name|tableDirectory
operator|+
name|tableCount
decl_stmt|;
for|for
control|(
name|TableDirectory
modifier|*
name|entry
init|=
name|tableDirectory
init|;
name|entry
operator|<
name|tableDirectoryEnd
condition|;
operator|++
name|entry
control|)
block|{
if|if
condition|(
name|entry
operator|->
name|identifier
operator|==
name|tagId
condition|)
return|return
name|entry
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|familyName
name|QString
name|EmbeddedFont
operator|::
name|familyName
parameter_list|(
name|TableDirectory
modifier|*
name|nameTableDirectoryEntry
parameter_list|)
block|{
name|QString
name|name
decl_stmt|;
if|if
condition|(
name|nameTableDirectoryEntry
operator|==
literal|0
condition|)
name|nameTableDirectoryEntry
operator|=
name|tableDirectoryEntry
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|nameTableDirectoryEntry
operator|!=
literal|0
condition|)
block|{
name|quint32
name|offset
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|nameTableDirectoryEntry
operator|->
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|quint32
argument_list|(
name|m_fontData
operator|.
name|size
argument_list|()
argument_list|)
operator|<
name|offset
operator|+
sizeof|sizeof
argument_list|(
name|NameTable
argument_list|)
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
name|NameTable
modifier|*
name|nameTable
init|=
cast|reinterpret_cast
argument_list|<
name|NameTable
operator|*
argument_list|>
argument_list|(
name|m_fontData
operator|.
name|data
argument_list|()
operator|+
name|offset
argument_list|)
decl_stmt|;
name|NameRecord
modifier|*
name|nameRecord
init|=
cast|reinterpret_cast
argument_list|<
name|NameRecord
operator|*
argument_list|>
argument_list|(
name|nameTable
operator|+
literal|1
argument_list|)
decl_stmt|;
name|quint16
name|nameTableCount
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|nameTable
operator|->
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|quint32
argument_list|(
name|m_fontData
operator|.
name|size
argument_list|()
argument_list|)
operator|<
name|offset
operator|+
sizeof|sizeof
argument_list|(
name|NameRecord
argument_list|)
operator|*
name|nameTableCount
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameTableCount
condition|;
operator|++
name|i
operator|,
operator|++
name|nameRecord
control|)
block|{
if|if
condition|(
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|nameRecord
operator|->
name|nameID
argument_list|)
operator|==
literal|1
operator|&&
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|nameRecord
operator|->
name|platformID
argument_list|)
operator|==
literal|3
comment|// Windows
operator|&&
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|nameRecord
operator|->
name|languageID
argument_list|)
operator|==
literal|0x0409
condition|)
block|{
comment|// US English
name|quint16
name|stringOffset
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|nameTable
operator|->
name|stringOffset
argument_list|)
decl_stmt|;
name|quint16
name|nameOffset
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|nameRecord
operator|->
name|offset
argument_list|)
decl_stmt|;
name|quint16
name|nameLength
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|nameRecord
operator|->
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|quint32
argument_list|(
name|m_fontData
operator|.
name|size
argument_list|()
argument_list|)
operator|<
name|offset
operator|+
name|stringOffset
operator|+
name|nameOffset
operator|+
name|nameLength
argument_list|)
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|const
name|void
modifier|*
name|ptr
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint8
operator|*
argument_list|>
argument_list|(
name|nameTable
argument_list|)
operator|+
name|stringOffset
operator|+
name|nameOffset
decl_stmt|;
specifier|const
name|quint16
modifier|*
name|s
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint16
operator|*
argument_list|>
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
specifier|const
name|quint16
modifier|*
name|e
init|=
name|s
operator|+
name|nameLength
operator|/
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
decl_stmt|;
while|while
condition|(
name|s
operator|!=
name|e
condition|)
name|name
operator|+=
name|QChar
argument_list|(
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
operator|*
name|s
operator|++
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|name
return|;
block|}
DECL|function|changeFamilyName
name|QString
name|EmbeddedFont
operator|::
name|changeFamilyName
parameter_list|(
specifier|const
name|QString
modifier|&
name|newFamilyName
parameter_list|)
block|{
name|TableDirectory
modifier|*
name|nameTableDirectoryEntry
init|=
name|tableDirectoryEntry
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameTableDirectoryEntry
operator|==
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|oldFamilyName
init|=
name|familyName
argument_list|(
name|nameTableDirectoryEntry
argument_list|)
decl_stmt|;
comment|// Reserve size for name table header, five required name records and string
specifier|const
name|int
name|requiredRecordCount
init|=
literal|5
decl_stmt|;
name|quint16
name|nameIds
index|[
name|requiredRecordCount
index|]
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|}
decl_stmt|;
name|int
name|sizeOfHeader
init|=
sizeof|sizeof
argument_list|(
name|NameTable
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|NameRecord
argument_list|)
operator|*
name|requiredRecordCount
decl_stmt|;
name|int
name|newFamilyNameSize
init|=
name|newFamilyName
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|regularString
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Regular"
argument_list|)
decl_stmt|;
name|int
name|regularStringSize
init|=
name|regularString
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|quint16
argument_list|)
decl_stmt|;
comment|// Align table size of table to 32 bits (pad with 0)
name|int
name|fullSize
init|=
operator|(
operator|(
name|sizeOfHeader
operator|+
name|newFamilyNameSize
operator|+
name|regularStringSize
operator|)
operator|&
operator|~
literal|3
operator|)
operator|+
literal|4
decl_stmt|;
name|QByteArray
name|newNameTable
argument_list|(
name|fullSize
argument_list|,
name|char
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|NameTable
modifier|*
name|nameTable
init|=
cast|reinterpret_cast
argument_list|<
name|NameTable
operator|*
argument_list|>
argument_list|(
name|newNameTable
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|nameTable
operator|->
name|count
operator|=
name|qbswap
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|requiredRecordCount
argument_list|)
expr_stmt|;
name|nameTable
operator|->
name|stringOffset
operator|=
name|qbswap
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|sizeOfHeader
argument_list|)
expr_stmt|;
name|NameRecord
modifier|*
name|nameRecord
init|=
cast|reinterpret_cast
argument_list|<
name|NameRecord
operator|*
argument_list|>
argument_list|(
name|nameTable
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requiredRecordCount
condition|;
operator|++
name|i
operator|,
name|nameRecord
operator|++
control|)
block|{
name|nameRecord
operator|->
name|nameID
operator|=
name|qbswap
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|nameIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|nameRecord
operator|->
name|encodingID
operator|=
name|qbswap
argument_list|<
name|quint16
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nameRecord
operator|->
name|languageID
operator|=
name|qbswap
argument_list|<
name|quint16
argument_list|>
argument_list|(
literal|0x0409
argument_list|)
expr_stmt|;
name|nameRecord
operator|->
name|platformID
operator|=
name|qbswap
argument_list|<
name|quint16
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|nameRecord
operator|->
name|length
operator|=
name|qbswap
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|newFamilyNameSize
argument_list|)
expr_stmt|;
comment|// Special case for sub-family
if|if
condition|(
name|nameIds
index|[
name|i
index|]
operator|==
literal|4
condition|)
block|{
name|nameRecord
operator|->
name|offset
operator|=
name|qbswap
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|newFamilyNameSize
argument_list|)
expr_stmt|;
name|nameRecord
operator|->
name|length
operator|=
name|qbswap
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|regularStringSize
argument_list|)
expr_stmt|;
block|}
block|}
comment|// nameRecord now points to string data
name|quint16
modifier|*
name|stringStorage
init|=
cast|reinterpret_cast
argument_list|<
name|quint16
operator|*
argument_list|>
argument_list|(
name|nameRecord
argument_list|)
decl_stmt|;
specifier|const
name|quint16
modifier|*
name|sourceString
init|=
name|newFamilyName
operator|.
name|utf16
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newFamilyName
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|stringStorage
index|[
name|i
index|]
operator|=
name|qbswap
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|sourceString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|stringStorage
operator|+=
name|newFamilyName
operator|.
name|size
argument_list|()
expr_stmt|;
name|sourceString
operator|=
name|regularString
operator|.
name|utf16
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regularString
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|stringStorage
index|[
name|i
index|]
operator|=
name|qbswap
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|sourceString
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|quint32
modifier|*
name|p
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|newNameTable
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|quint32
modifier|*
name|tableEnd
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|newNameTable
operator|.
name|data
argument_list|()
operator|+
name|fullSize
argument_list|)
decl_stmt|;
name|quint32
name|checkSum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|p
operator|<
name|tableEnd
condition|)
name|checkSum
operator|+=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
operator|*
operator|(
name|p
operator|++
operator|)
argument_list|)
expr_stmt|;
name|nameTableDirectoryEntry
operator|->
name|checkSum
operator|=
name|qbswap
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|checkSum
argument_list|)
expr_stmt|;
name|nameTableDirectoryEntry
operator|->
name|offset
operator|=
name|qbswap
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|m_fontData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nameTableDirectoryEntry
operator|->
name|length
operator|=
name|qbswap
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|fullSize
argument_list|)
expr_stmt|;
name|m_fontData
operator|.
name|append
argument_list|(
name|newNameTable
argument_list|)
expr_stmt|;
return|return
name|oldFamilyName
return|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
DECL|class|DirectWriteFontFileStream
class|class
name|DirectWriteFontFileStream
super|:
specifier|public
name|IDWriteFontFileStream
block|{
public|public:
DECL|function|DirectWriteFontFileStream
name|DirectWriteFontFileStream
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
member_init_list|:
name|m_fontData
argument_list|(
name|fontData
argument_list|)
member_init_list|,
name|m_referenceCount
argument_list|(
literal|0
argument_list|)
block|{         }
DECL|function|~DirectWriteFontFileStream
name|~
name|DirectWriteFontFileStream
parameter_list|()
block|{         }
name|HRESULT
name|STDMETHODCALLTYPE
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
modifier|*
modifier|*
name|object
parameter_list|)
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|AddRef
parameter_list|()
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|Release
parameter_list|()
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|ReadFileFragment
parameter_list|(
specifier|const
name|void
modifier|*
modifier|*
name|fragmentStart
parameter_list|,
name|UINT64
name|fileOffset
parameter_list|,
name|UINT64
name|fragmentSize
parameter_list|,
name|OUT
name|void
modifier|*
modifier|*
name|fragmentContext
parameter_list|)
function_decl|;
name|void
name|STDMETHODCALLTYPE
name|ReleaseFileFragment
parameter_list|(
name|void
modifier|*
name|fragmentContext
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|GetFileSize
parameter_list|(
name|OUT
name|UINT64
modifier|*
name|fileSize
parameter_list|)
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|GetLastWriteTime
parameter_list|(
name|OUT
name|UINT64
modifier|*
name|lastWriteTime
parameter_list|)
function_decl|;
private|private:
DECL|member|m_fontData
name|QByteArray
name|m_fontData
decl_stmt|;
DECL|member|m_referenceCount
name|ULONG
name|m_referenceCount
decl_stmt|;
block|}
class|;
DECL|function|QueryInterface
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
modifier|*
modifier|*
name|object
parameter_list|)
block|{
if|if
condition|(
name|iid
operator|==
name|IID_IUnknown
operator|||
name|iid
operator|==
name|__uuidof
argument_list|(
name|IDWriteFontFileStream
argument_list|)
condition|)
block|{
operator|*
name|object
operator|=
name|this
expr_stmt|;
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
else|else
block|{
operator|*
name|object
operator|=
name|NULL
expr_stmt|;
return|return
name|E_NOINTERFACE
return|;
block|}
block|}
DECL|function|AddRef
name|ULONG
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|AddRef
parameter_list|()
block|{
return|return
name|InterlockedIncrement
argument_list|(
operator|&
name|m_referenceCount
argument_list|)
return|;
block|}
DECL|function|Release
name|ULONG
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|Release
parameter_list|()
block|{
name|ULONG
name|newCount
init|=
name|InterlockedDecrement
argument_list|(
operator|&
name|m_referenceCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCount
operator|==
literal|0
condition|)
operator|delete
name|this
expr_stmt|;
return|return
name|newCount
return|;
block|}
DECL|function|ReadFileFragment
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|ReadFileFragment
parameter_list|(
specifier|const
name|void
modifier|*
modifier|*
name|fragmentStart
parameter_list|,
name|UINT64
name|fileOffset
parameter_list|,
name|UINT64
name|fragmentSize
parameter_list|,
name|OUT
name|void
modifier|*
modifier|*
name|fragmentContext
parameter_list|)
block|{
operator|*
name|fragmentContext
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|fragmentSize
operator|+
name|fileOffset
operator|<=
name|m_fontData
operator|.
name|size
argument_list|()
condition|)
block|{
operator|*
name|fragmentStart
operator|=
name|m_fontData
operator|.
name|data
argument_list|()
operator|+
name|fileOffset
expr_stmt|;
return|return
name|S_OK
return|;
block|}
else|else
block|{
operator|*
name|fragmentStart
operator|=
name|NULL
expr_stmt|;
return|return
name|E_FAIL
return|;
block|}
block|}
DECL|function|ReleaseFileFragment
name|void
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|ReleaseFileFragment
parameter_list|(
name|void
modifier|*
parameter_list|)
block|{     }
DECL|function|GetFileSize
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|GetFileSize
parameter_list|(
name|UINT64
modifier|*
name|fileSize
parameter_list|)
block|{
operator|*
name|fileSize
operator|=
name|m_fontData
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
DECL|function|GetLastWriteTime
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileStream
operator|::
name|GetLastWriteTime
parameter_list|(
name|UINT64
modifier|*
name|lastWriteTime
parameter_list|)
block|{
operator|*
name|lastWriteTime
operator|=
literal|0
expr_stmt|;
return|return
name|E_NOTIMPL
return|;
block|}
DECL|class|DirectWriteFontFileLoader
class|class
name|DirectWriteFontFileLoader
super|:
specifier|public
name|IDWriteFontFileLoader
block|{
public|public:
DECL|function|DirectWriteFontFileLoader
name|DirectWriteFontFileLoader
parameter_list|()
member_init_list|:
name|m_referenceCount
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~DirectWriteFontFileLoader
name|~
name|DirectWriteFontFileLoader
parameter_list|()
block|{         }
DECL|function|addKey
specifier|inline
name|void
name|addKey
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|m_fontDatas
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|m_fontDatas
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|fontData
argument_list|)
expr_stmt|;
block|}
DECL|function|removeKey
specifier|inline
name|void
name|removeKey
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|)
block|{
name|m_fontDatas
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|HRESULT
name|STDMETHODCALLTYPE
name|QueryInterface
parameter_list|(
name|REFIID
name|iid
parameter_list|,
name|void
modifier|*
modifier|*
name|object
parameter_list|)
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|AddRef
parameter_list|()
function_decl|;
name|ULONG
name|STDMETHODCALLTYPE
name|Release
parameter_list|()
function_decl|;
name|HRESULT
name|STDMETHODCALLTYPE
name|CreateStreamFromKey
parameter_list|(
name|void
specifier|const
modifier|*
name|fontFileReferenceKey
parameter_list|,
name|UINT32
name|fontFileReferenceKeySize
parameter_list|,
name|OUT
name|IDWriteFontFileStream
modifier|*
modifier|*
name|fontFileStream
parameter_list|)
function_decl|;
private|private:
DECL|member|m_referenceCount
name|ULONG
name|m_referenceCount
decl_stmt|;
DECL|member|m_fontDatas
name|QHash
argument_list|<
specifier|const
name|void
modifier|*
argument_list|,
name|QByteArray
argument_list|>
name|m_fontDatas
decl_stmt|;
block|}
class|;
DECL|function|QueryInterface
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileLoader
operator|::
name|QueryInterface
parameter_list|(
specifier|const
name|IID
modifier|&
name|iid
parameter_list|,
name|void
modifier|*
modifier|*
name|object
parameter_list|)
block|{
if|if
condition|(
name|iid
operator|==
name|IID_IUnknown
operator|||
name|iid
operator|==
name|__uuidof
argument_list|(
name|IDWriteFontFileLoader
argument_list|)
condition|)
block|{
operator|*
name|object
operator|=
name|this
expr_stmt|;
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
else|else
block|{
operator|*
name|object
operator|=
name|NULL
expr_stmt|;
return|return
name|E_NOINTERFACE
return|;
block|}
block|}
DECL|function|AddRef
name|ULONG
name|STDMETHODCALLTYPE
name|DirectWriteFontFileLoader
operator|::
name|AddRef
parameter_list|()
block|{
return|return
name|InterlockedIncrement
argument_list|(
operator|&
name|m_referenceCount
argument_list|)
return|;
block|}
DECL|function|Release
name|ULONG
name|STDMETHODCALLTYPE
name|DirectWriteFontFileLoader
operator|::
name|Release
parameter_list|()
block|{
name|ULONG
name|newCount
init|=
name|InterlockedDecrement
argument_list|(
operator|&
name|m_referenceCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCount
operator|==
literal|0
condition|)
operator|delete
name|this
expr_stmt|;
return|return
name|newCount
return|;
block|}
DECL|function|CreateStreamFromKey
name|HRESULT
name|STDMETHODCALLTYPE
name|DirectWriteFontFileLoader
operator|::
name|CreateStreamFromKey
parameter_list|(
name|void
specifier|const
modifier|*
name|fontFileReferenceKey
parameter_list|,
name|UINT32
name|fontFileReferenceKeySize
parameter_list|,
name|IDWriteFontFileStream
modifier|*
modifier|*
name|fontFileStream
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|fontFileReferenceKeySize
argument_list|)
expr_stmt|;
if|if
condition|(
name|fontFileReferenceKeySize
operator|!=
sizeof|sizeof
argument_list|(
specifier|const
name|void
operator|*
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Wrong key size"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
name|E_FAIL
return|;
block|}
specifier|const
name|void
modifier|*
name|key
init|=
operator|*
cast|reinterpret_cast
argument_list|<
name|void
operator|*
specifier|const
operator|*
argument_list|>
argument_list|(
name|fontFileReferenceKey
argument_list|)
decl_stmt|;
operator|*
name|fontFileStream
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
operator|!
name|m_fontDatas
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
return|return
name|E_FAIL
return|;
name|QByteArray
name|fontData
init|=
name|m_fontDatas
operator|.
name|value
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|DirectWriteFontFileStream
modifier|*
name|stream
init|=
operator|new
name|DirectWriteFontFileStream
argument_list|(
name|fontData
argument_list|)
decl_stmt|;
name|stream
operator|->
name|AddRef
argument_list|()
expr_stmt|;
operator|*
name|fontFileStream
operator|=
name|stream
expr_stmt|;
return|return
name|S_OK
return|;
block|}
DECL|class|CustomFontFileLoader
class|class
name|CustomFontFileLoader
block|{
public|public:
DECL|function|CustomFontFileLoader
name|CustomFontFileLoader
parameter_list|()
member_init_list|:
name|m_directWriteFactory
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_directWriteFontFileLoader
argument_list|(
literal|0
argument_list|)
block|{
name|HRESULT
name|hres
init|=
name|DWriteCreateFactory
argument_list|(
name|DWRITE_FACTORY_TYPE_SHARED
argument_list|,
name|__uuidof
argument_list|(
name|IDWriteFactory
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|IUnknown
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|m_directWriteFactory
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hres
argument_list|,
literal|"%s: DWriteCreateFactory failed."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_directWriteFontFileLoader
operator|=
operator|new
name|DirectWriteFontFileLoader
argument_list|()
expr_stmt|;
name|m_directWriteFactory
operator|->
name|RegisterFontFileLoader
argument_list|(
name|m_directWriteFontFileLoader
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|~CustomFontFileLoader
name|~
name|CustomFontFileLoader
parameter_list|()
block|{
if|if
condition|(
name|m_directWriteFactory
operator|!=
literal|0
operator|&&
name|m_directWriteFontFileLoader
operator|!=
literal|0
condition|)
name|m_directWriteFactory
operator|->
name|UnregisterFontFileLoader
argument_list|(
name|m_directWriteFontFileLoader
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_directWriteFactory
operator|!=
literal|0
condition|)
name|m_directWriteFactory
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
DECL|function|addKey
name|void
name|addKey
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|)
block|{
if|if
condition|(
name|m_directWriteFontFileLoader
operator|!=
literal|0
condition|)
name|m_directWriteFontFileLoader
operator|->
name|addKey
argument_list|(
name|key
argument_list|,
name|fontData
argument_list|)
expr_stmt|;
block|}
DECL|function|removeKey
name|void
name|removeKey
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|)
block|{
if|if
condition|(
name|m_directWriteFontFileLoader
operator|!=
literal|0
condition|)
name|m_directWriteFontFileLoader
operator|->
name|removeKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|function|loader
name|IDWriteFontFileLoader
modifier|*
name|loader
parameter_list|()
specifier|const
block|{
return|return
name|m_directWriteFontFileLoader
return|;
block|}
private|private:
DECL|member|m_directWriteFactory
name|IDWriteFactory
modifier|*
name|m_directWriteFactory
decl_stmt|;
DECL|member|m_directWriteFontFileLoader
name|DirectWriteFontFileLoader
modifier|*
name|m_directWriteFontFileLoader
decl_stmt|;
block|}
class|;
endif|#
directive|endif
block|}
end_namespace
begin_comment
comment|// Anonymous namespace
end_comment
begin_comment
comment|/*!     \struct QWindowsFontEngineData     \brief Static constant data shared by the font engines.     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsFontEngineData
name|QWindowsFontEngineData
operator|::
name|QWindowsFontEngineData
parameter_list|()
member_init_list|:
name|clearTypeEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|fontSmoothingGamma
argument_list|(
name|QWindowsFontDatabase
operator|::
name|fontSmoothingGamma
argument_list|()
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
member_init_list|,
name|directWriteFactory
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|directWriteGdiInterop
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
block|{
comment|// from qapplication_win.cpp
name|UINT
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETFONTSMOOTHINGTYPE
argument_list|,
literal|0
argument_list|,
operator|&
name|result
argument_list|,
literal|0
argument_list|)
condition|)
name|clearTypeEnabled
operator|=
operator|(
name|result
operator|==
name|FE_FONTSMOOTHINGCLEARTYPE
operator|)
expr_stmt|;
specifier|const
name|qreal
name|gray_gamma
init|=
literal|2.31
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|pow_gamma
index|[
name|i
index|]
operator|=
name|uint
argument_list|(
name|qRound
argument_list|(
name|qPow
argument_list|(
name|i
operator|/
name|qreal
argument_list|(
literal|255.
argument_list|)
argument_list|,
name|gray_gamma
argument_list|)
operator|*
literal|2047
argument_list|)
argument_list|)
expr_stmt|;
name|HDC
name|displayDC
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|hdc
operator|=
name|CreateCompatibleDC
argument_list|(
name|displayDC
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|displayDC
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsFontEngineData
name|QWindowsFontEngineData
operator|::
name|~
name|QWindowsFontEngineData
parameter_list|()
block|{
if|if
condition|(
name|hdc
condition|)
name|DeleteDC
argument_list|(
name|hdc
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
if|if
condition|(
name|directWriteGdiInterop
condition|)
name|directWriteGdiInterop
operator|->
name|Release
argument_list|()
expr_stmt|;
if|if
condition|(
name|directWriteFactory
condition|)
name|directWriteFactory
operator|->
name|Release
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|fontSmoothingGamma
name|qreal
name|QWindowsFontDatabase
operator|::
name|fontSmoothingGamma
parameter_list|()
block|{
name|int
name|winSmooth
decl_stmt|;
name|qreal
name|result
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
literal|0x200C
comment|/* SPI_GETFONTSMOOTHINGCONTRAST */
argument_list|,
literal|0
argument_list|,
operator|&
name|winSmooth
argument_list|,
literal|0
argument_list|)
condition|)
name|result
operator|=
name|qreal
argument_list|(
name|winSmooth
argument_list|)
operator|/
name|qreal
argument_list|(
literal|1000.0
argument_list|)
expr_stmt|;
comment|// Safeguard ourselves against corrupt registry values...
if|if
condition|(
name|result
operator|>
literal|5
operator|||
name|result
operator|<
literal|1
condition|)
name|result
operator|=
name|qreal
argument_list|(
literal|1.4
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
end_if
begin_function
DECL|function|initDirectWrite
specifier|static
specifier|inline
name|bool
name|initDirectWrite
parameter_list|(
name|QWindowsFontEngineData
modifier|*
name|d
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|directWriteFactory
condition|)
block|{
specifier|const
name|HRESULT
name|hr
init|=
name|DWriteCreateFactory
argument_list|(
name|DWRITE_FACTORY_TYPE_SHARED
argument_list|,
name|__uuidof
argument_list|(
name|IDWriteFactory
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|IUnknown
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|d
operator|->
name|directWriteFactory
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: DWriteCreateFactory failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|directWriteGdiInterop
condition|)
block|{
specifier|const
name|HRESULT
name|hr
init|=
name|d
operator|->
name|directWriteFactory
operator|->
name|GetGdiInterop
argument_list|(
operator|&
name|d
operator|->
name|directWriteGdiInterop
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: GetGdiInterop failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(QT_NO_DIRECTWRITE)
end_comment
begin_comment
comment|/*!     \class QWindowsFontDatabase     \brief Font database for Windows      \note The Qt 4.8 WIndows font database employed a mechanism of     delayed population of the database again passing a font name     to EnumFontFamiliesEx(), working around the fact that     EnumFontFamiliesEx() does not list all fonts by default.     This should be introduced to Lighthouse as well?      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|def
parameter_list|)
block|{
name|d
operator|.
name|nospace
argument_list|()
operator|<<
literal|"Family="
operator|<<
name|def
operator|.
name|family
operator|<<
literal|" Stylename="
operator|<<
name|def
operator|.
name|styleName
operator|<<
literal|" pointsize="
operator|<<
name|def
operator|.
name|pointSize
operator|<<
literal|" pixelsize="
operator|<<
name|def
operator|.
name|pixelSize
operator|<<
literal|" styleHint="
operator|<<
name|def
operator|.
name|styleHint
operator|<<
literal|" weight="
operator|<<
name|def
operator|.
name|weight
operator|<<
literal|" stretch="
operator|<<
name|def
operator|.
name|stretch
operator|<<
literal|" hintingPreference="
operator|<<
name|def
operator|.
name|hintingPreference
operator|<<
literal|' '
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|writingSystemFromCharSet
specifier|static
specifier|inline
name|QFontDatabase
operator|::
name|WritingSystem
name|writingSystemFromCharSet
parameter_list|(
name|uchar
name|charSet
parameter_list|)
block|{
switch|switch
condition|(
name|charSet
condition|)
block|{
case|case
name|ANSI_CHARSET
case|:
case|case
name|EASTEUROPE_CHARSET
case|:
case|case
name|BALTIC_CHARSET
case|:
case|case
name|TURKISH_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Latin
return|;
case|case
name|GREEK_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Greek
return|;
case|case
name|RUSSIAN_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Cyrillic
return|;
case|case
name|HEBREW_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Hebrew
return|;
case|case
name|ARABIC_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Arabic
return|;
case|case
name|THAI_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Thai
return|;
case|case
name|GB2312_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|SimplifiedChinese
return|;
case|case
name|CHINESEBIG5_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|TraditionalChinese
return|;
case|case
name|SHIFTJIS_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Japanese
return|;
case|case
name|HANGUL_CHARSET
case|:
case|case
name|JOHAB_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Korean
return|;
case|case
name|VIETNAMESE_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Vietnamese
return|;
case|case
name|SYMBOL_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Symbol
return|;
default|default:
break|break;
block|}
return|return
name|QFontDatabase
operator|::
name|Any
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|MAKE_TAG
end_ifdef
begin_undef
DECL|macro|MAKE_TAG
undef|#
directive|undef
name|MAKE_TAG
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// GetFontData expects the tags in little endian ;(
end_comment
begin_define
DECL|macro|MAKE_TAG
define|#
directive|define
name|MAKE_TAG
parameter_list|(
name|ch1
parameter_list|,
name|ch2
parameter_list|,
name|ch3
parameter_list|,
name|ch4
parameter_list|)
value|(\     (((quint32)(ch4))<< 24) | \     (((quint32)(ch3))<< 16) | \     (((quint32)(ch2))<< 8) | \     ((quint32)(ch1)) \     )
end_define
begin_function
DECL|function|localizedName
name|bool
name|localizedName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
specifier|const
name|QChar
modifier|*
name|c
init|=
name|name
operator|.
name|unicode
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|c
index|[
name|i
index|]
operator|.
name|unicode
argument_list|()
operator|>=
literal|0x100
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|getUShort
specifier|static
specifier|inline
name|quint16
name|getUShort
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|p
parameter_list|)
block|{
name|quint16
name|val
decl_stmt|;
name|val
operator|=
operator|*
name|p
operator|++
operator|<<
literal|8
expr_stmt|;
name|val
operator||=
operator|*
name|p
expr_stmt|;
return|return
name|val
return|;
block|}
end_function
begin_function
DECL|function|getEnglishName
specifier|static
name|QString
name|getEnglishName
parameter_list|(
specifier|const
name|uchar
modifier|*
name|table
parameter_list|,
name|quint32
name|bytes
parameter_list|)
block|{
name|QString
name|i18n_name
decl_stmt|;
enum|enum
block|{
name|NameRecordSize
init|=
literal|12
block|,
name|FamilyId
init|=
literal|1
block|,
name|MS_LangIdEnglish
init|=
literal|0x009
block|}
enum|;
comment|// get the name table
name|quint16
name|count
decl_stmt|;
name|quint16
name|string_offset
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|names
decl_stmt|;
name|int
name|microsoft_id
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|apple_id
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|unicode_id
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|getUShort
argument_list|(
name|table
argument_list|)
operator|!=
literal|0
condition|)
goto|goto
name|error
goto|;
name|count
operator|=
name|getUShort
argument_list|(
name|table
operator|+
literal|2
argument_list|)
expr_stmt|;
name|string_offset
operator|=
name|getUShort
argument_list|(
name|table
operator|+
literal|4
argument_list|)
expr_stmt|;
name|names
operator|=
name|table
operator|+
literal|6
expr_stmt|;
if|if
condition|(
name|string_offset
operator|>=
name|bytes
operator|||
literal|6
operator|+
name|count
operator|*
name|NameRecordSize
operator|>
name|string_offset
condition|)
goto|goto
name|error
goto|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
comment|// search for the correct name entry
name|quint16
name|platform_id
init|=
name|getUShort
argument_list|(
name|names
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
name|quint16
name|encoding_id
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|2
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
name|quint16
name|language_id
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|4
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
name|quint16
name|name_id
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|6
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|name_id
operator|!=
name|FamilyId
condition|)
continue|continue;
enum|enum
block|{
name|PlatformId_Unicode
init|=
literal|0
block|,
name|PlatformId_Apple
init|=
literal|1
block|,
name|PlatformId_Microsoft
init|=
literal|3
block|}
enum|;
name|quint16
name|length
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|8
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
name|quint16
name|offset
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|10
operator|+
name|i
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|DWORD
argument_list|(
name|string_offset
operator|+
name|offset
operator|+
name|length
argument_list|)
operator|>=
name|bytes
condition|)
continue|continue;
if|if
condition|(
operator|(
name|platform_id
operator|==
name|PlatformId_Microsoft
operator|&&
operator|(
name|encoding_id
operator|==
literal|0
operator|||
name|encoding_id
operator|==
literal|1
operator|)
operator|)
operator|&&
operator|(
name|language_id
operator|&
literal|0x3ff
operator|)
operator|==
name|MS_LangIdEnglish
operator|&&
name|microsoft_id
operator|==
operator|-
literal|1
condition|)
name|microsoft_id
operator|=
name|i
expr_stmt|;
comment|// not sure if encoding id 4 for Unicode is utf16 or ucs4...
elseif|else
if|if
condition|(
name|platform_id
operator|==
name|PlatformId_Unicode
operator|&&
name|encoding_id
operator|<
literal|4
operator|&&
name|unicode_id
operator|==
operator|-
literal|1
condition|)
name|unicode_id
operator|=
name|i
expr_stmt|;
elseif|else
if|if
condition|(
name|platform_id
operator|==
name|PlatformId_Apple
operator|&&
name|encoding_id
operator|==
literal|0
operator|&&
name|language_id
operator|==
literal|0
condition|)
name|apple_id
operator|=
name|i
expr_stmt|;
block|}
block|{
name|bool
name|unicode
init|=
literal|false
decl_stmt|;
name|int
name|id
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|microsoft_id
operator|!=
operator|-
literal|1
condition|)
block|{
name|id
operator|=
name|microsoft_id
expr_stmt|;
name|unicode
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|apple_id
operator|!=
operator|-
literal|1
condition|)
block|{
name|id
operator|=
name|apple_id
expr_stmt|;
name|unicode
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unicode_id
operator|!=
operator|-
literal|1
condition|)
block|{
name|id
operator|=
name|unicode_id
expr_stmt|;
name|unicode
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|!=
operator|-
literal|1
condition|)
block|{
name|quint16
name|length
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|8
operator|+
name|id
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
name|quint16
name|offset
init|=
name|getUShort
argument_list|(
name|names
operator|+
literal|10
operator|+
name|id
operator|*
name|NameRecordSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|unicode
condition|)
block|{
comment|// utf16
name|length
operator|/=
literal|2
expr_stmt|;
name|i18n_name
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|QChar
modifier|*
name|uc
init|=
operator|(
name|QChar
operator|*
operator|)
name|i18n_name
operator|.
name|unicode
argument_list|()
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|string
init|=
name|table
operator|+
name|string_offset
operator|+
name|offset
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|uc
index|[
name|i
index|]
operator|=
name|getUShort
argument_list|(
name|string
operator|+
literal|2
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Apple Roman
name|i18n_name
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|QChar
modifier|*
name|uc
init|=
operator|(
name|QChar
operator|*
operator|)
name|i18n_name
operator|.
name|unicode
argument_list|()
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|string
init|=
name|table
operator|+
name|string_offset
operator|+
name|offset
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|uc
index|[
name|i
index|]
operator|=
name|QLatin1Char
argument_list|(
name|string
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|error
label|:
comment|//qDebug("got i18n name of '%s' for font '%s'", i18n_name.latin1(), familyName.toLocal8Bit().data());
return|return
name|i18n_name
return|;
block|}
end_function
begin_function
DECL|function|getEnglishName
name|QString
name|getEnglishName
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
block|{
name|QString
name|i18n_name
decl_stmt|;
name|HDC
name|hdc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
name|memset
argument_list|(
operator|&
name|lf
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|LOGFONT
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|familyName
operator|.
name|utf16
argument_list|()
argument_list|,
name|qMin
argument_list|(
name|familyName
operator|.
name|length
argument_list|()
argument_list|,
name|LF_FACESIZE
operator|-
literal|1
argument_list|)
operator|*
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|HFONT
name|hfont
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hfont
condition|)
block|{
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|HGDIOBJ
name|oldobj
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
decl_stmt|;
specifier|const
name|DWORD
name|name_tag
init|=
name|MAKE_TAG
argument_list|(
literal|'n'
argument_list|,
literal|'a'
argument_list|,
literal|'m'
argument_list|,
literal|'e'
argument_list|)
decl_stmt|;
comment|// get the name table
name|unsigned
name|char
modifier|*
name|table
init|=
literal|0
decl_stmt|;
name|DWORD
name|bytes
init|=
name|GetFontData
argument_list|(
name|hdc
argument_list|,
name|name_tag
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
name|GDI_ERROR
condition|)
block|{
comment|// ### Unused variable
comment|// int err = GetLastError();
goto|goto
name|error
goto|;
block|}
name|table
operator|=
operator|new
name|unsigned
name|char
index|[
name|bytes
index|]
expr_stmt|;
name|GetFontData
argument_list|(
name|hdc
argument_list|,
name|name_tag
argument_list|,
literal|0
argument_list|,
name|table
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytes
operator|==
name|GDI_ERROR
condition|)
goto|goto
name|error
goto|;
name|i18n_name
operator|=
name|getEnglishName
argument_list|(
name|table
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|error
label|:
operator|delete
index|[]
name|table
expr_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldobj
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|hfont
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
comment|//qDebug("got i18n name of '%s' for font '%s'", i18n_name.latin1(), familyName.toLocal8Bit().data());
return|return
name|i18n_name
return|;
block|}
end_function
begin_function
DECL|function|addFontToDatabase
specifier|static
name|bool
name|addFontToDatabase
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|,
name|uchar
name|charSet
parameter_list|,
specifier|const
name|TEXTMETRIC
modifier|*
name|textmetric
parameter_list|,
specifier|const
name|FONTSIGNATURE
modifier|*
name|signature
parameter_list|,
name|int
name|type
parameter_list|,
name|bool
name|registerAlias
parameter_list|)
block|{
comment|// the "@family" fonts are just the same as "family". Ignore them.
if|if
condition|(
name|familyName
operator|.
name|isEmpty
argument_list|()
operator|||
name|familyName
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'@'
argument_list|)
operator|||
name|familyName
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"WST_"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|static
specifier|const
name|int
name|SMOOTH_SCALABLE
init|=
literal|0xffff
decl_stmt|;
specifier|const
name|QString
name|foundryName
decl_stmt|;
comment|// No such concept.
specifier|const
name|NEWTEXTMETRIC
modifier|*
name|tm
init|=
operator|(
name|NEWTEXTMETRIC
operator|*
operator|)
name|textmetric
decl_stmt|;
specifier|const
name|bool
name|fixed
init|=
operator|!
operator|(
name|tm
operator|->
name|tmPitchAndFamily
operator|&
name|TMPF_FIXED_PITCH
operator|)
decl_stmt|;
specifier|const
name|bool
name|ttf
init|=
operator|(
name|tm
operator|->
name|tmPitchAndFamily
operator|&
name|TMPF_TRUETYPE
operator|)
decl_stmt|;
specifier|const
name|bool
name|scalable
init|=
name|tm
operator|->
name|tmPitchAndFamily
operator|&
operator|(
name|TMPF_VECTOR
operator||
name|TMPF_TRUETYPE
operator|)
decl_stmt|;
specifier|const
name|int
name|size
init|=
name|scalable
condition|?
name|SMOOTH_SCALABLE
else|:
name|tm
operator|->
name|tmHeight
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Style
name|style
init|=
name|tm
operator|->
name|tmItalic
condition|?
name|QFont
operator|::
name|StyleItalic
else|:
name|QFont
operator|::
name|StyleNormal
decl_stmt|;
specifier|const
name|bool
name|antialias
init|=
literal|false
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Weight
name|weight
init|=
name|QPlatformFontDatabase
operator|::
name|weightFromInteger
argument_list|(
name|tm
operator|->
name|tmWeight
argument_list|)
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Stretch
name|stretch
init|=
name|QFont
operator|::
name|Unstretched
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_OUTPUT
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|2
condition|)
block|{
name|QString
name|message
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|message
argument_list|)
decl_stmt|;
name|str
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|familyName
operator|<<
literal|' '
operator|<<
name|charSet
operator|<<
literal|" TTF="
operator|<<
name|ttf
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|DEVICE_FONTTYPE
condition|)
name|str
operator|<<
literal|" DEVICE"
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|RASTER_FONTTYPE
condition|)
name|str
operator|<<
literal|" RASTER"
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
name|str
operator|<<
literal|" TRUETYPE"
expr_stmt|;
name|str
operator|<<
literal|" scalable="
operator|<<
name|scalable
operator|<<
literal|" Size="
operator|<<
name|size
operator|<<
literal|" Style="
operator|<<
name|style
operator|<<
literal|" Weight="
operator|<<
name|weight
operator|<<
literal|" stretch="
operator|<<
name|stretch
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|message
expr_stmt|;
block|}
endif|#
directive|endif
name|QString
name|englishName
decl_stmt|;
if|if
condition|(
name|registerAlias
operator|&&
name|ttf
operator|&&
name|localizedName
argument_list|(
name|familyName
argument_list|)
condition|)
name|englishName
operator|=
name|getEnglishName
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
name|QSupportedWritingSystems
name|writingSystems
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|quint32
name|unicodeRange
index|[
literal|4
index|]
init|=
block|{
name|signature
operator|->
name|fsUsb
index|[
literal|0
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|1
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|2
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|3
index|]
block|}
decl_stmt|;
name|quint32
name|codePageRange
index|[
literal|2
index|]
init|=
block|{
name|signature
operator|->
name|fsCsb
index|[
literal|0
index|]
block|,
name|signature
operator|->
name|fsCsb
index|[
literal|1
index|]
block|}
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
if|if
condition|(
name|signature
operator|->
name|fsUsb
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
comment|// If the unicode ranges bit mask is zero then
comment|// EnumFontFamiliesEx failed to determine it properly.
comment|// In this case we just pretend that the font supports all languages.
name|unicodeRange
index|[
literal|0
index|]
operator|=
literal|0xbfffffff
expr_stmt|;
comment|// second most significant bit must be zero
name|unicodeRange
index|[
literal|1
index|]
operator|=
literal|0xffffffff
expr_stmt|;
name|unicodeRange
index|[
literal|2
index|]
operator|=
literal|0xffffffff
expr_stmt|;
name|unicodeRange
index|[
literal|3
index|]
operator|=
literal|0xffffffff
expr_stmt|;
block|}
endif|#
directive|endif
name|writingSystems
operator|=
name|QPlatformFontDatabase
operator|::
name|writingSystemsFromTrueTypeBits
argument_list|(
name|unicodeRange
argument_list|,
name|codePageRange
argument_list|)
expr_stmt|;
comment|// ### Hack to work around problem with Thai text on Windows 7. Segoe UI contains
comment|// the symbol for Baht, and Windows thus reports that it supports the Thai script.
comment|// Since it's the default UI font on this platform, most widgets will be unable to
comment|// display Thai text by default. As a temporary work around, we special case Segoe UI
comment|// and remove the Thai script from its list of supported writing systems.
if|if
condition|(
name|writingSystems
operator|.
name|supported
argument_list|(
name|QFontDatabase
operator|::
name|Thai
argument_list|)
operator|&&
name|familyName
operator|==
name|QLatin1String
argument_list|(
literal|"Segoe UI"
argument_list|)
condition|)
name|writingSystems
operator|.
name|setSupported
argument_list|(
name|QFontDatabase
operator|::
name|Thai
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QFontDatabase
operator|::
name|WritingSystem
name|ws
init|=
name|writingSystemFromCharSet
argument_list|(
name|charSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|ws
operator|!=
name|QFontDatabase
operator|::
name|Any
condition|)
name|writingSystems
operator|.
name|setSupported
argument_list|(
name|ws
argument_list|)
expr_stmt|;
block|}
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|familyName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|weight
argument_list|,
name|style
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// add fonts windows can generate for us:
if|if
condition|(
name|weight
operator|<=
name|QFont
operator|::
name|DemiBold
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|familyName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
name|style
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|!=
name|QFont
operator|::
name|StyleItalic
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|familyName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|weight
argument_list|,
name|QFont
operator|::
name|StyleItalic
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|weight
operator|<=
name|QFont
operator|::
name|DemiBold
operator|&&
name|style
operator|!=
name|QFont
operator|::
name|StyleItalic
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|familyName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
name|QFont
operator|::
name|StyleItalic
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|englishName
operator|.
name|isEmpty
argument_list|()
condition|)
name|QPlatformFontDatabase
operator|::
name|registerAliasToFontFamily
argument_list|(
name|familyName
argument_list|,
name|englishName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|storeFont
specifier|static
name|int
name|QT_WIN_CALLBACK
name|storeFont
parameter_list|(
name|ENUMLOGFONTEX
modifier|*
name|f
parameter_list|,
name|NEWTEXTMETRICEX
modifier|*
name|textmetric
parameter_list|,
name|int
name|type
parameter_list|,
name|LPARAM
parameter_list|)
block|{
specifier|const
name|QString
name|familyName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfLogFont
operator|.
name|lfFaceName
argument_list|)
decl_stmt|;
specifier|const
name|uchar
name|charSet
init|=
name|f
operator|->
name|elfLogFont
operator|.
name|lfCharSet
decl_stmt|;
specifier|const
name|FONTSIGNATURE
name|signature
init|=
name|textmetric
operator|->
name|ntmFontSig
decl_stmt|;
comment|// NEWTEXTMETRICEX is a NEWTEXTMETRIC, which according to the documentation is
comment|// identical to a TEXTMETRIC except for the last four members, which we don't use
comment|// anyway
name|addFontToDatabase
argument_list|(
name|familyName
argument_list|,
name|charSet
argument_list|,
operator|(
name|TEXTMETRIC
operator|*
operator|)
name|textmetric
argument_list|,
operator|&
name|signature
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// keep on enumerating
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|populateFamily
name|void
name|QWindowsFontDatabase
operator|::
name|populateFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|familyName
expr_stmt|;
if|if
condition|(
name|familyName
operator|.
name|size
argument_list|()
operator|>=
name|LF_FACESIZE
condition|)
block|{
name|qCWarning
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
literal|"Unable to enumerate family '"
operator|<<
name|familyName
operator|<<
literal|'\''
expr_stmt|;
return|return;
block|}
name|HDC
name|dummy
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|familyName
operator|.
name|toWCharArray
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfFaceName
index|[
name|familyName
operator|.
name|size
argument_list|()
index|]
operator|=
literal|0
expr_stmt|;
name|lf
operator|.
name|lfPitchAndFamily
operator|=
literal|0
expr_stmt|;
name|EnumFontFamiliesEx
argument_list|(
name|dummy
argument_list|,
operator|&
name|lf
argument_list|,
operator|(
name|FONTENUMPROC
operator|)
name|storeFont
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
comment|// Context for enumerating system fonts, records whether the default font has been encountered,
comment|// which is normally not enumerated by EnumFontFamiliesEx().
DECL|struct|PopulateFamiliesContext
struct|struct
name|PopulateFamiliesContext
block|{
DECL|function|PopulateFamiliesContext
name|PopulateFamiliesContext
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|)
member_init_list|:
name|systemDefaultFont
argument_list|(
name|f
argument_list|)
member_init_list|,
name|seenSystemDefaultFont
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|systemDefaultFont
name|QString
name|systemDefaultFont
decl_stmt|;
DECL|member|seenSystemDefaultFont
name|bool
name|seenSystemDefaultFont
decl_stmt|;
block|}
struct|;
block|}
end_namespace
begin_comment
comment|// namespace
end_comment
begin_function
DECL|function|populateFontFamilies
specifier|static
name|int
name|QT_WIN_CALLBACK
name|populateFontFamilies
parameter_list|(
name|ENUMLOGFONTEX
modifier|*
name|f
parameter_list|,
name|NEWTEXTMETRICEX
modifier|*
name|tm
parameter_list|,
name|int
parameter_list|,
name|LPARAM
name|lparam
parameter_list|)
block|{
comment|// the "@family" fonts are just the same as "family". Ignore them.
specifier|const
name|wchar_t
modifier|*
name|faceNameW
init|=
name|f
operator|->
name|elfLogFont
operator|.
name|lfFaceName
decl_stmt|;
if|if
condition|(
name|faceNameW
index|[
literal|0
index|]
operator|&&
name|faceNameW
index|[
literal|0
index|]
operator|!=
literal|L'
expr|@'
operator|&&
name|wcsncmp
argument_list|(
name|faceNameW
argument_list|,
literal|L"WST_"
argument_list|,
literal|4
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|faceName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|faceNameW
argument_list|)
decl_stmt|;
name|QPlatformFontDatabase
operator|::
name|registerFontFamily
argument_list|(
name|faceName
argument_list|)
expr_stmt|;
name|PopulateFamiliesContext
modifier|*
name|context
init|=
cast|reinterpret_cast
argument_list|<
name|PopulateFamiliesContext
operator|*
argument_list|>
argument_list|(
name|lparam
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|seenSystemDefaultFont
operator|&&
name|faceName
operator|==
name|context
operator|->
name|systemDefaultFont
condition|)
name|context
operator|->
name|seenSystemDefaultFont
operator|=
literal|true
expr_stmt|;
comment|// Register current font's english name as alias
specifier|const
name|bool
name|ttf
init|=
operator|(
name|tm
operator|->
name|ntmTm
operator|.
name|tmPitchAndFamily
operator|&
name|TMPF_TRUETYPE
operator|)
decl_stmt|;
if|if
condition|(
name|ttf
operator|&&
name|localizedName
argument_list|(
name|faceName
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|englishName
init|=
name|getEnglishName
argument_list|(
name|faceName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|englishName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QPlatformFontDatabase
operator|::
name|registerAliasToFontFamily
argument_list|(
name|faceName
argument_list|,
name|englishName
argument_list|)
expr_stmt|;
comment|// Check whether the system default font name is an alias of the current font family name,
comment|// as on Chinese Windows, where the system font "SimSun" is an alias to a font registered under a local name
if|if
condition|(
operator|!
name|context
operator|->
name|seenSystemDefaultFont
operator|&&
name|englishName
operator|==
name|context
operator|->
name|systemDefaultFont
condition|)
name|context
operator|->
name|seenSystemDefaultFont
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
literal|1
return|;
comment|// continue
block|}
end_function
begin_function
DECL|function|populateFontDatabase
name|void
name|QWindowsFontDatabase
operator|::
name|populateFontDatabase
parameter_list|()
block|{
name|removeApplicationFonts
argument_list|()
expr_stmt|;
name|HDC
name|dummy
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|lf
operator|.
name|lfFaceName
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|lf
operator|.
name|lfPitchAndFamily
operator|=
literal|0
expr_stmt|;
name|PopulateFamiliesContext
name|context
argument_list|(
name|QWindowsFontDatabase
operator|::
name|systemDefaultFont
argument_list|()
operator|.
name|family
argument_list|()
argument_list|)
decl_stmt|;
name|EnumFontFamiliesEx
argument_list|(
name|dummy
argument_list|,
operator|&
name|lf
argument_list|,
operator|(
name|FONTENUMPROC
operator|)
name|populateFontFamilies
argument_list|,
cast|reinterpret_cast
argument_list|<
name|LPARAM
argument_list|>
argument_list|(
operator|&
name|context
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// Work around EnumFontFamiliesEx() not listing the system font.
if|if
condition|(
operator|!
name|context
operator|.
name|seenSystemDefaultFont
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFontFamily
argument_list|(
name|context
operator|.
name|systemDefaultFont
argument_list|)
expr_stmt|;
block|}
end_function
begin_typedef
DECL|typedef|QWindowsFontEngineDataPtr
typedef|typedef
name|QSharedPointer
argument_list|<
name|QWindowsFontEngineData
argument_list|>
name|QWindowsFontEngineDataPtr
typedef|;
end_typedef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_THREAD
end_ifndef
begin_typedef
DECL|typedef|FontEngineThreadLocalData
typedef|typedef
name|QThreadStorage
argument_list|<
name|QWindowsFontEngineDataPtr
argument_list|>
name|FontEngineThreadLocalData
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|FontEngineThreadLocalData
argument_list|,
argument|fontEngineThreadLocalData
argument_list|)
end_macro
begin_function
DECL|function|sharedFontData
name|QSharedPointer
argument_list|<
name|QWindowsFontEngineData
argument_list|>
name|sharedFontData
parameter_list|()
block|{
name|FontEngineThreadLocalData
modifier|*
name|data
init|=
name|fontEngineThreadLocalData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|->
name|hasLocalData
argument_list|()
condition|)
name|data
operator|->
name|setLocalData
argument_list|(
name|QSharedPointer
argument_list|<
name|QWindowsFontEngineData
argument_list|>
argument_list|(
operator|new
name|QWindowsFontEngineData
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|data
operator|->
name|localData
argument_list|()
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !QT_NO_THREAD
end_comment
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QWindowsFontEngineDataPtr
argument_list|,
argument|fontEngineData
argument_list|)
end_macro
begin_function
DECL|function|sharedFontData
name|QWindowsFontEngineDataPtr
name|sharedFontData
parameter_list|()
block|{
name|QWindowsFontEngineDataPtr
modifier|*
name|data
init|=
name|fontEngineData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|->
name|isNull
argument_list|()
condition|)
operator|*
name|data
operator|=
name|QWindowsFontEngineDataPtr
argument_list|(
operator|new
name|QWindowsFontEngineData
argument_list|)
expr_stmt|;
return|return
operator|*
name|data
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_THREAD
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_decl_stmt
specifier|extern
name|Q_GUI_EXPORT
name|bool
name|qt_needs_a8_gamma_correction
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QWindowsFontDatabase
name|QWindowsFontDatabase
operator|::
name|QWindowsFontDatabase
parameter_list|()
block|{
comment|// Properties accessed by QWin32PrintEngine (Qt Print Support)
specifier|static
specifier|const
name|int
name|hfontMetaTypeId
init|=
name|qRegisterMetaType
argument_list|<
name|HFONT
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
specifier|const
name|int
name|logFontMetaTypeId
init|=
name|qRegisterMetaType
argument_list|<
name|LOGFONT
argument_list|>
argument_list|()
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|hfontMetaTypeId
argument_list|)
name|Q_UNUSED
argument_list|(
argument|logFontMetaTypeId
argument_list|)
if|if
condition|(
name|lcQpaFonts
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
specifier|const
name|QWindowsFontEngineDataPtr
name|data
init|=
name|sharedFontData
argument_list|()
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"Clear type: "
operator|<<
name|data
operator|->
name|clearTypeEnabled
operator|<<
literal|"gamma: "
operator|<<
name|data
operator|->
name|fontSmoothingGamma
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|qt_needs_a8_gamma_correction
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsFontDatabase
name|QWindowsFontDatabase
operator|::
name|~
name|QWindowsFontDatabase
parameter_list|()
block|{
name|removeApplicationFonts
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|fontEngineMulti
name|QFontEngineMulti
modifier|*
name|QWindowsFontDatabase
operator|::
name|fontEngineMulti
parameter_list|(
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|,
name|QChar
operator|::
name|Script
name|script
parameter_list|)
block|{
if|if
condition|(
name|script
operator|==
name|QChar
operator|::
name|Script_Common
condition|)
return|return
operator|new
name|QWindowsMultiFontEngine
argument_list|(
name|fontEngine
argument_list|,
name|script
argument_list|)
return|;
comment|// ### as long as fallbacksForFamily() does not take script parameter into account,
comment|// prefer QFontEngineMulti's loadEngine() implementation for complex scripts
return|return
name|QPlatformFontDatabase
operator|::
name|fontEngineMulti
argument_list|(
name|fontEngine
argument_list|,
name|script
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fontEngine
name|QFontEngine
modifier|*
name|QWindowsFontDatabase
operator|::
name|fontEngine
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|fontDef
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|QWindowsFontDatabase
operator|::
name|createEngine
argument_list|(
name|fontDef
argument_list|,
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|defaultDPI
argument_list|()
argument_list|,
name|sharedFontData
argument_list|()
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"FONTDEF"
operator|<<
name|fontDef
operator|<<
name|fe
operator|<<
name|handle
expr_stmt|;
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|fontEngine
name|QFontEngine
modifier|*
name|QWindowsFontDatabase
operator|::
name|fontEngine
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|,
name|qreal
name|pixelSize
parameter_list|,
name|QFont
operator|::
name|HintingPreference
name|hintingPreference
parameter_list|)
block|{
name|EmbeddedFont
name|font
argument_list|(
name|fontData
argument_list|)
decl_stmt|;
name|QFontEngine
modifier|*
name|fontEngine
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
if|if
condition|(
name|hintingPreference
operator|==
name|QFont
operator|::
name|PreferDefaultHinting
operator|||
name|hintingPreference
operator|==
name|QFont
operator|::
name|PreferFullHinting
condition|)
endif|#
directive|endif
block|{
name|GUID
name|guid
decl_stmt|;
name|CoCreateGuid
argument_list|(
operator|&
name|guid
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_CC_GNU
pragma|#
directive|pragma
name|GCC
name|diagnostic
name|push
pragma|#
directive|pragma
name|GCC
name|diagnostic
name|ignored
literal|"-Wstrict-aliasing"
endif|#
directive|endif
name|QString
name|uniqueFamilyName
init|=
name|QLatin1Char
argument_list|(
literal|'f'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|guid
operator|.
name|Data1
argument_list|,
literal|36
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|guid
operator|.
name|Data2
argument_list|,
literal|36
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|guid
operator|.
name|Data3
argument_list|,
literal|36
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|*
cast|reinterpret_cast
argument_list|<
name|quint64
operator|*
argument_list|>
argument_list|(
name|guid
operator|.
name|Data4
argument_list|)
argument_list|,
literal|36
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_CC_GNU
pragma|#
directive|pragma
name|GCC
name|diagnostic
name|pop
endif|#
directive|endif
name|QString
name|actualFontName
init|=
name|font
operator|.
name|changeFamilyName
argument_list|(
name|uniqueFamilyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualFontName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Can't change family name of font"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|DWORD
name|count
init|=
literal|0
decl_stmt|;
name|QByteArray
name|newFontData
init|=
name|font
operator|.
name|data
argument_list|()
decl_stmt|;
name|HANDLE
name|fontHandle
init|=
name|AddFontMemResourceEx
argument_list|(
operator|(
name|void
operator|*
operator|)
name|newFontData
operator|.
name|constData
argument_list|()
argument_list|,
name|newFontData
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|&
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
operator|&&
name|fontHandle
operator|!=
literal|0
condition|)
block|{
name|RemoveFontMemResourceEx
argument_list|(
name|fontHandle
argument_list|)
expr_stmt|;
name|fontHandle
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|fontHandle
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: AddFontMemResourceEx failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFontDef
name|request
decl_stmt|;
name|request
operator|.
name|family
operator|=
name|uniqueFamilyName
expr_stmt|;
name|request
operator|.
name|pixelSize
operator|=
name|pixelSize
expr_stmt|;
name|request
operator|.
name|styleStrategy
operator|=
name|QFont
operator|::
name|PreferMatch
expr_stmt|;
name|request
operator|.
name|hintingPreference
operator|=
name|hintingPreference
expr_stmt|;
name|fontEngine
operator|=
name|QWindowsFontDatabase
operator|::
name|createEngine
argument_list|(
name|request
argument_list|,
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|defaultDPI
argument_list|()
argument_list|,
name|sharedFontData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fontEngine
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|family
operator|!=
name|fontEngine
operator|->
name|fontDef
operator|.
name|family
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Failed to load font. Got fallback instead: %s"
argument_list|,
name|__FUNCTION__
argument_list|,
name|qPrintable
argument_list|(
name|fontEngine
operator|->
name|fontDef
operator|.
name|family
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fontEngine
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|0
condition|)
operator|delete
name|fontEngine
expr_stmt|;
name|fontEngine
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|fontEngine
operator|->
name|ref
operator|.
name|load
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Override the generated font name
cast|static_cast
argument_list|<
name|QWindowsFontEngine
operator|*
argument_list|>
argument_list|(
name|fontEngine
argument_list|)
operator|->
name|setUniqueFamilyName
argument_list|(
name|uniqueFamilyName
argument_list|)
expr_stmt|;
name|fontEngine
operator|->
name|fontDef
operator|.
name|family
operator|=
name|actualFontName
expr_stmt|;
name|UniqueFontData
name|uniqueData
decl_stmt|;
name|uniqueData
operator|.
name|handle
operator|=
name|fontHandle
expr_stmt|;
name|uniqueData
operator|.
name|refCount
operator|.
name|ref
argument_list|()
expr_stmt|;
name|m_uniqueFontData
index|[
name|uniqueFamilyName
index|]
operator|=
name|uniqueData
expr_stmt|;
block|}
block|}
else|else
block|{
name|RemoveFontMemResourceEx
argument_list|(
name|fontHandle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
else|else
block|{
name|CustomFontFileLoader
name|fontFileLoader
decl_stmt|;
name|fontFileLoader
operator|.
name|addKey
argument_list|(
name|this
argument_list|,
name|fontData
argument_list|)
expr_stmt|;
name|IDWriteFactory
modifier|*
name|factory
init|=
literal|0
decl_stmt|;
name|HRESULT
name|hres
init|=
name|DWriteCreateFactory
argument_list|(
name|DWRITE_FACTORY_TYPE_SHARED
argument_list|,
name|__uuidof
argument_list|(
name|IDWriteFactory
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|IUnknown
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|factory
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hres
argument_list|,
literal|"%s: DWriteCreateFactory failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|IDWriteFontFile
modifier|*
name|fontFile
init|=
literal|0
decl_stmt|;
name|void
modifier|*
name|key
init|=
name|this
decl_stmt|;
name|hres
operator|=
name|factory
operator|->
name|CreateCustomFontFileReference
argument_list|(
operator|&
name|key
argument_list|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|,
name|fontFileLoader
operator|.
name|loader
argument_list|()
argument_list|,
operator|&
name|fontFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hres
argument_list|,
literal|"%s: CreateCustomFontFileReference failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|factory
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|BOOL
name|isSupportedFontType
decl_stmt|;
name|DWRITE_FONT_FILE_TYPE
name|fontFileType
decl_stmt|;
name|DWRITE_FONT_FACE_TYPE
name|fontFaceType
decl_stmt|;
name|UINT32
name|numberOfFaces
decl_stmt|;
name|fontFile
operator|->
name|Analyze
argument_list|(
operator|&
name|isSupportedFontType
argument_list|,
operator|&
name|fontFileType
argument_list|,
operator|&
name|fontFaceType
argument_list|,
operator|&
name|numberOfFaces
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSupportedFontType
condition|)
block|{
name|fontFile
operator|->
name|Release
argument_list|()
expr_stmt|;
name|factory
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|IDWriteFontFace
modifier|*
name|directWriteFontFace
init|=
literal|0
decl_stmt|;
name|hres
operator|=
name|factory
operator|->
name|CreateFontFace
argument_list|(
name|fontFaceType
argument_list|,
literal|1
argument_list|,
operator|&
name|fontFile
argument_list|,
literal|0
argument_list|,
name|DWRITE_FONT_SIMULATIONS_NONE
argument_list|,
operator|&
name|directWriteFontFace
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hres
argument_list|,
literal|"%s: CreateFontFace failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|fontFile
operator|->
name|Release
argument_list|()
expr_stmt|;
name|factory
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|fontFile
operator|->
name|Release
argument_list|()
expr_stmt|;
name|fontEngine
operator|=
operator|new
name|QWindowsFontEngineDirectWrite
argument_list|(
name|directWriteFontFace
argument_list|,
name|pixelSize
argument_list|,
name|sharedFontData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get font family from font data
name|fontEngine
operator|->
name|fontDef
operator|.
name|family
operator|=
name|font
operator|.
name|familyName
argument_list|()
expr_stmt|;
name|directWriteFontFace
operator|->
name|Release
argument_list|()
expr_stmt|;
name|factory
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Get style and weight info
if|if
condition|(
name|fontEngine
operator|!=
literal|0
condition|)
block|{
name|TableDirectory
modifier|*
name|os2TableEntry
init|=
name|font
operator|.
name|tableDirectoryEntry
argument_list|(
literal|"OS/2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|os2TableEntry
operator|!=
literal|0
condition|)
block|{
specifier|const
name|OS2Table
modifier|*
name|os2Table
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|OS2Table
operator|*
argument_list|>
argument_list|(
name|fontData
operator|.
name|constData
argument_list|()
operator|+
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|os2TableEntry
operator|->
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|italic
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|os2Table
operator|->
name|selection
argument_list|)
operator|&
literal|1
decl_stmt|;
name|bool
name|oblique
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|os2Table
operator|->
name|selection
argument_list|)
operator|&
literal|128
decl_stmt|;
if|if
condition|(
name|italic
condition|)
name|fontEngine
operator|->
name|fontDef
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleItalic
expr_stmt|;
elseif|else
if|if
condition|(
name|oblique
condition|)
name|fontEngine
operator|->
name|fontDef
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleOblique
expr_stmt|;
else|else
name|fontEngine
operator|->
name|fontDef
operator|.
name|style
operator|=
name|QFont
operator|::
name|StyleNormal
expr_stmt|;
name|fontEngine
operator|->
name|fontDef
operator|.
name|weight
operator|=
name|QPlatformFontDatabase
operator|::
name|weightFromInteger
argument_list|(
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|os2Table
operator|->
name|weightClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"FONTDATA"
operator|<<
name|fontData
operator|<<
name|pixelSize
operator|<<
name|hintingPreference
operator|<<
name|fontEngine
expr_stmt|;
return|return
name|fontEngine
return|;
block|}
end_function
begin_function
DECL|function|getTrueTypeFontOffsets
specifier|static
name|QList
argument_list|<
name|quint32
argument_list|>
name|getTrueTypeFontOffsets
parameter_list|(
specifier|const
name|uchar
modifier|*
name|fontData
parameter_list|)
block|{
name|QList
argument_list|<
name|quint32
argument_list|>
name|offsets
decl_stmt|;
specifier|const
name|quint32
name|headerTag
init|=
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|fontData
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerTag
operator|!=
name|MAKE_TAG
argument_list|(
literal|'t'
argument_list|,
literal|'t'
argument_list|,
literal|'c'
argument_list|,
literal|'f'
argument_list|)
condition|)
block|{
if|if
condition|(
name|headerTag
operator|!=
name|MAKE_TAG
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|&&
name|headerTag
operator|!=
name|MAKE_TAG
argument_list|(
literal|'O'
argument_list|,
literal|'T'
argument_list|,
literal|'T'
argument_list|,
literal|'O'
argument_list|)
operator|&&
name|headerTag
operator|!=
name|MAKE_TAG
argument_list|(
literal|'t'
argument_list|,
literal|'r'
argument_list|,
literal|'u'
argument_list|,
literal|'e'
argument_list|)
operator|&&
name|headerTag
operator|!=
name|MAKE_TAG
argument_list|(
literal|'t'
argument_list|,
literal|'y'
argument_list|,
literal|'p'
argument_list|,
literal|'1'
argument_list|)
condition|)
return|return
name|offsets
return|;
name|offsets
operator|<<
literal|0
expr_stmt|;
return|return
name|offsets
return|;
block|}
specifier|const
name|quint32
name|numFonts
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|fontData
operator|+
literal|8
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFonts
condition|;
operator|++
name|i
control|)
block|{
name|offsets
operator|<<
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|fontData
operator|+
literal|12
operator|+
name|i
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
return|return
name|offsets
return|;
block|}
end_function
begin_function
DECL|function|getFontTable
specifier|static
name|void
name|getFontTable
parameter_list|(
specifier|const
name|uchar
modifier|*
name|fileBegin
parameter_list|,
specifier|const
name|uchar
modifier|*
name|data
parameter_list|,
name|quint32
name|tag
parameter_list|,
specifier|const
name|uchar
modifier|*
modifier|*
name|table
parameter_list|,
name|quint32
modifier|*
name|length
parameter_list|)
block|{
specifier|const
name|quint16
name|numTables
init|=
name|qFromBigEndian
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|data
operator|+
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTables
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|quint32
name|offset
init|=
literal|12
operator|+
literal|16
operator|*
name|i
decl_stmt|;
if|if
condition|(
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|data
operator|+
name|offset
argument_list|)
operator|==
name|tag
condition|)
block|{
operator|*
name|table
operator|=
name|fileBegin
operator|+
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|data
operator|+
name|offset
operator|+
literal|8
argument_list|)
expr_stmt|;
operator|*
name|length
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|data
operator|+
name|offset
operator|+
literal|12
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
operator|*
name|table
operator|=
literal|0
expr_stmt|;
operator|*
name|length
operator|=
literal|0
expr_stmt|;
return|return;
block|}
end_function
begin_function
DECL|function|getFamiliesAndSignatures
specifier|static
name|void
name|getFamiliesAndSignatures
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|,
name|QStringList
modifier|*
name|families
parameter_list|,
name|QVector
argument_list|<
name|FONTSIGNATURE
argument_list|>
modifier|*
name|signatures
parameter_list|)
block|{
specifier|const
name|uchar
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|fontData
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|quint32
argument_list|>
name|offsets
init|=
name|getTrueTypeFontOffsets
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|offsets
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uchar
modifier|*
name|font
init|=
name|data
operator|+
name|offsets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|table
decl_stmt|;
name|quint32
name|length
decl_stmt|;
name|getFontTable
argument_list|(
name|data
argument_list|,
name|font
argument_list|,
name|MAKE_TAG
argument_list|(
literal|'n'
argument_list|,
literal|'a'
argument_list|,
literal|'m'
argument_list|,
literal|'e'
argument_list|)
argument_list|,
operator|&
name|table
argument_list|,
operator|&
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|table
condition|)
continue|continue;
name|QString
name|name
init|=
name|getEnglishName
argument_list|(
name|table
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|families
operator|->
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|signatures
condition|)
block|{
name|FONTSIGNATURE
name|signature
decl_stmt|;
name|getFontTable
argument_list|(
name|data
argument_list|,
name|font
argument_list|,
name|MAKE_TAG
argument_list|(
literal|'O'
argument_list|,
literal|'S'
argument_list|,
literal|'/'
argument_list|,
literal|'2'
argument_list|)
argument_list|,
operator|&
name|table
argument_list|,
operator|&
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|&&
name|length
operator|>=
literal|86
condition|)
block|{
comment|// Offsets taken from OS/2 table in the TrueType spec
name|signature
operator|.
name|fsUsb
index|[
literal|0
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|42
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|1
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|46
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|2
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|50
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|3
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|54
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsCsb
index|[
literal|0
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|78
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsCsb
index|[
literal|1
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|table
operator|+
literal|82
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|memset
argument_list|(
operator|&
name|signature
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|signature
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|signatures
operator|->
name|append
argument_list|(
name|signature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|addApplicationFont
name|QStringList
name|QWindowsFontDatabase
operator|::
name|addApplicationFont
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|WinApplicationFont
name|font
decl_stmt|;
name|font
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|QVector
argument_list|<
name|FONTSIGNATURE
argument_list|>
name|signatures
decl_stmt|;
name|QStringList
name|families
decl_stmt|;
if|if
condition|(
operator|!
name|fontData
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getFamiliesAndSignatures
argument_list|(
name|fontData
argument_list|,
operator|&
name|families
argument_list|,
operator|&
name|signatures
argument_list|)
expr_stmt|;
if|if
condition|(
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|families
return|;
name|DWORD
name|dummy
init|=
literal|0
decl_stmt|;
name|font
operator|.
name|handle
operator|=
name|AddFontMemResourceEx
argument_list|(
operator|(
name|void
operator|*
operator|)
name|fontData
operator|.
name|constData
argument_list|()
argument_list|,
name|fontData
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|&
name|dummy
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|.
name|handle
operator|==
literal|0
condition|)
return|return
name|QStringList
argument_list|()
return|;
comment|// Memory fonts won't show up in enumeration, so do add them the hard way.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|families
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|QString
name|familyName
init|=
name|families
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|HDC
name|hdc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
name|memset
argument_list|(
operator|&
name|lf
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|LOGFONT
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|familyName
operator|.
name|utf16
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|qMin
argument_list|(
name|LF_FACESIZE
operator|-
literal|1
argument_list|,
name|familyName
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|HFONT
name|hfont
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
decl_stmt|;
name|HGDIOBJ
name|oldobj
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
decl_stmt|;
name|TEXTMETRIC
name|textMetrics
decl_stmt|;
name|GetTextMetrics
argument_list|(
name|hdc
argument_list|,
operator|&
name|textMetrics
argument_list|)
expr_stmt|;
name|addFontToDatabase
argument_list|(
name|familyName
argument_list|,
name|lf
operator|.
name|lfCharSet
argument_list|,
operator|&
name|textMetrics
argument_list|,
operator|&
name|signatures
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|,
name|TRUETYPE_FONTTYPE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldobj
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
name|hfont
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QFile
name|f
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
name|families
return|;
name|QByteArray
name|data
init|=
name|f
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|getFamiliesAndSignatures
argument_list|(
name|data
argument_list|,
operator|&
name|families
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|families
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|families
return|;
if|if
condition|(
name|AddFontResourceExW
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|fileName
operator|.
name|utf16
argument_list|()
argument_list|,
name|FR_PRIVATE
argument_list|,
literal|0
argument_list|)
operator|==
literal|0
condition|)
return|return
name|QStringList
argument_list|()
return|;
name|font
operator|.
name|handle
operator|=
literal|0
expr_stmt|;
comment|// Fonts based on files are added via populate, as they will show up in font enumeration.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|families
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
name|populateFamily
argument_list|(
name|families
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m_applicationFonts
operator|<<
name|font
expr_stmt|;
return|return
name|families
return|;
block|}
end_function
begin_function
DECL|function|removeApplicationFonts
name|void
name|QWindowsFontDatabase
operator|::
name|removeApplicationFonts
parameter_list|()
block|{
foreach|foreach
control|(
specifier|const
name|WinApplicationFont
modifier|&
name|font
decl|,
name|m_applicationFonts
control|)
block|{
if|if
condition|(
name|font
operator|.
name|handle
condition|)
block|{
name|RemoveFontMemResourceEx
argument_list|(
name|font
operator|.
name|handle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RemoveFontResourceExW
argument_list|(
operator|(
name|LPCWSTR
operator|)
name|font
operator|.
name|fileName
operator|.
name|utf16
argument_list|()
argument_list|,
name|FR_PRIVATE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|m_applicationFonts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|releaseHandle
name|void
name|QWindowsFontDatabase
operator|::
name|releaseHandle
parameter_list|(
name|void
modifier|*
comment|/* handle */
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|fontDir
name|QString
name|QWindowsFontDatabase
operator|::
name|fontDir
parameter_list|()
specifier|const
block|{
specifier|const
name|QString
name|result
init|=
name|QPlatformFontDatabase
operator|::
name|fontDir
argument_list|()
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|fontsAlwaysScalable
name|bool
name|QWindowsFontDatabase
operator|::
name|fontsAlwaysScalable
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|derefUniqueFont
name|void
name|QWindowsFontDatabase
operator|::
name|derefUniqueFont
parameter_list|(
specifier|const
name|QString
modifier|&
name|uniqueFont
parameter_list|)
block|{
if|if
condition|(
name|m_uniqueFontData
operator|.
name|contains
argument_list|(
name|uniqueFont
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|m_uniqueFontData
index|[
name|uniqueFont
index|]
operator|.
name|refCount
operator|.
name|deref
argument_list|()
condition|)
block|{
name|RemoveFontMemResourceEx
argument_list|(
name|m_uniqueFontData
index|[
name|uniqueFont
index|]
operator|.
name|handle
argument_list|)
expr_stmt|;
name|m_uniqueFontData
operator|.
name|remove
argument_list|(
name|uniqueFont
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|refUniqueFont
name|void
name|QWindowsFontDatabase
operator|::
name|refUniqueFont
parameter_list|(
specifier|const
name|QString
modifier|&
name|uniqueFont
parameter_list|)
block|{
if|if
condition|(
name|m_uniqueFontData
operator|.
name|contains
argument_list|(
name|uniqueFont
argument_list|)
condition|)
name|m_uniqueFontData
index|[
name|uniqueFont
index|]
operator|.
name|refCount
operator|.
name|ref
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|systemFont
name|HFONT
name|QWindowsFontDatabase
operator|::
name|systemFont
parameter_list|()
block|{
specifier|static
specifier|const
name|HFONT
name|stock_sysfont
init|=
operator|(
name|HFONT
operator|)
name|GetStockObject
argument_list|(
name|DEFAULT_GUI_FONT
argument_list|)
decl_stmt|;
return|return
name|stock_sysfont
return|;
block|}
end_function
begin_comment
comment|// Creation functions
end_comment
begin_decl_stmt
DECL|variable|other_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|other_tryFonts
index|[]
init|=
block|{
literal|"Arial"
block|,
literal|"MS UI Gothic"
block|,
literal|"Gulim"
block|,
literal|"SimSun"
block|,
literal|"PMingLiU"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|jp_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|jp_tryFonts
index|[]
init|=
block|{
literal|"MS UI Gothic"
block|,
literal|"Arial"
block|,
literal|"Gulim"
block|,
literal|"SimSun"
block|,
literal|"PMingLiU"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ch_CN_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|ch_CN_tryFonts
index|[]
init|=
block|{
literal|"SimSun"
block|,
literal|"Arial"
block|,
literal|"PMingLiU"
block|,
literal|"Gulim"
block|,
literal|"MS UI Gothic"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ch_TW_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|ch_TW_tryFonts
index|[]
init|=
block|{
literal|"PMingLiU"
block|,
literal|"Arial"
block|,
literal|"SimSun"
block|,
literal|"Gulim"
block|,
literal|"MS UI Gothic"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|kr_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|kr_tryFonts
index|[]
init|=
block|{
literal|"Gulim"
block|,
literal|"Arial"
block|,
literal|"PMingLiU"
block|,
literal|"SimSun"
block|,
literal|"MS UI Gothic"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|tryFonts
specifier|static
specifier|const
name|char
modifier|*
modifier|*
name|tryFonts
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|fontDefToLOGFONT
name|LOGFONT
name|QWindowsFontDatabase
operator|::
name|fontDefToLOGFONT
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|)
block|{
name|LOGFONT
name|lf
decl_stmt|;
name|memset
argument_list|(
operator|&
name|lf
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|LOGFONT
argument_list|)
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfHeight
operator|=
operator|-
name|qRound
argument_list|(
name|request
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfWidth
operator|=
literal|0
expr_stmt|;
name|lf
operator|.
name|lfEscapement
operator|=
literal|0
expr_stmt|;
name|lf
operator|.
name|lfOrientation
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|weight
operator|==
literal|50
condition|)
name|lf
operator|.
name|lfWeight
operator|=
name|FW_DONTCARE
expr_stmt|;
else|else
name|lf
operator|.
name|lfWeight
operator|=
operator|(
name|request
operator|.
name|weight
operator|*
literal|900
operator|)
operator|/
literal|99
expr_stmt|;
name|lf
operator|.
name|lfItalic
operator|=
name|request
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleNormal
expr_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|int
name|strat
init|=
name|OUT_DEFAULT_PRECIS
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferBitmap
condition|)
block|{
name|strat
operator|=
name|OUT_RASTER_PRECIS
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferDevice
condition|)
block|{
name|strat
operator|=
name|OUT_DEVICE_PRECIS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferOutline
condition|)
block|{
name|strat
operator|=
name|OUT_OUTLINE_PRECIS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceOutline
condition|)
block|{
name|strat
operator|=
name|OUT_TT_ONLY_PRECIS
expr_stmt|;
endif|#
directive|endif
block|}
name|lf
operator|.
name|lfOutPrecision
operator|=
name|strat
expr_stmt|;
name|int
name|qual
init|=
name|DEFAULT_QUALITY
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferMatch
condition|)
name|qual
operator|=
name|DRAFT_QUALITY
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferQuality
condition|)
name|qual
operator|=
name|PROOF_QUALITY
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferAntialias
condition|)
block|{
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
operator|&&
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoSubpixelAntialias
operator|)
condition|)
block|{
name|qual
operator|=
name|CLEARTYPE_QUALITY
expr_stmt|;
block|}
else|else
block|{
name|qual
operator|=
name|ANTIALIASED_QUALITY
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoAntialias
condition|)
block|{
name|qual
operator|=
name|NONANTIALIASED_QUALITY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoSubpixelAntialias
operator|)
operator|&&
name|sharedFontData
argument_list|()
operator|->
name|clearTypeEnabled
condition|)
block|{
name|qual
operator|=
name|ANTIALIASED_QUALITY
expr_stmt|;
block|}
name|lf
operator|.
name|lfQuality
operator|=
name|qual
expr_stmt|;
name|lf
operator|.
name|lfClipPrecision
operator|=
name|CLIP_DEFAULT_PRECIS
expr_stmt|;
name|int
name|hint
init|=
name|FF_DONTCARE
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|styleHint
condition|)
block|{
case|case
name|QFont
operator|::
name|Helvetica
case|:
name|hint
operator|=
name|FF_SWISS
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|Times
case|:
name|hint
operator|=
name|FF_ROMAN
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|Courier
case|:
name|hint
operator|=
name|FF_MODERN
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|OldEnglish
case|:
name|hint
operator|=
name|FF_DECORATIVE
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|System
case|:
name|hint
operator|=
name|FF_MODERN
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|lf
operator|.
name|lfPitchAndFamily
operator|=
name|DEFAULT_PITCH
operator||
name|hint
expr_stmt|;
name|QString
name|fam
init|=
name|request
operator|.
name|family
decl_stmt|;
if|if
condition|(
name|fam
operator|.
name|size
argument_list|()
operator|>=
name|LF_FACESIZE
condition|)
block|{
name|qCritical
argument_list|(
literal|"%s: Family name '%s' is too long."
argument_list|,
name|__FUNCTION__
argument_list|,
name|qPrintable
argument_list|(
name|fam
argument_list|)
argument_list|)
expr_stmt|;
name|fam
operator|.
name|truncate
argument_list|(
name|LF_FACESIZE
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fam
operator|.
name|isEmpty
argument_list|()
condition|)
name|fam
operator|=
name|QStringLiteral
argument_list|(
literal|"MS Sans Serif"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|fam
operator|==
name|QStringLiteral
argument_list|(
literal|"MS Sans Serif"
argument_list|)
operator|)
operator|&&
operator|(
name|request
operator|.
name|style
operator|==
name|QFont
operator|::
name|StyleItalic
operator|||
operator|(
operator|-
name|lf
operator|.
name|lfHeight
operator|>
literal|18
operator|&&
operator|-
name|lf
operator|.
name|lfHeight
operator|!=
literal|24
operator|)
operator|)
condition|)
block|{
name|fam
operator|=
name|QStringLiteral
argument_list|(
literal|"Arial"
argument_list|)
expr_stmt|;
comment|// MS Sans Serif has bearing problems in italic, and does not scale
block|}
if|if
condition|(
name|fam
operator|==
name|QLatin1String
argument_list|(
literal|"Courier"
argument_list|)
operator|&&
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferBitmap
operator|)
condition|)
name|fam
operator|=
name|QStringLiteral
argument_list|(
literal|"Courier New"
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|fam
operator|.
name|utf16
argument_list|()
argument_list|,
name|fam
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|lf
return|;
block|}
end_function
begin_function
DECL|function|extraTryFontsForFamily
name|QStringList
name|QWindowsFontDatabase
operator|::
name|extraTryFontsForFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
block|{
name|QStringList
name|result
decl_stmt|;
name|QFontDatabase
name|db
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|writingSystems
argument_list|(
name|family
argument_list|)
operator|.
name|contains
argument_list|(
name|QFontDatabase
operator|::
name|Symbol
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tryFonts
condition|)
block|{
name|LANGID
name|lid
init|=
name|GetUserDefaultLangID
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|lid
operator|&
literal|0xff
condition|)
block|{
case|case
name|LANG_CHINESE
case|:
comment|// Chinese
if|if
condition|(
name|lid
operator|==
literal|0x0804
operator|||
name|lid
operator|==
literal|0x1004
condition|)
comment|// China mainland and Singapore
name|tryFonts
operator|=
name|ch_CN_tryFonts
expr_stmt|;
else|else
name|tryFonts
operator|=
name|ch_TW_tryFonts
expr_stmt|;
comment|// Taiwan, Hong Kong and Macau
break|break;
case|case
name|LANG_JAPANESE
case|:
name|tryFonts
operator|=
name|jp_tryFonts
expr_stmt|;
break|break;
case|case
name|LANG_KOREAN
case|:
name|tryFonts
operator|=
name|kr_tryFonts
expr_stmt|;
break|break;
default|default:
name|tryFonts
operator|=
name|other_tryFonts
expr_stmt|;
break|break;
block|}
block|}
name|QFontDatabase
name|db
decl_stmt|;
specifier|const
name|QStringList
name|families
init|=
name|db
operator|.
name|families
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
modifier|*
name|tf
init|=
name|tryFonts
decl_stmt|;
while|while
condition|(
name|tf
operator|&&
operator|*
name|tf
condition|)
block|{
comment|// QTBUG-31689, family might be an English alias for a localized font name.
specifier|const
name|QString
name|family
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
operator|*
name|tf
argument_list|)
decl_stmt|;
if|if
condition|(
name|families
operator|.
name|contains
argument_list|(
name|family
argument_list|)
operator|||
name|db
operator|.
name|hasFamily
argument_list|(
name|family
argument_list|)
condition|)
name|result
operator|<<
name|family
expr_stmt|;
operator|++
name|tf
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|familyForStyleHint
name|QString
name|QWindowsFontDatabase
operator|::
name|familyForStyleHint
parameter_list|(
name|QFont
operator|::
name|StyleHint
name|styleHint
parameter_list|)
block|{
switch|switch
condition|(
name|styleHint
condition|)
block|{
case|case
name|QFont
operator|::
name|Times
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Times New Roman"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Courier
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Courier New"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Monospace
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Courier New"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Cursive
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Comic Sans MS"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Fantasy
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Impact"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Decorative
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Old English"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|Helvetica
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Arial"
argument_list|)
return|;
case|case
name|QFont
operator|::
name|System
case|:
default|default:
break|break;
block|}
return|return
name|QStringLiteral
argument_list|(
literal|"MS Shell Dlg 2"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fallbacksForFamily
name|QStringList
name|QWindowsFontDatabase
operator|::
name|fallbacksForFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
name|QFont
operator|::
name|Style
name|style
parameter_list|,
name|QFont
operator|::
name|StyleHint
name|styleHint
parameter_list|,
name|QChar
operator|::
name|Script
name|script
parameter_list|)
specifier|const
block|{
name|QStringList
name|result
init|=
name|QPlatformFontDatabase
operator|::
name|fallbacksForFamily
argument_list|(
name|family
argument_list|,
name|style
argument_list|,
name|styleHint
argument_list|,
name|script
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|result
return|;
name|result
operator|.
name|append
argument_list|(
name|QWindowsFontDatabase
operator|::
name|familyForStyleHint
argument_list|(
name|styleHint
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|QWindowsFontDatabase
operator|::
name|extraTryFontsForFamily
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|family
operator|<<
name|style
operator|<<
name|styleHint
operator|<<
name|script
operator|<<
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|createEngine
name|QFontEngine
modifier|*
name|QWindowsFontDatabase
operator|::
name|createEngine
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|int
name|dpi
parameter_list|,
specifier|const
name|QSharedPointer
argument_list|<
name|QWindowsFontEngineData
argument_list|>
modifier|&
name|data
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
name|bool
name|useDirectWrite
init|=
operator|(
name|request
operator|.
name|hintingPreference
operator|==
name|QFont
operator|::
name|PreferNoHinting
operator|)
operator|||
operator|(
name|request
operator|.
name|hintingPreference
operator|==
name|QFont
operator|::
name|PreferVerticalHinting
operator|)
decl_stmt|;
name|IDWriteFont
modifier|*
name|directWriteFont
init|=
literal|0
decl_stmt|;
else|#
directive|else
name|bool
name|useDirectWrite
init|=
literal|false
decl_stmt|;
endif|#
directive|endif
name|LOGFONT
name|lf
init|=
name|fontDefToLOGFONT
argument_list|(
name|request
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|preferClearTypeAA
init|=
name|lf
operator|.
name|lfQuality
operator|==
name|CLEARTYPE_QUALITY
decl_stmt|;
name|HFONT
name|hfont
init|=
literal|0
decl_stmt|;
name|hfont
operator|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hfont
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: CreateFontIndirect failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|hfont
operator|=
name|QWindowsFontDatabase
operator|::
name|systemFont
argument_list|()
expr_stmt|;
block|}
name|bool
name|ttf
init|=
literal|false
decl_stmt|;
name|int
name|avWidth
init|=
literal|0
decl_stmt|;
name|BOOL
name|res
decl_stmt|;
name|HGDIOBJ
name|oldObj
init|=
name|SelectObject
argument_list|(
name|data
operator|->
name|hdc
argument_list|,
name|hfont
argument_list|)
decl_stmt|;
name|TEXTMETRIC
name|tm
decl_stmt|;
name|res
operator|=
name|GetTextMetrics
argument_list|(
name|data
operator|->
name|hdc
argument_list|,
operator|&
name|tm
argument_list|)
expr_stmt|;
name|avWidth
operator|=
name|tm
operator|.
name|tmAveCharWidth
expr_stmt|;
name|ttf
operator|=
name|tm
operator|.
name|tmPitchAndFamily
operator|&
name|TMPF_TRUETYPE
expr_stmt|;
name|SelectObject
argument_list|(
name|data
operator|->
name|hdc
argument_list|,
name|oldObj
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useDirectWrite
condition|)
block|{
if|if
condition|(
operator|!
name|ttf
operator|||
name|request
operator|.
name|stretch
operator|!=
literal|100
condition|)
block|{
name|DeleteObject
argument_list|(
name|hfont
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
name|qErrnoWarning
argument_list|(
literal|"%s: GetTextMetrics failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfWidth
operator|=
name|avWidth
operator|*
name|request
operator|.
name|stretch
operator|/
literal|100
expr_stmt|;
name|hfont
operator|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hfont
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: CreateFontIndirect with stretch failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|hfont
operator|=
name|QWindowsFontDatabase
operator|::
name|systemFont
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
else|else
block|{
comment|// Default to false for DirectWrite (and re-enable once/if everything turns out okay)
name|useDirectWrite
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|initDirectWrite
argument_list|(
name|data
operator|.
name|data
argument_list|()
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|fam
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|nameSubstitute
init|=
name|QWindowsFontEngineDirectWrite
operator|::
name|fontNameSubstitute
argument_list|(
name|fam
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameSubstitute
operator|!=
name|fam
condition|)
block|{
specifier|const
name|int
name|nameSubstituteLength
init|=
name|qMin
argument_list|(
name|nameSubstitute
operator|.
name|length
argument_list|()
argument_list|,
name|LF_FACESIZE
operator|-
literal|1
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|nameSubstitute
operator|.
name|utf16
argument_list|()
argument_list|,
name|nameSubstituteLength
operator|*
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfFaceName
index|[
name|nameSubstituteLength
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|HRESULT
name|hr
init|=
name|data
operator|->
name|directWriteGdiInterop
operator|->
name|CreateFontFromLOGFONT
argument_list|(
operator|&
name|lf
argument_list|,
operator|&
name|directWriteFont
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: CreateFontFromLOGFONT failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DeleteObject
argument_list|(
name|hfont
argument_list|)
expr_stmt|;
name|useDirectWrite
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
name|QFontEngine
modifier|*
name|fe
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|useDirectWrite
condition|)
block|{
name|QWindowsFontEngine
modifier|*
name|few
init|=
operator|new
name|QWindowsFontEngine
argument_list|(
name|request
operator|.
name|family
argument_list|,
name|hfont
argument_list|,
name|lf
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferClearTypeAA
condition|)
name|few
operator|->
name|glyphFormat
operator|=
name|QFontEngine
operator|::
name|Format_A32
expr_stmt|;
name|few
operator|->
name|initFontInfo
argument_list|(
name|request
argument_list|,
name|dpi
argument_list|)
expr_stmt|;
name|fe
operator|=
name|few
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
else|else
block|{
name|IDWriteFontFace
modifier|*
name|directWriteFontFace
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|hr
init|=
name|directWriteFont
operator|->
name|CreateFontFace
argument_list|(
operator|&
name|directWriteFontFace
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|QWindowsFontEngineDirectWrite
modifier|*
name|fedw
init|=
operator|new
name|QWindowsFontEngineDirectWrite
argument_list|(
name|directWriteFontFace
argument_list|,
name|request
operator|.
name|pixelSize
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|fedw
operator|->
name|initFontInfo
argument_list|(
name|request
argument_list|,
name|dpi
argument_list|,
name|directWriteFont
argument_list|)
expr_stmt|;
name|fe
operator|=
name|fedw
expr_stmt|;
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: CreateFontFace failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
name|directWriteFont
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|verticalDPI
specifier|static
specifier|inline
name|int
name|verticalDPI
parameter_list|()
block|{
return|return
name|GetDeviceCaps
argument_list|(
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|displayContext
argument_list|()
argument_list|,
name|LOGPIXELSY
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|systemDefaultFont
name|QFont
name|QWindowsFontDatabase
operator|::
name|systemDefaultFont
parameter_list|()
block|{
name|LOGFONT
name|lf
decl_stmt|;
name|GetObject
argument_list|(
name|QWindowsFontDatabase
operator|::
name|systemFont
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|lf
argument_list|)
argument_list|,
operator|&
name|lf
argument_list|)
expr_stmt|;
name|QFont
name|systemFont
init|=
name|QWindowsFontDatabase
operator|::
name|LOGFONT_to_QFont
argument_list|(
name|lf
argument_list|)
decl_stmt|;
comment|// "MS Shell Dlg 2" is the correct system font>= Win2k
if|if
condition|(
name|systemFont
operator|.
name|family
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"MS Shell Dlg"
argument_list|)
condition|)
name|systemFont
operator|.
name|setFamily
argument_list|(
name|QStringLiteral
argument_list|(
literal|"MS Shell Dlg 2"
argument_list|)
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|systemFont
expr_stmt|;
return|return
name|systemFont
return|;
block|}
end_function
begin_function
DECL|function|LOGFONT_to_QFont
name|QFont
name|QWindowsFontDatabase
operator|::
name|LOGFONT_to_QFont
parameter_list|(
specifier|const
name|LOGFONT
modifier|&
name|logFont
parameter_list|,
name|int
name|verticalDPI_In
parameter_list|)
block|{
if|if
condition|(
name|verticalDPI_In
operator|<=
literal|0
condition|)
name|verticalDPI_In
operator|=
name|verticalDPI
argument_list|()
expr_stmt|;
name|QFont
name|qFont
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|logFont
operator|.
name|lfFaceName
argument_list|)
argument_list|)
decl_stmt|;
name|qFont
operator|.
name|setItalic
argument_list|(
name|logFont
operator|.
name|lfItalic
argument_list|)
expr_stmt|;
if|if
condition|(
name|logFont
operator|.
name|lfWeight
operator|!=
name|FW_DONTCARE
condition|)
name|qFont
operator|.
name|setWeight
argument_list|(
name|QPlatformFontDatabase
operator|::
name|weightFromInteger
argument_list|(
name|logFont
operator|.
name|lfWeight
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|logFontHeight
init|=
name|qAbs
argument_list|(
name|logFont
operator|.
name|lfHeight
argument_list|)
decl_stmt|;
name|qFont
operator|.
name|setPointSizeF
argument_list|(
name|logFontHeight
operator|*
literal|72.0
operator|/
name|qreal
argument_list|(
name|verticalDPI_In
argument_list|)
argument_list|)
expr_stmt|;
name|qFont
operator|.
name|setUnderline
argument_list|(
name|logFont
operator|.
name|lfUnderline
argument_list|)
expr_stmt|;
name|qFont
operator|.
name|setOverline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qFont
operator|.
name|setStrikeOut
argument_list|(
name|logFont
operator|.
name|lfStrikeOut
argument_list|)
expr_stmt|;
return|return
name|qFont
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
