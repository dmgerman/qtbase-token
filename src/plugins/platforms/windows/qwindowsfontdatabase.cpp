begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontengine.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontenginedirectwrite.h"
end_include
begin_include
include|#
directive|include
file|"qtwindows_additional.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QFont>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmath.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<wchar.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<dwrite.h>
end_include
begin_include
include|#
directive|include
file|<d2d1.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \struct QWindowsFontEngineData     \brief Static constant data shared by the font engines.     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsFontEngineData
name|QWindowsFontEngineData
operator|::
name|QWindowsFontEngineData
parameter_list|()
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
member_init_list|:
name|directWriteFactory
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|directWriteGdiInterop
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
block|{
comment|// from qapplication_win.cpp
name|UINT
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETFONTSMOOTHINGTYPE
argument_list|,
literal|0
argument_list|,
operator|&
name|result
argument_list|,
literal|0
argument_list|)
condition|)
name|clearTypeEnabled
operator|=
operator|(
name|result
operator|==
name|FE_FONTSMOOTHINGCLEARTYPE
operator|)
expr_stmt|;
name|int
name|winSmooth
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
literal|0x200C
comment|/* SPI_GETFONTSMOOTHINGCONTRAST */
argument_list|,
literal|0
argument_list|,
operator|&
name|winSmooth
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|fontSmoothingGamma
operator|=
name|winSmooth
operator|/
name|qreal
argument_list|(
literal|1000.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fontSmoothingGamma
operator|=
literal|1.0
expr_stmt|;
block|}
comment|// Safeguard ourselves against corrupt registry values...
if|if
condition|(
name|fontSmoothingGamma
operator|>
literal|5
operator|||
name|fontSmoothingGamma
operator|<
literal|1
condition|)
name|fontSmoothingGamma
operator|=
name|qreal
argument_list|(
literal|1.4
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|gray_gamma
init|=
literal|2.31
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|pow_gamma
index|[
name|i
index|]
operator|=
name|uint
argument_list|(
name|qRound
argument_list|(
name|qPow
argument_list|(
name|i
operator|/
name|qreal
argument_list|(
literal|255.
argument_list|)
argument_list|,
name|gray_gamma
argument_list|)
operator|*
literal|2047
argument_list|)
argument_list|)
expr_stmt|;
name|HDC
name|displayDC
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|hdc
operator|=
name|CreateCompatibleDC
argument_list|(
name|displayDC
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|displayDC
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsFontEngineData
name|QWindowsFontEngineData
operator|::
name|~
name|QWindowsFontEngineData
parameter_list|()
block|{
if|if
condition|(
name|hdc
condition|)
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|hdc
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
if|if
condition|(
name|directWriteGdiInterop
condition|)
name|directWriteGdiInterop
operator|->
name|Release
argument_list|()
expr_stmt|;
if|if
condition|(
name|directWriteFactory
condition|)
name|directWriteFactory
operator|->
name|Release
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
end_if
begin_function
DECL|function|initDirectWrite
specifier|static
specifier|inline
name|bool
name|initDirectWrite
parameter_list|(
name|QWindowsFontEngineData
modifier|*
name|d
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|directWriteFactory
condition|)
block|{
specifier|const
name|HRESULT
name|hr
init|=
name|DWriteCreateFactory
argument_list|(
name|DWRITE_FACTORY_TYPE_SHARED
argument_list|,
name|__uuidof
argument_list|(
name|IDWriteFactory
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|IUnknown
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|d
operator|->
name|directWriteFactory
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: DWriteCreateFactory failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|directWriteGdiInterop
condition|)
block|{
specifier|const
name|HRESULT
name|hr
init|=
name|d
operator|->
name|directWriteFactory
operator|->
name|GetGdiInterop
argument_list|(
operator|&
name|d
operator|->
name|directWriteGdiInterop
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: GetGdiInterop failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(QT_NO_DIRECTWRITE)
end_comment
begin_comment
comment|/*!     \class QWindowsFontDatabase     \brief Font database for Windows      \note The Qt 4.8 WIndows font database employed a mechanism of     delayed population of the database again passing a font name     to EnumFontFamiliesEx(), working around the fact that     EnumFontFamiliesEx() does not list all fonts by default.     This should be introduced to Lighthouse as well?      \ingroup qt-lighthouse-win */
end_comment
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|def
parameter_list|)
block|{
name|d
operator|.
name|nospace
argument_list|()
operator|<<
literal|"Family="
operator|<<
name|def
operator|.
name|family
operator|<<
literal|" Stylename="
operator|<<
name|def
operator|.
name|styleName
operator|<<
literal|" pointsize="
operator|<<
name|def
operator|.
name|pointSize
operator|<<
literal|" pixelsize="
operator|<<
name|def
operator|.
name|pixelSize
operator|<<
literal|" styleHint="
operator|<<
name|def
operator|.
name|styleHint
operator|<<
literal|" weight="
operator|<<
name|def
operator|.
name|weight
operator|<<
literal|" stretch="
operator|<<
name|def
operator|.
name|stretch
operator|<<
literal|" hintingPreference="
operator|<<
name|def
operator|.
name|hintingPreference
operator|<<
literal|' '
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_comment
comment|/* From QFontDatabase.cpp, qt_determine_writing_systems_from_truetype_bits().  * Fixme: Make public? */
end_comment
begin_comment
comment|// see the Unicode subset bitfields in the MSDN docs
end_comment
begin_decl_stmt
DECL|variable|requiredUnicodeBits
specifier|static
name|int
name|requiredUnicodeBits
index|[
name|QFontDatabase
operator|::
name|WritingSystemsCount
index|]
index|[
literal|2
index|]
init|=
block|{
comment|// Any,
block|{
literal|127
block|,
literal|127
block|}
block|,
comment|// Latin,
block|{
literal|0
block|,
literal|127
block|}
block|,
comment|// Greek,
block|{
literal|7
block|,
literal|127
block|}
block|,
comment|// Cyrillic,
block|{
literal|9
block|,
literal|127
block|}
block|,
comment|// Armenian,
block|{
literal|10
block|,
literal|127
block|}
block|,
comment|// Hebrew,
block|{
literal|11
block|,
literal|127
block|}
block|,
comment|// Arabic,
block|{
literal|13
block|,
literal|127
block|}
block|,
comment|// Syriac,
block|{
literal|71
block|,
literal|127
block|}
block|,
comment|//Thaana,
block|{
literal|72
block|,
literal|127
block|}
block|,
comment|//Devanagari,
block|{
literal|15
block|,
literal|127
block|}
block|,
comment|//Bengali,
block|{
literal|16
block|,
literal|127
block|}
block|,
comment|//Gurmukhi,
block|{
literal|17
block|,
literal|127
block|}
block|,
comment|//Gujarati,
block|{
literal|18
block|,
literal|127
block|}
block|,
comment|//Oriya,
block|{
literal|19
block|,
literal|127
block|}
block|,
comment|//Tamil,
block|{
literal|20
block|,
literal|127
block|}
block|,
comment|//Telugu,
block|{
literal|21
block|,
literal|127
block|}
block|,
comment|//Kannada,
block|{
literal|22
block|,
literal|127
block|}
block|,
comment|//Malayalam,
block|{
literal|23
block|,
literal|127
block|}
block|,
comment|//Sinhala,
block|{
literal|73
block|,
literal|127
block|}
block|,
comment|//Thai,
block|{
literal|24
block|,
literal|127
block|}
block|,
comment|//Lao,
block|{
literal|25
block|,
literal|127
block|}
block|,
comment|//Tibetan,
block|{
literal|70
block|,
literal|127
block|}
block|,
comment|//Myanmar,
block|{
literal|74
block|,
literal|127
block|}
block|,
comment|// Georgian,
block|{
literal|26
block|,
literal|127
block|}
block|,
comment|// Khmer,
block|{
literal|80
block|,
literal|127
block|}
block|,
comment|// SimplifiedChinese,
block|{
literal|126
block|,
literal|127
block|}
block|,
comment|// TraditionalChinese,
block|{
literal|126
block|,
literal|127
block|}
block|,
comment|// Japanese,
block|{
literal|126
block|,
literal|127
block|}
block|,
comment|// Korean,
block|{
literal|56
block|,
literal|127
block|}
block|,
comment|// Vietnamese,
block|{
literal|0
block|,
literal|127
block|}
block|,
comment|// same as latin1
comment|// Other,
block|{
literal|126
block|,
literal|127
block|}
block|,
comment|// Ogham,
block|{
literal|78
block|,
literal|127
block|}
block|,
comment|// Runic,
block|{
literal|79
block|,
literal|127
block|}
block|,
comment|// Nko,
block|{
literal|14
block|,
literal|127
block|}
block|, }
decl_stmt|;
end_decl_stmt
begin_enum
enum|enum
block|{
DECL|enumerator|SimplifiedChineseCsbBit
name|SimplifiedChineseCsbBit
init|=
literal|18
block|,
DECL|enumerator|TraditionalChineseCsbBit
name|TraditionalChineseCsbBit
init|=
literal|20
block|,
DECL|enumerator|JapaneseCsbBit
name|JapaneseCsbBit
init|=
literal|17
block|,
DECL|enumerator|KoreanCsbBit
name|KoreanCsbBit
init|=
literal|21
block|}
enum|;
end_enum
begin_function
DECL|function|writingSystemsFromTrueTypeBits
specifier|static
specifier|inline
name|void
name|writingSystemsFromTrueTypeBits
parameter_list|(
name|quint32
name|unicodeRange
index|[
literal|4
index|]
parameter_list|,
name|quint32
name|codePageRange
index|[
literal|2
index|]
parameter_list|,
name|QSupportedWritingSystems
modifier|*
name|ws
parameter_list|)
block|{
name|bool
name|hasScript
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QFontDatabase
operator|::
name|WritingSystemsCount
condition|;
name|i
operator|++
control|)
block|{
name|int
name|bit
init|=
name|requiredUnicodeBits
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|index
init|=
name|bit
operator|/
literal|32
decl_stmt|;
name|int
name|flag
init|=
literal|1
operator|<<
operator|(
name|bit
operator|&
literal|31
operator|)
decl_stmt|;
if|if
condition|(
name|bit
operator|!=
literal|126
operator|&&
name|unicodeRange
index|[
name|index
index|]
operator|&
name|flag
condition|)
block|{
name|bit
operator|=
name|requiredUnicodeBits
index|[
name|i
index|]
index|[
literal|1
index|]
expr_stmt|;
name|index
operator|=
name|bit
operator|/
literal|32
expr_stmt|;
name|flag
operator|=
literal|1
operator|<<
operator|(
name|bit
operator|&
literal|31
operator|)
expr_stmt|;
if|if
condition|(
name|bit
operator|==
literal|127
operator|||
name|unicodeRange
index|[
name|index
index|]
operator|&
name|flag
condition|)
block|{
name|ws
operator|->
name|setSupported
argument_list|(
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|(
name|i
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hasScript
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|codePageRange
index|[
literal|0
index|]
operator|&
operator|(
literal|1
operator|<<
name|SimplifiedChineseCsbBit
operator|)
condition|)
block|{
name|ws
operator|->
name|setSupported
argument_list|(
name|QFontDatabase
operator|::
name|SimplifiedChinese
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hasScript
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|codePageRange
index|[
literal|0
index|]
operator|&
operator|(
literal|1
operator|<<
name|TraditionalChineseCsbBit
operator|)
condition|)
block|{
name|ws
operator|->
name|setSupported
argument_list|(
name|QFontDatabase
operator|::
name|TraditionalChinese
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hasScript
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|codePageRange
index|[
literal|0
index|]
operator|&
operator|(
literal|1
operator|<<
name|JapaneseCsbBit
operator|)
condition|)
block|{
name|ws
operator|->
name|setSupported
argument_list|(
name|QFontDatabase
operator|::
name|Japanese
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hasScript
operator|=
literal|true
expr_stmt|;
comment|//qDebug("font %s supports Japanese", familyName.latin1());
block|}
if|if
condition|(
name|codePageRange
index|[
literal|0
index|]
operator|&
operator|(
literal|1
operator|<<
name|KoreanCsbBit
operator|)
condition|)
block|{
name|ws
operator|->
name|setSupported
argument_list|(
name|QFontDatabase
operator|::
name|Korean
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hasScript
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasScript
condition|)
name|ws
operator|->
name|setSupported
argument_list|(
name|QFontDatabase
operator|::
name|Symbol
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// convert 0 ~ 1000 integer to QFont::Weight
end_comment
begin_function
DECL|function|weightFromInteger
specifier|static
specifier|inline
name|QFont
operator|::
name|Weight
name|weightFromInteger
parameter_list|(
name|long
name|weight
parameter_list|)
block|{
if|if
condition|(
name|weight
operator|<
literal|400
condition|)
return|return
name|QFont
operator|::
name|Light
return|;
if|if
condition|(
name|weight
operator|<
literal|600
condition|)
return|return
name|QFont
operator|::
name|Normal
return|;
if|if
condition|(
name|weight
operator|<
literal|700
condition|)
return|return
name|QFont
operator|::
name|DemiBold
return|;
if|if
condition|(
name|weight
operator|<
literal|800
condition|)
return|return
name|QFont
operator|::
name|Bold
return|;
return|return
name|QFont
operator|::
name|Black
return|;
block|}
end_function
begin_function
DECL|function|writingSystemFromScript
specifier|static
specifier|inline
name|QFontDatabase
operator|::
name|WritingSystem
name|writingSystemFromScript
parameter_list|(
specifier|const
name|QString
modifier|&
name|scriptName
parameter_list|)
block|{
if|if
condition|(
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Western"
argument_list|)
operator|||
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Baltic"
argument_list|)
operator|||
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Central European"
argument_list|)
operator|||
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Turkish"
argument_list|)
operator|||
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Vietnamese"
argument_list|)
operator|||
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"OEM/Dos"
argument_list|)
condition|)
return|return
name|QFontDatabase
operator|::
name|Latin
return|;
if|if
condition|(
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Thai"
argument_list|)
condition|)
return|return
name|QFontDatabase
operator|::
name|Thai
return|;
if|if
condition|(
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Symbol"
argument_list|)
operator|||
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Other"
argument_list|)
condition|)
return|return
name|QFontDatabase
operator|::
name|Symbol
return|;
if|if
condition|(
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"CHINESE_GB2312"
argument_list|)
condition|)
return|return
name|QFontDatabase
operator|::
name|SimplifiedChinese
return|;
if|if
condition|(
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"CHINESE_BIG5"
argument_list|)
condition|)
return|return
name|QFontDatabase
operator|::
name|TraditionalChinese
return|;
if|if
condition|(
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Cyrillic"
argument_list|)
condition|)
return|return
name|QFontDatabase
operator|::
name|Cyrillic
return|;
if|if
condition|(
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Hangul"
argument_list|)
condition|)
return|return
name|QFontDatabase
operator|::
name|Korean
return|;
if|if
condition|(
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Hebrew"
argument_list|)
condition|)
return|return
name|QFontDatabase
operator|::
name|Hebrew
return|;
if|if
condition|(
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Greek"
argument_list|)
condition|)
return|return
name|QFontDatabase
operator|::
name|Greek
return|;
if|if
condition|(
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Japanese"
argument_list|)
condition|)
return|return
name|QFontDatabase
operator|::
name|Japanese
return|;
if|if
condition|(
name|scriptName
operator|==
name|QStringLiteral
argument_list|(
literal|"Arabic"
argument_list|)
condition|)
return|return
name|QFontDatabase
operator|::
name|Arabic
return|;
return|return
name|QFontDatabase
operator|::
name|Any
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|bool
name|localizedName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|QString
name|getEnglishName
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_GUI_EXPORT
name|void
name|qt_registerAliasToFontFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|,
specifier|const
name|QString
modifier|&
name|alias
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|addFontToDatabase
specifier|static
name|bool
name|addFontToDatabase
parameter_list|(
name|QString
name|familyName
parameter_list|,
specifier|const
name|QString
modifier|&
name|scriptName
parameter_list|,
specifier|const
name|TEXTMETRIC
modifier|*
name|textmetric
parameter_list|,
specifier|const
name|FONTSIGNATURE
modifier|*
name|signature
parameter_list|,
name|int
name|type
parameter_list|)
block|{
comment|// the "@family" fonts are just the same as "family". Ignore them.
if|if
condition|(
name|familyName
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'@'
argument_list|)
operator|||
name|familyName
operator|.
name|startsWith
argument_list|(
name|QStringLiteral
argument_list|(
literal|"WST_"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|static
specifier|const
name|int
name|SMOOTH_SCALABLE
init|=
literal|0xffff
decl_stmt|;
specifier|const
name|QString
name|foundryName
decl_stmt|;
comment|// No such concept.
specifier|const
name|NEWTEXTMETRIC
modifier|*
name|tm
init|=
operator|(
name|NEWTEXTMETRIC
operator|*
operator|)
name|textmetric
decl_stmt|;
specifier|const
name|bool
name|fixed
init|=
operator|!
operator|(
name|tm
operator|->
name|tmPitchAndFamily
operator|&
name|TMPF_FIXED_PITCH
operator|)
decl_stmt|;
specifier|const
name|bool
name|ttf
init|=
operator|(
name|tm
operator|->
name|tmPitchAndFamily
operator|&
name|TMPF_TRUETYPE
operator|)
decl_stmt|;
specifier|const
name|bool
name|scalable
init|=
name|tm
operator|->
name|tmPitchAndFamily
operator|&
operator|(
name|TMPF_VECTOR
operator||
name|TMPF_TRUETYPE
operator|)
decl_stmt|;
specifier|const
name|int
name|size
init|=
name|scalable
condition|?
name|SMOOTH_SCALABLE
else|:
name|tm
operator|->
name|tmHeight
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Style
name|style
init|=
name|tm
operator|->
name|tmItalic
condition|?
name|QFont
operator|::
name|StyleItalic
else|:
name|QFont
operator|::
name|StyleNormal
decl_stmt|;
specifier|const
name|bool
name|antialias
init|=
literal|false
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Weight
name|weight
init|=
name|weightFromInteger
argument_list|(
name|tm
operator|->
name|tmWeight
argument_list|)
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Stretch
name|stretch
init|=
name|QFont
operator|::
name|Unstretched
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseFonts
operator|>
literal|2
condition|)
block|{
name|QDebug
name|nospace
init|=
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
decl_stmt|;
name|nospace
operator|<<
name|__FUNCTION__
operator|<<
name|familyName
operator|<<
name|scriptName
operator|<<
literal|"TTF="
operator|<<
name|ttf
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|DEVICE_FONTTYPE
condition|)
name|nospace
operator|<<
literal|" DEVICE"
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|RASTER_FONTTYPE
condition|)
name|nospace
operator|<<
literal|" RASTER"
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
name|nospace
operator|<<
literal|" TRUETYPE"
expr_stmt|;
name|nospace
operator|<<
literal|" scalable="
operator|<<
name|scalable
operator|<<
literal|" Size="
operator|<<
name|size
operator|<<
literal|" Style="
operator|<<
name|style
operator|<<
literal|" Weight="
operator|<<
name|weight
operator|<<
literal|" stretch="
operator|<<
name|stretch
expr_stmt|;
block|}
name|QString
name|englishName
decl_stmt|;
if|if
condition|(
name|ttf
operator|&&
name|localizedName
argument_list|(
name|familyName
argument_list|)
condition|)
name|englishName
operator|=
name|getEnglishName
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
name|QSupportedWritingSystems
name|writingSystems
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
block|{
name|quint32
name|unicodeRange
index|[
literal|4
index|]
init|=
block|{
name|signature
operator|->
name|fsUsb
index|[
literal|0
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|1
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|2
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|3
index|]
block|}
decl_stmt|;
name|quint32
name|codePageRange
index|[
literal|2
index|]
init|=
block|{
name|signature
operator|->
name|fsCsb
index|[
literal|0
index|]
block|,
name|signature
operator|->
name|fsCsb
index|[
literal|1
index|]
block|}
decl_stmt|;
name|writingSystemsFromTrueTypeBits
argument_list|(
name|unicodeRange
argument_list|,
name|codePageRange
argument_list|,
operator|&
name|writingSystems
argument_list|)
expr_stmt|;
comment|// ### Hack to work around problem with Thai text on Windows 7. Segoe UI contains
comment|// the symbol for Baht, and Windows thus reports that it supports the Thai script.
comment|// Since it's the default UI font on this platform, most widgets will be unable to
comment|// display Thai text by default. As a temporary work around, we special case Segoe UI
comment|// and remove the Thai script from its list of supported writing systems.
if|if
condition|(
name|writingSystems
operator|.
name|supported
argument_list|(
name|QFontDatabase
operator|::
name|Thai
argument_list|)
operator|&&
name|familyName
operator|==
name|QStringLiteral
argument_list|(
literal|"Segoe UI"
argument_list|)
condition|)
name|writingSystems
operator|.
name|setSupported
argument_list|(
name|QFontDatabase
operator|::
name|Thai
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QFontDatabase
operator|::
name|WritingSystem
name|ws
init|=
name|writingSystemFromScript
argument_list|(
name|scriptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ws
operator|!=
name|QFontDatabase
operator|::
name|Any
condition|)
name|writingSystems
operator|.
name|setSupported
argument_list|(
name|ws
argument_list|)
expr_stmt|;
block|}
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|familyName
argument_list|,
name|foundryName
argument_list|,
name|weight
argument_list|,
name|style
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// add fonts windows can generate for us:
if|if
condition|(
name|weight
operator|<=
name|QFont
operator|::
name|DemiBold
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|familyName
argument_list|,
name|foundryName
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
name|style
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|!=
name|QFont
operator|::
name|StyleItalic
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|familyName
argument_list|,
name|foundryName
argument_list|,
name|weight
argument_list|,
name|QFont
operator|::
name|StyleItalic
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|weight
operator|<=
name|QFont
operator|::
name|DemiBold
operator|&&
name|style
operator|!=
name|QFont
operator|::
name|StyleItalic
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|familyName
argument_list|,
name|foundryName
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
name|QFont
operator|::
name|StyleItalic
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|englishName
operator|.
name|isEmpty
argument_list|()
condition|)
name|qt_registerAliasToFontFamily
argument_list|(
name|familyName
argument_list|,
name|englishName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|storeFont
specifier|static
name|int
name|CALLBACK
name|storeFont
parameter_list|(
name|ENUMLOGFONTEX
modifier|*
name|f
parameter_list|,
name|NEWTEXTMETRICEX
modifier|*
name|textmetric
parameter_list|,
name|int
name|type
parameter_list|,
name|LPARAM
name|namesSetIn
parameter_list|)
block|{
typedef|typedef
name|QSet
argument_list|<
name|QString
argument_list|>
name|StringSet
typedef|;
specifier|const
name|QString
name|familyName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfLogFont
operator|.
name|lfFaceName
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|script
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfScript
argument_list|)
decl_stmt|;
specifier|const
name|FONTSIGNATURE
name|signature
init|=
name|textmetric
operator|->
name|ntmFontSig
decl_stmt|;
comment|// NEWTEXTMETRICEX is a NEWTEXTMETRIC, which according to the documentation is
comment|// identical to a TEXTMETRIC except for the last four members, which we don't use
comment|// anyway
if|if
condition|(
name|addFontToDatabase
argument_list|(
name|familyName
argument_list|,
name|script
argument_list|,
operator|(
name|TEXTMETRIC
operator|*
operator|)
name|textmetric
argument_list|,
operator|&
name|signature
argument_list|,
name|type
argument_list|)
condition|)
cast|reinterpret_cast
argument_list|<
name|StringSet
operator|*
argument_list|>
argument_list|(
name|namesSetIn
argument_list|)
operator|->
name|insert
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
comment|// keep on enumerating
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|populateFontDatabase
name|void
name|QWindowsFontDatabase
operator|::
name|populateFontDatabase
parameter_list|()
block|{
if|if
condition|(
name|m_families
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QPlatformFontDatabase
operator|::
name|populateFontDatabase
argument_list|()
expr_stmt|;
name|populate
argument_list|()
expr_stmt|;
comment|// Called multiple times.
comment|// Work around EnumFontFamiliesEx() not listing the system font, see below.
specifier|const
name|QString
name|sysFontFamily
init|=
name|QGuiApplication
operator|::
name|font
argument_list|()
operator|.
name|family
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m_families
operator|.
name|contains
argument_list|(
name|sysFontFamily
argument_list|)
condition|)
name|populate
argument_list|(
name|sysFontFamily
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \brief Populate font database using EnumFontFamiliesEx().      Normally, leaving the name empty should enumerate     all fonts, however, system fonts like "MS Shell Dlg 2"     are only found when specifying the name explicitly. */
end_comment
begin_function
DECL|function|populate
name|void
name|QWindowsFontDatabase
operator|::
name|populate
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseFonts
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|m_families
operator|.
name|size
argument_list|()
operator|<<
name|family
expr_stmt|;
name|HDC
name|dummy
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
if|if
condition|(
name|family
operator|.
name|size
argument_list|()
operator|>=
name|LF_FACESIZE
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Unable to enumerate family '%s'."
argument_list|,
name|__FUNCTION__
argument_list|,
name|qPrintable
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|wmemcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|family
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|family
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfPitchAndFamily
operator|=
literal|0
expr_stmt|;
name|EnumFontFamiliesEx
argument_list|(
name|dummy
argument_list|,
operator|&
name|lf
argument_list|,
operator|(
name|FONTENUMPROC
operator|)
name|storeFont
argument_list|,
operator|(
name|LPARAM
operator|)
operator|&
name|m_families
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QWindowsFontDatabase
name|QWindowsFontDatabase
operator|::
name|QWindowsFontDatabase
parameter_list|()
member_init_list|:
name|m_fontEngineData
argument_list|(
operator|new
name|QWindowsFontEngineData
argument_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseFonts
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|"Clear type: "
operator|<<
name|m_fontEngineData
operator|->
name|clearTypeEnabled
operator|<<
literal|"gamma: "
operator|<<
name|m_fontEngineData
operator|->
name|fontSmoothingGamma
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsFontDatabase
name|QWindowsFontDatabase
operator|::
name|~
name|QWindowsFontDatabase
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|fontEngine
name|QFontEngine
modifier|*
name|QWindowsFontDatabase
operator|::
name|fontEngine
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|fontDef
parameter_list|,
name|QUnicodeTables
operator|::
name|Script
name|script
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|QWindowsFontDatabase
operator|::
name|createEngine
argument_list|(
name|script
argument_list|,
name|fontDef
argument_list|,
literal|0
argument_list|,
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|defaultDPI
argument_list|()
argument_list|,
literal|false
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|m_fontEngineData
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseFonts
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|"FONTDEF"
operator|<<
name|fontDef
operator|<<
name|script
operator|<<
name|fe
operator|<<
name|handle
expr_stmt|;
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|fontEngine
name|QFontEngine
modifier|*
name|QWindowsFontDatabase
operator|::
name|fontEngine
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|,
name|qreal
name|pixelSize
parameter_list|,
name|QFont
operator|::
name|HintingPreference
name|hintingPreference
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|QPlatformFontDatabase
operator|::
name|fontEngine
argument_list|(
name|fontData
argument_list|,
name|pixelSize
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseFonts
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|"FONTDATA"
operator|<<
name|fontData
operator|<<
name|pixelSize
operator|<<
name|hintingPreference
operator|<<
name|fe
expr_stmt|;
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|fallbacksForFamily
name|QStringList
name|QWindowsFontDatabase
operator|::
name|fallbacksForFamily
parameter_list|(
specifier|const
name|QString
name|family
parameter_list|,
specifier|const
name|QFont
operator|::
name|Style
modifier|&
name|style
parameter_list|,
specifier|const
name|QFont
operator|::
name|StyleHint
modifier|&
name|styleHint
parameter_list|,
specifier|const
name|QUnicodeTables
operator|::
name|Script
modifier|&
name|script
parameter_list|)
specifier|const
block|{
name|QStringList
name|result
init|=
name|QPlatformFontDatabase
operator|::
name|fallbacksForFamily
argument_list|(
name|family
argument_list|,
name|style
argument_list|,
name|styleHint
argument_list|,
name|script
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|result
return|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseFonts
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|family
operator|<<
name|style
operator|<<
name|styleHint
operator|<<
name|script
operator|<<
name|result
operator|<<
name|m_families
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|addApplicationFont
name|QStringList
name|QWindowsFontDatabase
operator|::
name|addApplicationFont
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
specifier|const
name|QStringList
name|result
init|=
name|QPlatformFontDatabase
operator|::
name|addApplicationFont
argument_list|(
name|fontData
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|releaseHandle
name|void
name|QWindowsFontDatabase
operator|::
name|releaseHandle
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|)
block|{
if|if
condition|(
name|handle
operator|&&
name|QWindowsContext
operator|::
name|verboseFonts
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|handle
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fontDir
name|QString
name|QWindowsFontDatabase
operator|::
name|fontDir
parameter_list|()
specifier|const
block|{
specifier|const
name|QString
name|result
init|=
name|QPlatformFontDatabase
operator|::
name|fontDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseFonts
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|systemFont
name|HFONT
name|QWindowsFontDatabase
operator|::
name|systemFont
parameter_list|()
block|{
specifier|static
specifier|const
name|HFONT
name|stock_sysfont
init|=
operator|(
name|HFONT
operator|)
name|GetStockObject
argument_list|(
name|SYSTEM_FONT
argument_list|)
decl_stmt|;
return|return
name|stock_sysfont
return|;
block|}
end_function
begin_comment
comment|// Creation functions
end_comment
begin_function
DECL|function|scriptRequiresOpenType
specifier|static
specifier|inline
name|bool
name|scriptRequiresOpenType
parameter_list|(
name|int
name|script
parameter_list|)
block|{
return|return
operator|(
operator|(
name|script
operator|>=
name|QUnicodeTables
operator|::
name|Syriac
operator|&&
name|script
operator|<=
name|QUnicodeTables
operator|::
name|Sinhala
operator|)
operator|||
name|script
operator|==
name|QUnicodeTables
operator|::
name|Khmer
operator|||
name|script
operator|==
name|QUnicodeTables
operator|::
name|Nko
operator|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|other_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|other_tryFonts
index|[]
init|=
block|{
literal|"Arial"
block|,
literal|"MS UI Gothic"
block|,
literal|"Gulim"
block|,
literal|"SimSun"
block|,
literal|"PMingLiU"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|jp_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|jp_tryFonts
index|[]
init|=
block|{
literal|"MS UI Gothic"
block|,
literal|"Arial"
block|,
literal|"Gulim"
block|,
literal|"SimSun"
block|,
literal|"PMingLiU"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ch_CN_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|ch_CN_tryFonts
index|[]
init|=
block|{
literal|"SimSun"
block|,
literal|"Arial"
block|,
literal|"PMingLiU"
block|,
literal|"Gulim"
block|,
literal|"MS UI Gothic"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ch_TW_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|ch_TW_tryFonts
index|[]
init|=
block|{
literal|"PMingLiU"
block|,
literal|"Arial"
block|,
literal|"SimSun"
block|,
literal|"Gulim"
block|,
literal|"MS UI Gothic"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|kr_tryFonts
specifier|static
specifier|const
name|char
modifier|*
name|kr_tryFonts
index|[]
init|=
block|{
literal|"Gulim"
block|,
literal|"Arial"
block|,
literal|"PMingLiU"
block|,
literal|"SimSun"
block|,
literal|"MS UI Gothic"
block|,
literal|"Arial Unicode MS"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|tryFonts
specifier|static
specifier|const
name|char
modifier|*
modifier|*
name|tryFonts
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|createEngine
name|QFontEngine
modifier|*
name|QWindowsFontDatabase
operator|::
name|createEngine
parameter_list|(
name|int
name|script
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|request
parameter_list|,
name|HDC
name|fontHdc
parameter_list|,
name|int
name|dpi
parameter_list|,
name|bool
name|rawMode
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|family_list
parameter_list|,
specifier|const
name|QSharedPointer
argument_list|<
name|QWindowsFontEngineData
argument_list|>
modifier|&
name|data
parameter_list|)
block|{
name|LOGFONT
name|lf
decl_stmt|;
name|memset
argument_list|(
operator|&
name|lf
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|LOGFONT
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|useDevice
init|=
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferDevice
operator|)
operator|&&
name|fontHdc
decl_stmt|;
specifier|const
name|HDC
name|hdc
init|=
name|useDevice
condition|?
name|fontHdc
else|:
name|data
operator|->
name|hdc
decl_stmt|;
name|bool
name|stockFont
init|=
literal|false
decl_stmt|;
name|bool
name|preferClearTypeAA
init|=
literal|false
decl_stmt|;
name|HFONT
name|hfont
init|=
literal|0
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
name|bool
name|useDirectWrite
init|=
operator|(
name|request
operator|.
name|hintingPreference
operator|==
name|QFont
operator|::
name|PreferNoHinting
operator|)
operator|||
operator|(
name|request
operator|.
name|hintingPreference
operator|==
name|QFont
operator|::
name|PreferVerticalHinting
operator|)
decl_stmt|;
name|IDWriteFont
modifier|*
name|directWriteFont
init|=
literal|0
decl_stmt|;
else|#
directive|else
name|bool
name|useDirectWrite
init|=
literal|false
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|rawMode
condition|)
block|{
comment|// will choose a stock font
name|int
name|f
init|=
name|SYSTEM_FONT
decl_stmt|;
specifier|const
name|QString
name|fam
init|=
name|request
operator|.
name|family
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|fam
operator|==
name|QStringLiteral
argument_list|(
literal|"default"
argument_list|)
operator|||
name|fam
operator|==
name|QStringLiteral
argument_list|(
literal|"system"
argument_list|)
condition|)
name|f
operator|=
name|SYSTEM_FONT
expr_stmt|;
elseif|else
if|if
condition|(
name|fam
operator|==
name|QStringLiteral
argument_list|(
literal|"system_fixed"
argument_list|)
condition|)
name|f
operator|=
name|SYSTEM_FIXED_FONT
expr_stmt|;
elseif|else
if|if
condition|(
name|fam
operator|==
name|QStringLiteral
argument_list|(
literal|"ansi_fixed"
argument_list|)
condition|)
name|f
operator|=
name|ANSI_FIXED_FONT
expr_stmt|;
elseif|else
if|if
condition|(
name|fam
operator|==
name|QStringLiteral
argument_list|(
literal|"ansi_var"
argument_list|)
condition|)
name|f
operator|=
name|ANSI_VAR_FONT
expr_stmt|;
elseif|else
if|if
condition|(
name|fam
operator|==
name|QStringLiteral
argument_list|(
literal|"device_default"
argument_list|)
condition|)
name|f
operator|=
name|DEVICE_DEFAULT_FONT
expr_stmt|;
elseif|else
if|if
condition|(
name|fam
operator|==
name|QStringLiteral
argument_list|(
literal|"oem_fixed"
argument_list|)
condition|)
name|f
operator|=
name|OEM_FIXED_FONT
expr_stmt|;
elseif|else
if|if
condition|(
name|fam
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'#'
argument_list|)
condition|)
name|f
operator|=
name|fam
operator|.
name|right
argument_list|(
name|fam
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|hfont
operator|=
operator|(
name|HFONT
operator|)
name|GetStockObject
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hfont
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: GetStockObject failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|hfont
operator|=
name|QWindowsFontDatabase
operator|::
name|systemFont
argument_list|()
expr_stmt|;
block|}
name|stockFont
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|int
name|hint
init|=
name|FF_DONTCARE
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|styleHint
condition|)
block|{
case|case
name|QFont
operator|::
name|Helvetica
case|:
name|hint
operator|=
name|FF_SWISS
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|Times
case|:
name|hint
operator|=
name|FF_ROMAN
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|Courier
case|:
name|hint
operator|=
name|FF_MODERN
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|OldEnglish
case|:
name|hint
operator|=
name|FF_DECORATIVE
expr_stmt|;
break|break;
case|case
name|QFont
operator|::
name|System
case|:
name|hint
operator|=
name|FF_MODERN
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|lf
operator|.
name|lfHeight
operator|=
operator|-
name|qRound
argument_list|(
name|request
operator|.
name|pixelSize
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfWidth
operator|=
literal|0
expr_stmt|;
name|lf
operator|.
name|lfEscapement
operator|=
literal|0
expr_stmt|;
name|lf
operator|.
name|lfOrientation
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|weight
operator|==
literal|50
condition|)
name|lf
operator|.
name|lfWeight
operator|=
name|FW_DONTCARE
expr_stmt|;
else|else
name|lf
operator|.
name|lfWeight
operator|=
operator|(
name|request
operator|.
name|weight
operator|*
literal|900
operator|)
operator|/
literal|99
expr_stmt|;
name|lf
operator|.
name|lfItalic
operator|=
name|request
operator|.
name|style
operator|!=
name|QFont
operator|::
name|StyleNormal
expr_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|int
name|strat
init|=
name|OUT_DEFAULT_PRECIS
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferBitmap
condition|)
block|{
name|strat
operator|=
name|OUT_RASTER_PRECIS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferDevice
condition|)
block|{
name|strat
operator|=
name|OUT_DEVICE_PRECIS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferOutline
condition|)
block|{
name|strat
operator|=
name|OUT_OUTLINE_PRECIS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|ForceOutline
condition|)
block|{
name|strat
operator|=
name|OUT_TT_ONLY_PRECIS
expr_stmt|;
block|}
name|lf
operator|.
name|lfOutPrecision
operator|=
name|strat
expr_stmt|;
name|int
name|qual
init|=
name|DEFAULT_QUALITY
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferMatch
condition|)
name|qual
operator|=
name|DRAFT_QUALITY
expr_stmt|;
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferQuality
condition|)
name|qual
operator|=
name|PROOF_QUALITY
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferAntialias
condition|)
block|{
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
condition|)
block|{
name|qual
operator|=
name|CLEARTYPE_QUALITY
expr_stmt|;
name|preferClearTypeAA
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|qual
operator|=
name|ANTIALIASED_QUALITY
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoAntialias
condition|)
block|{
name|qual
operator|=
name|NONANTIALIASED_QUALITY
expr_stmt|;
block|}
name|lf
operator|.
name|lfQuality
operator|=
name|qual
expr_stmt|;
name|lf
operator|.
name|lfClipPrecision
operator|=
name|CLIP_DEFAULT_PRECIS
expr_stmt|;
name|lf
operator|.
name|lfPitchAndFamily
operator|=
name|DEFAULT_PITCH
operator||
name|hint
expr_stmt|;
name|QString
name|fam
init|=
name|request
operator|.
name|family
decl_stmt|;
if|if
condition|(
name|fam
operator|.
name|isEmpty
argument_list|()
condition|)
name|fam
operator|=
name|QStringLiteral
argument_list|(
literal|"MS Sans Serif"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|fam
operator|==
name|QStringLiteral
argument_list|(
literal|"MS Sans Serif"
argument_list|)
operator|)
operator|&&
operator|(
name|request
operator|.
name|style
operator|==
name|QFont
operator|::
name|StyleItalic
operator|||
operator|(
operator|-
name|lf
operator|.
name|lfHeight
operator|>
literal|18
operator|&&
operator|-
name|lf
operator|.
name|lfHeight
operator|!=
literal|24
operator|)
operator|)
condition|)
block|{
name|fam
operator|=
name|QStringLiteral
argument_list|(
literal|"Arial"
argument_list|)
expr_stmt|;
comment|// MS Sans Serif has bearing problems in italic, and does not scale
block|}
if|if
condition|(
name|fam
operator|==
name|QStringLiteral
argument_list|(
literal|"Courier"
argument_list|)
operator|&&
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|PreferBitmap
operator|)
condition|)
name|fam
operator|=
name|QStringLiteral
argument_list|(
literal|"Courier New"
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|fam
operator|.
name|utf16
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|qMin
argument_list|(
name|fam
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
comment|// 32 = Windows hard-coded
name|hfont
operator|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hfont
condition|)
name|qErrnoWarning
argument_list|(
literal|"%s: CreateFontIndirect failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|stockFont
operator|=
operator|(
name|hfont
operator|==
literal|0
operator|)
expr_stmt|;
name|bool
name|ttf
init|=
literal|false
decl_stmt|;
name|int
name|avWidth
init|=
literal|0
decl_stmt|;
name|BOOL
name|res
decl_stmt|;
name|HGDIOBJ
name|oldObj
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
decl_stmt|;
name|TEXTMETRIC
name|tm
decl_stmt|;
name|res
operator|=
name|GetTextMetrics
argument_list|(
name|hdc
argument_list|,
operator|&
name|tm
argument_list|)
expr_stmt|;
name|avWidth
operator|=
name|tm
operator|.
name|tmAveCharWidth
expr_stmt|;
name|ttf
operator|=
name|tm
operator|.
name|tmPitchAndFamily
operator|&
name|TMPF_TRUETYPE
expr_stmt|;
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldObj
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ttf
operator|||
operator|!
name|useDirectWrite
condition|)
block|{
name|useDirectWrite
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|hfont
operator|&&
operator|(
operator|!
name|ttf
operator|||
name|request
operator|.
name|stretch
operator|!=
literal|100
operator|)
condition|)
block|{
name|DeleteObject
argument_list|(
name|hfont
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
name|qErrnoWarning
argument_list|(
literal|"QFontEngine::loadEngine: GetTextMetrics failed"
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfWidth
operator|=
name|avWidth
operator|*
name|request
operator|.
name|stretch
operator|/
literal|100
expr_stmt|;
name|hfont
operator|=
name|CreateFontIndirect
argument_list|(
operator|&
name|lf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hfont
condition|)
name|qErrnoWarning
argument_list|(
literal|"%s: CreateFontIndirect with stretch failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hfont
operator|==
literal|0
condition|)
block|{
name|hfont
operator|=
operator|(
name|HFONT
operator|)
name|GetStockObject
argument_list|(
name|ANSI_VAR_FONT
argument_list|)
expr_stmt|;
name|stockFont
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
else|else
block|{
comment|// Default to false for DirectWrite (and re-enable once/if everything
comment|// turns out okay)
name|useDirectWrite
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|initDirectWrite
argument_list|(
name|data
operator|.
name|data
argument_list|()
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|nameSubstitute
init|=
name|QWindowsFontEngineDirectWrite
operator|::
name|fontNameSubstitute
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|)
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|nameSubstitute
operator|.
name|utf16
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|qMin
argument_list|(
name|nameSubstitute
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|LF_FACESIZE
argument_list|)
argument_list|)
expr_stmt|;
name|HRESULT
name|hr
init|=
name|data
operator|->
name|directWriteGdiInterop
operator|->
name|CreateFontFromLOGFONT
argument_list|(
operator|&
name|lf
argument_list|,
operator|&
name|directWriteFont
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: CreateFontFromLOGFONT failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DeleteObject
argument_list|(
name|hfont
argument_list|)
expr_stmt|;
name|useDirectWrite
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
block|}
name|QFontEngine
modifier|*
name|fe
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|useDirectWrite
condition|)
block|{
name|QWindowsFontEngine
modifier|*
name|few
init|=
operator|new
name|QWindowsFontEngine
argument_list|(
name|request
operator|.
name|family
argument_list|,
name|hfont
argument_list|,
name|stockFont
argument_list|,
name|lf
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|few
operator|->
name|setObjectName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QWindowsFontEngine_"
argument_list|)
operator|+
name|request
operator|.
name|family
argument_list|)
expr_stmt|;
if|if
condition|(
name|preferClearTypeAA
condition|)
name|few
operator|->
name|glyphFormat
operator|=
name|QFontEngineGlyphCache
operator|::
name|Raster_RGBMask
expr_stmt|;
comment|// Also check for OpenType tables when using complex scripts
comment|// ### TODO: This only works for scripts that require OpenType. More generally
comment|// for scripts that do not require OpenType we should just look at the list of
comment|// supported writing systems in the font's OS/2 table.
if|if
condition|(
name|scriptRequiresOpenType
argument_list|(
name|script
argument_list|)
condition|)
block|{
name|HB_Face
name|hbFace
init|=
name|few
operator|->
name|harfbuzzFace
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hbFace
operator|||
operator|!
name|hbFace
operator|->
name|supported_scripts
index|[
name|script
index|]
condition|)
block|{
name|qWarning
argument_list|(
literal|"  OpenType support missing for script\n"
argument_list|)
expr_stmt|;
operator|delete
name|few
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
name|few
operator|->
name|initFontInfo
argument_list|(
name|request
argument_list|,
name|fontHdc
argument_list|,
name|dpi
argument_list|)
expr_stmt|;
name|fe
operator|=
name|few
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DIRECTWRITE
argument_list|)
else|else
block|{
name|IDWriteFontFace
modifier|*
name|directWriteFontFace
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|hr
init|=
name|directWriteFont
operator|->
name|CreateFontFace
argument_list|(
operator|&
name|directWriteFontFace
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|QWindowsFontEngineDirectWrite
modifier|*
name|fedw
init|=
operator|new
name|QWindowsFontEngineDirectWrite
argument_list|(
name|directWriteFontFace
argument_list|,
name|request
operator|.
name|pixelSize
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|fedw
operator|->
name|initFontInfo
argument_list|(
name|request
argument_list|,
name|dpi
argument_list|,
name|directWriteFont
argument_list|)
expr_stmt|;
name|fedw
operator|->
name|setObjectName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QWindowsFontEngineDirectWrite_"
argument_list|)
operator|+
name|request
operator|.
name|family
argument_list|)
expr_stmt|;
name|fe
operator|=
name|fedw
expr_stmt|;
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: CreateFontFace failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directWriteFont
operator|!=
literal|0
condition|)
name|directWriteFont
operator|->
name|Release
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|script
operator|==
name|QUnicodeTables
operator|::
name|Common
operator|&&
operator|!
operator|(
name|request
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoFontMerging
operator|)
condition|)
block|{
name|QFontDatabase
name|db
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|writingSystems
argument_list|(
name|request
operator|.
name|family
argument_list|)
operator|.
name|contains
argument_list|(
name|QFontDatabase
operator|::
name|Symbol
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tryFonts
condition|)
block|{
name|LANGID
name|lid
init|=
name|GetUserDefaultLangID
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|lid
operator|&
literal|0xff
condition|)
block|{
case|case
name|LANG_CHINESE
case|:
comment|// Chinese (Taiwan)
if|if
condition|(
name|lid
operator|==
literal|0x0804
condition|)
comment|// Taiwan
name|tryFonts
operator|=
name|ch_TW_tryFonts
expr_stmt|;
else|else
name|tryFonts
operator|=
name|ch_CN_tryFonts
expr_stmt|;
break|break;
case|case
name|LANG_JAPANESE
case|:
name|tryFonts
operator|=
name|jp_tryFonts
expr_stmt|;
break|break;
case|case
name|LANG_KOREAN
case|:
name|tryFonts
operator|=
name|kr_tryFonts
expr_stmt|;
break|break;
default|default:
name|tryFonts
operator|=
name|other_tryFonts
expr_stmt|;
break|break;
block|}
block|}
name|QStringList
name|fm
init|=
name|QFontDatabase
argument_list|()
operator|.
name|families
argument_list|()
decl_stmt|;
name|QStringList
name|list
init|=
name|family_list
decl_stmt|;
specifier|const
name|char
modifier|*
modifier|*
name|tf
init|=
name|tryFonts
decl_stmt|;
while|while
condition|(
name|tf
operator|&&
operator|*
name|tf
condition|)
block|{
if|if
condition|(
name|fm
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
operator|*
name|tf
argument_list|)
argument_list|)
condition|)
name|list
operator|<<
name|QLatin1String
argument_list|(
operator|*
name|tf
argument_list|)
expr_stmt|;
operator|++
name|tf
expr_stmt|;
block|}
name|QFontEngine
modifier|*
name|mfe
init|=
operator|new
name|QWindowsMultiFontEngine
argument_list|(
name|fe
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|mfe
operator|->
name|setObjectName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QWindowsMultiFontEngine_"
argument_list|)
operator|+
name|request
operator|.
name|family
argument_list|)
expr_stmt|;
name|mfe
operator|->
name|fontDef
operator|=
name|fe
operator|->
name|fontDef
expr_stmt|;
name|fe
operator|=
name|mfe
expr_stmt|;
block|}
block|}
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|verticalDPI
specifier|static
specifier|inline
name|int
name|verticalDPI
parameter_list|()
block|{
return|return
name|GetDeviceCaps
argument_list|(
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|displayContext
argument_list|()
argument_list|,
name|LOGPIXELSY
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|defaultFont
name|QFont
name|QWindowsFontDatabase
operator|::
name|defaultFont
parameter_list|()
specifier|const
block|{
name|LOGFONT
name|lf
decl_stmt|;
name|GetObject
argument_list|(
name|GetStockObject
argument_list|(
name|DEFAULT_GUI_FONT
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|lf
argument_list|)
argument_list|,
operator|&
name|lf
argument_list|)
expr_stmt|;
name|QFont
name|systemFont
init|=
name|QWindowsFontDatabase
operator|::
name|LOGFONT_to_QFont
argument_list|(
name|lf
argument_list|)
decl_stmt|;
comment|// "MS Shell Dlg 2" is the correct system font>= Win2k
if|if
condition|(
name|systemFont
operator|.
name|family
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"MS Shell Dlg"
argument_list|)
condition|)
name|systemFont
operator|.
name|setFamily
argument_list|(
name|QStringLiteral
argument_list|(
literal|"MS Shell Dlg 2"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseFonts
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
name|systemFont
expr_stmt|;
return|return
name|systemFont
return|;
block|}
end_function
begin_function
DECL|function|defaultFonts
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|QFont
argument_list|>
name|QWindowsFontDatabase
operator|::
name|defaultFonts
parameter_list|()
specifier|const
block|{
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|QFont
argument_list|>
name|result
decl_stmt|;
name|NONCLIENTMETRICS
name|ncm
decl_stmt|;
name|ncm
operator|.
name|cbSize
operator|=
name|FIELD_OFFSET
argument_list|(
name|NONCLIENTMETRICS
argument_list|,
name|lfMessageFont
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|LOGFONT
argument_list|)
expr_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETNONCLIENTMETRICS
argument_list|,
name|ncm
operator|.
name|cbSize
argument_list|,
operator|&
name|ncm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|int
name|verticalRes
init|=
name|verticalDPI
argument_list|()
decl_stmt|;
specifier|const
name|QFont
name|menuFont
init|=
name|LOGFONT_to_QFont
argument_list|(
name|ncm
operator|.
name|lfMenuFont
argument_list|,
name|verticalRes
argument_list|)
decl_stmt|;
specifier|const
name|QFont
name|messageFont
init|=
name|LOGFONT_to_QFont
argument_list|(
name|ncm
operator|.
name|lfMessageFont
argument_list|,
name|verticalRes
argument_list|)
decl_stmt|;
specifier|const
name|QFont
name|statusFont
init|=
name|LOGFONT_to_QFont
argument_list|(
name|ncm
operator|.
name|lfStatusFont
argument_list|,
name|verticalRes
argument_list|)
decl_stmt|;
specifier|const
name|QFont
name|titleFont
init|=
name|LOGFONT_to_QFont
argument_list|(
name|ncm
operator|.
name|lfCaptionFont
argument_list|,
name|verticalRes
argument_list|)
decl_stmt|;
name|LOGFONT
name|lfIconTitleFont
decl_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETICONTITLELOGFONT
argument_list|,
sizeof|sizeof
argument_list|(
name|lfIconTitleFont
argument_list|)
argument_list|,
operator|&
name|lfIconTitleFont
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|QFont
name|iconTitleFont
init|=
name|LOGFONT_to_QFont
argument_list|(
name|lfIconTitleFont
argument_list|,
name|verticalRes
argument_list|)
decl_stmt|;
name|result
operator|.
name|insert
argument_list|(
name|QByteArray
argument_list|(
literal|"QMenu"
argument_list|)
argument_list|,
name|menuFont
argument_list|)
expr_stmt|;
name|result
operator|.
name|insert
argument_list|(
name|QByteArray
argument_list|(
literal|"QMenuBar"
argument_list|)
argument_list|,
name|menuFont
argument_list|)
expr_stmt|;
name|result
operator|.
name|insert
argument_list|(
name|QByteArray
argument_list|(
literal|"QMessageBox"
argument_list|)
argument_list|,
name|messageFont
argument_list|)
expr_stmt|;
name|result
operator|.
name|insert
argument_list|(
name|QByteArray
argument_list|(
literal|"QTipLabel"
argument_list|)
argument_list|,
name|statusFont
argument_list|)
expr_stmt|;
name|result
operator|.
name|insert
argument_list|(
name|QByteArray
argument_list|(
literal|"QStatusBar"
argument_list|)
argument_list|,
name|statusFont
argument_list|)
expr_stmt|;
name|result
operator|.
name|insert
argument_list|(
name|QByteArray
argument_list|(
literal|"Q3TitleBar"
argument_list|)
argument_list|,
name|titleFont
argument_list|)
expr_stmt|;
name|result
operator|.
name|insert
argument_list|(
name|QByteArray
argument_list|(
literal|"QWorkspaceTitleBar"
argument_list|)
argument_list|,
name|titleFont
argument_list|)
expr_stmt|;
name|result
operator|.
name|insert
argument_list|(
name|QByteArray
argument_list|(
literal|"QAbstractItemView"
argument_list|)
argument_list|,
name|iconTitleFont
argument_list|)
expr_stmt|;
name|result
operator|.
name|insert
argument_list|(
name|QByteArray
argument_list|(
literal|"QDockWidgetTitle"
argument_list|)
argument_list|,
name|iconTitleFont
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseFonts
condition|)
block|{
typedef|typedef
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|QFont
argument_list|>
operator|::
name|const_iterator
name|CIT
typedef|;
name|QDebug
name|nsp
init|=
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
decl_stmt|;
name|nsp
operator|<<
name|__FUNCTION__
operator|<<
literal|" DPI="
operator|<<
name|verticalRes
operator|<<
literal|"\n"
expr_stmt|;
specifier|const
name|CIT
name|cend
init|=
name|result
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|CIT
name|it
init|=
name|result
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
name|nsp
operator|<<
name|it
operator|.
name|key
argument_list|()
operator|<<
literal|' '
operator|<<
name|it
operator|.
name|value
argument_list|()
operator|<<
literal|'\n'
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|LOGFONT_to_QFont
name|QFont
name|QWindowsFontDatabase
operator|::
name|LOGFONT_to_QFont
parameter_list|(
specifier|const
name|LOGFONT
modifier|&
name|logFont
parameter_list|,
name|int
name|verticalDPI_In
parameter_list|)
block|{
if|if
condition|(
name|verticalDPI_In
operator|<=
literal|0
condition|)
name|verticalDPI_In
operator|=
name|verticalDPI
argument_list|()
expr_stmt|;
name|QFont
name|qFont
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|logFont
operator|.
name|lfFaceName
argument_list|)
argument_list|)
decl_stmt|;
name|qFont
operator|.
name|setItalic
argument_list|(
name|logFont
operator|.
name|lfItalic
argument_list|)
expr_stmt|;
if|if
condition|(
name|logFont
operator|.
name|lfWeight
operator|!=
name|FW_DONTCARE
condition|)
name|qFont
operator|.
name|setWeight
argument_list|(
name|weightFromInteger
argument_list|(
name|logFont
operator|.
name|lfWeight
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|logFontHeight
init|=
name|qAbs
argument_list|(
name|logFont
operator|.
name|lfHeight
argument_list|)
decl_stmt|;
name|qFont
operator|.
name|setPointSizeF
argument_list|(
name|logFontHeight
operator|*
literal|72.0
operator|/
name|qreal
argument_list|(
name|verticalDPI_In
argument_list|)
argument_list|)
expr_stmt|;
name|qFont
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qFont
operator|.
name|setOverline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qFont
operator|.
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|qFont
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
