begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsfontdatabase_ft.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|<ft2build.h>
end_include
begin_include
include|#
directive|include
include|FT_TRUETYPE_TABLES_H
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDirIterator>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSettings>
end_include
begin_include
include|#
directive|include
file|<QtCore/QRegularExpression>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qfontengine_ft_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QFontDatabase>
end_include
begin_include
include|#
directive|include
file|<wchar.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtEndian>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|writingSystemFromCharSet
specifier|static
specifier|inline
name|QFontDatabase
operator|::
name|WritingSystem
name|writingSystemFromCharSet
parameter_list|(
name|uchar
name|charSet
parameter_list|)
block|{
switch|switch
condition|(
name|charSet
condition|)
block|{
case|case
name|ANSI_CHARSET
case|:
case|case
name|EASTEUROPE_CHARSET
case|:
case|case
name|BALTIC_CHARSET
case|:
case|case
name|TURKISH_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Latin
return|;
case|case
name|GREEK_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Greek
return|;
case|case
name|RUSSIAN_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Cyrillic
return|;
case|case
name|HEBREW_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Hebrew
return|;
case|case
name|ARABIC_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Arabic
return|;
case|case
name|THAI_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Thai
return|;
case|case
name|GB2312_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|SimplifiedChinese
return|;
case|case
name|CHINESEBIG5_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|TraditionalChinese
return|;
case|case
name|SHIFTJIS_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Japanese
return|;
case|case
name|HANGUL_CHARSET
case|:
case|case
name|JOHAB_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Korean
return|;
case|case
name|VIETNAMESE_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Vietnamese
return|;
case|case
name|SYMBOL_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Symbol
return|;
default|default:
break|break;
block|}
return|return
name|QFontDatabase
operator|::
name|Any
return|;
block|}
end_function
begin_function
DECL|function|createFontFile
specifier|static
name|FontFile
modifier|*
name|createFontFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|FontFile
modifier|*
name|fontFile
init|=
operator|new
name|FontFile
decl_stmt|;
name|fontFile
operator|->
name|fileName
operator|=
name|fileName
expr_stmt|;
name|fontFile
operator|->
name|indexValue
operator|=
name|index
expr_stmt|;
return|return
name|fontFile
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|bool
name|localizedName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|QString
name|getEnglishName
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_namespace
namespace|namespace
block|{
DECL|struct|FontKey
struct|struct
name|FontKey
block|{
DECL|member|fileName
name|QString
name|fileName
decl_stmt|;
DECL|member|fontNames
name|QStringList
name|fontNames
decl_stmt|;
block|}
struct|;
block|}
end_namespace
begin_comment
comment|// namespace
end_comment
begin_typedef
DECL|typedef|FontKeys
typedef|typedef
name|QVector
argument_list|<
name|FontKey
argument_list|>
name|FontKeys
typedef|;
end_typedef
begin_function
DECL|function|fontKeys
specifier|static
name|FontKeys
modifier|&
name|fontKeys
parameter_list|()
block|{
specifier|static
name|FontKeys
name|result
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QSettings
name|fontRegistry
argument_list|(
name|QStringLiteral
argument_list|(
literal|"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|allKeys
init|=
name|fontRegistry
operator|.
name|allKeys
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|trueType
init|=
name|QStringLiteral
argument_list|(
literal|"(TrueType)"
argument_list|)
decl_stmt|;
specifier|const
name|QRegularExpression
name|sizeListMatch
argument_list|(
name|QStringLiteral
argument_list|(
literal|"\\s(\\d+,)+\\d+"
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|sizeListMatch
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|size
init|=
name|allKeys
operator|.
name|size
argument_list|()
decl_stmt|;
name|result
operator|.
name|reserve
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|FontKey
name|fontKey
decl_stmt|;
specifier|const
name|QString
modifier|&
name|registryFontKey
init|=
name|allKeys
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|fontKey
operator|.
name|fileName
operator|=
name|fontRegistry
operator|.
name|value
argument_list|(
name|registryFontKey
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|QString
name|realKey
init|=
name|registryFontKey
decl_stmt|;
name|realKey
operator|.
name|remove
argument_list|(
name|trueType
argument_list|)
expr_stmt|;
name|realKey
operator|.
name|remove
argument_list|(
name|sizeListMatch
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|fontNames
init|=
name|realKey
operator|.
name|trimmed
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
argument_list|)
decl_stmt|;
name|fontKey
operator|.
name|fontNames
operator|.
name|reserve
argument_list|(
name|fontNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fontName
decl|,
name|fontNames
control|)
name|fontKey
operator|.
name|fontNames
operator|.
name|append
argument_list|(
name|fontName
operator|.
name|trimmed
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|fontKey
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|findFontKey
specifier|static
specifier|const
name|FontKey
modifier|*
name|findFontKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|int
modifier|*
name|indexIn
init|=
name|Q_NULLPTR
parameter_list|)
block|{
specifier|const
name|FontKeys
modifier|&
name|keys
init|=
name|fontKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|auto
name|it
init|=
name|keys
operator|.
name|constBegin
argument_list|()
init|,
name|cend
init|=
name|keys
operator|.
name|constEnd
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|int
name|index
init|=
name|it
operator|->
name|fontNames
operator|.
name|indexOf
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|indexIn
condition|)
operator|*
name|indexIn
operator|=
name|index
expr_stmt|;
return|return
operator|&
operator|(
operator|*
name|it
operator|)
return|;
block|}
block|}
if|if
condition|(
name|indexIn
condition|)
operator|*
name|indexIn
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// Q_OS_WINCE
end_comment
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|majorVersion
name|quint16
name|majorVersion
decl_stmt|;
DECL|member|minorVersion
name|quint16
name|minorVersion
decl_stmt|;
DECL|member|numTables
name|quint16
name|numTables
decl_stmt|;
DECL|member|searchRange
name|quint16
name|searchRange
decl_stmt|;
DECL|member|entrySelector
name|quint16
name|entrySelector
decl_stmt|;
DECL|member|rangeShift
name|quint16
name|rangeShift
decl_stmt|;
block|}
DECL|typedef|OFFSET_TABLE
name|OFFSET_TABLE
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|tag
name|quint32
name|tag
decl_stmt|;
DECL|member|checkSum
name|quint32
name|checkSum
decl_stmt|;
DECL|member|offset
name|quint32
name|offset
decl_stmt|;
DECL|member|length
name|quint32
name|length
decl_stmt|;
block|}
DECL|typedef|TABLE_DIRECTORY
name|TABLE_DIRECTORY
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|fontSelector
name|quint16
name|fontSelector
decl_stmt|;
DECL|member|nrCount
name|quint16
name|nrCount
decl_stmt|;
DECL|member|storageOffset
name|quint16
name|storageOffset
decl_stmt|;
block|}
DECL|typedef|NAME_TABLE_HEADER
name|NAME_TABLE_HEADER
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|platformID
name|quint16
name|platformID
decl_stmt|;
DECL|member|encodingID
name|quint16
name|encodingID
decl_stmt|;
DECL|member|languageID
name|quint16
name|languageID
decl_stmt|;
DECL|member|nameID
name|quint16
name|nameID
decl_stmt|;
DECL|member|stringLength
name|quint16
name|stringLength
decl_stmt|;
DECL|member|stringOffset
name|quint16
name|stringOffset
decl_stmt|;
block|}
DECL|typedef|NAME_RECORD
name|NAME_RECORD
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|tag
name|quint32
name|tag
decl_stmt|;
DECL|member|majorVersion
name|quint16
name|majorVersion
decl_stmt|;
DECL|member|minorVersion
name|quint16
name|minorVersion
decl_stmt|;
DECL|member|numFonts
name|quint32
name|numFonts
decl_stmt|;
block|}
DECL|typedef|TTC_TABLE_HEADER
name|TTC_TABLE_HEADER
typedef|;
end_typedef
begin_function
DECL|function|fontNameFromTTFile
specifier|static
name|QString
name|fontNameFromTTFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|int
name|startPos
init|=
literal|0
parameter_list|)
block|{
name|QFile
name|f
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QString
name|retVal
decl_stmt|;
name|qint64
name|bytesRead
decl_stmt|;
name|qint64
name|bytesToRead
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|f
operator|.
name|seek
argument_list|(
name|startPos
argument_list|)
expr_stmt|;
name|OFFSET_TABLE
name|ttOffsetTable
decl_stmt|;
name|bytesToRead
operator|=
sizeof|sizeof
argument_list|(
name|OFFSET_TABLE
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|f
operator|.
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|ttOffsetTable
argument_list|,
name|bytesToRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesToRead
operator|!=
name|bytesRead
condition|)
return|return
name|retVal
return|;
name|ttOffsetTable
operator|.
name|numTables
operator|=
name|qFromBigEndian
argument_list|(
name|ttOffsetTable
operator|.
name|numTables
argument_list|)
expr_stmt|;
name|ttOffsetTable
operator|.
name|majorVersion
operator|=
name|qFromBigEndian
argument_list|(
name|ttOffsetTable
operator|.
name|majorVersion
argument_list|)
expr_stmt|;
name|ttOffsetTable
operator|.
name|minorVersion
operator|=
name|qFromBigEndian
argument_list|(
name|ttOffsetTable
operator|.
name|minorVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|ttOffsetTable
operator|.
name|majorVersion
operator|!=
literal|1
operator|||
name|ttOffsetTable
operator|.
name|minorVersion
operator|!=
literal|0
condition|)
return|return
name|retVal
return|;
name|TABLE_DIRECTORY
name|tblDir
decl_stmt|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ttOffsetTable
operator|.
name|numTables
condition|;
name|i
operator|++
control|)
block|{
name|bytesToRead
operator|=
sizeof|sizeof
argument_list|(
name|TABLE_DIRECTORY
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|f
operator|.
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|tblDir
argument_list|,
name|bytesToRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesToRead
operator|!=
name|bytesRead
condition|)
return|return
name|retVal
return|;
if|if
condition|(
name|qFromBigEndian
argument_list|(
name|tblDir
operator|.
name|tag
argument_list|)
operator|==
name|MAKE_TAG
argument_list|(
literal|'n'
argument_list|,
literal|'a'
argument_list|,
literal|'m'
argument_list|,
literal|'e'
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|tblDir
operator|.
name|length
operator|=
name|qFromBigEndian
argument_list|(
name|tblDir
operator|.
name|length
argument_list|)
expr_stmt|;
name|tblDir
operator|.
name|offset
operator|=
name|qFromBigEndian
argument_list|(
name|tblDir
operator|.
name|offset
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|f
operator|.
name|seek
argument_list|(
name|tblDir
operator|.
name|offset
argument_list|)
expr_stmt|;
name|NAME_TABLE_HEADER
name|ttNTHeader
decl_stmt|;
name|bytesToRead
operator|=
sizeof|sizeof
argument_list|(
name|NAME_TABLE_HEADER
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|f
operator|.
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|ttNTHeader
argument_list|,
name|bytesToRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesToRead
operator|!=
name|bytesRead
condition|)
return|return
name|retVal
return|;
name|ttNTHeader
operator|.
name|nrCount
operator|=
name|qFromBigEndian
argument_list|(
name|ttNTHeader
operator|.
name|nrCount
argument_list|)
expr_stmt|;
name|ttNTHeader
operator|.
name|storageOffset
operator|=
name|qFromBigEndian
argument_list|(
name|ttNTHeader
operator|.
name|storageOffset
argument_list|)
expr_stmt|;
name|NAME_RECORD
name|ttRecord
decl_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ttNTHeader
operator|.
name|nrCount
condition|;
name|i
operator|++
control|)
block|{
name|bytesToRead
operator|=
sizeof|sizeof
argument_list|(
name|NAME_RECORD
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|f
operator|.
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|ttRecord
argument_list|,
name|bytesToRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesToRead
operator|!=
name|bytesRead
condition|)
return|return
name|retVal
return|;
name|ttRecord
operator|.
name|nameID
operator|=
name|qFromBigEndian
argument_list|(
name|ttRecord
operator|.
name|nameID
argument_list|)
expr_stmt|;
if|if
condition|(
name|ttRecord
operator|.
name|nameID
operator|==
literal|1
condition|)
block|{
name|ttRecord
operator|.
name|stringLength
operator|=
name|qFromBigEndian
argument_list|(
name|ttRecord
operator|.
name|stringLength
argument_list|)
expr_stmt|;
name|ttRecord
operator|.
name|stringOffset
operator|=
name|qFromBigEndian
argument_list|(
name|ttRecord
operator|.
name|stringOffset
argument_list|)
expr_stmt|;
name|int
name|nPos
init|=
name|f
operator|.
name|pos
argument_list|()
decl_stmt|;
name|f
operator|.
name|seek
argument_list|(
name|tblDir
operator|.
name|offset
operator|+
name|ttRecord
operator|.
name|stringOffset
operator|+
name|ttNTHeader
operator|.
name|storageOffset
argument_list|)
expr_stmt|;
name|QByteArray
name|nameByteArray
init|=
name|f
operator|.
name|read
argument_list|(
name|ttRecord
operator|.
name|stringLength
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nameByteArray
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|ttRecord
operator|.
name|encodingID
operator|==
literal|256
operator|||
name|ttRecord
operator|.
name|encodingID
operator|==
literal|768
condition|)
block|{
comment|//This is UTF-16 in big endian
name|int
name|stringLength
init|=
name|ttRecord
operator|.
name|stringLength
operator|/
literal|2
decl_stmt|;
name|retVal
operator|.
name|resize
argument_list|(
name|stringLength
argument_list|)
expr_stmt|;
name|QChar
modifier|*
name|data
init|=
name|retVal
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|ushort
modifier|*
name|srcData
init|=
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|nameByteArray
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stringLength
condition|;
operator|++
name|i
control|)
name|data
index|[
name|i
index|]
operator|=
name|qFromBigEndian
argument_list|(
name|srcData
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
elseif|else
if|if
condition|(
name|ttRecord
operator|.
name|encodingID
operator|==
literal|0
condition|)
block|{
comment|//This is Latin1
name|retVal
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|nameByteArray
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Could not retrieve Font name from file: %s"
argument_list|,
name|qPrintable
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|filename
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|f
operator|.
name|seek
argument_list|(
name|nPos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
end_function
begin_function
DECL|function|fontNamesFromTTCFile
specifier|static
name|QStringList
name|fontNamesFromTTCFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
name|QFile
name|f
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QStringList
name|retVal
decl_stmt|;
name|qint64
name|bytesRead
decl_stmt|;
name|qint64
name|bytesToRead
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|TTC_TABLE_HEADER
name|ttcTableHeader
decl_stmt|;
name|bytesToRead
operator|=
sizeof|sizeof
argument_list|(
name|TTC_TABLE_HEADER
argument_list|)
expr_stmt|;
name|bytesRead
operator|=
name|f
operator|.
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|ttcTableHeader
argument_list|,
name|bytesToRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesToRead
operator|!=
name|bytesRead
condition|)
return|return
name|retVal
return|;
name|ttcTableHeader
operator|.
name|majorVersion
operator|=
name|qFromBigEndian
argument_list|(
name|ttcTableHeader
operator|.
name|majorVersion
argument_list|)
expr_stmt|;
name|ttcTableHeader
operator|.
name|minorVersion
operator|=
name|qFromBigEndian
argument_list|(
name|ttcTableHeader
operator|.
name|minorVersion
argument_list|)
expr_stmt|;
name|ttcTableHeader
operator|.
name|numFonts
operator|=
name|qFromBigEndian
argument_list|(
name|ttcTableHeader
operator|.
name|numFonts
argument_list|)
expr_stmt|;
if|if
condition|(
name|ttcTableHeader
operator|.
name|majorVersion
argument_list|<
literal|1
operator|||
name|ttcTableHeader
operator|.
name|majorVersion
argument_list|>
literal|2
condition|)
return|return
name|retVal
return|;
name|QVarLengthArray
argument_list|<
name|quint32
argument_list|>
name|offsetTable
argument_list|(
name|ttcTableHeader
operator|.
name|numFonts
argument_list|)
decl_stmt|;
name|bytesToRead
operator|=
sizeof|sizeof
argument_list|(
name|quint32
argument_list|)
operator|*
name|ttcTableHeader
operator|.
name|numFonts
expr_stmt|;
name|bytesRead
operator|=
name|f
operator|.
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|offsetTable
operator|.
name|data
argument_list|()
argument_list|,
name|bytesToRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesToRead
operator|!=
name|bytesRead
condition|)
return|return
name|retVal
return|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|ttcTableHeader
operator|.
name|numFonts
condition|;
operator|++
name|i
control|)
name|retVal
operator|<<
name|fontNameFromTTFile
argument_list|(
name|filename
argument_list|,
name|qFromBigEndian
argument_list|(
name|offsetTable
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
end_function
begin_function
DECL|function|fontSettingsOrganization
specifier|static
specifier|inline
name|QString
name|fontSettingsOrganization
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"Qt-Project"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fontSettingsApplication
specifier|static
specifier|inline
name|QString
name|fontSettingsApplication
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"Qtbase"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fontSettingsGroup
specifier|static
specifier|inline
name|QString
name|fontSettingsGroup
parameter_list|()
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"CEFontCache"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|findFontFile
specifier|static
name|QString
name|findFontFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|faceName
parameter_list|)
block|{
specifier|static
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|fontCache
decl_stmt|;
if|if
condition|(
name|fontCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
name|fontSettingsOrganization
argument_list|()
argument_list|,
name|fontSettingsApplication
argument_list|()
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|fontSettingsGroup
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fontName
decl|,
name|settings
operator|.
name|allKeys
argument_list|()
control|)
name|fontCache
operator|.
name|insert
argument_list|(
name|fontName
argument_list|,
name|settings
operator|.
name|value
argument_list|(
name|fontName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
name|QString
name|value
init|=
name|fontCache
operator|.
name|value
argument_list|(
name|faceName
argument_list|)
decl_stmt|;
comment|//Fallback if we haven't cached the font yet or the font got removed/renamed iterate again over all fonts
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
name|fontSettingsOrganization
argument_list|()
argument_list|,
name|fontSettingsApplication
argument_list|()
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|fontSettingsGroup
argument_list|()
argument_list|)
expr_stmt|;
comment|//empty the cache first, as it seems that it is dirty
name|settings
operator|.
name|remove
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QDirIterator
name|it
argument_list|(
name|QStringLiteral
argument_list|(
literal|"/Windows"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"*.ttf"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"*.ttc"
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|System
argument_list|)
decl_stmt|;
specifier|const
name|QLatin1Char
name|lowerF
argument_list|(
literal|'f'
argument_list|)
decl_stmt|;
specifier|const
name|QLatin1Char
name|upperF
argument_list|(
literal|'F'
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|fontFile
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|QStringList
name|fontNames
decl_stmt|;
specifier|const
name|QChar
name|c
init|=
name|fontFile
index|[
name|fontFile
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|lowerF
operator|||
name|c
operator|==
name|upperF
condition|)
name|fontNames
operator|<<
name|fontNameFromTTFile
argument_list|(
name|fontFile
argument_list|)
expr_stmt|;
else|else
name|fontNames
operator|<<
name|fontNamesFromTTCFile
argument_list|(
name|fontFile
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
name|fontName
decl|,
name|fontNames
control|)
block|{
if|if
condition|(
name|fontName
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|fontCache
operator|.
name|insert
argument_list|(
name|fontName
argument_list|,
name|fontFile
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
name|fontName
argument_list|,
name|fontFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|localizedName
argument_list|(
name|fontName
argument_list|)
condition|)
block|{
name|QString
name|englishFontName
init|=
name|getEnglishName
argument_list|(
name|fontName
argument_list|)
decl_stmt|;
name|fontCache
operator|.
name|insert
argument_list|(
name|englishFontName
argument_list|,
name|fontFile
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
name|englishFontName
argument_list|,
name|fontFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|value
operator|=
name|fontCache
operator|.
name|value
argument_list|(
name|faceName
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WINCE
end_comment
begin_function
DECL|function|addFontToDatabase
specifier|static
name|bool
name|addFontToDatabase
parameter_list|(
specifier|const
name|QString
modifier|&
name|faceName
parameter_list|,
specifier|const
name|QString
modifier|&
name|fullName
parameter_list|,
name|uchar
name|charSet
parameter_list|,
specifier|const
name|TEXTMETRIC
modifier|*
name|textmetric
parameter_list|,
specifier|const
name|FONTSIGNATURE
modifier|*
name|signature
parameter_list|,
name|int
name|type
parameter_list|,
name|bool
name|registerAlias
parameter_list|)
block|{
comment|// the "@family" fonts are just the same as "family". Ignore them.
if|if
condition|(
name|faceName
operator|.
name|isEmpty
argument_list|()
operator|||
name|faceName
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'@'
argument_list|)
operator|||
name|faceName
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"WST_"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|static
specifier|const
name|int
name|SMOOTH_SCALABLE
init|=
literal|0xffff
decl_stmt|;
specifier|const
name|QString
name|foundryName
decl_stmt|;
comment|// No such concept.
specifier|const
name|bool
name|fixed
init|=
operator|!
operator|(
name|textmetric
operator|->
name|tmPitchAndFamily
operator|&
name|TMPF_FIXED_PITCH
operator|)
decl_stmt|;
specifier|const
name|bool
name|ttf
init|=
operator|(
name|textmetric
operator|->
name|tmPitchAndFamily
operator|&
name|TMPF_TRUETYPE
operator|)
decl_stmt|;
specifier|const
name|bool
name|scalable
init|=
name|textmetric
operator|->
name|tmPitchAndFamily
operator|&
operator|(
name|TMPF_VECTOR
operator||
name|TMPF_TRUETYPE
operator|)
decl_stmt|;
specifier|const
name|int
name|size
init|=
name|scalable
condition|?
name|SMOOTH_SCALABLE
else|:
name|textmetric
operator|->
name|tmHeight
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Style
name|style
init|=
name|textmetric
operator|->
name|tmItalic
condition|?
name|QFont
operator|::
name|StyleItalic
else|:
name|QFont
operator|::
name|StyleNormal
decl_stmt|;
specifier|const
name|bool
name|antialias
init|=
literal|false
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Weight
name|weight
init|=
name|QPlatformFontDatabase
operator|::
name|weightFromInteger
argument_list|(
name|textmetric
operator|->
name|tmWeight
argument_list|)
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Stretch
name|stretch
init|=
name|QFont
operator|::
name|Unstretched
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|2
condition|)
block|{
name|QString
name|message
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|message
argument_list|)
decl_stmt|;
name|str
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|faceName
operator|<<
literal|"::"
operator|<<
name|fullName
operator|<<
literal|' '
operator|<<
name|charSet
operator|<<
literal|" TTF="
operator|<<
name|ttf
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|DEVICE_FONTTYPE
condition|)
name|str
operator|<<
literal|" DEVICE"
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|RASTER_FONTTYPE
condition|)
name|str
operator|<<
literal|" RASTER"
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
name|str
operator|<<
literal|" TRUETYPE"
expr_stmt|;
name|str
operator|<<
literal|" scalable="
operator|<<
name|scalable
operator|<<
literal|" Size="
operator|<<
name|size
operator|<<
literal|" Style="
operator|<<
name|style
operator|<<
literal|" Weight="
operator|<<
name|weight
operator|<<
literal|" stretch="
operator|<<
name|stretch
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|message
expr_stmt|;
block|}
endif|#
directive|endif
name|QString
name|englishName
decl_stmt|;
if|if
condition|(
name|registerAlias
operator|&
name|ttf
operator|&&
name|localizedName
argument_list|(
name|faceName
argument_list|)
condition|)
name|englishName
operator|=
name|getEnglishName
argument_list|(
name|faceName
argument_list|)
expr_stmt|;
name|QSupportedWritingSystems
name|writingSystems
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|quint32
name|unicodeRange
index|[
literal|4
index|]
init|=
block|{
name|signature
operator|->
name|fsUsb
index|[
literal|0
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|1
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|2
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|3
index|]
block|}
decl_stmt|;
name|quint32
name|codePageRange
index|[
literal|2
index|]
init|=
block|{
name|signature
operator|->
name|fsCsb
index|[
literal|0
index|]
block|,
name|signature
operator|->
name|fsCsb
index|[
literal|1
index|]
block|}
decl_stmt|;
name|writingSystems
operator|=
name|QPlatformFontDatabase
operator|::
name|writingSystemsFromTrueTypeBits
argument_list|(
name|unicodeRange
argument_list|,
name|codePageRange
argument_list|)
expr_stmt|;
comment|// ### Hack to work around problem with Thai text on Windows 7. Segoe UI contains
comment|// the symbol for Baht, and Windows thus reports that it supports the Thai script.
comment|// Since it's the default UI font on this platform, most widgets will be unable to
comment|// display Thai text by default. As a temporary work around, we special case Segoe UI
comment|// and remove the Thai script from its list of supported writing systems.
if|if
condition|(
name|writingSystems
operator|.
name|supported
argument_list|(
name|QFontDatabase
operator|::
name|Thai
argument_list|)
operator|&&
name|faceName
operator|==
name|QLatin1String
argument_list|(
literal|"Segoe UI"
argument_list|)
condition|)
name|writingSystems
operator|.
name|setSupported
argument_list|(
name|QFontDatabase
operator|::
name|Thai
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QFontDatabase
operator|::
name|WritingSystem
name|ws
init|=
name|writingSystemFromCharSet
argument_list|(
name|charSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|ws
operator|!=
name|QFontDatabase
operator|::
name|Any
condition|)
name|writingSystems
operator|.
name|setSupported
argument_list|(
name|ws
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
specifier|const
name|FontKey
modifier|*
name|key
init|=
name|findFontKey
argument_list|(
name|faceName
argument_list|,
operator|&
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
condition|)
block|{
name|key
operator|=
name|findFontKey
argument_list|(
name|fullName
argument_list|,
operator|&
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|key
operator|&&
operator|!
name|registerAlias
operator|&&
name|englishName
operator|.
name|isEmpty
argument_list|()
operator|&&
name|localizedName
argument_list|(
name|faceName
argument_list|)
condition|)
name|englishName
operator|=
name|getEnglishName
argument_list|(
name|faceName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|key
operator|&&
operator|!
name|englishName
operator|.
name|isEmpty
argument_list|()
condition|)
name|key
operator|=
name|findFontKey
argument_list|(
name|englishName
argument_list|,
operator|&
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|key
condition|)
return|return
literal|false
return|;
block|}
name|QString
name|value
init|=
name|key
operator|->
name|fileName
decl_stmt|;
else|#
directive|else
name|QString
name|value
init|=
name|findFontFile
argument_list|(
name|faceName
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|QDir
operator|::
name|isAbsolutePath
argument_list|(
name|value
argument_list|)
condition|)
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|value
operator|.
name|prepend
argument_list|(
name|QFile
operator|::
name|decodeName
argument_list|(
name|qgetenv
argument_list|(
literal|"windir"
argument_list|)
operator|+
literal|"\\Fonts\\"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|value
operator|.
name|prepend
argument_list|(
name|QFile
operator|::
name|decodeName
argument_list|(
literal|"/Windows/"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|faceName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|weight
argument_list|,
name|style
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
name|createFontFile
argument_list|(
name|value
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
comment|// add fonts windows can generate for us:
if|if
condition|(
name|weight
operator|<=
name|QFont
operator|::
name|DemiBold
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|faceName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
name|style
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
name|createFontFile
argument_list|(
name|value
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|!=
name|QFont
operator|::
name|StyleItalic
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|faceName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|weight
argument_list|,
name|QFont
operator|::
name|StyleItalic
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
name|createFontFile
argument_list|(
name|value
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|weight
operator|<=
name|QFont
operator|::
name|DemiBold
operator|&&
name|style
operator|!=
name|QFont
operator|::
name|StyleItalic
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|faceName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
name|QFont
operator|::
name|StyleItalic
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
name|createFontFile
argument_list|(
name|value
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|englishName
operator|.
name|isEmpty
argument_list|()
condition|)
name|QPlatformFontDatabase
operator|::
name|registerAliasToFontFamily
argument_list|(
name|faceName
argument_list|,
name|englishName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_function
DECL|function|getFntTable
specifier|static
name|QByteArray
name|getFntTable
parameter_list|(
name|HFONT
name|hfont
parameter_list|,
name|uint
name|tag
parameter_list|)
block|{
name|HDC
name|hdc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HGDIOBJ
name|oldFont
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
decl_stmt|;
name|quint32
name|t
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|QByteArray
name|buffer
decl_stmt|;
name|DWORD
name|length
init|=
name|GetFontData
argument_list|(
name|hdc
argument_list|,
name|t
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|!=
name|GDI_ERROR
condition|)
block|{
name|buffer
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|GetFontData
argument_list|(
name|hdc
argument_list|,
name|t
argument_list|,
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldFont
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|storeFont
specifier|static
name|int
name|QT_WIN_CALLBACK
name|storeFont
parameter_list|(
specifier|const
name|LOGFONT
modifier|*
name|logFont
parameter_list|,
specifier|const
name|TEXTMETRIC
modifier|*
name|textmetric
parameter_list|,
name|DWORD
name|type
parameter_list|,
name|LPARAM
parameter_list|)
block|{
specifier|const
name|ENUMLOGFONTEX
modifier|*
name|f
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ENUMLOGFONTEX
operator|*
argument_list|>
argument_list|(
name|logFont
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|faceName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfLogFont
operator|.
name|lfFaceName
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|fullName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfFullName
argument_list|)
decl_stmt|;
specifier|const
name|uchar
name|charSet
init|=
name|f
operator|->
name|elfLogFont
operator|.
name|lfCharSet
decl_stmt|;
comment|// NEWTEXTMETRICEX (passed for TT fonts) is a NEWTEXTMETRIC, which according
comment|// to the documentation is identical to a TEXTMETRIC except for the last four
comment|// members, which we don't use anyway
specifier|const
name|FONTSIGNATURE
modifier|*
name|signature
init|=
name|Q_NULLPTR
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
name|signature
operator|=
operator|&
cast|reinterpret_cast
argument_list|<
specifier|const
name|NEWTEXTMETRICEX
operator|*
argument_list|>
argument_list|(
name|textmetric
argument_list|)
operator|->
name|ntmFontSig
expr_stmt|;
name|addFontToDatabase
argument_list|(
name|faceName
argument_list|,
name|fullName
argument_list|,
name|charSet
argument_list|,
name|textmetric
argument_list|,
name|signature
argument_list|,
name|type
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// keep on enumerating
return|return
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Populate font database using EnumFontFamiliesEx().      Normally, leaving the name empty should enumerate     all fonts, however, system fonts like "MS Shell Dlg 2"     are only found when specifying the name explicitly. */
end_comment
begin_function
DECL|function|populateFamily
name|void
name|QWindowsFontDatabaseFT
operator|::
name|populateFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|familyName
expr_stmt|;
if|if
condition|(
name|familyName
operator|.
name|size
argument_list|()
operator|>=
name|LF_FACESIZE
condition|)
block|{
name|qCWarning
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
literal|"Unable to enumerate family '"
operator|<<
name|familyName
operator|<<
literal|'\''
expr_stmt|;
return|return;
block|}
name|HDC
name|dummy
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|familyName
operator|.
name|toWCharArray
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfFaceName
index|[
name|familyName
operator|.
name|size
argument_list|()
index|]
operator|=
literal|0
expr_stmt|;
name|lf
operator|.
name|lfPitchAndFamily
operator|=
literal|0
expr_stmt|;
name|EnumFontFamiliesEx
argument_list|(
name|dummy
argument_list|,
operator|&
name|lf
argument_list|,
name|storeFont
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
comment|// Context for enumerating system fonts, records whether the default font has been
comment|// encountered, which is normally not enumerated.
DECL|struct|PopulateFamiliesContext
struct|struct
name|PopulateFamiliesContext
block|{
DECL|function|PopulateFamiliesContext
name|PopulateFamiliesContext
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|)
member_init_list|:
name|systemDefaultFont
argument_list|(
name|f
argument_list|)
member_init_list|,
name|seenSystemDefaultFont
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|systemDefaultFont
name|QString
name|systemDefaultFont
decl_stmt|;
DECL|member|seenSystemDefaultFont
name|bool
name|seenSystemDefaultFont
decl_stmt|;
block|}
struct|;
block|}
end_namespace
begin_comment
comment|// namespace
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Delayed population of font families
end_comment
begin_function
DECL|function|populateFontFamilies
specifier|static
name|int
name|QT_WIN_CALLBACK
name|populateFontFamilies
parameter_list|(
specifier|const
name|LOGFONT
modifier|*
name|logFont
parameter_list|,
specifier|const
name|TEXTMETRIC
modifier|*
name|textmetric
parameter_list|,
name|DWORD
parameter_list|,
name|LPARAM
name|lparam
parameter_list|)
block|{
specifier|const
name|ENUMLOGFONTEX
modifier|*
name|f
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ENUMLOGFONTEX
operator|*
argument_list|>
argument_list|(
name|logFont
argument_list|)
decl_stmt|;
comment|// the "@family" fonts are just the same as "family". Ignore them.
specifier|const
name|wchar_t
modifier|*
name|faceNameW
init|=
name|f
operator|->
name|elfLogFont
operator|.
name|lfFaceName
decl_stmt|;
if|if
condition|(
name|faceNameW
index|[
literal|0
index|]
operator|&&
name|faceNameW
index|[
literal|0
index|]
operator|!=
literal|L'
expr|@'
operator|&&
name|wcsncmp
argument_list|(
name|faceNameW
argument_list|,
literal|L"WST_"
argument_list|,
literal|4
argument_list|)
condition|)
block|{
comment|// Register only font families for which a font file exists for delayed population
specifier|const
name|bool
name|ttf
init|=
name|textmetric
operator|->
name|tmPitchAndFamily
operator|&
name|TMPF_TRUETYPE
decl_stmt|;
specifier|const
name|QString
name|faceName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|faceNameW
argument_list|)
decl_stmt|;
specifier|const
name|FontKey
modifier|*
name|key
init|=
name|findFontKey
argument_list|(
name|faceName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
condition|)
block|{
name|key
operator|=
name|findFontKey
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfFullName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|key
operator|&&
name|ttf
operator|&&
name|localizedName
argument_list|(
name|faceName
argument_list|)
condition|)
name|key
operator|=
name|findFontKey
argument_list|(
name|getEnglishName
argument_list|(
name|faceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
condition|)
block|{
name|QPlatformFontDatabase
operator|::
name|registerFontFamily
argument_list|(
name|faceName
argument_list|)
expr_stmt|;
name|PopulateFamiliesContext
modifier|*
name|context
init|=
cast|reinterpret_cast
argument_list|<
name|PopulateFamiliesContext
operator|*
argument_list|>
argument_list|(
name|lparam
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|seenSystemDefaultFont
operator|&&
name|faceName
operator|==
name|context
operator|->
name|systemDefaultFont
condition|)
name|context
operator|->
name|seenSystemDefaultFont
operator|=
literal|true
expr_stmt|;
comment|// Register current font's english name as alias
if|if
condition|(
name|ttf
operator|&&
name|localizedName
argument_list|(
name|faceName
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|englishName
init|=
name|getEnglishName
argument_list|(
name|faceName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|englishName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QPlatformFontDatabase
operator|::
name|registerAliasToFontFamily
argument_list|(
name|faceName
argument_list|,
name|englishName
argument_list|)
expr_stmt|;
comment|// Check whether the system default font name is an alias of the current font family name,
comment|// as on Chinese Windows, where the system font "SimSun" is an alias to a font registered under a local name
if|if
condition|(
operator|!
name|context
operator|->
name|seenSystemDefaultFont
operator|&&
name|englishName
operator|==
name|context
operator|->
name|systemDefaultFont
condition|)
name|context
operator|->
name|seenSystemDefaultFont
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|1
return|;
comment|// continue
block|}
end_function
begin_function
DECL|function|populateFontDatabase
name|void
name|QWindowsFontDatabaseFT
operator|::
name|populateFontDatabase
parameter_list|()
block|{
name|HDC
name|dummy
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|lf
operator|.
name|lfFaceName
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|lf
operator|.
name|lfPitchAndFamily
operator|=
literal|0
expr_stmt|;
name|PopulateFamiliesContext
name|context
argument_list|(
name|QWindowsFontDatabase
operator|::
name|systemDefaultFont
argument_list|()
operator|.
name|family
argument_list|()
argument_list|)
decl_stmt|;
name|EnumFontFamiliesEx
argument_list|(
name|dummy
argument_list|,
operator|&
name|lf
argument_list|,
name|populateFontFamilies
argument_list|,
cast|reinterpret_cast
argument_list|<
name|LPARAM
argument_list|>
argument_list|(
operator|&
name|context
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// Work around EnumFontFamiliesEx() not listing the system font
if|if
condition|(
operator|!
name|context
operator|.
name|seenSystemDefaultFont
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFontFamily
argument_list|(
name|context
operator|.
name|systemDefaultFont
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !Q_OS_WINCE
end_comment
begin_comment
comment|// Non-delayed population of fonts (Windows CE).
end_comment
begin_function
specifier|static
name|int
name|QT_WIN_CALLBACK
name|populateFontCe
parameter_list|(
name|ENUMLOGFONTEX
modifier|*
name|f
parameter_list|,
name|NEWTEXTMETRICEX
modifier|*
name|textmetric
parameter_list|,
name|int
name|type
parameter_list|,
name|LPARAM
name|lparam
parameter_list|)
block|{
comment|// the "@family" fonts are just the same as "family". Ignore them.
specifier|const
name|wchar_t
modifier|*
name|faceNameW
init|=
name|f
operator|->
name|elfLogFont
operator|.
name|lfFaceName
decl_stmt|;
if|if
condition|(
name|faceNameW
index|[
literal|0
index|]
operator|&&
name|faceNameW
index|[
literal|0
index|]
operator|!=
literal|L'
expr|@'
operator|&&
name|wcsncmp
argument_list|(
name|faceNameW
argument_list|,
literal|L"WST_"
argument_list|,
literal|4
argument_list|)
condition|)
block|{
specifier|const
name|uchar
name|charSet
init|=
name|f
operator|->
name|elfLogFont
operator|.
name|lfCharSet
decl_stmt|;
name|FONTSIGNATURE
name|signature
decl_stmt|;
name|QByteArray
name|table
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
block|{
name|HFONT
name|hfont
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|f
operator|->
name|elfLogFont
argument_list|)
decl_stmt|;
name|table
operator|=
name|getFntTable
argument_list|(
name|hfont
argument_list|,
name|MAKE_TAG
argument_list|(
literal|'O'
argument_list|,
literal|'S'
argument_list|,
literal|'/'
argument_list|,
literal|'2'
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
operator|(
name|HGDIOBJ
operator|)
name|hfont
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|length
argument_list|()
operator|>=
literal|86
condition|)
block|{
comment|// See also qfontdatabase_mac.cpp, offsets taken from OS/2 table in the TrueType spec
name|uchar
modifier|*
name|tableData
init|=
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|table
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|0
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|42
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|1
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|46
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|2
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|50
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|3
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|54
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsCsb
index|[
literal|0
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|78
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsCsb
index|[
literal|1
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|82
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|memset
argument_list|(
operator|&
name|signature
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|signature
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// NEWTEXTMETRICEX is a NEWTEXTMETRIC, which according to the documentation is
comment|// identical to a TEXTMETRIC except for the last four members, which we don't use
comment|// anyway
specifier|const
name|QString
name|faceName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfLogFont
operator|.
name|lfFaceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|addFontToDatabase
argument_list|(
name|faceName
argument_list|,
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfFullName
argument_list|)
argument_list|,
name|charSet
argument_list|,
operator|(
name|TEXTMETRIC
operator|*
operator|)
name|textmetric
argument_list|,
operator|&
name|signature
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|PopulateFamiliesContext
modifier|*
name|context
init|=
cast|reinterpret_cast
argument_list|<
name|PopulateFamiliesContext
operator|*
argument_list|>
argument_list|(
name|lparam
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|seenSystemDefaultFont
operator|&&
name|faceName
operator|==
name|context
operator|->
name|systemDefaultFont
condition|)
name|context
operator|->
name|seenSystemDefaultFont
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// keep on enumerating
return|return
literal|1
return|;
block|}
end_function
begin_function
name|void
name|QWindowsFontDatabaseFT
operator|::
name|populateFontDatabase
parameter_list|()
block|{
name|LOGFONT
name|lf
decl_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
name|HDC
name|dummy
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|lf
operator|.
name|lfFaceName
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|lf
operator|.
name|lfPitchAndFamily
operator|=
literal|0
expr_stmt|;
name|PopulateFamiliesContext
name|context
argument_list|(
name|QWindowsFontDatabase
operator|::
name|systemDefaultFont
argument_list|()
operator|.
name|family
argument_list|()
argument_list|)
decl_stmt|;
name|EnumFontFamiliesEx
argument_list|(
name|dummy
argument_list|,
operator|&
name|lf
argument_list|,
operator|(
name|FONTENUMPROC
operator|)
name|populateFontCe
argument_list|,
cast|reinterpret_cast
argument_list|<
name|LPARAM
argument_list|>
argument_list|(
operator|&
name|context
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
comment|// Work around EnumFontFamiliesEx() not listing the system font, see below.
if|if
condition|(
operator|!
name|context
operator|.
name|seenSystemDefaultFont
condition|)
name|populateFamily
argument_list|(
name|context
operator|.
name|systemDefaultFont
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WINCE
end_comment
begin_function
DECL|function|fontEngine
name|QFontEngine
modifier|*
name|QWindowsFontDatabaseFT
operator|::
name|fontEngine
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|fontDef
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|QBasicFontDatabase
operator|::
name|fontEngine
argument_list|(
name|fontDef
argument_list|,
name|handle
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"FONTDEF"
operator|<<
name|fontDef
operator|.
name|family
operator|<<
name|fe
operator|<<
name|handle
expr_stmt|;
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|fontEngine
name|QFontEngine
modifier|*
name|QWindowsFontDatabaseFT
operator|::
name|fontEngine
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|,
name|qreal
name|pixelSize
parameter_list|,
name|QFont
operator|::
name|HintingPreference
name|hintingPreference
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|QBasicFontDatabase
operator|::
name|fontEngine
argument_list|(
name|fontData
argument_list|,
name|pixelSize
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"FONTDATA"
operator|<<
name|fontData
operator|<<
name|pixelSize
operator|<<
name|hintingPreference
operator|<<
name|fe
expr_stmt|;
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|fallbacksForFamily
name|QStringList
name|QWindowsFontDatabaseFT
operator|::
name|fallbacksForFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
name|QFont
operator|::
name|Style
name|style
parameter_list|,
name|QFont
operator|::
name|StyleHint
name|styleHint
parameter_list|,
name|QChar
operator|::
name|Script
name|script
parameter_list|)
specifier|const
block|{
name|QStringList
name|result
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|QWindowsFontDatabase
operator|::
name|familyForStyleHint
argument_list|(
name|styleHint
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSettings
name|settings
argument_list|(
name|QLatin1String
argument_list|(
literal|"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\FontLink\\SystemLink"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|fontList
init|=
name|settings
operator|.
name|value
argument_list|(
name|family
argument_list|)
operator|.
name|toStringList
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fallback
decl|,
name|fontList
control|)
block|{
specifier|const
name|int
name|sep
init|=
name|fallback
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sep
operator|>
literal|0
condition|)
name|result
operator|<<
name|fallback
operator|.
name|mid
argument_list|(
name|sep
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|result
operator|.
name|append
argument_list|(
name|QWindowsFontDatabase
operator|::
name|extraTryFontsForFamily
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|QBasicFontDatabase
operator|::
name|fallbacksForFamily
argument_list|(
name|family
argument_list|,
name|style
argument_list|,
name|styleHint
argument_list|,
name|script
argument_list|)
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|family
operator|<<
name|style
operator|<<
name|styleHint
operator|<<
name|script
operator|<<
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|fontDir
name|QString
name|QWindowsFontDatabaseFT
operator|::
name|fontDir
parameter_list|()
specifier|const
block|{
specifier|const
name|QString
name|result
init|=
name|QLatin1String
argument_list|(
name|qgetenv
argument_list|(
literal|"windir"
argument_list|)
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"/Fonts"
argument_list|)
decl_stmt|;
comment|//QPlatformFontDatabase::fontDir();
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|defaultFont
name|QFont
name|QWindowsFontDatabaseFT
operator|::
name|defaultFont
parameter_list|()
specifier|const
block|{
return|return
name|QWindowsFontDatabase
operator|::
name|systemDefaultFont
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
