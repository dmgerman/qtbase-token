begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsfontdatabase_ft.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|<ft2build.h>
end_include
begin_include
include|#
directive|include
include|FT_TRUETYPE_TABLES_H
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDirIterator>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSettings>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qfontengine_ft_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QFontDatabase>
end_include
begin_include
include|#
directive|include
file|<wchar.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|<QtEndian>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
comment|// convert 0 ~ 1000 integer to QFont::Weight
DECL|function|weightFromInteger
specifier|static
specifier|inline
name|QFont
operator|::
name|Weight
name|weightFromInteger
parameter_list|(
name|long
name|weight
parameter_list|)
block|{
if|if
condition|(
name|weight
operator|<
literal|400
condition|)
return|return
name|QFont
operator|::
name|Light
return|;
if|if
condition|(
name|weight
operator|<
literal|600
condition|)
return|return
name|QFont
operator|::
name|Normal
return|;
if|if
condition|(
name|weight
operator|<
literal|700
condition|)
return|return
name|QFont
operator|::
name|DemiBold
return|;
if|if
condition|(
name|weight
operator|<
literal|800
condition|)
return|return
name|QFont
operator|::
name|Bold
return|;
return|return
name|QFont
operator|::
name|Black
return|;
block|}
end_function
begin_function
DECL|function|writingSystemFromCharSet
specifier|static
specifier|inline
name|QFontDatabase
operator|::
name|WritingSystem
name|writingSystemFromCharSet
parameter_list|(
name|uchar
name|charSet
parameter_list|)
block|{
switch|switch
condition|(
name|charSet
condition|)
block|{
case|case
name|ANSI_CHARSET
case|:
case|case
name|EASTEUROPE_CHARSET
case|:
case|case
name|BALTIC_CHARSET
case|:
case|case
name|TURKISH_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Latin
return|;
case|case
name|GREEK_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Greek
return|;
case|case
name|RUSSIAN_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Cyrillic
return|;
case|case
name|HEBREW_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Hebrew
return|;
case|case
name|ARABIC_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Arabic
return|;
case|case
name|THAI_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Thai
return|;
case|case
name|GB2312_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|SimplifiedChinese
return|;
case|case
name|CHINESEBIG5_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|TraditionalChinese
return|;
case|case
name|SHIFTJIS_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Japanese
return|;
case|case
name|HANGUL_CHARSET
case|:
case|case
name|JOHAB_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Korean
return|;
case|case
name|VIETNAMESE_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Vietnamese
return|;
case|case
name|SYMBOL_CHARSET
case|:
return|return
name|QFontDatabase
operator|::
name|Symbol
return|;
default|default:
break|break;
block|}
return|return
name|QFontDatabase
operator|::
name|Any
return|;
block|}
end_function
begin_function
DECL|function|createFontFile
specifier|static
name|FontFile
modifier|*
name|createFontFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|FontFile
modifier|*
name|fontFile
init|=
operator|new
name|FontFile
decl_stmt|;
name|fontFile
operator|->
name|fileName
operator|=
name|fileName
expr_stmt|;
name|fontFile
operator|->
name|indexValue
operator|=
name|index
expr_stmt|;
return|return
name|fontFile
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|bool
name|localizedName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|extern
name|QString
name|getEnglishName
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|addFontToDatabase
specifier|static
name|bool
name|addFontToDatabase
parameter_list|(
specifier|const
name|QString
modifier|&
name|familyName
parameter_list|,
name|uchar
name|charSet
parameter_list|,
specifier|const
name|TEXTMETRIC
modifier|*
name|textmetric
parameter_list|,
specifier|const
name|FONTSIGNATURE
modifier|*
name|signature
parameter_list|,
name|int
name|type
parameter_list|)
block|{
typedef|typedef
name|QPair
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|FontKey
typedef|;
comment|// the "@family" fonts are just the same as "family". Ignore them.
if|if
condition|(
name|familyName
operator|.
name|isEmpty
argument_list|()
operator|||
name|familyName
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'@'
argument_list|)
operator|||
name|familyName
operator|.
name|startsWith
argument_list|(
name|QStringLiteral
argument_list|(
literal|"WST_"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|int
name|separatorPos
init|=
name|familyName
operator|.
name|indexOf
argument_list|(
name|QStringLiteral
argument_list|(
literal|"::"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|faceName
init|=
name|separatorPos
operator|!=
operator|-
literal|1
condition|?
name|familyName
operator|.
name|left
argument_list|(
name|separatorPos
argument_list|)
else|:
name|familyName
decl_stmt|;
specifier|const
name|QString
name|fullName
init|=
name|separatorPos
operator|!=
operator|-
literal|1
condition|?
name|familyName
operator|.
name|mid
argument_list|(
name|separatorPos
operator|+
literal|2
argument_list|)
else|:
name|QString
argument_list|()
decl_stmt|;
specifier|static
specifier|const
name|int
name|SMOOTH_SCALABLE
init|=
literal|0xffff
decl_stmt|;
specifier|const
name|QString
name|foundryName
decl_stmt|;
comment|// No such concept.
specifier|const
name|NEWTEXTMETRIC
modifier|*
name|tm
init|=
operator|(
name|NEWTEXTMETRIC
operator|*
operator|)
name|textmetric
decl_stmt|;
specifier|const
name|bool
name|fixed
init|=
operator|!
operator|(
name|tm
operator|->
name|tmPitchAndFamily
operator|&
name|TMPF_FIXED_PITCH
operator|)
decl_stmt|;
specifier|const
name|bool
name|ttf
init|=
operator|(
name|tm
operator|->
name|tmPitchAndFamily
operator|&
name|TMPF_TRUETYPE
operator|)
decl_stmt|;
specifier|const
name|bool
name|scalable
init|=
name|tm
operator|->
name|tmPitchAndFamily
operator|&
operator|(
name|TMPF_VECTOR
operator||
name|TMPF_TRUETYPE
operator|)
decl_stmt|;
specifier|const
name|int
name|size
init|=
name|scalable
condition|?
name|SMOOTH_SCALABLE
else|:
name|tm
operator|->
name|tmHeight
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Style
name|style
init|=
name|tm
operator|->
name|tmItalic
condition|?
name|QFont
operator|::
name|StyleItalic
else|:
name|QFont
operator|::
name|StyleNormal
decl_stmt|;
specifier|const
name|bool
name|antialias
init|=
literal|false
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Weight
name|weight
init|=
name|weightFromInteger
argument_list|(
name|tm
operator|->
name|tmWeight
argument_list|)
decl_stmt|;
specifier|const
name|QFont
operator|::
name|Stretch
name|stretch
init|=
name|QFont
operator|::
name|Unstretched
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_OUTPUT
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|2
condition|)
block|{
name|QString
name|message
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|message
argument_list|)
decl_stmt|;
name|str
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|familyName
operator|<<
literal|' '
operator|<<
name|charSet
operator|<<
literal|" TTF="
operator|<<
name|ttf
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|DEVICE_FONTTYPE
condition|)
name|str
operator|<<
literal|" DEVICE"
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|RASTER_FONTTYPE
condition|)
name|str
operator|<<
literal|" RASTER"
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
name|str
operator|<<
literal|" TRUETYPE"
expr_stmt|;
name|str
operator|<<
literal|" scalable="
operator|<<
name|scalable
operator|<<
literal|" Size="
operator|<<
name|size
operator|<<
literal|" Style="
operator|<<
name|style
operator|<<
literal|" Weight="
operator|<<
name|weight
operator|<<
literal|" stretch="
operator|<<
name|stretch
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|message
expr_stmt|;
block|}
endif|#
directive|endif
name|QString
name|englishName
decl_stmt|;
if|if
condition|(
name|ttf
operator|&&
name|localizedName
argument_list|(
name|faceName
argument_list|)
condition|)
name|englishName
operator|=
name|getEnglishName
argument_list|(
name|faceName
argument_list|)
expr_stmt|;
name|QSupportedWritingSystems
name|writingSystems
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|quint32
name|unicodeRange
index|[
literal|4
index|]
init|=
block|{
name|signature
operator|->
name|fsUsb
index|[
literal|0
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|1
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|2
index|]
block|,
name|signature
operator|->
name|fsUsb
index|[
literal|3
index|]
block|}
decl_stmt|;
name|quint32
name|codePageRange
index|[
literal|2
index|]
init|=
block|{
name|signature
operator|->
name|fsCsb
index|[
literal|0
index|]
block|,
name|signature
operator|->
name|fsCsb
index|[
literal|1
index|]
block|}
decl_stmt|;
name|writingSystems
operator|=
name|QPlatformFontDatabase
operator|::
name|writingSystemsFromTrueTypeBits
argument_list|(
name|unicodeRange
argument_list|,
name|codePageRange
argument_list|)
expr_stmt|;
comment|// ### Hack to work around problem with Thai text on Windows 7. Segoe UI contains
comment|// the symbol for Baht, and Windows thus reports that it supports the Thai script.
comment|// Since it's the default UI font on this platform, most widgets will be unable to
comment|// display Thai text by default. As a temporary work around, we special case Segoe UI
comment|// and remove the Thai script from its list of supported writing systems.
if|if
condition|(
name|writingSystems
operator|.
name|supported
argument_list|(
name|QFontDatabase
operator|::
name|Thai
argument_list|)
operator|&&
name|faceName
operator|==
name|QStringLiteral
argument_list|(
literal|"Segoe UI"
argument_list|)
condition|)
name|writingSystems
operator|.
name|setSupported
argument_list|(
name|QFontDatabase
operator|::
name|Thai
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QFontDatabase
operator|::
name|WritingSystem
name|ws
init|=
name|writingSystemFromCharSet
argument_list|(
name|charSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|ws
operator|!=
name|QFontDatabase
operator|::
name|Any
condition|)
name|writingSystems
operator|.
name|setSupported
argument_list|(
name|ws
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_OS_WINCE
specifier|const
name|QSettings
name|fontRegistry
argument_list|(
name|QStringLiteral
argument_list|(
literal|"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
decl_stmt|;
specifier|static
name|QVector
argument_list|<
name|FontKey
argument_list|>
name|allFonts
decl_stmt|;
if|if
condition|(
name|allFonts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QStringList
name|allKeys
init|=
name|fontRegistry
operator|.
name|allKeys
argument_list|()
decl_stmt|;
name|allFonts
operator|.
name|reserve
argument_list|(
name|allKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|trueType
init|=
name|QStringLiteral
argument_list|(
literal|"(TrueType)"
argument_list|)
decl_stmt|;
specifier|const
name|QRegExp
name|sizeListMatch
argument_list|(
name|QStringLiteral
argument_list|(
literal|"\\s(\\d+,)+\\d+"
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|key
decl|,
name|allKeys
control|)
block|{
name|QString
name|realKey
init|=
name|key
decl_stmt|;
name|realKey
operator|.
name|remove
argument_list|(
name|trueType
argument_list|)
expr_stmt|;
name|realKey
operator|.
name|remove
argument_list|(
name|sizeListMatch
argument_list|)
expr_stmt|;
name|QStringList
name|fonts
decl_stmt|;
specifier|const
name|QStringList
name|fontNames
init|=
name|realKey
operator|.
name|trimmed
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fontName
decl|,
name|fontNames
control|)
name|fonts
operator|.
name|push_back
argument_list|(
name|fontName
operator|.
name|trimmed
argument_list|()
argument_list|)
expr_stmt|;
name|allFonts
operator|.
name|push_back
argument_list|(
name|FontKey
argument_list|(
name|key
argument_list|,
name|fonts
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QString
name|value
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|allFonts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|k
control|)
block|{
specifier|const
name|FontKey
modifier|&
name|fontKey
init|=
name|allFonts
operator|.
name|at
argument_list|(
name|k
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fontKey
operator|.
name|second
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
modifier|&
name|font
init|=
name|fontKey
operator|.
name|second
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|font
operator|==
name|faceName
operator|||
name|fullName
operator|==
name|font
operator|||
name|englishName
operator|==
name|font
condition|)
block|{
name|value
operator|=
name|fontRegistry
operator|.
name|value
argument_list|(
name|fontKey
operator|.
name|first
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|index
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
block|}
else|#
directive|else
name|QString
name|value
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|static
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|fontCache
decl_stmt|;
if|if
condition|(
name|fontCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Qt-Project"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Qtbase"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QStringLiteral
argument_list|(
literal|"CEFontCache"
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fontName
decl|,
name|settings
operator|.
name|allKeys
argument_list|()
control|)
block|{
specifier|const
name|QString
name|fontFileName
init|=
name|settings
operator|.
name|value
argument_list|(
name|fontName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|fontCache
operator|.
name|insert
argument_list|(
name|fontName
argument_list|,
name|fontFileName
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// CEFontCache
block|}
name|value
operator|=
name|fontCache
operator|.
name|value
argument_list|(
name|faceName
argument_list|)
expr_stmt|;
comment|//Fallback if we haven't cached the font yet or the font got removed/renamed iterate again over all fonts
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Qt-Project"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Qtbase"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QStringLiteral
argument_list|(
literal|"CEFontCache"
argument_list|)
argument_list|)
expr_stmt|;
comment|//empty the cache first, as it seems that it is dirty
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fontName
decl|,
name|settings
operator|.
name|allKeys
argument_list|()
control|)
name|settings
operator|.
name|remove
argument_list|(
name|fontName
argument_list|)
expr_stmt|;
name|QDirIterator
name|it
argument_list|(
name|QStringLiteral
argument_list|(
literal|"/Windows"
argument_list|)
argument_list|,
name|QStringList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"*.ttf"
argument_list|)
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|System
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|fontFile
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|fontName
init|=
name|QBasicFontDatabase
operator|::
name|fontNameFromTTFile
argument_list|(
name|fontFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontName
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|fontCache
operator|.
name|insert
argument_list|(
name|fontName
argument_list|,
name|fontFile
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
name|fontName
argument_list|,
name|fontFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|localizedName
argument_list|(
name|fontName
argument_list|)
condition|)
block|{
name|QString
name|englishFontName
init|=
name|getEnglishName
argument_list|(
name|fontName
argument_list|)
decl_stmt|;
name|fontCache
operator|.
name|insert
argument_list|(
name|englishFontName
argument_list|,
name|fontFile
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
name|englishFontName
argument_list|,
name|fontFile
argument_list|)
expr_stmt|;
block|}
block|}
name|value
operator|=
name|fontCache
operator|.
name|value
argument_list|(
name|faceName
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// CEFontCache
block|}
endif|#
directive|endif
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|QDir
operator|::
name|isAbsolutePath
argument_list|(
name|value
argument_list|)
condition|)
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|value
operator|.
name|prepend
argument_list|(
name|QFile
operator|::
name|decodeName
argument_list|(
name|qgetenv
argument_list|(
literal|"windir"
argument_list|)
operator|+
literal|"\\Fonts\\"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|value
operator|.
name|prepend
argument_list|(
name|QFile
operator|::
name|decodeName
argument_list|(
literal|"/Windows/"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|faceName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|weight
argument_list|,
name|style
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
name|createFontFile
argument_list|(
name|value
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
comment|// add fonts windows can generate for us:
if|if
condition|(
name|weight
operator|<=
name|QFont
operator|::
name|DemiBold
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|faceName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
name|style
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
name|createFontFile
argument_list|(
name|value
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|!=
name|QFont
operator|::
name|StyleItalic
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|faceName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|weight
argument_list|,
name|QFont
operator|::
name|StyleItalic
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
name|createFontFile
argument_list|(
name|value
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|weight
operator|<=
name|QFont
operator|::
name|DemiBold
operator|&&
name|style
operator|!=
name|QFont
operator|::
name|StyleItalic
condition|)
name|QPlatformFontDatabase
operator|::
name|registerFont
argument_list|(
name|faceName
argument_list|,
name|QString
argument_list|()
argument_list|,
name|foundryName
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
name|QFont
operator|::
name|StyleItalic
argument_list|,
name|stretch
argument_list|,
name|antialias
argument_list|,
name|scalable
argument_list|,
name|size
argument_list|,
name|fixed
argument_list|,
name|writingSystems
argument_list|,
name|createFontFile
argument_list|(
name|value
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|englishName
operator|.
name|isEmpty
argument_list|()
condition|)
name|QPlatformFontDatabase
operator|::
name|registerAliasToFontFamily
argument_list|(
name|faceName
argument_list|,
name|englishName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_function
DECL|function|getFntTable
specifier|static
name|QByteArray
name|getFntTable
parameter_list|(
name|HFONT
name|hfont
parameter_list|,
name|uint
name|tag
parameter_list|)
block|{
name|HDC
name|hdc
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HGDIOBJ
name|oldFont
init|=
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|hfont
argument_list|)
decl_stmt|;
name|quint32
name|t
init|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|QByteArray
name|buffer
decl_stmt|;
name|DWORD
name|length
init|=
name|GetFontData
argument_list|(
name|hdc
argument_list|,
name|t
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|!=
name|GDI_ERROR
condition|)
block|{
name|buffer
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|GetFontData
argument_list|(
name|hdc
argument_list|,
name|t
argument_list|,
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|SelectObject
argument_list|(
name|hdc
argument_list|,
name|oldFont
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|storeFont
specifier|static
name|int
name|QT_WIN_CALLBACK
name|storeFont
parameter_list|(
name|ENUMLOGFONTEX
modifier|*
name|f
parameter_list|,
name|NEWTEXTMETRICEX
modifier|*
name|textmetric
parameter_list|,
name|int
name|type
parameter_list|,
name|LPARAM
name|namesSetIn
parameter_list|)
block|{
typedef|typedef
name|QSet
argument_list|<
name|QString
argument_list|>
name|StringSet
typedef|;
specifier|const
name|QString
name|familyName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfLogFont
operator|.
name|lfFaceName
argument_list|)
operator|+
name|QStringLiteral
argument_list|(
literal|"::"
argument_list|)
operator|+
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|f
operator|->
name|elfFullName
argument_list|)
decl_stmt|;
specifier|const
name|uchar
name|charSet
init|=
name|f
operator|->
name|elfLogFont
operator|.
name|lfCharSet
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
specifier|const
name|FONTSIGNATURE
name|signature
init|=
name|textmetric
operator|->
name|ntmFontSig
decl_stmt|;
else|#
directive|else
name|FONTSIGNATURE
name|signature
decl_stmt|;
name|QByteArray
name|table
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|TRUETYPE_FONTTYPE
condition|)
block|{
name|HFONT
name|hfont
init|=
name|CreateFontIndirect
argument_list|(
operator|&
name|f
operator|->
name|elfLogFont
argument_list|)
decl_stmt|;
name|table
operator|=
name|getFntTable
argument_list|(
name|hfont
argument_list|,
name|MAKE_TAG
argument_list|(
literal|'O'
argument_list|,
literal|'S'
argument_list|,
literal|'/'
argument_list|,
literal|'2'
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteObject
argument_list|(
operator|(
name|HGDIOBJ
operator|)
name|hfont
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|length
argument_list|()
operator|>=
literal|86
condition|)
block|{
comment|// See also qfontdatabase_mac.cpp, offsets taken from OS/2 table in the TrueType spec
name|uchar
modifier|*
name|tableData
init|=
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|table
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|0
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|42
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|1
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|46
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|2
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|50
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsUsb
index|[
literal|3
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|54
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsCsb
index|[
literal|0
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|78
argument_list|)
expr_stmt|;
name|signature
operator|.
name|fsCsb
index|[
literal|1
index|]
operator|=
name|qFromBigEndian
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|tableData
operator|+
literal|82
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|memset
argument_list|(
operator|&
name|signature
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|signature
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// NEWTEXTMETRICEX is a NEWTEXTMETRIC, which according to the documentation is
comment|// identical to a TEXTMETRIC except for the last four members, which we don't use
comment|// anyway
if|if
condition|(
name|addFontToDatabase
argument_list|(
name|familyName
argument_list|,
name|charSet
argument_list|,
operator|(
name|TEXTMETRIC
operator|*
operator|)
name|textmetric
argument_list|,
operator|&
name|signature
argument_list|,
name|type
argument_list|)
condition|)
cast|reinterpret_cast
argument_list|<
name|StringSet
operator|*
argument_list|>
argument_list|(
name|namesSetIn
argument_list|)
operator|->
name|insert
argument_list|(
name|familyName
argument_list|)
expr_stmt|;
comment|// keep on enumerating
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|populateFontDatabase
name|void
name|QWindowsFontDatabaseFT
operator|::
name|populateFontDatabase
parameter_list|()
block|{
name|m_families
operator|.
name|clear
argument_list|()
expr_stmt|;
name|populate
argument_list|()
expr_stmt|;
comment|// Called multiple times.
comment|// Work around EnumFontFamiliesEx() not listing the system font, see below.
specifier|const
name|QString
name|sysFontFamily
init|=
name|QGuiApplication
operator|::
name|font
argument_list|()
operator|.
name|family
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m_families
operator|.
name|contains
argument_list|(
name|sysFontFamily
argument_list|)
condition|)
name|populate
argument_list|(
name|sysFontFamily
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \brief Populate font database using EnumFontFamiliesEx().      Normally, leaving the name empty should enumerate     all fonts, however, system fonts like "MS Shell Dlg 2"     are only found when specifying the name explicitly. */
end_comment
begin_function
DECL|function|populate
name|void
name|QWindowsFontDatabaseFT
operator|::
name|populate
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|m_families
operator|.
name|size
argument_list|()
operator|<<
name|family
expr_stmt|;
name|HDC
name|dummy
init|=
name|GetDC
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOGFONT
name|lf
decl_stmt|;
name|lf
operator|.
name|lfCharSet
operator|=
name|DEFAULT_CHARSET
expr_stmt|;
if|if
condition|(
name|family
operator|.
name|size
argument_list|()
operator|>=
name|LF_FACESIZE
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Unable to enumerate family '%s'."
argument_list|,
name|__FUNCTION__
argument_list|,
name|qPrintable
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|wmemcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|family
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|family
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfPitchAndFamily
operator|=
literal|0
expr_stmt|;
name|EnumFontFamiliesEx
argument_list|(
name|dummy
argument_list|,
operator|&
name|lf
argument_list|,
operator|(
name|FONTENUMPROC
operator|)
name|storeFont
argument_list|,
operator|(
name|LPARAM
operator|)
operator|&
name|m_families
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ReleaseDC
argument_list|(
literal|0
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fontEngine
name|QFontEngine
modifier|*
name|QWindowsFontDatabaseFT
operator|::
name|fontEngine
parameter_list|(
specifier|const
name|QFontDef
modifier|&
name|fontDef
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|QBasicFontDatabase
operator|::
name|fontEngine
argument_list|(
name|fontDef
argument_list|,
name|handle
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"FONTDEF"
operator|<<
name|fontDef
operator|.
name|family
operator|<<
name|fe
operator|<<
name|handle
expr_stmt|;
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|fontEngine
name|QFontEngine
modifier|*
name|QWindowsFontDatabaseFT
operator|::
name|fontEngine
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|fontData
parameter_list|,
name|qreal
name|pixelSize
parameter_list|,
name|QFont
operator|::
name|HintingPreference
name|hintingPreference
parameter_list|)
block|{
name|QFontEngine
modifier|*
name|fe
init|=
name|QBasicFontDatabase
operator|::
name|fontEngine
argument_list|(
name|fontData
argument_list|,
name|pixelSize
argument_list|,
name|hintingPreference
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"FONTDATA"
operator|<<
name|fontData
operator|<<
name|pixelSize
operator|<<
name|hintingPreference
operator|<<
name|fe
expr_stmt|;
return|return
name|fe
return|;
block|}
end_function
begin_function
DECL|function|fallbacksForFamily
name|QStringList
name|QWindowsFontDatabaseFT
operator|::
name|fallbacksForFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
name|QFont
operator|::
name|Style
name|style
parameter_list|,
name|QFont
operator|::
name|StyleHint
name|styleHint
parameter_list|,
name|QChar
operator|::
name|Script
name|script
parameter_list|)
specifier|const
block|{
name|QStringList
name|result
init|=
name|QPlatformFontDatabase
operator|::
name|fallbacksForFamily
argument_list|(
name|family
argument_list|,
name|style
argument_list|,
name|styleHint
argument_list|,
name|script
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|result
return|;
name|result
operator|.
name|append
argument_list|(
name|QWindowsFontDatabase
operator|::
name|familyForStyleHint
argument_list|(
name|styleHint
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSettings
name|settings
argument_list|(
name|QLatin1String
argument_list|(
literal|"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\FontLink\\SystemLink"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|fontList
init|=
name|settings
operator|.
name|value
argument_list|(
name|family
argument_list|)
operator|.
name|toStringList
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fallback
decl|,
name|fontList
control|)
block|{
specifier|const
name|int
name|sep
init|=
name|fallback
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sep
operator|>
literal|0
condition|)
name|result
operator|<<
name|fallback
operator|.
name|mid
argument_list|(
name|sep
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|result
operator|.
name|append
argument_list|(
name|QWindowsFontDatabase
operator|::
name|extraTryFontsForFamily
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|family
operator|<<
name|style
operator|<<
name|styleHint
operator|<<
name|script
operator|<<
name|result
operator|<<
name|m_families
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|fontDir
name|QString
name|QWindowsFontDatabaseFT
operator|::
name|fontDir
parameter_list|()
specifier|const
block|{
specifier|const
name|QString
name|result
init|=
name|QLatin1String
argument_list|(
name|qgetenv
argument_list|(
literal|"windir"
argument_list|)
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"/Fonts"
argument_list|)
decl_stmt|;
comment|//QPlatformFontDatabase::fontDir();
name|qCDebug
argument_list|(
name|lcQpaFonts
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|defaultFont
name|QFont
name|QWindowsFontDatabaseFT
operator|::
name|defaultFont
parameter_list|()
specifier|const
block|{
return|return
name|QWindowsFontDatabase
operator|::
name|systemDefaultFont
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
