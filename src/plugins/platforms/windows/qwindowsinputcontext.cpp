begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsinputcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsintegration.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsmousehandler.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QRect>
end_include
begin_include
include|#
directive|include
file|<QtCore/QRectF>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextBoundaryFinder>
end_include
begin_include
include|#
directive|include
file|<QtGui/QInputMethodEvent>
end_include
begin_include
include|#
directive|include
file|<QtGui/QTextCharFormat>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPalette>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<private/qhighdpiscaling_p.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|debugComposition
specifier|static
specifier|inline
name|QByteArray
name|debugComposition
parameter_list|(
name|int
name|lParam
parameter_list|)
block|{
name|QByteArray
name|str
decl_stmt|;
if|if
condition|(
name|lParam
operator|&
name|GCS_RESULTSTR
condition|)
name|str
operator|+=
literal|"RESULTSTR "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|GCS_COMPSTR
condition|)
name|str
operator|+=
literal|"COMPSTR "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|GCS_COMPATTR
condition|)
name|str
operator|+=
literal|"COMPATTR "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|GCS_CURSORPOS
condition|)
name|str
operator|+=
literal|"CURSORPOS "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|GCS_COMPCLAUSE
condition|)
name|str
operator|+=
literal|"COMPCLAUSE "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|CS_INSERTCHAR
condition|)
name|str
operator|+=
literal|"INSERTCHAR "
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|CS_NOMOVECARET
condition|)
name|str
operator|+=
literal|"NOMOVECARET "
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_comment
comment|// Cancel current IME composition.
end_comment
begin_function
DECL|function|imeNotifyCancelComposition
specifier|static
specifier|inline
name|void
name|imeNotifyCancelComposition
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hwnd
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|"called with"
operator|<<
name|hwnd
expr_stmt|;
return|return;
block|}
specifier|const
name|HIMC
name|himc
init|=
name|ImmGetContext
argument_list|(
name|hwnd
argument_list|)
decl_stmt|;
name|ImmNotifyIME
argument_list|(
name|himc
argument_list|,
name|NI_COMPOSITIONSTR
argument_list|,
name|CPS_CANCEL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ImmReleaseContext
argument_list|(
name|hwnd
argument_list|,
name|himc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|languageIdFromLocaleId
specifier|static
specifier|inline
name|LCID
name|languageIdFromLocaleId
parameter_list|(
name|LCID
name|localeId
parameter_list|)
block|{
return|return
name|localeId
operator|&
literal|0xFFFF
return|;
block|}
end_function
begin_function
DECL|function|currentInputLanguageId
specifier|static
specifier|inline
name|LCID
name|currentInputLanguageId
parameter_list|()
block|{
return|return
name|languageIdFromLocaleId
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|GetKeyboardLayout
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function_decl
name|Q_CORE_EXPORT
name|QLocale
name|qt_localeFromLCID
parameter_list|(
name|LCID
name|id
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// from qlocale_win.cpp
end_comment
begin_comment
comment|/*!     \class QWindowsInputContext     \brief Windows Input context implementation      Handles input of foreign characters (particularly East Asian)     languages.      \section1 Testing      \list     \li Install the East Asian language support and choose Japanese (say).     \li Compile the \a mainwindows/mdi example and open a text window.     \li In the language bar, switch to Japanese and choose the        Input method 'Hiragana'.     \li In a text editor control, type the syllable \a 'la'.        Underlined characters show up, indicating that there is completion        available. Press the Space key two times. A completion popup occurs        which shows the options.     \endlist      Reconversion: Input texts can be 'converted' into different     input modes or more completion suggestions can be made based on     context to correct errors. This is bound to the 'Conversion key'     (F13-key in Japanese, which can be changed in the     configuration). After writing text, pressing the key selects text     and triggers a conversion popup, which shows the alternatives for     the word.      \section1 Interaction      When the user activates input methods,  Windows sends     WM_IME_STARTCOMPOSITION, WM_IME_COMPOSITION,     WM_IME_ENDCOMPOSITION messages that trigger startComposition(),     composition(), endComposition(), respectively. No key events are sent.      composition() determines the markup of the pre-edit or selected     text and/or the final text and sends that to the focus object.      In between startComposition(), endComposition(), multiple     compositions may happen (isComposing).      update() is called to synchronize the position of the candidate     window with the microfocus rectangle of the focus object.     Also, a hidden caret is moved along with that position,     which is important for some Chinese input methods.      reset() is called to cancel a composition if the mouse is     moved outside or for example some Undo/Redo operation is     invoked.      \note Mouse interaction of popups with     QtWindows::InputMethodOpenCandidateWindowEvent and     QtWindows::InputMethodCloseCandidateWindowEvent     needs to be checked (mouse grab might interfere with candidate window).      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_decl_stmt
DECL|member|m_defaultContext
name|HIMC
name|QWindowsInputContext
operator|::
name|m_defaultContext
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|CompositionContext
name|QWindowsInputContext
operator|::
name|CompositionContext
operator|::
name|CompositionContext
parameter_list|()
member_init_list|:
name|hwnd
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|haveCaret
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|position
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|isComposing
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|factor
argument_list|(
literal|1
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QWindowsInputContext
name|QWindowsInputContext
operator|::
name|QWindowsInputContext
parameter_list|()
member_init_list|:
name|m_WM_MSIME_MOUSE
argument_list|(
name|RegisterWindowMessage
argument_list|(
literal|L"MSIMEMouseOperation"
argument_list|)
argument_list|)
member_init_list|,
name|m_endCompositionRecursionGuard
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_languageId
argument_list|(
name|currentInputLanguageId
argument_list|()
argument_list|)
member_init_list|,
name|m_locale
argument_list|(
name|qt_localeFromLCID
argument_list|(
name|m_languageId
argument_list|)
argument_list|)
block|{
name|connect
argument_list|(
name|QGuiApplication
operator|::
name|inputMethod
argument_list|()
argument_list|,
operator|&
name|QInputMethod
operator|::
name|cursorRectangleChanged
argument_list|,
name|this
argument_list|,
operator|&
name|QWindowsInputContext
operator|::
name|cursorRectChanged
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsInputContext
name|QWindowsInputContext
operator|::
name|~
name|QWindowsInputContext
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|hasCapability
name|bool
name|QWindowsInputContext
operator|::
name|hasCapability
parameter_list|(
name|Capability
name|capability
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|capability
condition|)
block|{
case|case
name|QPlatformInputContext
operator|::
name|HiddenTextCapability
case|:
ifndef|#
directive|ifndef
name|Q_OS_WINCE
return|return
literal|false
return|;
comment|// QTBUG-40691, do not show IME on desktop for password entry fields.
else|#
directive|else
break|break;
comment|// Windows CE: Show software keyboard.
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Cancels a composition. */
end_comment
begin_function
DECL|function|reset
name|void
name|QWindowsInputContext
operator|::
name|reset
parameter_list|()
block|{
name|QPlatformInputContext
operator|::
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_compositionContext
operator|.
name|hwnd
condition|)
return|return;
name|qCDebug
argument_list|(
name|lcQpaInputMethods
argument_list|)
operator|<<
name|__FUNCTION__
expr_stmt|;
if|if
condition|(
name|m_compositionContext
operator|.
name|isComposing
operator|&&
operator|!
name|m_compositionContext
operator|.
name|focusObject
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QInputMethodEvent
name|event
decl_stmt|;
if|if
condition|(
operator|!
name|m_compositionContext
operator|.
name|composition
operator|.
name|isEmpty
argument_list|()
condition|)
name|event
operator|.
name|setCommitString
argument_list|(
name|m_compositionContext
operator|.
name|composition
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|m_compositionContext
operator|.
name|focusObject
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|endContextComposition
argument_list|()
expr_stmt|;
block|}
name|imeNotifyCancelComposition
argument_list|(
name|m_compositionContext
operator|.
name|hwnd
argument_list|)
expr_stmt|;
name|doneContext
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFocusObject
name|void
name|QWindowsInputContext
operator|::
name|setFocusObject
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
comment|// ### fixme: On Windows 8.1, it has been observed that the Input context
comment|// remains active when this happens resulting in a lock-up. Consecutive
comment|// key events still have VK_PROCESSKEY set and are thus ignored.
if|if
condition|(
name|m_compositionContext
operator|.
name|isComposing
condition|)
name|reset
argument_list|()
expr_stmt|;
name|updateEnabled
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateEnabled
name|void
name|QWindowsInputContext
operator|::
name|updateEnabled
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|focusObject
argument_list|()
condition|)
return|return;
if|if
condition|(
name|QWindowsWindow
modifier|*
name|platformWindow
init|=
name|QWindowsWindow
operator|::
name|windowsWindowOf
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|accepted
init|=
name|inputMethodAccepted
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|1
condition|)
name|qCDebug
argument_list|(
name|lcQpaInputMethods
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|platformWindow
operator|->
name|window
argument_list|()
operator|<<
literal|"accepted="
operator|<<
name|accepted
expr_stmt|;
name|QWindowsInputContext
operator|::
name|setWindowsImeEnabled
argument_list|(
name|platformWindow
argument_list|,
name|accepted
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setWindowsImeEnabled
name|void
name|QWindowsInputContext
operator|::
name|setWindowsImeEnabled
parameter_list|(
name|QWindowsWindow
modifier|*
name|platformWindow
parameter_list|,
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
operator|!
name|platformWindow
operator|||
name|platformWindow
operator|->
name|testFlag
argument_list|(
name|QWindowsWindow
operator|::
name|InputMethodDisabled
argument_list|)
operator|==
operator|!
name|enabled
condition|)
return|return;
if|if
condition|(
name|enabled
condition|)
block|{
comment|// Re-enable Windows IME by associating default context saved on first disabling.
name|ImmAssociateContext
argument_list|(
name|platformWindow
operator|->
name|handle
argument_list|()
argument_list|,
name|QWindowsInputContext
operator|::
name|m_defaultContext
argument_list|)
expr_stmt|;
name|platformWindow
operator|->
name|clearFlag
argument_list|(
name|QWindowsWindow
operator|::
name|InputMethodDisabled
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Disable Windows IME by associating 0 context. Store context first time.
specifier|const
name|HIMC
name|oldImC
init|=
name|ImmAssociateContext
argument_list|(
name|platformWindow
operator|->
name|handle
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|platformWindow
operator|->
name|setFlag
argument_list|(
name|QWindowsWindow
operator|::
name|InputMethodDisabled
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QWindowsInputContext
operator|::
name|m_defaultContext
operator|&&
name|oldImC
condition|)
name|QWindowsInputContext
operator|::
name|m_defaultContext
operator|=
name|oldImC
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \brief Moves the candidate window along with microfocus of the focus object. */
end_comment
begin_function
DECL|function|update
name|void
name|QWindowsInputContext
operator|::
name|update
parameter_list|(
name|Qt
operator|::
name|InputMethodQueries
name|queries
parameter_list|)
block|{
if|if
condition|(
name|queries
operator|&
name|Qt
operator|::
name|ImEnabled
condition|)
name|updateEnabled
argument_list|()
expr_stmt|;
name|QPlatformInputContext
operator|::
name|update
argument_list|(
name|queries
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorRectChanged
name|void
name|QWindowsInputContext
operator|::
name|cursorRectChanged
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_compositionContext
operator|.
name|hwnd
condition|)
return|return;
specifier|const
name|QInputMethod
modifier|*
name|inputMethod
init|=
name|QGuiApplication
operator|::
name|inputMethod
argument_list|()
decl_stmt|;
specifier|const
name|QRectF
name|cursorRectangleF
init|=
name|inputMethod
operator|->
name|cursorRectangle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cursorRectangleF
operator|.
name|isValid
argument_list|()
condition|)
return|return;
specifier|const
name|QRect
name|cursorRectangle
init|=
name|QRectF
argument_list|(
name|cursorRectangleF
operator|.
name|topLeft
argument_list|()
operator|*
name|m_compositionContext
operator|.
name|factor
argument_list|,
name|cursorRectangleF
operator|.
name|size
argument_list|()
operator|*
name|m_compositionContext
operator|.
name|factor
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaInputMethods
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|cursorRectangle
expr_stmt|;
specifier|const
name|HIMC
name|himc
init|=
name|ImmGetContext
argument_list|(
name|m_compositionContext
operator|.
name|hwnd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|himc
condition|)
return|return;
comment|// Move candidate list window to the microfocus position.
name|COMPOSITIONFORM
name|cf
decl_stmt|;
comment|// ### need X-like inputStyle config settings
name|cf
operator|.
name|dwStyle
operator|=
name|CFS_FORCE_POSITION
expr_stmt|;
name|cf
operator|.
name|ptCurrentPos
operator|.
name|x
operator|=
name|cursorRectangle
operator|.
name|x
argument_list|()
expr_stmt|;
name|cf
operator|.
name|ptCurrentPos
operator|.
name|y
operator|=
name|cursorRectangle
operator|.
name|y
argument_list|()
expr_stmt|;
name|CANDIDATEFORM
name|candf
decl_stmt|;
name|candf
operator|.
name|dwIndex
operator|=
literal|0
expr_stmt|;
name|candf
operator|.
name|dwStyle
operator|=
name|CFS_EXCLUDE
expr_stmt|;
name|candf
operator|.
name|ptCurrentPos
operator|.
name|x
operator|=
name|cursorRectangle
operator|.
name|x
argument_list|()
expr_stmt|;
name|candf
operator|.
name|ptCurrentPos
operator|.
name|y
operator|=
name|cursorRectangle
operator|.
name|y
argument_list|()
operator|+
name|cursorRectangle
operator|.
name|height
argument_list|()
expr_stmt|;
name|candf
operator|.
name|rcArea
operator|.
name|left
operator|=
name|cursorRectangle
operator|.
name|x
argument_list|()
expr_stmt|;
name|candf
operator|.
name|rcArea
operator|.
name|top
operator|=
name|cursorRectangle
operator|.
name|y
argument_list|()
expr_stmt|;
name|candf
operator|.
name|rcArea
operator|.
name|right
operator|=
name|cursorRectangle
operator|.
name|x
argument_list|()
operator|+
name|cursorRectangle
operator|.
name|width
argument_list|()
expr_stmt|;
name|candf
operator|.
name|rcArea
operator|.
name|bottom
operator|=
name|cursorRectangle
operator|.
name|y
argument_list|()
operator|+
name|cursorRectangle
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_compositionContext
operator|.
name|haveCaret
condition|)
name|SetCaretPos
argument_list|(
name|cursorRectangle
operator|.
name|x
argument_list|()
argument_list|,
name|cursorRectangle
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|ImmSetCompositionWindow
argument_list|(
name|himc
argument_list|,
operator|&
name|cf
argument_list|)
expr_stmt|;
name|ImmSetCandidateWindow
argument_list|(
name|himc
argument_list|,
operator|&
name|candf
argument_list|)
expr_stmt|;
name|ImmReleaseContext
argument_list|(
name|m_compositionContext
operator|.
name|hwnd
argument_list|,
name|himc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invokeAction
name|void
name|QWindowsInputContext
operator|::
name|invokeAction
parameter_list|(
name|QInputMethod
operator|::
name|Action
name|action
parameter_list|,
name|int
name|cursorPosition
parameter_list|)
block|{
if|if
condition|(
name|action
operator|!=
name|QInputMethod
operator|::
name|Click
operator|||
operator|!
name|m_compositionContext
operator|.
name|hwnd
condition|)
block|{
name|QPlatformInputContext
operator|::
name|invokeAction
argument_list|(
name|action
argument_list|,
name|cursorPosition
argument_list|)
expr_stmt|;
return|return;
block|}
name|qCDebug
argument_list|(
name|lcQpaInputMethods
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|cursorPosition
operator|<<
name|action
expr_stmt|;
if|if
condition|(
name|cursorPosition
argument_list|<
literal|0
operator|||
name|cursorPosition
argument_list|>
name|m_compositionContext
operator|.
name|composition
operator|.
name|size
argument_list|()
condition|)
name|reset
argument_list|()
expr_stmt|;
comment|// Magic code that notifies Japanese IME about the cursor
comment|// position.
specifier|const
name|HIMC
name|himc
init|=
name|ImmGetContext
argument_list|(
name|m_compositionContext
operator|.
name|hwnd
argument_list|)
decl_stmt|;
specifier|const
name|HWND
name|imeWindow
init|=
name|ImmGetDefaultIMEWnd
argument_list|(
name|m_compositionContext
operator|.
name|hwnd
argument_list|)
decl_stmt|;
specifier|const
name|WPARAM
name|mouseOperationCode
init|=
name|MAKELONG
argument_list|(
name|MAKEWORD
argument_list|(
name|MK_LBUTTON
argument_list|,
name|cursorPosition
operator|==
literal|0
condition|?
literal|2
else|:
literal|1
argument_list|)
argument_list|,
name|cursorPosition
argument_list|)
decl_stmt|;
name|SendMessage
argument_list|(
name|imeWindow
argument_list|,
name|m_WM_MSIME_MOUSE
argument_list|,
name|mouseOperationCode
argument_list|,
name|LPARAM
argument_list|(
name|himc
argument_list|)
argument_list|)
expr_stmt|;
name|ImmReleaseContext
argument_list|(
name|m_compositionContext
operator|.
name|hwnd
argument_list|,
name|himc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getCompositionString
specifier|static
specifier|inline
name|QString
name|getCompositionString
parameter_list|(
name|HIMC
name|himc
parameter_list|,
name|DWORD
name|dwIndex
parameter_list|)
block|{
enum|enum
block|{
name|bufferSize
init|=
literal|256
block|}
enum|;
name|wchar_t
name|buffer
index|[
name|bufferSize
index|]
decl_stmt|;
specifier|const
name|int
name|length
init|=
name|ImmGetCompositionString
argument_list|(
name|himc
argument_list|,
name|dwIndex
argument_list|,
name|buffer
argument_list|,
name|bufferSize
operator|*
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buffer
argument_list|,
name|size_t
argument_list|(
name|length
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Determine the converted string range as pair of start/length to be selected.
end_comment
begin_function
DECL|function|getCompositionStringConvertedRange
specifier|static
specifier|inline
name|void
name|getCompositionStringConvertedRange
parameter_list|(
name|HIMC
name|himc
parameter_list|,
name|int
modifier|*
name|selStart
parameter_list|,
name|int
modifier|*
name|selLength
parameter_list|)
block|{
enum|enum
block|{
name|bufferSize
init|=
literal|256
block|}
enum|;
comment|// Find the range of bytes with ATTR_TARGET_CONVERTED set.
name|char
name|attrBuffer
index|[
name|bufferSize
index|]
decl_stmt|;
operator|*
name|selStart
operator|=
operator|*
name|selLength
operator|=
literal|0
expr_stmt|;
if|if
condition|(
specifier|const
name|int
name|attrLength
init|=
name|ImmGetCompositionString
argument_list|(
name|himc
argument_list|,
name|GCS_COMPATTR
argument_list|,
name|attrBuffer
argument_list|,
name|bufferSize
argument_list|)
condition|)
block|{
name|int
name|start
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|attrLength
operator|&&
operator|!
operator|(
name|attrBuffer
index|[
name|start
index|]
operator|&
name|ATTR_TARGET_CONVERTED
operator|)
condition|)
name|start
operator|++
expr_stmt|;
if|if
condition|(
name|start
operator|<
name|attrLength
condition|)
block|{
name|int
name|end
init|=
name|start
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|end
operator|<
name|attrLength
operator|&&
operator|(
name|attrBuffer
index|[
name|end
index|]
operator|&
name|ATTR_TARGET_CONVERTED
operator|)
condition|)
name|end
operator|++
expr_stmt|;
operator|*
name|selStart
operator|=
name|start
expr_stmt|;
operator|*
name|selLength
operator|=
name|end
operator|-
name|start
expr_stmt|;
block|}
block|}
block|}
end_function
begin_enum
DECL|enum|StandardFormat
enum|enum
name|StandardFormat
block|{
DECL|enumerator|PreeditFormat
name|PreeditFormat
block|,
DECL|enumerator|SelectionFormat
name|SelectionFormat
block|}
enum|;
end_enum
begin_function
DECL|function|standardFormat
specifier|static
specifier|inline
name|QTextFormat
name|standardFormat
parameter_list|(
name|StandardFormat
name|format
parameter_list|)
block|{
name|QTextCharFormat
name|result
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|PreeditFormat
case|:
name|result
operator|.
name|setUnderlineStyle
argument_list|(
name|QTextCharFormat
operator|::
name|DashUnderline
argument_list|)
expr_stmt|;
break|break;
case|case
name|SelectionFormat
case|:
block|{
comment|// TODO: Should be that of the widget?
specifier|const
name|QPalette
name|palette
init|=
name|QGuiApplication
operator|::
name|palette
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|background
init|=
name|palette
operator|.
name|text
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|result
operator|.
name|setBackground
argument_list|(
name|QBrush
argument_list|(
name|background
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setForeground
argument_list|(
name|palette
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|startComposition
name|bool
name|QWindowsInputContext
operator|::
name|startComposition
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
block|{
name|QObject
modifier|*
name|fo
init|=
name|QGuiApplication
operator|::
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fo
condition|)
return|return
literal|false
return|;
comment|// This should always match the object.
name|QWindow
modifier|*
name|window
init|=
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
return|return
literal|false
return|;
name|qCDebug
argument_list|(
name|lcQpaInputMethods
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|fo
operator|<<
name|window
operator|<<
literal|"language="
operator|<<
name|m_languageId
expr_stmt|;
if|if
condition|(
operator|!
name|fo
operator|||
name|QWindowsWindow
operator|::
name|handleOf
argument_list|(
name|window
argument_list|)
operator|!=
name|hwnd
condition|)
return|return
literal|false
return|;
name|initContext
argument_list|(
name|hwnd
argument_list|,
name|QHighDpiScaling
operator|::
name|factor
argument_list|(
name|window
argument_list|)
argument_list|,
name|fo
argument_list|)
expr_stmt|;
name|startContextComposition
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|startContextComposition
name|void
name|QWindowsInputContext
operator|::
name|startContextComposition
parameter_list|()
block|{
if|if
condition|(
name|m_compositionContext
operator|.
name|isComposing
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Called out of sequence."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_compositionContext
operator|.
name|isComposing
operator|=
literal|true
expr_stmt|;
name|m_compositionContext
operator|.
name|composition
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_compositionContext
operator|.
name|position
operator|=
literal|0
expr_stmt|;
name|cursorRectChanged
argument_list|()
expr_stmt|;
comment|// position cursor initially.
name|update
argument_list|(
name|Qt
operator|::
name|ImQueryAll
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endContextComposition
name|void
name|QWindowsInputContext
operator|::
name|endContextComposition
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_compositionContext
operator|.
name|isComposing
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Called out of sequence."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_compositionContext
operator|.
name|composition
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_compositionContext
operator|.
name|position
operator|=
literal|0
expr_stmt|;
name|m_compositionContext
operator|.
name|isComposing
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|// Create a list of markup attributes for QInputMethodEvent
end_comment
begin_comment
comment|// to display the selected part of the intermediate composition
end_comment
begin_comment
comment|// result differently.
end_comment
begin_function
specifier|static
specifier|inline
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
DECL|function|intermediateMarkup
name|intermediateMarkup
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|compositionLength
parameter_list|,
name|int
name|selStart
parameter_list|,
name|int
name|selLength
parameter_list|)
block|{
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
if|if
condition|(
name|selStart
operator|>
literal|0
condition|)
name|attributes
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
literal|0
argument_list|,
name|selStart
argument_list|,
name|standardFormat
argument_list|(
name|PreeditFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selLength
condition|)
name|attributes
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
name|selStart
argument_list|,
name|selLength
argument_list|,
name|standardFormat
argument_list|(
name|SelectionFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selStart
operator|+
name|selLength
operator|<
name|compositionLength
condition|)
name|attributes
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
name|selStart
operator|+
name|selLength
argument_list|,
name|compositionLength
operator|-
name|selStart
operator|-
name|selLength
argument_list|,
name|standardFormat
argument_list|(
name|PreeditFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|position
operator|>=
literal|0
condition|)
name|attributes
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Cursor
argument_list|,
name|position
argument_list|,
name|selLength
condition|?
literal|0
else|:
literal|1
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|attributes
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Notify focus object about markup or final text. */
end_comment
begin_function
DECL|function|composition
name|bool
name|QWindowsInputContext
operator|::
name|composition
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|LPARAM
name|lParamIn
parameter_list|)
block|{
specifier|const
name|int
name|lParam
init|=
name|int
argument_list|(
name|lParamIn
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaInputMethods
argument_list|)
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
name|m_compositionContext
operator|.
name|focusObject
operator|<<
name|debugComposition
argument_list|(
name|lParam
argument_list|)
operator|<<
literal|" composing="
operator|<<
name|m_compositionContext
operator|.
name|isComposing
expr_stmt|;
if|if
condition|(
name|m_compositionContext
operator|.
name|focusObject
operator|.
name|isNull
argument_list|()
operator|||
name|m_compositionContext
operator|.
name|hwnd
operator|!=
name|hwnd
operator|||
operator|!
name|lParam
condition|)
return|return
literal|false
return|;
specifier|const
name|HIMC
name|himc
init|=
name|ImmGetContext
argument_list|(
name|m_compositionContext
operator|.
name|hwnd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|himc
condition|)
return|return
literal|false
return|;
name|QScopedPointer
argument_list|<
name|QInputMethodEvent
argument_list|>
name|event
decl_stmt|;
if|if
condition|(
name|lParam
operator|&
operator|(
name|GCS_COMPSTR
operator||
name|GCS_COMPATTR
operator||
name|GCS_CURSORPOS
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|m_compositionContext
operator|.
name|isComposing
condition|)
name|startContextComposition
argument_list|()
expr_stmt|;
comment|// Some intermediate composition result. Parametrize event with
comment|// attribute sequence specifying the formatting of the converted part.
name|int
name|selStart
decl_stmt|,
name|selLength
decl_stmt|;
name|m_compositionContext
operator|.
name|composition
operator|=
name|getCompositionString
argument_list|(
name|himc
argument_list|,
name|GCS_COMPSTR
argument_list|)
expr_stmt|;
name|m_compositionContext
operator|.
name|position
operator|=
name|ImmGetCompositionString
argument_list|(
name|himc
argument_list|,
name|GCS_CURSORPOS
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|getCompositionStringConvertedRange
argument_list|(
name|himc
argument_list|,
operator|&
name|selStart
argument_list|,
operator|&
name|selLength
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|lParam
operator|&
name|CS_INSERTCHAR
operator|)
operator|&&
operator|(
name|lParam
operator|&
name|CS_NOMOVECARET
operator|)
condition|)
block|{
comment|// make Korean work correctly. Hope this is correct for all IMEs
name|selStart
operator|=
literal|0
expr_stmt|;
name|selLength
operator|=
name|m_compositionContext
operator|.
name|composition
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|selLength
condition|)
name|selStart
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|reset
argument_list|(
operator|new
name|QInputMethodEvent
argument_list|(
name|m_compositionContext
operator|.
name|composition
argument_list|,
name|intermediateMarkup
argument_list|(
name|m_compositionContext
operator|.
name|position
argument_list|,
name|m_compositionContext
operator|.
name|composition
operator|.
name|size
argument_list|()
argument_list|,
name|selStart
argument_list|,
name|selLength
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|isNull
argument_list|()
condition|)
name|event
operator|.
name|reset
argument_list|(
operator|new
name|QInputMethodEvent
argument_list|)
expr_stmt|;
if|if
condition|(
name|lParam
operator|&
name|GCS_RESULTSTR
condition|)
block|{
comment|// A fixed result, return the converted string
name|event
operator|->
name|setCommitString
argument_list|(
name|getCompositionString
argument_list|(
name|himc
argument_list|,
name|GCS_RESULTSTR
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|lParam
operator|&
name|GCS_DELTASTART
operator|)
condition|)
name|endContextComposition
argument_list|()
expr_stmt|;
block|}
specifier|const
name|bool
name|result
init|=
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|m_compositionContext
operator|.
name|focusObject
argument_list|,
name|event
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaInputMethods
argument_list|)
operator|<<
literal|'<'
operator|<<
name|__FUNCTION__
operator|<<
literal|"sending markup="
operator|<<
name|event
operator|->
name|attributes
argument_list|()
operator|.
name|size
argument_list|()
operator|<<
literal|" commit="
operator|<<
name|event
operator|->
name|commitString
argument_list|()
operator|<<
literal|" to "
operator|<<
name|m_compositionContext
operator|.
name|focusObject
operator|<<
literal|" returns "
operator|<<
name|result
expr_stmt|;
name|update
argument_list|(
name|Qt
operator|::
name|ImQueryAll
argument_list|)
expr_stmt|;
name|ImmReleaseContext
argument_list|(
name|m_compositionContext
operator|.
name|hwnd
argument_list|,
name|himc
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|endComposition
name|bool
name|QWindowsInputContext
operator|::
name|endComposition
parameter_list|(
name|HWND
name|hwnd
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaInputMethods
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|m_endCompositionRecursionGuard
operator|<<
name|hwnd
expr_stmt|;
comment|// Googles Pinyin Input Method likes to call endComposition again
comment|// when we call notifyIME with CPS_CANCEL, so protect ourselves
comment|// against that.
if|if
condition|(
name|m_endCompositionRecursionGuard
operator|||
name|m_compositionContext
operator|.
name|hwnd
operator|!=
name|hwnd
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|m_compositionContext
operator|.
name|focusObject
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
name|m_endCompositionRecursionGuard
operator|=
literal|true
expr_stmt|;
name|imeNotifyCancelComposition
argument_list|(
name|m_compositionContext
operator|.
name|hwnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_compositionContext
operator|.
name|isComposing
condition|)
block|{
name|QInputMethodEvent
name|event
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|m_compositionContext
operator|.
name|focusObject
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
name|doneContext
argument_list|()
expr_stmt|;
name|m_endCompositionRecursionGuard
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|initContext
name|void
name|QWindowsInputContext
operator|::
name|initContext
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|qreal
name|factor
parameter_list|,
name|QObject
modifier|*
name|focusObject
parameter_list|)
block|{
if|if
condition|(
name|m_compositionContext
operator|.
name|hwnd
condition|)
name|doneContext
argument_list|()
expr_stmt|;
name|m_compositionContext
operator|.
name|hwnd
operator|=
name|hwnd
expr_stmt|;
name|m_compositionContext
operator|.
name|focusObject
operator|=
name|focusObject
expr_stmt|;
name|m_compositionContext
operator|.
name|factor
operator|=
name|factor
expr_stmt|;
comment|// Create a hidden caret which is kept at the microfocus
comment|// position in update(). This is important for some
comment|// Chinese input methods.
name|m_compositionContext
operator|.
name|haveCaret
operator|=
name|CreateCaret
argument_list|(
name|hwnd
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HideCaret
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|Qt
operator|::
name|ImQueryAll
argument_list|)
expr_stmt|;
name|m_compositionContext
operator|.
name|isComposing
operator|=
literal|false
expr_stmt|;
name|m_compositionContext
operator|.
name|position
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doneContext
name|void
name|QWindowsInputContext
operator|::
name|doneContext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_compositionContext
operator|.
name|hwnd
condition|)
return|return;
if|if
condition|(
name|m_compositionContext
operator|.
name|haveCaret
condition|)
name|DestroyCaret
argument_list|()
expr_stmt|;
name|m_compositionContext
operator|.
name|hwnd
operator|=
literal|0
expr_stmt|;
name|m_compositionContext
operator|.
name|composition
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_compositionContext
operator|.
name|position
operator|=
literal|0
expr_stmt|;
name|m_compositionContext
operator|.
name|isComposing
operator|=
name|m_compositionContext
operator|.
name|haveCaret
operator|=
literal|false
expr_stmt|;
name|m_compositionContext
operator|.
name|focusObject
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleIME_Request
name|bool
name|QWindowsInputContext
operator|::
name|handleIME_Request
parameter_list|(
name|WPARAM
name|wParam
parameter_list|,
name|LPARAM
name|lParam
parameter_list|,
name|LRESULT
modifier|*
name|result
parameter_list|)
block|{
switch|switch
condition|(
name|int
argument_list|(
name|wParam
argument_list|)
condition|)
block|{
case|case
name|IMR_RECONVERTSTRING
case|:
block|{
specifier|const
name|int
name|size
init|=
name|reconvertString
argument_list|(
cast|reinterpret_cast
argument_list|<
name|RECONVERTSTRING
operator|*
argument_list|>
argument_list|(
name|lParam
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
return|return
literal|false
return|;
operator|*
name|result
operator|=
name|size
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|IMR_CONFIRMRECONVERTSTRING
case|:
return|return
literal|true
return|;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|handleInputLanguageChanged
name|void
name|QWindowsInputContext
operator|::
name|handleInputLanguageChanged
parameter_list|(
name|WPARAM
name|wparam
parameter_list|,
name|LPARAM
name|lparam
parameter_list|)
block|{
specifier|const
name|LCID
name|newLanguageId
init|=
name|languageIdFromLocaleId
argument_list|(
name|WORD
argument_list|(
name|lparam
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|newLanguageId
operator|==
name|m_languageId
condition|)
return|return;
specifier|const
name|LCID
name|oldLanguageId
init|=
name|m_languageId
decl_stmt|;
name|m_languageId
operator|=
name|newLanguageId
expr_stmt|;
name|m_locale
operator|=
name|qt_localeFromLCID
argument_list|(
name|m_languageId
argument_list|)
expr_stmt|;
name|emitLocaleChanged
argument_list|()
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaInputMethods
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|hex
operator|<<
name|showbase
operator|<<
name|oldLanguageId
operator|<<
literal|"->"
operator|<<
name|newLanguageId
operator|<<
literal|"Character set:"
operator|<<
name|DWORD
argument_list|(
name|wparam
argument_list|)
operator|<<
name|dec
operator|<<
name|noshowbase
operator|<<
name|m_locale
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \brief Determines the string for reconversion with selection.      This is triggered twice by WM_IME_REQUEST, first with reconv=0     to determine the length and later with a reconv struct to obtain     the string with the position of the selection to be reconverted.      Obtains the text from the focus object and marks the word     for selection (might not be entirely correct for Japanese). */
end_comment
begin_function
DECL|function|reconvertString
name|int
name|QWindowsInputContext
operator|::
name|reconvertString
parameter_list|(
name|RECONVERTSTRING
modifier|*
name|reconv
parameter_list|)
block|{
name|QObject
modifier|*
name|fo
init|=
name|QGuiApplication
operator|::
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fo
condition|)
return|return
literal|false
return|;
specifier|const
name|QVariant
name|surroundingTextV
init|=
name|QInputMethod
operator|::
name|queryFocusObject
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|surroundingTextV
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
specifier|const
name|QString
name|surroundingText
init|=
name|surroundingTextV
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|const
name|int
name|memSize
init|=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|RECONVERTSTRING
argument_list|)
argument_list|)
operator|+
operator|(
name|surroundingText
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|)
operator|*
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaInputMethods
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|" reconv="
operator|<<
name|reconv
operator|<<
literal|" surroundingText="
operator|<<
name|surroundingText
operator|<<
literal|" size="
operator|<<
name|memSize
expr_stmt|;
comment|// If memory is not allocated, return the required size.
if|if
condition|(
operator|!
name|reconv
condition|)
return|return
name|surroundingText
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
name|memSize
return|;
specifier|const
name|QVariant
name|posV
init|=
name|QInputMethod
operator|::
name|queryFocusObject
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|,
name|QVariant
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|pos
init|=
name|posV
operator|.
name|isValid
argument_list|()
condition|?
name|posV
operator|.
name|toInt
argument_list|()
else|:
literal|0
decl_stmt|;
comment|// Find the word in the surrounding text.
name|QTextBoundaryFinder
name|bounds
argument_list|(
name|QTextBoundaryFinder
operator|::
name|Word
argument_list|,
name|surroundingText
argument_list|)
decl_stmt|;
name|bounds
operator|.
name|setPosition
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|bounds
operator|.
name|position
argument_list|()
operator|>
literal|0
operator|&&
operator|!
operator|(
name|bounds
operator|.
name|boundaryReasons
argument_list|()
operator|&
name|QTextBoundaryFinder
operator|::
name|StartOfItem
operator|)
condition|)
name|bounds
operator|.
name|toPreviousBoundary
argument_list|()
expr_stmt|;
specifier|const
name|int
name|startPos
init|=
name|bounds
operator|.
name|position
argument_list|()
decl_stmt|;
name|bounds
operator|.
name|toNextBoundary
argument_list|()
expr_stmt|;
specifier|const
name|int
name|endPos
init|=
name|bounds
operator|.
name|position
argument_list|()
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaInputMethods
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|" boundary="
operator|<<
name|startPos
operator|<<
name|endPos
expr_stmt|;
comment|// Select the text, this will be overwritten by following IME events.
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|<<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Selection
argument_list|,
name|startPos
argument_list|,
name|endPos
operator|-
name|startPos
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|selectEvent
argument_list|(
name|QString
argument_list|()
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|fo
argument_list|,
operator|&
name|selectEvent
argument_list|)
expr_stmt|;
name|reconv
operator|->
name|dwSize
operator|=
name|DWORD
argument_list|(
name|memSize
argument_list|)
expr_stmt|;
name|reconv
operator|->
name|dwVersion
operator|=
literal|0
expr_stmt|;
name|reconv
operator|->
name|dwStrLen
operator|=
name|DWORD
argument_list|(
name|surroundingText
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|reconv
operator|->
name|dwStrOffset
operator|=
sizeof|sizeof
argument_list|(
name|RECONVERTSTRING
argument_list|)
expr_stmt|;
name|reconv
operator|->
name|dwCompStrLen
operator|=
name|DWORD
argument_list|(
name|endPos
operator|-
name|startPos
argument_list|)
expr_stmt|;
comment|// TCHAR count.
name|reconv
operator|->
name|dwCompStrOffset
operator|=
name|DWORD
argument_list|(
name|startPos
argument_list|)
operator|*
sizeof|sizeof
argument_list|(
name|ushort
argument_list|)
expr_stmt|;
comment|// byte count.
name|reconv
operator|->
name|dwTargetStrLen
operator|=
name|reconv
operator|->
name|dwCompStrLen
expr_stmt|;
name|reconv
operator|->
name|dwTargetStrOffset
operator|=
name|reconv
operator|->
name|dwCompStrOffset
expr_stmt|;
name|ushort
modifier|*
name|pastReconv
init|=
cast|reinterpret_cast
argument_list|<
name|ushort
operator|*
argument_list|>
argument_list|(
name|reconv
operator|+
literal|1
argument_list|)
decl_stmt|;
name|std
operator|::
name|copy
argument_list|(
name|surroundingText
operator|.
name|utf16
argument_list|()
argument_list|,
name|surroundingText
operator|.
name|utf16
argument_list|()
operator|+
name|surroundingText
operator|.
name|size
argument_list|()
argument_list|,
name|pastReconv
argument_list|)
expr_stmt|;
return|return
name|memSize
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
