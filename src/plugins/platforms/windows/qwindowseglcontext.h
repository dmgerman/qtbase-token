begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWINDOWSEGLCONTEXT_H
end_ifndef
begin_define
DECL|macro|QWINDOWSEGLCONTEXT_H
define|#
directive|define
name|QWINDOWSEGLCONTEXT_H
end_define
begin_include
include|#
directive|include
file|"qwindowsopenglcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsopengltester.h"
end_include
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|QWindowsLibEGL
struct|struct
name|QWindowsLibEGL
block|{
name|bool
name|init
parameter_list|()
function_decl|;
DECL|member|eglGetError
name|EGLint
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglGetError
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
DECL|member|eglGetDisplay
name|EGLDisplay
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglGetDisplay
function_decl|)
parameter_list|(
name|EGLNativeDisplayType
name|display_id
parameter_list|)
function_decl|;
DECL|member|eglInitialize
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglInitialize
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
modifier|*
name|major
parameter_list|,
name|EGLint
modifier|*
name|minor
parameter_list|)
function_decl|;
DECL|member|eglTerminate
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglTerminate
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|)
function_decl|;
DECL|member|eglChooseConfig
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglChooseConfig
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|,
name|EGLConfig
modifier|*
name|configs
parameter_list|,
name|EGLint
name|config_size
parameter_list|,
name|EGLint
modifier|*
name|num_config
parameter_list|)
function_decl|;
DECL|member|eglGetConfigAttrib
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglGetConfigAttrib
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
function_decl|;
DECL|member|eglCreateWindowSurface
name|EGLSurface
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglCreateWindowSurface
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLNativeWindowType
name|win
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
function_decl|;
DECL|member|eglCreatePbufferSurface
name|EGLSurface
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglCreatePbufferSurface
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
function_decl|;
DECL|member|eglDestroySurface
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglDestroySurface
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|)
function_decl|;
DECL|member|eglBindAPI
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglBindAPI
function_decl|)
parameter_list|(
name|EGLenum
name|api
parameter_list|)
function_decl|;
DECL|member|eglSwapInterval
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglSwapInterval
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
name|interval
parameter_list|)
function_decl|;
DECL|member|eglCreateContext
name|EGLContext
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglCreateContext
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLContext
name|share_context
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
function_decl|;
DECL|member|eglDestroyContext
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglDestroyContext
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|)
function_decl|;
DECL|member|eglMakeCurrent
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglMakeCurrent
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|draw
parameter_list|,
name|EGLSurface
name|read
parameter_list|,
name|EGLContext
name|ctx
parameter_list|)
function_decl|;
DECL|member|eglGetCurrentContext
name|EGLContext
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglGetCurrentContext
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
DECL|member|eglGetCurrentSurface
name|EGLSurface
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglGetCurrentSurface
function_decl|)
parameter_list|(
name|EGLint
name|readdraw
parameter_list|)
function_decl|;
DECL|member|eglGetCurrentDisplay
name|EGLDisplay
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglGetCurrentDisplay
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
DECL|member|eglSwapBuffers
name|EGLBoolean
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglSwapBuffers
function_decl|)
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|)
function_decl|;
DECL|member|eglGetProcAddress
name|QFunctionPointer
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglGetProcAddress
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|procname
parameter_list|)
function_decl|;
DECL|member|eglGetPlatformDisplayEXT
name|EGLDisplay
function_decl|(
name|EGLAPIENTRY
modifier|*
name|eglGetPlatformDisplayEXT
function_decl|)
parameter_list|(
name|EGLenum
name|platform
parameter_list|,
name|void
modifier|*
name|native_display
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
function_decl|;
DECL|member|private
name|private
label|:
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_STATIC
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_DYNAMIC
argument_list|)
name|void
modifier|*
name|resolve
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
DECL|member|m_lib
name|HMODULE
name|m_lib
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct
begin_struct
DECL|struct|QWindowsLibGLESv2
struct|struct
name|QWindowsLibGLESv2
block|{
name|bool
name|init
parameter_list|()
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_STATIC
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_DYNAMIC
argument_list|)
DECL|function|moduleHandle
name|void
operator|*
name|moduleHandle
argument_list|()
specifier|const
block|{
return|return
name|m_lib
return|;
block|}
else|#
directive|else
DECL|function|moduleHandle
name|void
operator|*
name|moduleHandle
argument_list|()
specifier|const
block|{
return|return
name|Q_NULLPTR
return|;
block|}
endif|#
directive|endif
DECL|member|glGetString
specifier|const
name|GLubyte
modifier|*
function_decl|(
name|APIENTRY
modifier|*
name|glGetString
function_decl|)
parameter_list|(
name|GLenum
name|name
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_STATIC
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_OPENGL_DYNAMIC
argument_list|)
name|void
modifier|*
name|resolve
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
DECL|member|private
name|private
label|:
name|HMODULE
name|m_lib
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct
begin_decl_stmt
name|class
name|QWindowsEGLStaticContext
range|:
name|public
name|QWindowsStaticOpenGLContext
block|{
name|Q_DISABLE_COPY
argument_list|(
argument|QWindowsEGLStaticContext
argument_list|)
name|public
operator|:
specifier|static
name|QWindowsEGLStaticContext
operator|*
name|create
argument_list|(
argument|QWindowsOpenGLTester::Renderers preferredType
argument_list|)
block|;
operator|~
name|QWindowsEGLStaticContext
argument_list|()
block|;
name|EGLDisplay
name|display
argument_list|()
specifier|const
block|{
return|return
name|m_display
return|;
block|}
name|QWindowsOpenGLContext
operator|*
name|createContext
argument_list|(
argument|QOpenGLContext *context
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
operator|*
name|moduleHandle
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|libGLESv2
operator|.
name|moduleHandle
argument_list|()
return|;
block|}
name|QOpenGLContext
operator|::
name|OpenGLModuleType
name|moduleType
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|QOpenGLContext
operator|::
name|LibGLES
return|;
block|}
name|void
operator|*
name|createWindowSurface
argument_list|(
argument|void *nativeWindow
argument_list|,
argument|void *nativeConfig
argument_list|,
argument|int *err
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|destroyWindowSurface
argument_list|(
argument|void *nativeSurface
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QSurfaceFormat
name|formatFromConfig
argument_list|(
argument|EGLDisplay display
argument_list|,
argument|EGLConfig config
argument_list|,
argument|const QSurfaceFormat&referenceFormat
argument_list|)
block|;
specifier|static
name|QWindowsLibEGL
name|libEGL
block|;
specifier|static
name|QWindowsLibGLESv2
name|libGLESv2
block|;
name|private
operator|:
name|explicit
name|QWindowsEGLStaticContext
argument_list|(
argument|EGLDisplay display
argument_list|)
block|;
specifier|static
name|bool
name|initializeAngle
argument_list|(
argument|QWindowsOpenGLTester::Renderers preferredType
argument_list|,
argument|HDC dc
argument_list|,
argument|EGLDisplay *display
argument_list|,
argument|EGLint *major
argument_list|,
argument|EGLint *minor
argument_list|)
block|;
specifier|const
name|EGLDisplay
name|m_display
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QWindowsEGLContext
range|:
name|public
name|QWindowsOpenGLContext
block|{
name|public
operator|:
name|QWindowsEGLContext
argument_list|(
name|QWindowsEGLStaticContext
operator|*
name|staticContext
argument_list|,
specifier|const
name|QSurfaceFormat
operator|&
name|format
argument_list|,
name|QPlatformOpenGLContext
operator|*
name|share
argument_list|)
block|;
operator|~
name|QWindowsEGLContext
argument_list|()
block|;
name|bool
name|makeCurrent
argument_list|(
argument|QPlatformSurface *surface
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|doneCurrent
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|void
name|swapBuffers
argument_list|(
argument|QPlatformSurface *surface
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QFunctionPointer
name|getProcAddress
argument_list|(
argument|const char *procName
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QSurfaceFormat
name|format
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|m_format
return|;
block|}
name|bool
name|isSharing
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|m_shareContext
operator|!=
name|EGL_NO_CONTEXT
return|;
block|}
name|bool
name|isValid
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|m_eglContext
operator|!=
name|EGL_NO_CONTEXT
return|;
block|}
name|void
operator|*
name|nativeContext
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|m_eglContext
return|;
block|}
name|void
operator|*
name|nativeDisplay
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|m_eglDisplay
return|;
block|}
name|void
operator|*
name|nativeConfig
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|m_eglConfig
return|;
block|}
name|private
operator|:
name|EGLConfig
name|chooseConfig
argument_list|(
specifier|const
name|QSurfaceFormat
operator|&
name|format
argument_list|)
block|;
name|QWindowsEGLStaticContext
operator|*
name|m_staticContext
block|;
name|EGLContext
name|m_eglContext
block|;
name|EGLContext
name|m_shareContext
block|;
name|EGLDisplay
name|m_eglDisplay
block|;
name|EGLConfig
name|m_eglConfig
block|;
name|QSurfaceFormat
name|m_format
block|;
name|EGLenum
name|m_api
block|;
name|int
name|m_swapInterval
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWINDOWSEGLCONTEXT_H
end_comment
end_unit
