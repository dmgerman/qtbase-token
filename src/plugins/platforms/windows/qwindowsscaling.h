begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd and/or its subsidiary(-ies). ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWINDOWSSCALING_H
end_ifndef
begin_define
DECL|macro|QWINDOWSSCALING_H
define|#
directive|define
name|QWINDOWSSCALING_H
end_define
begin_include
include|#
directive|include
file|<QtGui/QRegion>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVector>
end_include
begin_include
include|#
directive|include
file|<QtCore/QRect>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|enum
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_CLASS_ENUM
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
type|:
name|int
endif|#
directive|endif
block|{
name|QWINDOWSIZE_MAX
operator|=
literal|16777215
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QWindowsScaling
block|{
name|public
label|:
specifier|static
name|bool
name|isActive
parameter_list|()
block|{
return|return
name|m_factor
operator|>
literal|1
return|;
block|}
specifier|static
name|int
name|factor
parameter_list|()
block|{
return|return
name|m_factor
return|;
block|}
specifier|static
name|void
name|setFactor
parameter_list|(
name|int
name|factor
parameter_list|)
block|{
name|m_factor
operator|=
name|factor
expr_stmt|;
block|}
specifier|static
name|int
name|determineUiScaleFactor
parameter_list|()
function_decl|;
comment|// Scaling helpers for size constraints.
specifier|static
name|int
name|mapToNativeConstrained
parameter_list|(
name|int
name|qt
parameter_list|)
block|{
return|return
name|m_factor
operator|!=
literal|1
operator|&&
name|qt
operator|>
literal|0
operator|&&
name|qt
operator|<
name|QWINDOWSIZE_MAX
condition|?
name|qt
operator|*
name|m_factor
else|:
name|qt
return|;
block|}
specifier|static
name|int
name|mapFromNativeConstrained
parameter_list|(
name|int
name|dp
parameter_list|)
block|{
return|return
name|m_factor
operator|!=
literal|1
operator|&&
name|dp
operator|>
literal|0
operator|&&
name|dp
operator|<
name|QWINDOWSIZE_MAX
condition|?
name|dp
operator|/
name|m_factor
else|:
name|dp
return|;
block|}
specifier|static
name|QSize
name|mapToNativeConstrained
parameter_list|(
specifier|const
name|QSize
modifier|&
name|qt
parameter_list|)
block|{
return|return
name|QSize
argument_list|(
name|mapToNativeConstrained
argument_list|(
name|qt
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|mapToNativeConstrained
argument_list|(
name|qt
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|QRect
name|mapToNative
parameter_list|(
specifier|const
name|QRect
modifier|&
name|qRect
parameter_list|)
block|{
return|return
name|QRect
argument_list|(
name|qRect
operator|.
name|x
argument_list|()
operator|*
name|m_factor
argument_list|,
name|qRect
operator|.
name|y
argument_list|()
operator|*
name|m_factor
argument_list|,
name|qRect
operator|.
name|width
argument_list|()
operator|*
name|m_factor
argument_list|,
name|qRect
operator|.
name|height
argument_list|()
operator|*
name|m_factor
argument_list|)
return|;
block|}
specifier|static
name|QRect
name|mapFromNative
parameter_list|(
specifier|const
name|QRect
modifier|&
name|dp
parameter_list|)
block|{
return|return
name|isActive
argument_list|()
condition|?
name|QRect
argument_list|(
name|dp
operator|.
name|x
argument_list|()
operator|/
name|m_factor
argument_list|,
name|dp
operator|.
name|y
argument_list|()
operator|/
name|m_factor
argument_list|,
operator|(
name|dp
operator|.
name|width
argument_list|()
operator|+
literal|1
operator|)
operator|/
name|m_factor
argument_list|,
operator|(
name|dp
operator|.
name|height
argument_list|()
operator|+
literal|1
operator|)
operator|/
name|m_factor
argument_list|)
else|:
name|dp
return|;
block|}
specifier|static
name|QRegion
name|mapToNative
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|regionQt
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QWindowsScaling
operator|::
name|isActive
argument_list|()
operator|||
name|regionQt
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|regionQt
return|;
name|QRegion
name|result
decl_stmt|;
name|foreach
argument_list|(
argument|const QRect&rectQt
argument_list|,
argument|regionQt.rects()
argument_list|)
name|result
operator|+=
name|QWindowsScaling
operator|::
name|mapToNative
argument_list|(
name|rectQt
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|static
name|QRegion
name|mapFromNative
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|regionDp
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QWindowsScaling
operator|::
name|isActive
argument_list|()
operator|||
name|regionDp
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|regionDp
return|;
name|QRegion
name|result
decl_stmt|;
name|foreach
argument_list|(
argument|const QRect&rectDp
argument_list|,
argument|regionDp.rects()
argument_list|)
name|result
operator|+=
name|QWindowsScaling
operator|::
name|mapFromNative
argument_list|(
name|rectDp
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|private
label|:
specifier|static
name|int
name|m_factor
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWINDOWSSCALING_H
end_comment
end_unit
