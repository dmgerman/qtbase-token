begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsdialoghelpers.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowstheme.h"
end_include
begin_comment
comment|// Color conversion helpers
end_comment
begin_include
include|#
directive|include
file|<QtWidgets/QColorDialog>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QFontDialog>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QFileDialog>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QColor>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QRegExp>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTimer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedArrayPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSharedPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThread>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|"qtwindows_additional.h"
end_include
begin_define
DECL|macro|STRICT_TYPED_ITEMIDS
define|#
directive|define
name|STRICT_TYPED_ITEMIDS
end_define
begin_include
include|#
directive|include
file|<shlobj.h>
end_include
begin_include
include|#
directive|include
file|<shlwapi.h>
end_include
begin_comment
comment|// #define USE_NATIVE_COLOR_DIALOG /* Testing purposes only */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_MINGW
end_ifdef
begin_comment
comment|/* Add missing declarations for MinGW */
end_comment
begin_comment
comment|/* Constants obtained by running the below stream operator for  * CLSID, IID on the constants in the Windows SDK libraries. */
end_comment
begin_decl_stmt
DECL|variable|IID_IFileOpenDialog
specifier|static
specifier|const
name|IID
name|IID_IFileOpenDialog
init|=
block|{
literal|0xd57c7288
block|,
literal|0xd4ad
block|,
literal|0x4768
block|,
block|{
literal|0xbe
block|,
literal|0x02
block|,
literal|0x9d
block|,
literal|0x96
block|,
literal|0x95
block|,
literal|0x32
block|,
literal|0xd9
block|,
literal|0x60
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IID_IFileSaveDialog
specifier|static
specifier|const
name|IID
name|IID_IFileSaveDialog
init|=
block|{
literal|0x84bccd23
block|,
literal|0x5fde
block|,
literal|0x4cdb
block|,
block|{
literal|0xae
block|,
literal|0xa4
block|,
literal|0xaf
block|,
literal|0x64
block|,
literal|0xb8
block|,
literal|0x3d
block|,
literal|0x78
block|,
literal|0xab
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|__MINGW64_VERSION_MAJOR
end_ifdef
begin_decl_stmt
DECL|variable|q_IID_IShellItem
specifier|static
specifier|const
name|IID
name|q_IID_IShellItem
init|=
block|{
literal|0x43826d1e
block|,
literal|0xe718
block|,
literal|0x42ee
block|,
block|{
literal|0xbc
block|,
literal|0x55
block|,
literal|0xa1
block|,
literal|0xe2
block|,
literal|0x61
block|,
literal|0xc3
block|,
literal|0x7b
block|,
literal|0xfe
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|IID_IShellItem
define|#
directive|define
name|IID_IShellItem
value|q_IID_IShellItem
end_define
begin_else
else|#
directive|else
end_else
begin_decl_stmt
DECL|variable|IID_IShellItem
specifier|static
specifier|const
name|IID
name|IID_IShellItem
init|=
block|{
literal|0x43826d1e
block|,
literal|0xe718
block|,
literal|0x42ee
block|,
block|{
literal|0xbc
block|,
literal|0x55
block|,
literal|0xa1
block|,
literal|0xe2
block|,
literal|0x61
block|,
literal|0xc3
block|,
literal|0x7b
block|,
literal|0xfe
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|IID_IFileDialogEvents
specifier|static
specifier|const
name|IID
name|IID_IFileDialogEvents
init|=
block|{
literal|0x973510db
block|,
literal|0x7d7f
block|,
literal|0x452b
block|,
block|{
literal|0x89
block|,
literal|0x75
block|,
literal|0x74
block|,
literal|0xa8
block|,
literal|0x58
block|,
literal|0x28
block|,
literal|0xd3
block|,
literal|0x54
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|CLSID_FileOpenDialog
specifier|static
specifier|const
name|CLSID
name|CLSID_FileOpenDialog
init|=
block|{
literal|0xdc1c5a9c
block|,
literal|0xe88a
block|,
literal|0x4dde
block|,
block|{
literal|0xa5
block|,
literal|0xa1
block|,
literal|0x60
block|,
literal|0xf8
block|,
literal|0x2a
block|,
literal|0x20
block|,
literal|0xae
block|,
literal|0xf7
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|CLSID_FileSaveDialog
specifier|static
specifier|const
name|CLSID
name|CLSID_FileSaveDialog
init|=
block|{
literal|0xc0b4e2f3
block|,
literal|0xba21
block|,
literal|0x4773
block|,
block|{
literal|0x8d
block|,
literal|0xba
block|,
literal|0x33
block|,
literal|0x5e
block|,
literal|0xc9
block|,
literal|0x46
block|,
literal|0xeb
block|,
literal|0x8b
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|struct|_COMDLG_FILTERSPEC
typedef|typedef
struct|struct
name|_COMDLG_FILTERSPEC
block|{
DECL|member|pszName
name|LPCWSTR
name|pszName
decl_stmt|;
DECL|member|pszSpec
name|LPCWSTR
name|pszSpec
decl_stmt|;
block|}
DECL|typedef|COMDLG_FILTERSPEC
name|COMDLG_FILTERSPEC
typedef|;
end_typedef
begin_define
DECL|macro|FOS_OVERWRITEPROMPT
define|#
directive|define
name|FOS_OVERWRITEPROMPT
value|0x2
end_define
begin_define
DECL|macro|FOS_STRICTFILETYPES
define|#
directive|define
name|FOS_STRICTFILETYPES
value|0x4
end_define
begin_define
DECL|macro|FOS_NOCHANGEDIR
define|#
directive|define
name|FOS_NOCHANGEDIR
value|0x8
end_define
begin_define
DECL|macro|FOS_PICKFOLDERS
define|#
directive|define
name|FOS_PICKFOLDERS
value|0x20
end_define
begin_define
DECL|macro|FOS_FORCEFILESYSTEM
define|#
directive|define
name|FOS_FORCEFILESYSTEM
value|0x40
end_define
begin_define
DECL|macro|FOS_ALLNONSTORAGEITEMS
define|#
directive|define
name|FOS_ALLNONSTORAGEITEMS
value|0x80
end_define
begin_define
DECL|macro|FOS_NOVALIDATE
define|#
directive|define
name|FOS_NOVALIDATE
value|0x100
end_define
begin_define
DECL|macro|FOS_ALLOWMULTISELECT
define|#
directive|define
name|FOS_ALLOWMULTISELECT
value|0x200
end_define
begin_define
DECL|macro|FOS_PATHMUSTEXIST
define|#
directive|define
name|FOS_PATHMUSTEXIST
value|0x800
end_define
begin_define
DECL|macro|FOS_FILEMUSTEXIST
define|#
directive|define
name|FOS_FILEMUSTEXIST
value|0x1000
end_define
begin_define
DECL|macro|FOS_CREATEPROMPT
define|#
directive|define
name|FOS_CREATEPROMPT
value|0x2000
end_define
begin_define
DECL|macro|FOS_SHAREAWARE
define|#
directive|define
name|FOS_SHAREAWARE
value|0x4000
end_define
begin_define
DECL|macro|FOS_NOREADONLYRETURN
define|#
directive|define
name|FOS_NOREADONLYRETURN
value|0x8000
end_define
begin_define
DECL|macro|FOS_NOTESTFILECREATE
define|#
directive|define
name|FOS_NOTESTFILECREATE
value|0x10000
end_define
begin_define
DECL|macro|FOS_HIDEMRUPLACES
define|#
directive|define
name|FOS_HIDEMRUPLACES
value|0x20000
end_define
begin_define
DECL|macro|FOS_HIDEPINNEDPLACES
define|#
directive|define
name|FOS_HIDEPINNEDPLACES
value|0x40000
end_define
begin_define
DECL|macro|FOS_NODEREFERENCELINKS
define|#
directive|define
name|FOS_NODEREFERENCELINKS
value|0x100000
end_define
begin_define
DECL|macro|FOS_DONTADDTORECENT
define|#
directive|define
name|FOS_DONTADDTORECENT
value|0x2000000
end_define
begin_define
DECL|macro|FOS_FORCESHOWHIDDEN
define|#
directive|define
name|FOS_FORCESHOWHIDDEN
value|0x10000000
end_define
begin_define
DECL|macro|FOS_DEFAULTNOMINIMODE
define|#
directive|define
name|FOS_DEFAULTNOMINIMODE
value|0x20000000
end_define
begin_define
DECL|macro|FOS_FORCEPREVIEWPANEON
define|#
directive|define
name|FOS_FORCEPREVIEWPANEON
value|0x40000000
end_define
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__MINGW64_VERSION_MAJOR
argument_list|)
operator|||
operator|(
name|__MINGW64_VERSION_MAJOR
operator|<
literal|2
operator|)
end_if
begin_typedef
DECL|typedef|GETPROPERTYSTOREFLAGS
typedef|typedef
name|int
name|GETPROPERTYSTOREFLAGS
typedef|;
end_typedef
begin_define
DECL|macro|GPS_DEFAULT
define|#
directive|define
name|GPS_DEFAULT
value|0x00000000
end_define
begin_define
DECL|macro|GPS_HANDLERPROPERTIESONLY
define|#
directive|define
name|GPS_HANDLERPROPERTIESONLY
value|0x00000001
end_define
begin_define
DECL|macro|GPS_READWRITE
define|#
directive|define
name|GPS_READWRITE
value|0x00000002
end_define
begin_define
DECL|macro|GPS_TEMPORARY
define|#
directive|define
name|GPS_TEMPORARY
value|0x00000004
end_define
begin_define
DECL|macro|GPS_FASTPROPERTIESONLY
define|#
directive|define
name|GPS_FASTPROPERTIESONLY
value|0x00000008
end_define
begin_define
DECL|macro|GPS_OPENSLOWITEM
define|#
directive|define
name|GPS_OPENSLOWITEM
value|0x00000010
end_define
begin_define
DECL|macro|GPS_DELAYCREATION
define|#
directive|define
name|GPS_DELAYCREATION
value|0x00000020
end_define
begin_define
DECL|macro|GPS_BESTEFFORT
define|#
directive|define
name|GPS_BESTEFFORT
value|0x00000040
end_define
begin_define
DECL|macro|GPS_MASK_VALID
define|#
directive|define
name|GPS_MASK_VALID
value|0x0000007F
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|BFFCALLBACK
typedef|typedef
name|int
function_decl|(
name|QT_WIN_CALLBACK
modifier|*
name|BFFCALLBACK
function_decl|)
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|UINT
name|uMsg
parameter_list|,
name|LPARAM
name|lParam
parameter_list|,
name|LPARAM
name|lpData
parameter_list|)
function_decl|;
end_typedef
begin_comment
comment|// message from browser
end_comment
begin_define
DECL|macro|BFFM_INITIALIZED
define|#
directive|define
name|BFFM_INITIALIZED
value|1
end_define
begin_define
DECL|macro|BFFM_SELCHANGED
define|#
directive|define
name|BFFM_SELCHANGED
value|2
end_define
begin_define
DECL|macro|BFFM_ENABLEOK
define|#
directive|define
name|BFFM_ENABLEOK
value|(WM_USER + 101)
end_define
begin_comment
comment|// Browsing for directory.
end_comment
begin_define
DECL|macro|BIF_NONEWFOLDERBUTTON
define|#
directive|define
name|BIF_NONEWFOLDERBUTTON
value|0x0200
end_define
begin_define
DECL|macro|BIF_NOTRANSLATETARGETS
define|#
directive|define
name|BIF_NOTRANSLATETARGETS
value|0x0400
end_define
begin_define
DECL|macro|BIF_BROWSEFORCOMPUTER
define|#
directive|define
name|BIF_BROWSEFORCOMPUTER
value|0x1000
end_define
begin_define
DECL|macro|BIF_BROWSEFORPRINTER
define|#
directive|define
name|BIF_BROWSEFORPRINTER
value|0x2000
end_define
begin_define
DECL|macro|BIF_BROWSEINCLUDEFILES
define|#
directive|define
name|BIF_BROWSEINCLUDEFILES
value|0x4000
end_define
begin_define
DECL|macro|BIF_SHAREABLE
define|#
directive|define
name|BIF_SHAREABLE
value|0x8000
end_define
begin_comment
comment|//the enums
end_comment
begin_typedef
typedef|typedef
enum|enum
block|{
DECL|enumerator|SIATTRIBFLAGS_AND
name|SIATTRIBFLAGS_AND
init|=
literal|0x1
block|,
DECL|enumerator|SIATTRIBFLAGS_OR
name|SIATTRIBFLAGS_OR
init|=
literal|0x2
block|,
DECL|enumerator|SIATTRIBFLAGS_APPCOMPAT
name|SIATTRIBFLAGS_APPCOMPAT
init|=
literal|0x3
block|,
DECL|enumerator|SIATTRIBFLAGS_MASK
name|SIATTRIBFLAGS_MASK
init|=
literal|0x3
block|}
DECL|typedef|SIATTRIBFLAGS
name|SIATTRIBFLAGS
typedef|;
end_typedef
begin_ifndef
ifndef|#
directive|ifndef
name|__MINGW64_VERSION_MAJOR
end_ifndef
begin_typedef
typedef|typedef
enum|enum
block|{
DECL|enumerator|SIGDN_NORMALDISPLAY
name|SIGDN_NORMALDISPLAY
init|=
literal|0x00000000
block|,
DECL|enumerator|SIGDN_PARENTRELATIVEPARSING
name|SIGDN_PARENTRELATIVEPARSING
init|=
literal|0x80018001
block|,
DECL|enumerator|SIGDN_PARENTRELATIVEFORADDRESSBAR
name|SIGDN_PARENTRELATIVEFORADDRESSBAR
init|=
literal|0x8001c001
block|,
DECL|enumerator|SIGDN_DESKTOPABSOLUTEPARSING
name|SIGDN_DESKTOPABSOLUTEPARSING
init|=
literal|0x80028000
block|,
DECL|enumerator|SIGDN_PARENTRELATIVEEDITING
name|SIGDN_PARENTRELATIVEEDITING
init|=
literal|0x80031001
block|,
DECL|enumerator|SIGDN_DESKTOPABSOLUTEEDITING
name|SIGDN_DESKTOPABSOLUTEEDITING
init|=
literal|0x8004c000
block|,
DECL|enumerator|SIGDN_FILESYSPATH
name|SIGDN_FILESYSPATH
init|=
literal|0x80058000
block|,
DECL|enumerator|SIGDN_URL
name|SIGDN_URL
init|=
literal|0x80068000
block|}
DECL|typedef|SIGDN
name|SIGDN
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
typedef|typedef
enum|enum
block|{
DECL|enumerator|FDAP_BOTTOM
name|FDAP_BOTTOM
init|=
literal|0x00000000
block|,
DECL|enumerator|FDAP_TOP
name|FDAP_TOP
init|=
literal|0x00000001
block|}
DECL|typedef|FDAP
name|FDAP
typedef|;
end_typedef
begin_typedef
typedef|typedef
enum|enum
block|{
DECL|enumerator|FDESVR_DEFAULT
name|FDESVR_DEFAULT
init|=
literal|0x00000000
block|,
DECL|enumerator|FDESVR_ACCEPT
name|FDESVR_ACCEPT
init|=
literal|0x00000001
block|,
DECL|enumerator|FDESVR_REFUSE
name|FDESVR_REFUSE
init|=
literal|0x00000002
block|}
DECL|typedef|FDE_SHAREVIOLATION_RESPONSE
name|FDE_SHAREVIOLATION_RESPONSE
typedef|;
end_typedef
begin_typedef
DECL|typedef|FDE_OVERWRITE_RESPONSE
typedef|typedef
name|FDE_SHAREVIOLATION_RESPONSE
name|FDE_OVERWRITE_RESPONSE
typedef|;
end_typedef
begin_comment
comment|//the structs
end_comment
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|pszName
name|LPCWSTR
name|pszName
decl_stmt|;
DECL|member|pszSpec
name|LPCWSTR
name|pszSpec
decl_stmt|;
block|}
DECL|typedef|qt_COMDLG_FILTERSPEC
name|qt_COMDLG_FILTERSPEC
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|fmtid
name|GUID
name|fmtid
decl_stmt|;
DECL|member|pid
name|DWORD
name|pid
decl_stmt|;
block|}
DECL|typedef|qt_PROPERTYKEY
name|qt_PROPERTYKEY
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|cb
name|USHORT
name|cb
decl_stmt|;
DECL|member|abID
name|BYTE
name|abID
index|[
literal|1
index|]
decl_stmt|;
block|}
DECL|typedef|qt_SHITEMID
DECL|typedef|qt_LPSHITEMID
name|qt_SHITEMID
operator|,
typedef|*
name|qt_LPSHITEMID
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|mkid
name|qt_SHITEMID
name|mkid
decl_stmt|;
block|}
DECL|typedef|qt_ITEMIDLIST
DECL|typedef|qt_LPITEMIDLIST
name|qt_ITEMIDLIST
operator|,
typedef|*
name|qt_LPITEMIDLIST
typedef|;
end_typedef
begin_typedef
DECL|typedef|qt_LPCITEMIDLIST
typedef|typedef
specifier|const
name|qt_ITEMIDLIST
modifier|*
name|qt_LPCITEMIDLIST
typedef|;
end_typedef
begin_typedef
typedef|typedef
struct|struct
block|{
DECL|member|hwndOwner
name|HWND
name|hwndOwner
decl_stmt|;
DECL|member|pidlRoot
name|qt_LPCITEMIDLIST
name|pidlRoot
decl_stmt|;
DECL|member|pszDisplayName
name|LPWSTR
name|pszDisplayName
decl_stmt|;
DECL|member|lpszTitle
name|LPCWSTR
name|lpszTitle
decl_stmt|;
DECL|member|ulFlags
name|UINT
name|ulFlags
decl_stmt|;
DECL|member|lpfn
name|BFFCALLBACK
name|lpfn
decl_stmt|;
DECL|member|lParam
name|LPARAM
name|lParam
decl_stmt|;
DECL|member|iImage
name|int
name|iImage
decl_stmt|;
block|}
DECL|typedef|qt_BROWSEINFO
name|qt_BROWSEINFO
typedef|;
end_typedef
begin_expr_stmt
DECL|variable|IFileDialogEvents
name|DECLARE_INTERFACE
argument_list|(
name|IFileDialogEvents
argument_list|)
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|__MINGW64_VERSION_MAJOR
end_ifndef
begin_macro
DECL|function|DECLARE_INTERFACE_
name|DECLARE_INTERFACE_
argument_list|(
argument|IShellItem
argument_list|,
argument|IUnknown
argument_list|)
end_macro
begin_block
block|{
name|STDMETHOD
function_decl|(
name|BindToHandler
function_decl|)
parameter_list|(
name|THIS_
name|IBindCtx
modifier|*
name|pbc
parameter_list|,
name|REFGUID
name|bhid
parameter_list|,
name|REFIID
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|ppv
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetParent
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
modifier|*
name|ppsi
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetDisplayName
function_decl|)
parameter_list|(
name|THIS_
name|SIGDN
name|sigdnName
parameter_list|,
name|LPWSTR
modifier|*
name|ppszName
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetAttributes
function_decl|)
parameter_list|(
name|THIS_
name|ULONG
name|sfgaoMask
parameter_list|,
name|ULONG
modifier|*
name|psfgaoAttribs
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|Compare
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
name|psi
parameter_list|,
name|DWORD
name|hint
parameter_list|,
name|int
modifier|*
name|piOrder
parameter_list|)
name|PURE
function_decl|;
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
DECL|function|DECLARE_INTERFACE_
name|DECLARE_INTERFACE_
argument_list|(
argument|IShellItemFilter
argument_list|,
argument|IUnknown
argument_list|)
end_macro
begin_block
block|{
name|STDMETHOD
function_decl|(
name|IncludeItem
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
name|psi
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetEnumFlagsForItem
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
name|psi
parameter_list|,
name|DWORD
modifier|*
name|pgrfFlags
parameter_list|)
name|PURE
function_decl|;
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
DECL|function|DECLARE_INTERFACE_
name|DECLARE_INTERFACE_
argument_list|(
argument|IEnumShellItems
argument_list|,
argument|IUnknown
argument_list|)
end_macro
begin_block
block|{
name|STDMETHOD
function_decl|(
name|Next
function_decl|)
parameter_list|(
name|THIS_
name|ULONG
name|celt
parameter_list|,
name|IShellItem
modifier|*
modifier|*
name|rgelt
parameter_list|,
name|ULONG
modifier|*
name|pceltFetched
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|Skip
function_decl|)
parameter_list|(
name|THIS_
name|ULONG
name|celt
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|Reset
function_decl|)
parameter_list|(
name|THIS_
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|Clone
function_decl|)
parameter_list|(
name|THIS_
name|IEnumShellItems
modifier|*
modifier|*
name|ppenum
parameter_list|)
name|PURE
function_decl|;
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
DECL|function|DECLARE_INTERFACE_
name|DECLARE_INTERFACE_
argument_list|(
argument|IShellItemArray
argument_list|,
argument|IUnknown
argument_list|)
end_macro
begin_block
block|{
name|STDMETHOD
function_decl|(
name|BindToHandler
function_decl|)
parameter_list|(
name|THIS_
name|IBindCtx
modifier|*
name|pbc
parameter_list|,
name|REFGUID
name|rbhid
parameter_list|,
name|REFIID
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|ppvOut
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetPropertyStore
function_decl|)
parameter_list|(
name|THIS_
name|GETPROPERTYSTOREFLAGS
name|flags
parameter_list|,
name|REFIID
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|ppv
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetPropertyDescriptionList
function_decl|)
parameter_list|(
name|THIS_
specifier|const
name|qt_PROPERTYKEY
modifier|*
name|keyType
parameter_list|,
name|REFIID
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|ppv
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetAttributes
function_decl|)
parameter_list|(
name|THIS_
name|SIATTRIBFLAGS
name|dwAttribFlags
parameter_list|,
name|ULONG
name|sfgaoMask
parameter_list|,
name|ULONG
modifier|*
name|psfgaoAttribs
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetCount
function_decl|)
parameter_list|(
name|THIS_
name|DWORD
modifier|*
name|pdwNumItems
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetItemAt
function_decl|)
parameter_list|(
name|THIS_
name|DWORD
name|dwIndex
parameter_list|,
name|IShellItem
modifier|*
modifier|*
name|ppsi
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|EnumItems
function_decl|)
parameter_list|(
name|THIS_
name|IEnumShellItems
modifier|*
modifier|*
name|ppenumShellItems
parameter_list|)
name|PURE
function_decl|;
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|__MINGW64_VERSION_MAJOR
end_ifndef
begin_macro
DECL|function|DECLARE_INTERFACE_
name|DECLARE_INTERFACE_
argument_list|(
argument|IModalWindow
argument_list|,
argument|IUnknown
argument_list|)
end_macro
begin_block
block|{
name|STDMETHOD
function_decl|(
name|Show
function_decl|)
parameter_list|(
name|THIS_
name|HWND
name|hwndParent
parameter_list|)
name|PURE
function_decl|;
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
DECL|function|DECLARE_INTERFACE_
name|DECLARE_INTERFACE_
argument_list|(
argument|IFileDialog
argument_list|,
argument|IModalWindow
argument_list|)
end_macro
begin_block
block|{
name|STDMETHOD
function_decl|(
name|SetFileTypes
function_decl|)
parameter_list|(
name|THIS_
name|UINT
name|cFileTypes
parameter_list|,
specifier|const
name|COMDLG_FILTERSPEC
modifier|*
name|rgFilterSpec
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetFileTypeIndex
function_decl|)
parameter_list|(
name|THIS_
name|UINT
name|iFileType
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetFileTypeIndex
function_decl|)
parameter_list|(
name|THIS_
name|UINT
modifier|*
name|piFileType
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|Advise
function_decl|)
parameter_list|(
name|THIS_
name|IFileDialogEvents
modifier|*
name|pfde
parameter_list|,
name|DWORD
modifier|*
name|pdwCookie
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|Unadvise
function_decl|)
parameter_list|(
name|THIS_
name|DWORD
name|dwCookie
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetOptions
function_decl|)
parameter_list|(
name|THIS_
name|DWORD
name|fos
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetOptions
function_decl|)
parameter_list|(
name|THIS_
name|DWORD
modifier|*
name|pfos
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetDefaultFolder
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
name|psi
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetFolder
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
name|psi
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetFolder
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
modifier|*
name|ppsi
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetCurrentSelection
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
modifier|*
name|ppsi
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetFileName
function_decl|)
parameter_list|(
name|THIS_
name|LPCWSTR
name|pszName
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetFileName
function_decl|)
parameter_list|(
name|THIS_
name|LPWSTR
modifier|*
name|pszName
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetTitle
function_decl|)
parameter_list|(
name|THIS_
name|LPCWSTR
name|pszTitle
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetOkButtonLabel
function_decl|)
parameter_list|(
name|THIS_
name|LPCWSTR
name|pszText
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetFileNameLabel
function_decl|)
parameter_list|(
name|THIS_
name|LPCWSTR
name|pszLabel
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetResult
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
modifier|*
name|ppsi
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|AddPlace
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
name|psi
parameter_list|,
name|FDAP
name|fdap
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetDefaultExtension
function_decl|)
parameter_list|(
name|THIS_
name|LPCWSTR
name|pszDefaultExtension
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|Close
function_decl|)
parameter_list|(
name|THIS_
name|HRESULT
name|hr
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetClientGuid
function_decl|)
parameter_list|(
name|THIS_
name|REFGUID
name|guid
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|ClearClientData
function_decl|)
parameter_list|(
name|THIS_
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetFilter
function_decl|)
parameter_list|(
name|THIS_
name|IShellItemFilter
modifier|*
name|pFilter
parameter_list|)
name|PURE
function_decl|;
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
DECL|function|DECLARE_INTERFACE_
name|DECLARE_INTERFACE_
argument_list|(
argument|IFileDialogEvents
argument_list|,
argument|IUnknown
argument_list|)
end_macro
begin_block
block|{
name|STDMETHOD
function_decl|(
name|OnFileOk
function_decl|)
parameter_list|(
name|THIS_
name|IFileDialog
modifier|*
name|pfd
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|OnFolderChanging
function_decl|)
parameter_list|(
name|THIS_
name|IFileDialog
modifier|*
name|pfd
parameter_list|,
name|IShellItem
modifier|*
name|psiFolder
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|OnFolderChange
function_decl|)
parameter_list|(
name|THIS_
name|IFileDialog
modifier|*
name|pfd
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|OnSelectionChange
function_decl|)
parameter_list|(
name|THIS_
name|IFileDialog
modifier|*
name|pfd
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|OnShareViolation
function_decl|)
parameter_list|(
name|THIS_
name|IFileDialog
modifier|*
name|pfd
parameter_list|,
name|IShellItem
modifier|*
name|psi
parameter_list|,
name|FDE_SHAREVIOLATION_RESPONSE
modifier|*
name|pResponse
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|OnTypeChange
function_decl|)
parameter_list|(
name|THIS_
name|IFileDialog
modifier|*
name|pfd
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|OnOverwrite
function_decl|)
parameter_list|(
name|THIS_
name|IFileDialog
modifier|*
name|pfd
parameter_list|,
name|IShellItem
modifier|*
name|psi
parameter_list|,
name|FDE_OVERWRITE_RESPONSE
modifier|*
name|pResponse
parameter_list|)
name|PURE
function_decl|;
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
DECL|function|DECLARE_INTERFACE_
name|DECLARE_INTERFACE_
argument_list|(
argument|IFileOpenDialog
argument_list|,
argument|IFileDialog
argument_list|)
end_macro
begin_block
block|{
name|STDMETHOD
function_decl|(
name|GetResults
function_decl|)
parameter_list|(
name|THIS_
name|IShellItemArray
modifier|*
modifier|*
name|ppenum
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetSelectedItems
function_decl|)
parameter_list|(
name|THIS_
name|IShellItemArray
modifier|*
modifier|*
name|ppsai
parameter_list|)
name|PURE
function_decl|;
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__MINGW64_VERSION_MAJOR
argument_list|)
operator|||
operator|(
name|__MINGW64_VERSION_MAJOR
operator|<
literal|2
operator|)
end_if
begin_typedef
DECL|typedef|IPropertyStore
typedef|typedef
name|IUnknown
name|IPropertyStore
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|IFileOperationProgressSink
typedef|typedef
name|IUnknown
name|IFileOperationProgressSink
typedef|;
end_typedef
begin_macro
DECL|function|DECLARE_INTERFACE_
name|DECLARE_INTERFACE_
argument_list|(
argument|IFileSaveDialog
argument_list|,
argument|IFileDialog
argument_list|)
end_macro
begin_block
block|{
public|public:
name|STDMETHOD
function_decl|(
name|SetSaveAsItem
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
name|psi
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetProperties
function_decl|)
parameter_list|(
name|THIS_
name|IPropertyStore
modifier|*
name|pStore
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|SetCollectedProperties
function_decl|)
parameter_list|(
name|THIS_
name|IPropertyStore
modifier|*
name|pStore
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|GetProperties
function_decl|)
parameter_list|(
name|THIS_
name|IPropertyStore
modifier|*
modifier|*
name|ppStore
parameter_list|)
name|PURE
function_decl|;
name|STDMETHOD
function_decl|(
name|ApplyProperties
function_decl|)
parameter_list|(
name|THIS_
name|IShellItem
modifier|*
name|psi
parameter_list|,
name|IPropertyStore
modifier|*
name|pStore
parameter_list|,
name|HWND
name|hwnd
parameter_list|,
name|IFileOperationProgressSink
modifier|*
name|pSink
parameter_list|)
name|PURE
function_decl|;
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_CC_MINGW
end_comment
begin_function
name|QT_BEGIN_NAMESPACE
comment|/* Output UID (IID, CLSID) as C++ constants.  * The constants are contained in the Windows SDK libs, but not for MinGW. */
DECL|function|guidToString
specifier|static
specifier|inline
name|QString
name|guidToString
parameter_list|(
specifier|const
name|GUID
modifier|&
name|g
parameter_list|)
block|{
name|QString
name|rc
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|rc
argument_list|)
decl_stmt|;
name|str
operator|.
name|setIntegerBase
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|str
operator|.
name|setNumberFlags
argument_list|(
name|str
operator|.
name|numberFlags
argument_list|()
operator||
name|QTextStream
operator|::
name|ShowBase
argument_list|)
expr_stmt|;
name|str
operator|<<
literal|'{'
operator|<<
name|g
operator|.
name|Data1
operator|<<
literal|", "
operator|<<
name|g
operator|.
name|Data2
operator|<<
literal|", "
operator|<<
name|g
operator|.
name|Data3
expr_stmt|;
name|str
operator|.
name|setFieldWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|str
operator|.
name|setFieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|str
operator|.
name|setPadChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|<<
literal|",{"
operator|<<
name|g
operator|.
name|Data4
index|[
literal|0
index|]
operator|<<
literal|", "
operator|<<
name|g
operator|.
name|Data4
index|[
literal|1
index|]
operator|<<
literal|", "
operator|<<
name|g
operator|.
name|Data4
index|[
literal|2
index|]
operator|<<
literal|", "
operator|<<
name|g
operator|.
name|Data4
index|[
literal|3
index|]
operator|<<
literal|", "
operator|<<
name|g
operator|.
name|Data4
index|[
literal|4
index|]
operator|<<
literal|", "
operator|<<
name|g
operator|.
name|Data4
index|[
literal|5
index|]
operator|<<
literal|", "
operator|<<
name|g
operator|.
name|Data4
index|[
literal|6
index|]
operator|<<
literal|", "
operator|<<
name|g
operator|.
name|Data4
index|[
literal|7
index|]
operator|<<
literal|"}};"
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function
begin_function
DECL|function|operator <<
specifier|inline
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|GUID
modifier|&
name|g
parameter_list|)
block|{
name|d
operator|.
name|nospace
argument_list|()
operator|<<
name|guidToString
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_namespace
DECL|namespace|QWindowsDialogs
namespace|namespace
name|QWindowsDialogs
block|{
comment|/*!     \fn eatMouseMove()      After closing a windows dialog with a double click (i.e. open a file)     the message queue still contains a dubious WM_MOUSEMOVE message where     the left button is reported to be down (wParam != 0).     remove all those messages (usually 1) and post the last one with a     reset button state.      \ingroup qt-lighthouse-win */
DECL|function|eatMouseMove
name|void
name|eatMouseMove
parameter_list|()
block|{
name|MSG
name|msg
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
while|while
condition|(
name|PeekMessage
argument_list|(
operator|&
name|msg
argument_list|,
literal|0
argument_list|,
name|WM_MOUSEMOVE
argument_list|,
name|WM_MOUSEMOVE
argument_list|,
name|PM_REMOVE
argument_list|)
condition|)
empty_stmt|;
if|if
condition|(
name|msg
operator|.
name|message
operator|==
name|WM_MOUSEMOVE
condition|)
name|PostMessage
argument_list|(
name|msg
operator|.
name|hwnd
argument_list|,
name|msg
operator|.
name|message
argument_list|,
literal|0
argument_list|,
name|msg
operator|.
name|lParam
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|"%s triggered=%d"
argument_list|,
name|__FUNCTION__
argument_list|,
name|msg
operator|.
name|message
operator|==
name|WM_MOUSEMOVE
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace QWindowsDialogs
end_comment
begin_comment
comment|/*!     \class QWindowsNativeDialogBase     \brief Base class for Windows native dialogs.      Base clases for native dialogs that mimick the     behaviour of their QDialog counterparts as close as     possible.      A major difference is that there is only an exec(), which     is a modal, blocking call; there is no non-blocking show().     There 2 types of native dialogs:      \list     \li Dialogs provided by the Comdlg32 library (ChooseColor,        ChooseFont). They only provide a modal, blocking        function call (with idle processing).     \li File dialogs are classes derived from IFileDialog. They        inherit IModalWindow and their exec() method (calling        IModalWindow::Show()) is similarly blocking, but methods        like close() can be called on them from event handlers.     \endlist      \ingroup qt-lighthouse-win */
end_comment
begin_class
DECL|class|QWindowsNativeDialogBase
class|class
name|QWindowsNativeDialogBase
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
specifier|virtual
name|void
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|void
name|exec
parameter_list|(
name|HWND
name|owner
init|=
literal|0
parameter_list|)
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|QPlatformDialogHelper
operator|::
name|DialogCode
name|result
parameter_list|()
specifier|const
function_decl|=
literal|0
function_decl|;
signals|signals:
name|void
name|accepted
parameter_list|()
function_decl|;
name|void
name|rejected
parameter_list|()
function_decl|;
public|public
name|slots
public|:
specifier|virtual
name|void
name|close
parameter_list|()
function_decl|=
literal|0
function_decl|;
protected|protected:
DECL|function|QWindowsNativeDialogBase
name|QWindowsNativeDialogBase
parameter_list|()
block|{}
block|}
class|;
end_class
begin_comment
comment|/*!     \class QWindowsDialogHelperBase     \brief Helper for native Windows dialogs.      Provides basic functionality and introduces new virtuals.     The native dialog is created in setVisible_sys() since     then modality and the state of DontUseNativeDialog is known.      Modal dialogs are then started via the platformNativeDialogModalHelp(),     platformNativeDialogModalHelp() slots.     Non-modal dialogs are shown using a separate thread should     they support it.      \sa QWindowsDialogThread     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
template|template
parameter_list|<
name|class
name|BaseClass
parameter_list|>
DECL|function|QWindowsDialogHelperBase
name|QWindowsDialogHelperBase
argument_list|<
name|BaseClass
argument_list|>
operator|::
name|QWindowsDialogHelperBase
parameter_list|()
member_init_list|:
name|m_nativeDialog
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_ownerWindow
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
template|template
parameter_list|<
name|class
name|BaseClass
parameter_list|>
DECL|function|nativeDialog
name|QWindowsNativeDialogBase
modifier|*
name|QWindowsDialogHelperBase
argument_list|<
name|BaseClass
argument_list|>
operator|::
name|nativeDialog
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_nativeDialog
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s invoked with no native dialog present."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|m_nativeDialog
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|BaseClass
parameter_list|>
DECL|function|ensureNativeDialog
name|QWindowsNativeDialogBase
modifier|*
name|QWindowsDialogHelperBase
argument_list|<
name|BaseClass
argument_list|>
operator|::
name|ensureNativeDialog
parameter_list|()
block|{
comment|// Create dialog and apply common settings.
if|if
condition|(
operator|!
name|m_nativeDialog
condition|)
name|m_nativeDialog
operator|=
name|createNativeDialog
argument_list|()
expr_stmt|;
return|return
name|m_nativeDialog
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|BaseClass
parameter_list|>
DECL|function|deleteNativeDialog
name|void
name|QWindowsDialogHelperBase
argument_list|<
name|BaseClass
argument_list|>
operator|::
name|deleteNativeDialog
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
operator|delete
name|m_nativeDialog
expr_stmt|;
name|m_nativeDialog
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsDialogThread     \brief Run a non-modal native dialog in a separate thread.      \sa QWindowsDialogHelperBase     \ingroup qt-lighthouse-win */
end_comment
begin_class
DECL|class|QWindowsDialogThread
class|class
name|QWindowsDialogThread
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|function|QWindowsDialogThread
name|QWindowsDialogThread
parameter_list|(
name|QWindowsNativeDialogBase
modifier|*
name|dialog
parameter_list|,
name|HWND
name|owner
init|=
literal|0
parameter_list|)
member_init_list|:
name|m_dialog
argument_list|(
name|dialog
argument_list|)
member_init_list|,
name|m_owner
argument_list|(
name|owner
argument_list|)
block|{}
name|void
name|run
parameter_list|()
function_decl|;
private|private:
DECL|member|m_dialog
name|QWindowsNativeDialogBase
modifier|*
name|m_dialog
decl_stmt|;
DECL|member|m_owner
specifier|const
name|HWND
name|m_owner
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|run
name|void
name|QWindowsDialogThread
operator|::
name|run
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|">%s"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|m_dialog
operator|->
name|exec
argument_list|(
name|m_owner
argument_list|)
expr_stmt|;
name|deleteLater
argument_list|()
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|"<%s"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|BaseClass
parameter_list|>
DECL|function|show
name|bool
name|QWindowsDialogHelperBase
argument_list|<
name|BaseClass
argument_list|>
operator|::
name|show
parameter_list|(
name|Qt
operator|::
name|WindowFlags
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|windowModality
parameter_list|,
name|QWindow
modifier|*
name|parent
parameter_list|)
block|{
specifier|const
name|bool
name|modal
init|=
operator|(
name|windowModality
operator|==
name|Qt
operator|::
name|ApplicationModal
operator|)
decl_stmt|;
if|if
condition|(
name|parent
condition|)
block|{
name|m_ownerWindow
operator|=
name|QWindowsWindow
operator|::
name|handleOf
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_ownerWindow
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|"%s modal=%d native=%p parent=%p"
argument_list|,
name|__FUNCTION__
argument_list|,
name|modal
argument_list|,
name|m_nativeDialog
argument_list|,
name|m_ownerWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|modal
operator|&&
operator|!
name|supportsNonModalDialog
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Was it changed in-between?
if|if
condition|(
operator|!
name|ensureNativeDialog
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|modal
condition|)
block|{
comment|// Modal dialogs are shown in separate slot.
name|QWindowsDialogThread
modifier|*
name|thread
init|=
operator|new
name|QWindowsDialogThread
argument_list|(
name|m_nativeDialog
argument_list|,
name|m_ownerWindow
argument_list|)
decl_stmt|;
name|thread
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|BaseClass
parameter_list|>
DECL|function|hide
name|void
name|QWindowsDialogHelperBase
argument_list|<
name|BaseClass
argument_list|>
operator|::
name|hide
parameter_list|()
block|{
if|if
condition|(
name|m_nativeDialog
condition|)
name|m_nativeDialog
operator|->
name|close
argument_list|()
expr_stmt|;
name|m_ownerWindow
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|BaseClass
parameter_list|>
DECL|function|exec
name|void
name|QWindowsDialogHelperBase
argument_list|<
name|BaseClass
argument_list|>
operator|::
name|exec
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsNativeDialogBase
modifier|*
name|nd
init|=
name|nativeDialog
argument_list|()
condition|)
name|nd
operator|->
name|exec
argument_list|(
name|m_ownerWindow
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|snapToDefaultButtonHint
specifier|static
specifier|inline
name|bool
name|snapToDefaultButtonHint
parameter_list|()
block|{
name|BOOL
name|snapToDefault
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|SPI_GETSNAPTODEFBUTTON
argument_list|,
literal|0
argument_list|,
operator|&
name|snapToDefault
argument_list|,
literal|0
argument_list|)
condition|)
return|return
name|snapToDefault
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|BaseClass
parameter_list|>
DECL|function|styleHint
name|QVariant
name|QWindowsDialogHelperBase
argument_list|<
name|BaseClass
argument_list|>
operator|::
name|styleHint
parameter_list|(
name|QPlatformDialogHelper
operator|::
name|StyleHint
name|hint
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|QPlatformDialogHelper
operator|::
name|SnapToDefaultButton
case|:
return|return
name|QVariant
argument_list|(
name|snapToDefaultButtonHint
argument_list|()
argument_list|)
return|;
block|}
return|return
name|BaseClass
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsNativeFileDialogEventHandler     \brief Listens to IFileDialog events and forwards them to QWindowsNativeFileDialogBase      Events like 'folder change' that have an equivalent signal     in QFileDialog are forwarded.      \sa QWindowsNativeFileDialogBase, QWindowsFileDialogHelper      \ingroup qt-lighthouse-win */
end_comment
begin_class_decl
class_decl|class
name|QWindowsNativeFileDialogBase
class_decl|;
end_class_decl
begin_class
DECL|class|QWindowsNativeFileDialogEventHandler
class|class
name|QWindowsNativeFileDialogEventHandler
super|:
specifier|public
name|IFileDialogEvents
block|{
public|public:
specifier|static
name|IFileDialogEvents
modifier|*
name|create
parameter_list|(
name|QWindowsNativeFileDialogBase
modifier|*
name|nativeFileDialog
parameter_list|)
function_decl|;
comment|// IUnknown methods
DECL|function|QueryInterface
name|IFACEMETHODIMP
name|QueryInterface
parameter_list|(
name|REFIID
name|riid
parameter_list|,
name|void
modifier|*
modifier|*
name|ppv
parameter_list|)
block|{
if|if
condition|(
name|riid
operator|!=
name|IID_IUnknown
operator|&&
name|riid
operator|!=
name|IID_IFileDialogEvents
condition|)
block|{
operator|*
name|ppv
operator|=
name|NULL
expr_stmt|;
return|return
name|ResultFromScode
argument_list|(
name|E_NOINTERFACE
argument_list|)
return|;
block|}
operator|*
name|ppv
operator|=
name|this
expr_stmt|;
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|NOERROR
return|;
block|}
DECL|function|AddRef
name|IFACEMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
name|AddRef
parameter_list|()
block|{
return|return
name|InterlockedIncrement
argument_list|(
operator|&
name|m_ref
argument_list|)
return|;
block|}
DECL|function|Release
name|IFACEMETHODIMP_
argument_list|(
argument|ULONG
argument_list|)
name|Release
parameter_list|()
block|{
specifier|const
name|long
name|ref
init|=
name|InterlockedDecrement
argument_list|(
operator|&
name|m_ref
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ref
condition|)
operator|delete
name|this
expr_stmt|;
return|return
name|ref
return|;
block|}
comment|// IFileDialogEvents methods
DECL|function|OnFileOk
name|IFACEMETHODIMP
name|OnFileOk
parameter_list|(
name|IFileDialog
modifier|*
parameter_list|)
block|{
return|return
name|S_OK
return|;
block|}
DECL|function|OnFolderChange
name|IFACEMETHODIMP
name|OnFolderChange
parameter_list|(
name|IFileDialog
modifier|*
parameter_list|)
block|{
return|return
name|S_OK
return|;
block|}
name|IFACEMETHODIMP
name|OnFolderChanging
parameter_list|(
name|IFileDialog
modifier|*
parameter_list|,
name|IShellItem
modifier|*
parameter_list|)
function_decl|;
DECL|function|OnHelp
name|IFACEMETHODIMP
name|OnHelp
parameter_list|(
name|IFileDialog
modifier|*
parameter_list|)
block|{
return|return
name|S_OK
return|;
block|}
name|IFACEMETHODIMP
name|OnSelectionChange
parameter_list|(
name|IFileDialog
modifier|*
parameter_list|)
function_decl|;
DECL|function|OnShareViolation
name|IFACEMETHODIMP
name|OnShareViolation
parameter_list|(
name|IFileDialog
modifier|*
parameter_list|,
name|IShellItem
modifier|*
parameter_list|,
name|FDE_SHAREVIOLATION_RESPONSE
modifier|*
parameter_list|)
block|{
return|return
name|S_OK
return|;
block|}
name|IFACEMETHODIMP
name|OnTypeChange
parameter_list|(
name|IFileDialog
modifier|*
parameter_list|)
function_decl|;
DECL|function|OnOverwrite
name|IFACEMETHODIMP
name|OnOverwrite
parameter_list|(
name|IFileDialog
modifier|*
parameter_list|,
name|IShellItem
modifier|*
parameter_list|,
name|FDE_OVERWRITE_RESPONSE
modifier|*
parameter_list|)
block|{
return|return
name|S_OK
return|;
block|}
DECL|function|QWindowsNativeFileDialogEventHandler
name|QWindowsNativeFileDialogEventHandler
parameter_list|(
name|QWindowsNativeFileDialogBase
modifier|*
name|nativeFileDialog
parameter_list|)
member_init_list|:
name|m_ref
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|m_nativeFileDialog
argument_list|(
name|nativeFileDialog
argument_list|)
block|{}
DECL|function|~QWindowsNativeFileDialogEventHandler
name|~
name|QWindowsNativeFileDialogEventHandler
parameter_list|()
block|{}
private|private:
DECL|member|m_ref
name|long
name|m_ref
decl_stmt|;
DECL|member|m_nativeFileDialog
name|QWindowsNativeFileDialogBase
modifier|*
name|m_nativeFileDialog
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|create
name|IFileDialogEvents
modifier|*
name|QWindowsNativeFileDialogEventHandler
operator|::
name|create
parameter_list|(
name|QWindowsNativeFileDialogBase
modifier|*
name|nativeFileDialog
parameter_list|)
block|{
name|IFileDialogEvents
modifier|*
name|result
decl_stmt|;
name|QWindowsNativeFileDialogEventHandler
modifier|*
name|eventHandler
init|=
operator|new
name|QWindowsNativeFileDialogEventHandler
argument_list|(
name|nativeFileDialog
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|eventHandler
operator|->
name|QueryInterface
argument_list|(
name|IID_IFileDialogEvents
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|result
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: Unable to obtain IFileDialogEvents"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|eventHandler
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsNativeFileDialogBase     \brief Windows native file dialog wrapper around IFileOpenDialog, IFileSaveDialog.      Provides convenience methods.     Note that only IFileOpenDialog has multi-file functionality.      \sa QWindowsNativeFileDialogEventHandler, QWindowsFileDialogHelper     \ingroup qt-lighthouse-win */
end_comment
begin_class
DECL|class|QWindowsNativeFileDialogBase
class|class
name|QWindowsNativeFileDialogBase
super|:
specifier|public
name|QWindowsNativeDialogBase
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|bool
name|hideFiltersDetails
name|READ
name|hideFiltersDetails
name|WRITE
name|setHideFiltersDetails
parameter_list|)
specifier|public
private|:
name|~
name|QWindowsNativeFileDialogBase
parameter_list|()
destructor_decl|;
specifier|inline
specifier|static
name|QWindowsNativeFileDialogBase
modifier|*
name|create
parameter_list|(
name|QFileDialogOptions
operator|::
name|AcceptMode
name|am
parameter_list|)
function_decl|;
specifier|virtual
name|void
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setMode
parameter_list|(
name|QFileDialogOptions
operator|::
name|FileMode
name|mode
parameter_list|,
name|QFileDialogOptions
operator|::
name|FileDialogOptions
name|options
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|directory
parameter_list|)
function_decl|;
specifier|inline
name|QString
name|directory
parameter_list|()
specifier|const
function_decl|;
specifier|virtual
name|void
name|exec
parameter_list|(
name|HWND
name|owner
init|=
literal|0
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setNameFilters
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|f
parameter_list|)
function_decl|;
specifier|inline
name|void
name|selectNameFilter
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
function_decl|;
specifier|inline
name|QString
name|selectedNameFilter
parameter_list|()
specifier|const
function_decl|;
DECL|function|hideFiltersDetails
name|bool
name|hideFiltersDetails
parameter_list|()
specifier|const
block|{
return|return
name|m_hideFiltersDetails
return|;
block|}
DECL|function|setHideFiltersDetails
name|void
name|setHideFiltersDetails
parameter_list|(
name|bool
name|h
parameter_list|)
block|{
name|m_hideFiltersDetails
operator|=
name|h
expr_stmt|;
block|}
name|void
name|setDefaultSuffix
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setLabelText
parameter_list|(
name|QFileDialogOptions
operator|::
name|DialogLabel
name|l
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
DECL|function|result
specifier|virtual
name|QPlatformDialogHelper
operator|::
name|DialogCode
name|result
parameter_list|()
specifier|const
block|{
return|return
name|fileResult
argument_list|()
return|;
block|}
specifier|virtual
name|QPlatformDialogHelper
operator|::
name|DialogCode
name|fileResult
parameter_list|(
name|QStringList
modifier|*
name|fileResult
init|=
literal|0
parameter_list|)
specifier|const
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|QStringList
name|selectedFiles
parameter_list|()
specifier|const
function_decl|=
literal|0
function_decl|;
specifier|inline
name|void
name|onFolderChange
parameter_list|(
name|IShellItem
modifier|*
parameter_list|)
function_decl|;
specifier|inline
name|void
name|onSelectionChange
parameter_list|()
function_decl|;
specifier|inline
name|void
name|onTypeChange
parameter_list|()
function_decl|;
signals|signals:
name|void
name|directoryEntered
parameter_list|(
specifier|const
name|QString
modifier|&
name|directory
parameter_list|)
function_decl|;
name|void
name|currentChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
function_decl|;
name|void
name|filterSelected
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
function_decl|;
public|public
name|slots
public|:
DECL|function|close
specifier|virtual
name|void
name|close
parameter_list|()
block|{
name|m_fileDialog
operator|->
name|Close
argument_list|(
name|S_OK
argument_list|)
expr_stmt|;
block|}
protected|protected:
name|QWindowsNativeFileDialogBase
parameter_list|()
constructor_decl|;
name|bool
name|init
parameter_list|(
specifier|const
name|CLSID
modifier|&
name|clsId
parameter_list|,
specifier|const
name|IID
modifier|&
name|iid
parameter_list|)
function_decl|;
DECL|function|fileDialog
specifier|inline
name|IFileDialog
modifier|*
name|fileDialog
parameter_list|()
specifier|const
block|{
return|return
name|m_fileDialog
return|;
block|}
specifier|static
name|QString
name|itemPath
parameter_list|(
name|IShellItem
modifier|*
name|item
parameter_list|)
function_decl|;
specifier|static
name|int
name|itemPaths
parameter_list|(
name|IShellItemArray
modifier|*
name|items
parameter_list|,
name|QStringList
modifier|*
name|fileResult
init|=
literal|0
parameter_list|)
function_decl|;
specifier|static
name|IShellItem
modifier|*
name|shellItem
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
function_decl|;
private|private:
DECL|member|m_fileDialog
name|IFileDialog
modifier|*
name|m_fileDialog
decl_stmt|;
DECL|member|m_dialogEvents
name|IFileDialogEvents
modifier|*
name|m_dialogEvents
decl_stmt|;
DECL|member|m_cookie
name|DWORD
name|m_cookie
decl_stmt|;
DECL|member|m_nameFilters
name|QStringList
name|m_nameFilters
decl_stmt|;
DECL|member|m_hideFiltersDetails
name|bool
name|m_hideFiltersDetails
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWindowsNativeFileDialogBase
name|QWindowsNativeFileDialogBase
operator|::
name|QWindowsNativeFileDialogBase
parameter_list|()
member_init_list|:
name|m_fileDialog
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_dialogEvents
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_cookie
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_hideFiltersDetails
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWindowsNativeFileDialogBase
name|QWindowsNativeFileDialogBase
operator|::
name|~
name|QWindowsNativeFileDialogBase
parameter_list|()
block|{
if|if
condition|(
name|m_dialogEvents
operator|&&
name|m_fileDialog
condition|)
name|m_fileDialog
operator|->
name|Unadvise
argument_list|(
name|m_cookie
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_dialogEvents
condition|)
name|m_dialogEvents
operator|->
name|Release
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_fileDialog
condition|)
name|m_fileDialog
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|bool
name|QWindowsNativeFileDialogBase
operator|::
name|init
parameter_list|(
specifier|const
name|CLSID
modifier|&
name|clsId
parameter_list|,
specifier|const
name|IID
modifier|&
name|iid
parameter_list|)
block|{
name|HRESULT
name|hr
init|=
name|CoCreateInstance
argument_list|(
name|clsId
argument_list|,
name|NULL
argument_list|,
name|CLSCTX_INPROC_SERVER
argument_list|,
name|iid
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|m_fileDialog
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: CoCreateInstance failed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|m_dialogEvents
operator|=
name|QWindowsNativeFileDialogEventHandler
operator|::
name|create
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_dialogEvents
condition|)
return|return
literal|false
return|;
comment|// Register event handler
name|hr
operator|=
name|m_fileDialog
operator|->
name|Advise
argument_list|(
name|m_dialogEvents
argument_list|,
operator|&
name|m_cookie
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"%s: IFileDialog::Advise failed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|"%s %p %p cookie=%lu"
argument_list|,
name|__FUNCTION__
argument_list|,
name|m_fileDialog
argument_list|,
name|m_dialogEvents
argument_list|,
name|m_cookie
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setWindowTitle
name|void
name|QWindowsNativeFileDialogBase
operator|::
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|m_fileDialog
operator|->
name|SetTitle
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shellItem
name|IShellItem
modifier|*
name|QWindowsNativeFileDialogBase
operator|::
name|shellItem
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|shell32dll
operator|.
name|sHCreateItemFromParsingName
condition|)
block|{
name|IShellItem
modifier|*
name|result
init|=
literal|0
decl_stmt|;
specifier|const
name|QString
name|native
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|const
name|HRESULT
name|hr
init|=
name|QWindowsContext
operator|::
name|shell32dll
operator|.
name|sHCreateItemFromParsingName
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|native
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|IID_IShellItem
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|result
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|result
return|;
block|}
name|qErrnoWarning
argument_list|(
literal|"%s: SHCreateItemFromParsingName()) failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setDirectory
name|void
name|QWindowsNativeFileDialogBase
operator|::
name|setDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|directory
parameter_list|)
block|{
if|if
condition|(
name|IShellItem
modifier|*
name|psi
init|=
name|QWindowsNativeFileDialogBase
operator|::
name|shellItem
argument_list|(
name|directory
argument_list|)
condition|)
block|{
name|m_fileDialog
operator|->
name|SetFolder
argument_list|(
name|psi
argument_list|)
expr_stmt|;
name|psi
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|directory
name|QString
name|QWindowsNativeFileDialogBase
operator|::
name|directory
parameter_list|()
specifier|const
block|{
name|IShellItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|m_fileDialog
operator|&&
name|SUCCEEDED
argument_list|(
name|m_fileDialog
operator|->
name|GetFolder
argument_list|(
operator|&
name|item
argument_list|)
argument_list|)
operator|&&
name|item
condition|)
return|return
name|QWindowsNativeFileDialogBase
operator|::
name|itemPath
argument_list|(
name|item
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|exec
name|void
name|QWindowsNativeFileDialogBase
operator|::
name|exec
parameter_list|(
name|HWND
name|owner
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|">%s on %p"
argument_list|,
name|__FUNCTION__
argument_list|,
operator|(
name|void
operator|*
operator|)
name|owner
argument_list|)
expr_stmt|;
specifier|const
name|HRESULT
name|hr
init|=
name|m_fileDialog
operator|->
name|Show
argument_list|(
name|owner
argument_list|)
decl_stmt|;
name|QWindowsDialogs
operator|::
name|eatMouseMove
argument_list|()
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|"<%s returns 0x%lx"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
if|if
condition|(
name|hr
operator|==
name|S_OK
condition|)
block|{
emit|emit
name|accepted
argument_list|()
emit|;
block|}
else|else
block|{
emit|emit
name|rejected
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|setMode
name|void
name|QWindowsNativeFileDialogBase
operator|::
name|setMode
parameter_list|(
name|QFileDialogOptions
operator|::
name|FileMode
name|mode
parameter_list|,
name|QFileDialogOptions
operator|::
name|FileDialogOptions
name|options
parameter_list|)
block|{
name|DWORD
name|flags
init|=
name|FOS_PATHMUSTEXIST
operator||
name|FOS_FORCESHOWHIDDEN
decl_stmt|;
if|if
condition|(
name|options
operator|&
name|QFileDialogOptions
operator|::
name|DontResolveSymlinks
condition|)
name|flags
operator||=
name|FOS_NODEREFERENCELINKS
expr_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|QFileDialogOptions
operator|::
name|AnyFile
case|:
name|flags
operator||=
name|FOS_NOREADONLYRETURN
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|options
operator|&
name|QFileDialogOptions
operator|::
name|DontConfirmOverwrite
operator|)
condition|)
name|flags
operator||=
name|FOS_OVERWRITEPROMPT
expr_stmt|;
break|break;
case|case
name|QFileDialogOptions
operator|::
name|ExistingFile
case|:
name|flags
operator||=
name|FOS_FILEMUSTEXIST
expr_stmt|;
break|break;
case|case
name|QFileDialogOptions
operator|::
name|Directory
case|:
case|case
name|QFileDialogOptions
operator|::
name|DirectoryOnly
case|:
name|flags
operator||=
name|FOS_PICKFOLDERS
operator||
name|FOS_FILEMUSTEXIST
expr_stmt|;
break|break;
case|case
name|QFileDialogOptions
operator|::
name|ExistingFiles
case|:
name|flags
operator||=
name|FOS_FILEMUSTEXIST
operator||
name|FOS_ALLOWMULTISELECT
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|" mode="
operator|<<
name|mode
operator|<<
literal|" options"
operator|<<
name|options
operator|<<
literal|" results in 0x"
operator|<<
name|flags
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|m_fileDialog
operator|->
name|SetOptions
argument_list|(
name|flags
argument_list|)
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
literal|"%s: SetOptions() failed"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemPath
name|QString
name|QWindowsNativeFileDialogBase
operator|::
name|itemPath
parameter_list|(
name|IShellItem
modifier|*
name|item
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|LPWSTR
name|name
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|item
operator|->
name|GetDisplayName
argument_list|(
name|SIGDN_FILESYSPATH
argument_list|,
operator|&
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|CoTaskMemFree
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|itemPaths
name|int
name|QWindowsNativeFileDialogBase
operator|::
name|itemPaths
parameter_list|(
name|IShellItemArray
modifier|*
name|items
parameter_list|,
name|QStringList
modifier|*
name|result
comment|/* = 0 */
parameter_list|)
block|{
name|DWORD
name|itemCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|result
condition|)
name|result
operator|->
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|items
operator|->
name|GetCount
argument_list|(
operator|&
name|itemCount
argument_list|)
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|result
operator|&&
name|itemCount
condition|)
block|{
name|result
operator|->
name|reserve
argument_list|(
name|itemCount
argument_list|)
expr_stmt|;
for|for
control|(
name|DWORD
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemCount
condition|;
operator|++
name|i
control|)
block|{
name|IShellItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|items
operator|->
name|GetItemAt
argument_list|(
name|i
argument_list|,
operator|&
name|item
argument_list|)
argument_list|)
condition|)
name|result
operator|->
name|push_back
argument_list|(
name|QWindowsNativeFileDialogBase
operator|::
name|itemPath
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|itemCount
return|;
block|}
end_function
begin_comment
comment|// Copy a string to an Utf16 buffer.
end_comment
begin_function
DECL|function|toBuffer
specifier|static
specifier|inline
name|void
name|toBuffer
parameter_list|(
specifier|const
name|QString
modifier|&
name|what
parameter_list|,
name|WCHAR
modifier|*
modifier|*
name|ptr
parameter_list|)
block|{
specifier|const
name|int
name|length
init|=
literal|1
operator|+
name|what
operator|.
name|size
argument_list|()
decl_stmt|;
name|memcpy
argument_list|(
operator|*
name|ptr
argument_list|,
name|what
operator|.
name|utf16
argument_list|()
argument_list|,
name|length
operator|*
sizeof|sizeof
argument_list|(
name|WCHAR
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|ptr
operator|+=
name|length
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNameFilters
name|void
name|QWindowsNativeFileDialogBase
operator|::
name|setNameFilters
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|filters
parameter_list|)
block|{
comment|/* Populates an array of COMDLG_FILTERSPEC from list of filters,      * store the strings in a flat, contiguous buffer. */
name|m_nameFilters
operator|=
name|filters
expr_stmt|;
specifier|const
name|int
name|size
init|=
name|filters
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|totalStringLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|totalStringLength
operator|+=
name|filters
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|QScopedArrayPointer
argument_list|<
name|WCHAR
argument_list|>
name|buffer
argument_list|(
operator|new
name|WCHAR
index|[
name|totalStringLength
operator|*
literal|2
operator|+
literal|2
operator|*
name|size
index|]
argument_list|)
decl_stmt|;
name|QScopedArrayPointer
argument_list|<
name|COMDLG_FILTERSPEC
argument_list|>
name|comFilterSpec
argument_list|(
operator|new
name|COMDLG_FILTERSPEC
index|[
name|size
index|]
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|matchesAll
init|=
name|QStringLiteral
argument_list|(
literal|" (*)"
argument_list|)
decl_stmt|;
specifier|const
name|QRegExp
name|filterSeparatorRE
argument_list|(
name|QStringLiteral
argument_list|(
literal|"; *"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|separator
init|=
name|QStringLiteral
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|filterSeparatorRE
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|WCHAR
modifier|*
name|ptr
init|=
name|buffer
operator|.
name|data
argument_list|()
decl_stmt|;
comment|// Split filter specification as 'Texts (*.txt[;] *.doc)'
comment|// into description and filters specification as '*.txt;*.doc'
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|filterString
init|=
name|filters
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|int
name|openingParenPos
init|=
name|filterString
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|int
name|closingParenPos
init|=
name|openingParenPos
operator|!=
operator|-
literal|1
condition|?
name|filterString
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
argument_list|,
name|openingParenPos
operator|+
literal|1
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
name|QString
name|filterSpec
init|=
name|closingParenPos
operator|==
operator|-
literal|1
condition|?
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'*'
argument_list|)
argument_list|)
else|:
name|filterString
operator|.
name|mid
argument_list|(
name|openingParenPos
operator|+
literal|1
argument_list|,
name|closingParenPos
operator|-
name|openingParenPos
operator|-
literal|1
argument_list|)
decl_stmt|;
name|filterSpec
operator|.
name|replace
argument_list|(
name|filterSeparatorRE
argument_list|,
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_hideFiltersDetails
condition|)
block|{
comment|// Do not show pattern in description
if|if
condition|(
name|openingParenPos
operator|!=
operator|-
literal|1
condition|)
block|{
name|filterString
operator|.
name|truncate
argument_list|(
name|openingParenPos
argument_list|)
expr_stmt|;
while|while
condition|(
name|filterString
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
condition|)
name|filterString
operator|.
name|truncate
argument_list|(
name|filterString
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Display glitch: 'All files (*)' shows up as 'All files (*) (*)'
if|if
condition|(
name|filterString
operator|.
name|endsWith
argument_list|(
name|matchesAll
argument_list|)
condition|)
name|filterString
operator|.
name|truncate
argument_list|(
name|filterString
operator|.
name|size
argument_list|()
operator|-
name|matchesAll
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add to buffer.
name|comFilterSpec
index|[
name|i
index|]
operator|.
name|pszName
operator|=
name|ptr
expr_stmt|;
name|toBuffer
argument_list|(
name|filterString
argument_list|,
operator|&
name|ptr
argument_list|)
expr_stmt|;
name|comFilterSpec
index|[
name|i
index|]
operator|.
name|pszSpec
operator|=
name|ptr
expr_stmt|;
name|toBuffer
argument_list|(
name|filterSpec
argument_list|,
operator|&
name|ptr
argument_list|)
expr_stmt|;
block|}
name|m_fileDialog
operator|->
name|SetFileTypes
argument_list|(
name|size
argument_list|,
name|comFilterSpec
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDefaultSuffix
name|void
name|QWindowsNativeFileDialogBase
operator|::
name|setDefaultSuffix
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
name|wchar_t
modifier|*
name|wSuffix
init|=
cast|const_cast
argument_list|<
name|wchar_t
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|s
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|m_fileDialog
operator|->
name|SetDefaultExtension
argument_list|(
name|wSuffix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setLabelText
name|void
name|QWindowsNativeFileDialogBase
operator|::
name|setLabelText
parameter_list|(
name|QFileDialogOptions
operator|::
name|DialogLabel
name|l
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|wchar_t
modifier|*
name|wText
init|=
cast|const_cast
argument_list|<
name|wchar_t
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|text
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|l
condition|)
block|{
break|break;
case|case
name|QFileDialogOptions
operator|::
name|FileName
case|:
name|m_fileDialog
operator|->
name|SetFileNameLabel
argument_list|(
name|wText
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFileDialogOptions
operator|::
name|Accept
case|:
name|m_fileDialog
operator|->
name|SetOkButtonLabel
argument_list|(
name|wText
argument_list|)
expr_stmt|;
break|break;
case|case
name|QFileDialogOptions
operator|::
name|LookIn
case|:
case|case
name|QFileDialogOptions
operator|::
name|Reject
case|:
case|case
name|QFileDialogOptions
operator|::
name|FileType
case|:
case|case
name|QFileDialogOptions
operator|::
name|DialogLabelCount
case|:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|selectNameFilter
name|void
name|QWindowsNativeFileDialogBase
operator|::
name|selectNameFilter
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
specifier|const
name|int
name|index
init|=
name|m_nameFilters
operator|.
name|indexOf
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|m_fileDialog
operator|->
name|SetFileTypeIndex
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// one-based.
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"%s: Invalid parameter '%s' not found in '%s'."
argument_list|,
name|__FUNCTION__
argument_list|,
name|qPrintable
argument_list|(
name|filter
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|m_nameFilters
operator|.
name|join
argument_list|(
name|QStringLiteral
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|selectedNameFilter
name|QString
name|QWindowsNativeFileDialogBase
operator|::
name|selectedNameFilter
parameter_list|()
specifier|const
block|{
name|UINT
name|uIndex
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|m_fileDialog
operator|->
name|GetFileTypeIndex
argument_list|(
operator|&
name|uIndex
argument_list|)
argument_list|)
condition|)
block|{
specifier|const
name|int
name|index
init|=
name|uIndex
operator|-
literal|1
decl_stmt|;
comment|// one-based
if|if
condition|(
name|index
operator|<
name|m_nameFilters
operator|.
name|size
argument_list|()
condition|)
return|return
name|m_nameFilters
operator|.
name|at
argument_list|(
name|index
argument_list|)
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|onFolderChange
name|void
name|QWindowsNativeFileDialogBase
operator|::
name|onFolderChange
parameter_list|(
name|IShellItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
condition|)
block|{
specifier|const
name|QString
name|directory
init|=
name|QWindowsNativeFileDialogBase
operator|::
name|itemPath
argument_list|(
name|item
argument_list|)
decl_stmt|;
emit|emit
name|directoryEntered
argument_list|(
name|directory
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|onSelectionChange
name|void
name|QWindowsNativeFileDialogBase
operator|::
name|onSelectionChange
parameter_list|()
block|{
specifier|const
name|QStringList
name|current
init|=
name|selectedFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
emit|emit
name|currentChanged
argument_list|(
name|current
operator|.
name|front
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|onTypeChange
name|void
name|QWindowsNativeFileDialogBase
operator|::
name|onTypeChange
parameter_list|()
block|{
emit|emit
name|filterSelected
argument_list|(
name|selectedNameFilter
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|OnFolderChanging
name|HRESULT
name|QWindowsNativeFileDialogEventHandler
operator|::
name|OnFolderChanging
parameter_list|(
name|IFileDialog
modifier|*
parameter_list|,
name|IShellItem
modifier|*
name|item
parameter_list|)
block|{
name|m_nativeFileDialog
operator|->
name|onFolderChange
argument_list|(
name|item
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|OnSelectionChange
name|HRESULT
name|QWindowsNativeFileDialogEventHandler
operator|::
name|OnSelectionChange
parameter_list|(
name|IFileDialog
modifier|*
parameter_list|)
block|{
name|m_nativeFileDialog
operator|->
name|onSelectionChange
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|OnTypeChange
name|HRESULT
name|QWindowsNativeFileDialogEventHandler
operator|::
name|OnTypeChange
parameter_list|(
name|IFileDialog
modifier|*
parameter_list|)
block|{
name|m_nativeFileDialog
operator|->
name|onTypeChange
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsNativeSaveFileDialog     \brief Windows native file save dialog wrapper around IFileSaveDialog.      Implements single-selection methods.      \ingroup qt-lighthouse-win */
end_comment
begin_class
DECL|class|QWindowsNativeSaveFileDialog
class|class
name|QWindowsNativeSaveFileDialog
super|:
specifier|public
name|QWindowsNativeFileDialogBase
block|{
public|public:
specifier|virtual
name|QPlatformDialogHelper
operator|::
name|DialogCode
name|fileResult
parameter_list|(
name|QStringList
modifier|*
name|fileResult
init|=
literal|0
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|QStringList
name|selectedFiles
parameter_list|()
specifier|const
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|fileResult
name|QPlatformDialogHelper
operator|::
name|DialogCode
name|QWindowsNativeSaveFileDialog
operator|::
name|fileResult
parameter_list|(
name|QStringList
modifier|*
name|result
comment|/* = 0 */
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|result
condition|)
name|result
operator|->
name|clear
argument_list|()
expr_stmt|;
name|IShellItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
specifier|const
name|HRESULT
name|hr
init|=
name|fileDialog
argument_list|()
operator|->
name|GetResult
argument_list|(
operator|&
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
operator|||
operator|!
name|item
condition|)
return|return
name|QPlatformDialogHelper
operator|::
name|Rejected
return|;
if|if
condition|(
name|result
condition|)
name|result
operator|->
name|push_back
argument_list|(
name|QWindowsNativeFileDialogBase
operator|::
name|itemPath
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QPlatformDialogHelper
operator|::
name|Accepted
return|;
block|}
end_function
begin_function
DECL|function|selectedFiles
name|QStringList
name|QWindowsNativeSaveFileDialog
operator|::
name|selectedFiles
parameter_list|()
specifier|const
block|{
name|QStringList
name|result
decl_stmt|;
name|IShellItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
specifier|const
name|HRESULT
name|hr
init|=
name|fileDialog
argument_list|()
operator|->
name|GetCurrentSelection
argument_list|(
operator|&
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|item
condition|)
name|result
operator|.
name|push_back
argument_list|(
name|QWindowsNativeSaveFileDialog
operator|::
name|itemPath
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsNativeOpenFileDialog     \brief Windows native file save dialog wrapper around IFileOpenDialog.      Implements multi-selection methods.      \ingroup qt-lighthouse-win */
end_comment
begin_class
DECL|class|QWindowsNativeOpenFileDialog
class|class
name|QWindowsNativeOpenFileDialog
super|:
specifier|public
name|QWindowsNativeFileDialogBase
block|{
public|public:
specifier|virtual
name|QPlatformDialogHelper
operator|::
name|DialogCode
name|fileResult
parameter_list|(
name|QStringList
modifier|*
name|fileResult
init|=
literal|0
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|QStringList
name|selectedFiles
parameter_list|()
specifier|const
function_decl|;
private|private:
DECL|function|openFileDialog
specifier|inline
name|IFileOpenDialog
modifier|*
name|openFileDialog
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|IFileOpenDialog
operator|*
argument_list|>
argument_list|(
name|fileDialog
argument_list|()
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|fileResult
name|QPlatformDialogHelper
operator|::
name|DialogCode
name|QWindowsNativeOpenFileDialog
operator|::
name|fileResult
parameter_list|(
name|QStringList
modifier|*
name|result
comment|/* = 0 */
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|result
condition|)
name|result
operator|->
name|clear
argument_list|()
expr_stmt|;
name|IShellItemArray
modifier|*
name|items
init|=
literal|0
decl_stmt|;
specifier|const
name|HRESULT
name|hr
init|=
name|openFileDialog
argument_list|()
operator|->
name|GetResults
argument_list|(
operator|&
name|items
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|items
operator|&&
name|QWindowsNativeFileDialogBase
operator|::
name|itemPaths
argument_list|(
name|items
argument_list|,
name|result
argument_list|)
operator|>
literal|0
condition|)
return|return
name|QPlatformDialogHelper
operator|::
name|Accepted
return|;
return|return
name|QPlatformDialogHelper
operator|::
name|Rejected
return|;
block|}
end_function
begin_function
DECL|function|selectedFiles
name|QStringList
name|QWindowsNativeOpenFileDialog
operator|::
name|selectedFiles
parameter_list|()
specifier|const
block|{
name|QStringList
name|result
decl_stmt|;
name|IShellItemArray
modifier|*
name|items
init|=
literal|0
decl_stmt|;
specifier|const
name|HRESULT
name|hr
init|=
name|openFileDialog
argument_list|()
operator|->
name|GetSelectedItems
argument_list|(
operator|&
name|items
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|items
condition|)
name|QWindowsNativeFileDialogBase
operator|::
name|itemPaths
argument_list|(
name|items
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \brief Factory method for QWindowsNativeFileDialogBase returning     QWindowsNativeOpenFileDialog or QWindowsNativeSaveFileDialog depending on     QFileDialog::AcceptMode. */
end_comment
begin_function
DECL|function|create
name|QWindowsNativeFileDialogBase
modifier|*
name|QWindowsNativeFileDialogBase
operator|::
name|create
parameter_list|(
name|QFileDialogOptions
operator|::
name|AcceptMode
name|am
parameter_list|)
block|{
name|QWindowsNativeFileDialogBase
modifier|*
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|am
operator|==
name|QFileDialogOptions
operator|::
name|AcceptOpen
condition|)
block|{
name|result
operator|=
operator|new
name|QWindowsNativeOpenFileDialog
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|->
name|init
argument_list|(
name|CLSID_FileOpenDialog
argument_list|,
name|IID_IFileOpenDialog
argument_list|)
condition|)
block|{
operator|delete
name|result
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
else|else
block|{
name|result
operator|=
operator|new
name|QWindowsNativeSaveFileDialog
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|->
name|init
argument_list|(
name|CLSID_FileSaveDialog
argument_list|,
name|IID_IFileSaveDialog
argument_list|)
condition|)
block|{
operator|delete
name|result
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsFileDialogHelper     \brief Helper for native Windows file dialogs      Non-modal dialogs are disabled for now. The functionality is     implemented in principle, however there are failures     when querying the results from a dialog run in another thread.     This could probably be fixed be calling CoInitializeEx() with     the right parameters from each thread. The problem is though     that calls to CoInitialize() occur in several places in Qt.      \ingroup qt-lighthouse-win */
end_comment
begin_class
DECL|class|QWindowsFileDialogHelper
class|class
name|QWindowsFileDialogHelper
super|:
specifier|public
name|QWindowsDialogHelperBase
argument_list|<
name|QPlatformFileDialogHelper
argument_list|>
block|{
public|public:
DECL|function|QWindowsFileDialogHelper
name|QWindowsFileDialogHelper
parameter_list|()
block|{}
DECL|function|supportsNonModalDialog
specifier|virtual
name|bool
name|supportsNonModalDialog
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|defaultNameFilterDisables
specifier|virtual
name|bool
name|defaultNameFilterDisables
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
specifier|virtual
name|void
name|setDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|directory
parameter_list|)
function_decl|;
specifier|virtual
name|QString
name|directory
parameter_list|()
specifier|const
function_decl|;
specifier|virtual
name|void
name|selectFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
function_decl|;
specifier|virtual
name|QStringList
name|selectedFiles
parameter_list|()
specifier|const
function_decl|;
specifier|virtual
name|void
name|setFilter
parameter_list|()
function_decl|;
specifier|virtual
name|void
name|setNameFilters
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|filters
parameter_list|)
function_decl|;
specifier|virtual
name|void
name|selectNameFilter
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
function_decl|;
specifier|virtual
name|QString
name|selectedNameFilter
parameter_list|()
specifier|const
function_decl|;
private|private:
specifier|virtual
name|QWindowsNativeDialogBase
modifier|*
name|createNativeDialog
parameter_list|()
function_decl|;
DECL|function|nativeFileDialog
specifier|inline
name|QWindowsNativeFileDialogBase
modifier|*
name|nativeFileDialog
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QWindowsNativeFileDialogBase
operator|*
argument_list|>
argument_list|(
name|nativeDialog
argument_list|()
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|createNativeDialog
name|QWindowsNativeDialogBase
modifier|*
name|QWindowsFileDialogHelper
operator|::
name|createNativeDialog
parameter_list|()
block|{
name|QWindowsNativeFileDialogBase
modifier|*
name|result
init|=
name|QWindowsNativeFileDialogBase
operator|::
name|create
argument_list|(
name|options
argument_list|()
operator|->
name|acceptMode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
return|return
literal|0
return|;
name|QObject
operator|::
name|connect
argument_list|(
name|result
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|result
argument_list|,
name|SIGNAL
argument_list|(
name|rejected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|result
argument_list|,
name|SIGNAL
argument_list|(
name|directoryEntered
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|directoryEntered
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|result
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|result
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|filterSelected
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Apply settings.
specifier|const
name|QSharedPointer
argument_list|<
name|QFileDialogOptions
argument_list|>
modifier|&
name|opts
init|=
name|options
argument_list|()
decl_stmt|;
name|result
operator|->
name|setWindowTitle
argument_list|(
name|opts
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|->
name|setMode
argument_list|(
name|opts
operator|->
name|fileMode
argument_list|()
argument_list|,
name|opts
operator|->
name|options
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|->
name|setHideFiltersDetails
argument_list|(
name|opts
operator|->
name|testOption
argument_list|(
name|QFileDialogOptions
operator|::
name|HideNameFilterDetails
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|nameFilters
init|=
name|opts
operator|->
name|nameFilters
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nameFilters
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|->
name|setNameFilters
argument_list|(
name|nameFilters
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|->
name|isLabelExplicitlySet
argument_list|(
name|QFileDialogOptions
operator|::
name|FileName
argument_list|)
condition|)
name|result
operator|->
name|setLabelText
argument_list|(
name|QFileDialogOptions
operator|::
name|FileName
argument_list|,
name|opts
operator|->
name|labelText
argument_list|(
name|QFileDialogOptions
operator|::
name|FileName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|->
name|isLabelExplicitlySet
argument_list|(
name|QFileDialogOptions
operator|::
name|Accept
argument_list|)
condition|)
name|result
operator|->
name|setLabelText
argument_list|(
name|QFileDialogOptions
operator|::
name|Accept
argument_list|,
name|opts
operator|->
name|labelText
argument_list|(
name|QFileDialogOptions
operator|::
name|Accept
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|initialDirectory
init|=
name|opts
operator|->
name|initialDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|initialDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|->
name|setDirectory
argument_list|(
name|initialDirectory
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|initialNameFilter
init|=
name|opts
operator|->
name|initiallySelectedNameFilter
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|initialNameFilter
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|->
name|selectNameFilter
argument_list|(
name|initialNameFilter
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|defaultSuffix
init|=
name|opts
operator|->
name|defaultSuffix
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|defaultSuffix
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|->
name|setDefaultSuffix
argument_list|(
name|defaultSuffix
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setDirectory
name|void
name|QWindowsFileDialogHelper
operator|::
name|setDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|directory
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|"%s %s"
argument_list|,
name|__FUNCTION__
argument_list|,
name|qPrintable
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsNativeFileDialogBase
modifier|*
name|nfd
init|=
name|nativeFileDialog
argument_list|()
condition|)
name|nfd
operator|->
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|directory
name|QString
name|QWindowsFileDialogHelper
operator|::
name|directory
parameter_list|()
specifier|const
block|{
if|if
condition|(
specifier|const
name|QWindowsNativeFileDialogBase
modifier|*
name|nfd
init|=
name|nativeFileDialog
argument_list|()
condition|)
return|return
name|nfd
operator|->
name|directory
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|selectFile
name|void
name|QWindowsFileDialogHelper
operator|::
name|selectFile
parameter_list|(
specifier|const
name|QString
modifier|&
comment|/* filename */
parameter_list|)
block|{
comment|// Not implemented.
block|}
end_function
begin_function
DECL|function|selectedFiles
name|QStringList
name|QWindowsFileDialogHelper
operator|::
name|selectedFiles
parameter_list|()
specifier|const
block|{
name|QStringList
name|files
decl_stmt|;
if|if
condition|(
specifier|const
name|QWindowsNativeFileDialogBase
modifier|*
name|nfd
init|=
name|nativeFileDialog
argument_list|()
condition|)
name|nfd
operator|->
name|fileResult
argument_list|(
operator|&
name|files
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|"%s files='%s'"
argument_list|,
name|__FUNCTION__
argument_list|,
name|qPrintable
argument_list|(
name|files
operator|.
name|join
argument_list|(
name|QStringLiteral
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|files
return|;
block|}
end_function
begin_function
DECL|function|setFilter
name|void
name|QWindowsFileDialogHelper
operator|::
name|setFilter
parameter_list|()
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNameFilters
name|void
name|QWindowsFileDialogHelper
operator|::
name|setNameFilters
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|filters
parameter_list|)
block|{
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsNativeFileDialogBase
modifier|*
name|nfd
init|=
name|nativeFileDialog
argument_list|()
condition|)
name|nfd
operator|->
name|setNameFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectNameFilter
name|void
name|QWindowsFileDialogHelper
operator|::
name|selectNameFilter
parameter_list|(
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
if|if
condition|(
name|QWindowsNativeFileDialogBase
modifier|*
name|nfd
init|=
name|nativeFileDialog
argument_list|()
condition|)
name|nfd
operator|->
name|selectNameFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectedNameFilter
name|QString
name|QWindowsFileDialogHelper
operator|::
name|selectedNameFilter
parameter_list|()
specifier|const
block|{
if|if
condition|(
specifier|const
name|QWindowsNativeFileDialogBase
modifier|*
name|nfd
init|=
name|nativeFileDialog
argument_list|()
condition|)
return|return
name|nfd
operator|->
name|selectedNameFilter
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsNativeColorDialog     \brief Native Windows color dialog.      Wrapper around Comdlg32's ChooseColor() function.     Not currently in use as QColorDialog is equivalent.      \sa QWindowsColorDialogHelper     \sa #define USE_NATIVE_COLOR_DIALOG      \ingroup qt-lighthouse-win */
end_comment
begin_typedef
DECL|typedef|SharedPointerColor
typedef|typedef
name|QSharedPointer
argument_list|<
name|QColor
argument_list|>
name|SharedPointerColor
typedef|;
end_typedef
begin_class
DECL|class|QWindowsNativeColorDialog
class|class
name|QWindowsNativeColorDialog
super|:
specifier|public
name|QWindowsNativeDialogBase
block|{
name|Q_OBJECT
public|public:
DECL|enumerator|CustomColorCount
enum|enum
block|{
name|CustomColorCount
init|=
literal|16
block|}
enum|;
specifier|explicit
name|QWindowsNativeColorDialog
parameter_list|(
specifier|const
name|SharedPointerColor
modifier|&
name|color
parameter_list|)
constructor_decl|;
DECL|function|setWindowTitle
specifier|virtual
name|void
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{}
specifier|virtual
name|void
name|exec
parameter_list|(
name|HWND
name|owner
init|=
literal|0
parameter_list|)
function_decl|;
DECL|function|result
specifier|virtual
name|QPlatformDialogHelper
operator|::
name|DialogCode
name|result
parameter_list|()
specifier|const
block|{
return|return
name|m_code
return|;
block|}
public|public
name|slots
public|:
DECL|function|close
specifier|virtual
name|void
name|close
parameter_list|()
block|{}
private|private:
DECL|member|m_customColors
name|COLORREF
name|m_customColors
index|[
name|CustomColorCount
index|]
decl_stmt|;
DECL|member|m_code
name|QPlatformDialogHelper
operator|::
name|DialogCode
name|m_code
decl_stmt|;
DECL|member|m_color
name|SharedPointerColor
name|m_color
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWindowsNativeColorDialog
name|QWindowsNativeColorDialog
operator|::
name|QWindowsNativeColorDialog
parameter_list|(
specifier|const
name|SharedPointerColor
modifier|&
name|color
parameter_list|)
member_init_list|:
name|m_code
argument_list|(
name|QPlatformDialogHelper
operator|::
name|Rejected
argument_list|)
member_init_list|,
name|m_color
argument_list|(
name|color
argument_list|)
block|{
name|qFill
argument_list|(
name|m_customColors
argument_list|,
name|m_customColors
operator|+
literal|16
argument_list|,
name|COLORREF
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|exec
name|void
name|QWindowsNativeColorDialog
operator|::
name|exec
parameter_list|(
name|HWND
name|owner
parameter_list|)
block|{
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|ChooseColorWType
function_decl|)
parameter_list|(
name|LPCHOOSECOLORW
parameter_list|)
function_decl|;
name|CHOOSECOLOR
name|chooseColor
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|()
operator|<<
literal|'>'
operator|<<
name|__FUNCTION__
operator|<<
literal|" on "
operator|<<
name|owner
expr_stmt|;
name|ZeroMemory
argument_list|(
operator|&
name|chooseColor
argument_list|,
sizeof|sizeof
argument_list|(
name|chooseColor
argument_list|)
argument_list|)
expr_stmt|;
name|chooseColor
operator|.
name|lStructSize
operator|=
sizeof|sizeof
argument_list|(
name|chooseColor
argument_list|)
expr_stmt|;
name|chooseColor
operator|.
name|hwndOwner
operator|=
name|owner
expr_stmt|;
name|chooseColor
operator|.
name|lpCustColors
operator|=
name|m_customColors
expr_stmt|;
name|QRgb
modifier|*
name|qCustomColors
init|=
name|QColorDialogOptions
operator|::
name|customColors
argument_list|()
decl_stmt|;
specifier|const
name|int
name|customColorCount
init|=
name|qMin
argument_list|(
name|QColorDialogOptions
operator|::
name|customColorCount
argument_list|()
argument_list|,
name|int
argument_list|(
name|CustomColorCount
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|customColorCount
condition|;
operator|++
name|c
control|)
name|m_customColors
index|[
name|c
index|]
operator|=
name|qColorToCOLORREF
argument_list|(
name|QColor
argument_list|(
name|qCustomColors
index|[
name|c
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|chooseColor
operator|.
name|rgbResult
operator|=
name|qColorToCOLORREF
argument_list|(
operator|*
name|m_color
argument_list|)
expr_stmt|;
name|chooseColor
operator|.
name|Flags
operator|=
name|CC_FULLOPEN
operator||
name|CC_RGBINIT
expr_stmt|;
specifier|static
name|ChooseColorWType
name|chooseColorW
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|chooseColorW
condition|)
block|{
name|QSystemLibrary
name|library
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Comdlg32"
argument_list|)
argument_list|)
decl_stmt|;
name|chooseColorW
operator|=
operator|(
name|ChooseColorWType
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"ChooseColorW"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chooseColorW
condition|)
block|{
name|m_code
operator|=
name|chooseColorW
argument_list|(
operator|&
name|chooseColor
argument_list|)
condition|?
name|QPlatformDialogHelper
operator|::
name|Accepted
else|:
name|QPlatformDialogHelper
operator|::
name|Rejected
expr_stmt|;
name|QWindowsDialogs
operator|::
name|eatMouseMove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|m_code
operator|=
name|QPlatformDialogHelper
operator|::
name|Rejected
expr_stmt|;
block|}
if|if
condition|(
name|m_code
operator|==
name|QPlatformDialogHelper
operator|::
name|Accepted
condition|)
block|{
operator|*
name|m_color
operator|=
name|COLORREFToQColor
argument_list|(
name|chooseColor
operator|.
name|rgbResult
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|customColorCount
condition|;
operator|++
name|c
control|)
name|qCustomColors
index|[
name|c
index|]
operator|=
name|COLORREFToQColor
argument_list|(
name|m_customColors
index|[
name|c
index|]
argument_list|)
operator|.
name|rgb
argument_list|()
expr_stmt|;
emit|emit
name|accepted
argument_list|()
emit|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseDialogs
condition|)
name|qDebug
argument_list|()
operator|<<
literal|'<'
operator|<<
name|__FUNCTION__
operator|<<
name|m_color
expr_stmt|;
block|}
else|else
block|{
emit|emit
name|rejected
argument_list|()
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!     \class QWindowsColorDialogHelper     \brief Helper for native Windows color dialogs      Not currently in use as QColorDialog is equivalent.      \sa #define USE_NATIVE_COLOR_DIALOG     \sa QWindowsNativeColorDialog      \ingroup qt-lighthouse-win */
end_comment
begin_class
DECL|class|QWindowsColorDialogHelper
class|class
name|QWindowsColorDialogHelper
super|:
specifier|public
name|QWindowsDialogHelperBase
argument_list|<
name|QPlatformColorDialogHelper
argument_list|>
block|{
public|public:
DECL|function|QWindowsColorDialogHelper
name|QWindowsColorDialogHelper
parameter_list|()
block|{}
DECL|function|supportsNonModalDialog
specifier|virtual
name|bool
name|supportsNonModalDialog
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|function|currentColor
specifier|virtual
name|QColor
name|currentColor
parameter_list|()
specifier|const
block|{
return|return
operator|*
name|m_currentColor
return|;
block|}
DECL|function|setCurrentColor
specifier|virtual
name|void
name|setCurrentColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
block|{
operator|*
name|m_currentColor
operator|=
name|c
expr_stmt|;
block|}
private|private:
DECL|function|nativeFileDialog
specifier|inline
name|QWindowsNativeColorDialog
modifier|*
name|nativeFileDialog
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QWindowsNativeColorDialog
operator|*
argument_list|>
argument_list|(
name|nativeDialog
argument_list|()
argument_list|)
return|;
block|}
specifier|virtual
name|QWindowsNativeDialogBase
modifier|*
name|createNativeDialog
parameter_list|()
function_decl|;
DECL|member|m_currentColor
name|SharedPointerColor
name|m_currentColor
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|createNativeDialog
name|QWindowsNativeDialogBase
modifier|*
name|QWindowsColorDialogHelper
operator|::
name|createNativeDialog
parameter_list|()
block|{
name|QWindowsNativeColorDialog
modifier|*
name|nativeDialog
init|=
operator|new
name|QWindowsNativeColorDialog
argument_list|(
name|m_currentColor
argument_list|)
decl_stmt|;
name|nativeDialog
operator|->
name|setWindowTitle
argument_list|(
name|options
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|nativeDialog
return|;
block|}
end_function
begin_namespace
DECL|namespace|QWindowsDialogs
namespace|namespace
name|QWindowsDialogs
block|{
comment|// QWindowsDialogHelperBase creation functions
DECL|function|useHelper
name|bool
name|useHelper
parameter_list|(
name|QPlatformTheme
operator|::
name|DialogType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|FileDialog
case|:
return|return
literal|true
return|;
break|break;
case|case
name|QPlatformTheme
operator|::
name|ColorDialog
case|:
ifdef|#
directive|ifdef
name|USE_NATIVE_COLOR_DIALOG
return|return
literal|true
return|;
else|#
directive|else
break|break;
endif|#
directive|endif
case|case
name|QPlatformTheme
operator|::
name|FontDialog
case|:
break|break;
block|}
return|return
literal|false
return|;
block|}
DECL|function|createHelper
name|QPlatformDialogHelper
modifier|*
name|createHelper
parameter_list|(
name|QPlatformTheme
operator|::
name|DialogType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|FileDialog
case|:
return|return
operator|new
name|QWindowsFileDialogHelper
argument_list|()
return|;
case|case
name|QPlatformTheme
operator|::
name|ColorDialog
case|:
ifdef|#
directive|ifdef
name|USE_NATIVE_COLOR_DIALOG
return|return
operator|new
name|QWindowsColorDialogHelper
argument_list|()
return|;
else|#
directive|else
break|break;
endif|#
directive|endif
case|case
name|QPlatformTheme
operator|::
name|FontDialog
case|:
break|break;
block|}
return|return
literal|0
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace QWindowsDialogs
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qwindowsdialoghelpers.moc"
end_include
end_unit
