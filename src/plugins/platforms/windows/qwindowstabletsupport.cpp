begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowstabletsupport.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABLETEVENT
end_ifndef
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowskeymapper.h"
end_include
begin_include
include|#
directive|include
file|"qwindowswindow.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QTabletEvent>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedArrayPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QtMath>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qsystemlibrary_p.h>
end_include
begin_comment
comment|// Note: The definition of the PACKET structure in pktdef.h depends on this define.
end_comment
begin_define
DECL|macro|PACKETDATA
define|#
directive|define
name|PACKETDATA
value|(PK_X | PK_Y | PK_BUTTONS | PK_NORMAL_PRESSURE | PK_TANGENT_PRESSURE | PK_ORIENTATION | PK_CURSOR | PK_Z)
end_define
begin_include
include|#
directive|include
file|<pktdef.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|enum
type|{
DECL|enumerator|PacketMode
name|PacketMode
init|=
literal|0
decl_stmt|,
DECL|enumerator|TabletPacketQSize
name|TabletPacketQSize
init|=
literal|128
decl_stmt|,
DECL|enumerator|DeviceIdMask
name|DeviceIdMask
init|=
literal|0xFF6
decl_stmt|,
comment|// device type mask&& device color mask
DECL|enumerator|CursorTypeBitMask
name|CursorTypeBitMask
init|=
literal|0x0F06
end_decl_stmt
begin_comment
DECL|enumerator|CursorTypeBitMask
comment|// bitmask to find the specific cursor type (see Wacom FAQ)
end_comment
begin_extern
DECL|function|qWindowsTabletSupportWndProc
unit|};
extern|extern
literal|"C"
name|LRESULT
name|QT_WIN_CALLBACK
name|qWindowsTabletSupportWndProc
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|UINT
name|message
parameter_list|,
name|WPARAM
name|wParam
parameter_list|,
name|LPARAM
name|lParam
parameter_list|)
block|{
switch|switch
condition|(
name|message
condition|)
block|{
case|case
name|WT_PROXIMITY
case|:
if|if
condition|(
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|tabletSupport
argument_list|()
operator|->
name|translateTabletProximityEvent
argument_list|(
name|wParam
argument_list|,
name|lParam
argument_list|)
condition|)
return|return
literal|0
return|;
break|break;
case|case
name|WT_PACKET
case|:
if|if
condition|(
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|tabletSupport
argument_list|()
operator|->
name|translateTabletPacketEvent
argument_list|()
condition|)
return|return
literal|0
return|;
break|break;
block|}
return|return
name|DefWindowProc
argument_list|(
name|hwnd
argument_list|,
name|message
argument_list|,
name|wParam
argument_list|,
name|lParam
argument_list|)
return|;
block|}
end_extern
begin_comment
comment|// Scale tablet coordinates to screen coordinates.
end_comment
begin_function
DECL|function|sign
specifier|static
specifier|inline
name|int
name|sign
parameter_list|(
name|int
name|x
parameter_list|)
block|{
return|return
name|x
operator|>=
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|scaleCoordinates
specifier|inline
name|QPointF
name|QWindowsTabletDeviceData
operator|::
name|scaleCoordinates
parameter_list|(
name|int
name|coordX
parameter_list|,
name|int
name|coordY
parameter_list|,
specifier|const
name|QRect
modifier|&
name|targetArea
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|targetX
init|=
name|targetArea
operator|.
name|x
argument_list|()
decl_stmt|;
specifier|const
name|int
name|targetY
init|=
name|targetArea
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|int
name|targetWidth
init|=
name|targetArea
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|targetHeight
init|=
name|targetArea
operator|.
name|height
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|x
init|=
name|sign
argument_list|(
name|targetWidth
argument_list|)
operator|==
name|sign
argument_list|(
name|maxX
argument_list|)
condition|?
operator|(
operator|(
name|coordX
operator|-
name|minX
operator|)
operator|*
name|qAbs
argument_list|(
name|targetWidth
argument_list|)
operator|/
name|qAbs
argument_list|(
name|qreal
argument_list|(
name|maxX
operator|-
name|minX
argument_list|)
argument_list|)
operator|)
operator|+
name|targetX
else|:
operator|(
operator|(
name|qAbs
argument_list|(
name|maxX
argument_list|)
operator|-
operator|(
name|coordX
operator|-
name|minX
operator|)
operator|)
operator|*
name|qAbs
argument_list|(
name|targetWidth
argument_list|)
operator|/
name|qAbs
argument_list|(
name|qreal
argument_list|(
name|maxX
operator|-
name|minX
argument_list|)
argument_list|)
operator|)
operator|+
name|targetX
decl_stmt|;
specifier|const
name|qreal
name|y
init|=
name|sign
argument_list|(
name|targetHeight
argument_list|)
operator|==
name|sign
argument_list|(
name|maxY
argument_list|)
condition|?
operator|(
operator|(
name|coordY
operator|-
name|minY
operator|)
operator|*
name|qAbs
argument_list|(
name|targetHeight
argument_list|)
operator|/
name|qAbs
argument_list|(
name|qreal
argument_list|(
name|maxY
operator|-
name|minY
argument_list|)
argument_list|)
operator|)
operator|+
name|targetY
else|:
operator|(
operator|(
name|qAbs
argument_list|(
name|maxY
argument_list|)
operator|-
operator|(
name|coordY
operator|-
name|minY
operator|)
operator|)
operator|*
name|qAbs
argument_list|(
name|targetHeight
argument_list|)
operator|/
name|qAbs
argument_list|(
name|qreal
argument_list|(
name|maxY
operator|-
name|minY
argument_list|)
argument_list|)
operator|)
operator|+
name|targetY
decl_stmt|;
return|return
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|member|m_winTab32DLL
name|QWindowsWinTab32DLL
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \class QWindowsWinTab32DLL QWindowsTabletSupport     \brief Functions from wintabl32.dll shipped with WACOM tablets used by QWindowsTabletSupport.      \internal     \ingroup qt-lighthouse-win */
end_comment
begin_function
DECL|function|init
name|bool
name|QWindowsWinTab32DLL
operator|::
name|init
parameter_list|()
block|{
if|if
condition|(
name|wTInfo
condition|)
return|return
literal|true
return|;
name|QSystemLibrary
name|library
argument_list|(
name|QStringLiteral
argument_list|(
literal|"wintab32"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|library
operator|.
name|load
argument_list|()
condition|)
return|return
literal|false
return|;
name|wTOpen
operator|=
operator|(
name|PtrWTOpen
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTOpenW"
argument_list|)
expr_stmt|;
name|wTClose
operator|=
operator|(
name|PtrWTClose
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTClose"
argument_list|)
expr_stmt|;
name|wTInfo
operator|=
operator|(
name|PtrWTInfo
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTInfoW"
argument_list|)
expr_stmt|;
name|wTEnable
operator|=
operator|(
name|PtrWTEnable
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTEnable"
argument_list|)
expr_stmt|;
name|wTOverlap
operator|=
operator|(
name|PtrWTEnable
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTOverlap"
argument_list|)
expr_stmt|;
name|wTPacketsGet
operator|=
operator|(
name|PtrWTPacketsGet
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTPacketsGet"
argument_list|)
expr_stmt|;
name|wTGet
operator|=
operator|(
name|PtrWTGet
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTGetW"
argument_list|)
expr_stmt|;
name|wTQueueSizeGet
operator|=
operator|(
name|PtrWTQueueSizeGet
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTQueueSizeGet"
argument_list|)
expr_stmt|;
name|wTQueueSizeSet
operator|=
operator|(
name|PtrWTQueueSizeSet
operator|)
name|library
operator|.
name|resolve
argument_list|(
literal|"WTQueueSizeSet"
argument_list|)
expr_stmt|;
return|return
name|wTOpen
operator|&&
name|wTClose
operator|&&
name|wTInfo
operator|&&
name|wTEnable
operator|&&
name|wTOverlap
operator|&&
name|wTPacketsGet
operator|&&
name|wTQueueSizeGet
operator|&&
name|wTQueueSizeSet
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWindowsTabletSupport     \brief Tablet support for Windows.      Support for WACOM tablets.      \sa http://www.wacomeng.com/windows/docs/Wintab_v140.htm      \internal     \since 5.2     \ingroup qt-lighthouse-win */
end_comment
begin_constructor
DECL|function|QWindowsTabletSupport
name|QWindowsTabletSupport
operator|::
name|QWindowsTabletSupport
parameter_list|(
name|HWND
name|window
parameter_list|,
name|HCTX
name|context
parameter_list|)
member_init_list|:
name|m_window
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_context
argument_list|(
name|context
argument_list|)
member_init_list|,
name|m_absoluteRange
argument_list|(
literal|20
argument_list|)
member_init_list|,
name|m_tiltSupport
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_currentDevice
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|AXIS
name|orientation
index|[
literal|3
index|]
decl_stmt|;
comment|// Some tablets don't support tilt, check if it is possible,
if|if
condition|(
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_DEVICES
argument_list|,
name|DVC_ORIENTATION
argument_list|,
operator|&
name|orientation
argument_list|)
condition|)
name|m_tiltSupport
operator|=
name|orientation
index|[
literal|0
index|]
operator|.
name|axResolution
operator|&&
name|orientation
index|[
literal|1
index|]
operator|.
name|axResolution
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsTabletSupport
name|QWindowsTabletSupport
operator|::
name|~
name|QWindowsTabletSupport
parameter_list|()
block|{
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTClose
argument_list|(
name|m_context
argument_list|)
expr_stmt|;
name|DestroyWindow
argument_list|(
name|m_window
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|create
name|QWindowsTabletSupport
modifier|*
name|QWindowsTabletSupport
operator|::
name|create
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_winTab32DLL
operator|.
name|init
argument_list|()
condition|)
return|return
literal|0
return|;
specifier|const
name|HWND
name|window
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|createDummyWindow
argument_list|(
name|QStringLiteral
argument_list|(
literal|"TabletDummyWindow"
argument_list|)
argument_list|,
literal|L"TabletDummyWindow"
argument_list|,
name|qWindowsTabletSupportWndProc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
block|{
name|qCWarning
argument_list|(
name|lcQpaTablet
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"Unable to create window for tablet."
expr_stmt|;
return|return
literal|0
return|;
block|}
name|LOGCONTEXT
name|lcMine
decl_stmt|;
comment|// build our context from the default context
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_DEFSYSCTX
argument_list|,
literal|0
argument_list|,
operator|&
name|lcMine
argument_list|)
expr_stmt|;
comment|// Go for the raw coordinates, the tablet event will return good stuff
name|lcMine
operator|.
name|lcOptions
operator||=
name|CXO_MESSAGES
operator||
name|CXO_CSRMESSAGES
expr_stmt|;
name|lcMine
operator|.
name|lcPktData
operator|=
name|lcMine
operator|.
name|lcMoveMask
operator|=
name|PACKETDATA
expr_stmt|;
name|lcMine
operator|.
name|lcPktMode
operator|=
name|PacketMode
expr_stmt|;
name|lcMine
operator|.
name|lcOutOrgX
operator|=
literal|0
expr_stmt|;
name|lcMine
operator|.
name|lcOutExtX
operator|=
name|lcMine
operator|.
name|lcInExtX
expr_stmt|;
name|lcMine
operator|.
name|lcOutOrgY
operator|=
literal|0
expr_stmt|;
name|lcMine
operator|.
name|lcOutExtY
operator|=
operator|-
name|lcMine
operator|.
name|lcInExtY
expr_stmt|;
specifier|const
name|HCTX
name|context
init|=
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTOpen
argument_list|(
name|window
argument_list|,
operator|&
name|lcMine
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|context
condition|)
block|{
name|qCDebug
argument_list|(
name|lcQpaTablet
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"Unable to open tablet."
expr_stmt|;
name|DestroyWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// Set the size of the Packet Queue to the correct size
specifier|const
name|int
name|currentQueueSize
init|=
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTQueueSizeGet
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentQueueSize
operator|!=
name|TabletPacketQSize
condition|)
block|{
if|if
condition|(
operator|!
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTQueueSizeSet
argument_list|(
name|context
argument_list|,
name|TabletPacketQSize
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTQueueSizeSet
argument_list|(
name|context
argument_list|,
name|currentQueueSize
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Unable to set queue size on tablet. The tablet will not work."
expr_stmt|;
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTClose
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|DestroyWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// cannot restore old size
block|}
comment|// cannot set
block|}
comment|// mismatch
name|qCDebug
argument_list|(
name|lcQpaTablet
argument_list|)
operator|<<
literal|"Opened tablet context "
operator|<<
name|context
operator|<<
literal|" on window "
operator|<<
name|window
operator|<<
literal|"changed packet queue size "
operator|<<
name|currentQueueSize
operator|<<
literal|"->"
operator|<<
name|TabletPacketQSize
expr_stmt|;
return|return
operator|new
name|QWindowsTabletSupport
argument_list|(
name|window
argument_list|,
name|context
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|options
name|unsigned
name|QWindowsTabletSupport
operator|::
name|options
parameter_list|()
specifier|const
block|{
name|UINT
name|result
init|=
literal|0
decl_stmt|;
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_INTERFACE
argument_list|,
name|IFC_CTXOPTIONS
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|description
name|QString
name|QWindowsTabletSupport
operator|::
name|description
parameter_list|()
specifier|const
block|{
specifier|const
name|unsigned
name|size
init|=
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_INTERFACE
argument_list|,
name|IFC_WINTABID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|size
condition|)
return|return
name|QString
argument_list|()
return|;
name|QScopedPointer
argument_list|<
name|TCHAR
argument_list|>
name|winTabId
argument_list|(
operator|new
name|TCHAR
index|[
name|size
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_INTERFACE
argument_list|,
name|IFC_WINTABID
argument_list|,
name|winTabId
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|WORD
name|implementationVersion
init|=
literal|0
decl_stmt|;
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_INTERFACE
argument_list|,
name|IFC_IMPLVERSION
argument_list|,
operator|&
name|implementationVersion
argument_list|)
expr_stmt|;
name|WORD
name|specificationVersion
init|=
literal|0
decl_stmt|;
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_INTERFACE
argument_list|,
name|IFC_SPECVERSION
argument_list|,
operator|&
name|specificationVersion
argument_list|)
expr_stmt|;
specifier|const
name|unsigned
name|opts
init|=
name|options
argument_list|()
decl_stmt|;
name|QString
name|result
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 specification: v%2.%3 implementation: v%4.%5 options: 0x%6"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|winTabId
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|specificationVersion
operator|>>
literal|8
argument_list|)
operator|.
name|arg
argument_list|(
name|specificationVersion
operator|&
literal|0xFF
argument_list|)
operator|.
name|arg
argument_list|(
name|implementationVersion
operator|>>
literal|8
argument_list|)
operator|.
name|arg
argument_list|(
name|implementationVersion
operator|&
literal|0xFF
argument_list|)
operator|.
name|arg
argument_list|(
name|opts
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|&
name|CXO_MESSAGES
condition|)
name|result
operator|+=
name|QStringLiteral
argument_list|(
literal|" CXO_MESSAGES"
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|&
name|CXO_CSRMESSAGES
condition|)
name|result
operator|+=
name|QStringLiteral
argument_list|(
literal|" CXO_CSRMESSAGES"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_tiltSupport
condition|)
name|result
operator|+=
name|QStringLiteral
argument_list|(
literal|" tilt"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|notifyActivate
name|void
name|QWindowsTabletSupport
operator|::
name|notifyActivate
parameter_list|()
block|{
comment|// Cooperate with other tablet applications, but when we get focus, I want to use the tablet.
specifier|const
name|bool
name|result
init|=
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTEnable
argument_list|(
name|m_context
argument_list|,
literal|true
argument_list|)
operator|&&
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTOverlap
argument_list|(
name|m_context
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaTablet
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|result
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOfDevice
specifier|static
specifier|inline
name|int
name|indexOfDevice
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QWindowsTabletDeviceData
argument_list|>
modifier|&
name|devices
parameter_list|,
name|qint64
name|uniqueId
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|devices
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|devices
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|uniqueId
operator|==
name|uniqueId
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|deviceType
specifier|static
specifier|inline
name|QTabletEvent
operator|::
name|TabletDevice
name|deviceType
parameter_list|(
specifier|const
name|UINT
name|cursorType
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|cursorType
operator|&
literal|0x0006
operator|)
operator|==
literal|0x0002
operator|)
operator|&&
operator|(
operator|(
name|cursorType
operator|&
name|CursorTypeBitMask
operator|)
operator|!=
literal|0x0902
operator|)
condition|)
return|return
name|QTabletEvent
operator|::
name|Stylus
return|;
switch|switch
condition|(
name|cursorType
operator|&
name|CursorTypeBitMask
condition|)
block|{
case|case
literal|0x0802
case|:
return|return
name|QTabletEvent
operator|::
name|Stylus
return|;
case|case
literal|0x0902
case|:
return|return
name|QTabletEvent
operator|::
name|Airbrush
return|;
case|case
literal|0x0004
case|:
return|return
name|QTabletEvent
operator|::
name|FourDMouse
return|;
case|case
literal|0x0006
case|:
return|return
name|QTabletEvent
operator|::
name|Puck
return|;
case|case
literal|0x0804
case|:
return|return
name|QTabletEvent
operator|::
name|RotationStylus
return|;
default|default:
break|break;
block|}
return|return
name|QTabletEvent
operator|::
name|NoDevice
return|;
block|}
end_function
begin_function
DECL|function|pointerType
specifier|static
specifier|inline
name|QTabletEvent
operator|::
name|PointerType
name|pointerType
parameter_list|(
name|unsigned
name|currentCursor
parameter_list|)
block|{
switch|switch
condition|(
name|currentCursor
operator|%
literal|3
condition|)
block|{
comment|// %3 for dual track
case|case
literal|0
case|:
return|return
name|QTabletEvent
operator|::
name|Cursor
return|;
case|case
literal|1
case|:
return|return
name|QTabletEvent
operator|::
name|Pen
return|;
case|case
literal|2
case|:
return|return
name|QTabletEvent
operator|::
name|Eraser
return|;
default|default:
break|break;
block|}
return|return
name|QTabletEvent
operator|::
name|UnknownPointer
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|QWindowsTabletDeviceData
modifier|&
name|t
parameter_list|)
block|{
name|d
operator|<<
literal|"TabletDevice id:"
operator|<<
name|t
operator|.
name|uniqueId
operator|<<
literal|" pressure: "
operator|<<
name|t
operator|.
name|minPressure
operator|<<
literal|".."
operator|<<
name|t
operator|.
name|maxPressure
operator|<<
literal|" tan pressure: "
operator|<<
name|t
operator|.
name|minTanPressure
operator|<<
literal|".."
operator|<<
name|t
operator|.
name|maxTanPressure
operator|<<
literal|" area:"
operator|<<
name|t
operator|.
name|minX
operator|<<
name|t
operator|.
name|minY
operator|<<
name|t
operator|.
name|minZ
operator|<<
literal|".."
operator|<<
name|t
operator|.
name|maxX
operator|<<
name|t
operator|.
name|maxY
operator|<<
name|t
operator|.
name|maxZ
operator|<<
literal|" device "
operator|<<
name|t
operator|.
name|currentDevice
operator|<<
literal|" pointer "
operator|<<
name|t
operator|.
name|currentPointerType
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|tabletInit
name|QWindowsTabletDeviceData
name|QWindowsTabletSupport
operator|::
name|tabletInit
parameter_list|(
specifier|const
name|quint64
name|uniqueId
parameter_list|,
specifier|const
name|UINT
name|cursorType
parameter_list|)
specifier|const
block|{
name|QWindowsTabletDeviceData
name|result
decl_stmt|;
name|result
operator|.
name|uniqueId
operator|=
name|uniqueId
expr_stmt|;
comment|/* browse WinTab's many info items to discover pressure handling. */
name|AXIS
name|axis
decl_stmt|;
name|LOGCONTEXT
name|lc
decl_stmt|;
comment|/* get the current context for its device variable. */
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTGet
argument_list|(
name|m_context
argument_list|,
operator|&
name|lc
argument_list|)
expr_stmt|;
comment|/* get the size of the pressure axis. */
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_DEVICES
operator|+
name|lc
operator|.
name|lcDevice
argument_list|,
name|DVC_NPRESSURE
argument_list|,
operator|&
name|axis
argument_list|)
expr_stmt|;
name|result
operator|.
name|minPressure
operator|=
name|int
argument_list|(
name|axis
operator|.
name|axMin
argument_list|)
expr_stmt|;
name|result
operator|.
name|maxPressure
operator|=
name|int
argument_list|(
name|axis
operator|.
name|axMax
argument_list|)
expr_stmt|;
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_DEVICES
operator|+
name|lc
operator|.
name|lcDevice
argument_list|,
name|DVC_TPRESSURE
argument_list|,
operator|&
name|axis
argument_list|)
expr_stmt|;
name|result
operator|.
name|minTanPressure
operator|=
name|int
argument_list|(
name|axis
operator|.
name|axMin
argument_list|)
expr_stmt|;
name|result
operator|.
name|maxTanPressure
operator|=
name|int
argument_list|(
name|axis
operator|.
name|axMax
argument_list|)
expr_stmt|;
name|LOGCONTEXT
name|defaultLc
decl_stmt|;
comment|/* get default region */
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_DEFCONTEXT
argument_list|,
literal|0
argument_list|,
operator|&
name|defaultLc
argument_list|)
expr_stmt|;
name|result
operator|.
name|maxX
operator|=
name|int
argument_list|(
name|defaultLc
operator|.
name|lcInExtX
argument_list|)
operator|-
name|int
argument_list|(
name|defaultLc
operator|.
name|lcInOrgX
argument_list|)
expr_stmt|;
name|result
operator|.
name|maxY
operator|=
name|int
argument_list|(
name|defaultLc
operator|.
name|lcInExtY
argument_list|)
operator|-
name|int
argument_list|(
name|defaultLc
operator|.
name|lcInOrgY
argument_list|)
expr_stmt|;
name|result
operator|.
name|maxZ
operator|=
name|int
argument_list|(
name|defaultLc
operator|.
name|lcInExtZ
argument_list|)
operator|-
name|int
argument_list|(
name|defaultLc
operator|.
name|lcInOrgZ
argument_list|)
expr_stmt|;
name|result
operator|.
name|currentDevice
operator|=
name|deviceType
argument_list|(
name|cursorType
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|translateTabletProximityEvent
name|bool
name|QWindowsTabletSupport
operator|::
name|translateTabletProximityEvent
parameter_list|(
name|WPARAM
comment|/* wParam */
parameter_list|,
name|LPARAM
name|lParam
parameter_list|)
block|{
if|if
condition|(
operator|!
name|LOWORD
argument_list|(
name|lParam
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|lcQpaTablet
argument_list|)
operator|<<
literal|"leave proximity for device #"
operator|<<
name|m_currentDevice
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTabletLeaveProximityEvent
argument_list|(
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|currentDevice
argument_list|,
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|currentPointerType
argument_list|,
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|uniqueId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|PACKET
name|proximityBuffer
index|[
literal|1
index|]
decl_stmt|;
comment|// we are only interested in the first packet in this case
specifier|const
name|int
name|totalPacks
init|=
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTPacketsGet
argument_list|(
name|m_context
argument_list|,
literal|1
argument_list|,
name|proximityBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|totalPacks
condition|)
return|return
literal|false
return|;
specifier|const
name|UINT
name|currentCursor
init|=
name|proximityBuffer
index|[
literal|0
index|]
operator|.
name|pkCursor
decl_stmt|;
name|UINT
name|physicalCursorId
decl_stmt|;
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_CURSORS
operator|+
name|currentCursor
argument_list|,
name|CSR_PHYSID
argument_list|,
operator|&
name|physicalCursorId
argument_list|)
expr_stmt|;
name|UINT
name|cursorType
decl_stmt|;
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTInfo
argument_list|(
name|WTI_CURSORS
operator|+
name|currentCursor
argument_list|,
name|CSR_TYPE
argument_list|,
operator|&
name|cursorType
argument_list|)
expr_stmt|;
specifier|const
name|qint64
name|uniqueId
init|=
operator|(
name|qint64
argument_list|(
name|cursorType
operator|&
name|DeviceIdMask
argument_list|)
operator|<<
literal|32L
operator|)
operator||
name|qint64
argument_list|(
name|physicalCursorId
argument_list|)
decl_stmt|;
comment|// initializing and updating the cursor should be done in response to
comment|// WT_CSRCHANGE. We do it in WT_PROXIMITY because some wintab never send
comment|// the event WT_CSRCHANGE even if asked with CXO_CSRMESSAGES
name|m_currentDevice
operator|=
name|indexOfDevice
argument_list|(
name|m_devices
argument_list|,
name|uniqueId
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_currentDevice
operator|<
literal|0
condition|)
block|{
name|m_currentDevice
operator|=
name|m_devices
operator|.
name|size
argument_list|()
expr_stmt|;
name|m_devices
operator|.
name|push_back
argument_list|(
name|tabletInit
argument_list|(
name|uniqueId
argument_list|,
name|cursorType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m_devices
index|[
name|m_currentDevice
index|]
operator|.
name|currentPointerType
operator|=
name|pointerType
argument_list|(
name|currentCursor
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaTablet
argument_list|)
operator|<<
literal|"enter proximity for device #"
operator|<<
name|m_currentDevice
operator|<<
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTabletEnterProximityEvent
argument_list|(
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|currentDevice
argument_list|,
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|currentPointerType
argument_list|,
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|uniqueId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|translateTabletPacketEvent
name|bool
name|QWindowsTabletSupport
operator|::
name|translateTabletPacketEvent
parameter_list|()
block|{
specifier|static
name|PACKET
name|localPacketBuf
index|[
name|TabletPacketQSize
index|]
decl_stmt|;
comment|// our own tablet packet queue.
specifier|const
name|int
name|packetCount
init|=
name|QWindowsTabletSupport
operator|::
name|m_winTab32DLL
operator|.
name|wTPacketsGet
argument_list|(
name|m_context
argument_list|,
name|TabletPacketQSize
argument_list|,
operator|&
name|localPacketBuf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|packetCount
operator|||
name|m_currentDevice
operator|<
literal|0
condition|)
return|return
literal|false
return|;
specifier|const
name|int
name|currentDevice
init|=
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|currentDevice
decl_stmt|;
specifier|const
name|int
name|currentPointer
init|=
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|currentPointerType
decl_stmt|;
comment|// The tablet can be used in 2 different modes, depending on it settings:
comment|// 1) Absolute (pen) mode:
comment|//    The coordinates are scaled to the virtual desktop (by default). The user
comment|//    can also choose to scale to the monitor or a region of the screen.
comment|//    When entering proximity, the tablet driver snaps the mouse pointer to the
comment|//    tablet position scaled to that area and keeps it in sync.
comment|// 2) Relative (mouse) mode:
comment|//    The pen follows the mouse. The constant 'absoluteRange' specifies the
comment|//    manhattanLength difference for detecting if a tablet input device is in this mode,
comment|//    in which case we snap the position to the mouse position.
comment|// It seems there is no way to find out the mode programmatically, the LOGCONTEXT orgX/Y/Ext
comment|// area is always the virtual desktop.
specifier|const
name|QRect
name|virtualDesktopArea
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|virtualGeometry
argument_list|()
decl_stmt|;
name|qCDebug
argument_list|(
name|lcQpaTablet
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"processing "
operator|<<
name|packetCount
operator|<<
literal|"target:"
operator|<<
name|QGuiApplicationPrivate
operator|::
name|tabletPressTarget
expr_stmt|;
specifier|const
name|Qt
operator|::
name|KeyboardModifiers
name|keyboardModifiers
init|=
name|QWindowsKeyMapper
operator|::
name|queryKeyboardModifiers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packetCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|PACKET
modifier|&
name|packet
init|=
name|localPacketBuf
index|[
name|i
index|]
decl_stmt|;
specifier|const
name|int
name|z
init|=
name|currentDevice
operator|==
name|QTabletEvent
operator|::
name|FourDMouse
condition|?
name|int
argument_list|(
name|packet
operator|.
name|pkZ
argument_list|)
else|:
literal|0
decl_stmt|;
comment|// This code is to delay the tablet data one cycle to sync with the mouse location.
name|QPointF
name|globalPosF
init|=
name|m_oldGlobalPosF
decl_stmt|;
name|m_oldGlobalPosF
operator|=
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|scaleCoordinates
argument_list|(
name|packet
operator|.
name|pkX
argument_list|,
name|packet
operator|.
name|pkY
argument_list|,
name|virtualDesktopArea
argument_list|)
expr_stmt|;
name|QWindow
modifier|*
name|target
init|=
name|QGuiApplicationPrivate
operator|::
name|tabletPressTarget
decl_stmt|;
comment|// Pass to window that grabbed it.
name|QPoint
name|globalPos
init|=
name|globalPosF
operator|.
name|toPoint
argument_list|()
decl_stmt|;
comment|// Get Mouse Position and compare to tablet info
specifier|const
name|QPoint
name|mouseLocation
init|=
name|QWindowsCursor
operator|::
name|mousePosition
argument_list|()
decl_stmt|;
comment|// Positions should be almost the same if we are in absolute
comment|// mode. If they are not, use the mouse location.
if|if
condition|(
operator|(
name|mouseLocation
operator|-
name|globalPos
operator|)
operator|.
name|manhattanLength
argument_list|()
operator|>
name|m_absoluteRange
condition|)
block|{
name|globalPos
operator|=
name|mouseLocation
expr_stmt|;
name|globalPosF
operator|=
name|globalPos
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|target
condition|)
if|if
condition|(
name|QPlatformWindow
modifier|*
name|pw
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|findPlatformWindowAt
argument_list|(
name|GetDesktopWindow
argument_list|()
argument_list|,
name|globalPos
argument_list|,
name|CWP_SKIPINVISIBLE
operator||
name|CWP_SKIPTRANSPARENT
argument_list|)
condition|)
name|target
operator|=
name|pw
operator|->
name|window
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|target
condition|)
continue|continue;
specifier|const
name|QPoint
name|localPos
init|=
name|target
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|pressureNew
init|=
name|packet
operator|.
name|pkButtons
operator|&&
operator|(
name|currentPointer
operator|==
name|QTabletEvent
operator|::
name|Pen
operator|||
name|currentPointer
operator|==
name|QTabletEvent
operator|::
name|Eraser
operator|)
condition|?
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|scalePressure
argument_list|(
name|packet
operator|.
name|pkNormalPressure
argument_list|)
else|:
name|qreal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|tangentialPressure
init|=
name|currentDevice
operator|==
name|QTabletEvent
operator|::
name|Airbrush
condition|?
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|scaleTangentialPressure
argument_list|(
name|packet
operator|.
name|pkTangentPressure
argument_list|)
else|:
name|qreal
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|tiltX
init|=
literal|0
decl_stmt|;
name|int
name|tiltY
init|=
literal|0
decl_stmt|;
name|qreal
name|rotation
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|m_tiltSupport
condition|)
block|{
comment|// Convert from azimuth and altitude to x tilt and y tilt. What
comment|// follows is the optimized version. Here are the equations used:
comment|// X = sin(azimuth) * cos(altitude)
comment|// Y = cos(azimuth) * cos(altitude)
comment|// Z = sin(altitude)
comment|// X Tilt = arctan(X / Z)
comment|// Y Tilt = arctan(Y / Z)
specifier|const
name|double
name|radAzim
init|=
operator|(
name|packet
operator|.
name|pkOrientation
operator|.
name|orAzimuth
operator|/
literal|10.0
operator|)
operator|*
operator|(
name|M_PI
operator|/
literal|180
operator|)
decl_stmt|;
specifier|const
name|double
name|tanAlt
init|=
name|tan
argument_list|(
operator|(
name|abs
argument_list|(
name|packet
operator|.
name|pkOrientation
operator|.
name|orAltitude
operator|/
literal|10.0
argument_list|)
operator|)
operator|*
operator|(
name|M_PI
operator|/
literal|180
operator|)
argument_list|)
decl_stmt|;
specifier|const
name|double
name|degX
init|=
name|atan
argument_list|(
name|sin
argument_list|(
name|radAzim
argument_list|)
operator|/
name|tanAlt
argument_list|)
decl_stmt|;
specifier|const
name|double
name|degY
init|=
name|atan
argument_list|(
name|cos
argument_list|(
name|radAzim
argument_list|)
operator|/
name|tanAlt
argument_list|)
decl_stmt|;
name|tiltX
operator|=
name|int
argument_list|(
name|degX
operator|*
operator|(
literal|180
operator|/
name|M_PI
operator|)
argument_list|)
expr_stmt|;
name|tiltY
operator|=
name|int
argument_list|(
operator|-
name|degY
operator|*
operator|(
literal|180
operator|/
name|M_PI
operator|)
argument_list|)
expr_stmt|;
name|rotation
operator|=
literal|360.0
operator|-
operator|(
name|packet
operator|.
name|pkOrientation
operator|.
name|orTwist
operator|/
literal|10.0
operator|)
expr_stmt|;
if|if
condition|(
name|rotation
operator|>
literal|180.0
condition|)
name|rotation
operator|-=
literal|360.0
expr_stmt|;
block|}
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
operator|>
literal|1
condition|)
block|{
name|qCDebug
argument_list|(
name|lcQpaTablet
argument_list|)
operator|<<
literal|"Packet #"
operator|<<
name|i
operator|<<
literal|'/'
operator|<<
name|packetCount
operator|<<
literal|"button:"
operator|<<
name|packet
operator|.
name|pkButtons
operator|<<
name|globalPosF
operator|<<
name|z
operator|<<
literal|"to:"
operator|<<
name|target
operator|<<
name|localPos
operator|<<
literal|"(packet"
operator|<<
name|packet
operator|.
name|pkX
operator|<<
name|packet
operator|.
name|pkY
operator|<<
literal|") dev:"
operator|<<
name|currentDevice
operator|<<
literal|"pointer:"
operator|<<
name|currentPointer
operator|<<
literal|"P:"
operator|<<
name|pressureNew
operator|<<
literal|"tilt:"
operator|<<
name|tiltX
operator|<<
literal|','
operator|<<
name|tiltY
operator|<<
literal|"tanP:"
operator|<<
name|tangentialPressure
operator|<<
literal|"rotation:"
operator|<<
name|rotation
expr_stmt|;
block|}
name|QWindowSystemInterface
operator|::
name|handleTabletEvent
argument_list|(
name|target
argument_list|,
name|packet
operator|.
name|pkButtons
argument_list|,
name|localPos
argument_list|,
name|globalPosF
argument_list|,
name|currentDevice
argument_list|,
name|currentPointer
argument_list|,
name|pressureNew
argument_list|,
name|tiltX
argument_list|,
name|tiltY
argument_list|,
name|tangentialPressure
argument_list|,
name|rotation
argument_list|,
name|z
argument_list|,
name|m_devices
operator|.
name|at
argument_list|(
name|m_currentDevice
argument_list|)
operator|.
name|uniqueId
argument_list|,
name|keyboardModifiers
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABLETEVENT
end_comment
end_unit
