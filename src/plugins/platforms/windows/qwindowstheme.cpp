begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowstheme.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdialoghelpers.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsintegration.h"
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontdatabase.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|"qplatformfunctions_wince.h"
end_include
begin_include
include|#
directive|include
file|"winuser.h"
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<commctrl.h>
end_include
begin_include
include|#
directive|include
file|<objbase.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_CC_MINGW
end_ifndef
begin_include
include|#
directive|include
file|<commoncontrols.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<shellapi.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextStream>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSysInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCache>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPalette>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPixmapCache>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<private/qsystemlibrary_p.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__IImageList_INTERFACE_DEFINED__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__IID_DEFINED__
argument_list|)
end_if
begin_define
DECL|macro|USE_IIMAGELIST
define|#
directive|define
name|USE_IIMAGELIST
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|operator <<
specifier|static
specifier|inline
name|QTextStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
block|{
name|str
operator|.
name|setIntegerBase
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|str
operator|.
name|setFieldWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|str
operator|.
name|setPadChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|<<
literal|" rgb: #"
operator|<<
name|c
operator|.
name|red
argument_list|()
operator|<<
name|c
operator|.
name|green
argument_list|()
operator|<<
name|c
operator|.
name|blue
argument_list|()
expr_stmt|;
name|str
operator|.
name|setIntegerBase
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|str
operator|.
name|setFieldWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|paletteRoleToString
specifier|static
specifier|inline
name|void
name|paletteRoleToString
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|palette
parameter_list|,
specifier|const
name|QPalette
operator|::
name|ColorRole
name|role
parameter_list|,
name|QTextStream
modifier|&
name|str
parameter_list|)
block|{
name|str
operator|<<
literal|"Role: "
expr_stmt|;
name|str
operator|.
name|setFieldWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|str
operator|.
name|setPadChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|<<
name|role
expr_stmt|;
name|str
operator|.
name|setFieldWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|str
operator|<<
literal|" Active: "
operator|<<
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|role
argument_list|)
operator|<<
literal|" Disabled: "
operator|<<
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|role
argument_list|)
operator|<<
literal|" Inactive: "
operator|<<
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|role
argument_list|)
operator|<<
literal|'\n'
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paletteToString
specifier|static
specifier|inline
name|QString
name|paletteToString
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|palette
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|QPalette
operator|::
name|NColorRoles
condition|;
operator|++
name|r
control|)
name|paletteRoleToString
argument_list|(
name|palette
argument_list|,
cast|static_cast
argument_list|<
name|QPalette
operator|::
name|ColorRole
argument_list|>
argument_list|(
name|r
argument_list|)
argument_list|,
name|str
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|booleanSystemParametersInfo
specifier|static
specifier|inline
name|bool
name|booleanSystemParametersInfo
parameter_list|(
name|UINT
name|what
parameter_list|,
name|bool
name|defaultValue
parameter_list|)
block|{
name|BOOL
name|result
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|what
argument_list|,
literal|0
argument_list|,
operator|&
name|result
argument_list|,
literal|0
argument_list|)
condition|)
return|return
name|result
condition|?
literal|true
else|:
literal|false
return|;
return|return
name|defaultValue
return|;
block|}
end_function
begin_function
DECL|function|dWordSystemParametersInfo
specifier|static
specifier|inline
name|bool
name|dWordSystemParametersInfo
parameter_list|(
name|UINT
name|what
parameter_list|,
name|DWORD
name|defaultValue
parameter_list|)
block|{
name|DWORD
name|result
decl_stmt|;
if|if
condition|(
name|SystemParametersInfo
argument_list|(
name|what
argument_list|,
literal|0
argument_list|,
operator|&
name|result
argument_list|,
literal|0
argument_list|)
condition|)
return|return
name|result
return|;
return|return
name|defaultValue
return|;
block|}
end_function
begin_function
DECL|function|mixColors
specifier|static
specifier|inline
name|QColor
name|mixColors
parameter_list|(
specifier|const
name|QColor
modifier|&
name|c1
parameter_list|,
specifier|const
name|QColor
modifier|&
name|c2
parameter_list|)
block|{
return|return
name|QColor
argument_list|(
operator|(
name|c1
operator|.
name|red
argument_list|()
operator|+
name|c2
operator|.
name|red
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|c1
operator|.
name|green
argument_list|()
operator|+
name|c2
operator|.
name|green
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|c1
operator|.
name|blue
argument_list|()
operator|+
name|c2
operator|.
name|blue
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getSysColor
specifier|static
specifier|inline
name|QColor
name|getSysColor
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|qColorToCOLORREF
argument_list|(
name|GetSysColor
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// from QStyle::standardPalette
end_comment
begin_function
DECL|function|standardPalette
specifier|static
specifier|inline
name|QPalette
name|standardPalette
parameter_list|()
block|{
name|QColor
name|backgroundColor
argument_list|(
literal|0xd4
argument_list|,
literal|0xd0
argument_list|,
literal|0xc8
argument_list|)
decl_stmt|;
comment|// win 2000 grey
name|QColor
name|lightColor
argument_list|(
name|backgroundColor
operator|.
name|lighter
argument_list|()
argument_list|)
decl_stmt|;
name|QColor
name|darkColor
argument_list|(
name|backgroundColor
operator|.
name|darker
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QBrush
name|darkBrush
argument_list|(
name|darkColor
argument_list|)
decl_stmt|;
name|QColor
name|midColor
argument_list|(
name|Qt
operator|::
name|gray
argument_list|)
decl_stmt|;
name|QPalette
name|palette
argument_list|(
name|Qt
operator|::
name|black
argument_list|,
name|backgroundColor
argument_list|,
name|lightColor
argument_list|,
name|darkColor
argument_list|,
name|midColor
argument_list|,
name|Qt
operator|::
name|black
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
decl_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|darkBrush
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|darkBrush
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|darkBrush
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|QBrush
argument_list|(
name|backgroundColor
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|palette
return|;
block|}
end_function
begin_function
DECL|function|systemPalette
specifier|static
specifier|inline
name|QPalette
name|systemPalette
parameter_list|()
block|{
name|QPalette
name|result
init|=
name|standardPalette
argument_list|()
decl_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_WINDOWTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_BTNFACE
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_BTNHIGHLIGHT
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_BTNSHADOW
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|,
name|result
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_WINDOWTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|BrightText
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_BTNHIGHLIGHT
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_WINDOW
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_BTNFACE
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_BTNTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_3DLIGHT
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_3DDKSHADOW
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_HIGHLIGHT
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_HIGHLIGHTTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Link
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|LinkVisited
argument_list|,
name|Qt
operator|::
name|magenta
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|result
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|,
name|result
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Light
argument_list|,
name|result
operator|.
name|light
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|,
name|result
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|midlight
argument_list|()
operator|==
name|result
operator|.
name|button
argument_list|()
condition|)
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|result
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|background
argument_list|()
operator|!=
name|result
operator|.
name|base
argument_list|()
condition|)
block|{
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|result
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|result
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QColor
name|disabled
init|=
name|mixColors
argument_list|(
name|result
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|result
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|setColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|result
operator|.
name|foreground
argument_list|()
argument_list|,
name|result
operator|.
name|button
argument_list|()
argument_list|,
name|result
operator|.
name|light
argument_list|()
argument_list|,
name|result
operator|.
name|dark
argument_list|()
argument_list|,
name|result
operator|.
name|mid
argument_list|()
argument_list|,
name|result
operator|.
name|text
argument_list|()
argument_list|,
name|result
operator|.
name|brightText
argument_list|()
argument_list|,
name|result
operator|.
name|base
argument_list|()
argument_list|,
name|result
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_HIGHLIGHT
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_HIGHLIGHTTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|result
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|toolTipPalette
specifier|static
specifier|inline
name|QPalette
name|toolTipPalette
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|systemPalette
parameter_list|)
block|{
name|QPalette
name|result
argument_list|(
name|systemPalette
argument_list|)
decl_stmt|;
specifier|const
name|QColor
name|tipBgColor
argument_list|(
name|getSysColor
argument_list|(
name|COLOR_INFOBK
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QColor
name|tipTextColor
argument_list|(
name|getSysColor
argument_list|(
name|COLOR_INFOTEXT
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|tipBgColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|,
name|tipBgColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|tipTextColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|tipTextColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|tipTextColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|tipBgColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|,
name|tipBgColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|tipTextColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|tipTextColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|tipTextColor
argument_list|)
expr_stmt|;
specifier|const
name|QColor
name|disabled
init|=
name|mixColors
argument_list|(
name|result
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|,
name|result
operator|.
name|button
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|BrightText
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|menuPalette
specifier|static
specifier|inline
name|QPalette
name|menuPalette
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|systemPalette
parameter_list|)
block|{
name|QPalette
name|result
argument_list|(
name|systemPalette
argument_list|)
decl_stmt|;
specifier|const
name|QColor
name|menuColor
argument_list|(
name|getSysColor
argument_list|(
name|COLOR_MENU
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QColor
name|menuTextColor
argument_list|(
name|getSysColor
argument_list|(
name|COLOR_MENUTEXT
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QColor
name|disabled
argument_list|(
name|getSysColor
argument_list|(
name|COLOR_GRAYTEXT
argument_list|)
argument_list|)
decl_stmt|;
comment|// we might need a special color group for the result.
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|menuColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|menuTextColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|menuTextColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|menuTextColor
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
specifier|const
name|bool
name|isFlat
init|=
name|booleanSystemParametersInfo
argument_list|(
name|SPI_GETFLATMENU
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|getSysColor
argument_list|(
name|isFlat
condition|?
name|COLOR_MENUHILIGHT
else|:
name|COLOR_HIGHLIGHT
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|getSysColor
argument_list|(
name|COLOR_HIGHLIGHT
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|disabled
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|result
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|result
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|result
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|result
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|result
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|result
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|result
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|systemPalette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|menuBarPalette
specifier|static
specifier|inline
name|QPalette
modifier|*
name|menuBarPalette
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|menuPalette
parameter_list|)
block|{
name|QPalette
modifier|*
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|booleanSystemParametersInfo
argument_list|(
name|SPI_GETFLATMENU
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|QPalette
argument_list|(
name|menuPalette
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
specifier|const
name|QColor
name|menubar
argument_list|(
name|getSysColor
argument_list|(
name|COLOR_MENUBAR
argument_list|)
argument_list|)
decl_stmt|;
else|#
directive|else
specifier|const
name|QColor
name|menubar
argument_list|(
name|getSysColor
argument_list|(
name|COLOR_MENU
argument_list|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|result
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|menubar
argument_list|)
expr_stmt|;
name|result
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|menubar
argument_list|)
expr_stmt|;
name|result
operator|->
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Button
argument_list|,
name|menubar
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_decl_stmt
DECL|member|name
specifier|const
name|char
modifier|*
name|QWindowsTheme
operator|::
name|name
init|=
literal|"windows"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_instance
name|QWindowsTheme
modifier|*
name|QWindowsTheme
operator|::
name|m_instance
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QWindowsTheme
name|QWindowsTheme
operator|::
name|QWindowsTheme
parameter_list|()
block|{
name|m_instance
operator|=
name|this
expr_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|m_fonts
argument_list|,
name|m_fonts
operator|+
name|NFonts
argument_list|,
cast|static_cast
argument_list|<
name|QFont
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|m_palettes
argument_list|,
name|m_palettes
operator|+
name|NPalettes
argument_list|,
cast|static_cast
argument_list|<
name|QPalette
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsTheme
name|QWindowsTheme
operator|::
name|~
name|QWindowsTheme
parameter_list|()
block|{
name|clearPalettes
argument_list|()
expr_stmt|;
name|clearFonts
argument_list|()
expr_stmt|;
name|m_instance
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|iconThemeSearchPaths
specifier|static
specifier|inline
name|QStringList
name|iconThemeSearchPaths
parameter_list|()
block|{
specifier|const
name|QFileInfo
name|appDir
argument_list|(
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
operator|+
name|QStringLiteral
argument_list|(
literal|"/icons"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|appDir
operator|.
name|isDir
argument_list|()
condition|?
name|QStringList
argument_list|(
name|appDir
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
else|:
name|QStringList
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|styleNames
specifier|static
specifier|inline
name|QStringList
name|styleNames
parameter_list|()
block|{
name|QStringList
name|result
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
condition|)
name|result
operator|.
name|append
argument_list|(
name|QStringLiteral
argument_list|(
literal|"WindowsVista"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_XP
condition|)
name|result
operator|.
name|append
argument_list|(
name|QStringLiteral
argument_list|(
literal|"WindowsXP"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Windows"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|uiEffects
specifier|static
specifier|inline
name|int
name|uiEffects
parameter_list|()
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|booleanSystemParametersInfo
argument_list|(
name|SPI_GETUIEFFECTS
argument_list|,
literal|false
argument_list|)
condition|)
name|result
operator||=
name|QPlatformTheme
operator|::
name|GeneralUiEffect
expr_stmt|;
if|if
condition|(
name|booleanSystemParametersInfo
argument_list|(
name|SPI_GETMENUANIMATION
argument_list|,
literal|false
argument_list|)
condition|)
name|result
operator||=
name|QPlatformTheme
operator|::
name|AnimateMenuUiEffect
expr_stmt|;
if|if
condition|(
name|booleanSystemParametersInfo
argument_list|(
name|SPI_GETMENUFADE
argument_list|,
literal|false
argument_list|)
condition|)
name|result
operator||=
name|QPlatformTheme
operator|::
name|FadeMenuUiEffect
expr_stmt|;
if|if
condition|(
name|booleanSystemParametersInfo
argument_list|(
name|SPI_GETCOMBOBOXANIMATION
argument_list|,
literal|false
argument_list|)
condition|)
name|result
operator||=
name|QPlatformTheme
operator|::
name|AnimateComboUiEffect
expr_stmt|;
if|if
condition|(
name|booleanSystemParametersInfo
argument_list|(
name|SPI_GETTOOLTIPANIMATION
argument_list|,
literal|false
argument_list|)
condition|)
name|result
operator||=
name|QPlatformTheme
operator|::
name|AnimateTooltipUiEffect
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|themeHint
name|QVariant
name|QWindowsTheme
operator|::
name|themeHint
parameter_list|(
name|ThemeHint
name|hint
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|UseFullScreenForPopupMenu
case|:
return|return
name|QVariant
argument_list|(
literal|true
argument_list|)
return|;
case|case
name|DialogButtonBoxLayout
case|:
return|return
name|QVariant
argument_list|(
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
comment|// QDialogButtonBox::WinLayout
case|case
name|IconThemeSearchPaths
case|:
return|return
name|QVariant
argument_list|(
name|iconThemeSearchPaths
argument_list|()
argument_list|)
return|;
case|case
name|StyleNames
case|:
return|return
name|QVariant
argument_list|(
name|styleNames
argument_list|()
argument_list|)
return|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
case|case
name|TextCursorWidth
case|:
return|return
name|QVariant
argument_list|(
name|int
argument_list|(
name|dWordSystemParametersInfo
argument_list|(
name|SPI_GETCARETWIDTH
argument_list|,
literal|1u
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|DropShadow
case|:
return|return
name|QVariant
argument_list|(
name|booleanSystemParametersInfo
argument_list|(
name|SPI_GETDROPSHADOW
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
comment|// !Q_OS_WINCE
case|case
name|MaximumScrollBarDragDistance
case|:
return|return
name|QVariant
argument_list|(
name|qRound
argument_list|(
name|qreal
argument_list|(
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|defaultDPI
argument_list|()
argument_list|)
operator|*
literal|1.375
argument_list|)
argument_list|)
return|;
case|case
name|KeyboardScheme
case|:
return|return
name|QVariant
argument_list|(
name|int
argument_list|(
name|WindowsKeyboardScheme
argument_list|)
argument_list|)
return|;
case|case
name|UiEffects
case|:
return|return
name|QVariant
argument_list|(
name|uiEffects
argument_list|()
argument_list|)
return|;
case|case
name|IconPixmapSizes
case|:
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|sizes
decl_stmt|;
name|sizes
operator|<<
literal|16
operator|<<
literal|32
expr_stmt|;
ifdef|#
directive|ifdef
name|USE_IIMAGELIST
name|sizes
operator|<<
literal|48
expr_stmt|;
comment|// sHIL_EXTRALARGE
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
condition|)
name|sizes
operator|<<
literal|256
expr_stmt|;
comment|// SHIL_JUMBO
endif|#
directive|endif
comment|// USE_IIMAGELIST
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sizes
argument_list|)
return|;
block|}
case|case
name|DialogSnapToDefaultButton
case|:
return|return
name|QVariant
argument_list|(
name|booleanSystemParametersInfo
argument_list|(
name|SPI_GETSNAPTODEFBUTTON
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QPlatformTheme
operator|::
name|themeHint
argument_list|(
name|hint
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|clearPalettes
name|void
name|QWindowsTheme
operator|::
name|clearPalettes
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_palettes
argument_list|,
name|m_palettes
operator|+
name|NPalettes
argument_list|)
expr_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|m_palettes
argument_list|,
name|m_palettes
operator|+
name|NPalettes
argument_list|,
cast|static_cast
argument_list|<
name|QPalette
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|refreshPalettes
name|void
name|QWindowsTheme
operator|::
name|refreshPalettes
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
return|return;
name|m_palettes
index|[
name|SystemPalette
index|]
operator|=
operator|new
name|QPalette
argument_list|(
name|systemPalette
argument_list|()
argument_list|)
expr_stmt|;
name|m_palettes
index|[
name|ToolTipPalette
index|]
operator|=
operator|new
name|QPalette
argument_list|(
name|toolTipPalette
argument_list|(
operator|*
name|m_palettes
index|[
name|SystemPalette
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|m_palettes
index|[
name|MenuPalette
index|]
operator|=
operator|new
name|QPalette
argument_list|(
name|menuPalette
argument_list|(
operator|*
name|m_palettes
index|[
name|SystemPalette
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|m_palettes
index|[
name|MenuBarPalette
index|]
operator|=
name|menuBarPalette
argument_list|(
operator|*
name|m_palettes
index|[
name|MenuPalette
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseTheming
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|'\n'
operator|<<
literal|"  system="
operator|<<
name|paletteToString
argument_list|(
operator|*
name|m_palettes
index|[
name|SystemPalette
index|]
argument_list|)
operator|<<
literal|"  tooltip="
operator|<<
name|paletteToString
argument_list|(
operator|*
name|m_palettes
index|[
name|ToolTipPalette
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearFonts
name|void
name|QWindowsTheme
operator|::
name|clearFonts
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_fonts
argument_list|,
name|m_fonts
operator|+
name|NFonts
argument_list|)
expr_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|m_fonts
argument_list|,
name|m_fonts
operator|+
name|NFonts
argument_list|,
cast|static_cast
argument_list|<
name|QFont
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|refreshFonts
name|void
name|QWindowsTheme
operator|::
name|refreshFonts
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|// ALL THIS FUNCTIONALITY IS MISSING ON WINCE
name|clearFonts
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
return|return;
name|NONCLIENTMETRICS
name|ncm
decl_stmt|;
name|ncm
operator|.
name|cbSize
operator|=
name|FIELD_OFFSET
argument_list|(
name|NONCLIENTMETRICS
argument_list|,
name|lfMessageFont
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|LOGFONT
argument_list|)
expr_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETNONCLIENTMETRICS
argument_list|,
name|ncm
operator|.
name|cbSize
argument_list|,
operator|&
name|ncm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|QFont
name|menuFont
init|=
name|QWindowsFontDatabase
operator|::
name|LOGFONT_to_QFont
argument_list|(
name|ncm
operator|.
name|lfMenuFont
argument_list|)
decl_stmt|;
specifier|const
name|QFont
name|messageBoxFont
init|=
name|QWindowsFontDatabase
operator|::
name|LOGFONT_to_QFont
argument_list|(
name|ncm
operator|.
name|lfMessageFont
argument_list|)
decl_stmt|;
specifier|const
name|QFont
name|statusFont
init|=
name|QWindowsFontDatabase
operator|::
name|LOGFONT_to_QFont
argument_list|(
name|ncm
operator|.
name|lfStatusFont
argument_list|)
decl_stmt|;
specifier|const
name|QFont
name|titleFont
init|=
name|QWindowsFontDatabase
operator|::
name|LOGFONT_to_QFont
argument_list|(
name|ncm
operator|.
name|lfCaptionFont
argument_list|)
decl_stmt|;
name|QFont
name|fixedFont
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Courier New"
argument_list|)
argument_list|,
name|messageBoxFont
operator|.
name|pointSize
argument_list|()
argument_list|)
decl_stmt|;
name|fixedFont
operator|.
name|setStyleHint
argument_list|(
name|QFont
operator|::
name|TypeWriter
argument_list|)
expr_stmt|;
name|LOGFONT
name|lfIconTitleFont
decl_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETICONTITLELOGFONT
argument_list|,
sizeof|sizeof
argument_list|(
name|lfIconTitleFont
argument_list|)
argument_list|,
operator|&
name|lfIconTitleFont
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|QFont
name|iconTitleFont
init|=
name|QWindowsFontDatabase
operator|::
name|LOGFONT_to_QFont
argument_list|(
name|lfIconTitleFont
argument_list|)
decl_stmt|;
name|m_fonts
index|[
name|SystemFont
index|]
operator|=
operator|new
name|QFont
argument_list|(
name|QWindowsFontDatabase
operator|::
name|systemDefaultFont
argument_list|()
argument_list|)
expr_stmt|;
name|m_fonts
index|[
name|MenuFont
index|]
operator|=
operator|new
name|QFont
argument_list|(
name|menuFont
argument_list|)
expr_stmt|;
name|m_fonts
index|[
name|MenuBarFont
index|]
operator|=
operator|new
name|QFont
argument_list|(
name|menuFont
argument_list|)
expr_stmt|;
name|m_fonts
index|[
name|MessageBoxFont
index|]
operator|=
operator|new
name|QFont
argument_list|(
name|messageBoxFont
argument_list|)
expr_stmt|;
name|m_fonts
index|[
name|TipLabelFont
index|]
operator|=
operator|new
name|QFont
argument_list|(
name|statusFont
argument_list|)
expr_stmt|;
name|m_fonts
index|[
name|StatusBarFont
index|]
operator|=
operator|new
name|QFont
argument_list|(
name|statusFont
argument_list|)
expr_stmt|;
name|m_fonts
index|[
name|MdiSubWindowTitleFont
index|]
operator|=
operator|new
name|QFont
argument_list|(
name|titleFont
argument_list|)
expr_stmt|;
name|m_fonts
index|[
name|DockWidgetTitleFont
index|]
operator|=
operator|new
name|QFont
argument_list|(
name|titleFont
argument_list|)
expr_stmt|;
name|m_fonts
index|[
name|ItemViewFont
index|]
operator|=
operator|new
name|QFont
argument_list|(
name|iconTitleFont
argument_list|)
expr_stmt|;
name|m_fonts
index|[
name|FixedFont
index|]
operator|=
operator|new
name|QFont
argument_list|(
name|fixedFont
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verboseTheming
condition|)
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|'\n'
operator|<<
literal|"  menuFont="
operator|<<
name|menuFont
operator|<<
literal|"  messageBox="
operator|<<
name|MessageBoxFont
expr_stmt|;
endif|#
directive|endif
comment|// !Q_OS_WINCE
block|}
end_function
begin_function
DECL|function|usePlatformNativeDialog
name|bool
name|QWindowsTheme
operator|::
name|usePlatformNativeDialog
parameter_list|(
name|DialogType
name|type
parameter_list|)
specifier|const
block|{
return|return
name|QWindowsDialogs
operator|::
name|useHelper
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createPlatformDialogHelper
name|QPlatformDialogHelper
modifier|*
name|QWindowsTheme
operator|::
name|createPlatformDialogHelper
parameter_list|(
name|DialogType
name|type
parameter_list|)
specifier|const
block|{
return|return
name|QWindowsDialogs
operator|::
name|createHelper
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|windowsThemeChanged
name|void
name|QWindowsTheme
operator|::
name|windowsThemeChanged
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|refresh
argument_list|()
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleThemeChange
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Defined in qpixmap_win.cpp
end_comment
begin_function_decl
name|Q_GUI_EXPORT
name|QPixmap
name|qt_pixmapFromWinHICON
parameter_list|(
name|HICON
name|icon
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|loadIconFromShell32
specifier|static
name|QPixmap
name|loadIconFromShell32
parameter_list|(
name|int
name|resourceId
parameter_list|,
name|QSizeF
name|size
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|HMODULE
name|hmod
init|=
name|LoadLibrary
argument_list|(
literal|L"ceshell"
argument_list|)
decl_stmt|;
else|#
directive|else
name|HMODULE
name|hmod
init|=
name|QSystemLibrary
operator|::
name|load
argument_list|(
literal|L"shell32"
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|hmod
condition|)
block|{
name|HICON
name|iconHandle
init|=
operator|(
name|HICON
operator|)
name|LoadImage
argument_list|(
name|hmod
argument_list|,
name|MAKEINTRESOURCE
argument_list|(
name|resourceId
argument_list|)
argument_list|,
name|IMAGE_ICON
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|iconHandle
condition|)
block|{
name|QPixmap
name|iconpixmap
init|=
name|qt_pixmapFromWinHICON
argument_list|(
name|iconHandle
argument_list|)
decl_stmt|;
name|DestroyIcon
argument_list|(
name|iconHandle
argument_list|)
expr_stmt|;
return|return
name|iconpixmap
return|;
block|}
block|}
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|standardPixmap
name|QPixmap
name|QWindowsTheme
operator|::
name|standardPixmap
parameter_list|(
name|StandardPixmap
name|sp
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
specifier|const
block|{
name|int
name|resourceId
init|=
operator|-
literal|1
decl_stmt|;
name|LPCTSTR
name|iconName
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|sp
condition|)
block|{
case|case
name|DriveCDIcon
case|:
case|case
name|DriveDVDIcon
case|:
name|resourceId
operator|=
literal|12
expr_stmt|;
break|break;
case|case
name|DriveNetIcon
case|:
name|resourceId
operator|=
literal|10
expr_stmt|;
break|break;
case|case
name|DriveHDIcon
case|:
name|resourceId
operator|=
literal|9
expr_stmt|;
break|break;
case|case
name|DriveFDIcon
case|:
name|resourceId
operator|=
literal|7
expr_stmt|;
break|break;
case|case
name|FileIcon
case|:
case|case
name|FileLinkIcon
case|:
name|resourceId
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|DirIcon
case|:
case|case
name|DirLinkIcon
case|:
case|case
name|DirClosedIcon
case|:
name|resourceId
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|DesktopIcon
case|:
name|resourceId
operator|=
literal|35
expr_stmt|;
break|break;
case|case
name|ComputerIcon
case|:
name|resourceId
operator|=
literal|16
expr_stmt|;
break|break;
case|case
name|DirOpenIcon
case|:
case|case
name|DirLinkOpenIcon
case|:
name|resourceId
operator|=
literal|5
expr_stmt|;
break|break;
case|case
name|FileDialogNewFolder
case|:
name|resourceId
operator|=
literal|319
expr_stmt|;
break|break;
case|case
name|DirHomeIcon
case|:
name|resourceId
operator|=
literal|235
expr_stmt|;
break|break;
case|case
name|TrashIcon
case|:
name|resourceId
operator|=
literal|191
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
case|case
name|MessageBoxInformation
case|:
name|iconName
operator|=
name|IDI_INFORMATION
expr_stmt|;
break|break;
case|case
name|MessageBoxWarning
case|:
name|iconName
operator|=
name|IDI_WARNING
expr_stmt|;
break|break;
case|case
name|MessageBoxCritical
case|:
name|iconName
operator|=
name|IDI_ERROR
expr_stmt|;
break|break;
case|case
name|MessageBoxQuestion
case|:
name|iconName
operator|=
name|IDI_QUESTION
expr_stmt|;
break|break;
case|case
name|VistaShield
case|:
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
operator|&&
operator|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|QWindowsContext
operator|::
name|shell32dll
operator|.
name|sHGetStockIconInfo
condition|)
return|return
name|QPixmap
argument_list|()
return|;
name|QPixmap
name|pixmap
decl_stmt|;
name|SHSTOCKICONINFO
name|iconInfo
decl_stmt|;
name|memset
argument_list|(
operator|&
name|iconInfo
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|iconInfo
argument_list|)
argument_list|)
expr_stmt|;
name|iconInfo
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|iconInfo
argument_list|)
expr_stmt|;
specifier|const
name|int
name|iconSize
init|=
name|size
operator|.
name|width
argument_list|()
operator|>
literal|16
condition|?
name|SHGFI_LARGEICON
else|:
name|SHGFI_SMALLICON
decl_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|shell32dll
operator|.
name|sHGetStockIconInfo
argument_list|(
name|SIID_SHIELD
argument_list|,
name|SHGFI_ICON
operator||
name|iconSize
argument_list|,
operator|&
name|iconInfo
argument_list|)
operator|==
name|S_OK
condition|)
block|{
name|pixmap
operator|=
name|qt_pixmapFromWinHICON
argument_list|(
name|iconInfo
operator|.
name|hIcon
argument_list|)
expr_stmt|;
name|DestroyIcon
argument_list|(
name|iconInfo
operator|.
name|hIcon
argument_list|)
expr_stmt|;
return|return
name|pixmap
return|;
block|}
block|}
break|break;
endif|#
directive|endif
default|default:
break|break;
block|}
if|if
condition|(
name|resourceId
operator|!=
operator|-
literal|1
condition|)
block|{
name|QPixmap
name|pixmap
init|=
name|loadIconFromShell32
argument_list|(
name|resourceId
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|sp
operator|==
name|FileLinkIcon
operator|||
name|sp
operator|==
name|DirLinkIcon
operator|||
name|sp
operator|==
name|DirLinkOpenIcon
condition|)
block|{
name|QPainter
name|painter
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|QPixmap
name|link
init|=
name|loadIconFromShell32
argument_list|(
literal|30
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
return|return
name|pixmap
return|;
block|}
block|}
if|if
condition|(
name|iconName
condition|)
block|{
name|HICON
name|iconHandle
init|=
name|LoadIcon
argument_list|(
name|NULL
argument_list|,
name|iconName
argument_list|)
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|qt_pixmapFromWinHICON
argument_list|(
name|iconHandle
argument_list|)
decl_stmt|;
name|DestroyIcon
argument_list|(
name|iconHandle
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|pixmap
return|;
block|}
return|return
name|QPlatformTheme
operator|::
name|standardPixmap
argument_list|(
name|sp
argument_list|,
name|size
argument_list|)
return|;
block|}
end_function
begin_enum
enum|enum
block|{
comment|// Shell image list ids
DECL|enumerator|sHIL_EXTRALARGE
name|sHIL_EXTRALARGE
init|=
literal|0x2
block|,
comment|// 48x48 or user-defined
DECL|enumerator|sHIL_JUMBO
name|sHIL_JUMBO
init|=
literal|0x4
comment|// 256x256 (Vista or later)
block|}
enum|;
end_enum
begin_function
DECL|function|dirIconPixmapCacheKey
specifier|static
name|QString
name|dirIconPixmapCacheKey
parameter_list|(
name|int
name|iIcon
parameter_list|,
name|int
name|iconSize
parameter_list|,
name|int
name|imageListSize
parameter_list|)
block|{
name|QString
name|key
init|=
name|QLatin1String
argument_list|(
literal|"qt_dir_"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|iIcon
argument_list|)
decl_stmt|;
if|if
condition|(
name|iconSize
operator|==
name|SHGFI_LARGEICON
condition|)
name|key
operator|+=
name|QLatin1Char
argument_list|(
literal|'l'
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|imageListSize
condition|)
block|{
case|case
name|sHIL_EXTRALARGE
case|:
name|key
operator|+=
name|QLatin1Char
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
break|break;
case|case
name|sHIL_JUMBO
case|:
name|key
operator|+=
name|QLatin1Char
argument_list|(
literal|'j'
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|key
return|;
block|}
end_function
begin_class
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
class|class
DECL|class|FakePointer
name|FakePointer
block|{
public|public:
name|Q_STATIC_ASSERT_X
argument_list|(
argument|sizeof(T)<= sizeof(void *)
argument_list|,
literal|"FakePointers can only go that far."
argument_list|)
empty_stmt|;
DECL|function|create
specifier|static
name|FakePointer
modifier|*
name|create
parameter_list|(
name|T
name|thing
parameter_list|)
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|FakePointer
operator|*
argument_list|>
argument_list|(
name|thing
argument_list|)
return|;
block|}
DECL|function|operator *
name|T
name|operator
name|*
parameter_list|()
specifier|const
block|{
return|return
name|T
argument_list|(
name|qintptr
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
DECL|function|operator delete
name|void
name|operator
name|delete
parameter_list|(
name|void
modifier|*
parameter_list|)
block|{}
block|}
class|;
end_class
begin_comment
comment|// Shell image list helper functions.
end_comment
begin_function
DECL|function|pixmapFromShellImageList
specifier|static
name|QPixmap
name|pixmapFromShellImageList
parameter_list|(
name|int
name|iImageList
parameter_list|,
specifier|const
name|SHFILEINFO
modifier|&
name|info
parameter_list|)
block|{
name|QPixmap
name|result
decl_stmt|;
ifdef|#
directive|ifdef
name|USE_IIMAGELIST
comment|// For MinGW:
specifier|static
specifier|const
name|IID
name|iID_IImageList
init|=
block|{
literal|0x46eb5926
block|,
literal|0x582e
block|,
literal|0x4017
block|,
block|{
literal|0x9f
block|,
literal|0xdf
block|,
literal|0xe8
block|,
literal|0x99
block|,
literal|0x8d
block|,
literal|0xaa
block|,
literal|0x9
block|,
literal|0x50
block|}
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|QWindowsContext
operator|::
name|shell32dll
operator|.
name|sHGetImageList
condition|)
return|return
name|result
return|;
if|if
condition|(
name|iImageList
operator|==
name|sHIL_JUMBO
operator|&&
name|QSysInfo
operator|::
name|WindowsVersion
operator|<
name|QSysInfo
operator|::
name|WV_VISTA
condition|)
return|return
name|result
return|;
name|IImageList
modifier|*
name|imageList
init|=
literal|0
decl_stmt|;
name|HRESULT
name|hr
init|=
name|QWindowsContext
operator|::
name|shell32dll
operator|.
name|sHGetImageList
argument_list|(
name|iImageList
argument_list|,
name|iID_IImageList
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|imageList
argument_list|)
decl_stmt|;
if|if
condition|(
name|hr
operator|!=
name|S_OK
condition|)
return|return
name|result
return|;
name|HICON
name|hIcon
decl_stmt|;
name|hr
operator|=
name|imageList
operator|->
name|GetIcon
argument_list|(
name|info
operator|.
name|iIcon
argument_list|,
name|ILD_TRANSPARENT
argument_list|,
operator|&
name|hIcon
argument_list|)
expr_stmt|;
if|if
condition|(
name|hr
operator|==
name|S_OK
condition|)
block|{
name|result
operator|=
name|qt_pixmapFromWinHICON
argument_list|(
name|hIcon
argument_list|)
expr_stmt|;
name|DestroyIcon
argument_list|(
name|hIcon
argument_list|)
expr_stmt|;
block|}
name|imageList
operator|->
name|Release
argument_list|()
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|iImageList
argument_list|)
name|Q_UNUSED
argument_list|(
argument|info
argument_list|)
endif|#
directive|endif
comment|// USE_IIMAGELIST
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|fileIconPixmap
name|QPixmap
name|QWindowsTheme
operator|::
name|fileIconPixmap
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|fileInfo
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|QPlatformTheme
operator|::
name|IconOptions
name|iconOptions
parameter_list|)
specifier|const
block|{
comment|/* We don't use the variable, but by storing it statically, we      * ensure CoInitialize is only called once. */
specifier|static
name|HRESULT
name|comInit
init|=
name|CoInitialize
argument_list|(
name|NULL
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|comInit
argument_list|)
expr_stmt|;
specifier|static
name|QCache
argument_list|<
name|QString
argument_list|,
name|FakePointer
argument_list|<
name|int
argument_list|>
argument_list|>
name|dirIconEntryCache
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|static
name|QMutex
name|mx
decl_stmt|;
specifier|static
name|int
name|defaultFolderIIcon
init|=
operator|-
literal|1
decl_stmt|;
specifier|const
name|bool
name|useDefaultFolderIcon
init|=
name|iconOptions
operator|&
name|QPlatformTheme
operator|::
name|DontUseCustomDirectoryIcons
decl_stmt|;
name|QPixmap
name|pixmap
decl_stmt|;
specifier|const
name|QString
name|filePath
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fileInfo
operator|.
name|filePath
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|size
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|iconSize
init|=
name|width
operator|>
literal|16
condition|?
name|SHGFI_LARGEICON
else|:
name|SHGFI_SMALLICON
decl_stmt|;
specifier|const
name|int
name|requestedImageListSize
init|=
ifdef|#
directive|ifdef
name|USE_IIMAGELIST
name|width
operator|>
literal|48
condition|?
name|sHIL_JUMBO
else|:
operator|(
name|width
operator|>
literal|32
condition|?
name|sHIL_EXTRALARGE
else|:
literal|0
operator|)
decl_stmt|;
else|#
directive|else
literal|0
expr_stmt|;
endif|#
directive|endif
comment|// !USE_IIMAGELIST
name|bool
name|cacheableDirIcon
init|=
name|fileInfo
operator|.
name|isDir
argument_list|()
operator|&&
operator|!
name|fileInfo
operator|.
name|isRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|cacheableDirIcon
condition|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mx
argument_list|)
decl_stmt|;
name|int
name|iIcon
init|=
operator|(
name|useDefaultFolderIcon
operator|&&
name|defaultFolderIIcon
operator|>=
literal|0
operator|)
condition|?
name|defaultFolderIIcon
else|:
operator|*
operator|*
name|dirIconEntryCache
operator|.
name|object
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|iIcon
condition|)
block|{
name|QPixmapCache
operator|::
name|find
argument_list|(
name|dirIconPixmapCacheKey
argument_list|(
name|iIcon
argument_list|,
name|iconSize
argument_list|,
name|requestedImageListSize
argument_list|)
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
comment|// Let's keep both caches in sync
name|dirIconEntryCache
operator|.
name|remove
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
else|else
return|return
name|pixmap
return|;
block|}
block|}
name|SHFILEINFO
name|info
decl_stmt|;
name|unsigned
name|int
name|flags
init|=
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|SHGFI_ICON
operator||
name|iconSize
operator||
name|SHGFI_SYSICONINDEX
operator||
name|SHGFI_ADDOVERLAYS
operator||
name|SHGFI_OVERLAYINDEX
decl_stmt|;
else|#
directive|else
name|iconSize
operator||
name|SHGFI_SYSICONINDEX
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINCE
name|unsigned
name|long
name|val
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cacheableDirIcon
operator|&&
name|useDefaultFolderIcon
condition|)
block|{
name|flags
operator||=
name|SHGFI_USEFILEATTRIBUTES
expr_stmt|;
name|val
operator|=
name|SHGetFileInfo
argument_list|(
literal|L"dummy"
argument_list|,
name|FILE_ATTRIBUTE_DIRECTORY
argument_list|,
operator|&
name|info
argument_list|,
sizeof|sizeof
argument_list|(
name|SHFILEINFO
argument_list|)
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
name|SHGetFileInfo
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|filePath
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|&
name|info
argument_list|,
sizeof|sizeof
argument_list|(
name|SHFILEINFO
argument_list|)
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
comment|// Even if GetFileInfo returns a valid result, hIcon can be empty in some cases
if|if
condition|(
name|val
operator|&&
name|info
operator|.
name|hIcon
condition|)
block|{
name|QString
name|key
decl_stmt|;
if|if
condition|(
name|cacheableDirIcon
condition|)
block|{
if|if
condition|(
name|useDefaultFolderIcon
operator|&&
name|defaultFolderIIcon
operator|<
literal|0
condition|)
name|defaultFolderIIcon
operator|=
name|info
operator|.
name|iIcon
expr_stmt|;
comment|//using the unique icon index provided by windows save us from duplicate keys
name|key
operator|=
name|dirIconPixmapCacheKey
argument_list|(
name|info
operator|.
name|iIcon
argument_list|,
name|iconSize
argument_list|,
name|requestedImageListSize
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|find
argument_list|(
name|key
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mx
argument_list|)
decl_stmt|;
name|dirIconEntryCache
operator|.
name|insert
argument_list|(
name|filePath
argument_list|,
name|FakePointer
argument_list|<
name|int
argument_list|>
operator|::
name|create
argument_list|(
name|info
operator|.
name|iIcon
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|requestedImageListSize
condition|)
block|{
name|pixmap
operator|=
name|pixmapFromShellImageList
argument_list|(
name|requestedImageListSize
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
operator|&&
name|requestedImageListSize
operator|==
name|sHIL_JUMBO
condition|)
name|pixmap
operator|=
name|pixmapFromShellImageList
argument_list|(
name|sHIL_EXTRALARGE
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
name|pixmap
operator|=
name|qt_pixmapFromWinHICON
argument_list|(
name|info
operator|.
name|hIcon
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|cacheableDirIcon
condition|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mx
argument_list|)
decl_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|key
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|dirIconEntryCache
operator|.
name|insert
argument_list|(
name|filePath
argument_list|,
name|FakePointer
argument_list|<
name|int
argument_list|>
operator|::
name|create
argument_list|(
name|info
operator|.
name|iIcon
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QWindowsTheme::fileIconPixmap() no icon found"
argument_list|)
expr_stmt|;
block|}
block|}
name|DestroyIcon
argument_list|(
name|info
operator|.
name|hIcon
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|pixmap
return|;
return|return
name|QPlatformTheme
operator|::
name|fileIconPixmap
argument_list|(
name|fileInfo
argument_list|,
name|size
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
