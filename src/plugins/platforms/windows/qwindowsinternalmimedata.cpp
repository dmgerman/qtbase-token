begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsinternalmimedata.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qplatformfunctions_wince.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsmime.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_comment
comment|/*!     \class QWindowsInternalMimeDataBase     \brief Base for implementations of QInternalMimeData using a IDataObject COM object.      In clipboard handling and Drag and drop, static instances     of QInternalMimeData implementations are kept and passed to the client.      QInternalMimeData provides virtuals that query the formats and retrieve     mime data on demand when the client invokes functions like QMimeData::hasHtml(),     QMimeData::html() on the instance returned. Otherwise, expensive     construction of a new QMimeData object containing all possible     formats would have to be done in each call to mimeData().      The base class introduces new virtuals to obtain and release     the instances IDataObject from the clipboard or Drag and Drop and     does conversion using QWindowsMime classes.      \sa QInternalMimeData, QWindowsMime, QWindowsMimeConverter     \internal     \ingroup qt-lighthouse-win */
end_comment
begin_function
DECL|function|hasFormat_sys
name|bool
name|QWindowsInternalMimeData
operator|::
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
specifier|const
block|{
name|IDataObject
modifier|*
name|pDataObj
init|=
name|retrieveDataObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pDataObj
condition|)
return|return
literal|false
return|;
specifier|const
name|QWindowsMimeConverter
modifier|&
name|mc
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|mimeConverter
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|has
init|=
name|mc
operator|.
name|converterToMime
argument_list|(
name|mime
argument_list|,
name|pDataObj
argument_list|)
operator|!=
literal|0
decl_stmt|;
name|releaseDataObject
argument_list|(
name|pDataObj
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|mime
operator|<<
name|has
expr_stmt|;
return|return
name|has
return|;
block|}
end_function
begin_function
DECL|function|formats_sys
name|QStringList
name|QWindowsInternalMimeData
operator|::
name|formats_sys
parameter_list|()
specifier|const
block|{
name|IDataObject
modifier|*
name|pDataObj
init|=
name|retrieveDataObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pDataObj
condition|)
return|return
name|QStringList
argument_list|()
return|;
specifier|const
name|QWindowsMimeConverter
modifier|&
name|mc
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|mimeConverter
argument_list|()
decl_stmt|;
specifier|const
name|QStringList
name|fmts
init|=
name|mc
operator|.
name|allMimesForFormats
argument_list|(
name|pDataObj
argument_list|)
decl_stmt|;
name|releaseDataObject
argument_list|(
name|pDataObj
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|fmts
expr_stmt|;
return|return
name|fmts
return|;
block|}
end_function
begin_function
DECL|function|retrieveData_sys
name|QVariant
name|QWindowsInternalMimeData
operator|::
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
block|{
name|IDataObject
modifier|*
name|pDataObj
init|=
name|retrieveDataObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pDataObj
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QVariant
name|result
decl_stmt|;
specifier|const
name|QWindowsMimeConverter
modifier|&
name|mc
init|=
name|QWindowsContext
operator|::
name|instance
argument_list|()
operator|->
name|mimeConverter
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|QWindowsMime
modifier|*
name|converter
init|=
name|mc
operator|.
name|converterToMime
argument_list|(
name|mimeType
argument_list|,
name|pDataObj
argument_list|)
condition|)
name|result
operator|=
name|converter
operator|->
name|convertToMime
argument_list|(
name|mimeType
argument_list|,
name|pDataObj
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|releaseDataObject
argument_list|(
name|pDataObj
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWindowsContext
operator|::
name|verbose
condition|)
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|' '
operator|<<
name|mimeType
operator|<<
literal|' '
operator|<<
name|type
operator|<<
literal|" returns "
operator|<<
name|result
operator|.
name|type
argument_list|()
operator|<<
operator|(
name|result
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|ByteArray
condition|?
name|result
operator|.
name|toString
argument_list|()
else|:
name|QStringLiteral
argument_list|(
literal|"<data>"
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
end_unit
