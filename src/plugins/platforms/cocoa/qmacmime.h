begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMACMIME_H
end_ifndef
begin_define
DECL|macro|QMACMIME_H
define|#
directive|define
name|QMACMIME_H
end_define
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|<CoreFoundation/CoreFoundation.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// Duplicate of QMacPasteboardMime in QtMacExtras. Keep in sync!
name|class
name|QMacPasteboardMime
block|{
name|char
name|type
decl_stmt|;
name|public
label|:
enum|enum
name|QMacPasteboardMimeType
block|{
name|MIME_DND
init|=
literal|0x01
block|,
name|MIME_CLIP
init|=
literal|0x02
block|,
name|MIME_QT_CONVERTOR
init|=
literal|0x04
block|,
name|MIME_QT3_CONVERTOR
init|=
literal|0x08
block|,
name|MIME_ALL
init|=
name|MIME_DND
operator||
name|MIME_CLIP
block|}
enum|;
name|explicit
name|QMacPasteboardMime
parameter_list|(
name|char
parameter_list|)
function_decl|;
name|virtual
operator|~
name|QMacPasteboardMime
argument_list|()
expr_stmt|;
specifier|static
name|void
name|initializeMimeTypes
parameter_list|()
function_decl|;
specifier|static
name|void
name|destroyMimeTypes
parameter_list|()
function_decl|;
specifier|static
name|QList
operator|<
name|QMacPasteboardMime
operator|*
operator|>
name|all
argument_list|(
name|uchar
argument_list|)
expr_stmt|;
specifier|static
name|QMacPasteboardMime
modifier|*
name|convertor
parameter_list|(
name|uchar
parameter_list|,
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
specifier|static
name|QString
name|flavorToMime
parameter_list|(
name|uchar
parameter_list|,
name|QString
name|flav
parameter_list|)
function_decl|;
name|virtual
name|QString
name|convertorName
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|canConvert
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|,
name|QString
name|flav
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|mimeFor
parameter_list|(
name|QString
name|flav
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|flavorFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|mime
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QVariant
name|convertToMime
argument_list|(
specifier|const
name|QString
operator|&
name|mime
argument_list|,
name|QList
operator|<
name|QByteArray
operator|>
name|data
argument_list|,
name|QString
name|flav
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|QList
operator|<
name|QByteArray
operator|>
name|convertFromMime
argument_list|(
argument|const QString&mime
argument_list|,
argument|QVariant data
argument_list|,
argument|QString flav
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|int
name|count
parameter_list|(
name|QMimeData
modifier|*
name|mimeData
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function_decl
name|void
name|qt_mac_addToGlobalMimeList
parameter_list|(
name|QMacPasteboardMime
modifier|*
name|macMime
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qt_mac_removeFromGlobalMimeList
parameter_list|(
name|QMacPasteboardMime
modifier|*
name|macMime
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|qt_mac_registerDraggedTypes
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|types
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|const
name|QStringList
modifier|&
name|qt_mac_enabledDraggedTypes
parameter_list|()
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
