begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPRINTENGINE_MAC_P_H
end_ifndef
begin_define
DECL|macro|QPRINTENGINE_MAC_P_H
define|#
directive|define
name|QPRINTENGINE_MAC_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_include
include|#
directive|include
file|<QtPrintSupport/qprinter.h>
end_include
begin_include
include|#
directive|include
file|<QtPrintSupport/qprintengine.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpainter_p.h>
end_include
begin_include
include|#
directive|include
file|"qpaintengine_mac_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|__OBJC__
end_ifdef
begin_decl_stmt
unit|@
DECL|variable|NSPrintInfo
name|class
name|NSPrintInfo
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_typedef
DECL|typedef|NSPrintInfo
typedef|typedef
name|void
name|NSPrintInfo
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QPrinterPrivate
name|class
name|QPrinterPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMacPrintEnginePrivate
name|class
name|QMacPrintEnginePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPaintEngine
name|class
name|QMacPrintEngine
range|:
name|public
name|QPaintEngine
decl_stmt|,
name|public
name|QPrintEngine
block|{
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QMacPrintEngine
argument_list|)
name|public
label|:
name|QMacPrintEngine
argument_list|(
argument|QPrinter::PrinterMode mode
argument_list|)
empty_stmt|;
name|Qt
operator|::
name|HANDLE
name|handle
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|dev
parameter_list|)
function_decl|;
name|bool
name|end
parameter_list|()
function_decl|;
name|virtual
name|QPaintEngine
operator|::
name|Type
name|type
argument_list|()
specifier|const
block|{
return|return
name|QPaintEngine
operator|::
name|MacPrinter
return|;
block|}
name|QPaintEngine
operator|*
name|paintEngine
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setProperty
parameter_list|(
name|PrintEnginePropertyKey
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
name|QVariant
name|property
argument_list|(
name|PrintEnginePropertyKey
name|key
argument_list|)
decl|const
decl_stmt|;
name|QPrinter
operator|::
name|PrinterState
name|printerState
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|newPage
parameter_list|()
function_decl|;
name|bool
name|abort
parameter_list|()
function_decl|;
name|int
name|metric
argument_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
argument_list|)
decl|const
decl_stmt|;
comment|//forwarded functions
name|void
name|updateState
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|&
name|state
parameter_list|)
function_decl|;
name|virtual
name|void
name|drawLines
parameter_list|(
specifier|const
name|QLineF
modifier|*
name|lines
parameter_list|,
name|int
name|lineCount
parameter_list|)
function_decl|;
name|virtual
name|void
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|r
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
name|virtual
name|void
name|drawPoints
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|p
parameter_list|,
name|int
name|pointCount
parameter_list|)
function_decl|;
name|virtual
name|void
name|drawEllipse
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
function_decl|;
name|virtual
name|void
name|drawPolygon
parameter_list|(
specifier|const
name|QPointF
modifier|*
name|points
parameter_list|,
name|int
name|pointCount
parameter_list|,
name|PolygonDrawMode
name|mode
parameter_list|)
function_decl|;
name|virtual
name|void
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
function_decl|;
name|virtual
name|void
name|drawImage
argument_list|(
specifier|const
name|QRectF
operator|&
name|r
argument_list|,
specifier|const
name|QImage
operator|&
name|pm
argument_list|,
specifier|const
name|QRectF
operator|&
name|sr
argument_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
argument_list|)
decl_stmt|;
name|virtual
name|void
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|ti
parameter_list|)
function_decl|;
name|virtual
name|void
name|drawTiledPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|s
parameter_list|)
function_decl|;
name|virtual
name|void
name|drawPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
parameter_list|)
function_decl|;
name|private
label|:
name|friend
name|class
name|QCocoaNativeInterface
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QMacPrintEnginePrivate
range|:
name|public
name|QPaintEnginePrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QMacPrintEngine
argument_list|)
name|public
operator|:
name|QPrinter
operator|::
name|PrinterMode
name|mode
block|;
name|QPrinter
operator|::
name|PrinterState
name|state
block|;
name|QPrinter
operator|::
name|Orientation
name|orient
block|;
name|NSPrintInfo
operator|*
name|printInfo
block|;
name|PMResolution
name|resolution
block|;
name|QString
name|outputFilename
block|;
name|QString
name|m_creator
block|;
name|bool
name|fullPage
block|;
name|QPaintEngine
operator|*
name|paintEngine
block|;
name|bool
name|hasCustomPaperSize
block|;
name|QSizeF
name|customSize
block|;
name|bool
name|hasCustomPageMargins
block|;
name|qreal
name|leftMargin
block|;
name|qreal
name|topMargin
block|;
name|qreal
name|rightMargin
block|;
name|qreal
name|bottomMargin
block|;
name|QHash
operator|<
name|QMacPrintEngine
operator|::
name|PrintEnginePropertyKey
block|,
name|QVariant
operator|>
name|valueCache
block|;
name|PMPaper
name|customPaper
block|;
name|QMacPrintEnginePrivate
argument_list|()
operator|:
name|mode
argument_list|(
name|QPrinter
operator|::
name|ScreenResolution
argument_list|)
block|,
name|state
argument_list|(
name|QPrinter
operator|::
name|Idle
argument_list|)
block|,
name|orient
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
block|,
name|printInfo
argument_list|(
literal|0
argument_list|)
block|,
name|paintEngine
argument_list|(
literal|0
argument_list|)
block|,
name|hasCustomPaperSize
argument_list|(
name|false
argument_list|)
block|,
name|hasCustomPageMargins
argument_list|(
argument|false
argument_list|)
block|{}
operator|~
name|QMacPrintEnginePrivate
argument_list|()
block|;
name|void
name|initialize
argument_list|()
block|;
name|void
name|releaseSession
argument_list|()
block|;
name|bool
name|newPage_helper
argument_list|()
block|;
name|void
name|setPaperSize
argument_list|(
argument|QPrinter::PaperSize ps
argument_list|)
block|;
name|QPrinter
operator|::
name|PaperSize
name|paperSize
argument_list|()
specifier|const
block|;
name|void
name|setPaperName
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|QList
operator|<
name|QVariant
operator|>
name|supportedResolutions
argument_list|()
specifier|const
block|;
specifier|inline
name|bool
name|isPrintSessionInitialized
argument_list|()
specifier|const
block|{
return|return
name|printInfo
operator|!=
literal|0
return|;
block|}
name|PMPageFormat
name|format
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|PMPageFormat
operator|>
operator|(
index|[
name|printInfo
name|PMPageFormat
index|]
operator|)
return|;
block|}
name|PMPrintSession
name|session
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|PMPrintSession
operator|>
operator|(
index|[
name|printInfo
name|PMPrintSession
index|]
operator|)
return|;
block|}
name|PMPrintSettings
name|settings
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|PMPrintSettings
operator|>
operator|(
index|[
name|printInfo
name|PMPrintSettings
index|]
operator|)
return|;
block|}
expr|}
block|;
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPRINTENGINE_WIN_P_H
end_comment
end_unit
