begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qoffscreenwindow.h"
end_include
begin_include
include|#
directive|include
file|"qoffscreencommon.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformscreen.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindow_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QOffscreenWindow
name|QOffscreenWindow
operator|::
name|QOffscreenWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QPlatformWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_positionIncludesFrame
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_visible
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_pendingGeometryChangeOnShow
argument_list|(
literal|true
argument_list|)
block|{
if|if
condition|(
name|window
operator|->
name|windowState
argument_list|()
operator|==
name|Qt
operator|::
name|WindowNoState
condition|)
name|setGeometry
argument_list|(
name|window
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|setWindowState
argument_list|(
name|window
operator|->
name|windowState
argument_list|()
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
specifier|static
name|WId
name|counter
init|=
literal|0
decl_stmt|;
name|m_winId
operator|=
operator|++
name|counter
expr_stmt|;
name|m_windowForWinIdHash
index|[
name|m_winId
index|]
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QOffscreenWindow
name|QOffscreenWindow
operator|::
name|~
name|QOffscreenWindow
parameter_list|()
block|{
if|if
condition|(
name|QOffscreenScreen
operator|::
name|windowContainingCursor
operator|==
name|this
condition|)
name|QOffscreenScreen
operator|::
name|windowContainingCursor
operator|=
literal|0
expr_stmt|;
name|m_windowForWinIdHash
operator|.
name|remove
argument_list|(
name|m_winId
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setGeometry
name|void
name|QOffscreenWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
operator|!=
name|Qt
operator|::
name|WindowNoState
condition|)
return|return;
name|m_positionIncludesFrame
operator|=
name|qt_window_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|positionPolicy
operator|==
name|QWindowPrivate
operator|::
name|WindowFrameInclusive
expr_stmt|;
name|setFrameMarginsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setGeometryImpl
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|m_normalGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometryImpl
name|void
name|QOffscreenWindow
operator|::
name|setGeometryImpl
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QRect
name|adjusted
init|=
name|rect
decl_stmt|;
if|if
condition|(
name|adjusted
operator|.
name|width
argument_list|()
operator|<=
literal|0
condition|)
name|adjusted
operator|.
name|setWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjusted
operator|.
name|height
argument_list|()
operator|<=
literal|0
condition|)
name|adjusted
operator|.
name|setHeight
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_positionIncludesFrame
condition|)
block|{
name|adjusted
operator|.
name|translate
argument_list|(
name|m_margins
operator|.
name|left
argument_list|()
argument_list|,
name|m_margins
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// make sure we're not placed off-screen
if|if
condition|(
name|adjusted
operator|.
name|left
argument_list|()
operator|<
name|m_margins
operator|.
name|left
argument_list|()
condition|)
name|adjusted
operator|.
name|translate
argument_list|(
name|m_margins
operator|.
name|left
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjusted
operator|.
name|top
argument_list|()
operator|<
name|m_margins
operator|.
name|top
argument_list|()
condition|)
name|adjusted
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|m_margins
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|adjusted
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_visible
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|adjusted
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|adjusted
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_pendingGeometryChangeOnShow
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QOffscreenWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|visible
operator|==
name|m_visible
condition|)
return|return;
if|if
condition|(
name|visible
condition|)
block|{
if|if
condition|(
name|window
argument_list|()
operator|->
name|type
argument_list|()
operator|!=
name|Qt
operator|::
name|ToolTip
condition|)
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_pendingGeometryChangeOnShow
condition|)
block|{
name|m_pendingGeometryChangeOnShow
operator|=
literal|false
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|visible
condition|)
block|{
name|QRect
name|rect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m_visible
operator|=
name|visible
expr_stmt|;
block|}
end_function
begin_function
DECL|function|requestActivateWindow
name|void
name|QOffscreenWindow
operator|::
name|requestActivateWindow
parameter_list|()
block|{
if|if
condition|(
name|m_visible
condition|)
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|winId
name|WId
name|QOffscreenWindow
operator|::
name|winId
parameter_list|()
specifier|const
block|{
return|return
name|m_winId
return|;
block|}
end_function
begin_function
DECL|function|frameMargins
name|QMargins
name|QOffscreenWindow
operator|::
name|frameMargins
parameter_list|()
specifier|const
block|{
return|return
name|m_margins
return|;
block|}
end_function
begin_function
DECL|function|setFrameMarginsEnabled
name|void
name|QOffscreenWindow
operator|::
name|setFrameMarginsEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|enabled
operator|&&
operator|!
operator|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
name|m_margins
operator|=
name|QMargins
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
else|else
name|m_margins
operator|=
name|QMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|QOffscreenWindow
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
name|setFrameMarginsEnabled
argument_list|(
name|state
operator|!=
name|Qt
operator|::
name|WindowFullScreen
argument_list|)
expr_stmt|;
name|m_positionIncludesFrame
operator|=
literal|false
expr_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowFullScreen
case|:
name|setGeometryImpl
argument_list|(
name|screen
argument_list|()
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowMaximized
case|:
name|setGeometryImpl
argument_list|(
name|screen
argument_list|()
operator|->
name|availableGeometry
argument_list|()
operator|.
name|adjusted
argument_list|(
name|m_margins
operator|.
name|left
argument_list|()
argument_list|,
name|m_margins
operator|.
name|top
argument_list|()
argument_list|,
operator|-
name|m_margins
operator|.
name|right
argument_list|()
argument_list|,
operator|-
name|m_margins
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowMinimized
case|:
break|break;
case|case
name|Qt
operator|::
name|WindowNoState
case|:
name|setGeometryImpl
argument_list|(
name|m_normalGeometry
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|QWindowSystemInterface
operator|::
name|handleWindowStateChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowForWinId
name|QOffscreenWindow
modifier|*
name|QOffscreenWindow
operator|::
name|windowForWinId
parameter_list|(
name|WId
name|id
parameter_list|)
block|{
return|return
name|m_windowForWinIdHash
operator|.
name|value
argument_list|(
name|id
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|member|m_windowForWinIdHash
name|QHash
argument_list|<
name|WId
argument_list|,
name|QOffscreenWindow
modifier|*
argument_list|>
name|QOffscreenWindow
operator|::
name|m_windowForWinIdHash
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
