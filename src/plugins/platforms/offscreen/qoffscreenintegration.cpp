begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qoffscreenintegration.h"
end_include
begin_include
include|#
directive|include
file|"qoffscreenwindow.h"
end_include
begin_include
include|#
directive|include
file|"qoffscreencommon.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qgenericunixeventdispatcher_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qpa/qplatformfontdatabase.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qgenericunixfontdatabase_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_elif
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qbasicfontdatabase_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qeventdispatcher_win_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformservices.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
template|template
parameter_list|<
name|typename
name|BaseEventDispatcher
parameter_list|>
class|class
DECL|class|QOffscreenEventDispatcher
name|QOffscreenEventDispatcher
super|:
specifier|public
name|BaseEventDispatcher
block|{
public|public:
DECL|function|QOffscreenEventDispatcher
specifier|explicit
name|QOffscreenEventDispatcher
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|BaseEventDispatcher
argument_list|(
name|parent
argument_list|)
block|{     }
DECL|function|processEvents
name|bool
name|processEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
name|flags
parameter_list|)
block|{
name|bool
name|didSendEvents
init|=
name|BaseEventDispatcher
operator|::
name|processEvents
argument_list|(
name|flags
argument_list|)
decl_stmt|;
return|return
name|QWindowSystemInterface
operator|::
name|sendWindowSystemEvents
argument_list|(
name|flags
argument_list|)
operator|||
name|didSendEvents
return|;
block|}
DECL|function|hasPendingEvents
name|bool
name|hasPendingEvents
parameter_list|()
block|{
return|return
name|BaseEventDispatcher
operator|::
name|hasPendingEvents
argument_list|()
operator|||
name|QWindowSystemInterface
operator|::
name|windowSystemEventsQueued
argument_list|()
return|;
block|}
DECL|function|flush
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|qApp
condition|)
name|qApp
operator|->
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|BaseEventDispatcher
operator|::
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|QOffscreenIntegration
name|QOffscreenIntegration
operator|::
name|QOffscreenIntegration
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|m_fontDatabase
operator|.
name|reset
argument_list|(
operator|new
name|QPlatformFontDatabase
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|m_fontDatabase
operator|.
name|reset
argument_list|(
operator|new
name|QGenericUnixFontDatabase
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|m_fontDatabase
operator|.
name|reset
argument_list|(
operator|new
name|QBasicFontDatabase
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|m_drag
operator|.
name|reset
argument_list|(
operator|new
name|QOffscreenDrag
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|m_services
operator|.
name|reset
argument_list|(
operator|new
name|QPlatformServices
argument_list|)
expr_stmt|;
name|screenAdded
argument_list|(
operator|new
name|QOffscreenScreen
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QOffscreenIntegration
name|QOffscreenIntegration
operator|::
name|~
name|QOffscreenIntegration
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|hasCapability
name|bool
name|QOffscreenIntegration
operator|::
name|hasCapability
parameter_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|cap
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cap
condition|)
block|{
case|case
name|ThreadedPixmaps
case|:
return|return
literal|true
return|;
case|case
name|MultipleWindows
case|:
return|return
literal|true
return|;
default|default:
return|return
name|QPlatformIntegration
operator|::
name|hasCapability
argument_list|(
name|cap
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|createPlatformWindow
name|QPlatformWindow
modifier|*
name|QOffscreenIntegration
operator|::
name|createPlatformWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QPlatformWindow
modifier|*
name|w
init|=
operator|new
name|QOffscreenWindow
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|w
operator|->
name|requestActivateWindow
argument_list|()
expr_stmt|;
return|return
name|w
return|;
block|}
end_function
begin_function
DECL|function|createPlatformBackingStore
name|QPlatformBackingStore
modifier|*
name|QOffscreenIntegration
operator|::
name|createPlatformBackingStore
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QOffscreenBackingStore
argument_list|(
name|window
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createEventDispatcher
name|QAbstractEventDispatcher
modifier|*
name|QOffscreenIntegration
operator|::
name|createEventDispatcher
parameter_list|()
specifier|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
return|return
name|createUnixEventDispatcher
argument_list|()
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
return|return
operator|new
name|QOffscreenEventDispatcher
argument_list|<
name|QEventDispatcherWin32
argument_list|>
argument_list|()
return|;
else|#
directive|else
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fontDatabase
name|QPlatformFontDatabase
modifier|*
name|QOffscreenIntegration
operator|::
name|fontDatabase
parameter_list|()
specifier|const
block|{
return|return
name|m_fontDatabase
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|drag
name|QPlatformDrag
modifier|*
name|QOffscreenIntegration
operator|::
name|drag
parameter_list|()
specifier|const
block|{
return|return
name|m_drag
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|services
name|QPlatformServices
modifier|*
name|QOffscreenIntegration
operator|::
name|services
parameter_list|()
specifier|const
block|{
return|return
name|m_services
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
