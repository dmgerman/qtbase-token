begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qlinuxfbintegration.h"
end_include
begin_include
include|#
directive|include
file|"../fb_base/fb_base.h"
end_include
begin_include
include|#
directive|include
file|"qgenericunixfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qgenericunixeventdispatcher_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_comment
comment|// overrides QT_OPEN
end_comment
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/mman.h>
end_include
begin_include
include|#
directive|include
file|<sys/kd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<signal.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_FREEBSD
argument_list|)
end_if
begin_include
include|#
directive|include
file|<linux/fb.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|__i386__
end_ifdef
begin_include
include|#
directive|include
file|<asm/mtrr.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QLinuxFbIntegrationPrivate
class|class
name|QLinuxFbIntegrationPrivate
block|{
public|public:
name|QLinuxFbIntegrationPrivate
parameter_list|()
constructor_decl|;
name|~
name|QLinuxFbIntegrationPrivate
parameter_list|()
destructor_decl|;
name|void
name|openTty
parameter_list|()
function_decl|;
name|void
name|closeTty
parameter_list|()
function_decl|;
DECL|member|fd
name|int
name|fd
decl_stmt|;
DECL|member|startupw
name|int
name|startupw
decl_stmt|;
DECL|member|startuph
name|int
name|startuph
decl_stmt|;
DECL|member|startupd
name|int
name|startupd
decl_stmt|;
DECL|member|blank
name|bool
name|blank
decl_stmt|;
DECL|member|doGraphicsMode
name|bool
name|doGraphicsMode
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
DECL|member|doGenericColors
name|bool
name|doGenericColors
decl_stmt|;
endif|#
directive|endif
DECL|member|ttyfd
name|int
name|ttyfd
decl_stmt|;
DECL|member|oldKdMode
name|long
name|oldKdMode
decl_stmt|;
DECL|member|ttyDevice
name|QString
name|ttyDevice
decl_stmt|;
DECL|member|displaySpec
name|QString
name|displaySpec
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QLinuxFbIntegrationPrivate
name|QLinuxFbIntegrationPrivate
operator|::
name|QLinuxFbIntegrationPrivate
parameter_list|()
member_init_list|:
name|fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|blank
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|doGraphicsMode
argument_list|(
literal|true
argument_list|)
member_init_list|,
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
name|doGenericColors
argument_list|(
literal|false
argument_list|)
member_init_list|,
endif|#
directive|endif
name|ttyfd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|oldKdMode
argument_list|(
name|KD_TEXT
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QLinuxFbIntegrationPrivate
name|QLinuxFbIntegrationPrivate
operator|::
name|~
name|QLinuxFbIntegrationPrivate
parameter_list|()
block|{
name|closeTty
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|openTty
name|void
name|QLinuxFbIntegrationPrivate
operator|::
name|openTty
parameter_list|()
block|{
specifier|const
name|char
modifier|*
specifier|const
name|devs
index|[]
init|=
block|{
literal|"/dev/tty0"
block|,
literal|"/dev/tty"
block|,
literal|"/dev/console"
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|ttyDevice
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|dev
init|=
name|devs
init|;
operator|*
name|dev
condition|;
operator|++
name|dev
control|)
block|{
name|ttyfd
operator|=
name|QT_OPEN
argument_list|(
operator|*
name|dev
argument_list|,
name|O_RDWR
argument_list|)
expr_stmt|;
if|if
condition|(
name|ttyfd
operator|!=
operator|-
literal|1
condition|)
break|break;
block|}
block|}
else|else
block|{
name|ttyfd
operator|=
name|QT_OPEN
argument_list|(
name|ttyDevice
operator|.
name|toAscii
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ttyfd
operator|==
operator|-
literal|1
condition|)
return|return;
if|if
condition|(
name|doGraphicsMode
condition|)
block|{
name|ioctl
argument_list|(
name|ttyfd
argument_list|,
name|KDGETMODE
argument_list|,
operator|&
name|oldKdMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldKdMode
operator|!=
name|KD_GRAPHICS
condition|)
block|{
name|int
name|ret
init|=
name|ioctl
argument_list|(
name|ttyfd
argument_list|,
name|KDSETMODE
argument_list|,
name|KD_GRAPHICS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
name|doGraphicsMode
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// No blankin' screen, no blinkin' cursor!, no cursor!
specifier|const
name|char
name|termctl
index|[]
init|=
literal|"\033[9;0]\033[?33l\033[?25l\033[?1c"
decl_stmt|;
name|QT_WRITE
argument_list|(
name|ttyfd
argument_list|,
name|termctl
argument_list|,
sizeof|sizeof
argument_list|(
name|termctl
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|closeTty
name|void
name|QLinuxFbIntegrationPrivate
operator|::
name|closeTty
parameter_list|()
block|{
if|if
condition|(
name|ttyfd
operator|==
operator|-
literal|1
condition|)
return|return;
if|if
condition|(
name|doGraphicsMode
condition|)
name|ioctl
argument_list|(
name|ttyfd
argument_list|,
name|KDSETMODE
argument_list|,
name|oldKdMode
argument_list|)
expr_stmt|;
comment|// Blankin' screen, blinkin' cursor!
specifier|const
name|char
name|termctl
index|[]
init|=
literal|"\033[9;15]\033[?33h\033[?25h\033[?0c"
decl_stmt|;
name|QT_WRITE
argument_list|(
name|ttyfd
argument_list|,
name|termctl
argument_list|,
sizeof|sizeof
argument_list|(
name|termctl
argument_list|)
argument_list|)
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|ttyfd
argument_list|)
expr_stmt|;
name|ttyfd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QLinuxFbIntegration
name|QLinuxFbIntegration
operator|::
name|QLinuxFbIntegration
parameter_list|()
member_init_list|:
name|fontDb
argument_list|(
operator|new
name|QGenericUnixFontDatabase
argument_list|()
argument_list|)
block|{
name|d_ptr
operator|=
operator|new
name|QLinuxFbIntegrationPrivate
argument_list|()
expr_stmt|;
comment|// XXX
name|QString
name|displaySpec
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qgetenv
argument_list|(
literal|"QWS_DISPLAY"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connect
argument_list|(
name|displaySpec
argument_list|)
condition|)
name|qFatal
argument_list|(
literal|"QLinuxFbIntegration: could not initialize screen"
argument_list|)
expr_stmt|;
name|initDevice
argument_list|()
expr_stmt|;
comment|// Create a QImage directly on the screen's framebuffer.
comment|// This is the blit target for copying windows to the screen.
name|mPrimaryScreen
operator|=
operator|new
name|QLinuxFbScreen
argument_list|(
name|data
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|lstep
argument_list|,
name|screenFormat
argument_list|)
expr_stmt|;
name|mPrimaryScreen
operator|->
name|setPhysicalSize
argument_list|(
name|QSize
argument_list|(
name|physWidth
argument_list|,
name|physHeight
argument_list|)
argument_list|)
expr_stmt|;
name|mScreens
operator|.
name|append
argument_list|(
name|mPrimaryScreen
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QLinuxFbIntegration
name|QLinuxFbIntegration
operator|::
name|~
name|QLinuxFbIntegration
parameter_list|()
block|{
operator|delete
name|mPrimaryScreen
expr_stmt|;
operator|delete
name|d_ptr
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|connect
name|bool
name|QLinuxFbIntegration
operator|::
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
block|{
specifier|const
name|QStringList
name|args
init|=
name|displaySpec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"nographicsmodeswitch"
argument_list|)
argument_list|)
condition|)
name|d_ptr
operator|->
name|doGraphicsMode
operator|=
literal|false
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
if|if
condition|(
name|args
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"genericcolors"
argument_list|)
argument_list|)
condition|)
name|d_ptr
operator|->
name|doGenericColors
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
name|QRegExp
name|ttyRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|"tty=(.*)"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|indexOf
argument_list|(
name|ttyRegExp
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|d_ptr
operator|->
name|ttyDevice
operator|=
name|ttyRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
ifndef|#
directive|ifndef
name|QT_QWS_FRAMEBUFFER_LITTLE_ENDIAN
block|if (args.contains(QLatin1String("littleendian")))
endif|#
directive|endif
block|QScreen::setFrameBufferLittleEndian(true);
endif|#
directive|endif
endif|#
directive|endif
comment|// Check for explicitly specified device
specifier|const
name|int
name|len
init|=
literal|8
decl_stmt|;
comment|// "/dev/fbx"
name|int
name|m
init|=
name|displaySpec
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"/dev/fb"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|dev
decl_stmt|;
if|if
condition|(
name|m
operator|>
literal|0
condition|)
name|dev
operator|=
name|displaySpec
operator|.
name|mid
argument_list|(
name|m
argument_list|,
name|len
argument_list|)
expr_stmt|;
else|else
name|dev
operator|=
name|QLatin1String
argument_list|(
literal|"/dev/fb0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|access
argument_list|(
name|dev
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|R_OK
operator||
name|W_OK
argument_list|)
operator|==
literal|0
condition|)
name|d_ptr
operator|->
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|fd
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|access
argument_list|(
name|dev
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|R_OK
argument_list|)
operator|==
literal|0
condition|)
name|d_ptr
operator|->
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|dev
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|fd
operator|==
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"Error opening framebuffer device %s"
argument_list|,
name|qPrintable
argument_list|(
name|dev
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|fb_fix_screeninfo
name|finfo
decl_stmt|;
name|fb_var_screeninfo
name|vinfo
decl_stmt|;
comment|//#######################
comment|// Shut up Valgrind
name|memset
argument_list|(
operator|&
name|vinfo
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|vinfo
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|finfo
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|finfo
argument_list|)
argument_list|)
expr_stmt|;
comment|//#######################
comment|/* Get fixed screen information */
if|if
condition|(
name|d_ptr
operator|->
name|fd
operator|!=
operator|-
literal|1
operator|&&
name|ioctl
argument_list|(
name|d_ptr
operator|->
name|fd
argument_list|,
name|FBIOGET_FSCREENINFO
argument_list|,
operator|&
name|finfo
argument_list|)
condition|)
block|{
name|perror
argument_list|(
literal|"QLinuxFbIntegration::connect"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Error reading fixed information"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|finfo
operator|.
name|type
operator|==
name|FB_TYPE_VGA_PLANES
condition|)
block|{
name|qWarning
argument_list|(
literal|"VGA16 video mode not supported"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/* Get variable screen information */
if|if
condition|(
name|d_ptr
operator|->
name|fd
operator|!=
operator|-
literal|1
operator|&&
name|ioctl
argument_list|(
name|d_ptr
operator|->
name|fd
argument_list|,
name|FBIOGET_VSCREENINFO
argument_list|,
operator|&
name|vinfo
argument_list|)
condition|)
block|{
name|perror
argument_list|(
literal|"QLinuxFbIntegration::connect"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Error reading variable information"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|grayscale
operator|=
name|vinfo
operator|.
name|grayscale
expr_stmt|;
name|d
operator|=
name|vinfo
operator|.
name|bits_per_pixel
expr_stmt|;
if|if
condition|(
name|d
operator|==
literal|24
condition|)
block|{
name|d
operator|=
name|vinfo
operator|.
name|red
operator|.
name|length
operator|+
name|vinfo
operator|.
name|green
operator|.
name|length
operator|+
name|vinfo
operator|.
name|blue
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|d
operator|<=
literal|0
condition|)
name|d
operator|=
literal|24
expr_stmt|;
comment|// reset if color component lengths are not reported
block|}
elseif|else
if|if
condition|(
name|d
operator|==
literal|16
condition|)
block|{
name|d
operator|=
name|vinfo
operator|.
name|red
operator|.
name|length
operator|+
name|vinfo
operator|.
name|green
operator|.
name|length
operator|+
name|vinfo
operator|.
name|blue
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|d
operator|<=
literal|0
condition|)
name|d
operator|=
literal|16
expr_stmt|;
block|}
name|lstep
operator|=
name|finfo
operator|.
name|line_length
expr_stmt|;
name|int
name|xoff
init|=
name|vinfo
operator|.
name|xoffset
decl_stmt|;
name|int
name|yoff
init|=
name|vinfo
operator|.
name|yoffset
decl_stmt|;
specifier|const
name|char
modifier|*
name|qwssize
decl_stmt|;
if|if
condition|(
operator|(
name|qwssize
operator|=
operator|::
name|getenv
argument_list|(
literal|"QWS_SIZE"
argument_list|)
operator|)
operator|&&
name|sscanf
argument_list|(
name|qwssize
argument_list|,
literal|"%dx%d"
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|d_ptr
operator|->
name|fd
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|(
name|uint
operator|)
name|w
operator|>
name|vinfo
operator|.
name|xres
condition|)
name|w
operator|=
name|vinfo
operator|.
name|xres
expr_stmt|;
if|if
condition|(
operator|(
name|uint
operator|)
name|h
operator|>
name|vinfo
operator|.
name|yres
condition|)
name|h
operator|=
name|vinfo
operator|.
name|yres
expr_stmt|;
block|}
name|dw
operator|=
name|w
expr_stmt|;
name|dh
operator|=
name|h
expr_stmt|;
name|int
name|xxoff
decl_stmt|,
name|yyoff
decl_stmt|;
if|if
condition|(
name|sscanf
argument_list|(
name|qwssize
argument_list|,
literal|"%*dx%*d+%d+%d"
argument_list|,
operator|&
name|xxoff
argument_list|,
operator|&
name|yyoff
argument_list|)
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|xxoff
argument_list|<
literal|0
operator|||
name|xxoff
operator|+
name|w
argument_list|>
argument_list|(
name|int
argument_list|)
argument_list|(
name|vinfo
operator|.
name|xres
argument_list|)
condition|)
name|xxoff
operator|=
name|vinfo
operator|.
name|xres
operator|-
name|w
expr_stmt|;
if|if
condition|(
name|yyoff
argument_list|<
literal|0
operator|||
name|yyoff
operator|+
name|h
argument_list|>
argument_list|(
name|int
argument_list|)
argument_list|(
name|vinfo
operator|.
name|yres
argument_list|)
condition|)
name|yyoff
operator|=
name|vinfo
operator|.
name|yres
operator|-
name|h
expr_stmt|;
name|xoff
operator|+=
name|xxoff
expr_stmt|;
name|yoff
operator|+=
name|yyoff
expr_stmt|;
block|}
else|else
block|{
name|xoff
operator|+=
operator|(
name|vinfo
operator|.
name|xres
operator|-
name|w
operator|)
operator|/
literal|2
expr_stmt|;
name|yoff
operator|+=
operator|(
name|vinfo
operator|.
name|yres
operator|-
name|h
operator|)
operator|/
literal|2
expr_stmt|;
block|}
block|}
else|else
block|{
name|dw
operator|=
name|w
operator|=
name|vinfo
operator|.
name|xres
expr_stmt|;
name|dh
operator|=
name|h
operator|=
name|vinfo
operator|.
name|yres
expr_stmt|;
block|}
if|if
condition|(
name|w
operator|==
literal|0
operator|||
name|h
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QLinuxFbIntegration::connect(): Unable to find screen geometry, "
literal|"will use 320x240."
argument_list|)
expr_stmt|;
name|dw
operator|=
name|w
operator|=
literal|320
expr_stmt|;
name|dh
operator|=
name|h
operator|=
literal|240
expr_stmt|;
block|}
name|setPixelFormat
argument_list|(
name|vinfo
argument_list|)
expr_stmt|;
comment|// Handle display physical size spec.
name|QStringList
name|displayArgs
init|=
name|displaySpec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
name|QRegExp
name|mmWidthRx
argument_list|(
name|QLatin1String
argument_list|(
literal|"mmWidth=?(\\d+)"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|dimIdxW
init|=
name|displayArgs
operator|.
name|indexOf
argument_list|(
name|mmWidthRx
argument_list|)
decl_stmt|;
name|QRegExp
name|mmHeightRx
argument_list|(
name|QLatin1String
argument_list|(
literal|"mmHeight=?(\\d+)"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|dimIdxH
init|=
name|displayArgs
operator|.
name|indexOf
argument_list|(
name|mmHeightRx
argument_list|)
decl_stmt|;
if|if
condition|(
name|dimIdxW
operator|>=
literal|0
condition|)
block|{
name|mmWidthRx
operator|.
name|exactMatch
argument_list|(
name|displayArgs
operator|.
name|at
argument_list|(
name|dimIdxW
argument_list|)
argument_list|)
expr_stmt|;
name|physWidth
operator|=
name|mmWidthRx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|dimIdxH
operator|<
literal|0
condition|)
name|physHeight
operator|=
name|dh
operator|*
name|physWidth
operator|/
name|dw
expr_stmt|;
block|}
if|if
condition|(
name|dimIdxH
operator|>=
literal|0
condition|)
block|{
name|mmHeightRx
operator|.
name|exactMatch
argument_list|(
name|displayArgs
operator|.
name|at
argument_list|(
name|dimIdxH
argument_list|)
argument_list|)
expr_stmt|;
name|physHeight
operator|=
name|mmHeightRx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|dimIdxW
operator|<
literal|0
condition|)
name|physWidth
operator|=
name|dw
operator|*
name|physHeight
operator|/
name|dh
expr_stmt|;
block|}
if|if
condition|(
name|dimIdxW
operator|<
literal|0
operator|&&
name|dimIdxH
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|vinfo
operator|.
name|width
operator|!=
literal|0
operator|&&
name|vinfo
operator|.
name|height
operator|!=
literal|0
operator|&&
name|vinfo
operator|.
name|width
operator|!=
name|UINT_MAX
operator|&&
name|vinfo
operator|.
name|height
operator|!=
name|UINT_MAX
condition|)
block|{
name|physWidth
operator|=
name|vinfo
operator|.
name|width
expr_stmt|;
name|physHeight
operator|=
name|vinfo
operator|.
name|height
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|dpi
init|=
literal|72
decl_stmt|;
name|physWidth
operator|=
name|qRound
argument_list|(
name|dw
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
name|physHeight
operator|=
name|qRound
argument_list|(
name|dh
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
block|}
block|}
name|dataoffset
operator|=
name|yoff
operator|*
name|lstep
operator|+
name|xoff
operator|*
name|d
operator|/
literal|8
expr_stmt|;
comment|//qDebug("Using %dx%dx%d screen",w,h,d);
comment|/* Figure out the size of the screen in bytes */
name|size
operator|=
name|h
operator|*
name|lstep
expr_stmt|;
name|mapsize
operator|=
name|finfo
operator|.
name|smem_len
expr_stmt|;
name|data
operator|=
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|fd
operator|!=
operator|-
literal|1
condition|)
name|data
operator|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|mmap
argument_list|(
literal|0
argument_list|,
name|mapsize
argument_list|,
name|PROT_READ
operator||
name|PROT_WRITE
argument_list|,
name|MAP_SHARED
argument_list|,
name|d_ptr
operator|->
name|fd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|long
operator|)
name|data
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"QLinuxFbIntegration::connect"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Error: failed to map framebuffer device to memory."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|data
operator|+=
name|dataoffset
expr_stmt|;
block|}
if|#
directive|if
literal|0
block|canaccel = useOffscreen();     if(canaccel)         setupOffScreen();
endif|#
directive|endif
name|canaccel
operator|=
literal|false
expr_stmt|;
comment|// Now read in palette
if|if
condition|(
operator|(
name|vinfo
operator|.
name|bits_per_pixel
operator|==
literal|8
operator|)
operator|||
operator|(
name|vinfo
operator|.
name|bits_per_pixel
operator|==
literal|4
operator|)
condition|)
block|{
name|screencols
operator|=
operator|(
name|vinfo
operator|.
name|bits_per_pixel
operator|==
literal|8
operator|)
condition|?
literal|256
else|:
literal|16
expr_stmt|;
name|int
name|loopc
decl_stmt|;
name|fb_cmap
name|startcmap
decl_stmt|;
name|startcmap
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|startcmap
operator|.
name|len
operator|=
name|screencols
expr_stmt|;
name|startcmap
operator|.
name|red
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
name|startcmap
operator|.
name|green
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
name|startcmap
operator|.
name|blue
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
name|startcmap
operator|.
name|transp
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|fd
operator|==
operator|-
literal|1
operator|||
name|ioctl
argument_list|(
name|d_ptr
operator|->
name|fd
argument_list|,
name|FBIOGETCMAP
argument_list|,
operator|&
name|startcmap
argument_list|)
condition|)
block|{
name|perror
argument_list|(
literal|"QLinuxFbIntegration::connect"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Error reading palette from framebuffer, using default palette"
argument_list|)
expr_stmt|;
name|createPalette
argument_list|(
name|startcmap
argument_list|,
name|vinfo
argument_list|,
name|finfo
argument_list|)
expr_stmt|;
block|}
name|int
name|bits_used
init|=
literal|0
decl_stmt|;
for|for
control|(
name|loopc
operator|=
literal|0
init|;
name|loopc
operator|<
name|screencols
condition|;
name|loopc
operator|++
control|)
block|{
name|screenclut
index|[
name|loopc
index|]
operator|=
name|qRgb
argument_list|(
name|startcmap
operator|.
name|red
index|[
name|loopc
index|]
operator|>>
literal|8
argument_list|,
name|startcmap
operator|.
name|green
index|[
name|loopc
index|]
operator|>>
literal|8
argument_list|,
name|startcmap
operator|.
name|blue
index|[
name|loopc
index|]
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|bits_used
operator||=
name|startcmap
operator|.
name|red
index|[
name|loopc
index|]
operator||
name|startcmap
operator|.
name|green
index|[
name|loopc
index|]
operator||
name|startcmap
operator|.
name|blue
index|[
name|loopc
index|]
expr_stmt|;
block|}
comment|// WORKAROUND: Some framebuffer drivers only return 8 bit
comment|// color values, so we need to not bit shift them..
if|if
condition|(
operator|(
name|bits_used
operator|&
literal|0x00ff
operator|)
operator|&&
operator|!
operator|(
name|bits_used
operator|&
literal|0xff00
operator|)
condition|)
block|{
for|for
control|(
name|loopc
operator|=
literal|0
init|;
name|loopc
operator|<
name|screencols
condition|;
name|loopc
operator|++
control|)
block|{
name|screenclut
index|[
name|loopc
index|]
operator|=
name|qRgb
argument_list|(
name|startcmap
operator|.
name|red
index|[
name|loopc
index|]
argument_list|,
name|startcmap
operator|.
name|green
index|[
name|loopc
index|]
argument_list|,
name|startcmap
operator|.
name|blue
index|[
name|loopc
index|]
argument_list|)
expr_stmt|;
block|}
name|qWarning
argument_list|(
literal|"8 bits cmap returned due to faulty FB driver, colors corrected"
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
name|startcmap
operator|.
name|red
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|startcmap
operator|.
name|green
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|startcmap
operator|.
name|blue
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|startcmap
operator|.
name|transp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|screencols
operator|=
literal|0
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|initDevice
name|bool
name|QLinuxFbIntegration
operator|::
name|initDevice
parameter_list|()
block|{
name|d_ptr
operator|->
name|openTty
argument_list|()
expr_stmt|;
comment|// Grab current mode so we can reset it
name|fb_var_screeninfo
name|vinfo
decl_stmt|;
name|fb_fix_screeninfo
name|finfo
decl_stmt|;
comment|//#######################
comment|// Shut up Valgrind
name|memset
argument_list|(
operator|&
name|vinfo
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|vinfo
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
operator|&
name|finfo
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|finfo
argument_list|)
argument_list|)
expr_stmt|;
comment|//#######################
if|if
condition|(
name|ioctl
argument_list|(
name|d_ptr
operator|->
name|fd
argument_list|,
name|FBIOGET_VSCREENINFO
argument_list|,
operator|&
name|vinfo
argument_list|)
condition|)
block|{
name|perror
argument_list|(
literal|"QLinuxFbScreen::initDevice"
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"Error reading variable information in card init"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
ifdef|#
directive|ifdef
name|DEBUG_VINFO
name|qDebug
argument_list|(
literal|"Greyscale %d"
argument_list|,
name|vinfo
operator|.
name|grayscale
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Nonstd %d"
argument_list|,
name|vinfo
operator|.
name|nonstd
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Red %d %d %d"
argument_list|,
name|vinfo
operator|.
name|red
operator|.
name|offset
argument_list|,
name|vinfo
operator|.
name|red
operator|.
name|length
argument_list|,
name|vinfo
operator|.
name|red
operator|.
name|msb_right
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Green %d %d %d"
argument_list|,
name|vinfo
operator|.
name|green
operator|.
name|offset
argument_list|,
name|vinfo
operator|.
name|green
operator|.
name|length
argument_list|,
name|vinfo
operator|.
name|green
operator|.
name|msb_right
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Blue %d %d %d"
argument_list|,
name|vinfo
operator|.
name|blue
operator|.
name|offset
argument_list|,
name|vinfo
operator|.
name|blue
operator|.
name|length
argument_list|,
name|vinfo
operator|.
name|blue
operator|.
name|msb_right
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Transparent %d %d %d"
argument_list|,
name|vinfo
operator|.
name|transp
operator|.
name|offset
argument_list|,
name|vinfo
operator|.
name|transp
operator|.
name|length
argument_list|,
name|vinfo
operator|.
name|transp
operator|.
name|msb_right
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d_ptr
operator|->
name|startupw
operator|=
name|vinfo
operator|.
name|xres
expr_stmt|;
name|d_ptr
operator|->
name|startuph
operator|=
name|vinfo
operator|.
name|yres
expr_stmt|;
name|d_ptr
operator|->
name|startupd
operator|=
name|vinfo
operator|.
name|bits_per_pixel
expr_stmt|;
name|grayscale
operator|=
name|vinfo
operator|.
name|grayscale
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|d_ptr
operator|->
name|fd
argument_list|,
name|FBIOGET_FSCREENINFO
argument_list|,
operator|&
name|finfo
argument_list|)
condition|)
block|{
name|perror
argument_list|(
literal|"QLinuxFbScreen::initDevice"
argument_list|)
expr_stmt|;
name|qCritical
argument_list|(
literal|"Error reading fixed information in card init"
argument_list|)
expr_stmt|;
comment|// It's not an /error/ as such, though definitely a bad sign
comment|// so we return true
return|return
literal|true
return|;
block|}
ifdef|#
directive|ifdef
name|__i386__
comment|// Now init mtrr
if|if
condition|(
operator|!
operator|::
name|getenv
argument_list|(
literal|"QWS_NOMTRR"
argument_list|)
condition|)
block|{
name|int
name|mfd
init|=
name|QT_OPEN
argument_list|(
literal|"/proc/mtrr"
argument_list|,
name|O_WRONLY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// MTRR entry goes away when file is closed - i.e.
comment|// hopefully when QWS is killed
if|if
condition|(
name|mfd
operator|!=
operator|-
literal|1
condition|)
block|{
name|mtrr_sentry
name|sentry
decl_stmt|;
name|sentry
operator|.
name|base
operator|=
operator|(
name|unsigned
name|long
name|int
operator|)
name|finfo
operator|.
name|smem_start
expr_stmt|;
comment|//qDebug("Physical framebuffer address %p",(void*)finfo.smem_start);
comment|// Size needs to be in 4k chunks, but that's not always
comment|// what we get thanks to graphics card registers. Write combining
comment|// these is Not Good, so we write combine what we can
comment|// (which is not much - 4 megs on an 8 meg card, it seems)
name|unsigned
name|int
name|size
init|=
name|finfo
operator|.
name|smem_len
decl_stmt|;
name|size
operator|=
name|size
operator|>>
literal|22
expr_stmt|;
name|size
operator|=
name|size
operator|<<
literal|22
expr_stmt|;
name|sentry
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|sentry
operator|.
name|type
operator|=
name|MTRR_TYPE_WRCOMB
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|mfd
argument_list|,
name|MTRRIOC_ADD_ENTRY
argument_list|,
operator|&
name|sentry
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|//printf("Couldn't add mtrr entry for %lx %lx, %s\n",
comment|//sentry.base,sentry.size,strerror(errno));
block|}
block|}
comment|// Should we close mfd here?
comment|//QT_CLOSE(mfd);
block|}
endif|#
directive|endif
if|if
condition|(
operator|(
name|vinfo
operator|.
name|bits_per_pixel
operator|==
literal|8
operator|)
operator|||
operator|(
name|vinfo
operator|.
name|bits_per_pixel
operator|==
literal|4
operator|)
operator|||
operator|(
name|finfo
operator|.
name|visual
operator|==
name|FB_VISUAL_DIRECTCOLOR
operator|)
condition|)
block|{
name|fb_cmap
name|cmap
decl_stmt|;
name|createPalette
argument_list|(
name|cmap
argument_list|,
name|vinfo
argument_list|,
name|finfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|d_ptr
operator|->
name|fd
argument_list|,
name|FBIOPUTCMAP
argument_list|,
operator|&
name|cmap
argument_list|)
condition|)
block|{
name|perror
argument_list|(
literal|"QLinuxFbScreen::initDevice"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Error writing palette to framebuffer"
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
name|cmap
operator|.
name|red
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|cmap
operator|.
name|green
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|cmap
operator|.
name|blue
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|cmap
operator|.
name|transp
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
literal|0
block|if (canaccel) {         *entryp=0;         *lowest = mapsize;         insert_entry(*entryp, *lowest, *lowest);
comment|// dummy entry to mark start
block|}      shared->fifocount = 0;     shared->buffer_offset = 0xffffffff;
comment|// 0 would be a sensible offset (screen)
block|shared->linestep = 0;     shared->cliptop = 0xffffffff;     shared->clipleft = 0xffffffff;     shared->clipright = 0xffffffff;     shared->clipbottom = 0xffffffff;     shared->rop = 0xffffffff;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_QWS_DEPTH_GENERIC
if|if
condition|(
name|pixelFormat
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Invalid
operator|&&
name|screencols
operator|==
literal|0
operator|&&
name|d_ptr
operator|->
name|doGenericColors
condition|)
block|{
name|qt_set_generic_blit
argument_list|(
name|this
argument_list|,
name|vinfo
operator|.
name|bits_per_pixel
argument_list|,
name|vinfo
operator|.
name|red
operator|.
name|length
argument_list|,
name|vinfo
operator|.
name|green
operator|.
name|length
argument_list|,
name|vinfo
operator|.
name|blue
operator|.
name|length
argument_list|,
name|vinfo
operator|.
name|transp
operator|.
name|length
argument_list|,
name|vinfo
operator|.
name|red
operator|.
name|offset
argument_list|,
name|vinfo
operator|.
name|green
operator|.
name|offset
argument_list|,
name|vinfo
operator|.
name|blue
operator|.
name|offset
argument_list|,
name|vinfo
operator|.
name|transp
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
literal|0
ifndef|#
directive|ifndef
name|QT_NO_QWS_CURSOR
block|QScreenCursor::initSoftwareCursor();
endif|#
directive|endif
endif|#
directive|endif
name|blank
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setPixelFormat
name|void
name|QLinuxFbIntegration
operator|::
name|setPixelFormat
parameter_list|(
name|struct
name|fb_var_screeninfo
name|info
parameter_list|)
block|{
specifier|const
name|fb_bitfield
name|rgba
index|[
literal|4
index|]
init|=
block|{
name|info
operator|.
name|red
block|,
name|info
operator|.
name|green
block|,
name|info
operator|.
name|blue
block|,
name|info
operator|.
name|transp
block|}
decl_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|QImage
operator|::
name|Format_Invalid
decl_stmt|;
switch|switch
condition|(
name|d
condition|)
block|{
case|case
literal|32
case|:
block|{
specifier|const
name|fb_bitfield
name|argb8888
index|[
literal|4
index|]
init|=
block|{
block|{
literal|16
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|8
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|24
block|,
literal|8
block|,
literal|0
block|}
block|}
decl_stmt|;
specifier|const
name|fb_bitfield
name|abgr8888
index|[
literal|4
index|]
init|=
block|{
block|{
literal|0
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|8
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|16
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|24
block|,
literal|8
block|,
literal|0
block|}
block|}
decl_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
name|rgba
argument_list|,
name|argb8888
argument_list|,
literal|4
operator|*
sizeof|sizeof
argument_list|(
name|fb_bitfield
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|memcmp
argument_list|(
name|rgba
argument_list|,
name|argb8888
argument_list|,
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|fb_bitfield
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|memcmp
argument_list|(
name|rgba
argument_list|,
name|abgr8888
argument_list|,
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|fb_bitfield
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|pixeltype
operator|=
name|BGRPixel
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|24
case|:
block|{
specifier|const
name|fb_bitfield
name|rgb888
index|[
literal|4
index|]
init|=
block|{
block|{
literal|16
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|8
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
specifier|const
name|fb_bitfield
name|bgr888
index|[
literal|4
index|]
init|=
block|{
block|{
literal|0
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|8
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|16
block|,
literal|8
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
name|rgba
argument_list|,
name|rgb888
argument_list|,
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|fb_bitfield
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_RGB888
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|memcmp
argument_list|(
name|rgba
argument_list|,
name|bgr888
argument_list|,
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|fb_bitfield
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_RGB888
expr_stmt|;
name|pixeltype
operator|=
name|BGRPixel
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|18
case|:
block|{
specifier|const
name|fb_bitfield
name|rgb666
index|[
literal|4
index|]
init|=
block|{
block|{
literal|12
block|,
literal|6
block|,
literal|0
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|6
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
name|rgba
argument_list|,
name|rgb666
argument_list|,
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|fb_bitfield
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
name|format
operator|=
name|QImage
operator|::
name|Format_RGB666
expr_stmt|;
break|break;
block|}
case|case
literal|16
case|:
block|{
specifier|const
name|fb_bitfield
name|rgb565
index|[
literal|4
index|]
init|=
block|{
block|{
literal|11
block|,
literal|5
block|,
literal|0
block|}
block|,
block|{
literal|5
block|,
literal|6
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|5
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
specifier|const
name|fb_bitfield
name|bgr565
index|[
literal|4
index|]
init|=
block|{
block|{
literal|0
block|,
literal|5
block|,
literal|0
block|}
block|,
block|{
literal|5
block|,
literal|6
block|,
literal|0
block|}
block|,
block|{
literal|11
block|,
literal|5
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
name|rgba
argument_list|,
name|rgb565
argument_list|,
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|fb_bitfield
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|memcmp
argument_list|(
name|rgba
argument_list|,
name|bgr565
argument_list|,
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|fb_bitfield
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
name|pixeltype
operator|=
name|BGRPixel
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|15
case|:
block|{
specifier|const
name|fb_bitfield
name|rgb1555
index|[
literal|4
index|]
init|=
block|{
block|{
literal|10
block|,
literal|5
block|,
literal|0
block|}
block|,
block|{
literal|5
block|,
literal|5
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|5
block|,
literal|0
block|}
block|,
block|{
literal|15
block|,
literal|1
block|,
literal|0
block|}
block|}
decl_stmt|;
specifier|const
name|fb_bitfield
name|bgr1555
index|[
literal|4
index|]
init|=
block|{
block|{
literal|0
block|,
literal|5
block|,
literal|0
block|}
block|,
block|{
literal|5
block|,
literal|5
block|,
literal|0
block|}
block|,
block|{
literal|10
block|,
literal|5
block|,
literal|0
block|}
block|,
block|{
literal|15
block|,
literal|1
block|,
literal|0
block|}
block|}
decl_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
name|rgba
argument_list|,
name|rgb1555
argument_list|,
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|fb_bitfield
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_RGB555
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|memcmp
argument_list|(
name|rgba
argument_list|,
name|bgr1555
argument_list|,
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|fb_bitfield
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|format
operator|=
name|QImage
operator|::
name|Format_RGB555
expr_stmt|;
name|pixeltype
operator|=
name|BGRPixel
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|12
case|:
block|{
specifier|const
name|fb_bitfield
name|rgb444
index|[
literal|4
index|]
init|=
block|{
block|{
literal|8
block|,
literal|4
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|4
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
name|rgba
argument_list|,
name|rgb444
argument_list|,
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|fb_bitfield
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
name|format
operator|=
name|QImage
operator|::
name|Format_RGB444
expr_stmt|;
break|break;
block|}
case|case
literal|8
case|:
break|break;
case|case
literal|1
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_Mono
expr_stmt|;
comment|//###: LSB???
break|break;
default|default:
break|break;
block|}
name|screenFormat
operator|=
name|format
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createPalette
name|void
name|QLinuxFbIntegration
operator|::
name|createPalette
parameter_list|(
name|fb_cmap
modifier|&
name|cmap
parameter_list|,
name|fb_var_screeninfo
modifier|&
name|vinfo
parameter_list|,
name|fb_fix_screeninfo
modifier|&
name|finfo
parameter_list|)
block|{
if|if
condition|(
operator|(
name|vinfo
operator|.
name|bits_per_pixel
operator|==
literal|8
operator|)
operator|||
operator|(
name|vinfo
operator|.
name|bits_per_pixel
operator|==
literal|4
operator|)
condition|)
block|{
name|screencols
operator|=
operator|(
name|vinfo
operator|.
name|bits_per_pixel
operator|==
literal|8
operator|)
condition|?
literal|256
else|:
literal|16
expr_stmt|;
name|cmap
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|cmap
operator|.
name|len
operator|=
name|screencols
expr_stmt|;
name|cmap
operator|.
name|red
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
name|cmap
operator|.
name|green
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
name|cmap
operator|.
name|blue
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
name|cmap
operator|.
name|transp
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
name|screencols
argument_list|)
expr_stmt|;
if|if
condition|(
name|screencols
operator|==
literal|16
condition|)
block|{
if|if
condition|(
name|finfo
operator|.
name|type
operator|==
name|FB_TYPE_PACKED_PIXELS
condition|)
block|{
comment|// We'll setup a grayscale cmap for 4bpp linear
name|int
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|16
condition|;
operator|++
name|idx
operator|,
name|val
operator|+=
literal|17
control|)
block|{
name|cmap
operator|.
name|red
index|[
name|idx
index|]
operator|=
operator|(
name|val
operator|<<
literal|8
operator|)
operator||
name|val
expr_stmt|;
name|cmap
operator|.
name|green
index|[
name|idx
index|]
operator|=
operator|(
name|val
operator|<<
literal|8
operator|)
operator||
name|val
expr_stmt|;
name|cmap
operator|.
name|blue
index|[
name|idx
index|]
operator|=
operator|(
name|val
operator|<<
literal|8
operator|)
operator||
name|val
expr_stmt|;
name|screenclut
index|[
name|idx
index|]
operator|=
name|qRgb
argument_list|(
name|val
argument_list|,
name|val
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Default 16 colour palette
comment|// Green is now trolltech green so certain images look nicer
comment|//                             black  d_gray l_gray white  red  green  blue cyan magenta yellow
name|unsigned
name|char
name|reds
index|[
literal|16
index|]
init|=
block|{
literal|0x00
block|,
literal|0x7F
block|,
literal|0xBF
block|,
literal|0xFF
block|,
literal|0xFF
block|,
literal|0xA2
block|,
literal|0x00
block|,
literal|0xFF
block|,
literal|0xFF
block|,
literal|0x00
block|,
literal|0x7F
block|,
literal|0x7F
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x82
block|}
decl_stmt|;
name|unsigned
name|char
name|greens
index|[
literal|16
index|]
init|=
block|{
literal|0x00
block|,
literal|0x7F
block|,
literal|0xBF
block|,
literal|0xFF
block|,
literal|0x00
block|,
literal|0xC5
block|,
literal|0x00
block|,
literal|0xFF
block|,
literal|0x00
block|,
literal|0xFF
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x7F
block|,
literal|0x7F
block|,
literal|0x7F
block|}
decl_stmt|;
name|unsigned
name|char
name|blues
index|[
literal|16
index|]
init|=
block|{
literal|0x00
block|,
literal|0x7F
block|,
literal|0xBF
block|,
literal|0xFF
block|,
literal|0x00
block|,
literal|0x11
block|,
literal|0xFF
block|,
literal|0x00
block|,
literal|0xFF
block|,
literal|0xFF
block|,
literal|0x00
block|,
literal|0x7F
block|,
literal|0x7F
block|,
literal|0x7F
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|16
condition|;
operator|++
name|idx
control|)
block|{
name|cmap
operator|.
name|red
index|[
name|idx
index|]
operator|=
operator|(
operator|(
name|reds
index|[
name|idx
index|]
operator|)
operator|<<
literal|8
operator|)
operator||
name|reds
index|[
name|idx
index|]
expr_stmt|;
name|cmap
operator|.
name|green
index|[
name|idx
index|]
operator|=
operator|(
operator|(
name|greens
index|[
name|idx
index|]
operator|)
operator|<<
literal|8
operator|)
operator||
name|greens
index|[
name|idx
index|]
expr_stmt|;
name|cmap
operator|.
name|blue
index|[
name|idx
index|]
operator|=
operator|(
operator|(
name|blues
index|[
name|idx
index|]
operator|)
operator|<<
literal|8
operator|)
operator||
name|blues
index|[
name|idx
index|]
expr_stmt|;
name|cmap
operator|.
name|transp
index|[
name|idx
index|]
operator|=
literal|0
expr_stmt|;
name|screenclut
index|[
name|idx
index|]
operator|=
name|qRgb
argument_list|(
name|reds
index|[
name|idx
index|]
argument_list|,
name|greens
index|[
name|idx
index|]
argument_list|,
name|blues
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|grayscale
condition|)
block|{
comment|// Build grayscale palette
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|screencols
condition|;
operator|++
name|i
control|)
block|{
name|int
name|bval
init|=
name|screencols
operator|==
literal|256
condition|?
name|i
else|:
operator|(
name|i
operator|<<
literal|4
operator|)
decl_stmt|;
name|ushort
name|val
init|=
operator|(
name|bval
operator|<<
literal|8
operator|)
operator||
name|bval
decl_stmt|;
name|cmap
operator|.
name|red
index|[
name|i
index|]
operator|=
name|val
expr_stmt|;
name|cmap
operator|.
name|green
index|[
name|i
index|]
operator|=
name|val
expr_stmt|;
name|cmap
operator|.
name|blue
index|[
name|i
index|]
operator|=
name|val
expr_stmt|;
name|cmap
operator|.
name|transp
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|screenclut
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|bval
argument_list|,
name|bval
argument_list|,
name|bval
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// 6x6x6 216 color cube
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|ir
init|=
literal|0x0
init|;
name|ir
operator|<=
literal|0xff
condition|;
name|ir
operator|+=
literal|0x33
control|)
block|{
for|for
control|(
name|int
name|ig
init|=
literal|0x0
init|;
name|ig
operator|<=
literal|0xff
condition|;
name|ig
operator|+=
literal|0x33
control|)
block|{
for|for
control|(
name|int
name|ib
init|=
literal|0x0
init|;
name|ib
operator|<=
literal|0xff
condition|;
name|ib
operator|+=
literal|0x33
control|)
block|{
name|cmap
operator|.
name|red
index|[
name|idx
index|]
operator|=
operator|(
name|ir
operator|<<
literal|8
operator|)
operator||
name|ir
expr_stmt|;
name|cmap
operator|.
name|green
index|[
name|idx
index|]
operator|=
operator|(
name|ig
operator|<<
literal|8
operator|)
operator||
name|ig
expr_stmt|;
name|cmap
operator|.
name|blue
index|[
name|idx
index|]
operator|=
operator|(
name|ib
operator|<<
literal|8
operator|)
operator||
name|ib
expr_stmt|;
name|cmap
operator|.
name|transp
index|[
name|idx
index|]
operator|=
literal|0
expr_stmt|;
name|screenclut
index|[
name|idx
index|]
operator|=
name|qRgb
argument_list|(
name|ir
argument_list|,
name|ig
argument_list|,
name|ib
argument_list|)
expr_stmt|;
operator|++
name|idx
expr_stmt|;
block|}
block|}
block|}
comment|// Fill in rest with 0
for|for
control|(
name|int
name|loopc
init|=
literal|0
init|;
name|loopc
operator|<
literal|40
condition|;
operator|++
name|loopc
control|)
block|{
name|screenclut
index|[
name|idx
index|]
operator|=
literal|0
expr_stmt|;
operator|++
name|idx
expr_stmt|;
block|}
name|screencols
operator|=
name|idx
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|finfo
operator|.
name|visual
operator|==
name|FB_VISUAL_DIRECTCOLOR
condition|)
block|{
name|cmap
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|int
name|rbits
init|=
literal|0
decl_stmt|,
name|gbits
init|=
literal|0
decl_stmt|,
name|bbits
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|vinfo
operator|.
name|bits_per_pixel
condition|)
block|{
case|case
literal|8
case|:
name|rbits
operator|=
name|vinfo
operator|.
name|red
operator|.
name|length
expr_stmt|;
name|gbits
operator|=
name|vinfo
operator|.
name|green
operator|.
name|length
expr_stmt|;
name|bbits
operator|=
name|vinfo
operator|.
name|blue
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|rbits
operator|==
literal|0
operator|&&
name|gbits
operator|==
literal|0
operator|&&
name|bbits
operator|==
literal|0
condition|)
block|{
comment|// cyber2000 driver bug hack
name|rbits
operator|=
literal|3
expr_stmt|;
name|gbits
operator|=
literal|3
expr_stmt|;
name|bbits
operator|=
literal|2
expr_stmt|;
block|}
break|break;
case|case
literal|15
case|:
name|rbits
operator|=
literal|5
expr_stmt|;
name|gbits
operator|=
literal|5
expr_stmt|;
name|bbits
operator|=
literal|5
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|rbits
operator|=
literal|5
expr_stmt|;
name|gbits
operator|=
literal|6
expr_stmt|;
name|bbits
operator|=
literal|5
expr_stmt|;
break|break;
case|case
literal|18
case|:
case|case
literal|19
case|:
name|rbits
operator|=
literal|6
expr_stmt|;
name|gbits
operator|=
literal|6
expr_stmt|;
name|bbits
operator|=
literal|6
expr_stmt|;
break|break;
case|case
literal|24
case|:
case|case
literal|32
case|:
name|rbits
operator|=
name|gbits
operator|=
name|bbits
operator|=
literal|8
expr_stmt|;
break|break;
block|}
name|screencols
operator|=
name|cmap
operator|.
name|len
operator|=
literal|1
operator|<<
name|qMax
argument_list|(
name|rbits
argument_list|,
name|qMax
argument_list|(
name|gbits
argument_list|,
name|bbits
argument_list|)
argument_list|)
expr_stmt|;
name|cmap
operator|.
name|red
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
literal|256
argument_list|)
expr_stmt|;
name|cmap
operator|.
name|green
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
literal|256
argument_list|)
expr_stmt|;
name|cmap
operator|.
name|blue
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
literal|256
argument_list|)
expr_stmt|;
name|cmap
operator|.
name|transp
operator|=
operator|(
name|unsigned
name|short
name|int
operator|*
operator|)
name|malloc
argument_list|(
expr|sizeof
operator|(
name|unsigned
name|short
name|int
operator|)
operator|*
literal|256
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0x0
init|;
name|i
operator|<
name|cmap
operator|.
name|len
condition|;
name|i
operator|++
control|)
block|{
name|cmap
operator|.
name|red
index|[
name|i
index|]
operator|=
name|i
operator|*
literal|65535
operator|/
operator|(
operator|(
literal|1
operator|<<
name|rbits
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
name|cmap
operator|.
name|green
index|[
name|i
index|]
operator|=
name|i
operator|*
literal|65535
operator|/
operator|(
operator|(
literal|1
operator|<<
name|gbits
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
name|cmap
operator|.
name|blue
index|[
name|i
index|]
operator|=
name|i
operator|*
literal|65535
operator|/
operator|(
operator|(
literal|1
operator|<<
name|bbits
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
name|cmap
operator|.
name|transp
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|blank
name|void
name|QLinuxFbIntegration
operator|::
name|blank
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
if|if
condition|(
name|d_ptr
operator|->
name|blank
operator|==
name|on
condition|)
return|return;
if|#
directive|if
name|defined
argument_list|(
name|QT_QWS_IPAQ
argument_list|)
if|if
condition|(
name|on
condition|)
name|system
argument_list|(
literal|"apm -suspend"
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|d_ptr
operator|->
name|fd
operator|==
operator|-
literal|1
condition|)
return|return;
comment|// Some old kernel versions don't have this.  These defines should go
comment|// away eventually
if|#
directive|if
name|defined
argument_list|(
name|FBIOBLANK
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|VESA_POWERDOWN
argument_list|)
operator|&&
name|defined
argument_list|(
name|VESA_NO_BLANKING
argument_list|)
name|ioctl
argument_list|(
name|d_ptr
operator|->
name|fd
argument_list|,
name|FBIOBLANK
argument_list|,
name|on
condition|?
name|VESA_POWERDOWN
else|:
name|VESA_NO_BLANKING
argument_list|)
expr_stmt|;
else|#
directive|else
name|ioctl
argument_list|(
name|d_ptr
operator|->
name|fd
argument_list|,
name|FBIOBLANK
argument_list|,
name|on
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
name|d_ptr
operator|->
name|blank
operator|=
name|on
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasCapability
name|bool
name|QLinuxFbIntegration
operator|::
name|hasCapability
parameter_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|cap
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cap
condition|)
block|{
case|case
name|ThreadedPixmaps
case|:
return|return
literal|true
return|;
default|default:
return|return
name|QPlatformIntegration
operator|::
name|hasCapability
argument_list|(
name|cap
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|createPlatformPixmap
name|QPlatformPixmap
modifier|*
name|QLinuxFbIntegration
operator|::
name|createPlatformPixmap
parameter_list|(
name|QPlatformPixmap
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QRasterPlatformPixmap
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createWindowSurface
name|QWindowSurface
modifier|*
name|QLinuxFbIntegration
operator|::
name|createWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|WId
parameter_list|)
specifier|const
block|{
name|QFbWindowSurface
modifier|*
name|surface
init|=
operator|new
name|QFbWindowSurface
argument_list|(
name|mPrimaryScreen
argument_list|,
name|widget
argument_list|)
decl_stmt|;
return|return
name|surface
return|;
block|}
end_function
begin_function
DECL|function|createPlatformWindow
name|QPlatformWindow
modifier|*
name|QLinuxFbIntegration
operator|::
name|createPlatformWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|WId
comment|/*winId*/
parameter_list|)
specifier|const
block|{
name|QFbWindow
modifier|*
name|w
init|=
operator|new
name|QFbWindow
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|mPrimaryScreen
operator|->
name|addWindow
argument_list|(
name|w
argument_list|)
expr_stmt|;
return|return
name|w
return|;
block|}
end_function
begin_function
DECL|function|createEventDispatcher
name|QAbstractEventDispatcher
modifier|*
name|QMinimalIntegration
operator|::
name|createEventDispatcher
parameter_list|()
specifier|const
block|{
return|return
name|createUnixEventDispatcher
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|fontDatabase
name|QPlatformFontDatabase
modifier|*
name|QLinuxFbIntegration
operator|::
name|fontDatabase
parameter_list|()
specifier|const
block|{
return|return
name|fontDb
return|;
block|}
end_function
begin_constructor
DECL|function|QLinuxFbScreen
name|QLinuxFbScreen
operator|::
name|QLinuxFbScreen
parameter_list|(
name|uchar
modifier|*
name|d
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|,
name|int
name|lstep
parameter_list|,
name|QImage
operator|::
name|Format
name|screenFormat
parameter_list|)
member_init_list|:
name|compositePainter
argument_list|(
literal|0
argument_list|)
block|{
name|data
operator|=
name|d
expr_stmt|;
name|mGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|bytesPerLine
operator|=
name|lstep
expr_stmt|;
name|mFormat
operator|=
name|screenFormat
expr_stmt|;
name|mDepth
operator|=
literal|16
expr_stmt|;
name|mScreenImage
operator|=
operator|new
name|QImage
argument_list|(
name|mGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|mGeometry
operator|.
name|height
argument_list|()
argument_list|,
name|mFormat
argument_list|)
expr_stmt|;
name|mFbScreenImage
operator|=
operator|new
name|QImage
argument_list|(
name|data
argument_list|,
name|mGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|mGeometry
operator|.
name|height
argument_list|()
argument_list|,
name|bytesPerLine
argument_list|,
name|mFormat
argument_list|)
expr_stmt|;
name|cursor
operator|=
operator|new
name|QPlatformSoftwareCursor
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|setGeometry
name|void
name|QLinuxFbScreen
operator|::
name|setGeometry
parameter_list|(
name|QRect
name|rect
parameter_list|)
block|{
name|mGeometry
operator|=
name|rect
expr_stmt|;
operator|delete
name|mFbScreenImage
expr_stmt|;
name|mFbScreenImage
operator|=
operator|new
name|QImage
argument_list|(
name|data
argument_list|,
name|mGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|mGeometry
operator|.
name|height
argument_list|()
argument_list|,
name|bytesPerLine
argument_list|,
name|mFormat
argument_list|)
expr_stmt|;
operator|delete
name|compositePainter
expr_stmt|;
name|compositePainter
operator|=
literal|0
expr_stmt|;
operator|delete
name|mScreenImage
expr_stmt|;
name|mScreenImage
operator|=
operator|new
name|QImage
argument_list|(
name|mGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|mGeometry
operator|.
name|height
argument_list|()
argument_list|,
name|mFormat
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFormat
name|void
name|QLinuxFbScreen
operator|::
name|setFormat
parameter_list|(
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
name|mFormat
operator|=
name|format
expr_stmt|;
operator|delete
name|mFbScreenImage
expr_stmt|;
name|mFbScreenImage
operator|=
operator|new
name|QImage
argument_list|(
name|data
argument_list|,
name|mGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|mGeometry
operator|.
name|height
argument_list|()
argument_list|,
name|bytesPerLine
argument_list|,
name|mFormat
argument_list|)
expr_stmt|;
operator|delete
name|compositePainter
expr_stmt|;
name|compositePainter
operator|=
literal|0
expr_stmt|;
operator|delete
name|mScreenImage
expr_stmt|;
name|mScreenImage
operator|=
operator|new
name|QImage
argument_list|(
name|mGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|mGeometry
operator|.
name|height
argument_list|()
argument_list|,
name|mFormat
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doRedraw
name|QRegion
name|QLinuxFbScreen
operator|::
name|doRedraw
parameter_list|()
block|{
name|QRegion
name|touched
decl_stmt|;
name|touched
operator|=
name|QFbScreen
operator|::
name|doRedraw
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|compositePainter
condition|)
block|{
name|compositePainter
operator|=
operator|new
name|QPainter
argument_list|(
name|mFbScreenImage
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|touched
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|compositePainter
operator|->
name|drawImage
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|,
operator|*
name|mScreenImage
argument_list|,
name|rects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|touched
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
