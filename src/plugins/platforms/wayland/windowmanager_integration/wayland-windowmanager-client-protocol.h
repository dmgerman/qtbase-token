begin_unit
begin_ifndef
ifndef|#
directive|ifndef
name|WAYLAND_WINDOWMANAGER_CLIENT_PROTOCOL_H
end_ifndef
begin_define
DECL|macro|WAYLAND_WINDOWMANAGER_CLIENT_PROTOCOL_H
define|#
directive|define
name|WAYLAND_WINDOWMANAGER_CLIENT_PROTOCOL_H
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef
begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<stdint.h>
include|#
directive|include
file|<stddef.h>
include|#
directive|include
file|"wayland-util.h"
struct_decl|struct
name|wl_client
struct_decl|;
struct_decl|struct
name|wl_windowmanager
struct_decl|;
specifier|extern
specifier|const
name|struct
name|wl_interface
name|wl_windowmanager_interface
decl_stmt|;
DECL|struct|wl_windowmanager_listener
struct|struct
name|wl_windowmanager_listener
block|{
DECL|member|client_onscreen_visibility
name|void
function_decl|(
modifier|*
name|client_onscreen_visibility
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|,
name|int32_t
name|visible
parameter_list|)
function_decl|;
DECL|member|set_screen_rotation
name|void
function_decl|(
modifier|*
name|set_screen_rotation
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|,
name|int32_t
name|rotation
parameter_list|)
function_decl|;
DECL|member|set_generic_property
name|void
function_decl|(
modifier|*
name|set_generic_property
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|,
name|struct
name|wl_surface
modifier|*
name|surface
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|struct
name|wl_array
modifier|*
name|value
parameter_list|)
function_decl|;
block|}
struct|;
specifier|static
specifier|inline
name|int
DECL|function|wl_windowmanager_add_listener
name|wl_windowmanager_add_listener
parameter_list|(
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|,
specifier|const
name|struct
name|wl_windowmanager_listener
modifier|*
name|listener
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
return|return
name|wl_proxy_add_listener
argument_list|(
operator|(
expr|struct
name|wl_proxy
operator|*
operator|)
name|wl_windowmanager
argument_list|,
operator|(
name|void
argument_list|(
operator|*
operator|*
argument_list|)
argument_list|(
name|void
argument_list|)
operator|)
name|listener
argument_list|,
name|data
argument_list|)
return|;
block|}
DECL|macro|WL_WINDOWMANAGER_MAP_CLIENT_TO_PROCESS
define|#
directive|define
name|WL_WINDOWMANAGER_MAP_CLIENT_TO_PROCESS
value|0
DECL|macro|WL_WINDOWMANAGER_AUTHENTICATE_WITH_TOKEN
define|#
directive|define
name|WL_WINDOWMANAGER_AUTHENTICATE_WITH_TOKEN
value|1
DECL|macro|WL_WINDOWMANAGER_UPDATE_GENERIC_PROPERTY
define|#
directive|define
name|WL_WINDOWMANAGER_UPDATE_GENERIC_PROPERTY
value|2
specifier|static
specifier|inline
name|struct
name|wl_windowmanager
modifier|*
DECL|function|wl_windowmanager_create
name|wl_windowmanager_create
parameter_list|(
name|struct
name|wl_display
modifier|*
name|display
parameter_list|,
name|uint32_t
name|id
parameter_list|,
name|uint32_t
name|version
parameter_list|)
block|{
name|wl_display_bind
argument_list|(
name|display
argument_list|,
name|id
argument_list|,
literal|"wl_windowmanager"
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
operator|(
expr|struct
name|wl_windowmanager
operator|*
operator|)
name|wl_proxy_create_for_id
argument_list|(
name|display
argument_list|,
operator|&
name|wl_windowmanager_interface
argument_list|,
name|id
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|void
DECL|function|wl_windowmanager_set_user_data
name|wl_windowmanager_set_user_data
parameter_list|(
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
block|{
name|wl_proxy_set_user_data
argument_list|(
operator|(
expr|struct
name|wl_proxy
operator|*
operator|)
name|wl_windowmanager
argument_list|,
name|user_data
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|inline
name|void
modifier|*
DECL|function|wl_windowmanager_get_user_data
name|wl_windowmanager_get_user_data
parameter_list|(
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|)
block|{
return|return
name|wl_proxy_get_user_data
argument_list|(
operator|(
expr|struct
name|wl_proxy
operator|*
operator|)
name|wl_windowmanager
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|void
DECL|function|wl_windowmanager_destroy
name|wl_windowmanager_destroy
parameter_list|(
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|)
block|{
name|wl_proxy_destroy
argument_list|(
operator|(
expr|struct
name|wl_proxy
operator|*
operator|)
name|wl_windowmanager
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|inline
name|void
DECL|function|wl_windowmanager_map_client_to_process
name|wl_windowmanager_map_client_to_process
parameter_list|(
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|,
name|uint32_t
name|processid
parameter_list|)
block|{
name|wl_proxy_marshal
argument_list|(
operator|(
expr|struct
name|wl_proxy
operator|*
operator|)
name|wl_windowmanager
argument_list|,
name|WL_WINDOWMANAGER_MAP_CLIENT_TO_PROCESS
argument_list|,
name|processid
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|inline
name|void
DECL|function|wl_windowmanager_authenticate_with_token
name|wl_windowmanager_authenticate_with_token
parameter_list|(
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|,
specifier|const
name|char
modifier|*
name|processid
parameter_list|)
block|{
name|wl_proxy_marshal
argument_list|(
operator|(
expr|struct
name|wl_proxy
operator|*
operator|)
name|wl_windowmanager
argument_list|,
name|WL_WINDOWMANAGER_AUTHENTICATE_WITH_TOKEN
argument_list|,
name|processid
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|inline
name|void
DECL|function|wl_windowmanager_update_generic_property
name|wl_windowmanager_update_generic_property
parameter_list|(
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|,
name|struct
name|wl_surface
modifier|*
name|surface
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|struct
name|wl_array
modifier|*
name|value
parameter_list|)
block|{
name|wl_proxy_marshal
argument_list|(
operator|(
expr|struct
name|wl_proxy
operator|*
operator|)
name|wl_windowmanager
argument_list|,
name|WL_WINDOWMANAGER_UPDATE_GENERIC_PROPERTY
argument_list|,
name|surface
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
end_unit
