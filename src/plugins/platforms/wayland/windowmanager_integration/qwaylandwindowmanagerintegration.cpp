begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwaylandwindowmanagerintegration.h"
end_include
begin_include
include|#
directive|include
file|"wayland-windowmanager-client-protocol.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandwindow.h"
end_include
begin_include
include|#
directive|include
file|<stdint.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QEvent>
end_include
begin_include
include|#
directive|include
file|<QtCore/QHash>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPlatformNativeInterface>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPlatformWindow>
end_include
begin_include
include|#
directive|include
file|<QtGui/QtEvents>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWidget>
end_include
begin_include
include|#
directive|include
file|<QtGui/QApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_class
DECL|class|QWaylandWindowManagerIntegrationPrivate
class|class
name|QWaylandWindowManagerIntegrationPrivate
block|{
public|public:
name|QWaylandWindowManagerIntegrationPrivate
parameter_list|(
name|QWaylandDisplay
modifier|*
name|waylandDisplay
parameter_list|)
constructor_decl|;
DECL|member|m_blockPropertyUpdates
name|bool
name|m_blockPropertyUpdates
decl_stmt|;
DECL|member|m_waylandDisplay
name|QWaylandDisplay
modifier|*
name|m_waylandDisplay
decl_stmt|;
DECL|member|m_waylandWindowManager
name|struct
name|wl_windowmanager
modifier|*
name|m_waylandWindowManager
decl_stmt|;
DECL|member|m_queuedProperties
name|QHash
argument_list|<
name|QWaylandWindow
modifier|*
argument_list|,
name|QVariantMap
argument_list|>
name|m_queuedProperties
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWaylandWindowManagerIntegrationPrivate
name|QWaylandWindowManagerIntegrationPrivate
operator|::
name|QWaylandWindowManagerIntegrationPrivate
parameter_list|(
name|QWaylandDisplay
modifier|*
name|waylandDisplay
parameter_list|)
member_init_list|:
name|m_blockPropertyUpdates
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_waylandDisplay
argument_list|(
name|waylandDisplay
argument_list|)
member_init_list|,
name|m_waylandWindowManager
argument_list|(
literal|0
argument_list|)
block|{  }
end_constructor
begin_decl_stmt
DECL|member|m_instance
name|QWaylandWindowManagerIntegration
modifier|*
name|QWaylandWindowManagerIntegration
operator|::
name|m_instance
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_windowManagerListener
specifier|const
name|struct
name|wl_windowmanager_listener
name|QWaylandWindowManagerIntegration
operator|::
name|m_windowManagerListener
init|=
block|{
name|QWaylandWindowManagerIntegration
operator|::
name|wlHandleOnScreenVisibilityChange
block|,
name|QWaylandWindowManagerIntegration
operator|::
name|wlHandleScreenOrientationChange
block|,
name|QWaylandWindowManagerIntegration
operator|::
name|wlHandleWindowPropertyChange
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|createIntegration
name|QWaylandWindowManagerIntegration
modifier|*
name|QWaylandWindowManagerIntegration
operator|::
name|createIntegration
parameter_list|(
name|QWaylandDisplay
modifier|*
name|waylandDisplay
parameter_list|)
block|{
return|return
operator|new
name|QWaylandWindowManagerIntegration
argument_list|(
name|waylandDisplay
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QWaylandWindowManagerIntegration
name|QWaylandWindowManagerIntegration
operator|::
name|QWaylandWindowManagerIntegration
parameter_list|(
name|QWaylandDisplay
modifier|*
name|waylandDisplay
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QWaylandWindowManagerIntegrationPrivate
argument_list|(
name|waylandDisplay
argument_list|)
argument_list|)
block|{
name|m_instance
operator|=
name|this
expr_stmt|;
name|wl_display_add_global_listener
argument_list|(
name|d_ptr
operator|->
name|m_waylandDisplay
operator|->
name|wl_display
argument_list|()
argument_list|,
name|QWaylandWindowManagerIntegration
operator|::
name|wlHandleListenerGlobal
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWaylandWindowManagerIntegration
name|QWaylandWindowManagerIntegration
operator|::
name|~
name|QWaylandWindowManagerIntegration
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|instance
name|QWaylandWindowManagerIntegration
modifier|*
name|QWaylandWindowManagerIntegration
operator|::
name|instance
parameter_list|()
block|{
return|return
name|m_instance
return|;
block|}
end_function
begin_function
DECL|function|windowManager
name|struct
name|wl_windowmanager
modifier|*
name|QWaylandWindowManagerIntegration
operator|::
name|windowManager
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWaylandWindowManagerIntegration
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_waylandWindowManager
return|;
block|}
end_function
begin_function
DECL|function|wlHandleListenerGlobal
name|void
name|QWaylandWindowManagerIntegration
operator|::
name|wlHandleListenerGlobal
parameter_list|(
name|wl_display
modifier|*
name|display
parameter_list|,
name|uint32_t
name|id
parameter_list|,
specifier|const
name|char
modifier|*
name|interface
parameter_list|,
name|uint32_t
name|version
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|strcmp
argument_list|(
name|interface
argument_list|,
literal|"wl_windowmanager"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|QWaylandWindowManagerIntegration
modifier|*
name|integration
init|=
cast|static_cast
argument_list|<
name|QWaylandWindowManagerIntegration
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|integration
operator|->
name|d_ptr
operator|->
name|m_waylandWindowManager
operator|=
name|wl_windowmanager_create
argument_list|(
name|display
argument_list|,
name|id
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|wl_windowmanager
modifier|*
name|windowManager
init|=
name|integration
operator|->
name|d_ptr
operator|->
name|m_waylandWindowManager
decl_stmt|;
name|wl_windowmanager_add_listener
argument_list|(
name|windowManager
argument_list|,
operator|&
name|m_windowManagerListener
argument_list|,
name|integration
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mapClientToProcess
name|void
name|QWaylandWindowManagerIntegration
operator|::
name|mapClientToProcess
parameter_list|(
name|long
name|long
name|processId
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWaylandWindowManagerIntegration
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_waylandWindowManager
condition|)
name|wl_windowmanager_map_client_to_process
argument_list|(
name|d
operator|->
name|m_waylandWindowManager
argument_list|,
operator|(
name|uint32_t
operator|)
name|processId
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|authenticateWithToken
name|void
name|QWaylandWindowManagerIntegration
operator|::
name|authenticateWithToken
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|token
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWaylandWindowManagerIntegration
argument_list|)
expr_stmt|;
name|QByteArray
name|authToken
init|=
name|token
decl_stmt|;
if|if
condition|(
name|authToken
operator|.
name|isEmpty
argument_list|()
condition|)
name|authToken
operator|=
name|qgetenv
argument_list|(
literal|"WL_AUTHENTICATION_TOKEN"
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_waylandWindowManager
operator|&&
operator|!
name|authToken
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wl_windowmanager_authenticate_with_token
argument_list|(
name|d
operator|->
name|m_waylandWindowManager
argument_list|,
name|authToken
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writePropertyValue
specifier|static
name|wl_array
name|writePropertyValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|QByteArray
name|byteValue
decl_stmt|;
name|QDataStream
name|ds
argument_list|(
operator|&
name|byteValue
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|ds
operator|<<
name|value
expr_stmt|;
name|wl_array
name|data
decl_stmt|;
name|data
operator|.
name|size
operator|=
name|byteValue
operator|.
name|size
argument_list|()
expr_stmt|;
name|data
operator|.
name|data
operator|=
operator|(
name|void
operator|*
operator|)
name|byteValue
operator|.
name|constData
argument_list|()
expr_stmt|;
name|data
operator|.
name|alloc
operator|=
literal|0
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|setWindowProperty
name|void
name|QWaylandWindowManagerIntegration
operator|::
name|setWindowProperty
parameter_list|(
name|QWaylandWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QString
modifier|&
name|propertyName
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|propertyValue
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWaylandWindowManagerIntegration
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_blockPropertyUpdates
condition|)
return|return;
if|if
condition|(
name|window
operator|->
name|wl_surface
argument_list|()
condition|)
block|{
name|wl_array
name|data
init|=
name|writePropertyValue
argument_list|(
name|propertyValue
argument_list|)
decl_stmt|;
name|wl_windowmanager_update_generic_property
argument_list|(
name|d
operator|->
name|m_waylandWindowManager
argument_list|,
name|window
operator|->
name|wl_surface
argument_list|()
argument_list|,
name|propertyName
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVariantMap
name|props
init|=
name|d
operator|->
name|m_queuedProperties
operator|.
name|value
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|props
operator|.
name|insert
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_queuedProperties
operator|.
name|insert
argument_list|(
name|window
argument_list|,
name|props
argument_list|)
expr_stmt|;
comment|// ### TODO we'll need to add listening to destroyed() of QWindow that owns QWaylandWindow
comment|// once refactor changes are in, and connect to removeQueuedPropertiesForWindow().
block|}
block|}
end_function
begin_function
DECL|function|flushPropertyChanges
name|void
name|QWaylandWindowManagerIntegration
operator|::
name|flushPropertyChanges
parameter_list|(
name|QWaylandWindow
modifier|*
name|windowToFlush
parameter_list|)
block|{
comment|// write all changes we got while we did not have a surface.
comment|// this can happen during startup, for example, or while the window is hidden.
name|Q_D
argument_list|(
name|QWaylandWindowManagerIntegration
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|windowToFlush
condition|)
return|return;
name|QVariantMap
name|properties
init|=
name|d
operator|->
name|m_queuedProperties
operator|.
name|value
argument_list|(
name|windowToFlush
argument_list|)
decl_stmt|;
name|wl_surface
modifier|*
name|surface
init|=
name|windowToFlush
operator|->
name|wl_surface
argument_list|()
decl_stmt|;
name|QMapIterator
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|pIt
argument_list|(
name|properties
argument_list|)
decl_stmt|;
while|while
condition|(
name|pIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|pIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|wl_array
name|data
init|=
name|writePropertyValue
argument_list|(
name|pIt
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|wl_windowmanager_update_generic_property
argument_list|(
name|d
operator|->
name|m_waylandWindowManager
argument_list|,
name|surface
argument_list|,
name|pIt
operator|.
name|key
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|m_queuedProperties
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeQueuedPropertiesForWindow
name|void
name|QWaylandWindowManagerIntegration
operator|::
name|removeQueuedPropertiesForWindow
parameter_list|()
block|{
comment|//  TODO enable this later once refactor changes are in.
comment|//    Q_D(QWaylandWindowManagerIntegration);
comment|//    QWaylandWindow *window = 0;
comment|//    d->m_queuedProperties.remove(window);
block|}
end_function
begin_function
DECL|function|wlHandleOnScreenVisibilityChange
name|void
name|QWaylandWindowManagerIntegration
operator|::
name|wlHandleOnScreenVisibilityChange
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|,
name|int
name|visible
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|wl_windowmanager
argument_list|)
expr_stmt|;
name|QEvent
name|evt
argument_list|(
name|visible
operator|!=
literal|0
condition|?
name|QEvent
operator|::
name|ApplicationActivate
else|:
name|QEvent
operator|::
name|ApplicationDeactivate
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
operator|&
name|evt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wlHandleScreenOrientationChange
name|void
name|QWaylandWindowManagerIntegration
operator|::
name|wlHandleScreenOrientationChange
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|,
name|int
name|screenOrientation
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|wl_windowmanager
argument_list|)
expr_stmt|;
name|QScreenOrientationChangeEvent
name|event
argument_list|(
name|screenOrientation
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wlHandleWindowPropertyChange
name|void
name|QWaylandWindowManagerIntegration
operator|::
name|wlHandleWindowPropertyChange
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|wl_windowmanager
modifier|*
name|wl_windowmanager
parameter_list|,
name|struct
name|wl_surface
modifier|*
name|surface
parameter_list|,
specifier|const
name|char
modifier|*
name|propertyName
parameter_list|,
name|struct
name|wl_array
modifier|*
name|propertyValue
parameter_list|)
block|{
comment|// window manager changes a window property
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|wl_windowmanager
argument_list|)
expr_stmt|;
name|QVariant
name|variantValue
decl_stmt|;
name|QByteArray
name|baValue
init|=
name|QByteArray
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|propertyValue
operator|->
name|data
argument_list|,
name|propertyValue
operator|->
name|size
argument_list|)
decl_stmt|;
name|QDataStream
name|ds
argument_list|(
operator|&
name|baValue
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|ds
operator|>>
name|variantValue
expr_stmt|;
name|QPlatformNativeInterface
modifier|*
name|nativeInterface
init|=
name|qApp
operator|->
name|platformNativeInterface
argument_list|()
decl_stmt|;
name|QWaylandWindowManagerIntegration
modifier|*
name|inst
init|=
name|QWaylandWindowManagerIntegration
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QWidgetList
name|widgets
init|=
name|qApp
operator|->
name|topLevelWidgets
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|widget
decl|,
name|widgets
control|)
block|{
name|QPlatformWindow
modifier|*
name|platformWindowForWidget
init|=
name|widget
operator|->
name|platformWindow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|platformWindowForWidget
condition|)
continue|continue;
name|QWaylandWindow
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QWaylandWindow
operator|*
argument_list|>
argument_list|(
name|platformWindowForWidget
argument_list|)
decl_stmt|;
name|wl_surface
modifier|*
name|windowSurface
init|=
operator|(
name|wl_surface
operator|*
operator|)
name|nativeInterface
operator|->
name|nativeResourceForWidget
argument_list|(
name|QByteArray
argument_list|(
literal|"surface"
argument_list|)
argument_list|,
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|windowSurface
operator|==
name|surface
condition|)
block|{
name|inst
operator|->
name|handleWindowPropertyChange
argument_list|(
name|window
argument_list|,
name|QString
argument_list|(
name|propertyName
argument_list|)
argument_list|,
name|variantValue
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|handleWindowPropertyChange
name|void
name|QWaylandWindowManagerIntegration
operator|::
name|handleWindowPropertyChange
parameter_list|(
name|QWaylandWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QString
modifier|&
name|propertyName
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|propertyValue
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWaylandWindowManagerIntegration
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_blockPropertyUpdates
operator|=
literal|true
expr_stmt|;
name|QPlatformNativeInterface
modifier|*
name|nativeInterface
init|=
name|qApp
operator|->
name|platformNativeInterface
argument_list|()
decl_stmt|;
name|nativeInterface
operator|->
name|setWindowProperty
argument_list|(
name|window
argument_list|,
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_blockPropertyUpdates
operator|=
literal|false
expr_stmt|;
block|}
end_function
end_unit
