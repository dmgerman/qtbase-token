begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwaylandmime.h"
end_include
begin_include
include|#
directive|include
file|<QImage>
end_include
begin_include
include|#
directive|include
file|<QColor>
end_include
begin_include
include|#
directive|include
file|<QUrl>
end_include
begin_include
include|#
directive|include
file|<QBuffer>
end_include
begin_include
include|#
directive|include
file|<QImageWriter>
end_include
begin_function
DECL|function|getByteArray
name|QByteArray
name|QWaylandMimeHelper
operator|::
name|getByteArray
parameter_list|(
name|QMimeData
modifier|*
name|mimeData
parameter_list|,
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|)
block|{
name|QByteArray
name|content
decl_stmt|;
if|if
condition|(
name|mimeType
operator|==
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
name|content
operator|=
name|mimeData
operator|->
name|text
argument_list|()
operator|.
name|toUtf8
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mimeData
operator|->
name|hasImage
argument_list|()
operator|&&
operator|(
name|mimeType
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-qt-image"
argument_list|)
operator|||
name|mimeType
operator|.
name|startsWith
argument_list|(
literal|"image/"
argument_list|)
operator|)
condition|)
block|{
name|QImage
name|image
init|=
name|qvariant_cast
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|mimeData
operator|->
name|imageData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QBuffer
name|buf
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QByteArray
name|fmt
init|=
literal|"BMP"
decl_stmt|;
if|if
condition|(
name|mimeType
operator|.
name|startsWith
argument_list|(
literal|"image/"
argument_list|)
condition|)
block|{
name|QByteArray
name|imgFmt
init|=
name|mimeType
operator|.
name|mid
argument_list|(
literal|6
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|toAscii
argument_list|()
decl_stmt|;
if|if
condition|(
name|QImageWriter
operator|::
name|supportedImageFormats
argument_list|()
operator|.
name|contains
argument_list|(
name|imgFmt
argument_list|)
condition|)
name|fmt
operator|=
name|imgFmt
expr_stmt|;
block|}
name|QImageWriter
name|wr
argument_list|(
operator|&
name|buf
argument_list|,
name|fmt
argument_list|)
decl_stmt|;
name|wr
operator|.
name|write
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|content
operator|=
name|buf
operator|.
name|buffer
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mimeType
operator|==
name|QLatin1String
argument_list|(
literal|"application/x-color"
argument_list|)
condition|)
block|{
name|content
operator|=
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|mimeData
operator|->
name|colorData
argument_list|()
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toAscii
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mimeType
operator|==
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|QUrl
argument_list|>
name|urls
init|=
name|mimeData
operator|->
name|urls
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urls
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|content
operator|.
name|append
argument_list|(
name|urls
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toEncoded
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|content
operator|=
name|mimeData
operator|->
name|data
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
block|}
return|return
name|content
return|;
block|}
end_function
end_unit
