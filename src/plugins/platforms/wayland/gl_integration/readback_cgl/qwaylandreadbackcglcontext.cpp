begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwaylandreadbackcglcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandshmbackingstore.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandreadbackcglwindow.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiGLContext>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<OpenGL/OpenGL.h>
end_include
begin_include
include|#
directive|include
file|<OpenGL/glext.h>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/cglconvenience_p.h>
end_include
begin_constructor
DECL|function|QWaylandReadbackCGLContext
name|QWaylandReadbackCGLContext
operator|::
name|QWaylandReadbackCGLContext
parameter_list|(
name|QPlatformGLContext
modifier|*
name|share
parameter_list|)
member_init_list|:
name|QPlatformGLContext
argument_list|()
block|{
name|Q_UNUSED
argument_list|(
name|share
argument_list|)
expr_stmt|;
name|m_glContext
operator|=
name|qcgl_createGlContext
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|format
name|QSurfaceFormat
name|QWaylandReadbackCGLContext
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|qcgl_surfaceFormat
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|makeCurrent
name|bool
name|QWaylandReadbackCGLContext
operator|::
name|makeCurrent
parameter_list|(
name|QPlatformSurface
modifier|*
name|surface
parameter_list|)
block|{
name|QWaylandReadbackCGLWindow
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QWaylandReadbackCGLWindow
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|CGLSetPBuffer
argument_list|(
name|m_glContext
argument_list|,
name|window
operator|->
name|pixelBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CGLSetCurrentContext
argument_list|(
name|m_glContext
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|doneCurrent
name|void
name|QWaylandReadbackCGLContext
operator|::
name|doneCurrent
parameter_list|()
block|{
name|CGLSetCurrentContext
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swapBuffers
name|void
name|QWaylandReadbackCGLContext
operator|::
name|swapBuffers
parameter_list|(
name|QPlatformSurface
modifier|*
name|surface
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|surface
argument_list|)
expr_stmt|;
if|if
condition|(
name|QGuiGLContext
operator|::
name|currentContext
argument_list|()
operator|->
name|handle
argument_list|()
operator|!=
name|this
condition|)
block|{
name|makeCurrent
argument_list|(
name|surface
argument_list|)
expr_stmt|;
block|}
name|CGLFlushDrawable
argument_list|(
name|m_glContext
argument_list|)
expr_stmt|;
name|QWaylandReadbackCGLWindow
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QWaylandReadbackCGLWindow
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|QSize
name|size
init|=
name|window
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|QImage
name|img
argument_list|(
name|size
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|img
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|constBits
init|=
name|img
operator|.
name|bits
argument_list|()
decl_stmt|;
name|void
modifier|*
name|pixels
init|=
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|constBits
argument_list|)
decl_stmt|;
comment|//    glReadPixels(0,0, size.width(), size.height(), GL_RGBA,GL_UNSIGNED_BYTE, pixels);
comment|//    img = img.mirrored();
comment|//    qgl_byteSwapImage(img,GL_UNSIGNED_INT_8_8_8_8_REV);
name|constBits
operator|=
name|img
operator|.
name|bits
argument_list|()
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|constDstBits
init|=
name|window
operator|->
name|buffer
argument_list|()
decl_stmt|;
name|uchar
modifier|*
name|dstBits
init|=
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|constDstBits
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|dstBits
argument_list|,
name|constBits
argument_list|,
operator|(
name|img
operator|.
name|width
argument_list|()
operator|*
literal|4
operator|)
operator|*
name|img
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|->
name|damage
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|->
name|waitForFrameSync
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
DECL|function|getProcAddress
name|void
argument_list|(
argument|*QWaylandReadbackCGLContext::getProcAddress(const QByteArray&procName)
argument_list|)
end_macro
begin_expr_stmt
DECL|function|getProcAddress
operator|(
operator|)
block|{
return|return
name|qcgl_getProcAddress
argument_list|(
name|procName
argument_list|)
return|;
block|}
end_expr_stmt
end_unit
