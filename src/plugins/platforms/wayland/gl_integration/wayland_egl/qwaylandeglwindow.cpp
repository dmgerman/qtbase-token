begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwaylandeglwindow.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandscreen.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandglcontext.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qeglconvenience_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindowSystemInterface>
end_include
begin_constructor
DECL|function|QWaylandEglWindow
name|QWaylandEglWindow
operator|::
name|QWaylandEglWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QWaylandWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_waylandEglWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_eglSurface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_eglConfig
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_format
argument_list|(
name|window
operator|->
name|format
argument_list|()
argument_list|)
block|{
name|m_eglIntegration
operator|=
cast|static_cast
argument_list|<
name|QWaylandEglIntegration
operator|*
argument_list|>
argument_list|(
name|mDisplay
operator|->
name|eglIntegration
argument_list|()
argument_list|)
expr_stmt|;
comment|//super creates a new surface
name|newSurfaceCreated
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWaylandEglWindow
name|QWaylandEglWindow
operator|::
name|~
name|QWaylandEglWindow
parameter_list|()
block|{
if|if
condition|(
name|m_eglSurface
condition|)
block|{
name|eglDestroySurface
argument_list|(
name|m_eglIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|m_eglSurface
argument_list|)
expr_stmt|;
name|m_eglSurface
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|windowType
name|QWaylandWindow
operator|::
name|WindowType
name|QWaylandEglWindow
operator|::
name|windowType
parameter_list|()
specifier|const
block|{
return|return
name|QWaylandWindow
operator|::
name|Egl
return|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QWaylandEglWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QWaylandWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_waylandEglWindow
condition|)
block|{
name|wl_egl_window_resize
argument_list|(
name|m_waylandEglWindow
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|newSurfaceCreated
name|void
name|QWaylandEglWindow
operator|::
name|newSurfaceCreated
parameter_list|()
block|{
if|if
condition|(
name|m_waylandEglWindow
condition|)
name|wl_egl_window_destroy
argument_list|(
name|m_waylandEglWindow
argument_list|)
expr_stmt|;
name|wl_visual
modifier|*
name|visual
init|=
name|QWaylandScreen
operator|::
name|waylandScreenFromWindow
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|visual
argument_list|()
decl_stmt|;
name|QSize
name|size
init|=
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|size
operator|.
name|isValid
argument_list|()
condition|)
name|size
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_eglSurface
condition|)
block|{
name|eglDestroySurface
argument_list|(
name|m_eglIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|m_eglSurface
argument_list|)
expr_stmt|;
name|m_eglSurface
operator|=
literal|0
expr_stmt|;
block|}
name|m_waylandEglWindow
operator|=
name|wl_egl_window_create
argument_list|(
name|mSurface
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|visual
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|format
name|QSurfaceFormat
name|QWaylandEglWindow
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|m_format
return|;
block|}
end_function
begin_function
DECL|function|eglSurface
name|EGLSurface
name|QWaylandEglWindow
operator|::
name|eglSurface
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_waylandEglWindow
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|m_eglSurface
condition|)
block|{
if|if
condition|(
operator|!
name|m_eglConfig
condition|)
name|m_eglConfig
operator|=
name|q_configFromGLFormat
argument_list|(
name|m_eglIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|format
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EGLNativeWindowType
name|window
init|=
name|m_waylandEglWindow
decl_stmt|;
name|m_eglSurface
operator|=
name|eglCreateWindowSurface
argument_list|(
name|m_eglIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|m_eglConfig
argument_list|,
name|window
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|m_eglSurface
return|;
block|}
end_function
end_unit
