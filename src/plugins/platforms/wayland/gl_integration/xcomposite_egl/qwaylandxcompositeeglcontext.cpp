begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwaylandxcompositeeglcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandxcompositeeglwindow.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandxcompositebuffer.h"
end_include
begin_include
include|#
directive|include
file|"wayland-xcomposite-client-protocol.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|"qeglconvenience.h"
end_include
begin_include
include|#
directive|include
file|"qxlibeglintegration.h"
end_include
begin_include
include|#
directive|include
file|<X11/extensions/Xcomposite.h>
end_include
begin_constructor
DECL|function|QWaylandXCompositeEGLContext
name|QWaylandXCompositeEGLContext
operator|::
name|QWaylandXCompositeEGLContext
parameter_list|(
name|QWaylandXCompositeEGLIntegration
modifier|*
name|glxIntegration
parameter_list|,
name|QWaylandXCompositeEGLWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QPlatformGLContext
argument_list|()
member_init_list|,
name|mEglIntegration
argument_list|(
name|glxIntegration
argument_list|)
member_init_list|,
name|mWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|mBuffer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mXWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mConfig
argument_list|(
name|q_configFromQPlatformWindowFormat
argument_list|(
name|glxIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|window
operator|->
name|widget
argument_list|()
operator|->
name|platformWindowFormat
argument_list|()
argument_list|,
literal|true
argument_list|,
name|EGL_WINDOW_BIT
argument_list|)
argument_list|)
member_init_list|,
name|mWaitingForSync
argument_list|(
literal|false
argument_list|)
block|{
name|QVector
argument_list|<
name|EGLint
argument_list|>
name|eglContextAttrs
decl_stmt|;
name|eglContextAttrs
operator|.
name|append
argument_list|(
name|EGL_CONTEXT_CLIENT_VERSION
argument_list|)
expr_stmt|;
name|eglContextAttrs
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|eglContextAttrs
operator|.
name|append
argument_list|(
name|EGL_NONE
argument_list|)
expr_stmt|;
name|mContext
operator|=
name|eglCreateContext
argument_list|(
name|glxIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|mConfig
argument_list|,
name|EGL_NO_CONTEXT
argument_list|,
name|eglContextAttrs
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mContext
operator|==
name|EGL_NO_CONTEXT
condition|)
block|{
name|qFatal
argument_list|(
literal|"failed to find context"
argument_list|)
expr_stmt|;
block|}
name|geometryChanged
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|makeCurrent
name|void
name|QWaylandXCompositeEGLContext
operator|::
name|makeCurrent
parameter_list|()
block|{
name|QPlatformGLContext
operator|::
name|makeCurrent
argument_list|()
expr_stmt|;
name|eglMakeCurrent
argument_list|(
name|mEglIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|mEglWindowSurface
argument_list|,
name|mEglWindowSurface
argument_list|,
name|mContext
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doneCurrent
name|void
name|QWaylandXCompositeEGLContext
operator|::
name|doneCurrent
parameter_list|()
block|{
name|QPlatformGLContext
operator|::
name|doneCurrent
argument_list|()
expr_stmt|;
name|eglMakeCurrent
argument_list|(
name|mEglIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|EGL_NO_SURFACE
argument_list|,
name|EGL_NO_SURFACE
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swapBuffers
name|void
name|QWaylandXCompositeEGLContext
operator|::
name|swapBuffers
parameter_list|()
block|{
name|QSize
name|size
init|=
name|mWindow
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|eglSwapBuffers
argument_list|(
name|mEglIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|mEglWindowSurface
argument_list|)
expr_stmt|;
name|mWindow
operator|->
name|damage
argument_list|(
name|QRegion
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mWindow
operator|->
name|waitForFrameSync
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getProcAddress
name|void
modifier|*
name|QWaylandXCompositeEGLContext
operator|::
name|getProcAddress
parameter_list|(
specifier|const
name|QString
modifier|&
name|procName
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
name|eglGetProcAddress
argument_list|(
name|qPrintable
argument_list|(
name|procName
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|platformWindowFormat
name|QPlatformWindowFormat
name|QWaylandXCompositeEGLContext
operator|::
name|platformWindowFormat
parameter_list|()
specifier|const
block|{
return|return
name|qt_qPlatformWindowFormatFromConfig
argument_list|(
name|mEglIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|mConfig
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sync_function
name|void
name|QWaylandXCompositeEGLContext
operator|::
name|sync_function
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QWaylandXCompositeEGLContext
modifier|*
name|that
init|=
cast|static_cast
argument_list|<
name|QWaylandXCompositeEGLContext
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|that
operator|->
name|mWaitingForSync
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|geometryChanged
name|void
name|QWaylandXCompositeEGLContext
operator|::
name|geometryChanged
parameter_list|()
block|{
name|QSize
name|size
argument_list|(
name|mWindow
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//QGLWidget wants a context for a window without geometry
name|size
operator|=
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
operator|delete
name|mBuffer
expr_stmt|;
comment|//XFreePixmap deletes the glxPixmap as well
if|if
condition|(
name|mXWindow
condition|)
block|{
name|XDestroyWindow
argument_list|(
name|mEglIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|mXWindow
argument_list|)
expr_stmt|;
block|}
name|VisualID
name|visualId
init|=
name|QXlibEglIntegration
operator|::
name|getCompatibleVisualId
argument_list|(
name|mEglIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|mEglIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|mConfig
argument_list|)
decl_stmt|;
name|XVisualInfo
name|visualInfoTemplate
decl_stmt|;
name|memset
argument_list|(
operator|&
name|visualInfoTemplate
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|XVisualInfo
argument_list|)
argument_list|)
expr_stmt|;
name|visualInfoTemplate
operator|.
name|visualid
operator|=
name|visualId
expr_stmt|;
name|int
name|matchingCount
init|=
literal|0
decl_stmt|;
name|XVisualInfo
modifier|*
name|visualInfo
init|=
name|XGetVisualInfo
argument_list|(
name|mEglIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|VisualIDMask
argument_list|,
operator|&
name|visualInfoTemplate
argument_list|,
operator|&
name|matchingCount
argument_list|)
decl_stmt|;
name|Colormap
name|cmap
init|=
name|XCreateColormap
argument_list|(
name|mEglIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|mEglIntegration
operator|->
name|rootWindow
argument_list|()
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|AllocNone
argument_list|)
decl_stmt|;
name|XSetWindowAttributes
name|a
decl_stmt|;
name|a
operator|.
name|colormap
operator|=
name|cmap
expr_stmt|;
name|mXWindow
operator|=
name|XCreateWindow
argument_list|(
name|mEglIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|mEglIntegration
operator|->
name|rootWindow
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|visualInfo
operator|->
name|depth
argument_list|,
name|InputOutput
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|CWColormap
argument_list|,
operator|&
name|a
argument_list|)
expr_stmt|;
name|XCompositeRedirectWindow
argument_list|(
name|mEglIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|mXWindow
argument_list|,
name|CompositeRedirectManual
argument_list|)
expr_stmt|;
name|XMapWindow
argument_list|(
name|mEglIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|mXWindow
argument_list|)
expr_stmt|;
name|mEglWindowSurface
operator|=
name|eglCreateWindowSurface
argument_list|(
name|mEglIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|mConfig
argument_list|,
name|mXWindow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|mEglWindowSurface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|qFatal
argument_list|(
literal|"Could not make eglsurface"
argument_list|)
expr_stmt|;
block|}
name|XSync
argument_list|(
name|mEglIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|False
argument_list|)
expr_stmt|;
name|mBuffer
operator|=
operator|new
name|QWaylandXCompositeBuffer
argument_list|(
name|mEglIntegration
operator|->
name|waylandXComposite
argument_list|()
argument_list|,
operator|(
name|uint32_t
operator|)
name|mXWindow
argument_list|,
name|size
argument_list|,
name|mEglIntegration
operator|->
name|waylandDisplay
argument_list|()
operator|->
name|argbVisual
argument_list|()
argument_list|)
expr_stmt|;
name|mWindow
operator|->
name|attach
argument_list|(
name|mBuffer
argument_list|)
expr_stmt|;
name|wl_display_sync_callback
argument_list|(
name|mEglIntegration
operator|->
name|waylandDisplay
argument_list|()
operator|->
name|wl_display
argument_list|()
argument_list|,
name|QWaylandXCompositeEGLContext
operator|::
name|sync_function
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|mWaitingForSync
operator|=
literal|true
expr_stmt|;
name|wl_display_sync
argument_list|(
name|mEglIntegration
operator|->
name|waylandDisplay
argument_list|()
operator|->
name|wl_display
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mEglIntegration
operator|->
name|waylandDisplay
argument_list|()
operator|->
name|flushRequests
argument_list|()
expr_stmt|;
while|while
condition|(
name|mWaitingForSync
condition|)
block|{
name|mEglIntegration
operator|->
name|waylandDisplay
argument_list|()
operator|->
name|readEvents
argument_list|()
expr_stmt|;
block|}
block|}
end_function
end_unit
