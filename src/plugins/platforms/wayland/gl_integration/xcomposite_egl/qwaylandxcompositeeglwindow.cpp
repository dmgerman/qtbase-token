begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwaylandxcompositeeglwindow.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandxcompositebuffer.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qeglconvenience_p.h>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qxlibeglintegration_p.h>
end_include
begin_include
include|#
directive|include
file|"wayland-xcomposite-client-protocol.h"
end_include
begin_include
include|#
directive|include
file|<X11/extensions/Xcomposite.h>
end_include
begin_include
include|#
directive|include
file|"qwaylandxcompositeeglintegration.h"
end_include
begin_include
include|#
directive|include
file|"windowmanager_integration/qwaylandwindowmanagerintegration.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_constructor
DECL|function|QWaylandXCompositeEGLWindow
name|QWaylandXCompositeEGLWindow
operator|::
name|QWaylandXCompositeEGLWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|QWaylandXCompositeEGLIntegration
modifier|*
name|glxIntegration
parameter_list|)
member_init_list|:
name|QWaylandWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_glxIntegration
argument_list|(
name|glxIntegration
argument_list|)
member_init_list|,
name|m_context
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_buffer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_xWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_config
argument_list|(
name|q_configFromGLFormat
argument_list|(
name|glxIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|window
operator|->
name|format
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
member_init_list|,
name|m_surface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_waitingForSync
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|windowType
name|QWaylandWindow
operator|::
name|WindowType
name|QWaylandXCompositeEGLWindow
operator|::
name|windowType
parameter_list|()
specifier|const
block|{
comment|//yeah. this type needs a new name
return|return
name|QWaylandWindow
operator|::
name|Egl
return|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QWaylandXCompositeEGLWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QWaylandWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_surface
condition|)
block|{
name|eglDestroySurface
argument_list|(
name|m_glxIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|m_surface
argument_list|)
expr_stmt|;
name|m_surface
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|eglSurface
name|EGLSurface
name|QWaylandXCompositeEGLWindow
operator|::
name|eglSurface
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_surface
condition|)
cast|const_cast
argument_list|<
name|QWaylandXCompositeEGLWindow
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|createEglSurface
argument_list|()
expr_stmt|;
return|return
name|m_surface
return|;
block|}
end_function
begin_function
DECL|function|createEglSurface
name|void
name|QWaylandXCompositeEGLWindow
operator|::
name|createEglSurface
parameter_list|()
block|{
name|QSize
name|size
argument_list|(
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// QGLWidget wants a context for a window without geometry
name|size
operator|=
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
operator|delete
name|m_buffer
expr_stmt|;
comment|//XFreePixmap deletes the glxPixmap as well
if|if
condition|(
name|m_xWindow
condition|)
block|{
name|XDestroyWindow
argument_list|(
name|m_glxIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|m_xWindow
argument_list|)
expr_stmt|;
block|}
name|VisualID
name|visualId
init|=
name|QXlibEglIntegration
operator|::
name|getCompatibleVisualId
argument_list|(
name|m_glxIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|m_glxIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|m_config
argument_list|)
decl_stmt|;
name|XVisualInfo
name|visualInfoTemplate
decl_stmt|;
name|memset
argument_list|(
operator|&
name|visualInfoTemplate
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|XVisualInfo
argument_list|)
argument_list|)
expr_stmt|;
name|visualInfoTemplate
operator|.
name|visualid
operator|=
name|visualId
expr_stmt|;
name|int
name|matchingCount
init|=
literal|0
decl_stmt|;
name|XVisualInfo
modifier|*
name|visualInfo
init|=
name|XGetVisualInfo
argument_list|(
name|m_glxIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|VisualIDMask
argument_list|,
operator|&
name|visualInfoTemplate
argument_list|,
operator|&
name|matchingCount
argument_list|)
decl_stmt|;
name|Colormap
name|cmap
init|=
name|XCreateColormap
argument_list|(
name|m_glxIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|m_glxIntegration
operator|->
name|rootWindow
argument_list|()
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|AllocNone
argument_list|)
decl_stmt|;
name|XSetWindowAttributes
name|a
decl_stmt|;
name|a
operator|.
name|colormap
operator|=
name|cmap
expr_stmt|;
name|m_xWindow
operator|=
name|XCreateWindow
argument_list|(
name|m_glxIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|m_glxIntegration
operator|->
name|rootWindow
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|visualInfo
operator|->
name|depth
argument_list|,
name|InputOutput
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|CWColormap
argument_list|,
operator|&
name|a
argument_list|)
expr_stmt|;
name|XCompositeRedirectWindow
argument_list|(
name|m_glxIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|m_xWindow
argument_list|,
name|CompositeRedirectManual
argument_list|)
expr_stmt|;
name|XMapWindow
argument_list|(
name|m_glxIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|m_xWindow
argument_list|)
expr_stmt|;
name|m_surface
operator|=
name|eglCreateWindowSurface
argument_list|(
name|m_glxIntegration
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|m_config
argument_list|,
name|m_xWindow
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|qFatal
argument_list|(
literal|"Could not make eglsurface"
argument_list|)
expr_stmt|;
block|}
name|XSync
argument_list|(
name|m_glxIntegration
operator|->
name|xDisplay
argument_list|()
argument_list|,
name|False
argument_list|)
expr_stmt|;
name|mBuffer
operator|=
operator|new
name|QWaylandXCompositeBuffer
argument_list|(
name|m_glxIntegration
operator|->
name|waylandXComposite
argument_list|()
argument_list|,
operator|(
name|uint32_t
operator|)
name|m_xWindow
argument_list|,
name|size
argument_list|,
name|m_glxIntegration
operator|->
name|waylandDisplay
argument_list|()
operator|->
name|argbVisual
argument_list|()
argument_list|)
expr_stmt|;
name|attach
argument_list|(
name|m_buffer
argument_list|)
expr_stmt|;
name|wl_display_sync_callback
argument_list|(
name|m_glxIntegration
operator|->
name|waylandDisplay
argument_list|()
operator|->
name|wl_display
argument_list|()
argument_list|,
name|QWaylandXCompositeEGLWindow
operator|::
name|sync_function
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|m_waitingForSync
operator|=
literal|true
expr_stmt|;
name|wl_display_sync
argument_list|(
name|m_glxIntegration
operator|->
name|waylandDisplay
argument_list|()
operator|->
name|wl_display
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_glxIntegration
operator|->
name|waylandDisplay
argument_list|()
operator|->
name|flushRequests
argument_list|()
expr_stmt|;
while|while
condition|(
name|m_waitingForSync
condition|)
name|m_glxIntegration
operator|->
name|waylandDisplay
argument_list|()
operator|->
name|readEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sync_function
name|void
name|QWaylandXCompositeEGLWindow
operator|::
name|sync_function
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QWaylandXCompositeEGLWindow
modifier|*
name|that
init|=
cast|static_cast
argument_list|<
name|QWaylandXCompositeEGLWindow
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|that
operator|->
name|m_waitingForSync
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|requestActivateWindow
name|void
name|QWaylandXCompositeEGLWindow
operator|::
name|requestActivateWindow
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_WAYLAND_WINDOWMANAGER_SUPPORT
name|mDisplay
operator|->
name|windowManagerIntegration
argument_list|()
operator|->
name|authenticateWithToken
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QWaylandWindow
operator|::
name|requestActivateWindow
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
