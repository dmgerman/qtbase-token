begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwaylandreadbackglxcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandshmbackingstore.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandreadbackglxwindow.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLContext>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_function
DECL|function|qgl_byteSwapImage
specifier|static
specifier|inline
name|void
name|qgl_byteSwapImage
parameter_list|(
name|QImage
modifier|&
name|img
parameter_list|,
name|GLenum
name|pixel_type
parameter_list|)
block|{
specifier|const
name|int
name|width
init|=
name|img
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|img
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|pixel_type
operator|==
name|GL_UNSIGNED_INT_8_8_8_8_REV
operator|||
operator|(
name|pixel_type
operator|==
name|GL_UNSIGNED_BYTE
operator|&&
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|LittleEndian
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
operator|++
name|i
control|)
block|{
name|uint
modifier|*
name|p
init|=
operator|(
name|uint
operator|*
operator|)
name|img
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
name|p
index|[
name|x
index|]
operator|=
operator|(
operator|(
name|p
index|[
name|x
index|]
operator|<<
literal|16
operator|)
operator|&
literal|0xff0000
operator|)
operator||
operator|(
operator|(
name|p
index|[
name|x
index|]
operator|>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
operator||
operator|(
name|p
index|[
name|x
index|]
operator|&
literal|0xff00ff00
operator|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|height
condition|;
operator|++
name|i
control|)
block|{
name|uint
modifier|*
name|p
init|=
operator|(
name|uint
operator|*
operator|)
name|img
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
operator|++
name|x
control|)
name|p
index|[
name|x
index|]
operator|=
operator|(
name|p
index|[
name|x
index|]
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|p
index|[
name|x
index|]
operator|>>
literal|24
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|QWaylandReadbackGlxContext
name|QWaylandReadbackGlxContext
operator|::
name|QWaylandReadbackGlxContext
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|,
name|QPlatformOpenGLContext
modifier|*
name|share
parameter_list|,
name|Display
modifier|*
name|display
parameter_list|,
name|int
name|screen
parameter_list|)
member_init_list|:
name|m_display
argument_list|(
name|display
argument_list|)
block|{
name|GLXFBConfig
name|config
init|=
name|qglx_findConfig
argument_list|(
name|display
argument_list|,
name|screen
argument_list|,
name|format
argument_list|,
name|GLX_PIXMAP_BIT
argument_list|)
decl_stmt|;
name|GLXContext
name|shareContext
init|=
name|share
condition|?
cast|static_cast
argument_list|<
name|QWaylandReadbackGlxContext
operator|*
argument_list|>
argument_list|(
name|share
argument_list|)
operator|->
name|m_context
else|:
literal|0
decl_stmt|;
name|XVisualInfo
modifier|*
name|visualInfo
init|=
name|glXGetVisualFromFBConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|m_context
operator|=
name|glXCreateContext
argument_list|(
name|display
argument_list|,
name|visualInfo
argument_list|,
name|shareContext
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
name|m_format
operator|=
name|qglx_surfaceFormatFromGLXFBConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|m_context
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|format
name|QSurfaceFormat
name|QWaylandReadbackGlxContext
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|m_format
return|;
block|}
end_function
begin_function
DECL|function|makeCurrent
name|bool
name|QWaylandReadbackGlxContext
operator|::
name|makeCurrent
parameter_list|(
name|QPlatformSurface
modifier|*
name|surface
parameter_list|)
block|{
name|GLXPixmap
name|glxPixmap
init|=
cast|static_cast
argument_list|<
name|QWaylandReadbackGlxWindow
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
operator|->
name|glxPixmap
argument_list|()
decl_stmt|;
return|return
name|glXMakeCurrent
argument_list|(
name|m_display
argument_list|,
name|glxPixmap
argument_list|,
name|m_context
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|doneCurrent
name|void
name|QWaylandReadbackGlxContext
operator|::
name|doneCurrent
parameter_list|()
block|{
name|glXMakeCurrent
argument_list|(
name|m_display
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swapBuffers
name|void
name|QWaylandReadbackGlxContext
operator|::
name|swapBuffers
parameter_list|(
name|QPlatformSurface
modifier|*
name|surface
parameter_list|)
block|{
comment|// #### makeCurrent() directly on the platform context doesn't update QOpenGLContext::currentContext()
if|if
condition|(
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
operator|->
name|handle
argument_list|()
operator|!=
name|this
condition|)
name|makeCurrent
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|QWaylandReadbackGlxWindow
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWaylandReadbackGlxWindow
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|QSize
name|size
init|=
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|QImage
name|img
argument_list|(
name|size
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|constBits
init|=
name|img
operator|.
name|bits
argument_list|()
decl_stmt|;
name|void
modifier|*
name|pixels
init|=
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|constBits
argument_list|)
decl_stmt|;
name|glReadPixels
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|img
operator|=
name|img
operator|.
name|mirrored
argument_list|()
expr_stmt|;
name|qgl_byteSwapImage
argument_list|(
name|img
argument_list|,
name|GL_UNSIGNED_INT_8_8_8_8_REV
argument_list|)
expr_stmt|;
name|constBits
operator|=
name|img
operator|.
name|bits
argument_list|()
expr_stmt|;
specifier|const
name|uchar
modifier|*
name|constDstBits
init|=
name|w
operator|->
name|buffer
argument_list|()
decl_stmt|;
name|uchar
modifier|*
name|dstBits
init|=
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|constDstBits
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|dstBits
argument_list|,
name|constBits
argument_list|,
operator|(
name|img
operator|.
name|width
argument_list|()
operator|*
literal|4
operator|)
operator|*
name|img
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|->
name|damage
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|->
name|waitForFrameSync
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
DECL|function|getProcAddress
name|void
argument_list|(
argument|*QWaylandReadbackGlxContext::getProcAddress(const QByteArray&procName)
argument_list|)
end_macro
begin_expr_stmt
DECL|function|getProcAddress
operator|(
operator|)
block|{
return|return
name|glXGetProcAddress
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|procName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
end_unit
