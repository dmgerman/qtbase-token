begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|"qwaylandxcompositeglxcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandxcompositeglxwindow.h"
end_include
begin_include
include|#
directive|include
file|<QRegion>
end_include
begin_constructor
DECL|function|QWaylandXCompositeGLXSurface
name|QWaylandXCompositeGLXSurface
operator|::
name|QWaylandXCompositeGLXSurface
parameter_list|(
name|QWaylandXCompositeGLXWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|m_window
argument_list|(
name|window
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|xWindow
name|Window
name|QWaylandXCompositeGLXSurface
operator|::
name|xWindow
parameter_list|()
specifier|const
block|{
return|return
name|m_window
operator|->
name|xWindow
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|QWaylandXCompositeGLXContext
name|QWaylandXCompositeGLXContext
operator|::
name|QWaylandXCompositeGLXContext
parameter_list|(
specifier|const
name|QGuiGLFormat
modifier|&
name|format
parameter_list|,
name|QPlatformGLContext
modifier|*
name|share
parameter_list|,
name|Display
modifier|*
name|display
parameter_list|,
name|int
name|screen
parameter_list|)
member_init_list|:
name|m_display
argument_list|(
name|display
argument_list|)
block|{
name|qDebug
argument_list|(
literal|"creating XComposite-GLX context"
argument_list|)
expr_stmt|;
name|GLXContext
name|shareContext
init|=
name|share
condition|?
cast|static_cast
argument_list|<
name|QWaylandXCompositeGLXContext
operator|*
argument_list|>
argument_list|(
name|share
argument_list|)
operator|->
name|m_context
else|:
literal|0
decl_stmt|;
name|GLXFBConfig
name|config
init|=
name|qglx_findConfig
argument_list|(
name|display
argument_list|,
name|screen
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|XVisualInfo
modifier|*
name|visualInfo
init|=
name|glXGetVisualFromFBConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|m_context
operator|=
name|glXCreateContext
argument_list|(
name|display
argument_list|,
name|visualInfo
argument_list|,
name|shareContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|m_format
operator|=
name|qglx_guiGLFormatFromGLXFBConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|m_context
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|makeCurrent
name|bool
name|QWaylandXCompositeGLXContext
operator|::
name|makeCurrent
parameter_list|(
specifier|const
name|QPlatformGLSurface
modifier|&
name|surface
parameter_list|)
block|{
name|Window
name|xWindow
init|=
cast|static_cast
argument_list|<
specifier|const
name|QWaylandXCompositeGLXSurface
operator|&
argument_list|>
argument_list|(
name|surface
argument_list|)
operator|.
name|xWindow
argument_list|()
decl_stmt|;
return|return
name|glXMakeCurrent
argument_list|(
name|m_display
argument_list|,
name|xWindow
argument_list|,
name|m_context
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|doneCurrent
name|void
name|QWaylandXCompositeGLXContext
operator|::
name|doneCurrent
parameter_list|()
block|{
name|glXMakeCurrent
argument_list|(
name|m_display
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swapBuffers
name|void
name|QWaylandXCompositeGLXContext
operator|::
name|swapBuffers
parameter_list|(
specifier|const
name|QPlatformGLSurface
modifier|&
name|surface
parameter_list|)
block|{
specifier|const
name|QWaylandXCompositeGLXSurface
modifier|&
name|s
init|=
cast|static_cast
argument_list|<
specifier|const
name|QWaylandXCompositeGLXSurface
operator|&
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|QSize
name|size
init|=
name|s
operator|.
name|window
argument_list|()
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|glXSwapBuffers
argument_list|(
name|m_display
argument_list|,
name|s
operator|.
name|xWindow
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|window
argument_list|()
operator|->
name|damage
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|window
argument_list|()
operator|->
name|waitForFrameSync
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
DECL|function|getProcAddress
name|void
argument_list|(
argument|*QWaylandXCompositeGLXContext::getProcAddress(const QByteArray&procName)
argument_list|)
end_macro
begin_expr_stmt
DECL|function|getProcAddress
operator|(
operator|)
block|{
return|return
name|glXGetProcAddress
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|procName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|format
name|QGuiGLFormat
name|QWaylandXCompositeGLXContext
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|m_format
return|;
block|}
end_function
end_unit
