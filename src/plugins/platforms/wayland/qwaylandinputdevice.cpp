begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwaylandinputdevice.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandintegration.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandwindow.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandbuffer.h"
end_include
begin_include
include|#
directive|include
file|<QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPlatformWindow>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WAYLAND_XKB
end_ifndef
begin_include
include|#
directive|include
file|<X11/extensions/XKBcommon.h>
end_include
begin_include
include|#
directive|include
file|<X11/keysym.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QWaylandInputDevice
name|QWaylandInputDevice
operator|::
name|QWaylandInputDevice
parameter_list|(
name|struct
name|wl_display
modifier|*
name|display
parameter_list|,
name|uint32_t
name|id
parameter_list|)
member_init_list|:
name|mDisplay
argument_list|(
name|display
argument_list|)
member_init_list|,
name|mInputDevice
argument_list|(
name|wl_input_device_create
argument_list|(
name|display
argument_list|,
name|id
argument_list|)
argument_list|)
member_init_list|,
name|mPointerFocus
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mKeyboardFocus
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mButtons
argument_list|(
literal|0
argument_list|)
block|{
name|wl_input_device_add_listener
argument_list|(
name|mInputDevice
argument_list|,
operator|&
name|inputDeviceListener
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|wl_input_device_set_user_data
argument_list|(
name|mInputDevice
argument_list|,
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WAYLAND_XKB
name|struct
name|xkb_rule_names
name|names
decl_stmt|;
name|names
operator|.
name|rules
operator|=
literal|"evdev"
expr_stmt|;
name|names
operator|.
name|model
operator|=
literal|"pc105"
expr_stmt|;
name|names
operator|.
name|layout
operator|=
literal|"us"
expr_stmt|;
name|names
operator|.
name|variant
operator|=
literal|""
expr_stmt|;
name|names
operator|.
name|options
operator|=
literal|""
expr_stmt|;
name|mXkb
operator|=
name|xkb_compile_keymap_from_rules
argument_list|(
operator|&
name|names
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function
DECL|function|handleWindowDestroyed
name|void
name|QWaylandInputDevice
operator|::
name|handleWindowDestroyed
parameter_list|(
name|QWaylandWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
name|window
operator|==
name|mPointerFocus
condition|)
name|mPointerFocus
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|window
operator|==
name|mKeyboardFocus
condition|)
name|mKeyboardFocus
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputHandleMotion
name|void
name|QWaylandInputDevice
operator|::
name|inputHandleMotion
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|wl_input_device
modifier|*
name|input_device
parameter_list|,
name|uint32_t
name|time
parameter_list|,
name|int32_t
name|x
parameter_list|,
name|int32_t
name|y
parameter_list|,
name|int32_t
name|surface_x
parameter_list|,
name|int32_t
name|surface_y
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|input_device
argument_list|)
expr_stmt|;
name|QWaylandInputDevice
modifier|*
name|inputDevice
init|=
operator|(
name|QWaylandInputDevice
operator|*
operator|)
name|data
decl_stmt|;
name|QWaylandWindow
modifier|*
name|window
init|=
name|inputDevice
operator|->
name|mPointerFocus
decl_stmt|;
if|if
condition|(
name|window
operator|==
name|NULL
condition|)
block|{
comment|/* We destroyed the pointer focus surface, but the server 	 * didn't get the message yet. */
return|return;
block|}
name|inputDevice
operator|->
name|mSurfacePos
operator|=
name|QPoint
argument_list|(
name|surface_x
argument_list|,
name|surface_y
argument_list|)
expr_stmt|;
name|inputDevice
operator|->
name|mGlobalPos
operator|=
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|inputDevice
operator|->
name|mTime
operator|=
name|time
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|window
operator|->
name|widget
argument_list|()
argument_list|,
name|time
argument_list|,
name|inputDevice
operator|->
name|mSurfacePos
argument_list|,
name|inputDevice
operator|->
name|mGlobalPos
argument_list|,
name|inputDevice
operator|->
name|mButtons
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputHandleButton
name|void
name|QWaylandInputDevice
operator|::
name|inputHandleButton
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|wl_input_device
modifier|*
name|input_device
parameter_list|,
name|uint32_t
name|time
parameter_list|,
name|uint32_t
name|button
parameter_list|,
name|uint32_t
name|state
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|input_device
argument_list|)
expr_stmt|;
name|QWaylandInputDevice
modifier|*
name|inputDevice
init|=
operator|(
name|QWaylandInputDevice
operator|*
operator|)
name|data
decl_stmt|;
name|QWaylandWindow
modifier|*
name|window
init|=
name|inputDevice
operator|->
name|mPointerFocus
decl_stmt|;
name|Qt
operator|::
name|MouseButton
name|qt_button
decl_stmt|;
if|if
condition|(
name|window
operator|==
name|NULL
condition|)
block|{
comment|/* We destroyed the pointer focus surface, but the server 	 * didn't get the message yet. */
return|return;
block|}
switch|switch
condition|(
name|button
condition|)
block|{
case|case
literal|272
case|:
name|qt_button
operator|=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
break|break;
case|case
literal|273
case|:
name|qt_button
operator|=
name|Qt
operator|::
name|RightButton
expr_stmt|;
break|break;
case|case
literal|274
case|:
name|qt_button
operator|=
name|Qt
operator|::
name|MiddleButton
expr_stmt|;
break|break;
default|default:
return|return;
block|}
if|if
condition|(
name|state
condition|)
name|inputDevice
operator|->
name|mButtons
operator||=
name|qt_button
expr_stmt|;
else|else
name|inputDevice
operator|->
name|mButtons
operator|&=
operator|~
name|qt_button
expr_stmt|;
name|inputDevice
operator|->
name|mTime
operator|=
name|time
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|window
operator|->
name|widget
argument_list|()
argument_list|,
name|time
argument_list|,
name|inputDevice
operator|->
name|mSurfacePos
argument_list|,
name|inputDevice
operator|->
name|mGlobalPos
argument_list|,
name|inputDevice
operator|->
name|mButtons
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WAYLAND_XKB
end_ifndef
begin_function
DECL|function|translateModifiers
specifier|static
name|Qt
operator|::
name|KeyboardModifiers
name|translateModifiers
parameter_list|(
name|int
name|s
parameter_list|)
block|{
specifier|const
name|uchar
name|qt_alt_mask
init|=
name|XKB_COMMON_MOD1_MASK
decl_stmt|;
specifier|const
name|uchar
name|qt_meta_mask
init|=
name|XKB_COMMON_MOD4_MASK
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s
operator|&
name|XKB_COMMON_SHIFT_MASK
condition|)
name|ret
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|XKB_COMMON_CONTROL_MASK
condition|)
name|ret
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|qt_alt_mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|qt_meta_mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|translateKey
specifier|static
name|uint32_t
name|translateKey
parameter_list|(
name|uint32_t
name|sym
parameter_list|,
name|char
modifier|*
name|string
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|string
index|[
literal|0
index|]
operator|=
literal|'\0'
expr_stmt|;
switch|switch
condition|(
name|sym
condition|)
block|{
case|case
name|XK_Escape
case|:
return|return
name|Qt
operator|::
name|Key_Escape
return|;
case|case
name|XK_Tab
case|:
return|return
name|Qt
operator|::
name|Key_Tab
return|;
case|case
name|XK_ISO_Left_Tab
case|:
return|return
name|Qt
operator|::
name|Key_Backtab
return|;
case|case
name|XK_BackSpace
case|:
return|return
name|Qt
operator|::
name|Key_Backspace
return|;
case|case
name|XK_Return
case|:
return|return
name|Qt
operator|::
name|Key_Return
return|;
case|case
name|XK_Insert
case|:
return|return
name|Qt
operator|::
name|Key_Insert
return|;
case|case
name|XK_Delete
case|:
return|return
name|Qt
operator|::
name|Key_Delete
return|;
case|case
name|XK_Clear
case|:
return|return
name|Qt
operator|::
name|Key_Delete
return|;
case|case
name|XK_Pause
case|:
return|return
name|Qt
operator|::
name|Key_Pause
return|;
case|case
name|XK_Print
case|:
return|return
name|Qt
operator|::
name|Key_Print
return|;
case|case
name|XK_Home
case|:
return|return
name|Qt
operator|::
name|Key_Home
return|;
case|case
name|XK_End
case|:
return|return
name|Qt
operator|::
name|Key_End
return|;
case|case
name|XK_Left
case|:
return|return
name|Qt
operator|::
name|Key_Left
return|;
case|case
name|XK_Up
case|:
return|return
name|Qt
operator|::
name|Key_Up
return|;
case|case
name|XK_Right
case|:
return|return
name|Qt
operator|::
name|Key_Right
return|;
case|case
name|XK_Down
case|:
return|return
name|Qt
operator|::
name|Key_Down
return|;
case|case
name|XK_Prior
case|:
return|return
name|Qt
operator|::
name|Key_PageUp
return|;
case|case
name|XK_Next
case|:
return|return
name|Qt
operator|::
name|Key_PageDown
return|;
case|case
name|XK_Shift_L
case|:
return|return
name|Qt
operator|::
name|Key_Shift
return|;
case|case
name|XK_Shift_R
case|:
return|return
name|Qt
operator|::
name|Key_Shift
return|;
case|case
name|XK_Shift_Lock
case|:
return|return
name|Qt
operator|::
name|Key_Shift
return|;
case|case
name|XK_Control_L
case|:
return|return
name|Qt
operator|::
name|Key_Control
return|;
case|case
name|XK_Control_R
case|:
return|return
name|Qt
operator|::
name|Key_Control
return|;
case|case
name|XK_Meta_L
case|:
return|return
name|Qt
operator|::
name|Key_Meta
return|;
case|case
name|XK_Meta_R
case|:
return|return
name|Qt
operator|::
name|Key_Meta
return|;
case|case
name|XK_Alt_L
case|:
return|return
name|Qt
operator|::
name|Key_Alt
return|;
case|case
name|XK_Alt_R
case|:
return|return
name|Qt
operator|::
name|Key_Alt
return|;
case|case
name|XK_Caps_Lock
case|:
return|return
name|Qt
operator|::
name|Key_CapsLock
return|;
case|case
name|XK_Num_Lock
case|:
return|return
name|Qt
operator|::
name|Key_NumLock
return|;
case|case
name|XK_Scroll_Lock
case|:
return|return
name|Qt
operator|::
name|Key_ScrollLock
return|;
case|case
name|XK_Super_L
case|:
return|return
name|Qt
operator|::
name|Key_Super_L
return|;
case|case
name|XK_Super_R
case|:
return|return
name|Qt
operator|::
name|Key_Super_R
return|;
case|case
name|XK_Menu
case|:
return|return
name|Qt
operator|::
name|Key_Menu
return|;
default|default:
name|string
index|[
literal|0
index|]
operator|=
name|sym
expr_stmt|;
name|string
index|[
literal|1
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
name|toupper
argument_list|(
name|sym
argument_list|)
return|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|inputHandleKey
name|void
name|QWaylandInputDevice
operator|::
name|inputHandleKey
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|wl_input_device
modifier|*
name|input_device
parameter_list|,
name|uint32_t
name|time
parameter_list|,
name|uint32_t
name|key
parameter_list|,
name|uint32_t
name|state
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_WAYLAND_XKB
name|Q_UNUSED
argument_list|(
name|input_device
argument_list|)
expr_stmt|;
name|QWaylandInputDevice
modifier|*
name|inputDevice
init|=
operator|(
name|QWaylandInputDevice
operator|*
operator|)
name|data
decl_stmt|;
name|QWaylandWindow
modifier|*
name|window
init|=
name|inputDevice
operator|->
name|mKeyboardFocus
decl_stmt|;
name|uint32_t
name|code
decl_stmt|,
name|sym
decl_stmt|,
name|level
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
decl_stmt|;
name|QEvent
operator|::
name|Type
name|type
decl_stmt|;
name|char
name|s
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|window
operator|==
name|NULL
condition|)
block|{
comment|/* We destroyed the keyboard focus surface, but the server 	 * didn't get the message yet. */
return|return;
block|}
name|code
operator|=
name|key
operator|+
name|inputDevice
operator|->
name|mXkb
operator|->
name|min_key_code
expr_stmt|;
name|level
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|inputDevice
operator|->
name|mModifiers
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|&&
name|XkbKeyGroupWidth
argument_list|(
name|inputDevice
operator|->
name|mXkb
argument_list|,
name|code
argument_list|,
literal|0
argument_list|)
operator|>
literal|1
condition|)
name|level
operator|=
literal|1
expr_stmt|;
name|sym
operator|=
name|XkbKeySymEntry
argument_list|(
name|inputDevice
operator|->
name|mXkb
argument_list|,
name|code
argument_list|,
name|level
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modifiers
operator|=
name|translateModifiers
argument_list|(
name|inputDevice
operator|->
name|mXkb
operator|->
name|map
operator|->
name|modmap
index|[
name|code
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
condition|)
block|{
name|inputDevice
operator|->
name|mModifiers
operator||=
name|modifiers
expr_stmt|;
name|type
operator|=
name|QEvent
operator|::
name|KeyPress
expr_stmt|;
block|}
else|else
block|{
name|inputDevice
operator|->
name|mModifiers
operator|&=
operator|~
name|modifiers
expr_stmt|;
name|type
operator|=
name|QEvent
operator|::
name|KeyRelease
expr_stmt|;
block|}
name|sym
operator|=
name|translateKey
argument_list|(
name|sym
argument_list|,
name|s
argument_list|,
sizeof|sizeof
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|window
operator|->
name|widget
argument_list|()
argument_list|,
name|time
argument_list|,
name|type
argument_list|,
name|sym
argument_list|,
name|inputDevice
operator|->
name|mModifiers
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|inputHandlePointerFocus
name|void
name|QWaylandInputDevice
operator|::
name|inputHandlePointerFocus
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|wl_input_device
modifier|*
name|input_device
parameter_list|,
name|uint32_t
name|time
parameter_list|,
name|struct
name|wl_surface
modifier|*
name|surface
parameter_list|,
name|int32_t
name|x
parameter_list|,
name|int32_t
name|y
parameter_list|,
name|int32_t
name|sx
parameter_list|,
name|int32_t
name|sy
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|input_device
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|sx
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|sy
argument_list|)
expr_stmt|;
name|QWaylandInputDevice
modifier|*
name|inputDevice
init|=
operator|(
name|QWaylandInputDevice
operator|*
operator|)
name|data
decl_stmt|;
name|QWaylandWindow
modifier|*
name|window
decl_stmt|;
if|if
condition|(
name|inputDevice
operator|->
name|mPointerFocus
condition|)
block|{
name|window
operator|=
name|inputDevice
operator|->
name|mPointerFocus
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
name|window
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
name|inputDevice
operator|->
name|mPointerFocus
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
name|surface
condition|)
block|{
name|window
operator|=
operator|(
name|QWaylandWindow
operator|*
operator|)
name|wl_surface_get_user_data
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|window
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
name|inputDevice
operator|->
name|mPointerFocus
operator|=
name|window
expr_stmt|;
block|}
name|inputDevice
operator|->
name|mTime
operator|=
name|time
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inputHandleKeyboardFocus
name|void
name|QWaylandInputDevice
operator|::
name|inputHandleKeyboardFocus
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|wl_input_device
modifier|*
name|input_device
parameter_list|,
name|uint32_t
name|time
parameter_list|,
name|struct
name|wl_surface
modifier|*
name|surface
parameter_list|,
name|struct
name|wl_array
modifier|*
name|keys
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_WAYLAND_XKB
name|Q_UNUSED
argument_list|(
name|input_device
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|QWaylandInputDevice
modifier|*
name|inputDevice
init|=
operator|(
name|QWaylandInputDevice
operator|*
operator|)
name|data
decl_stmt|;
name|QWaylandWindow
modifier|*
name|window
decl_stmt|;
name|uint32_t
modifier|*
name|k
decl_stmt|,
modifier|*
name|end
decl_stmt|;
name|uint32_t
name|code
decl_stmt|;
name|end
operator|=
operator|(
name|uint32_t
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
name|keys
operator|->
name|data
operator|+
name|keys
operator|->
name|size
operator|)
expr_stmt|;
name|inputDevice
operator|->
name|mModifiers
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|k
operator|=
operator|(
name|uint32_t
operator|*
operator|)
name|keys
operator|->
name|data
init|;
name|k
operator|<
name|end
condition|;
name|k
operator|++
control|)
block|{
name|code
operator|=
operator|*
name|k
operator|+
name|inputDevice
operator|->
name|mXkb
operator|->
name|min_key_code
expr_stmt|;
name|inputDevice
operator|->
name|mModifiers
operator||=
name|translateModifiers
argument_list|(
name|inputDevice
operator|->
name|mXkb
operator|->
name|map
operator|->
name|modmap
index|[
name|code
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|surface
condition|)
block|{
name|window
operator|=
operator|(
name|QWaylandWindow
operator|*
operator|)
name|wl_surface_get_user_data
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|inputDevice
operator|->
name|mKeyboardFocus
operator|=
name|window
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|window
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inputDevice
operator|->
name|mKeyboardFocus
operator|=
name|NULL
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_decl_stmt
DECL|member|inputDeviceListener
specifier|const
name|struct
name|wl_input_device_listener
name|QWaylandInputDevice
operator|::
name|inputDeviceListener
init|=
block|{
name|QWaylandInputDevice
operator|::
name|inputHandleMotion
block|,
name|QWaylandInputDevice
operator|::
name|inputHandleButton
block|,
name|QWaylandInputDevice
operator|::
name|inputHandleKey
block|,
name|QWaylandInputDevice
operator|::
name|inputHandlePointerFocus
block|,
name|QWaylandInputDevice
operator|::
name|inputHandleKeyboardFocus
block|, }
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|attach
name|void
name|QWaylandInputDevice
operator|::
name|attach
parameter_list|(
name|QWaylandBuffer
modifier|*
name|buffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|wl_input_device_attach
argument_list|(
name|mInputDevice
argument_list|,
name|mTime
argument_list|,
name|buffer
operator|->
name|buffer
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
