begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the config.tests of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWAYLANDWINDOW_H
end_ifndef
begin_define
DECL|macro|QWAYLANDWINDOW_H
define|#
directive|define
name|QWAYLANDWINDOW_H
end_define
begin_include
include|#
directive|include
file|<QtGui/QPlatformWindow>
end_include
begin_include
include|#
directive|include
file|<QtCore/QWaitCondition>
end_include
begin_include
include|#
directive|include
file|"qwaylanddisplay.h"
end_include
begin_decl_stmt
DECL|variable|QWaylandDisplay
name|class
name|QWaylandDisplay
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWaylandBuffer
name|class
name|QWaylandBuffer
decl_stmt|;
end_decl_stmt
begin_struct_decl
struct_decl|struct
name|wl_egl_window
struct_decl|;
end_struct_decl
begin_decl_stmt
name|class
name|QWaylandWindow
range|:
name|public
name|QPlatformWindow
block|{
name|public
operator|:
expr|enum
name|WindowType
block|{
name|Shm
block|,
name|Egl
block|}
block|;
name|QWaylandWindow
argument_list|(
name|QWidget
operator|*
name|window
argument_list|)
block|;
operator|~
name|QWaylandWindow
argument_list|()
block|;
name|virtual
name|WindowType
name|windowType
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|WId
name|winId
argument_list|()
specifier|const
block|;
name|void
name|setVisible
argument_list|(
argument|bool visible
argument_list|)
block|;
name|void
name|setParent
argument_list|(
specifier|const
name|QPlatformWindow
operator|*
name|parent
argument_list|)
block|;
name|void
name|configure
argument_list|(
argument|uint32_t time
argument_list|,
argument|uint32_t edges
argument_list|,
argument|int32_t x
argument_list|,
argument|int32_t y
argument_list|,
argument|int32_t width
argument_list|,
argument|int32_t height
argument_list|)
block|;
name|void
name|attach
argument_list|(
name|QWaylandBuffer
operator|*
name|buffer
argument_list|)
block|;
name|void
name|damage
argument_list|(
specifier|const
name|QRegion
operator|&
name|region
argument_list|)
block|;
name|void
name|waitForFrameSync
argument_list|()
block|;      struct
name|wl_surface
operator|*
name|wl_surface
argument_list|()
specifier|const
block|{
return|return
name|mSurface
return|;
block|}
name|protected
operator|:
expr|struct
name|wl_surface
operator|*
name|mSurface
block|;
name|virtual
name|void
name|newSurfaceCreated
argument_list|()
block|;
name|QWaylandDisplay
operator|*
name|mDisplay
block|;
name|QWaylandBuffer
operator|*
name|mBuffer
block|;
name|WId
name|mWindowId
block|;
name|bool
name|mWaitingForFrameSync
block|;
name|QWaitCondition
name|mFrameSyncWait
block|;
name|private
operator|:
specifier|static
name|void
name|frameCallback
argument_list|(
argument|struct wl_surface *surface
argument_list|,
argument|void *data
argument_list|,
argument|uint32_t time
argument_list|)
block|;   }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWAYLANDWINDOW_H
end_comment
end_unit
