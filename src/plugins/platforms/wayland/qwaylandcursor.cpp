begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwaylandcursor.h"
end_include
begin_include
include|#
directive|include
file|"qwaylanddisplay.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandinputdevice.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandscreen.h"
end_include
begin_include
include|#
directive|include
file|"qwaylandshmbackingstore.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QImageReader>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_define
DECL|macro|DATADIR
define|#
directive|define
name|DATADIR
value|"/usr/share"
end_define
begin_struct
DECL|struct|pointer_image
specifier|static
specifier|const
struct|struct
name|pointer_image
block|{
DECL|member|filename
specifier|const
name|char
modifier|*
name|filename
decl_stmt|;
DECL|member|hotspot_x
DECL|member|hotspot_y
name|int
name|hotspot_x
decl_stmt|,
name|hotspot_y
decl_stmt|;
block|}
DECL|variable|pointer_images
name|pointer_images
index|[]
init|=
block|{
comment|/* FIXME: Half of these are wrong... */
comment|/* Qt::ArrowCursor */
block|{
name|DATADIR
literal|"/wayland/left_ptr.png"
block|,
literal|10
block|,
literal|5
block|}
block|,
comment|/* Qt::UpArrowCursor */
block|{
name|DATADIR
literal|"/wayland/top_side.png"
block|,
literal|18
block|,
literal|8
block|}
block|,
comment|/* Qt::CrossCursor */
block|{
name|DATADIR
literal|"/wayland/top_side.png"
block|,
literal|18
block|,
literal|8
block|}
block|,
comment|/* Qt::WaitCursor */
block|{
name|DATADIR
literal|"/wayland/top_side.png"
block|,
literal|18
block|,
literal|8
block|}
block|,
comment|/* Qt::IBeamCursor */
block|{
name|DATADIR
literal|"/wayland/xterm.png"
block|,
literal|15
block|,
literal|15
block|}
block|,
comment|/* Qt::SizeVerCursor */
block|{
name|DATADIR
literal|"/wayland/top_side.png"
block|,
literal|18
block|,
literal|8
block|}
block|,
comment|/* Qt::SizeHorCursor */
block|{
name|DATADIR
literal|"/wayland/bottom_left_corner.png"
block|,
literal|6
block|,
literal|30
block|}
block|,
comment|/* Qt::SizeBDiagCursor */
block|{
name|DATADIR
literal|"/wayland/bottom_right_corner.png"
block|,
literal|28
block|,
literal|28
block|}
block|,
comment|/* Qt::SizeFDiagCursor */
block|{
name|DATADIR
literal|"/wayland/bottom_side.png"
block|,
literal|16
block|,
literal|20
block|}
block|,
comment|/* Qt::SizeAllCursor */
block|{
name|DATADIR
literal|"/wayland/left_side.png"
block|,
literal|10
block|,
literal|20
block|}
block|,
comment|/* Qt::BlankCursor */
block|{
name|DATADIR
literal|"/wayland/right_side.png"
block|,
literal|30
block|,
literal|19
block|}
block|,
comment|/* Qt::SplitVCursor */
block|{
name|DATADIR
literal|"/wayland/sb_v_double_arrow.png"
block|,
literal|15
block|,
literal|15
block|}
block|,
comment|/* Qt::SplitHCursor */
block|{
name|DATADIR
literal|"/wayland/sb_h_double_arrow.png"
block|,
literal|15
block|,
literal|15
block|}
block|,
comment|/* Qt::PointingHandCursor */
block|{
name|DATADIR
literal|"/wayland/hand2.png"
block|,
literal|14
block|,
literal|8
block|}
block|,
comment|/* Qt::ForbiddenCursor */
block|{
name|DATADIR
literal|"/wayland/top_right_corner.png"
block|,
literal|26
block|,
literal|8
block|}
block|,
comment|/* Qt::WhatsThisCursor */
block|{
name|DATADIR
literal|"/wayland/top_right_corner.png"
block|,
literal|26
block|,
literal|8
block|}
block|,
comment|/* Qt::BusyCursor */
block|{
name|DATADIR
literal|"/wayland/top_right_corner.png"
block|,
literal|26
block|,
literal|8
block|}
block|,
comment|/* Qt::OpenHandCursor */
block|{
name|DATADIR
literal|"/wayland/hand1.png"
block|,
literal|18
block|,
literal|11
block|}
block|,
comment|/* Qt::ClosedHandCursor */
block|{
name|DATADIR
literal|"/wayland/grabbing.png"
block|,
literal|20
block|,
literal|17
block|}
block|,
comment|/* Qt::DragCopyCursor */
block|{
name|DATADIR
literal|"/wayland/dnd-copy.png"
block|,
literal|13
block|,
literal|13
block|}
block|,
comment|/* Qt::DragMoveCursor */
block|{
name|DATADIR
literal|"/wayland/dnd-move.png"
block|,
literal|13
block|,
literal|13
block|}
block|,
comment|/* Qt::DragLinkCursor */
block|{
name|DATADIR
literal|"/wayland/dnd-link.png"
block|,
literal|13
block|,
literal|13
block|}
block|, }
struct|;
end_struct
begin_constructor
DECL|function|QWaylandCursor
name|QWaylandCursor
operator|::
name|QWaylandCursor
parameter_list|(
name|QWaylandScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|QPlatformCursor
argument_list|(
name|screen
argument_list|)
member_init_list|,
name|mBuffer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mDisplay
argument_list|(
name|screen
operator|->
name|display
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|changeCursor
name|void
name|QWaylandCursor
operator|::
name|changeCursor
parameter_list|(
name|QCursor
modifier|*
name|cursor
parameter_list|,
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
specifier|const
name|struct
name|pointer_image
modifier|*
name|p
decl_stmt|;
if|if
condition|(
name|window
operator|==
name|NULL
condition|)
return|return;
name|p
operator|=
name|NULL
expr_stmt|;
name|bool
name|isBitmap
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|cursor
operator|->
name|shape
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|ArrowCursor
case|:
name|p
operator|=
operator|&
name|pointer_images
index|[
name|cursor
operator|->
name|shape
argument_list|()
index|]
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UpArrowCursor
case|:
case|case
name|Qt
operator|::
name|CrossCursor
case|:
case|case
name|Qt
operator|::
name|WaitCursor
case|:
break|break;
case|case
name|Qt
operator|::
name|IBeamCursor
case|:
name|p
operator|=
operator|&
name|pointer_images
index|[
name|cursor
operator|->
name|shape
argument_list|()
index|]
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeVerCursor
case|:
comment|/* 5 */
case|case
name|Qt
operator|::
name|SizeHorCursor
case|:
case|case
name|Qt
operator|::
name|SizeBDiagCursor
case|:
case|case
name|Qt
operator|::
name|SizeFDiagCursor
case|:
case|case
name|Qt
operator|::
name|SizeAllCursor
case|:
case|case
name|Qt
operator|::
name|BlankCursor
case|:
comment|/* 10 */
break|break;
case|case
name|Qt
operator|::
name|SplitVCursor
case|:
case|case
name|Qt
operator|::
name|SplitHCursor
case|:
case|case
name|Qt
operator|::
name|PointingHandCursor
case|:
name|p
operator|=
operator|&
name|pointer_images
index|[
name|cursor
operator|->
name|shape
argument_list|()
index|]
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ForbiddenCursor
case|:
case|case
name|Qt
operator|::
name|WhatsThisCursor
case|:
comment|/* 15 */
case|case
name|Qt
operator|::
name|BusyCursor
case|:
break|break;
case|case
name|Qt
operator|::
name|OpenHandCursor
case|:
case|case
name|Qt
operator|::
name|ClosedHandCursor
case|:
case|case
name|Qt
operator|::
name|DragCopyCursor
case|:
case|case
name|Qt
operator|::
name|DragMoveCursor
case|:
comment|/* 20 */
case|case
name|Qt
operator|::
name|DragLinkCursor
case|:
name|p
operator|=
operator|&
name|pointer_images
index|[
name|cursor
operator|->
name|shape
argument_list|()
index|]
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BitmapCursor
case|:
name|isBitmap
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|p
operator|&&
operator|!
name|isBitmap
condition|)
block|{
name|p
operator|=
operator|&
name|pointer_images
index|[
literal|0
index|]
expr_stmt|;
name|qWarning
argument_list|(
literal|"unhandled cursor %d"
argument_list|,
name|cursor
operator|->
name|shape
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isBitmap
operator|&&
operator|!
name|cursor
operator|->
name|pixmap
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|setupPixmapCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isBitmap
operator|&&
name|cursor
operator|->
name|bitmap
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"unsupported QBitmap cursor"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QImageReader
name|reader
argument_list|(
name|p
operator|->
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reader
operator|.
name|canRead
argument_list|()
condition|)
return|return;
if|if
condition|(
name|mBuffer
operator|==
name|NULL
operator|||
name|mBuffer
operator|->
name|size
argument_list|()
operator|!=
name|reader
operator|.
name|size
argument_list|()
condition|)
block|{
operator|delete
name|mBuffer
expr_stmt|;
name|mBuffer
operator|=
operator|new
name|QWaylandShmBuffer
argument_list|(
name|mDisplay
argument_list|,
name|reader
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|read
argument_list|(
name|mBuffer
operator|->
name|image
argument_list|()
argument_list|)
expr_stmt|;
name|mDisplay
operator|->
name|setCursor
argument_list|(
name|mBuffer
argument_list|,
name|p
operator|->
name|hotspot_x
argument_list|,
name|p
operator|->
name|hotspot_y
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setupPixmapCursor
name|void
name|QWaylandCursor
operator|::
name|setupPixmapCursor
parameter_list|(
name|QCursor
modifier|*
name|cursor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cursor
condition|)
block|{
operator|delete
name|mBuffer
expr_stmt|;
name|mBuffer
operator|=
literal|0
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|mBuffer
operator|||
name|mBuffer
operator|->
name|size
argument_list|()
operator|!=
name|cursor
operator|->
name|pixmap
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
operator|delete
name|mBuffer
expr_stmt|;
name|mBuffer
operator|=
operator|new
name|QWaylandShmBuffer
argument_list|(
name|mDisplay
argument_list|,
name|cursor
operator|->
name|pixmap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
block|}
name|QImage
name|src
init|=
name|cursor
operator|->
name|pixmap
argument_list|()
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|src
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
name|qMemCopy
argument_list|(
name|mBuffer
operator|->
name|image
argument_list|()
operator|->
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|,
name|src
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|,
name|src
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
name|mDisplay
operator|->
name|setCursor
argument_list|(
name|mBuffer
argument_list|,
name|cursor
operator|->
name|hotSpot
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|cursor
operator|->
name|hotSpot
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCursor
name|void
name|QWaylandDisplay
operator|::
name|setCursor
parameter_list|(
name|QWaylandBuffer
modifier|*
name|buffer
parameter_list|,
name|int32_t
name|x
parameter_list|,
name|int32_t
name|y
parameter_list|)
block|{
comment|/* Qt doesn't tell us which input device we should set the cursor      * for, so set it for all devices. */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mInputDevices
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QWaylandInputDevice
modifier|*
name|inputDevice
init|=
name|mInputDevices
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|inputDevice
operator|->
name|attach
argument_list|(
name|buffer
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|pointerEvent
name|void
name|QWaylandCursor
operator|::
name|pointerEvent
parameter_list|(
specifier|const
name|QMouseEvent
modifier|&
name|event
parameter_list|)
block|{
name|mLastPos
operator|=
name|event
operator|.
name|globalPos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pos
name|QPoint
name|QWaylandCursor
operator|::
name|pos
parameter_list|()
specifier|const
block|{
return|return
name|mLastPos
return|;
block|}
end_function
begin_function
DECL|function|setPos
name|void
name|QWaylandCursor
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QWaylandCursor::setPos: not implemented"
expr_stmt|;
block|}
end_function
end_unit
