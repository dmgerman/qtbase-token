begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWINRTFILEDIALOGHELPER_H
end_ifndef
begin_define
DECL|macro|QWINRTFILEDIALOGHELPER_H
define|#
directive|define
name|QWINRTFILEDIALOGHELPER_H
end_define
begin_include
include|#
directive|include
file|<qpa/qplatformdialoghelper.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_struct_decl
struct_decl|struct
name|IInspectable
struct_decl|;
end_struct_decl
begin_decl_stmt
name|namespace
name|ABI
block|{
name|namespace
name|Windows
block|{
name|namespace
name|Storage
block|{
name|class
name|StorageFile
decl_stmt|;
name|class
name|StorageFolder
decl_stmt|;
struct_decl|struct
name|IStorageFile
struct_decl|;
block|}
name|namespace
name|Foundation
block|{
name|enum
name|class
name|AsyncStatus
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IAsyncOperation
expr_stmt|;
name|namespace
name|Collections
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|IVectorView
expr_stmt|;
block|}
block|}
block|}
block|}
end_decl_stmt
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QWinRTFileDialogHelperPrivate
name|class
name|QWinRTFileDialogHelperPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QWinRTFileDialogHelper
range|:
name|public
name|QPlatformFileDialogHelper
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QWinRTFileDialogHelper
argument_list|()
block|;
operator|~
name|QWinRTFileDialogHelper
argument_list|()
block|;
name|void
name|exec
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|bool
name|show
argument_list|(
argument|Qt::WindowFlags
argument_list|,
argument|Qt::WindowModality
argument_list|,
argument|QWindow *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|hide
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|bool
name|defaultNameFilterDisables
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|false
return|;
block|}
name|void
name|setDirectory
argument_list|(
argument|const QUrl&directory
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QUrl
name|directory
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|selectFile
argument_list|(
specifier|const
name|QUrl
operator|&
name|saveFileName
argument_list|)
block|;
name|QList
operator|<
name|QUrl
operator|>
name|selectedFiles
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setFilter
argument_list|()
name|Q_DECL_OVERRIDE
block|{ }
name|void
name|selectNameFilter
argument_list|(
argument|const QString&selectedNameFilter
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QString
name|selectedNameFilter
argument_list|()
specifier|const
block|;
name|private
operator|:
name|HRESULT
name|onSingleFilePicked
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|IAsyncOperation
operator|<
name|ABI
operator|::
name|Windows
operator|::
name|Storage
operator|::
name|StorageFile
operator|*
operator|>
operator|*
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|AsyncStatus
argument_list|)
block|;
name|HRESULT
name|onMultipleFilesPicked
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|IAsyncOperation
operator|<
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
operator|::
name|IVectorView
operator|<
name|ABI
operator|::
name|Windows
operator|::
name|Storage
operator|::
name|StorageFile
operator|*
operator|>
operator|*
operator|>
operator|*
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|AsyncStatus
argument_list|)
block|;
name|HRESULT
name|onSingleFolderPicked
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|IAsyncOperation
operator|<
name|ABI
operator|::
name|Windows
operator|::
name|Storage
operator|::
name|StorageFolder
operator|*
operator|>
operator|*
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|AsyncStatus
argument_list|)
block|;
name|void
name|appendFile
argument_list|(
name|IInspectable
operator|*
argument_list|)
block|;
name|QScopedPointer
operator|<
name|QWinRTFileDialogHelperPrivate
operator|>
name|d_ptr
block|;
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QWinRTFileDialogHelper
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWINRTFILEDIALOGHELPER_H
end_comment
end_unit
