begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwinrtplatformmessagedialoghelper.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_include
include|#
directive|include
file|<asyncinfo.h>
end_include
begin_include
include|#
directive|include
file|<windows.ui.popups.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.collections.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Popups
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|QWinRTPlatformMessageDialogInfo
struct|struct
name|QWinRTPlatformMessageDialogInfo
block|{
DECL|member|info
name|ComPtr
argument_list|<
name|IAsyncInfo
argument_list|>
name|info
decl_stmt|;
block|}
struct|;
end_struct
begin_constructor
DECL|function|QWinRTPlatformMessageDialogHelper
name|QWinRTPlatformMessageDialogHelper
operator|::
name|QWinRTPlatformMessageDialogHelper
parameter_list|()
member_init_list|:
name|QPlatformMessageDialogHelper
argument_list|()
member_init_list|,
name|m_info
argument_list|(
operator|new
name|QWinRTPlatformMessageDialogInfo
argument_list|)
member_init_list|,
name|m_shown
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWinRTPlatformMessageDialogHelper
name|QWinRTPlatformMessageDialogHelper
operator|::
name|~
name|QWinRTPlatformMessageDialogHelper
parameter_list|()
block|{
if|if
condition|(
name|m_shown
condition|)
name|hide
argument_list|()
expr_stmt|;
operator|delete
name|m_info
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|exec
name|void
name|QWinRTPlatformMessageDialogHelper
operator|::
name|exec
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_shown
condition|)
name|show
argument_list|(
name|Qt
operator|::
name|Dialog
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_loop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|show
name|bool
name|QWinRTPlatformMessageDialogHelper
operator|::
name|show
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|windowFlags
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|windowModality
parameter_list|,
name|QWindow
modifier|*
name|parent
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|windowFlags
argument_list|)
name|Q_UNUSED
argument_list|(
argument|windowModality
argument_list|)
name|Q_UNUSED
argument_list|(
argument|parent
argument_list|)
name|QSharedPointer
argument_list|<
name|QMessageDialogOptions
argument_list|>
name|options
init|=
name|this
operator|->
name|options
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|informativeText
init|=
name|options
operator|->
name|informativeText
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|title
init|=
name|options
operator|->
name|windowTitle
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|text
init|=
name|informativeText
operator|.
name|isEmpty
argument_list|()
condition|?
name|options
operator|->
name|text
argument_list|()
else|:
operator|(
name|options
operator|->
name|text
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
operator|+
name|informativeText
operator|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IMessageDialogFactory
argument_list|>
name|dialogFactory
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_UI_Popups_MessageDialog
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|dialogFactory
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|ComPtr
argument_list|<
name|IUICommandFactory
argument_list|>
name|commandFactory
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_UI_Popups_UICommand
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|commandFactory
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|HString
name|nativeText
decl_stmt|;
name|nativeText
operator|.
name|Set
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|text
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|text
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IMessageDialog
argument_list|>
name|dialog
decl_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HString
name|nativeTitle
decl_stmt|;
name|nativeTitle
operator|.
name|Set
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|title
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|dialogFactory
operator|->
name|CreateWithTitle
argument_list|(
name|nativeText
operator|.
name|Get
argument_list|()
argument_list|,
name|nativeTitle
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|FAILED
argument_list|(
name|dialogFactory
operator|->
name|Create
argument_list|(
name|nativeText
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
comment|// Add Buttons
name|ComPtr
argument_list|<
name|IVector
argument_list|<
name|IUICommand
modifier|*
argument_list|>
argument_list|>
name|dialogCommands
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|dialog
operator|->
name|get_Commands
argument_list|(
operator|&
name|dialogCommands
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// If no button is specified we need to create one to get close notification
name|int
name|buttons
init|=
name|options
operator|->
name|standardButtons
argument_list|()
decl_stmt|;
if|if
condition|(
name|buttons
operator|==
literal|0
condition|)
name|buttons
operator|=
name|QPlatformDialogHelper
operator|::
name|Ok
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|QPlatformDialogHelper
operator|::
name|FirstButton
init|;
name|i
operator|<
name|QPlatformDialogHelper
operator|::
name|LastButton
condition|;
name|i
operator|<<=
literal|1
control|)
block|{
if|if
condition|(
name|buttons
operator|&
name|i
condition|)
block|{
comment|// Add native command
specifier|const
name|QString
name|label
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
operator|->
name|standardButtonText
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HString
name|hLabel
decl_stmt|;
name|hLabel
operator|.
name|Set
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|label
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|label
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Popups
operator|::
name|IUICommand
modifier|*
name|command
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|commandFactory
operator|->
name|CreateWithHandler
argument_list|(
name|hLabel
operator|.
name|Get
argument_list|()
argument_list|,
name|Callback
argument_list|<
name|IUICommandInvokedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTPlatformMessageDialogHelper
operator|::
name|onInvoked
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|command
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|dialogCommands
operator|->
name|Append
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|IUICommand
modifier|*
argument_list|>
argument_list|>
name|op
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|dialog
operator|->
name|ShowAsync
argument_list|(
operator|&
name|op
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|m_shown
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|op
operator|.
name|As
argument_list|(
operator|&
name|m_info
operator|->
name|info
argument_list|)
argument_list|)
condition|)
block|{
name|m_shown
operator|=
literal|false
expr_stmt|;
comment|// The dialog is shown already, so we cannot return false
name|qWarning
argument_list|(
literal|"Failed to acquire AsyncInfo for MessageDialog"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QWinRTPlatformMessageDialogHelper
operator|::
name|hide
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_shown
condition|)
return|return;
name|m_info
operator|->
name|info
operator|->
name|Cancel
argument_list|()
expr_stmt|;
name|m_shown
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onInvoked
name|HRESULT
name|QWinRTPlatformMessageDialogHelper
operator|::
name|onInvoked
parameter_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Popups
operator|::
name|IUICommand
modifier|*
name|command
parameter_list|)
block|{
name|HSTRING
name|hLabel
decl_stmt|;
name|UINT32
name|labelLength
decl_stmt|;
name|command
operator|->
name|get_Label
argument_list|(
operator|&
name|hLabel
argument_list|)
expr_stmt|;
name|QString
name|label
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
operator|::
name|WindowsGetStringRawBuffer
argument_list|(
name|hLabel
argument_list|,
operator|&
name|labelLength
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|buttonId
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|QPlatformDialogHelper
operator|::
name|FirstButton
init|;
name|i
operator|<
name|QPlatformDialogHelper
operator|::
name|LastButton
condition|;
name|i
operator|<<=
literal|1
control|)
block|{
if|if
condition|(
name|options
argument_list|()
operator|->
name|standardButtons
argument_list|()
operator|&
name|i
condition|)
block|{
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
operator|->
name|standardButtonText
argument_list|(
name|i
argument_list|)
operator|==
name|label
condition|)
block|{
name|buttonId
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|m_loop
operator|.
name|isRunning
argument_list|()
condition|)
name|m_loop
operator|.
name|exit
argument_list|()
expr_stmt|;
name|m_shown
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|buttonId
operator|<
literal|0
condition|)
block|{
emit|emit
name|reject
argument_list|()
emit|;
return|return
name|S_OK
return|;
block|}
name|QPlatformDialogHelper
operator|::
name|StandardButton
name|standardButton
init|=
cast|static_cast
argument_list|<
name|QPlatformDialogHelper
operator|::
name|StandardButton
argument_list|>
argument_list|(
name|buttonId
argument_list|)
decl_stmt|;
name|QPlatformDialogHelper
operator|::
name|ButtonRole
name|role
init|=
name|QPlatformDialogHelper
operator|::
name|buttonRole
argument_list|(
name|standardButton
argument_list|)
decl_stmt|;
emit|emit
name|clicked
argument_list|(
name|standardButton
argument_list|,
name|role
argument_list|)
emit|;
return|return
name|S_OK
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
