begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL3$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPLv3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or later as published by the Free ** Software Foundation and appearing in the file LICENSE.GPL included in ** the packaging of this file. Please review the following information to ** ensure the GNU General Public License version 2.0 requirements will be ** met: http://www.gnu.org/licenses/gpl-2.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwinrtdrag.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMimeData>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<qfunctions_winrt.h>
end_include
begin_include
include|#
directive|include
file|<private/qeventdispatcher_winrt_p.h>
end_include
begin_include
include|#
directive|include
file|<Windows.ApplicationModel.datatransfer.h>
end_include
begin_include
include|#
directive|include
file|<windows.ui.xaml.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.collections.h>
end_include
begin_include
include|#
directive|include
file|<windows.storage.streams.h>
end_include
begin_include
include|#
directive|include
file|<functional>
end_include
begin_include
include|#
directive|include
file|<robuffer.h>
end_include
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|ApplicationModel
operator|::
name|DataTransfer
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|ApplicationModel
operator|::
name|DataTransfer
operator|::
name|DragDrop
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Storage
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Storage
operator|::
name|Streams
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_LOGGING_CATEGORY
argument_list|(
name|lcQpaMime
argument_list|,
literal|"qt.qpa.mime"
argument_list|)
DECL|class|DragThreadTransferData
name|class
name|DragThreadTransferData
range|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
specifier|public
name|slots
operator|:
name|void
name|handleDrag
argument_list|()
block|;
specifier|public
operator|:
specifier|explicit
name|DragThreadTransferData
argument_list|(
name|QObject
operator|*
name|parent
operator|=
name|Q_NULLPTR
argument_list|)
block|;
DECL|member|window
name|QWindow
operator|*
name|window
block|;
DECL|member|mime
name|QWinRTInternalMimeData
operator|*
name|mime
block|;
DECL|member|point
name|QPoint
name|point
block|;
DECL|member|actions
name|Qt
operator|::
name|DropActions
name|actions
block|;
DECL|member|dropAction
name|bool
name|dropAction
block|;
DECL|member|nativeArgs
name|ComPtr
argument_list|<
name|IDragEventArgs
argument_list|>
name|nativeArgs
block|;
DECL|member|deferral
name|ComPtr
argument_list|<
name|IDragOperationDeferral
argument_list|>
name|deferral
block|; }
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|hStringToQString
specifier|inline
name|QString
name|hStringToQString
parameter_list|(
specifier|const
name|HString
modifier|&
name|hString
parameter_list|)
block|{
name|quint32
name|l
decl_stmt|;
specifier|const
name|wchar_t
modifier|*
name|raw
init|=
name|hString
operator|.
name|GetRawBuffer
argument_list|(
operator|&
name|l
argument_list|)
decl_stmt|;
return|return
operator|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|raw
argument_list|,
name|l
argument_list|)
operator|)
return|;
block|}
end_function
begin_namespace
DECL|namespace|NativeFormatStrings
namespace|namespace
name|NativeFormatStrings
block|{
DECL|member|dataStatics
specifier|static
name|ComPtr
argument_list|<
name|IStandardDataFormatsStatics
argument_list|>
name|dataStatics
decl_stmt|;
DECL|member|text
specifier|static
name|HSTRING
name|text
decl_stmt|;
comment|// text/plain
DECL|member|html
specifier|static
name|HSTRING
name|html
decl_stmt|;
comment|// text/html
DECL|member|storage
specifier|static
name|HSTRING
name|storage
decl_stmt|;
comment|// text/uri-list
block|}
end_namespace
begin_function
DECL|function|translateFromQDragDropActions
specifier|static
specifier|inline
name|DataPackageOperation
name|translateFromQDragDropActions
parameter_list|(
specifier|const
name|Qt
operator|::
name|DropAction
name|action
parameter_list|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|Qt
operator|::
name|CopyAction
case|:
return|return
name|DataPackageOperation_Copy
return|;
case|case
name|Qt
operator|::
name|MoveAction
case|:
return|return
name|DataPackageOperation_Move
return|;
case|case
name|Qt
operator|::
name|LinkAction
case|:
return|return
name|DataPackageOperation_Link
return|;
case|case
name|Qt
operator|::
name|IgnoreAction
case|:
default|default:
return|return
name|DataPackageOperation_None
return|;
block|}
block|}
end_function
begin_function
DECL|function|translateToQDragDropActions
specifier|static
specifier|inline
name|Qt
operator|::
name|DropActions
name|translateToQDragDropActions
parameter_list|(
specifier|const
name|DataPackageOperation
name|op
parameter_list|)
block|{
name|Qt
operator|::
name|DropActions
name|actions
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
comment|// None needs to be interpreted as the sender being able to handle
comment|// anything and let the receiver decide
if|if
condition|(
name|op
operator|==
name|DataPackageOperation_None
condition|)
name|actions
operator|=
name|Qt
operator|::
name|LinkAction
operator||
name|Qt
operator|::
name|CopyAction
operator||
name|Qt
operator|::
name|MoveAction
expr_stmt|;
if|if
condition|(
name|op
operator|&
name|DataPackageOperation_Link
condition|)
name|actions
operator||=
name|Qt
operator|::
name|LinkAction
expr_stmt|;
if|if
condition|(
name|op
operator|&
name|DataPackageOperation_Copy
condition|)
name|actions
operator||=
name|Qt
operator|::
name|CopyAction
expr_stmt|;
if|if
condition|(
name|op
operator|&
name|DataPackageOperation_Move
condition|)
name|actions
operator||=
name|Qt
operator|::
name|MoveAction
expr_stmt|;
return|return
name|actions
return|;
block|}
end_function
begin_constructor
DECL|function|QWinRTInternalMimeData
name|QWinRTInternalMimeData
operator|::
name|QWinRTInternalMimeData
parameter_list|()
member_init_list|:
name|QInternalMimeData
argument_list|()
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
expr_stmt|;
if|if
condition|(
operator|!
name|NativeFormatStrings
operator|::
name|dataStatics
condition|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|RoGetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_ApplicationModel_DataTransfer_StandardDataFormats
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|NativeFormatStrings
operator|::
name|dataStatics
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|NativeFormatStrings
operator|::
name|dataStatics
operator|->
name|get_Text
argument_list|(
operator|&
name|NativeFormatStrings
operator|::
name|text
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|NativeFormatStrings
operator|::
name|dataStatics
operator|->
name|get_Html
argument_list|(
operator|&
name|NativeFormatStrings
operator|::
name|html
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|NativeFormatStrings
operator|::
name|dataStatics
operator|->
name|get_StorageItems
argument_list|(
operator|&
name|NativeFormatStrings
operator|::
name|storage
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QWinRTInternalMimeData
name|QWinRTInternalMimeData
operator|::
name|~
name|QWinRTInternalMimeData
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|hasFormat_sys
name|bool
name|QWinRTInternalMimeData
operator|::
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|)
specifier|const
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|mimetype
expr_stmt|;
if|if
condition|(
operator|!
name|dataView
condition|)
return|return
literal|false
return|;
return|return
name|formats_sys
argument_list|()
operator|.
name|contains
argument_list|(
name|mimetype
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|formats_sys
name|QStringList
name|QWinRTInternalMimeData
operator|::
name|formats_sys
parameter_list|()
specifier|const
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
expr_stmt|;
if|if
condition|(
operator|!
name|dataView
condition|)
return|return
name|QStringList
argument_list|()
return|;
if|if
condition|(
operator|!
name|formats
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|formats
return|;
name|boolean
name|contains
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|dataView
operator|->
name|Contains
argument_list|(
name|NativeFormatStrings
operator|::
name|text
argument_list|,
operator|&
name|contains
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|contains
condition|)
name|formats
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|dataView
operator|->
name|Contains
argument_list|(
name|NativeFormatStrings
operator|::
name|html
argument_list|,
operator|&
name|contains
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|contains
condition|)
name|formats
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/html"
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|dataView
operator|->
name|Contains
argument_list|(
name|NativeFormatStrings
operator|::
name|storage
argument_list|,
operator|&
name|contains
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|contains
condition|)
name|formats
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We need to add any additional format as well, for legacy windows
comment|// reasons, but also in case someone adds custom formats.
name|ComPtr
argument_list|<
name|IVectorView
argument_list|<
name|HSTRING
argument_list|>
argument_list|>
name|availableFormats
decl_stmt|;
name|hr
operator|=
name|dataView
operator|->
name|get_AvailableFormats
argument_list|(
operator|&
name|availableFormats
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Could not query available formats."
argument_list|,
argument|return formats
argument_list|)
empty_stmt|;
name|quint32
name|size
decl_stmt|;
name|hr
operator|=
name|availableFormats
operator|->
name|get_Size
argument_list|(
operator|&
name|size
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Could not query format vector size."
argument_list|,
argument|return formats
argument_list|)
empty_stmt|;
for|for
control|(
name|quint32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|HString
name|str
decl_stmt|;
name|hr
operator|=
name|availableFormats
operator|->
name|GetAt
argument_list|(
name|i
argument_list|,
name|str
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
continue|continue;
name|formats
operator|.
name|append
argument_list|(
name|hStringToQString
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
name|__FUNCTION__
operator|<<
literal|"Available formats:"
operator|<<
name|formats
expr_stmt|;
return|return
name|formats
return|;
block|}
end_function
begin_function
DECL|function|retrieveData_sys
name|QVariant
name|QWinRTInternalMimeData
operator|::
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|,
name|QVariant
operator|::
name|Type
name|preferredType
parameter_list|)
specifier|const
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|mimetype
operator|<<
name|preferredType
expr_stmt|;
if|if
condition|(
operator|!
name|dataView
operator|||
operator|!
name|formats
operator|.
name|contains
argument_list|(
name|mimetype
argument_list|)
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QVariant
name|result
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
if|if
condition|(
name|mimetype
operator|==
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
name|hr
operator|=
name|QEventDispatcherWinRT
operator|::
name|runOnXamlThread
argument_list|(
capture|[
name|this
capture|,
modifier|&
name|result
capture|]
parameter_list|()
block|{
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|HSTRING
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|HString
name|res
decl_stmt|;
name|hr
operator|=
name|dataView
operator|->
name|GetTextAsync
argument_list|(
operator|&
name|op
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|res
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|hStringToQString
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mimetype
operator|==
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
condition|)
block|{
name|hr
operator|=
name|QEventDispatcherWinRT
operator|::
name|runOnXamlThread
argument_list|(
capture|[
name|this
capture|,
modifier|&
name|result
capture|]
parameter_list|()
block|{
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|IVectorView
argument_list|<
name|IStorageItem
operator|*
argument_list|>
operator|*
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|dataView
operator|->
name|GetStorageItemsAsync
argument_list|(
operator|&
name|op
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IVectorView
argument_list|<
name|IStorageItem
operator|*
argument_list|>
argument_list|>
name|nativeItems
decl_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|nativeItems
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|items
decl_stmt|;
name|quint32
name|count
decl_stmt|;
name|hr
operator|=
name|nativeItems
operator|->
name|get_Size
argument_list|(
operator|&
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|quint32
name|i
type|= 0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|ComPtr
argument_list|<
name|IStorageItem
argument_list|>
name|item
decl_stmt|;
name|hr
operator|=
name|nativeItems
operator|->
name|GetAt
argument_list|(
name|i
argument_list|,
operator|&
name|item
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|HString
name|path
decl_stmt|;
name|hr
operator|=
name|item
operator|->
name|get_Path
argument_list|(
name|path
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|items
operator|.
name|append
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|hStringToQString
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|setValue
argument_list|(
name|items
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mimetype
operator|==
name|QLatin1String
argument_list|(
literal|"text/html"
argument_list|)
condition|)
block|{
name|hr
operator|=
name|QEventDispatcherWinRT
operator|::
name|runOnXamlThread
argument_list|(
capture|[
name|this
capture|,
modifier|&
name|result
capture|]
parameter_list|()
block|{
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|HSTRING
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|HString
name|res
decl_stmt|;
name|hr
operator|=
name|dataView
operator|->
name|GetHtmlFormatAsync
argument_list|(
operator|&
name|op
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|res
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|hStringToQString
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mimetype
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"image/"
argument_list|)
argument_list|)
condition|)
block|{
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Asking for custom data
name|hr
operator|=
name|QEventDispatcherWinRT
operator|::
name|runOnXamlThread
argument_list|(
capture|[
name|this
capture|,
modifier|&
name|result
capture|,
name|mimetype
capture|]
parameter_list|()
block|{
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|IInspectable
operator|*
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|ComPtr
argument_list|<
name|IInspectable
argument_list|>
name|res
decl_stmt|;
name|HString
name|type
decl_stmt|;
name|type
operator|.
name|Set
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|mimetype
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|mimetype
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hr
operator|=
name|dataView
operator|->
name|GetDataAsync
argument_list|(
name|type
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_OK_IF_FAILED
argument_list|(
literal|"Could not query custom drag data."
argument_list|)
expr_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|res
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
operator|||
operator|!
name|res
condition|)
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
literal|"Custom drop data operation returned no results or failed."
expr_stmt|;
return|return
name|S_OK
return|;
block|}
comment|// Test for properties
name|ComPtr
argument_list|<
name|IPropertyValue
argument_list|>
name|propertyValue
decl_stmt|;
name|hr
operator|=
name|res
operator|.
name|As
argument_list|(
operator|&
name|propertyValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
comment|// We need to check which type of custom data we are receiving
name|PropertyType
name|type
decl_stmt|;
name|propertyValue
operator|->
name|get_Type
argument_list|(
operator|&
name|type
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PropertyType_UInt8
case|:
block|{
name|quint8
name|v
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetUInt8
argument_list|(
operator|&
name|v
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
case|case
name|PropertyType_Int16
case|:
block|{
name|qint16
name|v
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetInt16
argument_list|(
operator|&
name|v
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
case|case
name|PropertyType_UInt16
case|:
block|{
name|quint16
name|v
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetUInt16
argument_list|(
operator|&
name|v
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
case|case
name|PropertyType_Int32
case|:
block|{
name|qint32
name|v
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetInt32
argument_list|(
operator|&
name|v
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
case|case
name|PropertyType_UInt32
case|:
block|{
name|quint32
name|v
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetUInt32
argument_list|(
operator|&
name|v
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
case|case
name|PropertyType_Int64
case|:
block|{
name|qint64
name|v
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetInt64
argument_list|(
operator|&
name|v
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
case|case
name|PropertyType_UInt64
case|:
block|{
name|quint64
name|v
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetUInt64
argument_list|(
operator|&
name|v
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
case|case
name|PropertyType_Single
case|:
block|{
name|float
name|v
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetSingle
argument_list|(
operator|&
name|v
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
case|case
name|PropertyType_Double
case|:
block|{
name|double
name|v
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetDouble
argument_list|(
operator|&
name|v
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
case|case
name|PropertyType_Char16
case|:
block|{
name|wchar_t
name|v
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetChar16
argument_list|(
operator|&
name|v
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
operator|&
name|v
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
case|case
name|PropertyType_Boolean
case|:
block|{
name|boolean
name|v
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetBoolean
argument_list|(
operator|&
name|v
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
case|case
name|PropertyType_String
case|:
block|{
name|HString
name|stringProperty
decl_stmt|;
name|hr
operator|=
name|propertyValue
operator|->
name|GetString
argument_list|(
name|stringProperty
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|hStringToQString
argument_list|(
name|stringProperty
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
default|default:
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
literal|"Unknown property type dropped:"
operator|<<
name|type
expr_stmt|;
block|}
return|return
name|S_OK
return|;
block|}
comment|// Custom data can be read via input streams
name|ComPtr
argument_list|<
name|IRandomAccessStream
argument_list|>
name|randomAccessStream
decl_stmt|;
name|hr
operator|=
name|res
operator|.
name|As
argument_list|(
operator|&
name|randomAccessStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|UINT64
name|size
decl_stmt|;
name|hr
operator|=
name|randomAccessStream
operator|->
name|get_Size
argument_list|(
operator|&
name|size
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IInputStream
argument_list|>
name|stream
decl_stmt|;
name|hr
operator|=
name|randomAccessStream
operator|.
name|As
argument_list|(
operator|&
name|stream
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IBufferFactory
argument_list|>
name|bufferFactory
decl_stmt|;
name|hr
operator|=
name|RoGetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Storage_Streams_Buffer
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|bufferFactory
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|UINT32
name|length
type|=
name|qBound
type|(
name|quint64
type|(0
decl_stmt|)
operator|,
decl_stmt|quint64(size
block|)
operator|,
name|quint64
argument_list|(
name|UINT_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|buffer
decl_stmt|;
name|hr
operator|=
name|bufferFactory
operator|->
name|Create
argument_list|(
name|length
argument_list|,
operator|&
name|buffer
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperationWithProgress
argument_list|<
name|IBuffer
modifier|*
argument_list|,
name|UINT32
argument_list|>
argument_list|>
name|readOp
decl_stmt|;
name|hr
operator|=
name|stream
operator|->
name|ReadAsync
argument_list|(
name|buffer
operator|.
name|Get
argument_list|()
argument_list|,
name|length
argument_list|,
name|InputStreamOptions_None
argument_list|,
operator|&
name|readOp
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|effectiveBuffer
decl_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|readOp
argument_list|,
name|effectiveBuffer
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|hr
operator|=
name|effectiveBuffer
operator|->
name|get_Length
argument_list|(
operator|&
name|length
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|Windows
operator|::
name|Storage
operator|::
name|Streams
operator|::
name|IBufferByteAccess
argument_list|>
name|byteArrayAccess
decl_stmt|;
name|hr
operator|=
name|effectiveBuffer
operator|.
name|As
argument_list|(
operator|&
name|byteArrayAccess
argument_list|)
expr_stmt|;
name|byte
modifier|*
name|bytes
decl_stmt|;
name|hr
operator|=
name|byteArrayAccess
operator|->
name|Buffer
argument_list|(
operator|&
name|bytes
argument_list|)
expr_stmt|;
name|QByteArray
name|array
argument_list|(
operator|(
name|char
operator|*
operator|)
name|bytes
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|array
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
name|HSTRING
name|runtimeClass
decl_stmt|;
name|hr
operator|=
name|res
operator|->
name|GetRuntimeClassName
argument_list|(
operator|&
name|runtimeClass
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|HString
name|converted
decl_stmt|;
name|converted
operator|.
name|Set
argument_list|(
name|runtimeClass
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
literal|"Unknown drop data type received ("
operator|<<
name|hStringToQString
argument_list|(
name|converted
argument_list|)
operator|<<
literal|"). Ignoring..."
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt
begin_expr_stmt
unit|}     return
name|result
expr_stmt|;
end_expr_stmt
begin_macro
unit|}  void
DECL|function|setDataView
name|QWinRTInternalMimeData
end_macro
begin_expr_stmt
DECL|function|setDataView
operator|::
name|setDataView
operator|(
specifier|const
name|Microsoft
operator|::
name|WRL
operator|::
name|ComPtr
argument_list|<
name|IDataPackageView
argument_list|>
operator|&
name|d
operator|)
block|{
name|dataView
operator|=
name|d
block|;
name|formats
operator|.
name|clear
argument_list|()
block|; }
DECL|function|qt_drag_enter
specifier|static
name|HRESULT
name|qt_drag_enter
argument_list|(
argument|IInspectable *sender
argument_list|,
argument|ABI::Windows::UI::Xaml::IDragEventArgs *e
argument_list|)
block|{
name|QWinRTDrag
operator|::
name|instance
argument_list|()
operator|->
name|handleNativeDragEvent
argument_list|(
name|sender
argument_list|,
name|e
argument_list|)
block|;
return|return
name|S_OK
return|;
block|}
end_expr_stmt
begin_function
DECL|function|qt_drag_over
specifier|static
name|HRESULT
name|qt_drag_over
parameter_list|(
name|IInspectable
modifier|*
name|sender
parameter_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|IDragEventArgs
modifier|*
name|e
parameter_list|)
block|{
name|QWinRTDrag
operator|::
name|instance
argument_list|()
operator|->
name|handleNativeDragEvent
argument_list|(
name|sender
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|qt_drag_leave
specifier|static
name|HRESULT
name|qt_drag_leave
parameter_list|(
name|IInspectable
modifier|*
name|sender
parameter_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|IDragEventArgs
modifier|*
name|e
parameter_list|)
block|{
comment|// Qt internally checks for new drags and auto sends leave events
comment|// Also there is no QPA function for handling leave
name|Q_UNUSED
argument_list|(
name|sender
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|qt_drop
specifier|static
name|HRESULT
name|qt_drop
parameter_list|(
name|IInspectable
modifier|*
name|sender
parameter_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|IDragEventArgs
modifier|*
name|e
parameter_list|)
block|{
name|QWinRTDrag
operator|::
name|instance
argument_list|()
operator|->
name|handleNativeDragEvent
argument_list|(
name|sender
argument_list|,
name|e
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_define
DECL|macro|Q_DECLARE_DRAGHANDLER
define|#
directive|define
name|Q_DECLARE_DRAGHANDLER
parameter_list|(
name|name
parameter_list|,
name|func
parameter_list|)
define|\
value|class QtDragEventHandler##name : public IDragEventHandler \ { \ public: \     virtual HRESULT STDMETHODCALLTYPE Invoke(IInspectable *sender, \                             ABI::Windows::UI::Xaml::IDragEventArgs *e) \     { \         return qt_##func(sender, e);\     } \  \     STDMETHODIMP \     QueryInterface(REFIID riid, void FAR* FAR* ppvObj) \     { \         if (riid == IID_IUnknown || riid == IID_IDragEventHandler) { \             *ppvObj = this; \             AddRef(); \             return NOERROR; \         } \         *ppvObj = NULL; \         return ResultFromScode(E_NOINTERFACE); \     } \  \     STDMETHODIMP_(ULONG) \     AddRef(void) \     { \         return ++m_refs; \     } \  \     STDMETHODIMP_(ULONG) \     Release(void) \     { \         if (--m_refs == 0) { \             delete this; \             return 0; \         } \         return m_refs; \     } \ private: \ ULONG m_refs{0}; \ };
end_define
begin_macro
name|Q_DECLARE_DRAGHANDLER
argument_list|(
argument|Enter
argument_list|,
argument|drag_enter
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_DRAGHANDLER
argument_list|(
argument|Over
argument_list|,
argument|drag_over
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_DRAGHANDLER
argument_list|(
argument|Leave
argument_list|,
argument|drag_leave
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_DRAGHANDLER
argument_list|(
argument|Drop
argument_list|,
argument|drop
argument_list|)
end_macro
begin_define
DECL|macro|Q_INST_DRAGHANDLER
define|#
directive|define
name|Q_INST_DRAGHANDLER
parameter_list|(
name|name
parameter_list|)
value|QtDragEventHandler##name()
end_define
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QWinRTDrag
argument_list|,
name|gDrag
argument_list|)
expr_stmt|;
end_expr_stmt
begin_constructor
DECL|function|QWinRTDrag
name|QWinRTDrag
operator|::
name|QWinRTDrag
parameter_list|()
member_init_list|:
name|QPlatformDrag
argument_list|()
member_init_list|,
name|m_dragTarget
argument_list|(
literal|0
argument_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
expr_stmt|;
name|m_enter
operator|=
operator|new
name|Q_INST_DRAGHANDLER
argument_list|(
name|Enter
argument_list|)
expr_stmt|;
name|m_over
operator|=
operator|new
name|Q_INST_DRAGHANDLER
argument_list|(
name|Over
argument_list|)
expr_stmt|;
name|m_leave
operator|=
operator|new
name|Q_INST_DRAGHANDLER
argument_list|(
name|Leave
argument_list|)
expr_stmt|;
name|m_drop
operator|=
operator|new
name|Q_INST_DRAGHANDLER
argument_list|(
name|Drop
argument_list|)
expr_stmt|;
name|m_mimeData
operator|=
operator|new
name|QWinRTInternalMimeData
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWinRTDrag
name|QWinRTDrag
operator|::
name|~
name|QWinRTDrag
parameter_list|()
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
expr_stmt|;
operator|delete
name|m_enter
expr_stmt|;
operator|delete
name|m_over
expr_stmt|;
operator|delete
name|m_leave
expr_stmt|;
operator|delete
name|m_drop
expr_stmt|;
operator|delete
name|m_mimeData
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|instance
name|QWinRTDrag
modifier|*
name|QWinRTDrag
operator|::
name|instance
parameter_list|()
block|{
return|return
name|gDrag
return|;
block|}
end_function
begin_function
DECL|function|drag
name|Qt
operator|::
name|DropAction
name|QWinRTDrag
operator|::
name|drag
parameter_list|(
name|QDrag
modifier|*
name|drag
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|drag
expr_stmt|;
comment|// ### TODO: Add dragging from Window
return|return
name|Qt
operator|::
name|IgnoreAction
return|;
block|}
end_function
begin_function
DECL|function|setDropTarget
name|void
name|QWinRTDrag
operator|::
name|setDropTarget
parameter_list|(
name|QWindow
modifier|*
name|target
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|target
expr_stmt|;
name|m_dragTarget
operator|=
name|target
expr_stmt|;
block|}
end_function
begin_function
DECL|function|platformDropData
name|QMimeData
modifier|*
name|QWinRTDrag
operator|::
name|platformDropData
parameter_list|()
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
expr_stmt|;
return|return
name|m_mimeData
return|;
block|}
end_function
begin_function
DECL|function|setUiElement
name|void
name|QWinRTDrag
operator|::
name|setUiElement
parameter_list|(
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|IUIElement
argument_list|>
modifier|&
name|element
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
expr_stmt|;
name|m_ui
operator|=
name|element
expr_stmt|;
comment|// We set the element to always accept drops and then evaluate during
comment|// runtime
name|HRESULT
name|hr
init|=
name|element
operator|->
name|put_AllowDrop
argument_list|(
name|TRUE
argument_list|)
decl_stmt|;
name|EventRegistrationToken
name|tok
decl_stmt|;
name|hr
operator|=
name|element
operator|->
name|add_DragEnter
argument_list|(
name|m_enter
argument_list|,
operator|&
name|tok
argument_list|)
expr_stmt|;
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"Failed to add DragEnter handler."
argument_list|)
expr_stmt|;
name|hr
operator|=
name|element
operator|->
name|add_DragOver
argument_list|(
name|m_over
argument_list|,
operator|&
name|tok
argument_list|)
expr_stmt|;
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"Failed to add DragOver handler."
argument_list|)
expr_stmt|;
name|hr
operator|=
name|element
operator|->
name|add_DragLeave
argument_list|(
name|m_leave
argument_list|,
operator|&
name|tok
argument_list|)
expr_stmt|;
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"Failed to add DragLeave handler."
argument_list|)
expr_stmt|;
name|hr
operator|=
name|element
operator|->
name|add_Drop
argument_list|(
name|m_drop
argument_list|,
operator|&
name|tok
argument_list|)
expr_stmt|;
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"Failed to add Drop handler."
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleNativeDragEvent
name|void
name|QWinRTDrag
operator|::
name|handleNativeDragEvent
parameter_list|(
name|IInspectable
modifier|*
name|sender
parameter_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|IDragEventArgs
modifier|*
name|e
parameter_list|,
name|bool
name|drop
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|sender
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_dragTarget
condition|)
return|return;
name|HRESULT
name|hr
decl_stmt|;
name|Point
name|relativePoint
decl_stmt|;
name|hr
operator|=
name|e
operator|->
name|GetPosition
argument_list|(
name|m_ui
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|relativePoint
argument_list|)
expr_stmt|;
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"Could not query drag position."
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|p
argument_list|(
name|relativePoint
operator|.
name|X
argument_list|,
name|relativePoint
operator|.
name|Y
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Point received:"
operator|<<
name|relativePoint
operator|.
name|X
operator|<<
literal|"/"
operator|<<
name|relativePoint
operator|.
name|Y
expr_stmt|;
name|ComPtr
argument_list|<
name|IDragEventArgs2
argument_list|>
name|e2
decl_stmt|;
name|hr
operator|=
name|e
operator|->
name|QueryInterface
argument_list|(
name|IID_PPV_ARGS
argument_list|(
operator|&
name|e2
argument_list|)
argument_list|)
expr_stmt|;
name|RETURN_VOID_IF_FAILED
argument_list|(
literal|"Could not convert drag event args"
argument_list|)
expr_stmt|;
name|DragDropModifiers
name|modifiers
decl_stmt|;
name|hr
operator|=
name|e2
operator|->
name|get_Modifiers
argument_list|(
operator|&
name|modifiers
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IDragEventArgs3
argument_list|>
name|e3
decl_stmt|;
name|hr
operator|=
name|e
operator|->
name|QueryInterface
argument_list|(
name|IID_PPV_ARGS
argument_list|(
operator|&
name|e3
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|DataPackageOperation
name|dataOp
decl_stmt|;
name|hr
operator|=
name|e3
operator|->
name|get_AllowedOperations
argument_list|(
operator|&
name|dataOp
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qCDebug
argument_list|(
name|lcQpaMime
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
literal|"Could not query drag operations"
expr_stmt|;
specifier|const
name|Qt
operator|::
name|DropActions
name|actions
init|=
name|translateToQDragDropActions
argument_list|(
name|dataOp
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IDataPackageView
argument_list|>
name|dataView
decl_stmt|;
name|hr
operator|=
name|e2
operator|->
name|get_DataView
argument_list|(
operator|&
name|dataView
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|m_mimeData
operator|->
name|setDataView
argument_list|(
name|dataView
argument_list|)
expr_stmt|;
comment|// We use deferral as we need to jump to the Qt thread to handle
comment|// the drag event
name|ComPtr
argument_list|<
name|IDragOperationDeferral
argument_list|>
name|deferral
decl_stmt|;
name|hr
operator|=
name|e2
operator|->
name|GetDeferral
argument_list|(
operator|&
name|deferral
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|DragThreadTransferData
modifier|*
name|transferData
init|=
operator|new
name|DragThreadTransferData
decl_stmt|;
name|transferData
operator|->
name|moveToThread
argument_list|(
name|qGuiApp
operator|->
name|thread
argument_list|()
argument_list|)
expr_stmt|;
name|transferData
operator|->
name|window
operator|=
name|m_dragTarget
expr_stmt|;
name|transferData
operator|->
name|point
operator|=
name|p
expr_stmt|;
name|transferData
operator|->
name|mime
operator|=
name|m_mimeData
expr_stmt|;
name|transferData
operator|->
name|actions
operator|=
name|actions
expr_stmt|;
name|transferData
operator|->
name|dropAction
operator|=
name|drop
expr_stmt|;
name|transferData
operator|->
name|nativeArgs
operator|=
name|e
expr_stmt|;
name|transferData
operator|->
name|deferral
operator|=
name|deferral
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|transferData
argument_list|,
literal|"handleDrag"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|DragThreadTransferData
name|DragThreadTransferData
operator|::
name|DragThreadTransferData
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|dropAction
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|handleDrag
name|void
name|DragThreadTransferData
operator|::
name|handleDrag
parameter_list|()
block|{
name|bool
name|accepted
init|=
literal|false
decl_stmt|;
name|Qt
operator|::
name|DropAction
name|acceptedAction
decl_stmt|;
if|if
condition|(
name|dropAction
condition|)
block|{
name|QPlatformDropQtResponse
name|response
init|=
name|QWindowSystemInterface
operator|::
name|handleDrop
argument_list|(
name|window
argument_list|,
name|mime
argument_list|,
name|point
argument_list|,
name|actions
argument_list|)
decl_stmt|;
name|accepted
operator|=
name|response
operator|.
name|isAccepted
argument_list|()
expr_stmt|;
name|acceptedAction
operator|=
name|response
operator|.
name|acceptedAction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QPlatformDragQtResponse
name|response
init|=
name|QWindowSystemInterface
operator|::
name|handleDrag
argument_list|(
name|window
argument_list|,
name|mime
argument_list|,
name|point
argument_list|,
name|actions
argument_list|)
decl_stmt|;
name|accepted
operator|=
name|response
operator|.
name|isAccepted
argument_list|()
expr_stmt|;
name|acceptedAction
operator|=
name|response
operator|.
name|acceptedAction
argument_list|()
expr_stmt|;
block|}
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|QEventDispatcherWinRT
operator|::
name|runOnXamlThread
argument_list|(
capture|[
name|accepted
capture|,
name|acceptedAction
capture|,
name|this
capture|]
parameter_list|()
block|{
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|nativeArgs
operator|->
name|put_Handled
argument_list|(
name|accepted
argument_list|)
expr_stmt|;
if|if
condition|(
name|acceptedAction
operator|!=
name|Qt
operator|::
name|IgnoreAction
condition|)
block|{
name|ComPtr
argument_list|<
name|IDragEventArgs2
argument_list|>
name|e2
decl_stmt|;
name|hr
operator|=
name|nativeArgs
operator|.
name|As
argument_list|(
operator|&
name|e2
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
name|hr
operator|=
name|e2
operator|->
name|put_AcceptedOperation
argument_list|(
name|translateFromQDragDropActions
argument_list|(
name|acceptedAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|deferral
operator|->
name|Complete
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|deleteLater
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qwinrtdrag.moc"
end_include
end_unit
