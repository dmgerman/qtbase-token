begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwinrtfileengine.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDateTime>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QHash>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfunctions_winrt.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<windows.storage.h>
end_include
begin_include
include|#
directive|include
file|<robuffer.h>
end_include
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Storage
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Storage
operator|::
name|Streams
namespace|;
end_using
begin_typedef
DECL|typedef|StreamCompletedHandler
typedef|typedef
name|IAsyncOperationCompletedHandler
argument_list|<
name|IRandomAccessStream
modifier|*
argument_list|>
name|StreamCompletedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|StreamReadCompletedHandler
typedef|typedef
name|IAsyncOperationWithProgressCompletedHandler
argument_list|<
name|IBuffer
modifier|*
argument_list|,
name|UINT32
argument_list|>
name|StreamReadCompletedHandler
typedef|;
end_typedef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|macro|RETURN_AND_SET_ERROR_IF_FAILED
define|#
directive|define
name|RETURN_AND_SET_ERROR_IF_FAILED
parameter_list|(
name|error
parameter_list|,
name|ret
parameter_list|)
define|\
value|setError(error, qt_error_string(hr)); \     if (FAILED(hr)) \         return ret;
name|Q_GLOBAL_STATIC
argument_list|(
name|QWinRTFileEngineHandler
argument_list|,
name|handlerInstance
argument_list|)
DECL|class|QWinRTFileEngineHandlerPrivate
name|class
name|QWinRTFileEngineHandlerPrivate
argument_list|{
specifier|public
operator|:
DECL|member|files
name|QHash
argument_list|<
name|QString
argument_list|,
name|ComPtr
argument_list|<
name|IStorageItem
argument_list|>
argument_list|>
name|files
argument_list|; }
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QWinRTFileEnginePrivate
class|class
name|QWinRTFileEnginePrivate
block|{
public|public:
DECL|function|QWinRTFileEnginePrivate
name|QWinRTFileEnginePrivate
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|IStorageItem
modifier|*
name|file
parameter_list|)
member_init_list|:
name|fileName
argument_list|(
name|fileName
argument_list|)
member_init_list|,
name|file
argument_list|(
name|file
argument_list|)
member_init_list|,
name|openMode
argument_list|(
name|QIODevice
operator|::
name|NotOpen
argument_list|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|RoGetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Storage_Streams_Buffer
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|bufferFactory
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|lastSeparator
operator|=
name|fileName
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|lastSeparator
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|fileName
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'/'
operator|||
name|fileName
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'\\'
condition|)
block|{
name|lastSeparator
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|firstDot
operator|=
name|fileName
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|lastSeparator
init|;
name|i
operator|>
name|fileName
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fileName
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|'.'
condition|)
block|{
name|firstDot
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|member|bufferFactory
name|ComPtr
argument_list|<
name|IBufferFactory
argument_list|>
name|bufferFactory
decl_stmt|;
DECL|member|fileName
name|QString
name|fileName
decl_stmt|;
DECL|member|lastSeparator
name|int
name|lastSeparator
decl_stmt|;
DECL|member|firstDot
name|int
name|firstDot
decl_stmt|;
DECL|member|file
name|ComPtr
argument_list|<
name|IStorageItem
argument_list|>
name|file
decl_stmt|;
DECL|member|stream
name|ComPtr
argument_list|<
name|IRandomAccessStream
argument_list|>
name|stream
decl_stmt|;
DECL|member|openMode
name|QIODevice
operator|::
name|OpenMode
name|openMode
decl_stmt|;
DECL|member|pos
name|qint64
name|pos
decl_stmt|;
private|private:
DECL|member|q_ptr
name|QWinRTFileEngineHandler
modifier|*
name|q_ptr
decl_stmt|;
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QWinRTFileEngineHandler
argument_list|)
block|}
class|;
end_class
begin_constructor
DECL|function|QWinRTFileEngineHandler
name|QWinRTFileEngineHandler
operator|::
name|QWinRTFileEngineHandler
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QWinRTFileEngineHandlerPrivate
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWinRTFileEngineHandler
name|QWinRTFileEngineHandler
operator|::
name|~
name|QWinRTFileEngineHandler
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|registerFile
name|void
name|QWinRTFileEngineHandler
operator|::
name|registerFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|IStorageItem
modifier|*
name|file
parameter_list|)
block|{
name|handlerInstance
operator|->
name|d_func
argument_list|()
operator|->
name|files
operator|.
name|insert
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registeredFile
name|IStorageItem
modifier|*
name|QWinRTFileEngineHandler
operator|::
name|registeredFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
return|return
name|handlerInstance
operator|->
name|d_func
argument_list|()
operator|->
name|files
operator|.
name|value
argument_list|(
name|fileName
argument_list|)
operator|.
name|Get
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|create
name|QAbstractFileEngine
modifier|*
name|QWinRTFileEngineHandler
operator|::
name|create
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWinRTFileEngineHandler
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|ComPtr
argument_list|<
name|IStorageItem
argument_list|>
argument_list|>
operator|::
name|const_iterator
name|file
init|=
name|d
operator|->
name|files
operator|.
name|find
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
name|d
operator|->
name|files
operator|.
name|end
argument_list|()
condition|)
return|return
operator|new
name|QWinRTFileEngine
argument_list|(
name|fileName
argument_list|,
name|file
operator|.
name|value
argument_list|()
operator|.
name|Get
argument_list|()
argument_list|)
return|;
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|getDestinationFolder
specifier|static
name|HRESULT
name|getDestinationFolder
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QString
modifier|&
name|newFileName
parameter_list|,
name|IStorageItem
modifier|*
name|file
parameter_list|,
name|IStorageFolder
modifier|*
modifier|*
name|folder
parameter_list|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|StorageFolder
modifier|*
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|QFileInfo
name|newFileInfo
argument_list|(
name|newFileName
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
name|QFileInfo
name|fileInfo
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileInfo
operator|.
name|dir
argument_list|()
operator|==
name|newFileInfo
operator|.
name|dir
argument_list|()
condition|)
block|{
name|ComPtr
argument_list|<
name|IStorageItem2
argument_list|>
name|item
decl_stmt|;
name|hr
operator|=
name|file
operator|->
name|QueryInterface
argument_list|(
name|IID_PPV_ARGS
argument_list|(
operator|&
name|item
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|item
operator|->
name|GetParentAsync
argument_list|(
operator|&
name|op
argument_list|)
expr_stmt|;
block|}
else|else
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|file
argument_list|)
endif|#
directive|endif
block|{
name|ComPtr
argument_list|<
name|IStorageFolderStatics
argument_list|>
name|folderFactory
decl_stmt|;
name|hr
operator|=
name|RoGetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Storage_StorageFolder
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|folderFactory
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|newFilePath
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|newFileInfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|HStringReference
name|nativeNewFilePath
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|newFilePath
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|newFilePath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|hr
operator|=
name|folderFactory
operator|->
name|GetFolderFromPathAsync
argument_list|(
name|nativeNewFilePath
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
return|return
name|hr
return|;
return|return
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|folder
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QWinRTFileEngine
name|QWinRTFileEngine
operator|::
name|QWinRTFileEngine
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|IStorageItem
modifier|*
name|file
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QWinRTFileEnginePrivate
argument_list|(
name|fileName
argument_list|,
name|file
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWinRTFileEngine
name|QWinRTFileEngine
operator|::
name|~
name|QWinRTFileEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|open
name|bool
name|QWinRTFileEngine
operator|::
name|open
parameter_list|(
name|QIODevice
operator|::
name|OpenMode
name|openMode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
name|FileAccessMode
name|fileAccessMode
init|=
operator|(
name|openMode
operator|&
name|QIODevice
operator|::
name|WriteOnly
operator|)
condition|?
name|FileAccessMode_ReadWrite
else|:
name|FileAccessMode_Read
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IStorageFile
argument_list|>
name|file
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|file
operator|.
name|As
argument_list|(
operator|&
name|file
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|OpenError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|IRandomAccessStream
modifier|*
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|file
operator|->
name|OpenAsync
argument_list|(
name|fileAccessMode
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|OpenError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|d
operator|->
name|stream
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|OpenError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|openMode
operator|=
name|openMode
expr_stmt|;
return|return
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|close
name|bool
name|QWinRTFileEngine
operator|::
name|close
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|stream
condition|)
return|return
literal|false
return|;
name|ComPtr
argument_list|<
name|IClosable
argument_list|>
name|closable
decl_stmt|;
name|HRESULT
name|hr
init|=
name|d
operator|->
name|stream
operator|.
name|As
argument_list|(
operator|&
name|closable
argument_list|)
decl_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|hr
operator|=
name|closable
operator|->
name|Close
argument_list|()
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|UnspecifiedError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|stream
operator|.
name|Reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|openMode
operator|=
name|QIODevice
operator|::
name|NotOpen
expr_stmt|;
return|return
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|flush
name|bool
name|QWinRTFileEngine
operator|::
name|flush
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|stream
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|openMode
operator|&
name|QIODevice
operator|::
name|WriteOnly
operator|)
condition|)
return|return
literal|true
return|;
name|ComPtr
argument_list|<
name|IOutputStream
argument_list|>
name|stream
decl_stmt|;
name|HRESULT
name|hr
init|=
name|d
operator|->
name|stream
operator|.
name|As
argument_list|(
operator|&
name|stream
argument_list|)
decl_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|WriteError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|bool
argument_list|>
argument_list|>
name|flushOp
decl_stmt|;
name|hr
operator|=
name|stream
operator|->
name|FlushAsync
argument_list|(
operator|&
name|flushOp
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|WriteError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|flushed
decl_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|flushOp
argument_list|,
operator|&
name|flushed
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|WriteError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|size
name|qint64
name|QWinRTFileEngine
operator|::
name|size
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|stream
condition|)
return|return
literal|0
return|;
name|UINT64
name|size
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|stream
operator|->
name|get_Size
argument_list|(
operator|&
name|size
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to get file size"
argument_list|,
argument|return
literal|0
argument_list|)
empty_stmt|;
return|return
name|qint64
argument_list|(
name|size
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|pos
name|qint64
name|QWinRTFileEngine
operator|::
name|pos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pos
return|;
block|}
end_function
begin_function
DECL|function|seek
name|bool
name|QWinRTFileEngine
operator|::
name|seek
parameter_list|(
name|qint64
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|stream
condition|)
return|return
literal|false
return|;
name|HRESULT
name|hr
init|=
name|d
operator|->
name|stream
operator|->
name|Seek
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|PositionError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|pos
operator|=
name|pos
expr_stmt|;
return|return
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|remove
name|bool
name|QWinRTFileEngine
operator|::
name|remove
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncAction
argument_list|>
name|op
decl_stmt|;
name|HRESULT
name|hr
init|=
name|d
operator|->
name|file
operator|->
name|DeleteAsync
argument_list|(
name|StorageDeleteOption_Default
argument_list|,
operator|&
name|op
argument_list|)
decl_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|RemoveError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|RemoveError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|copy
name|bool
name|QWinRTFileEngine
operator|::
name|copy
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IStorageFolder
argument_list|>
name|destinationFolder
decl_stmt|;
name|hr
operator|=
name|getDestinationFolder
argument_list|(
name|d
operator|->
name|fileName
argument_list|,
name|newName
argument_list|,
name|d
operator|->
name|file
operator|.
name|Get
argument_list|()
argument_list|,
name|destinationFolder
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|CopyError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IStorageFile
argument_list|>
name|file
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|file
operator|.
name|As
argument_list|(
operator|&
name|file
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|CopyError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|destinationName
init|=
name|QFileInfo
argument_list|(
name|newName
argument_list|)
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|HStringReference
name|nativeDestinationName
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|destinationName
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|destinationName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|StorageFile
modifier|*
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|file
operator|->
name|CopyOverloadDefaultOptions
argument_list|(
name|destinationFolder
operator|.
name|Get
argument_list|()
argument_list|,
name|nativeDestinationName
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|CopyError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IStorageFile
argument_list|>
name|newFile
decl_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|newFile
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|CopyError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rename
name|bool
name|QWinRTFileEngine
operator|::
name|rename
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IStorageFolder
argument_list|>
name|destinationFolder
decl_stmt|;
name|hr
operator|=
name|getDestinationFolder
argument_list|(
name|d
operator|->
name|fileName
argument_list|,
name|newName
argument_list|,
name|d
operator|->
name|file
operator|.
name|Get
argument_list|()
argument_list|,
name|destinationFolder
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|RenameError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|destinationName
init|=
name|QFileInfo
argument_list|(
name|newName
argument_list|)
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|HStringReference
name|nativeDestinationName
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|destinationName
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|destinationName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncAction
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|file
operator|->
name|RenameAsyncOverloadDefaultOptions
argument_list|(
name|nativeDestinationName
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|RenameError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|renameOverwrite
name|bool
name|QWinRTFileEngine
operator|::
name|renameOverwrite
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IStorageFolder
argument_list|>
name|destinationFolder
decl_stmt|;
name|hr
operator|=
name|getDestinationFolder
argument_list|(
name|d
operator|->
name|fileName
argument_list|,
name|newName
argument_list|,
name|d
operator|->
name|file
operator|.
name|Get
argument_list|()
argument_list|,
name|destinationFolder
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|RenameError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|destinationName
init|=
name|QFileInfo
argument_list|(
name|newName
argument_list|)
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|HStringReference
name|nativeDestinationName
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|destinationName
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|destinationName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncAction
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|file
operator|->
name|RenameAsync
argument_list|(
name|nativeDestinationName
operator|.
name|Get
argument_list|()
argument_list|,
name|NameCollisionOption_ReplaceExisting
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|RenameError
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fileFlags
name|QAbstractFileEngine
operator|::
name|FileFlags
name|QWinRTFileEngine
operator|::
name|fileFlags
parameter_list|(
name|FileFlags
name|type
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
name|FileFlags
name|flags
init|=
name|ExistsFlag
operator||
name|ReadOwnerPerm
operator||
name|ReadUserPerm
operator||
name|WriteOwnerPerm
operator||
name|WriteUserPerm
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|FileAttributes
name|attributes
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|file
operator|->
name|get_Attributes
argument_list|(
operator|&
name|attributes
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to get file attributes"
argument_list|,
argument|return flags
argument_list|)
empty_stmt|;
if|if
condition|(
name|attributes
operator|&
name|FileAttributes_ReadOnly
condition|)
name|flags
operator|^=
name|WriteUserPerm
expr_stmt|;
if|if
condition|(
name|attributes
operator|&
name|FileAttributes_Directory
condition|)
name|flags
operator||=
name|DirectoryType
expr_stmt|;
else|else
name|flags
operator||=
name|FileType
expr_stmt|;
return|return
name|type
operator|&
name|flags
return|;
block|}
end_function
begin_function
DECL|function|setPermissions
name|bool
name|QWinRTFileEngine
operator|::
name|setPermissions
parameter_list|(
name|uint
name|perms
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|perms
argument_list|)
expr_stmt|;
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|fileName
name|QString
name|QWinRTFileEngine
operator|::
name|fileName
parameter_list|(
name|FileName
name|type
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
default|default:
case|case
name|DefaultName
case|:
case|case
name|AbsoluteName
case|:
case|case
name|CanonicalName
case|:
break|break;
case|case
name|BaseName
case|:
return|return
name|d
operator|->
name|lastSeparator
operator|<
literal|0
condition|?
name|d
operator|->
name|fileName
else|:
name|d
operator|->
name|fileName
operator|.
name|mid
argument_list|(
name|d
operator|->
name|lastSeparator
argument_list|,
name|d
operator|->
name|firstDot
operator|-
name|d
operator|->
name|lastSeparator
argument_list|)
return|;
case|case
name|PathName
case|:
case|case
name|AbsolutePathName
case|:
case|case
name|CanonicalPathName
case|:
return|return
name|d
operator|->
name|fileName
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|lastSeparator
argument_list|)
return|;
case|case
name|LinkName
case|:
case|case
name|BundleName
case|:
return|return
name|QString
argument_list|()
return|;
block|}
return|return
name|d
operator|->
name|fileName
return|;
block|}
end_function
begin_function
DECL|function|fileTime
name|QDateTime
name|QWinRTFileEngine
operator|::
name|fileTime
parameter_list|(
name|FileTime
name|type
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|DateTime
name|dateTime
init|=
block|{
literal|0
block|}
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CreationTime
case|:
name|hr
operator|=
name|d
operator|->
name|file
operator|->
name|get_DateCreated
argument_list|(
operator|&
name|dateTime
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to get file creation time"
argument_list|,
argument|return QDateTime()
argument_list|)
empty_stmt|;
break|break;
case|case
name|ModificationTime
case|:
case|case
name|AccessTime
case|:
block|{
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|FileProperties
operator|::
name|BasicProperties
operator|*
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|file
operator|->
name|GetBasicPropertiesAsync
argument_list|(
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to initiate file properties"
argument_list|,
argument|return QDateTime()
argument_list|)
empty_stmt|;
name|ComPtr
argument_list|<
name|FileProperties
operator|::
name|IBasicProperties
argument_list|>
name|properties
decl_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|properties
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to get file properties"
argument_list|,
argument|return QDateTime()
argument_list|)
empty_stmt|;
name|hr
operator|=
name|type
operator|==
name|ModificationTime
condition|?
name|properties
operator|->
name|get_DateModified
argument_list|(
operator|&
name|dateTime
argument_list|)
else|:
name|properties
operator|->
name|get_ItemDate
argument_list|(
operator|&
name|dateTime
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to get file date"
argument_list|,
argument|return QDateTime()
argument_list|)
empty_stmt|;
block|}
break|break;
block|}
name|SYSTEMTIME
name|systemTime
decl_stmt|;
name|FileTimeToSystemTime
argument_list|(
operator|(
specifier|const
name|FILETIME
operator|*
operator|)
operator|&
name|dateTime
argument_list|,
operator|&
name|systemTime
argument_list|)
expr_stmt|;
name|QDate
name|date
argument_list|(
name|systemTime
operator|.
name|wYear
argument_list|,
name|systemTime
operator|.
name|wMonth
argument_list|,
name|systemTime
operator|.
name|wDay
argument_list|)
decl_stmt|;
name|QTime
name|time
argument_list|(
name|systemTime
operator|.
name|wHour
argument_list|,
name|systemTime
operator|.
name|wMinute
argument_list|,
name|systemTime
operator|.
name|wSecond
argument_list|,
name|systemTime
operator|.
name|wMilliseconds
argument_list|)
decl_stmt|;
return|return
name|QDateTime
argument_list|(
name|date
argument_list|,
name|time
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|read
name|qint64
name|QWinRTFileEngine
operator|::
name|read
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|stream
condition|)
return|return
operator|-
literal|1
return|;
name|ComPtr
argument_list|<
name|IInputStream
argument_list|>
name|stream
decl_stmt|;
name|HRESULT
name|hr
init|=
name|d
operator|->
name|stream
operator|.
name|As
argument_list|(
operator|&
name|stream
argument_list|)
decl_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|ReadError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|UINT32
name|length
init|=
name|qBound
argument_list|(
name|quint64
argument_list|(
literal|0
argument_list|)
argument_list|,
name|quint64
argument_list|(
name|maxlen
argument_list|)
argument_list|,
name|quint64
argument_list|(
name|UINT_MAX
argument_list|)
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|buffer
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|bufferFactory
operator|->
name|Create
argument_list|(
name|length
argument_list|,
operator|&
name|buffer
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|ReadError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperationWithProgress
argument_list|<
name|IBuffer
modifier|*
argument_list|,
name|UINT32
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|stream
operator|->
name|ReadAsync
argument_list|(
name|buffer
operator|.
name|Get
argument_list|()
argument_list|,
name|length
argument_list|,
name|InputStreamOptions_None
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|ReadError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Quoting MSDN IInputStream::ReadAsync() documentation:
comment|// "Depending on the implementation, the data that's read might be placed
comment|// into the input buffer, or it might be returned in a different buffer."
comment|// Using GetAddressOf can cause ref counting errors leaking the original
comment|// buffer.
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|effectiveBuffer
decl_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|effectiveBuffer
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|ReadError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|hr
operator|=
name|effectiveBuffer
operator|->
name|get_Length
argument_list|(
operator|&
name|length
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|ReadError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|Windows
operator|::
name|Storage
operator|::
name|Streams
operator|::
name|IBufferByteAccess
argument_list|>
name|byteArrayAccess
decl_stmt|;
name|hr
operator|=
name|effectiveBuffer
operator|.
name|As
argument_list|(
operator|&
name|byteArrayAccess
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|ReadError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|byte
modifier|*
name|bytes
decl_stmt|;
name|hr
operator|=
name|byteArrayAccess
operator|->
name|Buffer
argument_list|(
operator|&
name|bytes
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|ReadError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|data
argument_list|,
name|bytes
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|qint64
argument_list|(
name|length
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|write
name|qint64
name|QWinRTFileEngine
operator|::
name|write
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTFileEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|stream
condition|)
return|return
operator|-
literal|1
return|;
name|ComPtr
argument_list|<
name|IOutputStream
argument_list|>
name|stream
decl_stmt|;
name|HRESULT
name|hr
init|=
name|d
operator|->
name|stream
operator|.
name|As
argument_list|(
operator|&
name|stream
argument_list|)
decl_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|WriteError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|UINT32
name|length
init|=
name|qBound
argument_list|(
name|quint64
argument_list|(
literal|0
argument_list|)
argument_list|,
name|quint64
argument_list|(
name|maxlen
argument_list|)
argument_list|,
name|quint64
argument_list|(
name|UINT_MAX
argument_list|)
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IBuffer
argument_list|>
name|buffer
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|bufferFactory
operator|->
name|Create
argument_list|(
name|length
argument_list|,
operator|&
name|buffer
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|WriteError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|hr
operator|=
name|buffer
operator|->
name|put_Length
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|WriteError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|Windows
operator|::
name|Storage
operator|::
name|Streams
operator|::
name|IBufferByteAccess
argument_list|>
name|byteArrayAccess
decl_stmt|;
name|hr
operator|=
name|buffer
operator|.
name|As
argument_list|(
operator|&
name|byteArrayAccess
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|WriteError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|byte
modifier|*
name|bytes
decl_stmt|;
name|hr
operator|=
name|byteArrayAccess
operator|->
name|Buffer
argument_list|(
operator|&
name|bytes
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|WriteError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|bytes
argument_list|,
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperationWithProgress
argument_list|<
name|UINT32
argument_list|,
name|UINT32
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|stream
operator|->
name|WriteAsync
argument_list|(
name|buffer
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|WriteError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
operator|&
name|length
argument_list|)
expr_stmt|;
name|RETURN_AND_SET_ERROR_IF_FAILED
argument_list|(
name|QFileDevice
operator|::
name|WriteError
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|qint64
argument_list|(
name|length
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
