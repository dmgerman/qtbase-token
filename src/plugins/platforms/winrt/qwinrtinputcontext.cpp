begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwinrtinputcontext.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<roapi.h>
end_include
begin_include
include|#
directive|include
file|<windows.ui.viewmanagement.h>
end_include
begin_include
include|#
directive|include
file|<windows.ui.core.h>
end_include
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|ViewManagement
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
namespace|;
end_using
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
end_ifdef
begin_include
include|#
directive|include
file|<windows.phone.ui.core.h>
end_include
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Phone
operator|::
name|UI
operator|::
name|Core
namespace|;
end_using
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|InputPaneVisibilityHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|InputPane
modifier|*
argument_list|,
name|InputPaneVisibilityEventArgs
modifier|*
argument_list|>
name|InputPaneVisibilityHandler
typedef|;
end_typedef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QWinRTInputContext     \brief Manages Input Method visibility     \internal     \ingroup qt-qpa-winrt      Listens to the native virtual keyboard for hide/show events and provides     hints to the OS for showing/hiding. On WinRT, showInputPanel()/hideInputPanel()     have no effect because WinRT dictates that keyboard presence is user-driven:     (http://msdn.microsoft.com/en-us/library/windows/apps/hh465404.aspx)     Windows Phone, however, supports direct hiding/showing of the keyboard. */
end_comment
begin_constructor
DECL|function|QWinRTInputContext
name|QWinRTInputContext
operator|::
name|QWinRTInputContext
parameter_list|(
name|ICoreWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|m_window
argument_list|(
name|window
argument_list|)
block|{
name|IInputPaneStatics
modifier|*
name|statics
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_UI_ViewManagement_InputPane
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|statics
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
name|Q_FUNC_INFO
literal|": failed to retrieve input pane statics."
argument_list|)
expr_stmt|;
return|return;
block|}
name|IInputPane
modifier|*
name|inputPane
decl_stmt|;
name|statics
operator|->
name|GetForCurrentView
argument_list|(
operator|&
name|inputPane
argument_list|)
expr_stmt|;
name|statics
operator|->
name|Release
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputPane
condition|)
block|{
name|EventRegistrationToken
name|showToken
decl_stmt|,
name|hideToken
decl_stmt|;
name|inputPane
operator|->
name|add_Showing
argument_list|(
name|Callback
argument_list|<
name|InputPaneVisibilityHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTInputContext
operator|::
name|onShowing
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|showToken
argument_list|)
expr_stmt|;
name|inputPane
operator|->
name|add_Hiding
argument_list|(
name|Callback
argument_list|<
name|InputPaneVisibilityHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTInputContext
operator|::
name|onHiding
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hideToken
argument_list|)
expr_stmt|;
name|Rect
name|rect
decl_stmt|;
name|inputPane
operator|->
name|get_OccludedRect
argument_list|(
operator|&
name|rect
argument_list|)
expr_stmt|;
name|m_keyboardRect
operator|=
name|QRectF
argument_list|(
name|rect
operator|.
name|X
argument_list|,
name|rect
operator|.
name|Y
argument_list|,
name|rect
operator|.
name|Width
argument_list|,
name|rect
operator|.
name|Height
argument_list|)
expr_stmt|;
name|m_isInputPanelVisible
operator|=
operator|!
name|m_keyboardRect
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
name|Q_FUNC_INFO
literal|": failed to retrieve InputPane."
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|keyboardRect
name|QRectF
name|QWinRTInputContext
operator|::
name|keyboardRect
parameter_list|()
specifier|const
block|{
return|return
name|m_keyboardRect
return|;
block|}
end_function
begin_function
DECL|function|isInputPanelVisible
name|bool
name|QWinRTInputContext
operator|::
name|isInputPanelVisible
parameter_list|()
specifier|const
block|{
return|return
name|m_isInputPanelVisible
return|;
block|}
end_function
begin_function
DECL|function|onShowing
name|HRESULT
name|QWinRTInputContext
operator|::
name|onShowing
parameter_list|(
name|IInputPane
modifier|*
name|pane
parameter_list|,
name|IInputPaneVisibilityEventArgs
modifier|*
parameter_list|)
block|{
name|m_isInputPanelVisible
operator|=
literal|true
expr_stmt|;
name|emitInputPanelVisibleChanged
argument_list|()
expr_stmt|;
name|Rect
name|rect
decl_stmt|;
name|pane
operator|->
name|get_OccludedRect
argument_list|(
operator|&
name|rect
argument_list|)
expr_stmt|;
name|setKeyboardRect
argument_list|(
name|QRectF
argument_list|(
name|rect
operator|.
name|X
argument_list|,
name|rect
operator|.
name|Y
argument_list|,
name|rect
operator|.
name|Width
argument_list|,
name|rect
operator|.
name|Height
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onHiding
name|HRESULT
name|QWinRTInputContext
operator|::
name|onHiding
parameter_list|(
name|IInputPane
modifier|*
name|pane
parameter_list|,
name|IInputPaneVisibilityEventArgs
modifier|*
parameter_list|)
block|{
name|m_isInputPanelVisible
operator|=
literal|false
expr_stmt|;
name|emitInputPanelVisibleChanged
argument_list|()
expr_stmt|;
name|Rect
name|rect
decl_stmt|;
name|pane
operator|->
name|get_OccludedRect
argument_list|(
operator|&
name|rect
argument_list|)
expr_stmt|;
name|setKeyboardRect
argument_list|(
name|QRectF
argument_list|(
name|rect
operator|.
name|X
argument_list|,
name|rect
operator|.
name|Y
argument_list|,
name|rect
operator|.
name|Width
argument_list|,
name|rect
operator|.
name|Height
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|setKeyboardRect
name|void
name|QWinRTInputContext
operator|::
name|setKeyboardRect
parameter_list|(
specifier|const
name|QRectF
name|rect
parameter_list|)
block|{
if|if
condition|(
name|m_keyboardRect
operator|==
name|rect
condition|)
return|return;
name|m_keyboardRect
operator|=
name|rect
expr_stmt|;
name|emitKeyboardRectChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
end_ifdef
begin_function
DECL|function|showInputPanel
name|void
name|QWinRTInputContext
operator|::
name|showInputPanel
parameter_list|()
block|{
name|ICoreWindowKeyboardInput
modifier|*
name|input
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|m_window
operator|->
name|QueryInterface
argument_list|(
name|IID_PPV_ARGS
argument_list|(
operator|&
name|input
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|input
operator|->
name|put_IsKeyboardInputEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|input
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|hideInputPanel
name|void
name|QWinRTInputContext
operator|::
name|hideInputPanel
parameter_list|()
block|{
name|ICoreWindowKeyboardInput
modifier|*
name|input
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|m_window
operator|->
name|QueryInterface
argument_list|(
name|IID_PPV_ARGS
argument_list|(
operator|&
name|input
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|input
operator|->
name|put_IsKeyboardInputEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|input
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// Q_OS_WINPHONE
end_comment
begin_comment
comment|// IRawElementProviderSimple
end_comment
begin_function
DECL|function|get_ProviderOptions
name|HRESULT
name|QWinRTInputContext
operator|::
name|get_ProviderOptions
parameter_list|(
name|ProviderOptions
modifier|*
name|retVal
parameter_list|)
block|{
operator|*
name|retVal
operator|=
name|ProviderOptions_ServerSideProvider
operator||
name|ProviderOptions_UseComThreading
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|GetPatternProvider
name|HRESULT
name|QWinRTInputContext
operator|::
name|GetPatternProvider
parameter_list|(
name|PATTERNID
name|id
parameter_list|,
name|IUnknown
modifier|*
modifier|*
name|retVal
parameter_list|)
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|10002
case|:
comment|//UIA_ValuePatternId
return|return
name|QueryInterface
argument_list|(
name|__uuidof
argument_list|(
name|IValueProvider
argument_list|)
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|retVal
argument_list|)
return|;
break|break;
case|case
literal|10014
case|:
comment|//UIA_TextPatternId:
return|return
name|QueryInterface
argument_list|(
name|__uuidof
argument_list|(
name|ITextProvider
argument_list|)
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|retVal
argument_list|)
return|;
case|case
literal|10029
case|:
comment|//UIA_TextChildPatternId:
operator|*
name|retVal
operator|=
literal|nullptr
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"Unhandled pattern ID: %d"
argument_list|,
name|id
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|GetPropertyValue
name|HRESULT
name|QWinRTInputContext
operator|::
name|GetPropertyValue
parameter_list|(
name|PROPERTYID
name|idProp
parameter_list|,
name|VARIANT
modifier|*
name|retVal
parameter_list|)
block|{
switch|switch
condition|(
name|idProp
condition|)
block|{
case|case
literal|30003
case|:
comment|//UIA_ControlTypePropertyId
name|retVal
operator|->
name|vt
operator|=
name|VT_I4
expr_stmt|;
name|retVal
operator|->
name|lVal
operator|=
literal|50025
expr_stmt|;
comment|//UIA_CustomControlTypeId
break|break;
case|case
literal|30008
case|:
comment|//UIA_IsKeyboardFocusablePropertyId
case|case
literal|30009
case|:
comment|//UIA_HasKeyboardFocusPropertyId
comment|// These are probably never actually called
case|case
literal|30016
case|:
comment|//UIA_IsControlElementPropertyId
case|case
literal|30017
case|:
comment|//UIA_IsContentElementPropertyId
name|retVal
operator|->
name|vt
operator|=
name|VT_BOOL
expr_stmt|;
name|retVal
operator|->
name|boolVal
operator|=
name|VARIANT_TRUE
expr_stmt|;
break|break;
case|case
literal|30019
case|:
comment|//UIA_IsPasswordPropertyId
name|retVal
operator|->
name|vt
operator|=
name|VT_BOOL
expr_stmt|;
name|retVal
operator|->
name|boolVal
operator|=
name|VARIANT_FALSE
expr_stmt|;
break|break;
case|case
literal|30020
case|:
comment|//UIA_NativeWindowHandlePropertyId
name|retVal
operator|->
name|vt
operator|=
name|VT_PTR
expr_stmt|;
name|retVal
operator|->
name|punkVal
operator|=
name|m_window
expr_stmt|;
break|break;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_HostRawElementProvider
name|HRESULT
name|QWinRTInputContext
operator|::
name|get_HostRawElementProvider
parameter_list|(
name|IRawElementProviderSimple
modifier|*
modifier|*
name|retVal
parameter_list|)
block|{
comment|// Return the window's element provider
name|IInspectable
modifier|*
name|hostProvider
decl_stmt|;
name|HRESULT
name|hr
init|=
name|m_window
operator|->
name|get_AutomationHostProvider
argument_list|(
operator|&
name|hostProvider
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|hr
operator|=
name|hostProvider
operator|->
name|QueryInterface
argument_list|(
name|IID_PPV_ARGS
argument_list|(
name|retVal
argument_list|)
argument_list|)
expr_stmt|;
name|hostProvider
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
return|return
name|hr
return|;
block|}
end_function
begin_comment
comment|// ITextProvider
end_comment
begin_function
DECL|function|GetSelection
name|HRESULT
name|QWinRTInputContext
operator|::
name|GetSelection
parameter_list|(
name|SAFEARRAY
modifier|*
modifier|*
parameter_list|)
block|{
comment|// To be useful, requires listening to the focus object for a selection change and raising an event
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|GetVisibleRanges
name|HRESULT
name|QWinRTInputContext
operator|::
name|GetVisibleRanges
parameter_list|(
name|SAFEARRAY
modifier|*
modifier|*
parameter_list|)
block|{
comment|// To be useful, requires listening to the focus object for a selection change and raising an event
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|RangeFromChild
name|HRESULT
name|QWinRTInputContext
operator|::
name|RangeFromChild
parameter_list|(
name|IRawElementProviderSimple
modifier|*
parameter_list|,
name|ITextRangeProvider
modifier|*
modifier|*
parameter_list|)
block|{
comment|// To be useful, requires listening to the focus object for a selection change and raising an event
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|RangeFromPoint
name|HRESULT
name|QWinRTInputContext
operator|::
name|RangeFromPoint
parameter_list|(
name|UiaPoint
parameter_list|,
name|ITextRangeProvider
modifier|*
modifier|*
parameter_list|)
block|{
comment|// To be useful, requires listening to the focus object for a selection change and raising an event
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_DocumentRange
name|HRESULT
name|QWinRTInputContext
operator|::
name|get_DocumentRange
parameter_list|(
name|ITextRangeProvider
modifier|*
modifier|*
parameter_list|)
block|{
comment|// To be useful, requires listening to the focus object for a selection change and raising an event
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_SupportedTextSelection
name|HRESULT
name|QWinRTInputContext
operator|::
name|get_SupportedTextSelection
parameter_list|(
name|SupportedTextSelection
modifier|*
parameter_list|)
block|{
comment|// To be useful, requires listening to the focus object for a selection change and raising an event
return|return
name|S_OK
return|;
block|}
end_function
begin_comment
comment|// IValueProvider
end_comment
begin_function
DECL|function|SetValue
name|HRESULT
name|QWinRTInputContext
operator|::
name|SetValue
parameter_list|(
name|LPCWSTR
parameter_list|)
block|{
comment|// To be useful, requires listening to the focus object for a value change and raising an event
comment|// May be useful for inputPanel autocomplete, etc.
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_Value
name|HRESULT
name|QWinRTInputContext
operator|::
name|get_Value
parameter_list|(
name|BSTR
modifier|*
parameter_list|)
block|{
comment|// To be useful, requires listening to the focus object for a value change and raising an event
comment|// May be useful for inputPanel autocomplete, etc.
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|get_IsReadOnly
name|HRESULT
name|QWinRTInputContext
operator|::
name|get_IsReadOnly
parameter_list|(
name|BOOL
modifier|*
name|isReadOnly
parameter_list|)
block|{
comment|// isReadOnly dictates keyboard opening behavior when view is tapped.
comment|// We need to decide if the user tapped within a control which is about to receive focus...
comment|// Since this isn't possible (this function gets called before we receive the touch event),
comment|// the most platform-aligned option is to show the keyboard if an editable item has focus,
comment|// and close the keyboard if it is already open.
operator|*
name|isReadOnly
operator|=
name|m_isInputPanelVisible
operator|||
operator|!
name|inputMethodAccepted
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_OS_WINPHONE
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
