begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL3$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPLv3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or later as published by the Free ** Software Foundation and appearing in the file LICENSE.GPL included in ** the packaging of this file. Please review the following information to ** ensure the GNU General Public License version 2.0 requirements will be ** met: http://www.gnu.org/licenses/gpl-2.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwinrttheme.h"
end_include
begin_include
include|#
directive|include
file|"qwinrtmessagedialoghelper.h"
end_include
begin_include
include|#
directive|include
file|"qwinrtfiledialoghelper.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qfunctions_winrt.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPalette>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<windows.ui.h>
end_include
begin_include
include|#
directive|include
file|<windows.ui.viewmanagement.h>
end_include
begin_if
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1900
end_if
begin_include
include|#
directive|include
file|<windows.foundation.metadata.h>
end_include
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Metadata
namespace|;
end_using
begin_endif
endif|#
directive|endif
end_endif
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|ViewManagement
namespace|;
end_using
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_LOGGING_CATEGORY
argument_list|(
name|lcQpaTheme
argument_list|,
literal|"qt.qpa.theme"
argument_list|)
decl|static
DECL|function|uiSettings
name|IUISettings
modifier|*
name|uiSettings
argument_list|()
argument_list|{
specifier|static
name|ComPtr
argument_list|<
name|IUISettings
argument_list|>
name|settings
argument_list|;     if
operator|(
operator|!
name|settings
operator|)
block|{
name|HRESULT
name|hr
block|;
name|hr
operator|=
name|RoActivateInstance
argument_list|(
name|Wrappers
operator|::
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_UI_ViewManagement_UISettings
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|settings
argument_list|)
block|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
block|;     }
return|return
name|settings
operator|.
name|Get
argument_list|()
return|;
end_decl_stmt
begin_macro
unit|}  class
DECL|class|QWinRTThemePrivate
name|QWinRTThemePrivate
end_macro
begin_block
block|{
public|public:
DECL|member|palette
name|QPalette
name|palette
decl_stmt|;
block|}
end_block
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|fromColor
specifier|static
specifier|inline
name|QColor
name|fromColor
parameter_list|(
specifier|const
name|Color
modifier|&
name|color
parameter_list|)
block|{
return|return
name|QColor
argument_list|(
name|color
operator|.
name|R
argument_list|,
name|color
operator|.
name|G
argument_list|,
name|color
operator|.
name|B
argument_list|,
name|color
operator|.
name|A
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1900
end_if
begin_function
DECL|function|uiColorSettings
specifier|static
name|bool
name|uiColorSettings
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|value
parameter_list|,
name|UIElementType
name|type
parameter_list|,
name|Color
modifier|*
name|color
parameter_list|)
block|{
specifier|static
name|ComPtr
argument_list|<
name|IApiInformationStatics
argument_list|>
name|apiInformationStatics
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
if|if
condition|(
operator|!
name|apiInformationStatics
condition|)
block|{
name|hr
operator|=
name|RoGetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Foundation_Metadata_ApiInformation
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|apiInformationStatics
argument_list|)
argument_list|)
expr_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Could not get ApiInformationStatics"
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|const
name|HStringReference
name|enumRef
argument_list|(
literal|L"Windows.UI.ViewManagement.UIElementType"
argument_list|)
decl_stmt|;
name|HStringReference
name|valueRef
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|boolean
name|exists
decl_stmt|;
name|hr
operator|=
name|apiInformationStatics
operator|->
name|IsEnumNamedValuePresent
argument_list|(
name|enumRef
operator|.
name|Get
argument_list|()
argument_list|,
name|valueRef
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|exists
argument_list|)
expr_stmt|;
if|if
condition|(
name|hr
operator|!=
name|S_OK
operator|||
operator|!
name|exists
condition|)
return|return
literal|false
return|;
return|return
name|SUCCEEDED
argument_list|(
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|type
argument_list|,
name|color
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeColorSettings
specifier|static
name|void
name|nativeColorSettings
parameter_list|(
name|QPalette
modifier|&
name|p
parameter_list|)
block|{
name|Color
name|color
decl_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"ActiveCaption"
argument_list|,
name|UIElementType_ActiveCaption
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ToolTipBase
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"Background"
argument_list|,
name|UIElementType_Background
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"ButtonFace"
argument_list|,
name|UIElementType_ButtonFace
argument_list|,
operator|&
name|color
argument_list|)
condition|)
block|{
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
operator|.
name|lighter
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
operator|.
name|lighter
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
operator|.
name|dark
argument_list|(
literal|130
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
operator|.
name|dark
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"ButtonText"
argument_list|,
name|UIElementType_ButtonText
argument_list|,
operator|&
name|color
argument_list|)
condition|)
block|{
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"CaptionText"
argument_list|,
name|UIElementType_CaptionText
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ToolTipText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"Highlight"
argument_list|,
name|UIElementType_Highlight
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"HighlightText"
argument_list|,
name|UIElementType_HighlightText
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"Window"
argument_list|,
name|UIElementType_Window
argument_list|,
operator|&
name|color
argument_list|)
condition|)
block|{
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"Hotlight"
argument_list|,
name|UIElementType_Hotlight
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|BrightText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
comment|//Phone related
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"PopupBackground"
argument_list|,
name|UIElementType_PopupBackground
argument_list|,
operator|&
name|color
argument_list|)
condition|)
block|{
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ToolTipBase
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"NonTextMedium"
argument_list|,
name|UIElementType_NonTextMedium
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"NonTextMediumHigh"
argument_list|,
name|UIElementType_NonTextMediumHigh
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"NonTextHigh"
argument_list|,
name|UIElementType_NonTextHigh
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"NonTextMediumLow"
argument_list|,
name|UIElementType_NonTextMediumLow
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"NonTextLow"
argument_list|,
name|UIElementType_NonTextLow
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"TextHigh"
argument_list|,
name|UIElementType_TextHigh
argument_list|,
operator|&
name|color
argument_list|)
condition|)
block|{
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"TextMedium"
argument_list|,
name|UIElementType_TextMedium
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ToolTipText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"AccentColor"
argument_list|,
name|UIElementType_AccentColor
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"PageBackground"
argument_list|,
name|UIElementType_PageBackground
argument_list|,
operator|&
name|color
argument_list|)
condition|)
block|{
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uiColorSettings
argument_list|(
literal|L"TextContrastWithHigh"
argument_list|,
name|UIElementType_TextContrastWithHigh
argument_list|,
operator|&
name|color
argument_list|)
condition|)
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|BrightText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// _MSC_VER>= 1900
end_comment
begin_function
DECL|function|nativeColorSettings
specifier|static
name|void
name|nativeColorSettings
parameter_list|(
name|QPalette
modifier|&
name|p
parameter_list|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|Color
name|color
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_PopupBackground
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ToolTipBase
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_NonTextMedium
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_NonTextMediumHigh
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_NonTextHigh
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_NonTextMediumLow
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_NonTextLow
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_TextHigh
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_TextMedium
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ToolTipText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_AccentColor
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_PageBackground
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_TextContrastWithHigh
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|BrightText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_ActiveCaption
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ToolTipBase
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_Background
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|AlternateBase
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_ButtonFace
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
operator|.
name|lighter
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
operator|.
name|lighter
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Mid
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
operator|.
name|dark
argument_list|(
literal|130
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
operator|.
name|dark
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_ButtonText
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_CaptionText
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ToolTipText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_Highlight
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_HighlightText
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_Window
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|UIElementColor
argument_list|(
name|UIElementType_Hotlight
argument_list|,
operator|&
name|color
argument_list|)
expr_stmt|;
name|Q_ASSERT_SUCCEEDED
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|BrightText
argument_list|,
name|fromColor
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// _MSC_VER< 1900
end_comment
begin_constructor
DECL|function|QWinRTTheme
name|QWinRTTheme
operator|::
name|QWinRTTheme
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QWinRTThemePrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTTheme
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaTheme
argument_list|)
operator|<<
name|__FUNCTION__
expr_stmt|;
name|nativeColorSettings
argument_list|(
name|d
operator|->
name|palette
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|usePlatformNativeDialog
name|bool
name|QWinRTTheme
operator|::
name|usePlatformNativeDialog
parameter_list|(
name|DialogType
name|type
parameter_list|)
specifier|const
block|{
name|qCDebug
argument_list|(
name|lcQpaTheme
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|type
expr_stmt|;
specifier|static
name|bool
name|useNativeDialogs
init|=
name|qEnvironmentVariableIsSet
argument_list|(
literal|"QT_USE_WINRT_NATIVE_DIALOGS"
argument_list|)
condition|?
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_USE_WINRT_NATIVE_DIALOGS"
argument_list|)
else|:
literal|true
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|FileDialog
operator|||
name|type
operator|==
name|MessageDialog
condition|)
return|return
name|useNativeDialogs
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|createPlatformDialogHelper
name|QPlatformDialogHelper
modifier|*
name|QWinRTTheme
operator|::
name|createPlatformDialogHelper
parameter_list|(
name|DialogType
name|type
parameter_list|)
specifier|const
block|{
name|qCDebug
argument_list|(
name|lcQpaTheme
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|type
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FileDialog
case|:
return|return
operator|new
name|QWinRTFileDialogHelper
return|;
case|case
name|MessageDialog
case|:
return|return
operator|new
name|QWinRTMessageDialogHelper
argument_list|(
name|this
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QPlatformTheme
operator|::
name|createPlatformDialogHelper
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|styleHint
name|QVariant
name|QWinRTTheme
operator|::
name|styleHint
parameter_list|(
name|QPlatformIntegration
operator|::
name|StyleHint
name|hint
parameter_list|)
block|{
name|qCDebug
argument_list|(
name|lcQpaTheme
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|hint
expr_stmt|;
name|HRESULT
name|hr
decl_stmt|;
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|QPlatformIntegration
operator|::
name|CursorFlashTime
case|:
block|{
name|quint32
name|blinkRate
decl_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|get_CaretBlinkRate
argument_list|(
operator|&
name|blinkRate
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to get caret blink rate"
argument_list|,
argument|return defaultThemeHint(CursorFlashTime)
argument_list|)
empty_stmt|;
return|return
name|blinkRate
return|;
block|}
case|case
name|QPlatformIntegration
operator|::
name|KeyboardInputInterval
case|:
return|return
name|defaultThemeHint
argument_list|(
name|KeyboardInputInterval
argument_list|)
return|;
case|case
name|QPlatformIntegration
operator|::
name|MouseDoubleClickInterval
case|:
block|{
name|quint32
name|doubleClickTime
decl_stmt|;
name|hr
operator|=
name|uiSettings
argument_list|()
operator|->
name|get_DoubleClickTime
argument_list|(
operator|&
name|doubleClickTime
argument_list|)
expr_stmt|;
name|RETURN_IF_FAILED
argument_list|(
literal|"Failed to get double click time"
argument_list|,
argument|return defaultThemeHint(MouseDoubleClickInterval)
argument_list|)
empty_stmt|;
return|return
name|doubleClickTime
return|;
block|}
case|case
name|QPlatformIntegration
operator|::
name|StartDragDistance
case|:
return|return
name|defaultThemeHint
argument_list|(
name|StartDragDistance
argument_list|)
return|;
case|case
name|QPlatformIntegration
operator|::
name|StartDragTime
case|:
return|return
name|defaultThemeHint
argument_list|(
name|StartDragTime
argument_list|)
return|;
case|case
name|QPlatformIntegration
operator|::
name|KeyboardAutoRepeatRate
case|:
return|return
name|defaultThemeHint
argument_list|(
name|KeyboardAutoRepeatRate
argument_list|)
return|;
case|case
name|QPlatformIntegration
operator|::
name|ShowIsFullScreen
case|:
return|return
literal|false
return|;
case|case
name|QPlatformIntegration
operator|::
name|PasswordMaskDelay
case|:
return|return
name|defaultThemeHint
argument_list|(
name|PasswordMaskDelay
argument_list|)
return|;
case|case
name|QPlatformIntegration
operator|::
name|FontSmoothingGamma
case|:
return|return
name|qreal
argument_list|(
literal|1.7
argument_list|)
return|;
case|case
name|QPlatformIntegration
operator|::
name|StartDragVelocity
case|:
return|return
name|defaultThemeHint
argument_list|(
name|StartDragVelocity
argument_list|)
return|;
case|case
name|QPlatformIntegration
operator|::
name|UseRtlExtensions
case|:
return|return
literal|false
return|;
case|case
name|QPlatformIntegration
operator|::
name|PasswordMaskCharacter
case|:
return|return
name|defaultThemeHint
argument_list|(
name|PasswordMaskCharacter
argument_list|)
return|;
case|case
name|QPlatformIntegration
operator|::
name|SetFocusOnTouchRelease
case|:
return|return
literal|true
return|;
case|case
name|QPlatformIntegration
operator|::
name|ShowIsMaximized
case|:
return|return
literal|true
return|;
case|case
name|QPlatformIntegration
operator|::
name|MousePressAndHoldInterval
case|:
return|return
name|defaultThemeHint
argument_list|(
name|MousePressAndHoldInterval
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|palette
specifier|const
name|QPalette
modifier|*
name|QWinRTTheme
operator|::
name|palette
parameter_list|(
name|Palette
name|type
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWinRTTheme
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|lcQpaTheme
argument_list|)
operator|<<
name|__FUNCTION__
operator|<<
name|type
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|SystemPalette
condition|)
return|return
operator|&
name|d
operator|->
name|palette
return|;
return|return
name|QPlatformTheme
operator|::
name|palette
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
