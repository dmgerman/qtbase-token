begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwinrtbackingstore.h"
end_include
begin_include
include|#
directive|include
file|"qwinrtscreen.h"
end_include
begin_include
include|#
directive|include
file|"qwinrtwindow.h"
end_include
begin_include
include|#
directive|include
file|"qwinrteglcontext.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLContext>
end_include
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_include
include|#
directive|include
file|<GLES2/gl2ext.h>
end_include
begin_comment
comment|// Generated shader headers
end_comment
begin_include
include|#
directive|include
file|"blitps.h"
end_include
begin_include
include|#
directive|include
file|"blitvs.h"
end_include
begin_namespace
namespace|namespace
block|{
comment|// Utility namespace for writing out an ANGLE-compatible binary blob
comment|// Must match packaged ANGLE
enum_decl|enum :
name|quint32
block|{
name|AngleMajorVersion
init|=
literal|1
block|,
name|AngleMinorVersion
init|=
literal|3
block|}
enum_decl|;
DECL|struct|ShaderString
struct|struct
name|ShaderString
block|{
DECL|function|ShaderString
name|ShaderString
parameter_list|(
specifier|const
name|char
modifier|*
name|data
init|=
literal|0
parameter_list|)
member_init_list|:
name|data
argument_list|(
name|data
argument_list|)
block|{ }
DECL|member|data
specifier|const
name|char
modifier|*
name|data
decl_stmt|;
block|}
struct|;
comment|// ANGLE stream compatibility - when size_t is 32-bit, QDataStream::writeBytes() also works
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|ShaderString
modifier|&
name|shaderString
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shaderString
operator|.
name|data
condition|)
return|return
name|stream
operator|<<
name|size_t
argument_list|(
literal|0
argument_list|)
return|;
name|size_t
name|len
init|=
name|strlen
argument_list|(
name|shaderString
operator|.
name|data
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|len
expr_stmt|;
name|stream
operator|.
name|writeRawData
argument_list|(
name|shaderString
operator|.
name|data
argument_list|,
name|int
argument_list|(
name|len
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|stream
return|;
block|}
DECL|struct|Attribute
struct|struct
name|Attribute
block|{
DECL|function|Attribute
name|Attribute
parameter_list|(
name|GLenum
name|type
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|name
init|=
literal|0
parameter_list|,
name|quint32
name|index
init|=
literal|0
parameter_list|)
member_init_list|:
name|type
argument_list|(
name|type
argument_list|)
member_init_list|,
name|name
argument_list|(
name|name
argument_list|)
member_init_list|,
name|index
argument_list|(
name|index
argument_list|)
block|{ }
DECL|member|type
name|GLenum
name|type
decl_stmt|;
DECL|member|name
name|ShaderString
name|name
decl_stmt|;
DECL|member|index
name|quint32
name|index
decl_stmt|;
block|}
struct|;
DECL|struct|Sampler
struct|struct
name|Sampler
block|{
DECL|enum|TextureType
DECL|enumerator|Texture2D
DECL|enumerator|TextureCube
enum|enum
name|TextureType
block|{
name|Texture2D
block|,
name|TextureCube
block|}
enum|;
DECL|function|Sampler
name|Sampler
parameter_list|(
name|bool
name|active
init|=
literal|false
parameter_list|,
name|GLint
name|unit
init|=
literal|0
parameter_list|,
name|TextureType
name|type
init|=
name|Texture2D
parameter_list|)
member_init_list|:
name|active
argument_list|(
name|active
argument_list|)
member_init_list|,
name|unit
argument_list|(
name|unit
argument_list|)
member_init_list|,
name|type
argument_list|(
name|type
argument_list|)
block|{ }
DECL|member|active
name|bool
name|active
decl_stmt|;
DECL|member|unit
name|GLint
name|unit
decl_stmt|;
DECL|member|type
name|TextureType
name|type
decl_stmt|;
block|}
struct|;
DECL|struct|Uniform
struct|struct
name|Uniform
block|{
DECL|function|Uniform
name|Uniform
parameter_list|()
block|{ }
DECL|function|Uniform
name|Uniform
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|quint32
name|precision
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|quint32
name|arraySize
parameter_list|,
name|quint32
name|psRegisterIndex
parameter_list|,
name|quint32
name|vsRegisterIndex
parameter_list|,
name|quint32
name|registerCount
parameter_list|)
member_init_list|:
name|type
argument_list|(
name|type
argument_list|)
member_init_list|,
name|precision
argument_list|(
name|precision
argument_list|)
member_init_list|,
name|name
argument_list|(
name|name
argument_list|)
member_init_list|,
name|arraySize
argument_list|(
name|arraySize
argument_list|)
member_init_list|,
name|psRegisterIndex
argument_list|(
name|psRegisterIndex
argument_list|)
member_init_list|,
name|vsRegisterIndex
argument_list|(
name|vsRegisterIndex
argument_list|)
member_init_list|,
name|registerCount
argument_list|(
name|registerCount
argument_list|)
block|{ }
DECL|member|type
name|GLenum
name|type
decl_stmt|;
DECL|member|precision
name|quint32
name|precision
decl_stmt|;
DECL|member|name
name|ShaderString
name|name
decl_stmt|;
DECL|member|arraySize
name|quint32
name|arraySize
decl_stmt|;
DECL|member|psRegisterIndex
name|quint32
name|psRegisterIndex
decl_stmt|;
DECL|member|vsRegisterIndex
name|quint32
name|vsRegisterIndex
decl_stmt|;
DECL|member|registerCount
name|quint32
name|registerCount
decl_stmt|;
block|}
struct|;
DECL|struct|UniformIndex
struct|struct
name|UniformIndex
block|{
DECL|function|UniformIndex
name|UniformIndex
parameter_list|(
specifier|const
name|char
modifier|*
name|name
init|=
literal|0
parameter_list|,
name|quint32
name|element
init|=
literal|0
parameter_list|,
name|quint32
name|index
init|=
literal|0
parameter_list|)
member_init_list|:
name|name
argument_list|(
name|name
argument_list|)
member_init_list|,
name|element
argument_list|(
name|element
argument_list|)
member_init_list|,
name|index
argument_list|(
name|index
argument_list|)
block|{ }
DECL|member|name
name|ShaderString
name|name
decl_stmt|;
DECL|member|element
name|quint32
name|element
decl_stmt|;
DECL|member|index
name|quint32
name|index
decl_stmt|;
block|}
struct|;
DECL|function|createAngleBinary
specifier|static
specifier|const
name|QByteArray
name|createAngleBinary
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|Attribute
argument_list|>
modifier|&
name|attributes
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|Sampler
argument_list|>
modifier|&
name|textureSamplers
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|Sampler
argument_list|>
modifier|&
name|vertexSamplers
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|Uniform
argument_list|>
modifier|&
name|uniforms
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|UniformIndex
argument_list|>
modifier|&
name|uniformIndex
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|pixelShader
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|vertexShader
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|geometryShader
init|=
name|QByteArray
argument_list|()
parameter_list|,
name|bool
name|usesPointSize
init|=
literal|false
parameter_list|)
block|{
name|QByteArray
name|binary
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|binary
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setByteOrder
argument_list|(
name|QDataStream
operator|::
name|LittleEndian
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|quint32
argument_list|(
name|GL_PROGRAM_BINARY_ANGLE
argument_list|)
operator|<<
name|qint32
argument_list|(
name|AngleMajorVersion
argument_list|)
operator|<<
name|qint32
argument_list|(
name|AngleMinorVersion
argument_list|)
expr_stmt|;
comment|// Vertex attributes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|<
name|attributes
operator|.
name|size
argument_list|()
condition|)
name|stream
operator|<<
name|quint32
argument_list|(
name|attributes
index|[
name|i
index|]
operator|.
name|type
argument_list|)
operator|<<
name|attributes
index|[
name|i
index|]
operator|.
name|name
operator|<<
name|attributes
index|[
name|i
index|]
operator|.
name|index
expr_stmt|;
else|else
name|stream
operator|<<
name|quint32
argument_list|(
name|GL_NONE
argument_list|)
operator|<<
name|ShaderString
argument_list|()
operator|<<
name|qint32
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Texture units
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|<
name|textureSamplers
operator|.
name|size
argument_list|()
condition|)
name|stream
operator|<<
name|textureSamplers
index|[
name|i
index|]
operator|.
name|active
operator|<<
name|textureSamplers
index|[
name|i
index|]
operator|.
name|unit
operator|<<
name|qint32
argument_list|(
name|textureSamplers
index|[
name|i
index|]
operator|.
name|type
argument_list|)
expr_stmt|;
else|else
name|stream
operator|<<
literal|false
operator|<<
name|qint32
argument_list|(
literal|0
argument_list|)
operator|<<
name|qint32
argument_list|(
name|Sampler
operator|::
name|Texture2D
argument_list|)
expr_stmt|;
block|}
comment|// Vertex texture units
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|<
name|vertexSamplers
operator|.
name|size
argument_list|()
condition|)
name|stream
operator|<<
name|vertexSamplers
index|[
name|i
index|]
operator|.
name|active
operator|<<
name|vertexSamplers
index|[
name|i
index|]
operator|.
name|unit
operator|<<
name|qint32
argument_list|(
name|vertexSamplers
index|[
name|i
index|]
operator|.
name|type
argument_list|)
expr_stmt|;
else|else
name|stream
operator|<<
literal|false
operator|<<
name|qint32
argument_list|(
literal|0
argument_list|)
operator|<<
name|qint32
argument_list|(
name|Sampler
operator|::
name|Texture2D
argument_list|)
expr_stmt|;
block|}
name|stream
operator|<<
name|vertexSamplers
operator|.
name|size
argument_list|()
operator|<<
name|textureSamplers
operator|.
name|size
argument_list|()
operator|<<
name|usesPointSize
expr_stmt|;
name|stream
operator|<<
name|size_t
argument_list|(
name|uniforms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|Uniform
modifier|&
name|uniform
decl|,
name|uniforms
control|)
block|{
name|stream
operator|<<
name|uniform
operator|.
name|type
operator|<<
name|uniform
operator|.
name|precision
operator|<<
name|uniform
operator|.
name|name
operator|<<
name|uniform
operator|.
name|arraySize
operator|<<
name|uniform
operator|.
name|psRegisterIndex
operator|<<
name|uniform
operator|.
name|vsRegisterIndex
operator|<<
name|uniform
operator|.
name|registerCount
expr_stmt|;
block|}
name|stream
operator|<<
name|size_t
argument_list|(
name|uniformIndex
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|UniformIndex
modifier|&
name|index
decl|,
name|uniformIndex
control|)
name|stream
operator|<<
name|index
operator|.
name|name
operator|<<
name|index
operator|.
name|element
operator|<<
name|index
operator|.
name|index
expr_stmt|;
name|stream
operator|<<
name|quint32
argument_list|(
name|pixelShader
operator|.
name|size
argument_list|()
argument_list|)
operator|<<
name|quint32
argument_list|(
name|vertexShader
operator|.
name|size
argument_list|()
argument_list|)
operator|<<
name|quint32
argument_list|(
name|geometryShader
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeRawData
argument_list|(
name|pixelShader
operator|.
name|constData
argument_list|()
argument_list|,
name|pixelShader
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|writeRawData
argument_list|(
name|vertexShader
operator|.
name|constData
argument_list|()
argument_list|,
name|vertexShader
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|geometryShader
operator|.
name|isEmpty
argument_list|()
condition|)
name|stream
operator|.
name|writeRawData
argument_list|(
name|geometryShader
operator|.
name|constData
argument_list|()
argument_list|,
name|geometryShader
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|binary
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace
end_comment
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|normCoords
specifier|static
specifier|const
name|GLfloat
name|normCoords
index|[]
init|=
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|quadCoords
specifier|static
specifier|const
name|GLfloat
name|quadCoords
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QWinRTBackingStore
name|QWinRTBackingStore
operator|::
name|QWinRTBackingStore
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QPlatformBackingStore
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_context
argument_list|(
operator|new
name|QOpenGLContext
argument_list|)
member_init_list|,
name|m_shaderProgram
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_fbo
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_texture
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_screen
argument_list|(
cast|static_cast
argument_list|<
name|QWinRTScreen
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
argument_list|)
member_init_list|,
name|m_initialized
argument_list|(
literal|false
argument_list|)
block|{
name|window
operator|->
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
comment|// Required for flipping, but could be done in the swap
block|}
end_constructor
begin_function
DECL|function|initialize
name|bool
name|QWinRTBackingStore
operator|::
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|m_initialized
condition|)
return|return
literal|true
return|;
name|m_context
operator|->
name|setFormat
argument_list|(
name|window
argument_list|()
operator|->
name|requestedFormat
argument_list|()
argument_list|)
expr_stmt|;
name|m_context
operator|->
name|setScreen
argument_list|(
name|window
argument_list|()
operator|->
name|screen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_context
operator|->
name|create
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|m_context
operator|->
name|makeCurrent
argument_list|(
name|window
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
name|glGenFramebuffers
argument_list|(
literal|1
argument_list|,
operator|&
name|m_fbo
argument_list|)
expr_stmt|;
name|glGenRenderbuffers
argument_list|(
literal|1
argument_list|,
operator|&
name|m_rbo
argument_list|)
expr_stmt|;
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|m_texture
argument_list|)
expr_stmt|;
name|m_shaderProgram
operator|=
name|glCreateProgram
argument_list|()
expr_stmt|;
if|#
directive|if
literal|0
comment|// Standard GLES passthrough shader program
block|static const char *vertexShaderSource =             "attribute vec4 pos0;\n"             "attribute vec2 tex0;\n"             "varying vec2 coord;\n"             "void main() {\n"             "   coord = tex0;\n"             "   gl_Position = pos0;\n"             "}\n";     static const char *fragmentShaderSource =             "uniform sampler2D texture;\n"             "varying highp vec2 coord;\n"             "void main() {\n"             "   gl_FragColor = texture2D(texture, coord);\n"             "}\n";     GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);     glShaderSource(vertexShader, 1,&vertexShaderSource, NULL);     glCompileShader(vertexShader);     GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);     glShaderSource(fragmentShader, 1,&fragmentShaderSource, NULL);     glCompileShader(fragmentShader);     glAttachShader(m_shaderProgram, vertexShader);     glAttachShader(m_shaderProgram, fragmentShader);     glLinkProgram(m_shaderProgram);
else|#
directive|else
comment|// Precompiled passthrough shader
name|QVector
argument_list|<
name|Attribute
argument_list|>
name|attributes
init|=
name|QVector
argument_list|<
name|Attribute
argument_list|>
argument_list|()
operator|<<
name|Attribute
argument_list|(
name|GL_FLOAT_VEC4
argument_list|,
literal|"pos0"
argument_list|,
literal|0
argument_list|)
operator|<<
name|Attribute
argument_list|(
name|GL_FLOAT_VEC2
argument_list|,
literal|"tex0"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|Sampler
argument_list|>
name|textureSamplers
init|=
name|QVector
argument_list|<
name|Sampler
argument_list|>
argument_list|()
operator|<<
name|Sampler
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|,
name|Sampler
operator|::
name|Texture2D
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|Sampler
argument_list|>
name|vertexSamplers
decl_stmt|;
name|QVector
argument_list|<
name|Uniform
argument_list|>
name|uniforms
init|=
name|QVector
argument_list|<
name|Uniform
argument_list|>
argument_list|()
operator|<<
name|Uniform
argument_list|(
name|GL_SAMPLER_2D
argument_list|,
literal|0
argument_list|,
literal|"texture"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|UniformIndex
argument_list|>
name|uniformsIndex
init|=
name|QVector
argument_list|<
name|UniformIndex
argument_list|>
argument_list|()
operator|<<
name|UniformIndex
argument_list|(
literal|"texture"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QByteArray
name|pixelShader
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|q_blitps
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|q_blitps
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|vertexShader
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|q_blitvs
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|q_blitvs
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|binary
init|=
name|createAngleBinary
argument_list|(
name|attributes
argument_list|,
name|textureSamplers
argument_list|,
name|vertexSamplers
argument_list|,
name|uniforms
argument_list|,
name|uniformsIndex
argument_list|,
name|pixelShader
argument_list|,
name|vertexShader
argument_list|)
decl_stmt|;
name|glProgramBinaryOES
argument_list|(
name|m_shaderProgram
argument_list|,
name|GL_PROGRAM_BINARY_ANGLE
argument_list|,
name|binary
operator|.
name|constData
argument_list|()
argument_list|,
name|binary
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|m_context
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
name|m_initialized
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_destructor
DECL|function|~QWinRTBackingStore
name|QWinRTBackingStore
operator|::
name|~
name|QWinRTBackingStore
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_initialized
condition|)
return|return;
name|glDeleteBuffers
argument_list|(
literal|1
argument_list|,
operator|&
name|m_fbo
argument_list|)
expr_stmt|;
name|glDeleteRenderbuffers
argument_list|(
literal|1
argument_list|,
operator|&
name|m_rbo
argument_list|)
expr_stmt|;
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|m_texture
argument_list|)
expr_stmt|;
name|glDeleteProgram
argument_list|(
name|m_shaderProgram
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QWinRTBackingStore
operator|::
name|paintDevice
parameter_list|()
block|{
return|return
name|m_paintDevice
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QWinRTBackingStore
operator|::
name|flush
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|offset
argument_list|)
if|if
condition|(
name|m_size
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
specifier|const
name|QImage
modifier|*
name|image
init|=
cast|static_cast
argument_list|<
name|QImage
operator|*
argument_list|>
argument_list|(
name|m_paintDevice
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|m_context
operator|->
name|makeCurrent
argument_list|(
name|window
argument_list|)
expr_stmt|;
comment|// Blitting the entire image width trades zero image copy/relayout for a larger texture upload.
comment|// Since we're blitting the whole width anyway, the boundingRect() is used in the assumption that
comment|// we don't repeat upload. This is of course dependent on the distance between update regions.
comment|// Ideally, we would use the GL_EXT_unpack_subimage extension, which should be possible to implement
comment|// since D3D11_MAPPED_SUBRESOURCE supports RowPitch (see below).
comment|// Note that single-line blits in a loop are *very* slow, so reducing calls to glTexSubImage2D
comment|// is probably a good idea anyway.
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
name|QRect
name|bounds
init|=
name|region
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|glTexSubImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|bounds
operator|.
name|y
argument_list|()
argument_list|,
name|m_size
operator|.
name|width
argument_list|()
argument_list|,
name|bounds
operator|.
name|height
argument_list|()
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|image
operator|->
name|scanLine
argument_list|(
name|bounds
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Implement GL_EXT_unpack_subimage in ANGLE for more minimal uploads
comment|//glPixelStorei(GL_UNPACK_ROW_LENGTH, image->bytesPerLine());
comment|//glTexSubImage2D(GL_TEXTURE_2D, 0, bounds.x(), bounds.y(), bounds.width(), bounds.height(),
comment|//                GL_BGRA_EXT, GL_UNSIGNED_BYTE, image->scanLine(bounds.y()) + bounds.x() * 4);
comment|// Bind render buffer
name|glBindFramebuffer
argument_list|(
name|GL_FRAMEBUFFER
argument_list|,
name|m_fbo
argument_list|)
expr_stmt|;
name|glFramebufferRenderbuffer
argument_list|(
name|GL_FRAMEBUFFER
argument_list|,
name|GL_COLOR_ATTACHMENT0
argument_list|,
name|GL_RENDERBUFFER
argument_list|,
name|m_rbo
argument_list|)
expr_stmt|;
comment|// Bind position
name|glUseProgram
argument_list|(
name|m_shaderProgram
argument_list|)
expr_stmt|;
name|glEnableVertexAttribArray
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|glVertexAttribPointer
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|0
argument_list|,
name|normCoords
argument_list|)
expr_stmt|;
name|glEnableVertexAttribArray
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|glVertexAttribPointer
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|0
argument_list|,
name|quadCoords
argument_list|)
expr_stmt|;
comment|// Render
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_size
operator|.
name|width
argument_list|()
argument_list|,
name|m_size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Unbind
name|glDisableVertexAttribArray
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|glDisableVertexAttribArray
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|glUseProgram
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_FRAMEBUFFER
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// fast blit - TODO: perform the blit inside swap buffers instead
name|glBindFramebuffer
argument_list|(
name|GL_READ_FRAMEBUFFER_ANGLE
argument_list|,
name|m_fbo
argument_list|)
expr_stmt|;
name|glBindFramebuffer
argument_list|(
name|GL_DRAW_FRAMEBUFFER_ANGLE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glBlitFramebufferANGLE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_size
operator|.
name|width
argument_list|()
argument_list|,
name|m_size
operator|.
name|height
argument_list|()
argument_list|,
comment|// TODO: blit only the changed rectangle
literal|0
argument_list|,
literal|0
argument_list|,
name|m_size
operator|.
name|width
argument_list|()
argument_list|,
name|m_size
operator|.
name|height
argument_list|()
argument_list|,
name|GL_COLOR_BUFFER_BIT
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|m_context
operator|->
name|swapBuffers
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|m_context
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resize
name|void
name|QWinRTBackingStore
operator|::
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|staticContents
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|staticContents
argument_list|)
if|if
condition|(
operator|!
name|initialize
argument_list|()
condition|)
return|return;
if|if
condition|(
name|m_size
operator|==
name|size
condition|)
return|return;
name|m_size
operator|=
name|size
expr_stmt|;
if|if
condition|(
name|m_size
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|m_paintDevice
operator|.
name|reset
argument_list|(
operator|new
name|QImage
argument_list|(
name|m_size
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
argument_list|)
expr_stmt|;
name|m_context
operator|->
name|makeCurrent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
comment|// Input texture
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|m_size
operator|.
name|width
argument_list|()
argument_list|,
name|m_size
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_WRAP_T
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Render buffer
name|glBindRenderbuffer
argument_list|(
name|GL_RENDERBUFFER
argument_list|,
name|m_rbo
argument_list|)
expr_stmt|;
name|glRenderbufferStorage
argument_list|(
name|GL_RENDERBUFFER
argument_list|,
name|GL_BGRA8_EXT
argument_list|,
name|m_size
operator|.
name|width
argument_list|()
argument_list|,
name|m_size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|glBindRenderbuffer
argument_list|(
name|GL_RENDERBUFFER
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_context
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QWinRTBackingStore
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|region
argument_list|)
name|resize
argument_list|(
name|window
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QWinRTBackingStore
operator|::
name|endPaint
parameter_list|()
block|{ }
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
