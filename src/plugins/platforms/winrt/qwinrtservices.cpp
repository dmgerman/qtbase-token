begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwinrtservices.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QUrl>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfunctions_winrt.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.h>
end_include
begin_include
include|#
directive|include
file|<windows.storage.h>
end_include
begin_include
include|#
directive|include
file|<windows.system.h>
end_include
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Storage
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|System
namespace|;
end_using
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QWinRTServicesPrivate
class|class
name|QWinRTServicesPrivate
block|{
public|public:
DECL|member|uriFactory
name|ComPtr
argument_list|<
name|IUriRuntimeClassFactory
argument_list|>
name|uriFactory
decl_stmt|;
DECL|member|fileFactory
name|ComPtr
argument_list|<
name|IStorageFileStatics
argument_list|>
name|fileFactory
decl_stmt|;
DECL|member|launcher
name|ComPtr
argument_list|<
name|ILauncherStatics
argument_list|>
name|launcher
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWinRTServices
name|QWinRTServices
operator|::
name|QWinRTServices
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QWinRTServicesPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTServices
argument_list|)
expr_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|hr
operator|=
name|RoGetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Foundation_Uri
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|d
operator|->
name|uriFactory
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|qPrintable
argument_list|(
name|qt_error_string
argument_list|(
name|hr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|RoGetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Storage_StorageFile
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|d
operator|->
name|fileFactory
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|qPrintable
argument_list|(
name|qt_error_string
argument_list|(
name|hr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|RoGetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_System_Launcher
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|d
operator|->
name|launcher
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|,
name|Q_FUNC_INFO
argument_list|,
name|qPrintable
argument_list|(
name|qt_error_string
argument_list|(
name|hr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWinRTServices
name|QWinRTServices
operator|::
name|~
name|QWinRTServices
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|openUrl
name|bool
name|QWinRTServices
operator|::
name|openUrl
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTServices
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IUriRuntimeClass
argument_list|>
name|uri
decl_stmt|;
name|QString
name|urlString
init|=
name|url
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HStringReference
name|uriString
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|urlString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|urlString
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|HRESULT
name|hr
init|=
name|d
operator|->
name|uriFactory
operator|->
name|CreateUri
argument_list|(
name|uriString
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|uri
argument_list|)
decl_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to create URI from QUrl."
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|bool
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|launcher
operator|->
name|LaunchUriAsync
argument_list|(
name|uri
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to start URI launch."
argument_list|)
expr_stmt|;
name|boolean
name|result
decl_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to launch URI."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|openDocument
name|bool
name|QWinRTServices
operator|::
name|openDocument
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTServices
argument_list|)
expr_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IStorageFile
argument_list|>
name|file
decl_stmt|;
block|{
specifier|const
name|QString
name|pathString
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|url
operator|.
name|toLocalFile
argument_list|()
argument_list|)
decl_stmt|;
name|HStringReference
name|path
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|pathString
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|pathString
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|StorageFile
modifier|*
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|fileFactory
operator|->
name|GetFileFromPathAsync
argument_list|(
name|path
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to initialize file URI."
argument_list|)
expr_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
name|file
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to get file URI."
argument_list|)
expr_stmt|;
block|}
name|boolean
name|result
decl_stmt|;
block|{
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|bool
argument_list|>
argument_list|>
name|op
decl_stmt|;
name|hr
operator|=
name|d
operator|->
name|launcher
operator|->
name|LaunchFileAsync
argument_list|(
name|file
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to start file launch."
argument_list|)
expr_stmt|;
name|hr
operator|=
name|QWinRTFunctions
operator|::
name|await
argument_list|(
name|op
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to launch file."
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
