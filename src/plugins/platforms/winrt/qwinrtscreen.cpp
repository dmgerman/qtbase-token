begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwinrtscreen.h"
end_include
begin_include
include|#
directive|include
file|"qwinrtbackingstore.h"
end_include
begin_include
include|#
directive|include
file|"qwinrtinputcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwinrtcursor.h"
end_include
begin_include
include|#
directive|include
file|"qwinrteglcontext.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QSurfaceFormat>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qeglconvenience_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<windows.system.h>
end_include
begin_include
include|#
directive|include
file|<Windows.Applicationmodel.h>
end_include
begin_include
include|#
directive|include
file|<Windows.ApplicationModel.core.h>
end_include
begin_include
include|#
directive|include
file|<windows.devices.input.h>
end_include
begin_include
include|#
directive|include
file|<windows.ui.h>
end_include
begin_include
include|#
directive|include
file|<windows.ui.core.h>
end_include
begin_include
include|#
directive|include
file|<windows.ui.input.h>
end_include
begin_include
include|#
directive|include
file|<windows.ui.viewmanagement.h>
end_include
begin_include
include|#
directive|include
file|<windows.graphics.display.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
end_ifdef
begin_include
include|#
directive|include
file|<windows.phone.ui.input.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|ApplicationModel
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|ApplicationModel
operator|::
name|Core
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|System
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Input
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|ViewManagement
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Devices
operator|::
name|Input
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Graphics
operator|::
name|Display
namespace|;
end_using
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
end_ifdef
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Phone
operator|::
name|UI
operator|::
name|Input
namespace|;
end_using
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|ResumeHandler
typedef|typedef
name|IEventHandler
argument_list|<
name|IInspectable
modifier|*
argument_list|>
name|ResumeHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|SuspendHandler
typedef|typedef
name|IEventHandler
argument_list|<
name|SuspendingEventArgs
modifier|*
argument_list|>
name|SuspendHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|ActivatedHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|CoreWindow
modifier|*
argument_list|,
name|WindowActivatedEventArgs
modifier|*
argument_list|>
name|ActivatedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|ClosedHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|CoreWindow
modifier|*
argument_list|,
name|CoreWindowEventArgs
modifier|*
argument_list|>
name|ClosedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|CharacterReceivedHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|CoreWindow
modifier|*
argument_list|,
name|CharacterReceivedEventArgs
modifier|*
argument_list|>
name|CharacterReceivedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|InputEnabledHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|CoreWindow
modifier|*
argument_list|,
name|InputEnabledEventArgs
modifier|*
argument_list|>
name|InputEnabledHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|KeyHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|CoreWindow
modifier|*
argument_list|,
name|KeyEventArgs
modifier|*
argument_list|>
name|KeyHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|PointerHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|CoreWindow
modifier|*
argument_list|,
name|PointerEventArgs
modifier|*
argument_list|>
name|PointerHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|SizeChangedHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|CoreWindow
modifier|*
argument_list|,
name|WindowSizeChangedEventArgs
modifier|*
argument_list|>
name|SizeChangedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|VisibilityChangedHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|CoreWindow
modifier|*
argument_list|,
name|VisibilityChangedEventArgs
modifier|*
argument_list|>
name|VisibilityChangedHandler
typedef|;
end_typedef
begin_typedef
DECL|typedef|AutomationProviderRequestedHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|CoreWindow
modifier|*
argument_list|,
name|AutomationProviderRequestedEventArgs
modifier|*
argument_list|>
name|AutomationProviderRequestedHandler
typedef|;
end_typedef
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
end_ifdef
begin_typedef
DECL|typedef|BackPressedHandler
typedef|typedef
name|IEventHandler
argument_list|<
name|BackPressedEventArgs
modifier|*
argument_list|>
name|BackPressedHandler
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qtOrientationsFromNative
specifier|static
specifier|inline
name|Qt
operator|::
name|ScreenOrientations
name|qtOrientationsFromNative
parameter_list|(
name|DisplayOrientations
name|native
parameter_list|)
block|{
name|Qt
operator|::
name|ScreenOrientations
name|orientations
init|=
name|Qt
operator|::
name|PrimaryOrientation
decl_stmt|;
if|if
condition|(
name|native
operator|&
name|DisplayOrientations_Portrait
condition|)
name|orientations
operator||=
name|Qt
operator|::
name|PortraitOrientation
expr_stmt|;
if|if
condition|(
name|native
operator|&
name|DisplayOrientations_PortraitFlipped
condition|)
name|orientations
operator||=
name|Qt
operator|::
name|InvertedPortraitOrientation
expr_stmt|;
if|if
condition|(
name|native
operator|&
name|DisplayOrientations_Landscape
condition|)
name|orientations
operator||=
name|Qt
operator|::
name|LandscapeOrientation
expr_stmt|;
if|if
condition|(
name|native
operator|&
name|DisplayOrientations_LandscapeFlipped
condition|)
name|orientations
operator||=
name|Qt
operator|::
name|InvertedLandscapeOrientation
expr_stmt|;
return|return
name|orientations
return|;
block|}
end_function
begin_function
DECL|function|nativeOrientationsFromQt
specifier|static
specifier|inline
name|DisplayOrientations
name|nativeOrientationsFromQt
parameter_list|(
name|Qt
operator|::
name|ScreenOrientations
name|orientation
parameter_list|)
block|{
name|DisplayOrientations
name|native
init|=
name|DisplayOrientations_None
decl_stmt|;
if|if
condition|(
name|orientation
operator|&
name|Qt
operator|::
name|PortraitOrientation
condition|)
name|native
operator||=
name|DisplayOrientations_Portrait
expr_stmt|;
if|if
condition|(
name|orientation
operator|&
name|Qt
operator|::
name|InvertedPortraitOrientation
condition|)
name|native
operator||=
name|DisplayOrientations_PortraitFlipped
expr_stmt|;
if|if
condition|(
name|orientation
operator|&
name|Qt
operator|::
name|LandscapeOrientation
condition|)
name|native
operator||=
name|DisplayOrientations_Landscape
expr_stmt|;
if|if
condition|(
name|orientation
operator|&
name|Qt
operator|::
name|InvertedLandscapeOrientation
condition|)
name|native
operator||=
name|DisplayOrientations_LandscapeFlipped
expr_stmt|;
return|return
name|native
return|;
block|}
end_function
begin_function
DECL|function|qIsNonPrintable
specifier|static
specifier|inline
name|bool
name|qIsNonPrintable
parameter_list|(
name|quint32
name|keyCode
parameter_list|)
block|{
switch|switch
condition|(
name|keyCode
condition|)
block|{
case|case
literal|'\b'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\t'
case|:
case|case
literal|'\r'
case|:
case|case
literal|'\v'
case|:
case|case
literal|'\f'
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_comment
comment|// Return Qt meta key from VirtualKey
end_comment
begin_function
DECL|function|qKeyFromVirtual
specifier|static
specifier|inline
name|Qt
operator|::
name|Key
name|qKeyFromVirtual
parameter_list|(
name|VirtualKey
name|key
parameter_list|)
block|{
switch|switch
condition|(
name|key
condition|)
block|{
default|default:
return|return
name|Qt
operator|::
name|Key_unknown
return|;
comment|// Non-printable characters
case|case
name|VirtualKey_Enter
case|:
return|return
name|Qt
operator|::
name|Key_Enter
return|;
case|case
name|VirtualKey_Tab
case|:
return|return
name|Qt
operator|::
name|Key_Tab
return|;
case|case
name|VirtualKey_Back
case|:
return|return
name|Qt
operator|::
name|Key_Backspace
return|;
comment|// Modifiers
case|case
name|VirtualKey_Shift
case|:
case|case
name|VirtualKey_LeftShift
case|:
case|case
name|VirtualKey_RightShift
case|:
return|return
name|Qt
operator|::
name|Key_Shift
return|;
case|case
name|VirtualKey_Control
case|:
case|case
name|VirtualKey_LeftControl
case|:
case|case
name|VirtualKey_RightControl
case|:
return|return
name|Qt
operator|::
name|Key_Control
return|;
case|case
name|VirtualKey_Menu
case|:
case|case
name|VirtualKey_LeftMenu
case|:
case|case
name|VirtualKey_RightMenu
case|:
return|return
name|Qt
operator|::
name|Key_Alt
return|;
case|case
name|VirtualKey_LeftWindows
case|:
case|case
name|VirtualKey_RightWindows
case|:
return|return
name|Qt
operator|::
name|Key_Meta
return|;
comment|// Toggle keys
case|case
name|VirtualKey_CapitalLock
case|:
return|return
name|Qt
operator|::
name|Key_CapsLock
return|;
case|case
name|VirtualKey_NumberKeyLock
case|:
return|return
name|Qt
operator|::
name|Key_NumLock
return|;
case|case
name|VirtualKey_Scroll
case|:
return|return
name|Qt
operator|::
name|Key_ScrollLock
return|;
comment|// East-Asian language keys
case|case
name|VirtualKey_Kana
case|:
comment|//case VirtualKey_Hangul: // Same enum as Kana
return|return
name|Qt
operator|::
name|Key_Kana_Shift
return|;
case|case
name|VirtualKey_Junja
case|:
return|return
name|Qt
operator|::
name|Key_Hangul_Jeonja
return|;
case|case
name|VirtualKey_Kanji
case|:
comment|//case VirtualKey_Hanja: // Same enum as Kanji
return|return
name|Qt
operator|::
name|Key_Kanji
return|;
case|case
name|VirtualKey_ModeChange
case|:
return|return
name|Qt
operator|::
name|Key_Mode_switch
return|;
case|case
name|VirtualKey_Convert
case|:
return|return
name|Qt
operator|::
name|Key_Henkan
return|;
case|case
name|VirtualKey_NonConvert
case|:
return|return
name|Qt
operator|::
name|Key_Muhenkan
return|;
comment|// Misc. keys
case|case
name|VirtualKey_Cancel
case|:
return|return
name|Qt
operator|::
name|Key_Cancel
return|;
case|case
name|VirtualKey_Clear
case|:
return|return
name|Qt
operator|::
name|Key_Clear
return|;
case|case
name|VirtualKey_Application
case|:
return|return
name|Qt
operator|::
name|Key_ApplicationLeft
return|;
case|case
name|VirtualKey_Sleep
case|:
return|return
name|Qt
operator|::
name|Key_Sleep
return|;
case|case
name|VirtualKey_Pause
case|:
return|return
name|Qt
operator|::
name|Key_Pause
return|;
case|case
name|VirtualKey_PageUp
case|:
return|return
name|Qt
operator|::
name|Key_PageUp
return|;
case|case
name|VirtualKey_PageDown
case|:
return|return
name|Qt
operator|::
name|Key_PageDown
return|;
case|case
name|VirtualKey_End
case|:
return|return
name|Qt
operator|::
name|Key_End
return|;
case|case
name|VirtualKey_Home
case|:
return|return
name|Qt
operator|::
name|Key_Home
return|;
case|case
name|VirtualKey_Left
case|:
return|return
name|Qt
operator|::
name|Key_Left
return|;
case|case
name|VirtualKey_Up
case|:
return|return
name|Qt
operator|::
name|Key_Up
return|;
case|case
name|VirtualKey_Right
case|:
return|return
name|Qt
operator|::
name|Key_Right
return|;
case|case
name|VirtualKey_Down
case|:
return|return
name|Qt
operator|::
name|Key_Down
return|;
case|case
name|VirtualKey_Select
case|:
return|return
name|Qt
operator|::
name|Key_Select
return|;
case|case
name|VirtualKey_Print
case|:
return|return
name|Qt
operator|::
name|Key_Print
return|;
case|case
name|VirtualKey_Execute
case|:
return|return
name|Qt
operator|::
name|Key_Execute
return|;
case|case
name|VirtualKey_Insert
case|:
return|return
name|Qt
operator|::
name|Key_Insert
return|;
case|case
name|VirtualKey_Delete
case|:
return|return
name|Qt
operator|::
name|Key_Delete
return|;
case|case
name|VirtualKey_Help
case|:
return|return
name|Qt
operator|::
name|Key_Help
return|;
case|case
name|VirtualKey_Snapshot
case|:
return|return
name|Qt
operator|::
name|Key_Camera
return|;
case|case
name|VirtualKey_Escape
case|:
return|return
name|Qt
operator|::
name|Key_Escape
return|;
comment|// Function Keys
case|case
name|VirtualKey_F1
case|:
return|return
name|Qt
operator|::
name|Key_F1
return|;
case|case
name|VirtualKey_F2
case|:
return|return
name|Qt
operator|::
name|Key_F2
return|;
case|case
name|VirtualKey_F3
case|:
return|return
name|Qt
operator|::
name|Key_F3
return|;
case|case
name|VirtualKey_F4
case|:
return|return
name|Qt
operator|::
name|Key_F4
return|;
case|case
name|VirtualKey_F5
case|:
return|return
name|Qt
operator|::
name|Key_F5
return|;
case|case
name|VirtualKey_F6
case|:
return|return
name|Qt
operator|::
name|Key_F6
return|;
case|case
name|VirtualKey_F7
case|:
return|return
name|Qt
operator|::
name|Key_F7
return|;
case|case
name|VirtualKey_F8
case|:
return|return
name|Qt
operator|::
name|Key_F8
return|;
case|case
name|VirtualKey_F9
case|:
return|return
name|Qt
operator|::
name|Key_F9
return|;
case|case
name|VirtualKey_F10
case|:
return|return
name|Qt
operator|::
name|Key_F10
return|;
case|case
name|VirtualKey_F11
case|:
return|return
name|Qt
operator|::
name|Key_F11
return|;
case|case
name|VirtualKey_F12
case|:
return|return
name|Qt
operator|::
name|Key_F12
return|;
case|case
name|VirtualKey_F13
case|:
return|return
name|Qt
operator|::
name|Key_F13
return|;
case|case
name|VirtualKey_F14
case|:
return|return
name|Qt
operator|::
name|Key_F14
return|;
case|case
name|VirtualKey_F15
case|:
return|return
name|Qt
operator|::
name|Key_F15
return|;
case|case
name|VirtualKey_F16
case|:
return|return
name|Qt
operator|::
name|Key_F16
return|;
case|case
name|VirtualKey_F17
case|:
return|return
name|Qt
operator|::
name|Key_F17
return|;
case|case
name|VirtualKey_F18
case|:
return|return
name|Qt
operator|::
name|Key_F18
return|;
case|case
name|VirtualKey_F19
case|:
return|return
name|Qt
operator|::
name|Key_F19
return|;
case|case
name|VirtualKey_F20
case|:
return|return
name|Qt
operator|::
name|Key_F20
return|;
case|case
name|VirtualKey_F21
case|:
return|return
name|Qt
operator|::
name|Key_F21
return|;
case|case
name|VirtualKey_F22
case|:
return|return
name|Qt
operator|::
name|Key_F22
return|;
case|case
name|VirtualKey_F23
case|:
return|return
name|Qt
operator|::
name|Key_F23
return|;
case|case
name|VirtualKey_F24
case|:
return|return
name|Qt
operator|::
name|Key_F24
return|;
comment|// Character keys
case|case
name|VirtualKey_Space
case|:
return|return
name|Qt
operator|::
name|Key_Space
return|;
case|case
name|VirtualKey_Number0
case|:
case|case
name|VirtualKey_NumberPad0
case|:
return|return
name|Qt
operator|::
name|Key_0
return|;
case|case
name|VirtualKey_Number1
case|:
case|case
name|VirtualKey_NumberPad1
case|:
return|return
name|Qt
operator|::
name|Key_1
return|;
case|case
name|VirtualKey_Number2
case|:
case|case
name|VirtualKey_NumberPad2
case|:
return|return
name|Qt
operator|::
name|Key_2
return|;
case|case
name|VirtualKey_Number3
case|:
case|case
name|VirtualKey_NumberPad3
case|:
return|return
name|Qt
operator|::
name|Key_3
return|;
case|case
name|VirtualKey_Number4
case|:
case|case
name|VirtualKey_NumberPad4
case|:
return|return
name|Qt
operator|::
name|Key_4
return|;
case|case
name|VirtualKey_Number5
case|:
case|case
name|VirtualKey_NumberPad5
case|:
return|return
name|Qt
operator|::
name|Key_5
return|;
case|case
name|VirtualKey_Number6
case|:
case|case
name|VirtualKey_NumberPad6
case|:
return|return
name|Qt
operator|::
name|Key_6
return|;
case|case
name|VirtualKey_Number7
case|:
case|case
name|VirtualKey_NumberPad7
case|:
return|return
name|Qt
operator|::
name|Key_7
return|;
case|case
name|VirtualKey_Number8
case|:
case|case
name|VirtualKey_NumberPad8
case|:
return|return
name|Qt
operator|::
name|Key_8
return|;
case|case
name|VirtualKey_Number9
case|:
case|case
name|VirtualKey_NumberPad9
case|:
return|return
name|Qt
operator|::
name|Key_9
return|;
case|case
name|VirtualKey_A
case|:
return|return
name|Qt
operator|::
name|Key_A
return|;
case|case
name|VirtualKey_B
case|:
return|return
name|Qt
operator|::
name|Key_B
return|;
case|case
name|VirtualKey_C
case|:
return|return
name|Qt
operator|::
name|Key_C
return|;
case|case
name|VirtualKey_D
case|:
return|return
name|Qt
operator|::
name|Key_D
return|;
case|case
name|VirtualKey_E
case|:
return|return
name|Qt
operator|::
name|Key_E
return|;
case|case
name|VirtualKey_F
case|:
return|return
name|Qt
operator|::
name|Key_F
return|;
case|case
name|VirtualKey_G
case|:
return|return
name|Qt
operator|::
name|Key_G
return|;
case|case
name|VirtualKey_H
case|:
return|return
name|Qt
operator|::
name|Key_H
return|;
case|case
name|VirtualKey_I
case|:
return|return
name|Qt
operator|::
name|Key_I
return|;
case|case
name|VirtualKey_J
case|:
return|return
name|Qt
operator|::
name|Key_J
return|;
case|case
name|VirtualKey_K
case|:
return|return
name|Qt
operator|::
name|Key_K
return|;
case|case
name|VirtualKey_L
case|:
return|return
name|Qt
operator|::
name|Key_L
return|;
case|case
name|VirtualKey_M
case|:
return|return
name|Qt
operator|::
name|Key_M
return|;
case|case
name|VirtualKey_N
case|:
return|return
name|Qt
operator|::
name|Key_N
return|;
case|case
name|VirtualKey_O
case|:
return|return
name|Qt
operator|::
name|Key_O
return|;
case|case
name|VirtualKey_P
case|:
return|return
name|Qt
operator|::
name|Key_P
return|;
case|case
name|VirtualKey_Q
case|:
return|return
name|Qt
operator|::
name|Key_Q
return|;
case|case
name|VirtualKey_R
case|:
return|return
name|Qt
operator|::
name|Key_R
return|;
case|case
name|VirtualKey_S
case|:
return|return
name|Qt
operator|::
name|Key_S
return|;
case|case
name|VirtualKey_T
case|:
return|return
name|Qt
operator|::
name|Key_T
return|;
case|case
name|VirtualKey_U
case|:
return|return
name|Qt
operator|::
name|Key_U
return|;
case|case
name|VirtualKey_V
case|:
return|return
name|Qt
operator|::
name|Key_V
return|;
case|case
name|VirtualKey_W
case|:
return|return
name|Qt
operator|::
name|Key_W
return|;
case|case
name|VirtualKey_X
case|:
return|return
name|Qt
operator|::
name|Key_X
return|;
case|case
name|VirtualKey_Y
case|:
return|return
name|Qt
operator|::
name|Key_Y
return|;
case|case
name|VirtualKey_Z
case|:
return|return
name|Qt
operator|::
name|Key_Z
return|;
case|case
name|VirtualKey_Multiply
case|:
return|return
name|Qt
operator|::
name|Key_9
return|;
case|case
name|VirtualKey_Add
case|:
return|return
name|Qt
operator|::
name|Key_9
return|;
case|case
name|VirtualKey_Separator
case|:
return|return
name|Qt
operator|::
name|Key_9
return|;
case|case
name|VirtualKey_Subtract
case|:
return|return
name|Qt
operator|::
name|Key_9
return|;
case|case
name|VirtualKey_Decimal
case|:
return|return
name|Qt
operator|::
name|Key_9
return|;
case|case
name|VirtualKey_Divide
case|:
return|return
name|Qt
operator|::
name|Key_9
return|;
comment|/* Keys with no matching Qt enum (?)     case VirtualKey_None:     case VirtualKey_LeftButton:     case VirtualKey_RightButton:     case VirtualKey_MiddleButton:     case VirtualKey_XButton1:     case VirtualKey_XButton2:     case VirtualKey_Final:     case VirtualKey_Accept:*/
block|}
block|}
end_function
begin_function
DECL|function|qKeyFromCode
specifier|static
specifier|inline
name|Qt
operator|::
name|Key
name|qKeyFromCode
parameter_list|(
name|quint32
name|code
parameter_list|,
name|int
name|mods
parameter_list|)
block|{
if|if
condition|(
name|code
operator|>=
literal|'a'
operator|&&
name|code
operator|<=
literal|'z'
condition|)
name|code
operator|=
name|toupper
argument_list|(
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|mods
operator|&
name|Qt
operator|::
name|ControlModifier
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|code
operator|>=
literal|0
operator|&&
name|code
operator|<=
literal|31
condition|)
comment|// Ctrl+@..Ctrl+A..CTRL+Z..Ctrl+_
name|code
operator|+=
literal|'@'
expr_stmt|;
comment|// to @..A..Z.._
block|}
return|return
cast|static_cast
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
argument_list|(
name|code
operator|&
literal|0xff
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QWinRTScreen
name|QWinRTScreen
operator|::
name|QWinRTScreen
parameter_list|(
name|ICoreWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|m_coreWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_depth
argument_list|(
literal|32
argument_list|)
member_init_list|,
name|m_format
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
member_init_list|,
name|m_inputContext
argument_list|(
operator|new
name|QWinRTInputContext
argument_list|(
name|m_coreWindow
argument_list|)
argument_list|)
else|#
directive|else
member_init_list|,
name|m_inputContext
argument_list|(
name|Make
argument_list|<
name|QWinRTInputContext
argument_list|>
argument_list|(
name|m_coreWindow
argument_list|)
operator|.
name|Detach
argument_list|()
argument_list|)
endif|#
directive|endif
member_init_list|,
name|m_cursor
argument_list|(
operator|new
name|QWinRTCursor
argument_list|(
name|window
argument_list|)
argument_list|)
member_init_list|,
name|m_orientation
argument_list|(
name|Qt
operator|::
name|PrimaryOrientation
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
comment|// On phone, there can be only one touch device
name|QTouchDevice
modifier|*
name|touchDevice
init|=
operator|new
name|QTouchDevice
decl_stmt|;
name|touchDevice
operator|->
name|setCapabilities
argument_list|(
name|QTouchDevice
operator|::
name|Position
operator||
name|QTouchDevice
operator|::
name|Area
operator||
name|QTouchDevice
operator|::
name|Pressure
argument_list|)
expr_stmt|;
name|touchDevice
operator|->
name|setType
argument_list|(
name|QTouchDevice
operator|::
name|TouchScreen
argument_list|)
expr_stmt|;
name|touchDevice
operator|->
name|setName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"WinPhoneTouchScreen"
argument_list|)
argument_list|)
expr_stmt|;
name|Pointer
name|pointer
init|=
block|{
name|Pointer
operator|::
name|TouchScreen
block|,
name|touchDevice
block|}
decl_stmt|;
name|m_pointers
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
argument_list|(
name|touchDevice
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Rect
name|rect
decl_stmt|;
name|window
operator|->
name|get_Bounds
argument_list|(
operator|&
name|rect
argument_list|)
expr_stmt|;
name|m_geometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rect
operator|.
name|Width
argument_list|,
name|rect
operator|.
name|Height
argument_list|)
expr_stmt|;
name|m_surfaceFormat
operator|.
name|setAlphaBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m_surfaceFormat
operator|.
name|setRedBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|m_surfaceFormat
operator|.
name|setGreenBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|m_surfaceFormat
operator|.
name|setBlueBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|m_surfaceFormat
operator|.
name|setRenderableType
argument_list|(
name|QSurfaceFormat
operator|::
name|OpenGLES
argument_list|)
expr_stmt|;
name|m_surfaceFormat
operator|.
name|setSamples
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|m_surfaceFormat
operator|.
name|setSwapBehavior
argument_list|(
name|QSurfaceFormat
operator|::
name|DoubleBuffer
argument_list|)
expr_stmt|;
name|m_surfaceFormat
operator|.
name|setDepthBufferSize
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|m_surfaceFormat
operator|.
name|setStencilBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|m_eglDisplay
operator|=
name|eglGetDisplay
argument_list|(
name|EGL_DEFAULT_DISPLAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_eglDisplay
operator|==
name|EGL_NO_DISPLAY
condition|)
name|qFatal
argument_list|(
literal|"Qt WinRT platform plugin: failed to initialize EGL display."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|eglInitialize
argument_list|(
name|m_eglDisplay
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
condition|)
name|qFatal
argument_list|(
literal|"Qt WinRT platform plugin: failed to initialize EGL. This can happen if you haven't included the D3D compiler DLL in your application package."
argument_list|)
expr_stmt|;
comment|// TODO: move this to Window
name|m_eglSurface
operator|=
name|eglCreateWindowSurface
argument_list|(
name|m_eglDisplay
argument_list|,
name|q_configFromGLFormat
argument_list|(
name|m_eglDisplay
argument_list|,
name|m_surfaceFormat
argument_list|)
argument_list|,
name|window
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_eglSurface
operator|==
name|EGL_NO_SURFACE
condition|)
name|qFatal
argument_list|(
literal|"Could not create EGL surface, error 0x%X"
argument_list|,
name|eglGetError
argument_list|()
argument_list|)
expr_stmt|;
comment|// Event handlers mapped to QEvents
name|m_coreWindow
operator|->
name|add_KeyDown
argument_list|(
name|Callback
argument_list|<
name|KeyHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onKeyDown
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|KeyPress
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_KeyUp
argument_list|(
name|Callback
argument_list|<
name|KeyHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onKeyUp
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|KeyRelease
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_CharacterReceived
argument_list|(
name|Callback
argument_list|<
name|CharacterReceivedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onCharacterReceived
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|User
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_PointerEntered
argument_list|(
name|Callback
argument_list|<
name|PointerHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onPointerEntered
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|Enter
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_PointerExited
argument_list|(
name|Callback
argument_list|<
name|PointerHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onPointerExited
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|Leave
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_PointerMoved
argument_list|(
name|Callback
argument_list|<
name|PointerHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onPointerUpdated
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|MouseMove
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_PointerPressed
argument_list|(
name|Callback
argument_list|<
name|PointerHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onPointerUpdated
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|MouseButtonPress
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_PointerReleased
argument_list|(
name|Callback
argument_list|<
name|PointerHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onPointerUpdated
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|MouseButtonRelease
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_PointerWheelChanged
argument_list|(
name|Callback
argument_list|<
name|PointerHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onPointerUpdated
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|Wheel
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_SizeChanged
argument_list|(
name|Callback
argument_list|<
name|SizeChangedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onSizeChanged
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|Resize
index|]
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
name|ComPtr
argument_list|<
name|IHardwareButtonsStatics
argument_list|>
name|hardwareButtons
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Phone_UI_Input_HardwareButtons
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hardwareButtons
argument_list|)
argument_list|)
condition|)
name|hardwareButtons
operator|->
name|add_BackPressed
argument_list|(
name|Callback
argument_list|<
name|BackPressedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onBackButtonPressed
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|User
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINPHONE
comment|// Window event handlers
name|m_coreWindow
operator|->
name|add_Activated
argument_list|(
name|Callback
argument_list|<
name|ActivatedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onActivated
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|WindowActivate
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_Closed
argument_list|(
name|Callback
argument_list|<
name|ClosedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onClosed
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|WindowDeactivate
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_VisibilityChanged
argument_list|(
name|Callback
argument_list|<
name|VisibilityChangedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onVisibilityChanged
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|Show
index|]
argument_list|)
expr_stmt|;
name|m_coreWindow
operator|->
name|add_AutomationProviderRequested
argument_list|(
name|Callback
argument_list|<
name|AutomationProviderRequestedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onAutomationProviderRequested
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|InputMethodQuery
index|]
argument_list|)
expr_stmt|;
comment|// Orientation handling
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_Graphics_Display_DisplayProperties
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_displayProperties
argument_list|)
argument_list|)
condition|)
block|{
comment|// Set native orientation
name|DisplayOrientations
name|displayOrientation
decl_stmt|;
name|m_displayProperties
operator|->
name|get_NativeOrientation
argument_list|(
operator|&
name|displayOrientation
argument_list|)
expr_stmt|;
name|m_nativeOrientation
operator|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|ScreenOrientation
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|qtOrientationsFromNative
argument_list|(
name|displayOrientation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set initial orientation
name|onOrientationChanged
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setOrientationUpdateMask
argument_list|(
name|m_nativeOrientation
argument_list|)
expr_stmt|;
name|m_displayProperties
operator|->
name|add_OrientationChanged
argument_list|(
name|Callback
argument_list|<
name|IDisplayPropertiesEventHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onOrientationChanged
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_tokens
index|[
name|QEvent
operator|::
name|OrientationChange
index|]
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_UI_ViewManagement_ApplicationView
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_applicationView
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|RoGetActivationFactory
argument_list|(
name|Wrappers
operator|::
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_ApplicationModel_Core_CoreApplication
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|m_application
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|m_application
operator|->
name|add_Suspending
argument_list|(
name|Callback
argument_list|<
name|SuspendHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onSuspended
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_suspendTokens
index|[
name|Qt
operator|::
name|ApplicationSuspended
index|]
argument_list|)
expr_stmt|;
name|m_application
operator|->
name|add_Resuming
argument_list|(
name|Callback
argument_list|<
name|ResumeHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTScreen
operator|::
name|onResume
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_suspendTokens
index|[
name|Qt
operator|::
name|ApplicationHidden
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|geometry
name|QRect
name|QWinRTScreen
operator|::
name|geometry
parameter_list|()
specifier|const
block|{
return|return
name|m_geometry
return|;
block|}
end_function
begin_function
DECL|function|depth
name|int
name|QWinRTScreen
operator|::
name|depth
parameter_list|()
specifier|const
block|{
return|return
name|m_depth
return|;
block|}
end_function
begin_function
DECL|function|format
name|QImage
operator|::
name|Format
name|QWinRTScreen
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|m_format
return|;
block|}
end_function
begin_function
DECL|function|surfaceFormat
name|QSurfaceFormat
name|QWinRTScreen
operator|::
name|surfaceFormat
parameter_list|()
specifier|const
block|{
return|return
name|m_surfaceFormat
return|;
block|}
end_function
begin_function
DECL|function|inputContext
name|QWinRTInputContext
modifier|*
name|QWinRTScreen
operator|::
name|inputContext
parameter_list|()
specifier|const
block|{
return|return
name|m_inputContext
return|;
block|}
end_function
begin_function
DECL|function|cursor
name|QPlatformCursor
modifier|*
name|QWinRTScreen
operator|::
name|cursor
parameter_list|()
specifier|const
block|{
return|return
name|m_cursor
return|;
block|}
end_function
begin_function
DECL|function|keyboardModifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QWinRTScreen
operator|::
name|keyboardModifiers
parameter_list|()
specifier|const
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|mods
decl_stmt|;
name|CoreVirtualKeyStates
name|mod
decl_stmt|;
name|m_coreWindow
operator|->
name|GetAsyncKeyState
argument_list|(
name|VirtualKey_Shift
argument_list|,
operator|&
name|mod
argument_list|)
expr_stmt|;
if|if
condition|(
name|mod
operator|==
name|CoreVirtualKeyStates_Down
condition|)
name|mods
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
name|m_coreWindow
operator|->
name|GetAsyncKeyState
argument_list|(
name|VirtualKey_Menu
argument_list|,
operator|&
name|mod
argument_list|)
expr_stmt|;
if|if
condition|(
name|mod
operator|==
name|CoreVirtualKeyStates_Down
condition|)
name|mods
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
name|m_coreWindow
operator|->
name|GetAsyncKeyState
argument_list|(
name|VirtualKey_Control
argument_list|,
operator|&
name|mod
argument_list|)
expr_stmt|;
if|if
condition|(
name|mod
operator|==
name|CoreVirtualKeyStates_Down
condition|)
name|mods
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
name|m_coreWindow
operator|->
name|GetAsyncKeyState
argument_list|(
name|VirtualKey_LeftWindows
argument_list|,
operator|&
name|mod
argument_list|)
expr_stmt|;
if|if
condition|(
name|mod
operator|==
name|CoreVirtualKeyStates_Down
condition|)
block|{
name|mods
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
block|}
else|else
block|{
name|m_coreWindow
operator|->
name|GetAsyncKeyState
argument_list|(
name|VirtualKey_RightWindows
argument_list|,
operator|&
name|mod
argument_list|)
expr_stmt|;
if|if
condition|(
name|mod
operator|==
name|CoreVirtualKeyStates_Down
condition|)
name|mods
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
block|}
return|return
name|mods
return|;
block|}
end_function
begin_function
DECL|function|nativeOrientation
name|Qt
operator|::
name|ScreenOrientation
name|QWinRTScreen
operator|::
name|nativeOrientation
parameter_list|()
specifier|const
block|{
return|return
name|m_nativeOrientation
return|;
block|}
end_function
begin_function
DECL|function|orientation
name|Qt
operator|::
name|ScreenOrientation
name|QWinRTScreen
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
return|return
name|m_orientation
return|;
block|}
end_function
begin_function
DECL|function|setOrientationUpdateMask
name|void
name|QWinRTScreen
operator|::
name|setOrientationUpdateMask
parameter_list|(
name|Qt
operator|::
name|ScreenOrientations
name|mask
parameter_list|)
block|{
name|m_displayProperties
operator|->
name|put_AutoRotationPreferences
argument_list|(
name|nativeOrientationsFromQt
argument_list|(
name|mask
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|coreWindow
name|ICoreWindow
modifier|*
name|QWinRTScreen
operator|::
name|coreWindow
parameter_list|()
specifier|const
block|{
return|return
name|m_coreWindow
return|;
block|}
end_function
begin_function
DECL|function|eglDisplay
name|EGLDisplay
name|QWinRTScreen
operator|::
name|eglDisplay
parameter_list|()
specifier|const
block|{
return|return
name|m_eglDisplay
return|;
block|}
end_function
begin_function
DECL|function|eglSurface
name|EGLSurface
name|QWinRTScreen
operator|::
name|eglSurface
parameter_list|()
specifier|const
block|{
return|return
name|m_eglSurface
return|;
block|}
end_function
begin_function
DECL|function|topWindow
name|QWindow
modifier|*
name|QWinRTScreen
operator|::
name|topWindow
parameter_list|()
specifier|const
block|{
return|return
name|m_visibleWindows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|m_visibleWindows
operator|.
name|first
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|addWindow
name|void
name|QWinRTScreen
operator|::
name|addWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
name|window
operator|==
name|topWindow
argument_list|()
condition|)
return|return;
name|m_visibleWindows
operator|.
name|prepend
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|window
argument_list|,
name|Qt
operator|::
name|OtherFocusReason
argument_list|)
expr_stmt|;
name|handleExpose
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeWindow
name|void
name|QWinRTScreen
operator|::
name|removeWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
specifier|const
name|bool
name|wasTopWindow
init|=
name|window
operator|==
name|topWindow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m_visibleWindows
operator|.
name|removeAll
argument_list|(
name|window
argument_list|)
condition|)
return|return;
if|if
condition|(
name|wasTopWindow
condition|)
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|window
argument_list|,
name|Qt
operator|::
name|OtherFocusReason
argument_list|)
expr_stmt|;
name|handleExpose
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|raise
name|void
name|QWinRTScreen
operator|::
name|raise
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|m_visibleWindows
operator|.
name|removeAll
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|addWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lower
name|void
name|QWinRTScreen
operator|::
name|lower
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
specifier|const
name|bool
name|wasTopWindow
init|=
name|window
operator|==
name|topWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|wasTopWindow
operator|&&
name|m_visibleWindows
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return;
name|m_visibleWindows
operator|.
name|removeAll
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|m_visibleWindows
operator|.
name|append
argument_list|(
name|window
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasTopWindow
condition|)
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|window
argument_list|,
name|Qt
operator|::
name|OtherFocusReason
argument_list|)
expr_stmt|;
name|handleExpose
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleExpose
name|void
name|QWinRTScreen
operator|::
name|handleExpose
parameter_list|()
block|{
if|if
condition|(
name|m_visibleWindows
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QList
argument_list|<
name|QWindow
modifier|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|m_visibleWindows
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
operator|*
name|it
argument_list|,
name|m_geometry
argument_list|)
expr_stmt|;
while|while
condition|(
operator|++
name|it
operator|!=
name|m_visibleWindows
operator|.
name|constEnd
argument_list|()
condition|)
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
operator|*
name|it
argument_list|,
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onKeyDown
name|HRESULT
name|QWinRTScreen
operator|::
name|onKeyDown
parameter_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
modifier|*
name|window
parameter_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IKeyEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|VirtualKey
name|virtualKey
decl_stmt|;
name|args
operator|->
name|get_VirtualKey
argument_list|(
operator|&
name|virtualKey
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|Key
name|key
init|=
name|qKeyFromVirtual
argument_list|(
name|virtualKey
argument_list|)
decl_stmt|;
comment|// Defer character key presses to onCharacterReceived
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_unknown
operator|||
operator|(
name|key
operator|>=
name|Qt
operator|::
name|Key_Space
operator|&&
name|key
operator|<=
name|Qt
operator|::
name|Key_ydiaeresis
operator|)
condition|)
return|return
name|S_OK
return|;
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|topWindow
argument_list|()
argument_list|,
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|key
argument_list|,
name|keyboardModifiers
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onKeyUp
name|HRESULT
name|QWinRTScreen
operator|::
name|onKeyUp
parameter_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
modifier|*
name|window
parameter_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IKeyEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|mods
init|=
name|keyboardModifiers
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
name|CorePhysicalKeyStatus
name|status
decl_stmt|;
comment|// Look for a pressed character key
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|args
operator|->
name|get_KeyStatus
argument_list|(
operator|&
name|status
argument_list|)
argument_list|)
operator|&&
name|m_activeKeys
operator|.
name|contains
argument_list|(
name|status
operator|.
name|ScanCode
argument_list|)
condition|)
block|{
name|QPair
argument_list|<
name|Qt
operator|::
name|Key
argument_list|,
name|QString
argument_list|>
name|keyStatus
init|=
name|m_activeKeys
operator|.
name|take
argument_list|(
name|status
operator|.
name|ScanCode
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|topWindow
argument_list|()
argument_list|,
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|keyStatus
operator|.
name|first
argument_list|,
name|mods
argument_list|,
name|keyStatus
operator|.
name|second
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
endif|#
directive|endif
comment|// !Q_OS_WINPHONE
name|VirtualKey
name|virtualKey
decl_stmt|;
name|args
operator|->
name|get_VirtualKey
argument_list|(
operator|&
name|virtualKey
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|topWindow
argument_list|()
argument_list|,
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|qKeyFromVirtual
argument_list|(
name|virtualKey
argument_list|)
argument_list|,
name|mods
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onCharacterReceived
name|HRESULT
name|QWinRTScreen
operator|::
name|onCharacterReceived
parameter_list|(
name|ICoreWindow
modifier|*
name|window
parameter_list|,
name|ICharacterReceivedEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|quint32
name|keyCode
decl_stmt|;
name|args
operator|->
name|get_KeyCode
argument_list|(
operator|&
name|keyCode
argument_list|)
expr_stmt|;
comment|// Don't generate character events for non-printables; the meta key stage is enough
if|if
condition|(
name|qIsNonPrintable
argument_list|(
name|keyCode
argument_list|)
condition|)
return|return
name|S_OK
return|;
name|Qt
operator|::
name|KeyboardModifiers
name|mods
init|=
name|keyboardModifiers
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|Key
name|key
init|=
name|qKeyFromCode
argument_list|(
name|keyCode
argument_list|,
name|mods
argument_list|)
decl_stmt|;
name|QString
name|text
init|=
name|QChar
argument_list|(
name|keyCode
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|topWindow
argument_list|()
argument_list|,
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|key
argument_list|,
name|mods
argument_list|,
name|text
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
name|CorePhysicalKeyStatus
name|status
decl_stmt|;
comment|// Defer release to onKeyUp for physical keys
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|args
operator|->
name|get_KeyStatus
argument_list|(
operator|&
name|status
argument_list|)
argument_list|)
operator|&&
operator|!
name|status
operator|.
name|IsKeyReleased
condition|)
block|{
name|m_activeKeys
operator|.
name|insert
argument_list|(
name|status
operator|.
name|ScanCode
argument_list|,
name|qMakePair
argument_list|(
name|key
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
endif|#
directive|endif
comment|// !Q_OS_WINPHONE
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|topWindow
argument_list|()
argument_list|,
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|key
argument_list|,
name|mods
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onPointerEntered
name|HRESULT
name|QWinRTScreen
operator|::
name|onPointerEntered
parameter_list|(
name|ICoreWindow
modifier|*
name|window
parameter_list|,
name|IPointerEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|IPointerPoint
modifier|*
name|pointerPoint
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|args
operator|->
name|get_CurrentPoint
argument_list|(
operator|&
name|pointerPoint
argument_list|)
argument_list|)
condition|)
block|{
comment|// Assumes full-screen window
name|Point
name|point
decl_stmt|;
name|pointerPoint
operator|->
name|get_Position
argument_list|(
operator|&
name|point
argument_list|)
expr_stmt|;
name|QPoint
name|pos
argument_list|(
name|point
operator|.
name|X
argument_list|,
name|point
operator|.
name|Y
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|topWindow
argument_list|()
argument_list|,
name|pos
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|pointerPoint
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onPointerExited
name|HRESULT
name|QWinRTScreen
operator|::
name|onPointerExited
parameter_list|(
name|ICoreWindow
modifier|*
name|window
parameter_list|,
name|IPointerEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onPointerUpdated
name|HRESULT
name|QWinRTScreen
operator|::
name|onPointerUpdated
parameter_list|(
name|ICoreWindow
modifier|*
name|window
parameter_list|,
name|IPointerEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|IPointerPoint
modifier|*
name|pointerPoint
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|args
operator|->
name|get_CurrentPoint
argument_list|(
operator|&
name|pointerPoint
argument_list|)
argument_list|)
condition|)
return|return
name|E_INVALIDARG
return|;
comment|// Common traits - point, modifiers, properties
name|Point
name|point
decl_stmt|;
name|pointerPoint
operator|->
name|get_Position
argument_list|(
operator|&
name|point
argument_list|)
expr_stmt|;
name|QPointF
name|pos
argument_list|(
name|point
operator|.
name|X
argument_list|,
name|point
operator|.
name|Y
argument_list|)
decl_stmt|;
name|VirtualKeyModifiers
name|modifiers
decl_stmt|;
name|args
operator|->
name|get_KeyModifiers
argument_list|(
operator|&
name|modifiers
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|mods
decl_stmt|;
if|if
condition|(
name|modifiers
operator|&
name|VirtualKeyModifiers_Control
condition|)
name|mods
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|modifiers
operator|&
name|VirtualKeyModifiers_Menu
condition|)
name|mods
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
if|if
condition|(
name|modifiers
operator|&
name|VirtualKeyModifiers_Shift
condition|)
name|mods
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|modifiers
operator|&
name|VirtualKeyModifiers_Windows
condition|)
name|mods
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
name|IPointerPointProperties
modifier|*
name|properties
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|pointerPoint
operator|->
name|get_Properties
argument_list|(
operator|&
name|properties
argument_list|)
argument_list|)
condition|)
return|return
name|E_INVALIDARG
return|;
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
name|quint32
name|pointerId
init|=
literal|0
decl_stmt|;
name|Pointer
name|pointer
init|=
name|m_pointers
operator|.
name|value
argument_list|(
name|pointerId
argument_list|)
decl_stmt|;
else|#
directive|else
name|Pointer
name|pointer
init|=
block|{
name|Pointer
operator|::
name|Unknown
block|,
literal|0
block|}
decl_stmt|;
name|quint32
name|pointerId
decl_stmt|;
name|pointerPoint
operator|->
name|get_PointerId
argument_list|(
operator|&
name|pointerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_pointers
operator|.
name|contains
argument_list|(
name|pointerId
argument_list|)
condition|)
block|{
name|pointer
operator|=
name|m_pointers
operator|.
name|value
argument_list|(
name|pointerId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We have not yet enumerated this device. Do so now...
name|IPointerDevice
modifier|*
name|device
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|pointerPoint
operator|->
name|get_PointerDevice
argument_list|(
operator|&
name|device
argument_list|)
argument_list|)
condition|)
block|{
name|PointerDeviceType
name|type
decl_stmt|;
name|device
operator|->
name|get_PointerDeviceType
argument_list|(
operator|&
name|type
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PointerDeviceType_Touch
case|:
name|pointer
operator|.
name|type
operator|=
name|Pointer
operator|::
name|TouchScreen
expr_stmt|;
name|pointer
operator|.
name|device
operator|=
operator|new
name|QTouchDevice
expr_stmt|;
name|pointer
operator|.
name|device
operator|->
name|setName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"WinRT TouchScreen "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|pointerId
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: We may want to probe the device usage flags for more accurate values for these next two
name|pointer
operator|.
name|device
operator|->
name|setType
argument_list|(
name|QTouchDevice
operator|::
name|TouchScreen
argument_list|)
expr_stmt|;
name|pointer
operator|.
name|device
operator|->
name|setCapabilities
argument_list|(
name|QTouchDevice
operator|::
name|Position
operator||
name|QTouchDevice
operator|::
name|Area
operator||
name|QTouchDevice
operator|::
name|Pressure
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
argument_list|(
name|pointer
operator|.
name|device
argument_list|)
expr_stmt|;
break|break;
case|case
name|PointerDeviceType_Pen
case|:
name|pointer
operator|.
name|type
operator|=
name|Pointer
operator|::
name|Tablet
expr_stmt|;
break|break;
case|case
name|PointerDeviceType_Mouse
case|:
name|pointer
operator|.
name|type
operator|=
name|Pointer
operator|::
name|Mouse
expr_stmt|;
break|break;
block|}
name|m_pointers
operator|.
name|insert
argument_list|(
name|pointerId
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
name|device
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
switch|switch
condition|(
name|pointer
operator|.
name|type
condition|)
block|{
case|case
name|Pointer
operator|::
name|Mouse
case|:
block|{
name|qint32
name|delta
decl_stmt|;
name|properties
operator|->
name|get_MouseWheelDelta
argument_list|(
operator|&
name|delta
argument_list|)
expr_stmt|;
if|if
condition|(
name|delta
condition|)
block|{
name|boolean
name|isHorizontal
decl_stmt|;
name|properties
operator|->
name|get_IsHorizontalMouseWheel
argument_list|(
operator|&
name|isHorizontal
argument_list|)
expr_stmt|;
name|QPoint
name|angleDelta
argument_list|(
name|isHorizontal
condition|?
name|delta
else|:
literal|0
argument_list|,
name|isHorizontal
condition|?
literal|0
else|:
name|delta
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|topWindow
argument_list|()
argument_list|,
name|pos
argument_list|,
name|pos
argument_list|,
name|QPoint
argument_list|()
argument_list|,
name|angleDelta
argument_list|,
name|mods
argument_list|)
expr_stmt|;
break|break;
block|}
name|boolean
name|isPressed
decl_stmt|;
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
name|properties
operator|->
name|get_IsLeftButtonPressed
argument_list|(
operator|&
name|isPressed
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPressed
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
name|properties
operator|->
name|get_IsMiddleButtonPressed
argument_list|(
operator|&
name|isPressed
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPressed
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|MiddleButton
expr_stmt|;
name|properties
operator|->
name|get_IsRightButtonPressed
argument_list|(
operator|&
name|isPressed
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPressed
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
name|properties
operator|->
name|get_IsXButton1Pressed
argument_list|(
operator|&
name|isPressed
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPressed
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|XButton1
expr_stmt|;
name|properties
operator|->
name|get_IsXButton2Pressed
argument_list|(
operator|&
name|isPressed
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPressed
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|XButton2
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|topWindow
argument_list|()
argument_list|,
name|pos
argument_list|,
name|pos
argument_list|,
name|buttons
argument_list|,
name|mods
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Pointer
operator|::
name|TouchScreen
case|:
block|{
name|quint32
name|id
decl_stmt|;
name|pointerPoint
operator|->
name|get_PointerId
argument_list|(
operator|&
name|id
argument_list|)
expr_stmt|;
name|Rect
name|area
decl_stmt|;
name|properties
operator|->
name|get_ContactRect
argument_list|(
operator|&
name|area
argument_list|)
expr_stmt|;
name|float
name|pressure
decl_stmt|;
name|properties
operator|->
name|get_Pressure
argument_list|(
operator|&
name|pressure
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|quint32
argument_list|,
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
operator|::
name|iterator
name|it
init|=
name|m_touchPoints
operator|.
name|find
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_touchPoints
operator|.
name|end
argument_list|()
condition|)
block|{
name|boolean
name|isPressed
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
name|pointerPoint
operator|->
name|get_IsInContact
argument_list|(
operator|&
name|isPressed
argument_list|)
expr_stmt|;
else|#
directive|else
name|properties
operator|->
name|get_IsLeftButtonPressed
argument_list|(
operator|&
name|isPressed
argument_list|)
expr_stmt|;
comment|// IsInContact not reliable on phone
endif|#
directive|endif
name|it
operator|.
name|value
argument_list|()
operator|.
name|state
operator|=
name|isPressed
condition|?
name|Qt
operator|::
name|TouchPointMoved
else|:
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
block|}
else|else
block|{
name|it
operator|=
name|m_touchPoints
operator|.
name|insert
argument_list|(
name|id
argument_list|,
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|value
argument_list|()
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|it
operator|.
name|value
argument_list|()
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
name|it
operator|.
name|value
argument_list|()
operator|.
name|area
operator|=
name|QRectF
argument_list|(
name|area
operator|.
name|X
argument_list|,
name|area
operator|.
name|Y
argument_list|,
name|area
operator|.
name|Width
argument_list|,
name|area
operator|.
name|Height
argument_list|)
expr_stmt|;
name|it
operator|.
name|value
argument_list|()
operator|.
name|normalPosition
operator|=
name|QPointF
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|/
name|m_geometry
operator|.
name|width
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
operator|/
name|m_geometry
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|value
argument_list|()
operator|.
name|pressure
operator|=
name|pressure
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|topWindow
argument_list|()
argument_list|,
name|pointer
operator|.
name|device
argument_list|,
name|m_touchPoints
operator|.
name|values
argument_list|()
argument_list|,
name|mods
argument_list|)
expr_stmt|;
comment|// Remove released points, station others
for|for
control|(
name|QHash
argument_list|<
name|quint32
argument_list|,
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
operator|::
name|iterator
name|i
init|=
name|m_touchPoints
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|m_touchPoints
operator|.
name|end
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|.
name|state
operator|==
name|Qt
operator|::
name|TouchPointReleased
condition|)
name|i
operator|=
name|m_touchPoints
operator|.
name|erase
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
operator|(
name|i
operator|++
operator|)
operator|.
name|value
argument_list|()
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointStationary
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Pointer
operator|::
name|Tablet
case|:
block|{
name|quint32
name|id
decl_stmt|;
name|pointerPoint
operator|->
name|get_PointerId
argument_list|(
operator|&
name|id
argument_list|)
expr_stmt|;
name|boolean
name|isPressed
decl_stmt|;
name|pointerPoint
operator|->
name|get_IsInContact
argument_list|(
operator|&
name|isPressed
argument_list|)
expr_stmt|;
name|boolean
name|isEraser
decl_stmt|;
name|properties
operator|->
name|get_IsEraser
argument_list|(
operator|&
name|isEraser
argument_list|)
expr_stmt|;
name|int
name|pointerType
init|=
name|isEraser
condition|?
literal|3
else|:
literal|1
decl_stmt|;
name|float
name|pressure
decl_stmt|;
name|properties
operator|->
name|get_Pressure
argument_list|(
operator|&
name|pressure
argument_list|)
expr_stmt|;
name|float
name|xTilt
decl_stmt|;
name|properties
operator|->
name|get_XTilt
argument_list|(
operator|&
name|xTilt
argument_list|)
expr_stmt|;
name|float
name|yTilt
decl_stmt|;
name|properties
operator|->
name|get_YTilt
argument_list|(
operator|&
name|yTilt
argument_list|)
expr_stmt|;
name|float
name|rotation
decl_stmt|;
name|properties
operator|->
name|get_Twist
argument_list|(
operator|&
name|rotation
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleTabletEvent
argument_list|(
name|topWindow
argument_list|()
argument_list|,
name|isPressed
argument_list|,
name|pos
argument_list|,
name|pos
argument_list|,
name|pointerId
argument_list|,
name|pointerType
argument_list|,
name|pressure
argument_list|,
name|xTilt
argument_list|,
name|yTilt
argument_list|,
literal|0
argument_list|,
name|rotation
argument_list|,
literal|0
argument_list|,
name|id
argument_list|,
name|mods
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|properties
operator|->
name|Release
argument_list|()
expr_stmt|;
name|pointerPoint
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onAutomationProviderRequested
name|HRESULT
name|QWinRTScreen
operator|::
name|onAutomationProviderRequested
parameter_list|(
name|ICoreWindow
modifier|*
parameter_list|,
name|IAutomationProviderRequestedEventArgs
modifier|*
name|args
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
name|args
operator|->
name|put_AutomationProvider
argument_list|(
name|m_inputContext
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onSizeChanged
name|HRESULT
name|QWinRTScreen
operator|::
name|onSizeChanged
parameter_list|(
name|ICoreWindow
modifier|*
name|window
parameter_list|,
name|IWindowSizeChangedEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|Size
name|size
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|args
operator|->
name|get_Size
argument_list|(
operator|&
name|size
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
name|Q_FUNC_INFO
literal|": failed to get size"
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
comment|// Regardless of state, all top-level windows are viewport-sized - this might change if
comment|// a more advanced compositor is written.
name|m_geometry
operator|.
name|setSize
argument_list|(
name|QSize
argument_list|(
name|size
operator|.
name|Width
argument_list|,
name|size
operator|.
name|Height
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleScreenGeometryChange
argument_list|(
name|screen
argument_list|()
argument_list|,
name|m_geometry
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleScreenAvailableGeometryChange
argument_list|(
name|screen
argument_list|()
argument_list|,
name|m_geometry
argument_list|)
expr_stmt|;
name|QPlatformScreen
operator|::
name|resizeMaximizedWindows
argument_list|()
expr_stmt|;
name|handleExpose
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onActivated
name|HRESULT
name|QWinRTScreen
operator|::
name|onActivated
parameter_list|(
name|ICoreWindow
modifier|*
name|window
parameter_list|,
name|IWindowActivatedEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|CoreWindowActivationState
name|activationState
decl_stmt|;
name|args
operator|->
name|get_WindowActivationState
argument_list|(
operator|&
name|activationState
argument_list|)
expr_stmt|;
if|if
condition|(
name|activationState
operator|==
name|CoreWindowActivationState_Deactivated
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleApplicationStateChanged
argument_list|(
name|Qt
operator|::
name|ApplicationInactive
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
comment|// Activate topWindow
if|if
condition|(
operator|!
name|m_visibleWindows
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Qt
operator|::
name|FocusReason
name|focusReason
init|=
name|activationState
operator|==
name|CoreWindowActivationState_PointerActivated
condition|?
name|Qt
operator|::
name|MouseFocusReason
else|:
name|Qt
operator|::
name|ActiveWindowFocusReason
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|topWindow
argument_list|()
argument_list|,
name|focusReason
argument_list|)
expr_stmt|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onSuspended
name|HRESULT
name|QWinRTScreen
operator|::
name|onSuspended
parameter_list|(
name|IInspectable
modifier|*
parameter_list|,
name|ISuspendingEventArgs
modifier|*
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleApplicationStateChanged
argument_list|(
name|Qt
operator|::
name|ApplicationSuspended
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onResume
name|HRESULT
name|QWinRTScreen
operator|::
name|onResume
parameter_list|(
name|IInspectable
modifier|*
parameter_list|,
name|IInspectable
modifier|*
parameter_list|)
block|{
comment|// First the system invokes onResume and then changes
comment|// the visibility of the screen to be active.
name|QWindowSystemInterface
operator|::
name|handleApplicationStateChanged
argument_list|(
name|Qt
operator|::
name|ApplicationHidden
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onClosed
name|HRESULT
name|QWinRTScreen
operator|::
name|onClosed
parameter_list|(
name|ICoreWindow
modifier|*
name|window
parameter_list|,
name|ICoreWindowEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|args
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QWindow
modifier|*
name|w
decl|,
name|QGuiApplication
operator|::
name|topLevelWindows
argument_list|()
control|)
name|QWindowSystemInterface
operator|::
name|handleCloseEvent
argument_list|(
name|w
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onVisibilityChanged
name|HRESULT
name|QWinRTScreen
operator|::
name|onVisibilityChanged
parameter_list|(
name|ICoreWindow
modifier|*
name|window
parameter_list|,
name|IVisibilityChangedEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|boolean
name|visible
decl_stmt|;
name|args
operator|->
name|get_Visible
argument_list|(
operator|&
name|visible
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleApplicationStateChanged
argument_list|(
name|visible
condition|?
name|Qt
operator|::
name|ApplicationActive
else|:
name|Qt
operator|::
name|ApplicationHidden
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
condition|)
name|handleExpose
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_function
DECL|function|onOrientationChanged
name|HRESULT
name|QWinRTScreen
operator|::
name|onOrientationChanged
parameter_list|(
name|IInspectable
modifier|*
parameter_list|)
block|{
name|DisplayOrientations
name|displayOrientation
decl_stmt|;
name|m_displayProperties
operator|->
name|get_CurrentOrientation
argument_list|(
operator|&
name|displayOrientation
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|ScreenOrientation
name|newOrientation
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|ScreenOrientation
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|qtOrientationsFromNative
argument_list|(
name|displayOrientation
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_orientation
operator|!=
name|newOrientation
condition|)
block|{
name|m_orientation
operator|=
name|newOrientation
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleScreenOrientationChange
argument_list|(
name|screen
argument_list|()
argument_list|,
name|m_orientation
argument_list|)
expr_stmt|;
block|}
return|return
name|S_OK
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
end_ifdef
begin_function
DECL|function|onBackButtonPressed
name|HRESULT
name|QWinRTScreen
operator|::
name|onBackButtonPressed
parameter_list|(
name|IInspectable
modifier|*
parameter_list|,
name|IBackPressedEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|QKeyEvent
name|backPress
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_Back
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|QKeyEvent
name|backRelease
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_Back
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|backPress
operator|.
name|setAccepted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|backRelease
operator|.
name|setAccepted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|receiver
init|=
name|m_visibleWindows
operator|.
name|isEmpty
argument_list|()
condition|?
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|QGuiApplication
operator|::
name|instance
argument_list|()
argument_list|)
else|:
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|m_visibleWindows
operator|.
name|first
argument_list|()
argument_list|)
decl_stmt|;
comment|// If the event is ignored, the app will suspend
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|backPress
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|backRelease
argument_list|)
expr_stmt|;
name|args
operator|->
name|put_Handled
argument_list|(
name|backPress
operator|.
name|isAccepted
argument_list|()
operator|||
name|backRelease
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WINPHONE
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
