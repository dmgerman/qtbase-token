begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL3$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPLv3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or later as published by the Free ** Software Foundation and appearing in the file LICENSE.GPL included in ** the packaging of this file. Please review the following information to ** ensure the GNU General Public License version 2.0 requirements will be ** met: http://www.gnu.org/licenses/gpl-2.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwinrtmessagedialoghelper.h"
end_include
begin_include
include|#
directive|include
file|"qwinrttheme.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qfunctions_winrt.h>
end_include
begin_include
include|#
directive|include
file|<private/qeventdispatcher_winrt_p.h>
end_include
begin_include
include|#
directive|include
file|<functional>
end_include
begin_include
include|#
directive|include
file|<windows.ui.popups.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.collections.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Popups
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_typedef
DECL|typedef|DialogCompletedHandler
typedef|typedef
name|IAsyncOperationCompletedHandler
argument_list|<
name|IUICommand
modifier|*
argument_list|>
name|DialogCompletedHandler
typedef|;
end_typedef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|CommandId
class|class
name|CommandId
super|:
specifier|public
name|RuntimeClass
argument_list|<
name|IInspectable
argument_list|>
block|{
public|public:
DECL|function|CommandId
name|CommandId
parameter_list|(
name|QPlatformDialogHelper
operator|::
name|StandardButton
name|button
parameter_list|)
member_init_list|:
name|button
argument_list|(
name|button
argument_list|)
block|{ }
DECL|member|button
name|QPlatformDialogHelper
operator|::
name|StandardButton
name|button
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QWinRTMessageDialogHelperPrivate
class|class
name|QWinRTMessageDialogHelperPrivate
block|{
public|public:
DECL|member|theme
specifier|const
name|QWinRTTheme
modifier|*
name|theme
decl_stmt|;
DECL|member|shown
name|bool
name|shown
decl_stmt|;
DECL|member|info
name|ComPtr
argument_list|<
name|IAsyncInfo
argument_list|>
name|info
decl_stmt|;
DECL|member|loop
name|QEventLoop
name|loop
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWinRTMessageDialogHelper
name|QWinRTMessageDialogHelper
operator|::
name|QWinRTMessageDialogHelper
parameter_list|(
specifier|const
name|QWinRTTheme
modifier|*
name|theme
parameter_list|)
member_init_list|:
name|QPlatformMessageDialogHelper
argument_list|()
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QWinRTMessageDialogHelperPrivate
argument_list|)
block|{
name|Q_D
argument_list|(
name|QWinRTMessageDialogHelper
argument_list|)
expr_stmt|;
name|d
operator|->
name|theme
operator|=
name|theme
expr_stmt|;
name|d
operator|->
name|shown
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWinRTMessageDialogHelper
name|QWinRTMessageDialogHelper
operator|::
name|~
name|QWinRTMessageDialogHelper
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWinRTMessageDialogHelper
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|shown
condition|)
name|hide
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|exec
name|void
name|QWinRTMessageDialogHelper
operator|::
name|exec
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWinRTMessageDialogHelper
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|shown
condition|)
name|show
argument_list|(
name|Qt
operator|::
name|Dialog
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|show
name|bool
name|QWinRTMessageDialogHelper
operator|::
name|show
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|windowFlags
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|windowModality
parameter_list|,
name|QWindow
modifier|*
name|parent
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|windowFlags
argument_list|)
name|Q_UNUSED
argument_list|(
argument|windowModality
argument_list|)
name|Q_UNUSED
argument_list|(
argument|parent
argument_list|)
name|Q_D
argument_list|(
name|QWinRTMessageDialogHelper
argument_list|)
expr_stmt|;
name|QSharedPointer
argument_list|<
name|QMessageDialogOptions
argument_list|>
name|options
init|=
name|this
operator|->
name|options
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|informativeText
init|=
name|options
operator|->
name|informativeText
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|title
init|=
name|options
operator|->
name|windowTitle
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|text
init|=
name|informativeText
operator|.
name|isEmpty
argument_list|()
condition|?
name|options
operator|->
name|text
argument_list|()
else|:
operator|(
name|options
operator|->
name|text
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
operator|+
name|informativeText
operator|)
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IMessageDialogFactory
argument_list|>
name|dialogFactory
decl_stmt|;
name|hr
operator|=
name|RoGetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_UI_Popups_MessageDialog
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|dialogFactory
argument_list|)
argument_list|)
expr_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to create dialog factory"
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IUICommandFactory
argument_list|>
name|commandFactory
decl_stmt|;
name|hr
operator|=
name|RoGetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_UI_Popups_UICommand
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|commandFactory
argument_list|)
argument_list|)
expr_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to create command factory"
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IMessageDialog
argument_list|>
name|dialog
decl_stmt|;
name|HStringReference
name|nativeText
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|text
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|text
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HStringReference
name|nativeTitle
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|title
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|title
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|hr
operator|=
name|dialogFactory
operator|->
name|CreateWithTitle
argument_list|(
name|nativeText
operator|.
name|Get
argument_list|()
argument_list|,
name|nativeTitle
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|)
expr_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to create dialog with title"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hr
operator|=
name|dialogFactory
operator|->
name|Create
argument_list|(
name|nativeText
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|)
expr_stmt|;
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to create dialog"
argument_list|)
expr_stmt|;
block|}
name|hr
operator|=
name|QEventDispatcherWinRT
operator|::
name|runOnXamlThread
argument_list|(
capture|[
name|this
capture|,
name|d
capture|,
name|options
capture|,
name|commandFactory
capture|,
name|dialog
capture|]
parameter_list|()
block|{
name|HRESULT
name|hr
decl_stmt|;
comment|// Add Buttons
name|ComPtr
argument_list|<
name|IVector
argument_list|<
name|IUICommand
operator|*
argument_list|>
argument_list|>
name|dialogCommands
decl_stmt|;
name|hr
operator|=
name|dialog
operator|->
name|get_Commands
argument_list|(
operator|&
name|dialogCommands
argument_list|)
expr_stmt|;
name|RETURN_HR_IF_FAILED
argument_list|(
literal|"Failed to get dialog commands"
argument_list|)
expr_stmt|;
comment|// If no button is specified we need to create one to get close notification
name|int
name|buttons
type|=
name|options
operator|->
name|standardButtons
type|(
decl_stmt|);
if|if
condition|(
name|buttons
operator|==
literal|0
condition|)
name|buttons
operator|=
name|Ok
expr_stmt|;
for|for
control|(
name|int
name|i
type|=
name|FirstButton
init|;
name|i
operator|<
name|LastButton
condition|;
name|i
operator|<<=
literal|1
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|buttons
operator|&
name|i
operator|)
condition|)
continue|continue;
comment|// Add native command
specifier|const
name|QString
name|label
type|=
name|d
operator|->
name|theme
operator|->
name|standardButtonText
type|(
name|i
decl_stmt|);
name|HStringReference
name|nativeLabel
type|(reinterpret_cast
type|<
name|LPCWSTR
type|>(
name|label
operator|.
name|utf16
type|(
decl_stmt|)
block|)
operator|,
name|label
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IUICommand
argument_list|>
name|command
decl_stmt|;
name|hr
operator|=
name|commandFactory
operator|->
name|Create
argument_list|(
name|nativeLabel
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|command
argument_list|)
expr_stmt|;
name|RETURN_HR_IF_FAILED
argument_list|(
literal|"Failed to create message box command"
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|IInspectable
argument_list|>
name|id
init|=
name|Make
argument_list|<
name|CommandId
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|StandardButton
argument_list|>
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|hr
operator|=
name|command
operator|->
name|put_Id
argument_list|(
name|id
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
name|RETURN_HR_IF_FAILED
argument_list|(
literal|"Failed to set command ID"
argument_list|)
expr_stmt|;
name|hr
operator|=
name|dialogCommands
operator|->
name|Append
argument_list|(
name|command
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hr
operator|==
name|E_BOUNDS
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"The WinRT message dialog supports a maximum of three buttons"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|RETURN_HR_IF_FAILED
argument_list|(
literal|"Failed to append message box command"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|Abort
operator|||
name|i
operator|==
name|Cancel
operator|||
name|i
operator|==
name|Close
condition|)
block|{
name|quint32
name|size
decl_stmt|;
name|hr
operator|=
name|dialogCommands
operator|->
name|get_Size
argument_list|(
operator|&
name|size
argument_list|)
expr_stmt|;
name|RETURN_HR_IF_FAILED
argument_list|(
literal|"Failed to get command list size"
argument_list|)
expr_stmt|;
name|hr
operator|=
name|dialog
operator|->
name|put_CancelCommandIndex
argument_list|(
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
name|RETURN_HR_IF_FAILED
argument_list|(
literal|"Failed to set cancel index"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_decl_stmt
name|ComPtr
argument_list|<
name|IAsyncOperation
argument_list|<
name|IUICommand
modifier|*
argument_list|>
argument_list|>
name|op
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|hr
operator|=
name|dialog
operator|->
name|ShowAsync
argument_list|(
operator|&
name|op
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|RETURN_HR_IF_FAILED
argument_list|(
literal|"Failed to show dialog"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|hr
operator|=
name|op
operator|->
name|put_Completed
argument_list|(
name|Callback
argument_list|<
name|DialogCompletedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|QWinRTMessageDialogHelper
operator|::
name|onCompleted
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|RETURN_HR_IF_FAILED
argument_list|(
literal|"Failed to set dialog callback"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|d
operator|->
name|shown
operator|=
literal|true
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|hr
operator|=
name|op
operator|.
name|As
argument_list|(
operator|&
name|d
operator|->
name|info
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|RETURN_HR_IF_FAILED
argument_list|(
literal|"Failed to acquire AsyncInfo for MessageDialog"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|hr
return|;
end_return
begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt
begin_macro
name|RETURN_FALSE_IF_FAILED
argument_list|(
literal|"Failed to show dialog"
argument_list|)
end_macro
begin_return
return|return
literal|true
return|;
end_return
begin_macro
unit|}  void
DECL|function|hide
name|QWinRTMessageDialogHelper
end_macro
begin_expr_stmt
DECL|function|hide
operator|::
name|hide
operator|(
operator|)
block|{
name|Q_D
argument_list|(
name|QWinRTMessageDialogHelper
argument_list|)
block|;
if|if
condition|(
operator|!
name|d
operator|->
name|shown
condition|)
return|return;
name|HRESULT
name|hr
operator|=
name|d
operator|->
name|info
operator|->
name|Cancel
argument_list|()
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qErrnoWarning
argument_list|(
name|hr
argument_list|,
literal|"Failed to cancel dialog operation"
argument_list|)
expr_stmt|;
end_if
begin_expr_stmt
name|d
operator|->
name|shown
operator|=
literal|false
expr_stmt|;
end_expr_stmt
begin_macro
unit|}  HRESULT
DECL|function|onCompleted
name|QWinRTMessageDialogHelper
end_macro
begin_expr_stmt
DECL|function|onCompleted
operator|::
name|onCompleted
operator|(
name|IAsyncOperation
argument_list|<
name|IUICommand
operator|*
argument_list|>
operator|*
name|asyncInfo
operator|,
name|AsyncStatus
name|status
operator|)
block|{
name|Q_UNUSED
argument_list|(
name|status
argument_list|)
block|;
name|Q_D
argument_list|(
name|QWinRTMessageDialogHelper
argument_list|)
block|;
name|QEventLoopLocker
name|locker
argument_list|(
operator|&
name|d
operator|->
name|loop
argument_list|)
block|;
name|d
operator|->
name|shown
operator|=
literal|false
block|;
if|if
condition|(
name|status
operator|==
name|Canceled
condition|)
block|{
emit|emit
name|reject
argument_list|()
emit|;
return|return
name|S_OK
return|;
block|}
name|HRESULT
name|hr
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|ComPtr
argument_list|<
name|IUICommand
argument_list|>
name|command
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|hr
operator|=
name|asyncInfo
operator|->
name|GetResults
argument_list|(
operator|&
name|command
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|RETURN_OK_IF_FAILED
argument_list|(
literal|"Failed to get command"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|ComPtr
argument_list|<
name|CommandId
argument_list|>
name|id
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|hr
operator|=
name|command
operator|->
name|get_Id
argument_list|(
operator|&
name|id
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|RETURN_OK_IF_FAILED
argument_list|(
literal|"Failed to get command ID"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|ButtonRole
name|role
init|=
name|buttonRole
argument_list|(
name|id
operator|->
name|button
argument_list|)
decl_stmt|;
end_decl_stmt
begin_emit
emit|emit
name|clicked
argument_list|(
name|id
operator|->
name|button
argument_list|,
name|role
argument_list|)
emit|;
end_emit
begin_return
return|return
name|S_OK
return|;
end_return
unit|}  QT_END_NAMESPACE
end_unit
