begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwinrtcursor.h"
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<windows.ui.core.h>
end_include
begin_include
include|#
directive|include
file|<windows.foundation.h>
end_include
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QWinRTCursor
name|QWinRTCursor
operator|::
name|QWinRTCursor
parameter_list|(
name|ICoreWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|m_window
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_cursorFactory
argument_list|(
literal|nullptr
argument_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
name|GetActivationFactory
argument_list|(
name|HString
operator|::
name|MakeReference
argument_list|(
name|RuntimeClass_Windows_UI_Core_CoreCursor
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_cursorFactory
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QWinRTCursor
name|QWinRTCursor
operator|::
name|~
name|QWinRTCursor
parameter_list|()
block|{
if|if
condition|(
name|m_cursorFactory
condition|)
name|m_cursorFactory
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|changeCursor
name|void
name|QWinRTCursor
operator|::
name|changeCursor
parameter_list|(
name|QCursor
modifier|*
name|windowCursor
parameter_list|,
name|QWindow
modifier|*
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
if|if
condition|(
operator|!
name|m_cursorFactory
condition|)
return|return;
name|CoreCursorType
name|type
decl_stmt|;
switch|switch
condition|(
name|windowCursor
condition|?
name|windowCursor
operator|->
name|shape
argument_list|()
else|:
name|Qt
operator|::
name|ArrowCursor
condition|)
block|{
case|case
name|Qt
operator|::
name|BlankCursor
case|:
name|m_window
operator|->
name|put_PointerCursor
argument_list|(
literal|nullptr
argument_list|)
expr_stmt|;
return|return;
default|default:
case|case
name|Qt
operator|::
name|OpenHandCursor
case|:
case|case
name|Qt
operator|::
name|ClosedHandCursor
case|:
case|case
name|Qt
operator|::
name|DragCopyCursor
case|:
case|case
name|Qt
operator|::
name|DragMoveCursor
case|:
case|case
name|Qt
operator|::
name|DragLinkCursor
case|:
comment|// (unavailable)
case|case
name|Qt
operator|::
name|ArrowCursor
case|:
name|type
operator|=
name|CoreCursorType_Arrow
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UpArrowCursor
case|:
name|type
operator|=
name|CoreCursorType_UpArrow
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|CrossCursor
case|:
name|type
operator|=
name|CoreCursorType_Cross
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WaitCursor
case|:
case|case
name|Qt
operator|::
name|BusyCursor
case|:
name|type
operator|=
name|CoreCursorType_Wait
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|IBeamCursor
case|:
name|type
operator|=
name|CoreCursorType_IBeam
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeVerCursor
case|:
case|case
name|Qt
operator|::
name|SplitVCursor
case|:
name|type
operator|=
name|CoreCursorType_SizeNorthSouth
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeHorCursor
case|:
case|case
name|Qt
operator|::
name|SplitHCursor
case|:
name|type
operator|=
name|CoreCursorType_SizeWestEast
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeBDiagCursor
case|:
name|type
operator|=
name|CoreCursorType_SizeNortheastSouthwest
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeFDiagCursor
case|:
name|type
operator|=
name|CoreCursorType_SizeNorthwestSoutheast
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeAllCursor
case|:
name|type
operator|=
name|CoreCursorType_SizeAll
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|PointingHandCursor
case|:
name|type
operator|=
name|CoreCursorType_Hand
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ForbiddenCursor
case|:
name|type
operator|=
name|CoreCursorType_UniversalNo
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WhatsThisCursor
case|:
name|type
operator|=
name|CoreCursorType_Help
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BitmapCursor
case|:
case|case
name|Qt
operator|::
name|CustomCursor
case|:
comment|// TODO: figure out if arbitrary bitmaps can be made into resource IDs
comment|// For now, we don't get enough info from QCursor to set a custom cursor
name|type
operator|=
name|CoreCursorType_Custom
expr_stmt|;
break|break;
block|}
name|ICoreCursor
modifier|*
name|cursor
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|m_cursorFactory
operator|->
name|CreateCursor
argument_list|(
name|type
argument_list|,
literal|0
argument_list|,
operator|&
name|cursor
argument_list|)
argument_list|)
condition|)
name|m_window
operator|->
name|put_PointerCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// Q_OS_WINPHONE
name|Q_UNUSED
argument_list|(
argument|windowCursor
argument_list|)
endif|#
directive|endif
comment|// Q_OS_WINPHONE
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CURSOR
end_comment
begin_function
DECL|function|pos
name|QPoint
name|QWinRTCursor
operator|::
name|pos
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
return|return
name|QPlatformCursor
operator|::
name|pos
argument_list|()
return|;
else|#
directive|else
name|Point
name|point
decl_stmt|;
name|m_window
operator|->
name|get_PointerPosition
argument_list|(
operator|&
name|point
argument_list|)
expr_stmt|;
return|return
name|QPoint
argument_list|(
name|point
operator|.
name|X
argument_list|,
name|point
operator|.
name|Y
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
