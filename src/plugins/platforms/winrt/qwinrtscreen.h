begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWINRTSCREEN_H
end_ifndef
begin_define
DECL|macro|QWINRTSCREEN_H
define|#
directive|define
name|QWINRTSCREEN_H
end_define
begin_include
include|#
directive|include
file|<qpa/qplatformscreen.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QHash>
end_include
begin_include
include|#
directive|include
file|<QtGui/QSurfaceFormat>
end_include
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_include
include|#
directive|include
file|<EventToken.h>
end_include
begin_decl_stmt
name|namespace
name|ABI
block|{
name|namespace
name|Windows
block|{
name|namespace
name|ApplicationModel
block|{
struct_decl|struct
name|ISuspendingEventArgs
struct_decl|;
name|namespace
name|Core
block|{
struct_decl|struct
name|ICoreApplication
struct_decl|;
block|}
block|}
name|namespace
name|UI
block|{
name|namespace
name|Core
block|{
struct_decl|struct
name|IAutomationProviderRequestedEventArgs
struct_decl|;
struct_decl|struct
name|ICharacterReceivedEventArgs
struct_decl|;
struct_decl|struct
name|ICoreWindow
struct_decl|;
struct_decl|struct
name|ICoreWindowEventArgs
struct_decl|;
struct_decl|struct
name|IKeyEventArgs
struct_decl|;
struct_decl|struct
name|IPointerEventArgs
struct_decl|;
struct_decl|struct
name|IVisibilityChangedEventArgs
struct_decl|;
struct_decl|struct
name|IWindowActivatedEventArgs
struct_decl|;
struct_decl|struct
name|IWindowSizeChangedEventArgs
struct_decl|;
block|}
name|namespace
name|ViewManagement
block|{
struct_decl|struct
name|IApplicationViewStatics
struct_decl|;
block|}
block|}
name|namespace
name|Graphics
block|{
name|namespace
name|Display
block|{
struct_decl|struct
name|IDisplayPropertiesStatics
struct_decl|;
block|}
block|}
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
name|namespace
name|Phone
block|{
name|namespace
name|UI
block|{
name|namespace
name|Input
block|{
struct_decl|struct
name|IBackPressedEventArgs
struct_decl|;
block|}
block|}
block|}
endif|#
directive|endif
block|}
block|}
end_decl_stmt
begin_struct_decl
struct_decl|struct
name|IInspectable
struct_decl|;
end_struct_decl
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QTouchDevice
name|class
name|QTouchDevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWinRTEGLContext
name|class
name|QWinRTEGLContext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWinRTPageFlipper
name|class
name|QWinRTPageFlipper
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWinRTCursor
name|class
name|QWinRTCursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWinRTInputContext
name|class
name|QWinRTInputContext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QWinRTScreen
range|:
name|public
name|QPlatformScreen
block|{
name|public
operator|:
name|explicit
name|QWinRTScreen
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
name|window
argument_list|)
block|;
name|QRect
name|geometry
argument_list|()
specifier|const
block|;
name|int
name|depth
argument_list|()
specifier|const
block|;
name|QImage
operator|::
name|Format
name|format
argument_list|()
specifier|const
block|;
name|QSurfaceFormat
name|surfaceFormat
argument_list|()
specifier|const
block|;
name|QWinRTInputContext
operator|*
name|inputContext
argument_list|()
specifier|const
block|;
name|QPlatformCursor
operator|*
name|cursor
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|KeyboardModifiers
name|keyboardModifiers
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|ScreenOrientation
name|nativeOrientation
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|ScreenOrientation
name|orientation
argument_list|()
specifier|const
block|;
name|void
name|setOrientationUpdateMask
argument_list|(
argument|Qt::ScreenOrientations mask
argument_list|)
block|;
name|QWindow
operator|*
name|topWindow
argument_list|()
specifier|const
block|;
name|void
name|addWindow
argument_list|(
name|QWindow
operator|*
name|window
argument_list|)
block|;
name|void
name|removeWindow
argument_list|(
name|QWindow
operator|*
name|window
argument_list|)
block|;
name|void
name|raise
argument_list|(
name|QWindow
operator|*
name|window
argument_list|)
block|;
name|void
name|lower
argument_list|(
name|QWindow
operator|*
name|window
argument_list|)
block|;
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
name|coreWindow
argument_list|()
specifier|const
block|;
name|EGLDisplay
name|eglDisplay
argument_list|()
specifier|const
block|;
comment|// To opengl context
name|EGLSurface
name|eglSurface
argument_list|()
specifier|const
block|;
comment|// To window
name|private
operator|:
name|void
name|handleExpose
argument_list|()
block|;
comment|// Event handlers
name|QHash
operator|<
name|QEvent
operator|::
name|Type
block|,
name|EventRegistrationToken
operator|>
name|m_tokens
block|;
name|QHash
operator|<
name|Qt
operator|::
name|ApplicationState
block|,
name|EventRegistrationToken
operator|>
name|m_suspendTokens
block|;
name|HRESULT
name|onKeyDown
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
name|window
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IKeyEventArgs
operator|*
name|args
argument_list|)
block|;
name|HRESULT
name|onKeyUp
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
name|window
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IKeyEventArgs
operator|*
name|args
argument_list|)
block|;
name|HRESULT
name|onCharacterReceived
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
name|window
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICharacterReceivedEventArgs
operator|*
name|args
argument_list|)
block|;
name|HRESULT
name|onPointerEntered
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
name|window
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IPointerEventArgs
operator|*
name|args
argument_list|)
block|;
name|HRESULT
name|onPointerExited
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
name|window
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IPointerEventArgs
operator|*
name|args
argument_list|)
block|;
name|HRESULT
name|onPointerUpdated
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
name|window
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IPointerEventArgs
operator|*
name|args
argument_list|)
block|;
name|HRESULT
name|onSizeChanged
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
name|window
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IWindowSizeChangedEventArgs
operator|*
name|args
argument_list|)
block|;
name|HRESULT
name|onActivated
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IWindowActivatedEventArgs
operator|*
name|args
argument_list|)
block|;
name|HRESULT
name|onSuspended
argument_list|(
name|IInspectable
operator|*
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|ApplicationModel
operator|::
name|ISuspendingEventArgs
operator|*
argument_list|)
block|;
name|HRESULT
name|onResume
argument_list|(
name|IInspectable
operator|*
argument_list|,
name|IInspectable
operator|*
argument_list|)
block|;
name|HRESULT
name|onClosed
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindowEventArgs
operator|*
name|args
argument_list|)
block|;
name|HRESULT
name|onVisibilityChanged
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IVisibilityChangedEventArgs
operator|*
name|args
argument_list|)
block|;
name|HRESULT
name|onAutomationProviderRequested
argument_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IAutomationProviderRequestedEventArgs
operator|*
name|args
argument_list|)
block|;
name|HRESULT
name|onOrientationChanged
argument_list|(
name|IInspectable
operator|*
argument_list|)
block|;
ifdef|#
directive|ifdef
name|Q_OS_WINPHONE
name|HRESULT
name|onBackButtonPressed
argument_list|(
name|IInspectable
operator|*
argument_list|,
name|ABI
operator|::
name|Windows
operator|::
name|Phone
operator|::
name|UI
operator|::
name|Input
operator|::
name|IBackPressedEventArgs
operator|*
name|args
argument_list|)
block|;
endif|#
directive|endif
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
name|m_coreWindow
block|;
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|ViewManagement
operator|::
name|IApplicationViewStatics
operator|*
name|m_applicationView
block|;
name|ABI
operator|::
name|Windows
operator|::
name|ApplicationModel
operator|::
name|Core
operator|::
name|ICoreApplication
operator|*
name|m_application
block|;
name|QRect
name|m_geometry
block|;
name|QImage
operator|::
name|Format
name|m_format
block|;
name|QSurfaceFormat
name|m_surfaceFormat
block|;
name|int
name|m_depth
block|;
name|QWinRTInputContext
operator|*
name|m_inputContext
block|;
name|QWinRTCursor
operator|*
name|m_cursor
block|;
name|QList
operator|<
name|QWindow
operator|*
operator|>
name|m_visibleWindows
block|;
name|EGLDisplay
name|m_eglDisplay
block|;
name|EGLSurface
name|m_eglSurface
block|;
name|ABI
operator|::
name|Windows
operator|::
name|Graphics
operator|::
name|Display
operator|::
name|IDisplayPropertiesStatics
operator|*
name|m_displayProperties
block|;
name|Qt
operator|::
name|ScreenOrientation
name|m_nativeOrientation
block|;
name|Qt
operator|::
name|ScreenOrientation
name|m_orientation
block|;
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
name|QHash
operator|<
name|quint32
block|,
name|QPair
operator|<
name|Qt
operator|::
name|Key
block|,
name|QString
operator|>
expr|>
name|m_activeKeys
block|;
endif|#
directive|endif
name|QTouchDevice
operator|*
name|m_touchDevice
block|;
name|QHash
operator|<
name|quint32
block|,
name|QWindowSystemInterface
operator|::
name|TouchPoint
operator|>
name|m_touchPoints
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWINRTSCREEN_H
end_comment
end_unit
