begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxlibintegration.h"
end_include
begin_include
include|#
directive|include
file|"qxlibwindowsurface.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|"qxlibwindow.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qgenericunixeventdispatcher_p.h>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qgenericunixfontdatabase_p.h>
end_include
begin_include
include|#
directive|include
file|"qxlibscreen.h"
end_include
begin_include
include|#
directive|include
file|"qxlibclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qxlibdisplay.h"
end_include
begin_include
include|#
directive|include
file|"qxlibnativeinterface.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_OPENGL
argument_list|)
end_if
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
end_if
begin_include
include|#
directive|include
file|<GL/glx.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//!defined(QT_OPENGL_ES_2)
end_comment
begin_include
include|#
directive|include
file|<private/qwindowsurface_gl_p.h>
end_include
begin_include
include|#
directive|include
file|<qplatformpixmap_gl_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_OPENGL
end_comment
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QXlibIntegration
name|QXlibIntegration
operator|::
name|QXlibIntegration
parameter_list|(
name|bool
name|useOpenGL
parameter_list|)
member_init_list|:
name|mUseOpenGL
argument_list|(
name|useOpenGL
argument_list|)
member_init_list|,
name|mFontDb
argument_list|(
operator|new
name|QGenericUnixFontDatabase
argument_list|()
argument_list|)
member_init_list|,
name|mClipboard
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mNativeInterface
argument_list|(
operator|new
name|QXlibNativeInterface
argument_list|)
block|{
name|mPrimaryScreen
operator|=
operator|new
name|QXlibScreen
argument_list|()
expr_stmt|;
name|mScreens
operator|.
name|append
argument_list|(
name|mPrimaryScreen
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|hasCapability
name|bool
name|QXlibIntegration
operator|::
name|hasCapability
parameter_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|cap
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cap
condition|)
block|{
case|case
name|ThreadedPixmaps
case|:
return|return
literal|true
return|;
case|case
name|OpenGL
case|:
return|return
name|hasOpenGL
argument_list|()
return|;
default|default:
return|return
name|QPlatformIntegration
operator|::
name|hasCapability
argument_list|(
name|cap
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|createPlatformPixmap
name|QPlatformPixmap
modifier|*
name|QXlibIntegration
operator|::
name|createPlatformPixmap
parameter_list|(
name|QPlatformPixmap
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
if|if
condition|(
name|mUseOpenGL
condition|)
return|return
operator|new
name|QGLPlatformPixmap
argument_list|(
name|type
argument_list|)
return|;
endif|#
directive|endif
return|return
operator|new
name|QRasterPlatformPixmap
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createWindowSurface
name|QWindowSurface
modifier|*
name|QXlibIntegration
operator|::
name|createWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|WId
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
if|if
condition|(
name|mUseOpenGL
condition|)
return|return
operator|new
name|QGLWindowSurface
argument_list|(
name|widget
argument_list|)
return|;
endif|#
directive|endif
return|return
operator|new
name|QXlibWindowSurface
argument_list|(
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createPlatformWindow
name|QPlatformWindow
modifier|*
name|QXlibIntegration
operator|::
name|createPlatformWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|WId
comment|/*winId*/
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QXlibWindow
argument_list|(
name|widget
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createEventDispatcher
name|QAbstractEventDispatcher
modifier|*
name|QXlibIntegration
operator|::
name|createEventDispatcher
parameter_list|()
specifier|const
block|{
return|return
name|createUnixEventDispatcher
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|grabWindow
name|QPixmap
name|QXlibIntegration
operator|::
name|grabWindow
parameter_list|(
name|WId
name|window
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
specifier|const
block|{
name|QImage
name|image
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
name|QWidget
operator|::
name|find
argument_list|(
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
name|QXlibScreen
modifier|*
name|screen
init|=
name|QXlibScreen
operator|::
name|testLiteScreenForWidget
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|image
operator|=
name|screen
operator|->
name|grabWindow
argument_list|(
name|window
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mScreens
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QXlibScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QXlibScreen
operator|*
argument_list|>
argument_list|(
name|mScreens
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|screen
operator|->
name|rootWindow
argument_list|()
operator|==
name|window
condition|)
block|{
name|image
operator|=
name|screen
operator|->
name|grabWindow
argument_list|(
name|window
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fontDatabase
name|QPlatformFontDatabase
modifier|*
name|QXlibIntegration
operator|::
name|fontDatabase
parameter_list|()
specifier|const
block|{
return|return
name|mFontDb
return|;
block|}
end_function
begin_function
DECL|function|clipboard
name|QPlatformClipboard
modifier|*
name|QXlibIntegration
operator|::
name|clipboard
parameter_list|()
specifier|const
block|{
comment|//Use lazy init since clipboard needs QTestliteScreen
if|if
condition|(
operator|!
name|mClipboard
condition|)
block|{
name|QXlibIntegration
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QXlibIntegration
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|mClipboard
operator|=
operator|new
name|QXlibClipboard
argument_list|(
name|mPrimaryScreen
argument_list|)
expr_stmt|;
block|}
return|return
name|mClipboard
return|;
block|}
end_function
begin_function
DECL|function|nativeInterface
name|QPlatformNativeInterface
modifier|*
name|QXlibIntegration
operator|::
name|nativeInterface
parameter_list|()
specifier|const
block|{
return|return
name|mNativeInterface
return|;
block|}
end_function
begin_function
DECL|function|hasOpenGL
name|bool
name|QXlibIntegration
operator|::
name|hasOpenGL
parameter_list|()
specifier|const
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_OPENGL
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|QXlibScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QXlibScreen
operator|*
argument_list|>
argument_list|(
name|mScreens
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|glXQueryExtension
argument_list|(
name|screen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|!=
literal|0
return|;
else|#
directive|else
specifier|static
name|bool
name|eglHasbeenInitialized
init|=
literal|false
decl_stmt|;
specifier|static
name|bool
name|wasEglInitialized
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|eglHasbeenInitialized
condition|)
block|{
name|eglHasbeenInitialized
operator|=
literal|true
expr_stmt|;
name|QXlibScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QXlibScreen
operator|*
argument_list|>
argument_list|(
name|mScreens
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|EGLint
name|major
decl_stmt|,
name|minor
decl_stmt|;
name|eglBindAPI
argument_list|(
name|EGL_OPENGL_ES_API
argument_list|)
expr_stmt|;
name|EGLDisplay
name|disp
init|=
name|eglGetDisplay
argument_list|(
name|screen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|)
decl_stmt|;
name|wasEglInitialized
operator|=
name|eglInitialize
argument_list|(
name|disp
argument_list|,
operator|&
name|major
argument_list|,
operator|&
name|minor
argument_list|)
expr_stmt|;
name|screen
operator|->
name|setEglDisplay
argument_list|(
name|disp
argument_list|)
expr_stmt|;
block|}
return|return
name|wasEglInitialized
return|;
endif|#
directive|endif
endif|#
directive|endif
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
