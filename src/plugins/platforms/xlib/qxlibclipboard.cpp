begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxlibclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qxlibscreen.h"
end_include
begin_include
include|#
directive|include
file|"qxlibmime.h"
end_include
begin_include
include|#
directive|include
file|"qxlibdisplay.h"
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_class
DECL|class|QXlibClipboardMime
class|class
name|QXlibClipboardMime
super|:
specifier|public
name|QXlibMime
block|{
name|Q_OBJECT
public|public:
DECL|function|QXlibClipboardMime
name|QXlibClipboardMime
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|,
name|QXlibClipboard
modifier|*
name|clipboard
parameter_list|)
member_init_list|:
name|QXlibMime
argument_list|()
member_init_list|,
name|m_clipboard
argument_list|(
name|clipboard
argument_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|QClipboard
operator|::
name|Selection
case|:
name|modeAtom
operator|=
name|XA_PRIMARY
expr_stmt|;
break|break;
case|case
name|QClipboard
operator|::
name|Clipboard
case|:
name|modeAtom
operator|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|CLIPBOARD
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QTestLiteMime: Internal error: Unsupported clipboard mode"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
protected|protected:
DECL|function|formats_sys
name|QStringList
name|formats_sys
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|empty
argument_list|()
condition|)
return|return
name|QStringList
argument_list|()
return|;
if|if
condition|(
operator|!
name|formatList
operator|.
name|count
argument_list|()
condition|)
block|{
name|QXlibClipboardMime
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QXlibClipboardMime
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// get the list of targets from the current clipboard owner - we do this
comment|// once so that multiple calls to this function don't require multiple
comment|// server round trips...
name|that
operator|->
name|format_atoms
operator|=
name|m_clipboard
operator|->
name|getDataInFormat
argument_list|(
name|modeAtom
argument_list|,
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|TARGETS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|format_atoms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Atom
modifier|*
name|targets
init|=
operator|(
name|Atom
operator|*
operator|)
name|format_atoms
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|format_atoms
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|Atom
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|targets
index|[
name|i
index|]
operator|==
literal|0
condition|)
continue|continue;
name|QStringList
name|formatsForAtom
init|=
name|mimeFormatsForAtom
argument_list|(
name|m_clipboard
operator|->
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|targets
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|formatsForAtom
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|!
name|formatList
operator|.
name|contains
argument_list|(
name|formatsForAtom
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
name|that
operator|->
name|formatList
operator|.
name|append
argument_list|(
name|formatsForAtom
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|formatList
return|;
block|}
DECL|function|hasFormat_sys
name|bool
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
name|QStringList
name|list
init|=
name|formats
argument_list|()
decl_stmt|;
return|return
name|list
operator|.
name|contains
argument_list|(
name|format
argument_list|)
return|;
block|}
DECL|function|retrieveData_sys
name|QVariant
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|fmt
parameter_list|,
name|QVariant
operator|::
name|Type
name|requestedType
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|fmt
operator|.
name|isEmpty
argument_list|()
operator|||
name|empty
argument_list|()
condition|)
return|return
name|QByteArray
argument_list|()
return|;
operator|(
name|void
operator|)
name|formats
argument_list|()
expr_stmt|;
comment|// trigger update of format list
name|QList
argument_list|<
name|Atom
argument_list|>
name|atoms
decl_stmt|;
name|Atom
modifier|*
name|targets
init|=
operator|(
name|Atom
operator|*
operator|)
name|format_atoms
operator|.
name|data
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|format_atoms
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|Atom
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|atoms
operator|.
name|append
argument_list|(
name|targets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QByteArray
name|encoding
decl_stmt|;
name|Atom
name|fmtatom
init|=
name|mimeAtomForFormat
argument_list|(
name|m_clipboard
operator|->
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|fmt
argument_list|,
name|requestedType
argument_list|,
name|atoms
argument_list|,
operator|&
name|encoding
argument_list|)
decl_stmt|;
if|if
condition|(
name|fmtatom
operator|==
literal|0
condition|)
return|return
name|QVariant
argument_list|()
return|;
return|return
name|mimeConvertToFormat
argument_list|(
name|m_clipboard
operator|->
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|fmtatom
argument_list|,
name|m_clipboard
operator|->
name|getDataInFormat
argument_list|(
name|modeAtom
argument_list|,
name|fmtatom
argument_list|)
argument_list|,
name|fmt
argument_list|,
name|requestedType
argument_list|,
name|encoding
argument_list|)
return|;
block|}
private|private:
DECL|function|empty
name|bool
name|empty
parameter_list|()
specifier|const
block|{
name|Window
name|win
init|=
name|XGetSelectionOwner
argument_list|(
name|m_clipboard
operator|->
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|modeAtom
argument_list|)
decl_stmt|;
return|return
name|win
operator|==
name|XNone
return|;
block|}
DECL|member|modeAtom
name|Atom
name|modeAtom
decl_stmt|;
DECL|member|m_clipboard
name|QXlibClipboard
modifier|*
name|m_clipboard
decl_stmt|;
DECL|member|formatList
name|QStringList
name|formatList
decl_stmt|;
DECL|member|format_atoms
name|QByteArray
name|format_atoms
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|clipboard_timeout
specifier|const
name|int
name|QXlibClipboard
operator|::
name|clipboard_timeout
init|=
literal|5000
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QXlibClipboard
name|QXlibClipboard
operator|::
name|QXlibClipboard
parameter_list|(
name|QXlibScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|QPlatformClipboard
argument_list|()
member_init_list|,
name|m_screen
argument_list|(
name|screen
argument_list|)
member_init_list|,
name|m_xClipboard
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_clientClipboard
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_xSelection
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_clientSelection
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_requestor
argument_list|(
name|XNone
argument_list|)
member_init_list|,
name|m_owner
argument_list|(
name|XNone
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|mimeData
name|QMimeData
modifier|*
name|QXlibClipboard
operator|::
name|mimeData
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|QClipboard
operator|::
name|Clipboard
condition|)
block|{
if|if
condition|(
operator|!
name|m_xClipboard
condition|)
block|{
name|m_xClipboard
operator|=
operator|new
name|QXlibClipboardMime
argument_list|(
name|mode
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|Window
name|clipboardOwner
init|=
name|XGetSelectionOwner
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|CLIPBOARD
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|clipboardOwner
operator|==
name|owner
argument_list|()
condition|)
block|{
return|return
name|m_clientClipboard
return|;
block|}
else|else
block|{
return|return
name|m_xClipboard
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|QClipboard
operator|::
name|Selection
condition|)
block|{
if|if
condition|(
operator|!
name|m_xSelection
condition|)
block|{
name|m_xSelection
operator|=
operator|new
name|QXlibClipboardMime
argument_list|(
name|mode
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|Window
name|clipboardOwner
init|=
name|XGetSelectionOwner
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|XA_PRIMARY
argument_list|)
decl_stmt|;
if|if
condition|(
name|clipboardOwner
operator|==
name|owner
argument_list|()
condition|)
block|{
return|return
name|m_clientSelection
return|;
block|}
else|else
block|{
return|return
name|m_xSelection
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setMimeData
name|void
name|QXlibClipboard
operator|::
name|setMimeData
parameter_list|(
name|QMimeData
modifier|*
name|data
parameter_list|,
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
block|{
name|Atom
name|modeAtom
decl_stmt|;
name|QMimeData
modifier|*
modifier|*
name|d
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|QClipboard
operator|::
name|Selection
case|:
name|modeAtom
operator|=
name|XA_PRIMARY
expr_stmt|;
name|d
operator|=
operator|&
name|m_clientSelection
expr_stmt|;
break|break;
case|case
name|QClipboard
operator|::
name|Clipboard
case|:
name|modeAtom
operator|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|CLIPBOARD
argument_list|)
expr_stmt|;
name|d
operator|=
operator|&
name|m_clientClipboard
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QClipboard::setMimeData: unsupported mode '%d'"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
return|return;
block|}
name|Window
name|newOwner
decl_stmt|;
if|if
condition|(
operator|!
name|data
condition|)
block|{
comment|// no data, clear clipboard contents
name|newOwner
operator|=
name|XNone
expr_stmt|;
block|}
else|else
block|{
name|newOwner
operator|=
name|owner
argument_list|()
expr_stmt|;
operator|*
name|d
operator|=
name|data
expr_stmt|;
block|}
name|XSetSelectionOwner
argument_list|(
name|m_screen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|modeAtom
argument_list|,
name|newOwner
argument_list|,
name|CurrentTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|XGetSelectionOwner
argument_list|(
name|m_screen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|modeAtom
argument_list|)
operator|!=
name|newOwner
condition|)
block|{
name|qWarning
argument_list|(
literal|"QClipboard::setData: Cannot set X11 selection owner"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|supportsMode
name|bool
name|QXlibClipboard
operator|::
name|supportsMode
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mode
operator|==
name|QClipboard
operator|::
name|Clipboard
operator|||
name|mode
operator|==
name|QClipboard
operator|::
name|Selection
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|screen
name|QXlibScreen
modifier|*
name|QXlibClipboard
operator|::
name|screen
parameter_list|()
specifier|const
block|{
return|return
name|m_screen
return|;
block|}
end_function
begin_function
DECL|function|requestor
name|Window
name|QXlibClipboard
operator|::
name|requestor
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_requestor
condition|)
block|{
name|int
name|x
init|=
literal|0
decl_stmt|,
name|y
init|=
literal|0
decl_stmt|,
name|w
init|=
literal|3
decl_stmt|,
name|h
init|=
literal|3
decl_stmt|;
name|QXlibClipboard
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QXlibClipboard
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Window
name|window
init|=
name|XCreateSimpleWindow
argument_list|(
name|m_screen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|m_screen
operator|->
name|rootWindow
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|0
comment|/*border_width*/
argument_list|,
name|m_screen
operator|->
name|blackPixel
argument_list|()
argument_list|,
name|m_screen
operator|->
name|whitePixel
argument_list|()
argument_list|)
decl_stmt|;
name|that
operator|->
name|setRequestor
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
return|return
name|m_requestor
return|;
block|}
end_function
begin_function
DECL|function|setRequestor
name|void
name|QXlibClipboard
operator|::
name|setRequestor
parameter_list|(
name|Window
name|window
parameter_list|)
block|{
if|if
condition|(
name|m_requestor
operator|!=
name|XNone
condition|)
block|{
name|XDestroyWindow
argument_list|(
name|m_screen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|m_requestor
argument_list|)
expr_stmt|;
block|}
name|m_requestor
operator|=
name|window
expr_stmt|;
block|}
end_function
begin_function
DECL|function|owner
name|Window
name|QXlibClipboard
operator|::
name|owner
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_owner
condition|)
block|{
name|int
name|x
init|=
literal|0
decl_stmt|,
name|y
init|=
literal|0
decl_stmt|,
name|w
init|=
literal|3
decl_stmt|,
name|h
init|=
literal|3
decl_stmt|;
name|QXlibClipboard
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QXlibClipboard
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Window
name|window
init|=
name|XCreateSimpleWindow
argument_list|(
name|m_screen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|m_screen
operator|->
name|rootWindow
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|0
comment|/*border_width*/
argument_list|,
name|m_screen
operator|->
name|blackPixel
argument_list|()
argument_list|,
name|m_screen
operator|->
name|whitePixel
argument_list|()
argument_list|)
decl_stmt|;
name|that
operator|->
name|setOwner
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
return|return
name|m_owner
return|;
block|}
end_function
begin_function
DECL|function|setOwner
name|void
name|QXlibClipboard
operator|::
name|setOwner
parameter_list|(
name|Window
name|window
parameter_list|)
block|{
if|if
condition|(
name|m_owner
operator|!=
name|XNone
condition|)
block|{
name|XDestroyWindow
argument_list|(
name|m_screen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|m_owner
argument_list|)
expr_stmt|;
block|}
name|m_owner
operator|=
name|window
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendTargetsSelection
name|Atom
name|QXlibClipboard
operator|::
name|sendTargetsSelection
parameter_list|(
name|QMimeData
modifier|*
name|d
parameter_list|,
name|Window
name|window
parameter_list|,
name|Atom
name|property
parameter_list|)
block|{
name|QVector
argument_list|<
name|Atom
argument_list|>
name|types
decl_stmt|;
name|QStringList
name|formats
init|=
name|QInternalMimeData
operator|::
name|formatsHelper
argument_list|(
name|d
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|formats
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|Atom
argument_list|>
name|atoms
init|=
name|QXlibMime
operator|::
name|mimeAtomsForFormat
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|formats
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|atoms
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|!
name|types
operator|.
name|contains
argument_list|(
name|atoms
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
name|types
operator|.
name|append
argument_list|(
name|atoms
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|types
operator|.
name|append
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|TARGETS
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|append
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|MULTIPLE
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|append
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|TIMESTAMP
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|append
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|SAVE_TARGETS
argument_list|)
argument_list|)
expr_stmt|;
name|XChangeProperty
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|window
argument_list|,
name|property
argument_list|,
name|XA_ATOM
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
name|types
operator|.
name|data
argument_list|()
argument_list|,
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|property
return|;
block|}
end_function
begin_function
DECL|function|sendSelection
name|Atom
name|QXlibClipboard
operator|::
name|sendSelection
parameter_list|(
name|QMimeData
modifier|*
name|d
parameter_list|,
name|Atom
name|target
parameter_list|,
name|Window
name|window
parameter_list|,
name|Atom
name|property
parameter_list|)
block|{
name|Atom
name|atomFormat
init|=
name|target
decl_stmt|;
name|int
name|dataFormat
init|=
literal|0
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QString
name|fmt
init|=
name|QXlibMime
operator|::
name|mimeAtomToString
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|fmt
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Not a MIME type we have
name|qDebug
argument_list|()
operator|<<
literal|"QClipboard: send_selection(): converting to type '%s' is not supported"
operator|<<
name|fmt
operator|.
name|data
argument_list|()
expr_stmt|;
return|return
name|XNone
return|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"QClipboard: send_selection(): converting to type '%s'"
operator|<<
name|fmt
operator|.
name|data
argument_list|()
expr_stmt|;
if|if
condition|(
name|QXlibMime
operator|::
name|mimeDataForAtom
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|target
argument_list|,
name|d
argument_list|,
operator|&
name|data
argument_list|,
operator|&
name|atomFormat
argument_list|,
operator|&
name|dataFormat
argument_list|)
condition|)
block|{
comment|// don't allow INCR transfers when using MULTIPLE or to
comment|// Motif clients (since Motif doesn't support INCR)
specifier|static
name|Atom
name|motif_clip_temporary
init|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|CLIP_TEMPORARY
argument_list|)
decl_stmt|;
name|bool
name|allow_incr
init|=
name|property
operator|!=
name|motif_clip_temporary
decl_stmt|;
comment|// X_ChangeProperty protocol request is 24 bytes
specifier|const
name|int
name|increment
init|=
operator|(
name|XMaxRequestSize
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|)
operator|*
literal|4
operator|)
operator|-
literal|24
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|size
argument_list|()
operator|>
name|increment
operator|&&
name|allow_incr
condition|)
block|{
name|long
name|bytes
init|=
name|data
operator|.
name|size
argument_list|()
decl_stmt|;
name|XChangeProperty
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|window
argument_list|,
name|property
argument_list|,
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|INCR
argument_list|)
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
operator|&
name|bytes
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//            (void)new QClipboardINCRTransaction(window, property, atomFormat, dataFormat, data, increment);
name|qDebug
argument_list|()
operator|<<
literal|"not implemented INCRT just YET!"
expr_stmt|;
return|return
name|property
return|;
block|}
comment|// make sure we can perform the XChangeProperty in a single request
if|if
condition|(
name|data
operator|.
name|size
argument_list|()
operator|>
name|increment
condition|)
return|return
name|XNone
return|;
comment|// ### perhaps use several XChangeProperty calls w/ PropModeAppend?
name|int
name|dataSize
init|=
name|data
operator|.
name|size
argument_list|()
operator|/
operator|(
name|dataFormat
operator|/
literal|8
operator|)
decl_stmt|;
comment|// use a single request to transfer data
name|XChangeProperty
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|window
argument_list|,
name|property
argument_list|,
name|atomFormat
argument_list|,
name|dataFormat
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
name|data
operator|.
name|data
argument_list|()
argument_list|,
name|dataSize
argument_list|)
expr_stmt|;
block|}
return|return
name|property
return|;
block|}
end_function
begin_function
DECL|function|handleSelectionRequest
name|void
name|QXlibClipboard
operator|::
name|handleSelectionRequest
parameter_list|(
name|XEvent
modifier|*
name|xevent
parameter_list|)
block|{
name|XSelectionRequestEvent
modifier|*
name|req
init|=
operator|&
name|xevent
operator|->
name|xselectionrequest
decl_stmt|;
if|if
condition|(
name|requestor
argument_list|()
operator|&&
name|req
operator|->
name|requestor
operator|==
name|requestor
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"This should be caught before"
expr_stmt|;
return|return;
block|}
name|XEvent
name|event
decl_stmt|;
name|event
operator|.
name|xselection
operator|.
name|type
operator|=
name|SelectionNotify
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|display
operator|=
name|req
operator|->
name|display
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|requestor
operator|=
name|req
operator|->
name|requestor
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|selection
operator|=
name|req
operator|->
name|selection
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|target
operator|=
name|req
operator|->
name|target
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|property
operator|=
name|XNone
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|time
operator|=
name|req
operator|->
name|time
expr_stmt|;
name|QMimeData
modifier|*
name|d
decl_stmt|;
if|if
condition|(
name|req
operator|->
name|selection
operator|==
name|XA_PRIMARY
condition|)
block|{
name|d
operator|=
name|m_clientSelection
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|req
operator|->
name|selection
operator|==
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|CLIPBOARD
argument_list|)
condition|)
block|{
name|d
operator|=
name|m_clientClipboard
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QClipboard: Unknown selection '%lx'"
argument_list|,
name|req
operator|->
name|selection
argument_list|)
expr_stmt|;
name|XSendEvent
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|d
condition|)
block|{
name|qWarning
argument_list|(
literal|"QClipboard: Cannot transfer data, no data available"
argument_list|)
expr_stmt|;
name|XSendEvent
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
name|Atom
name|xa_targets
init|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|TARGETS
argument_list|)
decl_stmt|;
name|Atom
name|xa_multiple
init|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|MULTIPLE
argument_list|)
decl_stmt|;
name|Atom
name|xa_timestamp
init|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|TIMESTAMP
argument_list|)
decl_stmt|;
struct|struct
name|AtomPair
block|{
name|Atom
name|target
decl_stmt|;
name|Atom
name|property
decl_stmt|;
block|}
modifier|*
name|multi
init|=
literal|0
struct|;
name|Atom
name|multi_type
init|=
name|XNone
decl_stmt|;
name|int
name|multi_format
init|=
literal|0
decl_stmt|;
name|int
name|nmulti
init|=
literal|0
decl_stmt|;
name|int
name|imulti
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|multi_writeback
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|req
operator|->
name|target
operator|==
name|xa_multiple
condition|)
block|{
name|QByteArray
name|multi_data
decl_stmt|;
if|if
condition|(
name|req
operator|->
name|property
operator|==
name|XNone
operator|||
operator|!
name|clipboardReadProperty
argument_list|(
name|req
operator|->
name|requestor
argument_list|,
name|req
operator|->
name|property
argument_list|,
literal|false
argument_list|,
operator|&
name|multi_data
argument_list|,
literal|0
argument_list|,
operator|&
name|multi_type
argument_list|,
operator|&
name|multi_format
argument_list|)
operator|||
name|multi_format
operator|!=
literal|32
condition|)
block|{
comment|// MULTIPLE property not formatted correctly
name|XSendEvent
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
name|nmulti
operator|=
name|multi_data
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|multi
argument_list|)
expr_stmt|;
name|multi
operator|=
operator|new
name|AtomPair
index|[
name|nmulti
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|multi
argument_list|,
name|multi_data
operator|.
name|data
argument_list|()
argument_list|,
name|multi_data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|imulti
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
init|;
name|imulti
operator|<
name|nmulti
condition|;
operator|++
name|imulti
control|)
block|{
name|Atom
name|target
decl_stmt|;
name|Atom
name|property
decl_stmt|;
if|if
condition|(
name|multi
condition|)
block|{
name|target
operator|=
name|multi
index|[
name|imulti
index|]
operator|.
name|target
expr_stmt|;
name|property
operator|=
name|multi
index|[
name|imulti
index|]
operator|.
name|property
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
name|req
operator|->
name|target
expr_stmt|;
name|property
operator|=
name|req
operator|->
name|property
expr_stmt|;
if|if
condition|(
name|property
operator|==
name|XNone
condition|)
comment|// obsolete client
name|property
operator|=
name|target
expr_stmt|;
block|}
name|Atom
name|ret
init|=
name|XNone
decl_stmt|;
if|if
condition|(
name|target
operator|==
name|XNone
operator|||
name|property
operator|==
name|XNone
condition|)
block|{
empty_stmt|;
block|}
elseif|else
if|if
condition|(
name|target
operator|==
name|xa_timestamp
condition|)
block|{
comment|//            if (d->timestamp != CurrentTime) {
comment|//                XChangeProperty(screen()->display()->nativeDisplay(), req->requestor, property, XA_INTEGER, 32,
comment|//                                PropModeReplace, CurrentTime, 1);
comment|//                ret = property;
comment|//            } else {
comment|//                qWarning("QClipboard: Invalid data timestamp");
comment|//            }
block|}
elseif|else
if|if
condition|(
name|target
operator|==
name|xa_targets
condition|)
block|{
name|ret
operator|=
name|sendTargetsSelection
argument_list|(
name|d
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|sendSelection
argument_list|(
name|d
argument_list|,
name|target
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nmulti
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ret
operator|==
name|XNone
condition|)
block|{
name|multi
index|[
name|imulti
index|]
operator|.
name|property
operator|=
name|XNone
expr_stmt|;
name|multi_writeback
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|event
operator|.
name|xselection
operator|.
name|property
operator|=
name|ret
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|nmulti
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|multi_writeback
condition|)
block|{
comment|// according to ICCCM 2.6.2 says to put None back
comment|// into the original property on the requestor window
name|XChangeProperty
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|req
operator|->
name|property
argument_list|,
name|multi_type
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|uchar
operator|*
operator|)
name|multi
argument_list|,
name|nmulti
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|multi
expr_stmt|;
name|event
operator|.
name|xselection
operator|.
name|property
operator|=
name|req
operator|->
name|property
expr_stmt|;
block|}
comment|// send selection notify to requestor
name|XSendEvent
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|req
operator|->
name|requestor
argument_list|,
name|False
argument_list|,
name|NoEventMask
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maxSelectionIncr
specifier|static
specifier|inline
name|int
name|maxSelectionIncr
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|)
block|{
return|return
name|XMaxRequestSize
argument_list|(
name|dpy
argument_list|)
operator|>
literal|65536
condition|?
literal|65536
operator|*
literal|4
else|:
name|XMaxRequestSize
argument_list|(
name|dpy
argument_list|)
operator|*
literal|4
operator|-
literal|100
return|;
block|}
end_function
begin_function
DECL|function|clipboardReadProperty
name|bool
name|QXlibClipboard
operator|::
name|clipboardReadProperty
parameter_list|(
name|Window
name|win
parameter_list|,
name|Atom
name|property
parameter_list|,
name|bool
name|deleteProperty
parameter_list|,
name|QByteArray
modifier|*
name|buffer
parameter_list|,
name|int
modifier|*
name|size
parameter_list|,
name|Atom
modifier|*
name|type
parameter_list|,
name|int
modifier|*
name|format
parameter_list|)
specifier|const
block|{
name|int
name|maxsize
init|=
name|maxSelectionIncr
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|)
decl_stmt|;
name|ulong
name|bytes_left
decl_stmt|;
comment|// bytes_after
name|ulong
name|length
decl_stmt|;
comment|// nitems
name|uchar
modifier|*
name|data
decl_stmt|;
name|Atom
name|dummy_type
decl_stmt|;
name|int
name|dummy_format
decl_stmt|;
name|int
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|type
condition|)
comment|// allow null args
name|type
operator|=
operator|&
name|dummy_type
expr_stmt|;
if|if
condition|(
operator|!
name|format
condition|)
name|format
operator|=
operator|&
name|dummy_format
expr_stmt|;
comment|// Don't read anything, just get the size of the property data
name|r
operator|=
name|XGetWindowProperty
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|win
argument_list|,
name|property
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|False
argument_list|,
name|AnyPropertyType
argument_list|,
name|type
argument_list|,
name|format
argument_list|,
operator|&
name|length
argument_list|,
operator|&
name|bytes_left
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|Success
operator|||
operator|(
name|type
operator|&&
operator|*
name|type
operator|==
name|XNone
operator|)
condition|)
block|{
name|buffer
operator|->
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|,
name|buffer_offset
init|=
literal|0
decl_stmt|,
name|format_inc
init|=
literal|1
decl_stmt|,
name|proplen
init|=
name|bytes_left
decl_stmt|;
switch|switch
condition|(
operator|*
name|format
condition|)
block|{
case|case
literal|8
case|:
default|default:
name|format_inc
operator|=
sizeof|sizeof
argument_list|(
name|char
argument_list|)
operator|/
literal|1
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|format_inc
operator|=
sizeof|sizeof
argument_list|(
name|short
argument_list|)
operator|/
literal|2
expr_stmt|;
name|proplen
operator|*=
sizeof|sizeof
argument_list|(
name|short
argument_list|)
operator|/
literal|2
expr_stmt|;
break|break;
case|case
literal|32
case|:
name|format_inc
operator|=
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|/
literal|4
expr_stmt|;
name|proplen
operator|*=
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|/
literal|4
expr_stmt|;
break|break;
block|}
name|int
name|newSize
init|=
name|proplen
decl_stmt|;
name|buffer
operator|->
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
operator|(
name|buffer
operator|->
name|size
argument_list|()
operator|==
name|newSize
operator|)
decl_stmt|;
if|if
condition|(
name|ok
operator|&&
name|newSize
condition|)
block|{
comment|// could allocate buffer
while|while
condition|(
name|bytes_left
condition|)
block|{
comment|// more to read...
name|r
operator|=
name|XGetWindowProperty
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|win
argument_list|,
name|property
argument_list|,
name|offset
argument_list|,
name|maxsize
operator|/
literal|4
argument_list|,
name|False
argument_list|,
name|AnyPropertyType
argument_list|,
name|type
argument_list|,
name|format
argument_list|,
operator|&
name|length
argument_list|,
operator|&
name|bytes_left
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|Success
operator|||
operator|(
name|type
operator|&&
operator|*
name|type
operator|==
name|XNone
operator|)
condition|)
break|break;
name|offset
operator|+=
name|length
operator|/
operator|(
literal|32
operator|/
operator|*
name|format
operator|)
expr_stmt|;
name|length
operator|*=
name|format_inc
operator|*
operator|(
operator|*
name|format
operator|)
operator|/
literal|8
expr_stmt|;
comment|// Here we check if we get a buffer overflow and tries to
comment|// recover -- this shouldn't normally happen, but it doesn't
comment|// hurt to be defensive
if|if
condition|(
call|(
name|int
call|)
argument_list|(
name|buffer_offset
operator|+
name|length
argument_list|)
operator|>
name|buffer
operator|->
name|size
argument_list|()
condition|)
block|{
name|length
operator|=
name|buffer
operator|->
name|size
argument_list|()
operator|-
name|buffer_offset
expr_stmt|;
comment|// escape loop
name|bytes_left
operator|=
literal|0
expr_stmt|;
block|}
name|memcpy
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
operator|+
name|buffer_offset
argument_list|,
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|buffer_offset
operator|+=
name|length
expr_stmt|;
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|*
name|format
operator|==
literal|8
operator|&&
operator|*
name|type
operator|==
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|COMPOUND_TEXT
argument_list|)
condition|)
block|{
comment|// convert COMPOUND_TEXT to a multibyte string
name|XTextProperty
name|textprop
decl_stmt|;
name|textprop
operator|.
name|encoding
operator|=
operator|*
name|type
expr_stmt|;
name|textprop
operator|.
name|format
operator|=
operator|*
name|format
expr_stmt|;
name|textprop
operator|.
name|nitems
operator|=
name|buffer_offset
expr_stmt|;
name|textprop
operator|.
name|value
operator|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|buffer
operator|->
name|data
argument_list|()
expr_stmt|;
name|char
modifier|*
modifier|*
name|list_ret
init|=
literal|0
decl_stmt|;
name|int
name|count
decl_stmt|;
if|if
condition|(
name|XmbTextPropertyToTextList
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
operator|&
name|textprop
argument_list|,
operator|&
name|list_ret
argument_list|,
operator|&
name|count
argument_list|)
operator|==
name|Success
operator|&&
name|count
operator|&&
name|list_ret
condition|)
block|{
name|offset
operator|=
name|buffer_offset
operator|=
name|strlen
argument_list|(
name|list_ret
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|resize
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
argument_list|,
name|list_ret
index|[
literal|0
index|]
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|list_ret
condition|)
name|XFreeStringList
argument_list|(
name|list_ret
argument_list|)
expr_stmt|;
block|}
block|}
comment|// correct size, not 0-term.
if|if
condition|(
name|size
condition|)
operator|*
name|size
operator|=
name|buffer_offset
expr_stmt|;
if|if
condition|(
name|deleteProperty
condition|)
name|XDeleteProperty
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|win
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|flush
argument_list|()
expr_stmt|;
return|return
name|ok
return|;
block|}
end_function
begin_function
DECL|function|clipboardReadIncrementalProperty
name|QByteArray
name|QXlibClipboard
operator|::
name|clipboardReadIncrementalProperty
parameter_list|(
name|Window
name|win
parameter_list|,
name|Atom
name|property
parameter_list|,
name|int
name|nbytes
parameter_list|,
name|bool
name|nullterm
parameter_list|)
block|{
name|XEvent
name|event
decl_stmt|;
name|QByteArray
name|buf
decl_stmt|;
name|QByteArray
name|tmp_buf
decl_stmt|;
name|bool
name|alloc_error
init|=
literal|false
decl_stmt|;
name|int
name|length
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|nbytes
operator|>
literal|0
condition|)
block|{
comment|// Reserve buffer + zero-terminator (for text data)
comment|// We want to complete the INCR transfer even if we cannot
comment|// allocate more memory
name|buf
operator|.
name|resize
argument_list|(
name|nbytes
operator|+
literal|1
argument_list|)
expr_stmt|;
name|alloc_error
operator|=
name|buf
operator|.
name|size
argument_list|()
operator|!=
name|nbytes
operator|+
literal|1
expr_stmt|;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|screen
argument_list|()
operator|->
name|waitForClipboardEvent
argument_list|(
name|win
argument_list|,
name|PropertyNotify
argument_list|,
operator|&
name|event
argument_list|,
name|clipboard_timeout
argument_list|)
condition|)
break|break;
if|if
condition|(
name|event
operator|.
name|xproperty
operator|.
name|atom
operator|!=
name|property
operator|||
name|event
operator|.
name|xproperty
operator|.
name|state
operator|!=
name|PropertyNewValue
condition|)
continue|continue;
if|if
condition|(
name|clipboardReadProperty
argument_list|(
name|win
argument_list|,
name|property
argument_list|,
literal|true
argument_list|,
operator|&
name|tmp_buf
argument_list|,
operator|&
name|length
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
comment|// no more data, we're done
if|if
condition|(
name|nullterm
condition|)
block|{
name|buf
operator|.
name|resize
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
name|buf
index|[
name|offset
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|resize
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|alloc_error
condition|)
block|{
if|if
condition|(
name|offset
operator|+
name|length
operator|>
operator|(
name|int
operator|)
name|buf
operator|.
name|size
argument_list|()
condition|)
block|{
name|buf
operator|.
name|resize
argument_list|(
name|offset
operator|+
name|length
operator|+
literal|65535
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
operator|!=
name|offset
operator|+
name|length
operator|+
literal|65535
condition|)
block|{
name|alloc_error
operator|=
literal|true
expr_stmt|;
name|length
operator|=
name|buf
operator|.
name|size
argument_list|()
operator|-
name|offset
expr_stmt|;
block|}
block|}
name|memcpy
argument_list|(
name|buf
operator|.
name|data
argument_list|()
operator|+
name|offset
argument_list|,
name|tmp_buf
operator|.
name|constData
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|tmp_buf
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// timed out ... create a new requestor window, otherwise the requestor
comment|// could consider next request to be still part of this timed out request
name|setRequestor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getDataInFormat
name|QByteArray
name|QXlibClipboard
operator|::
name|getDataInFormat
parameter_list|(
name|Atom
name|modeAtom
parameter_list|,
name|Atom
name|fmtatom
parameter_list|)
block|{
name|QByteArray
name|buf
decl_stmt|;
name|Window
name|win
init|=
name|requestor
argument_list|()
decl_stmt|;
name|XSelectInput
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|win
argument_list|,
name|NoEventMask
argument_list|)
expr_stmt|;
comment|// don't listen for any events
name|XDeleteProperty
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|win
argument_list|,
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_QT_SELECTION
argument_list|)
argument_list|)
expr_stmt|;
name|XConvertSelection
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|modeAtom
argument_list|,
name|fmtatom
argument_list|,
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_QT_SELECTION
argument_list|)
argument_list|,
name|win
argument_list|,
name|CurrentTime
argument_list|)
expr_stmt|;
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
name|XEvent
name|xevent
decl_stmt|;
if|if
condition|(
operator|!
name|screen
argument_list|()
operator|->
name|waitForClipboardEvent
argument_list|(
name|win
argument_list|,
name|SelectionNotify
argument_list|,
operator|&
name|xevent
argument_list|,
name|clipboard_timeout
argument_list|)
operator|||
name|xevent
operator|.
name|xselection
operator|.
name|property
operator|==
name|XNone
condition|)
block|{
return|return
name|buf
return|;
block|}
name|Atom
name|type
decl_stmt|;
name|XSelectInput
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|win
argument_list|,
name|PropertyChangeMask
argument_list|)
expr_stmt|;
if|if
condition|(
name|clipboardReadProperty
argument_list|(
name|win
argument_list|,
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_QT_SELECTION
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|&
name|buf
argument_list|,
literal|0
argument_list|,
operator|&
name|type
argument_list|,
literal|0
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|INCR
argument_list|)
condition|)
block|{
name|int
name|nbytes
init|=
name|buf
operator|.
name|size
argument_list|()
operator|>=
literal|4
condition|?
operator|*
operator|(
operator|(
name|int
operator|*
operator|)
name|buf
operator|.
name|data
argument_list|()
operator|)
else|:
literal|0
decl_stmt|;
name|buf
operator|=
name|clipboardReadIncrementalProperty
argument_list|(
name|win
argument_list|,
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_QT_SELECTION
argument_list|)
argument_list|,
name|nbytes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|XSelectInput
argument_list|(
name|screen
argument_list|()
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|win
argument_list|,
name|NoEventMask
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"qxlibclipboard.moc"
end_include
end_unit
