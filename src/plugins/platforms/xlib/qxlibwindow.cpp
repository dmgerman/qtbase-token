begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|"qxlibwindow.h"
end_include
begin_include
include|#
directive|include
file|"qxlibintegration.h"
end_include
begin_include
include|#
directive|include
file|"qxlibscreen.h"
end_include
begin_include
include|#
directive|include
file|"qxlibkeyboard.h"
end_include
begin_include
include|#
directive|include
file|"qxlibstatic.h"
end_include
begin_include
include|#
directive|include
file|"qxlibdisplay.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_OPENGL
argument_list|)
end_if
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qglxintegration.h"
end_include
begin_include
include|#
directive|include
file|"private/qglxconvenience_p.h"
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|"../eglconvenience/qeglconvenience.h"
end_include
begin_include
include|#
directive|include
file|"../eglconvenience/qeglplatformcontext.h"
end_include
begin_include
include|#
directive|include
file|"../eglconvenience/qxlibeglintegration.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_OPENGL_ES_2
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_OPENGL
end_comment
begin_include
include|#
directive|include
file|<QtGui/QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|<QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QStyleHints>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_comment
comment|//#define MYX11_DEBUG
end_comment
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|windowMap
name|QHash
argument_list|<
name|Window
argument_list|,
name|QXlibWindow
modifier|*
argument_list|>
name|QXlibWindow
operator|::
name|windowMap
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QXlibWindow
name|QXlibWindow
operator|::
name|QXlibWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QPlatformWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|mGLContext
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mScreen
argument_list|(
name|QXlibScreen
operator|::
name|testLiteScreenForWidget
argument_list|(
name|window
argument_list|)
argument_list|)
block|{
name|int
name|x
init|=
name|window
operator|->
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|window
operator|->
name|y
argument_list|()
decl_stmt|;
name|int
name|w
init|=
name|window
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|window
operator|->
name|height
argument_list|()
decl_stmt|;
name|mSurfaceFormat
operator|=
name|window
operator|->
name|requestedFormat
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_OPENGL
argument_list|)
if|if
condition|(
name|window
operator|->
name|surfaceType
argument_list|()
operator|==
name|QWindow
operator|::
name|OpenGLSurface
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|XVisualInfo
modifier|*
name|visualInfo
init|=
name|qglx_findVisualInfo
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|mScreen
operator|->
name|xScreenNumber
argument_list|()
argument_list|,
operator|&
name|mSurfaceFormat
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|visualInfo
condition|)
name|qFatal
argument_list|(
literal|"Could not initialize GLX"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QPlatformWindowFormat
name|windowFormat
init|=
name|correctColorBuffers
argument_list|(
name|window
operator|->
name|platformWindowFormat
argument_list|()
argument_list|)
decl_stmt|;
name|EGLDisplay
name|eglDisplay
init|=
name|mScreen
operator|->
name|eglDisplay
argument_list|()
decl_stmt|;
name|EGLConfig
name|eglConfig
init|=
name|q_configFromQPlatformWindowFormat
argument_list|(
name|eglDisplay
argument_list|,
name|windowFormat
argument_list|)
decl_stmt|;
name|VisualID
name|id
init|=
name|QXlibEglIntegration
operator|::
name|getCompatibleVisualId
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|eglDisplay
argument_list|,
name|eglConfig
argument_list|)
decl_stmt|;
name|XVisualInfo
name|visualInfoTemplate
decl_stmt|;
name|memset
argument_list|(
operator|&
name|visualInfoTemplate
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|XVisualInfo
argument_list|)
argument_list|)
expr_stmt|;
name|visualInfoTemplate
operator|.
name|visualid
operator|=
name|id
expr_stmt|;
name|XVisualInfo
modifier|*
name|visualInfo
decl_stmt|;
name|int
name|matchingCount
init|=
literal|0
decl_stmt|;
name|visualInfo
operator|=
name|XGetVisualInfo
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|VisualIDMask
argument_list|,
operator|&
name|visualInfoTemplate
argument_list|,
operator|&
name|matchingCount
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|visualInfo
condition|)
name|qFatal
argument_list|(
literal|"Could not initialize EGL"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//!defined(QT_OPENGL_ES_2)
name|mDepth
operator|=
name|visualInfo
operator|->
name|depth
expr_stmt|;
name|mFormat
operator|=
operator|(
name|mDepth
operator|==
literal|32
operator|)
condition|?
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
else|:
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|mVisual
operator|=
name|visualInfo
operator|->
name|visual
expr_stmt|;
name|Colormap
name|cmap
init|=
name|XCreateColormap
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|mScreen
operator|->
name|rootWindow
argument_list|()
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|AllocNone
argument_list|)
decl_stmt|;
name|XSetWindowAttributes
name|a
decl_stmt|;
name|a
operator|.
name|background_pixel
operator|=
name|WhitePixel
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|mScreen
operator|->
name|xScreenNumber
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|border_pixel
operator|=
name|BlackPixel
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|mScreen
operator|->
name|xScreenNumber
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|colormap
operator|=
name|cmap
expr_stmt|;
name|x_window
operator|=
name|XCreateWindow
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|mScreen
operator|->
name|rootWindow
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|0
argument_list|,
name|visualInfo
operator|->
name|depth
argument_list|,
name|InputOutput
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|CWBackPixel
operator||
name|CWBorderPixel
operator||
name|CWColormap
argument_list|,
operator|&
name|a
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
name|visualInfo
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|//!defined(QT_NO_OPENGL)
block|{
name|mDepth
operator|=
name|mScreen
operator|->
name|depth
argument_list|()
expr_stmt|;
name|mFormat
operator|=
operator|(
name|mDepth
operator|==
literal|32
operator|)
condition|?
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
else|:
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|mVisual
operator|=
name|mScreen
operator|->
name|defaultVisual
argument_list|()
expr_stmt|;
name|x_window
operator|=
name|XCreateSimpleWindow
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|mScreen
operator|->
name|rootWindow
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
literal|0
comment|/*border_width*/
argument_list|,
name|mScreen
operator|->
name|blackPixel
argument_list|()
argument_list|,
name|mScreen
operator|->
name|whitePixel
argument_list|()
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|MYX11_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QTestLiteWindow::QTestLiteWindow creating"
operator|<<
name|hex
operator|<<
name|x_window
operator|<<
name|window
expr_stmt|;
endif|#
directive|endif
name|XSetWindowBackgroundPixmap
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|XNone
argument_list|)
expr_stmt|;
name|XSelectInput
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|ExposureMask
operator||
name|KeyPressMask
operator||
name|KeyReleaseMask
operator||
name|EnterWindowMask
operator||
name|LeaveWindowMask
operator||
name|FocusChangeMask
operator||
name|PointerMotionMask
operator||
name|ButtonPressMask
operator||
name|ButtonReleaseMask
operator||
name|ButtonMotionMask
operator||
name|PropertyChangeMask
operator||
name|StructureNotifyMask
argument_list|)
expr_stmt|;
name|gc
operator|=
name|createGC
argument_list|()
expr_stmt|;
name|Atom
name|protocols
index|[
literal|5
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|protocols
index|[
name|n
operator|++
index|]
operator|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|WM_DELETE_WINDOW
argument_list|)
expr_stmt|;
comment|// support del window protocol
name|protocols
index|[
name|n
operator|++
index|]
operator|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|WM_TAKE_FOCUS
argument_list|)
expr_stmt|;
comment|// support take focus window protocol
comment|//    protocols[n++] = QXlibStatic::atom(QXlibStatic::_NET_WM_PING);                // support _NET_WM_PING protocol
ifndef|#
directive|ifndef
name|QT_NO_XSYNC
name|protocols
index|[
name|n
operator|++
index|]
operator|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_SYNC_REQUEST
argument_list|)
expr_stmt|;
comment|// support _NET_WM_SYNC_REQUEST protocol
endif|#
directive|endif
comment|// QT_NO_XSYNC
if|if
condition|(
name|window
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|protocols
index|[
name|n
operator|++
index|]
operator|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_CONTEXT_HELP
argument_list|)
expr_stmt|;
name|XSetWMProtocols
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|protocols
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|windowMap
operator|.
name|insert
argument_list|(
name|x_window
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QXlibWindow
name|QXlibWindow
operator|::
name|~
name|QXlibWindow
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MYX11_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"~QTestLiteWindow"
operator|<<
name|hex
operator|<<
name|x_window
expr_stmt|;
endif|#
directive|endif
name|windowMap
operator|.
name|remove
argument_list|(
name|x_window
argument_list|)
expr_stmt|;
operator|delete
name|mGLContext
expr_stmt|;
name|XFreeGC
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|gc
argument_list|)
expr_stmt|;
name|XDestroyWindow
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
end_comment
begin_comment
comment|// Mouse event stuff
end_comment
begin_function
DECL|function|translateMouseButtons
specifier|static
name|Qt
operator|::
name|MouseButtons
name|translateMouseButtons
parameter_list|(
name|int
name|s
parameter_list|)
block|{
name|Qt
operator|::
name|MouseButtons
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s
operator|&
name|Button1Mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|Button2Mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|Button3Mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|handleMouseEvent
name|void
name|QXlibWindow
operator|::
name|handleMouseEvent
parameter_list|(
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|XButtonEvent
modifier|*
name|e
parameter_list|)
block|{
specifier|static
name|QPoint
name|mousePoint
decl_stmt|;
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|translateMouseButtons
argument_list|(
name|e
operator|->
name|state
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|mScreen
operator|->
name|keyboard
argument_list|()
operator|->
name|translateModifiers
argument_list|(
name|e
operator|->
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|QEvent
operator|::
name|MouseMove
condition|)
block|{
switch|switch
condition|(
name|e
operator|->
name|button
condition|)
block|{
case|case
name|Button1
case|:
name|button
operator|=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
break|break;
case|case
name|Button2
case|:
name|button
operator|=
name|Qt
operator|::
name|MidButton
expr_stmt|;
break|break;
case|case
name|Button3
case|:
name|button
operator|=
name|Qt
operator|::
name|RightButton
expr_stmt|;
break|break;
case|case
name|Button4
case|:
case|case
name|Button5
case|:
case|case
literal|6
case|:
case|case
literal|7
case|:
block|{
comment|//mouse wheel
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
condition|)
block|{
comment|//logic borrowed from qapplication_x11.cpp
name|int
name|delta
init|=
literal|120
operator|*
operator|(
operator|(
name|e
operator|->
name|button
operator|==
name|Button4
operator|||
name|e
operator|->
name|button
operator|==
literal|6
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
decl_stmt|;
name|bool
name|hor
init|=
operator|(
operator|(
operator|(
name|e
operator|->
name|button
operator|==
name|Button4
operator|||
name|e
operator|->
name|button
operator|==
name|Button5
operator|)
operator|&&
operator|(
name|modifiers
operator|&
name|Qt
operator|::
name|AltModifier
operator|)
operator|)
operator|||
operator|(
name|e
operator|->
name|button
operator|==
literal|6
operator|||
name|e
operator|->
name|button
operator|==
literal|7
operator|)
operator|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|e
operator|->
name|time
argument_list|,
name|QPoint
argument_list|(
name|e
operator|->
name|x
argument_list|,
name|e
operator|->
name|y
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|e
operator|->
name|x_root
argument_list|,
name|e
operator|->
name|y_root
argument_list|)
argument_list|,
name|delta
argument_list|,
name|hor
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
literal|8
case|:
name|button
operator|=
name|Qt
operator|::
name|BackButton
expr_stmt|;
break|break;
comment|// Also known as Qt::ExtraButton1
case|case
literal|9
case|:
name|button
operator|=
name|Qt
operator|::
name|ForwardButton
expr_stmt|;
break|break;
comment|// Also known as Qt::ExtraButton2
case|case
literal|10
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton3
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton4
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton5
expr_stmt|;
break|break;
case|case
literal|13
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton6
expr_stmt|;
break|break;
case|case
literal|14
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton7
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton8
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton9
expr_stmt|;
break|break;
case|case
literal|17
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton10
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton11
expr_stmt|;
break|break;
case|case
literal|19
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton12
expr_stmt|;
break|break;
case|case
literal|20
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton13
expr_stmt|;
break|break;
case|case
literal|21
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton14
expr_stmt|;
break|break;
case|case
literal|22
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton15
expr_stmt|;
break|break;
case|case
literal|23
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton16
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton17
expr_stmt|;
break|break;
case|case
literal|25
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton18
expr_stmt|;
break|break;
case|case
literal|26
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton19
expr_stmt|;
break|break;
case|case
literal|27
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton20
expr_stmt|;
break|break;
case|case
literal|28
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton21
expr_stmt|;
break|break;
case|case
literal|29
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton22
expr_stmt|;
break|break;
case|case
literal|30
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton23
expr_stmt|;
break|break;
case|case
literal|31
case|:
name|button
operator|=
name|Qt
operator|::
name|ExtraButton24
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|buttons
operator|^=
name|button
expr_stmt|;
comment|// X event uses state *before*, Qt uses state *after*
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|e
operator|->
name|time
argument_list|,
name|QPoint
argument_list|(
name|e
operator|->
name|x
argument_list|,
name|e
operator|->
name|y
argument_list|)
argument_list|,
name|QPoint
argument_list|(
name|e
operator|->
name|x_root
argument_list|,
name|e
operator|->
name|y_root
argument_list|)
argument_list|,
name|buttons
argument_list|)
expr_stmt|;
name|mousePoint
operator|=
name|QPoint
argument_list|(
name|e
operator|->
name|x_root
argument_list|,
name|e
operator|->
name|y_root
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleCloseEvent
name|void
name|QXlibWindow
operator|::
name|handleCloseEvent
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleCloseEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleEnterEvent
name|void
name|QXlibWindow
operator|::
name|handleEnterEvent
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleLeaveEvent
name|void
name|QXlibWindow
operator|::
name|handleLeaveEvent
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleFocusInEvent
name|void
name|QXlibWindow
operator|::
name|handleFocusInEvent
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleFocusOutEvent
name|void
name|QXlibWindow
operator|::
name|handleFocusOutEvent
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QXlibWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|XMoveResizeWindow
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowFlags
name|Qt
operator|::
name|WindowFlags
name|QXlibWindow
operator|::
name|windowFlags
parameter_list|()
specifier|const
block|{
return|return
name|mWindowFlags
return|;
block|}
end_function
begin_function
DECL|function|winId
name|WId
name|QXlibWindow
operator|::
name|winId
parameter_list|()
specifier|const
block|{
return|return
name|x_window
return|;
block|}
end_function
begin_function
DECL|function|setParent
name|void
name|QXlibWindow
operator|::
name|setParent
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|parent
parameter_list|)
block|{
name|QPoint
name|topLeft
init|=
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|WId
name|parentWinId
init|=
name|parent
condition|?
name|parent
operator|->
name|winId
argument_list|()
else|:
name|mScreen
operator|->
name|rootWindow
argument_list|()
decl_stmt|;
name|XReparentWindow
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|parentWinId
argument_list|,
name|topLeft
operator|.
name|x
argument_list|()
argument_list|,
name|topLeft
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|raise
name|void
name|QXlibWindow
operator|::
name|raise
parameter_list|()
block|{
name|XRaiseWindow
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lower
name|void
name|QXlibWindow
operator|::
name|lower
parameter_list|()
block|{
name|XLowerWindow
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowTitle
name|void
name|QXlibWindow
operator|::
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|QByteArray
name|ba
init|=
name|title
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
comment|//We're not making a general solution here...
name|XTextProperty
name|windowName
decl_stmt|;
name|windowName
operator|.
name|value
operator|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
expr_stmt|;
name|windowName
operator|.
name|encoding
operator|=
name|XA_STRING
expr_stmt|;
name|windowName
operator|.
name|format
operator|=
literal|8
expr_stmt|;
name|windowName
operator|.
name|nitems
operator|=
name|ba
operator|.
name|length
argument_list|()
expr_stmt|;
name|XSetWMName
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
operator|&
name|windowName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createGC
name|GC
name|QXlibWindow
operator|::
name|createGC
parameter_list|()
block|{
name|GC
name|gc
decl_stmt|;
name|gc
operator|=
name|XCreateGC
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|gc
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QTestLiteWindow::createGC() could not create GC"
argument_list|)
expr_stmt|;
block|}
return|return
name|gc
return|;
block|}
end_function
begin_function
DECL|function|requestActivateWindow
name|void
name|QXlibWindow
operator|::
name|requestActivateWindow
parameter_list|()
block|{
name|XSetInputFocus
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|XRevertToParent
argument_list|,
name|CurrentTime
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QXlibWindow
operator|::
name|resizeEvent
parameter_list|(
name|XConfigureEvent
modifier|*
name|e
parameter_list|)
block|{
name|int
name|xpos
init|=
name|geometry
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|ypos
init|=
name|geometry
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|e
operator|->
name|width
operator|!=
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
operator|||
name|e
operator|->
name|height
operator|!=
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
operator|)
operator|&&
name|e
operator|->
name|x
operator|==
literal|0
operator|&&
name|e
operator|->
name|y
operator|==
literal|0
condition|)
block|{
comment|//qDebug()<< "resize with bogus pos"<< e->x<< e->y<< e->width<< e->height<< "window"<< hex<< window;
block|}
else|else
block|{
comment|//qDebug()<< "geometry change"<< e->x<< e->y<< e->width<< e->height<< "window"<< hex<< window;
name|xpos
operator|=
name|e
operator|->
name|x
expr_stmt|;
name|ypos
operator|=
name|e
operator|->
name|y
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|MYX11_DEBUG
name|qDebug
argument_list|()
operator|<<
name|hex
operator|<<
name|x_window
operator|<<
name|dec
operator|<<
literal|"ConfigureNotify"
operator|<<
name|e
operator|->
name|x
operator|<<
name|e
operator|->
name|y
operator|<<
name|e
operator|->
name|width
operator|<<
name|e
operator|->
name|height
operator|<<
literal|"geometry"
operator|<<
name|xpos
operator|<<
name|ypos
operator|<<
name|e
operator|->
name|width
operator|<<
name|e
operator|->
name|height
expr_stmt|;
endif|#
directive|endif
name|QRect
name|newRect
argument_list|(
name|xpos
argument_list|,
name|ypos
argument_list|,
name|e
operator|->
name|width
argument_list|,
name|e
operator|->
name|height
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|newRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QXlibWindow
operator|::
name|mousePressEvent
parameter_list|(
name|XButtonEvent
modifier|*
name|e
parameter_list|)
block|{
specifier|static
name|long
name|prevTime
init|=
literal|0
decl_stmt|;
specifier|static
name|Window
name|prevWindow
decl_stmt|;
specifier|static
name|int
name|prevX
init|=
operator|-
literal|999
decl_stmt|;
specifier|static
name|int
name|prevY
init|=
operator|-
literal|999
decl_stmt|;
name|QEvent
operator|::
name|Type
name|type
init|=
name|QEvent
operator|::
name|MouseButtonPress
decl_stmt|;
specifier|const
name|int
name|doubleClickInterval
init|=
name|qApp
operator|->
name|styleHints
argument_list|()
operator|->
name|mouseDoubleClickInterval
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|window
operator|==
name|prevWindow
operator|&&
name|long
argument_list|(
name|e
operator|->
name|time
argument_list|)
operator|-
name|prevTime
operator|<
name|doubleClickInterval
operator|&&
name|qAbs
argument_list|(
name|e
operator|->
name|x
operator|-
name|prevX
argument_list|)
operator|<
literal|5
operator|&&
name|qAbs
argument_list|(
name|e
operator|->
name|y
operator|-
name|prevY
argument_list|)
operator|<
literal|5
condition|)
block|{
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonDblClick
expr_stmt|;
name|prevTime
operator|=
name|e
operator|->
name|time
operator|-
name|doubleClickInterval
expr_stmt|;
comment|//no double click next time
block|}
else|else
block|{
name|prevTime
operator|=
name|e
operator|->
name|time
expr_stmt|;
block|}
name|prevWindow
operator|=
name|e
operator|->
name|window
expr_stmt|;
name|prevX
operator|=
name|e
operator|->
name|x
expr_stmt|;
name|prevY
operator|=
name|e
operator|->
name|y
expr_stmt|;
name|handleMouseEvent
argument_list|(
name|type
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getMWMHints
name|QXlibMWMHints
name|QXlibWindow
operator|::
name|getMWMHints
parameter_list|()
specifier|const
block|{
name|QXlibMWMHints
name|mwmhints
decl_stmt|;
name|Atom
name|type
decl_stmt|;
name|int
name|format
decl_stmt|;
name|ulong
name|nitems
decl_stmt|,
name|bytesLeft
decl_stmt|;
name|uchar
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|Atom
name|atomForMotifWmHints
init|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|XGetWindowProperty
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|atomForMotifWmHints
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|,
name|atomForMotifWmHints
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|format
argument_list|,
operator|&
name|nitems
argument_list|,
operator|&
name|bytesLeft
argument_list|,
operator|&
name|data
argument_list|)
operator|==
name|Success
operator|)
operator|&&
operator|(
name|type
operator|==
name|atomForMotifWmHints
operator|&&
name|format
operator|==
literal|32
operator|&&
name|nitems
operator|>=
literal|5
operator|)
condition|)
block|{
name|mwmhints
operator|=
operator|*
operator|(
cast|reinterpret_cast
argument_list|<
name|QXlibMWMHints
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|flags
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_ALL
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
name|MWM_DECOR_ALL
expr_stmt|;
name|mwmhints
operator|.
name|input_mode
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|status
operator|=
literal|0L
expr_stmt|;
block|}
if|if
condition|(
name|data
condition|)
name|XFree
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|mwmhints
return|;
block|}
end_function
begin_function
DECL|function|setMWMHints
name|void
name|QXlibWindow
operator|::
name|setMWMHints
parameter_list|(
specifier|const
name|QXlibMWMHints
modifier|&
name|mwmhints
parameter_list|)
block|{
name|Atom
name|atomForMotifWmHints
init|=
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|mwmhints
operator|.
name|flags
operator|!=
literal|0l
condition|)
block|{
name|XChangeProperty
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|atomForMotifWmHints
argument_list|,
name|atomForMotifWmHints
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|mwmhints
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XDeleteProperty
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|atomForMotifWmHints
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Returns true if we should set WM_TRANSIENT_FOR on \a w
end_comment
begin_function
DECL|function|isTransient
specifier|static
specifier|inline
name|bool
name|isTransient
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
return|return
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Sheet
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|SplashScreen
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Drawer
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
return|;
block|}
end_function
begin_function
DECL|function|getNetWmState
name|QVector
argument_list|<
name|Atom
argument_list|>
name|QXlibWindow
operator|::
name|getNetWmState
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|Atom
argument_list|>
name|returnValue
decl_stmt|;
comment|// Don't read anything, just get the size of the property data
name|Atom
name|actualType
decl_stmt|;
name|int
name|actualFormat
decl_stmt|;
name|ulong
name|propertyLength
decl_stmt|;
name|ulong
name|bytesLeft
decl_stmt|;
name|uchar
modifier|*
name|propertyData
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|False
argument_list|,
name|XA_ATOM
argument_list|,
operator|&
name|actualType
argument_list|,
operator|&
name|actualFormat
argument_list|,
operator|&
name|propertyLength
argument_list|,
operator|&
name|bytesLeft
argument_list|,
operator|&
name|propertyData
argument_list|)
operator|==
name|Success
operator|&&
name|actualType
operator|==
name|XA_ATOM
operator|&&
name|actualFormat
operator|==
literal|32
condition|)
block|{
name|returnValue
operator|.
name|resize
argument_list|(
name|bytesLeft
operator|/
literal|4
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|propertyData
argument_list|)
expr_stmt|;
comment|// fetch all data
if|if
condition|(
name|XGetWindowProperty
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE
argument_list|)
argument_list|,
literal|0
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
argument_list|,
name|False
argument_list|,
name|XA_ATOM
argument_list|,
operator|&
name|actualType
argument_list|,
operator|&
name|actualFormat
argument_list|,
operator|&
name|propertyLength
argument_list|,
operator|&
name|bytesLeft
argument_list|,
operator|&
name|propertyData
argument_list|)
operator|!=
name|Success
condition|)
block|{
name|returnValue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyLength
operator|!=
operator|(
name|ulong
operator|)
name|returnValue
operator|.
name|size
argument_list|()
condition|)
block|{
name|returnValue
operator|.
name|resize
argument_list|(
name|propertyLength
argument_list|)
expr_stmt|;
block|}
comment|// put it into netWmState
if|if
condition|(
operator|!
name|returnValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|memcpy
argument_list|(
name|returnValue
operator|.
name|data
argument_list|()
argument_list|,
name|propertyData
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|Atom
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XFree
argument_list|(
operator|(
name|char
operator|*
operator|)
name|propertyData
argument_list|)
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
end_function
begin_function
DECL|function|setWindowFlags
name|Qt
operator|::
name|WindowFlags
name|QXlibWindow
operator|::
name|setWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
comment|//    Q_ASSERT(flags& Qt::Window);
name|mWindowFlags
operator|=
name|flags
expr_stmt|;
ifdef|#
directive|ifdef
name|MYX11_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QTestLiteWindow::setWindowFlags"
operator|<<
name|hex
operator|<<
name|x_window
operator|<<
literal|"flags"
operator|<<
name|flags
expr_stmt|;
endif|#
directive|endif
name|Qt
operator|::
name|WindowType
name|type
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
name|int
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
condition|)
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Popup
condition|)
name|flags
operator||=
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
name|bool
name|topLevel
init|=
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Window
operator|)
decl_stmt|;
name|bool
name|popup
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|)
decl_stmt|;
name|bool
name|dialog
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|type
operator|==
name|Qt
operator|::
name|Sheet
operator|)
decl_stmt|;
name|bool
name|desktop
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Desktop
operator|)
decl_stmt|;
name|bool
name|tool
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|type
operator|==
name|Qt
operator|::
name|Drawer
operator|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|topLevel
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|dialog
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|desktop
argument_list|)
expr_stmt|;
name|bool
name|tooltip
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
decl_stmt|;
name|XSetWindowAttributes
name|wsa
decl_stmt|;
name|QXlibMWMHints
name|mwmhints
decl_stmt|;
name|mwmhints
operator|.
name|flags
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
literal|0
expr_stmt|;
name|mwmhints
operator|.
name|input_mode
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|status
operator|=
literal|0L
expr_stmt|;
name|ulong
name|wsa_mask
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|Qt
operator|::
name|SplashScreen
condition|)
block|{
comment|//&& customize) {
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|bool
name|customize
init|=
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
operator|!
operator|(
name|customize
operator|&&
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|)
operator|)
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_BORDER
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_RESIZEH
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_TITLE
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MENU
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MINIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MINIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MAXIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MAXIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_CLOSE
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if type == Qt::SplashScreen
name|mwmhints
operator|.
name|decorations
operator|=
name|MWM_DECOR_ALL
expr_stmt|;
block|}
if|if
condition|(
name|tool
condition|)
block|{
name|wsa
operator|.
name|save_under
operator|=
name|True
expr_stmt|;
name|wsa_mask
operator||=
name|CWSaveUnder
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|X11BypassWindowManagerHint
condition|)
block|{
name|wsa
operator|.
name|override_redirect
operator|=
name|True
expr_stmt|;
name|wsa_mask
operator||=
name|CWOverrideRedirect
expr_stmt|;
block|}
if|#
directive|if
literal|0
block|if (wsa_mask&& initializeWindow) {         Q_ASSERT(id);         XChangeWindowAttributes(dpy, id, wsa_mask,&wsa);     }
endif|#
directive|endif
if|if
condition|(
name|mwmhints
operator|.
name|functions
operator|!=
literal|0
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MOVE
operator||
name|MWM_FUNC_RESIZE
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_ALL
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|&&
operator|!
operator|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
operator|)
operator|)
condition|)
block|{
comment|// a special case - only the titlebar without any button
name|mwmhints
operator|.
name|flags
operator|=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_MOVE
operator||
name|MWM_FUNC_RESIZE
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowModality
argument_list|()
operator|==
name|Qt
operator|::
name|WindowModal
condition|)
block|{
name|mwmhints
operator|.
name|input_mode
operator|=
name|MWM_INPUT_PRIMARY_APPLICATION_MODAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowModality
argument_list|()
operator|==
name|Qt
operator|::
name|ApplicationModal
condition|)
block|{
name|mwmhints
operator|.
name|input_mode
operator|=
name|MWM_INPUT_FULL_APPLICATION_MODAL
expr_stmt|;
block|}
name|setMWMHints
argument_list|(
name|mwmhints
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|Atom
argument_list|>
name|netWmState
init|=
name|getNetWmState
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"QWindow: Incompatible window flags: the window can't be on top and on bottom at the same time"
expr_stmt|;
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_ABOVE
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_ABOVE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_STAYS_ON_TOP
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_STAYS_ON_TOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
block|{
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_BELOW
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_BELOW
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowModality
argument_list|()
operator|!=
name|Qt
operator|::
name|NonModal
condition|)
block|{
if|if
condition|(
operator|!
name|netWmState
operator|.
name|contains
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_MODAL
argument_list|)
argument_list|)
condition|)
name|netWmState
operator|.
name|append
argument_list|(
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE_MODAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|netWmState
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|XChangeProperty
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE
argument_list|)
argument_list|,
name|XA_ATOM
argument_list|,
literal|32
argument_list|,
name|PropModeReplace
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|netWmState
operator|.
name|data
argument_list|()
argument_list|,
name|netWmState
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XDeleteProperty
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|QXlibStatic
operator|::
name|atom
argument_list|(
name|QXlibStatic
operator|::
name|_NET_WM_STATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//##### only if initializeWindow???
if|if
condition|(
name|popup
operator|||
name|tooltip
condition|)
block|{
comment|// popup widget
ifdef|#
directive|ifdef
name|MYX11_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"Doing XChangeWindowAttributes for popup"
operator|<<
name|wsa
operator|.
name|override_redirect
expr_stmt|;
endif|#
directive|endif
comment|// set EWMH window types
comment|// setNetWmWindowTypes();
name|wsa
operator|.
name|override_redirect
operator|=
name|True
expr_stmt|;
name|wsa
operator|.
name|save_under
operator|=
name|True
expr_stmt|;
name|XChangeWindowAttributes
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|CWOverrideRedirect
operator||
name|CWSaveUnder
argument_list|,
operator|&
name|wsa
argument_list|)
expr_stmt|;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|MYX11_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"Doing XChangeWindowAttributes for non-popup"
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|flags
return|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|Qt
operator|::
name|WindowState
name|QXlibWindow
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
comment|// ####
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QXlibWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|MYX11_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QTestLiteWindow::setVisible"
operator|<<
name|visible
operator|<<
name|hex
operator|<<
name|x_window
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|isTransient
argument_list|(
name|window
argument_list|()
argument_list|)
condition|)
block|{
name|Window
name|parentXWindow
init|=
name|x_window
decl_stmt|;
name|QWindow
modifier|*
name|parent
init|=
name|window
argument_list|()
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
name|parent
operator|->
name|handle
argument_list|()
condition|)
block|{
name|QXlibWindow
modifier|*
name|xlibParent
init|=
cast|static_cast
argument_list|<
name|QXlibWindow
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|parentXWindow
operator|=
name|xlibParent
operator|->
name|x_window
expr_stmt|;
block|}
name|XSetTransientForHint
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|parentXWindow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|visible
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|">>> mapping"
expr_stmt|;
comment|//ensure that the window is viewed in correct position.
name|doSizeHints
argument_list|()
expr_stmt|;
name|XMapWindow
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XUnmapWindow
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setCursor
name|void
name|QXlibWindow
operator|::
name|setCursor
parameter_list|(
specifier|const
name|Cursor
modifier|&
name|cursor
parameter_list|)
block|{
name|XDefineCursor
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
name|cursor
argument_list|)
expr_stmt|;
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|flush
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|format
name|QSurfaceFormat
name|QXlibWindow
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|mSurfaceFormat
return|;
block|}
end_function
begin_function
DECL|function|xWindow
name|Window
name|QXlibWindow
operator|::
name|xWindow
parameter_list|()
specifier|const
block|{
return|return
name|x_window
return|;
block|}
end_function
begin_function
DECL|function|graphicsContext
name|GC
name|QXlibWindow
operator|::
name|graphicsContext
parameter_list|()
specifier|const
block|{
return|return
name|gc
return|;
block|}
end_function
begin_function
DECL|function|doSizeHints
name|void
name|QXlibWindow
operator|::
name|doSizeHints
parameter_list|()
block|{
comment|//    Q_ASSERT(window()->testAttribute(Qt::WA_WState_Created));
name|XSizeHints
name|s
decl_stmt|;
name|s
operator|.
name|flags
operator|=
literal|0
expr_stmt|;
name|QRect
name|g
init|=
name|geometry
argument_list|()
decl_stmt|;
name|s
operator|.
name|x
operator|=
name|g
operator|.
name|x
argument_list|()
expr_stmt|;
name|s
operator|.
name|y
operator|=
name|g
operator|.
name|y
argument_list|()
expr_stmt|;
name|s
operator|.
name|width
operator|=
name|g
operator|.
name|width
argument_list|()
expr_stmt|;
name|s
operator|.
name|height
operator|=
name|g
operator|.
name|height
argument_list|()
expr_stmt|;
name|s
operator|.
name|flags
operator||=
name|USPosition
expr_stmt|;
name|s
operator|.
name|flags
operator||=
name|PPosition
expr_stmt|;
name|s
operator|.
name|flags
operator||=
name|USSize
expr_stmt|;
name|s
operator|.
name|flags
operator||=
name|PSize
expr_stmt|;
name|s
operator|.
name|flags
operator||=
name|PWinGravity
expr_stmt|;
name|s
operator|.
name|win_gravity
operator|=
name|QGuiApplication
operator|::
name|isRightToLeft
argument_list|()
condition|?
name|NorthEastGravity
else|:
name|NorthWestGravity
expr_stmt|;
name|XSetWMNormalHints
argument_list|(
name|mScreen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|x_window
argument_list|,
operator|&
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|platformWindowForXWindow
name|QXlibWindow
modifier|*
name|QXlibWindow
operator|::
name|platformWindowForXWindow
parameter_list|(
name|Window
name|window
parameter_list|)
block|{
return|return
name|windowMap
operator|.
name|value
argument_list|(
name|window
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
