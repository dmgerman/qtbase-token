begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxlibnativeinterface.h"
end_include
begin_include
include|#
directive|include
file|"qxlibdisplay.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qapplication_p.h>
end_include
begin_class
DECL|class|QXlibResourceMap
class|class
name|QXlibResourceMap
super|:
specifier|public
name|QMap
argument_list|<
name|QByteArray
argument_list|,
name|QXlibNativeInterface
operator|::
name|ResourceType
argument_list|>
block|{
public|public:
DECL|function|QXlibResourceMap
name|QXlibResourceMap
parameter_list|()
member_init_list|:
name|QMap
argument_list|<
name|QByteArray
argument_list|,
name|QXlibNativeInterface
operator|::
name|ResourceType
argument_list|>
argument_list|()
block|{
name|insert
argument_list|(
literal|"display"
argument_list|,
name|QXlibNativeInterface
operator|::
name|Display
argument_list|)
expr_stmt|;
name|insert
argument_list|(
literal|"egldisplay"
argument_list|,
name|QXlibNativeInterface
operator|::
name|EglDisplay
argument_list|)
expr_stmt|;
name|insert
argument_list|(
literal|"connection"
argument_list|,
name|QXlibNativeInterface
operator|::
name|Connection
argument_list|)
expr_stmt|;
name|insert
argument_list|(
literal|"screen"
argument_list|,
name|QXlibNativeInterface
operator|::
name|Screen
argument_list|)
expr_stmt|;
name|insert
argument_list|(
literal|"graphicsdevice"
argument_list|,
name|QXlibNativeInterface
operator|::
name|GraphicsDevice
argument_list|)
expr_stmt|;
name|insert
argument_list|(
literal|"eglcontext"
argument_list|,
name|QXlibNativeInterface
operator|::
name|EglContext
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QXlibResourceMap
argument_list|,
argument|qXlibResourceMap
argument_list|)
end_macro
begin_function
DECL|function|nativeResourceForWidget
name|void
modifier|*
name|QXlibNativeInterface
operator|::
name|nativeResourceForWidget
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QByteArray
name|lowerCaseResource
init|=
name|resourceString
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|ResourceType
name|resource
init|=
name|qXlibResourceMap
argument_list|()
operator|->
name|value
argument_list|(
name|lowerCaseResource
argument_list|)
decl_stmt|;
name|void
modifier|*
name|result
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|resource
condition|)
block|{
case|case
name|Display
case|:
name|result
operator|=
name|displayForWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|EglDisplay
case|:
name|result
operator|=
name|eglDisplayForWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|Connection
case|:
name|result
operator|=
name|connectionForWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|Screen
case|:
name|result
operator|=
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|qPlatformScreenForWidget
argument_list|(
name|widget
argument_list|)
operator|->
name|xScreenNumber
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GraphicsDevice
case|:
name|result
operator|=
name|graphicsDeviceForWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|EglContext
case|:
name|result
operator|=
name|eglContextForWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
break|break;
default|default:
name|result
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|displayForWidget
name|void
modifier|*
name|QXlibNativeInterface
operator|::
name|displayForWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
return|return
name|qPlatformScreenForWidget
argument_list|(
name|widget
argument_list|)
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|eglDisplayForWidget
name|void
modifier|*
name|QXlibNativeInterface
operator|::
name|eglDisplayForWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|screenForWidget
name|void
modifier|*
name|QXlibNativeInterface
operator|::
name|screenForWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|graphicsDeviceForWidget
name|void
modifier|*
name|QXlibNativeInterface
operator|::
name|graphicsDeviceForWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|eglContextForWidget
name|void
modifier|*
name|QXlibNativeInterface
operator|::
name|eglContextForWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qPlatformScreenForWidget
name|QXlibScreen
modifier|*
name|QXlibNativeInterface
operator|::
name|qPlatformScreenForWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QXlibScreen
modifier|*
name|screen
decl_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
name|screen
operator|=
cast|static_cast
argument_list|<
name|QXlibScreen
operator|*
argument_list|>
argument_list|(
name|QPlatformScreen
operator|::
name|platformScreenForWidget
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|screen
operator|=
cast|static_cast
argument_list|<
name|QXlibScreen
operator|*
argument_list|>
argument_list|(
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|screens
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|screen
return|;
block|}
end_function
end_unit
