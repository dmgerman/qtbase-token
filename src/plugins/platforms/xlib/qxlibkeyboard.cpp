begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxlibkeyboard.h"
end_include
begin_include
include|#
directive|include
file|"qxlibscreen.h"
end_include
begin_include
include|#
directive|include
file|"qxlibdisplay.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextCodec>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|XK_ISO_Left_Tab
end_ifndef
begin_define
DECL|macro|XK_ISO_Left_Tab
define|#
directive|define
name|XK_ISO_Left_Tab
value|0xFE20
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_dead_hook
end_ifndef
begin_define
DECL|macro|XK_dead_hook
define|#
directive|define
name|XK_dead_hook
value|0xFE61
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_dead_horn
end_ifndef
begin_define
DECL|macro|XK_dead_horn
define|#
directive|define
name|XK_dead_horn
value|0xFE62
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_Codeinput
end_ifndef
begin_define
DECL|macro|XK_Codeinput
define|#
directive|define
name|XK_Codeinput
value|0xFF37
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_Kanji_Bangou
end_ifndef
begin_define
DECL|macro|XK_Kanji_Bangou
define|#
directive|define
name|XK_Kanji_Bangou
value|0xFF37
end_define
begin_comment
DECL|macro|XK_Kanji_Bangou
comment|/* same as codeinput */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Fix old X libraries
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Home
end_ifndef
begin_define
DECL|macro|XK_KP_Home
define|#
directive|define
name|XK_KP_Home
value|0xFF95
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Left
end_ifndef
begin_define
DECL|macro|XK_KP_Left
define|#
directive|define
name|XK_KP_Left
value|0xFF96
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Up
end_ifndef
begin_define
DECL|macro|XK_KP_Up
define|#
directive|define
name|XK_KP_Up
value|0xFF97
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Right
end_ifndef
begin_define
DECL|macro|XK_KP_Right
define|#
directive|define
name|XK_KP_Right
value|0xFF98
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Down
end_ifndef
begin_define
DECL|macro|XK_KP_Down
define|#
directive|define
name|XK_KP_Down
value|0xFF99
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Prior
end_ifndef
begin_define
DECL|macro|XK_KP_Prior
define|#
directive|define
name|XK_KP_Prior
value|0xFF9A
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Next
end_ifndef
begin_define
DECL|macro|XK_KP_Next
define|#
directive|define
name|XK_KP_Next
value|0xFF9B
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_End
end_ifndef
begin_define
DECL|macro|XK_KP_End
define|#
directive|define
name|XK_KP_End
value|0xFF9C
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Insert
end_ifndef
begin_define
DECL|macro|XK_KP_Insert
define|#
directive|define
name|XK_KP_Insert
value|0xFF9E
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Delete
end_ifndef
begin_define
DECL|macro|XK_KP_Delete
define|#
directive|define
name|XK_KP_Delete
value|0xFF9F
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// the next lines are taken on 10/2009 from X.org (X11/XF86keysym.h), defining some special
end_comment
begin_comment
comment|// multimedia keys. They are included here as not every system has them.
end_comment
begin_define
DECL|macro|XF86XK_MonBrightnessUp
define|#
directive|define
name|XF86XK_MonBrightnessUp
value|0x1008FF02
end_define
begin_define
DECL|macro|XF86XK_MonBrightnessDown
define|#
directive|define
name|XF86XK_MonBrightnessDown
value|0x1008FF03
end_define
begin_define
DECL|macro|XF86XK_KbdLightOnOff
define|#
directive|define
name|XF86XK_KbdLightOnOff
value|0x1008FF04
end_define
begin_define
DECL|macro|XF86XK_KbdBrightnessUp
define|#
directive|define
name|XF86XK_KbdBrightnessUp
value|0x1008FF05
end_define
begin_define
DECL|macro|XF86XK_KbdBrightnessDown
define|#
directive|define
name|XF86XK_KbdBrightnessDown
value|0x1008FF06
end_define
begin_define
DECL|macro|XF86XK_Standby
define|#
directive|define
name|XF86XK_Standby
value|0x1008FF10
end_define
begin_define
DECL|macro|XF86XK_AudioLowerVolume
define|#
directive|define
name|XF86XK_AudioLowerVolume
value|0x1008FF11
end_define
begin_define
DECL|macro|XF86XK_AudioMute
define|#
directive|define
name|XF86XK_AudioMute
value|0x1008FF12
end_define
begin_define
DECL|macro|XF86XK_AudioRaiseVolume
define|#
directive|define
name|XF86XK_AudioRaiseVolume
value|0x1008FF13
end_define
begin_define
DECL|macro|XF86XK_AudioPlay
define|#
directive|define
name|XF86XK_AudioPlay
value|0x1008FF14
end_define
begin_define
DECL|macro|XF86XK_AudioStop
define|#
directive|define
name|XF86XK_AudioStop
value|0x1008FF15
end_define
begin_define
DECL|macro|XF86XK_AudioPrev
define|#
directive|define
name|XF86XK_AudioPrev
value|0x1008FF16
end_define
begin_define
DECL|macro|XF86XK_AudioNext
define|#
directive|define
name|XF86XK_AudioNext
value|0x1008FF17
end_define
begin_define
DECL|macro|XF86XK_HomePage
define|#
directive|define
name|XF86XK_HomePage
value|0x1008FF18
end_define
begin_define
DECL|macro|XF86XK_Mail
define|#
directive|define
name|XF86XK_Mail
value|0x1008FF19
end_define
begin_define
DECL|macro|XF86XK_Start
define|#
directive|define
name|XF86XK_Start
value|0x1008FF1A
end_define
begin_define
DECL|macro|XF86XK_Search
define|#
directive|define
name|XF86XK_Search
value|0x1008FF1B
end_define
begin_define
DECL|macro|XF86XK_AudioRecord
define|#
directive|define
name|XF86XK_AudioRecord
value|0x1008FF1C
end_define
begin_define
DECL|macro|XF86XK_Calculator
define|#
directive|define
name|XF86XK_Calculator
value|0x1008FF1D
end_define
begin_define
DECL|macro|XF86XK_Memo
define|#
directive|define
name|XF86XK_Memo
value|0x1008FF1E
end_define
begin_define
DECL|macro|XF86XK_ToDoList
define|#
directive|define
name|XF86XK_ToDoList
value|0x1008FF1F
end_define
begin_define
DECL|macro|XF86XK_Calendar
define|#
directive|define
name|XF86XK_Calendar
value|0x1008FF20
end_define
begin_define
DECL|macro|XF86XK_PowerDown
define|#
directive|define
name|XF86XK_PowerDown
value|0x1008FF21
end_define
begin_define
DECL|macro|XF86XK_ContrastAdjust
define|#
directive|define
name|XF86XK_ContrastAdjust
value|0x1008FF22
end_define
begin_define
DECL|macro|XF86XK_Back
define|#
directive|define
name|XF86XK_Back
value|0x1008FF26
end_define
begin_define
DECL|macro|XF86XK_Forward
define|#
directive|define
name|XF86XK_Forward
value|0x1008FF27
end_define
begin_define
DECL|macro|XF86XK_Stop
define|#
directive|define
name|XF86XK_Stop
value|0x1008FF28
end_define
begin_define
DECL|macro|XF86XK_Refresh
define|#
directive|define
name|XF86XK_Refresh
value|0x1008FF29
end_define
begin_define
DECL|macro|XF86XK_PowerOff
define|#
directive|define
name|XF86XK_PowerOff
value|0x1008FF2A
end_define
begin_define
DECL|macro|XF86XK_WakeUp
define|#
directive|define
name|XF86XK_WakeUp
value|0x1008FF2B
end_define
begin_define
DECL|macro|XF86XK_Eject
define|#
directive|define
name|XF86XK_Eject
value|0x1008FF2C
end_define
begin_define
DECL|macro|XF86XK_ScreenSaver
define|#
directive|define
name|XF86XK_ScreenSaver
value|0x1008FF2D
end_define
begin_define
DECL|macro|XF86XK_WWW
define|#
directive|define
name|XF86XK_WWW
value|0x1008FF2E
end_define
begin_define
DECL|macro|XF86XK_Sleep
define|#
directive|define
name|XF86XK_Sleep
value|0x1008FF2F
end_define
begin_define
DECL|macro|XF86XK_Favorites
define|#
directive|define
name|XF86XK_Favorites
value|0x1008FF30
end_define
begin_define
DECL|macro|XF86XK_AudioPause
define|#
directive|define
name|XF86XK_AudioPause
value|0x1008FF31
end_define
begin_define
DECL|macro|XF86XK_AudioMedia
define|#
directive|define
name|XF86XK_AudioMedia
value|0x1008FF32
end_define
begin_define
DECL|macro|XF86XK_MyComputer
define|#
directive|define
name|XF86XK_MyComputer
value|0x1008FF33
end_define
begin_define
DECL|macro|XF86XK_LightBulb
define|#
directive|define
name|XF86XK_LightBulb
value|0x1008FF35
end_define
begin_define
DECL|macro|XF86XK_Shop
define|#
directive|define
name|XF86XK_Shop
value|0x1008FF36
end_define
begin_define
DECL|macro|XF86XK_History
define|#
directive|define
name|XF86XK_History
value|0x1008FF37
end_define
begin_define
DECL|macro|XF86XK_OpenURL
define|#
directive|define
name|XF86XK_OpenURL
value|0x1008FF38
end_define
begin_define
DECL|macro|XF86XK_AddFavorite
define|#
directive|define
name|XF86XK_AddFavorite
value|0x1008FF39
end_define
begin_define
DECL|macro|XF86XK_HotLinks
define|#
directive|define
name|XF86XK_HotLinks
value|0x1008FF3A
end_define
begin_define
DECL|macro|XF86XK_BrightnessAdjust
define|#
directive|define
name|XF86XK_BrightnessAdjust
value|0x1008FF3B
end_define
begin_define
DECL|macro|XF86XK_Finance
define|#
directive|define
name|XF86XK_Finance
value|0x1008FF3C
end_define
begin_define
DECL|macro|XF86XK_Community
define|#
directive|define
name|XF86XK_Community
value|0x1008FF3D
end_define
begin_define
DECL|macro|XF86XK_AudioRewind
define|#
directive|define
name|XF86XK_AudioRewind
value|0x1008FF3E
end_define
begin_define
DECL|macro|XF86XK_BackForward
define|#
directive|define
name|XF86XK_BackForward
value|0x1008FF3F
end_define
begin_define
DECL|macro|XF86XK_Launch0
define|#
directive|define
name|XF86XK_Launch0
value|0x1008FF40
end_define
begin_define
DECL|macro|XF86XK_Launch1
define|#
directive|define
name|XF86XK_Launch1
value|0x1008FF41
end_define
begin_define
DECL|macro|XF86XK_Launch2
define|#
directive|define
name|XF86XK_Launch2
value|0x1008FF42
end_define
begin_define
DECL|macro|XF86XK_Launch3
define|#
directive|define
name|XF86XK_Launch3
value|0x1008FF43
end_define
begin_define
DECL|macro|XF86XK_Launch4
define|#
directive|define
name|XF86XK_Launch4
value|0x1008FF44
end_define
begin_define
DECL|macro|XF86XK_Launch5
define|#
directive|define
name|XF86XK_Launch5
value|0x1008FF45
end_define
begin_define
DECL|macro|XF86XK_Launch6
define|#
directive|define
name|XF86XK_Launch6
value|0x1008FF46
end_define
begin_define
DECL|macro|XF86XK_Launch7
define|#
directive|define
name|XF86XK_Launch7
value|0x1008FF47
end_define
begin_define
DECL|macro|XF86XK_Launch8
define|#
directive|define
name|XF86XK_Launch8
value|0x1008FF48
end_define
begin_define
DECL|macro|XF86XK_Launch9
define|#
directive|define
name|XF86XK_Launch9
value|0x1008FF49
end_define
begin_define
DECL|macro|XF86XK_LaunchA
define|#
directive|define
name|XF86XK_LaunchA
value|0x1008FF4A
end_define
begin_define
DECL|macro|XF86XK_LaunchB
define|#
directive|define
name|XF86XK_LaunchB
value|0x1008FF4B
end_define
begin_define
DECL|macro|XF86XK_LaunchC
define|#
directive|define
name|XF86XK_LaunchC
value|0x1008FF4C
end_define
begin_define
DECL|macro|XF86XK_LaunchD
define|#
directive|define
name|XF86XK_LaunchD
value|0x1008FF4D
end_define
begin_define
DECL|macro|XF86XK_LaunchE
define|#
directive|define
name|XF86XK_LaunchE
value|0x1008FF4E
end_define
begin_define
DECL|macro|XF86XK_LaunchF
define|#
directive|define
name|XF86XK_LaunchF
value|0x1008FF4F
end_define
begin_define
DECL|macro|XF86XK_ApplicationLeft
define|#
directive|define
name|XF86XK_ApplicationLeft
value|0x1008FF50
end_define
begin_define
DECL|macro|XF86XK_ApplicationRight
define|#
directive|define
name|XF86XK_ApplicationRight
value|0x1008FF51
end_define
begin_define
DECL|macro|XF86XK_Book
define|#
directive|define
name|XF86XK_Book
value|0x1008FF52
end_define
begin_define
DECL|macro|XF86XK_CD
define|#
directive|define
name|XF86XK_CD
value|0x1008FF53
end_define
begin_define
DECL|macro|XF86XK_Calculater
define|#
directive|define
name|XF86XK_Calculater
value|0x1008FF54
end_define
begin_define
DECL|macro|XF86XK_Clear
define|#
directive|define
name|XF86XK_Clear
value|0x1008FF55
end_define
begin_define
DECL|macro|XF86XK_ClearGrab
define|#
directive|define
name|XF86XK_ClearGrab
value|0x1008FE21
end_define
begin_define
DECL|macro|XF86XK_Close
define|#
directive|define
name|XF86XK_Close
value|0x1008FF56
end_define
begin_define
DECL|macro|XF86XK_Copy
define|#
directive|define
name|XF86XK_Copy
value|0x1008FF57
end_define
begin_define
DECL|macro|XF86XK_Cut
define|#
directive|define
name|XF86XK_Cut
value|0x1008FF58
end_define
begin_define
DECL|macro|XF86XK_Display
define|#
directive|define
name|XF86XK_Display
value|0x1008FF59
end_define
begin_define
DECL|macro|XF86XK_DOS
define|#
directive|define
name|XF86XK_DOS
value|0x1008FF5A
end_define
begin_define
DECL|macro|XF86XK_Documents
define|#
directive|define
name|XF86XK_Documents
value|0x1008FF5B
end_define
begin_define
DECL|macro|XF86XK_Excel
define|#
directive|define
name|XF86XK_Excel
value|0x1008FF5C
end_define
begin_define
DECL|macro|XF86XK_Explorer
define|#
directive|define
name|XF86XK_Explorer
value|0x1008FF5D
end_define
begin_define
DECL|macro|XF86XK_Game
define|#
directive|define
name|XF86XK_Game
value|0x1008FF5E
end_define
begin_define
DECL|macro|XF86XK_Go
define|#
directive|define
name|XF86XK_Go
value|0x1008FF5F
end_define
begin_define
DECL|macro|XF86XK_iTouch
define|#
directive|define
name|XF86XK_iTouch
value|0x1008FF60
end_define
begin_define
DECL|macro|XF86XK_LogOff
define|#
directive|define
name|XF86XK_LogOff
value|0x1008FF61
end_define
begin_define
DECL|macro|XF86XK_Market
define|#
directive|define
name|XF86XK_Market
value|0x1008FF62
end_define
begin_define
DECL|macro|XF86XK_Meeting
define|#
directive|define
name|XF86XK_Meeting
value|0x1008FF63
end_define
begin_define
DECL|macro|XF86XK_MenuKB
define|#
directive|define
name|XF86XK_MenuKB
value|0x1008FF65
end_define
begin_define
DECL|macro|XF86XK_MenuPB
define|#
directive|define
name|XF86XK_MenuPB
value|0x1008FF66
end_define
begin_define
DECL|macro|XF86XK_MySites
define|#
directive|define
name|XF86XK_MySites
value|0x1008FF67
end_define
begin_define
DECL|macro|XF86XK_News
define|#
directive|define
name|XF86XK_News
value|0x1008FF69
end_define
begin_define
DECL|macro|XF86XK_OfficeHome
define|#
directive|define
name|XF86XK_OfficeHome
value|0x1008FF6A
end_define
begin_define
DECL|macro|XF86XK_Option
define|#
directive|define
name|XF86XK_Option
value|0x1008FF6C
end_define
begin_define
DECL|macro|XF86XK_Paste
define|#
directive|define
name|XF86XK_Paste
value|0x1008FF6D
end_define
begin_define
DECL|macro|XF86XK_Phone
define|#
directive|define
name|XF86XK_Phone
value|0x1008FF6E
end_define
begin_define
DECL|macro|XF86XK_Reply
define|#
directive|define
name|XF86XK_Reply
value|0x1008FF72
end_define
begin_define
DECL|macro|XF86XK_Reload
define|#
directive|define
name|XF86XK_Reload
value|0x1008FF73
end_define
begin_define
DECL|macro|XF86XK_RotateWindows
define|#
directive|define
name|XF86XK_RotateWindows
value|0x1008FF74
end_define
begin_define
DECL|macro|XF86XK_RotationPB
define|#
directive|define
name|XF86XK_RotationPB
value|0x1008FF75
end_define
begin_define
DECL|macro|XF86XK_RotationKB
define|#
directive|define
name|XF86XK_RotationKB
value|0x1008FF76
end_define
begin_define
DECL|macro|XF86XK_Save
define|#
directive|define
name|XF86XK_Save
value|0x1008FF77
end_define
begin_define
DECL|macro|XF86XK_Send
define|#
directive|define
name|XF86XK_Send
value|0x1008FF7B
end_define
begin_define
DECL|macro|XF86XK_Spell
define|#
directive|define
name|XF86XK_Spell
value|0x1008FF7C
end_define
begin_define
DECL|macro|XF86XK_SplitScreen
define|#
directive|define
name|XF86XK_SplitScreen
value|0x1008FF7D
end_define
begin_define
DECL|macro|XF86XK_Support
define|#
directive|define
name|XF86XK_Support
value|0x1008FF7E
end_define
begin_define
DECL|macro|XF86XK_TaskPane
define|#
directive|define
name|XF86XK_TaskPane
value|0x1008FF7F
end_define
begin_define
DECL|macro|XF86XK_Terminal
define|#
directive|define
name|XF86XK_Terminal
value|0x1008FF80
end_define
begin_define
DECL|macro|XF86XK_Tools
define|#
directive|define
name|XF86XK_Tools
value|0x1008FF81
end_define
begin_define
DECL|macro|XF86XK_Travel
define|#
directive|define
name|XF86XK_Travel
value|0x1008FF82
end_define
begin_define
DECL|macro|XF86XK_Video
define|#
directive|define
name|XF86XK_Video
value|0x1008FF87
end_define
begin_define
DECL|macro|XF86XK_Word
define|#
directive|define
name|XF86XK_Word
value|0x1008FF89
end_define
begin_define
DECL|macro|XF86XK_Xfer
define|#
directive|define
name|XF86XK_Xfer
value|0x1008FF8A
end_define
begin_define
DECL|macro|XF86XK_ZoomIn
define|#
directive|define
name|XF86XK_ZoomIn
value|0x1008FF8B
end_define
begin_define
DECL|macro|XF86XK_ZoomOut
define|#
directive|define
name|XF86XK_ZoomOut
value|0x1008FF8C
end_define
begin_define
DECL|macro|XF86XK_Away
define|#
directive|define
name|XF86XK_Away
value|0x1008FF8D
end_define
begin_define
DECL|macro|XF86XK_Messenger
define|#
directive|define
name|XF86XK_Messenger
value|0x1008FF8E
end_define
begin_define
DECL|macro|XF86XK_WebCam
define|#
directive|define
name|XF86XK_WebCam
value|0x1008FF8F
end_define
begin_define
DECL|macro|XF86XK_MailForward
define|#
directive|define
name|XF86XK_MailForward
value|0x1008FF90
end_define
begin_define
DECL|macro|XF86XK_Pictures
define|#
directive|define
name|XF86XK_Pictures
value|0x1008FF91
end_define
begin_define
DECL|macro|XF86XK_Music
define|#
directive|define
name|XF86XK_Music
value|0x1008FF92
end_define
begin_define
DECL|macro|XF86XK_Battery
define|#
directive|define
name|XF86XK_Battery
value|0x1008FF93
end_define
begin_define
DECL|macro|XF86XK_Bluetooth
define|#
directive|define
name|XF86XK_Bluetooth
value|0x1008FF94
end_define
begin_define
DECL|macro|XF86XK_WLAN
define|#
directive|define
name|XF86XK_WLAN
value|0x1008FF95
end_define
begin_define
DECL|macro|XF86XK_UWB
define|#
directive|define
name|XF86XK_UWB
value|0x1008FF96
end_define
begin_define
DECL|macro|XF86XK_AudioForward
define|#
directive|define
name|XF86XK_AudioForward
value|0x1008FF97
end_define
begin_define
DECL|macro|XF86XK_AudioRepeat
define|#
directive|define
name|XF86XK_AudioRepeat
value|0x1008FF98
end_define
begin_define
DECL|macro|XF86XK_AudioRandomPlay
define|#
directive|define
name|XF86XK_AudioRandomPlay
value|0x1008FF99
end_define
begin_define
DECL|macro|XF86XK_Subtitle
define|#
directive|define
name|XF86XK_Subtitle
value|0x1008FF9A
end_define
begin_define
DECL|macro|XF86XK_AudioCycleTrack
define|#
directive|define
name|XF86XK_AudioCycleTrack
value|0x1008FF9B
end_define
begin_define
DECL|macro|XF86XK_Time
define|#
directive|define
name|XF86XK_Time
value|0x1008FF9F
end_define
begin_define
DECL|macro|XF86XK_Select
define|#
directive|define
name|XF86XK_Select
value|0x1008FFA0
end_define
begin_define
DECL|macro|XF86XK_View
define|#
directive|define
name|XF86XK_View
value|0x1008FFA1
end_define
begin_define
DECL|macro|XF86XK_TopMenu
define|#
directive|define
name|XF86XK_TopMenu
value|0x1008FFA2
end_define
begin_define
DECL|macro|XF86XK_Suspend
define|#
directive|define
name|XF86XK_Suspend
value|0x1008FFA7
end_define
begin_define
DECL|macro|XF86XK_Hibernate
define|#
directive|define
name|XF86XK_Hibernate
value|0x1008FFA8
end_define
begin_comment
comment|// end of XF86keysyms.h
end_comment
begin_comment
comment|// Special keys used by Qtopia, mapped into the X11 private keypad range.
end_comment
begin_define
DECL|macro|QTOPIAXK_Select
define|#
directive|define
name|QTOPIAXK_Select
value|0x11000601
end_define
begin_define
DECL|macro|QTOPIAXK_Yes
define|#
directive|define
name|QTOPIAXK_Yes
value|0x11000602
end_define
begin_define
DECL|macro|QTOPIAXK_No
define|#
directive|define
name|QTOPIAXK_No
value|0x11000603
end_define
begin_define
DECL|macro|QTOPIAXK_Cancel
define|#
directive|define
name|QTOPIAXK_Cancel
value|0x11000604
end_define
begin_define
DECL|macro|QTOPIAXK_Printer
define|#
directive|define
name|QTOPIAXK_Printer
value|0x11000605
end_define
begin_define
DECL|macro|QTOPIAXK_Execute
define|#
directive|define
name|QTOPIAXK_Execute
value|0x11000606
end_define
begin_define
DECL|macro|QTOPIAXK_Sleep
define|#
directive|define
name|QTOPIAXK_Sleep
value|0x11000607
end_define
begin_define
DECL|macro|QTOPIAXK_Play
define|#
directive|define
name|QTOPIAXK_Play
value|0x11000608
end_define
begin_define
DECL|macro|QTOPIAXK_Zoom
define|#
directive|define
name|QTOPIAXK_Zoom
value|0x11000609
end_define
begin_define
DECL|macro|QTOPIAXK_Context1
define|#
directive|define
name|QTOPIAXK_Context1
value|0x1100060A
end_define
begin_define
DECL|macro|QTOPIAXK_Context2
define|#
directive|define
name|QTOPIAXK_Context2
value|0x1100060B
end_define
begin_define
DECL|macro|QTOPIAXK_Context3
define|#
directive|define
name|QTOPIAXK_Context3
value|0x1100060C
end_define
begin_define
DECL|macro|QTOPIAXK_Context4
define|#
directive|define
name|QTOPIAXK_Context4
value|0x1100060D
end_define
begin_define
DECL|macro|QTOPIAXK_Call
define|#
directive|define
name|QTOPIAXK_Call
value|0x1100060E
end_define
begin_define
DECL|macro|QTOPIAXK_Hangup
define|#
directive|define
name|QTOPIAXK_Hangup
value|0x1100060F
end_define
begin_define
DECL|macro|QTOPIAXK_Flip
define|#
directive|define
name|QTOPIAXK_Flip
value|0x11000610
end_define
begin_comment
comment|// keyboard mapping table
end_comment
begin_decl_stmt
DECL|variable|KeyTbl
specifier|static
specifier|const
name|unsigned
name|int
name|KeyTbl
index|[]
init|=
block|{
comment|// misc keys
name|XK_Escape
block|,
name|Qt
operator|::
name|Key_Escape
block|,
name|XK_Tab
block|,
name|Qt
operator|::
name|Key_Tab
block|,
name|XK_ISO_Left_Tab
block|,
name|Qt
operator|::
name|Key_Backtab
block|,
name|XK_BackSpace
block|,
name|Qt
operator|::
name|Key_Backspace
block|,
name|XK_Return
block|,
name|Qt
operator|::
name|Key_Return
block|,
name|XK_Insert
block|,
name|Qt
operator|::
name|Key_Insert
block|,
name|XK_Delete
block|,
name|Qt
operator|::
name|Key_Delete
block|,
name|XK_Clear
block|,
name|Qt
operator|::
name|Key_Delete
block|,
name|XK_Pause
block|,
name|Qt
operator|::
name|Key_Pause
block|,
name|XK_Print
block|,
name|Qt
operator|::
name|Key_Print
block|,
literal|0x1005FF60
block|,
name|Qt
operator|::
name|Key_SysReq
block|,
comment|// hardcoded Sun SysReq
literal|0x1007ff00
block|,
name|Qt
operator|::
name|Key_SysReq
block|,
comment|// hardcoded X386 SysReq
comment|// cursor movement
name|XK_Home
block|,
name|Qt
operator|::
name|Key_Home
block|,
name|XK_End
block|,
name|Qt
operator|::
name|Key_End
block|,
name|XK_Left
block|,
name|Qt
operator|::
name|Key_Left
block|,
name|XK_Up
block|,
name|Qt
operator|::
name|Key_Up
block|,
name|XK_Right
block|,
name|Qt
operator|::
name|Key_Right
block|,
name|XK_Down
block|,
name|Qt
operator|::
name|Key_Down
block|,
name|XK_Prior
block|,
name|Qt
operator|::
name|Key_PageUp
block|,
name|XK_Next
block|,
name|Qt
operator|::
name|Key_PageDown
block|,
comment|// modifiers
name|XK_Shift_L
block|,
name|Qt
operator|::
name|Key_Shift
block|,
name|XK_Shift_R
block|,
name|Qt
operator|::
name|Key_Shift
block|,
name|XK_Shift_Lock
block|,
name|Qt
operator|::
name|Key_Shift
block|,
name|XK_Control_L
block|,
name|Qt
operator|::
name|Key_Control
block|,
name|XK_Control_R
block|,
name|Qt
operator|::
name|Key_Control
block|,
name|XK_Meta_L
block|,
name|Qt
operator|::
name|Key_Meta
block|,
name|XK_Meta_R
block|,
name|Qt
operator|::
name|Key_Meta
block|,
name|XK_Alt_L
block|,
name|Qt
operator|::
name|Key_Alt
block|,
name|XK_Alt_R
block|,
name|Qt
operator|::
name|Key_Alt
block|,
name|XK_Caps_Lock
block|,
name|Qt
operator|::
name|Key_CapsLock
block|,
name|XK_Num_Lock
block|,
name|Qt
operator|::
name|Key_NumLock
block|,
name|XK_Scroll_Lock
block|,
name|Qt
operator|::
name|Key_ScrollLock
block|,
name|XK_Super_L
block|,
name|Qt
operator|::
name|Key_Super_L
block|,
name|XK_Super_R
block|,
name|Qt
operator|::
name|Key_Super_R
block|,
name|XK_Menu
block|,
name|Qt
operator|::
name|Key_Menu
block|,
name|XK_Hyper_L
block|,
name|Qt
operator|::
name|Key_Hyper_L
block|,
name|XK_Hyper_R
block|,
name|Qt
operator|::
name|Key_Hyper_R
block|,
name|XK_Help
block|,
name|Qt
operator|::
name|Key_Help
block|,
literal|0x1000FF74
block|,
name|Qt
operator|::
name|Key_Backtab
block|,
comment|// hardcoded HP backtab
literal|0x1005FF10
block|,
name|Qt
operator|::
name|Key_F11
block|,
comment|// hardcoded Sun F36 (labeled F11)
literal|0x1005FF11
block|,
name|Qt
operator|::
name|Key_F12
block|,
comment|// hardcoded Sun F37 (labeled F12)
comment|// numeric and function keypad keys
name|XK_KP_Space
block|,
name|Qt
operator|::
name|Key_Space
block|,
name|XK_KP_Tab
block|,
name|Qt
operator|::
name|Key_Tab
block|,
name|XK_KP_Enter
block|,
name|Qt
operator|::
name|Key_Enter
block|,
comment|//XK_KP_F1,                 Qt::Key_F1,
comment|//XK_KP_F2,                 Qt::Key_F2,
comment|//XK_KP_F3,                 Qt::Key_F3,
comment|//XK_KP_F4,                 Qt::Key_F4,
name|XK_KP_Home
block|,
name|Qt
operator|::
name|Key_Home
block|,
name|XK_KP_Left
block|,
name|Qt
operator|::
name|Key_Left
block|,
name|XK_KP_Up
block|,
name|Qt
operator|::
name|Key_Up
block|,
name|XK_KP_Right
block|,
name|Qt
operator|::
name|Key_Right
block|,
name|XK_KP_Down
block|,
name|Qt
operator|::
name|Key_Down
block|,
name|XK_KP_Prior
block|,
name|Qt
operator|::
name|Key_PageUp
block|,
name|XK_KP_Next
block|,
name|Qt
operator|::
name|Key_PageDown
block|,
name|XK_KP_End
block|,
name|Qt
operator|::
name|Key_End
block|,
name|XK_KP_Begin
block|,
name|Qt
operator|::
name|Key_Clear
block|,
name|XK_KP_Insert
block|,
name|Qt
operator|::
name|Key_Insert
block|,
name|XK_KP_Delete
block|,
name|Qt
operator|::
name|Key_Delete
block|,
name|XK_KP_Equal
block|,
name|Qt
operator|::
name|Key_Equal
block|,
name|XK_KP_Multiply
block|,
name|Qt
operator|::
name|Key_Asterisk
block|,
name|XK_KP_Add
block|,
name|Qt
operator|::
name|Key_Plus
block|,
name|XK_KP_Separator
block|,
name|Qt
operator|::
name|Key_Comma
block|,
name|XK_KP_Subtract
block|,
name|Qt
operator|::
name|Key_Minus
block|,
name|XK_KP_Decimal
block|,
name|Qt
operator|::
name|Key_Period
block|,
name|XK_KP_Divide
block|,
name|Qt
operator|::
name|Key_Slash
block|,
comment|// International input method support keys
comment|// International& multi-key character composition
name|XK_ISO_Level3_Shift
block|,
name|Qt
operator|::
name|Key_AltGr
block|,
name|XK_Multi_key
block|,
name|Qt
operator|::
name|Key_Multi_key
block|,
name|XK_Codeinput
block|,
name|Qt
operator|::
name|Key_Codeinput
block|,
name|XK_SingleCandidate
block|,
name|Qt
operator|::
name|Key_SingleCandidate
block|,
name|XK_MultipleCandidate
block|,
name|Qt
operator|::
name|Key_MultipleCandidate
block|,
name|XK_PreviousCandidate
block|,
name|Qt
operator|::
name|Key_PreviousCandidate
block|,
comment|// Misc Functions
name|XK_Mode_switch
block|,
name|Qt
operator|::
name|Key_Mode_switch
block|,
name|XK_script_switch
block|,
name|Qt
operator|::
name|Key_Mode_switch
block|,
comment|// Japanese keyboard support
name|XK_Kanji
block|,
name|Qt
operator|::
name|Key_Kanji
block|,
name|XK_Muhenkan
block|,
name|Qt
operator|::
name|Key_Muhenkan
block|,
comment|//XK_Henkan_Mode,		Qt::Key_Henkan_Mode,
name|XK_Henkan_Mode
block|,
name|Qt
operator|::
name|Key_Henkan
block|,
name|XK_Henkan
block|,
name|Qt
operator|::
name|Key_Henkan
block|,
name|XK_Romaji
block|,
name|Qt
operator|::
name|Key_Romaji
block|,
name|XK_Hiragana
block|,
name|Qt
operator|::
name|Key_Hiragana
block|,
name|XK_Katakana
block|,
name|Qt
operator|::
name|Key_Katakana
block|,
name|XK_Hiragana_Katakana
block|,
name|Qt
operator|::
name|Key_Hiragana_Katakana
block|,
name|XK_Zenkaku
block|,
name|Qt
operator|::
name|Key_Zenkaku
block|,
name|XK_Hankaku
block|,
name|Qt
operator|::
name|Key_Hankaku
block|,
name|XK_Zenkaku_Hankaku
block|,
name|Qt
operator|::
name|Key_Zenkaku_Hankaku
block|,
name|XK_Touroku
block|,
name|Qt
operator|::
name|Key_Touroku
block|,
name|XK_Massyo
block|,
name|Qt
operator|::
name|Key_Massyo
block|,
name|XK_Kana_Lock
block|,
name|Qt
operator|::
name|Key_Kana_Lock
block|,
name|XK_Kana_Shift
block|,
name|Qt
operator|::
name|Key_Kana_Shift
block|,
name|XK_Eisu_Shift
block|,
name|Qt
operator|::
name|Key_Eisu_Shift
block|,
name|XK_Eisu_toggle
block|,
name|Qt
operator|::
name|Key_Eisu_toggle
block|,
comment|//XK_Kanji_Bangou,		Qt::Key_Kanji_Bangou,
comment|//XK_Zen_Koho,		Qt::Key_Zen_Koho,
comment|//XK_Mae_Koho,		Qt::Key_Mae_Koho,
name|XK_Kanji_Bangou
block|,
name|Qt
operator|::
name|Key_Codeinput
block|,
name|XK_Zen_Koho
block|,
name|Qt
operator|::
name|Key_MultipleCandidate
block|,
name|XK_Mae_Koho
block|,
name|Qt
operator|::
name|Key_PreviousCandidate
block|,
ifdef|#
directive|ifdef
name|XK_KOREAN
comment|// Korean keyboard support
name|XK_Hangul
block|,
name|Qt
operator|::
name|Key_Hangul
block|,
name|XK_Hangul_Start
block|,
name|Qt
operator|::
name|Key_Hangul_Start
block|,
name|XK_Hangul_End
block|,
name|Qt
operator|::
name|Key_Hangul_End
block|,
name|XK_Hangul_Hanja
block|,
name|Qt
operator|::
name|Key_Hangul_Hanja
block|,
name|XK_Hangul_Jamo
block|,
name|Qt
operator|::
name|Key_Hangul_Jamo
block|,
name|XK_Hangul_Romaja
block|,
name|Qt
operator|::
name|Key_Hangul_Romaja
block|,
comment|//XK_Hangul_Codeinput,	Qt::Key_Hangul_Codeinput,
name|XK_Hangul_Codeinput
block|,
name|Qt
operator|::
name|Key_Codeinput
block|,
name|XK_Hangul_Jeonja
block|,
name|Qt
operator|::
name|Key_Hangul_Jeonja
block|,
name|XK_Hangul_Banja
block|,
name|Qt
operator|::
name|Key_Hangul_Banja
block|,
name|XK_Hangul_PreHanja
block|,
name|Qt
operator|::
name|Key_Hangul_PreHanja
block|,
name|XK_Hangul_PostHanja
block|,
name|Qt
operator|::
name|Key_Hangul_PostHanja
block|,
comment|//XK_Hangul_SingleCandidate,Qt::Key_Hangul_SingleCandidate,
comment|//XK_Hangul_MultipleCandidate,Qt::Key_Hangul_MultipleCandidate,
comment|//XK_Hangul_PreviousCandidate,Qt::Key_Hangul_PreviousCandidate,
name|XK_Hangul_SingleCandidate
block|,
name|Qt
operator|::
name|Key_SingleCandidate
block|,
name|XK_Hangul_MultipleCandidate
block|,
name|Qt
operator|::
name|Key_MultipleCandidate
block|,
name|XK_Hangul_PreviousCandidate
block|,
name|Qt
operator|::
name|Key_PreviousCandidate
block|,
name|XK_Hangul_Special
block|,
name|Qt
operator|::
name|Key_Hangul_Special
block|,
comment|//XK_Hangul_switch,		Qt::Key_Hangul_switch,
name|XK_Hangul_switch
block|,
name|Qt
operator|::
name|Key_Mode_switch
block|,
endif|#
directive|endif
comment|// XK_KOREAN
comment|// dead keys
name|XK_dead_grave
block|,
name|Qt
operator|::
name|Key_Dead_Grave
block|,
name|XK_dead_acute
block|,
name|Qt
operator|::
name|Key_Dead_Acute
block|,
name|XK_dead_circumflex
block|,
name|Qt
operator|::
name|Key_Dead_Circumflex
block|,
name|XK_dead_tilde
block|,
name|Qt
operator|::
name|Key_Dead_Tilde
block|,
name|XK_dead_macron
block|,
name|Qt
operator|::
name|Key_Dead_Macron
block|,
name|XK_dead_breve
block|,
name|Qt
operator|::
name|Key_Dead_Breve
block|,
name|XK_dead_abovedot
block|,
name|Qt
operator|::
name|Key_Dead_Abovedot
block|,
name|XK_dead_diaeresis
block|,
name|Qt
operator|::
name|Key_Dead_Diaeresis
block|,
name|XK_dead_abovering
block|,
name|Qt
operator|::
name|Key_Dead_Abovering
block|,
name|XK_dead_doubleacute
block|,
name|Qt
operator|::
name|Key_Dead_Doubleacute
block|,
name|XK_dead_caron
block|,
name|Qt
operator|::
name|Key_Dead_Caron
block|,
name|XK_dead_cedilla
block|,
name|Qt
operator|::
name|Key_Dead_Cedilla
block|,
name|XK_dead_ogonek
block|,
name|Qt
operator|::
name|Key_Dead_Ogonek
block|,
name|XK_dead_iota
block|,
name|Qt
operator|::
name|Key_Dead_Iota
block|,
name|XK_dead_voiced_sound
block|,
name|Qt
operator|::
name|Key_Dead_Voiced_Sound
block|,
name|XK_dead_semivoiced_sound
block|,
name|Qt
operator|::
name|Key_Dead_Semivoiced_Sound
block|,
name|XK_dead_belowdot
block|,
name|Qt
operator|::
name|Key_Dead_Belowdot
block|,
name|XK_dead_hook
block|,
name|Qt
operator|::
name|Key_Dead_Hook
block|,
name|XK_dead_horn
block|,
name|Qt
operator|::
name|Key_Dead_Horn
block|,
comment|// Special keys from X.org - This include multimedia keys,
comment|// wireless/bluetooth/uwb keys, special launcher keys, etc.
name|XF86XK_Back
block|,
name|Qt
operator|::
name|Key_Back
block|,
name|XF86XK_Forward
block|,
name|Qt
operator|::
name|Key_Forward
block|,
name|XF86XK_Stop
block|,
name|Qt
operator|::
name|Key_Stop
block|,
name|XF86XK_Refresh
block|,
name|Qt
operator|::
name|Key_Refresh
block|,
name|XF86XK_Favorites
block|,
name|Qt
operator|::
name|Key_Favorites
block|,
name|XF86XK_AudioMedia
block|,
name|Qt
operator|::
name|Key_LaunchMedia
block|,
name|XF86XK_OpenURL
block|,
name|Qt
operator|::
name|Key_OpenUrl
block|,
name|XF86XK_HomePage
block|,
name|Qt
operator|::
name|Key_HomePage
block|,
name|XF86XK_Search
block|,
name|Qt
operator|::
name|Key_Search
block|,
name|XF86XK_AudioLowerVolume
block|,
name|Qt
operator|::
name|Key_VolumeDown
block|,
name|XF86XK_AudioMute
block|,
name|Qt
operator|::
name|Key_VolumeMute
block|,
name|XF86XK_AudioRaiseVolume
block|,
name|Qt
operator|::
name|Key_VolumeUp
block|,
name|XF86XK_AudioPlay
block|,
name|Qt
operator|::
name|Key_MediaPlay
block|,
name|XF86XK_AudioStop
block|,
name|Qt
operator|::
name|Key_MediaStop
block|,
name|XF86XK_AudioPrev
block|,
name|Qt
operator|::
name|Key_MediaPrevious
block|,
name|XF86XK_AudioNext
block|,
name|Qt
operator|::
name|Key_MediaNext
block|,
name|XF86XK_AudioRecord
block|,
name|Qt
operator|::
name|Key_MediaRecord
block|,
name|XF86XK_Mail
block|,
name|Qt
operator|::
name|Key_LaunchMail
block|,
name|XF86XK_MyComputer
block|,
name|Qt
operator|::
name|Key_Launch0
block|,
comment|// ### Qt 5: remap properly
name|XF86XK_Calculator
block|,
name|Qt
operator|::
name|Key_Launch1
block|,
name|XF86XK_Memo
block|,
name|Qt
operator|::
name|Key_Memo
block|,
name|XF86XK_ToDoList
block|,
name|Qt
operator|::
name|Key_ToDoList
block|,
name|XF86XK_Calendar
block|,
name|Qt
operator|::
name|Key_Calendar
block|,
name|XF86XK_PowerDown
block|,
name|Qt
operator|::
name|Key_PowerDown
block|,
name|XF86XK_ContrastAdjust
block|,
name|Qt
operator|::
name|Key_ContrastAdjust
block|,
name|XF86XK_Standby
block|,
name|Qt
operator|::
name|Key_Standby
block|,
name|XF86XK_MonBrightnessUp
block|,
name|Qt
operator|::
name|Key_MonBrightnessUp
block|,
name|XF86XK_MonBrightnessDown
block|,
name|Qt
operator|::
name|Key_MonBrightnessDown
block|,
name|XF86XK_KbdLightOnOff
block|,
name|Qt
operator|::
name|Key_KeyboardLightOnOff
block|,
name|XF86XK_KbdBrightnessUp
block|,
name|Qt
operator|::
name|Key_KeyboardBrightnessUp
block|,
name|XF86XK_KbdBrightnessDown
block|,
name|Qt
operator|::
name|Key_KeyboardBrightnessDown
block|,
name|XF86XK_PowerOff
block|,
name|Qt
operator|::
name|Key_PowerOff
block|,
name|XF86XK_WakeUp
block|,
name|Qt
operator|::
name|Key_WakeUp
block|,
name|XF86XK_Eject
block|,
name|Qt
operator|::
name|Key_Eject
block|,
name|XF86XK_ScreenSaver
block|,
name|Qt
operator|::
name|Key_ScreenSaver
block|,
name|XF86XK_WWW
block|,
name|Qt
operator|::
name|Key_WWW
block|,
name|XF86XK_Sleep
block|,
name|Qt
operator|::
name|Key_Sleep
block|,
name|XF86XK_LightBulb
block|,
name|Qt
operator|::
name|Key_LightBulb
block|,
name|XF86XK_Shop
block|,
name|Qt
operator|::
name|Key_Shop
block|,
name|XF86XK_History
block|,
name|Qt
operator|::
name|Key_History
block|,
name|XF86XK_AddFavorite
block|,
name|Qt
operator|::
name|Key_AddFavorite
block|,
name|XF86XK_HotLinks
block|,
name|Qt
operator|::
name|Key_HotLinks
block|,
name|XF86XK_BrightnessAdjust
block|,
name|Qt
operator|::
name|Key_BrightnessAdjust
block|,
name|XF86XK_Finance
block|,
name|Qt
operator|::
name|Key_Finance
block|,
name|XF86XK_Community
block|,
name|Qt
operator|::
name|Key_Community
block|,
name|XF86XK_AudioRewind
block|,
name|Qt
operator|::
name|Key_AudioRewind
block|,
name|XF86XK_BackForward
block|,
name|Qt
operator|::
name|Key_BackForward
block|,
name|XF86XK_ApplicationLeft
block|,
name|Qt
operator|::
name|Key_ApplicationLeft
block|,
name|XF86XK_ApplicationRight
block|,
name|Qt
operator|::
name|Key_ApplicationRight
block|,
name|XF86XK_Book
block|,
name|Qt
operator|::
name|Key_Book
block|,
name|XF86XK_CD
block|,
name|Qt
operator|::
name|Key_CD
block|,
name|XF86XK_Calculater
block|,
name|Qt
operator|::
name|Key_Calculator
block|,
name|XF86XK_Clear
block|,
name|Qt
operator|::
name|Key_Clear
block|,
name|XF86XK_ClearGrab
block|,
name|Qt
operator|::
name|Key_ClearGrab
block|,
name|XF86XK_Close
block|,
name|Qt
operator|::
name|Key_Close
block|,
name|XF86XK_Copy
block|,
name|Qt
operator|::
name|Key_Copy
block|,
name|XF86XK_Cut
block|,
name|Qt
operator|::
name|Key_Cut
block|,
name|XF86XK_Display
block|,
name|Qt
operator|::
name|Key_Display
block|,
name|XF86XK_DOS
block|,
name|Qt
operator|::
name|Key_DOS
block|,
name|XF86XK_Documents
block|,
name|Qt
operator|::
name|Key_Documents
block|,
name|XF86XK_Excel
block|,
name|Qt
operator|::
name|Key_Excel
block|,
name|XF86XK_Explorer
block|,
name|Qt
operator|::
name|Key_Explorer
block|,
name|XF86XK_Game
block|,
name|Qt
operator|::
name|Key_Game
block|,
name|XF86XK_Go
block|,
name|Qt
operator|::
name|Key_Go
block|,
name|XF86XK_iTouch
block|,
name|Qt
operator|::
name|Key_iTouch
block|,
name|XF86XK_LogOff
block|,
name|Qt
operator|::
name|Key_LogOff
block|,
name|XF86XK_Market
block|,
name|Qt
operator|::
name|Key_Market
block|,
name|XF86XK_Meeting
block|,
name|Qt
operator|::
name|Key_Meeting
block|,
name|XF86XK_MenuKB
block|,
name|Qt
operator|::
name|Key_MenuKB
block|,
name|XF86XK_MenuPB
block|,
name|Qt
operator|::
name|Key_MenuPB
block|,
name|XF86XK_MySites
block|,
name|Qt
operator|::
name|Key_MySites
block|,
name|XF86XK_News
block|,
name|Qt
operator|::
name|Key_News
block|,
name|XF86XK_OfficeHome
block|,
name|Qt
operator|::
name|Key_OfficeHome
block|,
name|XF86XK_Option
block|,
name|Qt
operator|::
name|Key_Option
block|,
name|XF86XK_Paste
block|,
name|Qt
operator|::
name|Key_Paste
block|,
name|XF86XK_Phone
block|,
name|Qt
operator|::
name|Key_Phone
block|,
name|XF86XK_Reply
block|,
name|Qt
operator|::
name|Key_Reply
block|,
name|XF86XK_Reload
block|,
name|Qt
operator|::
name|Key_Reload
block|,
name|XF86XK_RotateWindows
block|,
name|Qt
operator|::
name|Key_RotateWindows
block|,
name|XF86XK_RotationPB
block|,
name|Qt
operator|::
name|Key_RotationPB
block|,
name|XF86XK_RotationKB
block|,
name|Qt
operator|::
name|Key_RotationKB
block|,
name|XF86XK_Save
block|,
name|Qt
operator|::
name|Key_Save
block|,
name|XF86XK_Send
block|,
name|Qt
operator|::
name|Key_Send
block|,
name|XF86XK_Spell
block|,
name|Qt
operator|::
name|Key_Spell
block|,
name|XF86XK_SplitScreen
block|,
name|Qt
operator|::
name|Key_SplitScreen
block|,
name|XF86XK_Support
block|,
name|Qt
operator|::
name|Key_Support
block|,
name|XF86XK_TaskPane
block|,
name|Qt
operator|::
name|Key_TaskPane
block|,
name|XF86XK_Terminal
block|,
name|Qt
operator|::
name|Key_Terminal
block|,
name|XF86XK_Tools
block|,
name|Qt
operator|::
name|Key_Tools
block|,
name|XF86XK_Travel
block|,
name|Qt
operator|::
name|Key_Travel
block|,
name|XF86XK_Video
block|,
name|Qt
operator|::
name|Key_Video
block|,
name|XF86XK_Word
block|,
name|Qt
operator|::
name|Key_Word
block|,
name|XF86XK_Xfer
block|,
name|Qt
operator|::
name|Key_Xfer
block|,
name|XF86XK_ZoomIn
block|,
name|Qt
operator|::
name|Key_ZoomIn
block|,
name|XF86XK_ZoomOut
block|,
name|Qt
operator|::
name|Key_ZoomOut
block|,
name|XF86XK_Away
block|,
name|Qt
operator|::
name|Key_Away
block|,
name|XF86XK_Messenger
block|,
name|Qt
operator|::
name|Key_Messenger
block|,
name|XF86XK_WebCam
block|,
name|Qt
operator|::
name|Key_WebCam
block|,
name|XF86XK_MailForward
block|,
name|Qt
operator|::
name|Key_MailForward
block|,
name|XF86XK_Pictures
block|,
name|Qt
operator|::
name|Key_Pictures
block|,
name|XF86XK_Music
block|,
name|Qt
operator|::
name|Key_Music
block|,
name|XF86XK_Battery
block|,
name|Qt
operator|::
name|Key_Battery
block|,
name|XF86XK_Bluetooth
block|,
name|Qt
operator|::
name|Key_Bluetooth
block|,
name|XF86XK_WLAN
block|,
name|Qt
operator|::
name|Key_WLAN
block|,
name|XF86XK_UWB
block|,
name|Qt
operator|::
name|Key_UWB
block|,
name|XF86XK_AudioForward
block|,
name|Qt
operator|::
name|Key_AudioForward
block|,
name|XF86XK_AudioRepeat
block|,
name|Qt
operator|::
name|Key_AudioRepeat
block|,
name|XF86XK_AudioRandomPlay
block|,
name|Qt
operator|::
name|Key_AudioRandomPlay
block|,
name|XF86XK_Subtitle
block|,
name|Qt
operator|::
name|Key_Subtitle
block|,
name|XF86XK_AudioCycleTrack
block|,
name|Qt
operator|::
name|Key_AudioCycleTrack
block|,
name|XF86XK_Time
block|,
name|Qt
operator|::
name|Key_Time
block|,
name|XF86XK_Select
block|,
name|Qt
operator|::
name|Key_Select
block|,
name|XF86XK_View
block|,
name|Qt
operator|::
name|Key_View
block|,
name|XF86XK_TopMenu
block|,
name|Qt
operator|::
name|Key_TopMenu
block|,
name|XF86XK_Bluetooth
block|,
name|Qt
operator|::
name|Key_Bluetooth
block|,
name|XF86XK_Suspend
block|,
name|Qt
operator|::
name|Key_Suspend
block|,
name|XF86XK_Hibernate
block|,
name|Qt
operator|::
name|Key_Hibernate
block|,
name|XF86XK_Launch0
block|,
name|Qt
operator|::
name|Key_Launch2
block|,
comment|// ### Qt 5: remap properly
name|XF86XK_Launch1
block|,
name|Qt
operator|::
name|Key_Launch3
block|,
name|XF86XK_Launch2
block|,
name|Qt
operator|::
name|Key_Launch4
block|,
name|XF86XK_Launch3
block|,
name|Qt
operator|::
name|Key_Launch5
block|,
name|XF86XK_Launch4
block|,
name|Qt
operator|::
name|Key_Launch6
block|,
name|XF86XK_Launch5
block|,
name|Qt
operator|::
name|Key_Launch7
block|,
name|XF86XK_Launch6
block|,
name|Qt
operator|::
name|Key_Launch8
block|,
name|XF86XK_Launch7
block|,
name|Qt
operator|::
name|Key_Launch9
block|,
name|XF86XK_Launch8
block|,
name|Qt
operator|::
name|Key_LaunchA
block|,
name|XF86XK_Launch9
block|,
name|Qt
operator|::
name|Key_LaunchB
block|,
name|XF86XK_LaunchA
block|,
name|Qt
operator|::
name|Key_LaunchC
block|,
name|XF86XK_LaunchB
block|,
name|Qt
operator|::
name|Key_LaunchD
block|,
name|XF86XK_LaunchC
block|,
name|Qt
operator|::
name|Key_LaunchE
block|,
name|XF86XK_LaunchD
block|,
name|Qt
operator|::
name|Key_LaunchF
block|,
name|XF86XK_LaunchE
block|,
name|Qt
operator|::
name|Key_LaunchG
block|,
name|XF86XK_LaunchF
block|,
name|Qt
operator|::
name|Key_LaunchH
block|,
comment|// Qtopia keys
name|QTOPIAXK_Select
block|,
name|Qt
operator|::
name|Key_Select
block|,
name|QTOPIAXK_Yes
block|,
name|Qt
operator|::
name|Key_Yes
block|,
name|QTOPIAXK_No
block|,
name|Qt
operator|::
name|Key_No
block|,
name|QTOPIAXK_Cancel
block|,
name|Qt
operator|::
name|Key_Cancel
block|,
name|QTOPIAXK_Printer
block|,
name|Qt
operator|::
name|Key_Printer
block|,
name|QTOPIAXK_Execute
block|,
name|Qt
operator|::
name|Key_Execute
block|,
name|QTOPIAXK_Sleep
block|,
name|Qt
operator|::
name|Key_Sleep
block|,
name|QTOPIAXK_Play
block|,
name|Qt
operator|::
name|Key_Play
block|,
name|QTOPIAXK_Zoom
block|,
name|Qt
operator|::
name|Key_Zoom
block|,
name|QTOPIAXK_Context1
block|,
name|Qt
operator|::
name|Key_Context1
block|,
name|QTOPIAXK_Context2
block|,
name|Qt
operator|::
name|Key_Context2
block|,
name|QTOPIAXK_Context3
block|,
name|Qt
operator|::
name|Key_Context3
block|,
name|QTOPIAXK_Context4
block|,
name|Qt
operator|::
name|Key_Context4
block|,
name|QTOPIAXK_Call
block|,
name|Qt
operator|::
name|Key_Call
block|,
name|QTOPIAXK_Hangup
block|,
name|Qt
operator|::
name|Key_Hangup
block|,
name|QTOPIAXK_Flip
block|,
name|Qt
operator|::
name|Key_Flip
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|katakanaKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|katakanaKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x3002
block|,
literal|0x300C
block|,
literal|0x300D
block|,
literal|0x3001
block|,
literal|0x30FB
block|,
literal|0x30F2
block|,
literal|0x30A1
block|,
literal|0x30A3
block|,
literal|0x30A5
block|,
literal|0x30A7
block|,
literal|0x30A9
block|,
literal|0x30E3
block|,
literal|0x30E5
block|,
literal|0x30E7
block|,
literal|0x30C3
block|,
literal|0x30FC
block|,
literal|0x30A2
block|,
literal|0x30A4
block|,
literal|0x30A6
block|,
literal|0x30A8
block|,
literal|0x30AA
block|,
literal|0x30AB
block|,
literal|0x30AD
block|,
literal|0x30AF
block|,
literal|0x30B1
block|,
literal|0x30B3
block|,
literal|0x30B5
block|,
literal|0x30B7
block|,
literal|0x30B9
block|,
literal|0x30BB
block|,
literal|0x30BD
block|,
literal|0x30BF
block|,
literal|0x30C1
block|,
literal|0x30C4
block|,
literal|0x30C6
block|,
literal|0x30C8
block|,
literal|0x30CA
block|,
literal|0x30CB
block|,
literal|0x30CC
block|,
literal|0x30CD
block|,
literal|0x30CE
block|,
literal|0x30CF
block|,
literal|0x30D2
block|,
literal|0x30D5
block|,
literal|0x30D8
block|,
literal|0x30DB
block|,
literal|0x30DE
block|,
literal|0x30DF
block|,
literal|0x30E0
block|,
literal|0x30E1
block|,
literal|0x30E2
block|,
literal|0x30E4
block|,
literal|0x30E6
block|,
literal|0x30E8
block|,
literal|0x30E9
block|,
literal|0x30EA
block|,
literal|0x30EB
block|,
literal|0x30EC
block|,
literal|0x30ED
block|,
literal|0x30EF
block|,
literal|0x30F3
block|,
literal|0x309B
block|,
literal|0x309C
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cyrillicKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|cyrillicKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x0452
block|,
literal|0x0453
block|,
literal|0x0451
block|,
literal|0x0454
block|,
literal|0x0455
block|,
literal|0x0456
block|,
literal|0x0457
block|,
literal|0x0458
block|,
literal|0x0459
block|,
literal|0x045a
block|,
literal|0x045b
block|,
literal|0x045c
block|,
literal|0x0000
block|,
literal|0x045e
block|,
literal|0x045f
block|,
literal|0x2116
block|,
literal|0x0402
block|,
literal|0x0403
block|,
literal|0x0401
block|,
literal|0x0404
block|,
literal|0x0405
block|,
literal|0x0406
block|,
literal|0x0407
block|,
literal|0x0408
block|,
literal|0x0409
block|,
literal|0x040a
block|,
literal|0x040b
block|,
literal|0x040c
block|,
literal|0x0000
block|,
literal|0x040e
block|,
literal|0x040f
block|,
literal|0x044e
block|,
literal|0x0430
block|,
literal|0x0431
block|,
literal|0x0446
block|,
literal|0x0434
block|,
literal|0x0435
block|,
literal|0x0444
block|,
literal|0x0433
block|,
literal|0x0445
block|,
literal|0x0438
block|,
literal|0x0439
block|,
literal|0x043a
block|,
literal|0x043b
block|,
literal|0x043c
block|,
literal|0x043d
block|,
literal|0x043e
block|,
literal|0x043f
block|,
literal|0x044f
block|,
literal|0x0440
block|,
literal|0x0441
block|,
literal|0x0442
block|,
literal|0x0443
block|,
literal|0x0436
block|,
literal|0x0432
block|,
literal|0x044c
block|,
literal|0x044b
block|,
literal|0x0437
block|,
literal|0x0448
block|,
literal|0x044d
block|,
literal|0x0449
block|,
literal|0x0447
block|,
literal|0x044a
block|,
literal|0x042e
block|,
literal|0x0410
block|,
literal|0x0411
block|,
literal|0x0426
block|,
literal|0x0414
block|,
literal|0x0415
block|,
literal|0x0424
block|,
literal|0x0413
block|,
literal|0x0425
block|,
literal|0x0418
block|,
literal|0x0419
block|,
literal|0x041a
block|,
literal|0x041b
block|,
literal|0x041c
block|,
literal|0x041d
block|,
literal|0x041e
block|,
literal|0x041f
block|,
literal|0x042f
block|,
literal|0x0420
block|,
literal|0x0421
block|,
literal|0x0422
block|,
literal|0x0423
block|,
literal|0x0416
block|,
literal|0x0412
block|,
literal|0x042c
block|,
literal|0x042b
block|,
literal|0x0417
block|,
literal|0x0428
block|,
literal|0x042d
block|,
literal|0x0429
block|,
literal|0x0427
block|,
literal|0x042a
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|greekKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|greekKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x0386
block|,
literal|0x0388
block|,
literal|0x0389
block|,
literal|0x038a
block|,
literal|0x03aa
block|,
literal|0x0000
block|,
literal|0x038c
block|,
literal|0x038e
block|,
literal|0x03ab
block|,
literal|0x0000
block|,
literal|0x038f
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0385
block|,
literal|0x2015
block|,
literal|0x0000
block|,
literal|0x03ac
block|,
literal|0x03ad
block|,
literal|0x03ae
block|,
literal|0x03af
block|,
literal|0x03ca
block|,
literal|0x0390
block|,
literal|0x03cc
block|,
literal|0x03cd
block|,
literal|0x03cb
block|,
literal|0x03b0
block|,
literal|0x03ce
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0391
block|,
literal|0x0392
block|,
literal|0x0393
block|,
literal|0x0394
block|,
literal|0x0395
block|,
literal|0x0396
block|,
literal|0x0397
block|,
literal|0x0398
block|,
literal|0x0399
block|,
literal|0x039a
block|,
literal|0x039b
block|,
literal|0x039c
block|,
literal|0x039d
block|,
literal|0x039e
block|,
literal|0x039f
block|,
literal|0x03a0
block|,
literal|0x03a1
block|,
literal|0x03a3
block|,
literal|0x0000
block|,
literal|0x03a4
block|,
literal|0x03a5
block|,
literal|0x03a6
block|,
literal|0x03a7
block|,
literal|0x03a8
block|,
literal|0x03a9
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x03b1
block|,
literal|0x03b2
block|,
literal|0x03b3
block|,
literal|0x03b4
block|,
literal|0x03b5
block|,
literal|0x03b6
block|,
literal|0x03b7
block|,
literal|0x03b8
block|,
literal|0x03b9
block|,
literal|0x03ba
block|,
literal|0x03bb
block|,
literal|0x03bc
block|,
literal|0x03bd
block|,
literal|0x03be
block|,
literal|0x03bf
block|,
literal|0x03c0
block|,
literal|0x03c1
block|,
literal|0x03c3
block|,
literal|0x03c2
block|,
literal|0x03c4
block|,
literal|0x03c5
block|,
literal|0x03c6
block|,
literal|0x03c7
block|,
literal|0x03c8
block|,
literal|0x03c9
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|technicalKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|technicalKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x23B7
block|,
literal|0x250C
block|,
literal|0x2500
block|,
literal|0x2320
block|,
literal|0x2321
block|,
literal|0x2502
block|,
literal|0x23A1
block|,
literal|0x23A3
block|,
literal|0x23A4
block|,
literal|0x23A6
block|,
literal|0x239B
block|,
literal|0x239D
block|,
literal|0x239E
block|,
literal|0x23A0
block|,
literal|0x23A8
block|,
literal|0x23AC
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2264
block|,
literal|0x2260
block|,
literal|0x2265
block|,
literal|0x222B
block|,
literal|0x2234
block|,
literal|0x221D
block|,
literal|0x221E
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2207
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x223C
block|,
literal|0x2243
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x21D4
block|,
literal|0x21D2
block|,
literal|0x2261
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x221A
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2282
block|,
literal|0x2283
block|,
literal|0x2229
block|,
literal|0x222A
block|,
literal|0x2227
block|,
literal|0x2228
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2202
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0192
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2190
block|,
literal|0x2191
block|,
literal|0x2192
block|,
literal|0x2193
block|,
literal|0x0000
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|specialKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|specialKeysymsToUnicode
index|[]
init|=
block|{
literal|0x25C6
block|,
literal|0x2592
block|,
literal|0x2409
block|,
literal|0x240C
block|,
literal|0x240D
block|,
literal|0x240A
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2424
block|,
literal|0x240B
block|,
literal|0x2518
block|,
literal|0x2510
block|,
literal|0x250C
block|,
literal|0x2514
block|,
literal|0x253C
block|,
literal|0x23BA
block|,
literal|0x23BB
block|,
literal|0x2500
block|,
literal|0x23BC
block|,
literal|0x23BD
block|,
literal|0x251C
block|,
literal|0x2524
block|,
literal|0x2534
block|,
literal|0x252C
block|,
literal|0x2502
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|publishingKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|publishingKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x2003
block|,
literal|0x2002
block|,
literal|0x2004
block|,
literal|0x2005
block|,
literal|0x2007
block|,
literal|0x2008
block|,
literal|0x2009
block|,
literal|0x200a
block|,
literal|0x2014
block|,
literal|0x2013
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2026
block|,
literal|0x2025
block|,
literal|0x2153
block|,
literal|0x2154
block|,
literal|0x2155
block|,
literal|0x2156
block|,
literal|0x2157
block|,
literal|0x2158
block|,
literal|0x2159
block|,
literal|0x215a
block|,
literal|0x2105
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2012
block|,
literal|0x2329
block|,
literal|0x0000
block|,
literal|0x232a
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x215b
block|,
literal|0x215c
block|,
literal|0x215d
block|,
literal|0x215e
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2122
block|,
literal|0x2613
block|,
literal|0x0000
block|,
literal|0x25c1
block|,
literal|0x25b7
block|,
literal|0x25cb
block|,
literal|0x25af
block|,
literal|0x2018
block|,
literal|0x2019
block|,
literal|0x201c
block|,
literal|0x201d
block|,
literal|0x211e
block|,
literal|0x0000
block|,
literal|0x2032
block|,
literal|0x2033
block|,
literal|0x0000
block|,
literal|0x271d
block|,
literal|0x0000
block|,
literal|0x25ac
block|,
literal|0x25c0
block|,
literal|0x25b6
block|,
literal|0x25cf
block|,
literal|0x25ae
block|,
literal|0x25e6
block|,
literal|0x25ab
block|,
literal|0x25ad
block|,
literal|0x25b3
block|,
literal|0x25bd
block|,
literal|0x2606
block|,
literal|0x2022
block|,
literal|0x25aa
block|,
literal|0x25b2
block|,
literal|0x25bc
block|,
literal|0x261c
block|,
literal|0x261e
block|,
literal|0x2663
block|,
literal|0x2666
block|,
literal|0x2665
block|,
literal|0x0000
block|,
literal|0x2720
block|,
literal|0x2020
block|,
literal|0x2021
block|,
literal|0x2713
block|,
literal|0x2717
block|,
literal|0x266f
block|,
literal|0x266d
block|,
literal|0x2642
block|,
literal|0x2640
block|,
literal|0x260e
block|,
literal|0x2315
block|,
literal|0x2117
block|,
literal|0x2038
block|,
literal|0x201a
block|,
literal|0x201e
block|,
literal|0x0000
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|aplKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|aplKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x003c
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x003e
block|,
literal|0x0000
block|,
literal|0x2228
block|,
literal|0x2227
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x00af
block|,
literal|0x0000
block|,
literal|0x22a5
block|,
literal|0x2229
block|,
literal|0x230a
block|,
literal|0x0000
block|,
literal|0x005f
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2218
block|,
literal|0x0000
block|,
literal|0x2395
block|,
literal|0x0000
block|,
literal|0x22a4
block|,
literal|0x25cb
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x2308
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x222a
block|,
literal|0x0000
block|,
literal|0x2283
block|,
literal|0x0000
block|,
literal|0x2282
block|,
literal|0x0000
block|,
literal|0x22a2
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x22a3
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|koreanKeysymsToUnicode
specifier|static
specifier|const
name|unsigned
name|short
name|koreanKeysymsToUnicode
index|[]
init|=
block|{
literal|0x0000
block|,
literal|0x3131
block|,
literal|0x3132
block|,
literal|0x3133
block|,
literal|0x3134
block|,
literal|0x3135
block|,
literal|0x3136
block|,
literal|0x3137
block|,
literal|0x3138
block|,
literal|0x3139
block|,
literal|0x313a
block|,
literal|0x313b
block|,
literal|0x313c
block|,
literal|0x313d
block|,
literal|0x313e
block|,
literal|0x313f
block|,
literal|0x3140
block|,
literal|0x3141
block|,
literal|0x3142
block|,
literal|0x3143
block|,
literal|0x3144
block|,
literal|0x3145
block|,
literal|0x3146
block|,
literal|0x3147
block|,
literal|0x3148
block|,
literal|0x3149
block|,
literal|0x314a
block|,
literal|0x314b
block|,
literal|0x314c
block|,
literal|0x314d
block|,
literal|0x314e
block|,
literal|0x314f
block|,
literal|0x3150
block|,
literal|0x3151
block|,
literal|0x3152
block|,
literal|0x3153
block|,
literal|0x3154
block|,
literal|0x3155
block|,
literal|0x3156
block|,
literal|0x3157
block|,
literal|0x3158
block|,
literal|0x3159
block|,
literal|0x315a
block|,
literal|0x315b
block|,
literal|0x315c
block|,
literal|0x315d
block|,
literal|0x315e
block|,
literal|0x315f
block|,
literal|0x3160
block|,
literal|0x3161
block|,
literal|0x3162
block|,
literal|0x3163
block|,
literal|0x11a8
block|,
literal|0x11a9
block|,
literal|0x11aa
block|,
literal|0x11ab
block|,
literal|0x11ac
block|,
literal|0x11ad
block|,
literal|0x11ae
block|,
literal|0x11af
block|,
literal|0x11b0
block|,
literal|0x11b1
block|,
literal|0x11b2
block|,
literal|0x11b3
block|,
literal|0x11b4
block|,
literal|0x11b5
block|,
literal|0x11b6
block|,
literal|0x11b7
block|,
literal|0x11b8
block|,
literal|0x11b9
block|,
literal|0x11ba
block|,
literal|0x11bb
block|,
literal|0x11bc
block|,
literal|0x11bd
block|,
literal|0x11be
block|,
literal|0x11bf
block|,
literal|0x11c0
block|,
literal|0x11c1
block|,
literal|0x11c2
block|,
literal|0x316d
block|,
literal|0x3171
block|,
literal|0x3178
block|,
literal|0x317f
block|,
literal|0x3181
block|,
literal|0x3184
block|,
literal|0x3186
block|,
literal|0x318d
block|,
literal|0x318e
block|,
literal|0x11eb
block|,
literal|0x11f0
block|,
literal|0x11f9
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x0000
block|,
literal|0x20a9
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|keysymToUnicode
specifier|static
name|QChar
name|keysymToUnicode
parameter_list|(
name|unsigned
name|char
name|byte3
parameter_list|,
name|unsigned
name|char
name|byte4
parameter_list|)
block|{
switch|switch
condition|(
name|byte3
condition|)
block|{
case|case
literal|0x04
case|:
comment|// katakana
if|if
condition|(
name|byte4
operator|>
literal|0xa0
operator|&&
name|byte4
operator|<
literal|0xe0
condition|)
return|return
name|QChar
argument_list|(
name|katakanaKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
elseif|else
if|if
condition|(
name|byte4
operator|==
literal|0x7e
condition|)
return|return
name|QChar
argument_list|(
literal|0x203e
argument_list|)
return|;
comment|// Overline
break|break;
case|case
literal|0x06
case|:
comment|// russian, use lookup table
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|cyrillicKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x07
case|:
comment|// greek
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|greekKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x08
case|:
comment|// technical
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|technicalKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x09
case|:
comment|// special
if|if
condition|(
name|byte4
operator|>=
literal|0xe0
condition|)
return|return
name|QChar
argument_list|(
name|specialKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xe0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x0a
case|:
comment|// publishing
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|publishingKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x0b
case|:
comment|// APL
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|aplKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
case|case
literal|0x0e
case|:
comment|// Korean
if|if
condition|(
name|byte4
operator|>
literal|0xa0
condition|)
return|return
name|QChar
argument_list|(
name|koreanKeysymsToUnicode
index|[
name|byte4
operator|-
literal|0xa0
index|]
argument_list|)
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|QChar
argument_list|(
literal|0x0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|translateModifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QXlibKeyboard
operator|::
name|translateModifiers
parameter_list|(
name|int
name|s
parameter_list|)
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s
operator|&
name|ShiftMask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|ControlMask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|m_alt_mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|m_meta_mask
condition|)
name|ret
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
comment|//    if (s& m_mode_switch_mask) //doesn't seem to work correctly
comment|//        ret |= Qt::GroupSwitchModifier;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|setMask
name|void
name|QXlibKeyboard
operator|::
name|setMask
parameter_list|(
name|KeySym
name|sym
parameter_list|,
name|uint
name|mask
parameter_list|)
block|{
if|if
condition|(
name|m_alt_mask
operator|==
literal|0
operator|&&
name|m_meta_mask
operator|!=
name|mask
operator|&&
name|m_super_mask
operator|!=
name|mask
operator|&&
name|m_hyper_mask
operator|!=
name|mask
operator|&&
operator|(
name|sym
operator|==
name|XK_Alt_L
operator|||
name|sym
operator|==
name|XK_Alt_R
operator|)
condition|)
block|{
name|m_alt_mask
operator|=
name|mask
expr_stmt|;
block|}
if|if
condition|(
name|m_meta_mask
operator|==
literal|0
operator|&&
name|m_alt_mask
operator|!=
name|mask
operator|&&
name|m_super_mask
operator|!=
name|mask
operator|&&
name|m_hyper_mask
operator|!=
name|mask
operator|&&
operator|(
name|sym
operator|==
name|XK_Meta_L
operator|||
name|sym
operator|==
name|XK_Meta_R
operator|)
condition|)
block|{
name|m_meta_mask
operator|=
name|mask
expr_stmt|;
block|}
if|if
condition|(
name|m_super_mask
operator|==
literal|0
operator|&&
name|m_alt_mask
operator|!=
name|mask
operator|&&
name|m_meta_mask
operator|!=
name|mask
operator|&&
name|m_hyper_mask
operator|!=
name|mask
operator|&&
operator|(
name|sym
operator|==
name|XK_Super_L
operator|||
name|sym
operator|==
name|XK_Super_R
operator|)
condition|)
block|{
name|m_super_mask
operator|=
name|mask
expr_stmt|;
block|}
if|if
condition|(
name|m_hyper_mask
operator|==
literal|0
operator|&&
name|m_alt_mask
operator|!=
name|mask
operator|&&
name|m_meta_mask
operator|!=
name|mask
operator|&&
name|m_super_mask
operator|!=
name|mask
operator|&&
operator|(
name|sym
operator|==
name|XK_Hyper_L
operator|||
name|sym
operator|==
name|XK_Hyper_R
operator|)
condition|)
block|{
name|m_hyper_mask
operator|=
name|mask
expr_stmt|;
block|}
if|if
condition|(
name|m_mode_switch_mask
operator|==
literal|0
operator|&&
name|m_alt_mask
operator|!=
name|mask
operator|&&
name|m_meta_mask
operator|!=
name|mask
operator|&&
name|m_super_mask
operator|!=
name|mask
operator|&&
name|m_hyper_mask
operator|!=
name|mask
operator|&&
name|sym
operator|==
name|XK_Mode_switch
condition|)
block|{
name|m_mode_switch_mask
operator|=
name|mask
expr_stmt|;
block|}
if|if
condition|(
name|m_num_lock_mask
operator|==
literal|0
operator|&&
name|sym
operator|==
name|XK_Num_Lock
condition|)
block|{
name|m_num_lock_mask
operator|=
name|mask
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|translateKeySym
name|int
name|QXlibKeyboard
operator|::
name|translateKeySym
parameter_list|(
name|uint
name|key
parameter_list|)
specifier|const
block|{
name|int
name|code
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// any other keys
while|while
condition|(
name|KeyTbl
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|key
operator|==
name|KeyTbl
index|[
name|i
index|]
condition|)
block|{
name|code
operator|=
operator|(
name|int
operator|)
name|KeyTbl
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
break|break;
block|}
name|i
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|m_meta_mask
condition|)
block|{
comment|// translate Super/Hyper keys to Meta if we're using them as the MetaModifier
if|if
condition|(
name|m_meta_mask
operator|==
name|m_super_mask
operator|&&
operator|(
name|code
operator|==
name|Qt
operator|::
name|Key_Super_L
operator|||
name|code
operator|==
name|Qt
operator|::
name|Key_Super_R
operator|)
condition|)
block|{
name|code
operator|=
name|Qt
operator|::
name|Key_Meta
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_meta_mask
operator|==
name|m_hyper_mask
operator|&&
operator|(
name|code
operator|==
name|Qt
operator|::
name|Key_Hyper_L
operator|||
name|code
operator|==
name|Qt
operator|::
name|Key_Hyper_R
operator|)
condition|)
block|{
name|code
operator|=
name|Qt
operator|::
name|Key_Meta
expr_stmt|;
block|}
block|}
return|return
name|code
return|;
block|}
end_function
begin_function
DECL|function|translateKeySym
name|QString
name|QXlibKeyboard
operator|::
name|translateKeySym
parameter_list|(
name|KeySym
name|keysym
parameter_list|,
name|uint
name|xmodifiers
parameter_list|,
name|int
modifier|&
name|code
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
modifier|&
name|modifiers
parameter_list|,
name|QByteArray
modifier|&
name|chars
parameter_list|,
name|int
modifier|&
name|count
parameter_list|)
block|{
comment|// all keysyms smaller than 0xff00 are actally keys that can be mapped to unicode chars
name|QTextCodec
modifier|*
name|mapper
init|=
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
decl_stmt|;
name|QChar
name|converted
decl_stmt|;
if|if
condition|(
comment|/*count == 0&&*/
name|keysym
operator|<
literal|0xff00
condition|)
block|{
name|unsigned
name|char
name|byte3
init|=
call|(
name|unsigned
name|char
call|)
argument_list|(
name|keysym
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|int
name|mib
init|=
operator|-
literal|1
decl_stmt|;
switch|switch
condition|(
name|byte3
condition|)
block|{
case|case
literal|0
case|:
comment|// Latin 1
case|case
literal|1
case|:
comment|// Latin 2
case|case
literal|2
case|:
comment|//latin 3
case|case
literal|3
case|:
comment|// latin4
name|mib
operator|=
name|byte3
operator|+
literal|4
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// arabic
name|mib
operator|=
literal|82
expr_stmt|;
break|break;
case|case
literal|12
case|:
comment|// Hebrew
name|mib
operator|=
literal|85
expr_stmt|;
break|break;
case|case
literal|13
case|:
comment|// Thai
name|mib
operator|=
literal|2259
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// kana
case|case
literal|6
case|:
comment|// cyrillic
case|case
literal|7
case|:
comment|// greek
case|case
literal|8
case|:
comment|// technical, no mapping here at the moment
case|case
literal|9
case|:
comment|// Special
case|case
literal|10
case|:
comment|// Publishing
case|case
literal|11
case|:
comment|// APL
case|case
literal|14
case|:
comment|// Korean, no mapping
name|mib
operator|=
operator|-
literal|1
expr_stmt|;
comment|// manual conversion
name|mapper
operator|=
literal|0
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_XIM
argument_list|)
name|converted
operator|=
name|keysymToUnicode
argument_list|(
name|byte3
argument_list|,
name|keysym
operator|&
literal|0xff
argument_list|)
expr_stmt|;
endif|#
directive|endif
case|case
literal|0x20
case|:
comment|// currency symbols
if|if
condition|(
name|keysym
operator|>=
literal|0x20a0
operator|&&
name|keysym
operator|<=
literal|0x20ac
condition|)
block|{
name|mib
operator|=
operator|-
literal|1
expr_stmt|;
comment|// manual conversion
name|mapper
operator|=
literal|0
expr_stmt|;
name|converted
operator|=
operator|(
name|uint
operator|)
name|keysym
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|mib
operator|!=
operator|-
literal|1
condition|)
block|{
name|mapper
operator|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
name|mib
argument_list|)
expr_stmt|;
if|if
condition|(
name|chars
operator|.
name|isEmpty
argument_list|()
condition|)
name|chars
operator|.
name|resize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|chars
index|[
literal|0
index|]
operator|=
call|(
name|unsigned
name|char
call|)
argument_list|(
name|keysym
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// get only the fourth bit for conversion later
name|count
operator|=
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|keysym
operator|>=
literal|0x1000000
operator|&&
name|keysym
operator|<=
literal|0x100ffff
condition|)
block|{
name|converted
operator|=
call|(
name|ushort
call|)
argument_list|(
name|keysym
operator|-
literal|0x1000000
argument_list|)
expr_stmt|;
name|mapper
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|<
operator|(
name|int
operator|)
name|chars
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
name|chars
index|[
name|count
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QString
name|text
decl_stmt|;
if|if
condition|(
operator|!
name|mapper
operator|&&
name|converted
operator|.
name|unicode
argument_list|()
operator|!=
literal|0x0
condition|)
block|{
name|text
operator|=
name|converted
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|chars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// convert chars (8bit) to text (unicode).
if|if
condition|(
name|mapper
condition|)
name|text
operator|=
name|mapper
operator|->
name|toUnicode
argument_list|(
name|chars
operator|.
name|data
argument_list|()
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no mapper, or codec couldn't convert to unicode (this
comment|// can happen when running in the C locale or with no LANG
comment|// set). try converting from latin-1
name|text
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|chars
argument_list|)
expr_stmt|;
block|}
block|}
name|modifiers
operator|=
name|translateModifiers
argument_list|(
name|xmodifiers
argument_list|)
expr_stmt|;
comment|// Commentary in X11/keysymdef says that X codes match ASCII, so it
comment|// is safe to use the locale functions to process X codes in ISO8859-1.
comment|//
comment|// This is mainly for compatibility - applications should not use the
comment|// Qt keycodes between 128 and 255, but should rather use the
comment|// QKeyEvent::text().
comment|//
if|if
condition|(
name|keysym
operator|<
literal|128
operator|||
operator|(
name|keysym
operator|<
literal|256
operator|&&
operator|(
operator|!
name|mapper
operator|||
name|mapper
operator|->
name|mibEnum
argument_list|()
operator|==
literal|4
operator|)
operator|)
condition|)
block|{
comment|// upper-case key, if known
name|code
operator|=
name|isprint
argument_list|(
operator|(
name|int
operator|)
name|keysym
argument_list|)
condition|?
name|toupper
argument_list|(
operator|(
name|int
operator|)
name|keysym
argument_list|)
else|:
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keysym
operator|>=
name|XK_F1
operator|&&
name|keysym
operator|<=
name|XK_F35
condition|)
block|{
comment|// function keys
name|code
operator|=
name|Qt
operator|::
name|Key_F1
operator|+
operator|(
operator|(
name|int
operator|)
name|keysym
operator|-
name|XK_F1
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keysym
operator|>=
name|XK_KP_Space
operator|&&
name|keysym
operator|<=
name|XK_KP_9
condition|)
block|{
if|if
condition|(
name|keysym
operator|>=
name|XK_KP_0
condition|)
block|{
comment|// numeric keypad keys
name|code
operator|=
name|Qt
operator|::
name|Key_0
operator|+
operator|(
operator|(
name|int
operator|)
name|keysym
operator|-
name|XK_KP_0
operator|)
expr_stmt|;
block|}
else|else
block|{
name|code
operator|=
name|translateKeySym
argument_list|(
name|keysym
argument_list|)
expr_stmt|;
block|}
name|modifiers
operator||=
name|Qt
operator|::
name|KeypadModifier
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|unicode
argument_list|()
operator|>
literal|0x1f
operator|&&
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|unicode
argument_list|()
operator|!=
literal|0x7f
operator|&&
operator|!
operator|(
name|keysym
operator|>=
name|XK_dead_grave
operator|&&
name|keysym
operator|<=
name|XK_dead_horn
operator|)
condition|)
block|{
name|code
operator|=
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// any other keys
name|code
operator|=
name|translateKeySym
argument_list|(
name|keysym
argument_list|)
expr_stmt|;
if|if
condition|(
name|code
operator|==
name|Qt
operator|::
name|Key_Tab
operator|&&
operator|(
name|modifiers
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
condition|)
block|{
comment|// map shift+tab to shift+backtab, QShortcutMap knows about it
comment|// and will handle it.
name|code
operator|=
name|Qt
operator|::
name|Key_Backtab
expr_stmt|;
name|text
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|text
return|;
block|}
end_function
begin_constructor
DECL|function|QXlibKeyboard
name|QXlibKeyboard
operator|::
name|QXlibKeyboard
parameter_list|(
name|QXlibScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|m_screen
argument_list|(
name|screen
argument_list|)
member_init_list|,
name|m_alt_mask
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_super_mask
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_hyper_mask
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_meta_mask
argument_list|(
literal|0
argument_list|)
block|{
name|changeLayout
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|changeLayout
name|void
name|QXlibKeyboard
operator|::
name|changeLayout
parameter_list|()
block|{
name|XkbDescPtr
name|xkbDesc
init|=
name|XkbGetMap
argument_list|(
name|m_screen
operator|->
name|display
argument_list|()
operator|->
name|nativeDisplay
argument_list|()
argument_list|,
name|XkbAllClientInfoMask
argument_list|,
name|XkbUseCoreKbd
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|xkbDesc
operator|->
name|min_key_code
init|;
name|i
operator|<
name|xkbDesc
operator|->
name|max_key_code
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|uint
name|mask
init|=
name|xkbDesc
operator|->
name|map
operator|->
name|modmap
condition|?
name|xkbDesc
operator|->
name|map
operator|->
name|modmap
index|[
name|i
index|]
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|mask
operator|==
literal|0
condition|)
block|{
comment|// key is not bound to a modifier
continue|continue;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|XkbKeyGroupsWidth
argument_list|(
name|xkbDesc
argument_list|,
name|i
argument_list|)
condition|;
operator|++
name|j
control|)
block|{
name|KeySym
name|keySym
init|=
name|XkbKeySym
argument_list|(
name|xkbDesc
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|keySym
operator|==
name|NoSymbol
condition|)
continue|continue;
name|setMask
argument_list|(
name|keySym
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
name|XkbFreeKeyboard
argument_list|(
name|xkbDesc
argument_list|,
name|XkbAllComponentsMask
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modifierFromKeyCode
specifier|static
name|Qt
operator|::
name|KeyboardModifiers
name|modifierFromKeyCode
parameter_list|(
name|int
name|qtcode
parameter_list|)
block|{
switch|switch
condition|(
name|qtcode
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Control
case|:
return|return
name|Qt
operator|::
name|ControlModifier
return|;
case|case
name|Qt
operator|::
name|Key_Alt
case|:
return|return
name|Qt
operator|::
name|AltModifier
return|;
case|case
name|Qt
operator|::
name|Key_Shift
case|:
return|return
name|Qt
operator|::
name|ShiftModifier
return|;
case|case
name|Qt
operator|::
name|Key_Meta
case|:
return|return
name|Qt
operator|::
name|MetaModifier
return|;
default|default:
return|return
name|Qt
operator|::
name|NoModifier
return|;
block|}
block|}
end_function
begin_function
DECL|function|handleKeyEvent
name|void
name|QXlibKeyboard
operator|::
name|handleKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|widget
parameter_list|,
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|XKeyEvent
modifier|*
name|ev
parameter_list|)
block|{
name|int
name|qtcode
init|=
literal|0
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|translateModifiers
argument_list|(
name|ev
operator|->
name|state
argument_list|)
decl_stmt|;
name|QByteArray
name|chars
decl_stmt|;
name|chars
operator|.
name|resize
argument_list|(
literal|513
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|KeySym
name|keySym
decl_stmt|;
name|count
operator|=
name|XLookupString
argument_list|(
name|ev
argument_list|,
name|chars
operator|.
name|data
argument_list|()
argument_list|,
name|chars
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|keySym
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
name|translateKeySym
argument_list|(
name|keySym
argument_list|,
name|ev
operator|->
name|state
argument_list|,
name|qtcode
argument_list|,
name|modifiers
argument_list|,
name|chars
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|widget
argument_list|,
name|ev
operator|->
name|time
argument_list|,
name|type
argument_list|,
name|qtcode
argument_list|,
name|modifiers
argument_list|,
name|ev
operator|->
name|keycode
argument_list|,
literal|0
argument_list|,
name|ev
operator|->
name|state
argument_list|,
name|text
operator|.
name|left
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
