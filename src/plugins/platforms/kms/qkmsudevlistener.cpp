begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qkmsudevlistener.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QKmsUdevListener
name|QKmsUdevListener
operator|::
name|QKmsUdevListener
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|m_udev
operator|=
name|udev_new
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QKmsUdevListener
name|QKmsUdevListener
operator|::
name|~
name|QKmsUdevListener
parameter_list|()
block|{
name|udev_unref
argument_list|(
name|m_udev
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|addHandler
name|void
name|QKmsUdevListener
operator|::
name|addHandler
parameter_list|(
name|QKmsUdevHandler
modifier|*
name|handler
parameter_list|)
block|{
name|m_handlers
operator|.
name|removeAll
argument_list|(
operator|(
name|QKmsUdevHandler
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|m_handlers
operator|.
name|removeAll
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|m_handlers
operator|.
name|prepend
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|scan
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|create
name|bool
name|QKmsUdevListener
operator|::
name|create
parameter_list|(
name|struct
name|udev_device
modifier|*
name|device
parameter_list|)
block|{
foreach|foreach
control|(
name|QKmsUdevHandler
modifier|*
name|handler
decl|,
name|m_handlers
control|)
block|{
if|if
condition|(
operator|!
name|handler
condition|)
continue|continue;
name|QObject
modifier|*
name|obj
init|=
name|handler
operator|->
name|create
argument_list|(
name|device
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
condition|)
block|{
name|m_devices
index|[
name|udev_device_get_syspath
argument_list|(
name|device
argument_list|)
index|]
operator|=
name|obj
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|scan
name|void
name|QKmsUdevListener
operator|::
name|scan
parameter_list|()
block|{
name|struct
name|udev_enumerate
modifier|*
name|e
decl_stmt|;
name|struct
name|udev_list_entry
modifier|*
name|entry
decl_stmt|;
name|e
operator|=
name|udev_enumerate_new
argument_list|(
name|m_udev
argument_list|)
expr_stmt|;
name|udev_enumerate_scan_devices
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|udev_list_entry_foreach
argument_list|(
argument|entry
argument_list|,
argument|udev_enumerate_get_list_entry(e)
argument_list|)
block|{
specifier|const
name|char
modifier|*
name|path
init|=
name|udev_list_entry_get_name
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_devices
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
continue|continue;
name|struct
name|udev_device
modifier|*
name|device
init|=
name|udev_device_new_from_syspath
argument_list|(
name|m_udev
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|create
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|udev_device_unref
argument_list|(
name|device
argument_list|)
expr_stmt|;
block|}
name|udev_enumerate_unref
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
