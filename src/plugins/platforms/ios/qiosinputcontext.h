begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QIOSINPUTCONTEXT_H
end_ifndef
begin_define
DECL|macro|QIOSINPUTCONTEXT_H
define|#
directive|define
name|QIOSINPUTCONTEXT_H
end_define
begin_include
include|#
directive|include
file|<UIKit/UIKit.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qevent.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qtransform.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatforminputcontext.h>
end_include
begin_decl_stmt
DECL|variable|kImePlatformDataInputView
specifier|const
name|char
name|kImePlatformDataInputView
index|[]
init|=
literal|"inputView"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|kImePlatformDataInputAccessoryView
specifier|const
name|char
name|kImePlatformDataInputAccessoryView
index|[]
init|=
literal|"inputAccessoryView"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|kImePlatformDataReturnKeyType
specifier|const
name|char
name|kImePlatformDataReturnKeyType
index|[]
init|=
literal|"returnKeyType"
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_BEGIN_NAMESPACE
expr|@
DECL|variable|QIOSKeyboardListener
name|class
name|QIOSKeyboardListener
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|QIOSKeyboardListener
unit|@
DECL|variable|QIOSTextInputResponder
name|class
name|QIOSTextInputResponder
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QIOSTextInputResponder
unit|@
DECL|variable|KeyboardState
name|protocol
name|KeyboardState
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|KeyboardState
struct|struct
name|KeyboardState
block|{
DECL|function|KeyboardState
name|KeyboardState
argument_list|()
operator|:
name|keyboardVisible
argument_list|(
name|false
argument_list|)
operator|,
name|keyboardAnimating
argument_list|(
name|false
argument_list|)
operator|,
name|animationDuration
argument_list|(
literal|0
argument_list|)
operator|,
name|animationCurve
argument_list|(
argument|UIViewAnimationCurve(-
literal|1
argument|)
argument_list|)
block|{}
DECL|member|keyboardVisible
name|bool
name|keyboardVisible
expr_stmt|;
DECL|member|keyboardAnimating
name|bool
name|keyboardAnimating
decl_stmt|;
DECL|member|keyboardRect
name|QRectF
name|keyboardRect
decl_stmt|;
DECL|member|keyboardEndRect
name|CGRect
name|keyboardEndRect
decl_stmt|;
DECL|member|animationDuration
name|NSTimeInterval
name|animationDuration
decl_stmt|;
DECL|member|animationCurve
name|UIViewAnimationCurve
name|animationCurve
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|ImeState
struct|struct
name|ImeState
block|{
DECL|function|ImeState
name|ImeState
argument_list|()
operator|:
name|currentState
argument_list|(
literal|0
argument_list|)
operator|,
name|focusObject
argument_list|(
literal|0
argument_list|)
block|{}
name|Qt
operator|::
name|InputMethodQueries
name|update
argument_list|(
argument|Qt::InputMethodQueries properties
argument_list|)
expr_stmt|;
DECL|member|currentState
name|QInputMethodQueryEvent
name|currentState
decl_stmt|;
DECL|member|focusObject
name|QObject
modifier|*
name|focusObject
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|class
name|QIOSInputContext
range|:
name|public
name|QPlatformInputContext
block|{
name|public
operator|:
name|QIOSInputContext
argument_list|()
block|;
operator|~
name|QIOSInputContext
argument_list|()
block|;
name|bool
name|isValid
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|true
return|;
block|}
name|void
name|showInputPanel
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|void
name|hideInputPanel
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|bool
name|isInputPanelVisible
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|bool
name|isAnimating
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QRectF
name|keyboardRect
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|update
argument_list|(
argument|Qt::InputMethodQueries
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|reset
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|void
name|commit
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|void
name|clearCurrentFocusObject
argument_list|()
block|;
name|void
name|setFocusObject
argument_list|(
argument|QObject *object
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|focusWindowChanged
argument_list|(
name|QWindow
operator|*
name|focusWindow
argument_list|)
block|;
name|void
name|scrollToCursor
argument_list|()
block|;
name|void
name|scroll
argument_list|(
argument|int y
argument_list|)
block|;
name|void
name|updateKeyboardState
argument_list|(
name|NSNotification
operator|*
name|notification
operator|=
literal|0
argument_list|)
block|;
specifier|const
name|ImeState
operator|&
name|imeState
argument_list|()
block|{
return|return
name|m_imeState
return|;
block|}
block|;
specifier|const
name|KeyboardState
operator|&
name|keyboardState
argument_list|()
block|{
return|return
name|m_keyboardState
return|;
block|}
block|;
name|bool
name|inputMethodAccepted
argument_list|()
specifier|const
block|;
specifier|static
name|QIOSInputContext
operator|*
name|instance
argument_list|()
block|;
name|private
operator|:
name|UIView
operator|*
name|scrollableRootView
argument_list|()
block|;
name|QIOSKeyboardListener
operator|*
name|m_keyboardHideGesture
block|;
name|QIOSTextInputResponder
operator|*
name|m_textResponder
block|;
name|KeyboardState
name|m_keyboardState
block|;
name|ImeState
name|m_imeState
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
