begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxcbscreen.h"
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_constructor
DECL|function|QXcbScreen
name|QXcbScreen
operator|::
name|QXcbScreen
parameter_list|(
name|QXcbConnection
modifier|*
name|connection
parameter_list|,
name|xcb_screen_t
modifier|*
name|screen
parameter_list|,
name|int
name|number
parameter_list|)
member_init_list|:
name|QXcbObject
argument_list|(
name|connection
argument_list|)
member_init_list|,
name|m_screen
argument_list|(
name|screen
argument_list|)
member_init_list|,
name|m_number
argument_list|(
name|number
argument_list|)
block|{
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"Information of screen %d:\n"
argument_list|,
name|screen
operator|->
name|root
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  width.........: %d\n"
argument_list|,
name|screen
operator|->
name|width_in_pixels
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  height........: %d\n"
argument_list|,
name|screen
operator|->
name|height_in_pixels
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  depth.........: %d\n"
argument_list|,
name|screen
operator|->
name|root_depth
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  white pixel...: %x\n"
argument_list|,
name|screen
operator|->
name|white_pixel
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  black pixel...: %x\n"
argument_list|,
name|screen
operator|->
name|black_pixel
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
specifier|const
name|quint32
name|mask
init|=
name|XCB_CW_EVENT_MASK
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
comment|// XCB_CW_EVENT_MASK
name|XCB_EVENT_MASK_ENTER_WINDOW
operator||
name|XCB_EVENT_MASK_LEAVE_WINDOW
operator||
name|XCB_EVENT_MASK_PROPERTY_CHANGE
block|}
decl_stmt|;
name|xcb_change_window_attributes
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|screen
operator|->
name|root
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|xcb_generic_error_t
modifier|*
name|error
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_get_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|screen
operator|->
name|root
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_SUPPORTING_WM_CHECK
argument_list|)
argument_list|,
name|XCB_ATOM_WINDOW
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
argument_list|,
operator|&
name|error
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|&&
name|reply
operator|->
name|format
operator|==
literal|32
operator|&&
name|reply
operator|->
name|type
operator|==
name|XCB_ATOM_WINDOW
condition|)
block|{
name|xcb_window_t
name|windowManager
init|=
operator|*
operator|(
operator|(
name|xcb_window_t
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|windowManager
operator|!=
name|XCB_WINDOW_NONE
condition|)
block|{
name|xcb_get_property_reply_t
modifier|*
name|windowManagerReply
init|=
name|xcb_get_property_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_get_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|windowManager
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_NAME
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|UTF8_STRING
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
argument_list|,
operator|&
name|error
argument_list|)
decl_stmt|;
if|if
condition|(
name|windowManagerReply
operator|&&
name|windowManagerReply
operator|->
name|format
operator|==
literal|8
operator|&&
name|windowManagerReply
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|UTF8_STRING
argument_list|)
condition|)
block|{
name|m_windowManagerName
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|windowManagerReply
argument_list|)
argument_list|,
name|xcb_get_property_value_length
argument_list|(
name|windowManagerReply
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"Running window manager: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|m_windowManagerName
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|error
condition|)
block|{
name|connection
operator|->
name|handleXcbError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
name|windowManagerReply
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|error
condition|)
block|{
name|connection
operator|->
name|handleXcbError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|m_syncRequestSupported
operator|=
name|m_windowManagerName
operator|!=
name|QLatin1String
argument_list|(
literal|"KWin"
argument_list|)
expr_stmt|;
name|m_clientLeader
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|Q_XCB_CALL2
argument_list|(
name|xcb_create_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_COPY_FROM_PARENT
argument_list|,
name|m_clientLeader
argument_list|,
name|m_screen
operator|->
name|root
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|XCB_WINDOW_CLASS_INPUT_OUTPUT
argument_list|,
name|m_screen
operator|->
name|root_visual
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|connection
argument_list|)
expr_stmt|;
name|Q_XCB_CALL2
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_clientLeader
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_CLIENT_LEADER
argument_list|)
argument_list|,
name|XCB_ATOM_WINDOW
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|m_clientLeader
argument_list|)
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QXcbScreen
name|QXcbScreen
operator|::
name|~
name|QXcbScreen
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|geometry
name|QRect
name|QXcbScreen
operator|::
name|geometry
parameter_list|()
specifier|const
block|{
return|return
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_screen
operator|->
name|width_in_pixels
argument_list|,
name|m_screen
operator|->
name|height_in_pixels
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|depth
name|int
name|QXcbScreen
operator|::
name|depth
parameter_list|()
specifier|const
block|{
return|return
name|m_screen
operator|->
name|root_depth
return|;
block|}
end_function
begin_function
DECL|function|format
name|QImage
operator|::
name|Format
name|QXcbScreen
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|QImage
operator|::
name|Format_RGB32
return|;
block|}
end_function
begin_function
DECL|function|physicalSize
name|QSize
name|QXcbScreen
operator|::
name|physicalSize
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
name|m_screen
operator|->
name|width_in_millimeters
argument_list|,
name|m_screen
operator|->
name|height_in_millimeters
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|screenNumber
name|int
name|QXcbScreen
operator|::
name|screenNumber
parameter_list|()
specifier|const
block|{
return|return
name|m_number
return|;
block|}
end_function
end_unit
