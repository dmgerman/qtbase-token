begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxcbnativeinterface.h"
end_include
begin_include
include|#
directive|include
file|"qxcbscreen.h"
end_include
begin_include
include|#
directive|include
file|"qxcbwindow.h"
end_include
begin_include
include|#
directive|include
file|"qxcbintegration.h"
end_include
begin_include
include|#
directive|include
file|"qxcbsystemtraytracker.h"
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMap>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtGui/qopenglcontext.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qscreen.h>
end_include
begin_include
include|#
directive|include
file|<QtPlatformHeaders/qxcbwindowfunctions.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_include
include|#
directive|include
file|"QtPlatformSupport/private/qdbusmenuconnection_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
end_ifdef
begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|"qxcbnativeinterfacehandler.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|// return QXcbNativeInterface::ResourceType for the key.
DECL|function|resourceType
specifier|static
name|int
name|resourceType
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|)
block|{
specifier|static
specifier|const
name|QByteArray
name|names
index|[]
init|=
block|{
comment|// match QXcbNativeInterface::ResourceType
name|QByteArrayLiteral
argument_list|(
literal|"display"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"connection"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"screen"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"apptime"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"appusertime"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"hintstyle"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"startupid"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"traywindow"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"gettimestamp"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"x11screen"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"rootwindow"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"subpixeltype"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"antialiasingEnabled"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"nofonthinting"
argument_list|)
block|}
decl_stmt|;
specifier|const
name|QByteArray
modifier|*
name|end
init|=
name|names
operator|+
sizeof|sizeof
argument_list|(
name|names
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
modifier|*
name|result
init|=
name|std
operator|::
name|find
argument_list|(
name|names
argument_list|,
name|end
argument_list|,
name|key
argument_list|)
decl_stmt|;
return|return
name|int
argument_list|(
name|result
operator|-
name|names
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QXcbNativeInterface
name|QXcbNativeInterface
operator|::
name|QXcbNativeInterface
parameter_list|()
member_init_list|:
name|m_genericEventFilterType
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"xcb_generic_event_t"
argument_list|)
argument_list|)
member_init_list|,
name|m_sysTraySelectionAtom
argument_list|(
name|XCB_ATOM_NONE
argument_list|)
member_init_list|,
name|m_systrayVisualId
argument_list|(
name|XCB_NONE
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|beep
name|void
name|QXcbNativeInterface
operator|::
name|beep
parameter_list|()
comment|// For QApplication::beep()
block|{
name|QScreen
modifier|*
name|priScreen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|priScreen
condition|)
return|return;
name|QPlatformScreen
modifier|*
name|screen
init|=
name|priScreen
operator|->
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
return|return;
name|xcb_connection_t
modifier|*
name|connection
init|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|screen
argument_list|)
operator|->
name|xcb_connection
argument_list|()
decl_stmt|;
name|xcb_bell
argument_list|(
name|connection
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|systemTrayTracker
specifier|static
specifier|inline
name|QXcbSystemTrayTracker
modifier|*
name|systemTrayTracker
parameter_list|(
specifier|const
name|QScreen
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
operator|!
name|s
condition|)
return|return
name|Q_NULLPTR
return|;
return|return
cast|static_cast
argument_list|<
specifier|const
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|s
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|connection
argument_list|()
operator|->
name|systemTrayTracker
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|systemTrayAvailable
name|bool
name|QXcbNativeInterface
operator|::
name|systemTrayAvailable
parameter_list|(
specifier|const
name|QScreen
modifier|*
name|screen
parameter_list|)
specifier|const
block|{
return|return
name|systemTrayTracker
argument_list|(
name|screen
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|requestSystemTrayWindowDock
name|bool
name|QXcbNativeInterface
operator|::
name|requestSystemTrayWindowDock
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
specifier|const
name|QPlatformWindow
modifier|*
name|platformWindow
init|=
name|window
operator|->
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|platformWindow
condition|)
return|return
literal|false
return|;
name|QXcbSystemTrayTracker
modifier|*
name|trayTracker
init|=
name|systemTrayTracker
argument_list|(
name|window
operator|->
name|screen
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|trayTracker
condition|)
return|return
literal|false
return|;
name|trayTracker
operator|->
name|requestSystemTrayWindowDock
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|platformWindow
argument_list|)
operator|->
name|xcb_window
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|systemTrayWindowGlobalGeometry
name|QRect
name|QXcbNativeInterface
operator|::
name|systemTrayWindowGlobalGeometry
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|QPlatformWindow
modifier|*
name|platformWindow
init|=
name|window
operator|->
name|handle
argument_list|()
condition|)
if|if
condition|(
specifier|const
name|QXcbSystemTrayTracker
modifier|*
name|trayTracker
init|=
name|systemTrayTracker
argument_list|(
name|window
operator|->
name|screen
argument_list|()
argument_list|)
condition|)
return|return
name|trayTracker
operator|->
name|systemTrayWindowGlobalGeometry
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|platformWindow
argument_list|)
operator|->
name|xcb_window
argument_list|()
argument_list|)
return|;
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|locateSystemTray
name|xcb_window_t
name|QXcbNativeInterface
operator|::
name|locateSystemTray
parameter_list|(
name|xcb_connection_t
modifier|*
name|conn
parameter_list|,
specifier|const
name|QXcbScreen
modifier|*
name|screen
parameter_list|)
block|{
if|if
condition|(
name|m_sysTraySelectionAtom
operator|==
name|XCB_ATOM_NONE
condition|)
block|{
specifier|const
name|QByteArray
name|net_sys_tray
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"_NET_SYSTEM_TRAY_S%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|screen
operator|->
name|screenNumber
argument_list|()
argument_list|)
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|xcb_intern_atom_cookie_t
name|intern_c
init|=
name|xcb_intern_atom_unchecked
argument_list|(
name|conn
argument_list|,
literal|true
argument_list|,
name|net_sys_tray
operator|.
name|length
argument_list|()
argument_list|,
name|net_sys_tray
argument_list|)
decl_stmt|;
name|xcb_intern_atom_reply_t
modifier|*
name|intern_r
init|=
name|xcb_intern_atom_reply
argument_list|(
name|conn
argument_list|,
name|intern_c
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|intern_r
condition|)
return|return
name|XCB_WINDOW_NONE
return|;
name|m_sysTraySelectionAtom
operator|=
name|intern_r
operator|->
name|atom
expr_stmt|;
name|free
argument_list|(
name|intern_r
argument_list|)
expr_stmt|;
block|}
name|xcb_get_selection_owner_cookie_t
name|sel_owner_c
init|=
name|xcb_get_selection_owner_unchecked
argument_list|(
name|conn
argument_list|,
name|m_sysTraySelectionAtom
argument_list|)
decl_stmt|;
name|xcb_get_selection_owner_reply_t
modifier|*
name|sel_owner_r
init|=
name|xcb_get_selection_owner_reply
argument_list|(
name|conn
argument_list|,
name|sel_owner_c
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sel_owner_r
condition|)
return|return
name|XCB_WINDOW_NONE
return|;
name|xcb_window_t
name|selection_window
init|=
name|sel_owner_r
operator|->
name|owner
decl_stmt|;
name|free
argument_list|(
name|sel_owner_r
argument_list|)
expr_stmt|;
return|return
name|selection_window
return|;
block|}
end_function
begin_function
DECL|function|systrayVisualHasAlphaChannel
name|bool
name|QXcbNativeInterface
operator|::
name|systrayVisualHasAlphaChannel
parameter_list|()
block|{
specifier|const
name|QXcbScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_systrayVisualId
operator|==
name|XCB_NONE
condition|)
block|{
name|xcb_connection_t
modifier|*
name|xcb_conn
init|=
name|screen
operator|->
name|xcb_connection
argument_list|()
decl_stmt|;
name|xcb_atom_t
name|tray_atom
init|=
name|screen
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_SYSTEM_TRAY_VISUAL
argument_list|)
decl_stmt|;
name|xcb_window_t
name|systray_window
init|=
name|locateSystemTray
argument_list|(
name|xcb_conn
argument_list|,
name|screen
argument_list|)
decl_stmt|;
if|if
condition|(
name|systray_window
operator|==
name|XCB_WINDOW_NONE
condition|)
return|return
literal|false
return|;
comment|// Get the xcb property for the _NET_SYSTEM_TRAY_VISUAL atom
name|xcb_get_property_cookie_t
name|systray_atom_cookie
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|systray_atom_reply
decl_stmt|;
name|systray_atom_cookie
operator|=
name|xcb_get_property_unchecked
argument_list|(
name|xcb_conn
argument_list|,
literal|false
argument_list|,
name|systray_window
argument_list|,
name|tray_atom
argument_list|,
name|XCB_ATOM_VISUALID
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|systray_atom_reply
operator|=
name|xcb_get_property_reply
argument_list|(
name|xcb_conn
argument_list|,
name|systray_atom_cookie
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|systray_atom_reply
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|systray_atom_reply
operator|->
name|value_len
operator|>
literal|0
operator|&&
name|xcb_get_property_value_length
argument_list|(
name|systray_atom_reply
argument_list|)
operator|>
literal|0
condition|)
block|{
name|xcb_visualid_t
modifier|*
name|vids
init|=
operator|(
name|uint32_t
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|systray_atom_reply
argument_list|)
decl_stmt|;
name|m_systrayVisualId
operator|=
name|vids
index|[
literal|0
index|]
expr_stmt|;
block|}
name|free
argument_list|(
name|systray_atom_reply
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_systrayVisualId
operator|!=
name|XCB_NONE
condition|)
block|{
name|quint8
name|depth
init|=
name|screen
operator|->
name|depthOfVisual
argument_list|(
name|m_systrayVisualId
argument_list|)
decl_stmt|;
return|return
name|depth
operator|==
literal|32
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|setParentRelativeBackPixmap
name|void
name|QXcbNativeInterface
operator|::
name|setParentRelativeBackPixmap
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|qwindow
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|QPlatformWindow
modifier|*
name|platformWindow
init|=
name|qwindow
operator|->
name|handle
argument_list|()
condition|)
block|{
specifier|const
name|QXcbWindow
modifier|*
name|qxwindow
init|=
cast|static_cast
argument_list|<
specifier|const
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|platformWindow
argument_list|)
decl_stmt|;
name|xcb_connection_t
modifier|*
name|xcb_conn
init|=
name|qxwindow
operator|->
name|xcb_connection
argument_list|()
decl_stmt|;
specifier|const
name|quint32
name|mask
init|=
name|XCB_CW_BACK_PIXMAP
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
name|XCB_BACK_PIXMAP_PARENT_RELATIVE
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_window_attributes
argument_list|(
name|xcb_conn
argument_list|,
name|qxwindow
operator|->
name|xcb_window
argument_list|()
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|nativeResourceForIntegration
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|nativeResourceForIntegration
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|)
block|{
name|QByteArray
name|lowerCaseResource
init|=
name|resourceString
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|void
modifier|*
name|result
init|=
name|handlerNativeResourceForIntegration
argument_list|(
name|lowerCaseResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
switch|switch
condition|(
name|resourceType
argument_list|(
name|lowerCaseResource
argument_list|)
condition|)
block|{
case|case
name|StartupId
case|:
name|result
operator|=
name|startupId
argument_list|()
expr_stmt|;
break|break;
case|case
name|X11Screen
case|:
name|result
operator|=
name|x11Screen
argument_list|()
expr_stmt|;
break|break;
case|case
name|RootWindow
case|:
name|result
operator|=
name|rootWindow
argument_list|()
expr_stmt|;
break|break;
case|case
name|Display
case|:
name|result
operator|=
name|display
argument_list|()
expr_stmt|;
break|break;
case|case
name|Connection
case|:
name|result
operator|=
name|connection
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceForContext
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|nativeResourceForContext
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|,
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
block|{
name|QByteArray
name|lowerCaseResource
init|=
name|resourceString
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|void
modifier|*
name|result
init|=
name|handlerNativeResourceForContext
argument_list|(
name|lowerCaseResource
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceForScreen
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|nativeResourceForScreen
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|,
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
if|if
condition|(
operator|!
name|screen
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"nativeResourceForScreen: null screen"
expr_stmt|;
return|return
name|Q_NULLPTR
return|;
block|}
name|QByteArray
name|lowerCaseResource
init|=
name|resourceString
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|void
modifier|*
name|result
init|=
name|handlerNativeResourceForScreen
argument_list|(
name|lowerCaseResource
argument_list|,
name|screen
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
specifier|const
name|QXcbScreen
modifier|*
name|xcbScreen
init|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|screen
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|resourceType
argument_list|(
name|lowerCaseResource
argument_list|)
condition|)
block|{
case|case
name|Display
case|:
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
name|result
operator|=
name|xcbScreen
operator|->
name|connection
argument_list|()
operator|->
name|xlib_display
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|AppTime
case|:
name|result
operator|=
name|appTime
argument_list|(
name|xcbScreen
argument_list|)
expr_stmt|;
break|break;
case|case
name|AppUserTime
case|:
name|result
operator|=
name|appUserTime
argument_list|(
name|xcbScreen
argument_list|)
expr_stmt|;
break|break;
case|case
name|ScreenHintStyle
case|:
name|result
operator|=
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|xcbScreen
operator|->
name|hintStyle
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|ScreenSubpixelType
case|:
name|result
operator|=
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|xcbScreen
operator|->
name|subpixelType
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|ScreenAntialiasingEnabled
case|:
name|result
operator|=
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|xcbScreen
operator|->
name|antialiasingEnabled
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|TrayWindow
case|:
if|if
condition|(
name|QXcbSystemTrayTracker
modifier|*
name|s
init|=
name|systemTrayTracker
argument_list|(
name|screen
argument_list|)
condition|)
name|result
operator|=
operator|(
name|void
operator|*
operator|)
name|quintptr
argument_list|(
name|s
operator|->
name|trayWindow
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GetTimestamp
case|:
name|result
operator|=
name|getTimestamp
argument_list|(
name|xcbScreen
argument_list|)
expr_stmt|;
break|break;
case|case
name|NoFontHinting
case|:
name|result
operator|=
name|xcbScreen
operator|->
name|noFontHinting
argument_list|()
condition|?
name|this
else|:
literal|0
expr_stmt|;
comment|//qboolptr...
break|break;
default|default:
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceForWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|nativeResourceForWindow
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|,
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|QByteArray
name|lowerCaseResource
init|=
name|resourceString
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|void
modifier|*
name|result
init|=
name|handlerNativeResourceForWindow
argument_list|(
name|lowerCaseResource
argument_list|,
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
switch|switch
condition|(
name|resourceType
argument_list|(
name|lowerCaseResource
argument_list|)
condition|)
block|{
case|case
name|Display
case|:
name|result
operator|=
name|displayForWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
break|break;
case|case
name|Connection
case|:
name|result
operator|=
name|connectionForWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
break|break;
case|case
name|Screen
case|:
name|result
operator|=
name|screenForWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceForBackingStore
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|nativeResourceForBackingStore
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|,
name|QBackingStore
modifier|*
name|backingStore
parameter_list|)
block|{
specifier|const
name|QByteArray
name|lowerCaseResource
init|=
name|resourceString
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|void
modifier|*
name|result
init|=
name|handlerNativeResourceForBackingStore
argument_list|(
name|lowerCaseResource
argument_list|,
name|backingStore
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceFunctionForIntegration
name|QPlatformNativeInterface
operator|::
name|NativeResourceForIntegrationFunction
name|QXcbNativeInterface
operator|::
name|nativeResourceFunctionForIntegration
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
block|{
specifier|const
name|QByteArray
name|lowerCaseResource
init|=
name|resource
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QPlatformNativeInterface
operator|::
name|NativeResourceForIntegrationFunction
name|func
init|=
name|handlerNativeResourceFunctionForIntegration
argument_list|(
name|lowerCaseResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
condition|)
return|return
name|func
return|;
if|if
condition|(
name|lowerCaseResource
operator|==
literal|"setstartupid"
condition|)
return|return
name|NativeResourceForIntegrationFunction
argument_list|(
name|setStartupId
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceFunctionForContext
name|QPlatformNativeInterface
operator|::
name|NativeResourceForContextFunction
name|QXcbNativeInterface
operator|::
name|nativeResourceFunctionForContext
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
block|{
specifier|const
name|QByteArray
name|lowerCaseResource
init|=
name|resource
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QPlatformNativeInterface
operator|::
name|NativeResourceForContextFunction
name|func
init|=
name|handlerNativeResourceFunctionForContext
argument_list|(
name|lowerCaseResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
condition|)
return|return
name|func
return|;
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceFunctionForScreen
name|QPlatformNativeInterface
operator|::
name|NativeResourceForScreenFunction
name|QXcbNativeInterface
operator|::
name|nativeResourceFunctionForScreen
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
block|{
specifier|const
name|QByteArray
name|lowerCaseResource
init|=
name|resource
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|NativeResourceForScreenFunction
name|func
init|=
name|handlerNativeResourceFunctionForScreen
argument_list|(
name|lowerCaseResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
condition|)
return|return
name|func
return|;
if|if
condition|(
name|lowerCaseResource
operator|==
literal|"setapptime"
condition|)
return|return
name|NativeResourceForScreenFunction
argument_list|(
name|setAppTime
argument_list|)
return|;
elseif|else
if|if
condition|(
name|lowerCaseResource
operator|==
literal|"setappusertime"
condition|)
return|return
name|NativeResourceForScreenFunction
argument_list|(
name|setAppUserTime
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceFunctionForWindow
name|QPlatformNativeInterface
operator|::
name|NativeResourceForWindowFunction
name|QXcbNativeInterface
operator|::
name|nativeResourceFunctionForWindow
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
block|{
specifier|const
name|QByteArray
name|lowerCaseResource
init|=
name|resource
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|NativeResourceForWindowFunction
name|func
init|=
name|handlerNativeResourceFunctionForWindow
argument_list|(
name|lowerCaseResource
argument_list|)
decl_stmt|;
return|return
name|func
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceFunctionForBackingStore
name|QPlatformNativeInterface
operator|::
name|NativeResourceForBackingStoreFunction
name|QXcbNativeInterface
operator|::
name|nativeResourceFunctionForBackingStore
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
block|{
specifier|const
name|QByteArray
name|lowerCaseResource
init|=
name|resource
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|NativeResourceForBackingStoreFunction
name|func
init|=
name|handlerNativeResourceFunctionForBackingStore
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|func
return|;
block|}
end_function
begin_function
DECL|function|platformFunction
name|QFunctionPointer
name|QXcbNativeInterface
operator|::
name|platformFunction
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|function
parameter_list|)
specifier|const
block|{
specifier|const
name|QByteArray
name|lowerCaseFunction
init|=
name|function
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QFunctionPointer
name|func
init|=
name|handlerPlatformFunction
argument_list|(
name|lowerCaseFunction
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
condition|)
return|return
name|func
return|;
comment|//case sensitive
if|if
condition|(
name|function
operator|==
name|QXcbWindowFunctions
operator|::
name|setWmWindowTypeIdentifier
argument_list|()
condition|)
block|{
return|return
name|QFunctionPointer
argument_list|(
name|QXcbWindow
operator|::
name|setWmWindowTypeStatic
argument_list|)
return|;
block|}
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|appTime
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|appTime
parameter_list|(
specifier|const
name|QXcbScreen
modifier|*
name|screen
parameter_list|)
block|{
if|if
condition|(
operator|!
name|screen
condition|)
return|return
name|Q_NULLPTR
return|;
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|quintptr
argument_list|(
name|screen
operator|->
name|connection
argument_list|()
operator|->
name|time
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|appUserTime
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|appUserTime
parameter_list|(
specifier|const
name|QXcbScreen
modifier|*
name|screen
parameter_list|)
block|{
if|if
condition|(
operator|!
name|screen
condition|)
return|return
name|Q_NULLPTR
return|;
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|quintptr
argument_list|(
name|screen
operator|->
name|connection
argument_list|()
operator|->
name|netWmUserTime
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getTimestamp
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|getTimestamp
parameter_list|(
specifier|const
name|QXcbScreen
modifier|*
name|screen
parameter_list|)
block|{
if|if
condition|(
operator|!
name|screen
condition|)
return|return
name|Q_NULLPTR
return|;
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|quintptr
argument_list|(
name|screen
operator|->
name|connection
argument_list|()
operator|->
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|startupId
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|startupId
parameter_list|()
block|{
name|QXcbIntegration
modifier|*
name|integration
init|=
name|QXcbIntegration
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QXcbConnection
modifier|*
name|defaultConnection
init|=
name|integration
operator|->
name|defaultConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultConnection
condition|)
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|defaultConnection
operator|->
name|startupId
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|x11Screen
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|x11Screen
parameter_list|()
block|{
name|QXcbIntegration
modifier|*
name|integration
init|=
name|QXcbIntegration
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QXcbConnection
modifier|*
name|defaultConnection
init|=
name|integration
operator|->
name|defaultConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultConnection
condition|)
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|defaultConnection
operator|->
name|primaryScreenNumber
argument_list|()
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|rootWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|rootWindow
parameter_list|()
block|{
name|QXcbIntegration
modifier|*
name|integration
init|=
name|QXcbIntegration
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QXcbConnection
modifier|*
name|defaultConnection
init|=
name|integration
operator|->
name|defaultConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultConnection
condition|)
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|defaultConnection
operator|->
name|rootWindow
argument_list|()
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|display
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|display
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
name|QXcbIntegration
modifier|*
name|integration
init|=
name|QXcbIntegration
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QXcbConnection
modifier|*
name|defaultConnection
init|=
name|integration
operator|->
name|defaultConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultConnection
condition|)
return|return
name|defaultConnection
operator|->
name|xlib_display
argument_list|()
return|;
endif|#
directive|endif
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|connection
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|connection
parameter_list|()
block|{
name|QXcbIntegration
modifier|*
name|integration
init|=
name|QXcbIntegration
operator|::
name|instance
argument_list|()
decl_stmt|;
return|return
name|integration
operator|->
name|defaultConnection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setAppTime
name|void
name|QXcbNativeInterface
operator|::
name|setAppTime
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|xcb_timestamp_t
name|time
parameter_list|)
block|{
if|if
condition|(
name|screen
condition|)
block|{
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|screen
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setAppUserTime
name|void
name|QXcbNativeInterface
operator|::
name|setAppUserTime
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|xcb_timestamp_t
name|time
parameter_list|)
block|{
if|if
condition|(
name|screen
condition|)
block|{
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|screen
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|connection
argument_list|()
operator|->
name|setNetWmUserTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setStartupId
name|void
name|QXcbNativeInterface
operator|::
name|setStartupId
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|)
block|{
name|QByteArray
name|startupId
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QXcbIntegration
modifier|*
name|integration
init|=
name|QXcbIntegration
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QXcbConnection
modifier|*
name|defaultConnection
init|=
name|integration
operator|->
name|defaultConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultConnection
condition|)
name|defaultConnection
operator|->
name|setStartupId
argument_list|(
name|startupId
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qPlatformScreenForWindow
name|QXcbScreen
modifier|*
name|QXcbNativeInterface
operator|::
name|qPlatformScreenForWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|QXcbScreen
modifier|*
name|screen
decl_stmt|;
if|if
condition|(
name|window
condition|)
block|{
name|QScreen
modifier|*
name|qs
init|=
name|window
operator|->
name|screen
argument_list|()
decl_stmt|;
name|screen
operator|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|qs
condition|?
name|qs
operator|->
name|handle
argument_list|()
else|:
name|Q_NULLPTR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QScreen
modifier|*
name|qs
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
decl_stmt|;
name|screen
operator|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|qs
condition|?
name|qs
operator|->
name|handle
argument_list|()
else|:
name|Q_NULLPTR
argument_list|)
expr_stmt|;
block|}
return|return
name|screen
return|;
block|}
end_function
begin_function
DECL|function|displayForWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|displayForWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_XLIB
argument_list|)
name|QXcbScreen
modifier|*
name|screen
init|=
name|qPlatformScreenForWindow
argument_list|(
name|window
argument_list|)
decl_stmt|;
return|return
name|screen
condition|?
name|screen
operator|->
name|connection
argument_list|()
operator|->
name|xlib_display
argument_list|()
else|:
name|Q_NULLPTR
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
return|return
name|Q_NULLPTR
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|connectionForWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|connectionForWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|QXcbScreen
modifier|*
name|screen
init|=
name|qPlatformScreenForWindow
argument_list|(
name|window
argument_list|)
decl_stmt|;
return|return
name|screen
condition|?
name|screen
operator|->
name|xcb_connection
argument_list|()
else|:
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|screenForWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|screenForWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|QXcbScreen
modifier|*
name|screen
init|=
name|qPlatformScreenForWindow
argument_list|(
name|window
argument_list|)
decl_stmt|;
return|return
name|screen
condition|?
name|screen
operator|->
name|screen
argument_list|()
else|:
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|addHandler
name|void
name|QXcbNativeInterface
operator|::
name|addHandler
parameter_list|(
name|QXcbNativeInterfaceHandler
modifier|*
name|handler
parameter_list|)
block|{
name|m_handlers
operator|.
name|removeAll
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|m_handlers
operator|.
name|prepend
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeHandler
name|void
name|QXcbNativeInterface
operator|::
name|removeHandler
parameter_list|(
name|QXcbNativeInterfaceHandler
modifier|*
name|handler
parameter_list|)
block|{
name|m_handlers
operator|.
name|removeAll
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handlerNativeResourceFunctionForIntegration
name|QPlatformNativeInterface
operator|::
name|NativeResourceForIntegrationFunction
name|QXcbNativeInterface
operator|::
name|handlerNativeResourceFunctionForIntegration
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_handlers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QXcbNativeInterfaceHandler
modifier|*
name|handler
init|=
name|m_handlers
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NativeResourceForIntegrationFunction
name|result
init|=
name|handler
operator|->
name|nativeResourceFunctionForIntegration
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
block|}
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|handlerNativeResourceFunctionForContext
name|QPlatformNativeInterface
operator|::
name|NativeResourceForContextFunction
name|QXcbNativeInterface
operator|::
name|handlerNativeResourceFunctionForContext
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_handlers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QXcbNativeInterfaceHandler
modifier|*
name|handler
init|=
name|m_handlers
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NativeResourceForContextFunction
name|result
init|=
name|handler
operator|->
name|nativeResourceFunctionForContext
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
block|}
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|handlerNativeResourceFunctionForScreen
name|QPlatformNativeInterface
operator|::
name|NativeResourceForScreenFunction
name|QXcbNativeInterface
operator|::
name|handlerNativeResourceFunctionForScreen
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_handlers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QXcbNativeInterfaceHandler
modifier|*
name|handler
init|=
name|m_handlers
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NativeResourceForScreenFunction
name|result
init|=
name|handler
operator|->
name|nativeResourceFunctionForScreen
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
block|}
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|handlerNativeResourceFunctionForWindow
name|QPlatformNativeInterface
operator|::
name|NativeResourceForWindowFunction
name|QXcbNativeInterface
operator|::
name|handlerNativeResourceFunctionForWindow
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_handlers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QXcbNativeInterfaceHandler
modifier|*
name|handler
init|=
name|m_handlers
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NativeResourceForWindowFunction
name|result
init|=
name|handler
operator|->
name|nativeResourceFunctionForWindow
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
block|}
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|handlerNativeResourceFunctionForBackingStore
name|QPlatformNativeInterface
operator|::
name|NativeResourceForBackingStoreFunction
name|QXcbNativeInterface
operator|::
name|handlerNativeResourceFunctionForBackingStore
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_handlers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QXcbNativeInterfaceHandler
modifier|*
name|handler
init|=
name|m_handlers
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NativeResourceForBackingStoreFunction
name|result
init|=
name|handler
operator|->
name|nativeResourceFunctionForBackingStore
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
block|}
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|handlerPlatformFunction
name|QFunctionPointer
name|QXcbNativeInterface
operator|::
name|handlerPlatformFunction
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|function
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_handlers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QXcbNativeInterfaceHandler
modifier|*
name|handler
init|=
name|m_handlers
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QFunctionPointer
name|func
init|=
name|handler
operator|->
name|platformFunction
argument_list|(
name|function
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
condition|)
return|return
name|func
return|;
block|}
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|handlerNativeResourceForIntegration
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|handlerNativeResourceForIntegration
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
specifier|const
block|{
name|NativeResourceForIntegrationFunction
name|func
init|=
name|handlerNativeResourceFunctionForIntegration
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
condition|)
return|return
name|func
argument_list|()
return|;
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|handlerNativeResourceForContext
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|handlerNativeResourceForContext
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|,
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
specifier|const
block|{
name|NativeResourceForContextFunction
name|func
init|=
name|handlerNativeResourceFunctionForContext
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
condition|)
return|return
name|func
argument_list|(
name|context
argument_list|)
return|;
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|handlerNativeResourceForScreen
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|handlerNativeResourceForScreen
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|,
name|QScreen
modifier|*
name|screen
parameter_list|)
specifier|const
block|{
name|NativeResourceForScreenFunction
name|func
init|=
name|handlerNativeResourceFunctionForScreen
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
condition|)
return|return
name|func
argument_list|(
name|screen
argument_list|)
return|;
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|handlerNativeResourceForWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|handlerNativeResourceForWindow
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|,
name|QWindow
modifier|*
name|window
parameter_list|)
specifier|const
block|{
name|NativeResourceForWindowFunction
name|func
init|=
name|handlerNativeResourceFunctionForWindow
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
condition|)
return|return
name|func
argument_list|(
name|window
argument_list|)
return|;
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|handlerNativeResourceForBackingStore
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|handlerNativeResourceForBackingStore
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|,
name|QBackingStore
modifier|*
name|backingStore
parameter_list|)
specifier|const
block|{
name|NativeResourceForBackingStoreFunction
name|func
init|=
name|handlerNativeResourceFunctionForBackingStore
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
condition|)
return|return
name|func
argument_list|(
name|backingStore
argument_list|)
return|;
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
