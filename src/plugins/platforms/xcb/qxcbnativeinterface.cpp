begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxcbnativeinterface.h"
end_include
begin_include
include|#
directive|include
file|"qxcbscreen.h"
end_include
begin_include
include|#
directive|include
file|"qxcbwindow.h"
end_include
begin_include
include|#
directive|include
file|"qxcbintegration.h"
end_include
begin_include
include|#
directive|include
file|"qxcbsystemtraytracker.h"
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMap>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtGui/qopenglcontext.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qscreen.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
end_if
begin_include
include|#
directive|include
file|"QtPlatformSupport/private/qeglplatformcontext_p.h"
end_include
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|XCB_USE_GLX
argument_list|)
end_elif
begin_include
include|#
directive|include
file|"qglxintegration.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
end_ifdef
begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|// return QXcbNativeInterface::ResourceType for the key.
DECL|function|resourceType
specifier|static
name|int
name|resourceType
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|key
parameter_list|)
block|{
specifier|static
specifier|const
name|QByteArray
name|names
index|[]
init|=
block|{
comment|// match QXcbNativeInterface::ResourceType
name|QByteArrayLiteral
argument_list|(
literal|"display"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"egldisplay"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"connection"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"screen"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"eglcontext"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"glxcontext"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"apptime"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"appusertime"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"hintstyle"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"startupid"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"traywindow"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"gettimestamp"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"x11screen"
argument_list|)
block|,
name|QByteArrayLiteral
argument_list|(
literal|"rootwindow"
argument_list|)
block|}
decl_stmt|;
specifier|const
name|QByteArray
modifier|*
name|end
init|=
name|names
operator|+
sizeof|sizeof
argument_list|(
name|names
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
modifier|*
name|result
init|=
name|std
operator|::
name|find
argument_list|(
name|names
argument_list|,
name|end
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|end
condition|)
name|result
operator|=
name|std
operator|::
name|find
argument_list|(
name|names
argument_list|,
name|end
argument_list|,
name|key
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|int
argument_list|(
name|result
operator|-
name|names
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QXcbNativeInterface
name|QXcbNativeInterface
operator|::
name|QXcbNativeInterface
parameter_list|()
member_init_list|:
name|m_genericEventFilterType
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"xcb_generic_event_t"
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|beep
name|void
name|QXcbNativeInterface
operator|::
name|beep
parameter_list|()
comment|// For QApplication::beep()
block|{
name|QPlatformScreen
modifier|*
name|screen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|handle
argument_list|()
decl_stmt|;
name|xcb_connection_t
modifier|*
name|connection
init|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|screen
argument_list|)
operator|->
name|xcb_connection
argument_list|()
decl_stmt|;
name|xcb_bell
argument_list|(
name|connection
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|systemTrayTracker
specifier|static
specifier|inline
name|QXcbSystemTrayTracker
modifier|*
name|systemTrayTracker
parameter_list|(
specifier|const
name|QScreen
modifier|*
name|s
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
specifier|const
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|s
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|connection
argument_list|()
operator|->
name|systemTrayTracker
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|systemTrayAvailable
name|bool
name|QXcbNativeInterface
operator|::
name|systemTrayAvailable
parameter_list|(
specifier|const
name|QScreen
modifier|*
name|screen
parameter_list|)
specifier|const
block|{
return|return
name|systemTrayTracker
argument_list|(
name|screen
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|requestSystemTrayWindowDock
name|bool
name|QXcbNativeInterface
operator|::
name|requestSystemTrayWindowDock
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
specifier|const
name|QPlatformWindow
modifier|*
name|platformWindow
init|=
name|window
operator|->
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|platformWindow
condition|)
return|return
literal|false
return|;
name|QXcbSystemTrayTracker
modifier|*
name|trayTracker
init|=
name|systemTrayTracker
argument_list|(
name|window
operator|->
name|screen
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|trayTracker
condition|)
return|return
literal|false
return|;
name|trayTracker
operator|->
name|requestSystemTrayWindowDock
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|platformWindow
argument_list|)
operator|->
name|xcb_window
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|systemTrayWindowGlobalGeometry
name|QRect
name|QXcbNativeInterface
operator|::
name|systemTrayWindowGlobalGeometry
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|QPlatformWindow
modifier|*
name|platformWindow
init|=
name|window
operator|->
name|handle
argument_list|()
condition|)
if|if
condition|(
specifier|const
name|QXcbSystemTrayTracker
modifier|*
name|trayTracker
init|=
name|systemTrayTracker
argument_list|(
name|window
operator|->
name|screen
argument_list|()
argument_list|)
condition|)
return|return
name|trayTracker
operator|->
name|systemTrayWindowGlobalGeometry
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|platformWindow
argument_list|)
operator|->
name|xcb_window
argument_list|()
argument_list|)
return|;
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceForIntegration
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|nativeResourceForIntegration
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|)
block|{
name|void
modifier|*
name|result
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|resourceType
argument_list|(
name|resourceString
argument_list|)
condition|)
block|{
case|case
name|StartupId
case|:
name|result
operator|=
name|startupId
argument_list|()
expr_stmt|;
break|break;
case|case
name|X11Screen
case|:
name|result
operator|=
name|x11Screen
argument_list|()
expr_stmt|;
break|break;
case|case
name|RootWindow
case|:
name|result
operator|=
name|rootWindow
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceForContext
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|nativeResourceForContext
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|,
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
block|{
name|void
modifier|*
name|result
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|resourceType
argument_list|(
name|resourceString
argument_list|)
condition|)
block|{
case|case
name|EglContext
case|:
name|result
operator|=
name|eglContextForContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
break|break;
case|case
name|GLXContext
case|:
name|result
operator|=
name|glxContextForContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceForScreen
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|nativeResourceForScreen
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|,
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
name|void
modifier|*
name|result
init|=
literal|0
decl_stmt|;
specifier|const
name|QXcbScreen
modifier|*
name|xcbScreen
init|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|screen
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|resourceType
argument_list|(
name|resource
argument_list|)
condition|)
block|{
case|case
name|Display
case|:
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
name|result
operator|=
name|xcbScreen
operator|->
name|connection
argument_list|()
operator|->
name|xlib_display
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|AppTime
case|:
name|result
operator|=
name|appTime
argument_list|(
name|xcbScreen
argument_list|)
expr_stmt|;
break|break;
case|case
name|AppUserTime
case|:
name|result
operator|=
name|appUserTime
argument_list|(
name|xcbScreen
argument_list|)
expr_stmt|;
break|break;
case|case
name|ScreenHintStyle
case|:
name|result
operator|=
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|xcbScreen
operator|->
name|hintStyle
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|TrayWindow
case|:
if|if
condition|(
name|QXcbSystemTrayTracker
modifier|*
name|s
init|=
name|systemTrayTracker
argument_list|(
name|screen
argument_list|)
condition|)
name|result
operator|=
operator|(
name|void
operator|*
operator|)
name|quintptr
argument_list|(
name|s
operator|->
name|trayWindow
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GetTimestamp
case|:
name|result
operator|=
name|getTimestamp
argument_list|(
name|xcbScreen
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceForWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|nativeResourceForWindow
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resourceString
parameter_list|,
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|void
modifier|*
name|result
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|resourceType
argument_list|(
name|resourceString
argument_list|)
condition|)
block|{
case|case
name|Display
case|:
name|result
operator|=
name|displayForWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
break|break;
case|case
name|EglDisplay
case|:
name|result
operator|=
name|eglDisplayForWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
break|break;
case|case
name|Connection
case|:
name|result
operator|=
name|connectionForWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
break|break;
case|case
name|Screen
case|:
name|result
operator|=
name|screenForWindow
argument_list|(
name|window
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceFunctionForIntegration
name|QPlatformNativeInterface
operator|::
name|NativeResourceForIntegrationFunction
name|QXcbNativeInterface
operator|::
name|nativeResourceFunctionForIntegration
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
block|{
name|QByteArray
name|lowerCaseResource
init|=
name|resource
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|lowerCaseResource
operator|==
literal|"setstartupid"
condition|)
return|return
name|NativeResourceForIntegrationFunction
argument_list|(
name|setStartupId
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|nativeResourceFunctionForScreen
name|QPlatformNativeInterface
operator|::
name|NativeResourceForScreenFunction
name|QXcbNativeInterface
operator|::
name|nativeResourceFunctionForScreen
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
block|{
specifier|const
name|QByteArray
name|lowerCaseResource
init|=
name|resource
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|lowerCaseResource
operator|==
literal|"setapptime"
condition|)
return|return
name|NativeResourceForScreenFunction
argument_list|(
name|setAppTime
argument_list|)
return|;
elseif|else
if|if
condition|(
name|lowerCaseResource
operator|==
literal|"setappusertime"
condition|)
return|return
name|NativeResourceForScreenFunction
argument_list|(
name|setAppUserTime
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|appTime
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|appTime
parameter_list|(
specifier|const
name|QXcbScreen
modifier|*
name|screen
parameter_list|)
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|quintptr
argument_list|(
name|screen
operator|->
name|connection
argument_list|()
operator|->
name|time
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|appUserTime
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|appUserTime
parameter_list|(
specifier|const
name|QXcbScreen
modifier|*
name|screen
parameter_list|)
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|quintptr
argument_list|(
name|screen
operator|->
name|connection
argument_list|()
operator|->
name|netWmUserTime
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getTimestamp
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|getTimestamp
parameter_list|(
specifier|const
name|QXcbScreen
modifier|*
name|screen
parameter_list|)
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|quintptr
argument_list|(
name|screen
operator|->
name|connection
argument_list|()
operator|->
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|startupId
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|startupId
parameter_list|()
block|{
name|QXcbIntegration
modifier|*
name|integration
init|=
cast|static_cast
argument_list|<
name|QXcbIntegration
operator|*
argument_list|>
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
argument_list|)
decl_stmt|;
name|QXcbConnection
modifier|*
name|defaultConnection
init|=
name|integration
operator|->
name|defaultConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultConnection
condition|)
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|defaultConnection
operator|->
name|startupId
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|x11Screen
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|x11Screen
parameter_list|()
block|{
name|QXcbIntegration
modifier|*
name|integration
init|=
cast|static_cast
argument_list|<
name|QXcbIntegration
operator|*
argument_list|>
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
argument_list|)
decl_stmt|;
name|QXcbConnection
modifier|*
name|defaultConnection
init|=
name|integration
operator|->
name|defaultConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultConnection
condition|)
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|defaultConnection
operator|->
name|primaryScreen
argument_list|()
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|rootWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|rootWindow
parameter_list|()
block|{
name|QXcbIntegration
modifier|*
name|integration
init|=
cast|static_cast
argument_list|<
name|QXcbIntegration
operator|*
argument_list|>
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
argument_list|)
decl_stmt|;
name|QXcbConnection
modifier|*
name|defaultConnection
init|=
name|integration
operator|->
name|defaultConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultConnection
condition|)
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|defaultConnection
operator|->
name|rootWindow
argument_list|()
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setAppTime
name|void
name|QXcbNativeInterface
operator|::
name|setAppTime
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|xcb_timestamp_t
name|time
parameter_list|)
block|{
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|screen
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setAppUserTime
name|void
name|QXcbNativeInterface
operator|::
name|setAppUserTime
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|,
name|xcb_timestamp_t
name|time
parameter_list|)
block|{
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|screen
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|connection
argument_list|()
operator|->
name|setNetWmUserTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setStartupId
name|void
name|QXcbNativeInterface
operator|::
name|setStartupId
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|)
block|{
name|QByteArray
name|startupId
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QXcbIntegration
modifier|*
name|integration
init|=
cast|static_cast
argument_list|<
name|QXcbIntegration
operator|*
argument_list|>
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
argument_list|)
decl_stmt|;
name|QXcbConnection
modifier|*
name|defaultConnection
init|=
name|integration
operator|->
name|defaultConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultConnection
condition|)
name|defaultConnection
operator|->
name|setStartupId
argument_list|(
name|startupId
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nativeResourceFunctionForContext
name|QPlatformNativeInterface
operator|::
name|NativeResourceForContextFunction
name|QXcbNativeInterface
operator|::
name|nativeResourceFunctionForContext
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
block|{
name|QByteArray
name|lowerCaseResource
init|=
name|resource
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|lowerCaseResource
operator|==
literal|"get_egl_context"
condition|)
block|{
return|return
name|eglContextForContext
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qPlatformScreenForWindow
name|QXcbScreen
modifier|*
name|QXcbNativeInterface
operator|::
name|qPlatformScreenForWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|QXcbScreen
modifier|*
name|screen
decl_stmt|;
if|if
condition|(
name|window
condition|)
block|{
name|screen
operator|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|screen
operator|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|screen
return|;
block|}
end_function
begin_function
DECL|function|displayForWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|displayForWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_XLIB
argument_list|)
name|QXcbScreen
modifier|*
name|screen
init|=
name|qPlatformScreenForWindow
argument_list|(
name|window
argument_list|)
decl_stmt|;
return|return
name|screen
operator|->
name|connection
argument_list|()
operator|->
name|xlib_display
argument_list|()
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|eglDisplayForWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|eglDisplayForWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
name|QXcbScreen
modifier|*
name|screen
init|=
name|qPlatformScreenForWindow
argument_list|(
name|window
argument_list|)
decl_stmt|;
return|return
name|screen
operator|->
name|connection
argument_list|()
operator|->
name|egl_display
argument_list|()
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|window
argument_list|)
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|connectionForWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|connectionForWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|QXcbScreen
modifier|*
name|screen
init|=
name|qPlatformScreenForWindow
argument_list|(
name|window
argument_list|)
decl_stmt|;
return|return
name|screen
operator|->
name|xcb_connection
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|screenForWindow
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|screenForWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|QXcbScreen
modifier|*
name|screen
init|=
name|qPlatformScreenForWindow
argument_list|(
name|window
argument_list|)
decl_stmt|;
return|return
name|screen
operator|->
name|screen
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|eglContextForContext
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|eglContextForContext
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
name|QEGLPlatformContext
modifier|*
name|eglPlatformContext
init|=
cast|static_cast
argument_list|<
name|QEGLPlatformContext
operator|*
argument_list|>
argument_list|(
name|context
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|eglPlatformContext
operator|->
name|eglContext
argument_list|()
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|glxContextForContext
name|void
modifier|*
name|QXcbNativeInterface
operator|::
name|glxContextForContext
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_GLX
argument_list|)
name|QGLXContext
modifier|*
name|glxPlatformContext
init|=
cast|static_cast
argument_list|<
name|QGLXContext
operator|*
argument_list|>
argument_list|(
name|context
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|glxPlatformContext
operator|->
name|glxContext
argument_list|()
return|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
