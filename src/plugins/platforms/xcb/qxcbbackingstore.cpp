begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxcbbackingstore.h"
end_include
begin_include
include|#
directive|include
file|"qxcbconnection.h"
end_include
begin_include
include|#
directive|include
file|"qxcbscreen.h"
end_include
begin_include
include|#
directive|include
file|"qxcbwindow.h"
end_include
begin_include
include|#
directive|include
file|<xcb/shm.h>
end_include
begin_include
include|#
directive|include
file|<xcb/xcb_image.h>
end_include
begin_include
include|#
directive|include
file|<sys/ipc.h>
end_include
begin_include
include|#
directive|include
file|<sys/shm.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qscreen.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qhighdpiscaling_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformgraphicsbuffer.h>
end_include
begin_include
include|#
directive|include
file|<private/qimage_p.h>
end_include
begin_include
include|#
directive|include
file|<qendian.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QXcbShmImage
class|class
name|QXcbShmImage
super|:
specifier|public
name|QXcbObject
block|{
public|public:
name|QXcbShmImage
parameter_list|(
name|QXcbScreen
modifier|*
name|connection
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|uint
name|depth
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
constructor_decl|;
DECL|function|~QXcbShmImage
name|~
name|QXcbShmImage
parameter_list|()
block|{
name|destroy
argument_list|()
expr_stmt|;
block|}
name|bool
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
function_decl|;
DECL|function|image
name|QImage
modifier|*
name|image
parameter_list|()
block|{
return|return
operator|&
name|m_qimage
return|;
block|}
DECL|function|graphicsBuffer
name|QPlatformGraphicsBuffer
modifier|*
name|graphicsBuffer
parameter_list|()
block|{
return|return
name|m_graphics_buffer
return|;
block|}
DECL|function|size
name|QSize
name|size
parameter_list|()
specifier|const
block|{
return|return
name|m_qimage
operator|.
name|size
argument_list|()
return|;
block|}
DECL|function|hasAlpha
name|bool
name|hasAlpha
parameter_list|()
specifier|const
block|{
return|return
name|m_hasAlpha
return|;
block|}
DECL|function|hasShm
name|bool
name|hasShm
parameter_list|()
specifier|const
block|{
return|return
name|m_shm_info
operator|.
name|shmaddr
operator|!=
literal|nullptr
return|;
block|}
name|void
name|put
parameter_list|(
name|xcb_drawable_t
name|dst
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
function_decl|;
name|void
name|preparePaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
private|private:
name|void
name|destroy
parameter_list|()
function_decl|;
name|void
name|ensureGC
parameter_list|(
name|xcb_drawable_t
name|dst
parameter_list|)
function_decl|;
name|void
name|flushPixmap
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
name|void
name|setClip
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
function_decl|;
DECL|member|m_shm_info
name|xcb_shm_segment_info_t
name|m_shm_info
decl_stmt|;
DECL|member|m_xcb_image
name|xcb_image_t
modifier|*
name|m_xcb_image
decl_stmt|;
DECL|member|m_qimage
name|QImage
name|m_qimage
decl_stmt|;
DECL|member|m_graphics_buffer
name|QPlatformGraphicsBuffer
modifier|*
name|m_graphics_buffer
decl_stmt|;
DECL|member|m_gc
name|xcb_gcontext_t
name|m_gc
decl_stmt|;
DECL|member|m_gc_drawable
name|xcb_drawable_t
name|m_gc_drawable
decl_stmt|;
comment|// When using shared memory this is the region currently shared with the server
DECL|member|m_dirtyShm
name|QRegion
name|m_dirtyShm
decl_stmt|;
comment|// When not using shared memory, we maintain a server-side pixmap with the backing
comment|// store as well as repainted content not yet flushed to the pixmap. We only flush
comment|// the regions we need and only when these are marked dirty. This way we can just
comment|// do a server-side copy on expose instead of sending the pixels every time
DECL|member|m_xcb_pixmap
name|xcb_pixmap_t
name|m_xcb_pixmap
decl_stmt|;
DECL|member|m_pendingFlush
name|QRegion
name|m_pendingFlush
decl_stmt|;
DECL|member|m_flushBuffer
name|QByteArray
name|m_flushBuffer
decl_stmt|;
DECL|member|m_hasAlpha
name|bool
name|m_hasAlpha
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QXcbShmGraphicsBuffer
class|class
name|QXcbShmGraphicsBuffer
super|:
specifier|public
name|QPlatformGraphicsBuffer
block|{
public|public:
DECL|function|QXcbShmGraphicsBuffer
name|QXcbShmGraphicsBuffer
parameter_list|(
name|QImage
modifier|*
name|image
parameter_list|)
member_init_list|:
name|QPlatformGraphicsBuffer
argument_list|(
name|image
operator|->
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|toPixelFormat
argument_list|(
name|image
operator|->
name|format
argument_list|()
argument_list|)
argument_list|)
member_init_list|,
name|m_access_lock
argument_list|(
name|QPlatformGraphicsBuffer
operator|::
name|None
argument_list|)
member_init_list|,
name|m_image
argument_list|(
name|image
argument_list|)
block|{ }
name|bool
name|doLock
parameter_list|(
name|AccessTypes
name|access
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|Q_UNUSED
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|access
operator|&
operator|~
operator|(
name|QPlatformGraphicsBuffer
operator|::
name|SWReadAccess
operator||
name|QPlatformGraphicsBuffer
operator|::
name|SWWriteAccess
operator|)
condition|)
return|return
literal|false
return|;
name|m_access_lock
operator||=
name|access
expr_stmt|;
return|return
literal|true
return|;
block|}
name|void
name|doUnlock
parameter_list|()
name|Q_DECL_OVERRIDE
block|{
name|m_access_lock
operator|=
name|None
expr_stmt|;
block|}
specifier|const
name|uchar
modifier|*
name|data
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|m_image
operator|->
name|bits
argument_list|()
return|;
block|}
name|uchar
modifier|*
name|data
parameter_list|()
name|Q_DECL_OVERRIDE
block|{
return|return
name|m_image
operator|->
name|bits
argument_list|()
return|;
block|}
name|int
name|bytesPerLine
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|m_image
operator|->
name|bytesPerLine
argument_list|()
return|;
block|}
name|Origin
name|origin
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|QPlatformGraphicsBuffer
operator|::
name|OriginTopLeft
return|;
block|}
private|private:
DECL|member|m_access_lock
name|AccessTypes
name|m_access_lock
decl_stmt|;
DECL|member|m_image
name|QImage
modifier|*
name|m_image
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QXcbShmImage
name|QXcbShmImage
operator|::
name|QXcbShmImage
parameter_list|(
name|QXcbScreen
modifier|*
name|screen
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|uint
name|depth
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|)
member_init_list|:
name|QXcbObject
argument_list|(
name|screen
operator|->
name|connection
argument_list|()
argument_list|)
member_init_list|,
name|m_graphics_buffer
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_gc
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_gc_drawable
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_xcb_pixmap
argument_list|(
literal|0
argument_list|)
block|{
name|Q_XCB_NOOP
argument_list|(
name|connection
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|xcb_format_t
modifier|*
name|fmt
init|=
name|connection
argument_list|()
operator|->
name|formatForDepth
argument_list|(
name|depth
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|m_xcb_image
operator|=
name|xcb_image_create
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|XCB_IMAGE_FORMAT_Z_PIXMAP
argument_list|,
name|fmt
operator|->
name|scanline_pad
argument_list|,
name|fmt
operator|->
name|depth
argument_list|,
name|fmt
operator|->
name|bits_per_pixel
argument_list|,
literal|0
argument_list|,
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
name|XCB_IMAGE_ORDER_MSB_FIRST
else|:
name|XCB_IMAGE_ORDER_LSB_FIRST
argument_list|,
name|XCB_IMAGE_ORDER_MSB_FIRST
argument_list|,
literal|0
argument_list|,
operator|~
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|int
name|segmentSize
init|=
name|m_xcb_image
operator|->
name|stride
operator|*
name|m_xcb_image
operator|->
name|height
decl_stmt|;
if|if
condition|(
operator|!
name|segmentSize
condition|)
return|return;
name|int
name|id
init|=
name|shmget
argument_list|(
name|IPC_PRIVATE
argument_list|,
name|segmentSize
argument_list|,
name|IPC_CREAT
operator||
literal|0600
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
operator|-
literal|1
condition|)
name|qWarning
argument_list|(
literal|"QXcbShmImage: shmget() failed (%d: %s) for size %d (%dx%d)"
argument_list|,
name|errno
argument_list|,
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|,
name|segmentSize
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|m_shm_info
operator|.
name|shmid
operator|=
name|id
expr_stmt|;
name|m_shm_info
operator|.
name|shmaddr
operator|=
name|m_xcb_image
operator|->
name|data
operator|=
operator|(
name|quint8
operator|*
operator|)
name|shmat
argument_list|(
name|m_shm_info
operator|.
name|shmid
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_shm_info
operator|.
name|shmseg
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|xcb_query_extension_reply_t
modifier|*
name|shm_reply
init|=
name|xcb_get_extension_data
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
operator|&
name|xcb_shm_id
argument_list|)
decl_stmt|;
name|bool
name|shm_present
init|=
name|shm_reply
operator|!=
name|NULL
operator|&&
name|shm_reply
operator|->
name|present
decl_stmt|;
name|xcb_generic_error_t
modifier|*
name|error
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|shm_present
condition|)
name|error
operator|=
name|xcb_request_check
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_shm_attach_checked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_shm_info
operator|.
name|shmseg
argument_list|,
name|m_shm_info
operator|.
name|shmid
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shm_present
operator|||
name|error
operator|||
name|id
operator|==
operator|-
literal|1
condition|)
block|{
name|free
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|shmdt
argument_list|(
name|m_shm_info
operator|.
name|shmaddr
argument_list|)
expr_stmt|;
name|shmctl
argument_list|(
name|m_shm_info
operator|.
name|shmid
argument_list|,
name|IPC_RMID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_shm_info
operator|.
name|shmaddr
operator|=
literal|0
expr_stmt|;
name|m_xcb_image
operator|->
name|data
operator|=
operator|(
name|uint8_t
operator|*
operator|)
name|malloc
argument_list|(
name|segmentSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shmctl
argument_list|(
name|m_shm_info
operator|.
name|shmid
argument_list|,
name|IPC_RMID
argument_list|,
literal|0
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|qWarning
argument_list|(
literal|"QXcbBackingStore: Error while marking the shared memory segment to be destroyed"
argument_list|)
expr_stmt|;
block|}
name|m_hasAlpha
operator|=
name|QImage
operator|::
name|toPixelFormat
argument_list|(
name|format
argument_list|)
operator|.
name|alphaUsage
argument_list|()
operator|==
name|QPixelFormat
operator|::
name|UsesAlpha
expr_stmt|;
if|if
condition|(
operator|!
name|m_hasAlpha
condition|)
name|format
operator|=
name|qt_maybeAlphaVersionWithSameDepth
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|m_qimage
operator|=
name|QImage
argument_list|(
operator|(
name|uchar
operator|*
operator|)
name|m_xcb_image
operator|->
name|data
argument_list|,
name|m_xcb_image
operator|->
name|width
argument_list|,
name|m_xcb_image
operator|->
name|height
argument_list|,
name|m_xcb_image
operator|->
name|stride
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|m_graphics_buffer
operator|=
operator|new
name|QXcbShmGraphicsBuffer
argument_list|(
operator|&
name|m_qimage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasShm
argument_list|()
condition|)
block|{
name|m_xcb_pixmap
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_create_pixmap
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_xcb_image
operator|->
name|depth
argument_list|,
name|m_xcb_pixmap
argument_list|,
name|screen
operator|->
name|screen
argument_list|()
operator|->
name|root
argument_list|,
name|m_xcb_image
operator|->
name|width
argument_list|,
name|m_xcb_image
operator|->
name|height
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function_decl
specifier|extern
name|void
name|qt_scrollRectInImage
parameter_list|(
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|scroll
name|bool
name|QXcbShmImage
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
if|if
condition|(
name|image
argument_list|()
operator|->
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|hasShm
argument_list|()
condition|)
name|preparePaint
argument_list|(
name|area
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|delta
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QRect
modifier|&
name|rect
decl|,
name|area
operator|.
name|rects
argument_list|()
control|)
name|qt_scrollRectInImage
argument_list|(
operator|*
name|image
argument_list|()
argument_list|,
name|rect
argument_list|,
name|delta
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_xcb_pixmap
condition|)
block|{
name|flushPixmap
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|ensureGC
argument_list|(
name|m_xcb_pixmap
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|bounds
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|()
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QRect
modifier|&
name|src
decl|,
name|area
operator|.
name|rects
argument_list|()
control|)
block|{
specifier|const
name|QRect
name|dst
init|=
name|src
operator|.
name|translated
argument_list|(
name|delta
argument_list|)
operator|.
name|intersected
argument_list|(
name|bounds
argument_list|)
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_copy_area
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_xcb_pixmap
argument_list|,
name|m_xcb_pixmap
argument_list|,
name|m_gc
argument_list|,
name|src
operator|.
name|x
argument_list|()
argument_list|,
name|src
operator|.
name|y
argument_list|()
argument_list|,
name|dst
operator|.
name|x
argument_list|()
argument_list|,
name|dst
operator|.
name|y
argument_list|()
argument_list|,
name|dst
operator|.
name|width
argument_list|()
argument_list|,
name|dst
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|destroy
name|void
name|QXcbShmImage
operator|::
name|destroy
parameter_list|()
block|{
specifier|const
name|int
name|segmentSize
init|=
name|m_xcb_image
condition|?
operator|(
name|m_xcb_image
operator|->
name|stride
operator|*
name|m_xcb_image
operator|->
name|height
operator|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|segmentSize
operator|&&
name|m_shm_info
operator|.
name|shmaddr
condition|)
name|Q_XCB_CALL
argument_list|(
name|xcb_shm_detach
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_shm_info
operator|.
name|shmseg
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|segmentSize
condition|)
block|{
if|if
condition|(
name|m_shm_info
operator|.
name|shmaddr
condition|)
block|{
name|shmdt
argument_list|(
name|m_shm_info
operator|.
name|shmaddr
argument_list|)
expr_stmt|;
name|shmctl
argument_list|(
name|m_shm_info
operator|.
name|shmid
argument_list|,
name|IPC_RMID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|free
argument_list|(
name|m_xcb_image
operator|->
name|data
argument_list|)
expr_stmt|;
block|}
block|}
name|xcb_image_destroy
argument_list|(
name|m_xcb_image
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_gc
condition|)
name|Q_XCB_CALL
argument_list|(
name|xcb_free_gc
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_gc
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|m_graphics_buffer
expr_stmt|;
name|m_graphics_buffer
operator|=
name|Q_NULLPTR
expr_stmt|;
if|if
condition|(
name|m_xcb_pixmap
condition|)
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_free_pixmap
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_xcb_pixmap
argument_list|)
argument_list|)
expr_stmt|;
name|m_xcb_pixmap
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ensureGC
name|void
name|QXcbShmImage
operator|::
name|ensureGC
parameter_list|(
name|xcb_drawable_t
name|dst
parameter_list|)
block|{
if|if
condition|(
name|m_gc_drawable
operator|!=
name|dst
condition|)
block|{
if|if
condition|(
name|m_gc
condition|)
name|Q_XCB_CALL
argument_list|(
name|xcb_free_gc
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_gc
argument_list|)
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|uint32_t
name|mask
init|=
name|XCB_GC_GRAPHICS_EXPOSURES
decl_stmt|;
specifier|static
specifier|const
name|uint32_t
name|values
index|[]
init|=
block|{
literal|0
block|}
decl_stmt|;
name|m_gc
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_create_gc
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_gc
argument_list|,
name|dst
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|m_gc_drawable
operator|=
name|dst
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|copy_unswapped
specifier|static
specifier|inline
name|void
name|copy_unswapped
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
name|int
name|dstBytesPerLine
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|uchar
modifier|*
name|srcData
init|=
name|img
operator|.
name|constBits
argument_list|()
decl_stmt|;
specifier|const
name|int
name|srcBytesPerLine
init|=
name|img
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
specifier|const
name|int
name|leftOffset
init|=
name|rect
operator|.
name|left
argument_list|()
operator|*
name|img
operator|.
name|depth
argument_list|()
operator|>>
literal|3
decl_stmt|;
specifier|const
name|int
name|bottom
init|=
name|rect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|yy
init|=
name|rect
operator|.
name|top
argument_list|()
init|;
name|yy
operator|<
name|bottom
condition|;
operator|++
name|yy
control|)
block|{
specifier|const
name|uchar
modifier|*
name|src
init|=
name|srcData
operator|+
name|yy
operator|*
name|srcBytesPerLine
operator|+
name|leftOffset
decl_stmt|;
operator|::
name|memmove
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|dstBytesPerLine
argument_list|)
expr_stmt|;
name|dst
operator|+=
name|dstBytesPerLine
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|Pixel
parameter_list|>
DECL|function|copy_swapped
specifier|static
specifier|inline
name|void
name|copy_swapped
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|int
name|dstStride
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
specifier|const
name|uchar
modifier|*
name|srcData
init|=
name|img
operator|.
name|constBits
argument_list|()
decl_stmt|;
specifier|const
name|int
name|srcBytesPerLine
init|=
name|img
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
specifier|const
name|int
name|left
init|=
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|bottom
init|=
name|rect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|yy
init|=
name|rect
operator|.
name|top
argument_list|()
init|;
name|yy
operator|<
name|bottom
condition|;
operator|++
name|yy
control|)
block|{
name|Pixel
modifier|*
name|dstPixels
init|=
cast|reinterpret_cast
argument_list|<
name|Pixel
operator|*
argument_list|>
argument_list|(
name|dst
argument_list|)
decl_stmt|;
specifier|const
name|Pixel
modifier|*
name|srcPixels
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|Pixel
operator|*
argument_list|>
argument_list|(
name|srcData
operator|+
name|yy
operator|*
name|srcBytesPerLine
argument_list|)
operator|+
name|left
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
operator|++
name|i
control|)
name|dstPixels
index|[
name|i
index|]
operator|=
name|qbswap
argument_list|<
name|Pixel
argument_list|>
argument_list|(
operator|*
name|srcPixels
operator|++
argument_list|)
expr_stmt|;
name|dst
operator|+=
name|dstStride
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|native_sub_image
specifier|static
name|QImage
name|native_sub_image
parameter_list|(
name|QByteArray
modifier|*
name|buffer
parameter_list|,
specifier|const
name|int
name|dstStride
parameter_list|,
specifier|const
name|QImage
modifier|&
name|src
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|bool
name|swap
parameter_list|)
block|{
if|if
condition|(
operator|!
name|swap
operator|&&
name|src
operator|.
name|rect
argument_list|()
operator|==
name|rect
operator|&&
name|src
operator|.
name|bytesPerLine
argument_list|()
operator|==
name|dstStride
condition|)
return|return
name|src
return|;
name|buffer
operator|->
name|resize
argument_list|(
name|rect
operator|.
name|height
argument_list|()
operator|*
name|dstStride
argument_list|)
expr_stmt|;
if|if
condition|(
name|swap
condition|)
block|{
switch|switch
condition|(
name|src
operator|.
name|depth
argument_list|()
condition|)
block|{
case|case
literal|32
case|:
name|copy_swapped
argument_list|<
name|quint32
argument_list|>
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
argument_list|,
name|dstStride
argument_list|,
name|src
argument_list|,
name|rect
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|copy_swapped
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
argument_list|,
name|dstStride
argument_list|,
name|src
argument_list|,
name|rect
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|copy_unswapped
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
argument_list|,
name|dstStride
argument_list|,
name|src
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
return|return
name|QImage
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
name|buffer
operator|->
name|constData
argument_list|()
argument_list|)
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|dstStride
argument_list|,
name|src
operator|.
name|format
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|round_up_scanline
specifier|static
specifier|inline
name|quint32
name|round_up_scanline
parameter_list|(
name|quint32
name|base
parameter_list|,
name|quint32
name|pad
parameter_list|)
block|{
return|return
operator|(
name|base
operator|+
name|pad
operator|-
literal|1
operator|)
operator|&
operator|-
name|pad
return|;
block|}
end_function
begin_function
DECL|function|flushPixmap
name|void
name|QXcbShmImage
operator|::
name|flushPixmap
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|m_pendingFlush
operator|.
name|intersected
argument_list|(
name|region
argument_list|)
operator|.
name|rects
argument_list|()
decl_stmt|;
name|m_pendingFlush
operator|-=
name|region
expr_stmt|;
name|xcb_image_t
name|xcb_subimage
decl_stmt|;
name|memset
argument_list|(
operator|&
name|xcb_subimage
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|xcb_image_t
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_subimage
operator|.
name|format
operator|=
name|m_xcb_image
operator|->
name|format
expr_stmt|;
name|xcb_subimage
operator|.
name|scanline_pad
operator|=
name|m_xcb_image
operator|->
name|scanline_pad
expr_stmt|;
name|xcb_subimage
operator|.
name|depth
operator|=
name|m_xcb_image
operator|->
name|depth
expr_stmt|;
name|xcb_subimage
operator|.
name|bpp
operator|=
name|m_xcb_image
operator|->
name|bpp
expr_stmt|;
name|xcb_subimage
operator|.
name|unit
operator|=
name|m_xcb_image
operator|->
name|unit
expr_stmt|;
name|xcb_subimage
operator|.
name|plane_mask
operator|=
name|m_xcb_image
operator|->
name|plane_mask
expr_stmt|;
name|xcb_subimage
operator|.
name|byte_order
operator|=
operator|(
name|xcb_image_order_t
operator|)
name|connection
argument_list|()
operator|->
name|setup
argument_list|()
operator|->
name|image_byte_order
expr_stmt|;
name|xcb_subimage
operator|.
name|bit_order
operator|=
name|m_xcb_image
operator|->
name|bit_order
expr_stmt|;
specifier|const
name|bool
name|needsByteSwap
init|=
name|xcb_subimage
operator|.
name|byte_order
operator|!=
name|m_xcb_image
operator|->
name|byte_order
decl_stmt|;
for|for
control|(
specifier|const
name|QRect
modifier|&
name|rect
range|:
name|rects
control|)
block|{
comment|// We must make sure that each request is not larger than max_req_size.
comment|// Each request takes req_size + m_xcb_image->stride * height bytes.
specifier|static
specifier|const
name|uint32_t
name|req_size
init|=
sizeof|sizeof
argument_list|(
name|xcb_put_image_request_t
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|max_req_size
init|=
name|xcb_get_maximum_request_length
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|rows_per_put
init|=
operator|(
name|max_req_size
operator|-
name|req_size
operator|)
operator|/
name|m_xcb_image
operator|->
name|stride
decl_stmt|;
comment|// This assert could trigger if a single row has more pixels than fit in
comment|// a single PutImage request. However, max_req_size is guaranteed to be
comment|// at least 16384 bytes. That should be enough for quite large images.
name|Q_ASSERT
argument_list|(
name|rows_per_put
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// If we upload the whole image in a single chunk, the result might be
comment|// larger than the server's maximum request size and stuff breaks.
comment|// To work around that, we upload the image in chunks where each chunk
comment|// is small enough for a single request.
specifier|const
name|int
name|x
init|=
name|rect
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|rect
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|rect
operator|.
name|height
argument_list|()
decl_stmt|;
while|while
condition|(
name|height
operator|>
literal|0
condition|)
block|{
specifier|const
name|int
name|rows
init|=
name|std
operator|::
name|min
argument_list|(
name|height
argument_list|,
name|rows_per_put
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|subRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|rows
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|stride
init|=
name|round_up_scanline
argument_list|(
name|width
operator|*
name|m_qimage
operator|.
name|depth
argument_list|()
argument_list|,
name|xcb_subimage
operator|.
name|scanline_pad
argument_list|)
operator|>>
literal|3
decl_stmt|;
specifier|const
name|QImage
name|subImage
init|=
name|native_sub_image
argument_list|(
operator|&
name|m_flushBuffer
argument_list|,
name|stride
argument_list|,
name|m_qimage
argument_list|,
name|subRect
argument_list|,
name|needsByteSwap
argument_list|)
decl_stmt|;
name|xcb_subimage
operator|.
name|width
operator|=
name|width
expr_stmt|;
name|xcb_subimage
operator|.
name|height
operator|=
name|rows
expr_stmt|;
name|xcb_subimage
operator|.
name|data
operator|=
cast|const_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|subImage
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
name|xcb_image_annotate
argument_list|(
operator|&
name|xcb_subimage
argument_list|)
expr_stmt|;
name|xcb_image_put
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_xcb_pixmap
argument_list|,
name|m_gc
argument_list|,
operator|&
name|xcb_subimage
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|y
operator|+=
name|rows
expr_stmt|;
name|height
operator|-=
name|rows
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setClip
name|void
name|QXcbShmImage
operator|::
name|setClip
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|static
specifier|const
name|uint32_t
name|mask
init|=
name|XCB_GC_CLIP_MASK
decl_stmt|;
specifier|static
specifier|const
name|uint32_t
name|values
index|[]
init|=
block|{
name|XCB_NONE
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_gc
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_gc
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|qrects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|xcb_rectangle_t
argument_list|>
name|xcb_rects
argument_list|(
name|qrects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qrects
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|xcb_rects
index|[
name|i
index|]
operator|.
name|x
operator|=
name|qrects
index|[
name|i
index|]
operator|.
name|x
argument_list|()
expr_stmt|;
name|xcb_rects
index|[
name|i
index|]
operator|.
name|y
operator|=
name|qrects
index|[
name|i
index|]
operator|.
name|y
argument_list|()
expr_stmt|;
name|xcb_rects
index|[
name|i
index|]
operator|.
name|width
operator|=
name|qrects
index|[
name|i
index|]
operator|.
name|width
argument_list|()
expr_stmt|;
name|xcb_rects
index|[
name|i
index|]
operator|.
name|height
operator|=
name|qrects
index|[
name|i
index|]
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|Q_XCB_CALL
argument_list|(
name|xcb_set_clip_rectangles
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_CLIP_ORDERING_YX_BANDED
argument_list|,
name|m_gc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|xcb_rects
operator|.
name|size
argument_list|()
argument_list|,
name|xcb_rects
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|put
name|void
name|QXcbShmImage
operator|::
name|put
parameter_list|(
name|xcb_drawable_t
name|dst
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|Q_XCB_NOOP
argument_list|(
name|connection
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGC
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|setClip
argument_list|(
name|region
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|bounds
init|=
name|region
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|target
init|=
name|bounds
operator|.
name|topLeft
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|source
init|=
name|bounds
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasShm
argument_list|()
condition|)
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_shm_put_image
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|dst
argument_list|,
name|m_gc
argument_list|,
name|m_xcb_image
operator|->
name|width
argument_list|,
name|m_xcb_image
operator|->
name|height
argument_list|,
name|source
operator|.
name|x
argument_list|()
argument_list|,
name|source
operator|.
name|y
argument_list|()
argument_list|,
name|source
operator|.
name|width
argument_list|()
argument_list|,
name|source
operator|.
name|height
argument_list|()
argument_list|,
name|target
operator|.
name|x
argument_list|()
argument_list|,
name|target
operator|.
name|y
argument_list|()
argument_list|,
name|m_xcb_image
operator|->
name|depth
argument_list|,
name|m_xcb_image
operator|->
name|format
argument_list|,
literal|0
argument_list|,
comment|// send event?
name|m_shm_info
operator|.
name|shmseg
argument_list|,
name|m_xcb_image
operator|->
name|data
operator|-
name|m_shm_info
operator|.
name|shmaddr
argument_list|)
argument_list|)
expr_stmt|;
name|m_dirtyShm
operator||=
name|region
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|flushPixmap
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_copy_area
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_xcb_pixmap
argument_list|,
name|dst
argument_list|,
name|m_gc
argument_list|,
name|source
operator|.
name|x
argument_list|()
argument_list|,
name|source
operator|.
name|y
argument_list|()
argument_list|,
name|target
operator|.
name|x
argument_list|()
argument_list|,
name|target
operator|.
name|y
argument_list|()
argument_list|,
name|source
operator|.
name|width
argument_list|()
argument_list|,
name|source
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setClip
argument_list|(
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
name|Q_XCB_NOOP
argument_list|(
name|connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|preparePaint
name|void
name|QXcbShmImage
operator|::
name|preparePaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
name|hasShm
argument_list|()
condition|)
block|{
comment|// to prevent X from reading from the image region while we're writing to it
if|if
condition|(
name|m_dirtyShm
operator|.
name|intersects
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
name|m_dirtyShm
operator|=
name|QRegion
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|m_pendingFlush
operator||=
name|region
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QXcbBackingStore
name|QXcbBackingStore
operator|::
name|QXcbBackingStore
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QPlatformBackingStore
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_image
argument_list|(
literal|0
argument_list|)
block|{
name|QXcbScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|setConnection
argument_list|(
name|screen
operator|->
name|connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QXcbBackingStore
name|QXcbBackingStore
operator|::
name|~
name|QXcbBackingStore
parameter_list|()
block|{
operator|delete
name|m_image
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QXcbBackingStore
operator|::
name|paintDevice
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_image
condition|)
return|return
literal|0
return|;
return|return
name|m_rgbImage
operator|.
name|isNull
argument_list|()
condition|?
name|m_image
operator|->
name|image
argument_list|()
else|:
operator|&
name|m_rgbImage
return|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QXcbBackingStore
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_image
condition|)
return|return;
name|m_paintRegion
operator|=
name|region
expr_stmt|;
name|m_image
operator|->
name|preparePaint
argument_list|(
name|m_paintRegion
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_image
operator|->
name|hasAlpha
argument_list|()
condition|)
block|{
name|QPainter
name|p
argument_list|(
name|paintDevice
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|m_paintRegion
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|blank
init|=
name|Qt
operator|::
name|transparent
decl_stmt|;
for|for
control|(
name|QVector
argument_list|<
name|QRect
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|rects
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|rects
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|p
operator|.
name|fillRect
argument_list|(
operator|*
name|it
argument_list|,
name|blank
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QXcbBackingStore
operator|::
name|endPaint
parameter_list|()
block|{
name|QXcbWindow
modifier|*
name|platformWindow
init|=
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|window
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|platformWindow
operator|||
operator|!
name|platformWindow
operator|->
name|imageNeedsRgbSwap
argument_list|()
condition|)
return|return;
comment|// Slow path: the paint device was m_rgbImage. Now copy with swapping red
comment|// and blue into m_image.
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|m_paintRegion
operator|.
name|rects
argument_list|()
decl_stmt|;
if|if
condition|(
name|rects
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QPainter
name|p
argument_list|(
name|m_image
operator|->
name|image
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|QVector
argument_list|<
name|QRect
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|rects
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|rects
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QRect
name|rect
init|=
operator|*
name|it
decl_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|m_rgbImage
operator|.
name|copy
argument_list|(
name|rect
argument_list|)
operator|.
name|rgbSwapped
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
end_ifndef
begin_function
DECL|function|toImage
name|QImage
name|QXcbBackingStore
operator|::
name|toImage
parameter_list|()
specifier|const
block|{
return|return
name|m_image
operator|&&
name|m_image
operator|->
name|image
argument_list|()
condition|?
operator|*
name|m_image
operator|->
name|image
argument_list|()
else|:
name|QImage
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|graphicsBuffer
name|QPlatformGraphicsBuffer
modifier|*
name|QXcbBackingStore
operator|::
name|graphicsBuffer
parameter_list|()
specifier|const
block|{
return|return
name|m_image
condition|?
name|m_image
operator|->
name|graphicsBuffer
argument_list|()
else|:
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QXcbBackingStore
operator|::
name|flush
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_image
operator|||
name|m_image
operator|->
name|size
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QSize
name|imageSize
init|=
name|m_image
operator|->
name|size
argument_list|()
decl_stmt|;
name|QRegion
name|clipped
init|=
name|region
decl_stmt|;
name|clipped
operator|&=
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|QHighDpi
operator|::
name|toNativePixels
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|window
argument_list|)
argument_list|)
expr_stmt|;
name|clipped
operator|&=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|imageSize
operator|.
name|width
argument_list|()
argument_list|,
name|imageSize
operator|.
name|height
argument_list|()
argument_list|)
operator|.
name|translated
argument_list|(
operator|-
name|offset
argument_list|)
expr_stmt|;
name|QRect
name|bounds
init|=
name|clipped
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|bounds
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|Q_XCB_NOOP
argument_list|(
name|connection
argument_list|()
argument_list|)
expr_stmt|;
name|QXcbWindow
modifier|*
name|platformWindow
init|=
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|platformWindow
condition|)
block|{
name|qWarning
argument_list|(
literal|"QXcbBackingStore::flush: QWindow has no platform window (QTBUG-32681)"
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_image
operator|->
name|put
argument_list|(
name|platformWindow
operator|->
name|xcb_window
argument_list|()
argument_list|,
name|clipped
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|Q_XCB_NOOP
argument_list|(
name|connection
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|platformWindow
operator|->
name|needsSync
argument_list|()
condition|)
name|platformWindow
operator|->
name|updateSyncRequestCounter
argument_list|()
expr_stmt|;
else|else
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENGL
end_ifndef
begin_function
DECL|function|composeAndFlush
name|void
name|QXcbBackingStore
operator|::
name|composeAndFlush
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|,
name|QPlatformTextureList
modifier|*
name|textures
parameter_list|,
name|QOpenGLContext
modifier|*
name|context
parameter_list|,
name|bool
name|translucentBackground
parameter_list|)
block|{
name|QPlatformBackingStore
operator|::
name|composeAndFlush
argument_list|(
name|window
argument_list|,
name|region
argument_list|,
name|offset
argument_list|,
name|textures
argument_list|,
name|context
argument_list|,
name|translucentBackground
argument_list|)
expr_stmt|;
name|Q_XCB_NOOP
argument_list|(
name|connection
argument_list|()
argument_list|)
expr_stmt|;
name|QXcbWindow
modifier|*
name|platformWindow
init|=
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|platformWindow
operator|->
name|needsSync
argument_list|()
condition|)
block|{
name|platformWindow
operator|->
name|updateSyncRequestCounter
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_OPENGL
end_comment
begin_function
DECL|function|resize
name|void
name|QXcbBackingStore
operator|::
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QRegion
modifier|&
parameter_list|)
block|{
if|if
condition|(
name|m_image
operator|&&
name|size
operator|==
name|m_image
operator|->
name|size
argument_list|()
condition|)
return|return;
name|Q_XCB_NOOP
argument_list|(
name|connection
argument_list|()
argument_list|)
expr_stmt|;
name|QXcbScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|window
argument_list|()
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|QPlatformWindow
modifier|*
name|pw
init|=
name|window
argument_list|()
operator|->
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pw
condition|)
block|{
name|window
argument_list|()
operator|->
name|create
argument_list|()
expr_stmt|;
name|pw
operator|=
name|window
argument_list|()
operator|->
name|handle
argument_list|()
expr_stmt|;
block|}
name|QXcbWindow
modifier|*
name|win
init|=
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|pw
argument_list|)
decl_stmt|;
operator|delete
name|m_image
expr_stmt|;
name|m_image
operator|=
operator|new
name|QXcbShmImage
argument_list|(
name|screen
argument_list|,
name|size
argument_list|,
name|win
operator|->
name|depth
argument_list|()
argument_list|,
name|win
operator|->
name|imageFormat
argument_list|()
argument_list|)
expr_stmt|;
comment|// Slow path for bgr888 VNC: Create an additional image, paint into that and
comment|// swap R and B while copying to m_image after each paint.
if|if
condition|(
name|win
operator|->
name|imageNeedsRgbSwap
argument_list|()
condition|)
block|{
name|m_rgbImage
operator|=
name|QImage
argument_list|(
name|size
argument_list|,
name|win
operator|->
name|imageFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Q_XCB_NOOP
argument_list|(
name|connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QXcbBackingStore
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
if|if
condition|(
name|m_image
condition|)
return|return
name|m_image
operator|->
name|scroll
argument_list|(
name|area
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
return|;
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
