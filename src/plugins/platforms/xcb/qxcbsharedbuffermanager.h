begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|XCBSHAREDBUFFERMANAGER_H
end_ifndef
begin_define
DECL|macro|XCBSHAREDBUFFERMANAGER_H
define|#
directive|define
name|XCBSHAREDBUFFERMANAGER_H
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_USE_XCB_SHARED_GRAPHICS_CACHE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/qset.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qsharedmemory.h>
end_include
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_include
include|#
directive|include
file|<EGL/eglext.h>
end_include
begin_decl_stmt
DECL|variable|wl_resource
name|class
name|wl_resource
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|class
name|QXcbSharedBufferManager
block|{
name|public
label|:
struct|struct
name|Buffer
block|{
name|Buffer
argument_list|()
operator|:
name|width
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|height
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|bytesPerPixel
argument_list|(
literal|1
argument_list|)
operator|,
name|nextX
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|nextY
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|currentLineMaxHeight
argument_list|(
literal|0
argument_list|)
operator|,
name|next
argument_list|(
literal|0
argument_list|)
operator|,
name|prev
argument_list|(
literal|0
argument_list|)
operator|,
name|buffer
argument_list|(
literal|0
argument_list|)
operator|,
name|textureId
argument_list|(
literal|0
argument_list|)
block|{         }
operator|~
name|Buffer
argument_list|()
block|{
name|delete
name|buffer
block|;
if|if
condition|(
name|textureId
operator|!=
literal|0
condition|)
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|textureId
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|cacheId
decl_stmt|;
name|int
name|width
decl_stmt|;
name|int
name|height
decl_stmt|;
name|int
name|bytesPerPixel
decl_stmt|;
name|int
name|nextX
decl_stmt|;
name|int
name|nextY
decl_stmt|;
name|int
name|currentLineMaxHeight
decl_stmt|;
name|Buffer
modifier|*
name|next
decl_stmt|;
name|Buffer
modifier|*
name|prev
decl_stmt|;
name|QSharedMemory
modifier|*
name|buffer
decl_stmt|;
name|GLuint
name|textureId
decl_stmt|;
name|QAtomicInt
name|ref
decl_stmt|;
block|}
struct|;
typedef|typedef
name|QHash
operator|<
name|QByteArray
operator|,
name|QSet
operator|<
name|quint32
operator|>
expr|>
name|PendingItemIds
expr_stmt|;
name|QXcbSharedBufferManager
argument_list|()
expr_stmt|;
operator|~
name|QXcbSharedBufferManager
argument_list|()
expr_stmt|;
name|void
name|beginSharedBufferAction
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|cacheId
parameter_list|)
function_decl|;
name|void
name|insertItem
parameter_list|(
name|quint32
name|itemId
parameter_list|,
name|uchar
modifier|*
name|data
parameter_list|,
name|int
name|itemWidth
parameter_list|,
name|int
name|itemHeight
parameter_list|)
function_decl|;
name|void
name|requestItems
argument_list|(
specifier|const
name|QSet
operator|<
name|quint32
operator|>
operator|&
name|itemIds
argument_list|)
decl_stmt|;
name|void
name|releaseItems
argument_list|(
specifier|const
name|QSet
operator|<
name|quint32
operator|>
operator|&
name|itemIds
argument_list|)
decl_stmt|;
name|void
name|endSharedBufferAction
parameter_list|()
function_decl|;
name|void
name|getBufferForItem
argument_list|(
specifier|const
name|QByteArray
operator|&
name|cacheId
argument_list|,
name|quint32
name|itemId
argument_list|,
name|Buffer
operator|*
operator|*
name|buffer
argument_list|,
name|int
operator|*
name|x
argument_list|,
name|int
operator|*
name|y
argument_list|)
decl|const
decl_stmt|;
name|QPair
operator|<
name|QByteArray
operator|,
name|int
operator|>
name|serializeBuffer
argument_list|(
argument|QSharedMemory *buffer
argument_list|)
specifier|const
expr_stmt|;
name|PendingItemIds
name|pendingItemsInvalidated
argument_list|()
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|m_currentCacheId
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Call endSharedBufferAction() before accessing data"
argument_list|)
block|;
return|return
name|m_pendingInvalidatedItems
return|;
block|}
name|PendingItemIds
name|pendingItemsReady
argument_list|()
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|m_currentCacheId
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Call endSharedBufferAction() before accessing data"
argument_list|)
block|;
return|return
name|m_pendingReadyItems
return|;
block|}
name|PendingItemIds
name|pendingItemsMissing
argument_list|()
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|m_currentCacheId
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Call endSharedBufferAction() before accessing data"
argument_list|)
block|;
return|return
name|m_pendingMissingItems
return|;
block|}
name|private
label|:
struct|struct
name|Item
block|{
name|Item
argument_list|()
operator|:
name|next
argument_list|(
literal|0
argument_list|)
operator|,
name|prev
argument_list|(
literal|0
argument_list|)
operator|,
name|buffer
argument_list|(
literal|0
argument_list|)
operator|,
name|itemId
argument_list|(
literal|0
argument_list|)
operator|,
name|x
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|y
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|width
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|height
argument_list|(
argument|-
literal|1
argument_list|)
block|{         }
name|Item
operator|*
name|next
expr_stmt|;
name|Item
modifier|*
name|prev
decl_stmt|;
name|Buffer
modifier|*
name|buffer
decl_stmt|;
name|quint32
name|itemId
decl_stmt|;
name|int
name|x
decl_stmt|;
name|int
name|y
decl_stmt|;
name|int
name|width
decl_stmt|;
name|int
name|height
decl_stmt|;
block|}
struct|;
struct|struct
name|Items
block|{
name|Items
argument_list|()
operator|:
name|leastRecentlyUsed
argument_list|(
literal|0
argument_list|)
operator|,
name|mostRecentlyUsed
argument_list|(
literal|0
argument_list|)
block|{}
name|Item
operator|*
name|leastRecentlyUsed
expr_stmt|;
name|Item
modifier|*
name|mostRecentlyUsed
decl_stmt|;
name|QByteArray
name|cacheId
decl_stmt|;
name|QHash
operator|<
name|quint32
operator|,
name|Item
operator|*
operator|>
name|items
expr_stmt|;
block|}
struct|;
name|void
name|findAvailableBuffer
parameter_list|(
name|int
name|itemWidth
parameter_list|,
name|int
name|itemHeight
parameter_list|,
name|Buffer
modifier|*
modifier|*
name|buffer
parameter_list|,
name|int
modifier|*
name|x
parameter_list|,
name|int
modifier|*
name|y
parameter_list|)
function_decl|;
name|void
name|recycleItem
parameter_list|(
name|Buffer
modifier|*
modifier|*
name|buffer
parameter_list|,
name|int
modifier|*
name|x
parameter_list|,
name|int
modifier|*
name|y
parameter_list|)
function_decl|;
name|void
name|copyIntoBuffer
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|itemWidth
parameter_list|,
name|int
name|itemHeight
parameter_list|,
name|uchar
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|touchBuffer
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
name|void
name|deleteLeastRecentlyUsed
parameter_list|()
function_decl|;
name|Buffer
modifier|*
name|createNewBuffer
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|cacheId
parameter_list|,
name|int
name|heightRequired
parameter_list|)
function_decl|;
name|Buffer
modifier|*
name|resizeBuffer
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|QSize
modifier|&
name|newSize
parameter_list|)
function_decl|;
name|Buffer
modifier|*
name|allocateBuffer
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
function_decl|;
name|Items
modifier|*
name|itemsForCache
argument_list|(
specifier|const
name|QByteArray
operator|&
name|cacheId
argument_list|)
decl|const
decl_stmt|;
name|void
name|pushItemToBack
parameter_list|(
name|Items
modifier|*
name|items
parameter_list|,
name|Item
modifier|*
name|item
parameter_list|)
function_decl|;
name|void
name|touchItem
parameter_list|(
name|Items
modifier|*
name|items
parameter_list|,
name|Item
modifier|*
name|item
parameter_list|)
function_decl|;
name|void
name|deleteItem
parameter_list|(
name|Items
modifier|*
name|items
parameter_list|,
name|Item
modifier|*
name|item
parameter_list|)
function_decl|;
name|void
name|recycleItem
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|cacheId
parameter_list|,
name|Buffer
modifier|*
modifier|*
name|sharedBuffer
parameter_list|,
name|int
modifier|*
name|glyphX
parameter_list|,
name|int
modifier|*
name|glyphY
parameter_list|)
function_decl|;
name|QByteArray
name|m_currentCacheId
decl_stmt|;
name|quint32
name|m_memoryUsed
decl_stmt|;
name|Buffer
modifier|*
name|m_mostRecentlyUsed
decl_stmt|;
name|Buffer
modifier|*
name|m_leastRecentlyUsed
decl_stmt|;
name|mutable
name|QHash
operator|<
name|QByteArray
operator|,
name|Items
operator|*
operator|>
name|m_items
expr_stmt|;
name|QMultiHash
operator|<
name|QByteArray
operator|,
name|Buffer
operator|*
operator|>
name|m_buffers
expr_stmt|;
name|PendingItemIds
name|m_pendingInvalidatedItems
decl_stmt|;
name|PendingItemIds
name|m_pendingReadyItems
decl_stmt|;
name|PendingItemIds
name|m_pendingMissingItems
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_USE_XCB_SHARED_GRAPHICS_CACHE
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// XCBSHAREDBUFFERMANAGER_H
end_comment
end_unit
