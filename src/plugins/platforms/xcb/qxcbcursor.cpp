begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxcbcursor.h"
end_include
begin_include
include|#
directive|include
file|"qxcbconnection.h"
end_include
begin_include
include|#
directive|include
file|"qxcbwindow.h"
end_include
begin_include
include|#
directive|include
file|"qxcbimage.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QLibrary>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<QtGui/QBitmap>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<X11/cursorfont.h>
end_include
begin_include
include|#
directive|include
file|<xcb/xfixes.h>
end_include
begin_include
include|#
directive|include
file|<xcb/xcb_image.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|PtrXcursorLibraryLoadCursor
typedef|typedef
name|int
function_decl|(
modifier|*
name|PtrXcursorLibraryLoadCursor
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|ptrXcursorLibraryLoadCursor
specifier|static
name|PtrXcursorLibraryLoadCursor
name|ptrXcursorLibraryLoadCursor
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cursorFont
specifier|static
name|xcb_font_t
name|cursorFont
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cursorCount
specifier|static
name|int
name|cursorCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_blank_bits
specifier|static
name|uint8_t
name|cur_blank_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_ver_bits
specifier|static
specifier|const
name|uint8_t
name|cur_ver_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x03
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0xf0
block|,
literal|0x0f
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0xf0
block|,
literal|0x0f
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_ver_bits
specifier|static
specifier|const
name|uint8_t
name|mcur_ver_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x03
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xe0
block|,
literal|0x0f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x0f
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0x80
block|,
literal|0x03
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_hor_bits
specifier|static
specifier|const
name|uint8_t
name|cur_hor_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x30
block|,
literal|0x18
block|,
literal|0x38
block|,
literal|0x38
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x38
block|,
literal|0x38
block|,
literal|0x30
block|,
literal|0x18
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_hor_bits
specifier|static
specifier|const
name|uint8_t
name|mcur_hor_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x60
block|,
literal|0x0c
block|,
literal|0x70
block|,
literal|0x1c
block|,
literal|0x78
block|,
literal|0x3c
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0xff
block|,
literal|0xfe
block|,
literal|0xff
block|,
literal|0xfe
block|,
literal|0xff
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0x78
block|,
literal|0x3c
block|,
literal|0x70
block|,
literal|0x1c
block|,
literal|0x60
block|,
literal|0x0c
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_bdiag_bits
specifier|static
specifier|const
name|uint8_t
name|cur_bdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x3c
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x37
block|,
literal|0x88
block|,
literal|0x23
block|,
literal|0xd8
block|,
literal|0x01
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0x78
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_bdiag_bits
specifier|static
specifier|const
name|uint8_t
name|mcur_bdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x80
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7e
block|,
literal|0x04
block|,
literal|0x7f
block|,
literal|0x8c
block|,
literal|0x7f
block|,
literal|0xdc
block|,
literal|0x77
block|,
literal|0xfc
block|,
literal|0x63
block|,
literal|0xfc
block|,
literal|0x41
block|,
literal|0xfc
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x01
block|,
literal|0xfc
block|,
literal|0x03
block|,
literal|0xfc
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cur_fdiag_bits
specifier|static
specifier|const
name|uint8_t
name|cur_fdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x01
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0x78
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x00
block|,
literal|0xd8
block|,
literal|0x01
block|,
literal|0x88
block|,
literal|0x23
block|,
literal|0x00
block|,
literal|0x37
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x3c
block|,
literal|0x00
block|,
literal|0x3e
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mcur_fdiag_bits
specifier|static
specifier|const
name|uint8_t
name|mcur_fdiag_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x07
block|,
literal|0xfc
block|,
literal|0x03
block|,
literal|0xfc
block|,
literal|0x01
block|,
literal|0xfc
block|,
literal|0x00
block|,
literal|0xfc
block|,
literal|0x41
block|,
literal|0xfc
block|,
literal|0x63
block|,
literal|0xdc
block|,
literal|0x77
block|,
literal|0x8c
block|,
literal|0x7f
block|,
literal|0x04
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7e
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0x80
block|,
literal|0x7f
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cursor_bits16
specifier|static
specifier|const
name|uint8_t
modifier|*
name|cursor_bits16
index|[]
init|=
block|{
name|cur_ver_bits
block|,
name|mcur_ver_bits
block|,
name|cur_hor_bits
block|,
name|mcur_hor_bits
block|,
name|cur_bdiag_bits
block|,
name|mcur_bdiag_bits
block|,
name|cur_fdiag_bits
block|,
name|mcur_fdiag_bits
block|,
literal|0
block|,
literal|0
block|,
name|cur_blank_bits
block|,
name|cur_blank_bits
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|vsplit_bits
specifier|static
specifier|const
name|uint8_t
name|vsplit_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|vsplitm_bits
specifier|static
specifier|const
name|uint8_t
name|vsplitm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|hsplit_bits
specifier|static
specifier|const
name|uint8_t
name|hsplit_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x82
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|hsplitm_bits
specifier|static
specifier|const
name|uint8_t
name|hsplitm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe2
block|,
literal|0x47
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x07
block|,
literal|0xc0
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x03
block|,
literal|0x80
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0xe3
block|,
literal|0xc7
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe2
block|,
literal|0x47
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|whatsthis_bits
specifier|static
specifier|const
name|uint8_t
name|whatsthis_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x05
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x09
block|,
literal|0x18
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x11
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x81
block|,
literal|0x1c
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x01
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x82
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xc1
block|,
literal|0xc7
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x49
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x95
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x93
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0xc1
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0xc2
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|, }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|whatsthism_bits
specifier|static
specifier|const
name|uint8_t
name|whatsthism_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0xf8
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x0f
block|,
literal|0xfc
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x1f
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x3e
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0x9d
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xc3
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xe7
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xf7
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xf3
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xe1
block|,
literal|0xe1
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xe1
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0xe3
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0xe3
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|, }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|busy_bits
specifier|static
specifier|const
name|uint8_t
name|busy_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x05
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x09
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x11
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x41
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x81
block|,
literal|0x20
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0xe1
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x42
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0xc1
block|,
literal|0x47
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0x49
block|,
literal|0x40
block|,
literal|0x55
block|,
literal|0x00
block|,
literal|0x95
block|,
literal|0x80
block|,
literal|0x2a
block|,
literal|0x00
block|,
literal|0x93
block|,
literal|0x00
block|,
literal|0x15
block|,
literal|0x00
block|,
literal|0x21
block|,
literal|0x01
block|,
literal|0x0a
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0x01
block|,
literal|0x11
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x82
block|,
literal|0x20
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x42
block|,
literal|0x44
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x41
block|,
literal|0x4a
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x55
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x20
block|,
literal|0x80
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|busym_bits
specifier|static
specifier|const
name|uint8_t
name|busym_bits
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x07
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xe1
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xc3
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xff
block|,
literal|0xc7
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x7f
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xf7
block|,
literal|0x80
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0xf3
block|,
literal|0x00
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xe1
block|,
literal|0x01
block|,
literal|0x0e
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x01
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x83
block|,
literal|0x3f
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0xc3
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0xc1
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xc0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cursor_bits32
specifier|static
specifier|const
name|uint8_t
modifier|*
specifier|const
name|cursor_bits32
index|[]
init|=
block|{
name|vsplit_bits
block|,
name|vsplitm_bits
block|,
name|hsplit_bits
block|,
name|hsplitm_bits
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
name|whatsthis_bits
block|,
name|whatsthism_bits
block|,
name|busy_bits
block|,
name|busym_bits
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|forbidden_bits
specifier|static
specifier|const
name|uint8_t
name|forbidden_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0xf0
block|,
literal|0x00
block|,
literal|0x38
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0x7c
block|,
literal|0x80
block|,
literal|0x03
block|,
literal|0xec
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0xce
block|,
literal|0x01
block|,
literal|0x07
block|,
literal|0x86
block|,
literal|0x03
block|,
literal|0x06
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x06
block|,
literal|0x06
block|,
literal|0x0e
block|,
literal|0x06
block|,
literal|0x06
block|,
literal|0x1c
block|,
literal|0x06
block|,
literal|0x0e
block|,
literal|0x38
block|,
literal|0x07
block|,
literal|0x0c
block|,
literal|0x70
block|,
literal|0x03
block|,
literal|0x1c
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0x38
block|,
literal|0xc0
block|,
literal|0x01
block|,
literal|0xf0
block|,
literal|0xe0
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|forbiddenm_bits
specifier|static
specifier|const
name|uint8_t
name|forbiddenm_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0xf0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0x01
block|,
literal|0xfc
block|,
literal|0xf0
block|,
literal|0x03
block|,
literal|0xfe
block|,
literal|0xc0
block|,
literal|0x07
block|,
literal|0xfe
block|,
literal|0x81
block|,
literal|0x07
block|,
literal|0xff
block|,
literal|0x83
block|,
literal|0x0f
block|,
literal|0xcf
block|,
literal|0x07
block|,
literal|0x0f
block|,
literal|0x8f
block|,
literal|0x0f
block|,
literal|0x0f
block|,
literal|0x0f
block|,
literal|0x1f
block|,
literal|0x0f
block|,
literal|0x0f
block|,
literal|0x3e
block|,
literal|0x0f
block|,
literal|0x1f
block|,
literal|0xfc
block|,
literal|0x0f
block|,
literal|0x1e
block|,
literal|0xf8
block|,
literal|0x07
block|,
literal|0x3e
block|,
literal|0xf0
block|,
literal|0x07
block|,
literal|0xfc
block|,
literal|0xe0
block|,
literal|0x03
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0x01
block|,
literal|0xf0
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0xe0
block|,
literal|0x7f
block|,
literal|0x00
block|,
literal|0x80
block|,
literal|0x1f
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|openhand_bits
specifier|static
specifier|const
name|uint8_t
name|openhand_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x01
block|,
literal|0x58
block|,
literal|0x0e
block|,
literal|0x64
block|,
literal|0x12
block|,
literal|0x64
block|,
literal|0x52
block|,
literal|0x48
block|,
literal|0xb2
block|,
literal|0x48
block|,
literal|0x92
block|,
literal|0x16
block|,
literal|0x90
block|,
literal|0x19
block|,
literal|0x80
block|,
literal|0x11
block|,
literal|0x40
block|,
literal|0x02
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|openhandm_bits
specifier|static
specifier|const
name|uint8_t
name|openhandm_bits
index|[]
init|=
block|{
literal|0x80
block|,
literal|0x01
block|,
literal|0xd8
block|,
literal|0x0f
block|,
literal|0xfc
block|,
literal|0x1f
block|,
literal|0xfc
block|,
literal|0x5f
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0xf8
block|,
literal|0xff
block|,
literal|0xf6
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0x7f
block|,
literal|0xfe
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|closedhand_bits
specifier|static
specifier|const
name|uint8_t
name|closedhand_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xb0
block|,
literal|0x0d
block|,
literal|0x48
block|,
literal|0x32
block|,
literal|0x08
block|,
literal|0x50
block|,
literal|0x10
block|,
literal|0x40
block|,
literal|0x18
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x04
block|,
literal|0x20
block|,
literal|0x08
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x20
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|closedhandm_bits
specifier|static
specifier|const
name|uint8_t
name|closedhandm_bits
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0xb0
block|,
literal|0x0d
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0xf0
block|,
literal|0x7f
block|,
literal|0xf8
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x7f
block|,
literal|0xfc
block|,
literal|0x3f
block|,
literal|0xf8
block|,
literal|0x3f
block|,
literal|0xf0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0xe0
block|,
literal|0x1f
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cursor_bits20
specifier|static
specifier|const
name|uint8_t
modifier|*
specifier|const
name|cursor_bits20
index|[]
init|=
block|{
name|forbidden_bits
block|,
name|forbiddenm_bits
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|cursorNames
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|cursorNames
index|[]
init|=
block|{
literal|"left_ptr"
block|,
literal|"up_arrow"
block|,
literal|"cross"
block|,
literal|"wait"
block|,
literal|"ibeam"
block|,
literal|"size_ver"
block|,
literal|"size_hor"
block|,
literal|"size_bdiag"
block|,
literal|"size_fdiag"
block|,
literal|"size_all"
block|,
literal|"blank"
block|,
literal|"split_v"
block|,
literal|"split_h"
block|,
literal|"pointing_hand"
block|,
literal|"forbidden"
block|,
literal|"whats_this"
block|,
literal|"left_ptr_watch"
block|,
literal|"openhand"
block|,
literal|"closedhand"
block|,
literal|"copy"
block|,
literal|"move"
block|,
literal|"link"
block|}
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QXcbCursor
name|QXcbCursor
operator|::
name|QXcbCursor
parameter_list|(
name|QXcbConnection
modifier|*
name|conn
parameter_list|,
name|QXcbScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|QXcbObject
argument_list|(
name|conn
argument_list|)
member_init_list|,
name|QPlatformCursor
argument_list|(
name|screen
argument_list|)
member_init_list|,
name|m_screen
argument_list|(
name|screen
argument_list|)
block|{
if|if
condition|(
name|cursorCount
operator|++
condition|)
return|return;
name|cursorFont
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|cursorStr
init|=
literal|"cursor"
decl_stmt|;
name|xcb_open_font
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cursorFont
argument_list|,
name|strlen
argument_list|(
name|cursorStr
argument_list|)
argument_list|,
name|cursorStr
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
name|QLibrary
name|xcursorLib
argument_list|(
name|QLatin1String
argument_list|(
literal|"Xcursor"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|bool
name|xcursorFound
init|=
name|xcursorLib
operator|.
name|load
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xcursorFound
condition|)
block|{
comment|// try without the version number
name|xcursorLib
operator|.
name|setFileName
argument_list|(
name|QLatin1String
argument_list|(
literal|"Xcursor"
argument_list|)
argument_list|)
expr_stmt|;
name|xcursorFound
operator|=
name|xcursorLib
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xcursorFound
condition|)
name|ptrXcursorLibraryLoadCursor
operator|=
operator|(
name|PtrXcursorLibraryLoadCursor
operator|)
name|xcursorLib
operator|.
name|resolve
argument_list|(
literal|"XcursorLibraryLoadCursor"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QXcbCursor
name|QXcbCursor
operator|::
name|~
name|QXcbCursor
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|--
name|cursorCount
condition|)
name|xcb_close_font
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cursorFont
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|changeCursor
name|void
name|QXcbCursor
operator|::
name|changeCursor
parameter_list|(
name|QCursor
modifier|*
name|cursor
parameter_list|,
name|QWindow
modifier|*
name|widget
parameter_list|)
block|{
name|QXcbWindow
modifier|*
name|w
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|handle
argument_list|()
condition|)
name|w
operator|=
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
else|else
comment|// No X11 cursor control when there is no widget under the cursor
return|return;
name|xcb_cursor_t
name|c
decl_stmt|;
if|if
condition|(
name|cursor
operator|->
name|shape
argument_list|()
operator|==
name|Qt
operator|::
name|BitmapCursor
condition|)
block|{
name|qint64
name|id
init|=
name|cursor
operator|->
name|pixmap
argument_list|()
operator|.
name|cacheKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m_bitmapCursorMap
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
name|m_bitmapCursorMap
operator|.
name|insert
argument_list|(
name|id
argument_list|,
name|createBitmapCursor
argument_list|(
name|cursor
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|m_bitmapCursorMap
operator|.
name|value
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|id
init|=
name|cursor
operator|->
name|handle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m_shapeCursorMap
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
name|m_shapeCursorMap
operator|.
name|insert
argument_list|(
name|id
argument_list|,
name|createFontCursor
argument_list|(
name|cursor
operator|->
name|shape
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
name|m_shapeCursorMap
operator|.
name|value
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|w
operator|->
name|setCursor
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorIdForShape
specifier|static
name|int
name|cursorIdForShape
parameter_list|(
name|int
name|cshape
parameter_list|)
block|{
name|int
name|cursorId
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|cshape
condition|)
block|{
case|case
name|Qt
operator|::
name|ArrowCursor
case|:
name|cursorId
operator|=
name|XC_left_ptr
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|UpArrowCursor
case|:
name|cursorId
operator|=
name|XC_center_ptr
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|CrossCursor
case|:
name|cursorId
operator|=
name|XC_crosshair
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WaitCursor
case|:
name|cursorId
operator|=
name|XC_watch
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|IBeamCursor
case|:
name|cursorId
operator|=
name|XC_xterm
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeAllCursor
case|:
name|cursorId
operator|=
name|XC_fleur
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|PointingHandCursor
case|:
name|cursorId
operator|=
name|XC_hand2
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeBDiagCursor
case|:
name|cursorId
operator|=
name|XC_top_right_corner
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeFDiagCursor
case|:
name|cursorId
operator|=
name|XC_bottom_right_corner
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeVerCursor
case|:
case|case
name|Qt
operator|::
name|SplitVCursor
case|:
name|cursorId
operator|=
name|XC_sb_v_double_arrow
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SizeHorCursor
case|:
case|case
name|Qt
operator|::
name|SplitHCursor
case|:
name|cursorId
operator|=
name|XC_sb_h_double_arrow
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WhatsThisCursor
case|:
name|cursorId
operator|=
name|XC_question_arrow
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ForbiddenCursor
case|:
name|cursorId
operator|=
name|XC_circle
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BusyCursor
case|:
name|cursorId
operator|=
name|XC_watch
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|cursorId
return|;
block|}
end_function
begin_function
DECL|function|createNonStandardCursor
name|xcb_cursor_t
name|QXcbCursor
operator|::
name|createNonStandardCursor
parameter_list|(
name|int
name|cshape
parameter_list|)
block|{
name|xcb_cursor_t
name|cursor
init|=
literal|0
decl_stmt|;
name|xcb_connection_t
modifier|*
name|conn
init|=
name|xcb_connection
argument_list|()
decl_stmt|;
if|if
condition|(
name|cshape
operator|==
name|Qt
operator|::
name|BlankCursor
condition|)
block|{
name|xcb_pixmap_t
name|cp
init|=
name|xcb_create_pixmap_from_bitmap_data
argument_list|(
name|conn
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
name|cur_blank_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|xcb_pixmap_t
name|mp
init|=
name|xcb_create_pixmap_from_bitmap_data
argument_list|(
name|conn
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
name|cur_blank_bits
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cursor
operator|=
name|xcb_generate_id
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|xcb_create_cursor
argument_list|(
name|conn
argument_list|,
name|cursor
argument_list|,
name|cp
argument_list|,
name|mp
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cshape
operator|>=
name|Qt
operator|::
name|SizeVerCursor
operator|&&
name|cshape
operator|<
name|Qt
operator|::
name|SizeAllCursor
condition|)
block|{
name|int
name|i
init|=
operator|(
name|cshape
operator|-
name|Qt
operator|::
name|SizeVerCursor
operator|)
operator|*
literal|2
decl_stmt|;
name|xcb_pixmap_t
name|pm
init|=
name|xcb_create_pixmap_from_bitmap_data
argument_list|(
name|conn
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|cursor_bits16
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|xcb_pixmap_t
name|pmm
init|=
name|xcb_create_pixmap_from_bitmap_data
argument_list|(
name|conn
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|cursor_bits16
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cursor
operator|=
name|xcb_generate_id
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|xcb_create_cursor
argument_list|(
name|conn
argument_list|,
name|cursor
argument_list|,
name|pm
argument_list|,
name|pmm
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|cshape
operator|>=
name|Qt
operator|::
name|SplitVCursor
operator|&&
name|cshape
operator|<=
name|Qt
operator|::
name|SplitHCursor
operator|)
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|WhatsThisCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|BusyCursor
condition|)
block|{
name|int
name|i
init|=
operator|(
name|cshape
operator|-
name|Qt
operator|::
name|SplitVCursor
operator|)
operator|*
literal|2
decl_stmt|;
name|xcb_pixmap_t
name|pm
init|=
name|xcb_create_pixmap_from_bitmap_data
argument_list|(
name|conn
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|cursor_bits32
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|xcb_pixmap_t
name|pmm
init|=
name|xcb_create_pixmap_from_bitmap_data
argument_list|(
name|conn
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|cursor_bits32
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|hs
init|=
operator|(
name|cshape
operator|==
name|Qt
operator|::
name|PointingHandCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|WhatsThisCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|BusyCursor
operator|)
condition|?
literal|0
else|:
literal|16
decl_stmt|;
name|cursor
operator|=
name|xcb_generate_id
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|xcb_create_cursor
argument_list|(
name|conn
argument_list|,
name|cursor
argument_list|,
name|pm
argument_list|,
name|pmm
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
name|hs
argument_list|,
name|hs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cshape
operator|==
name|Qt
operator|::
name|ForbiddenCursor
condition|)
block|{
name|int
name|i
init|=
operator|(
name|cshape
operator|-
name|Qt
operator|::
name|ForbiddenCursor
operator|)
operator|*
literal|2
decl_stmt|;
name|xcb_pixmap_t
name|pm
init|=
name|xcb_create_pixmap_from_bitmap_data
argument_list|(
name|conn
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|cursor_bits20
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|xcb_pixmap_t
name|pmm
init|=
name|xcb_create_pixmap_from_bitmap_data
argument_list|(
name|conn
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|cursor_bits20
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cursor
operator|=
name|xcb_generate_id
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|xcb_create_cursor
argument_list|(
name|conn
argument_list|,
name|cursor
argument_list|,
name|pm
argument_list|,
name|pmm
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cshape
operator|==
name|Qt
operator|::
name|OpenHandCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|ClosedHandCursor
condition|)
block|{
name|bool
name|open
init|=
name|cshape
operator|==
name|Qt
operator|::
name|OpenHandCursor
decl_stmt|;
name|xcb_pixmap_t
name|pm
init|=
name|xcb_create_pixmap_from_bitmap_data
argument_list|(
name|conn
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|open
condition|?
name|openhand_bits
else|:
name|closedhand_bits
argument_list|)
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|xcb_pixmap_t
name|pmm
init|=
name|xcb_create_pixmap_from_bitmap_data
argument_list|(
name|conn
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|open
condition|?
name|openhandm_bits
else|:
name|closedhandm_bits
argument_list|)
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cursor
operator|=
name|xcb_generate_id
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|xcb_create_cursor
argument_list|(
name|conn
argument_list|,
name|cursor
argument_list|,
name|pm
argument_list|,
name|pmm
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cshape
operator|==
name|Qt
operator|::
name|DragCopyCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|DragMoveCursor
operator|||
name|cshape
operator|==
name|Qt
operator|::
name|DragLinkCursor
condition|)
block|{
name|QImage
name|image
init|=
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|getPixmapCursor
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|CursorShape
argument_list|>
argument_list|(
name|cshape
argument_list|)
argument_list|)
operator|.
name|toImage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|xcb_pixmap_t
name|pm
init|=
name|qt_xcb_XPixmapFromBitmap
argument_list|(
name|m_screen
argument_list|,
name|image
argument_list|)
decl_stmt|;
name|xcb_pixmap_t
name|pmm
init|=
name|qt_xcb_XPixmapFromBitmap
argument_list|(
name|m_screen
argument_list|,
name|image
operator|.
name|createAlphaMask
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|=
name|xcb_generate_id
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|xcb_create_cursor
argument_list|(
name|conn
argument_list|,
name|cursor
argument_list|,
name|pm
argument_list|,
name|pmm
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cursor
return|;
block|}
end_function
begin_function
DECL|function|createFontCursor
name|xcb_cursor_t
name|QXcbCursor
operator|::
name|createFontCursor
parameter_list|(
name|int
name|cshape
parameter_list|)
block|{
name|xcb_connection_t
modifier|*
name|conn
init|=
name|xcb_connection
argument_list|()
decl_stmt|;
name|int
name|cursorId
init|=
name|cursorIdForShape
argument_list|(
name|cshape
argument_list|)
decl_stmt|;
name|xcb_cursor_t
name|cursor
init|=
name|XCB_NONE
decl_stmt|;
comment|// Try Xcursor first
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
if|if
condition|(
name|ptrXcursorLibraryLoadCursor
operator|&&
name|cshape
operator|>=
literal|0
operator|&&
name|cshape
operator|<
name|Qt
operator|::
name|LastCursor
condition|)
block|{
name|void
modifier|*
name|dpy
init|=
name|connection
argument_list|()
operator|->
name|xlib_display
argument_list|()
decl_stmt|;
comment|// special case for non-standard dnd-* cursors
switch|switch
condition|(
name|cshape
condition|)
block|{
case|case
name|Qt
operator|::
name|DragCopyCursor
case|:
name|cursor
operator|=
name|ptrXcursorLibraryLoadCursor
argument_list|(
name|dpy
argument_list|,
literal|"dnd-copy"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DragMoveCursor
case|:
name|cursor
operator|=
name|ptrXcursorLibraryLoadCursor
argument_list|(
name|dpy
argument_list|,
literal|"dnd-move"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DragLinkCursor
case|:
name|cursor
operator|=
name|ptrXcursorLibraryLoadCursor
argument_list|(
name|dpy
argument_list|,
literal|"dnd-link"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
operator|!
name|cursor
condition|)
name|cursor
operator|=
name|ptrXcursorLibraryLoadCursor
argument_list|(
name|dpy
argument_list|,
name|cursorNames
index|[
name|cshape
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cursor
condition|)
return|return
name|cursor
return|;
endif|#
directive|endif
comment|// Non-standard X11 cursors are created from bitmaps
name|cursor
operator|=
name|createNonStandardCursor
argument_list|(
name|cshape
argument_list|)
expr_stmt|;
comment|// Create a glpyh cursor if everything else failed
if|if
condition|(
operator|!
name|cursor
operator|&&
name|cursorId
condition|)
block|{
name|cursor
operator|=
name|xcb_generate_id
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|xcb_create_glyph_cursor
argument_list|(
name|conn
argument_list|,
name|cursor
argument_list|,
name|cursorFont
argument_list|,
name|cursorFont
argument_list|,
name|cursorId
argument_list|,
name|cursorId
operator|+
literal|1
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cursor
operator|&&
name|cshape
operator|>=
literal|0
operator|&&
name|cshape
operator|<
name|Qt
operator|::
name|LastCursor
condition|)
block|{
specifier|const
name|char
modifier|*
name|name
init|=
name|cursorNames
index|[
name|cshape
index|]
decl_stmt|;
name|xcb_xfixes_set_cursor_name
argument_list|(
name|conn
argument_list|,
name|cursor
argument_list|,
name|strlen
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|cursor
return|;
block|}
end_function
begin_function
DECL|function|createBitmapCursor
name|xcb_cursor_t
name|QXcbCursor
operator|::
name|createBitmapCursor
parameter_list|(
name|QCursor
modifier|*
name|cursor
parameter_list|)
block|{
name|xcb_connection_t
modifier|*
name|conn
init|=
name|xcb_connection
argument_list|()
decl_stmt|;
name|QPoint
name|spot
init|=
name|cursor
operator|->
name|hotSpot
argument_list|()
decl_stmt|;
name|xcb_cursor_t
name|c
init|=
name|XCB_NONE
decl_stmt|;
if|if
condition|(
name|cursor
operator|->
name|pixmap
argument_list|()
operator|.
name|depth
argument_list|()
operator|>
literal|1
condition|)
name|c
operator|=
name|qt_xcb_createCursorXRender
argument_list|(
name|m_screen
argument_list|,
name|cursor
operator|->
name|pixmap
argument_list|()
operator|.
name|toImage
argument_list|()
argument_list|,
name|spot
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
condition|)
block|{
name|xcb_pixmap_t
name|cp
init|=
name|qt_xcb_XPixmapFromBitmap
argument_list|(
name|m_screen
argument_list|,
name|cursor
operator|->
name|bitmap
argument_list|()
operator|->
name|toImage
argument_list|()
argument_list|)
decl_stmt|;
name|xcb_pixmap_t
name|mp
init|=
name|qt_xcb_XPixmapFromBitmap
argument_list|(
name|m_screen
argument_list|,
name|cursor
operator|->
name|mask
argument_list|()
operator|->
name|toImage
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|=
name|xcb_generate_id
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|xcb_create_cursor
argument_list|(
name|conn
argument_list|,
name|c
argument_list|,
name|cp
argument_list|,
name|mp
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
literal|0xFFFF
argument_list|,
name|spot
operator|.
name|x
argument_list|()
argument_list|,
name|spot
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|xcb_free_pixmap
argument_list|(
name|conn
argument_list|,
name|cp
argument_list|)
expr_stmt|;
name|xcb_free_pixmap
argument_list|(
name|conn
argument_list|,
name|mp
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
end_function
begin_function
DECL|function|getPosAndRoot
specifier|static
name|void
name|getPosAndRoot
parameter_list|(
name|xcb_connection_t
modifier|*
name|conn
parameter_list|,
name|xcb_window_t
modifier|*
name|rootWin
parameter_list|,
name|QPoint
modifier|*
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
condition|)
operator|*
name|pos
operator|=
name|QPoint
argument_list|()
expr_stmt|;
name|xcb_screen_iterator_t
name|it
init|=
name|xcb_setup_roots_iterator
argument_list|(
name|xcb_get_setup
argument_list|(
name|conn
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|rem
condition|)
block|{
name|xcb_window_t
name|root
init|=
name|it
operator|.
name|data
operator|->
name|root
decl_stmt|;
name|xcb_query_pointer_cookie_t
name|cookie
init|=
name|xcb_query_pointer
argument_list|(
name|conn
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|xcb_generic_error_t
modifier|*
name|err
init|=
literal|0
decl_stmt|;
name|xcb_query_pointer_reply_t
modifier|*
name|reply
init|=
name|xcb_query_pointer_reply
argument_list|(
name|conn
argument_list|,
name|cookie
argument_list|,
operator|&
name|err
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|err
operator|&&
name|reply
condition|)
block|{
if|if
condition|(
name|pos
condition|)
operator|*
name|pos
operator|=
name|QPoint
argument_list|(
name|reply
operator|->
name|root_x
argument_list|,
name|reply
operator|->
name|root_y
argument_list|)
expr_stmt|;
if|if
condition|(
name|rootWin
condition|)
operator|*
name|rootWin
operator|=
name|root
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
return|return;
block|}
name|free
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|xcb_screen_next
argument_list|(
operator|&
name|it
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|pos
name|QPoint
name|QXcbCursor
operator|::
name|pos
parameter_list|()
specifier|const
block|{
name|QPoint
name|p
decl_stmt|;
name|getPosAndRoot
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|&
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_function
DECL|function|setPos
name|void
name|QXcbCursor
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|xcb_connection_t
modifier|*
name|conn
init|=
name|xcb_connection
argument_list|()
decl_stmt|;
name|xcb_window_t
name|root
decl_stmt|;
name|getPosAndRoot
argument_list|(
name|conn
argument_list|,
operator|&
name|root
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|xcb_warp_pointer
argument_list|(
name|conn
argument_list|,
name|XCB_NONE
argument_list|,
name|root
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
