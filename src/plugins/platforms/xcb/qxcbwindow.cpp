begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxcbwindow.h"
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|"qxcbconnection.h"
end_include
begin_include
include|#
directive|include
file|"qxcbscreen.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|XCB_USE_DRI2
end_ifdef
begin_include
include|#
directive|include
file|"qdri2context.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<xcb/xcb_icccm.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
end_ifdef
begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include
begin_include
include|#
directive|include
file|<X11/Xutil.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_GLX
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qglxintegration.h"
end_include
begin_include
include|#
directive|include
file|"qglxconvenience.h"
end_include
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
end_elif
begin_include
include|#
directive|include
file|"../eglconvenience/qeglplatformcontext.h"
end_include
begin_include
include|#
directive|include
file|"../eglconvenience/qeglconvenience.h"
end_include
begin_include
include|#
directive|include
file|"../eglconvenience/qxlibeglintegration.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Returns true if we should set WM_TRANSIENT_FOR on \a w
end_comment
begin_function
DECL|function|isTransient
specifier|static
specifier|inline
name|bool
name|isTransient
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
return|return
operator|(
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Sheet
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|SplashScreen
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Drawer
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
operator|)
operator|&&
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11BypassTransientForHint
argument_list|)
operator|)
return|;
block|}
end_function
begin_constructor
DECL|function|QXcbWindow
name|QXcbWindow
operator|::
name|QXcbWindow
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|)
member_init_list|:
name|QPlatformWindow
argument_list|(
name|tlw
argument_list|)
member_init_list|,
name|m_context
argument_list|(
literal|0
argument_list|)
block|{
name|m_screen
operator|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|QPlatformScreen
operator|::
name|platformScreenForWidget
argument_list|(
name|tlw
argument_list|)
argument_list|)
expr_stmt|;
name|setConnection
argument_list|(
name|m_screen
operator|->
name|connection
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|quint32
name|mask
init|=
name|XCB_CW_BACK_PIXMAP
operator||
name|XCB_CW_EVENT_MASK
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
comment|// XCB_CW_BACK_PIXMAP
name|XCB_NONE
block|,
comment|// XCB_CW_EVENT_MASK
name|XCB_EVENT_MASK_EXPOSURE
operator||
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_KEY_PRESS
operator||
name|XCB_EVENT_MASK_KEY_RELEASE
operator||
name|XCB_EVENT_MASK_BUTTON_PRESS
operator||
name|XCB_EVENT_MASK_BUTTON_RELEASE
operator||
name|XCB_EVENT_MASK_BUTTON_MOTION
operator||
name|XCB_EVENT_MASK_ENTER_WINDOW
operator||
name|XCB_EVENT_MASK_LEAVE_WINDOW
operator||
name|XCB_EVENT_MASK_PROPERTY_CHANGE
operator||
name|XCB_EVENT_MASK_FOCUS_CHANGE
block|}
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_GLX
argument_list|)
operator|||
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
if|if
condition|(
name|tlw
operator|->
name|platformWindowFormat
argument_list|()
operator|.
name|windowApi
argument_list|()
operator|==
name|QPlatformWindowFormat
operator|::
name|OpenGL
operator|&&
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|OpenGL
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_GLX
argument_list|)
name|XVisualInfo
modifier|*
name|visualInfo
init|=
name|qglx_findVisualInfo
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|m_screen
argument_list|)
argument_list|,
name|m_screen
operator|->
name|screenNumber
argument_list|()
argument_list|,
name|tlw
operator|->
name|platformWindowFormat
argument_list|()
argument_list|)
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
name|EGLDisplay
name|eglDisplay
init|=
name|connection
argument_list|()
operator|->
name|egl_display
argument_list|()
decl_stmt|;
name|EGLConfig
name|eglConfig
init|=
name|q_configFromQPlatformWindowFormat
argument_list|(
name|eglDisplay
argument_list|,
name|tlw
operator|->
name|platformWindowFormat
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|VisualID
name|id
init|=
name|QXlibEglIntegration
operator|::
name|getCompatibleVisualId
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|eglDisplay
argument_list|,
name|eglConfig
argument_list|)
decl_stmt|;
name|XVisualInfo
name|visualInfoTemplate
decl_stmt|;
name|memset
argument_list|(
operator|&
name|visualInfoTemplate
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|XVisualInfo
argument_list|)
argument_list|)
expr_stmt|;
name|visualInfoTemplate
operator|.
name|visualid
operator|=
name|id
expr_stmt|;
name|XVisualInfo
modifier|*
name|visualInfo
decl_stmt|;
name|int
name|matchingCount
init|=
literal|0
decl_stmt|;
name|visualInfo
operator|=
name|XGetVisualInfo
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|VisualIDMask
argument_list|,
operator|&
name|visualInfoTemplate
argument_list|,
operator|&
name|matchingCount
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//XCB_USE_GLX
if|if
condition|(
name|visualInfo
condition|)
block|{
name|m_depth
operator|=
name|visualInfo
operator|->
name|depth
expr_stmt|;
name|m_format
operator|=
operator|(
name|m_depth
operator|==
literal|32
operator|)
condition|?
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
else|:
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|Colormap
name|cmap
init|=
name|XCreateColormap
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|AllocNone
argument_list|)
decl_stmt|;
name|XSetWindowAttributes
name|a
decl_stmt|;
name|a
operator|.
name|background_pixel
operator|=
name|WhitePixel
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|m_screen
operator|->
name|screenNumber
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|border_pixel
operator|=
name|BlackPixel
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|m_screen
operator|->
name|screenNumber
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|colormap
operator|=
name|cmap
expr_stmt|;
name|m_window
operator|=
name|XCreateWindow
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
name|tlw
operator|->
name|x
argument_list|()
argument_list|,
name|tlw
operator|->
name|y
argument_list|()
argument_list|,
name|tlw
operator|->
name|width
argument_list|()
argument_list|,
name|tlw
operator|->
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|visualInfo
operator|->
name|depth
argument_list|,
name|InputOutput
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|CWBackPixel
operator||
name|CWBorderPixel
operator||
name|CWColormap
argument_list|,
operator|&
name|a
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"created GL window: %d\n"
argument_list|,
name|m_window
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qFatal
argument_list|(
literal|"no window!"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
endif|#
directive|endif
comment|//defined(XCB_USE_GLX) || defined(XCB_USE_EGL)
block|{
name|m_window
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|m_depth
operator|=
name|m_screen
operator|->
name|screen
argument_list|()
operator|->
name|root_depth
expr_stmt|;
name|m_format
operator|=
operator|(
name|m_depth
operator|==
literal|32
operator|)
condition|?
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
else|:
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_create_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_COPY_FROM_PARENT
argument_list|,
comment|// depth -- same as root
name|m_window
argument_list|,
comment|// window id
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
comment|// parent window id
name|tlw
operator|->
name|x
argument_list|()
argument_list|,
name|tlw
operator|->
name|y
argument_list|()
argument_list|,
name|tlw
operator|->
name|width
argument_list|()
argument_list|,
name|tlw
operator|->
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
comment|// border width
name|XCB_WINDOW_CLASS_INPUT_OUTPUT
argument_list|,
comment|// window class
name|m_screen
operator|->
name|screen
argument_list|()
operator|->
name|root_visual
argument_list|,
comment|// visual
literal|0
argument_list|,
comment|// value mask
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// value list
name|printf
argument_list|(
literal|"created regular window: %d\n"
argument_list|,
name|m_window
argument_list|)
expr_stmt|;
block|}
name|Q_XCB_CALL
argument_list|(
name|xcb_change_window_attributes
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_atom_t
name|properties
index|[
literal|4
index|]
decl_stmt|;
name|int
name|propertyCount
init|=
literal|0
decl_stmt|;
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_DELETE_WINDOW
argument_list|)
expr_stmt|;
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_TAKE_FOCUS
argument_list|)
expr_stmt|;
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_PING
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_screen
operator|->
name|syncRequestSupported
argument_list|()
condition|)
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_SYNC_REQUEST
argument_list|)
expr_stmt|;
if|if
condition|(
name|tlw
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_CONTEXT_HELP
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_PROTOCOLS
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|32
argument_list|,
name|propertyCount
argument_list|,
name|properties
argument_list|)
argument_list|)
expr_stmt|;
name|m_syncValue
operator|.
name|hi
operator|=
literal|0
expr_stmt|;
name|m_syncValue
operator|.
name|lo
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|m_screen
operator|->
name|syncRequestSupported
argument_list|()
condition|)
block|{
name|m_syncCounter
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_sync_create_counter
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_syncCounter
argument_list|,
name|m_syncValue
argument_list|)
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_SYNC_REQUEST_COUNTER
argument_list|)
argument_list|,
name|XCB_ATOM_CARDINAL
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|m_syncCounter
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTransient
argument_list|(
name|tlw
argument_list|)
operator|&&
name|tlw
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
comment|// ICCCM 4.1.2.6
name|QWidget
modifier|*
name|p
init|=
name|tlw
operator|->
name|parentWidget
argument_list|()
operator|->
name|window
argument_list|()
decl_stmt|;
name|xcb_window_t
name|parentWindow
init|=
name|p
operator|->
name|winId
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|XCB_ATOM_WM_TRANSIENT_FOR
argument_list|,
name|XCB_ATOM_WINDOW
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|parentWindow
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set the PID to let the WM kill the application if unresponsive
name|long
name|pid
init|=
name|getpid
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_PID
argument_list|)
argument_list|,
name|XCB_ATOM_CARDINAL
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|pid
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QXcbWindow
name|QXcbWindow
operator|::
name|~
name|QXcbWindow
parameter_list|()
block|{
operator|delete
name|m_context
expr_stmt|;
if|if
condition|(
name|m_screen
operator|->
name|syncRequestSupported
argument_list|()
condition|)
name|Q_XCB_CALL
argument_list|(
name|xcb_sync_destroy_counter
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_syncCounter
argument_list|)
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_destroy_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setGeometry
name|void
name|QXcbWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
specifier|const
name|quint32
name|mask
init|=
name|XCB_CONFIG_WINDOW_X
operator||
name|XCB_CONFIG_WINDOW_Y
operator||
name|XCB_CONFIG_WINDOW_WIDTH
operator||
name|XCB_CONFIG_WINDOW_HEIGHT
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
name|rect
operator|.
name|x
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_configure_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QXcbWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|xcb_wm_hints_t
name|hints
decl_stmt|;
if|if
condition|(
name|visible
condition|)
block|{
if|if
condition|(
name|widget
argument_list|()
operator|->
name|isMinimized
argument_list|()
condition|)
name|xcb_wm_hints_set_iconic
argument_list|(
operator|&
name|hints
argument_list|)
expr_stmt|;
else|else
name|xcb_wm_hints_set_normal
argument_list|(
operator|&
name|hints
argument_list|)
expr_stmt|;
name|xcb_set_wm_hints
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
operator|&
name|hints
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_map_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_unmap_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
comment|// send synthetic UnmapNotify event according to icccm 4.1.4
name|xcb_unmap_notify_event_t
name|event
decl_stmt|;
name|event
operator|.
name|response_type
operator|=
name|XCB_UNMAP_NOTIFY
expr_stmt|;
name|event
operator|.
name|sequence
operator|=
literal|0
expr_stmt|;
comment|// does this matter?
name|event
operator|.
name|event
operator|=
name|m_screen
operator|->
name|root
argument_list|()
expr_stmt|;
name|event
operator|.
name|window
operator|=
name|m_window
expr_stmt|;
name|event
operator|.
name|from_configure
operator|=
literal|false
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_struct
DECL|struct|QtMWMHints
struct|struct
name|QtMWMHints
block|{
DECL|member|flags
DECL|member|functions
DECL|member|decorations
name|quint32
name|flags
decl_stmt|,
name|functions
decl_stmt|,
name|decorations
decl_stmt|;
DECL|member|input_mode
name|qint32
name|input_mode
decl_stmt|;
DECL|member|status
name|quint32
name|status
decl_stmt|;
block|}
struct|;
end_struct
begin_enum
enum|enum
block|{
DECL|enumerator|MWM_HINTS_FUNCTIONS
name|MWM_HINTS_FUNCTIONS
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_FUNC_ALL
name|MWM_FUNC_ALL
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_FUNC_RESIZE
name|MWM_FUNC_RESIZE
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_FUNC_MOVE
name|MWM_FUNC_MOVE
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_FUNC_MINIMIZE
name|MWM_FUNC_MINIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|3
operator|)
block|,
DECL|enumerator|MWM_FUNC_MAXIMIZE
name|MWM_FUNC_MAXIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|MWM_FUNC_CLOSE
name|MWM_FUNC_CLOSE
init|=
operator|(
literal|1L
operator|<<
literal|5
operator|)
block|,
DECL|enumerator|MWM_HINTS_DECORATIONS
name|MWM_HINTS_DECORATIONS
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_DECOR_ALL
name|MWM_DECOR_ALL
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_DECOR_BORDER
name|MWM_DECOR_BORDER
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_DECOR_RESIZEH
name|MWM_DECOR_RESIZEH
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_DECOR_TITLE
name|MWM_DECOR_TITLE
init|=
operator|(
literal|1L
operator|<<
literal|3
operator|)
block|,
DECL|enumerator|MWM_DECOR_MENU
name|MWM_DECOR_MENU
init|=
operator|(
literal|1L
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|MWM_DECOR_MINIMIZE
name|MWM_DECOR_MINIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|5
operator|)
block|,
DECL|enumerator|MWM_DECOR_MAXIMIZE
name|MWM_DECOR_MAXIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|6
operator|)
block|,
DECL|enumerator|MWM_HINTS_INPUT_MODE
name|MWM_HINTS_INPUT_MODE
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_INPUT_MODELESS
name|MWM_INPUT_MODELESS
init|=
literal|0L
block|,
DECL|enumerator|MWM_INPUT_PRIMARY_APPLICATION_MODAL
name|MWM_INPUT_PRIMARY_APPLICATION_MODAL
init|=
literal|1L
block|,
DECL|enumerator|MWM_INPUT_FULL_APPLICATION_MODAL
name|MWM_INPUT_FULL_APPLICATION_MODAL
init|=
literal|3L
block|}
enum|;
end_enum
begin_function
DECL|function|setWindowFlags
name|Qt
operator|::
name|WindowFlags
name|QXcbWindow
operator|::
name|setWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
name|Qt
operator|::
name|WindowType
name|type
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
name|int
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
argument_list|)
decl_stmt|;
name|setNetWmWindowTypes
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
condition|)
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Popup
condition|)
name|flags
operator||=
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
name|bool
name|topLevel
init|=
operator|(
name|flags
operator|&
name|Qt
operator|::
name|Window
operator|)
decl_stmt|;
name|bool
name|popup
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|)
decl_stmt|;
name|bool
name|dialog
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|type
operator|==
name|Qt
operator|::
name|Sheet
operator|)
decl_stmt|;
name|bool
name|desktop
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Desktop
operator|)
decl_stmt|;
name|bool
name|tool
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|type
operator|==
name|Qt
operator|::
name|Drawer
operator|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|topLevel
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|dialog
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|desktop
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|tool
argument_list|)
expr_stmt|;
name|bool
name|tooltip
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
decl_stmt|;
name|QtMWMHints
name|mwmhints
decl_stmt|;
name|mwmhints
operator|.
name|flags
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
literal|0
expr_stmt|;
name|mwmhints
operator|.
name|input_mode
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|status
operator|=
literal|0L
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|Qt
operator|::
name|SplashScreen
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|bool
name|customize
init|=
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
operator|!
operator|(
name|customize
operator|&&
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|)
operator|)
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_BORDER
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_RESIZEH
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_TITLE
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MENU
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MINIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MINIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MAXIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MAXIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_CLOSE
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if type == Qt::SplashScreen
name|mwmhints
operator|.
name|decorations
operator|=
name|MWM_DECOR_ALL
expr_stmt|;
block|}
if|if
condition|(
name|mwmhints
operator|.
name|functions
operator|!=
literal|0
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MOVE
operator||
name|MWM_FUNC_RESIZE
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_ALL
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|&&
operator|!
operator|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
operator|)
operator|)
condition|)
block|{
comment|// a special case - only the titlebar without any button
name|mwmhints
operator|.
name|flags
operator|=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_MOVE
operator||
name|MWM_FUNC_RESIZE
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|mwmhints
operator|.
name|flags
operator|!=
literal|0l
condition|)
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|5
argument_list|,
operator|&
name|mwmhints
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_delete_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|popup
operator|||
name|tooltip
condition|)
block|{
specifier|const
name|quint32
name|mask
init|=
name|XCB_CW_OVERRIDE_REDIRECT
operator||
name|XCB_CW_SAVE_UNDER
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
literal|true
block|,
literal|true
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_window_attributes
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|QPlatformWindow
operator|::
name|setWindowFlags
argument_list|(
name|flags
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setNetWmWindowTypes
name|void
name|QXcbWindow
operator|::
name|setNetWmWindowTypes
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
comment|// in order of decreasing priority
name|QVector
argument_list|<
name|uint
argument_list|>
name|windowTypes
decl_stmt|;
name|Qt
operator|::
name|WindowType
name|type
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
name|int
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Qt
operator|::
name|Dialog
case|:
case|case
name|Qt
operator|::
name|Sheet
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DIALOG
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Tool
case|:
case|case
name|Qt
operator|::
name|Drawer
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_UTILITY
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ToolTip
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_TOOLTIP
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SplashScreen
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_SPLASH
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_KDE_NET_WM_WINDOW_TYPE_OVERRIDE
argument_list|)
argument_list|)
expr_stmt|;
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_NORMAL
argument_list|)
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|32
argument_list|,
name|windowTypes
operator|.
name|count
argument_list|()
argument_list|,
name|windowTypes
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|winId
name|WId
name|QXcbWindow
operator|::
name|winId
parameter_list|()
specifier|const
block|{
return|return
name|m_window
return|;
block|}
end_function
begin_function
DECL|function|setParent
name|void
name|QXcbWindow
operator|::
name|setParent
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|parent
parameter_list|)
block|{
name|QPoint
name|topLeft
init|=
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_reparent_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|window
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
operator|->
name|window
argument_list|()
argument_list|,
name|topLeft
operator|.
name|x
argument_list|()
argument_list|,
name|topLeft
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowTitle
name|void
name|QXcbWindow
operator|::
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|QByteArray
name|ba
init|=
name|title
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_NAME
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|UTF8_STRING
argument_list|)
argument_list|,
literal|8
argument_list|,
name|ba
operator|.
name|length
argument_list|()
argument_list|,
name|ba
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|raise
name|void
name|QXcbWindow
operator|::
name|raise
parameter_list|()
block|{
specifier|const
name|quint32
name|mask
init|=
name|XCB_CONFIG_WINDOW_STACK_MODE
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
name|XCB_STACK_MODE_ABOVE
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_configure_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lower
name|void
name|QXcbWindow
operator|::
name|lower
parameter_list|()
block|{
specifier|const
name|quint32
name|mask
init|=
name|XCB_CONFIG_WINDOW_STACK_MODE
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
name|XCB_STACK_MODE_BELOW
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_configure_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|requestActivateWindow
name|void
name|QXcbWindow
operator|::
name|requestActivateWindow
parameter_list|()
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_set_input_focus
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_INPUT_FOCUS_PARENT
argument_list|,
name|m_window
argument_list|,
name|XCB_TIME_CURRENT_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|glContext
name|QPlatformGLContext
modifier|*
name|QXcbWindow
operator|::
name|glContext
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|OpenGL
argument_list|)
condition|)
block|{
name|printf
argument_list|(
literal|"no opengl\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|m_context
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_GLX
argument_list|)
name|QXcbWindow
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|m_context
operator|=
operator|new
name|QGLXContext
argument_list|(
name|m_window
argument_list|,
name|m_screen
argument_list|,
name|widget
argument_list|()
operator|->
name|platformWindowFormat
argument_list|()
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
name|EGLDisplay
name|display
init|=
name|connection
argument_list|()
operator|->
name|egl_display
argument_list|()
decl_stmt|;
name|EGLConfig
name|config
init|=
name|q_configFromQPlatformWindowFormat
argument_list|(
name|display
argument_list|,
name|widget
argument_list|()
operator|->
name|platformWindowFormat
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|EGLint
argument_list|>
name|eglContextAttrs
decl_stmt|;
name|eglContextAttrs
operator|.
name|append
argument_list|(
name|EGL_CONTEXT_CLIENT_VERSION
argument_list|)
expr_stmt|;
name|eglContextAttrs
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|eglContextAttrs
operator|.
name|append
argument_list|(
name|EGL_NONE
argument_list|)
expr_stmt|;
name|EGLSurface
name|eglSurface
init|=
name|eglCreateWindowSurface
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
operator|(
name|EGLNativeWindowType
operator|)
name|m_window
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QXcbWindow
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|m_context
operator|=
operator|new
name|QEGLPlatformContext
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
name|eglContextAttrs
operator|.
name|data
argument_list|()
argument_list|,
name|eglSurface
argument_list|,
name|EGL_OPENGL_ES_API
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|XCB_USE_DRI2
argument_list|)
name|QXcbWindow
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|m_context
operator|=
operator|new
name|QDri2Context
argument_list|(
name|that
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|m_context
return|;
block|}
end_function
begin_function
DECL|function|handleExposeEvent
name|void
name|QXcbWindow
operator|::
name|handleExposeEvent
parameter_list|(
specifier|const
name|xcb_expose_event_t
modifier|*
name|event
parameter_list|)
block|{
name|QWindowSurface
modifier|*
name|surface
init|=
name|widget
argument_list|()
operator|->
name|windowSurface
argument_list|()
decl_stmt|;
if|if
condition|(
name|surface
condition|)
block|{
name|QRect
name|rect
argument_list|(
name|event
operator|->
name|x
argument_list|,
name|event
operator|->
name|y
argument_list|,
name|event
operator|->
name|width
argument_list|,
name|event
operator|->
name|height
argument_list|)
decl_stmt|;
name|surface
operator|->
name|flush
argument_list|(
name|widget
argument_list|()
argument_list|,
name|rect
argument_list|,
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleClientMessageEvent
name|void
name|QXcbWindow
operator|::
name|handleClientMessageEvent
parameter_list|(
specifier|const
name|xcb_client_message_event_t
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|format
operator|==
literal|32
operator|&&
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_PROTOCOLS
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_DELETE_WINDOW
argument_list|)
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleCloseEvent
argument_list|(
name|widget
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_PING
argument_list|)
condition|)
block|{
name|xcb_client_message_event_t
name|reply
init|=
operator|*
name|event
decl_stmt|;
name|reply
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|reply
operator|.
name|window
operator|=
name|m_screen
operator|->
name|root
argument_list|()
expr_stmt|;
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|reply
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_SYNC_REQUEST
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|m_hasReceivedSyncRequest
condition|)
block|{
name|m_hasReceivedSyncRequest
operator|=
literal|true
expr_stmt|;
name|printf
argument_list|(
literal|"Window manager supports _NET_WM_SYNC_REQUEST, syncing resizes\n"
argument_list|)
expr_stmt|;
block|}
name|m_syncValue
operator|.
name|lo
operator|=
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|2
index|]
expr_stmt|;
name|m_syncValue
operator|.
name|hi
operator|=
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|3
index|]
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|handleConfigureNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleConfigureNotifyEvent
parameter_list|(
specifier|const
name|xcb_configure_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
name|int
name|xpos
init|=
name|geometry
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|ypos
init|=
name|geometry
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|event
operator|->
name|width
operator|==
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
operator|&&
name|event
operator|->
name|height
operator|==
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
operator|)
operator|||
name|event
operator|->
name|x
operator|!=
literal|0
operator|||
name|event
operator|->
name|y
operator|!=
literal|0
condition|)
block|{
name|xpos
operator|=
name|event
operator|->
name|x
expr_stmt|;
name|ypos
operator|=
name|event
operator|->
name|y
expr_stmt|;
block|}
name|QRect
name|rect
argument_list|(
name|xpos
argument_list|,
name|ypos
argument_list|,
name|event
operator|->
name|width
argument_list|,
name|event
operator|->
name|height
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|==
name|geometry
argument_list|()
condition|)
return|return;
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|widget
argument_list|()
argument_list|,
name|rect
argument_list|)
expr_stmt|;
if|#
directive|if
name|XCB_USE_DRI2
if|if
condition|(
name|m_context
condition|)
cast|static_cast
argument_list|<
name|QDri2Context
operator|*
argument_list|>
argument_list|(
name|m_context
argument_list|)
operator|->
name|resize
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|translateMouseButtons
specifier|static
name|Qt
operator|::
name|MouseButtons
name|translateMouseButtons
parameter_list|(
name|int
name|s
parameter_list|)
block|{
name|Qt
operator|::
name|MouseButtons
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s
operator|&
name|XCB_BUTTON_MASK_1
condition|)
name|ret
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|XCB_BUTTON_MASK_2
condition|)
name|ret
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|XCB_BUTTON_MASK_3
condition|)
name|ret
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|translateMouseButton
specifier|static
name|Qt
operator|::
name|MouseButton
name|translateMouseButton
parameter_list|(
name|xcb_button_t
name|s
parameter_list|)
block|{
switch|switch
condition|(
name|s
condition|)
block|{
case|case
literal|1
case|:
return|return
name|Qt
operator|::
name|LeftButton
return|;
case|case
literal|2
case|:
return|return
name|Qt
operator|::
name|MidButton
return|;
case|case
literal|3
case|:
return|return
name|Qt
operator|::
name|RightButton
return|;
default|default:
return|return
name|Qt
operator|::
name|NoButton
return|;
block|}
block|}
end_function
begin_function
DECL|function|handleButtonPressEvent
name|void
name|QXcbWindow
operator|::
name|handleButtonPressEvent
parameter_list|(
specifier|const
name|xcb_button_press_event_t
modifier|*
name|event
parameter_list|)
block|{
name|QPoint
name|local
argument_list|(
name|event
operator|->
name|event_x
argument_list|,
name|event
operator|->
name|event_y
argument_list|)
decl_stmt|;
name|QPoint
name|global
argument_list|(
name|event
operator|->
name|root_x
argument_list|,
name|event
operator|->
name|root_y
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|detail
operator|>=
literal|4
operator|&&
name|event
operator|->
name|detail
operator|<=
literal|7
condition|)
block|{
comment|//logic borrowed from qapplication_x11.cpp
name|int
name|delta
init|=
literal|120
operator|*
operator|(
operator|(
name|event
operator|->
name|detail
operator|==
literal|4
operator|||
name|event
operator|->
name|detail
operator|==
literal|6
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
decl_stmt|;
name|bool
name|hor
init|=
operator|(
operator|(
operator|(
name|event
operator|->
name|detail
operator|==
literal|4
operator|||
name|event
operator|->
name|detail
operator|==
literal|5
operator|)
operator|&&
operator|(
name|modifiers
operator|&
name|Qt
operator|::
name|AltModifier
operator|)
operator|)
operator|||
operator|(
name|event
operator|->
name|detail
operator|==
literal|6
operator|||
name|event
operator|->
name|detail
operator|==
literal|7
operator|)
operator|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|widget
argument_list|()
argument_list|,
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|delta
argument_list|,
name|hor
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
return|return;
block|}
name|handleMouseEvent
argument_list|(
name|event
operator|->
name|detail
argument_list|,
name|event
operator|->
name|state
argument_list|,
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleButtonReleaseEvent
name|void
name|QXcbWindow
operator|::
name|handleButtonReleaseEvent
parameter_list|(
specifier|const
name|xcb_button_release_event_t
modifier|*
name|event
parameter_list|)
block|{
name|QPoint
name|local
argument_list|(
name|event
operator|->
name|event_x
argument_list|,
name|event
operator|->
name|event_y
argument_list|)
decl_stmt|;
name|QPoint
name|global
argument_list|(
name|event
operator|->
name|root_x
argument_list|,
name|event
operator|->
name|root_y
argument_list|)
decl_stmt|;
name|handleMouseEvent
argument_list|(
name|event
operator|->
name|detail
argument_list|,
name|event
operator|->
name|state
argument_list|,
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleMotionNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleMotionNotifyEvent
parameter_list|(
specifier|const
name|xcb_motion_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
name|QPoint
name|local
argument_list|(
name|event
operator|->
name|event_x
argument_list|,
name|event
operator|->
name|event_y
argument_list|)
decl_stmt|;
name|QPoint
name|global
argument_list|(
name|event
operator|->
name|root_x
argument_list|,
name|event
operator|->
name|root_y
argument_list|)
decl_stmt|;
name|handleMouseEvent
argument_list|(
name|event
operator|->
name|detail
argument_list|,
name|event
operator|->
name|state
argument_list|,
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleMouseEvent
name|void
name|QXcbWindow
operator|::
name|handleMouseEvent
parameter_list|(
name|xcb_button_t
name|detail
parameter_list|,
name|uint16_t
name|state
parameter_list|,
name|xcb_timestamp_t
name|time
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|local
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|global
parameter_list|)
block|{
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|translateMouseButtons
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|translateMouseButton
argument_list|(
name|detail
argument_list|)
decl_stmt|;
name|buttons
operator|^=
name|button
expr_stmt|;
comment|// X event uses state *before*, Qt uses state *after*
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|widget
argument_list|()
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|buttons
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleEnterNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleEnterNotifyEvent
parameter_list|(
specifier|const
name|xcb_enter_notify_event_t
modifier|*
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|widget
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleLeaveNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleLeaveNotifyEvent
parameter_list|(
specifier|const
name|xcb_leave_notify_event_t
modifier|*
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
name|widget
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleFocusInEvent
name|void
name|QXcbWindow
operator|::
name|handleFocusInEvent
parameter_list|(
specifier|const
name|xcb_focus_in_event_t
modifier|*
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|widget
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleFocusOutEvent
name|void
name|QXcbWindow
operator|::
name|handleFocusOutEvent
parameter_list|(
specifier|const
name|xcb_focus_out_event_t
modifier|*
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateSyncRequestCounter
name|void
name|QXcbWindow
operator|::
name|updateSyncRequestCounter
parameter_list|()
block|{
if|if
condition|(
name|m_screen
operator|->
name|syncRequestSupported
argument_list|()
operator|&&
operator|(
name|m_syncValue
operator|.
name|lo
operator|!=
literal|0
operator|||
name|m_syncValue
operator|.
name|hi
operator|!=
literal|0
operator|)
condition|)
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_sync_set_counter
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_syncCounter
argument_list|,
name|m_syncValue
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
name|m_syncValue
operator|.
name|lo
operator|=
literal|0
expr_stmt|;
name|m_syncValue
operator|.
name|hi
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
end_unit
