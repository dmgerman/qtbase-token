begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxcbwindow.h"
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/QIcon>
end_include
begin_include
include|#
directive|include
file|<QtGui/QRegion>
end_include
begin_include
include|#
directive|include
file|"qxcbintegration.h"
end_include
begin_include
include|#
directive|include
file|"qxcbconnection.h"
end_include
begin_include
include|#
directive|include
file|"qxcbscreen.h"
end_include
begin_include
include|#
directive|include
file|"qxcbdrag.h"
end_include
begin_include
include|#
directive|include
file|"qxcbkeyboard.h"
end_include
begin_include
include|#
directive|include
file|"qxcbwmsupport.h"
end_include
begin_include
include|#
directive|include
file|"qxcbimage.h"
end_include
begin_include
include|#
directive|include
file|"qxcbnativeinterface.h"
end_include
begin_include
include|#
directive|include
file|"qxcbsystemtraytracker.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_comment
comment|// FIXME This workaround can be removed for xcb-icccm> 3.8
end_comment
begin_define
DECL|macro|class
define|#
directive|define
name|class
value|class_name
end_define
begin_include
include|#
directive|include
file|<xcb/xcb_icccm.h>
end_include
begin_undef
DECL|macro|class
undef|#
directive|undef
name|class
end_undef
begin_include
include|#
directive|include
file|<xcb/xfixes.h>
end_include
begin_include
include|#
directive|include
file|<xcb/shape.h>
end_include
begin_comment
comment|// xcb-icccm 3.8 support
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|XCB_ICCCM_NUM_WM_SIZE_HINTS_ELEMENTS
end_ifdef
begin_define
DECL|macro|xcb_get_wm_hints_reply
define|#
directive|define
name|xcb_get_wm_hints_reply
value|xcb_icccm_get_wm_hints_reply
end_define
begin_define
DECL|macro|xcb_get_wm_hints
define|#
directive|define
name|xcb_get_wm_hints
value|xcb_icccm_get_wm_hints
end_define
begin_define
DECL|macro|xcb_get_wm_hints_unchecked
define|#
directive|define
name|xcb_get_wm_hints_unchecked
value|xcb_icccm_get_wm_hints_unchecked
end_define
begin_define
DECL|macro|xcb_set_wm_hints
define|#
directive|define
name|xcb_set_wm_hints
value|xcb_icccm_set_wm_hints
end_define
begin_define
DECL|macro|xcb_set_wm_normal_hints
define|#
directive|define
name|xcb_set_wm_normal_hints
value|xcb_icccm_set_wm_normal_hints
end_define
begin_define
DECL|macro|xcb_size_hints_set_base_size
define|#
directive|define
name|xcb_size_hints_set_base_size
value|xcb_icccm_size_hints_set_base_size
end_define
begin_define
DECL|macro|xcb_size_hints_set_max_size
define|#
directive|define
name|xcb_size_hints_set_max_size
value|xcb_icccm_size_hints_set_max_size
end_define
begin_define
DECL|macro|xcb_size_hints_set_min_size
define|#
directive|define
name|xcb_size_hints_set_min_size
value|xcb_icccm_size_hints_set_min_size
end_define
begin_define
DECL|macro|xcb_size_hints_set_position
define|#
directive|define
name|xcb_size_hints_set_position
value|xcb_icccm_size_hints_set_position
end_define
begin_define
DECL|macro|xcb_size_hints_set_resize_inc
define|#
directive|define
name|xcb_size_hints_set_resize_inc
value|xcb_icccm_size_hints_set_resize_inc
end_define
begin_define
DECL|macro|xcb_size_hints_set_size
define|#
directive|define
name|xcb_size_hints_set_size
value|xcb_icccm_size_hints_set_size
end_define
begin_define
DECL|macro|xcb_size_hints_set_win_gravity
define|#
directive|define
name|xcb_size_hints_set_win_gravity
value|xcb_icccm_size_hints_set_win_gravity
end_define
begin_define
DECL|macro|xcb_wm_hints_set_iconic
define|#
directive|define
name|xcb_wm_hints_set_iconic
value|xcb_icccm_wm_hints_set_iconic
end_define
begin_define
DECL|macro|xcb_wm_hints_set_normal
define|#
directive|define
name|xcb_wm_hints_set_normal
value|xcb_icccm_wm_hints_set_normal
end_define
begin_define
DECL|macro|xcb_wm_hints_set_input
define|#
directive|define
name|xcb_wm_hints_set_input
value|xcb_icccm_wm_hints_set_input
end_define
begin_define
DECL|macro|xcb_wm_hints_t
define|#
directive|define
name|xcb_wm_hints_t
value|xcb_icccm_wm_hints_t
end_define
begin_define
DECL|macro|XCB_WM_STATE_ICONIC
define|#
directive|define
name|XCB_WM_STATE_ICONIC
value|XCB_ICCCM_WM_STATE_ICONIC
end_define
begin_define
DECL|macro|XCB_WM_STATE_WITHDRAWN
define|#
directive|define
name|XCB_WM_STATE_WITHDRAWN
value|XCB_ICCCM_WM_STATE_WITHDRAWN
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindow_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformbackingstore.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
end_ifdef
begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include
begin_include
include|#
directive|include
file|<X11/Xutil.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_XINPUT2
argument_list|)
end_if
begin_include
include|#
directive|include
file|<X11/extensions/XInput2.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|XCOORD_MAX
define|#
directive|define
name|XCOORD_MAX
value|16383
end_define
begin_enum
enum|enum
block|{
DECL|enumerator|defaultWindowWidth
name|defaultWindowWidth
init|=
literal|160
block|,
DECL|enumerator|defaultWindowHeight
name|defaultWindowHeight
init|=
literal|160
block|}
enum|;
end_enum
begin_comment
comment|//#ifdef NET_WM_STATE_DEBUG
end_comment
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|macro|FocusIn
undef|#
directive|undef
name|FocusIn
DECL|enum|QX11EmbedFocusInDetail
name|enum
name|QX11EmbedFocusInDetail
argument_list|{
DECL|enumerator|XEMBED_FOCUS_CURRENT
name|XEMBED_FOCUS_CURRENT
operator|=
literal|0
argument_list|,
DECL|enumerator|XEMBED_FOCUS_FIRST
name|XEMBED_FOCUS_FIRST
operator|=
literal|1
argument_list|,
DECL|enumerator|XEMBED_FOCUS_LAST
name|XEMBED_FOCUS_LAST
operator|=
literal|2
argument_list|}
decl_stmt|;
end_decl_stmt
begin_enum
DECL|enum|QX11EmbedInfoFlags
enum|enum
name|QX11EmbedInfoFlags
block|{
DECL|enumerator|XEMBED_MAPPED
name|XEMBED_MAPPED
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|, }
enum|;
end_enum
begin_enum
DECL|enum|QX11EmbedMessageType
enum|enum
name|QX11EmbedMessageType
block|{
DECL|enumerator|XEMBED_EMBEDDED_NOTIFY
name|XEMBED_EMBEDDED_NOTIFY
init|=
literal|0
block|,
DECL|enumerator|XEMBED_WINDOW_ACTIVATE
name|XEMBED_WINDOW_ACTIVATE
init|=
literal|1
block|,
DECL|enumerator|XEMBED_WINDOW_DEACTIVATE
name|XEMBED_WINDOW_DEACTIVATE
init|=
literal|2
block|,
DECL|enumerator|XEMBED_REQUEST_FOCUS
name|XEMBED_REQUEST_FOCUS
init|=
literal|3
block|,
DECL|enumerator|XEMBED_FOCUS_IN
name|XEMBED_FOCUS_IN
init|=
literal|4
block|,
DECL|enumerator|XEMBED_FOCUS_OUT
name|XEMBED_FOCUS_OUT
init|=
literal|5
block|,
DECL|enumerator|XEMBED_FOCUS_NEXT
name|XEMBED_FOCUS_NEXT
init|=
literal|6
block|,
DECL|enumerator|XEMBED_FOCUS_PREV
name|XEMBED_FOCUS_PREV
init|=
literal|7
block|,
DECL|enumerator|XEMBED_MODALITY_ON
name|XEMBED_MODALITY_ON
init|=
literal|10
block|,
DECL|enumerator|XEMBED_MODALITY_OFF
name|XEMBED_MODALITY_OFF
init|=
literal|11
block|,
DECL|enumerator|XEMBED_REGISTER_ACCELERATOR
name|XEMBED_REGISTER_ACCELERATOR
init|=
literal|12
block|,
DECL|enumerator|XEMBED_UNREGISTER_ACCELERATOR
name|XEMBED_UNREGISTER_ACCELERATOR
init|=
literal|13
block|,
DECL|enumerator|XEMBED_ACTIVATE_ACCELERATOR
name|XEMBED_ACTIVATE_ACCELERATOR
init|=
literal|14
block|}
enum|;
end_enum
begin_decl_stmt
DECL|variable|XEMBED_VERSION
specifier|const
name|quint32
name|XEMBED_VERSION
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|mapToNative
specifier|static
specifier|inline
name|QRect
name|mapToNative
parameter_list|(
specifier|const
name|QRect
modifier|&
name|qtRect
parameter_list|,
name|int
name|dpr
parameter_list|)
block|{
return|return
name|QRect
argument_list|(
name|qtRect
operator|.
name|x
argument_list|()
operator|*
name|dpr
argument_list|,
name|qtRect
operator|.
name|y
argument_list|()
operator|*
name|dpr
argument_list|,
name|qtRect
operator|.
name|width
argument_list|()
operator|*
name|dpr
argument_list|,
name|qtRect
operator|.
name|height
argument_list|()
operator|*
name|dpr
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// When mapping expose events to Qt rects: round top/left towards the origin and
end_comment
begin_comment
comment|// bottom/right away from the origin, making sure that we cover the whole widget
end_comment
begin_function
DECL|function|dpr_floor
specifier|static
specifier|inline
name|QPoint
name|dpr_floor
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|int
name|dpr
parameter_list|)
block|{
return|return
name|QPoint
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|/
name|dpr
argument_list|,
name|p
operator|.
name|y
argument_list|()
operator|/
name|dpr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|dpr_ceil
specifier|static
specifier|inline
name|QPoint
name|dpr_ceil
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|int
name|dpr
parameter_list|)
block|{
return|return
name|QPoint
argument_list|(
operator|(
name|p
operator|.
name|x
argument_list|()
operator|+
name|dpr
operator|-
literal|1
operator|)
operator|/
name|dpr
argument_list|,
operator|(
name|p
operator|.
name|y
argument_list|()
operator|+
name|dpr
operator|-
literal|1
operator|)
operator|/
name|dpr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mapExposeFromNative
specifier|static
specifier|inline
name|QRect
name|mapExposeFromNative
parameter_list|(
specifier|const
name|QRect
modifier|&
name|xRect
parameter_list|,
name|int
name|dpr
parameter_list|)
block|{
return|return
name|QRect
argument_list|(
name|dpr_floor
argument_list|(
name|xRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|dpr
argument_list|)
argument_list|,
name|dpr_ceil
argument_list|(
name|xRect
operator|.
name|bottomRight
argument_list|()
argument_list|,
name|dpr
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mapGeometryFromNative
specifier|static
specifier|inline
name|QRect
name|mapGeometryFromNative
parameter_list|(
specifier|const
name|QRect
modifier|&
name|xRect
parameter_list|,
name|int
name|dpr
parameter_list|)
block|{
return|return
name|QRect
argument_list|(
name|xRect
operator|.
name|topLeft
argument_list|()
operator|/
name|dpr
argument_list|,
name|xRect
operator|.
name|bottomRight
argument_list|()
operator|/
name|dpr
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Returns \c true if we should set WM_TRANSIENT_FOR on \a w
end_comment
begin_function
DECL|function|isTransient
specifier|static
specifier|inline
name|bool
name|isTransient
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
return|return
name|w
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|w
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|Sheet
operator|||
name|w
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|w
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|SplashScreen
operator|||
name|w
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|w
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|Drawer
operator|||
name|w
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
return|;
block|}
end_function
begin_function
DECL|function|imageFormatForVisual
specifier|static
specifier|inline
name|QImage
operator|::
name|Format
name|imageFormatForVisual
parameter_list|(
name|int
name|depth
parameter_list|,
name|quint32
name|red_mask
parameter_list|,
name|quint32
name|blue_mask
parameter_list|)
block|{
switch|switch
condition|(
name|depth
condition|)
block|{
case|case
literal|32
case|:
if|if
condition|(
name|blue_mask
operator|==
literal|0xff
condition|)
return|return
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
return|;
if|if
condition|(
name|red_mask
operator|==
literal|0x3ff
condition|)
return|return
name|QImage
operator|::
name|Format_A2BGR30_Premultiplied
return|;
if|if
condition|(
name|blue_mask
operator|==
literal|0x3ff
condition|)
return|return
name|QImage
operator|::
name|Format_A2RGB30_Premultiplied
return|;
break|break;
case|case
literal|30
case|:
if|if
condition|(
name|red_mask
operator|==
literal|0x3ff
condition|)
return|return
name|QImage
operator|::
name|Format_BGR30
return|;
if|if
condition|(
name|blue_mask
operator|==
literal|0x3ff
condition|)
return|return
name|QImage
operator|::
name|Format_RGB30
return|;
break|break;
case|case
literal|24
case|:
if|if
condition|(
name|blue_mask
operator|==
literal|0xff
condition|)
return|return
name|QImage
operator|::
name|Format_RGB32
return|;
break|break;
case|case
literal|16
case|:
if|if
condition|(
name|blue_mask
operator|==
literal|0x1f
condition|)
return|return
name|QImage
operator|::
name|Format_RGB16
return|;
break|break;
default|default:
break|break;
block|}
name|qWarning
argument_list|(
literal|"Unsupported screen format: depth: %d, red_mask: %x, blue_mask: %x"
argument_list|,
name|depth
argument_list|,
name|red_mask
argument_list|,
name|blue_mask
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|depth
condition|)
block|{
case|case
literal|24
case|:
name|qWarning
argument_list|(
literal|"Using RGB32 fallback, if this works your X11 server is reporting a bad screen format."
argument_list|)
expr_stmt|;
return|return
name|QImage
operator|::
name|Format_RGB32
return|;
case|case
literal|16
case|:
name|qWarning
argument_list|(
literal|"Using RGB16 fallback, if this works your X11 server is reporting a bad screen format."
argument_list|)
expr_stmt|;
return|return
name|QImage
operator|::
name|Format_RGB16
return|;
default|default:
break|break;
block|}
return|return
name|QImage
operator|::
name|Format_Invalid
return|;
block|}
end_function
begin_function
DECL|function|positionIncludesFrame
specifier|static
specifier|inline
name|bool
name|positionIncludesFrame
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
return|return
name|qt_window_private
argument_list|(
name|w
argument_list|)
operator|->
name|positionPolicy
operator|==
name|QWindowPrivate
operator|::
name|WindowFrameInclusive
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|wm_window_type_property_id
specifier|static
specifier|const
name|char
modifier|*
name|wm_window_type_property_id
init|=
literal|"_q_xcb_wm_window_type"
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QXcbWindow
name|QXcbWindow
operator|::
name|QXcbWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QPlatformWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_window
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_syncCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_gravity
argument_list|(
name|XCB_GRAVITY_STATIC
argument_list|)
member_init_list|,
name|m_mapped
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_transparent
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_usingSyncProtocol
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_deferredActivation
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_embedded
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_alertState
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_netWmUserTimeWindow
argument_list|(
name|XCB_NONE
argument_list|)
member_init_list|,
name|m_dirtyFrameMargins
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_lastWindowStateEvent
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_syncState
argument_list|(
name|NoSyncNeeded
argument_list|)
member_init_list|,
name|m_pendingSyncRequest
argument_list|(
literal|0
argument_list|)
block|{
name|setConnection
argument_list|(
name|xcbScreen
argument_list|()
operator|->
name|connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_CLASS_ENUM
end_ifdef
begin_enum_decl
DECL|enum|quint32
enum_decl|enum :
name|quint32
block|{
else|#
directive|else
enum|enum
block|{
endif|#
directive|endif
DECL|enumerator|baseEventMask
name|baseEventMask
init|=
name|XCB_EVENT_MASK_EXPOSURE
operator||
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_PROPERTY_CHANGE
operator||
name|XCB_EVENT_MASK_FOCUS_CHANGE
block|,
DECL|enumerator|defaultEventMask
name|defaultEventMask
init|=
name|baseEventMask
operator||
name|XCB_EVENT_MASK_KEY_PRESS
operator||
name|XCB_EVENT_MASK_KEY_RELEASE
operator||
name|XCB_EVENT_MASK_BUTTON_PRESS
operator||
name|XCB_EVENT_MASK_BUTTON_RELEASE
operator||
name|XCB_EVENT_MASK_BUTTON_MOTION
operator||
name|XCB_EVENT_MASK_ENTER_WINDOW
operator||
name|XCB_EVENT_MASK_LEAVE_WINDOW
operator||
name|XCB_EVENT_MASK_POINTER_MOTION
block|,
DECL|enumerator|transparentForInputEventMask
name|transparentForInputEventMask
init|=
name|baseEventMask
operator||
name|XCB_EVENT_MASK_VISIBILITY_CHANGE
operator||
name|XCB_EVENT_MASK_RESIZE_REDIRECT
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
operator||
name|XCB_EVENT_MASK_COLOR_MAP_CHANGE
operator||
name|XCB_EVENT_MASK_OWNER_GRAB_BUTTON
block|}
enum|;
DECL|function|create
name|void
name|QXcbWindow
operator|::
name|create
parameter_list|()
block|{
if|if
condition|(
name|window
argument_list|()
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|ForeignWindow
condition|)
block|{
name|m_window
operator|=
name|window
argument_list|()
operator|->
name|winId
argument_list|()
expr_stmt|;
return|return;
block|}
name|destroy
argument_list|()
expr_stmt|;
name|m_deferredExpose
operator|=
literal|false
expr_stmt|;
name|m_configureNotifyPending
operator|=
literal|true
expr_stmt|;
name|m_windowState
operator|=
name|Qt
operator|::
name|WindowNoState
expr_stmt|;
name|Qt
operator|::
name|WindowType
name|type
init|=
name|window
argument_list|()
operator|->
name|type
argument_list|()
decl_stmt|;
name|QXcbScreen
modifier|*
name|platformScreen
init|=
name|xcbScreen
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Desktop
condition|)
block|{
name|m_window
operator|=
name|platformScreen
operator|->
name|root
argument_list|()
expr_stmt|;
name|m_depth
operator|=
name|platformScreen
operator|->
name|screen
argument_list|()
operator|->
name|root_depth
expr_stmt|;
name|m_visualId
operator|=
name|platformScreen
operator|->
name|screen
argument_list|()
operator|->
name|root_visual
expr_stmt|;
specifier|const
name|xcb_visualtype_t
modifier|*
name|visual
init|=
name|platformScreen
operator|->
name|visualForId
argument_list|(
name|m_visualId
argument_list|)
decl_stmt|;
name|m_imageFormat
operator|=
name|imageFormatForVisual
argument_list|(
name|m_depth
argument_list|,
name|visual
operator|->
name|red_mask
argument_list|,
name|visual
operator|->
name|blue_mask
argument_list|)
expr_stmt|;
name|connection
argument_list|()
operator|->
name|addWindowEventListener
argument_list|(
name|m_window
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Determine gravity from initial position. Do not change
comment|// later as it will cause the window to move uncontrollably.
name|m_gravity
operator|=
name|positionIncludesFrame
argument_list|(
name|window
argument_list|()
argument_list|)
condition|?
name|XCB_GRAVITY_NORTH_WEST
else|:
name|XCB_GRAVITY_STATIC
expr_stmt|;
specifier|const
name|quint32
name|mask
init|=
name|XCB_CW_BACK_PIXMAP
operator||
name|XCB_CW_OVERRIDE_REDIRECT
operator||
name|XCB_CW_SAVE_UNDER
operator||
name|XCB_CW_EVENT_MASK
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
comment|// XCB_CW_BACK_PIXMAP
name|XCB_NONE
block|,
comment|// XCB_CW_OVERRIDE_REDIRECT
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
operator|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|BypassWindowManagerHint
operator|)
block|,
comment|// XCB_CW_SAVE_UNDER
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|||
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|type
operator|==
name|Qt
operator|::
name|Drawer
block|,
comment|// XCB_CW_EVENT_MASK
name|defaultEventMask
block|}
decl_stmt|;
comment|// Parameters to XCreateWindow() are frame corner + inner size.
comment|// This fits in case position policy is frame inclusive. There is
comment|// currently no way to implement it for frame-exclusive geometries.
name|QRect
name|rect
init|=
name|window
argument_list|()
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|QXcbScreen
modifier|*
name|currentScreen
init|=
name|xcbScreen
argument_list|()
decl_stmt|;
name|QPlatformScreen
modifier|*
name|newScreen
init|=
name|screenForGeometry
argument_list|(
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
name|newScreen
operator|!=
name|currentScreen
condition|)
name|QWindowSystemInterface
operator|::
name|handleWindowScreenChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|newScreen
operator|->
name|screen
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|dpr
init|=
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|minimumSize
init|=
name|window
argument_list|()
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|||
name|rect
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
block|{
name|rect
operator|.
name|setWidth
argument_list|(
name|qBound
argument_list|(
literal|1
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|XCOORD_MAX
operator|/
name|dpr
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|qBound
argument_list|(
literal|1
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|XCOORD_MAX
operator|/
name|dpr
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|minimumSize
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|||
name|minimumSize
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
block|{
name|rect
operator|.
name|setSize
argument_list|(
name|minimumSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|.
name|setWidth
argument_list|(
name|defaultWindowWidth
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|defaultWindowHeight
argument_list|)
expr_stmt|;
block|}
name|xcb_window_t
name|xcb_parent_id
init|=
name|platformScreen
operator|->
name|root
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
argument_list|()
condition|)
block|{
name|xcb_parent_id
operator|=
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
operator|->
name|xcb_window
argument_list|()
expr_stmt|;
name|m_embedded
operator|=
name|parent
argument_list|()
operator|->
name|window
argument_list|()
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|ForeignWindow
expr_stmt|;
name|QSurfaceFormat
name|parentFormat
init|=
name|parent
argument_list|()
operator|->
name|window
argument_list|()
operator|->
name|requestedFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|surfaceType
argument_list|()
operator|!=
name|QSurface
operator|::
name|OpenGLSurface
operator|&&
name|parentFormat
operator|.
name|hasAlpha
argument_list|()
condition|)
block|{
name|window
argument_list|()
operator|->
name|setFormat
argument_list|(
name|parentFormat
argument_list|)
expr_stmt|;
block|}
block|}
name|resolveFormat
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|OpenGL
argument_list|)
condition|)
block|{
name|XVisualInfo
modifier|*
name|visualInfo
init|=
cast|static_cast
argument_list|<
name|XVisualInfo
operator|*
argument_list|>
argument_list|(
name|createVisual
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|visualInfo
operator|&&
name|window
argument_list|()
operator|->
name|surfaceType
argument_list|()
operator|==
name|QSurface
operator|::
name|OpenGLSurface
condition|)
name|qFatal
argument_list|(
literal|"Could not initialize OpenGL"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|visualInfo
operator|&&
name|window
argument_list|()
operator|->
name|surfaceType
argument_list|()
operator|==
name|QSurface
operator|::
name|RasterGLSurface
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not initialize OpenGL for RasterGLSurface, reverting to RasterSurface."
argument_list|)
expr_stmt|;
name|window
argument_list|()
operator|->
name|setSurfaceType
argument_list|(
name|QSurface
operator|::
name|RasterSurface
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|visualInfo
condition|)
block|{
name|m_depth
operator|=
name|visualInfo
operator|->
name|depth
expr_stmt|;
name|m_imageFormat
operator|=
name|imageFormatForVisual
argument_list|(
name|visualInfo
operator|->
name|depth
argument_list|,
name|visualInfo
operator|->
name|red_mask
argument_list|,
name|visualInfo
operator|->
name|blue_mask
argument_list|)
expr_stmt|;
name|Colormap
name|cmap
init|=
name|XCreateColormap
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|xcb_parent_id
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|AllocNone
argument_list|)
decl_stmt|;
name|XSetWindowAttributes
name|a
decl_stmt|;
name|a
operator|.
name|background_pixel
operator|=
name|WhitePixel
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|platformScreen
operator|->
name|screenNumber
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|border_pixel
operator|=
name|BlackPixel
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|platformScreen
operator|->
name|screenNumber
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|colormap
operator|=
name|cmap
expr_stmt|;
name|m_visualId
operator|=
name|visualInfo
operator|->
name|visualid
expr_stmt|;
specifier|const
name|QRect
name|xRect
init|=
name|mapToNative
argument_list|(
name|rect
argument_list|,
name|dpr
argument_list|)
decl_stmt|;
name|m_window
operator|=
name|XCreateWindow
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|xcb_parent_id
argument_list|,
name|xRect
operator|.
name|x
argument_list|()
argument_list|,
name|xRect
operator|.
name|y
argument_list|()
argument_list|,
name|xRect
operator|.
name|width
argument_list|()
argument_list|,
name|xRect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|visualInfo
operator|->
name|depth
argument_list|,
name|InputOutput
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|CWBackPixel
operator||
name|CWBorderPixel
operator||
name|CWColormap
argument_list|,
operator|&
name|a
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
name|visualInfo
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|m_window
condition|)
block|{
name|m_window
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|m_visualId
operator|=
name|platformScreen
operator|->
name|screen
argument_list|()
operator|->
name|root_visual
expr_stmt|;
name|m_depth
operator|=
name|platformScreen
operator|->
name|screen
argument_list|()
operator|->
name|root_depth
expr_stmt|;
name|uint32_t
name|mask
init|=
literal|0
decl_stmt|;
name|uint32_t
name|values
index|[
literal|3
index|]
decl_stmt|;
if|if
condition|(
name|m_format
operator|.
name|alphaBufferSize
argument_list|()
operator|==
literal|8
condition|)
block|{
name|xcb_depth_iterator_t
name|depthIter
init|=
name|xcb_screen_allowed_depths_iterator
argument_list|(
name|platformScreen
operator|->
name|screen
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|depthIter
operator|.
name|rem
condition|)
block|{
if|if
condition|(
name|depthIter
operator|.
name|data
operator|->
name|depth
operator|==
literal|32
condition|)
block|{
name|xcb_visualtype_iterator_t
name|visualIter
init|=
name|xcb_depth_visuals_iterator
argument_list|(
name|depthIter
operator|.
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|visualIter
operator|.
name|rem
condition|)
block|{
name|m_visualId
operator|=
name|visualIter
operator|.
name|data
operator|->
name|visual_id
expr_stmt|;
name|m_depth
operator|=
literal|32
expr_stmt|;
name|uint32_t
name|colormap
init|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
decl_stmt|;
name|xcb_create_colormap
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_COLORMAP_ALLOC_NONE
argument_list|,
name|colormap
argument_list|,
name|xcb_parent_id
argument_list|,
name|m_visualId
argument_list|)
expr_stmt|;
name|mask
operator||=
name|XCB_CW_BACK_PIXEL
operator||
name|XCB_CW_BORDER_PIXEL
operator||
name|XCB_CW_COLORMAP
expr_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|platformScreen
operator|->
name|screen
argument_list|()
operator|->
name|white_pixel
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
name|platformScreen
operator|->
name|screen
argument_list|()
operator|->
name|black_pixel
expr_stmt|;
name|values
index|[
literal|2
index|]
operator|=
name|colormap
expr_stmt|;
break|break;
block|}
block|}
name|xcb_depth_next
argument_list|(
operator|&
name|depthIter
argument_list|)
expr_stmt|;
block|}
block|}
specifier|const
name|xcb_visualtype_t
modifier|*
name|visual
init|=
name|platformScreen
operator|->
name|visualForId
argument_list|(
name|m_visualId
argument_list|)
decl_stmt|;
name|m_imageFormat
operator|=
name|imageFormatForVisual
argument_list|(
name|m_depth
argument_list|,
name|visual
operator|->
name|red_mask
argument_list|,
name|visual
operator|->
name|blue_mask
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_create_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_depth
argument_list|,
name|m_window
argument_list|,
comment|// window id
name|xcb_parent_id
argument_list|,
comment|// parent window id
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
comment|// border width
name|XCB_WINDOW_CLASS_INPUT_OUTPUT
argument_list|,
comment|// window class
name|m_visualId
argument_list|,
comment|// visual
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
argument_list|()
operator|->
name|addWindowEventListener
argument_list|(
name|m_window
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_window_attributes
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|propagateSizeHints
argument_list|()
expr_stmt|;
name|xcb_atom_t
name|properties
index|[
literal|5
index|]
decl_stmt|;
name|int
name|propertyCount
init|=
literal|0
decl_stmt|;
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_DELETE_WINDOW
argument_list|)
expr_stmt|;
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_TAKE_FOCUS
argument_list|)
expr_stmt|;
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_PING
argument_list|)
expr_stmt|;
if|if
condition|(
name|platformScreen
operator|->
name|syncRequestSupported
argument_list|()
condition|)
name|m_usingSyncProtocol
operator|=
name|supportsSyncProtocol
argument_list|()
expr_stmt|;
else|else
name|m_usingSyncProtocol
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|m_usingSyncProtocol
condition|)
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_SYNC_REQUEST
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_CONTEXT_HELP
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_PROTOCOLS
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|32
argument_list|,
name|propertyCount
argument_list|,
name|properties
argument_list|)
argument_list|)
expr_stmt|;
name|m_syncValue
operator|.
name|hi
operator|=
literal|0
expr_stmt|;
name|m_syncValue
operator|.
name|lo
operator|=
literal|0
expr_stmt|;
specifier|const
name|QByteArray
name|wmClass
init|=
name|QXcbIntegration
operator|::
name|instance
argument_list|()
operator|->
name|wmClass
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|wmClass
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_CLASS
argument_list|)
argument_list|,
name|XCB_ATOM_STRING
argument_list|,
literal|8
argument_list|,
name|wmClass
operator|.
name|size
argument_list|()
argument_list|,
name|wmClass
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_usingSyncProtocol
condition|)
block|{
name|m_syncCounter
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_sync_create_counter
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_syncCounter
argument_list|,
name|m_syncValue
argument_list|)
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_SYNC_REQUEST_COUNTER
argument_list|)
argument_list|,
name|XCB_ATOM_CARDINAL
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|m_syncCounter
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set the PID to let the WM kill the application if unresponsive
name|quint32
name|pid
init|=
name|getpid
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_PID
argument_list|)
argument_list|,
name|XCB_ATOM_CARDINAL
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_wm_hints_t
name|hints
decl_stmt|;
name|memset
argument_list|(
operator|&
name|hints
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|hints
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_wm_hints_set_normal
argument_list|(
operator|&
name|hints
argument_list|)
expr_stmt|;
name|xcb_wm_hints_set_input
argument_list|(
operator|&
name|hints
argument_list|,
operator|!
operator|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowDoesNotAcceptFocus
operator|)
argument_list|)
expr_stmt|;
name|xcb_set_wm_hints
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
operator|&
name|hints
argument_list|)
expr_stmt|;
name|xcb_window_t
name|leader
init|=
name|platformScreen
operator|->
name|clientLeader
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_CLIENT_LEADER
argument_list|)
argument_list|,
name|XCB_ATOM_WINDOW
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|leader
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Add XEMBED info; this operation doesn't initiate the embedding. */
name|quint32
name|data
index|[]
init|=
block|{
name|XEMBED_VERSION
block|,
name|XEMBED_MAPPED
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_XEMBED_INFO
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_XEMBED_INFO
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|2
argument_list|,
operator|(
name|void
operator|*
operator|)
name|data
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_XINPUT2
argument_list|)
name|connection
argument_list|()
operator|->
name|xi2Select
argument_list|(
name|m_window
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setWindowState
argument_list|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
argument_list|)
expr_stmt|;
name|setWindowFlags
argument_list|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|window
argument_list|()
operator|->
name|title
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowTransparentForInput
condition|)
name|setTransparentForMouseEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
comment|// force sync to read outstanding requests - see QTBUG-29106
name|XSync
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|platformScreen
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|connection
argument_list|()
operator|->
name|drag
argument_list|()
operator|->
name|dndEnable
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|qreal
name|opacity
init|=
name|qt_window_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|opacity
decl_stmt|;
if|if
condition|(
operator|!
name|qFuzzyCompare
argument_list|(
name|opacity
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
condition|)
name|setOpacity
argument_list|(
name|opacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
condition|)
name|setWindowIcon
argument_list|(
name|window
argument_list|()
operator|->
name|icon
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|~QXcbWindow
name|QXcbWindow
operator|::
name|~
name|QXcbWindow
parameter_list|()
block|{
if|if
condition|(
name|window
argument_list|()
operator|->
name|type
argument_list|()
operator|!=
name|Qt
operator|::
name|ForeignWindow
condition|)
name|destroy
argument_list|()
expr_stmt|;
block|}
DECL|function|destroy
name|void
name|QXcbWindow
operator|::
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|connection
argument_list|()
operator|->
name|focusWindow
argument_list|()
operator|==
name|this
condition|)
name|doFocusOut
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_syncCounter
operator|&&
name|m_usingSyncProtocol
condition|)
name|Q_XCB_CALL
argument_list|(
name|xcb_sync_destroy_counter
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_syncCounter
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_window
condition|)
block|{
if|if
condition|(
name|m_netWmUserTimeWindow
condition|)
block|{
name|xcb_delete_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME_WINDOW
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some window managers, like metacity, do XSelectInput on the _NET_WM_USER_TIME_WINDOW window,
comment|// without trapping BadWindow (which crashes when the user time window is destroyed).
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
name|xcb_destroy_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_netWmUserTimeWindow
argument_list|)
expr_stmt|;
name|m_netWmUserTimeWindow
operator|=
name|XCB_NONE
expr_stmt|;
block|}
name|connection
argument_list|()
operator|->
name|removeWindowEventListener
argument_list|(
name|m_window
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_destroy_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
name|m_window
operator|=
literal|0
expr_stmt|;
block|}
name|m_mapped
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|m_pendingSyncRequest
condition|)
name|m_pendingSyncRequest
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
DECL|function|maybeSetScreen
name|void
name|QXcbWindow
operator|::
name|maybeSetScreen
parameter_list|(
name|QXcbScreen
modifier|*
name|screen
parameter_list|)
block|{
if|if
condition|(
operator|!
name|window
argument_list|()
operator|->
name|screen
argument_list|()
operator|&&
name|screen
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
operator|*
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleWindowScreenChanged
argument_list|(
name|window
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QPlatformScreen
operator|*
argument_list|>
argument_list|(
name|screen
argument_list|)
operator|->
name|screen
argument_list|()
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRegion
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|window
argument_list|()
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|setGeometry
name|void
name|QXcbWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|propagateSizeHints
argument_list|()
expr_stmt|;
name|QXcbScreen
modifier|*
name|currentScreen
init|=
name|xcbScreen
argument_list|()
decl_stmt|;
name|QPlatformScreen
modifier|*
name|newScreen
init|=
name|screenForGeometry
argument_list|(
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newScreen
condition|)
name|newScreen
operator|=
name|currentScreen
expr_stmt|;
specifier|const
name|QRect
name|xRect
init|=
name|mapToNative
argument_list|(
name|rect
argument_list|,
name|int
argument_list|(
name|newScreen
operator|->
name|devicePixelRatio
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|wmGeometry
init|=
name|windowToWmGeometry
argument_list|(
name|xRect
argument_list|)
decl_stmt|;
if|if
condition|(
name|newScreen
operator|!=
name|currentScreen
condition|)
name|QWindowSystemInterface
operator|::
name|handleWindowScreenChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|newScreen
operator|->
name|screen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_window_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|positionAutomatic
condition|)
block|{
specifier|const
name|quint32
name|mask
init|=
name|XCB_CONFIG_WINDOW_WIDTH
operator||
name|XCB_CONFIG_WINDOW_HEIGHT
decl_stmt|;
specifier|const
name|qint32
name|values
index|[]
init|=
block|{
name|qBound
argument_list|<
name|qint32
argument_list|>
argument_list|(
literal|1
argument_list|,
name|wmGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
block|,
name|qBound
argument_list|<
name|qint32
argument_list|>
argument_list|(
literal|1
argument_list|,
name|wmGeometry
operator|.
name|height
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
block|,         }
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_configure_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|values
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|quint32
name|mask
init|=
name|XCB_CONFIG_WINDOW_X
operator||
name|XCB_CONFIG_WINDOW_Y
operator||
name|XCB_CONFIG_WINDOW_WIDTH
operator||
name|XCB_CONFIG_WINDOW_HEIGHT
decl_stmt|;
specifier|const
name|qint32
name|values
index|[]
init|=
block|{
name|qBound
argument_list|<
name|qint32
argument_list|>
argument_list|(
operator|-
name|XCOORD_MAX
argument_list|,
name|wmGeometry
operator|.
name|x
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
block|,
name|qBound
argument_list|<
name|qint32
argument_list|>
argument_list|(
operator|-
name|XCOORD_MAX
argument_list|,
name|wmGeometry
operator|.
name|y
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
block|,
name|qBound
argument_list|<
name|qint32
argument_list|>
argument_list|(
literal|1
argument_list|,
name|wmGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
block|,
name|qBound
argument_list|<
name|qint32
argument_list|>
argument_list|(
literal|1
argument_list|,
name|wmGeometry
operator|.
name|height
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
block|,         }
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_configure_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|values
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|frameMargins
name|QMargins
name|QXcbWindow
operator|::
name|frameMargins
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_dirtyFrameMargins
condition|)
block|{
name|xcb_window_t
name|window
init|=
name|m_window
decl_stmt|;
name|xcb_window_t
name|parent
init|=
name|m_window
decl_stmt|;
name|bool
name|foundRoot
init|=
literal|false
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|xcb_window_t
argument_list|>
modifier|&
name|virtualRoots
init|=
name|connection
argument_list|()
operator|->
name|wmSupport
argument_list|()
operator|->
name|virtualRoots
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|foundRoot
condition|)
block|{
name|xcb_query_tree_cookie_t
name|cookie
init|=
name|xcb_query_tree_unchecked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|xcb_query_tree_reply_t
modifier|*
name|reply
init|=
name|xcb_query_tree_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
if|if
condition|(
name|reply
operator|->
name|root
operator|==
name|reply
operator|->
name|parent
operator|||
name|virtualRoots
operator|.
name|indexOf
argument_list|(
name|reply
operator|->
name|parent
argument_list|)
operator|!=
operator|-
literal|1
operator|||
name|reply
operator|->
name|parent
operator|==
name|XCB_WINDOW_NONE
condition|)
block|{
name|foundRoot
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|window
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
name|reply
operator|->
name|parent
expr_stmt|;
block|}
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_dirtyFrameMargins
operator|=
literal|false
expr_stmt|;
name|m_frameMargins
operator|=
name|QMargins
argument_list|()
expr_stmt|;
return|return
name|m_frameMargins
return|;
block|}
block|}
name|QPoint
name|offset
decl_stmt|;
name|xcb_translate_coordinates_reply_t
modifier|*
name|reply
init|=
name|xcb_translate_coordinates_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_translate_coordinates
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|window
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
name|offset
operator|=
name|QPoint
argument_list|(
name|reply
operator|->
name|dst_x
argument_list|,
name|reply
operator|->
name|dst_y
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
name|xcb_get_geometry_reply_t
modifier|*
name|geom
init|=
name|xcb_get_geometry_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_get_geometry
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|parent
argument_list|)
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|geom
condition|)
block|{
comment|// --
comment|// add the border_width for the window managers frame... some window managers
comment|// do not use a border_width of zero for their frames, and if we the left and
comment|// top strut, we ensure that pos() is absolutely correct.  frameGeometry()
comment|// will still be incorrect though... perhaps i should have foffset as well, to
comment|// indicate the frame offset (equal to the border_width on X).
comment|// - Brad
comment|// -- copied from qwidget_x11.cpp
name|int
name|left
init|=
name|offset
operator|.
name|x
argument_list|()
operator|+
name|geom
operator|->
name|border_width
decl_stmt|;
name|int
name|top
init|=
name|offset
operator|.
name|y
argument_list|()
operator|+
name|geom
operator|->
name|border_width
decl_stmt|;
name|int
name|right
init|=
name|geom
operator|->
name|width
operator|+
name|geom
operator|->
name|border_width
operator|-
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
operator|-
name|offset
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|bottom
init|=
name|geom
operator|->
name|height
operator|+
name|geom
operator|->
name|border_width
operator|-
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|offset
operator|.
name|y
argument_list|()
decl_stmt|;
name|m_frameMargins
operator|=
name|QMargins
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|geom
argument_list|)
expr_stmt|;
block|}
name|m_dirtyFrameMargins
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|m_frameMargins
return|;
block|}
DECL|function|setVisible
name|void
name|QXcbWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|visible
condition|)
name|show
argument_list|()
expr_stmt|;
else|else
name|hide
argument_list|()
expr_stmt|;
block|}
DECL|function|show
name|void
name|QXcbWindow
operator|::
name|show
parameter_list|()
block|{
if|if
condition|(
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
condition|)
block|{
name|xcb_get_property_cookie_t
name|cookie
init|=
name|xcb_get_wm_hints_unchecked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
decl_stmt|;
name|xcb_wm_hints_t
name|hints
decl_stmt|;
name|xcb_get_wm_hints_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
operator|&
name|hints
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
name|xcb_wm_hints_set_iconic
argument_list|(
operator|&
name|hints
argument_list|)
expr_stmt|;
else|else
name|xcb_wm_hints_set_normal
argument_list|(
operator|&
name|hints
argument_list|)
expr_stmt|;
name|xcb_wm_hints_set_input
argument_list|(
operator|&
name|hints
argument_list|,
operator|!
operator|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowDoesNotAcceptFocus
operator|)
argument_list|)
expr_stmt|;
name|xcb_set_wm_hints
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
operator|&
name|hints
argument_list|)
expr_stmt|;
comment|// update WM_NORMAL_HINTS
name|propagateSizeHints
argument_list|()
expr_stmt|;
comment|// update WM_TRANSIENT_FOR
specifier|const
name|QWindow
modifier|*
name|tp
init|=
name|window
argument_list|()
operator|->
name|transientParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTransient
argument_list|(
name|window
argument_list|()
argument_list|)
operator|||
name|tp
operator|!=
literal|0
condition|)
block|{
name|xcb_window_t
name|transientXcbParent
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|tp
operator|&&
name|tp
operator|->
name|handle
argument_list|()
condition|)
name|transientXcbParent
operator|=
cast|static_cast
argument_list|<
specifier|const
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|tp
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|winId
argument_list|()
expr_stmt|;
comment|// Default to client leader if there is no transient parent, else modal dialogs can
comment|// be hidden by their parents.
if|if
condition|(
operator|!
name|transientXcbParent
condition|)
name|transientXcbParent
operator|=
name|xcbScreen
argument_list|()
operator|->
name|clientLeader
argument_list|()
expr_stmt|;
if|if
condition|(
name|transientXcbParent
condition|)
block|{
comment|// ICCCM 4.1.2.6
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|XCB_ATOM_WM_TRANSIENT_FOR
argument_list|,
name|XCB_ATOM_WINDOW
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|transientXcbParent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update _MOTIF_WM_HINTS
name|updateMotifWmHintsBeforeMap
argument_list|()
expr_stmt|;
comment|// update _NET_WM_STATE
name|updateNetWmStateBeforeMap
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|indexOfProperty
argument_list|(
name|wm_window_type_property_id
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|QXcbWindowFunctions
operator|::
name|WmWindowTypes
name|wmWindowTypes
argument_list|(
name|window
argument_list|()
operator|->
name|property
argument_list|(
name|wm_window_type_property_id
argument_list|)
operator|.
name|value
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|setWmWindowType
argument_list|(
name|wmWindowTypes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connection
argument_list|()
operator|->
name|time
argument_list|()
operator|!=
name|XCB_TIME_CURRENT_TIME
condition|)
name|updateNetWmUserTime
argument_list|(
name|connection
argument_list|()
operator|->
name|time
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"QSystemTrayIconSysWindow"
argument_list|)
condition|)
return|return;
comment|// defer showing until XEMBED_EMBEDDED_NOTIFY
name|Q_XCB_CALL
argument_list|(
name|xcb_map_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QGuiApplication
operator|::
name|modalWindow
argument_list|()
operator|==
name|window
argument_list|()
condition|)
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|xcbScreen
argument_list|()
operator|->
name|windowShown
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
block|}
DECL|function|hide
name|void
name|QXcbWindow
operator|::
name|hide
parameter_list|()
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_unmap_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
comment|// send synthetic UnmapNotify event according to icccm 4.1.4
if|if
condition|(
name|xcbScreen
argument_list|()
condition|)
block|{
name|xcb_unmap_notify_event_t
name|event
decl_stmt|;
name|event
operator|.
name|response_type
operator|=
name|XCB_UNMAP_NOTIFY
expr_stmt|;
name|event
operator|.
name|event
operator|=
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
expr_stmt|;
name|event
operator|.
name|window
operator|=
name|m_window
expr_stmt|;
name|event
operator|.
name|from_configure
operator|=
literal|false
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|m_mapped
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|tlWindow
specifier|static
name|QWindow
modifier|*
name|tlWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
name|window
operator|&&
name|window
operator|->
name|parent
argument_list|()
condition|)
return|return
name|tlWindow
argument_list|(
name|window
operator|->
name|parent
argument_list|()
argument_list|)
return|;
return|return
name|window
return|;
block|}
DECL|function|relayFocusToModalWindow
name|bool
name|QXcbWindow
operator|::
name|relayFocusToModalWindow
parameter_list|()
specifier|const
block|{
name|QWindow
modifier|*
name|w
init|=
name|tlWindow
argument_list|(
cast|static_cast
argument_list|<
name|QWindowPrivate
operator|*
argument_list|>
argument_list|(
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|window
argument_list|()
argument_list|)
argument_list|)
operator|->
name|eventReceiver
argument_list|()
argument_list|)
decl_stmt|;
name|QWindow
modifier|*
name|modal_window
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|isWindowBlocked
argument_list|(
name|w
argument_list|,
operator|&
name|modal_window
argument_list|)
operator|&&
name|modal_window
operator|!=
name|w
condition|)
block|{
name|modal_window
operator|->
name|requestActivate
argument_list|()
expr_stmt|;
name|connection
argument_list|()
operator|->
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|doFocusIn
name|void
name|QXcbWindow
operator|::
name|doFocusIn
parameter_list|()
block|{
if|if
condition|(
name|relayFocusToModalWindow
argument_list|()
condition|)
return|return;
name|QWindow
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWindowPrivate
operator|*
argument_list|>
argument_list|(
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|window
argument_list|()
argument_list|)
argument_list|)
operator|->
name|eventReceiver
argument_list|()
decl_stmt|;
name|connection
argument_list|()
operator|->
name|setFocusWindow
argument_list|(
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|w
operator|->
name|handle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|w
argument_list|,
name|Qt
operator|::
name|ActiveWindowFocusReason
argument_list|)
expr_stmt|;
block|}
DECL|function|focusInPeeker
specifier|static
name|bool
name|focusInPeeker
parameter_list|(
name|QXcbConnection
modifier|*
name|connection
parameter_list|,
name|xcb_generic_event_t
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
condition|)
block|{
comment|// FocusIn event is not in the queue, proceed with FocusOut normally.
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|ActiveWindowFocusReason
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|uint
name|response_type
init|=
name|event
operator|->
name|response_type
operator|&
operator|~
literal|0x80
decl_stmt|;
if|if
condition|(
name|response_type
operator|==
name|XCB_FOCUS_IN
condition|)
return|return
literal|true
return|;
comment|/* We are also interested in XEMBED_FOCUS_IN events */
if|if
condition|(
name|response_type
operator|==
name|XCB_CLIENT_MESSAGE
condition|)
block|{
name|xcb_client_message_event_t
modifier|*
name|cme
init|=
operator|(
name|xcb_client_message_event_t
operator|*
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|cme
operator|->
name|type
operator|==
name|connection
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_XEMBED
argument_list|)
operator|&&
name|cme
operator|->
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|==
name|XEMBED_FOCUS_IN
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|doFocusOut
name|void
name|QXcbWindow
operator|::
name|doFocusOut
parameter_list|()
block|{
if|if
condition|(
name|relayFocusToModalWindow
argument_list|()
condition|)
return|return;
name|connection
argument_list|()
operator|->
name|setFocusWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Do not set the active window to 0 if there is a FocusIn coming.
comment|// There is however no equivalent for XPutBackEvent so register a
comment|// callback for QXcbConnection instead.
name|connection
argument_list|()
operator|->
name|addPeekFunc
argument_list|(
name|focusInPeeker
argument_list|)
expr_stmt|;
block|}
DECL|struct|QtMotifWmHints
struct|struct
name|QtMotifWmHints
block|{
DECL|member|flags
DECL|member|functions
DECL|member|decorations
name|quint32
name|flags
operator|,
name|functions
operator|,
name|decorations
empty_stmt|;
DECL|member|input_mode
name|qint32
name|input_mode
decl_stmt|;
DECL|member|status
name|quint32
name|status
decl_stmt|;
block|}
struct|;
enum|enum
block|{
DECL|enumerator|MWM_HINTS_FUNCTIONS
name|MWM_HINTS_FUNCTIONS
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_FUNC_ALL
name|MWM_FUNC_ALL
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_FUNC_RESIZE
name|MWM_FUNC_RESIZE
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_FUNC_MOVE
name|MWM_FUNC_MOVE
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_FUNC_MINIMIZE
name|MWM_FUNC_MINIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|3
operator|)
block|,
DECL|enumerator|MWM_FUNC_MAXIMIZE
name|MWM_FUNC_MAXIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|MWM_FUNC_CLOSE
name|MWM_FUNC_CLOSE
init|=
operator|(
literal|1L
operator|<<
literal|5
operator|)
block|,
DECL|enumerator|MWM_HINTS_DECORATIONS
name|MWM_HINTS_DECORATIONS
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_DECOR_ALL
name|MWM_DECOR_ALL
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_DECOR_BORDER
name|MWM_DECOR_BORDER
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_DECOR_RESIZEH
name|MWM_DECOR_RESIZEH
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_DECOR_TITLE
name|MWM_DECOR_TITLE
init|=
operator|(
literal|1L
operator|<<
literal|3
operator|)
block|,
DECL|enumerator|MWM_DECOR_MENU
name|MWM_DECOR_MENU
init|=
operator|(
literal|1L
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|MWM_DECOR_MINIMIZE
name|MWM_DECOR_MINIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|5
operator|)
block|,
DECL|enumerator|MWM_DECOR_MAXIMIZE
name|MWM_DECOR_MAXIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|6
operator|)
block|,
DECL|enumerator|MWM_HINTS_INPUT_MODE
name|MWM_HINTS_INPUT_MODE
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_INPUT_MODELESS
name|MWM_INPUT_MODELESS
init|=
literal|0L
block|,
DECL|enumerator|MWM_INPUT_PRIMARY_APPLICATION_MODAL
name|MWM_INPUT_PRIMARY_APPLICATION_MODAL
init|=
literal|1L
block|,
DECL|enumerator|MWM_INPUT_FULL_APPLICATION_MODAL
name|MWM_INPUT_FULL_APPLICATION_MODAL
init|=
literal|3L
block|}
enum|;
DECL|function|getMotifWmHints
specifier|static
name|QtMotifWmHints
name|getMotifWmHints
parameter_list|(
name|QXcbConnection
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
block|{
name|QtMotifWmHints
name|hints
decl_stmt|;
name|xcb_get_property_cookie_t
name|get_cookie
init|=
name|xcb_get_property_unchecked
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|window
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|get_cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|&&
name|reply
operator|->
name|format
operator|==
literal|32
operator|&&
name|reply
operator|->
name|type
operator|==
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
condition|)
block|{
name|hints
operator|=
operator|*
operator|(
operator|(
name|QtMotifWmHints
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|hints
operator|.
name|flags
operator|=
literal|0L
expr_stmt|;
name|hints
operator|.
name|functions
operator|=
name|MWM_FUNC_ALL
expr_stmt|;
name|hints
operator|.
name|decorations
operator|=
name|MWM_DECOR_ALL
expr_stmt|;
name|hints
operator|.
name|input_mode
operator|=
literal|0L
expr_stmt|;
name|hints
operator|.
name|status
operator|=
literal|0L
expr_stmt|;
block|}
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
return|return
name|hints
return|;
block|}
DECL|function|setMotifWmHints
specifier|static
name|void
name|setMotifWmHints
parameter_list|(
name|QXcbConnection
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
specifier|const
name|QtMotifWmHints
modifier|&
name|hints
parameter_list|)
block|{
if|if
condition|(
name|hints
operator|.
name|flags
operator|!=
literal|0l
condition|)
block|{
name|Q_XCB_CALL2
argument_list|(
name|xcb_change_property
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|window
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|5
argument_list|,
operator|&
name|hints
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_XCB_CALL2
argument_list|(
name|xcb_delete_property
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|window
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|netWmStates
name|QXcbWindow
operator|::
name|NetWmStates
name|QXcbWindow
operator|::
name|netWmStates
parameter_list|()
block|{
name|NetWmStates
name|result
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|xcb_get_property_cookie_t
name|get_cookie
init|=
name|xcb_get_property_unchecked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|get_cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|&&
name|reply
operator|->
name|format
operator|==
literal|32
operator|&&
name|reply
operator|->
name|type
operator|==
name|XCB_ATOM_ATOM
condition|)
block|{
specifier|const
name|xcb_atom_t
modifier|*
name|states
init|=
cast|static_cast
argument_list|<
specifier|const
name|xcb_atom_t
operator|*
argument_list|>
argument_list|(
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|xcb_atom_t
modifier|*
name|statesEnd
init|=
name|states
operator|+
name|reply
operator|->
name|length
decl_stmt|;
if|if
condition|(
name|statesEnd
operator|!=
name|std
operator|::
name|find
argument_list|(
name|states
argument_list|,
name|statesEnd
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_ABOVE
argument_list|)
argument_list|)
condition|)
name|result
operator||=
name|NetWmStateAbove
expr_stmt|;
if|if
condition|(
name|statesEnd
operator|!=
name|std
operator|::
name|find
argument_list|(
name|states
argument_list|,
name|statesEnd
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_BELOW
argument_list|)
argument_list|)
condition|)
name|result
operator||=
name|NetWmStateBelow
expr_stmt|;
if|if
condition|(
name|statesEnd
operator|!=
name|std
operator|::
name|find
argument_list|(
name|states
argument_list|,
name|statesEnd
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
condition|)
name|result
operator||=
name|NetWmStateFullScreen
expr_stmt|;
if|if
condition|(
name|statesEnd
operator|!=
name|std
operator|::
name|find
argument_list|(
name|states
argument_list|,
name|statesEnd
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
condition|)
name|result
operator||=
name|NetWmStateMaximizedHorz
expr_stmt|;
if|if
condition|(
name|statesEnd
operator|!=
name|std
operator|::
name|find
argument_list|(
name|states
argument_list|,
name|statesEnd
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
condition|)
name|result
operator||=
name|NetWmStateMaximizedVert
expr_stmt|;
if|if
condition|(
name|statesEnd
operator|!=
name|std
operator|::
name|find
argument_list|(
name|states
argument_list|,
name|statesEnd
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MODAL
argument_list|)
argument_list|)
condition|)
name|result
operator||=
name|NetWmStateModal
expr_stmt|;
if|if
condition|(
name|statesEnd
operator|!=
name|std
operator|::
name|find
argument_list|(
name|states
argument_list|,
name|statesEnd
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_STAYS_ON_TOP
argument_list|)
argument_list|)
condition|)
name|result
operator||=
name|NetWmStateStaysOnTop
expr_stmt|;
if|if
condition|(
name|statesEnd
operator|!=
name|std
operator|::
name|find
argument_list|(
name|states
argument_list|,
name|statesEnd
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_DEMANDS_ATTENTION
argument_list|)
argument_list|)
condition|)
name|result
operator||=
name|NetWmStateDemandsAttention
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|NET_WM_STATE_DEBUG
name|printf
argument_list|(
literal|"getting net wm state (%x), empty\n"
argument_list|,
name|m_window
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|result
return|;
block|}
DECL|function|setNetWmStates
name|void
name|QXcbWindow
operator|::
name|setNetWmStates
parameter_list|(
name|NetWmStates
name|states
parameter_list|)
block|{
name|QVector
argument_list|<
name|xcb_atom_t
argument_list|>
name|atoms
decl_stmt|;
if|if
condition|(
name|states
operator|&
name|NetWmStateAbove
condition|)
name|atoms
operator|.
name|push_back
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_ABOVE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|states
operator|&
name|NetWmStateBelow
condition|)
name|atoms
operator|.
name|push_back
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_BELOW
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|states
operator|&
name|NetWmStateFullScreen
condition|)
name|atoms
operator|.
name|push_back
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|states
operator|&
name|NetWmStateMaximizedHorz
condition|)
name|atoms
operator|.
name|push_back
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|states
operator|&
name|NetWmStateMaximizedVert
condition|)
name|atoms
operator|.
name|push_back
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|states
operator|&
name|NetWmStateModal
condition|)
name|atoms
operator|.
name|push_back
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MODAL
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|states
operator|&
name|NetWmStateStaysOnTop
condition|)
name|atoms
operator|.
name|push_back
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_STAYS_ON_TOP
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|states
operator|&
name|NetWmStateDemandsAttention
condition|)
name|atoms
operator|.
name|push_back
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_DEMANDS_ATTENTION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|atoms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_delete_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|32
argument_list|,
name|atoms
operator|.
name|count
argument_list|()
argument_list|,
name|atoms
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|setWindowFlags
name|void
name|QXcbWindow
operator|::
name|setWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
name|Qt
operator|::
name|WindowType
name|type
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
name|int
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
condition|)
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Popup
condition|)
name|flags
operator||=
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
specifier|const
name|quint32
name|mask
init|=
name|XCB_CW_OVERRIDE_REDIRECT
operator||
name|XCB_CW_EVENT_MASK
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
comment|// XCB_CW_OVERRIDE_REDIRECT
operator|(
name|flags
operator|&
name|Qt
operator|::
name|BypassWindowManagerHint
operator|)
operator|?
literal|1u
operator|:
literal|0
block|,
comment|// XCB_CW_EVENT_MASK
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTransparentForInput
operator|)
operator|?
name|transparentForInputEventMask
operator|:
name|defaultEventMask
block|}
decl_stmt|;
name|xcb_change_window_attributes
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_window
argument_list|()
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|setNetWmWindowFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|setMotifWindowFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|setTransparentForMouseEvents
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTransparentForInput
argument_list|)
expr_stmt|;
name|updateDoesNotAcceptFocus
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowDoesNotAcceptFocus
argument_list|)
expr_stmt|;
block|}
DECL|function|setMotifWindowFlags
name|void
name|QXcbWindow
operator|::
name|setMotifWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
name|Qt
operator|::
name|WindowType
name|type
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
name|int
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
argument_list|)
decl_stmt|;
name|QtMotifWmHints
name|mwmhints
decl_stmt|;
name|mwmhints
operator|.
name|flags
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
literal|0
expr_stmt|;
name|mwmhints
operator|.
name|input_mode
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|status
operator|=
literal|0L
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|Qt
operator|::
name|SplashScreen
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|bool
name|customize
init|=
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
operator|!
operator|(
name|customize
operator|&&
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|)
operator|)
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_BORDER
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_RESIZEH
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_TITLE
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MENU
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MINIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MINIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MAXIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MAXIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_CLOSE
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if type == Qt::SplashScreen
name|mwmhints
operator|.
name|decorations
operator|=
name|MWM_DECOR_ALL
expr_stmt|;
block|}
if|if
condition|(
name|mwmhints
operator|.
name|functions
operator|!=
literal|0
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MOVE
operator||
name|MWM_FUNC_RESIZE
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_ALL
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|&&
operator|!
operator|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
operator|)
operator|)
condition|)
block|{
comment|// a special case - only the titlebar without any button
name|mwmhints
operator|.
name|flags
operator|=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_MOVE
operator||
name|MWM_FUNC_RESIZE
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
literal|0
expr_stmt|;
block|}
name|setMotifWmHints
argument_list|(
name|connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mwmhints
argument_list|)
expr_stmt|;
block|}
DECL|function|changeNetWmState
name|void
name|QXcbWindow
operator|::
name|changeNetWmState
parameter_list|(
name|bool
name|set
parameter_list|,
name|xcb_atom_t
name|one
parameter_list|,
name|xcb_atom_t
name|two
parameter_list|)
block|{
name|xcb_client_message_event_t
name|event
decl_stmt|;
name|event
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|event
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|event
operator|.
name|window
operator|=
name|m_window
expr_stmt|;
name|event
operator|.
name|type
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE
argument_list|)
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|set
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
name|one
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
name|two
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setWindowState
name|void
name|QXcbWindow
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|m_windowState
condition|)
return|return;
comment|// unset old state
switch|switch
condition|(
name|m_windowState
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowMinimized
case|:
name|Q_XCB_CALL
argument_list|(
name|xcb_map_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowMaximized
case|:
name|changeNetWmState
argument_list|(
literal|false
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowFullScreen
case|:
name|changeNetWmState
argument_list|(
literal|false
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
comment|// set new state
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowMinimized
case|:
block|{
name|xcb_client_message_event_t
name|event
decl_stmt|;
name|event
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|event
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|event
operator|.
name|window
operator|=
name|m_window
expr_stmt|;
name|event
operator|.
name|type
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_CHANGE_STATE
argument_list|)
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|XCB_WM_STATE_ICONIC
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|WindowMaximized
case|:
name|changeNetWmState
argument_list|(
literal|true
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowFullScreen
case|:
name|changeNetWmState
argument_list|(
literal|true
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowNoState
case|:
break|break;
default|default:
break|break;
block|}
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
name|m_windowState
operator|=
name|state
expr_stmt|;
block|}
DECL|function|setNetWmWindowFlags
name|void
name|QXcbWindow
operator|::
name|setNetWmWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
comment|// in order of decreasing priority
name|QVector
argument_list|<
name|uint
argument_list|>
name|windowTypes
decl_stmt|;
name|Qt
operator|::
name|WindowType
name|type
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
name|int
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Qt
operator|::
name|Dialog
case|:
case|case
name|Qt
operator|::
name|Sheet
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DIALOG
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Tool
case|:
case|case
name|Qt
operator|::
name|Drawer
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_UTILITY
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ToolTip
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_TOOLTIP
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SplashScreen
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_SPLASH
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_KDE_NET_WM_WINDOW_TYPE_OVERRIDE
argument_list|)
argument_list|)
expr_stmt|;
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_NORMAL
argument_list|)
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|32
argument_list|,
name|windowTypes
operator|.
name|count
argument_list|()
argument_list|,
name|windowTypes
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|updateMotifWmHintsBeforeMap
name|void
name|QXcbWindow
operator|::
name|updateMotifWmHintsBeforeMap
parameter_list|()
block|{
name|QtMotifWmHints
name|mwmhints
init|=
name|getMotifWmHints
argument_list|(
name|connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
decl_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|modality
argument_list|()
operator|!=
name|Qt
operator|::
name|NonModal
condition|)
block|{
switch|switch
condition|(
name|window
argument_list|()
operator|->
name|modality
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowModal
case|:
name|mwmhints
operator|.
name|input_mode
operator|=
name|MWM_INPUT_PRIMARY_APPLICATION_MODAL
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ApplicationModal
case|:
default|default:
name|mwmhints
operator|.
name|input_mode
operator|=
name|MWM_INPUT_FULL_APPLICATION_MODAL
expr_stmt|;
break|break;
block|}
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_INPUT_MODE
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|input_mode
operator|=
name|MWM_INPUT_MODELESS
expr_stmt|;
name|mwmhints
operator|.
name|flags
operator|&=
operator|~
name|MWM_HINTS_INPUT_MODE
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|minimumSize
argument_list|()
operator|==
name|window
argument_list|()
operator|->
name|maximumSize
argument_list|()
condition|)
block|{
comment|// fixed size, remove the resize handle (since mwm/dtwm
comment|// isn't smart enough to do it itself)
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
if|if
condition|(
name|mwmhints
operator|.
name|functions
operator|==
name|MWM_FUNC_ALL
condition|)
block|{
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_MOVE
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|functions
operator|&=
operator|~
name|MWM_FUNC_RESIZE
expr_stmt|;
block|}
if|if
condition|(
name|mwmhints
operator|.
name|decorations
operator|==
name|MWM_DECOR_ALL
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
operator|(
name|MWM_DECOR_BORDER
operator||
name|MWM_DECOR_TITLE
operator||
name|MWM_DECOR_MENU
operator|)
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|decorations
operator|&=
operator|~
name|MWM_DECOR_RESIZEH
expr_stmt|;
block|}
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MINIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MINIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MAXIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MAXIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_CLOSE
expr_stmt|;
name|setMotifWmHints
argument_list|(
name|connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mwmhints
argument_list|)
expr_stmt|;
block|}
DECL|function|updateNetWmStateBeforeMap
name|void
name|QXcbWindow
operator|::
name|updateNetWmStateBeforeMap
parameter_list|()
block|{
name|NetWmStates
name|states
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|window
argument_list|()
operator|->
name|flags
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
condition|)
block|{
name|states
operator||=
name|NetWmStateAbove
expr_stmt|;
name|states
operator||=
name|NetWmStateStaysOnTop
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
block|{
name|states
operator||=
name|NetWmStateBelow
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
name|states
operator||=
name|NetWmStateFullScreen
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
name|states
operator||=
name|NetWmStateMaximizedHorz
expr_stmt|;
name|states
operator||=
name|NetWmStateMaximizedVert
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|modality
argument_list|()
operator|!=
name|Qt
operator|::
name|NonModal
condition|)
name|states
operator||=
name|NetWmStateModal
expr_stmt|;
name|setNetWmStates
argument_list|(
name|states
argument_list|)
expr_stmt|;
block|}
DECL|function|updateNetWmUserTime
name|void
name|QXcbWindow
operator|::
name|updateNetWmUserTime
parameter_list|(
name|xcb_timestamp_t
name|timestamp
parameter_list|)
block|{
name|xcb_window_t
name|wid
init|=
name|m_window
decl_stmt|;
name|connection
argument_list|()
operator|->
name|setNetWmUserTime
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|isSupportedByWM
init|=
name|connection
argument_list|()
operator|->
name|wmSupport
argument_list|()
operator|->
name|isSupportedByWM
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME_WINDOW
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_netWmUserTimeWindow
operator|||
name|isSupportedByWM
condition|)
block|{
if|if
condition|(
operator|!
name|m_netWmUserTimeWindow
condition|)
block|{
name|m_netWmUserTimeWindow
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_create_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_COPY_FROM_PARENT
argument_list|,
comment|// depth -- same as root
name|m_netWmUserTimeWindow
argument_list|,
comment|// window id
name|m_window
argument_list|,
comment|// parent window id
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
comment|// border width
name|XCB_WINDOW_CLASS_INPUT_OUTPUT
argument_list|,
comment|// window class
name|m_visualId
argument_list|,
comment|// visual
literal|0
argument_list|,
comment|// value mask
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// value list
name|wid
operator|=
name|m_netWmUserTimeWindow
expr_stmt|;
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME_WINDOW
argument_list|)
argument_list|,
name|XCB_ATOM_WINDOW
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|m_netWmUserTimeWindow
argument_list|)
expr_stmt|;
name|xcb_delete_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|QByteArray
name|ba
argument_list|(
literal|"Qt NET_WM user time window"
argument_list|)
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_netWmUserTimeWindow
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_NAME
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|UTF8_STRING
argument_list|)
argument_list|,
literal|8
argument_list|,
name|ba
operator|.
name|length
argument_list|()
argument_list|,
name|ba
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
operator|!
name|isSupportedByWM
condition|)
block|{
comment|// WM no longer supports it, then we should remove the
comment|// _NET_WM_USER_TIME_WINDOW atom.
name|xcb_delete_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME_WINDOW
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_destroy_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_netWmUserTimeWindow
argument_list|)
expr_stmt|;
name|m_netWmUserTimeWindow
operator|=
name|XCB_NONE
expr_stmt|;
block|}
else|else
block|{
name|wid
operator|=
name|m_netWmUserTimeWindow
expr_stmt|;
block|}
block|}
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|wid
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME
argument_list|)
argument_list|,
name|XCB_ATOM_CARDINAL
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|timestamp
argument_list|)
expr_stmt|;
block|}
DECL|function|setTransparentForMouseEvents
name|void
name|QXcbWindow
operator|::
name|setTransparentForMouseEvents
parameter_list|(
name|bool
name|transparent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|connection
argument_list|()
operator|->
name|hasXFixes
argument_list|()
operator|||
name|transparent
operator|==
name|m_transparent
condition|)
return|return;
name|xcb_rectangle_t
name|rectangle
decl_stmt|;
name|xcb_rectangle_t
modifier|*
name|rect
init|=
literal|0
decl_stmt|;
name|int
name|nrect
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|transparent
condition|)
block|{
name|rectangle
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|rectangle
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|rectangle
operator|.
name|width
operator|=
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
name|rectangle
operator|.
name|height
operator|=
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
expr_stmt|;
name|rect
operator|=
operator|&
name|rectangle
expr_stmt|;
name|nrect
operator|=
literal|1
expr_stmt|;
block|}
name|xcb_xfixes_region_t
name|region
init|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
decl_stmt|;
name|xcb_xfixes_create_region
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|region
argument_list|,
name|nrect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|xcb_xfixes_set_window_shape_region_checked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|XCB_SHAPE_SK_INPUT
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|xcb_xfixes_destroy_region
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|m_transparent
operator|=
name|transparent
expr_stmt|;
block|}
DECL|function|updateDoesNotAcceptFocus
name|void
name|QXcbWindow
operator|::
name|updateDoesNotAcceptFocus
parameter_list|(
name|bool
name|doesNotAcceptFocus
parameter_list|)
block|{
name|xcb_get_property_cookie_t
name|cookie
init|=
name|xcb_get_wm_hints_unchecked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
decl_stmt|;
name|xcb_wm_hints_t
name|hints
decl_stmt|;
if|if
condition|(
operator|!
name|xcb_get_wm_hints_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
operator|&
name|hints
argument_list|,
name|NULL
argument_list|)
condition|)
block|{
return|return;
block|}
name|xcb_wm_hints_set_input
argument_list|(
operator|&
name|hints
argument_list|,
operator|!
name|doesNotAcceptFocus
argument_list|)
expr_stmt|;
name|xcb_set_wm_hints
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
operator|&
name|hints
argument_list|)
expr_stmt|;
block|}
DECL|function|winId
name|WId
name|QXcbWindow
operator|::
name|winId
parameter_list|()
specifier|const
block|{
return|return
name|m_window
return|;
block|}
DECL|function|setParent
name|void
name|QXcbWindow
operator|::
name|setParent
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|parent
parameter_list|)
block|{
name|QPoint
name|topLeft
init|=
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|xcb_window_t
name|xcb_parent_id
decl_stmt|;
if|if
condition|(
name|parent
condition|)
block|{
specifier|const
name|QXcbWindow
modifier|*
name|qXcbParent
init|=
cast|static_cast
argument_list|<
specifier|const
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|xcb_parent_id
operator|=
name|qXcbParent
operator|->
name|xcb_window
argument_list|()
expr_stmt|;
name|m_embedded
operator|=
name|qXcbParent
operator|->
name|window
argument_list|()
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|ForeignWindow
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|xcbScreen
argument_list|()
condition|)
return|return;
name|xcb_parent_id
operator|=
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
expr_stmt|;
name|m_embedded
operator|=
literal|false
expr_stmt|;
block|}
name|Q_XCB_CALL
argument_list|(
name|xcb_reparent_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_window
argument_list|()
argument_list|,
name|xcb_parent_id
argument_list|,
name|topLeft
operator|.
name|x
argument_list|()
argument_list|,
name|topLeft
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setWindowTitle
name|void
name|QXcbWindow
operator|::
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
specifier|const
name|QString
name|fullTitle
init|=
name|formatWindowTitle
argument_list|(
name|title
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|" \xe2\x80\x94 "
argument_list|)
argument_list|)
decl_stmt|;
comment|// unicode character U+2014, EM DASH
specifier|const
name|QByteArray
name|ba
init|=
name|fullTitle
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_NAME
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|UTF8_STRING
argument_list|)
argument_list|,
literal|8
argument_list|,
name|ba
operator|.
name|length
argument_list|()
argument_list|,
name|ba
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|setWindowIconText
name|void
name|QXcbWindow
operator|::
name|setWindowIconText
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
specifier|const
name|QByteArray
name|ba
init|=
name|title
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_ICON_NAME
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|UTF8_STRING
argument_list|)
argument_list|,
literal|8
argument_list|,
name|ba
operator|.
name|length
argument_list|()
argument_list|,
name|ba
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setWindowIcon
name|void
name|QXcbWindow
operator|::
name|setWindowIcon
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
block|{
name|QVector
argument_list|<
name|quint32
argument_list|>
name|icon_data
decl_stmt|;
if|if
condition|(
operator|!
name|icon
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QSize
argument_list|>
name|availableSizes
init|=
name|icon
operator|.
name|availableSizes
argument_list|()
decl_stmt|;
if|if
condition|(
name|availableSizes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// try to use default sizes since the icon can be a scalable image like svg.
name|availableSizes
operator|.
name|push_back
argument_list|(
name|QSize
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|availableSizes
operator|.
name|push_back
argument_list|(
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|availableSizes
operator|.
name|push_back
argument_list|(
name|QSize
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
argument_list|)
expr_stmt|;
name|availableSizes
operator|.
name|push_back
argument_list|(
name|QSize
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|availableSizes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QSize
name|size
init|=
name|availableSizes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|icon
operator|.
name|pixmap
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QImage
name|image
init|=
name|pixmap
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|icon_data
operator|.
name|size
argument_list|()
decl_stmt|;
name|icon_data
operator|.
name|resize
argument_list|(
name|pos
operator|+
literal|2
operator|+
name|image
operator|.
name|width
argument_list|()
operator|*
name|image
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|icon_data
index|[
name|pos
operator|++
index|]
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
name|icon_data
index|[
name|pos
operator|++
index|]
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|memcpy
argument_list|(
name|icon_data
operator|.
name|data
argument_list|()
operator|+
name|pos
argument_list|,
name|image
operator|.
name|bits
argument_list|()
argument_list|,
name|image
operator|.
name|width
argument_list|()
operator|*
name|image
operator|.
name|height
argument_list|()
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|icon_data
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_ICON
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|CARDINAL
argument_list|)
argument_list|,
literal|32
argument_list|,
name|icon_data
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|icon_data
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_delete_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_ICON
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|raise
name|void
name|QXcbWindow
operator|::
name|raise
parameter_list|()
block|{
specifier|const
name|quint32
name|mask
init|=
name|XCB_CONFIG_WINDOW_STACK_MODE
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
name|XCB_STACK_MODE_ABOVE
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_configure_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|lower
name|void
name|QXcbWindow
operator|::
name|lower
parameter_list|()
block|{
specifier|const
name|quint32
name|mask
init|=
name|XCB_CONFIG_WINDOW_STACK_MODE
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
name|XCB_STACK_MODE_BELOW
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_configure_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Adapt the geometry to match the WM expection with regards
comment|// to gravity.
DECL|function|windowToWmGeometry
name|QRect
name|QXcbWindow
operator|::
name|windowToWmGeometry
parameter_list|(
name|QRect
name|r
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_dirtyFrameMargins
operator|||
name|m_frameMargins
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|r
return|;
specifier|const
name|bool
name|frameInclusive
init|=
name|positionIncludesFrame
argument_list|(
name|window
argument_list|()
argument_list|)
decl_stmt|;
comment|// XCB_GRAVITY_STATIC requires the inner geometry, whereas
comment|// XCB_GRAVITY_NORTH_WEST requires the frame geometry
if|if
condition|(
name|frameInclusive
operator|&&
name|m_gravity
operator|==
name|XCB_GRAVITY_STATIC
condition|)
block|{
name|r
operator|.
name|translate
argument_list|(
name|m_frameMargins
operator|.
name|left
argument_list|()
argument_list|,
name|m_frameMargins
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|frameInclusive
operator|&&
name|m_gravity
operator|==
name|XCB_GRAVITY_NORTH_WEST
condition|)
block|{
name|r
operator|.
name|translate
argument_list|(
operator|-
name|m_frameMargins
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|m_frameMargins
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|function|propagateSizeHints
name|void
name|QXcbWindow
operator|::
name|propagateSizeHints
parameter_list|()
block|{
comment|// update WM_NORMAL_HINTS
name|xcb_size_hints_t
name|hints
decl_stmt|;
name|memset
argument_list|(
operator|&
name|hints
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|hints
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|dpr
init|=
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|xRect
init|=
name|mapToNative
argument_list|(
name|windowToWmGeometry
argument_list|(
name|geometry
argument_list|()
argument_list|)
argument_list|,
name|dpr
argument_list|)
decl_stmt|;
name|QWindow
modifier|*
name|win
init|=
name|window
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qt_window_private
argument_list|(
name|win
argument_list|)
operator|->
name|positionAutomatic
condition|)
name|xcb_size_hints_set_position
argument_list|(
operator|&
name|hints
argument_list|,
literal|true
argument_list|,
name|xRect
operator|.
name|x
argument_list|()
argument_list|,
name|xRect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|xRect
operator|.
name|width
argument_list|()
operator|<
name|QWINDOWSIZE_MAX
operator|||
name|xRect
operator|.
name|height
argument_list|()
operator|<
name|QWINDOWSIZE_MAX
condition|)
name|xcb_size_hints_set_size
argument_list|(
operator|&
name|hints
argument_list|,
literal|true
argument_list|,
name|xRect
operator|.
name|width
argument_list|()
argument_list|,
name|xRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|xcb_size_hints_set_win_gravity
argument_list|(
operator|&
name|hints
argument_list|,
name|m_gravity
argument_list|)
expr_stmt|;
name|QSize
name|minimumSize
init|=
name|win
operator|->
name|minimumSize
argument_list|()
operator|*
name|dpr
decl_stmt|;
name|QSize
name|maximumSize
init|=
name|win
operator|->
name|maximumSize
argument_list|()
operator|*
name|dpr
decl_stmt|;
name|QSize
name|baseSize
init|=
name|win
operator|->
name|baseSize
argument_list|()
operator|*
name|dpr
decl_stmt|;
name|QSize
name|sizeIncrement
init|=
name|win
operator|->
name|sizeIncrement
argument_list|()
operator|*
name|dpr
decl_stmt|;
if|if
condition|(
name|minimumSize
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|||
name|minimumSize
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
name|xcb_size_hints_set_min_size
argument_list|(
operator|&
name|hints
argument_list|,
name|qMin
argument_list|(
name|XCOORD_MAX
argument_list|,
name|minimumSize
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|XCOORD_MAX
argument_list|,
name|minimumSize
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|maximumSize
operator|.
name|width
argument_list|()
operator|<
name|QWINDOWSIZE_MAX
operator|||
name|maximumSize
operator|.
name|height
argument_list|()
operator|<
name|QWINDOWSIZE_MAX
condition|)
name|xcb_size_hints_set_max_size
argument_list|(
operator|&
name|hints
argument_list|,
name|qMin
argument_list|(
name|XCOORD_MAX
argument_list|,
name|maximumSize
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|XCOORD_MAX
argument_list|,
name|maximumSize
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sizeIncrement
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|||
name|sizeIncrement
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
block|{
name|xcb_size_hints_set_base_size
argument_list|(
operator|&
name|hints
argument_list|,
name|baseSize
operator|.
name|width
argument_list|()
argument_list|,
name|baseSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|xcb_size_hints_set_resize_inc
argument_list|(
operator|&
name|hints
argument_list|,
name|sizeIncrement
operator|.
name|width
argument_list|()
argument_list|,
name|sizeIncrement
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xcb_set_wm_normal_hints
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
operator|&
name|hints
argument_list|)
expr_stmt|;
block|}
DECL|function|requestActivateWindow
name|void
name|QXcbWindow
operator|::
name|requestActivateWindow
parameter_list|()
block|{
comment|/* Never activate embedded windows; doing that would prevent the container      * to re-gain the keyboard focus later. */
if|if
condition|(
name|m_embedded
condition|)
block|{
name|QPlatformWindow
operator|::
name|requestActivateWindow
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|m_mapped
condition|)
block|{
name|m_deferredActivation
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|m_deferredActivation
operator|=
literal|false
expr_stmt|;
name|updateNetWmUserTime
argument_list|(
name|connection
argument_list|()
operator|->
name|time
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
operator|&&
operator|!
operator|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|X11BypassWindowManagerHint
operator|)
operator|&&
name|connection
argument_list|()
operator|->
name|wmSupport
argument_list|()
operator|->
name|isSupportedByWM
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_ACTIVE_WINDOW
argument_list|)
argument_list|)
condition|)
block|{
name|xcb_client_message_event_t
name|event
decl_stmt|;
name|event
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|event
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|event
operator|.
name|window
operator|=
name|m_window
expr_stmt|;
name|event
operator|.
name|type
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_ACTIVE_WINDOW
argument_list|)
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
name|connection
argument_list|()
operator|->
name|time
argument_list|()
expr_stmt|;
name|QWindow
modifier|*
name|focusWindow
init|=
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
decl_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
name|focusWindow
condition|?
name|focusWindow
operator|->
name|winId
argument_list|()
else|:
name|XCB_NONE
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_set_input_focus
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_INPUT_FOCUS_PARENT
argument_list|,
name|m_window
argument_list|,
name|connection
argument_list|()
operator|->
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
block|}
DECL|function|format
name|QSurfaceFormat
name|QXcbWindow
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|m_format
return|;
block|}
DECL|function|setWmWindowTypeStatic
name|void
name|QXcbWindow
operator|::
name|setWmWindowTypeStatic
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|QXcbWindowFunctions
operator|::
name|WmWindowTypes
name|windowTypes
parameter_list|)
block|{
if|if
condition|(
name|window
operator|->
name|handle
argument_list|()
condition|)
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|setWmWindowType
argument_list|(
name|windowTypes
argument_list|)
expr_stmt|;
else|else
name|window
operator|->
name|setProperty
argument_list|(
name|wm_window_type_property_id
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|windowTypes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setWindowIconTextStatic
name|void
name|QXcbWindow
operator|::
name|setWindowIconTextStatic
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|window
operator|->
name|handle
argument_list|()
condition|)
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|setWindowIconText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
DECL|function|wmWindowTypes
name|QXcbWindowFunctions
operator|::
name|WmWindowTypes
name|QXcbWindow
operator|::
name|wmWindowTypes
parameter_list|()
specifier|const
block|{
name|QXcbWindowFunctions
operator|::
name|WmWindowTypes
name|result
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|xcb_get_property_cookie_t
name|get_cookie
init|=
name|xcb_get_property_unchecked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|get_cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|&&
name|reply
operator|->
name|format
operator|==
literal|32
operator|&&
name|reply
operator|->
name|type
operator|==
name|XCB_ATOM_ATOM
condition|)
block|{
specifier|const
name|xcb_atom_t
modifier|*
name|types
init|=
cast|static_cast
argument_list|<
specifier|const
name|xcb_atom_t
operator|*
argument_list|>
argument_list|(
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|xcb_atom_t
modifier|*
name|types_end
init|=
name|types
operator|+
name|reply
operator|->
name|length
decl_stmt|;
for|for
control|(
init|;
name|types
operator|!=
name|types_end
condition|;
name|types
operator|++
control|)
block|{
name|QXcbAtom
operator|::
name|Atom
name|type
init|=
name|connection
argument_list|()
operator|->
name|qatom
argument_list|(
operator|*
name|types
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_NORMAL
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Normal
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DESKTOP
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Desktop
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DOCK
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Dock
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_TOOLBAR
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Toolbar
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_MENU
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Menu
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_UTILITY
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Utility
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_SPLASH
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Splash
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DIALOG
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Dialog
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DROPDOWN_MENU
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|DropDownMenu
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_POPUP_MENU
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|PopupMenu
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_TOOLTIP
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Tooltip
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_NOTIFICATION
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Notification
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_COMBO
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Combo
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DND
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|Dnd
expr_stmt|;
break|break;
case|case
name|QXcbAtom
operator|::
name|_KDE_NET_WM_WINDOW_TYPE_OVERRIDE
case|:
name|result
operator||=
name|QXcbWindowFunctions
operator|::
name|KdeOverride
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|function|setWmWindowType
name|void
name|QXcbWindow
operator|::
name|setWmWindowType
parameter_list|(
name|QXcbWindowFunctions
operator|::
name|WmWindowTypes
name|types
parameter_list|)
block|{
name|QVector
argument_list|<
name|xcb_atom_t
argument_list|>
name|atoms
decl_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Normal
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_NORMAL
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Desktop
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DESKTOP
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Dock
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DOCK
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Toolbar
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_TOOLBAR
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Menu
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_MENU
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Utility
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_UTILITY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Splash
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_SPLASH
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Dialog
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DIALOG
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|DropDownMenu
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DROPDOWN_MENU
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|PopupMenu
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_POPUP_MENU
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Tooltip
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_TOOLTIP
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Notification
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_NOTIFICATION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Combo
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_COMBO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|Dnd
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DND
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|&
name|QXcbWindowFunctions
operator|::
name|KdeOverride
condition|)
name|atoms
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_KDE_NET_WM_WINDOW_TYPE_OVERRIDE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|atoms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_delete_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|32
argument_list|,
name|atoms
operator|.
name|count
argument_list|()
argument_list|,
name|atoms
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|setParentRelativeBackPixmapStatic
name|void
name|QXcbWindow
operator|::
name|setParentRelativeBackPixmapStatic
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
name|window
operator|->
name|handle
argument_list|()
condition|)
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|setParentRelativeBackPixmap
argument_list|()
expr_stmt|;
block|}
DECL|function|setParentRelativeBackPixmap
name|void
name|QXcbWindow
operator|::
name|setParentRelativeBackPixmap
parameter_list|()
block|{
specifier|const
name|quint32
name|mask
init|=
name|XCB_CW_BACK_PIXMAP
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
name|XCB_BACK_PIXMAP_PARENT_RELATIVE
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_window_attributes
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|requestSystemTrayWindowDockStatic
name|bool
name|QXcbWindow
operator|::
name|requestSystemTrayWindowDockStatic
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
name|window
operator|->
name|handle
argument_list|()
condition|)
return|return
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|requestSystemTrayWindowDock
argument_list|()
return|;
return|return
literal|false
return|;
block|}
DECL|function|requestSystemTrayWindowDock
name|bool
name|QXcbWindow
operator|::
name|requestSystemTrayWindowDock
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|connection
argument_list|()
operator|->
name|systemTrayTracker
argument_list|()
condition|)
return|return
literal|false
return|;
name|connection
argument_list|()
operator|->
name|systemTrayTracker
argument_list|()
operator|->
name|requestSystemTrayWindowDock
argument_list|(
name|m_window
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|systemTrayWindowGlobalGeometryStatic
name|QRect
name|QXcbWindow
operator|::
name|systemTrayWindowGlobalGeometryStatic
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
name|window
operator|->
name|handle
argument_list|()
condition|)
return|return
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|systemTrayWindowGlobalGeometry
argument_list|()
return|;
return|return
name|QRect
argument_list|()
return|;
block|}
DECL|function|systemTrayWindowGlobalGeometry
name|QRect
name|QXcbWindow
operator|::
name|systemTrayWindowGlobalGeometry
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|connection
argument_list|()
operator|->
name|systemTrayTracker
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
return|return
name|connection
argument_list|()
operator|->
name|systemTrayTracker
argument_list|()
operator|->
name|systemTrayWindowGlobalGeometry
argument_list|(
name|m_window
argument_list|)
return|;
block|}
DECL|class|ExposeCompressor
class|class
name|ExposeCompressor
block|{
public|public:
DECL|function|ExposeCompressor
name|ExposeCompressor
parameter_list|(
name|xcb_window_t
name|window
parameter_list|,
name|QRegion
modifier|*
name|region
parameter_list|,
name|int
name|devicePixelRatio
parameter_list|)
member_init_list|:
name|m_window
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_region
argument_list|(
name|region
argument_list|)
member_init_list|,
name|m_dpr
argument_list|(
name|devicePixelRatio
argument_list|)
member_init_list|,
name|m_pending
argument_list|(
literal|true
argument_list|)
block|{     }
DECL|function|checkEvent
name|bool
name|checkEvent
parameter_list|(
name|xcb_generic_event_t
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|event
operator|->
name|response_type
operator|&
operator|~
literal|0x80
operator|)
operator|!=
name|XCB_EXPOSE
condition|)
return|return
literal|false
return|;
name|xcb_expose_event_t
modifier|*
name|expose
init|=
operator|(
name|xcb_expose_event_t
operator|*
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|expose
operator|->
name|window
operator|!=
name|m_window
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|expose
operator|->
name|count
operator|==
literal|0
condition|)
name|m_pending
operator|=
literal|false
expr_stmt|;
operator|*
name|m_region
operator||=
name|mapExposeFromNative
argument_list|(
name|QRect
argument_list|(
name|expose
operator|->
name|x
argument_list|,
name|expose
operator|->
name|y
argument_list|,
name|expose
operator|->
name|width
argument_list|,
name|expose
operator|->
name|height
argument_list|)
argument_list|,
name|m_dpr
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|pending
name|bool
name|pending
parameter_list|()
specifier|const
block|{
return|return
name|m_pending
return|;
block|}
private|private:
DECL|member|m_window
name|xcb_window_t
name|m_window
decl_stmt|;
DECL|member|m_region
name|QRegion
modifier|*
name|m_region
decl_stmt|;
DECL|member|m_dpr
name|int
name|m_dpr
decl_stmt|;
DECL|member|m_pending
name|bool
name|m_pending
decl_stmt|;
block|}
class|;
DECL|function|handleGenericEvent
name|bool
name|QXcbWindow
operator|::
name|handleGenericEvent
parameter_list|(
name|xcb_generic_event_t
modifier|*
name|event
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
block|{
return|return
name|QWindowSystemInterface
operator|::
name|handleNativeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|connection
argument_list|()
operator|->
name|nativeInterface
argument_list|()
operator|->
name|genericEventFilterType
argument_list|()
argument_list|,
name|event
argument_list|,
name|result
argument_list|)
return|;
block|}
DECL|function|handleExposeEvent
name|void
name|QXcbWindow
operator|::
name|handleExposeEvent
parameter_list|(
specifier|const
name|xcb_expose_event_t
modifier|*
name|event
parameter_list|)
block|{
specifier|const
name|int
name|dpr
init|=
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|x_rect
argument_list|(
name|event
operator|->
name|x
argument_list|,
name|event
operator|->
name|y
argument_list|,
name|event
operator|->
name|width
argument_list|,
name|event
operator|->
name|height
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|mapExposeFromNative
argument_list|(
name|x_rect
argument_list|,
name|dpr
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_exposeRegion
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_exposeRegion
operator|=
name|rect
expr_stmt|;
else|else
name|m_exposeRegion
operator||=
name|rect
expr_stmt|;
name|ExposeCompressor
name|compressor
argument_list|(
name|m_window
argument_list|,
operator|&
name|m_exposeRegion
argument_list|,
name|dpr
argument_list|)
decl_stmt|;
name|xcb_generic_event_t
modifier|*
name|filter
init|=
literal|0
decl_stmt|;
do|do
block|{
name|filter
operator|=
name|connection
argument_list|()
operator|->
name|checkEvent
argument_list|(
name|compressor
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|filter
condition|)
do|;
comment|// if count is non-zero there are more expose events pending
if|if
condition|(
name|event
operator|->
name|count
operator|==
literal|0
operator|||
operator|!
name|compressor
operator|.
name|pending
argument_list|()
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|m_exposeRegion
argument_list|)
expr_stmt|;
name|m_exposeRegion
operator|=
name|QRegion
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|handleClientMessageEvent
name|void
name|QXcbWindow
operator|::
name|handleClientMessageEvent
parameter_list|(
specifier|const
name|xcb_client_message_event_t
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|format
operator|!=
literal|32
condition|)
return|return;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_PROTOCOLS
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_DELETE_WINDOW
argument_list|)
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleCloseEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_TAKE_FOCUS
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|relayFocusToModalWindow
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_PING
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|window
operator|==
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
condition|)
return|return;
name|xcb_client_message_event_t
name|reply
init|=
operator|*
name|event
decl_stmt|;
name|reply
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|reply
operator|.
name|window
operator|=
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
expr_stmt|;
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|reply
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_SYNC_REQUEST
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|m_syncValue
operator|.
name|lo
operator|=
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|2
index|]
expr_stmt|;
name|m_syncValue
operator|.
name|hi
operator|=
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|3
index|]
expr_stmt|;
if|if
condition|(
name|m_usingSyncProtocol
condition|)
name|m_syncState
operator|=
name|SyncReceived
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_CONTEXT_HELP
argument_list|)
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleEnterWhatsThisEvent
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QXcbWindow: Unhandled WM_PROTOCOLS message:"
operator|<<
name|connection
argument_list|()
operator|->
name|atomName
argument_list|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndEnter
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|drag
argument_list|()
operator|->
name|handleEnter
argument_list|(
name|window
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndPosition
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|drag
argument_list|()
operator|->
name|handlePosition
argument_list|(
name|window
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndLeave
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|drag
argument_list|()
operator|->
name|handleLeave
argument_list|(
name|window
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndDrop
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|drag
argument_list|()
operator|->
name|handleDrop
argument_list|(
name|window
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_XEMBED
argument_list|)
condition|)
block|{
name|handleXEmbedMessage
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_ACTIVE_WINDOW
argument_list|)
condition|)
block|{
name|doFocusIn
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|MANAGER
argument_list|)
operator|||
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE
argument_list|)
operator|||
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_CHANGE_STATE
argument_list|)
condition|)
block|{
comment|// Ignore _NET_WM_STATE, MANAGER which are relate to tray icons
comment|// and other messages.
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_COMPIZ_DECOR_PENDING
argument_list|)
operator|||
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_COMPIZ_DECOR_REQUEST
argument_list|)
operator|||
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_COMPIZ_DECOR_DELETE_PIXMAP
argument_list|)
condition|)
block|{
comment|//silence the _COMPIZ messages for now
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QXcbWindow: Unhandled client message:"
operator|<<
name|connection
argument_list|()
operator|->
name|atomName
argument_list|(
name|event
operator|->
name|type
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Temporary workaround for bug in QPlatformScreen::screenForNativeGeometry
comment|// we need the native geometries to detect our screen, but that's not
comment|// available in cross-platform code. Will be fixed properly when highDPI
comment|// support is refactored to expose the native coordinate system.
DECL|function|screenForNativeGeometry
name|QPlatformScreen
modifier|*
name|QXcbWindow
operator|::
name|screenForNativeGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|newGeometry
parameter_list|)
specifier|const
block|{
name|QXcbScreen
modifier|*
name|currentScreen
init|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|screen
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|currentScreen
operator|&&
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
condition|)
name|currentScreen
operator|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentScreen
operator|&&
operator|!
name|parent
argument_list|()
operator|&&
operator|!
name|currentScreen
operator|->
name|nativeGeometry
argument_list|()
operator|.
name|intersects
argument_list|(
name|newGeometry
argument_list|)
condition|)
block|{
name|Q_FOREACH
argument_list|(
argument|QPlatformScreen* screen
argument_list|,
argument|currentScreen->virtualSiblings()
argument_list|)
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|screen
argument_list|)
operator|->
name|nativeGeometry
argument_list|()
operator|.
name|intersects
argument_list|(
name|newGeometry
argument_list|)
condition|)
return|return
name|screen
return|;
block|}
block|}
return|return
name|currentScreen
return|;
block|}
DECL|function|handleConfigureNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleConfigureNotifyEvent
parameter_list|(
specifier|const
name|xcb_configure_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
name|bool
name|fromSendEvent
init|=
operator|(
name|event
operator|->
name|response_type
operator|&
literal|0x80
operator|)
decl_stmt|;
name|QPoint
name|pos
argument_list|(
name|event
operator|->
name|x
argument_list|,
name|event
operator|->
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parent
argument_list|()
operator|&&
operator|!
name|fromSendEvent
operator|&&
name|xcbScreen
argument_list|()
condition|)
block|{
comment|// Do not trust the position, query it instead.
name|xcb_translate_coordinates_cookie_t
name|cookie
init|=
name|xcb_translate_coordinates
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_window
argument_list|()
argument_list|,
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|xcb_translate_coordinates_reply_t
modifier|*
name|reply
init|=
name|xcb_translate_coordinates_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
name|pos
operator|.
name|setX
argument_list|(
name|reply
operator|->
name|dst_x
argument_list|)
expr_stmt|;
name|pos
operator|.
name|setY
argument_list|(
name|reply
operator|->
name|dst_y
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
block|}
specifier|const
name|int
name|dpr
init|=
name|devicePixelRatio
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|nativeRect
init|=
name|QRect
argument_list|(
name|pos
argument_list|,
name|QSize
argument_list|(
name|event
operator|->
name|width
argument_list|,
name|event
operator|->
name|height
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|rect
init|=
name|mapGeometryFromNative
argument_list|(
name|nativeRect
argument_list|,
name|dpr
argument_list|)
decl_stmt|;
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|QPlatformScreen
modifier|*
name|newScreen
init|=
name|screenForNativeGeometry
argument_list|(
name|nativeRect
argument_list|)
decl_stmt|;
if|if
condition|(
name|newScreen
operator|!=
name|screen
argument_list|()
condition|)
block|{
if|if
condition|(
name|newScreen
condition|)
name|QWindowSystemInterface
operator|::
name|handleWindowScreenChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|newScreen
operator|->
name|screen
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|newDpr
init|=
name|newScreen
operator|->
name|devicePixelRatio
argument_list|()
decl_stmt|;
if|if
condition|(
name|newDpr
operator|!=
name|dpr
condition|)
block|{
name|QRect
name|newRect
init|=
name|mapGeometryFromNative
argument_list|(
name|nativeRect
argument_list|,
name|newDpr
argument_list|)
decl_stmt|;
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|newRect
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|newRect
argument_list|)
expr_stmt|;
block|}
block|}
name|m_configureNotifyPending
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|m_deferredExpose
condition|)
block|{
name|m_deferredExpose
operator|=
literal|false
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_usingSyncProtocol
operator|&&
name|m_syncState
operator|==
name|SyncReceived
condition|)
name|m_syncState
operator|=
name|SyncAndConfigureReceived
expr_stmt|;
name|m_dirtyFrameMargins
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|isExposed
name|bool
name|QXcbWindow
operator|::
name|isExposed
parameter_list|()
specifier|const
block|{
return|return
name|m_mapped
return|;
block|}
DECL|function|isEmbedded
name|bool
name|QXcbWindow
operator|::
name|isEmbedded
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|parentWindow
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|m_embedded
condition|)
return|return
literal|false
return|;
return|return
name|parentWindow
condition|?
operator|(
name|parentWindow
operator|==
name|parent
argument_list|()
operator|)
else|:
literal|true
return|;
block|}
DECL|function|mapToGlobal
name|QPoint
name|QXcbWindow
operator|::
name|mapToGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|m_embedded
condition|)
return|return
name|pos
return|;
specifier|const
name|int
name|dpr
init|=
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|ret
decl_stmt|;
name|xcb_translate_coordinates_cookie_t
name|cookie
init|=
name|xcb_translate_coordinates
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_window
argument_list|()
argument_list|,
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
argument_list|,
name|pos
operator|.
name|x
argument_list|()
operator|*
name|dpr
argument_list|,
name|pos
operator|.
name|y
argument_list|()
operator|*
name|dpr
argument_list|)
decl_stmt|;
name|xcb_translate_coordinates_reply_t
modifier|*
name|reply
init|=
name|xcb_translate_coordinates_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
name|ret
operator|.
name|setX
argument_list|(
name|reply
operator|->
name|dst_x
operator|/
name|dpr
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setY
argument_list|(
name|reply
operator|->
name|dst_y
operator|/
name|dpr
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|function|mapFromGlobal
name|QPoint
name|QXcbWindow
operator|::
name|mapFromGlobal
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|m_embedded
condition|)
return|return
name|pos
return|;
specifier|const
name|int
name|dpr
init|=
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|ret
decl_stmt|;
name|xcb_translate_coordinates_cookie_t
name|cookie
init|=
name|xcb_translate_coordinates
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
argument_list|,
name|xcb_window
argument_list|()
argument_list|,
name|pos
operator|.
name|x
argument_list|()
operator|*
name|dpr
argument_list|,
name|pos
operator|.
name|y
argument_list|()
operator|*
name|dpr
argument_list|)
decl_stmt|;
name|xcb_translate_coordinates_reply_t
modifier|*
name|reply
init|=
name|xcb_translate_coordinates_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
name|ret
operator|.
name|setX
argument_list|(
name|reply
operator|->
name|dst_x
operator|/
name|dpr
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setY
argument_list|(
name|reply
operator|->
name|dst_y
operator|/
name|dpr
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|function|handleMapNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleMapNotifyEvent
parameter_list|(
specifier|const
name|xcb_map_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|window
operator|==
name|m_window
condition|)
block|{
name|m_mapped
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|m_deferredActivation
condition|)
name|requestActivateWindow
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_configureNotifyPending
condition|)
name|m_deferredExpose
operator|=
literal|true
expr_stmt|;
else|else
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|handleUnmapNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleUnmapNotifyEvent
parameter_list|(
specifier|const
name|xcb_unmap_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|window
operator|==
name|m_window
condition|)
block|{
name|m_mapped
operator|=
literal|false
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|handleButtonPressEvent
name|void
name|QXcbWindow
operator|::
name|handleButtonPressEvent
parameter_list|(
specifier|const
name|xcb_button_press_event_t
modifier|*
name|event
parameter_list|)
block|{
specifier|const
name|bool
name|isWheel
init|=
name|event
operator|->
name|detail
operator|>=
literal|4
operator|&&
name|event
operator|->
name|detail
operator|<=
literal|7
decl_stmt|;
if|if
condition|(
operator|!
name|isWheel
operator|&&
name|window
argument_list|()
operator|!=
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
condition|)
block|{
name|QWindow
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWindowPrivate
operator|*
argument_list|>
argument_list|(
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|window
argument_list|()
argument_list|)
argument_list|)
operator|->
name|eventReceiver
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|w
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowDoesNotAcceptFocus
operator|)
condition|)
name|w
operator|->
name|requestActivate
argument_list|()
expr_stmt|;
block|}
name|updateNetWmUserTime
argument_list|(
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_embedded
condition|)
block|{
if|if
condition|(
name|window
argument_list|()
operator|!=
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
condition|)
block|{
specifier|const
name|QXcbWindow
modifier|*
name|container
init|=
cast|static_cast
argument_list|<
specifier|const
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|container
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|sendXEmbedMessage
argument_list|(
name|container
operator|->
name|xcb_window
argument_list|()
argument_list|,
name|XEMBED_REQUEST_FOCUS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|const
name|int
name|dpr
init|=
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|local
argument_list|(
name|event
operator|->
name|event_x
operator|/
name|dpr
argument_list|,
name|event
operator|->
name|event_y
operator|/
name|dpr
argument_list|)
decl_stmt|;
name|QPoint
name|global
argument_list|(
name|event
operator|->
name|root_x
operator|/
name|dpr
argument_list|,
name|event
operator|->
name|root_y
operator|/
name|dpr
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|connection
argument_list|()
operator|->
name|keyboard
argument_list|()
operator|->
name|translateModifiers
argument_list|(
name|event
operator|->
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|isWheel
condition|)
block|{
if|if
condition|(
operator|!
name|connection
argument_list|()
operator|->
name|isUsingXInput21
argument_list|()
condition|)
block|{
comment|// Logic borrowed from qapplication_x11.cpp
name|int
name|delta
init|=
literal|120
operator|*
operator|(
operator|(
name|event
operator|->
name|detail
operator|==
literal|4
operator|||
name|event
operator|->
name|detail
operator|==
literal|6
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
decl_stmt|;
name|bool
name|hor
init|=
operator|(
operator|(
operator|(
name|event
operator|->
name|detail
operator|==
literal|4
operator|||
name|event
operator|->
name|detail
operator|==
literal|5
operator|)
operator|&&
operator|(
name|modifiers
operator|&
name|Qt
operator|::
name|AltModifier
operator|)
operator|)
operator|||
operator|(
name|event
operator|->
name|detail
operator|==
literal|6
operator|||
name|event
operator|->
name|detail
operator|==
literal|7
operator|)
operator|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|delta
argument_list|,
name|hor
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|handleMouseEvent
argument_list|(
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
DECL|function|handleButtonReleaseEvent
name|void
name|QXcbWindow
operator|::
name|handleButtonReleaseEvent
parameter_list|(
specifier|const
name|xcb_button_release_event_t
modifier|*
name|event
parameter_list|)
block|{
specifier|const
name|int
name|dpr
init|=
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|local
argument_list|(
name|event
operator|->
name|event_x
operator|/
name|dpr
argument_list|,
name|event
operator|->
name|event_y
operator|/
name|dpr
argument_list|)
decl_stmt|;
name|QPoint
name|global
argument_list|(
name|event
operator|->
name|root_x
operator|/
name|dpr
argument_list|,
name|event
operator|->
name|root_y
operator|/
name|dpr
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|connection
argument_list|()
operator|->
name|keyboard
argument_list|()
operator|->
name|translateModifiers
argument_list|(
name|event
operator|->
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|detail
operator|>=
literal|4
operator|&&
name|event
operator|->
name|detail
operator|<=
literal|7
condition|)
block|{
comment|// mouse wheel, handled in handleButtonPressEvent()
return|return;
block|}
name|handleMouseEvent
argument_list|(
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
DECL|function|handleMotionNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleMotionNotifyEvent
parameter_list|(
specifier|const
name|xcb_motion_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
specifier|const
name|int
name|dpr
init|=
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|local
argument_list|(
name|event
operator|->
name|event_x
operator|/
name|dpr
argument_list|,
name|event
operator|->
name|event_y
operator|/
name|dpr
argument_list|)
decl_stmt|;
name|QPoint
name|global
argument_list|(
name|event
operator|->
name|root_x
operator|/
name|dpr
argument_list|,
name|event
operator|->
name|root_y
operator|/
name|dpr
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|connection
argument_list|()
operator|->
name|keyboard
argument_list|()
operator|->
name|translateModifiers
argument_list|(
name|event
operator|->
name|state
argument_list|)
decl_stmt|;
name|handleMouseEvent
argument_list|(
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
DECL|function|toWindow
name|QXcbWindow
modifier|*
name|QXcbWindow
operator|::
name|toWindow
parameter_list|()
block|{
return|return
name|this
return|;
block|}
DECL|function|handleMouseEvent
name|void
name|QXcbWindow
operator|::
name|handleMouseEvent
parameter_list|(
name|xcb_timestamp_t
name|time
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|local
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|connection
argument_list|()
operator|->
name|buttons
argument_list|()
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
DECL|function|ignoreLeaveEvent
specifier|static
name|bool
name|ignoreLeaveEvent
parameter_list|(
specifier|const
name|xcb_leave_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
return|return
name|event
operator|->
name|detail
operator|==
name|XCB_NOTIFY_DETAIL_VIRTUAL
operator|||
name|event
operator|->
name|detail
operator|==
name|XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL
return|;
block|}
DECL|function|ignoreEnterEvent
specifier|static
name|bool
name|ignoreEnterEvent
parameter_list|(
specifier|const
name|xcb_enter_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
return|return
operator|(
operator|(
name|event
operator|->
name|mode
operator|!=
name|XCB_NOTIFY_MODE_NORMAL
operator|&&
name|event
operator|->
name|mode
operator|!=
name|XCB_NOTIFY_MODE_UNGRAB
operator|)
operator|||
name|event
operator|->
name|detail
operator|==
name|XCB_NOTIFY_DETAIL_VIRTUAL
operator|||
name|event
operator|->
name|detail
operator|==
name|XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL
operator|)
return|;
block|}
DECL|class|EnterEventChecker
class|class
name|EnterEventChecker
block|{
public|public:
DECL|function|checkEvent
name|bool
name|checkEvent
parameter_list|(
name|xcb_generic_event_t
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|event
operator|->
name|response_type
operator|&
operator|~
literal|0x80
operator|)
operator|!=
name|XCB_ENTER_NOTIFY
condition|)
return|return
literal|false
return|;
name|xcb_enter_notify_event_t
modifier|*
name|enter
init|=
operator|(
name|xcb_enter_notify_event_t
operator|*
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|ignoreEnterEvent
argument_list|(
name|enter
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
class|;
DECL|function|handleEnterNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleEnterNotifyEvent
parameter_list|(
specifier|const
name|xcb_enter_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|XCB_USE_XINPUT2
name|connection
argument_list|()
operator|->
name|handleEnterEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|ignoreEnterEvent
argument_list|(
name|event
argument_list|)
condition|)
return|return;
specifier|const
name|int
name|dpr
init|=
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|local
argument_list|(
name|event
operator|->
name|event_x
operator|/
name|dpr
argument_list|,
name|event
operator|->
name|event_y
operator|/
name|dpr
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|global
argument_list|(
name|event
operator|->
name|root_x
operator|/
name|dpr
argument_list|,
name|event
operator|->
name|root_y
operator|/
name|dpr
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|local
argument_list|,
name|global
argument_list|)
expr_stmt|;
block|}
DECL|function|handleLeaveNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleLeaveNotifyEvent
parameter_list|(
specifier|const
name|xcb_leave_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignoreLeaveEvent
argument_list|(
name|event
argument_list|)
condition|)
return|return;
name|EnterEventChecker
name|checker
decl_stmt|;
name|xcb_enter_notify_event_t
modifier|*
name|enter
init|=
operator|(
name|xcb_enter_notify_event_t
operator|*
operator|)
name|connection
argument_list|()
operator|->
name|checkEvent
argument_list|(
name|checker
argument_list|)
decl_stmt|;
name|QXcbWindow
modifier|*
name|enterWindow
init|=
name|enter
condition|?
name|connection
argument_list|()
operator|->
name|platformWindowFromId
argument_list|(
name|enter
operator|->
name|event
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|enterWindow
condition|)
block|{
specifier|const
name|int
name|dpr
init|=
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
decl_stmt|;
name|QPoint
name|local
argument_list|(
name|enter
operator|->
name|event_x
operator|/
name|dpr
argument_list|,
name|enter
operator|->
name|event_y
operator|/
name|dpr
argument_list|)
decl_stmt|;
name|QPoint
name|global
argument_list|(
name|enter
operator|->
name|root_x
operator|/
name|dpr
argument_list|,
name|enter
operator|->
name|root_y
operator|/
name|dpr
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleEnterLeaveEvent
argument_list|(
name|enterWindow
operator|->
name|window
argument_list|()
argument_list|,
name|window
argument_list|()
argument_list|,
name|local
argument_list|,
name|global
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
name|enter
argument_list|)
expr_stmt|;
block|}
DECL|function|handlePropertyNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handlePropertyNotifyEvent
parameter_list|(
specifier|const
name|xcb_property_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|propertyDeleted
init|=
name|event
operator|->
name|state
operator|==
name|XCB_PROPERTY_DELETE
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|atom
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE
argument_list|)
operator|||
name|event
operator|->
name|atom
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_STATE
argument_list|)
condition|)
block|{
if|if
condition|(
name|propertyDeleted
condition|)
return|return;
name|Qt
operator|::
name|WindowState
name|newState
init|=
name|Qt
operator|::
name|WindowNoState
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|atom
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_STATE
argument_list|)
condition|)
block|{
comment|// WM_STATE: Quick check for 'Minimize'.
specifier|const
name|xcb_get_property_cookie_t
name|get_cookie
init|=
name|xcb_get_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_STATE
argument_list|)
argument_list|,
name|XCB_ATOM_ANY
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|get_cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|&&
name|reply
operator|->
name|format
operator|==
literal|32
operator|&&
name|reply
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_STATE
argument_list|)
condition|)
block|{
specifier|const
name|quint32
modifier|*
name|data
init|=
operator|(
specifier|const
name|quint32
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|->
name|length
operator|!=
literal|0
operator|&&
name|XCB_WM_STATE_ICONIC
operator|==
name|data
index|[
literal|0
index|]
condition|)
name|newState
operator|=
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
block|}
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// _NET_WM_STATE can't change minimized state
if|if
condition|(
name|m_lastWindowStateEvent
operator|==
name|Qt
operator|::
name|WindowMinimized
condition|)
name|newState
operator|=
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
block|}
if|if
condition|(
name|newState
operator|!=
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
comment|// Something else changed, get _NET_WM_STATE.
specifier|const
name|NetWmStates
name|states
init|=
name|netWmStates
argument_list|()
decl_stmt|;
if|if
condition|(
name|states
operator|&
name|NetWmStateFullScreen
condition|)
name|newState
operator|=
name|Qt
operator|::
name|WindowFullScreen
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|states
operator|&
name|NetWmStateMaximizedHorz
operator|)
operator|&&
operator|(
name|states
operator|&
name|NetWmStateMaximizedVert
operator|)
condition|)
name|newState
operator|=
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
block|}
comment|// Send Window state, compress events in case other flags (modality, etc) are changed.
if|if
condition|(
name|m_lastWindowStateEvent
operator|!=
name|newState
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleWindowStateChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|newState
argument_list|)
expr_stmt|;
name|m_lastWindowStateEvent
operator|=
name|newState
expr_stmt|;
name|m_windowState
operator|=
name|newState
expr_stmt|;
block|}
return|return;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|atom
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WORKAREA
argument_list|)
operator|&&
name|xcbScreen
argument_list|()
operator|&&
name|event
operator|->
name|window
operator|==
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
condition|)
block|{
name|xcbScreen
argument_list|()
operator|->
name|updateGeometry
argument_list|(
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|handleFocusInEvent
name|void
name|QXcbWindow
operator|::
name|handleFocusInEvent
parameter_list|(
specifier|const
name|xcb_focus_in_event_t
modifier|*
parameter_list|)
block|{
name|doFocusIn
argument_list|()
expr_stmt|;
block|}
DECL|function|handleFocusOutEvent
name|void
name|QXcbWindow
operator|::
name|handleFocusOutEvent
parameter_list|(
specifier|const
name|xcb_focus_out_event_t
modifier|*
parameter_list|)
block|{
name|doFocusOut
argument_list|()
expr_stmt|;
block|}
DECL|function|updateSyncRequestCounter
name|void
name|QXcbWindow
operator|::
name|updateSyncRequestCounter
parameter_list|()
block|{
if|if
condition|(
name|m_syncState
operator|!=
name|SyncAndConfigureReceived
condition|)
block|{
comment|// window manager does not expect a sync event yet.
return|return;
block|}
if|if
condition|(
name|m_usingSyncProtocol
operator|&&
operator|(
name|m_syncValue
operator|.
name|lo
operator|!=
literal|0
operator|||
name|m_syncValue
operator|.
name|hi
operator|!=
literal|0
operator|)
condition|)
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_sync_set_counter
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_syncCounter
argument_list|,
name|m_syncValue
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|m_syncValue
operator|.
name|lo
operator|=
literal|0
expr_stmt|;
name|m_syncValue
operator|.
name|hi
operator|=
literal|0
expr_stmt|;
name|m_syncState
operator|=
name|NoSyncNeeded
expr_stmt|;
block|}
block|}
DECL|function|setKeyboardGrabEnabled
name|bool
name|QXcbWindow
operator|::
name|setKeyboardGrabEnabled
parameter_list|(
name|bool
name|grab
parameter_list|)
block|{
if|if
condition|(
name|grab
operator|&&
operator|!
name|connection
argument_list|()
operator|->
name|canGrab
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|grab
condition|)
block|{
name|xcb_ungrab_keyboard
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_TIME_CURRENT_TIME
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|xcb_grab_keyboard_cookie_t
name|cookie
init|=
name|xcb_grab_keyboard
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|m_window
argument_list|,
name|XCB_TIME_CURRENT_TIME
argument_list|,
name|XCB_GRAB_MODE_ASYNC
argument_list|,
name|XCB_GRAB_MODE_ASYNC
argument_list|)
decl_stmt|;
name|xcb_grab_keyboard_reply_t
modifier|*
name|reply
init|=
name|xcb_grab_keyboard_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|bool
name|result
init|=
operator|!
operator|(
operator|!
name|reply
operator|||
name|reply
operator|->
name|status
operator|!=
name|XCB_GRAB_STATUS_SUCCESS
operator|)
decl_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|setMouseGrabEnabled
name|bool
name|QXcbWindow
operator|::
name|setMouseGrabEnabled
parameter_list|(
name|bool
name|grab
parameter_list|)
block|{
if|if
condition|(
name|grab
operator|&&
operator|!
name|connection
argument_list|()
operator|->
name|canGrab
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|grab
condition|)
block|{
name|xcb_ungrab_pointer
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_TIME_CURRENT_TIME
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|xcb_grab_pointer_cookie_t
name|cookie
init|=
name|xcb_grab_pointer
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|m_window
argument_list|,
operator|(
name|XCB_EVENT_MASK_BUTTON_PRESS
operator||
name|XCB_EVENT_MASK_BUTTON_RELEASE
operator||
name|XCB_EVENT_MASK_BUTTON_MOTION
operator||
name|XCB_EVENT_MASK_ENTER_WINDOW
operator||
name|XCB_EVENT_MASK_LEAVE_WINDOW
operator||
name|XCB_EVENT_MASK_POINTER_MOTION
operator|)
argument_list|,
name|XCB_GRAB_MODE_ASYNC
argument_list|,
name|XCB_GRAB_MODE_ASYNC
argument_list|,
name|XCB_WINDOW_NONE
argument_list|,
name|XCB_CURSOR_NONE
argument_list|,
name|XCB_TIME_CURRENT_TIME
argument_list|)
decl_stmt|;
name|xcb_grab_pointer_reply_t
modifier|*
name|reply
init|=
name|xcb_grab_pointer_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|bool
name|result
init|=
operator|!
operator|(
operator|!
name|reply
operator|||
name|reply
operator|->
name|status
operator|!=
name|XCB_GRAB_STATUS_SUCCESS
operator|)
decl_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|setCursor
name|void
name|QXcbWindow
operator|::
name|setCursor
parameter_list|(
name|xcb_cursor_t
name|cursor
parameter_list|)
block|{
name|xcb_change_window_attributes
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|XCB_CW_CURSOR
argument_list|,
operator|&
name|cursor
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|windowEvent
name|void
name|QXcbWindow
operator|::
name|windowEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|FocusIn
case|:
if|if
condition|(
name|m_embedded
operator|&&
operator|!
name|event
operator|->
name|spontaneous
argument_list|()
condition|)
block|{
name|QFocusEvent
modifier|*
name|focusEvent
init|=
cast|static_cast
argument_list|<
name|QFocusEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|focusEvent
operator|->
name|reason
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|TabFocusReason
case|:
case|case
name|Qt
operator|::
name|BacktabFocusReason
case|:
block|{
specifier|const
name|QXcbWindow
modifier|*
name|container
init|=
cast|static_cast
argument_list|<
specifier|const
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|sendXEmbedMessage
argument_list|(
name|container
operator|->
name|xcb_window
argument_list|()
argument_list|,
name|focusEvent
operator|->
name|reason
argument_list|()
operator|==
name|Qt
operator|::
name|TabFocusReason
condition|?
name|XEMBED_FOCUS_NEXT
else|:
name|XEMBED_FOCUS_PREV
argument_list|)
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
break|break;
default|default:
break|break;
block|}
name|QPlatformWindow
operator|::
name|windowEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|function|startSystemResize
name|bool
name|QXcbWindow
operator|::
name|startSystemResize
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
name|Qt
operator|::
name|Corner
name|corner
parameter_list|)
block|{
specifier|const
name|int
name|dpr
init|=
name|int
argument_list|(
name|devicePixelRatio
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|xcb_atom_t
name|moveResize
init|=
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_MOVERESIZE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connection
argument_list|()
operator|->
name|wmSupport
argument_list|()
operator|->
name|isSupportedByWM
argument_list|(
name|moveResize
argument_list|)
condition|)
return|return
literal|false
return|;
name|xcb_client_message_event_t
name|xev
decl_stmt|;
name|xev
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|xev
operator|.
name|type
operator|=
name|moveResize
expr_stmt|;
name|xev
operator|.
name|window
operator|=
name|xcb_window
argument_list|()
expr_stmt|;
name|xev
operator|.
name|format
operator|=
literal|32
expr_stmt|;
specifier|const
name|QPoint
name|globalPos
init|=
name|window
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|pos
argument_list|)
operator|*
name|dpr
decl_stmt|;
name|xev
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|globalPos
operator|.
name|x
argument_list|()
expr_stmt|;
name|xev
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
name|globalPos
operator|.
name|y
argument_list|()
expr_stmt|;
specifier|const
name|bool
name|bottom
init|=
name|corner
operator|==
name|Qt
operator|::
name|BottomRightCorner
operator|||
name|corner
operator|==
name|Qt
operator|::
name|BottomLeftCorner
decl_stmt|;
specifier|const
name|bool
name|left
init|=
name|corner
operator|==
name|Qt
operator|::
name|BottomLeftCorner
operator|||
name|corner
operator|==
name|Qt
operator|::
name|TopLeftCorner
decl_stmt|;
if|if
condition|(
name|bottom
condition|)
name|xev
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
name|left
condition|?
literal|6
else|:
literal|4
expr_stmt|;
comment|// bottomleft/bottomright
else|else
name|xev
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
name|left
condition|?
literal|0
else|:
literal|2
expr_stmt|;
comment|// topleft/topright
name|xev
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
name|XCB_BUTTON_INDEX_1
expr_stmt|;
name|xev
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|xcb_ungrab_pointer
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_CURRENT_TIME
argument_list|)
expr_stmt|;
name|xcb_send_event
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|xcbScreen
argument_list|()
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|xev
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Sends an XEmbed message.
DECL|function|sendXEmbedMessage
name|void
name|QXcbWindow
operator|::
name|sendXEmbedMessage
parameter_list|(
name|xcb_window_t
name|window
parameter_list|,
name|quint32
name|message
parameter_list|,
name|quint32
name|detail
parameter_list|,
name|quint32
name|data1
parameter_list|,
name|quint32
name|data2
parameter_list|)
block|{
name|xcb_client_message_event_t
name|event
decl_stmt|;
name|event
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|event
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|event
operator|.
name|window
operator|=
name|window
expr_stmt|;
name|event
operator|.
name|type
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_XEMBED
argument_list|)
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|connection
argument_list|()
operator|->
name|time
argument_list|()
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
name|message
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
name|detail
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
name|data1
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
name|data2
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|window
argument_list|,
name|XCB_EVENT_MASK_NO_EVENT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|activeWindowChangeQueued
specifier|static
name|bool
name|activeWindowChangeQueued
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
comment|/* Check from window system event queue if the next queued activation      * targets a window other than @window.      */
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindowEvent
modifier|*
name|systemEvent
init|=
cast|static_cast
argument_list|<
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindowEvent
operator|*
argument_list|>
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|peekWindowSystemEvent
argument_list|(
name|QWindowSystemInterfacePrivate
operator|::
name|ActivatedWindow
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|systemEvent
operator|&&
name|systemEvent
operator|->
name|activated
operator|!=
name|window
return|;
block|}
DECL|function|handleXEmbedMessage
name|void
name|QXcbWindow
operator|::
name|handleXEmbedMessage
parameter_list|(
specifier|const
name|xcb_client_message_event_t
modifier|*
name|event
parameter_list|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|1
index|]
condition|)
block|{
case|case
name|XEMBED_WINDOW_ACTIVATE
case|:
case|case
name|XEMBED_WINDOW_DEACTIVATE
case|:
break|break;
case|case
name|XEMBED_EMBEDDED_NOTIFY
case|:
name|Q_XCB_CALL
argument_list|(
name|xcb_map_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
name|xcbScreen
argument_list|()
operator|->
name|windowShown
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Without Qt::WA_TranslucentBackground, we use a ParentRelative BackPixmap.
comment|// Clear the whole tray icon window to its background color as early as possible
comment|// so that we can get a clean result from grabWindow() later.
name|Q_XCB_CALL
argument_list|(
name|xcb_clear_area
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|m_window
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XEMBED_FOCUS_IN
case|:
name|Qt
operator|::
name|FocusReason
name|reason
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|2
index|]
condition|)
block|{
case|case
name|XEMBED_FOCUS_FIRST
case|:
name|reason
operator|=
name|Qt
operator|::
name|TabFocusReason
expr_stmt|;
break|break;
case|case
name|XEMBED_FOCUS_LAST
case|:
name|reason
operator|=
name|Qt
operator|::
name|BacktabFocusReason
expr_stmt|;
break|break;
case|case
name|XEMBED_FOCUS_CURRENT
case|:
default|default:
name|reason
operator|=
name|Qt
operator|::
name|OtherFocusReason
expr_stmt|;
break|break;
block|}
name|connection
argument_list|()
operator|->
name|setFocusWindow
argument_list|(
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|window
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|window
argument_list|()
argument_list|,
name|reason
argument_list|)
expr_stmt|;
break|break;
case|case
name|XEMBED_FOCUS_OUT
case|:
if|if
condition|(
name|window
argument_list|()
operator|==
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|&&
operator|!
name|activeWindowChangeQueued
argument_list|(
name|window
argument_list|()
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|setFocusWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
DECL|function|qRectToXCBRectangle
specifier|static
specifier|inline
name|xcb_rectangle_t
name|qRectToXCBRectangle
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|xcb_rectangle_t
name|result
decl_stmt|;
name|result
operator|.
name|x
operator|=
name|qMax
argument_list|(
name|SHRT_MIN
argument_list|,
name|r
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|y
operator|=
name|qMax
argument_list|(
name|SHRT_MIN
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|width
operator|=
name|qMin
argument_list|(
operator|(
name|int
operator|)
name|USHRT_MAX
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|height
operator|=
name|qMin
argument_list|(
operator|(
name|int
operator|)
name|USHRT_MAX
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|setOpacity
name|void
name|QXcbWindow
operator|::
name|setOpacity
parameter_list|(
name|qreal
name|level
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_window
condition|)
return|return;
name|quint32
name|value
init|=
name|qRound64
argument_list|(
name|qBound
argument_list|(
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|,
name|level
argument_list|,
name|qreal
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|*
literal|0xffffffff
argument_list|)
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_OPACITY
argument_list|)
argument_list|,
name|XCB_ATOM_CARDINAL
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|(
name|uchar
operator|*
operator|)
operator|&
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setMask
name|void
name|QXcbWindow
operator|::
name|setMask
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
if|if
condition|(
operator|!
name|connection
argument_list|()
operator|->
name|hasXShape
argument_list|()
condition|)
return|return;
if|if
condition|(
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xcb_shape_mask
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_SHAPE_SO_SET
argument_list|,
name|XCB_SHAPE_SK_BOUNDING
argument_list|,
name|xcb_window
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|XCB_NONE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|dpr
init|=
name|devicePixelRatio
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|xcb_rectangle_t
argument_list|>
name|rects
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QRect
modifier|&
name|r
control|,
name|region
operator|.
name|rects
argument_list|()
control|)
name|rects
operator|.
name|push_back
argument_list|(
name|qRectToXCBRectangle
argument_list|(
name|mapToNative
argument_list|(
name|r
argument_list|,
name|dpr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_shape_rectangles
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_SHAPE_SO_SET
argument_list|,
name|XCB_SHAPE_SK_BOUNDING
argument_list|,
name|XCB_CLIP_ORDERING_UNSORTED
argument_list|,
name|xcb_window
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|rects
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|rects
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|setAlertState
name|void
name|QXcbWindow
operator|::
name|setAlertState
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|m_alertState
operator|==
name|enabled
condition|)
return|return;
name|m_alertState
operator|=
name|enabled
expr_stmt|;
name|changeNetWmState
argument_list|(
name|enabled
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_DEMANDS_ATTENTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|needsSync
name|bool
name|QXcbWindow
operator|::
name|needsSync
parameter_list|()
specifier|const
block|{
return|return
name|m_syncState
operator|==
name|SyncAndConfigureReceived
return|;
block|}
DECL|function|postSyncWindowRequest
name|void
name|QXcbWindow
operator|::
name|postSyncWindowRequest
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_pendingSyncRequest
condition|)
block|{
name|QXcbSyncWindowRequest
modifier|*
name|e
init|=
operator|new
name|QXcbSyncWindowRequest
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|m_pendingSyncRequest
operator|=
name|e
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|xcbScreen
argument_list|()
operator|->
name|connection
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|devicePixelRatio
name|qreal
name|QXcbWindow
operator|::
name|devicePixelRatio
parameter_list|()
specifier|const
block|{
return|return
name|xcbScreen
argument_list|()
condition|?
name|xcbScreen
argument_list|()
operator|->
name|devicePixelRatio
argument_list|()
else|:
literal|1.0
return|;
block|}
DECL|function|xcbScreen
name|QXcbScreen
modifier|*
name|QXcbWindow
operator|::
name|xcbScreen
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|screen
argument_list|()
argument_list|)
return|;
block|}
name|QT_END_NAMESPACE
end_enum_decl
end_unit
