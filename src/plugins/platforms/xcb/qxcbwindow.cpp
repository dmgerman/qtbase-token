begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxcbwindow.h"
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|"qxcbconnection.h"
end_include
begin_include
include|#
directive|include
file|"qxcbscreen.h"
end_include
begin_include
include|#
directive|include
file|"qxcbdrag.h"
end_include
begin_include
include|#
directive|include
file|"qxcbkeyboard.h"
end_include
begin_include
include|#
directive|include
file|"qxcbwmsupport.h"
end_include
begin_include
include|#
directive|include
file|<qplatformintegration_qpa.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|XCB_USE_DRI2
end_ifdef
begin_include
include|#
directive|include
file|"qdri2context.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// FIXME This workaround can be removed for xcb-icccm> 3.8
end_comment
begin_define
DECL|macro|class
define|#
directive|define
name|class
value|class_name
end_define
begin_include
include|#
directive|include
file|<xcb/xcb_icccm.h>
end_include
begin_undef
DECL|macro|class
undef|#
directive|undef
name|class
end_undef
begin_include
include|#
directive|include
file|<xcb/xfixes.h>
end_include
begin_comment
comment|// xcb-icccm 3.8 support
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|XCB_ICCCM_NUM_WM_SIZE_HINTS_ELEMENTS
end_ifdef
begin_define
DECL|macro|xcb_get_wm_hints_reply
define|#
directive|define
name|xcb_get_wm_hints_reply
value|xcb_icccm_get_wm_hints_reply
end_define
begin_define
DECL|macro|xcb_get_wm_hints
define|#
directive|define
name|xcb_get_wm_hints
value|xcb_icccm_get_wm_hints
end_define
begin_define
DECL|macro|xcb_get_wm_hints_unchecked
define|#
directive|define
name|xcb_get_wm_hints_unchecked
value|xcb_icccm_get_wm_hints_unchecked
end_define
begin_define
DECL|macro|xcb_set_wm_hints
define|#
directive|define
name|xcb_set_wm_hints
value|xcb_icccm_set_wm_hints
end_define
begin_define
DECL|macro|xcb_set_wm_normal_hints
define|#
directive|define
name|xcb_set_wm_normal_hints
value|xcb_icccm_set_wm_normal_hints
end_define
begin_define
DECL|macro|xcb_size_hints_set_base_size
define|#
directive|define
name|xcb_size_hints_set_base_size
value|xcb_icccm_size_hints_set_base_size
end_define
begin_define
DECL|macro|xcb_size_hints_set_max_size
define|#
directive|define
name|xcb_size_hints_set_max_size
value|xcb_icccm_size_hints_set_max_size
end_define
begin_define
DECL|macro|xcb_size_hints_set_min_size
define|#
directive|define
name|xcb_size_hints_set_min_size
value|xcb_icccm_size_hints_set_min_size
end_define
begin_define
DECL|macro|xcb_size_hints_set_position
define|#
directive|define
name|xcb_size_hints_set_position
value|xcb_icccm_size_hints_set_position
end_define
begin_define
DECL|macro|xcb_size_hints_set_resize_inc
define|#
directive|define
name|xcb_size_hints_set_resize_inc
value|xcb_icccm_size_hints_set_resize_inc
end_define
begin_define
DECL|macro|xcb_size_hints_set_size
define|#
directive|define
name|xcb_size_hints_set_size
value|xcb_icccm_size_hints_set_size
end_define
begin_define
DECL|macro|xcb_size_hints_set_win_gravity
define|#
directive|define
name|xcb_size_hints_set_win_gravity
value|xcb_icccm_size_hints_set_win_gravity
end_define
begin_define
DECL|macro|xcb_wm_hints_set_iconic
define|#
directive|define
name|xcb_wm_hints_set_iconic
value|xcb_icccm_wm_hints_set_iconic
end_define
begin_define
DECL|macro|xcb_wm_hints_set_normal
define|#
directive|define
name|xcb_wm_hints_set_normal
value|xcb_icccm_wm_hints_set_normal
end_define
begin_define
DECL|macro|xcb_wm_hints_set_input
define|#
directive|define
name|xcb_wm_hints_set_input
value|xcb_icccm_wm_hints_set_input
end_define
begin_define
DECL|macro|xcb_wm_hints_t
define|#
directive|define
name|xcb_wm_hints_t
value|xcb_icccm_wm_hints_t
end_define
begin_define
DECL|macro|XCB_WM_STATE_ICONIC
define|#
directive|define
name|XCB_WM_STATE_ICONIC
value|XCB_ICCCM_WM_STATE_ICONIC
end_define
begin_define
DECL|macro|XCB_WM_STATE_WITHDRAWN
define|#
directive|define
name|XCB_WM_STATE_WITHDRAWN
value|XCB_ICCCM_WM_STATE_WITHDRAWN
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindow_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPlatformBackingStore>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|XCB_USE_XLIB
end_ifdef
begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include
begin_include
include|#
directive|include
file|<X11/Xutil.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|XCB_USE_XINPUT2_MAEMO
end_ifdef
begin_include
include|#
directive|include
file|<X11/extensions/XInput2.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_GLX
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qglxintegration.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qglxconvenience_p.h>
end_include
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
end_elif
begin_include
include|#
directive|include
file|"qxcbeglsurface.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qeglconvenience_p.h>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qxlibeglintegration_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|XCOORD_MAX
define|#
directive|define
name|XCOORD_MAX
value|16383
end_define
begin_comment
comment|//#ifdef NET_WM_STATE_DEBUG
end_comment
begin_function
name|QT_BEGIN_NAMESPACE
comment|// Returns true if we should set WM_TRANSIENT_FOR on \a w
DECL|function|isTransient
specifier|static
specifier|inline
name|bool
name|isTransient
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
return|return
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Sheet
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|SplashScreen
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Drawer
operator|||
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Popup
return|;
block|}
end_function
begin_function
DECL|function|imageFormatForDepth
specifier|static
specifier|inline
name|QImage
operator|::
name|Format
name|imageFormatForDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
switch|switch
condition|(
name|depth
condition|)
block|{
case|case
literal|32
case|:
return|return
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
return|;
case|case
literal|24
case|:
return|return
name|QImage
operator|::
name|Format_RGB32
return|;
case|case
literal|16
case|:
return|return
name|QImage
operator|::
name|Format_RGB16
return|;
default|default:
return|return
name|QImage
operator|::
name|Format_Invalid
return|;
block|}
block|}
end_function
begin_constructor
DECL|function|QXcbWindow
name|QXcbWindow
operator|::
name|QXcbWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QPlatformWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_window
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_syncCounter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_mapped
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_transparent
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_deferredActivation
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_netWmUserTimeWindow
argument_list|(
name|XCB_NONE
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
member_init_list|,
name|m_eglSurface
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
block|{
name|m_screen
operator|=
cast|static_cast
argument_list|<
name|QXcbScreen
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|setConnection
argument_list|(
name|m_screen
operator|->
name|connection
argument_list|()
argument_list|)
expr_stmt|;
name|create
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|create
name|void
name|QXcbWindow
operator|::
name|create
parameter_list|()
block|{
name|destroy
argument_list|()
expr_stmt|;
name|m_windowState
operator|=
name|Qt
operator|::
name|WindowNoState
expr_stmt|;
name|Qt
operator|::
name|WindowType
name|type
init|=
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Desktop
condition|)
block|{
name|m_window
operator|=
name|m_screen
operator|->
name|root
argument_list|()
expr_stmt|;
name|m_depth
operator|=
name|m_screen
operator|->
name|screen
argument_list|()
operator|->
name|root_depth
expr_stmt|;
name|m_imageFormat
operator|=
name|imageFormatForDepth
argument_list|(
name|m_depth
argument_list|)
expr_stmt|;
name|connection
argument_list|()
operator|->
name|addWindow
argument_list|(
name|m_window
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|quint32
name|mask
init|=
name|XCB_CW_BACK_PIXMAP
operator||
name|XCB_CW_OVERRIDE_REDIRECT
operator||
name|XCB_CW_SAVE_UNDER
operator||
name|XCB_CW_EVENT_MASK
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
comment|// XCB_CW_BACK_PIXMAP
name|XCB_NONE
block|,
comment|// XCB_CW_OVERRIDE_REDIRECT
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
block|,
comment|// XCB_CW_SAVE_UNDER
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|||
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|||
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
operator|||
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|||
name|type
operator|==
name|Qt
operator|::
name|Drawer
block|,
comment|// XCB_CW_EVENT_MASK
name|XCB_EVENT_MASK_EXPOSURE
operator||
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_KEY_PRESS
operator||
name|XCB_EVENT_MASK_KEY_RELEASE
operator||
name|XCB_EVENT_MASK_BUTTON_PRESS
operator||
name|XCB_EVENT_MASK_BUTTON_RELEASE
operator||
name|XCB_EVENT_MASK_BUTTON_MOTION
operator||
name|XCB_EVENT_MASK_ENTER_WINDOW
operator||
name|XCB_EVENT_MASK_LEAVE_WINDOW
operator||
name|XCB_EVENT_MASK_POINTER_MOTION
operator||
name|XCB_EVENT_MASK_PROPERTY_CHANGE
operator||
name|XCB_EVENT_MASK_FOCUS_CHANGE
block|}
decl_stmt|;
name|QRect
name|rect
init|=
name|window
argument_list|()
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setWidth
argument_list|(
name|qBound
argument_list|(
literal|1
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|qBound
argument_list|(
literal|1
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_window_t
name|xcb_parent_id
init|=
name|m_screen
operator|->
name|root
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
argument_list|()
condition|)
name|xcb_parent_id
operator|=
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
operator|->
name|xcb_window
argument_list|()
expr_stmt|;
name|m_format
operator|=
name|window
argument_list|()
operator|->
name|requestedFormat
argument_list|()
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|XCB_USE_GLX
argument_list|)
operator|||
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
operator|)
operator|&&
name|defined
argument_list|(
name|XCB_USE_XLIB
argument_list|)
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|OpenGL
argument_list|)
operator|||
name|m_format
operator|.
name|hasAlpha
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_GLX
argument_list|)
name|XVisualInfo
modifier|*
name|visualInfo
init|=
name|qglx_findVisualInfo
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|m_screen
argument_list|)
argument_list|,
name|m_screen
operator|->
name|screenNumber
argument_list|()
argument_list|,
operator|&
name|m_format
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|visualInfo
condition|)
name|qFatal
argument_list|(
literal|"Could not initialize GLX"
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
name|EGLDisplay
name|eglDisplay
init|=
name|connection
argument_list|()
operator|->
name|egl_display
argument_list|()
decl_stmt|;
name|EGLConfig
name|eglConfig
init|=
name|q_configFromGLFormat
argument_list|(
name|eglDisplay
argument_list|,
name|m_format
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|m_format
operator|=
name|q_glFormatFromConfig
argument_list|(
name|eglDisplay
argument_list|,
name|eglConfig
argument_list|)
expr_stmt|;
name|VisualID
name|id
init|=
name|QXlibEglIntegration
operator|::
name|getCompatibleVisualId
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|eglDisplay
argument_list|,
name|eglConfig
argument_list|)
decl_stmt|;
name|XVisualInfo
name|visualInfoTemplate
decl_stmt|;
name|memset
argument_list|(
operator|&
name|visualInfoTemplate
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|XVisualInfo
argument_list|)
argument_list|)
expr_stmt|;
name|visualInfoTemplate
operator|.
name|visualid
operator|=
name|id
expr_stmt|;
name|XVisualInfo
modifier|*
name|visualInfo
decl_stmt|;
name|int
name|matchingCount
init|=
literal|0
decl_stmt|;
name|visualInfo
operator|=
name|XGetVisualInfo
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|VisualIDMask
argument_list|,
operator|&
name|visualInfoTemplate
argument_list|,
operator|&
name|matchingCount
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|visualInfo
condition|)
name|qFatal
argument_list|(
literal|"Could not initialize EGL"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//XCB_USE_GLX
name|m_depth
operator|=
name|visualInfo
operator|->
name|depth
expr_stmt|;
name|m_imageFormat
operator|=
name|imageFormatForDepth
argument_list|(
name|m_depth
argument_list|)
expr_stmt|;
name|Colormap
name|cmap
init|=
name|XCreateColormap
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|xcb_parent_id
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|AllocNone
argument_list|)
decl_stmt|;
name|XSetWindowAttributes
name|a
decl_stmt|;
name|a
operator|.
name|background_pixel
operator|=
name|WhitePixel
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|m_screen
operator|->
name|screenNumber
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|border_pixel
operator|=
name|BlackPixel
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|m_screen
operator|->
name|screenNumber
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|colormap
operator|=
name|cmap
expr_stmt|;
name|m_visualId
operator|=
name|visualInfo
operator|->
name|visualid
expr_stmt|;
name|m_window
operator|=
name|XCreateWindow
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|xcb_parent_id
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|visualInfo
operator|->
name|depth
argument_list|,
name|InputOutput
argument_list|,
name|visualInfo
operator|->
name|visual
argument_list|,
name|CWBackPixel
operator||
name|CWBorderPixel
operator||
name|CWColormap
argument_list|,
operator|&
name|a
argument_list|)
expr_stmt|;
name|XFree
argument_list|(
name|visualInfo
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|//defined(XCB_USE_GLX) || defined(XCB_USE_EGL)
block|{
name|m_window
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|m_depth
operator|=
name|m_screen
operator|->
name|screen
argument_list|()
operator|->
name|root_depth
expr_stmt|;
name|m_imageFormat
operator|=
name|imageFormatForDepth
argument_list|(
name|m_depth
argument_list|)
expr_stmt|;
name|m_visualId
operator|=
name|m_screen
operator|->
name|screen
argument_list|()
operator|->
name|root_visual
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_create_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_COPY_FROM_PARENT
argument_list|,
comment|// depth -- same as root
name|m_window
argument_list|,
comment|// window id
name|xcb_parent_id
argument_list|,
comment|// parent window id
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
comment|// border width
name|XCB_WINDOW_CLASS_INPUT_OUTPUT
argument_list|,
comment|// window class
name|m_visualId
argument_list|,
comment|// visual
literal|0
argument_list|,
comment|// value mask
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// value list
block|}
name|connection
argument_list|()
operator|->
name|addWindow
argument_list|(
name|m_window
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_window_attributes
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|propagateSizeHints
argument_list|()
expr_stmt|;
name|xcb_atom_t
name|properties
index|[
literal|4
index|]
decl_stmt|;
name|int
name|propertyCount
init|=
literal|0
decl_stmt|;
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_DELETE_WINDOW
argument_list|)
expr_stmt|;
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_TAKE_FOCUS
argument_list|)
expr_stmt|;
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_PING
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_screen
operator|->
name|syncRequestSupported
argument_list|()
condition|)
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_SYNC_REQUEST
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowContextHelpButtonHint
condition|)
name|properties
index|[
name|propertyCount
operator|++
index|]
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_CONTEXT_HELP
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_PROTOCOLS
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|32
argument_list|,
name|propertyCount
argument_list|,
name|properties
argument_list|)
argument_list|)
expr_stmt|;
name|m_syncValue
operator|.
name|hi
operator|=
literal|0
expr_stmt|;
name|m_syncValue
operator|.
name|lo
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|m_screen
operator|->
name|syncRequestSupported
argument_list|()
condition|)
block|{
name|m_syncCounter
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_sync_create_counter
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_syncCounter
argument_list|,
name|m_syncValue
argument_list|)
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_SYNC_REQUEST_COUNTER
argument_list|)
argument_list|,
name|XCB_ATOM_CARDINAL
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|m_syncCounter
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set the PID to let the WM kill the application if unresponsive
name|long
name|pid
init|=
name|getpid
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_PID
argument_list|)
argument_list|,
name|XCB_ATOM_CARDINAL
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_wm_hints_t
name|hints
decl_stmt|;
name|memset
argument_list|(
operator|&
name|hints
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|hints
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_wm_hints_set_normal
argument_list|(
operator|&
name|hints
argument_list|)
expr_stmt|;
name|xcb_wm_hints_set_input
argument_list|(
operator|&
name|hints
argument_list|,
operator|!
operator|(
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowDoesNotAcceptFocus
operator|)
argument_list|)
expr_stmt|;
name|xcb_set_wm_hints
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
operator|&
name|hints
argument_list|)
expr_stmt|;
name|xcb_window_t
name|leader
init|=
name|m_screen
operator|->
name|clientLeader
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_CLIENT_LEADER
argument_list|)
argument_list|,
name|XCB_ATOM_WINDOW
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|leader
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|XCB_USE_XINPUT2_MAEMO
if|if
condition|(
name|connection
argument_list|()
operator|->
name|isUsingXInput2
argument_list|()
condition|)
block|{
name|XIEventMask
name|xieventmask
decl_stmt|;
name|uchar
name|bitmask
index|[
literal|2
index|]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|xieventmask
operator|.
name|deviceid
operator|=
name|XIAllMasterDevices
expr_stmt|;
name|xieventmask
operator|.
name|mask
operator|=
name|bitmask
expr_stmt|;
name|xieventmask
operator|.
name|mask_len
operator|=
sizeof|sizeof
argument_list|(
name|bitmask
argument_list|)
expr_stmt|;
name|XISetMask
argument_list|(
name|bitmask
argument_list|,
name|XI_ButtonPress
argument_list|)
expr_stmt|;
name|XISetMask
argument_list|(
name|bitmask
argument_list|,
name|XI_ButtonRelease
argument_list|)
expr_stmt|;
name|XISetMask
argument_list|(
name|bitmask
argument_list|,
name|XI_Motion
argument_list|)
expr_stmt|;
name|XISelectEvents
argument_list|(
name|DISPLAY_FROM_XCB
argument_list|(
name|this
argument_list|)
argument_list|,
name|m_window
argument_list|,
operator|&
name|xieventmask
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|setWindowFlags
argument_list|(
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|window
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
name|setWindowState
argument_list|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowTransparentForInput
condition|)
name|setTransparentForMouseEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
argument_list|()
operator|->
name|drag
argument_list|()
operator|->
name|dndEnable
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QXcbWindow
name|QXcbWindow
operator|::
name|~
name|QXcbWindow
parameter_list|()
block|{
name|destroy
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|destroy
name|void
name|QXcbWindow
operator|::
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|m_syncCounter
operator|&&
name|m_screen
operator|->
name|syncRequestSupported
argument_list|()
condition|)
name|Q_XCB_CALL
argument_list|(
name|xcb_sync_destroy_counter
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_syncCounter
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_window
condition|)
block|{
if|if
condition|(
name|m_netWmUserTimeWindow
condition|)
block|{
name|xcb_delete_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME_WINDOW
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some window managers, like metacity, do XSelectInput on the _NET_WM_USER_TIME_WINDOW window,
comment|// without trapping BadWindow (which crashes when the user time window is destroyed).
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
name|xcb_destroy_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_netWmUserTimeWindow
argument_list|)
expr_stmt|;
name|m_netWmUserTimeWindow
operator|=
name|XCB_NONE
expr_stmt|;
block|}
name|connection
argument_list|()
operator|->
name|removeWindow
argument_list|(
name|m_window
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_destroy_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m_mapped
operator|=
literal|false
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
operator|delete
name|m_eglSurface
expr_stmt|;
name|m_eglSurface
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QXcbWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|propagateSizeHints
argument_list|()
expr_stmt|;
specifier|const
name|quint32
name|mask
init|=
name|XCB_CONFIG_WINDOW_X
operator||
name|XCB_CONFIG_WINDOW_Y
operator||
name|XCB_CONFIG_WINDOW_WIDTH
operator||
name|XCB_CONFIG_WINDOW_HEIGHT
decl_stmt|;
specifier|const
name|qint32
name|values
index|[]
init|=
block|{
name|qBound
argument_list|<
name|qint32
argument_list|>
argument_list|(
operator|-
name|XCOORD_MAX
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
block|,
name|qBound
argument_list|<
name|qint32
argument_list|>
argument_list|(
operator|-
name|XCOORD_MAX
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
block|,
name|qBound
argument_list|<
name|qint32
argument_list|>
argument_list|(
literal|1
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
block|,
name|qBound
argument_list|<
name|qint32
argument_list|>
argument_list|(
literal|1
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|XCOORD_MAX
argument_list|)
block|,     }
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_configure_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|values
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|frameMargins
name|QMargins
name|QXcbWindow
operator|::
name|frameMargins
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_dirtyFrameMargins
condition|)
block|{
name|xcb_window_t
name|window
init|=
name|m_window
decl_stmt|;
name|xcb_window_t
name|parent
init|=
name|m_window
decl_stmt|;
name|bool
name|foundRoot
init|=
literal|false
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|xcb_window_t
argument_list|>
modifier|&
name|virtualRoots
init|=
name|connection
argument_list|()
operator|->
name|wmSupport
argument_list|()
operator|->
name|virtualRoots
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|foundRoot
condition|)
block|{
name|xcb_query_tree_cookie_t
name|cookie
init|=
name|xcb_query_tree_unchecked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|xcb_query_tree_reply_t
modifier|*
name|reply
init|=
name|xcb_query_tree_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
if|if
condition|(
name|reply
operator|->
name|root
operator|==
name|reply
operator|->
name|parent
operator|||
name|virtualRoots
operator|.
name|indexOf
argument_list|(
name|reply
operator|->
name|parent
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|foundRoot
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|window
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
name|reply
operator|->
name|parent
expr_stmt|;
block|}
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_dirtyFrameMargins
operator|=
literal|false
expr_stmt|;
name|m_frameMargins
operator|=
name|QMargins
argument_list|()
expr_stmt|;
return|return
name|m_frameMargins
return|;
block|}
block|}
name|QPoint
name|offset
decl_stmt|;
name|xcb_translate_coordinates_reply_t
modifier|*
name|reply
init|=
name|xcb_translate_coordinates_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_translate_coordinates
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|window
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
name|offset
operator|=
name|QPoint
argument_list|(
name|reply
operator|->
name|dst_x
argument_list|,
name|reply
operator|->
name|dst_y
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
name|xcb_get_geometry_reply_t
modifier|*
name|geom
init|=
name|xcb_get_geometry_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_get_geometry
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|parent
argument_list|)
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|geom
condition|)
block|{
comment|// --
comment|// add the border_width for the window managers frame... some window managers
comment|// do not use a border_width of zero for their frames, and if we the left and
comment|// top strut, we ensure that pos() is absolutely correct.  frameGeometry()
comment|// will still be incorrect though... perhaps i should have foffset as well, to
comment|// indicate the frame offset (equal to the border_width on X).
comment|// - Brad
comment|// -- copied from qwidget_x11.cpp
name|int
name|left
init|=
name|offset
operator|.
name|x
argument_list|()
operator|+
name|geom
operator|->
name|border_width
decl_stmt|;
name|int
name|top
init|=
name|offset
operator|.
name|y
argument_list|()
operator|+
name|geom
operator|->
name|border_width
decl_stmt|;
name|int
name|right
init|=
name|geom
operator|->
name|width
operator|+
name|geom
operator|->
name|border_width
operator|-
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
operator|-
name|offset
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|bottom
init|=
name|geom
operator|->
name|height
operator|+
name|geom
operator|->
name|border_width
operator|-
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|offset
operator|.
name|y
argument_list|()
decl_stmt|;
name|m_frameMargins
operator|=
name|QMargins
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|geom
argument_list|)
expr_stmt|;
block|}
name|m_dirtyFrameMargins
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|m_frameMargins
return|;
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QXcbWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|visible
condition|)
name|show
argument_list|()
expr_stmt|;
else|else
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|show
name|void
name|QXcbWindow
operator|::
name|show
parameter_list|()
block|{
if|if
condition|(
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
condition|)
block|{
name|xcb_get_property_cookie_t
name|cookie
init|=
name|xcb_get_wm_hints_unchecked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
decl_stmt|;
name|xcb_wm_hints_t
name|hints
decl_stmt|;
name|xcb_get_wm_hints_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
operator|&
name|hints
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
name|xcb_wm_hints_set_iconic
argument_list|(
operator|&
name|hints
argument_list|)
expr_stmt|;
else|else
name|xcb_wm_hints_set_normal
argument_list|(
operator|&
name|hints
argument_list|)
expr_stmt|;
name|xcb_wm_hints_set_input
argument_list|(
operator|&
name|hints
argument_list|,
operator|!
operator|(
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowDoesNotAcceptFocus
operator|)
argument_list|)
expr_stmt|;
name|xcb_set_wm_hints
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
operator|&
name|hints
argument_list|)
expr_stmt|;
comment|// update WM_NORMAL_HINTS
name|propagateSizeHints
argument_list|()
expr_stmt|;
comment|// update WM_TRANSIENT_FOR
if|if
condition|(
name|window
argument_list|()
operator|->
name|transientParent
argument_list|()
operator|&&
name|isTransient
argument_list|(
name|window
argument_list|()
argument_list|)
condition|)
block|{
name|QXcbWindow
modifier|*
name|transientXcbParent
init|=
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|window
argument_list|()
operator|->
name|transientParent
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transientXcbParent
condition|)
block|{
comment|// ICCCM 4.1.2.6
name|xcb_window_t
name|parentWindow
init|=
name|transientXcbParent
operator|->
name|xcb_window
argument_list|()
decl_stmt|;
comment|// todo: set transient for group (wm_client_leader) if no parent, a la qwidget_x11.cpp
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|XCB_ATOM_WM_TRANSIENT_FOR
argument_list|,
name|XCB_ATOM_WINDOW
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|parentWindow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update _MOTIF_WM_HINTS
name|updateMotifWmHintsBeforeMap
argument_list|()
expr_stmt|;
comment|// update _NET_WM_STATE
name|updateNetWmStateBeforeMap
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
argument_list|()
operator|->
name|time
argument_list|()
operator|!=
name|XCB_TIME_CURRENT_TIME
condition|)
name|updateNetWmUserTime
argument_list|(
name|connection
argument_list|()
operator|->
name|time
argument_list|()
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_map_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hide
name|void
name|QXcbWindow
operator|::
name|hide
parameter_list|()
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_unmap_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
comment|// send synthetic UnmapNotify event according to icccm 4.1.4
name|xcb_unmap_notify_event_t
name|event
decl_stmt|;
name|event
operator|.
name|response_type
operator|=
name|XCB_UNMAP_NOTIFY
expr_stmt|;
name|event
operator|.
name|event
operator|=
name|m_screen
operator|->
name|root
argument_list|()
expr_stmt|;
name|event
operator|.
name|window
operator|=
name|m_window
expr_stmt|;
name|event
operator|.
name|from_configure
operator|=
literal|false
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|m_mapped
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|QtMotifWmHints
struct|struct
name|QtMotifWmHints
block|{
DECL|member|flags
DECL|member|functions
DECL|member|decorations
name|quint32
name|flags
decl_stmt|,
name|functions
decl_stmt|,
name|decorations
decl_stmt|;
DECL|member|input_mode
name|qint32
name|input_mode
decl_stmt|;
DECL|member|status
name|quint32
name|status
decl_stmt|;
block|}
struct|;
end_struct
begin_enum
enum|enum
block|{
DECL|enumerator|MWM_HINTS_FUNCTIONS
name|MWM_HINTS_FUNCTIONS
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_FUNC_ALL
name|MWM_FUNC_ALL
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_FUNC_RESIZE
name|MWM_FUNC_RESIZE
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_FUNC_MOVE
name|MWM_FUNC_MOVE
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_FUNC_MINIMIZE
name|MWM_FUNC_MINIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|3
operator|)
block|,
DECL|enumerator|MWM_FUNC_MAXIMIZE
name|MWM_FUNC_MAXIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|MWM_FUNC_CLOSE
name|MWM_FUNC_CLOSE
init|=
operator|(
literal|1L
operator|<<
literal|5
operator|)
block|,
DECL|enumerator|MWM_HINTS_DECORATIONS
name|MWM_HINTS_DECORATIONS
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_DECOR_ALL
name|MWM_DECOR_ALL
init|=
operator|(
literal|1L
operator|<<
literal|0
operator|)
block|,
DECL|enumerator|MWM_DECOR_BORDER
name|MWM_DECOR_BORDER
init|=
operator|(
literal|1L
operator|<<
literal|1
operator|)
block|,
DECL|enumerator|MWM_DECOR_RESIZEH
name|MWM_DECOR_RESIZEH
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_DECOR_TITLE
name|MWM_DECOR_TITLE
init|=
operator|(
literal|1L
operator|<<
literal|3
operator|)
block|,
DECL|enumerator|MWM_DECOR_MENU
name|MWM_DECOR_MENU
init|=
operator|(
literal|1L
operator|<<
literal|4
operator|)
block|,
DECL|enumerator|MWM_DECOR_MINIMIZE
name|MWM_DECOR_MINIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|5
operator|)
block|,
DECL|enumerator|MWM_DECOR_MAXIMIZE
name|MWM_DECOR_MAXIMIZE
init|=
operator|(
literal|1L
operator|<<
literal|6
operator|)
block|,
DECL|enumerator|MWM_HINTS_INPUT_MODE
name|MWM_HINTS_INPUT_MODE
init|=
operator|(
literal|1L
operator|<<
literal|2
operator|)
block|,
DECL|enumerator|MWM_INPUT_MODELESS
name|MWM_INPUT_MODELESS
init|=
literal|0L
block|,
DECL|enumerator|MWM_INPUT_PRIMARY_APPLICATION_MODAL
name|MWM_INPUT_PRIMARY_APPLICATION_MODAL
init|=
literal|1L
block|,
DECL|enumerator|MWM_INPUT_FULL_APPLICATION_MODAL
name|MWM_INPUT_FULL_APPLICATION_MODAL
init|=
literal|3L
block|}
enum|;
end_enum
begin_function
DECL|function|getMotifWmHints
specifier|static
name|QtMotifWmHints
name|getMotifWmHints
parameter_list|(
name|QXcbConnection
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|)
block|{
name|QtMotifWmHints
name|hints
decl_stmt|;
name|xcb_get_property_cookie_t
name|get_cookie
init|=
name|xcb_get_property_unchecked
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|window
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|get_cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|&&
name|reply
operator|->
name|format
operator|==
literal|32
operator|&&
name|reply
operator|->
name|type
operator|==
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
condition|)
block|{
name|hints
operator|=
operator|*
operator|(
operator|(
name|QtMotifWmHints
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|hints
operator|.
name|flags
operator|=
literal|0L
expr_stmt|;
name|hints
operator|.
name|functions
operator|=
name|MWM_FUNC_ALL
expr_stmt|;
name|hints
operator|.
name|decorations
operator|=
name|MWM_DECOR_ALL
expr_stmt|;
name|hints
operator|.
name|input_mode
operator|=
literal|0L
expr_stmt|;
name|hints
operator|.
name|status
operator|=
literal|0L
expr_stmt|;
block|}
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
return|return
name|hints
return|;
block|}
end_function
begin_function
DECL|function|setMotifWmHints
specifier|static
name|void
name|setMotifWmHints
parameter_list|(
name|QXcbConnection
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
specifier|const
name|QtMotifWmHints
modifier|&
name|hints
parameter_list|)
block|{
if|if
condition|(
name|hints
operator|.
name|flags
operator|!=
literal|0l
condition|)
block|{
name|Q_XCB_CALL2
argument_list|(
name|xcb_change_property
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|window
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|5
argument_list|,
operator|&
name|hints
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_XCB_CALL2
argument_list|(
name|xcb_delete_property
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|window
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_MOTIF_WM_HINTS
argument_list|)
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|printNetWmState
name|void
name|QXcbWindow
operator|::
name|printNetWmState
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|xcb_atom_t
argument_list|>
modifier|&
name|state
parameter_list|)
block|{
name|printf
argument_list|(
literal|"_NET_WM_STATE (%d): "
argument_list|,
name|state
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|state
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
DECL|macro|CHECK_WM_STATE
define|#
directive|define
name|CHECK_WM_STATE
parameter_list|(
name|state_atom
parameter_list|)
define|\
value|if (state.at(i) == atom(QXcbAtom::state_atom))\             printf(#state_atom " ");
name|CHECK_WM_STATE
argument_list|(
argument|_NET_WM_STATE_ABOVE
argument_list|)
name|CHECK_WM_STATE
argument_list|(
argument|_NET_WM_STATE_BELOW
argument_list|)
name|CHECK_WM_STATE
argument_list|(
argument|_NET_WM_STATE_FULLSCREEN
argument_list|)
name|CHECK_WM_STATE
argument_list|(
argument|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
name|CHECK_WM_STATE
argument_list|(
argument|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
name|CHECK_WM_STATE
argument_list|(
argument|_NET_WM_STATE_MODAL
argument_list|)
name|CHECK_WM_STATE
argument_list|(
argument|_NET_WM_STATE_STAYS_ON_TOP
argument_list|)
name|CHECK_WM_STATE
argument_list|(
argument|_NET_WM_STATE_DEMANDS_ATTENTION
argument_list|)
DECL|macro|CHECK_WM_STATE
undef|#
directive|undef
name|CHECK_WM_STATE
block|}
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getNetWmState
name|QVector
argument_list|<
name|xcb_atom_t
argument_list|>
name|QXcbWindow
operator|::
name|getNetWmState
parameter_list|()
block|{
name|QVector
argument_list|<
name|xcb_atom_t
argument_list|>
name|result
decl_stmt|;
name|xcb_get_property_cookie_t
name|get_cookie
init|=
name|xcb_get_property_unchecked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|get_cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|&&
name|reply
operator|->
name|format
operator|==
literal|32
operator|&&
name|reply
operator|->
name|type
operator|==
name|XCB_ATOM_ATOM
condition|)
block|{
name|result
operator|.
name|resize
argument_list|(
name|reply
operator|->
name|length
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|,
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
argument_list|,
name|reply
operator|->
name|length
operator|*
sizeof|sizeof
argument_list|(
name|xcb_atom_t
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|NET_WM_STATE_DEBUG
name|printf
argument_list|(
literal|"getting net wm state (%x)\n"
argument_list|,
name|m_window
argument_list|)
expr_stmt|;
name|printNetWmState
argument_list|(
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|NET_WM_STATE_DEBUG
name|printf
argument_list|(
literal|"getting net wm state (%x), empty\n"
argument_list|,
name|m_window
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setNetWmState
name|void
name|QXcbWindow
operator|::
name|setNetWmState
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|xcb_atom_t
argument_list|>
modifier|&
name|atoms
parameter_list|)
block|{
if|if
condition|(
name|atoms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_delete_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|32
argument_list|,
name|atoms
operator|.
name|count
argument_list|()
argument_list|,
name|atoms
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowFlags
name|Qt
operator|::
name|WindowFlags
name|QXcbWindow
operator|::
name|setWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
name|Qt
operator|::
name|WindowType
name|type
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
name|int
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
condition|)
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Popup
condition|)
name|flags
operator||=
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTransparentForInput
condition|)
block|{
name|uint32_t
name|mask
init|=
name|XCB_EVENT_MASK_EXPOSURE
operator||
name|XCB_EVENT_MASK_VISIBILITY_CHANGE
operator||
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_RESIZE_REDIRECT
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
operator||
name|XCB_EVENT_MASK_FOCUS_CHANGE
operator||
name|XCB_EVENT_MASK_PROPERTY_CHANGE
operator||
name|XCB_EVENT_MASK_COLOR_MAP_CHANGE
operator||
name|XCB_EVENT_MASK_OWNER_GRAB_BUTTON
decl_stmt|;
name|xcb_change_window_attributes
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_window
argument_list|()
argument_list|,
name|XCB_CW_EVENT_MASK
argument_list|,
operator|&
name|mask
argument_list|)
expr_stmt|;
block|}
name|setNetWmWindowFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|setMotifWindowFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|setTransparentForMouseEvents
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTransparentForInput
argument_list|)
expr_stmt|;
name|updateDoesNotAcceptFocus
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowDoesNotAcceptFocus
argument_list|)
expr_stmt|;
return|return
name|flags
return|;
block|}
end_function
begin_function
DECL|function|setMotifWindowFlags
name|void
name|QXcbWindow
operator|::
name|setMotifWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
name|Qt
operator|::
name|WindowType
name|type
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
name|int
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
argument_list|)
decl_stmt|;
name|QtMotifWmHints
name|mwmhints
decl_stmt|;
name|mwmhints
operator|.
name|flags
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
literal|0
expr_stmt|;
name|mwmhints
operator|.
name|input_mode
operator|=
literal|0L
expr_stmt|;
name|mwmhints
operator|.
name|status
operator|=
literal|0L
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|Qt
operator|::
name|SplashScreen
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|bool
name|customize
init|=
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
operator|!
operator|(
name|customize
operator|&&
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|)
operator|)
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_BORDER
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_RESIZEH
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
condition|)
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_TITLE
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MENU
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MINIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MINIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MAXIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MAXIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_CLOSE
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if type == Qt::SplashScreen
name|mwmhints
operator|.
name|decorations
operator|=
name|MWM_DECOR_ALL
expr_stmt|;
block|}
if|if
condition|(
name|mwmhints
operator|.
name|functions
operator|!=
literal|0
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MOVE
operator||
name|MWM_FUNC_RESIZE
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_ALL
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
operator|&&
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|&&
operator|!
operator|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
operator|)
operator|)
condition|)
block|{
comment|// a special case - only the titlebar without any button
name|mwmhints
operator|.
name|flags
operator|=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_MOVE
operator||
name|MWM_FUNC_RESIZE
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
literal|0
expr_stmt|;
block|}
name|setMotifWmHints
argument_list|(
name|connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mwmhints
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeNetWmState
name|void
name|QXcbWindow
operator|::
name|changeNetWmState
parameter_list|(
name|bool
name|set
parameter_list|,
name|xcb_atom_t
name|one
parameter_list|,
name|xcb_atom_t
name|two
parameter_list|)
block|{
name|xcb_client_message_event_t
name|event
decl_stmt|;
name|event
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|event
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|event
operator|.
name|window
operator|=
name|m_window
expr_stmt|;
name|event
operator|.
name|type
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE
argument_list|)
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|set
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
name|one
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
name|two
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|Qt
operator|::
name|WindowState
name|QXcbWindow
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|m_windowState
condition|)
return|return
name|state
return|;
comment|// unset old state
switch|switch
condition|(
name|m_windowState
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowMinimized
case|:
name|Q_XCB_CALL
argument_list|(
name|xcb_map_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowMaximized
case|:
name|changeNetWmState
argument_list|(
literal|false
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowFullScreen
case|:
name|changeNetWmState
argument_list|(
literal|false
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
comment|// set new state
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowMinimized
case|:
block|{
name|xcb_client_message_event_t
name|event
decl_stmt|;
name|event
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|event
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|event
operator|.
name|window
operator|=
name|m_window
expr_stmt|;
name|event
operator|.
name|type
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_CHANGE_STATE
argument_list|)
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|XCB_WM_STATE_ICONIC
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|WindowMaximized
case|:
name|changeNetWmState
argument_list|(
literal|true
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowFullScreen
case|:
name|changeNetWmState
argument_list|(
literal|true
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowNoState
case|:
break|break;
default|default:
break|break;
block|}
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
name|m_windowState
operator|=
name|state
expr_stmt|;
return|return
name|m_windowState
return|;
block|}
end_function
begin_function
DECL|function|setNetWmWindowFlags
name|void
name|QXcbWindow
operator|::
name|setNetWmWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
comment|// in order of decreasing priority
name|QVector
argument_list|<
name|uint
argument_list|>
name|windowTypes
decl_stmt|;
name|Qt
operator|::
name|WindowType
name|type
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
name|int
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Qt
operator|::
name|Dialog
case|:
case|case
name|Qt
operator|::
name|Sheet
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_DIALOG
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Tool
case|:
case|case
name|Qt
operator|::
name|Drawer
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_UTILITY
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ToolTip
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_TOOLTIP
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|SplashScreen
case|:
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_SPLASH
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_KDE_NET_WM_WINDOW_TYPE_OVERRIDE
argument_list|)
argument_list|)
expr_stmt|;
name|windowTypes
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE_NORMAL
argument_list|)
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_WINDOW_TYPE
argument_list|)
argument_list|,
name|XCB_ATOM_ATOM
argument_list|,
literal|32
argument_list|,
name|windowTypes
operator|.
name|count
argument_list|()
argument_list|,
name|windowTypes
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateMotifWmHintsBeforeMap
name|void
name|QXcbWindow
operator|::
name|updateMotifWmHintsBeforeMap
parameter_list|()
block|{
name|QtMotifWmHints
name|mwmhints
init|=
name|getMotifWmHints
argument_list|(
name|connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
decl_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowModality
argument_list|()
operator|!=
name|Qt
operator|::
name|NonModal
condition|)
block|{
switch|switch
condition|(
name|window
argument_list|()
operator|->
name|windowModality
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowModal
case|:
name|mwmhints
operator|.
name|input_mode
operator|=
name|MWM_INPUT_PRIMARY_APPLICATION_MODAL
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ApplicationModal
case|:
default|default:
name|mwmhints
operator|.
name|input_mode
operator|=
name|MWM_INPUT_FULL_APPLICATION_MODAL
expr_stmt|;
break|break;
block|}
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_INPUT_MODE
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|input_mode
operator|=
name|MWM_INPUT_MODELESS
expr_stmt|;
name|mwmhints
operator|.
name|flags
operator|&=
operator|~
name|MWM_HINTS_INPUT_MODE
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|minimumSize
argument_list|()
operator|==
name|window
argument_list|()
operator|->
name|maximumSize
argument_list|()
condition|)
block|{
comment|// fixed size, remove the resize handle (since mwm/dtwm
comment|// isn't smart enough to do it itself)
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_FUNCTIONS
expr_stmt|;
if|if
condition|(
name|mwmhints
operator|.
name|functions
operator|==
name|MWM_FUNC_ALL
condition|)
block|{
name|mwmhints
operator|.
name|functions
operator|=
name|MWM_FUNC_MOVE
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|functions
operator|&=
operator|~
name|MWM_FUNC_RESIZE
expr_stmt|;
block|}
if|if
condition|(
name|mwmhints
operator|.
name|decorations
operator|==
name|MWM_DECOR_ALL
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator|=
operator|(
name|MWM_DECOR_BORDER
operator||
name|MWM_DECOR_TITLE
operator||
name|MWM_DECOR_MENU
operator|)
expr_stmt|;
block|}
else|else
block|{
name|mwmhints
operator|.
name|decorations
operator|&=
operator|~
name|MWM_DECOR_RESIZEH
expr_stmt|;
block|}
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MINIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MINIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
block|{
name|mwmhints
operator|.
name|flags
operator||=
name|MWM_HINTS_DECORATIONS
expr_stmt|;
name|mwmhints
operator|.
name|decorations
operator||=
name|MWM_DECOR_MAXIMIZE
expr_stmt|;
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_MAXIMIZE
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
condition|)
name|mwmhints
operator|.
name|functions
operator||=
name|MWM_FUNC_CLOSE
expr_stmt|;
name|setMotifWmHints
argument_list|(
name|connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mwmhints
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateNetWmStateBeforeMap
name|void
name|QXcbWindow
operator|::
name|updateNetWmStateBeforeMap
parameter_list|()
block|{
name|QVector
argument_list|<
name|xcb_atom_t
argument_list|>
name|netWmState
decl_stmt|;
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|window
argument_list|()
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
condition|)
block|{
name|netWmState
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_ABOVE
argument_list|)
argument_list|)
expr_stmt|;
name|netWmState
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_STAYS_ON_TOP
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnBottomHint
condition|)
block|{
name|netWmState
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_BELOW
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
block|{
name|netWmState
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
name|netWmState
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
expr_stmt|;
name|netWmState
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
argument_list|()
operator|->
name|windowModality
argument_list|()
operator|!=
name|Qt
operator|::
name|NonModal
condition|)
block|{
name|netWmState
operator|.
name|append
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MODAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setNetWmState
argument_list|(
name|netWmState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateNetWmUserTime
name|void
name|QXcbWindow
operator|::
name|updateNetWmUserTime
parameter_list|(
name|xcb_timestamp_t
name|timestamp
parameter_list|)
block|{
name|xcb_window_t
name|wid
init|=
name|m_window
decl_stmt|;
specifier|const
name|bool
name|isSupportedByWM
init|=
name|connection
argument_list|()
operator|->
name|wmSupport
argument_list|()
operator|->
name|isSupportedByWM
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME_WINDOW
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_netWmUserTimeWindow
operator|||
name|isSupportedByWM
condition|)
block|{
if|if
condition|(
operator|!
name|m_netWmUserTimeWindow
condition|)
block|{
name|m_netWmUserTimeWindow
operator|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_create_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_COPY_FROM_PARENT
argument_list|,
comment|// depth -- same as root
name|m_netWmUserTimeWindow
argument_list|,
comment|// window id
name|m_window
argument_list|,
comment|// parent window id
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
comment|// border width
name|XCB_WINDOW_CLASS_INPUT_OUTPUT
argument_list|,
comment|// window class
name|m_visualId
argument_list|,
comment|// visual
literal|0
argument_list|,
comment|// value mask
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// value list
name|wid
operator|=
name|m_netWmUserTimeWindow
expr_stmt|;
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME_WINDOW
argument_list|)
argument_list|,
name|XCB_ATOM_WINDOW
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|m_netWmUserTimeWindow
argument_list|)
expr_stmt|;
name|xcb_delete_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isSupportedByWM
condition|)
block|{
comment|// WM no longer supports it, then we should remove the
comment|// _NET_WM_USER_TIME_WINDOW atom.
name|xcb_delete_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME_WINDOW
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_destroy_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_netWmUserTimeWindow
argument_list|)
expr_stmt|;
name|m_netWmUserTimeWindow
operator|=
name|XCB_NONE
expr_stmt|;
block|}
else|else
block|{
name|wid
operator|=
name|m_netWmUserTimeWindow
expr_stmt|;
block|}
block|}
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|wid
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_USER_TIME
argument_list|)
argument_list|,
name|XCB_ATOM_CARDINAL
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|timestamp
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTransparentForMouseEvents
name|void
name|QXcbWindow
operator|::
name|setTransparentForMouseEvents
parameter_list|(
name|bool
name|transparent
parameter_list|)
block|{
if|if
condition|(
name|transparent
operator|==
name|m_transparent
condition|)
return|return;
name|xcb_rectangle_t
name|rectangle
decl_stmt|;
name|xcb_rectangle_t
modifier|*
name|rect
init|=
literal|0
decl_stmt|;
name|int
name|nrect
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|transparent
condition|)
block|{
name|rectangle
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|rectangle
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|rectangle
operator|.
name|width
operator|=
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
name|rectangle
operator|.
name|height
operator|=
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
expr_stmt|;
name|rect
operator|=
operator|&
name|rectangle
expr_stmt|;
name|nrect
operator|=
literal|1
expr_stmt|;
block|}
name|xcb_xfixes_region_t
name|region
init|=
name|xcb_generate_id
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
decl_stmt|;
name|xcb_xfixes_create_region
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|region
argument_list|,
name|nrect
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|xcb_xfixes_set_window_shape_region_checked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|XCB_SHAPE_SK_INPUT
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|xcb_xfixes_destroy_region
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|m_transparent
operator|=
name|transparent
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateDoesNotAcceptFocus
name|void
name|QXcbWindow
operator|::
name|updateDoesNotAcceptFocus
parameter_list|(
name|bool
name|doesNotAcceptFocus
parameter_list|)
block|{
name|xcb_get_property_cookie_t
name|cookie
init|=
name|xcb_get_wm_hints_unchecked
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|)
decl_stmt|;
name|xcb_wm_hints_t
name|hints
decl_stmt|;
if|if
condition|(
operator|!
name|xcb_get_wm_hints_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
operator|&
name|hints
argument_list|,
name|NULL
argument_list|)
condition|)
block|{
return|return;
block|}
name|xcb_wm_hints_set_input
argument_list|(
operator|&
name|hints
argument_list|,
operator|!
name|doesNotAcceptFocus
argument_list|)
expr_stmt|;
name|xcb_set_wm_hints
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
operator|&
name|hints
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|winId
name|WId
name|QXcbWindow
operator|::
name|winId
parameter_list|()
specifier|const
block|{
return|return
name|m_window
return|;
block|}
end_function
begin_function
DECL|function|setParent
name|void
name|QXcbWindow
operator|::
name|setParent
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|parent
parameter_list|)
block|{
comment|// re-create for compatibility
name|create
argument_list|()
expr_stmt|;
name|QPoint
name|topLeft
init|=
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|xcb_window_t
name|xcb_parent_id
init|=
name|parent
condition|?
cast|static_cast
argument_list|<
specifier|const
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
operator|->
name|xcb_window
argument_list|()
else|:
name|m_screen
operator|->
name|root
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_reparent_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_window
argument_list|()
argument_list|,
name|xcb_parent_id
argument_list|,
name|topLeft
operator|.
name|x
argument_list|()
argument_list|,
name|topLeft
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowTitle
name|void
name|QXcbWindow
operator|::
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|QByteArray
name|ba
init|=
name|title
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_NAME
argument_list|)
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|UTF8_STRING
argument_list|)
argument_list|,
literal|8
argument_list|,
name|ba
operator|.
name|length
argument_list|()
argument_list|,
name|ba
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|raise
name|void
name|QXcbWindow
operator|::
name|raise
parameter_list|()
block|{
specifier|const
name|quint32
name|mask
init|=
name|XCB_CONFIG_WINDOW_STACK_MODE
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
name|XCB_STACK_MODE_ABOVE
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_configure_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lower
name|void
name|QXcbWindow
operator|::
name|lower
parameter_list|()
block|{
specifier|const
name|quint32
name|mask
init|=
name|XCB_CONFIG_WINDOW_STACK_MODE
decl_stmt|;
specifier|const
name|quint32
name|values
index|[]
init|=
block|{
name|XCB_STACK_MODE_BELOW
block|}
decl_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_configure_window
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|mask
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|propagateSizeHints
name|void
name|QXcbWindow
operator|::
name|propagateSizeHints
parameter_list|()
block|{
comment|// update WM_NORMAL_HINTS
name|xcb_size_hints_t
name|hints
decl_stmt|;
name|memset
argument_list|(
operator|&
name|hints
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|hints
argument_list|)
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|geometry
argument_list|()
decl_stmt|;
name|QWindow
modifier|*
name|win
init|=
name|window
argument_list|()
decl_stmt|;
name|xcb_size_hints_set_position
argument_list|(
operator|&
name|hints
argument_list|,
literal|true
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|xcb_size_hints_set_size
argument_list|(
operator|&
name|hints
argument_list|,
literal|true
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|xcb_size_hints_set_win_gravity
argument_list|(
operator|&
name|hints
argument_list|,
name|qt_window_private
argument_list|(
name|win
argument_list|)
operator|->
name|positionPolicy
operator|==
name|QWindowPrivate
operator|::
name|WindowFrameInclusive
condition|?
name|XCB_GRAVITY_NORTH_WEST
else|:
name|XCB_GRAVITY_STATIC
argument_list|)
expr_stmt|;
name|QSize
name|minimumSize
init|=
name|win
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
name|QSize
name|maximumSize
init|=
name|win
operator|->
name|maximumSize
argument_list|()
decl_stmt|;
name|QSize
name|baseSize
init|=
name|win
operator|->
name|baseSize
argument_list|()
decl_stmt|;
name|QSize
name|sizeIncrement
init|=
name|win
operator|->
name|sizeIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|minimumSize
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|||
name|minimumSize
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
name|xcb_size_hints_set_min_size
argument_list|(
operator|&
name|hints
argument_list|,
name|minimumSize
operator|.
name|width
argument_list|()
argument_list|,
name|minimumSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|maximumSize
operator|.
name|width
argument_list|()
operator|<
name|QWINDOWSIZE_MAX
operator|||
name|maximumSize
operator|.
name|height
argument_list|()
operator|<
name|QWINDOWSIZE_MAX
condition|)
name|xcb_size_hints_set_max_size
argument_list|(
operator|&
name|hints
argument_list|,
name|qMin
argument_list|(
name|XCOORD_MAX
argument_list|,
name|maximumSize
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|XCOORD_MAX
argument_list|,
name|maximumSize
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sizeIncrement
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|||
name|sizeIncrement
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
block|{
name|xcb_size_hints_set_base_size
argument_list|(
operator|&
name|hints
argument_list|,
name|baseSize
operator|.
name|width
argument_list|()
argument_list|,
name|baseSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|xcb_size_hints_set_resize_inc
argument_list|(
operator|&
name|hints
argument_list|,
name|sizeIncrement
operator|.
name|width
argument_list|()
argument_list|,
name|sizeIncrement
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xcb_set_wm_normal_hints
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
operator|&
name|hints
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|requestActivateWindow
name|void
name|QXcbWindow
operator|::
name|requestActivateWindow
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_mapped
condition|)
block|{
name|m_deferredActivation
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|m_deferredActivation
operator|=
literal|false
expr_stmt|;
name|updateNetWmUserTime
argument_list|(
name|connection
argument_list|()
operator|->
name|time
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|isTopLevel
argument_list|()
operator|&&
name|connection
argument_list|()
operator|->
name|wmSupport
argument_list|()
operator|->
name|isSupportedByWM
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_ACTIVE_WINDOW
argument_list|)
argument_list|)
condition|)
block|{
name|xcb_client_message_event_t
name|event
decl_stmt|;
name|event
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|event
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|event
operator|.
name|window
operator|=
name|m_window
expr_stmt|;
name|event
operator|.
name|type
operator|=
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_ACTIVE_WINDOW
argument_list|)
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
name|connection
argument_list|()
operator|->
name|time
argument_list|()
expr_stmt|;
name|QWindow
modifier|*
name|focusWindow
init|=
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
decl_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
name|focusWindow
condition|?
name|focusWindow
operator|->
name|winId
argument_list|()
else|:
name|XCB_NONE
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_set_input_focus
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_INPUT_FOCUS_PARENT
argument_list|,
name|m_window
argument_list|,
name|connection
argument_list|()
operator|->
name|time
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|XCB_USE_MAEMO_WINDOW_PROPERTIES
end_if
begin_function
DECL|function|setOrientation
name|void
name|QXcbWindow
operator|::
name|setOrientation
parameter_list|(
name|Qt
operator|::
name|ScreenOrientation
name|orientation
parameter_list|)
block|{
name|int
name|angle
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|orientation
condition|)
block|{
case|case
name|Qt
operator|::
name|PortraitOrientation
case|:
name|angle
operator|=
literal|270
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|LandscapeOrientation
case|:
name|angle
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|InvertedPortraitOrientation
case|:
name|angle
operator|=
literal|90
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|InvertedLandscapeOrientation
case|:
name|angle
operator|=
literal|180
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|PrimaryOrientation
case|:
break|break;
block|}
name|Q_XCB_CALL
argument_list|(
name|xcb_change_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|MeegoTouchOrientationAngle
argument_list|)
argument_list|,
name|XCB_ATOM_CARDINAL
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|angle
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|format
name|QSurfaceFormat
name|QXcbWindow
operator|::
name|format
parameter_list|()
specifier|const
block|{
comment|// ### return actual format
return|return
name|m_format
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_EGL
argument_list|)
end_if
begin_function
DECL|function|eglSurface
name|QXcbEGLSurface
modifier|*
name|QXcbWindow
operator|::
name|eglSurface
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_eglSurface
condition|)
block|{
name|EGLDisplay
name|display
init|=
name|connection
argument_list|()
operator|->
name|egl_display
argument_list|()
decl_stmt|;
name|EGLConfig
name|config
init|=
name|q_configFromGLFormat
argument_list|(
name|display
argument_list|,
name|window
argument_list|()
operator|->
name|requestedFormat
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|EGLSurface
name|surface
init|=
name|eglCreateWindowSurface
argument_list|(
name|display
argument_list|,
name|config
argument_list|,
operator|(
name|EGLNativeWindowType
operator|)
name|m_window
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|m_eglSurface
operator|=
operator|new
name|QXcbEGLSurface
argument_list|(
name|display
argument_list|,
name|surface
argument_list|)
expr_stmt|;
block|}
return|return
name|m_eglSurface
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|handleExposeEvent
name|void
name|QXcbWindow
operator|::
name|handleExposeEvent
parameter_list|(
specifier|const
name|xcb_expose_event_t
modifier|*
name|event
parameter_list|)
block|{
name|QRect
name|rect
argument_list|(
name|event
operator|->
name|x
argument_list|,
name|event
operator|->
name|y
argument_list|,
name|event
operator|->
name|width
argument_list|,
name|event
operator|->
name|height
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_exposeRegion
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_exposeRegion
operator|=
name|rect
expr_stmt|;
else|else
name|m_exposeRegion
operator||=
name|rect
expr_stmt|;
comment|// if count is non-zero there are more expose events pending
if|if
condition|(
name|event
operator|->
name|count
operator|==
literal|0
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleSynchronousExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|m_exposeRegion
argument_list|)
expr_stmt|;
name|m_exposeRegion
operator|=
name|QRegion
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleClientMessageEvent
name|void
name|QXcbWindow
operator|::
name|handleClientMessageEvent
parameter_list|(
specifier|const
name|xcb_client_message_event_t
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|format
operator|!=
literal|32
condition|)
return|return;
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_PROTOCOLS
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_DELETE_WINDOW
argument_list|)
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleCloseEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_TAKE_FOCUS
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_PING
argument_list|)
condition|)
block|{
name|xcb_client_message_event_t
name|reply
init|=
operator|*
name|event
decl_stmt|;
name|reply
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|reply
operator|.
name|window
operator|=
name|m_screen
operator|->
name|root
argument_list|()
expr_stmt|;
name|xcb_send_event
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
name|XCB_EVENT_MASK_STRUCTURE_NOTIFY
operator||
name|XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|reply
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_SYNC_REQUEST
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|m_syncValue
operator|.
name|lo
operator|=
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|2
index|]
expr_stmt|;
name|m_syncValue
operator|.
name|hi
operator|=
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|3
index|]
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QXcbWindow: Unhandled WM_PROTOCOLS message:"
operator|<<
name|connection
argument_list|()
operator|->
name|atomName
argument_list|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndEnter
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|drag
argument_list|()
operator|->
name|handleEnter
argument_list|(
name|window
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndPosition
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|drag
argument_list|()
operator|->
name|handlePosition
argument_list|(
name|window
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndLeave
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|drag
argument_list|()
operator|->
name|handleLeave
argument_list|(
name|window
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndDrop
argument_list|)
condition|)
block|{
name|connection
argument_list|()
operator|->
name|drag
argument_list|()
operator|->
name|handleDrop
argument_list|(
name|window
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_XEMBED
argument_list|)
condition|)
block|{
comment|// QSystemTrayIcon
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QXcbWindow: Unhandled client message:"
operator|<<
name|connection
argument_list|()
operator|->
name|atomName
argument_list|(
name|event
operator|->
name|type
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleConfigureNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleConfigureNotifyEvent
parameter_list|(
specifier|const
name|xcb_configure_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
name|bool
name|fromSendEvent
init|=
operator|(
name|event
operator|->
name|response_type
operator|&
literal|0x80
operator|)
decl_stmt|;
name|QPoint
name|pos
argument_list|(
name|event
operator|->
name|x
argument_list|,
name|event
operator|->
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parent
argument_list|()
operator|&&
operator|!
name|fromSendEvent
condition|)
block|{
comment|// Do not trust the position, query it instead.
name|xcb_translate_coordinates_cookie_t
name|cookie
init|=
name|xcb_translate_coordinates
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|xcb_window
argument_list|()
argument_list|,
name|m_screen
operator|->
name|root
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|xcb_translate_coordinates_reply_t
modifier|*
name|reply
init|=
name|xcb_translate_coordinates_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
name|pos
operator|.
name|setX
argument_list|(
name|reply
operator|->
name|dst_x
argument_list|)
expr_stmt|;
name|pos
operator|.
name|setY
argument_list|(
name|reply
operator|->
name|dst_y
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
block|}
name|QRect
name|rect
argument_list|(
name|pos
argument_list|,
name|QSize
argument_list|(
name|event
operator|->
name|width
argument_list|,
name|event
operator|->
name|height
argument_list|)
argument_list|)
decl_stmt|;
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|m_dirtyFrameMargins
operator|=
literal|true
expr_stmt|;
if|#
directive|if
name|XCB_USE_DRI2
if|if
condition|(
name|m_context
condition|)
cast|static_cast
argument_list|<
name|QDri2Context
operator|*
argument_list|>
argument_list|(
name|m_context
argument_list|)
operator|->
name|resize
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|handleMapNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleMapNotifyEvent
parameter_list|(
specifier|const
name|xcb_map_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|window
operator|==
name|m_window
condition|)
block|{
name|m_mapped
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|m_deferredActivation
condition|)
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMapEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleUnmapNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleUnmapNotifyEvent
parameter_list|(
specifier|const
name|xcb_unmap_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|window
operator|==
name|m_window
condition|)
block|{
name|m_mapped
operator|=
literal|false
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleUnmapEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|translateMouseButtons
specifier|static
name|Qt
operator|::
name|MouseButtons
name|translateMouseButtons
parameter_list|(
name|int
name|s
parameter_list|)
block|{
name|Qt
operator|::
name|MouseButtons
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s
operator|&
name|XCB_BUTTON_MASK_1
condition|)
name|ret
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|XCB_BUTTON_MASK_2
condition|)
name|ret
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|XCB_BUTTON_MASK_3
condition|)
name|ret
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|translateMouseButton
specifier|static
name|Qt
operator|::
name|MouseButton
name|translateMouseButton
parameter_list|(
name|xcb_button_t
name|s
parameter_list|)
block|{
switch|switch
condition|(
name|s
condition|)
block|{
case|case
literal|1
case|:
return|return
name|Qt
operator|::
name|LeftButton
return|;
case|case
literal|2
case|:
return|return
name|Qt
operator|::
name|MidButton
return|;
case|case
literal|3
case|:
return|return
name|Qt
operator|::
name|RightButton
return|;
comment|// Button values 4-7 were already handled as Wheel events, and won't occur here.
case|case
literal|8
case|:
return|return
name|Qt
operator|::
name|BackButton
return|;
comment|// Also known as Qt::ExtraButton1
case|case
literal|9
case|:
return|return
name|Qt
operator|::
name|ForwardButton
return|;
comment|// Also known as Qt::ExtraButton2
case|case
literal|10
case|:
return|return
name|Qt
operator|::
name|ExtraButton3
return|;
case|case
literal|11
case|:
return|return
name|Qt
operator|::
name|ExtraButton4
return|;
case|case
literal|12
case|:
return|return
name|Qt
operator|::
name|ExtraButton5
return|;
case|case
literal|13
case|:
return|return
name|Qt
operator|::
name|ExtraButton6
return|;
case|case
literal|14
case|:
return|return
name|Qt
operator|::
name|ExtraButton7
return|;
case|case
literal|15
case|:
return|return
name|Qt
operator|::
name|ExtraButton8
return|;
case|case
literal|16
case|:
return|return
name|Qt
operator|::
name|ExtraButton9
return|;
case|case
literal|17
case|:
return|return
name|Qt
operator|::
name|ExtraButton10
return|;
case|case
literal|18
case|:
return|return
name|Qt
operator|::
name|ExtraButton11
return|;
case|case
literal|19
case|:
return|return
name|Qt
operator|::
name|ExtraButton12
return|;
case|case
literal|20
case|:
return|return
name|Qt
operator|::
name|ExtraButton13
return|;
case|case
literal|21
case|:
return|return
name|Qt
operator|::
name|ExtraButton14
return|;
case|case
literal|22
case|:
return|return
name|Qt
operator|::
name|ExtraButton15
return|;
case|case
literal|23
case|:
return|return
name|Qt
operator|::
name|ExtraButton16
return|;
case|case
literal|24
case|:
return|return
name|Qt
operator|::
name|ExtraButton17
return|;
case|case
literal|25
case|:
return|return
name|Qt
operator|::
name|ExtraButton18
return|;
case|case
literal|26
case|:
return|return
name|Qt
operator|::
name|ExtraButton19
return|;
case|case
literal|27
case|:
return|return
name|Qt
operator|::
name|ExtraButton20
return|;
case|case
literal|28
case|:
return|return
name|Qt
operator|::
name|ExtraButton21
return|;
case|case
literal|29
case|:
return|return
name|Qt
operator|::
name|ExtraButton22
return|;
case|case
literal|30
case|:
return|return
name|Qt
operator|::
name|ExtraButton23
return|;
case|case
literal|31
case|:
return|return
name|Qt
operator|::
name|ExtraButton24
return|;
default|default:
return|return
name|Qt
operator|::
name|NoButton
return|;
block|}
block|}
end_function
begin_function
DECL|function|handleButtonPressEvent
name|void
name|QXcbWindow
operator|::
name|handleButtonPressEvent
parameter_list|(
specifier|const
name|xcb_button_press_event_t
modifier|*
name|event
parameter_list|)
block|{
name|updateNetWmUserTime
argument_list|(
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
name|QPoint
name|local
argument_list|(
name|event
operator|->
name|event_x
argument_list|,
name|event
operator|->
name|event_y
argument_list|)
decl_stmt|;
name|QPoint
name|global
argument_list|(
name|event
operator|->
name|root_x
argument_list|,
name|event
operator|->
name|root_y
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|connection
argument_list|()
operator|->
name|keyboard
argument_list|()
operator|->
name|translateModifiers
argument_list|(
name|event
operator|->
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|detail
operator|>=
literal|4
operator|&&
name|event
operator|->
name|detail
operator|<=
literal|7
condition|)
block|{
comment|// Logic borrowed from qapplication_x11.cpp
name|int
name|delta
init|=
literal|120
operator|*
operator|(
operator|(
name|event
operator|->
name|detail
operator|==
literal|4
operator|||
name|event
operator|->
name|detail
operator|==
literal|6
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
decl_stmt|;
name|bool
name|hor
init|=
operator|(
operator|(
operator|(
name|event
operator|->
name|detail
operator|==
literal|4
operator|||
name|event
operator|->
name|detail
operator|==
literal|5
operator|)
operator|&&
operator|(
name|modifiers
operator|&
name|Qt
operator|::
name|AltModifier
operator|)
operator|)
operator|||
operator|(
name|event
operator|->
name|detail
operator|==
literal|6
operator|||
name|event
operator|->
name|detail
operator|==
literal|7
operator|)
operator|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|delta
argument_list|,
name|hor
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
return|return;
block|}
name|handleMouseEvent
argument_list|(
name|event
operator|->
name|detail
argument_list|,
name|event
operator|->
name|state
argument_list|,
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleButtonReleaseEvent
name|void
name|QXcbWindow
operator|::
name|handleButtonReleaseEvent
parameter_list|(
specifier|const
name|xcb_button_release_event_t
modifier|*
name|event
parameter_list|)
block|{
name|QPoint
name|local
argument_list|(
name|event
operator|->
name|event_x
argument_list|,
name|event
operator|->
name|event_y
argument_list|)
decl_stmt|;
name|QPoint
name|global
argument_list|(
name|event
operator|->
name|root_x
argument_list|,
name|event
operator|->
name|root_y
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|connection
argument_list|()
operator|->
name|keyboard
argument_list|()
operator|->
name|translateModifiers
argument_list|(
name|event
operator|->
name|state
argument_list|)
decl_stmt|;
name|handleMouseEvent
argument_list|(
name|event
operator|->
name|detail
argument_list|,
name|event
operator|->
name|state
argument_list|,
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleMotionNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleMotionNotifyEvent
parameter_list|(
specifier|const
name|xcb_motion_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
name|QPoint
name|local
argument_list|(
name|event
operator|->
name|event_x
argument_list|,
name|event
operator|->
name|event_y
argument_list|)
decl_stmt|;
name|QPoint
name|global
argument_list|(
name|event
operator|->
name|root_x
argument_list|,
name|event
operator|->
name|root_y
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|connection
argument_list|()
operator|->
name|keyboard
argument_list|()
operator|->
name|translateModifiers
argument_list|(
name|event
operator|->
name|state
argument_list|)
decl_stmt|;
name|handleMouseEvent
argument_list|(
name|event
operator|->
name|detail
argument_list|,
name|event
operator|->
name|state
argument_list|,
name|event
operator|->
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleMouseEvent
name|void
name|QXcbWindow
operator|::
name|handleMouseEvent
parameter_list|(
name|xcb_button_t
name|detail
parameter_list|,
name|uint16_t
name|state
parameter_list|,
name|xcb_timestamp_t
name|time
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|local
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|global
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|translateMouseButtons
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|MouseButton
name|button
init|=
name|translateMouseButton
argument_list|(
name|detail
argument_list|)
decl_stmt|;
name|buttons
operator|^=
name|button
expr_stmt|;
comment|// X event uses state *before*, Qt uses state *after*
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|time
argument_list|,
name|local
argument_list|,
name|global
argument_list|,
name|buttons
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleEnterNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleEnterNotifyEvent
parameter_list|(
specifier|const
name|xcb_enter_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|event
operator|->
name|mode
operator|!=
name|XCB_NOTIFY_MODE_NORMAL
operator|&&
name|event
operator|->
name|mode
operator|!=
name|XCB_NOTIFY_MODE_UNGRAB
operator|)
operator|||
name|event
operator|->
name|detail
operator|==
name|XCB_NOTIFY_DETAIL_VIRTUAL
operator|||
name|event
operator|->
name|detail
operator|==
name|XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL
condition|)
block|{
return|return;
block|}
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleLeaveNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handleLeaveNotifyEvent
parameter_list|(
specifier|const
name|xcb_leave_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|event
operator|->
name|mode
operator|!=
name|XCB_NOTIFY_MODE_NORMAL
operator|&&
name|event
operator|->
name|mode
operator|!=
name|XCB_NOTIFY_MODE_UNGRAB
operator|)
operator|||
name|event
operator|->
name|detail
operator|==
name|XCB_NOTIFY_DETAIL_INFERIOR
condition|)
block|{
return|return;
block|}
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handlePropertyNotifyEvent
name|void
name|QXcbWindow
operator|::
name|handlePropertyNotifyEvent
parameter_list|(
specifier|const
name|xcb_property_notify_event_t
modifier|*
name|event
parameter_list|)
block|{
name|connection
argument_list|()
operator|->
name|setTime
argument_list|(
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
name|bool
name|propertyDeleted
init|=
name|event
operator|->
name|state
operator|==
name|XCB_PROPERTY_DELETE
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|atom
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE
argument_list|)
operator|||
name|event
operator|->
name|atom
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_STATE
argument_list|)
condition|)
block|{
if|if
condition|(
name|propertyDeleted
condition|)
return|return;
name|xcb_get_property_cookie_t
name|get_cookie
init|=
name|xcb_get_property
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|0
argument_list|,
name|m_window
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_STATE
argument_list|)
argument_list|,
name|XCB_ATOM_ANY
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|get_cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|xcb_atom_t
name|wm_state
init|=
name|XCB_WM_STATE_WITHDRAWN
decl_stmt|;
if|if
condition|(
name|reply
operator|&&
name|reply
operator|->
name|format
operator|==
literal|32
operator|&&
name|reply
operator|->
name|type
operator|==
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|WM_STATE
argument_list|)
condition|)
block|{
if|if
condition|(
name|reply
operator|->
name|length
operator|!=
literal|0
condition|)
name|wm_state
operator|=
operator|(
operator|(
name|long
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
operator|)
index|[
literal|0
index|]
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|xcb_atom_t
argument_list|>
name|netWmState
init|=
name|getNetWmState
argument_list|()
decl_stmt|;
name|bool
name|maximized
init|=
name|netWmState
operator|.
name|contains
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_HORZ
argument_list|)
argument_list|)
operator|&&
name|netWmState
operator|.
name|contains
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_MAXIMIZED_VERT
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|fullscreen
init|=
name|netWmState
operator|.
name|contains
argument_list|(
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_NET_WM_STATE_FULLSCREEN
argument_list|)
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|WindowState
name|state
init|=
name|Qt
operator|::
name|WindowNoState
decl_stmt|;
if|if
condition|(
name|wm_state
operator|==
name|XCB_WM_STATE_ICONIC
condition|)
name|state
operator|=
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
elseif|else
if|if
condition|(
name|maximized
condition|)
name|state
operator|=
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
elseif|else
if|if
condition|(
name|fullscreen
condition|)
name|state
operator|=
name|Qt
operator|::
name|WindowFullScreen
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowStateChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleFocusInEvent
name|void
name|QXcbWindow
operator|::
name|handleFocusInEvent
parameter_list|(
specifier|const
name|xcb_focus_in_event_t
modifier|*
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|focusInPeeker
specifier|static
name|bool
name|focusInPeeker
parameter_list|(
name|xcb_generic_event_t
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
condition|)
block|{
comment|// FocusIn event is not in the queue, proceed with FocusOut normally.
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|uint
name|response_type
init|=
name|event
operator|->
name|response_type
operator|&
operator|~
literal|0x80
decl_stmt|;
return|return
name|response_type
operator|==
name|XCB_FOCUS_IN
return|;
block|}
end_function
begin_function
DECL|function|handleFocusOutEvent
name|void
name|QXcbWindow
operator|::
name|handleFocusOutEvent
parameter_list|(
specifier|const
name|xcb_focus_out_event_t
modifier|*
parameter_list|)
block|{
comment|// Do not set the active window to 0 if there is a FocusIn coming.
comment|// There is however no equivalent for XPutBackEvent so register a
comment|// callback for QXcbConnection instead.
name|connection
argument_list|()
operator|->
name|addPeekFunc
argument_list|(
name|focusInPeeker
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateSyncRequestCounter
name|void
name|QXcbWindow
operator|::
name|updateSyncRequestCounter
parameter_list|()
block|{
if|if
condition|(
name|m_screen
operator|->
name|syncRequestSupported
argument_list|()
operator|&&
operator|(
name|m_syncValue
operator|.
name|lo
operator|!=
literal|0
operator|||
name|m_syncValue
operator|.
name|hi
operator|!=
literal|0
operator|)
condition|)
block|{
name|Q_XCB_CALL
argument_list|(
name|xcb_sync_set_counter
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_syncCounter
argument_list|,
name|m_syncValue
argument_list|)
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
name|connection
argument_list|()
operator|->
name|sync
argument_list|()
expr_stmt|;
name|m_syncValue
operator|.
name|lo
operator|=
literal|0
expr_stmt|;
name|m_syncValue
operator|.
name|hi
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setKeyboardGrabEnabled
name|bool
name|QXcbWindow
operator|::
name|setKeyboardGrabEnabled
parameter_list|(
name|bool
name|grab
parameter_list|)
block|{
if|if
condition|(
operator|!
name|grab
condition|)
block|{
name|xcb_ungrab_keyboard
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_TIME_CURRENT_TIME
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|xcb_grab_keyboard_cookie_t
name|cookie
init|=
name|xcb_grab_keyboard
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|m_window
argument_list|,
name|XCB_TIME_CURRENT_TIME
argument_list|,
name|XCB_GRAB_MODE_ASYNC
argument_list|,
name|XCB_GRAB_MODE_ASYNC
argument_list|)
decl_stmt|;
name|xcb_grab_keyboard_reply_t
modifier|*
name|reply
init|=
name|xcb_grab_keyboard_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|bool
name|result
init|=
operator|!
operator|(
operator|!
name|reply
operator|||
name|reply
operator|->
name|status
operator|!=
name|XCB_GRAB_STATUS_SUCCESS
operator|)
decl_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setMouseGrabEnabled
name|bool
name|QXcbWindow
operator|::
name|setMouseGrabEnabled
parameter_list|(
name|bool
name|grab
parameter_list|)
block|{
if|if
condition|(
operator|!
name|grab
condition|)
block|{
name|xcb_ungrab_pointer
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_TIME_CURRENT_TIME
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|xcb_grab_pointer_cookie_t
name|cookie
init|=
name|xcb_grab_pointer
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|m_window
argument_list|,
operator|(
name|XCB_EVENT_MASK_BUTTON_PRESS
operator||
name|XCB_EVENT_MASK_BUTTON_RELEASE
operator||
name|XCB_EVENT_MASK_BUTTON_MOTION
operator||
name|XCB_EVENT_MASK_ENTER_WINDOW
operator||
name|XCB_EVENT_MASK_LEAVE_WINDOW
operator||
name|XCB_EVENT_MASK_POINTER_MOTION
operator|)
argument_list|,
name|XCB_GRAB_MODE_ASYNC
argument_list|,
name|XCB_GRAB_MODE_ASYNC
argument_list|,
name|XCB_WINDOW_NONE
argument_list|,
name|XCB_CURSOR_NONE
argument_list|,
name|XCB_TIME_CURRENT_TIME
argument_list|)
decl_stmt|;
name|xcb_grab_pointer_reply_t
modifier|*
name|reply
init|=
name|xcb_grab_pointer_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|bool
name|result
init|=
operator|!
operator|(
operator|!
name|reply
operator|||
name|reply
operator|->
name|status
operator|!=
name|XCB_GRAB_STATUS_SUCCESS
operator|)
decl_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setCursor
name|void
name|QXcbWindow
operator|::
name|setCursor
parameter_list|(
name|xcb_cursor_t
name|cursor
parameter_list|)
block|{
name|xcb_change_window_attributes
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|m_window
argument_list|,
name|XCB_CW_CURSOR
argument_list|,
operator|&
name|cursor
argument_list|)
expr_stmt|;
name|xcb_flush
argument_list|(
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
