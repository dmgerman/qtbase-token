begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxcbglintegrationfactory.h"
end_include
begin_include
include|#
directive|include
file|"qxcbglintegrationplugin.h"
end_include
begin_include
include|#
directive|include
file|"qxcbglintegrationplugin.h"
end_include
begin_include
include|#
directive|include
file|"private/qfactoryloader_p.h"
end_include
begin_include
include|#
directive|include
file|"qguiapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdir.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
name|QFactoryLoader
argument_list|,
name|loader
argument_list|,
operator|(
name|QXcbGlIntegrationFactoryInterface_iid
operator|,
name|QLatin1String
argument_list|(
literal|"/xcbglintegrations"
argument_list|)
operator|,
name|Qt
operator|::
name|CaseInsensitive
operator|)
argument_list|)
name|Q_GLOBAL_STATIC_WITH_ARGS
argument_list|(
name|QFactoryLoader
argument_list|,
name|directLoader
argument_list|,
operator|(
name|QXcbGlIntegrationFactoryInterface_iid
operator|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|,
name|Qt
operator|::
name|CaseInsensitive
operator|)
argument_list|)
decl|static
DECL|function|loadIntegration
specifier|inline
namespace|QXcbGlIntegration *
name|loadIntegration
namespace|(
name|QFactoryLoader
modifier|*
name|loader
operator|,
namespace|const
name|QString
modifier|&
name|key
decl_stmt|)
block|{
specifier|const
name|int
name|index
init|=
name|loader
operator|->
name|indexOf
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|QXcbGlIntegrationPlugin
modifier|*
name|factory
init|=
name|qobject_cast
argument_list|<
name|QXcbGlIntegrationPlugin
operator|*
argument_list|>
argument_list|(
name|loader
operator|->
name|instance
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
if|if
condition|(
name|QXcbGlIntegration
modifier|*
name|result
init|=
name|factory
operator|->
name|create
argument_list|()
condition|)
return|return
name|result
return|;
block|}
return|return
name|Q_NULLPTR
return|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_LIBRARY
end_comment
begin_function
DECL|function|keys
name|QStringList
name|QXcbGlIntegrationFactory
operator|::
name|keys
parameter_list|(
specifier|const
name|QString
modifier|&
name|pluginPath
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
name|QStringList
name|list
decl_stmt|;
if|if
condition|(
operator|!
name|pluginPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QCoreApplication
operator|::
name|addLibraryPath
argument_list|(
name|pluginPath
argument_list|)
expr_stmt|;
name|list
operator|=
name|directLoader
argument_list|()
operator|->
name|keyMap
argument_list|()
operator|.
name|values
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|postFix
init|=
name|QStringLiteral
argument_list|(
literal|" (from "
argument_list|)
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|pluginPath
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
operator|::
name|iterator
name|end
init|=
name|list
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|iterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
operator|(
operator|*
name|it
operator|)
operator|.
name|append
argument_list|(
name|postFix
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|append
argument_list|(
name|loader
argument_list|()
operator|->
name|keyMap
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|list
return|;
else|#
directive|else
return|return
name|QStringList
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|create
name|QXcbGlIntegration
modifier|*
name|QXcbGlIntegrationFactory
operator|::
name|create
parameter_list|(
specifier|const
name|QString
modifier|&
name|platform
parameter_list|,
specifier|const
name|QString
modifier|&
name|pluginPath
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
comment|// Try loading the plugin from platformPluginPath first:
if|if
condition|(
operator|!
name|pluginPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QCoreApplication
operator|::
name|addLibraryPath
argument_list|(
name|pluginPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|QXcbGlIntegration
modifier|*
name|ret
init|=
name|loadIntegration
argument_list|(
name|directLoader
argument_list|()
argument_list|,
name|platform
argument_list|)
condition|)
return|return
name|ret
return|;
block|}
if|if
condition|(
name|QXcbGlIntegration
modifier|*
name|ret
init|=
name|loadIntegration
argument_list|(
name|loader
argument_list|()
argument_list|,
name|platform
argument_list|)
condition|)
return|return
name|ret
return|;
endif|#
directive|endif
return|return
name|Q_NULLPTR
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
