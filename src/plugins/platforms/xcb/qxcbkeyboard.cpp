begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxcbkeyboard.h"
end_include
begin_include
include|#
directive|include
file|"qxcbwindow.h"
end_include
begin_include
include|#
directive|include
file|"qxcbscreen.h"
end_include
begin_include
include|#
directive|include
file|<X11/keysym.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextCodec>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMetaMethod>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatforminputcontext.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformcursor.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|XK_ISO_Left_Tab
end_ifndef
begin_define
DECL|macro|XK_ISO_Left_Tab
define|#
directive|define
name|XK_ISO_Left_Tab
value|0xFE20
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_dead_hook
end_ifndef
begin_define
DECL|macro|XK_dead_hook
define|#
directive|define
name|XK_dead_hook
value|0xFE61
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_dead_horn
end_ifndef
begin_define
DECL|macro|XK_dead_horn
define|#
directive|define
name|XK_dead_horn
value|0xFE62
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_Codeinput
end_ifndef
begin_define
DECL|macro|XK_Codeinput
define|#
directive|define
name|XK_Codeinput
value|0xFF37
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_Kanji_Bangou
end_ifndef
begin_define
DECL|macro|XK_Kanji_Bangou
define|#
directive|define
name|XK_Kanji_Bangou
value|0xFF37
end_define
begin_comment
DECL|macro|XK_Kanji_Bangou
comment|/* same as codeinput */
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Fix old X libraries
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Home
end_ifndef
begin_define
DECL|macro|XK_KP_Home
define|#
directive|define
name|XK_KP_Home
value|0xFF95
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Left
end_ifndef
begin_define
DECL|macro|XK_KP_Left
define|#
directive|define
name|XK_KP_Left
value|0xFF96
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Up
end_ifndef
begin_define
DECL|macro|XK_KP_Up
define|#
directive|define
name|XK_KP_Up
value|0xFF97
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Right
end_ifndef
begin_define
DECL|macro|XK_KP_Right
define|#
directive|define
name|XK_KP_Right
value|0xFF98
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Down
end_ifndef
begin_define
DECL|macro|XK_KP_Down
define|#
directive|define
name|XK_KP_Down
value|0xFF99
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Prior
end_ifndef
begin_define
DECL|macro|XK_KP_Prior
define|#
directive|define
name|XK_KP_Prior
value|0xFF9A
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Next
end_ifndef
begin_define
DECL|macro|XK_KP_Next
define|#
directive|define
name|XK_KP_Next
value|0xFF9B
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_End
end_ifndef
begin_define
DECL|macro|XK_KP_End
define|#
directive|define
name|XK_KP_End
value|0xFF9C
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Insert
end_ifndef
begin_define
DECL|macro|XK_KP_Insert
define|#
directive|define
name|XK_KP_Insert
value|0xFF9E
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|XK_KP_Delete
end_ifndef
begin_define
DECL|macro|XK_KP_Delete
define|#
directive|define
name|XK_KP_Delete
value|0xFF9F
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// the next lines are taken on 10/2009 from X.org (X11/XF86keysym.h), defining some special
end_comment
begin_comment
comment|// multimedia keys. They are included here as not every system has them.
end_comment
begin_define
DECL|macro|XF86XK_MonBrightnessUp
define|#
directive|define
name|XF86XK_MonBrightnessUp
value|0x1008FF02
end_define
begin_define
DECL|macro|XF86XK_MonBrightnessDown
define|#
directive|define
name|XF86XK_MonBrightnessDown
value|0x1008FF03
end_define
begin_define
DECL|macro|XF86XK_KbdLightOnOff
define|#
directive|define
name|XF86XK_KbdLightOnOff
value|0x1008FF04
end_define
begin_define
DECL|macro|XF86XK_KbdBrightnessUp
define|#
directive|define
name|XF86XK_KbdBrightnessUp
value|0x1008FF05
end_define
begin_define
DECL|macro|XF86XK_KbdBrightnessDown
define|#
directive|define
name|XF86XK_KbdBrightnessDown
value|0x1008FF06
end_define
begin_define
DECL|macro|XF86XK_Standby
define|#
directive|define
name|XF86XK_Standby
value|0x1008FF10
end_define
begin_define
DECL|macro|XF86XK_AudioLowerVolume
define|#
directive|define
name|XF86XK_AudioLowerVolume
value|0x1008FF11
end_define
begin_define
DECL|macro|XF86XK_AudioMute
define|#
directive|define
name|XF86XK_AudioMute
value|0x1008FF12
end_define
begin_define
DECL|macro|XF86XK_AudioRaiseVolume
define|#
directive|define
name|XF86XK_AudioRaiseVolume
value|0x1008FF13
end_define
begin_define
DECL|macro|XF86XK_AudioPlay
define|#
directive|define
name|XF86XK_AudioPlay
value|0x1008FF14
end_define
begin_define
DECL|macro|XF86XK_AudioStop
define|#
directive|define
name|XF86XK_AudioStop
value|0x1008FF15
end_define
begin_define
DECL|macro|XF86XK_AudioPrev
define|#
directive|define
name|XF86XK_AudioPrev
value|0x1008FF16
end_define
begin_define
DECL|macro|XF86XK_AudioNext
define|#
directive|define
name|XF86XK_AudioNext
value|0x1008FF17
end_define
begin_define
DECL|macro|XF86XK_HomePage
define|#
directive|define
name|XF86XK_HomePage
value|0x1008FF18
end_define
begin_define
DECL|macro|XF86XK_Mail
define|#
directive|define
name|XF86XK_Mail
value|0x1008FF19
end_define
begin_define
DECL|macro|XF86XK_Start
define|#
directive|define
name|XF86XK_Start
value|0x1008FF1A
end_define
begin_define
DECL|macro|XF86XK_Search
define|#
directive|define
name|XF86XK_Search
value|0x1008FF1B
end_define
begin_define
DECL|macro|XF86XK_AudioRecord
define|#
directive|define
name|XF86XK_AudioRecord
value|0x1008FF1C
end_define
begin_define
DECL|macro|XF86XK_Calculator
define|#
directive|define
name|XF86XK_Calculator
value|0x1008FF1D
end_define
begin_define
DECL|macro|XF86XK_Memo
define|#
directive|define
name|XF86XK_Memo
value|0x1008FF1E
end_define
begin_define
DECL|macro|XF86XK_ToDoList
define|#
directive|define
name|XF86XK_ToDoList
value|0x1008FF1F
end_define
begin_define
DECL|macro|XF86XK_Calendar
define|#
directive|define
name|XF86XK_Calendar
value|0x1008FF20
end_define
begin_define
DECL|macro|XF86XK_PowerDown
define|#
directive|define
name|XF86XK_PowerDown
value|0x1008FF21
end_define
begin_define
DECL|macro|XF86XK_ContrastAdjust
define|#
directive|define
name|XF86XK_ContrastAdjust
value|0x1008FF22
end_define
begin_define
DECL|macro|XF86XK_Back
define|#
directive|define
name|XF86XK_Back
value|0x1008FF26
end_define
begin_define
DECL|macro|XF86XK_Forward
define|#
directive|define
name|XF86XK_Forward
value|0x1008FF27
end_define
begin_define
DECL|macro|XF86XK_Stop
define|#
directive|define
name|XF86XK_Stop
value|0x1008FF28
end_define
begin_define
DECL|macro|XF86XK_Refresh
define|#
directive|define
name|XF86XK_Refresh
value|0x1008FF29
end_define
begin_define
DECL|macro|XF86XK_PowerOff
define|#
directive|define
name|XF86XK_PowerOff
value|0x1008FF2A
end_define
begin_define
DECL|macro|XF86XK_WakeUp
define|#
directive|define
name|XF86XK_WakeUp
value|0x1008FF2B
end_define
begin_define
DECL|macro|XF86XK_Eject
define|#
directive|define
name|XF86XK_Eject
value|0x1008FF2C
end_define
begin_define
DECL|macro|XF86XK_ScreenSaver
define|#
directive|define
name|XF86XK_ScreenSaver
value|0x1008FF2D
end_define
begin_define
DECL|macro|XF86XK_WWW
define|#
directive|define
name|XF86XK_WWW
value|0x1008FF2E
end_define
begin_define
DECL|macro|XF86XK_Sleep
define|#
directive|define
name|XF86XK_Sleep
value|0x1008FF2F
end_define
begin_define
DECL|macro|XF86XK_Favorites
define|#
directive|define
name|XF86XK_Favorites
value|0x1008FF30
end_define
begin_define
DECL|macro|XF86XK_AudioPause
define|#
directive|define
name|XF86XK_AudioPause
value|0x1008FF31
end_define
begin_define
DECL|macro|XF86XK_AudioMedia
define|#
directive|define
name|XF86XK_AudioMedia
value|0x1008FF32
end_define
begin_define
DECL|macro|XF86XK_MyComputer
define|#
directive|define
name|XF86XK_MyComputer
value|0x1008FF33
end_define
begin_define
DECL|macro|XF86XK_LightBulb
define|#
directive|define
name|XF86XK_LightBulb
value|0x1008FF35
end_define
begin_define
DECL|macro|XF86XK_Shop
define|#
directive|define
name|XF86XK_Shop
value|0x1008FF36
end_define
begin_define
DECL|macro|XF86XK_History
define|#
directive|define
name|XF86XK_History
value|0x1008FF37
end_define
begin_define
DECL|macro|XF86XK_OpenURL
define|#
directive|define
name|XF86XK_OpenURL
value|0x1008FF38
end_define
begin_define
DECL|macro|XF86XK_AddFavorite
define|#
directive|define
name|XF86XK_AddFavorite
value|0x1008FF39
end_define
begin_define
DECL|macro|XF86XK_HotLinks
define|#
directive|define
name|XF86XK_HotLinks
value|0x1008FF3A
end_define
begin_define
DECL|macro|XF86XK_BrightnessAdjust
define|#
directive|define
name|XF86XK_BrightnessAdjust
value|0x1008FF3B
end_define
begin_define
DECL|macro|XF86XK_Finance
define|#
directive|define
name|XF86XK_Finance
value|0x1008FF3C
end_define
begin_define
DECL|macro|XF86XK_Community
define|#
directive|define
name|XF86XK_Community
value|0x1008FF3D
end_define
begin_define
DECL|macro|XF86XK_AudioRewind
define|#
directive|define
name|XF86XK_AudioRewind
value|0x1008FF3E
end_define
begin_define
DECL|macro|XF86XK_BackForward
define|#
directive|define
name|XF86XK_BackForward
value|0x1008FF3F
end_define
begin_define
DECL|macro|XF86XK_Launch0
define|#
directive|define
name|XF86XK_Launch0
value|0x1008FF40
end_define
begin_define
DECL|macro|XF86XK_Launch1
define|#
directive|define
name|XF86XK_Launch1
value|0x1008FF41
end_define
begin_define
DECL|macro|XF86XK_Launch2
define|#
directive|define
name|XF86XK_Launch2
value|0x1008FF42
end_define
begin_define
DECL|macro|XF86XK_Launch3
define|#
directive|define
name|XF86XK_Launch3
value|0x1008FF43
end_define
begin_define
DECL|macro|XF86XK_Launch4
define|#
directive|define
name|XF86XK_Launch4
value|0x1008FF44
end_define
begin_define
DECL|macro|XF86XK_Launch5
define|#
directive|define
name|XF86XK_Launch5
value|0x1008FF45
end_define
begin_define
DECL|macro|XF86XK_Launch6
define|#
directive|define
name|XF86XK_Launch6
value|0x1008FF46
end_define
begin_define
DECL|macro|XF86XK_Launch7
define|#
directive|define
name|XF86XK_Launch7
value|0x1008FF47
end_define
begin_define
DECL|macro|XF86XK_Launch8
define|#
directive|define
name|XF86XK_Launch8
value|0x1008FF48
end_define
begin_define
DECL|macro|XF86XK_Launch9
define|#
directive|define
name|XF86XK_Launch9
value|0x1008FF49
end_define
begin_define
DECL|macro|XF86XK_LaunchA
define|#
directive|define
name|XF86XK_LaunchA
value|0x1008FF4A
end_define
begin_define
DECL|macro|XF86XK_LaunchB
define|#
directive|define
name|XF86XK_LaunchB
value|0x1008FF4B
end_define
begin_define
DECL|macro|XF86XK_LaunchC
define|#
directive|define
name|XF86XK_LaunchC
value|0x1008FF4C
end_define
begin_define
DECL|macro|XF86XK_LaunchD
define|#
directive|define
name|XF86XK_LaunchD
value|0x1008FF4D
end_define
begin_define
DECL|macro|XF86XK_LaunchE
define|#
directive|define
name|XF86XK_LaunchE
value|0x1008FF4E
end_define
begin_define
DECL|macro|XF86XK_LaunchF
define|#
directive|define
name|XF86XK_LaunchF
value|0x1008FF4F
end_define
begin_define
DECL|macro|XF86XK_ApplicationLeft
define|#
directive|define
name|XF86XK_ApplicationLeft
value|0x1008FF50
end_define
begin_define
DECL|macro|XF86XK_ApplicationRight
define|#
directive|define
name|XF86XK_ApplicationRight
value|0x1008FF51
end_define
begin_define
DECL|macro|XF86XK_Book
define|#
directive|define
name|XF86XK_Book
value|0x1008FF52
end_define
begin_define
DECL|macro|XF86XK_CD
define|#
directive|define
name|XF86XK_CD
value|0x1008FF53
end_define
begin_define
DECL|macro|XF86XK_Calculater
define|#
directive|define
name|XF86XK_Calculater
value|0x1008FF54
end_define
begin_define
DECL|macro|XF86XK_Clear
define|#
directive|define
name|XF86XK_Clear
value|0x1008FF55
end_define
begin_define
DECL|macro|XF86XK_ClearGrab
define|#
directive|define
name|XF86XK_ClearGrab
value|0x1008FE21
end_define
begin_define
DECL|macro|XF86XK_Close
define|#
directive|define
name|XF86XK_Close
value|0x1008FF56
end_define
begin_define
DECL|macro|XF86XK_Copy
define|#
directive|define
name|XF86XK_Copy
value|0x1008FF57
end_define
begin_define
DECL|macro|XF86XK_Cut
define|#
directive|define
name|XF86XK_Cut
value|0x1008FF58
end_define
begin_define
DECL|macro|XF86XK_Display
define|#
directive|define
name|XF86XK_Display
value|0x1008FF59
end_define
begin_define
DECL|macro|XF86XK_DOS
define|#
directive|define
name|XF86XK_DOS
value|0x1008FF5A
end_define
begin_define
DECL|macro|XF86XK_Documents
define|#
directive|define
name|XF86XK_Documents
value|0x1008FF5B
end_define
begin_define
DECL|macro|XF86XK_Excel
define|#
directive|define
name|XF86XK_Excel
value|0x1008FF5C
end_define
begin_define
DECL|macro|XF86XK_Explorer
define|#
directive|define
name|XF86XK_Explorer
value|0x1008FF5D
end_define
begin_define
DECL|macro|XF86XK_Game
define|#
directive|define
name|XF86XK_Game
value|0x1008FF5E
end_define
begin_define
DECL|macro|XF86XK_Go
define|#
directive|define
name|XF86XK_Go
value|0x1008FF5F
end_define
begin_define
DECL|macro|XF86XK_iTouch
define|#
directive|define
name|XF86XK_iTouch
value|0x1008FF60
end_define
begin_define
DECL|macro|XF86XK_LogOff
define|#
directive|define
name|XF86XK_LogOff
value|0x1008FF61
end_define
begin_define
DECL|macro|XF86XK_Market
define|#
directive|define
name|XF86XK_Market
value|0x1008FF62
end_define
begin_define
DECL|macro|XF86XK_Meeting
define|#
directive|define
name|XF86XK_Meeting
value|0x1008FF63
end_define
begin_define
DECL|macro|XF86XK_MenuKB
define|#
directive|define
name|XF86XK_MenuKB
value|0x1008FF65
end_define
begin_define
DECL|macro|XF86XK_MenuPB
define|#
directive|define
name|XF86XK_MenuPB
value|0x1008FF66
end_define
begin_define
DECL|macro|XF86XK_MySites
define|#
directive|define
name|XF86XK_MySites
value|0x1008FF67
end_define
begin_define
DECL|macro|XF86XK_News
define|#
directive|define
name|XF86XK_News
value|0x1008FF69
end_define
begin_define
DECL|macro|XF86XK_OfficeHome
define|#
directive|define
name|XF86XK_OfficeHome
value|0x1008FF6A
end_define
begin_define
DECL|macro|XF86XK_Option
define|#
directive|define
name|XF86XK_Option
value|0x1008FF6C
end_define
begin_define
DECL|macro|XF86XK_Paste
define|#
directive|define
name|XF86XK_Paste
value|0x1008FF6D
end_define
begin_define
DECL|macro|XF86XK_Phone
define|#
directive|define
name|XF86XK_Phone
value|0x1008FF6E
end_define
begin_define
DECL|macro|XF86XK_Reply
define|#
directive|define
name|XF86XK_Reply
value|0x1008FF72
end_define
begin_define
DECL|macro|XF86XK_Reload
define|#
directive|define
name|XF86XK_Reload
value|0x1008FF73
end_define
begin_define
DECL|macro|XF86XK_RotateWindows
define|#
directive|define
name|XF86XK_RotateWindows
value|0x1008FF74
end_define
begin_define
DECL|macro|XF86XK_RotationPB
define|#
directive|define
name|XF86XK_RotationPB
value|0x1008FF75
end_define
begin_define
DECL|macro|XF86XK_RotationKB
define|#
directive|define
name|XF86XK_RotationKB
value|0x1008FF76
end_define
begin_define
DECL|macro|XF86XK_Save
define|#
directive|define
name|XF86XK_Save
value|0x1008FF77
end_define
begin_define
DECL|macro|XF86XK_Send
define|#
directive|define
name|XF86XK_Send
value|0x1008FF7B
end_define
begin_define
DECL|macro|XF86XK_Spell
define|#
directive|define
name|XF86XK_Spell
value|0x1008FF7C
end_define
begin_define
DECL|macro|XF86XK_SplitScreen
define|#
directive|define
name|XF86XK_SplitScreen
value|0x1008FF7D
end_define
begin_define
DECL|macro|XF86XK_Support
define|#
directive|define
name|XF86XK_Support
value|0x1008FF7E
end_define
begin_define
DECL|macro|XF86XK_TaskPane
define|#
directive|define
name|XF86XK_TaskPane
value|0x1008FF7F
end_define
begin_define
DECL|macro|XF86XK_Terminal
define|#
directive|define
name|XF86XK_Terminal
value|0x1008FF80
end_define
begin_define
DECL|macro|XF86XK_Tools
define|#
directive|define
name|XF86XK_Tools
value|0x1008FF81
end_define
begin_define
DECL|macro|XF86XK_Travel
define|#
directive|define
name|XF86XK_Travel
value|0x1008FF82
end_define
begin_define
DECL|macro|XF86XK_Video
define|#
directive|define
name|XF86XK_Video
value|0x1008FF87
end_define
begin_define
DECL|macro|XF86XK_Word
define|#
directive|define
name|XF86XK_Word
value|0x1008FF89
end_define
begin_define
DECL|macro|XF86XK_Xfer
define|#
directive|define
name|XF86XK_Xfer
value|0x1008FF8A
end_define
begin_define
DECL|macro|XF86XK_ZoomIn
define|#
directive|define
name|XF86XK_ZoomIn
value|0x1008FF8B
end_define
begin_define
DECL|macro|XF86XK_ZoomOut
define|#
directive|define
name|XF86XK_ZoomOut
value|0x1008FF8C
end_define
begin_define
DECL|macro|XF86XK_Away
define|#
directive|define
name|XF86XK_Away
value|0x1008FF8D
end_define
begin_define
DECL|macro|XF86XK_Messenger
define|#
directive|define
name|XF86XK_Messenger
value|0x1008FF8E
end_define
begin_define
DECL|macro|XF86XK_WebCam
define|#
directive|define
name|XF86XK_WebCam
value|0x1008FF8F
end_define
begin_define
DECL|macro|XF86XK_MailForward
define|#
directive|define
name|XF86XK_MailForward
value|0x1008FF90
end_define
begin_define
DECL|macro|XF86XK_Pictures
define|#
directive|define
name|XF86XK_Pictures
value|0x1008FF91
end_define
begin_define
DECL|macro|XF86XK_Music
define|#
directive|define
name|XF86XK_Music
value|0x1008FF92
end_define
begin_define
DECL|macro|XF86XK_Battery
define|#
directive|define
name|XF86XK_Battery
value|0x1008FF93
end_define
begin_define
DECL|macro|XF86XK_Bluetooth
define|#
directive|define
name|XF86XK_Bluetooth
value|0x1008FF94
end_define
begin_define
DECL|macro|XF86XK_WLAN
define|#
directive|define
name|XF86XK_WLAN
value|0x1008FF95
end_define
begin_define
DECL|macro|XF86XK_UWB
define|#
directive|define
name|XF86XK_UWB
value|0x1008FF96
end_define
begin_define
DECL|macro|XF86XK_AudioForward
define|#
directive|define
name|XF86XK_AudioForward
value|0x1008FF97
end_define
begin_define
DECL|macro|XF86XK_AudioRepeat
define|#
directive|define
name|XF86XK_AudioRepeat
value|0x1008FF98
end_define
begin_define
DECL|macro|XF86XK_AudioRandomPlay
define|#
directive|define
name|XF86XK_AudioRandomPlay
value|0x1008FF99
end_define
begin_define
DECL|macro|XF86XK_Subtitle
define|#
directive|define
name|XF86XK_Subtitle
value|0x1008FF9A
end_define
begin_define
DECL|macro|XF86XK_AudioCycleTrack
define|#
directive|define
name|XF86XK_AudioCycleTrack
value|0x1008FF9B
end_define
begin_define
DECL|macro|XF86XK_Time
define|#
directive|define
name|XF86XK_Time
value|0x1008FF9F
end_define
begin_define
DECL|macro|XF86XK_Select
define|#
directive|define
name|XF86XK_Select
value|0x1008FFA0
end_define
begin_define
DECL|macro|XF86XK_View
define|#
directive|define
name|XF86XK_View
value|0x1008FFA1
end_define
begin_define
DECL|macro|XF86XK_TopMenu
define|#
directive|define
name|XF86XK_TopMenu
value|0x1008FFA2
end_define
begin_define
DECL|macro|XF86XK_Suspend
define|#
directive|define
name|XF86XK_Suspend
value|0x1008FFA7
end_define
begin_define
DECL|macro|XF86XK_Hibernate
define|#
directive|define
name|XF86XK_Hibernate
value|0x1008FFA8
end_define
begin_define
DECL|macro|XF86XK_TouchpadToggle
define|#
directive|define
name|XF86XK_TouchpadToggle
value|0x1008FFA9
end_define
begin_define
DECL|macro|XF86XK_TouchpadOn
define|#
directive|define
name|XF86XK_TouchpadOn
value|0x1008FFB0
end_define
begin_define
DECL|macro|XF86XK_TouchpadOff
define|#
directive|define
name|XF86XK_TouchpadOff
value|0x1008FFB1
end_define
begin_comment
comment|// end of XF86keysyms.h
end_comment
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// keyboard mapping table
DECL|variable|KeyTbl
specifier|static
specifier|const
name|unsigned
name|int
name|KeyTbl
index|[]
init|=
block|{
comment|// misc keys
name|XK_Escape
block|,
name|Qt
operator|::
name|Key_Escape
block|,
name|XK_Tab
block|,
name|Qt
operator|::
name|Key_Tab
block|,
name|XK_ISO_Left_Tab
block|,
name|Qt
operator|::
name|Key_Backtab
block|,
name|XK_BackSpace
block|,
name|Qt
operator|::
name|Key_Backspace
block|,
name|XK_Return
block|,
name|Qt
operator|::
name|Key_Return
block|,
name|XK_Insert
block|,
name|Qt
operator|::
name|Key_Insert
block|,
name|XK_Delete
block|,
name|Qt
operator|::
name|Key_Delete
block|,
name|XK_Clear
block|,
name|Qt
operator|::
name|Key_Delete
block|,
name|XK_Pause
block|,
name|Qt
operator|::
name|Key_Pause
block|,
name|XK_Print
block|,
name|Qt
operator|::
name|Key_Print
block|,
literal|0x1005FF60
block|,
name|Qt
operator|::
name|Key_SysReq
block|,
comment|// hardcoded Sun SysReq
literal|0x1007ff00
block|,
name|Qt
operator|::
name|Key_SysReq
block|,
comment|// hardcoded X386 SysReq
comment|// cursor movement
name|XK_Home
block|,
name|Qt
operator|::
name|Key_Home
block|,
name|XK_End
block|,
name|Qt
operator|::
name|Key_End
block|,
name|XK_Left
block|,
name|Qt
operator|::
name|Key_Left
block|,
name|XK_Up
block|,
name|Qt
operator|::
name|Key_Up
block|,
name|XK_Right
block|,
name|Qt
operator|::
name|Key_Right
block|,
name|XK_Down
block|,
name|Qt
operator|::
name|Key_Down
block|,
name|XK_Prior
block|,
name|Qt
operator|::
name|Key_PageUp
block|,
name|XK_Next
block|,
name|Qt
operator|::
name|Key_PageDown
block|,
comment|// modifiers
name|XK_Shift_L
block|,
name|Qt
operator|::
name|Key_Shift
block|,
name|XK_Shift_R
block|,
name|Qt
operator|::
name|Key_Shift
block|,
name|XK_Shift_Lock
block|,
name|Qt
operator|::
name|Key_Shift
block|,
name|XK_Control_L
block|,
name|Qt
operator|::
name|Key_Control
block|,
name|XK_Control_R
block|,
name|Qt
operator|::
name|Key_Control
block|,
name|XK_Meta_L
block|,
name|Qt
operator|::
name|Key_Meta
block|,
name|XK_Meta_R
block|,
name|Qt
operator|::
name|Key_Meta
block|,
name|XK_Alt_L
block|,
name|Qt
operator|::
name|Key_Alt
block|,
name|XK_Alt_R
block|,
name|Qt
operator|::
name|Key_Alt
block|,
name|XK_Caps_Lock
block|,
name|Qt
operator|::
name|Key_CapsLock
block|,
name|XK_Num_Lock
block|,
name|Qt
operator|::
name|Key_NumLock
block|,
name|XK_Scroll_Lock
block|,
name|Qt
operator|::
name|Key_ScrollLock
block|,
name|XK_Super_L
block|,
name|Qt
operator|::
name|Key_Super_L
block|,
name|XK_Super_R
block|,
name|Qt
operator|::
name|Key_Super_R
block|,
name|XK_Menu
block|,
name|Qt
operator|::
name|Key_Menu
block|,
name|XK_Hyper_L
block|,
name|Qt
operator|::
name|Key_Hyper_L
block|,
name|XK_Hyper_R
block|,
name|Qt
operator|::
name|Key_Hyper_R
block|,
name|XK_Help
block|,
name|Qt
operator|::
name|Key_Help
block|,
literal|0x1000FF74
block|,
name|Qt
operator|::
name|Key_Backtab
block|,
comment|// hardcoded HP backtab
literal|0x1005FF10
block|,
name|Qt
operator|::
name|Key_F11
block|,
comment|// hardcoded Sun F36 (labeled F11)
literal|0x1005FF11
block|,
name|Qt
operator|::
name|Key_F12
block|,
comment|// hardcoded Sun F37 (labeled F12)
comment|// numeric and function keypad keys
name|XK_KP_Space
block|,
name|Qt
operator|::
name|Key_Space
block|,
name|XK_KP_Tab
block|,
name|Qt
operator|::
name|Key_Tab
block|,
name|XK_KP_Enter
block|,
name|Qt
operator|::
name|Key_Enter
block|,
comment|//XK_KP_F1,                 Qt::Key_F1,
comment|//XK_KP_F2,                 Qt::Key_F2,
comment|//XK_KP_F3,                 Qt::Key_F3,
comment|//XK_KP_F4,                 Qt::Key_F4,
name|XK_KP_Home
block|,
name|Qt
operator|::
name|Key_Home
block|,
name|XK_KP_Left
block|,
name|Qt
operator|::
name|Key_Left
block|,
name|XK_KP_Up
block|,
name|Qt
operator|::
name|Key_Up
block|,
name|XK_KP_Right
block|,
name|Qt
operator|::
name|Key_Right
block|,
name|XK_KP_Down
block|,
name|Qt
operator|::
name|Key_Down
block|,
name|XK_KP_Prior
block|,
name|Qt
operator|::
name|Key_PageUp
block|,
name|XK_KP_Next
block|,
name|Qt
operator|::
name|Key_PageDown
block|,
name|XK_KP_End
block|,
name|Qt
operator|::
name|Key_End
block|,
name|XK_KP_Begin
block|,
name|Qt
operator|::
name|Key_Clear
block|,
name|XK_KP_Insert
block|,
name|Qt
operator|::
name|Key_Insert
block|,
name|XK_KP_Delete
block|,
name|Qt
operator|::
name|Key_Delete
block|,
name|XK_KP_Equal
block|,
name|Qt
operator|::
name|Key_Equal
block|,
name|XK_KP_Multiply
block|,
name|Qt
operator|::
name|Key_Asterisk
block|,
name|XK_KP_Add
block|,
name|Qt
operator|::
name|Key_Plus
block|,
name|XK_KP_Separator
block|,
name|Qt
operator|::
name|Key_Comma
block|,
name|XK_KP_Subtract
block|,
name|Qt
operator|::
name|Key_Minus
block|,
name|XK_KP_Decimal
block|,
name|Qt
operator|::
name|Key_Period
block|,
name|XK_KP_Divide
block|,
name|Qt
operator|::
name|Key_Slash
block|,
comment|// International input method support keys
comment|// International& multi-key character composition
name|XK_ISO_Level3_Shift
block|,
name|Qt
operator|::
name|Key_AltGr
block|,
name|XK_Multi_key
block|,
name|Qt
operator|::
name|Key_Multi_key
block|,
name|XK_Codeinput
block|,
name|Qt
operator|::
name|Key_Codeinput
block|,
name|XK_SingleCandidate
block|,
name|Qt
operator|::
name|Key_SingleCandidate
block|,
name|XK_MultipleCandidate
block|,
name|Qt
operator|::
name|Key_MultipleCandidate
block|,
name|XK_PreviousCandidate
block|,
name|Qt
operator|::
name|Key_PreviousCandidate
block|,
comment|// Misc Functions
name|XK_Mode_switch
block|,
name|Qt
operator|::
name|Key_Mode_switch
block|,
name|XK_script_switch
block|,
name|Qt
operator|::
name|Key_Mode_switch
block|,
comment|// Japanese keyboard support
name|XK_Kanji
block|,
name|Qt
operator|::
name|Key_Kanji
block|,
name|XK_Muhenkan
block|,
name|Qt
operator|::
name|Key_Muhenkan
block|,
comment|//XK_Henkan_Mode,		Qt::Key_Henkan_Mode,
name|XK_Henkan_Mode
block|,
name|Qt
operator|::
name|Key_Henkan
block|,
name|XK_Henkan
block|,
name|Qt
operator|::
name|Key_Henkan
block|,
name|XK_Romaji
block|,
name|Qt
operator|::
name|Key_Romaji
block|,
name|XK_Hiragana
block|,
name|Qt
operator|::
name|Key_Hiragana
block|,
name|XK_Katakana
block|,
name|Qt
operator|::
name|Key_Katakana
block|,
name|XK_Hiragana_Katakana
block|,
name|Qt
operator|::
name|Key_Hiragana_Katakana
block|,
name|XK_Zenkaku
block|,
name|Qt
operator|::
name|Key_Zenkaku
block|,
name|XK_Hankaku
block|,
name|Qt
operator|::
name|Key_Hankaku
block|,
name|XK_Zenkaku_Hankaku
block|,
name|Qt
operator|::
name|Key_Zenkaku_Hankaku
block|,
name|XK_Touroku
block|,
name|Qt
operator|::
name|Key_Touroku
block|,
name|XK_Massyo
block|,
name|Qt
operator|::
name|Key_Massyo
block|,
name|XK_Kana_Lock
block|,
name|Qt
operator|::
name|Key_Kana_Lock
block|,
name|XK_Kana_Shift
block|,
name|Qt
operator|::
name|Key_Kana_Shift
block|,
name|XK_Eisu_Shift
block|,
name|Qt
operator|::
name|Key_Eisu_Shift
block|,
name|XK_Eisu_toggle
block|,
name|Qt
operator|::
name|Key_Eisu_toggle
block|,
comment|//XK_Kanji_Bangou,		Qt::Key_Kanji_Bangou,
comment|//XK_Zen_Koho,		Qt::Key_Zen_Koho,
comment|//XK_Mae_Koho,		Qt::Key_Mae_Koho,
name|XK_Kanji_Bangou
block|,
name|Qt
operator|::
name|Key_Codeinput
block|,
name|XK_Zen_Koho
block|,
name|Qt
operator|::
name|Key_MultipleCandidate
block|,
name|XK_Mae_Koho
block|,
name|Qt
operator|::
name|Key_PreviousCandidate
block|,
ifdef|#
directive|ifdef
name|XK_KOREAN
comment|// Korean keyboard support
name|XK_Hangul
block|,
name|Qt
operator|::
name|Key_Hangul
block|,
name|XK_Hangul_Start
block|,
name|Qt
operator|::
name|Key_Hangul_Start
block|,
name|XK_Hangul_End
block|,
name|Qt
operator|::
name|Key_Hangul_End
block|,
name|XK_Hangul_Hanja
block|,
name|Qt
operator|::
name|Key_Hangul_Hanja
block|,
name|XK_Hangul_Jamo
block|,
name|Qt
operator|::
name|Key_Hangul_Jamo
block|,
name|XK_Hangul_Romaja
block|,
name|Qt
operator|::
name|Key_Hangul_Romaja
block|,
comment|//XK_Hangul_Codeinput,	Qt::Key_Hangul_Codeinput,
name|XK_Hangul_Codeinput
block|,
name|Qt
operator|::
name|Key_Codeinput
block|,
name|XK_Hangul_Jeonja
block|,
name|Qt
operator|::
name|Key_Hangul_Jeonja
block|,
name|XK_Hangul_Banja
block|,
name|Qt
operator|::
name|Key_Hangul_Banja
block|,
name|XK_Hangul_PreHanja
block|,
name|Qt
operator|::
name|Key_Hangul_PreHanja
block|,
name|XK_Hangul_PostHanja
block|,
name|Qt
operator|::
name|Key_Hangul_PostHanja
block|,
comment|//XK_Hangul_SingleCandidate,Qt::Key_Hangul_SingleCandidate,
comment|//XK_Hangul_MultipleCandidate,Qt::Key_Hangul_MultipleCandidate,
comment|//XK_Hangul_PreviousCandidate,Qt::Key_Hangul_PreviousCandidate,
name|XK_Hangul_SingleCandidate
block|,
name|Qt
operator|::
name|Key_SingleCandidate
block|,
name|XK_Hangul_MultipleCandidate
block|,
name|Qt
operator|::
name|Key_MultipleCandidate
block|,
name|XK_Hangul_PreviousCandidate
block|,
name|Qt
operator|::
name|Key_PreviousCandidate
block|,
name|XK_Hangul_Special
block|,
name|Qt
operator|::
name|Key_Hangul_Special
block|,
comment|//XK_Hangul_switch,		Qt::Key_Hangul_switch,
name|XK_Hangul_switch
block|,
name|Qt
operator|::
name|Key_Mode_switch
block|,
endif|#
directive|endif
comment|// XK_KOREAN
comment|// dead keys
name|XK_dead_grave
block|,
name|Qt
operator|::
name|Key_Dead_Grave
block|,
name|XK_dead_acute
block|,
name|Qt
operator|::
name|Key_Dead_Acute
block|,
name|XK_dead_circumflex
block|,
name|Qt
operator|::
name|Key_Dead_Circumflex
block|,
name|XK_dead_tilde
block|,
name|Qt
operator|::
name|Key_Dead_Tilde
block|,
name|XK_dead_macron
block|,
name|Qt
operator|::
name|Key_Dead_Macron
block|,
name|XK_dead_breve
block|,
name|Qt
operator|::
name|Key_Dead_Breve
block|,
name|XK_dead_abovedot
block|,
name|Qt
operator|::
name|Key_Dead_Abovedot
block|,
name|XK_dead_diaeresis
block|,
name|Qt
operator|::
name|Key_Dead_Diaeresis
block|,
name|XK_dead_abovering
block|,
name|Qt
operator|::
name|Key_Dead_Abovering
block|,
name|XK_dead_doubleacute
block|,
name|Qt
operator|::
name|Key_Dead_Doubleacute
block|,
name|XK_dead_caron
block|,
name|Qt
operator|::
name|Key_Dead_Caron
block|,
name|XK_dead_cedilla
block|,
name|Qt
operator|::
name|Key_Dead_Cedilla
block|,
name|XK_dead_ogonek
block|,
name|Qt
operator|::
name|Key_Dead_Ogonek
block|,
name|XK_dead_iota
block|,
name|Qt
operator|::
name|Key_Dead_Iota
block|,
name|XK_dead_voiced_sound
block|,
name|Qt
operator|::
name|Key_Dead_Voiced_Sound
block|,
name|XK_dead_semivoiced_sound
block|,
name|Qt
operator|::
name|Key_Dead_Semivoiced_Sound
block|,
name|XK_dead_belowdot
block|,
name|Qt
operator|::
name|Key_Dead_Belowdot
block|,
name|XK_dead_hook
block|,
name|Qt
operator|::
name|Key_Dead_Hook
block|,
name|XK_dead_horn
block|,
name|Qt
operator|::
name|Key_Dead_Horn
block|,
comment|// Special keys from X.org - This include multimedia keys,
comment|// wireless/bluetooth/uwb keys, special launcher keys, etc.
name|XF86XK_Back
block|,
name|Qt
operator|::
name|Key_Back
block|,
name|XF86XK_Forward
block|,
name|Qt
operator|::
name|Key_Forward
block|,
name|XF86XK_Stop
block|,
name|Qt
operator|::
name|Key_Stop
block|,
name|XF86XK_Refresh
block|,
name|Qt
operator|::
name|Key_Refresh
block|,
name|XF86XK_Favorites
block|,
name|Qt
operator|::
name|Key_Favorites
block|,
name|XF86XK_AudioMedia
block|,
name|Qt
operator|::
name|Key_LaunchMedia
block|,
name|XF86XK_OpenURL
block|,
name|Qt
operator|::
name|Key_OpenUrl
block|,
name|XF86XK_HomePage
block|,
name|Qt
operator|::
name|Key_HomePage
block|,
name|XF86XK_Search
block|,
name|Qt
operator|::
name|Key_Search
block|,
name|XF86XK_AudioLowerVolume
block|,
name|Qt
operator|::
name|Key_VolumeDown
block|,
name|XF86XK_AudioMute
block|,
name|Qt
operator|::
name|Key_VolumeMute
block|,
name|XF86XK_AudioRaiseVolume
block|,
name|Qt
operator|::
name|Key_VolumeUp
block|,
name|XF86XK_AudioPlay
block|,
name|Qt
operator|::
name|Key_MediaPlay
block|,
name|XF86XK_AudioStop
block|,
name|Qt
operator|::
name|Key_MediaStop
block|,
name|XF86XK_AudioPrev
block|,
name|Qt
operator|::
name|Key_MediaPrevious
block|,
name|XF86XK_AudioNext
block|,
name|Qt
operator|::
name|Key_MediaNext
block|,
name|XF86XK_AudioRecord
block|,
name|Qt
operator|::
name|Key_MediaRecord
block|,
name|XF86XK_Mail
block|,
name|Qt
operator|::
name|Key_LaunchMail
block|,
name|XF86XK_MyComputer
block|,
name|Qt
operator|::
name|Key_Launch0
block|,
comment|// ### Qt 6: remap properly
name|XF86XK_Calculator
block|,
name|Qt
operator|::
name|Key_Launch1
block|,
name|XF86XK_Memo
block|,
name|Qt
operator|::
name|Key_Memo
block|,
name|XF86XK_ToDoList
block|,
name|Qt
operator|::
name|Key_ToDoList
block|,
name|XF86XK_Calendar
block|,
name|Qt
operator|::
name|Key_Calendar
block|,
name|XF86XK_PowerDown
block|,
name|Qt
operator|::
name|Key_PowerDown
block|,
name|XF86XK_ContrastAdjust
block|,
name|Qt
operator|::
name|Key_ContrastAdjust
block|,
name|XF86XK_Standby
block|,
name|Qt
operator|::
name|Key_Standby
block|,
name|XF86XK_MonBrightnessUp
block|,
name|Qt
operator|::
name|Key_MonBrightnessUp
block|,
name|XF86XK_MonBrightnessDown
block|,
name|Qt
operator|::
name|Key_MonBrightnessDown
block|,
name|XF86XK_KbdLightOnOff
block|,
name|Qt
operator|::
name|Key_KeyboardLightOnOff
block|,
name|XF86XK_KbdBrightnessUp
block|,
name|Qt
operator|::
name|Key_KeyboardBrightnessUp
block|,
name|XF86XK_KbdBrightnessDown
block|,
name|Qt
operator|::
name|Key_KeyboardBrightnessDown
block|,
name|XF86XK_PowerOff
block|,
name|Qt
operator|::
name|Key_PowerOff
block|,
name|XF86XK_WakeUp
block|,
name|Qt
operator|::
name|Key_WakeUp
block|,
name|XF86XK_Eject
block|,
name|Qt
operator|::
name|Key_Eject
block|,
name|XF86XK_ScreenSaver
block|,
name|Qt
operator|::
name|Key_ScreenSaver
block|,
name|XF86XK_WWW
block|,
name|Qt
operator|::
name|Key_WWW
block|,
name|XF86XK_Sleep
block|,
name|Qt
operator|::
name|Key_Sleep
block|,
name|XF86XK_LightBulb
block|,
name|Qt
operator|::
name|Key_LightBulb
block|,
name|XF86XK_Shop
block|,
name|Qt
operator|::
name|Key_Shop
block|,
name|XF86XK_History
block|,
name|Qt
operator|::
name|Key_History
block|,
name|XF86XK_AddFavorite
block|,
name|Qt
operator|::
name|Key_AddFavorite
block|,
name|XF86XK_HotLinks
block|,
name|Qt
operator|::
name|Key_HotLinks
block|,
name|XF86XK_BrightnessAdjust
block|,
name|Qt
operator|::
name|Key_BrightnessAdjust
block|,
name|XF86XK_Finance
block|,
name|Qt
operator|::
name|Key_Finance
block|,
name|XF86XK_Community
block|,
name|Qt
operator|::
name|Key_Community
block|,
name|XF86XK_AudioRewind
block|,
name|Qt
operator|::
name|Key_AudioRewind
block|,
name|XF86XK_BackForward
block|,
name|Qt
operator|::
name|Key_BackForward
block|,
name|XF86XK_ApplicationLeft
block|,
name|Qt
operator|::
name|Key_ApplicationLeft
block|,
name|XF86XK_ApplicationRight
block|,
name|Qt
operator|::
name|Key_ApplicationRight
block|,
name|XF86XK_Book
block|,
name|Qt
operator|::
name|Key_Book
block|,
name|XF86XK_CD
block|,
name|Qt
operator|::
name|Key_CD
block|,
name|XF86XK_Calculater
block|,
name|Qt
operator|::
name|Key_Calculator
block|,
name|XF86XK_Clear
block|,
name|Qt
operator|::
name|Key_Clear
block|,
name|XF86XK_ClearGrab
block|,
name|Qt
operator|::
name|Key_ClearGrab
block|,
name|XF86XK_Close
block|,
name|Qt
operator|::
name|Key_Close
block|,
name|XF86XK_Copy
block|,
name|Qt
operator|::
name|Key_Copy
block|,
name|XF86XK_Cut
block|,
name|Qt
operator|::
name|Key_Cut
block|,
name|XF86XK_Display
block|,
name|Qt
operator|::
name|Key_Display
block|,
name|XF86XK_DOS
block|,
name|Qt
operator|::
name|Key_DOS
block|,
name|XF86XK_Documents
block|,
name|Qt
operator|::
name|Key_Documents
block|,
name|XF86XK_Excel
block|,
name|Qt
operator|::
name|Key_Excel
block|,
name|XF86XK_Explorer
block|,
name|Qt
operator|::
name|Key_Explorer
block|,
name|XF86XK_Game
block|,
name|Qt
operator|::
name|Key_Game
block|,
name|XF86XK_Go
block|,
name|Qt
operator|::
name|Key_Go
block|,
name|XF86XK_iTouch
block|,
name|Qt
operator|::
name|Key_iTouch
block|,
name|XF86XK_LogOff
block|,
name|Qt
operator|::
name|Key_LogOff
block|,
name|XF86XK_Market
block|,
name|Qt
operator|::
name|Key_Market
block|,
name|XF86XK_Meeting
block|,
name|Qt
operator|::
name|Key_Meeting
block|,
name|XF86XK_MenuKB
block|,
name|Qt
operator|::
name|Key_MenuKB
block|,
name|XF86XK_MenuPB
block|,
name|Qt
operator|::
name|Key_MenuPB
block|,
name|XF86XK_MySites
block|,
name|Qt
operator|::
name|Key_MySites
block|,
name|XF86XK_News
block|,
name|Qt
operator|::
name|Key_News
block|,
name|XF86XK_OfficeHome
block|,
name|Qt
operator|::
name|Key_OfficeHome
block|,
name|XF86XK_Option
block|,
name|Qt
operator|::
name|Key_Option
block|,
name|XF86XK_Paste
block|,
name|Qt
operator|::
name|Key_Paste
block|,
name|XF86XK_Phone
block|,
name|Qt
operator|::
name|Key_Phone
block|,
name|XF86XK_Reply
block|,
name|Qt
operator|::
name|Key_Reply
block|,
name|XF86XK_Reload
block|,
name|Qt
operator|::
name|Key_Reload
block|,
name|XF86XK_RotateWindows
block|,
name|Qt
operator|::
name|Key_RotateWindows
block|,
name|XF86XK_RotationPB
block|,
name|Qt
operator|::
name|Key_RotationPB
block|,
name|XF86XK_RotationKB
block|,
name|Qt
operator|::
name|Key_RotationKB
block|,
name|XF86XK_Save
block|,
name|Qt
operator|::
name|Key_Save
block|,
name|XF86XK_Send
block|,
name|Qt
operator|::
name|Key_Send
block|,
name|XF86XK_Spell
block|,
name|Qt
operator|::
name|Key_Spell
block|,
name|XF86XK_SplitScreen
block|,
name|Qt
operator|::
name|Key_SplitScreen
block|,
name|XF86XK_Support
block|,
name|Qt
operator|::
name|Key_Support
block|,
name|XF86XK_TaskPane
block|,
name|Qt
operator|::
name|Key_TaskPane
block|,
name|XF86XK_Terminal
block|,
name|Qt
operator|::
name|Key_Terminal
block|,
name|XF86XK_Tools
block|,
name|Qt
operator|::
name|Key_Tools
block|,
name|XF86XK_Travel
block|,
name|Qt
operator|::
name|Key_Travel
block|,
name|XF86XK_Video
block|,
name|Qt
operator|::
name|Key_Video
block|,
name|XF86XK_Word
block|,
name|Qt
operator|::
name|Key_Word
block|,
name|XF86XK_Xfer
block|,
name|Qt
operator|::
name|Key_Xfer
block|,
name|XF86XK_ZoomIn
block|,
name|Qt
operator|::
name|Key_ZoomIn
block|,
name|XF86XK_ZoomOut
block|,
name|Qt
operator|::
name|Key_ZoomOut
block|,
name|XF86XK_Away
block|,
name|Qt
operator|::
name|Key_Away
block|,
name|XF86XK_Messenger
block|,
name|Qt
operator|::
name|Key_Messenger
block|,
name|XF86XK_WebCam
block|,
name|Qt
operator|::
name|Key_WebCam
block|,
name|XF86XK_MailForward
block|,
name|Qt
operator|::
name|Key_MailForward
block|,
name|XF86XK_Pictures
block|,
name|Qt
operator|::
name|Key_Pictures
block|,
name|XF86XK_Music
block|,
name|Qt
operator|::
name|Key_Music
block|,
name|XF86XK_Battery
block|,
name|Qt
operator|::
name|Key_Battery
block|,
name|XF86XK_Bluetooth
block|,
name|Qt
operator|::
name|Key_Bluetooth
block|,
name|XF86XK_WLAN
block|,
name|Qt
operator|::
name|Key_WLAN
block|,
name|XF86XK_UWB
block|,
name|Qt
operator|::
name|Key_UWB
block|,
name|XF86XK_AudioForward
block|,
name|Qt
operator|::
name|Key_AudioForward
block|,
name|XF86XK_AudioRepeat
block|,
name|Qt
operator|::
name|Key_AudioRepeat
block|,
name|XF86XK_AudioRandomPlay
block|,
name|Qt
operator|::
name|Key_AudioRandomPlay
block|,
name|XF86XK_Subtitle
block|,
name|Qt
operator|::
name|Key_Subtitle
block|,
name|XF86XK_AudioCycleTrack
block|,
name|Qt
operator|::
name|Key_AudioCycleTrack
block|,
name|XF86XK_Time
block|,
name|Qt
operator|::
name|Key_Time
block|,
name|XF86XK_Select
block|,
name|Qt
operator|::
name|Key_Select
block|,
name|XF86XK_View
block|,
name|Qt
operator|::
name|Key_View
block|,
name|XF86XK_TopMenu
block|,
name|Qt
operator|::
name|Key_TopMenu
block|,
name|XF86XK_Bluetooth
block|,
name|Qt
operator|::
name|Key_Bluetooth
block|,
name|XF86XK_Suspend
block|,
name|Qt
operator|::
name|Key_Suspend
block|,
name|XF86XK_Hibernate
block|,
name|Qt
operator|::
name|Key_Hibernate
block|,
name|XF86XK_TouchpadToggle
block|,
name|Qt
operator|::
name|Key_TouchpadToggle
block|,
name|XF86XK_TouchpadOn
block|,
name|Qt
operator|::
name|Key_TouchpadOn
block|,
name|XF86XK_TouchpadOff
block|,
name|Qt
operator|::
name|Key_TouchpadOff
block|,
name|XF86XK_Launch0
block|,
name|Qt
operator|::
name|Key_Launch2
block|,
comment|// ### Qt 6: remap properly
name|XF86XK_Launch1
block|,
name|Qt
operator|::
name|Key_Launch3
block|,
name|XF86XK_Launch2
block|,
name|Qt
operator|::
name|Key_Launch4
block|,
name|XF86XK_Launch3
block|,
name|Qt
operator|::
name|Key_Launch5
block|,
name|XF86XK_Launch4
block|,
name|Qt
operator|::
name|Key_Launch6
block|,
name|XF86XK_Launch5
block|,
name|Qt
operator|::
name|Key_Launch7
block|,
name|XF86XK_Launch6
block|,
name|Qt
operator|::
name|Key_Launch8
block|,
name|XF86XK_Launch7
block|,
name|Qt
operator|::
name|Key_Launch9
block|,
name|XF86XK_Launch8
block|,
name|Qt
operator|::
name|Key_LaunchA
block|,
name|XF86XK_Launch9
block|,
name|Qt
operator|::
name|Key_LaunchB
block|,
name|XF86XK_LaunchA
block|,
name|Qt
operator|::
name|Key_LaunchC
block|,
name|XF86XK_LaunchB
block|,
name|Qt
operator|::
name|Key_LaunchD
block|,
name|XF86XK_LaunchC
block|,
name|Qt
operator|::
name|Key_LaunchE
block|,
name|XF86XK_LaunchD
block|,
name|Qt
operator|::
name|Key_LaunchF
block|,
name|XF86XK_LaunchE
block|,
name|Qt
operator|::
name|Key_LaunchG
block|,
name|XF86XK_LaunchF
block|,
name|Qt
operator|::
name|Key_LaunchH
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Possible modifier states.
end_comment
begin_decl_stmt
DECL|variable|ModsTbl
specifier|static
specifier|const
name|Qt
operator|::
name|KeyboardModifiers
name|ModsTbl
index|[]
init|=
block|{
name|Qt
operator|::
name|NoModifier
block|,
comment|// 0
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 1
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 2
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 3
name|Qt
operator|::
name|AltModifier
block|,
comment|// 4
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ShiftModifier
block|,
comment|// 5
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 6
name|Qt
operator|::
name|AltModifier
operator||
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|ControlModifier
block|,
comment|// 7
name|Qt
operator|::
name|NoModifier
comment|// Fall-back to raw Key_*
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|translateModifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QXcbKeyboard
operator|::
name|translateModifiers
parameter_list|(
name|int
name|s
parameter_list|)
specifier|const
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s
operator|&
name|XCB_MOD_MASK_SHIFT
condition|)
name|ret
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|XCB_MOD_MASK_CONTROL
condition|)
name|ret
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|rmod_masks
operator|.
name|alt
condition|)
name|ret
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|rmod_masks
operator|.
name|meta
condition|)
name|ret
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|rmod_masks
operator|.
name|altgr
condition|)
name|ret
operator||=
name|Qt
operator|::
name|GroupSwitchModifier
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|readXKBConfig
name|void
name|QXcbKeyboard
operator|::
name|readXKBConfig
parameter_list|(
name|struct
name|xkb_rule_names
modifier|*
name|xkb_names
parameter_list|)
block|{
name|xcb_generic_error_t
modifier|*
name|error
decl_stmt|;
name|xcb_get_property_cookie_t
name|cookie
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|config_reply
decl_stmt|;
name|xcb_connection_t
modifier|*
name|c
init|=
name|xcb_connection
argument_list|()
decl_stmt|;
name|xcb_window_t
name|rootWindow
init|=
name|connection
argument_list|()
operator|->
name|rootWindow
argument_list|()
decl_stmt|;
name|cookie
operator|=
name|xcb_get_property
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|rootWindow
argument_list|,
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|_XKB_RULES_NAMES
argument_list|)
argument_list|,
name|XCB_ATOM_STRING
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|config_reply
operator|=
name|xcb_get_property_reply
argument_list|(
name|c
argument_list|,
name|cookie
argument_list|,
operator|&
name|error
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|config_reply
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: Couldn't interpret the _XKB_RULES_NAMES property"
argument_list|)
expr_stmt|;
return|return;
block|}
name|char
modifier|*
name|xkb_config
init|=
operator|(
name|char
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|config_reply
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|xcb_get_property_value_length
argument_list|(
name|config_reply
argument_list|)
decl_stmt|;
name|char
modifier|*
name|names
index|[
literal|5
index|]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|char
modifier|*
name|p
init|=
name|xkb_config
decl_stmt|,
modifier|*
name|end
init|=
name|p
operator|+
name|length
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// The result from xcb_get_property_value() is not necessarily \0-terminated,
comment|// we need to make sure that too many or missing '\0' symbols are handled safely.
do|do
block|{
name|uint
name|len
init|=
name|qstrnlen
argument_list|(
name|p
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|names
index|[
name|i
operator|++
index|]
operator|=
name|p
expr_stmt|;
name|p
operator|+=
name|len
operator|+
literal|1
expr_stmt|;
name|length
operator|-=
name|len
operator|+
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|<
name|end
operator|||
name|i
operator|<
literal|5
condition|)
do|;
name|xkb_names
operator|->
name|rules
operator|=
name|qstrdup
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|xkb_names
operator|->
name|model
operator|=
name|qstrdup
argument_list|(
name|names
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|xkb_names
operator|->
name|layout
operator|=
name|qstrdup
argument_list|(
name|names
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|xkb_names
operator|->
name|variant
operator|=
name|qstrdup
argument_list|(
name|names
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|xkb_names
operator|->
name|options
operator|=
name|qstrdup
argument_list|(
name|names
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|config_reply
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateKeymap
name|void
name|QXcbKeyboard
operator|::
name|updateKeymap
parameter_list|()
block|{
name|m_config
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|xkb_context
condition|)
block|{
name|xkb_context
operator|=
name|xkb_context_new
argument_list|(
operator|(
name|xkb_context_flags
operator|)
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|xkb_context
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: Failed to create XKB context"
argument_list|)
expr_stmt|;
name|m_config
operator|=
literal|false
expr_stmt|;
return|return;
block|}
block|}
name|struct
name|xkb_rule_names
name|xkb_names
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|readXKBConfig
argument_list|(
operator|&
name|xkb_names
argument_list|)
expr_stmt|;
comment|// Compile a keymap from RMLVO (rules, models, layouts, variants and options) names
if|if
condition|(
name|xkb_keymap
condition|)
name|xkb_keymap_unref
argument_list|(
name|xkb_keymap
argument_list|)
expr_stmt|;
name|xkb_keymap
operator|=
name|xkb_keymap_new_from_names
argument_list|(
name|xkb_context
argument_list|,
operator|&
name|xkb_names
argument_list|,
operator|(
name|xkb_keymap_compile_flags
operator|)
literal|0
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|xkb_names
operator|.
name|rules
expr_stmt|;
operator|delete
index|[]
name|xkb_names
operator|.
name|model
expr_stmt|;
operator|delete
index|[]
name|xkb_names
operator|.
name|layout
expr_stmt|;
operator|delete
index|[]
name|xkb_names
operator|.
name|variant
expr_stmt|;
operator|delete
index|[]
name|xkb_names
operator|.
name|options
expr_stmt|;
if|if
condition|(
operator|!
name|xkb_keymap
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: Failed to compile a keymap"
argument_list|)
expr_stmt|;
name|m_config
operator|=
literal|false
expr_stmt|;
return|return;
block|}
comment|// Create a new keyboard state object for a keymap
name|struct
name|xkb_state
modifier|*
name|new_state
init|=
name|xkb_state_new
argument_list|(
name|xkb_keymap
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|new_state
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: Failed to create a new keyboard state"
argument_list|)
expr_stmt|;
name|m_config
operator|=
literal|false
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|xkb_state
condition|)
block|{
name|xkb_state_unref
argument_list|(
name|xkb_state
argument_list|)
expr_stmt|;
name|xkb_state
operator|=
name|new_state
expr_stmt|;
block|}
else|else
block|{
comment|// get initial state from the X server (and keep it up-to-date at all times)
name|xkb_state
operator|=
name|new_state
expr_stmt|;
name|xcb_xkb_get_state_cookie_t
name|state
decl_stmt|;
name|xcb_xkb_get_state_reply_t
modifier|*
name|init_state
decl_stmt|;
name|xcb_connection_t
modifier|*
name|c
init|=
name|xcb_connection
argument_list|()
decl_stmt|;
name|state
operator|=
name|xcb_xkb_get_state
argument_list|(
name|c
argument_list|,
name|XCB_XKB_ID_USE_CORE_KBD
argument_list|)
expr_stmt|;
name|init_state
operator|=
name|xcb_xkb_get_state_reply
argument_list|(
name|c
argument_list|,
name|state
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|init_state
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: couldn't retrieve an initial keyboard state"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/* The xkb keyboard state is comprised of the state of all keyboard modifiers,            the keyboard group, and the state of the pointer buttons */
name|xkb_state_update_mask
argument_list|(
name|xkb_state
argument_list|,
name|init_state
operator|->
name|baseMods
argument_list|,
name|init_state
operator|->
name|latchedMods
argument_list|,
name|init_state
operator|->
name|lockedMods
argument_list|,
name|init_state
operator|->
name|baseGroup
argument_list|,
name|init_state
operator|->
name|latchedGroup
argument_list|,
name|init_state
operator|->
name|lockedGroup
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|init_state
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateXKBState
name|void
name|QXcbKeyboard
operator|::
name|updateXKBState
parameter_list|(
name|xcb_xkb_state_notify_event_t
modifier|*
name|state
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_config
condition|)
return|return;
if|if
condition|(
name|connection
argument_list|()
operator|->
name|hasXKB
argument_list|()
condition|)
block|{
name|xkb_state_component
name|newState
decl_stmt|;
name|newState
operator|=
name|xkb_state_update_mask
argument_list|(
name|xkb_state
argument_list|,
name|state
operator|->
name|baseMods
argument_list|,
name|state
operator|->
name|latchedMods
argument_list|,
name|state
operator|->
name|lockedMods
argument_list|,
name|state
operator|->
name|baseGroup
argument_list|,
name|state
operator|->
name|latchedGroup
argument_list|,
name|state
operator|->
name|lockedGroup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|newState
operator|&
name|XKB_STATE_LAYOUT_EFFECTIVE
operator|)
operator|==
name|XKB_STATE_LAYOUT_EFFECTIVE
condition|)
block|{
name|qWarning
argument_list|(
literal|"TODO: Support KeyboardLayoutChange on QPA (QTBUG-27681)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|possibleKeys
name|QList
argument_list|<
name|int
argument_list|>
name|QXcbKeyboard
operator|::
name|possibleKeys
parameter_list|(
specifier|const
name|QKeyEvent
modifier|*
name|event
parameter_list|)
specifier|const
block|{
comment|// turn off the modifier bits which doesn't participate in shortcuts
name|Qt
operator|::
name|KeyboardModifiers
name|notNeeded
init|=
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|KeypadModifier
operator||
name|Qt
operator|::
name|GroupSwitchModifier
decl_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|event
operator|->
name|modifiers
argument_list|()
operator|&=
operator|~
name|notNeeded
decl_stmt|;
comment|// create a fresh kb state and test against the relevant modifier combinations
comment|// NOTE: it should be possible to query the keymap directly, once it gets
comment|// supported by libxkbcommon
name|struct
name|xkb_state
modifier|*
name|kb_state
init|=
name|xkb_state_new
argument_list|(
name|xkb_keymap
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|kb_state
condition|)
block|{
name|qWarning
argument_list|(
literal|"QXcbKeyboard: failed to compile xkb keymap"
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
block|}
comment|// get kb state from the master xkb_state and update the temporary kb_state
name|xkb_layout_index_t
name|baseLayout
init|=
name|xkb_state_serialize_layout
argument_list|(
name|xkb_state
argument_list|,
name|XKB_STATE_LAYOUT_DEPRESSED
argument_list|)
decl_stmt|;
name|xkb_layout_index_t
name|latchedLayout
init|=
name|xkb_state_serialize_layout
argument_list|(
name|xkb_state
argument_list|,
name|XKB_STATE_LAYOUT_LATCHED
argument_list|)
decl_stmt|;
name|xkb_layout_index_t
name|lockedLayout
init|=
name|xkb_state_serialize_layout
argument_list|(
name|xkb_state
argument_list|,
name|XKB_STATE_LAYOUT_LOCKED
argument_list|)
decl_stmt|;
name|xkb_mod_index_t
name|latchedMods
init|=
name|xkb_state_serialize_mods
argument_list|(
name|xkb_state
argument_list|,
name|XKB_STATE_MODS_LATCHED
argument_list|)
decl_stmt|;
name|xkb_mod_index_t
name|lockedMods
init|=
name|xkb_state_serialize_mods
argument_list|(
name|xkb_state
argument_list|,
name|XKB_STATE_MODS_LOCKED
argument_list|)
decl_stmt|;
name|xkb_state_update_mask
argument_list|(
name|kb_state
argument_list|,
literal|0
argument_list|,
name|latchedMods
argument_list|,
name|lockedMods
argument_list|,
name|baseLayout
argument_list|,
name|latchedLayout
argument_list|,
name|lockedLayout
argument_list|)
expr_stmt|;
name|xkb_keysym_t
name|baseKeysym
init|=
name|xkb_state_key_get_one_sym
argument_list|(
name|kb_state
argument_list|,
name|event
operator|->
name|nativeScanCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseKeysym
operator|==
name|XKB_KEY_NoSymbol
condition|)
block|{
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
block|}
name|QList
argument_list|<
name|int
argument_list|>
name|result
decl_stmt|;
name|int
name|qtKey
init|=
name|keysymToQtKey
argument_list|(
name|baseKeysym
argument_list|,
name|modifiers
argument_list|,
name|keysymToUnicode
argument_list|(
name|baseKeysym
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|+=
operator|(
name|qtKey
operator|+
name|modifiers
operator|)
expr_stmt|;
comment|// The base key is _always_ valid, of course
name|xkb_mod_index_t
name|shiftMod
init|=
name|xkb_keymap_mod_get_index
argument_list|(
name|xkb_keymap
argument_list|,
literal|"Shift"
argument_list|)
decl_stmt|;
name|xkb_mod_index_t
name|altMod
init|=
name|xkb_keymap_mod_get_index
argument_list|(
name|xkb_keymap
argument_list|,
literal|"Alt"
argument_list|)
decl_stmt|;
name|xkb_mod_index_t
name|controlMod
init|=
name|xkb_keymap_mod_get_index
argument_list|(
name|xkb_keymap
argument_list|,
literal|"Control"
argument_list|)
decl_stmt|;
name|xkb_keysym_t
name|sym
decl_stmt|;
name|xkb_mod_mask_t
name|depressed
init|=
literal|0
decl_stmt|;
comment|//obtain a list of possible shortcuts for the given key event
for|for
control|(
name|uint
name|i
init|=
literal|1
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|ModsTbl
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|ModsTbl
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|Qt
operator|::
name|KeyboardModifiers
name|neededMods
init|=
name|ModsTbl
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|modifiers
operator|&
name|neededMods
operator|)
operator|==
name|neededMods
condition|)
block|{
if|if
condition|(
name|neededMods
operator|&
name|Qt
operator|::
name|AltModifier
condition|)
name|depressed
operator||=
operator|(
literal|1
operator|<<
name|altMod
operator|)
expr_stmt|;
if|if
condition|(
name|neededMods
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|depressed
operator||=
operator|(
literal|1
operator|<<
name|shiftMod
operator|)
expr_stmt|;
if|if
condition|(
name|neededMods
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
name|depressed
operator||=
operator|(
literal|1
operator|<<
name|controlMod
operator|)
expr_stmt|;
comment|// update a keyboard state from a set of explicit masks
name|xkb_state_update_mask
argument_list|(
name|kb_state
argument_list|,
name|depressed
argument_list|,
name|latchedMods
argument_list|,
name|lockedMods
argument_list|,
name|baseLayout
argument_list|,
name|latchedLayout
argument_list|,
name|lockedLayout
argument_list|)
expr_stmt|;
name|sym
operator|=
name|xkb_state_key_get_one_sym
argument_list|(
name|kb_state
argument_list|,
name|event
operator|->
name|nativeScanCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sym
operator|==
name|XKB_KEY_NoSymbol
operator|||
name|sym
operator|==
name|baseKeysym
condition|)
continue|continue;
name|Qt
operator|::
name|KeyboardModifiers
name|mods
init|=
name|modifiers
operator|&
operator|~
name|neededMods
decl_stmt|;
name|qtKey
operator|=
name|keysymToQtKey
argument_list|(
name|sym
argument_list|,
name|mods
argument_list|,
name|keysymToUnicode
argument_list|(
name|sym
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|+=
operator|(
name|qtKey
operator|+
name|mods
operator|)
expr_stmt|;
name|depressed
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|xkb_state_unref
argument_list|(
name|kb_state
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|keysymToQtKey
name|int
name|QXcbKeyboard
operator|::
name|keysymToQtKey
parameter_list|(
name|xcb_keysym_t
name|key
parameter_list|)
specifier|const
block|{
name|int
name|code
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|KeyTbl
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|key
operator|==
name|KeyTbl
index|[
name|i
index|]
condition|)
block|{
name|code
operator|=
operator|(
name|int
operator|)
name|KeyTbl
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
break|break;
block|}
name|i
operator|+=
literal|2
expr_stmt|;
block|}
return|return
name|code
return|;
block|}
end_function
begin_function
DECL|function|keysymToQtKey
name|int
name|QXcbKeyboard
operator|::
name|keysymToQtKey
parameter_list|(
name|xcb_keysym_t
name|keysym
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
modifier|&
name|modifiers
parameter_list|,
name|QString
name|text
parameter_list|)
specifier|const
block|{
name|int
name|code
init|=
literal|0
decl_stmt|;
name|QTextCodec
modifier|*
name|systemCodec
init|=
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
decl_stmt|;
comment|// Commentary in X11/keysymdef says that X codes match ASCII, so it
comment|// is safe to use the locale functions to process X codes in ISO8859-1.
comment|// This is mainly for compatibility - applications should not use the
comment|// Qt keycodes between 128 and 255 (extended ACSII codes), but should
comment|// rather use the QKeyEvent::text().
if|if
condition|(
name|keysym
operator|<
literal|128
operator|||
operator|(
name|keysym
operator|<
literal|256
operator|&&
name|systemCodec
operator|->
name|mibEnum
argument_list|()
operator|==
literal|4
operator|)
condition|)
block|{
comment|// upper-case key, if known
name|code
operator|=
name|isprint
argument_list|(
operator|(
name|int
operator|)
name|keysym
argument_list|)
condition|?
name|toupper
argument_list|(
operator|(
name|int
operator|)
name|keysym
argument_list|)
else|:
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keysym
operator|>=
name|XK_F1
operator|&&
name|keysym
operator|<=
name|XK_F35
condition|)
block|{
comment|// function keys
name|code
operator|=
name|Qt
operator|::
name|Key_F1
operator|+
operator|(
operator|(
name|int
operator|)
name|keysym
operator|-
name|XK_F1
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keysym
operator|>=
name|XK_KP_Space
operator|&&
name|keysym
operator|<=
name|XK_KP_9
condition|)
block|{
if|if
condition|(
name|keysym
operator|>=
name|XK_KP_0
condition|)
block|{
comment|// numeric keypad keys
name|code
operator|=
name|Qt
operator|::
name|Key_0
operator|+
operator|(
operator|(
name|int
operator|)
name|keysym
operator|-
name|XK_KP_0
operator|)
expr_stmt|;
block|}
else|else
block|{
name|code
operator|=
name|keysymToQtKey
argument_list|(
name|keysym
argument_list|)
expr_stmt|;
block|}
name|modifiers
operator||=
name|Qt
operator|::
name|KeypadModifier
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|unicode
argument_list|()
operator|>
literal|0x1f
operator|&&
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|unicode
argument_list|()
operator|!=
literal|0x7f
operator|&&
operator|!
operator|(
name|keysym
operator|>=
name|XK_dead_grave
operator|&&
name|keysym
operator|<=
name|XK_dead_currency
operator|)
condition|)
block|{
name|code
operator|=
name|text
operator|.
name|unicode
argument_list|()
operator|->
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// any other keys
name|code
operator|=
name|keysymToQtKey
argument_list|(
name|keysym
argument_list|)
expr_stmt|;
block|}
return|return
name|code
return|;
block|}
end_function
begin_constructor
DECL|function|QXcbKeyboard
name|QXcbKeyboard
operator|::
name|QXcbKeyboard
parameter_list|(
name|QXcbConnection
modifier|*
name|connection
parameter_list|)
member_init_list|:
name|QXcbObject
argument_list|(
name|connection
argument_list|)
member_init_list|,
name|m_autorepeat_code
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|xkb_context
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|xkb_keymap
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|xkb_state
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|core_device_id
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|connection
operator|->
name|hasXKB
argument_list|()
condition|)
block|{
name|updateKeymap
argument_list|()
expr_stmt|;
name|updateVModMapping
argument_list|()
expr_stmt|;
name|updateVModToRModMapping
argument_list|()
expr_stmt|;
comment|// get the core keyboard id
name|xcb_xkb_get_device_info_cookie_t
name|device_id_cookie
decl_stmt|;
name|xcb_xkb_get_device_info_reply_t
modifier|*
name|device_id
decl_stmt|;
name|device_id_cookie
operator|=
name|xcb_xkb_get_device_info
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_XKB_ID_USE_CORE_KBD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|device_id
operator|=
name|xcb_xkb_get_device_info_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|device_id_cookie
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|device_id
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: couldn't get core keyboard device info"
argument_list|)
expr_stmt|;
return|return;
block|}
name|core_device_id
operator|=
name|device_id
operator|->
name|deviceID
expr_stmt|;
name|free
argument_list|(
name|device_id
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QXcbKeyboard
name|QXcbKeyboard
operator|::
name|~
name|QXcbKeyboard
parameter_list|()
block|{
if|if
condition|(
name|xkb_state
condition|)
name|xkb_state_unref
argument_list|(
name|xkb_state
argument_list|)
expr_stmt|;
if|if
condition|(
name|xkb_keymap
condition|)
name|xkb_keymap_unref
argument_list|(
name|xkb_keymap
argument_list|)
expr_stmt|;
if|if
condition|(
name|xkb_context
condition|)
name|xkb_context_unref
argument_list|(
name|xkb_context
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|updateVModMapping
name|void
name|QXcbKeyboard
operator|::
name|updateVModMapping
parameter_list|()
block|{
name|xcb_xkb_get_names_cookie_t
name|names_cookie
decl_stmt|;
name|xcb_xkb_get_names_reply_t
modifier|*
name|name_reply
decl_stmt|;
name|xcb_xkb_get_names_value_list_t
name|names_list
decl_stmt|;
name|memset
argument_list|(
operator|&
name|vmod_masks
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|vmod_masks
argument_list|)
argument_list|)
expr_stmt|;
name|names_cookie
operator|=
name|xcb_xkb_get_names
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_XKB_ID_USE_CORE_KBD
argument_list|,
name|XCB_XKB_NAME_DETAIL_VIRTUAL_MOD_NAMES
argument_list|)
expr_stmt|;
name|name_reply
operator|=
name|xcb_xkb_get_names_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|names_cookie
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|name_reply
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: failed to retrieve the virtual modifier names from XKB"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|void
modifier|*
name|buffer
init|=
name|xcb_xkb_get_names_value_list
argument_list|(
name|name_reply
argument_list|)
decl_stmt|;
name|xcb_xkb_get_names_value_list_unpack
argument_list|(
name|buffer
argument_list|,
name|name_reply
operator|->
name|nTypes
argument_list|,
name|name_reply
operator|->
name|indicators
argument_list|,
name|name_reply
operator|->
name|virtualMods
argument_list|,
name|name_reply
operator|->
name|groupNames
argument_list|,
name|name_reply
operator|->
name|nKeys
argument_list|,
name|name_reply
operator|->
name|nKeyAliases
argument_list|,
name|name_reply
operator|->
name|nRadioGroups
argument_list|,
name|name_reply
operator|->
name|which
argument_list|,
operator|&
name|names_list
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|uint
name|vmod_mask
decl_stmt|,
name|bit
decl_stmt|;
name|char
modifier|*
name|vmod_name
decl_stmt|;
name|vmod_mask
operator|=
name|name_reply
operator|->
name|virtualMods
expr_stmt|;
comment|// find the virtual modifiers for which names are defined.
for|for
control|(
name|bit
operator|=
literal|1
init|;
name|vmod_mask
condition|;
name|bit
operator|<<=
literal|1
control|)
block|{
name|vmod_name
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|vmod_mask
operator|&
name|bit
operator|)
condition|)
continue|continue;
name|vmod_mask
operator|&=
operator|~
name|bit
expr_stmt|;
comment|// virtualModNames - the list of virtual modifier atoms beginning with the lowest-numbered
comment|// virtual modifier for which a name is defined and proceeding to the highest.
name|QByteArray
name|atomName
init|=
name|connection
argument_list|()
operator|->
name|atomName
argument_list|(
name|names_list
operator|.
name|virtualModNames
index|[
name|count
index|]
argument_list|)
decl_stmt|;
name|vmod_name
operator|=
name|atomName
operator|.
name|data
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|vmod_name
condition|)
continue|continue;
comment|// similarly we could retrieve NumLock, Super, Hyper modifiers if needed.
if|if
condition|(
name|qstrcmp
argument_list|(
name|vmod_name
argument_list|,
literal|"Alt"
argument_list|)
operator|==
literal|0
condition|)
name|vmod_masks
operator|.
name|alt
operator|=
name|bit
expr_stmt|;
elseif|else
if|if
condition|(
name|qstrcmp
argument_list|(
name|vmod_name
argument_list|,
literal|"Meta"
argument_list|)
operator|==
literal|0
condition|)
name|vmod_masks
operator|.
name|meta
operator|=
name|bit
expr_stmt|;
elseif|else
if|if
condition|(
name|qstrcmp
argument_list|(
name|vmod_name
argument_list|,
literal|"AltGr"
argument_list|)
operator|==
literal|0
condition|)
name|vmod_masks
operator|.
name|altgr
operator|=
name|bit
expr_stmt|;
block|}
name|free
argument_list|(
name|name_reply
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateVModToRModMapping
name|void
name|QXcbKeyboard
operator|::
name|updateVModToRModMapping
parameter_list|()
block|{
name|xcb_xkb_get_map_cookie_t
name|map_cookie
decl_stmt|;
name|xcb_xkb_get_map_reply_t
modifier|*
name|map_reply
decl_stmt|;
name|xcb_xkb_get_map_map_t
name|map
decl_stmt|;
name|memset
argument_list|(
operator|&
name|rmod_masks
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|rmod_masks
argument_list|)
argument_list|)
expr_stmt|;
name|map_cookie
operator|=
name|xcb_xkb_get_map
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_XKB_ID_USE_CORE_KBD
argument_list|,
name|XCB_XKB_MAP_PART_VIRTUAL_MODS
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|map_reply
operator|=
name|xcb_xkb_get_map_reply
argument_list|(
name|xcb_connection
argument_list|()
argument_list|,
name|map_cookie
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|map_reply
condition|)
block|{
name|qWarning
argument_list|(
literal|"Qt: failed to retrieve the virtual modifier map from XKB"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|void
modifier|*
name|buffer
init|=
name|xcb_xkb_get_map_map
argument_list|(
name|map_reply
argument_list|)
decl_stmt|;
name|xcb_xkb_get_map_map_unpack
argument_list|(
name|buffer
argument_list|,
name|map_reply
operator|->
name|nTypes
argument_list|,
name|map_reply
operator|->
name|nKeySyms
argument_list|,
name|map_reply
operator|->
name|nKeyActions
argument_list|,
name|map_reply
operator|->
name|totalActions
argument_list|,
name|map_reply
operator|->
name|totalKeyBehaviors
argument_list|,
name|map_reply
operator|->
name|nVModMapKeys
argument_list|,
name|map_reply
operator|->
name|totalKeyExplicit
argument_list|,
name|map_reply
operator|->
name|totalModMapKeys
argument_list|,
name|map_reply
operator|->
name|totalVModMapKeys
argument_list|,
name|map_reply
operator|->
name|present
argument_list|,
operator|&
name|map
argument_list|)
expr_stmt|;
name|uint
name|vmod_mask
decl_stmt|,
name|bit
decl_stmt|;
comment|// the virtual modifiers mask for which a set of corresponding
comment|// real modifiers is to be returned
name|vmod_mask
operator|=
name|map_reply
operator|->
name|virtualMods
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|bit
operator|=
literal|1
init|;
name|vmod_mask
condition|;
name|bit
operator|<<=
literal|1
control|)
block|{
name|uint
name|modmap
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|vmod_mask
operator|&
name|bit
operator|)
condition|)
continue|continue;
name|vmod_mask
operator|&=
operator|~
name|bit
expr_stmt|;
comment|// real modifier bindings for the specified virtual modifiers
name|modmap
operator|=
name|map
operator|.
name|vmods_rtrn
index|[
name|count
index|]
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|vmod_masks
operator|.
name|alt
operator|==
name|bit
condition|)
name|rmod_masks
operator|.
name|alt
operator|=
name|modmap
expr_stmt|;
elseif|else
if|if
condition|(
name|vmod_masks
operator|.
name|meta
operator|==
name|bit
condition|)
name|rmod_masks
operator|.
name|meta
operator|=
name|modmap
expr_stmt|;
elseif|else
if|if
condition|(
name|vmod_masks
operator|.
name|altgr
operator|==
name|bit
condition|)
name|rmod_masks
operator|.
name|altgr
operator|=
name|modmap
expr_stmt|;
block|}
if|#
directive|if
literal|0
block|qDebug()<< "alt: "<< rmod_masks.alt;     qDebug()<< "meta: "<< rmod_masks.meta;     qDebug()<< "altgr: "<< rmod_masks.altgr;
endif|#
directive|endif
name|free
argument_list|(
name|map_reply
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|KeyChecker
class|class
name|KeyChecker
block|{
public|public:
DECL|function|KeyChecker
name|KeyChecker
parameter_list|(
name|xcb_window_t
name|window
parameter_list|,
name|xcb_keycode_t
name|code
parameter_list|,
name|xcb_timestamp_t
name|time
parameter_list|)
member_init_list|:
name|m_window
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_code
argument_list|(
name|code
argument_list|)
member_init_list|,
name|m_time
argument_list|(
name|time
argument_list|)
member_init_list|,
name|m_error
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_release
argument_list|(
literal|true
argument_list|)
block|{     }
DECL|function|checkEvent
name|bool
name|checkEvent
parameter_list|(
name|xcb_generic_event_t
modifier|*
name|ev
parameter_list|)
block|{
if|if
condition|(
name|m_error
operator|||
operator|!
name|ev
condition|)
return|return
literal|false
return|;
name|int
name|type
init|=
name|ev
operator|->
name|response_type
operator|&
operator|~
literal|0x80
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|XCB_KEY_PRESS
operator|&&
name|type
operator|!=
name|XCB_KEY_RELEASE
condition|)
return|return
literal|false
return|;
name|xcb_key_press_event_t
modifier|*
name|event
init|=
operator|(
name|xcb_key_press_event_t
operator|*
operator|)
name|ev
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|event
operator|!=
name|m_window
operator|||
name|event
operator|->
name|detail
operator|!=
name|m_code
condition|)
block|{
name|m_error
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|type
operator|==
name|XCB_KEY_PRESS
condition|)
block|{
name|m_error
operator|=
operator|!
name|m_release
operator|||
name|event
operator|->
name|time
operator|-
name|m_time
operator|>
literal|10
expr_stmt|;
return|return
operator|!
name|m_error
return|;
block|}
if|if
condition|(
name|m_release
condition|)
block|{
name|m_error
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|m_release
operator|=
literal|true
expr_stmt|;
name|m_time
operator|=
name|event
operator|->
name|time
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|function|release
name|bool
name|release
parameter_list|()
specifier|const
block|{
return|return
name|m_release
return|;
block|}
DECL|function|time
name|xcb_timestamp_t
name|time
parameter_list|()
specifier|const
block|{
return|return
name|m_time
return|;
block|}
private|private:
DECL|member|m_window
name|xcb_window_t
name|m_window
decl_stmt|;
DECL|member|m_code
name|xcb_keycode_t
name|m_code
decl_stmt|;
DECL|member|m_time
name|xcb_timestamp_t
name|m_time
decl_stmt|;
DECL|member|m_error
name|bool
name|m_error
decl_stmt|;
DECL|member|m_release
name|bool
name|m_release
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|handleKeyEvent
name|void
name|QXcbKeyboard
operator|::
name|handleKeyEvent
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|xcb_keycode_t
name|code
parameter_list|,
name|quint16
name|state
parameter_list|,
name|xcb_timestamp_t
name|time
parameter_list|)
block|{
name|Q_XCB_NOOP
argument_list|(
name|connection
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_config
condition|)
return|return;
name|xcb_keysym_t
name|sym
init|=
name|xkb_state_key_get_one_sym
argument_list|(
name|xkb_state
argument_list|,
name|code
argument_list|)
decl_stmt|;
name|QPlatformInputContext
modifier|*
name|inputContext
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|inputContext
argument_list|()
decl_stmt|;
name|QMetaMethod
name|method
decl_stmt|;
if|if
condition|(
name|inputContext
condition|)
block|{
name|int
name|methodIndex
init|=
name|inputContext
operator|->
name|metaObject
argument_list|()
operator|->
name|indexOfMethod
argument_list|(
literal|"x11FilterEvent(uint,uint,uint,bool)"
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodIndex
operator|!=
operator|-
literal|1
condition|)
name|method
operator|=
name|inputContext
operator|->
name|metaObject
argument_list|()
operator|->
name|method
argument_list|(
name|methodIndex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|retval
init|=
literal|false
decl_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|inputContext
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|bool
argument_list|,
name|retval
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|uint
argument_list|,
name|sym
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|uint
argument_list|,
name|code
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|uint
argument_list|,
name|state
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|bool
argument_list|,
name|type
operator|==
name|QEvent
operator|::
name|KeyPress
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|retval
condition|)
return|return;
block|}
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
init|=
name|translateModifiers
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QString
name|string
init|=
name|keysymToUnicode
argument_list|(
name|sym
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|string
operator|.
name|size
argument_list|()
decl_stmt|;
name|string
operator|.
name|truncate
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|int
name|qtcode
init|=
name|keysymToQtKey
argument_list|(
name|sym
argument_list|,
name|modifiers
argument_list|,
name|string
argument_list|)
decl_stmt|;
name|bool
name|isAutoRepeat
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|KeyPress
condition|)
block|{
if|if
condition|(
name|m_autorepeat_code
operator|==
name|code
condition|)
block|{
name|isAutoRepeat
operator|=
literal|true
expr_stmt|;
name|m_autorepeat_code
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// look ahead for auto-repeat
name|KeyChecker
name|checker
argument_list|(
operator|(
operator|(
name|QXcbWindow
operator|*
operator|)
name|window
operator|->
name|handle
argument_list|()
operator|)
operator|->
name|xcb_window
argument_list|()
argument_list|,
name|code
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|xcb_generic_event_t
modifier|*
name|event
init|=
name|connection
argument_list|()
operator|->
name|checkEvent
argument_list|(
name|checker
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
condition|)
block|{
name|isAutoRepeat
operator|=
literal|true
expr_stmt|;
name|free
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|m_autorepeat_code
operator|=
name|isAutoRepeat
condition|?
name|code
else|:
literal|0
expr_stmt|;
block|}
name|bool
name|filtered
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|inputContext
condition|)
block|{
name|QKeyEvent
name|event
argument_list|(
name|type
argument_list|,
name|qtcode
argument_list|,
name|modifiers
argument_list|,
name|code
argument_list|,
name|sym
argument_list|,
name|state
argument_list|,
name|string
argument_list|,
name|isAutoRepeat
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|event
operator|.
name|setTimestamp
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|filtered
operator|=
name|inputContext
operator|->
name|filterEvent
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|filtered
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|QEvent
operator|::
name|KeyPress
operator|&&
name|qtcode
operator|==
name|Qt
operator|::
name|Key_Menu
condition|)
block|{
specifier|const
name|QPoint
name|globalPos
init|=
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
operator|->
name|cursor
argument_list|()
operator|->
name|pos
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|pos
init|=
name|window
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleContextMenuEvent
argument_list|(
name|window
argument_list|,
literal|false
argument_list|,
name|pos
argument_list|,
name|globalPos
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|window
argument_list|,
name|time
argument_list|,
name|type
argument_list|,
name|qtcode
argument_list|,
name|modifiers
argument_list|,
name|code
argument_list|,
name|sym
argument_list|,
name|state
argument_list|,
name|string
argument_list|,
name|isAutoRepeat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAutoRepeat
operator|&&
name|type
operator|==
name|QEvent
operator|::
name|KeyRelease
condition|)
block|{
comment|// since we removed it from the event queue using checkEvent we need to send the key press here
name|filtered
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|method
operator|.
name|invoke
argument_list|(
name|inputContext
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|bool
argument_list|,
name|filtered
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|uint
argument_list|,
name|sym
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|uint
argument_list|,
name|code
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|uint
argument_list|,
name|state
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|bool
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|filtered
operator|&&
name|inputContext
condition|)
block|{
name|QKeyEvent
name|event
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|qtcode
argument_list|,
name|modifiers
argument_list|,
name|code
argument_list|,
name|sym
argument_list|,
name|state
argument_list|,
name|string
argument_list|,
name|isAutoRepeat
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|event
operator|.
name|setTimestamp
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|filtered
operator|=
name|inputContext
operator|->
name|filterEvent
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|filtered
condition|)
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|window
argument_list|,
name|time
argument_list|,
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|qtcode
argument_list|,
name|modifiers
argument_list|,
name|code
argument_list|,
name|sym
argument_list|,
name|state
argument_list|,
name|string
argument_list|,
name|isAutoRepeat
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|keysymToUnicode
name|QString
name|QXcbKeyboard
operator|::
name|keysymToUnicode
parameter_list|(
name|xcb_keysym_t
name|sym
parameter_list|)
specifier|const
block|{
name|QByteArray
name|chars
decl_stmt|;
name|int
name|bytes
decl_stmt|;
name|chars
operator|.
name|resize
argument_list|(
literal|7
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|bytes
operator|=
name|xkb_keysym_to_utf8
argument_list|(
name|sym
argument_list|,
name|chars
operator|.
name|data
argument_list|()
argument_list|,
name|chars
operator|.
name|size
argument_list|()
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
name|qWarning
argument_list|(
literal|"QXcbKeyboard::handleKeyEvent - buffer too small"
argument_list|)
expr_stmt|;
name|chars
operator|.
name|resize
argument_list|(
name|bytes
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|chars
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleKeyPressEvent
name|void
name|QXcbKeyboard
operator|::
name|handleKeyPressEvent
parameter_list|(
name|QXcbWindowEventListener
modifier|*
name|eventListener
parameter_list|,
specifier|const
name|xcb_key_press_event_t
modifier|*
name|event
parameter_list|)
block|{
name|QXcbWindow
modifier|*
name|window
init|=
name|eventListener
operator|->
name|toWindow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
return|return;
name|window
operator|->
name|updateNetWmUserTime
argument_list|(
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
name|handleKeyEvent
argument_list|(
name|window
operator|->
name|window
argument_list|()
argument_list|,
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|event
operator|->
name|detail
argument_list|,
name|event
operator|->
name|state
argument_list|,
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleKeyReleaseEvent
name|void
name|QXcbKeyboard
operator|::
name|handleKeyReleaseEvent
parameter_list|(
name|QXcbWindowEventListener
modifier|*
name|eventListener
parameter_list|,
specifier|const
name|xcb_key_release_event_t
modifier|*
name|event
parameter_list|)
block|{
name|QXcbWindow
modifier|*
name|window
init|=
name|eventListener
operator|->
name|toWindow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
return|return;
name|handleKeyEvent
argument_list|(
name|window
operator|->
name|window
argument_list|()
argument_list|,
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|event
operator|->
name|detail
argument_list|,
name|event
operator|->
name|state
argument_list|,
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleMappingNotifyEvent
name|void
name|QXcbKeyboard
operator|::
name|handleMappingNotifyEvent
parameter_list|(
specifier|const
name|xcb_xkb_map_notify_event_t
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|connection
argument_list|()
operator|->
name|hasXKB
argument_list|()
condition|)
block|{
name|updateKeymap
argument_list|()
expr_stmt|;
name|updateVModMapping
argument_list|()
expr_stmt|;
name|updateVModToRModMapping
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
