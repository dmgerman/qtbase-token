begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qxcbdrag.h"
end_include
begin_include
include|#
directive|include
file|<xcb/xcb.h>
end_include
begin_include
include|#
directive|include
file|"qxcbconnection.h"
end_include
begin_include
include|#
directive|include
file|"qxcbclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qxcbmime.h"
end_include
begin_include
include|#
directive|include
file|"qxcbwindow.h"
end_include
begin_include
include|#
directive|include
file|"qxcbscreen.h"
end_include
begin_include
include|#
directive|include
file|"qwindow.h"
end_include
begin_include
include|#
directive|include
file|<private/qdnd_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<qrect.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|//#define DND_DEBUG
ifdef|#
directive|ifdef
name|DND_DEBUG
DECL|macro|DEBUG
define|#
directive|define
name|DEBUG
value|qDebug
else|#
directive|else
define|#
directive|define
name|DEBUG
value|if(0) qDebug
endif|#
directive|endif
ifdef|#
directive|ifdef
name|DND_DEBUG
DECL|macro|DNDDEBUG
define|#
directive|define
name|DNDDEBUG
value|qDebug()
else|#
directive|else
define|#
directive|define
name|DNDDEBUG
value|if(0) qDebug()
endif|#
directive|endif
DECL|variable|xdnd_version
specifier|const
name|int
name|xdnd_version
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|xcb_window
specifier|static
specifier|inline
name|xcb_window_t
name|xcb_window
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|w
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|xcb_window
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|xdndProxy
specifier|static
name|xcb_window_t
name|xdndProxy
parameter_list|(
name|QXcbConnection
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|w
parameter_list|)
block|{
name|xcb_window_t
name|proxy
init|=
name|XCB_NONE
decl_stmt|;
name|xcb_get_property_cookie_t
name|cookie
init|=
name|Q_XCB_CALL2
argument_list|(
name|xcb_get_property
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|w
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndProxy
argument_list|)
argument_list|,
name|QXcbAtom
operator|::
name|XA_WINDOW
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|&&
name|reply
operator|->
name|type
operator|==
name|QXcbAtom
operator|::
name|XA_WINDOW
condition|)
name|proxy
operator|=
operator|*
operator|(
operator|(
name|xcb_window_t
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
operator|)
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
operator|==
name|XCB_NONE
condition|)
return|return
name|proxy
return|;
comment|// exists and is real?
name|cookie
operator|=
name|Q_XCB_CALL2
argument_list|(
name|xcb_get_property
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|proxy
argument_list|,
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndProxy
argument_list|)
argument_list|,
name|QXcbAtom
operator|::
name|XA_WINDOW
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|reply
operator|=
name|xcb_get_property_reply
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|reply
operator|&&
name|reply
operator|->
name|type
operator|==
name|QXcbAtom
operator|::
name|XA_WINDOW
condition|)
block|{
name|xcb_window_t
name|p
init|=
operator|*
operator|(
operator|(
name|xcb_window_t
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
name|p
condition|)
name|proxy
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|proxy
operator|=
literal|0
expr_stmt|;
block|}
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
return|return
name|proxy
return|;
block|}
end_function
begin_class
DECL|class|QDropData
class|class
name|QDropData
super|:
specifier|public
name|QXcbMime
block|{
public|public:
name|QDropData
parameter_list|(
name|QXcbDrag
modifier|*
name|d
parameter_list|)
constructor_decl|;
name|~
name|QDropData
parameter_list|()
destructor_decl|;
protected|protected:
name|bool
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|)
specifier|const
function_decl|;
name|QStringList
name|formats_sys
parameter_list|()
specifier|const
function_decl|;
name|QVariant
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
function_decl|;
name|QVariant
name|xdndObtainData
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|format
parameter_list|,
name|QVariant
operator|::
name|Type
name|requestedType
parameter_list|)
specifier|const
function_decl|;
DECL|member|drag
name|QXcbDrag
modifier|*
name|drag
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QXcbDrag
name|QXcbDrag
operator|::
name|QXcbDrag
parameter_list|(
name|QXcbConnection
modifier|*
name|c
parameter_list|)
block|{
name|m_connection
operator|=
name|c
expr_stmt|;
name|dropData
operator|=
operator|new
name|QDropData
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|heartbeat
operator|=
operator|-
literal|1
expr_stmt|;
name|transaction_expiry_timer
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QXcbDrag
name|QXcbDrag
operator|::
name|~
name|QXcbDrag
parameter_list|()
block|{
operator|delete
name|dropData
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|void
name|QXcbDrag
operator|::
name|init
parameter_list|()
block|{
name|currentWindow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|xdnd_dragsource
operator|=
name|XCB_NONE
expr_stmt|;
name|last_target_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|waiting_for_status
operator|=
literal|false
expr_stmt|;
name|current_target
operator|=
name|XCB_NONE
expr_stmt|;
name|current_proxy_target
operator|=
name|XCB_NONE
expr_stmt|;
name|xdnd_dragging
operator|=
literal|false
expr_stmt|;
name|source_time
operator|=
name|XCB_CURRENT_TIME
expr_stmt|;
name|target_time
operator|=
name|XCB_CURRENT_TIME
expr_stmt|;
name|current_screen
operator|=
literal|0
expr_stmt|;
name|drag_types
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|platformDropData
name|QMimeData
modifier|*
name|QXcbDrag
operator|::
name|platformDropData
parameter_list|()
block|{
return|return
name|dropData
return|;
block|}
end_function
begin_function
DECL|function|startDrag
name|void
name|QXcbDrag
operator|::
name|startDrag
parameter_list|()
block|{
comment|// ####
comment|//    if (object) {
comment|//        // the last drag and drop operation hasn't finished, so we are going to wait
comment|//        // for one second to see if it does... if the finish message comes after this,
comment|//        // then we could still have problems, but this is highly unlikely
comment|//        QGuiApplication::flush();
comment|//        QElapsedTimer timer;
comment|//        timer.start();
comment|//        do {
comment|//            XEvent event;
comment|//            if (XCheckTypedEvent(X11->display, ClientMessage,&event))
comment|//                qApp->x11ProcessEvent(&event);
comment|//            // sleep 50 ms, so we don't use up CPU cycles all the time.
comment|//            struct timeval usleep_tv;
comment|//            usleep_tv.tv_sec = 0;
comment|//            usleep_tv.tv_usec = 50000;
comment|//            select(0, 0, 0, 0,&usleep_tv);
comment|//        } while (object&& timer.hasExpired(1000));
comment|//    }
name|init
argument_list|()
expr_stmt|;
name|heartbeat
operator|=
name|startTimer
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|xdnd_dragging
operator|=
literal|true
expr_stmt|;
name|xcb_set_selection_owner
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|connection
argument_list|()
operator|->
name|clipboard
argument_list|()
operator|->
name|owner
argument_list|()
argument_list|,
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndSelection
argument_list|)
argument_list|,
name|connection
argument_list|()
operator|->
name|time
argument_list|()
argument_list|)
expr_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QStringList
name|fmts
init|=
name|QXcbMime
operator|::
name|formatsHelper
argument_list|(
name|manager
operator|->
name|dropData
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fmts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|xcb_atom_t
argument_list|>
name|atoms
init|=
name|QXcbMime
operator|::
name|mimeAtomsForFormat
argument_list|(
name|connection
argument_list|()
argument_list|,
name|fmts
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|atoms
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|!
name|drag_types
operator|.
name|contains
argument_list|(
name|atoms
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
name|drag_types
operator|.
name|append
argument_list|(
name|atoms
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|drag_types
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
name|xcb_change_property
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|connection
argument_list|()
operator|->
name|clipboard
argument_list|()
operator|->
name|owner
argument_list|()
argument_list|,
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndTypelist
argument_list|)
argument_list|,
name|QXcbAtom
operator|::
name|XA_ATOM
argument_list|,
literal|32
argument_list|,
name|drag_types
operator|.
name|size
argument_list|()
argument_list|,
operator|(
specifier|const
name|void
operator|*
operator|)
name|drag_types
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QMouseEvent
name|me
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|,
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|QGuiApplication
operator|::
name|mouseButtons
argument_list|()
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|move
argument_list|(
operator|&
name|me
argument_list|)
expr_stmt|;
comment|//    if (!QWidget::mouseGrabber())
comment|//        manager->shapedPixmapWindow->grabMouse();
block|}
end_function
begin_function
DECL|function|endDrag
name|void
name|QXcbDrag
operator|::
name|endDrag
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|heartbeat
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|killTimer
argument_list|(
name|heartbeat
argument_list|)
expr_stmt|;
name|heartbeat
operator|=
operator|-
literal|1
expr_stmt|;
name|xdnd_dragging
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
specifier|static
name|xcb_translate_coordinates_reply_t
modifier|*
DECL|function|translateCoordinates
name|translateCoordinates
parameter_list|(
name|QXcbConnection
modifier|*
name|c
parameter_list|,
name|xcb_window_t
name|from
parameter_list|,
name|xcb_window_t
name|to
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|xcb_translate_coordinates_cookie_t
name|cookie
init|=
name|xcb_translate_coordinates
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
return|return
name|xcb_translate_coordinates_reply
argument_list|(
name|c
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|move
name|void
name|QXcbDrag
operator|::
name|move
parameter_list|(
specifier|const
name|QMouseEvent
modifier|*
name|me
parameter_list|)
block|{
name|DEBUG
argument_list|()
operator|<<
literal|"QDragManager::move enter"
expr_stmt|;
comment|// ###
name|QPoint
name|globalPos
init|=
name|me
operator|->
name|globalPos
argument_list|()
decl_stmt|;
if|if
condition|(
name|source_sameanswer
operator|.
name|contains
argument_list|(
name|globalPos
argument_list|)
operator|&&
name|source_sameanswer
operator|.
name|isValid
argument_list|()
condition|)
return|return;
specifier|const
name|QList
argument_list|<
name|QXcbScreen
modifier|*
argument_list|>
modifier|&
name|screens
init|=
name|connection
argument_list|()
operator|->
name|screens
argument_list|()
decl_stmt|;
name|QXcbScreen
modifier|*
name|screen
init|=
name|screens
operator|.
name|at
argument_list|(
name|connection
argument_list|()
operator|->
name|primaryScreen
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|screens
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|globalPos
argument_list|)
condition|)
block|{
name|screen
operator|=
name|screens
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|screen
operator|!=
name|current_screen
condition|)
block|{
comment|// ### need to recreate the shaped pixmap window?
comment|//    int screen = QCursor::x11Screen();
comment|//    if ((qt_xdnd_current_screen == -1&& screen != X11->defaultScreen) || (screen != qt_xdnd_current_screen)) {
comment|//        // recreate the pixmap on the new screen...
comment|//        delete xdnd_data.deco;
comment|//        QWidget* parent = object->source()->window()->x11Info().screen() == screen
comment|//            ? object->source()->window() : QApplication::desktop()->screen(screen);
comment|//        xdnd_data.deco = new QShapedPixmapWidget(parent);
comment|//        if (!QWidget::mouseGrabber()) {
comment|//            updatePixmap();
comment|//            xdnd_data.deco->grabMouse();
comment|//        }
comment|//    }
comment|//    xdnd_data.deco->move(QCursor::pos() - xdnd_data.deco->pm_hot);
name|current_screen
operator|=
name|screen
expr_stmt|;
block|}
comment|//    qt_xdnd_current_screen = screen;
name|xcb_window_t
name|rootwin
init|=
name|current_screen
operator|->
name|root
argument_list|()
decl_stmt|;
name|xcb_translate_coordinates_reply_t
modifier|*
name|translate
init|=
operator|::
name|translateCoordinates
argument_list|(
name|connection
argument_list|()
argument_list|,
name|rootwin
argument_list|,
name|rootwin
argument_list|,
name|globalPos
operator|.
name|x
argument_list|()
argument_list|,
name|globalPos
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|translate
condition|)
return|return;
name|xcb_window_t
name|target
init|=
name|translate
operator|->
name|child
decl_stmt|;
name|int
name|lx
init|=
name|translate
operator|->
name|dst_x
decl_stmt|;
name|int
name|ly
init|=
name|translate
operator|->
name|dst_y
decl_stmt|;
name|free
argument_list|(
name|translate
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|==
name|rootwin
condition|)
block|{
comment|// Ok.
block|}
elseif|else
if|if
condition|(
name|target
condition|)
block|{
comment|//me
name|xcb_window_t
name|src
init|=
name|rootwin
decl_stmt|;
while|while
condition|(
name|target
operator|!=
literal|0
condition|)
block|{
name|DNDDEBUG
operator|<<
literal|"checking target for XdndAware"
operator|<<
name|target
expr_stmt|;
comment|// translate coordinates
name|translate
operator|=
operator|::
name|translateCoordinates
argument_list|(
name|connection
argument_list|()
argument_list|,
name|src
argument_list|,
name|target
argument_list|,
name|lx
argument_list|,
name|ly
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|translate
condition|)
block|{
name|target
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|lx
operator|=
name|translate
operator|->
name|dst_x
expr_stmt|;
name|ly
operator|=
name|translate
operator|->
name|dst_y
expr_stmt|;
name|src
operator|=
name|translate
operator|->
name|child
expr_stmt|;
name|free
argument_list|(
name|translate
argument_list|)
expr_stmt|;
comment|// check if it has XdndAware
name|xcb_get_property_cookie_t
name|cookie
init|=
name|Q_XCB_CALL
argument_list|(
name|xcb_get_property
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|target
argument_list|,
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndAware
argument_list|)
argument_list|,
name|XCB_GET_PROPERTY_TYPE_ANY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|m_connection
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|bool
name|aware
init|=
name|reply
operator|&&
name|reply
operator|->
name|type
operator|!=
name|XCB_NONE
decl_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
if|if
condition|(
name|aware
condition|)
block|{
name|DNDDEBUG
operator|<<
literal|"Found XdndAware on "
operator|<<
name|target
expr_stmt|;
break|break;
block|}
comment|// find child at the coordinates
name|translate
operator|=
operator|::
name|translateCoordinates
argument_list|(
name|connection
argument_list|()
argument_list|,
name|src
argument_list|,
name|src
argument_list|,
name|lx
argument_list|,
name|ly
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|translate
condition|)
block|{
name|target
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|target
operator|=
name|translate
operator|->
name|child
expr_stmt|;
name|free
argument_list|(
name|translate
argument_list|)
expr_stmt|;
block|}
comment|// ####
comment|//        if (xdnd_data.deco&& (!target || target == xdnd_data.deco->effectiveWinId())) {
comment|//            DNDDEBUG<< "need to find real window";
comment|//            target = findRealWindow(globalPos, rootwin, 6);
comment|//            DNDDEBUG<< "real window found"<< QWidget::find(target)<< target;
comment|//        }
block|}
name|QXcbWindow
modifier|*
name|w
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|target
condition|)
block|{
name|w
operator|=
name|connection
argument_list|()
operator|->
name|platformWindowFromId
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|&&
operator|(
name|w
operator|->
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
comment|/*&& !w->acceptDrops()*/
condition|)
name|w
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|w
operator|=
literal|0
expr_stmt|;
name|target
operator|=
name|rootwin
expr_stmt|;
block|}
name|DNDDEBUG
operator|<<
literal|"and the final target is "
operator|<<
name|target
expr_stmt|;
name|DNDDEBUG
operator|<<
literal|"the widget w is"
operator|<<
operator|(
name|w
condition|?
name|w
operator|->
name|window
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|xcb_window_t
name|proxy_target
init|=
name|xdndProxy
argument_list|(
name|connection
argument_list|()
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxy_target
condition|)
name|proxy_target
operator|=
name|target
expr_stmt|;
name|int
name|target_version
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|proxy_target
condition|)
block|{
name|xcb_get_property_cookie_t
name|cookie
init|=
name|xcb_get_property
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|target
argument_list|,
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndAware
argument_list|)
argument_list|,
name|XCB_GET_PROPERTY_TYPE_ANY
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|m_connection
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reply
operator|||
name|reply
operator|->
name|type
operator|==
name|XCB_NONE
condition|)
name|target
operator|=
literal|0
expr_stmt|;
name|target_version
operator|=
name|xcb_get_property_value_length
argument_list|(
name|reply
argument_list|)
operator|==
literal|1
condition|?
operator|*
operator|(
name|uint32_t
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
else|:
literal|1
expr_stmt|;
if|if
condition|(
name|target_version
operator|>
name|xdnd_version
condition|)
name|target_version
operator|=
name|xdnd_version
expr_stmt|;
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
name|DEBUG
argument_list|()
operator|<<
literal|"target="
operator|<<
name|target
operator|<<
literal|"current_target="
operator|<<
name|current_target
expr_stmt|;
if|if
condition|(
name|target
operator|!=
name|current_target
condition|)
block|{
if|if
condition|(
name|current_target
condition|)
name|send_leave
argument_list|()
expr_stmt|;
name|current_target
operator|=
name|target
expr_stmt|;
name|current_proxy_target
operator|=
name|proxy_target
expr_stmt|;
if|if
condition|(
name|target
condition|)
block|{
name|int
name|flags
init|=
name|target_version
operator|<<
literal|24
decl_stmt|;
if|if
condition|(
name|drag_types
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
name|flags
operator||=
literal|0x0001
expr_stmt|;
name|xcb_client_message_event_t
name|enter
decl_stmt|;
name|enter
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|enter
operator|.
name|window
operator|=
name|target
expr_stmt|;
name|enter
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|enter
operator|.
name|type
operator|=
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndEnter
argument_list|)
expr_stmt|;
name|enter
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|connection
argument_list|()
operator|->
name|clipboard
argument_list|()
operator|->
name|owner
argument_list|()
expr_stmt|;
name|enter
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
name|flags
expr_stmt|;
name|enter
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
name|drag_types
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|drag_types
operator|.
name|at
argument_list|(
literal|0
argument_list|)
else|:
literal|0
expr_stmt|;
name|enter
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
name|drag_types
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|drag_types
operator|.
name|at
argument_list|(
literal|1
argument_list|)
else|:
literal|0
expr_stmt|;
name|enter
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
name|drag_types
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|?
name|drag_types
operator|.
name|at
argument_list|(
literal|2
argument_list|)
else|:
literal|0
expr_stmt|;
comment|// provisionally set the rectangle to 5x5 pixels...
name|source_sameanswer
operator|=
name|QRect
argument_list|(
name|globalPos
operator|.
name|x
argument_list|()
operator|-
literal|2
argument_list|,
name|globalPos
operator|.
name|y
argument_list|()
operator|-
literal|2
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|()
operator|<<
literal|"sending Xdnd enter source="
operator|<<
name|enter
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|w
condition|)
name|handleEnter
argument_list|(
name|w
operator|->
name|window
argument_list|()
argument_list|,
operator|&
name|enter
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|target
condition|)
name|xcb_send_event
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|proxy_target
argument_list|,
name|XCB_EVENT_MASK_NO_EVENT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|enter
argument_list|)
expr_stmt|;
name|waiting_for_status
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|waiting_for_status
condition|)
return|return;
name|QDragManager
modifier|*
name|m
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
condition|)
block|{
name|waiting_for_status
operator|=
literal|true
expr_stmt|;
name|xcb_client_message_event_t
name|move
decl_stmt|;
name|move
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|move
operator|.
name|window
operator|=
name|target
expr_stmt|;
name|move
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|move
operator|.
name|type
operator|=
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndPosition
argument_list|)
expr_stmt|;
name|move
operator|.
name|window
operator|=
name|target
expr_stmt|;
name|move
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|connection
argument_list|()
operator|->
name|clipboard
argument_list|()
operator|->
name|owner
argument_list|()
expr_stmt|;
name|move
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
comment|// flags
name|move
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
operator|(
name|globalPos
operator|.
name|x
argument_list|()
operator|<<
literal|16
operator|)
operator|+
name|globalPos
operator|.
name|y
argument_list|()
expr_stmt|;
name|move
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
name|connection
argument_list|()
operator|->
name|time
argument_list|()
expr_stmt|;
name|move
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
name|toXdndAction
argument_list|(
name|m
operator|->
name|defaultAction
argument_list|(
name|m
operator|->
name|dragPrivate
argument_list|()
operator|->
name|possible_actions
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|()
operator|<<
literal|"sending Xdnd position source="
operator|<<
name|move
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|<<
literal|"target="
operator|<<
name|move
operator|.
name|window
expr_stmt|;
name|source_time
operator|=
name|connection
argument_list|()
operator|->
name|time
argument_list|()
expr_stmt|;
if|if
condition|(
name|w
condition|)
name|handle_xdnd_position
argument_list|(
name|w
operator|->
name|window
argument_list|()
argument_list|,
operator|&
name|move
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|xcb_send_event
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|proxy_target
argument_list|,
name|XCB_EVENT_MASK_NO_EVENT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|move
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|m
operator|->
name|willDrop
condition|)
block|{
name|m
operator|->
name|willDrop
operator|=
literal|false
expr_stmt|;
name|m
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
block|}
block|}
name|DEBUG
argument_list|()
operator|<<
literal|"QDragManager::move leave"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drop
name|void
name|QXcbDrag
operator|::
name|drop
parameter_list|(
specifier|const
name|QMouseEvent
modifier|*
parameter_list|)
block|{
name|endDrag
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|current_target
condition|)
return|return;
name|xcb_client_message_event_t
name|drop
decl_stmt|;
name|drop
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|drop
operator|.
name|window
operator|=
name|current_target
expr_stmt|;
name|drop
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|drop
operator|.
name|type
operator|=
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndDrop
argument_list|)
expr_stmt|;
name|drop
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|connection
argument_list|()
operator|->
name|clipboard
argument_list|()
operator|->
name|owner
argument_list|()
expr_stmt|;
name|drop
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
comment|// flags
name|drop
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
name|connection
argument_list|()
operator|->
name|time
argument_list|()
expr_stmt|;
name|drop
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|drop
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|QXcbWindow
modifier|*
name|w
init|=
name|connection
argument_list|()
operator|->
name|platformWindowFromId
argument_list|(
name|current_proxy_target
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|&&
operator|(
name|w
operator|->
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
comment|/*&& !w->acceptDrops()*/
condition|)
name|w
operator|=
literal|0
expr_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|Transaction
name|t
init|=
block|{
name|connection
argument_list|()
operator|->
name|time
argument_list|()
block|,
name|current_target
block|,
name|current_proxy_target
block|,
operator|(
name|w
operator|?
name|w
operator|->
name|window
argument_list|()
operator|:
literal|0
operator|)
block|,
comment|//        current_embedding_widget,
name|manager
operator|->
name|object
block|}
decl_stmt|;
name|transactions
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|restartDropExpiryTimer
argument_list|()
expr_stmt|;
if|if
condition|(
name|w
condition|)
name|handleDrop
argument_list|(
name|w
operator|->
name|window
argument_list|()
argument_list|,
operator|&
name|drop
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|xcb_send_event
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|current_proxy_target
argument_list|,
name|XCB_EVENT_MASK_NO_EVENT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|drop
argument_list|)
expr_stmt|;
name|current_target
operator|=
literal|0
expr_stmt|;
name|current_proxy_target
operator|=
literal|0
expr_stmt|;
name|source_time
operator|=
literal|0
expr_stmt|;
comment|//    current_embedding_widget = 0;
name|manager
operator|->
name|object
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|ATOM
define|#
directive|define
name|ATOM
parameter_list|(
name|x
parameter_list|)
value|connection()->atom(QXcbAtom::x)
end_define
begin_function
DECL|function|toDropAction
name|Qt
operator|::
name|DropAction
name|QXcbDrag
operator|::
name|toDropAction
parameter_list|(
name|xcb_atom_t
name|atom
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|atom
operator|==
name|ATOM
argument_list|(
name|XdndActionCopy
argument_list|)
operator|||
name|atom
operator|==
literal|0
condition|)
return|return
name|Qt
operator|::
name|CopyAction
return|;
if|if
condition|(
name|atom
operator|==
name|ATOM
argument_list|(
name|XdndActionLink
argument_list|)
condition|)
return|return
name|Qt
operator|::
name|LinkAction
return|;
if|if
condition|(
name|atom
operator|==
name|ATOM
argument_list|(
name|XdndActionMove
argument_list|)
condition|)
return|return
name|Qt
operator|::
name|MoveAction
return|;
return|return
name|Qt
operator|::
name|CopyAction
return|;
block|}
end_function
begin_function
DECL|function|toXdndAction
name|xcb_atom_t
name|QXcbDrag
operator|::
name|toXdndAction
parameter_list|(
name|Qt
operator|::
name|DropAction
name|a
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|a
condition|)
block|{
case|case
name|Qt
operator|::
name|CopyAction
case|:
return|return
name|ATOM
argument_list|(
name|XdndActionCopy
argument_list|)
return|;
case|case
name|Qt
operator|::
name|LinkAction
case|:
return|return
name|ATOM
argument_list|(
name|XdndActionLink
argument_list|)
return|;
case|case
name|Qt
operator|::
name|MoveAction
case|:
case|case
name|Qt
operator|::
name|TargetMoveAction
case|:
return|return
name|ATOM
argument_list|(
name|XdndActionMove
argument_list|)
return|;
case|case
name|Qt
operator|::
name|IgnoreAction
case|:
return|return
name|XCB_NONE
return|;
default|default:
return|return
name|ATOM
argument_list|(
name|XdndActionCopy
argument_list|)
return|;
block|}
block|}
end_function
begin_undef
DECL|macro|ATOM
undef|#
directive|undef
name|ATOM
end_undef
begin_comment
comment|// timer used to discard old XdndDrop transactions
end_comment
begin_enum
DECL|enumerator|XdndDropTransactionTimeout
enum|enum
block|{
name|XdndDropTransactionTimeout
init|=
literal|5000
block|}
enum|;
end_enum
begin_comment
DECL|enumerator|XdndDropTransactionTimeout
comment|// 5 seconds
end_comment
begin_function
DECL|function|restartDropExpiryTimer
name|void
name|QXcbDrag
operator|::
name|restartDropExpiryTimer
parameter_list|()
block|{
if|if
condition|(
name|transaction_expiry_timer
operator|!=
operator|-
literal|1
condition|)
name|killTimer
argument_list|(
name|transaction_expiry_timer
argument_list|)
expr_stmt|;
name|transaction_expiry_timer
operator|=
name|startTimer
argument_list|(
name|XdndDropTransactionTimeout
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findTransactionByWindow
name|int
name|QXcbDrag
operator|::
name|findTransactionByWindow
parameter_list|(
name|xcb_window_t
name|window
parameter_list|)
block|{
name|int
name|at
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transactions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Transaction
modifier|&
name|t
init|=
name|transactions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|target
operator|==
name|window
operator|||
name|t
operator|.
name|proxy_target
operator|==
name|window
condition|)
block|{
name|at
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
return|return
name|at
return|;
block|}
end_function
begin_function
DECL|function|findTransactionByTime
name|int
name|QXcbDrag
operator|::
name|findTransactionByTime
parameter_list|(
name|xcb_timestamp_t
name|timestamp
parameter_list|)
block|{
name|int
name|at
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transactions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Transaction
modifier|&
name|t
init|=
name|transactions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|timestamp
operator|==
name|timestamp
condition|)
block|{
name|at
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
return|return
name|at
return|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// find an ancestor with XdndAware on it
end_comment
begin_comment
unit|static Window findXdndAwareParent(Window window) {     Window target = 0;     forever {
comment|// check if window has XdndAware
end_comment
begin_comment
unit|Atom type = 0;         int f;         unsigned long n, a;         unsigned char *data = 0;         if (XGetWindowProperty(X11->display, window, ATOM(XdndAware), 0, 0, False,                                AnyPropertyType,&type,&f,&n,&a,&data) == Success) { 	    if (data)                 XFree(data); 	    if (type) {                 target = window;                 break;             }         }
comment|// try window's parent
end_comment
begin_comment
unit|Window root;         Window parent;         Window *children;         uint unused;         if (!XQueryTree(X11->display, window,&root,&parent,&children,&unused))             break;         if (children)             XFree(children);         if (window == root)             break;         window = parent;     }     return target; }   static bool waiting_for_status = false;
comment|// used to preset each new QDragMoveEvent
end_comment
begin_comment
comment|// for embedding only
end_comment
begin_comment
unit|static QWidget* current_embedding_widget  = 0; static xcb_client_message_event_t last_enter_event;   class QExtraWidget : public QWidget {     Q_DECLARE_PRIVATE(QWidget) public:     inline QWExtra* extraData();     inline QTLWExtra* topData(); };  inline QWExtra* QExtraWidget::extraData() { return d_func()->extraData(); } inline QTLWExtra* QExtraWidget::topData() { return d_func()->topData(); }   static QWidget *find_child(QWidget *tlw, QPoint& p) {     QWidget *widget = tlw;      p = widget->mapFromGlobal(p);     bool done = false;     while (!done) {         done = true;         if (((QExtraWidget*)widget)->extraData()&&              ((QExtraWidget*)widget)->extraData()->xDndProxy != 0)             break;
comment|// stop searching for widgets under the mouse cursor if found widget is a proxy.
end_comment
begin_endif
unit|QObjectList children = widget->children();         if (!children.isEmpty()) {             for(int i = children.size(); i> 0;) {                 --i;                 QWidget *w = qobject_cast<QWidget *>(children.at(i));                 if (!w)                     continue;                 if (w->testAttribute(Qt::WA_TransparentForMouseEvents))                     continue;                 if (w->isVisible()&&                      w->geometry().contains(p)&&                      !w->isWindow()) {                     widget = w;                     done = false;                     p = widget->mapFromParent(p);                     break;                 }             }         }     }     return widget; }   static bool checkEmbedded(QWidget* w, const XEvent* xe) {     if (!w)         return false;      if (current_embedding_widget != 0&& current_embedding_widget != w) {         current_target = ((QExtraWidget*)current_embedding_widget)->extraData()->xDndProxy;         current_proxy_target = current_target;         qt_xdnd_send_leave();         current_target = 0;         current_proxy_target = 0;         current_embedding_widget = 0;     }      QWExtra* extra = ((QExtraWidget*)w)->extraData();     if (extra&& extra->xDndProxy != 0) {          if (current_embedding_widget != w) {              last_enter_event.xany.window = extra->xDndProxy;             XSendEvent(X11->display, extra->xDndProxy, False, NoEventMask,&last_enter_event);             current_embedding_widget = w;         }          ((XEvent*)xe)->xany.window = extra->xDndProxy;         XSendEvent(X11->display, extra->xDndProxy, False, NoEventMask, (XEvent*)xe);         if (currentWindow != w) {             currentWindow = w;         }         return true;     }     current_embedding_widget = 0;     return false; }
endif|#
directive|endif
end_endif
begin_function
DECL|function|handleEnter
name|void
name|QXcbDrag
operator|::
name|handleEnter
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|xcb_client_message_event_t
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|()
operator|<<
literal|"handleEnter"
operator|<<
name|window
expr_stmt|;
name|xdnd_types
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//    motifdnd_active = false;
comment|//    last_enter_event.xclient = xe->xclient;
name|int
name|version
init|=
call|(
name|int
call|)
argument_list|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|>>
literal|24
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|>
name|xdnd_version
condition|)
return|return;
name|xdnd_dragsource
operator|=
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|&
literal|1
condition|)
block|{
comment|// get the types from XdndTypeList
name|xcb_get_property_cookie_t
name|cookie
init|=
name|xcb_get_property
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|xdnd_dragsource
argument_list|,
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndTypelist
argument_list|)
argument_list|,
name|QXcbAtom
operator|::
name|XA_ATOM
argument_list|,
literal|0
argument_list|,
name|xdnd_max_type
argument_list|)
decl_stmt|;
name|xcb_get_property_reply_t
modifier|*
name|reply
init|=
name|xcb_get_property_reply
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|cookie
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|&&
name|reply
operator|->
name|type
operator|!=
name|XCB_NONE
operator|&&
name|reply
operator|->
name|format
operator|==
literal|32
condition|)
block|{
name|int
name|length
init|=
name|xcb_get_property_value_length
argument_list|(
name|reply
argument_list|)
operator|/
literal|4
decl_stmt|;
if|if
condition|(
name|length
operator|>
name|xdnd_max_type
condition|)
name|length
operator|=
name|xdnd_max_type
expr_stmt|;
name|xcb_atom_t
modifier|*
name|atoms
init|=
operator|(
name|xcb_atom_t
operator|*
operator|)
name|xcb_get_property_value
argument_list|(
name|reply
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|xdnd_types
operator|.
name|append
argument_list|(
name|atoms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// get the types from the message
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
name|i
index|]
condition|)
name|xdnd_types
operator|.
name|append
argument_list|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xdnd_types
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
name|DEBUG
argument_list|()
operator|<<
literal|"    "
operator|<<
name|connection
argument_list|()
operator|->
name|atomName
argument_list|(
name|xdnd_types
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handle_xdnd_position
name|void
name|QXcbDrag
operator|::
name|handle_xdnd_position
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|xcb_client_message_event_t
modifier|*
name|e
parameter_list|,
name|bool
name|passive
parameter_list|)
block|{
name|QPoint
name|p
argument_list|(
operator|(
name|e
operator|->
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|&
literal|0xffff0000
operator|)
operator|>>
literal|16
argument_list|,
name|e
operator|->
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|&
literal|0x0000ffff
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|QRect
name|geometry
init|=
name|w
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|p
operator|-=
name|geometry
operator|.
name|topLeft
argument_list|()
expr_stmt|;
comment|// ####
comment|//    if (!passive&& checkEmbedded(w, e))
comment|//        return;
if|if
condition|(
operator|!
name|w
operator|||
operator|(
comment|/*!w->acceptDrops()&&*/
operator|(
name|w
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
operator|)
condition|)
return|return;
if|if
condition|(
name|e
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|!=
name|xdnd_dragsource
condition|)
block|{
name|DEBUG
argument_list|(
literal|"xdnd drag position from unexpected source (%x not %x)"
argument_list|,
name|e
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
argument_list|,
name|xdnd_dragsource
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// timestamp from the source
if|if
condition|(
name|e
operator|->
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|!=
name|XCB_NONE
condition|)
name|target_time
comment|/*= X11->userTime*/
operator|=
name|e
operator|->
name|data
operator|.
name|data32
index|[
literal|3
index|]
expr_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QMimeData
modifier|*
name|dropData
init|=
name|manager
operator|->
name|dropData
argument_list|()
decl_stmt|;
name|xcb_client_message_event_t
name|response
decl_stmt|;
name|response
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|response
operator|.
name|window
operator|=
name|xdnd_dragsource
expr_stmt|;
name|response
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|response
operator|.
name|type
operator|=
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndStatus
argument_list|)
expr_stmt|;
name|response
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|xcb_window
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|response
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
comment|// flags
name|response
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
comment|// x, y
name|response
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
comment|// w, h
name|response
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
comment|// action
if|if
condition|(
operator|!
name|passive
condition|)
block|{
comment|// otherwise just reject
name|QRect
name|answerRect
argument_list|(
name|p
operator|+
name|geometry
operator|.
name|topLeft
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|->
name|object
condition|)
block|{
name|manager
operator|->
name|possible_actions
operator|=
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|possible_actions
expr_stmt|;
block|}
else|else
block|{
name|manager
operator|->
name|possible_actions
operator|=
name|Qt
operator|::
name|DropActions
argument_list|(
name|toDropAction
argument_list|(
name|e
operator|->
name|data
operator|.
name|data32
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QDragMoveEvent
name|me
argument_list|(
name|p
argument_list|,
name|manager
operator|->
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|QGuiApplication
operator|::
name|mouseButtons
argument_list|()
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|DropAction
name|accepted_action
init|=
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
name|currentPosition
operator|=
name|p
expr_stmt|;
if|if
condition|(
name|w
operator|!=
name|currentWindow
operator|.
name|data
argument_list|()
condition|)
block|{
if|if
condition|(
name|currentWindow
condition|)
block|{
name|QDragLeaveEvent
name|e
decl_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|currentWindow
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
name|currentWindow
operator|=
name|w
expr_stmt|;
name|last_target_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|QDragEnterEvent
name|de
argument_list|(
name|p
argument_list|,
name|manager
operator|->
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|QGuiApplication
operator|::
name|mouseButtons
argument_list|()
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|w
argument_list|,
operator|&
name|de
argument_list|)
expr_stmt|;
if|if
condition|(
name|de
operator|.
name|isAccepted
argument_list|()
operator|&&
name|de
operator|.
name|dropAction
argument_list|()
operator|!=
name|Qt
operator|::
name|IgnoreAction
condition|)
name|last_target_accepted_action
operator|=
name|de
operator|.
name|dropAction
argument_list|()
expr_stmt|;
block|}
name|DEBUG
argument_list|()
operator|<<
literal|"qt_handle_xdnd_position action="
operator|<<
name|connection
argument_list|()
operator|->
name|atomName
argument_list|(
name|e
operator|->
name|data
operator|.
name|data32
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|last_target_accepted_action
operator|!=
name|Qt
operator|::
name|IgnoreAction
condition|)
block|{
name|me
operator|.
name|setDropAction
argument_list|(
name|last_target_accepted_action
argument_list|)
expr_stmt|;
name|me
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|w
argument_list|,
operator|&
name|me
argument_list|)
expr_stmt|;
if|if
condition|(
name|me
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
name|response
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
comment|// yes
name|accepted_action
operator|=
name|me
operator|.
name|dropAction
argument_list|()
expr_stmt|;
name|last_target_accepted_action
operator|=
name|accepted_action
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|last_target_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
name|answerRect
operator|=
name|me
operator|.
name|answerRect
argument_list|()
operator|.
name|translated
argument_list|(
name|geometry
operator|.
name|topLeft
argument_list|()
argument_list|)
operator|.
name|intersected
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|left
argument_list|()
operator|<
literal|0
condition|)
name|answerRect
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|right
argument_list|()
operator|>
literal|4096
condition|)
name|answerRect
operator|.
name|setRight
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|top
argument_list|()
operator|<
literal|0
condition|)
name|answerRect
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|bottom
argument_list|()
operator|>
literal|4096
condition|)
name|answerRect
operator|.
name|setBottom
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|width
argument_list|()
operator|<
literal|0
condition|)
name|answerRect
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|answerRect
operator|.
name|height
argument_list|()
operator|<
literal|0
condition|)
name|answerRect
operator|.
name|setHeight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//        response.data.data32[2] = (answerRect.x()<< 16) + answerRect.y();
comment|//        response.data.data32[3] = (answerRect.width()<< 16) + answerRect.height();
name|response
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
name|toXdndAction
argument_list|(
name|accepted_action
argument_list|)
expr_stmt|;
block|}
comment|// reset
name|target_time
operator|=
name|XCB_CURRENT_TIME
expr_stmt|;
name|DEBUG
argument_list|()
operator|<<
literal|"sending XdndStatus"
operator|<<
operator|(
name|xdnd_dragsource
operator|==
name|connection
argument_list|()
operator|->
name|clipboard
argument_list|()
operator|->
name|owner
argument_list|()
operator|)
operator|<<
name|xdnd_dragsource
operator|<<
name|response
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|<<
name|connection
argument_list|()
operator|->
name|atomName
argument_list|(
name|response
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|xdnd_dragsource
operator|==
name|connection
argument_list|()
operator|->
name|clipboard
argument_list|()
operator|->
name|owner
argument_list|()
condition|)
name|handle_xdnd_status
argument_list|(
operator|&
name|response
argument_list|,
name|passive
argument_list|)
expr_stmt|;
else|else
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|xdnd_dragsource
argument_list|,
name|XCB_EVENT_MASK_NO_EVENT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_namespace
namespace|namespace
block|{
DECL|class|ClientMessageScanner
class|class
name|ClientMessageScanner
block|{
public|public:
DECL|function|ClientMessageScanner
name|ClientMessageScanner
parameter_list|(
name|xcb_atom_t
name|a
parameter_list|)
member_init_list|:
name|atom
argument_list|(
name|a
argument_list|)
block|{}
DECL|member|atom
name|xcb_atom_t
name|atom
decl_stmt|;
DECL|function|check
name|bool
name|check
parameter_list|(
name|xcb_generic_event_t
modifier|*
name|event
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|event
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|event
operator|->
name|response_type
operator|&
literal|0x7f
operator|)
operator|!=
name|XCB_CLIENT_MESSAGE
condition|)
return|return
literal|false
return|;
return|return
operator|(
operator|(
name|xcb_client_message_event_t
operator|*
operator|)
name|event
operator|)
operator|->
name|type
operator|==
name|atom
return|;
block|}
block|}
class|;
block|}
end_namespace
begin_function
DECL|function|handlePosition
name|void
name|QXcbDrag
operator|::
name|handlePosition
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|xcb_client_message_event_t
modifier|*
name|event
parameter_list|,
name|bool
name|passive
parameter_list|)
block|{
name|xcb_client_message_event_t
modifier|*
name|lastEvent
init|=
cast|const_cast
argument_list|<
name|xcb_client_message_event_t
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|xcb_generic_event_t
modifier|*
name|nextEvent
decl_stmt|;
name|ClientMessageScanner
name|scanner
argument_list|(
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndPosition
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|nextEvent
operator|=
name|connection
argument_list|()
operator|->
name|checkEvent
argument_list|(
name|scanner
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|lastEvent
operator|!=
name|event
condition|)
name|free
argument_list|(
name|lastEvent
argument_list|)
expr_stmt|;
name|lastEvent
operator|=
operator|(
name|xcb_client_message_event_t
operator|*
operator|)
name|nextEvent
expr_stmt|;
block|}
name|handle_xdnd_position
argument_list|(
name|w
argument_list|,
name|lastEvent
argument_list|,
name|passive
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastEvent
operator|!=
name|event
condition|)
name|free
argument_list|(
name|lastEvent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handle_xdnd_status
name|void
name|QXcbDrag
operator|::
name|handle_xdnd_status
parameter_list|(
specifier|const
name|xcb_client_message_event_t
modifier|*
name|event
parameter_list|,
name|bool
parameter_list|)
block|{
name|DEBUG
argument_list|(
literal|"xdndHandleStatus"
argument_list|)
expr_stmt|;
comment|// ignore late status messages
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|&&
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|!=
name|current_proxy_target
condition|)
return|return;
name|Qt
operator|::
name|DropAction
name|newAction
init|=
operator|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|&
literal|0x1
operator|)
condition|?
name|toDropAction
argument_list|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|4
index|]
argument_list|)
else|:
name|Qt
operator|::
name|IgnoreAction
decl_stmt|;
if|if
condition|(
operator|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|&
literal|2
operator|)
operator|==
literal|0
condition|)
block|{
name|QPoint
name|p
argument_list|(
operator|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|&
literal|0xffff0000
operator|)
operator|>>
literal|16
argument_list|,
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|&
literal|0x0000ffff
argument_list|)
decl_stmt|;
name|QSize
name|s
argument_list|(
operator|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|&
literal|0xffff0000
operator|)
operator|>>
literal|16
argument_list|,
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|&
literal|0x0000ffff
argument_list|)
decl_stmt|;
name|source_sameanswer
operator|=
name|QRect
argument_list|(
name|p
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|source_sameanswer
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|manager
operator|->
name|willDrop
operator|=
operator|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|&
literal|0x1
operator|)
expr_stmt|;
if|if
condition|(
name|manager
operator|->
name|global_accepted_action
operator|!=
name|newAction
condition|)
block|{
name|manager
operator|->
name|global_accepted_action
operator|=
name|newAction
expr_stmt|;
name|manager
operator|->
name|emitActionChanged
argument_list|(
name|newAction
argument_list|)
expr_stmt|;
block|}
name|DEBUG
argument_list|()
operator|<<
literal|"willDrop="
operator|<<
name|manager
operator|->
name|willDrop
operator|<<
literal|"action="
operator|<<
name|newAction
expr_stmt|;
name|manager
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
name|waiting_for_status
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleStatus
name|void
name|QXcbDrag
operator|::
name|handleStatus
parameter_list|(
specifier|const
name|xcb_client_message_event_t
modifier|*
name|event
parameter_list|,
name|bool
name|passive
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|window
operator|!=
name|connection
argument_list|()
operator|->
name|clipboard
argument_list|()
operator|->
name|owner
argument_list|()
condition|)
return|return;
name|xcb_client_message_event_t
modifier|*
name|lastEvent
init|=
cast|const_cast
argument_list|<
name|xcb_client_message_event_t
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"handleStatus"
operator|<<
name|lastEvent
operator|->
name|window
operator|<<
name|lastEvent
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
expr_stmt|;
name|xcb_generic_event_t
modifier|*
name|nextEvent
decl_stmt|;
name|ClientMessageScanner
name|scanner
argument_list|(
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndStatus
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|nextEvent
operator|=
name|connection
argument_list|()
operator|->
name|checkEvent
argument_list|(
name|scanner
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|lastEvent
operator|!=
name|event
condition|)
name|free
argument_list|(
name|lastEvent
argument_list|)
expr_stmt|;
name|lastEvent
operator|=
operator|(
name|xcb_client_message_event_t
operator|*
operator|)
name|nextEvent
expr_stmt|;
block|}
name|handle_xdnd_status
argument_list|(
name|lastEvent
argument_list|,
name|passive
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastEvent
operator|!=
name|event
condition|)
name|free
argument_list|(
name|lastEvent
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
literal|"xdndHandleStatus end"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleLeave
name|void
name|QXcbDrag
operator|::
name|handleLeave
parameter_list|(
name|QWindow
modifier|*
name|w
parameter_list|,
specifier|const
name|xcb_client_message_event_t
modifier|*
name|event
parameter_list|,
name|bool
comment|/*passive*/
parameter_list|)
block|{
name|DEBUG
argument_list|(
literal|"xdnd leave"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentWindow
operator|||
name|w
operator|!=
name|currentWindow
operator|.
name|data
argument_list|()
condition|)
return|return;
comment|// sanity
comment|// ###
comment|//    if (checkEmbedded(current_embedding_widget, event)) {
comment|//        current_embedding_widget = 0;
comment|//        currentWindow.clear();
comment|//        return;
comment|//    }
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|!=
name|xdnd_dragsource
condition|)
block|{
comment|// This often happens - leave other-process window quickly
name|DEBUG
argument_list|(
literal|"xdnd drag leave from unexpected source (%x not %x"
argument_list|,
name|event
operator|->
name|data
operator|.
name|data32
index|[
literal|0
index|]
argument_list|,
name|xdnd_dragsource
argument_list|)
expr_stmt|;
block|}
name|QDragLeaveEvent
name|e
decl_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|currentWindow
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|xdnd_dragsource
operator|=
literal|0
expr_stmt|;
name|xdnd_types
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentWindow
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|send_leave
name|void
name|QXcbDrag
operator|::
name|send_leave
parameter_list|()
block|{
if|if
condition|(
operator|!
name|current_target
condition|)
return|return;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|xcb_client_message_event_t
name|leave
decl_stmt|;
name|leave
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|leave
operator|.
name|window
operator|=
name|current_target
expr_stmt|;
name|leave
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|leave
operator|.
name|type
operator|=
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndLeave
argument_list|)
expr_stmt|;
name|leave
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|connection
argument_list|()
operator|->
name|clipboard
argument_list|()
operator|->
name|owner
argument_list|()
expr_stmt|;
name|leave
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
comment|// flags
name|leave
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
comment|// x, y
name|leave
operator|.
name|data
operator|.
name|data32
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
comment|// w, h
name|leave
operator|.
name|data
operator|.
name|data32
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
comment|// just null
name|QXcbWindow
modifier|*
name|w
init|=
name|connection
argument_list|()
operator|->
name|platformWindowFromId
argument_list|(
name|current_proxy_target
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|&&
operator|(
name|w
operator|->
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
comment|/*&& !w->acceptDrops()*/
condition|)
name|w
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|w
condition|)
name|handleLeave
argument_list|(
name|w
operator|->
name|window
argument_list|()
argument_list|,
operator|(
specifier|const
name|xcb_client_message_event_t
operator|*
operator|)
operator|&
name|leave
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|xcb_send_event
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|current_proxy_target
argument_list|,
name|XCB_EVENT_MASK_NO_EVENT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|leave
argument_list|)
expr_stmt|;
comment|// reset the drag manager state
name|manager
operator|->
name|willDrop
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|manager
operator|->
name|global_accepted_action
operator|!=
name|Qt
operator|::
name|IgnoreAction
condition|)
name|manager
operator|->
name|emitActionChanged
argument_list|(
name|Qt
operator|::
name|IgnoreAction
argument_list|)
expr_stmt|;
name|manager
operator|->
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
name|manager
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
name|current_target
operator|=
literal|0
expr_stmt|;
name|current_proxy_target
operator|=
literal|0
expr_stmt|;
name|source_time
operator|=
name|XCB_CURRENT_TIME
expr_stmt|;
name|waiting_for_status
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// TODO: remove and use QApplication::currentKeyboardModifiers() in Qt 4.8.
end_comment
begin_endif
unit|static Qt::KeyboardModifiers currentKeyboardModifiers() {     Window root;     Window child;     int root_x, root_y, win_x, win_y;     uint keybstate;     for (int i = 0; i< ScreenCount(X11->display); ++i) {         if (XQueryPointer(X11->display, QX11Info::appRootWindow(i),&root,&child,&root_x,&root_y,&win_x,&win_y,&keybstate))             return X11->translateModifiers(keybstate& 0x00ff);     }     return 0; }
endif|#
directive|endif
end_endif
begin_function
DECL|function|handleDrop
name|void
name|QXcbDrag
operator|::
name|handleDrop
parameter_list|(
name|QWindow
modifier|*
parameter_list|,
specifier|const
name|xcb_client_message_event_t
modifier|*
name|event
parameter_list|,
name|bool
name|passive
parameter_list|)
block|{
name|DEBUG
argument_list|(
literal|"xdndHandleDrop"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentWindow
condition|)
block|{
name|xdnd_dragsource
operator|=
literal|0
expr_stmt|;
return|return;
comment|// sanity
block|}
comment|// ###
comment|//    if (!passive&& checkEmbedded(currentWindow, xe)){
comment|//        current_embedding_widget = 0;
comment|//        xdnd_dragsource = 0;
comment|//        currentWindow = 0;
comment|//        return;
comment|//    }
specifier|const
name|uint32_t
modifier|*
name|l
init|=
name|event
operator|->
name|data
operator|.
name|data32
decl_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|DEBUG
argument_list|(
literal|"xdnd drop"
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
index|[
literal|0
index|]
operator|!=
name|xdnd_dragsource
condition|)
block|{
name|DEBUG
argument_list|(
literal|"xdnd drop from unexpected source (%x not %x"
argument_list|,
name|l
index|[
literal|0
index|]
argument_list|,
name|xdnd_dragsource
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// update the "user time" from the timestamp in the event.
if|if
condition|(
name|l
index|[
literal|2
index|]
operator|!=
literal|0
condition|)
name|target_time
operator|=
comment|/*X11->userTime =*/
name|l
index|[
literal|2
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|passive
condition|)
block|{
comment|// this could be a same-application drop, just proxied due to
comment|// some XEMBEDding, so try to find the real QMimeData used
comment|// based on the timestamp for this drop.
name|QMimeData
modifier|*
name|dropData
init|=
literal|0
decl_stmt|;
comment|// ###
comment|//        int at = findXdndDropTransactionByTime(target_time);
comment|//        if (at != -1)
comment|//            dropData = QDragManager::dragPrivate(X11->dndDropTransactions.at(at).object)->data;
comment|// if we can't find it, then use the data in the drag manager
if|if
condition|(
operator|!
name|dropData
condition|)
name|dropData
operator|=
name|manager
operator|->
name|dropData
argument_list|()
expr_stmt|;
comment|// Drop coming from another app? Update keyboard modifiers.
comment|//        if (!qt_xdnd_dragging) {
comment|//            QApplicationPrivate::modifier_buttons = currentKeyboardModifiers();
comment|//        }
name|QDropEvent
name|de
argument_list|(
name|currentPosition
argument_list|,
name|manager
operator|->
name|possible_actions
argument_list|,
name|dropData
argument_list|,
name|QGuiApplication
operator|::
name|mouseButtons
argument_list|()
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|currentWindow
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|de
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|de
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
comment|// Ignore a failed drag
name|manager
operator|->
name|global_accepted_action
operator|=
name|Qt
operator|::
name|IgnoreAction
expr_stmt|;
block|}
else|else
block|{
name|manager
operator|->
name|global_accepted_action
operator|=
name|de
operator|.
name|dropAction
argument_list|()
expr_stmt|;
block|}
name|xcb_client_message_event_t
name|finished
decl_stmt|;
name|finished
operator|.
name|response_type
operator|=
name|XCB_CLIENT_MESSAGE
expr_stmt|;
name|finished
operator|.
name|window
operator|=
name|xdnd_dragsource
expr_stmt|;
name|finished
operator|.
name|format
operator|=
literal|32
expr_stmt|;
name|finished
operator|.
name|type
operator|=
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndFinished
argument_list|)
expr_stmt|;
name|DNDDEBUG
operator|<<
literal|"xdndHandleDrop"
operator|<<
literal|"currentWindow"
operator|<<
name|currentWindow
operator|.
name|data
argument_list|()
operator|<<
operator|(
name|currentWindow
condition|?
name|xcb_window
argument_list|(
name|currentWindow
operator|.
name|data
argument_list|()
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|finished
operator|.
name|data
operator|.
name|data32
index|[
literal|0
index|]
operator|=
name|currentWindow
condition|?
name|xcb_window
argument_list|(
name|currentWindow
operator|.
name|data
argument_list|()
argument_list|)
else|:
name|XCB_NONE
expr_stmt|;
name|finished
operator|.
name|data
operator|.
name|data32
index|[
literal|1
index|]
operator|=
name|de
operator|.
name|isAccepted
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
comment|// flags
name|finished
operator|.
name|data
operator|.
name|data32
index|[
literal|2
index|]
operator|=
name|toXdndAction
argument_list|(
name|manager
operator|->
name|global_accepted_action
argument_list|)
expr_stmt|;
name|Q_XCB_CALL
argument_list|(
name|xcb_send_event
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|xdnd_dragsource
argument_list|,
name|XCB_EVENT_MASK_NO_EVENT
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|finished
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QDragLeaveEvent
name|e
decl_stmt|;
name|QGuiApplication
operator|::
name|sendEvent
argument_list|(
name|currentWindow
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
name|xdnd_dragsource
operator|=
literal|0
expr_stmt|;
name|currentWindow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|waiting_for_status
operator|=
literal|false
expr_stmt|;
comment|// reset
name|target_time
operator|=
name|XCB_CURRENT_TIME
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleFinished
name|void
name|QXcbDrag
operator|::
name|handleFinished
parameter_list|(
specifier|const
name|xcb_client_message_event_t
modifier|*
name|event
parameter_list|,
name|bool
parameter_list|)
block|{
name|DEBUG
argument_list|(
literal|"xdndHandleFinished"
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|window
operator|!=
name|connection
argument_list|()
operator|->
name|clipboard
argument_list|()
operator|->
name|owner
argument_list|()
condition|)
return|return;
specifier|const
name|unsigned
name|long
modifier|*
name|l
init|=
operator|(
specifier|const
name|unsigned
name|long
operator|*
operator|)
name|event
operator|->
name|data
operator|.
name|data32
decl_stmt|;
name|DNDDEBUG
operator|<<
literal|"xdndHandleFinished, l[0]"
operator|<<
name|l
index|[
literal|0
index|]
operator|<<
literal|"current_target"
operator|<<
name|current_target
operator|<<
literal|"qt_xdnd_current_proxy_targe"
operator|<<
name|current_proxy_target
expr_stmt|;
if|if
condition|(
name|l
index|[
literal|0
index|]
condition|)
block|{
name|int
name|at
init|=
name|findTransactionByWindow
argument_list|(
name|l
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|!=
operator|-
literal|1
condition|)
block|{
name|restartDropExpiryTimer
argument_list|()
expr_stmt|;
name|Transaction
name|t
init|=
name|transactions
operator|.
name|takeAt
argument_list|(
name|at
argument_list|)
decl_stmt|;
comment|//            QDragManager *manager = QDragManager::self();
comment|//            Window target = current_target;
comment|//            Window proxy_target = current_proxy_target;
comment|//            QWidget *embedding_widget = current_embedding_widget;
comment|//            QDrag *currentObject = manager->object;
comment|//            current_target = t.target;
comment|//            current_proxy_target = t.proxy_target;
comment|//            current_embedding_widget = t.embedding_widget;
comment|//            manager->object = t.object;
comment|//            if (!passive)
comment|//                (void) checkEmbedded(currentWindow, xe);
comment|//            current_embedding_widget = 0;
comment|//            current_target = 0;
comment|//            current_proxy_target = 0;
if|if
condition|(
name|t
operator|.
name|object
condition|)
name|t
operator|.
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
comment|//            current_target = target;
comment|//            current_proxy_target = proxy_target;
comment|//            current_embedding_widget = embedding_widget;
comment|//            manager->object = currentObject;
block|}
block|}
name|waiting_for_status
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QXcbDrag
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|heartbeat
operator|&&
name|source_sameanswer
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QMouseEvent
name|me
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|,
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|QGuiApplication
operator|::
name|mouseButtons
argument_list|()
argument_list|,
name|QGuiApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|move
argument_list|(
operator|&
name|me
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|transaction_expiry_timer
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transactions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Transaction
modifier|&
name|t
init|=
name|transactions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|targetWindow
condition|)
block|{
comment|// dnd within the same process, don't delete these
continue|continue;
block|}
name|t
operator|.
name|object
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|transactions
operator|.
name|removeAt
argument_list|(
name|i
operator|--
argument_list|)
expr_stmt|;
block|}
name|killTimer
argument_list|(
name|transaction_expiry_timer
argument_list|)
expr_stmt|;
name|transaction_expiry_timer
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cancel
name|void
name|QXcbDrag
operator|::
name|cancel
parameter_list|()
block|{
name|DEBUG
argument_list|(
literal|"QXcbDrag::cancel"
argument_list|)
expr_stmt|;
name|endDrag
argument_list|()
expr_stmt|;
if|if
condition|(
name|current_target
condition|)
name|send_leave
argument_list|()
expr_stmt|;
name|current_target
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
unit|static Window findRealWindow(const QPoint& pos, Window w, int md) {     if (xdnd_data.deco&& w == xdnd_data.deco->effectiveWinId())         return 0;      if (md) {         X11->ignoreBadwindow();         XWindowAttributes attr;         XGetWindowAttributes(X11->display, w,&attr);         if (X11->badwindow())             return 0;          if (attr.map_state == IsViewable&& QRect(attr.x,attr.y,attr.width,attr.height).contains(pos)) {             {                 Atom   type = XNone;                 int f;                 unsigned long n, a;                 unsigned char *data;                  XGetWindowProperty(X11->display, w, ATOM(XdndAware), 0, 0, False,                                    AnyPropertyType,&type,&f,&n,&a,&data);                 if (data) XFree(data);                 if (type)                     return w;             }              Window r, p;             Window* c;             uint nc;             if (XQueryTree(X11->display, w,&r,&p,&c,&nc)) {                 r=0;                 for (uint i=nc; !r&& i--;) {                     r = findRealWindow(pos-QPoint(attr.x,attr.y),                                         c[i], md-1);                 }                 XFree(c);                 if (r)                     return r;
comment|// We didn't find a client window!  Just use the
end_comment
begin_comment
comment|// innermost window.
end_comment
begin_comment
unit|}
comment|// No children!
end_comment
begin_endif
unit|return w;         }     }     return 0; }  bool QX11Data::xdndHandleBadwindow() {     if (current_target) {         QDragManager *manager = QDragManager::self();         if (manager->object) {             current_target = 0;             current_proxy_target = 0;             manager->object->deleteLater();             manager->object = 0;             delete xdnd_data.deco;             xdnd_data.deco = 0;             return true;         }     }     if (xdnd_dragsource) {         xdnd_dragsource = 0;         if (currentWindow) {             QApplication::postEvent(currentWindow, new QDragLeaveEvent);             currentWindow = 0;         }         return true;     }     return false; }
endif|#
directive|endif
end_endif
begin_function
DECL|function|handleSelectionRequest
name|void
name|QXcbDrag
operator|::
name|handleSelectionRequest
parameter_list|(
specifier|const
name|xcb_selection_request_event_t
modifier|*
name|event
parameter_list|)
block|{
name|xcb_selection_notify_event_t
name|notify
decl_stmt|;
name|notify
operator|.
name|response_type
operator|=
name|XCB_SELECTION_NOTIFY
expr_stmt|;
name|notify
operator|.
name|requestor
operator|=
name|event
operator|->
name|requestor
expr_stmt|;
name|notify
operator|.
name|selection
operator|=
name|event
operator|->
name|selection
expr_stmt|;
name|notify
operator|.
name|target
operator|=
name|XCB_NONE
expr_stmt|;
name|notify
operator|.
name|property
operator|=
name|XCB_NONE
expr_stmt|;
name|notify
operator|.
name|time
operator|=
name|event
operator|->
name|time
expr_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QDrag
modifier|*
name|currentObject
init|=
name|manager
operator|->
name|object
decl_stmt|;
comment|// which transaction do we use? (note: -2 means use current manager->object)
name|int
name|at
init|=
operator|-
literal|1
decl_stmt|;
comment|// figure out which data the requestor is really interested in
if|if
condition|(
name|manager
operator|->
name|object
operator|&&
name|event
operator|->
name|time
operator|==
name|source_time
condition|)
block|{
comment|// requestor wants the current drag data
name|at
operator|=
operator|-
literal|2
expr_stmt|;
block|}
else|else
block|{
comment|// if someone has requested data in response to XdndDrop, find the corresponding transaction. the
comment|// spec says to call XConvertSelection() using the timestamp from the XdndDrop
name|at
operator|=
name|findTransactionByTime
argument_list|(
name|event
operator|->
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|at
operator|==
operator|-
literal|1
condition|)
block|{
comment|// no dice, perhaps the client was nice enough to use the same window id in XConvertSelection()
comment|// that we sent the XdndDrop event to.
name|at
operator|=
name|findTransactionByWindow
argument_list|(
name|event
operator|->
name|requestor
argument_list|)
expr_stmt|;
block|}
comment|//        if (at == -1&& event->time == XCB_CURRENT_TIME) {
comment|//            // previous Qt versions always requested the data on a child of the target window
comment|//            // using CurrentTime... but it could be asking for either drop data or the current drag's data
comment|//            Window target = findXdndAwareParent(event->requestor);
comment|//            if (target) {
comment|//                if (current_target&& current_target == target)
comment|//                    at = -2;
comment|//                else
comment|//                    at = findXdndDropTransactionByWindow(target);
comment|//            }
comment|//        }
block|}
if|if
condition|(
name|at
operator|>=
literal|0
condition|)
block|{
name|restartDropExpiryTimer
argument_list|()
expr_stmt|;
comment|// use the drag object from an XdndDrop tansaction
name|manager
operator|->
name|object
operator|=
name|transactions
operator|.
name|at
argument_list|(
name|at
argument_list|)
operator|.
name|object
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|at
operator|!=
operator|-
literal|2
condition|)
block|{
comment|// no transaction found, we'll have to reject the request
name|manager
operator|->
name|object
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|manager
operator|->
name|object
condition|)
block|{
name|xcb_atom_t
name|atomFormat
init|=
name|event
operator|->
name|target
decl_stmt|;
name|int
name|dataFormat
init|=
literal|0
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
if|if
condition|(
name|QXcbMime
operator|::
name|mimeDataForAtom
argument_list|(
name|connection
argument_list|()
argument_list|,
name|event
operator|->
name|target
argument_list|,
name|manager
operator|->
name|dragPrivate
argument_list|()
operator|->
name|data
argument_list|,
operator|&
name|data
argument_list|,
operator|&
name|atomFormat
argument_list|,
operator|&
name|dataFormat
argument_list|)
condition|)
block|{
name|int
name|dataSize
init|=
name|data
operator|.
name|size
argument_list|()
operator|/
operator|(
name|dataFormat
operator|/
literal|8
operator|)
decl_stmt|;
name|xcb_change_property
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|event
operator|->
name|requestor
argument_list|,
name|event
operator|->
name|property
argument_list|,
name|atomFormat
argument_list|,
name|dataFormat
argument_list|,
name|dataSize
argument_list|,
operator|(
specifier|const
name|void
operator|*
operator|)
name|data
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|notify
operator|.
name|property
operator|=
name|event
operator|->
name|property
expr_stmt|;
name|notify
operator|.
name|target
operator|=
name|atomFormat
expr_stmt|;
block|}
block|}
comment|// reset manager->object in case we modified it above
name|manager
operator|->
name|object
operator|=
name|currentObject
expr_stmt|;
comment|// ### this can die if event->requestor crashes at the wrong
comment|// ### moment
name|xcb_send_event
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
literal|false
argument_list|,
name|event
operator|->
name|requestor
argument_list|,
name|XCB_EVENT_MASK_NO_EVENT
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|notify
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dndEnable
name|bool
name|QXcbDrag
operator|::
name|dndEnable
parameter_list|(
name|QXcbWindow
modifier|*
name|w
parameter_list|,
name|bool
name|on
parameter_list|)
block|{
name|DNDDEBUG
operator|<<
literal|"xdndEnable"
operator|<<
name|w
operator|<<
name|on
expr_stmt|;
if|if
condition|(
name|on
condition|)
block|{
name|QXcbWindow
modifier|*
name|xdnd_widget
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|w
operator|->
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
block|{
if|if
condition|(
name|desktop_proxy
condition|)
comment|// *WE* already have one.
return|return
literal|false
return|;
name|xcb_grab_server
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
comment|// As per Xdnd4, use XdndProxy
name|xcb_window_t
name|proxy_id
init|=
name|xdndProxy
argument_list|(
name|connection
argument_list|()
argument_list|,
name|w
operator|->
name|xcb_window
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxy_id
condition|)
block|{
name|desktop_proxy
operator|=
operator|new
name|QWindow
expr_stmt|;
name|xdnd_widget
operator|=
cast|static_cast
argument_list|<
name|QXcbWindow
operator|*
argument_list|>
argument_list|(
name|desktop_proxy
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|proxy_id
operator|=
name|xdnd_widget
operator|->
name|xcb_window
argument_list|()
expr_stmt|;
name|xcb_atom_t
name|xdnd_proxy
init|=
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndProxy
argument_list|)
decl_stmt|;
name|xcb_change_property
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|w
operator|->
name|xcb_window
argument_list|()
argument_list|,
name|xdnd_proxy
argument_list|,
name|QXcbAtom
operator|::
name|XA_WINDOW
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|proxy_id
argument_list|)
expr_stmt|;
name|xcb_change_property
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|proxy_id
argument_list|,
name|xdnd_proxy
argument_list|,
name|QXcbAtom
operator|::
name|XA_WINDOW
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|proxy_id
argument_list|)
expr_stmt|;
block|}
name|xcb_ungrab_server
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xdnd_widget
operator|=
name|w
expr_stmt|;
block|}
if|if
condition|(
name|xdnd_widget
condition|)
block|{
name|DNDDEBUG
operator|<<
literal|"setting XdndAware for"
operator|<<
name|xdnd_widget
operator|<<
name|xdnd_widget
operator|->
name|xcb_window
argument_list|()
expr_stmt|;
name|xcb_atom_t
name|atm
init|=
name|xdnd_version
decl_stmt|;
name|xcb_change_property
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|XCB_PROP_MODE_REPLACE
argument_list|,
name|xdnd_widget
operator|->
name|xcb_window
argument_list|()
argument_list|,
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndAware
argument_list|)
argument_list|,
name|QXcbAtom
operator|::
name|XA_ATOM
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
operator|&
name|atm
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|w
operator|->
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
operator|)
condition|)
block|{
name|xcb_delete_property
argument_list|(
name|connection
argument_list|()
operator|->
name|xcb_connection
argument_list|()
argument_list|,
name|w
operator|->
name|xcb_window
argument_list|()
argument_list|,
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndProxy
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|desktop_proxy
expr_stmt|;
name|desktop_proxy
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|DNDDEBUG
operator|<<
literal|"not deleting XDndAware"
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_function
begin_constructor
DECL|function|QDropData
name|QDropData
operator|::
name|QDropData
parameter_list|(
name|QXcbDrag
modifier|*
name|d
parameter_list|)
member_init_list|:
name|QXcbMime
argument_list|()
member_init_list|,
name|drag
argument_list|(
name|d
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QDropData
name|QDropData
operator|::
name|~
name|QDropData
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|retrieveData_sys
name|QVariant
name|QDropData
operator|::
name|retrieveData_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimetype
parameter_list|,
name|QVariant
operator|::
name|Type
name|requestedType
parameter_list|)
specifier|const
block|{
name|QByteArray
name|mime
init|=
name|mimetype
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QVariant
name|data
init|=
comment|/*X11->motifdnd_active                       ? X11->motifdndObtainData(mime)                       :*/
name|xdndObtainData
argument_list|(
name|mime
argument_list|,
name|requestedType
argument_list|)
decl_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_function
DECL|function|xdndObtainData
name|QVariant
name|QDropData
operator|::
name|xdndObtainData
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|format
parameter_list|,
name|QVariant
operator|::
name|Type
name|requestedType
parameter_list|)
specifier|const
block|{
name|QByteArray
name|result
decl_stmt|;
name|QDragManager
modifier|*
name|manager
init|=
name|QDragManager
operator|::
name|self
argument_list|()
decl_stmt|;
name|QXcbConnection
modifier|*
name|c
init|=
name|drag
operator|->
name|connection
argument_list|()
decl_stmt|;
name|QXcbWindow
modifier|*
name|xcb_window
init|=
name|c
operator|->
name|platformWindowFromId
argument_list|(
name|drag
operator|->
name|xdnd_dragsource
argument_list|)
decl_stmt|;
if|if
condition|(
name|xcb_window
operator|&&
name|manager
operator|->
name|object
operator|&&
name|xcb_window
operator|->
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|!=
name|Qt
operator|::
name|Desktop
condition|)
block|{
name|QDragPrivate
modifier|*
name|o
init|=
name|manager
operator|->
name|dragPrivate
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|->
name|data
operator|->
name|hasFormat
argument_list|(
name|QLatin1String
argument_list|(
name|format
argument_list|)
argument_list|)
condition|)
name|result
operator|=
name|o
operator|->
name|data
operator|->
name|data
argument_list|(
name|QLatin1String
argument_list|(
name|format
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|QList
argument_list|<
name|xcb_atom_t
argument_list|>
name|atoms
init|=
name|drag
operator|->
name|xdnd_types
decl_stmt|;
name|QByteArray
name|encoding
decl_stmt|;
name|xcb_atom_t
name|a
init|=
name|mimeAtomForFormat
argument_list|(
name|c
argument_list|,
name|QLatin1String
argument_list|(
name|format
argument_list|)
argument_list|,
name|requestedType
argument_list|,
name|atoms
argument_list|,
operator|&
name|encoding
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
name|XCB_NONE
condition|)
return|return
name|result
return|;
if|if
condition|(
name|c
operator|->
name|clipboard
argument_list|()
operator|->
name|getSelectionOwner
argument_list|(
name|drag
operator|->
name|connection
argument_list|()
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndSelection
argument_list|)
argument_list|)
operator|==
name|XCB_NONE
condition|)
return|return
name|result
return|;
comment|// should never happen?
name|xcb_atom_t
name|xdnd_selection
init|=
name|c
operator|->
name|atom
argument_list|(
name|QXcbAtom
operator|::
name|XdndSelection
argument_list|)
decl_stmt|;
name|result
operator|=
name|c
operator|->
name|clipboard
argument_list|()
operator|->
name|getSelection
argument_list|(
name|xdnd_selection
argument_list|,
name|a
argument_list|,
name|xdnd_selection
argument_list|)
expr_stmt|;
return|return
name|mimeConvertToFormat
argument_list|(
name|c
argument_list|,
name|a
argument_list|,
name|result
argument_list|,
name|QLatin1String
argument_list|(
name|format
argument_list|)
argument_list|,
name|requestedType
argument_list|,
name|encoding
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hasFormat_sys
name|bool
name|QDropData
operator|::
name|hasFormat_sys
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
specifier|const
block|{
return|return
name|formats
argument_list|()
operator|.
name|contains
argument_list|(
name|format
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|formats_sys
name|QStringList
name|QDropData
operator|::
name|formats_sys
parameter_list|()
specifier|const
block|{
name|QStringList
name|formats
decl_stmt|;
comment|//    if (X11->motifdnd_active) {
comment|//        int i = 0;
comment|//        QByteArray fmt;
comment|//        while (!(fmt = X11->motifdndFormat(i)).isEmpty()) {
comment|//            formats.append(QLatin1String(fmt));
comment|//            ++i;
comment|//        }
comment|//    } else {
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|drag
operator|->
name|xdnd_types
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|f
init|=
name|mimeAtomToString
argument_list|(
name|drag
operator|->
name|connection
argument_list|()
argument_list|,
name|drag
operator|->
name|xdnd_types
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|formats
operator|.
name|contains
argument_list|(
name|f
argument_list|)
condition|)
name|formats
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
comment|//    }
return|return
name|formats
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
