begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QXCBCLIPBOARD_H
end_ifndef
begin_define
DECL|macro|QXCBCLIPBOARD_H
define|#
directive|define
name|QXCBCLIPBOARD_H
end_define
begin_include
include|#
directive|include
file|<qpa/qplatformclipboard.h>
end_include
begin_include
include|#
directive|include
file|<qxcbobject.h>
end_include
begin_include
include|#
directive|include
file|<xcb/xcb.h>
end_include
begin_include
include|#
directive|include
file|<xcb/xfixes.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
DECL|variable|QXcbConnection
name|class
name|QXcbConnection
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXcbScreen
name|class
name|QXcbScreen
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXcbClipboardMime
name|class
name|QXcbClipboardMime
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXcbObject
name|class
name|QXcbClipboard
range|:
name|public
name|QXcbObject
decl_stmt|,
name|public
name|QPlatformClipboard
block|{
name|public
label|:
name|QXcbClipboard
argument_list|(
name|QXcbConnection
operator|*
name|connection
argument_list|)
expr_stmt|;
operator|~
name|QXcbClipboard
argument_list|()
expr_stmt|;
name|QMimeData
modifier|*
name|mimeData
argument_list|(
name|QClipboard
operator|::
name|Mode
name|mode
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|void
name|setMimeData
argument_list|(
name|QMimeData
operator|*
name|data
argument_list|,
name|QClipboard
operator|::
name|Mode
name|mode
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|supportsMode
argument_list|(
name|QClipboard
operator|::
name|Mode
name|mode
argument_list|)
decl|const
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|ownsMode
argument_list|(
name|QClipboard
operator|::
name|Mode
name|mode
argument_list|)
decl|const
name|Q_DECL_OVERRIDE
decl_stmt|;
name|QXcbScreen
operator|*
name|screen
argument_list|()
specifier|const
expr_stmt|;
name|xcb_window_t
name|requestor
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setRequestor
parameter_list|(
name|xcb_window_t
name|window
parameter_list|)
function_decl|;
name|xcb_window_t
name|owner
argument_list|()
specifier|const
expr_stmt|;
name|void
name|handleSelectionRequest
parameter_list|(
name|xcb_selection_request_event_t
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|handleSelectionClearRequest
parameter_list|(
name|xcb_selection_clear_event_t
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|handleXFixesSelectionRequest
parameter_list|(
name|xcb_xfixes_selection_notify_event_t
modifier|*
name|event
parameter_list|)
function_decl|;
name|bool
name|clipboardReadProperty
parameter_list|(
name|xcb_window_t
name|win
parameter_list|,
name|xcb_atom_t
name|property
parameter_list|,
name|bool
name|deleteProperty
parameter_list|,
name|QByteArray
modifier|*
name|buffer
parameter_list|,
name|int
modifier|*
name|size
parameter_list|,
name|xcb_atom_t
modifier|*
name|type
parameter_list|,
name|int
modifier|*
name|format
parameter_list|)
function_decl|;
name|QByteArray
name|clipboardReadIncrementalProperty
parameter_list|(
name|xcb_window_t
name|win
parameter_list|,
name|xcb_atom_t
name|property
parameter_list|,
name|int
name|nbytes
parameter_list|,
name|bool
name|nullterm
parameter_list|)
function_decl|;
name|QByteArray
name|getDataInFormat
parameter_list|(
name|xcb_atom_t
name|modeAtom
parameter_list|,
name|xcb_atom_t
name|fmtatom
parameter_list|)
function_decl|;
name|void
name|setProcessIncr
parameter_list|(
name|bool
name|process
parameter_list|)
block|{
name|m_incr_active
operator|=
name|process
expr_stmt|;
block|}
name|bool
name|processIncr
parameter_list|()
block|{
return|return
name|m_incr_active
return|;
block|}
name|void
name|incrTransactionPeeker
parameter_list|(
name|xcb_generic_event_t
modifier|*
name|ge
parameter_list|,
name|bool
modifier|&
name|accepted
parameter_list|)
function_decl|;
name|xcb_window_t
name|getSelectionOwner
argument_list|(
name|xcb_atom_t
name|atom
argument_list|)
decl|const
decl_stmt|;
name|QByteArray
name|getSelection
parameter_list|(
name|xcb_atom_t
name|selection
parameter_list|,
name|xcb_atom_t
name|target
parameter_list|,
name|xcb_atom_t
name|property
parameter_list|,
name|xcb_timestamp_t
name|t
init|=
literal|0
parameter_list|)
function_decl|;
name|private
label|:
name|xcb_generic_event_t
modifier|*
name|waitForClipboardEvent
parameter_list|(
name|xcb_window_t
name|win
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|timeout
parameter_list|,
name|bool
name|checkManager
init|=
name|false
parameter_list|)
function_decl|;
name|xcb_atom_t
name|sendTargetsSelection
parameter_list|(
name|QMimeData
modifier|*
name|d
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|property
parameter_list|)
function_decl|;
name|xcb_atom_t
name|sendSelection
parameter_list|(
name|QMimeData
modifier|*
name|d
parameter_list|,
name|xcb_atom_t
name|target
parameter_list|,
name|xcb_window_t
name|window
parameter_list|,
name|xcb_atom_t
name|property
parameter_list|)
function_decl|;
name|xcb_atom_t
name|atomForMode
argument_list|(
name|QClipboard
operator|::
name|Mode
name|mode
argument_list|)
decl|const
decl_stmt|;
name|QClipboard
operator|::
name|Mode
name|modeForAtom
argument_list|(
argument|xcb_atom_t atom
argument_list|)
specifier|const
expr_stmt|;
comment|// Selection and Clipboard
name|QXcbClipboardMime
modifier|*
name|m_xClipboard
index|[
literal|2
index|]
decl_stmt|;
name|QMimeData
modifier|*
name|m_clientClipboard
index|[
literal|2
index|]
decl_stmt|;
name|xcb_timestamp_t
name|m_timestamp
index|[
literal|2
index|]
decl_stmt|;
name|xcb_window_t
name|m_requestor
decl_stmt|;
name|xcb_window_t
name|m_owner
decl_stmt|;
specifier|static
specifier|const
name|int
name|clipboard_timeout
decl_stmt|;
name|bool
name|m_incr_active
decl_stmt|;
name|bool
name|m_clipboard_closing
decl_stmt|;
name|xcb_timestamp_t
name|m_incr_receive_time
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CLIPBOARD
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QXCBCLIPBOARD_H
end_comment
end_unit
