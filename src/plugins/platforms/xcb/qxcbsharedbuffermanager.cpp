begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_USE_XCB_SHARED_GRAPHICS_CACHE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qxcbsharedbuffermanager.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/quuid.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qimage.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SHAREDGRAPHICSCACHE_MAX_MEMORY_USED
argument_list|)
end_if
begin_define
DECL|macro|SHAREDGRAPHICSCACHE_MAX_MEMORY_USED
define|#
directive|define
name|SHAREDGRAPHICSCACHE_MAX_MEMORY_USED
value|16 * 1024 * 1024
end_define
begin_comment
DECL|macro|SHAREDGRAPHICSCACHE_MAX_MEMORY_USED
comment|// 16 MB limit
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SHAREDGRAPHICSCACHE_MAX_TEXTURES_PER_CACHE
argument_list|)
end_if
begin_define
DECL|macro|SHAREDGRAPHICSCACHE_MAX_TEXTURES_PER_CACHE
define|#
directive|define
name|SHAREDGRAPHICSCACHE_MAX_TEXTURES_PER_CACHE
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SHAREDGRAPHICSCACHE_TEXTURE_SIZE
argument_list|)
end_if
begin_define
DECL|macro|SHAREDGRAPHICSCACHE_TEXTURE_SIZE
define|#
directive|define
name|SHAREDGRAPHICSCACHE_TEXTURE_SIZE
value|2048
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|SHAREDBUFFERMANAGER_DEBUG
define|#
directive|define
name|SHAREDBUFFERMANAGER_DEBUG
value|1
end_define
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QXcbSharedBufferManager
name|QXcbSharedBufferManager
operator|::
name|QXcbSharedBufferManager
parameter_list|()
member_init_list|:
name|m_memoryUsed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_mostRecentlyUsed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_leastRecentlyUsed
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QXcbSharedBufferManager
name|QXcbSharedBufferManager
operator|::
name|~
name|QXcbSharedBufferManager
parameter_list|()
block|{
block|{
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|Buffer
modifier|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|m_buffers
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|m_buffers
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|Buffer
modifier|*
name|buffer
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
operator|delete
name|buffer
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
block|}
block|{
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|Items
modifier|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|m_items
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|m_items
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|Items
modifier|*
name|items
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|QHash
argument_list|<
name|quint32
argument_list|,
name|Item
modifier|*
argument_list|>
operator|::
name|const_iterator
name|itemIt
init|=
name|items
operator|->
name|items
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|itemIt
operator|!=
name|items
operator|->
name|items
operator|.
name|constEnd
argument_list|()
condition|)
block|{
operator|delete
name|itemIt
operator|.
name|value
argument_list|()
expr_stmt|;
operator|++
name|itemIt
expr_stmt|;
block|}
operator|delete
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
end_destructor
begin_function
DECL|function|getBufferForItem
name|void
name|QXcbSharedBufferManager
operator|::
name|getBufferForItem
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|cacheId
parameter_list|,
name|quint32
name|itemId
parameter_list|,
name|Buffer
modifier|*
modifier|*
name|buffer
parameter_list|,
name|int
modifier|*
name|x
parameter_list|,
name|int
modifier|*
name|y
parameter_list|)
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|m_currentCacheId
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Call endSharedBufferAction before accessing data"
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|buffer
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|x
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|y
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Items
modifier|*
name|items
init|=
name|itemsForCache
argument_list|(
name|cacheId
argument_list|)
decl_stmt|;
name|Item
modifier|*
name|item
init|=
name|items
operator|->
name|items
operator|.
name|value
argument_list|(
name|itemId
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|0
condition|)
block|{
operator|*
name|buffer
operator|=
name|item
operator|->
name|buffer
expr_stmt|;
operator|*
name|x
operator|=
name|item
operator|->
name|x
expr_stmt|;
operator|*
name|y
operator|=
name|item
operator|->
name|y
expr_stmt|;
block|}
else|else
block|{
operator|*
name|buffer
operator|=
literal|0
expr_stmt|;
operator|*
name|x
operator|=
operator|-
literal|1
expr_stmt|;
operator|*
name|y
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|serializeBuffer
name|QPair
argument_list|<
name|QByteArray
argument_list|,
name|int
argument_list|>
name|QXcbSharedBufferManager
operator|::
name|serializeBuffer
parameter_list|(
name|QSharedMemory
modifier|*
name|buffer
parameter_list|)
specifier|const
block|{
name|Q_ASSERT_X
argument_list|(
name|m_currentCacheId
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Call endSharedBufferAction before accessing data"
argument_list|)
expr_stmt|;
return|return
name|qMakePair
argument_list|(
name|buffer
operator|->
name|key
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|beginSharedBufferAction
name|void
name|QXcbSharedBufferManager
operator|::
name|beginSharedBufferAction
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|cacheId
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::beginSharedBufferAction() called for %s"
argument_list|,
name|cacheId
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|m_currentCacheId
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|cacheId
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|m_pendingInvalidatedItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_pendingReadyItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_pendingMissingItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_currentCacheId
operator|=
name|cacheId
expr_stmt|;
block|}
end_function
begin_function
DECL|function|requestItems
name|void
name|QXcbSharedBufferManager
operator|::
name|requestItems
parameter_list|(
specifier|const
name|QSet
argument_list|<
name|quint32
argument_list|>
modifier|&
name|itemIds
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::requestItems for %d items"
argument_list|,
name|itemIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT_X
argument_list|(
operator|!
name|m_currentCacheId
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Call beginSharedBufferAction before requesting items"
argument_list|)
expr_stmt|;
name|Items
modifier|*
name|items
init|=
name|itemsForCache
argument_list|(
name|m_currentCacheId
argument_list|)
decl_stmt|;
name|QSet
argument_list|<
name|quint32
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|itemIds
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|itemIds
operator|.
name|constEnd
argument_list|()
condition|)
block|{
if|if
condition|(
name|items
operator|->
name|items
operator|.
name|contains
argument_list|(
operator|*
name|it
argument_list|)
condition|)
name|m_pendingReadyItems
index|[
name|m_currentCacheId
index|]
operator|.
name|insert
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
else|else
name|m_pendingMissingItems
index|[
name|m_currentCacheId
index|]
operator|.
name|insert
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|releaseItems
name|void
name|QXcbSharedBufferManager
operator|::
name|releaseItems
parameter_list|(
specifier|const
name|QSet
argument_list|<
name|quint32
argument_list|>
modifier|&
name|itemIds
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::releaseItems for %d items"
argument_list|,
name|itemIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Items
modifier|*
name|items
init|=
name|itemsForCache
argument_list|(
name|m_currentCacheId
argument_list|)
decl_stmt|;
name|QSet
argument_list|<
name|quint32
argument_list|>
operator|::
name|const_iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|itemIds
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|itemIds
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|Item
modifier|*
name|item
init|=
name|items
operator|->
name|items
operator|.
name|value
argument_list|(
operator|*
name|it
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|0
condition|)
name|pushItemToBack
argument_list|(
name|items
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|m_pendingReadyItems
index|[
name|m_currentCacheId
index|]
operator|.
name|remove
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
name|m_pendingMissingItems
index|[
name|m_currentCacheId
index|]
operator|.
name|remove
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insertItem
name|void
name|QXcbSharedBufferManager
operator|::
name|insertItem
parameter_list|(
name|quint32
name|itemId
parameter_list|,
name|uchar
modifier|*
name|data
parameter_list|,
name|int
name|itemWidth
parameter_list|,
name|int
name|itemHeight
parameter_list|)
block|{
name|Q_ASSERT_X
argument_list|(
operator|!
name|m_currentCacheId
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|Q_FUNC_INFO
argument_list|,
literal|"Call beginSharedBufferAction before inserting items"
argument_list|)
expr_stmt|;
name|Items
modifier|*
name|items
init|=
name|itemsForCache
argument_list|(
name|m_currentCacheId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|items
operator|->
name|items
operator|.
name|contains
argument_list|(
name|itemId
argument_list|)
condition|)
block|{
name|Buffer
modifier|*
name|sharedBuffer
init|=
literal|0
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
literal|0
decl_stmt|;
name|findAvailableBuffer
argument_list|(
name|itemWidth
argument_list|,
name|itemHeight
argument_list|,
operator|&
name|sharedBuffer
argument_list|,
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|)
expr_stmt|;
name|copyIntoBuffer
argument_list|(
name|sharedBuffer
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|itemWidth
argument_list|,
name|itemHeight
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|//        static int counter=0;
comment|//        QString fileName = QString::fromLatin1("buffer%1.png").arg(counter++);
comment|//        saveBuffer(sharedBuffer, fileName);
name|Item
modifier|*
name|item
init|=
operator|new
name|Item
decl_stmt|;
name|item
operator|->
name|itemId
operator|=
name|itemId
expr_stmt|;
name|item
operator|->
name|buffer
operator|=
name|sharedBuffer
expr_stmt|;
name|item
operator|->
name|x
operator|=
name|x
expr_stmt|;
name|item
operator|->
name|y
operator|=
name|y
expr_stmt|;
name|items
operator|->
name|items
index|[
name|itemId
index|]
operator|=
name|item
expr_stmt|;
name|touchItem
argument_list|(
name|items
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|endSharedBufferAction
name|void
name|QXcbSharedBufferManager
operator|::
name|endSharedBufferAction
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::endSharedBufferAction() called for %s"
argument_list|,
name|m_currentCacheId
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
operator|!
name|m_currentCacheId
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do an extra validation pass on the invalidated items since they may have been re-inserted
comment|// after they were invalidated
if|if
condition|(
name|m_pendingInvalidatedItems
operator|.
name|contains
argument_list|(
name|m_currentCacheId
argument_list|)
condition|)
block|{
name|QSet
argument_list|<
name|quint32
argument_list|>
modifier|&
name|invalidatedItems
init|=
name|m_pendingInvalidatedItems
index|[
name|m_currentCacheId
index|]
decl_stmt|;
name|QSet
argument_list|<
name|quint32
argument_list|>
operator|::
name|iterator
name|it
init|=
name|invalidatedItems
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|invalidatedItems
operator|.
name|end
argument_list|()
condition|)
block|{
name|Items
modifier|*
name|items
init|=
name|m_items
operator|.
name|value
argument_list|(
name|m_currentCacheId
argument_list|)
decl_stmt|;
if|if
condition|(
name|items
operator|->
name|items
operator|.
name|contains
argument_list|(
operator|*
name|it
argument_list|)
condition|)
block|{
name|m_pendingReadyItems
index|[
name|m_currentCacheId
index|]
operator|.
name|insert
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
name|it
operator|=
name|invalidatedItems
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
name|m_currentCacheId
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pushItemToBack
name|void
name|QXcbSharedBufferManager
operator|::
name|pushItemToBack
parameter_list|(
name|Items
modifier|*
name|items
parameter_list|,
name|Item
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|items
operator|->
name|leastRecentlyUsed
operator|==
name|item
condition|)
return|return;
if|if
condition|(
name|item
operator|->
name|next
operator|!=
literal|0
condition|)
name|item
operator|->
name|next
operator|->
name|prev
operator|=
name|item
operator|->
name|prev
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|prev
operator|!=
literal|0
condition|)
name|item
operator|->
name|prev
operator|->
name|next
operator|=
name|item
operator|->
name|next
expr_stmt|;
if|if
condition|(
name|items
operator|->
name|mostRecentlyUsed
operator|==
name|item
condition|)
name|items
operator|->
name|mostRecentlyUsed
operator|=
name|item
operator|->
name|prev
expr_stmt|;
if|if
condition|(
name|items
operator|->
name|leastRecentlyUsed
operator|!=
literal|0
condition|)
name|items
operator|->
name|leastRecentlyUsed
operator|->
name|prev
operator|=
name|item
expr_stmt|;
name|item
operator|->
name|prev
operator|=
literal|0
expr_stmt|;
name|item
operator|->
name|next
operator|=
name|items
operator|->
name|leastRecentlyUsed
expr_stmt|;
name|items
operator|->
name|leastRecentlyUsed
operator|=
name|item
expr_stmt|;
if|if
condition|(
name|items
operator|->
name|mostRecentlyUsed
operator|==
literal|0
condition|)
name|items
operator|->
name|mostRecentlyUsed
operator|=
name|item
expr_stmt|;
block|}
end_function
begin_function
DECL|function|touchItem
name|void
name|QXcbSharedBufferManager
operator|::
name|touchItem
parameter_list|(
name|Items
modifier|*
name|items
parameter_list|,
name|Item
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|items
operator|->
name|mostRecentlyUsed
operator|==
name|item
condition|)
return|return;
if|if
condition|(
name|item
operator|->
name|next
operator|!=
literal|0
condition|)
name|item
operator|->
name|next
operator|->
name|prev
operator|=
name|item
operator|->
name|prev
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|prev
operator|!=
literal|0
condition|)
name|item
operator|->
name|prev
operator|->
name|next
operator|=
name|item
operator|->
name|next
expr_stmt|;
if|if
condition|(
name|items
operator|->
name|leastRecentlyUsed
operator|==
name|item
condition|)
name|items
operator|->
name|leastRecentlyUsed
operator|=
name|item
operator|->
name|next
expr_stmt|;
if|if
condition|(
name|items
operator|->
name|mostRecentlyUsed
operator|!=
literal|0
condition|)
name|items
operator|->
name|mostRecentlyUsed
operator|->
name|next
operator|=
name|item
expr_stmt|;
name|item
operator|->
name|next
operator|=
literal|0
expr_stmt|;
name|item
operator|->
name|prev
operator|=
name|items
operator|->
name|mostRecentlyUsed
expr_stmt|;
name|items
operator|->
name|mostRecentlyUsed
operator|=
name|item
expr_stmt|;
if|if
condition|(
name|items
operator|->
name|leastRecentlyUsed
operator|==
literal|0
condition|)
name|items
operator|->
name|leastRecentlyUsed
operator|=
name|item
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteItem
name|void
name|QXcbSharedBufferManager
operator|::
name|deleteItem
parameter_list|(
name|Items
modifier|*
name|items
parameter_list|,
name|Item
modifier|*
name|item
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|items
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|item
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|items
operator|->
name|mostRecentlyUsed
operator|==
name|item
condition|)
name|items
operator|->
name|mostRecentlyUsed
operator|=
name|item
operator|->
name|prev
expr_stmt|;
if|if
condition|(
name|items
operator|->
name|leastRecentlyUsed
operator|==
name|item
condition|)
name|items
operator|->
name|leastRecentlyUsed
operator|=
name|item
operator|->
name|next
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|next
operator|!=
literal|0
condition|)
name|item
operator|->
name|next
operator|->
name|prev
operator|=
name|item
operator|->
name|prev
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|prev
operator|!=
literal|0
condition|)
name|item
operator|->
name|prev
operator|->
name|next
operator|=
name|item
operator|->
name|next
expr_stmt|;
name|m_pendingInvalidatedItems
index|[
name|items
operator|->
name|cacheId
index|]
operator|.
name|insert
argument_list|(
name|item
operator|->
name|itemId
argument_list|)
expr_stmt|;
block|{
name|QHash
argument_list|<
name|quint32
argument_list|,
name|Item
modifier|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|items
operator|->
name|items
operator|.
name|find
argument_list|(
name|item
operator|->
name|itemId
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|items
operator|->
name|items
operator|.
name|end
argument_list|()
operator|&&
name|it
operator|.
name|value
argument_list|()
operator|->
name|itemId
operator|==
name|item
operator|->
name|itemId
condition|)
name|it
operator|=
name|items
operator|->
name|items
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
operator|delete
name|item
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recycleItem
name|void
name|QXcbSharedBufferManager
operator|::
name|recycleItem
parameter_list|(
name|Buffer
modifier|*
modifier|*
name|sharedBuffer
parameter_list|,
name|int
modifier|*
name|glyphX
parameter_list|,
name|int
modifier|*
name|glyphY
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::recycleItem() called for %s"
argument_list|,
name|m_currentCacheId
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Items
modifier|*
name|items
init|=
name|itemsForCache
argument_list|(
name|m_currentCacheId
argument_list|)
decl_stmt|;
name|Item
modifier|*
name|recycledItem
init|=
name|items
operator|->
name|leastRecentlyUsed
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|recycledItem
operator|!=
literal|0
argument_list|)
expr_stmt|;
operator|*
name|sharedBuffer
operator|=
name|recycledItem
operator|->
name|buffer
expr_stmt|;
operator|*
name|glyphX
operator|=
name|recycledItem
operator|->
name|x
expr_stmt|;
operator|*
name|glyphY
operator|=
name|recycledItem
operator|->
name|y
expr_stmt|;
name|deleteItem
argument_list|(
name|items
argument_list|,
name|recycledItem
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|touchBuffer
name|void
name|QXcbSharedBufferManager
operator|::
name|touchBuffer
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::touchBuffer() called for %s"
argument_list|,
name|buffer
operator|->
name|cacheId
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|buffer
operator|==
name|m_mostRecentlyUsed
condition|)
return|return;
if|if
condition|(
name|buffer
operator|->
name|next
operator|!=
literal|0
condition|)
name|buffer
operator|->
name|next
operator|->
name|prev
operator|=
name|buffer
operator|->
name|prev
expr_stmt|;
if|if
condition|(
name|buffer
operator|->
name|prev
operator|!=
literal|0
condition|)
name|buffer
operator|->
name|prev
operator|->
name|next
operator|=
name|buffer
operator|->
name|next
expr_stmt|;
if|if
condition|(
name|m_leastRecentlyUsed
operator|==
name|buffer
condition|)
name|m_leastRecentlyUsed
operator|=
name|buffer
operator|->
name|next
expr_stmt|;
name|buffer
operator|->
name|next
operator|=
literal|0
expr_stmt|;
name|buffer
operator|->
name|prev
operator|=
name|m_mostRecentlyUsed
expr_stmt|;
if|if
condition|(
name|m_mostRecentlyUsed
operator|!=
literal|0
condition|)
name|m_mostRecentlyUsed
operator|->
name|next
operator|=
name|buffer
expr_stmt|;
if|if
condition|(
name|m_leastRecentlyUsed
operator|==
literal|0
condition|)
name|m_leastRecentlyUsed
operator|=
name|buffer
expr_stmt|;
name|m_mostRecentlyUsed
operator|=
name|buffer
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteLeastRecentlyUsed
name|void
name|QXcbSharedBufferManager
operator|::
name|deleteLeastRecentlyUsed
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::deleteLeastRecentlyUsed() called"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|m_leastRecentlyUsed
operator|==
literal|0
condition|)
return|return;
name|Buffer
modifier|*
name|old
init|=
name|m_leastRecentlyUsed
decl_stmt|;
name|m_leastRecentlyUsed
operator|=
name|old
operator|->
name|next
expr_stmt|;
name|m_leastRecentlyUsed
operator|->
name|prev
operator|=
literal|0
expr_stmt|;
name|QByteArray
name|cacheId
init|=
name|old
operator|->
name|cacheId
decl_stmt|;
name|Items
modifier|*
name|items
init|=
name|itemsForCache
argument_list|(
name|cacheId
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|quint32
argument_list|,
name|Item
modifier|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|items
operator|->
name|items
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|items
operator|->
name|items
operator|.
name|end
argument_list|()
condition|)
block|{
name|Item
modifier|*
name|item
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|buffer
operator|==
name|old
condition|)
block|{
name|deleteItem
argument_list|(
name|items
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|it
operator|=
name|items
operator|->
name|items
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
name|m_buffers
operator|.
name|remove
argument_list|(
name|cacheId
argument_list|,
name|old
argument_list|)
expr_stmt|;
name|m_memoryUsed
operator|-=
name|old
operator|->
name|width
operator|*
name|old
operator|->
name|height
operator|*
name|old
operator|->
name|bytesPerPixel
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::deleteLeastRecentlyUsed: Memory used: %d / %d (%6.2f %%)"
argument_list|,
name|m_memoryUsed
argument_list|,
name|SHAREDGRAPHICSCACHE_MAX_MEMORY_USED
argument_list|,
literal|100.0f
operator|*
name|float
argument_list|(
name|m_memoryUsed
argument_list|)
operator|/
name|float
argument_list|(
name|SHAREDGRAPHICSCACHE_MAX_MEMORY_USED
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
operator|delete
name|old
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createNewBuffer
name|QXcbSharedBufferManager
operator|::
name|Buffer
modifier|*
name|QXcbSharedBufferManager
operator|::
name|createNewBuffer
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|cacheId
parameter_list|,
name|int
name|heightRequired
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::createNewBuffer() called for %s"
argument_list|,
name|cacheId
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// ###
comment|// if (bufferCount of cacheId == SHAREDGRAPHICACHE_MAX_TEXTURES_PER_CACHE)
comment|//    deleteLeastRecentlyUsedBufferForCache(cacheId);
comment|// ### Take pixel format into account
while|while
condition|(
name|m_memoryUsed
operator|+
name|SHAREDGRAPHICSCACHE_TEXTURE_SIZE
operator|*
name|heightRequired
operator|>=
name|SHAREDGRAPHICSCACHE_MAX_MEMORY_USED
condition|)
name|deleteLeastRecentlyUsed
argument_list|()
expr_stmt|;
name|Buffer
modifier|*
name|buffer
init|=
name|allocateBuffer
argument_list|(
name|SHAREDGRAPHICSCACHE_TEXTURE_SIZE
argument_list|,
name|heightRequired
argument_list|)
decl_stmt|;
name|buffer
operator|->
name|cacheId
operator|=
name|cacheId
expr_stmt|;
name|buffer
operator|->
name|currentLineMaxHeight
operator|=
literal|0
expr_stmt|;
name|m_buffers
operator|.
name|insert
argument_list|(
name|cacheId
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|qt_next_power_of_two
specifier|static
specifier|inline
name|int
name|qt_next_power_of_two
parameter_list|(
name|int
name|v
parameter_list|)
block|{
name|v
operator|--
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|1
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|2
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|4
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|8
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|16
expr_stmt|;
operator|++
name|v
expr_stmt|;
return|return
name|v
return|;
block|}
end_function
begin_function
DECL|function|resizeBuffer
name|QXcbSharedBufferManager
operator|::
name|Buffer
modifier|*
name|QXcbSharedBufferManager
operator|::
name|resizeBuffer
parameter_list|(
name|Buffer
modifier|*
name|oldBuffer
parameter_list|,
specifier|const
name|QSize
modifier|&
name|newSize
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::resizeBuffer() called for %s (current size: %dx%d, new size: %dx%d)"
argument_list|,
name|oldBuffer
operator|->
name|cacheId
operator|.
name|constData
argument_list|()
argument_list|,
name|oldBuffer
operator|->
name|width
argument_list|,
name|oldBuffer
operator|->
name|height
argument_list|,
name|newSize
operator|.
name|width
argument_list|()
argument_list|,
name|newSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Remove old buffer from lists to avoid deleting it under our feet
if|if
condition|(
name|m_leastRecentlyUsed
operator|==
name|oldBuffer
condition|)
name|m_leastRecentlyUsed
operator|=
name|oldBuffer
operator|->
name|next
expr_stmt|;
if|if
condition|(
name|m_mostRecentlyUsed
operator|==
name|oldBuffer
condition|)
name|m_mostRecentlyUsed
operator|=
name|oldBuffer
operator|->
name|prev
expr_stmt|;
if|if
condition|(
name|oldBuffer
operator|->
name|prev
operator|!=
literal|0
condition|)
name|oldBuffer
operator|->
name|prev
operator|->
name|next
operator|=
name|oldBuffer
operator|->
name|next
expr_stmt|;
if|if
condition|(
name|oldBuffer
operator|->
name|next
operator|!=
literal|0
condition|)
name|oldBuffer
operator|->
name|next
operator|->
name|prev
operator|=
name|oldBuffer
operator|->
name|prev
expr_stmt|;
name|m_memoryUsed
operator|-=
name|oldBuffer
operator|->
name|width
operator|*
name|oldBuffer
operator|->
name|height
operator|*
name|oldBuffer
operator|->
name|bytesPerPixel
expr_stmt|;
name|m_buffers
operator|.
name|remove
argument_list|(
name|oldBuffer
operator|->
name|cacheId
argument_list|,
name|oldBuffer
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::resizeBuffer:            Memory used: %d / %d (%6.2f %%)"
argument_list|,
name|m_memoryUsed
argument_list|,
name|SHAREDGRAPHICSCACHE_MAX_MEMORY_USED
argument_list|,
literal|100.0f
operator|*
name|float
argument_list|(
name|m_memoryUsed
argument_list|)
operator|/
name|float
argument_list|(
name|SHAREDGRAPHICSCACHE_MAX_MEMORY_USED
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Buffer
modifier|*
name|resizedBuffer
init|=
name|createNewBuffer
argument_list|(
name|oldBuffer
operator|->
name|cacheId
argument_list|,
name|newSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|copyIntoBuffer
argument_list|(
name|resizedBuffer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|oldBuffer
operator|->
name|width
argument_list|,
name|oldBuffer
operator|->
name|height
argument_list|,
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|oldBuffer
operator|->
name|buffer
operator|->
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|resizedBuffer
operator|->
name|currentLineMaxHeight
operator|=
name|oldBuffer
operator|->
name|currentLineMaxHeight
expr_stmt|;
name|Items
modifier|*
name|items
init|=
name|itemsForCache
argument_list|(
name|oldBuffer
operator|->
name|cacheId
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|quint32
argument_list|,
name|Item
modifier|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|items
operator|->
name|items
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|items
operator|->
name|items
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|Item
modifier|*
name|item
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|buffer
operator|==
name|oldBuffer
condition|)
block|{
name|m_pendingReadyItems
index|[
name|oldBuffer
operator|->
name|cacheId
index|]
operator|.
name|insert
argument_list|(
name|item
operator|->
name|itemId
argument_list|)
expr_stmt|;
name|item
operator|->
name|buffer
operator|=
name|resizedBuffer
expr_stmt|;
block|}
operator|++
name|it
expr_stmt|;
block|}
name|resizedBuffer
operator|->
name|nextX
operator|=
name|oldBuffer
operator|->
name|nextX
expr_stmt|;
name|resizedBuffer
operator|->
name|nextY
operator|=
name|oldBuffer
operator|->
name|nextY
expr_stmt|;
name|resizedBuffer
operator|->
name|currentLineMaxHeight
operator|=
name|oldBuffer
operator|->
name|currentLineMaxHeight
expr_stmt|;
operator|delete
name|oldBuffer
expr_stmt|;
return|return
name|resizedBuffer
return|;
block|}
end_function
begin_function
DECL|function|findAvailableBuffer
name|void
name|QXcbSharedBufferManager
operator|::
name|findAvailableBuffer
parameter_list|(
name|int
name|itemWidth
parameter_list|,
name|int
name|itemHeight
parameter_list|,
name|Buffer
modifier|*
modifier|*
name|sharedBuffer
parameter_list|,
name|int
modifier|*
name|glyphX
parameter_list|,
name|int
modifier|*
name|glyphY
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|sharedBuffer
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|glyphX
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|glyphY
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QMultiHash
argument_list|<
name|QByteArray
argument_list|,
name|Buffer
modifier|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|m_buffers
operator|.
name|find
argument_list|(
name|m_currentCacheId
argument_list|)
decl_stmt|;
name|int
name|bufferCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|m_buffers
operator|.
name|end
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
name|m_currentCacheId
condition|)
block|{
name|Buffer
modifier|*
name|buffer
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|buffer
operator|->
name|nextX
decl_stmt|;
name|int
name|y
init|=
name|buffer
operator|->
name|nextY
decl_stmt|;
name|int
name|width
init|=
name|buffer
operator|->
name|width
decl_stmt|;
name|int
name|height
init|=
name|buffer
operator|->
name|height
decl_stmt|;
if|if
condition|(
name|x
operator|+
name|itemWidth
operator|<=
name|width
operator|&&
name|y
operator|+
name|itemHeight
operator|<=
name|height
condition|)
block|{
comment|// There is space on the current line, put the item there
name|buffer
operator|->
name|currentLineMaxHeight
operator|=
name|qMax
argument_list|(
name|buffer
operator|->
name|currentLineMaxHeight
argument_list|,
name|itemHeight
argument_list|)
expr_stmt|;
operator|*
name|sharedBuffer
operator|=
name|buffer
expr_stmt|;
operator|*
name|glyphX
operator|=
name|x
expr_stmt|;
operator|*
name|glyphY
operator|=
name|y
expr_stmt|;
name|buffer
operator|->
name|nextX
operator|+=
name|itemWidth
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|itemWidth
operator|<=
name|width
operator|&&
name|y
operator|+
name|buffer
operator|->
name|currentLineMaxHeight
operator|+
name|itemHeight
operator|<=
name|height
condition|)
block|{
comment|// There is space for a new line, put the item on the new line
name|buffer
operator|->
name|nextX
operator|=
literal|0
expr_stmt|;
name|buffer
operator|->
name|nextY
operator|+=
name|buffer
operator|->
name|currentLineMaxHeight
expr_stmt|;
name|buffer
operator|->
name|currentLineMaxHeight
operator|=
literal|0
expr_stmt|;
operator|*
name|sharedBuffer
operator|=
name|buffer
expr_stmt|;
operator|*
name|glyphX
operator|=
name|buffer
operator|->
name|nextX
expr_stmt|;
operator|*
name|glyphY
operator|=
name|buffer
operator|->
name|nextY
expr_stmt|;
name|buffer
operator|->
name|nextX
operator|+=
name|itemWidth
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|y
operator|+
name|buffer
operator|->
name|currentLineMaxHeight
operator|+
name|itemHeight
operator|<=
name|SHAREDGRAPHICSCACHE_TEXTURE_SIZE
condition|)
block|{
comment|// There is space if we resize the buffer, so we do that
name|int
name|newHeight
init|=
name|qt_next_power_of_two
argument_list|(
name|y
operator|+
name|buffer
operator|->
name|currentLineMaxHeight
operator|+
name|itemHeight
argument_list|)
decl_stmt|;
name|buffer
operator|=
name|resizeBuffer
argument_list|(
name|buffer
argument_list|,
name|QSize
argument_list|(
name|width
argument_list|,
name|newHeight
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|->
name|nextX
operator|=
literal|0
expr_stmt|;
name|buffer
operator|->
name|nextY
operator|+=
name|buffer
operator|->
name|currentLineMaxHeight
expr_stmt|;
name|buffer
operator|->
name|currentLineMaxHeight
operator|=
literal|0
expr_stmt|;
operator|*
name|sharedBuffer
operator|=
name|buffer
expr_stmt|;
operator|*
name|glyphX
operator|=
name|buffer
operator|->
name|nextX
expr_stmt|;
operator|*
name|glyphY
operator|=
name|buffer
operator|->
name|nextY
expr_stmt|;
name|buffer
operator|->
name|nextX
operator|+=
name|itemWidth
expr_stmt|;
return|return;
block|}
name|bufferCount
operator|++
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
if|if
condition|(
name|bufferCount
operator|==
name|SHAREDGRAPHICSCACHE_MAX_TEXTURES_PER_CACHE
condition|)
block|{
comment|// There is no space in any buffer, and there is no space for a new buffer
comment|// recycle an old item
name|recycleItem
argument_list|(
name|sharedBuffer
argument_list|,
name|glyphX
argument_list|,
name|glyphY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Create a new buffer for the item
operator|*
name|sharedBuffer
operator|=
name|createNewBuffer
argument_list|(
name|m_currentCacheId
argument_list|,
name|qt_next_power_of_two
argument_list|(
name|itemHeight
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|sharedBuffer
operator|==
literal|0
condition|)
block|{
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|glyphX
operator|=
operator|(
operator|*
name|sharedBuffer
operator|)
operator|->
name|nextX
expr_stmt|;
operator|*
name|glyphY
operator|=
operator|(
operator|*
name|sharedBuffer
operator|)
operator|->
name|nextY
expr_stmt|;
operator|(
operator|*
name|sharedBuffer
operator|)
operator|->
name|nextX
operator|+=
name|itemWidth
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|allocateBuffer
name|QXcbSharedBufferManager
operator|::
name|Buffer
modifier|*
name|QXcbSharedBufferManager
operator|::
name|allocateBuffer
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|Buffer
modifier|*
name|buffer
init|=
operator|new
name|Buffer
decl_stmt|;
name|buffer
operator|->
name|nextX
operator|=
literal|0
expr_stmt|;
name|buffer
operator|->
name|nextY
operator|=
literal|0
expr_stmt|;
name|buffer
operator|->
name|width
operator|=
name|width
expr_stmt|;
name|buffer
operator|->
name|height
operator|=
name|height
expr_stmt|;
name|buffer
operator|->
name|bytesPerPixel
operator|=
literal|1
expr_stmt|;
comment|// ### Use pixel format here
name|buffer
operator|->
name|buffer
operator|=
operator|new
name|QSharedMemory
argument_list|(
name|QUuid
operator|::
name|createUuid
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
name|buffer
operator|->
name|buffer
operator|->
name|create
argument_list|(
name|buffer
operator|->
name|width
operator|*
name|buffer
operator|->
name|height
operator|*
name|buffer
operator|->
name|bytesPerPixel
argument_list|,
name|QSharedMemory
operator|::
name|ReadWrite
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|qWarning
argument_list|(
literal|"SharedBufferManager::findAvailableBuffer: Can't create new buffer (%s)"
argument_list|,
name|qPrintable
argument_list|(
name|buffer
operator|->
name|buffer
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|buffer
expr_stmt|;
return|return
literal|0
return|;
block|}
name|qMemSet
argument_list|(
name|buffer
operator|->
name|buffer
operator|->
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
operator|->
name|buffer
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|m_memoryUsed
operator|+=
name|buffer
operator|->
name|width
operator|*
name|buffer
operator|->
name|height
operator|*
name|buffer
operator|->
name|bytesPerPixel
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::allocateBuffer:          Memory used: %d / %d (%6.2f %%)"
argument_list|,
name|int
argument_list|(
name|m_memoryUsed
argument_list|)
argument_list|,
name|int
argument_list|(
name|SHAREDGRAPHICSCACHE_MAX_MEMORY_USED
argument_list|)
argument_list|,
literal|100.0f
operator|*
name|float
argument_list|(
name|m_memoryUsed
argument_list|)
operator|/
name|float
argument_list|(
name|SHAREDGRAPHICSCACHE_MAX_MEMORY_USED
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|copyIntoBuffer
name|void
name|QXcbSharedBufferManager
operator|::
name|copyIntoBuffer
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|,
name|int
name|bufferX
parameter_list|,
name|int
name|bufferY
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|uchar
modifier|*
name|data
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|SHAREDBUFFERMANAGER_DEBUG
argument_list|)
name|qDebug
argument_list|(
literal|"QXcbSharedBufferManager::copyIntoBuffer() called for %s (coords: %d, %d)"
argument_list|,
name|buffer
operator|->
name|cacheId
operator|.
name|constData
argument_list|()
argument_list|,
name|bufferX
argument_list|,
name|bufferY
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|bufferX
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|bufferX
operator|+
name|width
operator|<=
name|buffer
operator|->
name|width
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|bufferY
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|bufferY
operator|+
name|height
operator|<=
name|buffer
operator|->
name|height
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|dest
init|=
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|buffer
operator|->
name|buffer
operator|->
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|dest
operator|+=
name|bufferX
operator|+
name|bufferY
operator|*
name|buffer
operator|->
name|width
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
operator|++
name|y
control|)
block|{
name|qMemCopy
argument_list|(
name|dest
argument_list|,
name|data
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|data
operator|+=
name|width
expr_stmt|;
name|dest
operator|+=
name|buffer
operator|->
name|width
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|itemsForCache
name|QXcbSharedBufferManager
operator|::
name|Items
modifier|*
name|QXcbSharedBufferManager
operator|::
name|itemsForCache
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|cacheId
parameter_list|)
specifier|const
block|{
name|Items
modifier|*
name|items
init|=
name|m_items
operator|.
name|value
argument_list|(
name|cacheId
argument_list|)
decl_stmt|;
if|if
condition|(
name|items
operator|==
literal|0
condition|)
block|{
name|items
operator|=
operator|new
name|Items
expr_stmt|;
name|items
operator|->
name|cacheId
operator|=
name|cacheId
expr_stmt|;
name|m_items
index|[
name|cacheId
index|]
operator|=
name|items
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_USE_XCB_SHARED_GRAPHICS_CACHE
end_comment
end_unit
