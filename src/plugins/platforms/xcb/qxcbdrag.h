begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QXCBDRAG_H
end_ifndef
begin_define
DECL|macro|QXCBDRAG_H
define|#
directive|define
name|QXCBDRAG_H
end_define
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qplatformdrag_qpa.h>
end_include
begin_include
include|#
directive|include
file|<qnamespace.h>
end_include
begin_include
include|#
directive|include
file|<xcb/xcb.h>
end_include
begin_include
include|#
directive|include
file|<qpoint.h>
end_include
begin_include
include|#
directive|include
file|<qrect.h>
end_include
begin_include
include|#
directive|include
file|<qsharedpointer.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QMouseEvent
name|class
name|QMouseEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWindow
name|class
name|QWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXcbConnection
name|class
name|QXcbConnection
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXcbWindow
name|class
name|QXcbWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDropData
name|class
name|QDropData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QXcbDrag
range|:
name|public
name|QPlatformDrag
block|{
name|public
operator|:
name|QXcbDrag
argument_list|(
name|QXcbConnection
operator|*
name|c
argument_list|)
block|;
operator|~
name|QXcbDrag
argument_list|()
block|;
name|virtual
name|QMimeData
operator|*
name|platformDropData
argument_list|()
block|;
comment|//    virtual Qt::DropAction drag(QDrag *);
name|virtual
name|void
name|startDrag
argument_list|()
block|;
name|virtual
name|void
name|cancel
argument_list|()
block|;
name|virtual
name|void
name|move
argument_list|(
specifier|const
name|QMouseEvent
operator|*
name|me
argument_list|)
block|;
name|virtual
name|void
name|drop
argument_list|(
specifier|const
name|QMouseEvent
operator|*
name|me
argument_list|)
block|;
name|void
name|handleEnter
argument_list|(
name|QWindow
operator|*
name|window
argument_list|,
specifier|const
name|xcb_client_message_event_t
operator|*
name|event
argument_list|)
block|;
name|void
name|handlePosition
argument_list|(
argument|QWindow *w
argument_list|,
argument|const xcb_client_message_event_t *event
argument_list|,
argument|bool passive
argument_list|)
block|;
name|void
name|handleStatus
argument_list|(
argument|QWindow *w
argument_list|,
argument|const xcb_client_message_event_t *event
argument_list|,
argument|bool passive
argument_list|)
block|;
name|void
name|handleLeave
argument_list|(
name|QWindow
operator|*
name|w
argument_list|,
specifier|const
name|xcb_client_message_event_t
operator|*
name|event
argument_list|,
name|bool
comment|/*passive*/
argument_list|)
block|;
name|void
name|handleDrop
argument_list|(
argument|QWindow *
argument_list|,
argument|const xcb_client_message_event_t *event
argument_list|,
argument|bool passive
argument_list|)
block|;
name|bool
name|dndEnable
argument_list|(
argument|QXcbWindow *win
argument_list|,
argument|bool on
argument_list|)
block|;
name|QXcbConnection
operator|*
name|connection
argument_list|()
specifier|const
block|{
return|return
name|m_connection
return|;
block|}
name|private
operator|:
name|friend
name|class
name|QDropData
block|;
name|void
name|handle_xdnd_position
argument_list|(
argument|QWindow *w
argument_list|,
argument|const xcb_client_message_event_t *event
argument_list|,
argument|bool passive
argument_list|)
block|;
name|void
name|handle_xdnd_status
argument_list|(
name|QWindow
operator|*
argument_list|,
specifier|const
name|xcb_client_message_event_t
operator|*
name|event
argument_list|,
name|bool
argument_list|)
block|;
name|Qt
operator|::
name|DropAction
name|toDropAction
argument_list|(
argument|xcb_atom_t atom
argument_list|)
specifier|const
block|;
name|xcb_atom_t
name|toXdndAction
argument_list|(
argument|Qt::DropAction a
argument_list|)
specifier|const
block|;
name|QWeakPointer
operator|<
name|QWindow
operator|>
name|currentWindow
block|;
name|QPoint
name|currentPosition
block|;
name|QXcbConnection
operator|*
name|m_connection
block|;
name|QDropData
operator|*
name|dropData
block|;
name|QWindow
operator|*
name|desktop_proxy
block|;
name|xcb_atom_t
name|xdnd_dragsource
block|;
comment|// the types in this drop. 100 is no good, but at least it's big.
block|enum
block|{
name|xdnd_max_type
operator|=
literal|100
block|}
block|;
name|QList
operator|<
name|xcb_atom_t
operator|>
name|xdnd_types
block|;
name|xcb_timestamp_t
name|target_time
block|;
name|Qt
operator|::
name|DropAction
name|last_target_accepted_action
block|;
comment|// rectangle in which the answer will be the same
name|QRect
name|source_sameanswer
block|;
name|bool
name|waiting_for_status
block|;
comment|// window to send events to (always valid if current_target)
name|xcb_window_t
name|current_proxy_target
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
