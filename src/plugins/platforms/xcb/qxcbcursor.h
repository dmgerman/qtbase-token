begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QXCBCURSOR_H
end_ifndef
begin_define
DECL|macro|QXCBCURSOR_H
define|#
directive|define
name|QXCBCURSOR_H
end_define
begin_include
include|#
directive|include
file|<qpa/qplatformcursor.h>
end_include
begin_include
include|#
directive|include
file|"qxcbscreen.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_struct
DECL|struct|QXcbCursorCacheKey
struct|struct
name|QXcbCursorCacheKey
block|{
name|explicit
name|QXcbCursorCacheKey
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|c
parameter_list|)
function_decl|;
DECL|function|QXcbCursorCacheKey
name|explicit
name|QXcbCursorCacheKey
argument_list|(
name|Qt
operator|::
name|CursorShape
name|s
argument_list|)
range|:
name|shape
argument_list|(
name|s
argument_list|)
decl_stmt|,
name|bitmapCacheKey
argument_list|(
literal|0
argument_list|)
decl_stmt|,
name|maskCacheKey
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|QXcbCursorCacheKey
name|QXcbCursorCacheKey
argument_list|()
operator|:
name|shape
argument_list|(
name|Qt
operator|::
name|CustomCursor
argument_list|)
operator|,
name|bitmapCacheKey
argument_list|(
literal|0
argument_list|)
operator|,
name|maskCacheKey
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|shape
name|Qt
operator|::
name|CursorShape
name|shape
expr_stmt|;
DECL|member|bitmapCacheKey
name|qint64
name|bitmapCacheKey
decl_stmt|;
DECL|member|maskCacheKey
name|qint64
name|maskCacheKey
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QXcbCursorCacheKey
operator|&
name|k1
operator|,
specifier|const
name|QXcbCursorCacheKey
operator|&
name|k2
operator|)
block|{
return|return
name|k1
operator|.
name|shape
operator|==
name|k2
operator|.
name|shape
operator|&&
name|k1
operator|.
name|bitmapCacheKey
operator|==
name|k2
operator|.
name|bitmapCacheKey
operator|&&
name|k1
operator|.
name|maskCacheKey
operator|==
name|k2
operator|.
name|maskCacheKey
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|uint
name|qHash
parameter_list|(
specifier|const
name|QXcbCursorCacheKey
modifier|&
name|k
parameter_list|,
name|uint
name|seed
parameter_list|)
function|Q_DECL_NOTHROW
block|{
return|return
operator|(
name|uint
argument_list|(
name|k
operator|.
name|shape
argument_list|)
operator|+
name|uint
argument_list|(
name|k
operator|.
name|bitmapCacheKey
argument_list|)
operator|+
name|uint
argument_list|(
name|k
operator|.
name|maskCacheKey
argument_list|)
operator|)
operator|^
name|seed
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_CURSOR
end_comment
begin_decl_stmt
DECL|variable|QXcbObject
name|class
name|QXcbCursor
range|:
name|public
name|QXcbObject
decl_stmt|,
name|public
name|QPlatformCursor
block|{
name|public
label|:
name|QXcbCursor
argument_list|(
name|QXcbConnection
operator|*
name|conn
argument_list|,
name|QXcbScreen
operator|*
name|screen
argument_list|)
expr_stmt|;
operator|~
name|QXcbCursor
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|void
name|changeCursor
argument_list|(
name|QCursor
operator|*
name|cursor
argument_list|,
name|QWindow
operator|*
name|widget
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
endif|#
directive|endif
name|QPoint
name|pos
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
expr_stmt|;
name|void
name|setPos
argument_list|(
specifier|const
name|QPoint
operator|&
name|pos
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
specifier|static
name|void
name|queryPointer
parameter_list|(
name|QXcbConnection
modifier|*
name|c
parameter_list|,
name|QXcbVirtualDesktop
modifier|*
modifier|*
name|virtualDesktop
parameter_list|,
name|QPoint
modifier|*
name|pos
parameter_list|,
name|int
modifier|*
name|keybMask
init|=
literal|0
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|xcb_cursor_t
name|xcbCursor
argument_list|(
specifier|const
name|QCursor
operator|&
name|c
argument_list|)
decl|const
block|{
return|return
name|m_cursorHash
operator|.
name|value
argument_list|(
name|QXcbCursorCacheKey
argument_list|(
name|c
argument_list|)
argument_list|,
name|xcb_cursor_t
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|private
label|:
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
typedef|typedef
name|QHash
operator|<
name|QXcbCursorCacheKey
operator|,
name|xcb_cursor_t
operator|>
name|CursorHash
expr_stmt|;
name|xcb_cursor_t
name|createFontCursor
parameter_list|(
name|int
name|cshape
parameter_list|)
function_decl|;
name|xcb_cursor_t
name|createBitmapCursor
parameter_list|(
name|QCursor
modifier|*
name|cursor
parameter_list|)
function_decl|;
name|xcb_cursor_t
name|createNonStandardCursor
parameter_list|(
name|int
name|cshape
parameter_list|)
function_decl|;
endif|#
directive|endif
name|QXcbScreen
modifier|*
name|m_screen
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|CursorHash
name|m_cursorHash
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|XCB_USE_XLIB
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
specifier|static
name|void
name|cursorThemePropertyChanged
parameter_list|(
name|QXcbVirtualDesktop
modifier|*
name|screen
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|name
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|property
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
endif|#
directive|endif
name|bool
name|m_gtkCursorThemeInitialized
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
