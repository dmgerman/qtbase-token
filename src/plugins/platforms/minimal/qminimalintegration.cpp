begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qminimalintegration.h"
end_include
begin_include
include|#
directive|include
file|"qminimalbackingstore.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformwindow.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformfontdatabase.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qgenericunixeventdispatcher_p.h>
end_include
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_elif
begin_include
include|#
directive|include
file|<QtCore/private/qeventdispatcher_winrt_p.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<QtCore/private/qeventdispatcher_win_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|debugBackingStoreEnvironmentVariable
specifier|static
specifier|const
name|char
name|debugBackingStoreEnvironmentVariable
index|[]
init|=
literal|"QT_DEBUG_BACKINGSTORE"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|parseOptions
specifier|static
specifier|inline
name|unsigned
name|parseOptions
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paramList
parameter_list|)
block|{
name|unsigned
name|options
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|param
decl|,
name|paramList
control|)
block|{
if|if
condition|(
name|param
operator|==
name|QLatin1String
argument_list|(
literal|"enable_fonts"
argument_list|)
condition|)
name|options
operator||=
name|QMinimalIntegration
operator|::
name|EnableFonts
expr_stmt|;
block|}
return|return
name|options
return|;
block|}
end_function
begin_constructor
DECL|function|QMinimalIntegration
name|QMinimalIntegration
operator|::
name|QMinimalIntegration
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|parameters
parameter_list|)
member_init_list|:
name|m_dummyFontDatabase
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_options
argument_list|(
name|parseOptions
argument_list|(
name|parameters
argument_list|)
argument_list|)
block|{
if|if
condition|(
name|qEnvironmentVariableIsSet
argument_list|(
name|debugBackingStoreEnvironmentVariable
argument_list|)
operator|&&
name|qEnvironmentVariableIntValue
argument_list|(
name|debugBackingStoreEnvironmentVariable
argument_list|)
operator|>
literal|0
condition|)
block|{
name|m_options
operator||=
name|DebugBackingStore
operator||
name|EnableFonts
expr_stmt|;
block|}
name|QMinimalScreen
modifier|*
name|mPrimaryScreen
init|=
operator|new
name|QMinimalScreen
argument_list|()
decl_stmt|;
name|mPrimaryScreen
operator|->
name|mGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|240
argument_list|,
literal|320
argument_list|)
expr_stmt|;
name|mPrimaryScreen
operator|->
name|mDepth
operator|=
literal|32
expr_stmt|;
name|mPrimaryScreen
operator|->
name|mFormat
operator|=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
expr_stmt|;
name|screenAdded
argument_list|(
name|mPrimaryScreen
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QMinimalIntegration
name|QMinimalIntegration
operator|::
name|~
name|QMinimalIntegration
parameter_list|()
block|{
operator|delete
name|m_dummyFontDatabase
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|hasCapability
name|bool
name|QMinimalIntegration
operator|::
name|hasCapability
parameter_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|cap
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cap
condition|)
block|{
case|case
name|ThreadedPixmaps
case|:
return|return
literal|true
return|;
case|case
name|MultipleWindows
case|:
return|return
literal|true
return|;
default|default:
return|return
name|QPlatformIntegration
operator|::
name|hasCapability
argument_list|(
name|cap
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|// Dummy font database that does not scan the fonts directory to be
end_comment
begin_comment
comment|// used for command line tools like qmlplugindump that do not create windows
end_comment
begin_comment
comment|// unless DebugBackingStore is activated.
end_comment
begin_class
DECL|class|DummyFontDatabase
class|class
name|DummyFontDatabase
super|:
specifier|public
name|QPlatformFontDatabase
block|{
public|public:
DECL|function|populateFontDatabase
specifier|virtual
name|void
name|populateFontDatabase
parameter_list|()
block|{}
block|}
class|;
end_class
begin_function
DECL|function|fontDatabase
name|QPlatformFontDatabase
modifier|*
name|QMinimalIntegration
operator|::
name|fontDatabase
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_options
operator|&
name|EnableFonts
condition|)
return|return
name|QPlatformIntegration
operator|::
name|fontDatabase
argument_list|()
return|;
if|if
condition|(
operator|!
name|m_dummyFontDatabase
condition|)
name|m_dummyFontDatabase
operator|=
operator|new
name|DummyFontDatabase
expr_stmt|;
return|return
name|m_dummyFontDatabase
return|;
block|}
end_function
begin_function
DECL|function|createPlatformWindow
name|QPlatformWindow
modifier|*
name|QMinimalIntegration
operator|::
name|createPlatformWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|QPlatformWindow
modifier|*
name|w
init|=
operator|new
name|QPlatformWindow
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|w
operator|->
name|requestActivateWindow
argument_list|()
expr_stmt|;
return|return
name|w
return|;
block|}
end_function
begin_function
DECL|function|createPlatformBackingStore
name|QPlatformBackingStore
modifier|*
name|QMinimalIntegration
operator|::
name|createPlatformBackingStore
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QMinimalBackingStore
argument_list|(
name|window
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createEventDispatcher
name|QAbstractEventDispatcher
modifier|*
name|QMinimalIntegration
operator|::
name|createEventDispatcher
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
ifndef|#
directive|ifndef
name|Q_OS_WINRT
return|return
operator|new
name|QEventDispatcherWin32
return|;
else|#
directive|else
comment|// !Q_OS_WINRT
return|return
operator|new
name|QEventDispatcherWinRT
return|;
endif|#
directive|endif
comment|// Q_OS_WINRT
else|#
directive|else
return|return
name|createUnixEventDispatcher
argument_list|()
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|instance
name|QMinimalIntegration
modifier|*
name|QMinimalIntegration
operator|::
name|instance
parameter_list|()
block|{
return|return
cast|static_cast
argument_list|<
name|QMinimalIntegration
operator|*
argument_list|>
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
