begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbbackingstore.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbintegration.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbblitter.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbconvenience.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbwindow.h"
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_blitter_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QDirectFbBackingStore
name|QDirectFbBackingStore
operator|::
name|QDirectFbBackingStore
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QPlatformBackingStore
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_pixmap
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_pmdata
argument_list|(
literal|0
argument_list|)
block|{
name|IDirectFBWindow
modifier|*
name|dfbWindow
init|=
cast|static_cast
argument_list|<
name|QDirectFbWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|dfbWindow
argument_list|()
decl_stmt|;
name|dfbWindow
operator|->
name|GetSurface
argument_list|(
name|dfbWindow
argument_list|,
name|m_dfbSurface
operator|.
name|outPtr
argument_list|()
argument_list|)
expr_stmt|;
comment|//WRONGSIZE
name|QDirectFbBlitter
modifier|*
name|blitter
init|=
operator|new
name|QDirectFbBlitter
argument_list|(
name|window
operator|->
name|size
argument_list|()
argument_list|,
name|m_dfbSurface
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|m_pmdata
operator|=
operator|new
name|QDirectFbBlitterPlatformPixmap
expr_stmt|;
name|m_pmdata
operator|->
name|setBlittable
argument_list|(
name|blitter
argument_list|)
expr_stmt|;
name|m_pixmap
operator|.
name|reset
argument_list|(
operator|new
name|QPixmap
argument_list|(
name|m_pmdata
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QDirectFbBackingStore
operator|::
name|paintDevice
parameter_list|()
block|{
return|return
name|m_pixmap
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QDirectFbBackingStore
operator|::
name|flush
parameter_list|(
name|QWindow
modifier|*
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|m_pmdata
operator|->
name|blittable
argument_list|()
operator|->
name|unlock
argument_list|()
expr_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QRect
name|rect
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DFBRegion
name|dfbReg
argument_list|(
name|rect
operator|.
name|x
argument_list|()
operator|+
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|right
argument_list|()
operator|+
name|offset
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|m_dfbSurface
operator|->
name|Flip
argument_list|(
name|m_dfbSurface
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|dfbReg
argument_list|,
name|DFBSurfaceFlipFlags
argument_list|(
name|DSFLIP_BLIT
operator||
name|DSFLIP_ONSYNC
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resize
name|void
name|QDirectFbBackingStore
operator|::
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|reg
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|reg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|m_pmdata
operator|->
name|width
argument_list|()
operator|==
name|size
operator|.
name|width
argument_list|()
operator|)
operator|&&
operator|(
name|m_pmdata
operator|->
name|height
argument_list|()
operator|==
name|size
operator|.
name|height
argument_list|()
operator|)
condition|)
return|return;
name|QDirectFbBlitter
modifier|*
name|blitter
init|=
operator|new
name|QDirectFbBlitter
argument_list|(
name|size
argument_list|,
name|m_dfbSurface
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|m_pmdata
operator|->
name|setBlittable
argument_list|(
name|blitter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scrollSurface
specifier|static
specifier|inline
name|void
name|scrollSurface
parameter_list|(
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
specifier|const
name|DFBRectangle
name|rect
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|surface
operator|->
name|Blit
argument_list|(
name|surface
argument_list|,
name|surface
argument_list|,
operator|&
name|rect
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|dx
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|dy
argument_list|)
expr_stmt|;
specifier|const
name|DFBRegion
name|region
argument_list|(
name|rect
operator|.
name|x
operator|+
name|dx
argument_list|,
name|rect
operator|.
name|y
operator|+
name|dy
argument_list|,
name|r
operator|.
name|right
argument_list|()
operator|+
name|dx
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
operator|+
name|dy
argument_list|)
decl_stmt|;
name|surface
operator|->
name|Flip
argument_list|(
name|surface
argument_list|,
operator|&
name|region
argument_list|,
name|DFBSurfaceFlipFlags
argument_list|(
name|DSFLIP_BLIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QDirectFbBackingStore
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|m_pmdata
operator|->
name|blittable
argument_list|()
operator|->
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_dfbSurface
operator|||
name|area
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|m_dfbSurface
operator|->
name|SetBlittingFlags
argument_list|(
name|m_dfbSurface
operator|.
name|data
argument_list|()
argument_list|,
name|DSBLIT_NOFX
argument_list|)
expr_stmt|;
if|if
condition|(
name|area
operator|.
name|rectCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|scrollSurface
argument_list|(
name|m_dfbSurface
operator|.
name|data
argument_list|()
argument_list|,
name|area
operator|.
name|boundingRect
argument_list|()
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|area
operator|.
name|rects
argument_list|()
decl_stmt|;
specifier|const
name|int
name|n
init|=
name|rects
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|scrollSurface
argument_list|(
name|m_dfbSurface
operator|.
name|data
argument_list|()
argument_list|,
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
