begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbblitter.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbconvenience.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_blitter_p.h>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<directfb.h>
end_include
begin_constructor
DECL|function|QDirectFbBlitter
name|QDirectFbBlitter
operator|::
name|QDirectFbBlitter
parameter_list|(
specifier|const
name|QSize
modifier|&
name|rect
parameter_list|,
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|)
member_init_list|:
name|QBlittable
argument_list|(
name|rect
argument_list|,
name|QBlittable
operator|::
name|Capabilities
argument_list|(
name|QBlittable
operator|::
name|SolidRectCapability
operator||
name|QBlittable
operator|::
name|SourcePixmapCapability
operator||
name|QBlittable
operator|::
name|SourceOverPixmapCapability
operator||
name|QBlittable
operator|::
name|SourceOverScaledPixmapCapability
argument_list|)
argument_list|)
block|{
if|if
condition|(
name|surface
condition|)
block|{
name|m_surface
operator|=
name|surface
expr_stmt|;
block|}
else|else
block|{
name|DFBSurfaceDescription
name|surfaceDesc
decl_stmt|;
name|memset
argument_list|(
operator|&
name|surfaceDesc
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBSurfaceDescription
argument_list|)
argument_list|)
expr_stmt|;
name|surfaceDesc
operator|.
name|width
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|surfaceDesc
operator|.
name|height
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
name|surfaceDesc
operator|.
name|caps
operator|=
name|DSCAPS_PREMULTIPLIED
expr_stmt|;
name|surfaceDesc
operator|.
name|pixelformat
operator|=
name|DSPF_ARGB
expr_stmt|;
name|surfaceDesc
operator|.
name|flags
operator|=
name|DFBSurfaceDescriptionFlags
argument_list|(
name|DSDESC_WIDTH
operator||
name|DSDESC_HEIGHT
operator||
name|DSDESC_CAPS
operator||
name|DSDESC_PIXELFORMAT
argument_list|)
expr_stmt|;
name|IDirectFB
modifier|*
name|dfb
init|=
name|QDirectFbConvenience
operator|::
name|dfbInterface
argument_list|()
decl_stmt|;
name|dfb
operator|->
name|CreateSurface
argument_list|(
name|dfb
argument_list|,
operator|&
name|surfaceDesc
argument_list|,
operator|&
name|m_surface
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|Clear
argument_list|(
name|m_surface
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFbBlitter
name|QDirectFbBlitter
operator|::
name|~
name|QDirectFbBlitter
parameter_list|()
block|{
name|unlock
argument_list|()
expr_stmt|;
name|m_surface
operator|->
name|Release
argument_list|(
name|m_surface
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|fillRect
name|void
name|QDirectFbBlitter
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|m_surface
operator|->
name|SetColor
argument_list|(
name|m_surface
argument_list|,
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|,
name|color
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
comment|//    When the blitter api supports non opaque blits, also remember to change
comment|//    qpixmap_blitter.cpp::fill
comment|//    DFBSurfaceDrawingFlags drawingFlags = color.alpha() ? DSDRAW_BLEND : DSDRAW_NOFX;
comment|//    m_surface->SetDrawingFlags(m_surface, drawingFlags);
name|m_surface
operator|->
name|SetDrawingFlags
argument_list|(
name|m_surface
argument_list|,
name|DSDRAW_NOFX
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|FillRectangle
argument_list|(
name|m_surface
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QDirectFbBlitter
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
block|{
name|QPixmapData
modifier|*
name|data
init|=
name|pixmap
operator|.
name|pixmapData
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|width
argument_list|()
operator|&&
name|data
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|data
operator|->
name|classId
argument_list|()
operator|==
name|QPixmapData
operator|::
name|BlitterClass
argument_list|)
expr_stmt|;
name|QBlittablePixmapData
modifier|*
name|blitPm
init|=
cast|static_cast
argument_list|<
name|QBlittablePixmapData
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QDirectFbBlitter
modifier|*
name|dfbBlitter
init|=
cast|static_cast
argument_list|<
name|QDirectFbBlitter
operator|*
argument_list|>
argument_list|(
name|blitPm
operator|->
name|blittable
argument_list|()
argument_list|)
decl_stmt|;
name|dfbBlitter
operator|->
name|unlock
argument_list|()
expr_stmt|;
name|IDirectFBSurface
modifier|*
name|s
init|=
name|dfbBlitter
operator|->
name|m_surface
decl_stmt|;
name|DFBSurfaceBlittingFlags
name|blittingFlags
init|=
name|DSBLIT_NOFX
decl_stmt|;
name|DFBSurfacePorterDuffRule
name|porterDuff
init|=
name|DSPD_SRC
decl_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|hasAlpha
argument_list|()
condition|)
block|{
name|blittingFlags
operator|=
name|DSBLIT_BLEND_ALPHACHANNEL
expr_stmt|;
name|porterDuff
operator|=
name|DSPD_SRC_OVER
expr_stmt|;
block|}
name|m_surface
operator|->
name|SetBlittingFlags
argument_list|(
name|m_surface
argument_list|,
name|DFBSurfaceBlittingFlags
argument_list|(
name|blittingFlags
argument_list|)
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|SetPorterDuff
argument_list|(
name|m_surface
argument_list|,
name|porterDuff
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|SetDstBlendFunction
argument_list|(
name|m_surface
argument_list|,
name|DSBF_INVSRCALPHA
argument_list|)
expr_stmt|;
specifier|const
name|DFBRectangle
name|sRect
init|=
block|{
name|srcRect
operator|.
name|x
argument_list|()
block|,
name|srcRect
operator|.
name|y
argument_list|()
block|,
name|srcRect
operator|.
name|width
argument_list|()
block|,
name|srcRect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|DFBResult
name|result
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|width
argument_list|()
operator|==
name|srcRect
operator|.
name|width
argument_list|()
operator|&&
name|rect
operator|.
name|height
argument_list|()
operator|==
name|srcRect
operator|.
name|height
argument_list|()
condition|)
name|result
operator|=
name|m_surface
operator|->
name|Blit
argument_list|(
name|m_surface
argument_list|,
name|s
argument_list|,
operator|&
name|sRect
argument_list|,
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
specifier|const
name|DFBRectangle
name|dRect
init|=
block|{
name|rect
operator|.
name|x
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|result
operator|=
name|m_surface
operator|->
name|StretchBlit
argument_list|(
name|m_surface
argument_list|,
name|s
argument_list|,
operator|&
name|sRect
argument_list|,
operator|&
name|dRect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBError
argument_list|(
literal|"QDirectFBBlitter::drawPixmap()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doLock
name|QImage
modifier|*
name|QDirectFbBlitter
operator|::
name|doLock
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|m_surface
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|size
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|void
modifier|*
name|mem
decl_stmt|;
name|int
name|bpl
decl_stmt|;
specifier|const
name|DFBResult
name|result
init|=
name|m_surface
operator|->
name|Lock
argument_list|(
name|m_surface
argument_list|,
name|DFBSurfaceLockFlags
argument_list|(
name|DSLF_WRITE
operator||
name|DSLF_READ
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|mem
argument_list|)
argument_list|,
operator|&
name|bpl
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|DFB_OK
condition|)
block|{
name|DFBSurfacePixelFormat
name|dfbFormat
decl_stmt|;
name|DFBSurfaceCapabilities
name|dfbCaps
decl_stmt|;
name|m_surface
operator|->
name|GetPixelFormat
argument_list|(
name|m_surface
argument_list|,
operator|&
name|dfbFormat
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|GetCapabilities
argument_list|(
name|m_surface
argument_list|,
operator|&
name|dfbCaps
argument_list|)
expr_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|QDirectFbConvenience
operator|::
name|imageFormatFromSurfaceFormat
argument_list|(
name|dfbFormat
argument_list|,
name|dfbCaps
argument_list|)
decl_stmt|;
name|int
name|w
decl_stmt|,
name|h
decl_stmt|;
name|m_surface
operator|->
name|GetSize
argument_list|(
name|m_surface
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|m_image
operator|=
name|QImage
argument_list|(
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|mem
argument_list|)
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|bpl
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DirectFBError
argument_list|(
literal|"Failed to lock image"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
operator|&
name|m_image
return|;
block|}
end_function
begin_function
DECL|function|doUnlock
name|void
name|QDirectFbBlitter
operator|::
name|doUnlock
parameter_list|()
block|{
name|m_surface
operator|->
name|Unlock
argument_list|(
name|m_surface
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
