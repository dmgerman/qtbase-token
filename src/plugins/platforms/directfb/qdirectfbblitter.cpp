begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbblitter.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbconvenience.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_blitter_p.h>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<directfb.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|dfb_blitter_capabilities
specifier|static
name|QBlittable
operator|::
name|Capabilities
name|dfb_blitter_capabilities
parameter_list|()
block|{
return|return
name|QBlittable
operator|::
name|Capabilities
argument_list|(
name|QBlittable
operator|::
name|SolidRectCapability
operator||
name|QBlittable
operator|::
name|SourcePixmapCapability
operator||
name|QBlittable
operator|::
name|SourceOverPixmapCapability
operator||
name|QBlittable
operator|::
name|SourceOverScaledPixmapCapability
operator||
name|QBlittable
operator|::
name|AlphaFillRectCapability
operator||
name|QBlittable
operator|::
name|OpacityPixmapCapability
operator||
name|QBlittable
operator|::
name|DrawScaledCachedGlyphsCapability
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QDirectFbBlitter
name|QDirectFbBlitter
operator|::
name|QDirectFbBlitter
parameter_list|(
specifier|const
name|QSize
modifier|&
name|rect
parameter_list|,
name|IDirectFBSurface
modifier|*
name|surface
parameter_list|)
member_init_list|:
name|QBlittable
argument_list|(
name|rect
argument_list|,
name|dfb_blitter_capabilities
argument_list|()
argument_list|)
member_init_list|,
name|m_surface
argument_list|(
name|surface
argument_list|)
member_init_list|,
name|m_debugPaint
argument_list|(
literal|false
argument_list|)
block|{
name|m_surface
operator|->
name|AddRef
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|DFBSurfaceCapabilities
name|surfaceCaps
decl_stmt|;
name|m_surface
operator|->
name|GetCapabilities
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|surfaceCaps
argument_list|)
expr_stmt|;
name|m_premult
operator|=
operator|(
name|surfaceCaps
operator|&
name|DSCAPS_PREMULTIPLIED
operator|)
expr_stmt|;
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QT_DIRECTFB_BLITTER_DEBUGPAINT"
argument_list|)
operator|.
name|toInt
argument_list|()
condition|)
name|m_debugPaint
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QDirectFbBlitter
name|QDirectFbBlitter
operator|::
name|QDirectFbBlitter
parameter_list|(
specifier|const
name|QSize
modifier|&
name|rect
parameter_list|,
name|bool
name|alpha
parameter_list|)
member_init_list|:
name|QBlittable
argument_list|(
name|rect
argument_list|,
name|dfb_blitter_capabilities
argument_list|()
argument_list|)
member_init_list|,
name|m_premult
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_debugPaint
argument_list|(
literal|false
argument_list|)
block|{
name|DFBSurfaceDescription
name|surfaceDesc
decl_stmt|;
name|memset
argument_list|(
operator|&
name|surfaceDesc
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DFBSurfaceDescription
argument_list|)
argument_list|)
expr_stmt|;
name|surfaceDesc
operator|.
name|width
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|surfaceDesc
operator|.
name|height
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
comment|// force alpha format to get AlphaFillRectCapability and ExtendedPixmapCapability support
name|alpha
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|alpha
condition|)
block|{
name|m_premult
operator|=
literal|true
expr_stmt|;
name|surfaceDesc
operator|.
name|caps
operator|=
name|DSCAPS_PREMULTIPLIED
expr_stmt|;
name|surfaceDesc
operator|.
name|pixelformat
operator|=
name|QDirectFbBlitter
operator|::
name|alphaPixmapFormat
argument_list|()
expr_stmt|;
name|surfaceDesc
operator|.
name|flags
operator|=
name|DFBSurfaceDescriptionFlags
argument_list|(
name|DSDESC_WIDTH
operator||
name|DSDESC_HEIGHT
operator||
name|DSDESC_CAPS
operator||
name|DSDESC_PIXELFORMAT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|surfaceDesc
operator|.
name|flags
operator|=
name|DFBSurfaceDescriptionFlags
argument_list|(
name|DSDESC_WIDTH
operator||
name|DSDESC_HEIGHT
operator||
name|DSDESC_PIXELFORMAT
argument_list|)
expr_stmt|;
name|surfaceDesc
operator|.
name|pixelformat
operator|=
name|QDirectFbBlitter
operator|::
name|pixmapFormat
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QT_DIRECTFB_BLITTER_DEBUGPAINT"
argument_list|)
operator|.
name|toInt
argument_list|()
condition|)
name|m_debugPaint
operator|=
literal|true
expr_stmt|;
name|IDirectFB
modifier|*
name|dfb
init|=
name|QDirectFbConvenience
operator|::
name|dfbInterface
argument_list|()
decl_stmt|;
name|dfb
operator|->
name|CreateSurface
argument_list|(
name|dfb
argument_list|,
operator|&
name|surfaceDesc
argument_list|,
name|m_surface
operator|.
name|outPtr
argument_list|()
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|Clear
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFbBlitter
name|QDirectFbBlitter
operator|::
name|~
name|QDirectFbBlitter
parameter_list|()
block|{
name|unlock
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|alphaPixmapFormat
name|DFBSurfacePixelFormat
name|QDirectFbBlitter
operator|::
name|alphaPixmapFormat
parameter_list|()
block|{
return|return
name|DSPF_ARGB
return|;
block|}
end_function
begin_function
DECL|function|pixmapFormat
name|DFBSurfacePixelFormat
name|QDirectFbBlitter
operator|::
name|pixmapFormat
parameter_list|()
block|{
return|return
name|DSPF_RGB32
return|;
block|}
end_function
begin_function
DECL|function|selectPixmapFormat
name|DFBSurfacePixelFormat
name|QDirectFbBlitter
operator|::
name|selectPixmapFormat
parameter_list|(
name|bool
name|withAlpha
parameter_list|)
block|{
return|return
name|withAlpha
condition|?
name|alphaPixmapFormat
argument_list|()
else|:
name|pixmapFormat
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QDirectFbBlitter
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|alphaFillRect
argument_list|(
name|rect
argument_list|,
name|color
argument_list|,
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QDirectFbBlitter
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
block|{
name|drawPixmapOpacity
argument_list|(
name|rect
argument_list|,
name|pixmap
argument_list|,
name|srcRect
argument_list|,
name|QPainter
operator|::
name|CompositionMode_SourceOver
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|alphaFillRect
name|void
name|QDirectFbBlitter
operator|::
name|alphaFillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
name|QPainter
operator|::
name|CompositionMode
name|cmode
parameter_list|)
block|{
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|DFBResult
name|result
decl_stmt|;
comment|// check parameters
name|rect
operator|.
name|toRect
argument_list|()
operator|.
name|getRect
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|w
operator|<=
literal|0
operator|)
operator|||
operator|(
name|h
operator|<=
literal|0
operator|)
condition|)
return|return;
if|if
condition|(
operator|(
name|cmode
operator|==
name|QPainter
operator|::
name|CompositionMode_Source
operator|)
operator|||
operator|(
name|color
operator|.
name|alpha
argument_list|()
operator|==
literal|255
operator|)
condition|)
block|{
comment|// CompositionMode_Source case or CompositionMode_SourceOver with opaque color
name|m_surface
operator|->
name|SetDrawingFlags
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DFBSurfaceDrawingFlags
argument_list|(
name|m_premult
condition|?
operator|(
name|DSDRAW_NOFX
operator||
name|DSDRAW_SRC_PREMULTIPLY
operator|)
else|:
name|DSDRAW_NOFX
argument_list|)
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|SetPorterDuff
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DSPD_SRC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// CompositionMode_SourceOver case
comment|// check if operation is useless
if|if
condition|(
name|color
operator|.
name|alpha
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|m_surface
operator|->
name|SetDrawingFlags
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DFBSurfaceDrawingFlags
argument_list|(
name|m_premult
condition|?
operator|(
name|DSDRAW_BLEND
operator||
name|DSDRAW_SRC_PREMULTIPLY
operator|)
else|:
name|DSDRAW_BLEND
argument_list|)
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|SetPorterDuff
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DSPD_SRC_OVER
argument_list|)
expr_stmt|;
block|}
comment|// set color
name|m_surface
operator|->
name|SetColor
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|,
name|color
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
comment|// perform fill
name|result
operator|=
name|m_surface
operator|->
name|FillRectangle
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBError
argument_list|(
literal|"QDirectFBBlitter::alphaFillRect()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_debugPaint
condition|)
name|drawDebugRect
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmapOpacity
name|void
name|QDirectFbBlitter
operator|::
name|drawPixmapOpacity
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|subrect
parameter_list|,
name|QPainter
operator|::
name|CompositionMode
name|cmode
parameter_list|,
name|qreal
name|opacity
parameter_list|)
block|{
name|QRect
name|sQRect
init|=
name|subrect
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|QRect
name|dQRect
init|=
name|rect
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|DFBRectangle
name|sRect
init|=
block|{
name|sQRect
operator|.
name|x
argument_list|()
block|,
name|sQRect
operator|.
name|y
argument_list|()
block|,
name|sQRect
operator|.
name|width
argument_list|()
block|,
name|sQRect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|DFBRectangle
name|dRect
init|=
block|{
name|dQRect
operator|.
name|x
argument_list|()
block|,
name|dQRect
operator|.
name|y
argument_list|()
block|,
name|dQRect
operator|.
name|width
argument_list|()
block|,
name|dQRect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|DFBResult
name|result
decl_stmt|;
comment|// skip if dst too small
if|if
condition|(
operator|(
name|dRect
operator|.
name|w
operator|<=
literal|0
operator|)
operator|||
operator|(
name|dRect
operator|.
name|h
operator|<=
literal|0
operator|)
condition|)
return|return;
comment|// correct roundings if needed
if|if
condition|(
name|sRect
operator|.
name|w
operator|<=
literal|0
condition|)
name|sRect
operator|.
name|w
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|sRect
operator|.
name|h
operator|<=
literal|0
condition|)
name|sRect
operator|.
name|h
operator|=
literal|1
expr_stmt|;
name|QDirectFbBlitterPlatformPixmap
modifier|*
name|blitPm
init|=
cast|static_cast
argument_list|<
name|QDirectFbBlitterPlatformPixmap
operator|*
argument_list|>
argument_list|(
name|pixmap
operator|.
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|QDirectFbBlitter
modifier|*
name|dfbBlitter
init|=
cast|static_cast
argument_list|<
name|QDirectFbBlitter
operator|*
argument_list|>
argument_list|(
name|blitPm
operator|->
name|blittable
argument_list|()
argument_list|)
decl_stmt|;
name|dfbBlitter
operator|->
name|unlock
argument_list|()
expr_stmt|;
name|IDirectFBSurface
modifier|*
name|s
init|=
name|dfbBlitter
operator|->
name|m_surface
operator|.
name|data
argument_list|()
decl_stmt|;
name|DFBSurfaceBlittingFlags
name|blittingFlags
init|=
name|DFBSurfaceBlittingFlags
argument_list|(
name|DSBLIT_BLEND_ALPHACHANNEL
argument_list|)
decl_stmt|;
name|DFBSurfacePorterDuffRule
name|porterDuff
init|=
operator|(
name|cmode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
operator|)
condition|?
name|DSPD_SRC_OVER
else|:
name|DSPD_SRC
decl_stmt|;
if|if
condition|(
name|opacity
operator|!=
literal|1.0
condition|)
block|{
name|blittingFlags
operator|=
name|DFBSurfaceBlittingFlags
argument_list|(
name|blittingFlags
operator||
name|DSBLIT_BLEND_COLORALPHA
operator||
operator|(
name|m_premult
condition|?
name|DSBLIT_SRC_PREMULTCOLOR
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|SetColor
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
literal|0xff
argument_list|,
call|(
name|u8
call|)
argument_list|(
name|opacity
operator|*
literal|255.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m_surface
operator|->
name|SetBlittingFlags
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DFBSurfaceBlittingFlags
argument_list|(
name|blittingFlags
argument_list|)
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|SetPorterDuff
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|porterDuff
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmode
operator|==
name|QPainter
operator|::
name|CompositionMode_SourceOver
condition|)
name|m_surface
operator|->
name|SetDstBlendFunction
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DSBF_INVSRCALPHA
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|sRect
operator|.
name|w
operator|==
name|dRect
operator|.
name|w
operator|)
operator|&&
operator|(
name|sRect
operator|.
name|h
operator|==
name|dRect
operator|.
name|h
operator|)
condition|)
block|{
name|result
operator|=
name|m_surface
operator|->
name|Blit
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|s
argument_list|,
operator|&
name|sRect
argument_list|,
name|dRect
operator|.
name|x
argument_list|,
name|dRect
operator|.
name|y
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBError
argument_list|(
literal|"QDirectFBBlitter::drawPixmapOpacity()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_debugPaint
condition|)
name|drawDebugRect
argument_list|(
name|QRect
argument_list|(
name|dRect
operator|.
name|x
argument_list|,
name|dRect
operator|.
name|y
argument_list|,
name|sRect
operator|.
name|w
argument_list|,
name|sRect
operator|.
name|h
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|m_surface
operator|->
name|StretchBlit
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|s
argument_list|,
operator|&
name|sRect
argument_list|,
operator|&
name|dRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBError
argument_list|(
literal|"QDirectFBBlitter::drawPixmapOpacity()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_debugPaint
condition|)
name|drawDebugRect
argument_list|(
name|QRect
argument_list|(
name|dRect
operator|.
name|x
argument_list|,
name|dRect
operator|.
name|y
argument_list|,
name|dRect
operator|.
name|w
argument_list|,
name|dRect
operator|.
name|h
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawCachedGlyphs
name|bool
name|QDirectFbBlitter
operator|::
name|drawCachedGlyphs
parameter_list|(
specifier|const
name|QPaintEngineState
modifier|*
name|state
parameter_list|,
name|QFontEngine
operator|::
name|GlyphFormat
name|glyphFormat
parameter_list|,
name|int
name|numGlyphs
parameter_list|,
specifier|const
name|glyph_t
modifier|*
name|glyphs
parameter_list|,
specifier|const
name|QFixedPoint
modifier|*
name|positions
parameter_list|,
name|QFontEngine
modifier|*
name|fontEngine
parameter_list|)
block|{
name|void
modifier|*
name|cacheKey
init|=
name|QDirectFbConvenience
operator|::
name|dfbInterface
argument_list|()
decl_stmt|;
name|QDirectFbTextureGlyphCache
modifier|*
name|cache
init|=
cast|static_cast
argument_list|<
name|QDirectFbTextureGlyphCache
operator|*
argument_list|>
argument_list|(
name|fontEngine
operator|->
name|glyphCache
argument_list|(
name|cacheKey
argument_list|,
name|glyphFormat
argument_list|,
name|state
operator|->
name|transform
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cache
condition|)
block|{
name|cache
operator|=
operator|new
name|QDirectFbTextureGlyphCache
argument_list|(
name|glyphFormat
argument_list|,
name|state
operator|->
name|transform
argument_list|()
argument_list|)
expr_stmt|;
name|fontEngine
operator|->
name|setGlyphCache
argument_list|(
name|cacheKey
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
name|cache
operator|->
name|populate
argument_list|(
name|fontEngine
argument_list|,
name|numGlyphs
argument_list|,
name|glyphs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
name|cache
operator|->
name|fillInPendingGlyphs
argument_list|()
expr_stmt|;
if|if
condition|(
name|cache
operator|->
name|image
argument_list|()
operator|.
name|width
argument_list|()
operator|==
literal|0
operator|||
name|cache
operator|->
name|image
argument_list|()
operator|.
name|height
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|false
return|;
specifier|const
name|int
name|margin
init|=
name|fontEngine
operator|->
name|glyphMargin
argument_list|(
name|glyphFormat
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|DFBRectangle
argument_list|,
literal|64
argument_list|>
name|sourceRects
argument_list|(
name|numGlyphs
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|DFBPoint
argument_list|,
literal|64
argument_list|>
name|destPoints
argument_list|(
name|numGlyphs
argument_list|)
decl_stmt|;
name|int
name|nGlyphs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numGlyphs
condition|;
operator|++
name|i
control|)
block|{
name|QFixed
name|subPixelPosition
init|=
name|fontEngine
operator|->
name|subPixelPositionForX
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
decl_stmt|;
name|QTextureGlyphCache
operator|::
name|GlyphAndSubPixelPosition
name|glyph
argument_list|(
name|glyphs
index|[
name|i
index|]
argument_list|,
name|subPixelPosition
argument_list|)
decl_stmt|;
specifier|const
name|QTextureGlyphCache
operator|::
name|Coord
modifier|&
name|c
init|=
name|cache
operator|->
name|coords
index|[
name|glyph
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
name|int
name|x
init|=
name|qFloor
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|x
argument_list|)
operator|+
name|c
operator|.
name|baseLineX
operator|-
name|margin
decl_stmt|;
name|int
name|y
init|=
name|qRound
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|y
argument_list|)
operator|-
name|c
operator|.
name|baseLineY
operator|-
name|margin
decl_stmt|;
comment|// printf("drawing [%d %d %d %d] baseline [%d %d], glyph: %d, to: %d %d, pos: %d %d\n",
comment|//        c.x, c.y,
comment|//        c.w, c.h,
comment|//        c.baseLineX, c.baseLineY,
comment|//        glyphs[i],
comment|//        x, y,
comment|//        positions[i].x.toInt(), positions[i].y.toInt());
name|sourceRects
index|[
name|nGlyphs
index|]
operator|.
name|x
operator|=
name|c
operator|.
name|x
expr_stmt|;
name|sourceRects
index|[
name|nGlyphs
index|]
operator|.
name|y
operator|=
name|c
operator|.
name|y
expr_stmt|;
name|sourceRects
index|[
name|nGlyphs
index|]
operator|.
name|w
operator|=
name|c
operator|.
name|w
expr_stmt|;
name|sourceRects
index|[
name|nGlyphs
index|]
operator|.
name|h
operator|=
name|c
operator|.
name|h
expr_stmt|;
name|destPoints
index|[
name|nGlyphs
index|]
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|destPoints
index|[
name|nGlyphs
index|]
operator|.
name|y
operator|=
name|y
expr_stmt|;
operator|++
name|nGlyphs
expr_stmt|;
block|}
specifier|const
name|QColor
name|color
init|=
name|state
operator|->
name|pen
argument_list|()
operator|.
name|color
argument_list|()
decl_stmt|;
name|m_surface
operator|->
name|SetColor
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|,
name|color
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|SetSrcBlendFunction
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DSBF_SRCALPHA
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|SetDstBlendFunction
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DSBF_INVSRCALPHA
argument_list|)
expr_stmt|;
name|int
name|flags
init|=
name|DSBLIT_BLEND_ALPHACHANNEL
operator||
name|DSBLIT_COLORIZE
decl_stmt|;
if|if
condition|(
name|color
operator|.
name|alpha
argument_list|()
operator|!=
literal|0xff
condition|)
name|flags
operator||=
name|DSBLIT_BLEND_COLORALPHA
expr_stmt|;
name|m_surface
operator|->
name|SetBlittingFlags
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DFBSurfaceBlittingFlags
argument_list|(
name|flags
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QRasterPaintEngineState
modifier|*
name|rs
init|=
cast|static_cast
argument_list|<
specifier|const
name|QRasterPaintEngineState
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|rs
operator|->
name|clip
operator|&&
name|rs
operator|->
name|clip
operator|->
name|enabled
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|rs
operator|->
name|clip
operator|->
name|hasRectClip
argument_list|)
expr_stmt|;
name|DFBRegion
name|dfbClip
decl_stmt|;
name|dfbClip
operator|.
name|x1
operator|=
name|rs
operator|->
name|clip
operator|->
name|clipRect
operator|.
name|x
argument_list|()
expr_stmt|;
name|dfbClip
operator|.
name|y1
operator|=
name|rs
operator|->
name|clip
operator|->
name|clipRect
operator|.
name|y
argument_list|()
expr_stmt|;
name|dfbClip
operator|.
name|x2
operator|=
name|rs
operator|->
name|clip
operator|->
name|clipRect
operator|.
name|right
argument_list|()
expr_stmt|;
name|dfbClip
operator|.
name|y2
operator|=
name|rs
operator|->
name|clip
operator|->
name|clipRect
operator|.
name|bottom
argument_list|()
expr_stmt|;
name|m_surface
operator|->
name|SetClip
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|dfbClip
argument_list|)
expr_stmt|;
block|}
name|m_surface
operator|->
name|BatchBlit
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|cache
operator|->
name|sourceSurface
argument_list|()
argument_list|,
name|sourceRects
operator|.
name|constData
argument_list|()
argument_list|,
name|destPoints
operator|.
name|constData
argument_list|()
argument_list|,
name|nGlyphs
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_debugPaint
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nGlyphs
condition|;
operator|++
name|i
control|)
block|{
name|drawDebugRect
argument_list|(
name|QRect
argument_list|(
name|destPoints
index|[
name|i
index|]
operator|.
name|x
argument_list|,
name|destPoints
index|[
name|i
index|]
operator|.
name|y
argument_list|,
name|sourceRects
index|[
name|i
index|]
operator|.
name|w
argument_list|,
name|sourceRects
index|[
name|i
index|]
operator|.
name|h
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rs
operator|->
name|clip
operator|&&
name|rs
operator|->
name|clip
operator|->
name|enabled
condition|)
name|m_surface
operator|->
name|SetClip
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|doLock
name|QImage
modifier|*
name|QDirectFbBlitter
operator|::
name|doLock
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|m_surface
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|size
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|void
modifier|*
name|mem
decl_stmt|;
name|int
name|bpl
decl_stmt|;
specifier|const
name|DFBResult
name|result
init|=
name|m_surface
operator|->
name|Lock
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DFBSurfaceLockFlags
argument_list|(
name|DSLF_WRITE
operator||
name|DSLF_READ
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|mem
argument_list|)
argument_list|,
operator|&
name|bpl
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|DFB_OK
condition|)
block|{
name|DFBSurfacePixelFormat
name|dfbFormat
decl_stmt|;
name|DFBSurfaceCapabilities
name|dfbCaps
decl_stmt|;
name|m_surface
operator|->
name|GetPixelFormat
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|dfbFormat
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|GetCapabilities
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|dfbCaps
argument_list|)
expr_stmt|;
name|QImage
operator|::
name|Format
name|format
init|=
name|QDirectFbConvenience
operator|::
name|imageFormatFromSurfaceFormat
argument_list|(
name|dfbFormat
argument_list|,
name|dfbCaps
argument_list|)
decl_stmt|;
name|int
name|w
decl_stmt|,
name|h
decl_stmt|;
name|m_surface
operator|->
name|GetSize
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|m_image
operator|=
name|QImage
argument_list|(
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|mem
argument_list|)
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|bpl
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DirectFBError
argument_list|(
literal|"Failed to lock image"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
operator|&
name|m_image
return|;
block|}
end_function
begin_function
DECL|function|fromDataBufferDescription
name|bool
name|QDirectFbBlitterPlatformPixmap
operator|::
name|fromDataBufferDescription
parameter_list|(
specifier|const
name|DFBDataBufferDescription
modifier|&
name|dataBufferDescription
parameter_list|)
block|{
name|DFBResult
name|result
decl_stmt|;
name|IDirectFB
modifier|*
name|dfb
init|=
name|QDirectFbConvenience
operator|::
name|dfbInterface
argument_list|()
decl_stmt|;
comment|// Create a data buffer
name|QDirectFBPointer
argument_list|<
name|IDirectFBDataBuffer
argument_list|>
name|dataBuffer
decl_stmt|;
name|result
operator|=
name|dfb
operator|->
name|CreateDataBuffer
argument_list|(
name|dfb
argument_list|,
operator|&
name|dataBufferDescription
argument_list|,
name|dataBuffer
operator|.
name|outPtr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
name|QDFB_PRETTY
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Create the image provider
name|QDirectFBPointer
argument_list|<
name|IDirectFBImageProvider
argument_list|>
name|provider
decl_stmt|;
name|result
operator|=
name|dataBuffer
operator|->
name|CreateImageProvider
argument_list|(
name|dataBuffer
operator|.
name|data
argument_list|()
argument_list|,
name|provider
operator|.
name|outPtr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
name|QDFB_PRETTY
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Extract image information
name|DFBImageDescription
name|imageDescription
decl_stmt|;
name|result
operator|=
name|provider
operator|->
name|GetImageDescription
argument_list|(
name|provider
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|imageDescription
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
name|QDFB_PRETTY
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Can we handle this directlu?
if|if
condition|(
name|imageDescription
operator|.
name|caps
operator|&
name|DICAPS_COLORKEY
condition|)
return|return
literal|false
return|;
name|DFBSurfaceDescription
name|surfaceDescription
decl_stmt|;
name|result
operator|=
name|provider
operator|->
name|GetSurfaceDescription
argument_list|(
name|provider
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|surfaceDescription
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
name|QDFB_PRETTY
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|m_alpha
operator|=
name|imageDescription
operator|.
name|caps
operator|&
name|DICAPS_ALPHACHANNEL
expr_stmt|;
name|resize
argument_list|(
name|surfaceDescription
operator|.
name|width
argument_list|,
name|surfaceDescription
operator|.
name|height
argument_list|)
expr_stmt|;
comment|// TODO: FIXME; update d
name|result
operator|=
name|provider
operator|->
name|RenderTo
argument_list|(
name|provider
operator|.
name|data
argument_list|()
argument_list|,
name|dfbBlitter
argument_list|()
operator|->
name|dfbSurface
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
name|QDFB_PRETTY
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fromFile
name|bool
name|QDirectFbBlitterPlatformPixmap
operator|::
name|fromFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
comment|// If we can't find the file, pass it on to the base class as it is
comment|// trying harder by appending various extensions to the path.
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|filename
argument_list|)
condition|)
return|return
name|QBlittablePlatformPixmap
operator|::
name|fromFile
argument_list|(
name|filename
argument_list|,
name|format
argument_list|,
name|flags
argument_list|)
return|;
comment|// Stop if there is a requirement for colors
if|if
condition|(
name|flags
operator|!=
name|Qt
operator|::
name|AutoColor
condition|)
return|return
name|QBlittablePlatformPixmap
operator|::
name|fromFile
argument_list|(
name|filename
argument_list|,
name|format
argument_list|,
name|flags
argument_list|)
return|;
comment|// Deal with resources
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
condition|)
return|return
name|QBlittablePlatformPixmap
operator|::
name|fromFile
argument_list|(
name|filename
argument_list|,
name|format
argument_list|,
name|flags
argument_list|)
return|;
comment|// Try to use directfb to load it.
name|DFBDataBufferDescription
name|description
decl_stmt|;
name|description
operator|.
name|flags
operator|=
name|DBDESC_FILE
expr_stmt|;
specifier|const
name|QByteArray
name|fileNameData
init|=
name|filename
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|description
operator|.
name|file
operator|=
name|fileNameData
operator|.
name|constData
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromDataBufferDescription
argument_list|(
name|description
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// Fallback
return|return
name|QBlittablePlatformPixmap
operator|::
name|fromFile
argument_list|(
name|filename
argument_list|,
name|format
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|doUnlock
name|void
name|QDirectFbBlitter
operator|::
name|doUnlock
parameter_list|()
block|{
name|m_surface
operator|->
name|Unlock
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawDebugRect
name|void
name|QDirectFbBlitter
operator|::
name|drawDebugRect
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|w
decl_stmt|,
name|h
decl_stmt|;
name|DFBResult
name|result
decl_stmt|;
comment|// check parameters
name|rect
operator|.
name|getRect
argument_list|(
operator|&
name|x
argument_list|,
operator|&
name|y
argument_list|,
operator|&
name|w
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|w
operator|<=
literal|0
operator|)
operator|||
operator|(
name|h
operator|<=
literal|0
operator|)
condition|)
return|return;
name|m_surface
operator|->
name|SetDrawingFlags
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DFBSurfaceDrawingFlags
argument_list|(
name|m_premult
condition|?
operator|(
name|DSDRAW_BLEND
operator||
name|DSDRAW_SRC_PREMULTIPLY
operator|)
else|:
name|DSDRAW_BLEND
argument_list|)
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|SetPorterDuff
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|DSPD_SRC_OVER
argument_list|)
expr_stmt|;
comment|// set color
name|m_surface
operator|->
name|SetColor
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|,
literal|120
argument_list|)
expr_stmt|;
name|result
operator|=
name|m_surface
operator|->
name|DrawLine
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|x
operator|+
name|w
operator|-
literal|1
argument_list|,
name|y
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBError
argument_list|(
literal|"QDirectFBBlitter::drawDebugRect()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|m_surface
operator|->
name|DrawLine
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|x
operator|+
name|w
operator|-
literal|1
argument_list|,
name|y
argument_list|,
name|x
operator|+
name|w
operator|-
literal|1
argument_list|,
name|y
operator|+
name|h
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBError
argument_list|(
literal|"QDirectFBBlitter::drawDebugRect()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|m_surface
operator|->
name|DrawLine
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|x
operator|+
name|w
operator|-
literal|1
argument_list|,
name|y
operator|+
name|h
operator|-
literal|1
argument_list|,
name|x
argument_list|,
name|y
operator|+
name|h
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBError
argument_list|(
literal|"QDirectFBBlitter::drawDebugRect()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|m_surface
operator|->
name|DrawLine
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
operator|+
name|h
operator|-
literal|1
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBError
argument_list|(
literal|"QDirectFBBlitter::drawDebugRect()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|m_surface
operator|->
name|SetColor
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|result
operator|=
name|m_surface
operator|->
name|FillRectangle
argument_list|(
name|m_surface
operator|.
name|data
argument_list|()
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
name|DirectFBError
argument_list|(
literal|"QDirectFBBlitter::drawDebugRect()"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeTextureData
name|void
name|QDirectFbTextureGlyphCache
operator|::
name|resizeTextureData
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|m_surface
operator|.
name|reset
argument_list|()
expr_stmt|;
empty_stmt|;
name|QImageTextureGlyphCache
operator|::
name|resizeTextureData
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sourceSurface
name|IDirectFBSurface
modifier|*
name|QDirectFbTextureGlyphCache
operator|::
name|sourceSurface
parameter_list|()
block|{
if|if
condition|(
name|m_surface
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|QImage
modifier|&
name|source
init|=
name|image
argument_list|()
decl_stmt|;
name|DFBSurfaceDescription
name|desc
decl_stmt|;
name|memset
argument_list|(
operator|&
name|desc
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|desc
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|flags
operator|=
name|DFBSurfaceDescriptionFlags
argument_list|(
name|DSDESC_WIDTH
operator||
name|DSDESC_HEIGHT
operator||
name|DSDESC_PIXELFORMAT
operator||
name|DSDESC_PREALLOCATED
operator||
name|DSDESC_CAPS
argument_list|)
expr_stmt|;
name|desc
operator|.
name|width
operator|=
name|source
operator|.
name|width
argument_list|()
expr_stmt|;
name|desc
operator|.
name|height
operator|=
name|source
operator|.
name|height
argument_list|()
expr_stmt|;
name|desc
operator|.
name|caps
operator|=
name|DSCAPS_SYSTEMONLY
expr_stmt|;
switch|switch
condition|(
name|source
operator|.
name|format
argument_list|()
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_Mono
case|:
name|desc
operator|.
name|pixelformat
operator|=
name|DSPF_A1
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
name|desc
operator|.
name|pixelformat
operator|=
name|DSPF_A8
expr_stmt|;
break|break;
default|default:
name|qFatal
argument_list|(
literal|"QDirectFBTextureGlyphCache: Unsupported source texture image format."
argument_list|)
expr_stmt|;
break|break;
block|}
name|desc
operator|.
name|preallocated
index|[
literal|0
index|]
operator|.
name|data
operator|=
cast|const_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|source
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|preallocated
index|[
literal|0
index|]
operator|.
name|pitch
operator|=
name|source
operator|.
name|bytesPerLine
argument_list|()
expr_stmt|;
name|desc
operator|.
name|preallocated
index|[
literal|1
index|]
operator|.
name|data
operator|=
literal|0
expr_stmt|;
name|desc
operator|.
name|preallocated
index|[
literal|1
index|]
operator|.
name|pitch
operator|=
literal|0
expr_stmt|;
name|IDirectFB
modifier|*
name|dfb
init|=
name|QDirectFbConvenience
operator|::
name|dfbInterface
argument_list|()
decl_stmt|;
name|dfb
operator|->
name|CreateSurface
argument_list|(
name|dfb
argument_list|,
operator|&
name|desc
argument_list|,
name|m_surface
operator|.
name|outPtr
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|m_surface
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
