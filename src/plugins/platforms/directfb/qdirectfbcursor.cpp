begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbcursor.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbconvenience.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QDirectFBCursor
name|QDirectFBCursor
operator|::
name|QDirectFBCursor
parameter_list|(
name|QPlatformScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|m_screen
argument_list|(
name|screen
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|m_image
operator|.
name|reset
argument_list|(
operator|new
name|QPlatformCursorImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|changeCursor
name|void
name|QDirectFBCursor
operator|::
name|changeCursor
parameter_list|(
name|QCursor
modifier|*
name|cursor
parameter_list|,
name|QWindow
modifier|*
parameter_list|)
block|{
name|int
name|xSpot
decl_stmt|;
name|int
name|ySpot
decl_stmt|;
name|QPixmap
name|map
decl_stmt|;
if|if
condition|(
name|cursor
operator|->
name|shape
argument_list|()
operator|!=
name|Qt
operator|::
name|BitmapCursor
condition|)
block|{
name|m_image
operator|->
name|set
argument_list|(
name|cursor
operator|->
name|shape
argument_list|()
argument_list|)
expr_stmt|;
name|xSpot
operator|=
name|m_image
operator|->
name|hotspot
argument_list|()
operator|.
name|x
argument_list|()
expr_stmt|;
name|ySpot
operator|=
name|m_image
operator|->
name|hotspot
argument_list|()
operator|.
name|y
argument_list|()
expr_stmt|;
name|QImage
modifier|*
name|i
init|=
name|m_image
operator|->
name|image
argument_list|()
decl_stmt|;
name|map
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPoint
name|point
init|=
name|cursor
operator|->
name|hotSpot
argument_list|()
decl_stmt|;
name|xSpot
operator|=
name|point
operator|.
name|x
argument_list|()
expr_stmt|;
name|ySpot
operator|=
name|point
operator|.
name|y
argument_list|()
expr_stmt|;
name|map
operator|=
name|cursor
operator|->
name|pixmap
argument_list|()
expr_stmt|;
block|}
name|DFBResult
name|res
decl_stmt|;
name|IDirectFBDisplayLayer
modifier|*
name|layer
init|=
name|toDfbLayer
argument_list|(
name|m_screen
argument_list|)
decl_stmt|;
name|IDirectFBSurface
modifier|*
name|surface
argument_list|(
name|QDirectFbConvenience
operator|::
name|dfbSurfaceForPlatformPixmap
argument_list|(
name|map
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|res
operator|=
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_ADMINISTRATIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"Failed to set DLSCL_ADMINISTRATIVE"
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return;
block|}
name|layer
operator|->
name|SetCursorShape
argument_list|(
name|layer
argument_list|,
name|surface
argument_list|,
name|xSpot
argument_list|,
name|ySpot
argument_list|)
expr_stmt|;
name|layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|layer
argument_list|,
name|DLSCL_SHARED
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
