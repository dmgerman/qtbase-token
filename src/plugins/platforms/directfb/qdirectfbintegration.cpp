begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdirectfbintegration.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbwindowsurface.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbblitter.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbconvenience.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbcursor.h"
end_include
begin_include
include|#
directive|include
file|"qdirectfbwindow.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qgenericunixfontdatabase_p.h>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qgenericunixeventdispatcher_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwindowsurface_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_blitter_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qplatformpixmap_qpa.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThread>
end_include
begin_include
include|#
directive|include
file|<QtCore/QAbstractEventDispatcher>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QDirectFbScreen
name|QDirectFbScreen
operator|::
name|QDirectFbScreen
parameter_list|(
name|int
name|display
parameter_list|)
member_init_list|:
name|QPlatformScreen
argument_list|()
block|{
name|m_layer
operator|=
name|QDirectFbConvenience
operator|::
name|dfbDisplayLayer
argument_list|(
name|display
argument_list|)
expr_stmt|;
name|m_layer
operator|->
name|SetCooperativeLevel
argument_list|(
name|m_layer
argument_list|,
name|DLSCL_SHARED
argument_list|)
expr_stmt|;
name|DFBDisplayLayerConfig
name|config
decl_stmt|;
name|m_layer
operator|->
name|GetConfiguration
argument_list|(
name|m_layer
argument_list|,
operator|&
name|config
argument_list|)
expr_stmt|;
name|m_format
operator|=
name|QDirectFbConvenience
operator|::
name|imageFormatFromSurfaceFormat
argument_list|(
name|config
operator|.
name|pixelformat
argument_list|,
name|config
operator|.
name|surface_caps
argument_list|)
expr_stmt|;
name|m_geometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|config
operator|.
name|width
argument_list|,
name|config
operator|.
name|height
argument_list|)
expr_stmt|;
specifier|const
name|int
name|dpi
init|=
literal|72
decl_stmt|;
specifier|const
name|qreal
name|inch
init|=
literal|25.4
decl_stmt|;
name|m_depth
operator|=
name|QDirectFbConvenience
operator|::
name|colorDepthForSurface
argument_list|(
name|config
operator|.
name|pixelformat
argument_list|)
expr_stmt|;
name|m_physicalSize
operator|=
name|QSize
argument_list|(
name|qRound
argument_list|(
name|config
operator|.
name|width
operator|*
name|inch
operator|/
name|dpi
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|config
operator|.
name|height
operator|*
name|inch
operator|/
name|dpi
argument_list|)
argument_list|)
expr_stmt|;
name|cursor
operator|=
operator|new
name|QDirectFBCursor
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFbScreen
name|QDirectFbScreen
operator|::
name|~
name|QDirectFbScreen
parameter_list|()
block|{ }
end_destructor
begin_constructor
DECL|function|QDirectFbIntegration
name|QDirectFbIntegration
operator|::
name|QDirectFbIntegration
parameter_list|()
member_init_list|:
name|mFontDb
argument_list|(
operator|new
name|QGenericUnixFontDatabase
argument_list|()
argument_list|)
block|{
specifier|const
name|QStringList
name|args
init|=
name|QCoreApplication
operator|::
name|arguments
argument_list|()
decl_stmt|;
name|int
name|argc
init|=
name|args
operator|.
name|size
argument_list|()
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
operator|new
name|char
operator|*
index|[
name|argc
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argc
condition|;
operator|++
name|i
control|)
name|argv
index|[
name|i
index|]
operator|=
name|qstrdup
argument_list|(
name|args
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|DFBResult
name|result
init|=
name|DirectFBInit
argument_list|(
operator|&
name|argc
argument_list|,
operator|&
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|DFB_OK
condition|)
block|{
name|DirectFBError
argument_list|(
literal|"QDirectFBScreen: error initializing DirectFB"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|argv
expr_stmt|;
name|QDirectFbScreen
modifier|*
name|primaryScreen
init|=
operator|new
name|QDirectFbScreen
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|mScreens
operator|.
name|append
argument_list|(
name|primaryScreen
argument_list|)
expr_stmt|;
name|mInputRunner
operator|=
operator|new
name|QThread
expr_stmt|;
name|mInput
operator|=
operator|new
name|QDirectFbInput
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mInput
operator|->
name|moveToThread
argument_list|(
name|mInputRunner
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|mInputRunner
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
name|mInput
argument_list|,
name|SLOT
argument_list|(
name|runInputEventLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mInputRunner
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDirectFbIntegration
name|QDirectFbIntegration
operator|::
name|~
name|QDirectFbIntegration
parameter_list|()
block|{
name|mInput
operator|->
name|stopInputEventLoop
argument_list|()
expr_stmt|;
operator|delete
name|mInputRunner
expr_stmt|;
operator|delete
name|mInput
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|createPlatformPixmap
name|QPlatformPixmap
modifier|*
name|QDirectFbIntegration
operator|::
name|createPlatformPixmap
parameter_list|(
name|QPlatformPixmap
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|type
operator|==
name|QPlatformPixmap
operator|::
name|BitmapType
condition|)
return|return
operator|new
name|QRasterPlatformPixmap
argument_list|(
name|type
argument_list|)
return|;
else|else
return|return
operator|new
name|QDirectFbBlitterPlatformPixmap
return|;
block|}
end_function
begin_function
DECL|function|createPlatformWindow
name|QPlatformWindow
modifier|*
name|QDirectFbIntegration
operator|::
name|createPlatformWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|WId
name|winId
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|winId
argument_list|)
expr_stmt|;
name|QDirectFbInput
modifier|*
name|input
init|=
cast|const_cast
argument_list|<
name|QDirectFbInput
operator|*
argument_list|>
argument_list|(
name|mInput
argument_list|)
decl_stmt|;
comment|//gah
return|return
operator|new
name|QDirectFbWindow
argument_list|(
name|widget
argument_list|,
name|input
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createEventDispatcher
name|QAbstractEventDispatcher
modifier|*
name|QDirectFbIntegration
operator|::
name|createEventDispatcher
parameter_list|()
specifier|const
block|{
return|return
name|createUnixEventDispatcher
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|createWindowSurface
name|QWindowSurface
modifier|*
name|QDirectFbIntegration
operator|::
name|createWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|WId
name|winId
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QDirectFbWindowSurface
argument_list|(
name|widget
argument_list|,
name|winId
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fontDatabase
name|QPlatformFontDatabase
modifier|*
name|QDirectFbIntegration
operator|::
name|fontDatabase
parameter_list|()
specifier|const
block|{
return|return
name|mFontDb
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
