begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// checksum 0x17fa version 0x3000a
end_comment
begin_comment
comment|/*   This file was generated by the Qt Quick Application wizard of Qt Creator.   QmlApplicationViewer is a convenience class containing mobile device specific   code such as screen orientation handling. Also QML paths and debugging are   handled here.   It is recommended not to modify this file, since newer versions of Qt Creator   may offer an updated version of it. */
end_comment
begin_include
include|#
directive|include
file|"qmlapplicationviewer.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QtDeclarative/QDeclarativeComponent>
end_include
begin_include
include|#
directive|include
file|<QtDeclarative/QDeclarativeEngine>
end_include
begin_include
include|#
directive|include
file|<QtDeclarative/QDeclarativeContext>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QMLJSDEBUGGER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qt_private/qdeclarativedebughelper_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QMLJSDEBUGGER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_JSDEBUGGER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<jsdebuggeragent.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QMLJSDEBUGGER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_QMLOBSERVER
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qdeclarativeviewobserver.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QMLJSDEBUGGER
argument_list|)
end_if
begin_comment
comment|// Enable debugging before any QDeclarativeEngine is created
end_comment
begin_struct
DECL|struct|QmlJsDebuggingEnabler
struct|struct
name|QmlJsDebuggingEnabler
block|{
DECL|function|QmlJsDebuggingEnabler
name|QmlJsDebuggingEnabler
parameter_list|()
block|{
name|QDeclarativeDebugHelper
operator|::
name|enableDebugging
argument_list|()
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_comment
comment|// Execute code in constructor before first QDeclarativeEngine is instantiated
end_comment
begin_decl_stmt
DECL|variable|enableDebuggingHelper
specifier|static
name|QmlJsDebuggingEnabler
name|enableDebuggingHelper
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMLJSDEBUGGER
end_comment
begin_class
DECL|class|QmlApplicationViewerPrivate
class|class
name|QmlApplicationViewerPrivate
block|{
DECL|member|mainQmlFile
name|QString
name|mainQmlFile
decl_stmt|;
friend|friend
class_decl|class
name|QmlApplicationViewer
class_decl|;
specifier|static
name|QString
name|adjustPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|adjustPath
name|QString
name|QmlApplicationViewerPrivate
operator|::
name|adjustPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
ifdef|#
directive|ifdef
name|Q_OS_MAC
if|if
condition|(
operator|!
name|QDir
operator|::
name|isAbsolutePath
argument_list|(
name|path
argument_list|)
condition|)
return|return
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/../Resources/"
argument_list|)
operator|+
name|path
return|;
else|#
directive|else
specifier|const
name|QString
name|pathInShareDir
init|=
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/../share/"
argument_list|)
operator|+
name|QFileInfo
argument_list|(
name|QCoreApplication
operator|::
name|applicationFilePath
argument_list|()
argument_list|)
operator|.
name|fileName
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|path
decl_stmt|;
if|if
condition|(
name|QFileInfo
argument_list|(
name|pathInShareDir
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
return|return
name|pathInShareDir
return|;
endif|#
directive|endif
endif|#
directive|endif
return|return
name|path
return|;
block|}
end_function
begin_constructor
DECL|function|QmlApplicationViewer
name|QmlApplicationViewer
operator|::
name|QmlApplicationViewer
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDeclarativeView
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_d
argument_list|(
operator|new
name|QmlApplicationViewerPrivate
argument_list|)
block|{
name|connect
argument_list|(
name|engine
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setResizeMode
argument_list|(
name|QDeclarativeView
operator|::
name|SizeRootObjectToView
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QMLJSDEBUGGER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_JSDEBUGGER
argument_list|)
operator|new
name|QmlJSDebugger
operator|::
name|JSDebuggerAgent
argument_list|(
name|engine
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QMLJSDEBUGGER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_QMLOBSERVER
argument_list|)
operator|new
name|QmlJSDebugger
operator|::
name|QDeclarativeViewObserver
argument_list|(
name|this
argument_list|,
name|parent
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~QmlApplicationViewer
name|QmlApplicationViewer
operator|::
name|~
name|QmlApplicationViewer
parameter_list|()
block|{
operator|delete
name|m_d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setMainQmlFile
name|void
name|QmlApplicationViewer
operator|::
name|setMainQmlFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|m_d
operator|->
name|mainQmlFile
operator|=
name|QmlApplicationViewerPrivate
operator|::
name|adjustPath
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|setSource
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|m_d
operator|->
name|mainQmlFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addImportPath
name|void
name|QmlApplicationViewer
operator|::
name|addImportPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|engine
argument_list|()
operator|->
name|addImportPath
argument_list|(
name|QmlApplicationViewerPrivate
operator|::
name|adjustPath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setOrientation
name|void
name|QmlApplicationViewer
operator|::
name|setOrientation
parameter_list|(
name|ScreenOrientation
name|orientation
parameter_list|)
block|{
comment|//#if defined(Q_OS_SYMBIAN)
comment|//    // If the version of Qt on the device is< 4.7.2, that attribute won't work
comment|//    if (orientation != ScreenOrientationAuto) {
comment|//        const QStringList v = QString::fromAscii(qVersion()).split(QLatin1Char('.'));
comment|//        if (v.count() == 3&& (v.at(0).toInt()<< 16 | v.at(1).toInt()<< 8 | v.at(2).toInt())< 0x040702) {
comment|//            qWarning("Screen orientation locking only supported with Qt 4.7.2 and above");
comment|//            return;
comment|//        }
comment|//    }
comment|//#endif // Q_OS_SYMBIAN
comment|//
comment|//    Qt::WidgetAttribute attribute;
comment|//    switch (orientation) {
comment|//#if QT_VERSION< 0x040702
comment|//    // Qt< 4.7.2 does not yet have the Qt::WA_*Orientation attributes
comment|//    case ScreenOrientationLockPortrait:
comment|//        attribute = static_cast<Qt::WidgetAttribute>(128);
comment|//        break;
comment|//    case ScreenOrientationLockLandscape:
comment|//        attribute = static_cast<Qt::WidgetAttribute>(129);
comment|//        break;
comment|//    default:
comment|//    case ScreenOrientationAuto:
comment|//        attribute = static_cast<Qt::WidgetAttribute>(130);
comment|//        break;
comment|//#else // QT_VERSION< 0x040702
comment|//    case ScreenOrientationLockPortrait:
comment|//        attribute = Qt::WA_LockPortraitOrientation;
comment|//        break;
comment|//    case ScreenOrientationLockLandscape:
comment|//        attribute = Qt::WA_LockLandscapeOrientation;
comment|//        break;
comment|//    default:
comment|//    case ScreenOrientationAuto:
comment|//        attribute = Qt::WA_AutoOrientation;
comment|//        break;
comment|//#endif // QT_VERSION< 0x040702
comment|//    };
comment|//    setAttribute(attribute, true);
block|}
end_function
begin_function
DECL|function|showExpanded
name|void
name|QmlApplicationViewer
operator|::
name|showExpanded
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|showFullScreen
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_MAEMO_5
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_MAEMO_6
argument_list|)
name|showMaximized
argument_list|()
expr_stmt|;
else|#
directive|else
name|show
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
end_unit
