begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_include
include|#
directive|include
file|"androidjnimenu.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformtheme.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformmenubar.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformmenu.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformmenuitem.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformdialoghelpers.h"
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QJsonDocument>
end_include
begin_include
include|#
directive|include
file|<QVariant>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qhighdpiscaling_p.h>
end_include
begin_include
include|#
directive|include
file|<qandroidplatformintegration.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
namespace|namespace
block|{
DECL|member|textStyle_bold
specifier|const
name|int
name|textStyle_bold
init|=
literal|1
decl_stmt|;
DECL|member|textStyle_italic
specifier|const
name|int
name|textStyle_italic
init|=
literal|2
decl_stmt|;
DECL|member|typeface_sans
specifier|const
name|int
name|typeface_sans
init|=
literal|1
decl_stmt|;
DECL|member|typeface_serif
specifier|const
name|int
name|typeface_serif
init|=
literal|2
decl_stmt|;
DECL|member|typeface_monospace
specifier|const
name|int
name|typeface_monospace
init|=
literal|3
decl_stmt|;
block|}
end_namespace
begin_function
DECL|function|fontType
specifier|static
name|int
name|fontType
parameter_list|(
specifier|const
name|QString
modifier|&
name|androidControl
parameter_list|)
block|{
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"defaultStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|SystemFont
return|;
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"textViewStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|LabelFont
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"buttonStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|PushButtonFont
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"checkboxStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|CheckBoxFont
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"radioButtonStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|RadioButtonFont
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"simple_list_item_single_choice"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|ItemViewFont
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"simple_spinner_dropdown_item"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|ComboMenuItemFont
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"spinnerStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|ComboLineEditFont
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"simple_list_item"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|ListViewFont
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|paletteType
specifier|static
name|int
name|paletteType
parameter_list|(
specifier|const
name|QString
modifier|&
name|androidControl
parameter_list|)
block|{
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"defaultStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|SystemPalette
return|;
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"textViewStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|LabelPalette
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"buttonStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|ButtonPalette
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"checkboxStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|CheckBoxPalette
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"radioButtonStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|RadioButtonPalette
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"simple_list_item_single_choice"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|ItemViewPalette
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"editTextStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|TextLineEditPalette
return|;
elseif|else
if|if
condition|(
name|androidControl
operator|==
name|QLatin1String
argument_list|(
literal|"spinnerStyle"
argument_list|)
condition|)
return|return
name|QPlatformTheme
operator|::
name|ComboBoxPalette
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|setPaletteColor
specifier|static
name|void
name|setPaletteColor
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|object
parameter_list|,
name|QPalette
modifier|&
name|palette
parameter_list|,
name|QPalette
operator|::
name|ColorRole
name|role
parameter_list|)
block|{
comment|// QPalette::Active -> ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|role
argument_list|,
name|QRgb
argument_list|(
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPalette::Inactive -> ENABLED_STATE_SET
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|role
argument_list|,
name|QRgb
argument_list|(
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ENABLED_STATE_SET"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPalette::Disabled -> EMPTY_STATE_SET
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|role
argument_list|,
name|QRgb
argument_list|(
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"EMPTY_STATE_SET"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Current
argument_list|,
name|role
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|role
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|role
operator|==
name|QPalette
operator|::
name|WindowText
condition|)
block|{
comment|// QPalette::BrightText -> PRESSED
comment|// QPalette::Active -> PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|BrightText
argument_list|,
name|QRgb
argument_list|(
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPalette::Inactive -> PRESSED_ENABLED_STATE_SET
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|BrightText
argument_list|,
name|QRgb
argument_list|(
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"PRESSED_ENABLED_STATE_SET"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPalette::Disabled -> PRESSED_STATE_SET
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|BrightText
argument_list|,
name|QRgb
argument_list|(
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"PRESSED_STATE_SET"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Current
argument_list|,
name|QPalette
operator|::
name|BrightText
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|BrightText
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPalette::HighlightedText -> SELECTED
comment|// QPalette::Active -> ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|QRgb
argument_list|(
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPalette::Inactive -> ENABLED_SELECTED_STATE_SET
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|QRgb
argument_list|(
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ENABLED_SELECTED_STATE_SET"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPalette::Disabled -> SELECTED_STATE_SET
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|QRgb
argument_list|(
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"SELECTED_STATE_SET"
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Current
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|)
argument_list|)
expr_stmt|;
comment|// Same colors for Text
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|role
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|role
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|role
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Current
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Current
argument_list|,
name|role
argument_list|)
argument_list|)
expr_stmt|;
comment|// And for ButtonText
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|role
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|role
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|role
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Current
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Current
argument_list|,
name|role
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|loadStyleData
name|QJsonObject
name|AndroidStyle
operator|::
name|loadStyleData
parameter_list|()
block|{
name|QString
name|stylePath
argument_list|(
name|QLatin1String
argument_list|(
name|qgetenv
argument_list|(
literal|"MINISTRO_ANDROID_STYLE_PATH"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QLatin1Char
name|slashChar
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|stylePath
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|stylePath
operator|.
name|endsWith
argument_list|(
name|slashChar
argument_list|)
condition|)
name|stylePath
operator|+=
name|slashChar
expr_stmt|;
name|QString
name|androidTheme
init|=
name|QLatin1String
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_ANDROID_THEME"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|androidTheme
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|androidTheme
operator|.
name|endsWith
argument_list|(
name|slashChar
argument_list|)
condition|)
name|androidTheme
operator|+=
name|slashChar
expr_stmt|;
if|if
condition|(
name|stylePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stylePath
operator|=
name|QLatin1String
argument_list|(
literal|"/data/data/org.kde.necessitas.ministro/files/dl/style/"
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_ANDROID_THEME_DISPLAY_DPI"
argument_list|)
argument_list|)
operator|+
name|slashChar
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
operator|!
name|stylePath
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|androidTheme
operator|.
name|isEmpty
argument_list|()
operator|&&
name|QFileInfo
operator|::
name|exists
argument_list|(
name|stylePath
operator|+
name|androidTheme
operator|+
name|QLatin1String
argument_list|(
literal|"style.json"
argument_list|)
argument_list|)
condition|)
name|stylePath
operator|+=
name|androidTheme
expr_stmt|;
name|QFile
name|f
argument_list|(
name|stylePath
operator|+
name|QLatin1String
argument_list|(
literal|"style.json"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
name|QJsonObject
argument_list|()
return|;
name|QJsonParseError
name|error
decl_stmt|;
name|QJsonDocument
name|document
init|=
name|QJsonDocument
operator|::
name|fromJson
argument_list|(
name|f
operator|.
name|readAll
argument_list|()
argument_list|,
operator|&
name|error
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
name|document
operator|.
name|isNull
argument_list|()
argument_list|)
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
name|error
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
name|QJsonObject
argument_list|()
return|;
block|}
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|document
operator|.
name|isObject
argument_list|()
argument_list|)
condition|)
block|{
name|qCritical
argument_list|(
literal|"Style.json does not contain a valid style."
argument_list|)
expr_stmt|;
return|return
name|QJsonObject
argument_list|()
return|;
block|}
return|return
name|document
operator|.
name|object
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|loadAndroidStyle
specifier|static
name|std
operator|::
name|shared_ptr
argument_list|<
name|AndroidStyle
argument_list|>
name|loadAndroidStyle
parameter_list|(
name|QPalette
modifier|*
name|defaultPalette
parameter_list|)
block|{
name|double
name|pixelDensity
init|=
name|QHighDpiScaling
operator|::
name|isActive
argument_list|()
condition|?
name|QtAndroid
operator|::
name|pixelDensity
argument_list|()
else|:
literal|1.0
decl_stmt|;
name|std
operator|::
name|shared_ptr
argument_list|<
name|AndroidStyle
argument_list|>
name|style
init|=
name|std
operator|::
name|make_shared
argument_list|<
name|AndroidStyle
argument_list|>
argument_list|()
decl_stmt|;
name|style
operator|->
name|m_styleData
operator|=
name|AndroidStyle
operator|::
name|loadStyleData
argument_list|()
expr_stmt|;
if|if
condition|(
name|style
operator|->
name|m_styleData
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|std
operator|::
name|shared_ptr
argument_list|<
name|AndroidStyle
argument_list|>
argument_list|()
return|;
for|for
control|(
name|QJsonObject
operator|::
name|const_iterator
name|objectIterator
init|=
name|style
operator|->
name|m_styleData
operator|.
name|constBegin
argument_list|()
init|;
name|objectIterator
operator|!=
name|style
operator|->
name|m_styleData
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|objectIterator
control|)
block|{
name|QString
name|key
init|=
name|objectIterator
operator|.
name|key
argument_list|()
decl_stmt|;
name|QJsonValue
name|value
init|=
name|objectIterator
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isObject
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Style.json structure is unrecognized."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QJsonObject
name|item
init|=
name|value
operator|.
name|toObject
argument_list|()
decl_stmt|;
name|QJsonObject
operator|::
name|const_iterator
name|attributeIterator
init|=
name|item
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"qtClass"
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|qtClassName
decl_stmt|;
if|if
condition|(
name|attributeIterator
operator|!=
name|item
operator|.
name|constEnd
argument_list|()
condition|)
block|{
comment|// The item has palette and font information for a specific Qt Class (e.g. QWidget, QPushButton, etc.)
name|qtClassName
operator|=
name|attributeIterator
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
block|}
specifier|const
name|int
name|ft
init|=
name|fontType
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|>
operator|-
literal|1
operator|||
operator|!
name|qtClassName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Extract font information
name|QFont
name|font
decl_stmt|;
comment|// Font size (in pixels)
name|attributeIterator
operator|=
name|item
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"TextAppearance_textSize"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeIterator
operator|!=
name|item
operator|.
name|constEnd
argument_list|()
condition|)
name|font
operator|.
name|setPixelSize
argument_list|(
name|int
argument_list|(
name|attributeIterator
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
operator|/
name|pixelDensity
argument_list|)
argument_list|)
expr_stmt|;
comment|// Font style
name|attributeIterator
operator|=
name|item
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"TextAppearance_textStyle"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeIterator
operator|!=
name|item
operator|.
name|constEnd
argument_list|()
condition|)
block|{
specifier|const
name|int
name|style
init|=
name|int
argument_list|(
name|attributeIterator
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
name|style
operator|&
name|textStyle_bold
argument_list|)
expr_stmt|;
name|font
operator|.
name|setItalic
argument_list|(
name|style
operator|&
name|textStyle_italic
argument_list|)
expr_stmt|;
block|}
comment|// Font typeface
name|attributeIterator
operator|=
name|item
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"TextAppearance_typeface"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeIterator
operator|!=
name|item
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QFont
operator|::
name|StyleHint
name|styleHint
init|=
name|QFont
operator|::
name|AnyStyle
decl_stmt|;
switch|switch
condition|(
name|int
argument_list|(
name|attributeIterator
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|typeface_sans
case|:
name|styleHint
operator|=
name|QFont
operator|::
name|SansSerif
expr_stmt|;
break|break;
case|case
name|typeface_serif
case|:
name|styleHint
operator|=
name|QFont
operator|::
name|Serif
expr_stmt|;
break|break;
case|case
name|typeface_monospace
case|:
name|styleHint
operator|=
name|QFont
operator|::
name|Monospace
expr_stmt|;
break|break;
block|}
name|font
operator|.
name|setStyleHint
argument_list|(
name|styleHint
argument_list|,
name|QFont
operator|::
name|PreferMatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qtClassName
operator|.
name|isEmpty
argument_list|()
condition|)
name|style
operator|->
name|m_QWidgetsFonts
operator|.
name|insert
argument_list|(
name|qtClassName
argument_list|,
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|ft
operator|>
operator|-
literal|1
condition|)
block|{
name|style
operator|->
name|m_fonts
operator|.
name|insert
argument_list|(
name|ft
argument_list|,
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|ft
operator|==
name|QPlatformTheme
operator|::
name|SystemFont
condition|)
name|QGuiApplication
operator|::
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
comment|// Extract font information
block|}
specifier|const
name|int
name|pt
init|=
name|paletteType
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|pt
operator|>
operator|-
literal|1
operator|||
operator|!
name|qtClassName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Extract palette information
name|QPalette
name|palette
init|=
operator|*
name|defaultPalette
decl_stmt|;
name|attributeIterator
operator|=
name|item
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"defaultTextColorPrimary"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeIterator
operator|!=
name|item
operator|.
name|constEnd
argument_list|()
condition|)
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|QRgb
argument_list|(
name|int
argument_list|(
name|attributeIterator
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attributeIterator
operator|=
name|item
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"defaultBackgroundColor"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeIterator
operator|!=
name|item
operator|.
name|constEnd
argument_list|()
condition|)
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Background
argument_list|,
name|QRgb
argument_list|(
name|int
argument_list|(
name|attributeIterator
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attributeIterator
operator|=
name|item
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"TextAppearance_textColor"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeIterator
operator|!=
name|item
operator|.
name|constEnd
argument_list|()
condition|)
name|setPaletteColor
argument_list|(
name|attributeIterator
operator|.
name|value
argument_list|()
operator|.
name|toObject
argument_list|()
operator|.
name|toVariantMap
argument_list|()
argument_list|,
name|palette
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
expr_stmt|;
name|attributeIterator
operator|=
name|item
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"TextAppearance_textColorLink"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeIterator
operator|!=
name|item
operator|.
name|constEnd
argument_list|()
condition|)
name|setPaletteColor
argument_list|(
name|attributeIterator
operator|.
name|value
argument_list|()
operator|.
name|toObject
argument_list|()
operator|.
name|toVariantMap
argument_list|()
argument_list|,
name|palette
argument_list|,
name|QPalette
operator|::
name|Link
argument_list|)
expr_stmt|;
name|attributeIterator
operator|=
name|item
operator|.
name|find
argument_list|(
name|QLatin1String
argument_list|(
literal|"TextAppearance_textColorHighlight"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeIterator
operator|!=
name|item
operator|.
name|constEnd
argument_list|()
condition|)
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|,
name|QRgb
argument_list|(
name|int
argument_list|(
name|attributeIterator
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pt
operator|==
name|QPlatformTheme
operator|::
name|SystemPalette
condition|)
operator|*
name|defaultPalette
operator|=
name|style
operator|->
name|m_standardPalette
operator|=
name|palette
expr_stmt|;
if|if
condition|(
name|pt
operator|>
operator|-
literal|1
condition|)
name|style
operator|->
name|m_palettes
operator|.
name|insert
argument_list|(
name|pt
argument_list|,
name|palette
argument_list|)
expr_stmt|;
comment|// Extract palette information
block|}
block|}
return|return
name|style
return|;
block|}
end_function
begin_constructor
DECL|function|QAndroidPlatformTheme
name|QAndroidPlatformTheme
operator|::
name|QAndroidPlatformTheme
parameter_list|(
name|QAndroidPlatformNativeInterface
modifier|*
name|androidPlatformNativeInterface
parameter_list|)
block|{
name|QColor
name|background
argument_list|(
literal|229
argument_list|,
literal|229
argument_list|,
literal|229
argument_list|)
decl_stmt|;
name|QColor
name|light
init|=
name|background
operator|.
name|lighter
argument_list|(
literal|150
argument_list|)
decl_stmt|;
name|QColor
name|mid
argument_list|(
name|background
operator|.
name|darker
argument_list|(
literal|130
argument_list|)
argument_list|)
decl_stmt|;
name|QColor
name|midLight
init|=
name|mid
operator|.
name|lighter
argument_list|(
literal|110
argument_list|)
decl_stmt|;
name|QColor
name|base
argument_list|(
literal|249
argument_list|,
literal|249
argument_list|,
literal|249
argument_list|)
decl_stmt|;
name|QColor
name|disabledBase
argument_list|(
name|background
argument_list|)
decl_stmt|;
name|QColor
name|dark
init|=
name|background
operator|.
name|darker
argument_list|(
literal|150
argument_list|)
decl_stmt|;
name|QColor
name|darkDisabled
init|=
name|dark
operator|.
name|darker
argument_list|(
literal|110
argument_list|)
decl_stmt|;
name|QColor
name|text
init|=
name|Qt
operator|::
name|black
decl_stmt|;
name|QColor
name|highlightedText
init|=
name|Qt
operator|::
name|black
decl_stmt|;
name|QColor
name|disabledText
init|=
name|QColor
argument_list|(
literal|190
argument_list|,
literal|190
argument_list|,
literal|190
argument_list|)
decl_stmt|;
name|QColor
name|button
argument_list|(
literal|241
argument_list|,
literal|241
argument_list|,
literal|241
argument_list|)
decl_stmt|;
name|QColor
name|shadow
argument_list|(
literal|201
argument_list|,
literal|201
argument_list|,
literal|201
argument_list|)
decl_stmt|;
name|QColor
name|highlight
argument_list|(
literal|148
argument_list|,
literal|210
argument_list|,
literal|231
argument_list|)
decl_stmt|;
name|QColor
name|disabledShadow
init|=
name|shadow
operator|.
name|lighter
argument_list|(
literal|150
argument_list|)
decl_stmt|;
name|m_defaultPalette
operator|=
name|QPalette
argument_list|(
name|Qt
operator|::
name|black
argument_list|,
name|background
argument_list|,
name|light
argument_list|,
name|dark
argument_list|,
name|mid
argument_list|,
name|text
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Midlight
argument_list|,
name|midLight
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|button
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Shadow
argument_list|,
name|shadow
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|highlightedText
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|,
name|disabledText
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|,
name|disabledText
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|disabledText
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|disabledBase
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|,
name|darkDisabled
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Shadow
argument_list|,
name|disabledShadow
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|highlight
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|highlight
argument_list|)
expr_stmt|;
name|m_defaultPalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|highlight
operator|.
name|lighter
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|m_androidStyleData
operator|=
name|loadAndroidStyle
argument_list|(
operator|&
name|m_defaultPalette
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|setPalette
argument_list|(
name|m_defaultPalette
argument_list|)
expr_stmt|;
name|androidPlatformNativeInterface
operator|->
name|m_androidStyle
operator|=
name|m_androidStyleData
expr_stmt|;
comment|// default in case the style has not set a font
name|m_systemFont
operator|=
name|QFont
argument_list|(
name|QLatin1String
argument_list|(
literal|"Roboto"
argument_list|)
argument_list|,
literal|14.0
operator|*
literal|100
operator|/
literal|72
argument_list|)
expr_stmt|;
comment|// keep default size the same after changing from 100 dpi to 72 dpi
block|}
end_constructor
begin_function
DECL|function|createPlatformMenuBar
name|QPlatformMenuBar
modifier|*
name|QAndroidPlatformTheme
operator|::
name|createPlatformMenuBar
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QAndroidPlatformMenuBar
return|;
block|}
end_function
begin_function
DECL|function|createPlatformMenu
name|QPlatformMenu
modifier|*
name|QAndroidPlatformTheme
operator|::
name|createPlatformMenu
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QAndroidPlatformMenu
return|;
block|}
end_function
begin_function
DECL|function|createPlatformMenuItem
name|QPlatformMenuItem
modifier|*
name|QAndroidPlatformTheme
operator|::
name|createPlatformMenuItem
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QAndroidPlatformMenuItem
return|;
block|}
end_function
begin_function
DECL|function|showPlatformMenuBar
name|void
name|QAndroidPlatformTheme
operator|::
name|showPlatformMenuBar
parameter_list|()
block|{
name|QtAndroidMenu
operator|::
name|openOptionsMenu
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paletteType
specifier|static
specifier|inline
name|int
name|paletteType
parameter_list|(
name|QPlatformTheme
operator|::
name|Palette
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|ToolButtonPalette
case|:
case|case
name|QPlatformTheme
operator|::
name|ButtonPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|ButtonPalette
return|;
case|case
name|QPlatformTheme
operator|::
name|CheckBoxPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|CheckBoxPalette
return|;
case|case
name|QPlatformTheme
operator|::
name|RadioButtonPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|RadioButtonPalette
return|;
case|case
name|QPlatformTheme
operator|::
name|ComboBoxPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|ComboBoxPalette
return|;
case|case
name|QPlatformTheme
operator|::
name|TextEditPalette
case|:
case|case
name|QPlatformTheme
operator|::
name|TextLineEditPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|TextLineEditPalette
return|;
case|case
name|QPlatformTheme
operator|::
name|ItemViewPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|ItemViewPalette
return|;
default|default:
return|return
name|QPlatformTheme
operator|::
name|SystemPalette
return|;
block|}
block|}
end_function
begin_function
DECL|function|palette
specifier|const
name|QPalette
modifier|*
name|QAndroidPlatformTheme
operator|::
name|palette
parameter_list|(
name|Palette
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_androidStyleData
condition|)
block|{
name|auto
name|it
init|=
name|m_androidStyleData
operator|->
name|m_palettes
operator|.
name|find
argument_list|(
name|paletteType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_androidStyleData
operator|->
name|m_palettes
operator|.
name|end
argument_list|()
condition|)
return|return
operator|&
operator|(
name|it
operator|.
name|value
argument_list|()
operator|)
return|;
block|}
return|return
operator|&
name|m_defaultPalette
return|;
block|}
end_function
begin_function
DECL|function|fontType
specifier|static
specifier|inline
name|int
name|fontType
parameter_list|(
name|QPlatformTheme
operator|::
name|Font
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|LabelFont
case|:
return|return
name|QPlatformTheme
operator|::
name|SystemFont
return|;
case|case
name|QPlatformTheme
operator|::
name|ToolButtonFont
case|:
return|return
name|QPlatformTheme
operator|::
name|PushButtonFont
return|;
default|default:
return|return
name|type
return|;
block|}
block|}
end_function
begin_function
DECL|function|font
specifier|const
name|QFont
modifier|*
name|QAndroidPlatformTheme
operator|::
name|font
parameter_list|(
name|Font
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_androidStyleData
condition|)
block|{
name|auto
name|it
init|=
name|m_androidStyleData
operator|->
name|m_fonts
operator|.
name|find
argument_list|(
name|fontType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_androidStyleData
operator|->
name|m_fonts
operator|.
name|end
argument_list|()
condition|)
return|return
operator|&
operator|(
name|it
operator|.
name|value
argument_list|()
operator|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|QPlatformTheme
operator|::
name|SystemFont
condition|)
return|return
operator|&
name|m_systemFont
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|themeHint
name|QVariant
name|QAndroidPlatformTheme
operator|::
name|themeHint
parameter_list|(
name|ThemeHint
name|hint
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|StyleNames
case|:
if|if
condition|(
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_USE_ANDROID_NATIVE_STYLE"
argument_list|)
operator|&&
name|m_androidStyleData
condition|)
block|{
return|return
name|QStringList
argument_list|(
literal|"android"
argument_list|)
return|;
block|}
return|return
name|QStringList
argument_list|(
literal|"fusion"
argument_list|)
return|;
case|case
name|MouseDoubleClickDistance
case|:
block|{
name|int
name|minimumDistance
init|=
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_ANDROID_MINIMUM_MOUSE_DOUBLE_CLICK_DISTANCE"
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
name|minimumDistance
decl_stmt|;
name|QAndroidPlatformIntegration
modifier|*
name|platformIntegration
init|=
cast|static_cast
argument_list|<
name|QAndroidPlatformIntegration
operator|*
argument_list|>
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
argument_list|)
decl_stmt|;
name|QAndroidPlatformScreen
modifier|*
name|platformScreen
init|=
name|platformIntegration
operator|->
name|screen
argument_list|()
decl_stmt|;
if|if
condition|(
name|platformScreen
operator|!=
literal|0
condition|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|platformScreen
operator|->
name|screen
argument_list|()
decl_stmt|;
name|qreal
name|dotsPerInch
init|=
name|screen
operator|->
name|physicalDotsPerInch
argument_list|()
decl_stmt|;
comment|// Allow 15% of an inch between clicks when double clicking
name|int
name|distance
init|=
name|qRound
argument_list|(
name|dotsPerInch
operator|*
literal|0.15
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|>
name|minimumDistance
condition|)
name|ret
operator|=
name|distance
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|>
literal|0
condition|)
return|return
name|ret
return|;
comment|// fall through
block|}
default|default:
return|return
name|QPlatformTheme
operator|::
name|themeHint
argument_list|(
name|hint
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|standardButtonText
name|QString
name|QAndroidPlatformTheme
operator|::
name|standardButtonText
parameter_list|(
name|int
name|button
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|button
condition|)
block|{
case|case
name|QPlatformDialogHelper
operator|::
name|Yes
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAndroidPlatformTheme"
argument_list|,
literal|"Yes"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|YesToAll
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAndroidPlatformTheme"
argument_list|,
literal|"Yes to All"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|No
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAndroidPlatformTheme"
argument_list|,
literal|"No"
argument_list|)
return|;
case|case
name|QPlatformDialogHelper
operator|::
name|NoToAll
case|:
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAndroidPlatformTheme"
argument_list|,
literal|"No to All"
argument_list|)
return|;
block|}
return|return
name|QPlatformTheme
operator|::
name|standardButtonText
argument_list|(
name|button
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|usePlatformNativeDialog
name|bool
name|QAndroidPlatformTheme
operator|::
name|usePlatformNativeDialog
parameter_list|(
name|QPlatformTheme
operator|::
name|DialogType
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|type
operator|==
name|MessageDialog
condition|)
return|return
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_USE_ANDROID_NATIVE_DIALOGS"
argument_list|)
operator|==
literal|1
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|createPlatformDialogHelper
name|QPlatformDialogHelper
modifier|*
name|QAndroidPlatformTheme
operator|::
name|createPlatformDialogHelper
parameter_list|(
name|QPlatformTheme
operator|::
name|DialogType
name|type
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|MessageDialog
case|:
return|return
operator|new
name|QtAndroidDialogHelpers
operator|::
name|QAndroidPlatformMessageDialogHelper
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
