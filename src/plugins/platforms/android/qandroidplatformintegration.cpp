begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qandroidplatformintegration.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qjni_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QOpenGLContext>
end_include
begin_include
include|#
directive|include
file|<QThread>
end_include
begin_include
include|#
directive|include
file|<QOffscreenSurface>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qeglpbuffer_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformwindow.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformoffscreensurface.h>
end_include
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_include
include|#
directive|include
file|"qabstracteventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|"qandroideventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformbackingstore.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformaccessibility.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformforeignwindow.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformopenglcontext.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformopenglwindow.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformscreen.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformservices.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformtheme.h"
end_include
begin_include
include|#
directive|include
file|"qandroidsystemlocale.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|m_defaultGeometryWidth
name|int
name|QAndroidPlatformIntegration
operator|::
name|m_defaultGeometryWidth
init|=
literal|320
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_defaultGeometryHeight
name|int
name|QAndroidPlatformIntegration
operator|::
name|m_defaultGeometryHeight
init|=
literal|455
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_defaultScreenWidth
name|int
name|QAndroidPlatformIntegration
operator|::
name|m_defaultScreenWidth
init|=
literal|320
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_defaultScreenHeight
name|int
name|QAndroidPlatformIntegration
operator|::
name|m_defaultScreenHeight
init|=
literal|455
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_defaultPhysicalSizeWidth
name|int
name|QAndroidPlatformIntegration
operator|::
name|m_defaultPhysicalSizeWidth
init|=
literal|50
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_defaultPhysicalSizeHeight
name|int
name|QAndroidPlatformIntegration
operator|::
name|m_defaultPhysicalSizeHeight
init|=
literal|71
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_orientation
name|Qt
operator|::
name|ScreenOrientation
name|QAndroidPlatformIntegration
operator|::
name|m_orientation
init|=
name|Qt
operator|::
name|PrimaryOrientation
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_nativeOrientation
name|Qt
operator|::
name|ScreenOrientation
name|QAndroidPlatformIntegration
operator|::
name|m_nativeOrientation
init|=
name|Qt
operator|::
name|PrimaryOrientation
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_defaultApplicationState
name|Qt
operator|::
name|ApplicationState
name|QAndroidPlatformIntegration
operator|::
name|m_defaultApplicationState
init|=
name|Qt
operator|::
name|ApplicationActive
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|nativeResourceForIntegration
name|void
modifier|*
name|QAndroidPlatformNativeInterface
operator|::
name|nativeResourceForIntegration
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|==
literal|"JavaVM"
condition|)
return|return
name|QtAndroid
operator|::
name|javaVM
argument_list|()
return|;
if|if
condition|(
name|resource
operator|==
literal|"QtActivity"
condition|)
return|return
name|QtAndroid
operator|::
name|activity
argument_list|()
return|;
if|if
condition|(
name|resource
operator|==
literal|"AndroidStyleData"
condition|)
block|{
if|if
condition|(
name|m_androidStyle
condition|)
block|{
if|if
condition|(
name|m_androidStyle
operator|->
name|m_styleData
operator|.
name|isEmpty
argument_list|()
condition|)
name|m_androidStyle
operator|->
name|m_styleData
operator|=
name|AndroidStyle
operator|::
name|loadStyleData
argument_list|()
expr_stmt|;
return|return
operator|&
name|m_androidStyle
operator|->
name|m_styleData
return|;
block|}
else|else
return|return
literal|nullptr
return|;
block|}
if|if
condition|(
name|resource
operator|==
literal|"AndroidStandardPalette"
condition|)
block|{
if|if
condition|(
name|m_androidStyle
condition|)
return|return
operator|&
name|m_androidStyle
operator|->
name|m_standardPalette
return|;
else|else
return|return
literal|nullptr
return|;
block|}
if|if
condition|(
name|resource
operator|==
literal|"AndroidQWidgetFonts"
condition|)
block|{
if|if
condition|(
name|m_androidStyle
condition|)
return|return
operator|&
name|m_androidStyle
operator|->
name|m_QWidgetsFonts
return|;
else|else
return|return
literal|nullptr
return|;
block|}
if|if
condition|(
name|resource
operator|==
literal|"AndroidDeviceName"
condition|)
block|{
specifier|static
name|QString
name|deviceName
init|=
name|QtAndroid
operator|::
name|deviceName
argument_list|()
decl_stmt|;
return|return
operator|&
name|deviceName
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_constructor
DECL|function|QAndroidPlatformIntegration
name|QAndroidPlatformIntegration
operator|::
name|QAndroidPlatformIntegration
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paramList
parameter_list|)
member_init_list|:
name|m_touchDevice
argument_list|(
literal|nullptr
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
member_init_list|,
name|m_accessibility
argument_list|(
literal|nullptr
argument_list|)
endif|#
directive|endif
block|{
name|Q_UNUSED
argument_list|(
name|paramList
argument_list|)
expr_stmt|;
name|m_androidPlatformNativeInterface
operator|=
operator|new
name|QAndroidPlatformNativeInterface
argument_list|()
expr_stmt|;
name|m_eglDisplay
operator|=
name|eglGetDisplay
argument_list|(
name|EGL_DEFAULT_DISPLAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_eglDisplay
operator|==
name|EGL_NO_DISPLAY
condition|)
name|qFatal
argument_list|(
literal|"Could not open egl display"
argument_list|)
expr_stmt|;
name|EGLint
name|major
decl_stmt|,
name|minor
decl_stmt|;
if|if
condition|(
operator|!
name|eglInitialize
argument_list|(
name|m_eglDisplay
argument_list|,
operator|&
name|major
argument_list|,
operator|&
name|minor
argument_list|)
condition|)
name|qFatal
argument_list|(
literal|"Could not initialize egl display"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|eglBindAPI
argument_list|(
name|EGL_OPENGL_ES_API
argument_list|)
condition|)
name|qFatal
argument_list|(
literal|"Could not bind GL_ES API"
argument_list|)
expr_stmt|;
name|m_primaryScreen
operator|=
operator|new
name|QAndroidPlatformScreen
argument_list|()
expr_stmt|;
name|screenAdded
argument_list|(
name|m_primaryScreen
argument_list|)
expr_stmt|;
name|m_primaryScreen
operator|->
name|setPhysicalSize
argument_list|(
name|QSize
argument_list|(
name|m_defaultPhysicalSizeWidth
argument_list|,
name|m_defaultPhysicalSizeHeight
argument_list|)
argument_list|)
expr_stmt|;
name|m_primaryScreen
operator|->
name|setSize
argument_list|(
name|QSize
argument_list|(
name|m_defaultScreenWidth
argument_list|,
name|m_defaultScreenHeight
argument_list|)
argument_list|)
expr_stmt|;
name|m_primaryScreen
operator|->
name|setAvailableGeometry
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_defaultGeometryWidth
argument_list|,
name|m_defaultGeometryHeight
argument_list|)
argument_list|)
expr_stmt|;
name|m_mainThread
operator|=
name|QThread
operator|::
name|currentThread
argument_list|()
expr_stmt|;
name|QtAndroid
operator|::
name|setAndroidPlatformIntegration
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|m_androidFDB
operator|=
operator|new
name|QAndroidPlatformFontDatabase
argument_list|()
expr_stmt|;
name|m_androidPlatformServices
operator|=
operator|new
name|QAndroidPlatformServices
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|m_androidPlatformClipboard
operator|=
operator|new
name|QAndroidPlatformClipboard
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|m_androidSystemLocale
operator|=
operator|new
name|QAndroidSystemLocale
expr_stmt|;
name|QJNIObjectPrivate
name|javaActivity
argument_list|(
name|QtAndroid
operator|::
name|activity
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaActivity
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QJNIObjectPrivate
name|resources
init|=
name|javaActivity
operator|.
name|callObjectMethod
argument_list|(
literal|"getResources"
argument_list|,
literal|"()Landroid/content/res/Resources;"
argument_list|)
decl_stmt|;
name|QJNIObjectPrivate
name|configuration
init|=
name|resources
operator|.
name|callObjectMethod
argument_list|(
literal|"getConfiguration"
argument_list|,
literal|"()Landroid/content/res/Configuration;"
argument_list|)
decl_stmt|;
name|int
name|touchScreen
init|=
name|configuration
operator|.
name|getField
argument_list|<
name|jint
argument_list|>
argument_list|(
literal|"touchscreen"
argument_list|)
decl_stmt|;
if|if
condition|(
name|touchScreen
operator|==
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jint
argument_list|>
argument_list|(
literal|"android/content/res/Configuration"
argument_list|,
literal|"TOUCHSCREEN_FINGER"
argument_list|)
operator|||
name|touchScreen
operator|==
name|QJNIObjectPrivate
operator|::
name|getStaticField
argument_list|<
name|jint
argument_list|>
argument_list|(
literal|"android/content/res/Configuration"
argument_list|,
literal|"TOUCHSCREEN_STYLUS"
argument_list|)
condition|)
block|{
name|m_touchDevice
operator|=
operator|new
name|QTouchDevice
expr_stmt|;
name|m_touchDevice
operator|->
name|setType
argument_list|(
name|QTouchDevice
operator|::
name|TouchScreen
argument_list|)
expr_stmt|;
name|m_touchDevice
operator|->
name|setCapabilities
argument_list|(
name|QTouchDevice
operator|::
name|Position
operator||
name|QTouchDevice
operator|::
name|Area
operator||
name|QTouchDevice
operator|::
name|Pressure
operator||
name|QTouchDevice
operator|::
name|NormalizedPosition
argument_list|)
expr_stmt|;
name|QJNIObjectPrivate
name|pm
init|=
name|javaActivity
operator|.
name|callObjectMethod
argument_list|(
literal|"getPackageManager"
argument_list|,
literal|"()Landroid/content/pm/PackageManager;"
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|pm
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|callMethod
argument_list|<
name|jboolean
argument_list|>
argument_list|(
literal|"hasSystemFeature"
argument_list|,
literal|"(Ljava/lang/String;)Z"
argument_list|,
name|QJNIObjectPrivate
operator|::
name|getStaticObjectField
argument_list|(
literal|"android/content/pm/PackageManager"
argument_list|,
literal|"FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND"
argument_list|,
literal|"Ljava/lang/String;"
argument_list|)
operator|.
name|object
argument_list|()
argument_list|)
condition|)
block|{
name|m_touchDevice
operator|->
name|setMaximumTouchPoints
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pm
operator|.
name|callMethod
argument_list|<
name|jboolean
argument_list|>
argument_list|(
literal|"hasSystemFeature"
argument_list|,
literal|"(Ljava/lang/String;)Z"
argument_list|,
name|QJNIObjectPrivate
operator|::
name|getStaticObjectField
argument_list|(
literal|"android/content/pm/PackageManager"
argument_list|,
literal|"FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT"
argument_list|,
literal|"Ljava/lang/String;"
argument_list|)
operator|.
name|object
argument_list|()
argument_list|)
condition|)
block|{
name|m_touchDevice
operator|->
name|setMaximumTouchPoints
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pm
operator|.
name|callMethod
argument_list|<
name|jboolean
argument_list|>
argument_list|(
literal|"hasSystemFeature"
argument_list|,
literal|"(Ljava/lang/String;)Z"
argument_list|,
name|QJNIObjectPrivate
operator|::
name|getStaticObjectField
argument_list|(
literal|"android/content/pm/PackageManager"
argument_list|,
literal|"FEATURE_TOUCHSCREEN_MULTITOUCH"
argument_list|,
literal|"Ljava/lang/String;"
argument_list|)
operator|.
name|object
argument_list|()
argument_list|)
condition|)
block|{
name|m_touchDevice
operator|->
name|setMaximumTouchPoints
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
argument_list|(
name|m_touchDevice
argument_list|)
expr_stmt|;
block|}
block|}
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|setApplicationState
argument_list|(
name|m_defaultApplicationState
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|needsBasicRenderloopWorkaround
specifier|static
name|bool
name|needsBasicRenderloopWorkaround
parameter_list|()
block|{
specifier|static
name|bool
name|needsWorkaround
init|=
name|QtAndroid
operator|::
name|deviceName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"samsung SM-T211"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
operator|||
name|QtAndroid
operator|::
name|deviceName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"samsung SM-T210"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
operator|||
name|QtAndroid
operator|::
name|deviceName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"samsung SM-T215"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
decl_stmt|;
return|return
name|needsWorkaround
return|;
block|}
end_function
begin_function
DECL|function|hasCapability
name|bool
name|QAndroidPlatformIntegration
operator|::
name|hasCapability
parameter_list|(
name|Capability
name|cap
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cap
condition|)
block|{
case|case
name|ThreadedPixmaps
case|:
return|return
literal|true
return|;
case|case
name|ApplicationState
case|:
return|return
literal|true
return|;
case|case
name|NativeWidgets
case|:
return|return
literal|true
return|;
case|case
name|OpenGL
case|:
return|return
literal|true
return|;
case|case
name|ForeignWindows
case|:
return|return
literal|true
return|;
case|case
name|ThreadedOpenGL
case|:
return|return
operator|!
name|needsBasicRenderloopWorkaround
argument_list|()
return|;
case|case
name|RasterGLSurface
case|:
return|return
literal|true
return|;
default|default:
return|return
name|QPlatformIntegration
operator|::
name|hasCapability
argument_list|(
name|cap
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|createPlatformBackingStore
name|QPlatformBackingStore
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|createPlatformBackingStore
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QAndroidPlatformBackingStore
argument_list|(
name|window
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createPlatformOpenGLContext
name|QPlatformOpenGLContext
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|createPlatformOpenGLContext
parameter_list|(
name|QOpenGLContext
modifier|*
name|context
parameter_list|)
specifier|const
block|{
name|QSurfaceFormat
name|format
argument_list|(
name|context
operator|->
name|format
argument_list|()
argument_list|)
decl_stmt|;
name|format
operator|.
name|setAlphaBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRedBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format
operator|.
name|setGreenBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format
operator|.
name|setBlueBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
return|return
operator|new
name|QAndroidPlatformOpenGLContext
argument_list|(
name|format
argument_list|,
name|context
operator|->
name|shareHandle
argument_list|()
argument_list|,
name|m_eglDisplay
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createPlatformOffscreenSurface
name|QPlatformOffscreenSurface
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|createPlatformOffscreenSurface
parameter_list|(
name|QOffscreenSurface
modifier|*
name|surface
parameter_list|)
specifier|const
block|{
name|QSurfaceFormat
name|format
argument_list|(
name|surface
operator|->
name|requestedFormat
argument_list|()
argument_list|)
decl_stmt|;
name|format
operator|.
name|setAlphaBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRedBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format
operator|.
name|setGreenBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format
operator|.
name|setBlueBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
return|return
operator|new
name|QEGLPbuffer
argument_list|(
name|m_eglDisplay
argument_list|,
name|format
argument_list|,
name|surface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createPlatformWindow
name|QPlatformWindow
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|createPlatformWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|window
operator|->
name|type
argument_list|()
operator|==
name|Qt
operator|::
name|ForeignWindow
condition|)
return|return
operator|new
name|QAndroidPlatformForeignWindow
argument_list|(
name|window
argument_list|)
return|;
else|else
return|return
operator|new
name|QAndroidPlatformOpenGLWindow
argument_list|(
name|window
argument_list|,
name|m_eglDisplay
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createEventDispatcher
name|QAbstractEventDispatcher
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|createEventDispatcher
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QAndroidEventDispatcher
return|;
block|}
end_function
begin_destructor
DECL|function|~QAndroidPlatformIntegration
name|QAndroidPlatformIntegration
operator|::
name|~
name|QAndroidPlatformIntegration
parameter_list|()
block|{
if|if
condition|(
name|m_eglDisplay
operator|!=
name|EGL_NO_DISPLAY
condition|)
name|eglTerminate
argument_list|(
name|m_eglDisplay
argument_list|)
expr_stmt|;
operator|delete
name|m_androidPlatformNativeInterface
expr_stmt|;
operator|delete
name|m_androidFDB
expr_stmt|;
operator|delete
name|m_androidSystemLocale
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
operator|delete
name|m_androidPlatformClipboard
expr_stmt|;
endif|#
directive|endif
name|QtAndroid
operator|::
name|setAndroidPlatformIntegration
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|fontDatabase
name|QPlatformFontDatabase
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|fontDatabase
parameter_list|()
specifier|const
block|{
return|return
name|m_androidFDB
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|clipboard
name|QPlatformClipboard
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|clipboard
parameter_list|()
specifier|const
block|{
return|return
name|m_androidPlatformClipboard
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|inputContext
name|QPlatformInputContext
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|inputContext
parameter_list|()
specifier|const
block|{
return|return
operator|&
name|m_platformInputContext
return|;
block|}
end_function
begin_function
DECL|function|nativeInterface
name|QPlatformNativeInterface
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|nativeInterface
parameter_list|()
specifier|const
block|{
return|return
name|m_androidPlatformNativeInterface
return|;
block|}
end_function
begin_function
DECL|function|services
name|QPlatformServices
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|services
parameter_list|()
specifier|const
block|{
return|return
name|m_androidPlatformServices
return|;
block|}
end_function
begin_function
DECL|function|styleHint
name|QVariant
name|QAndroidPlatformIntegration
operator|::
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|ShowIsMaximized
case|:
return|return
literal|true
return|;
default|default:
return|return
name|QPlatformIntegration
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|defaultWindowState
name|Qt
operator|::
name|WindowState
name|QAndroidPlatformIntegration
operator|::
name|defaultWindowState
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
specifier|const
block|{
comment|// Don't maximize dialogs on Android
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|Dialog
operator|&
operator|~
name|Qt
operator|::
name|Window
condition|)
return|return
name|Qt
operator|::
name|WindowNoState
return|;
return|return
name|QPlatformIntegration
operator|::
name|defaultWindowState
argument_list|(
name|flags
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
specifier|static
specifier|const
name|QLatin1String
name|androidThemeName
argument_list|(
literal|"android"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|themeNames
name|QStringList
name|QAndroidPlatformIntegration
operator|::
name|themeNames
parameter_list|()
specifier|const
block|{
return|return
name|QStringList
argument_list|(
name|QString
argument_list|(
name|androidThemeName
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createPlatformTheme
name|QPlatformTheme
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|createPlatformTheme
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|androidThemeName
operator|==
name|name
condition|)
return|return
operator|new
name|QAndroidPlatformTheme
argument_list|(
name|m_androidPlatformNativeInterface
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setDefaultDisplayMetrics
name|void
name|QAndroidPlatformIntegration
operator|::
name|setDefaultDisplayMetrics
parameter_list|(
name|int
name|gw
parameter_list|,
name|int
name|gh
parameter_list|,
name|int
name|sw
parameter_list|,
name|int
name|sh
parameter_list|,
name|int
name|screenWidth
parameter_list|,
name|int
name|screenHeight
parameter_list|)
block|{
name|m_defaultGeometryWidth
operator|=
name|gw
expr_stmt|;
name|m_defaultGeometryHeight
operator|=
name|gh
expr_stmt|;
name|m_defaultPhysicalSizeWidth
operator|=
name|sw
expr_stmt|;
name|m_defaultPhysicalSizeHeight
operator|=
name|sh
expr_stmt|;
name|m_defaultScreenWidth
operator|=
name|screenWidth
expr_stmt|;
name|m_defaultScreenHeight
operator|=
name|screenHeight
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDefaultDesktopSize
name|void
name|QAndroidPlatformIntegration
operator|::
name|setDefaultDesktopSize
parameter_list|(
name|int
name|gw
parameter_list|,
name|int
name|gh
parameter_list|)
block|{
name|m_defaultGeometryWidth
operator|=
name|gw
expr_stmt|;
name|m_defaultGeometryHeight
operator|=
name|gh
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setScreenOrientation
name|void
name|QAndroidPlatformIntegration
operator|::
name|setScreenOrientation
parameter_list|(
name|Qt
operator|::
name|ScreenOrientation
name|currentOrientation
parameter_list|,
name|Qt
operator|::
name|ScreenOrientation
name|nativeOrientation
parameter_list|)
block|{
name|m_orientation
operator|=
name|currentOrientation
expr_stmt|;
name|m_nativeOrientation
operator|=
name|nativeOrientation
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_function
DECL|function|accessibility
name|QPlatformAccessibility
modifier|*
name|QAndroidPlatformIntegration
operator|::
name|accessibility
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_accessibility
condition|)
name|m_accessibility
operator|=
operator|new
name|QAndroidPlatformAccessibility
argument_list|()
expr_stmt|;
return|return
name|m_accessibility
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setDesktopSize
name|void
name|QAndroidPlatformIntegration
operator|::
name|setDesktopSize
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
if|if
condition|(
name|m_primaryScreen
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|m_primaryScreen
argument_list|,
literal|"setAvailableGeometry"
argument_list|,
name|Qt
operator|::
name|AutoConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QRect
argument_list|,
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDisplayMetrics
name|void
name|QAndroidPlatformIntegration
operator|::
name|setDisplayMetrics
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
if|if
condition|(
name|m_primaryScreen
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|m_primaryScreen
argument_list|,
literal|"setPhysicalSize"
argument_list|,
name|Qt
operator|::
name|AutoConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QSize
argument_list|,
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setScreenSize
name|void
name|QAndroidPlatformIntegration
operator|::
name|setScreenSize
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
if|if
condition|(
name|m_primaryScreen
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|m_primaryScreen
argument_list|,
literal|"setSize"
argument_list|,
name|Qt
operator|::
name|AutoConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QSize
argument_list|,
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
