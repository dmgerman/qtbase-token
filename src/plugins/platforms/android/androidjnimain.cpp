begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 BogDan Vatra<bogdan@kde.org> ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<dlfcn.h>
end_include
begin_include
include|#
directive|include
file|<pthread.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qpoint.h>
end_include
begin_include
include|#
directive|include
file|<qplugin.h>
end_include
begin_include
include|#
directive|include
file|<qsemaphore.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<qobjectdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qjni_p.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_include
include|#
directive|include
file|"androidjniaccessibility.h"
end_include
begin_include
include|#
directive|include
file|"androidjniinput.h"
end_include
begin_include
include|#
directive|include
file|"androidjniclipboard.h"
end_include
begin_include
include|#
directive|include
file|"androidjnimenu.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformdialoghelpers.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformintegration.h"
end_include
begin_include
include|#
directive|include
file|<qabstracteventdispatcher.h>
end_include
begin_include
include|#
directive|include
file|<android/bitmap.h>
end_include
begin_include
include|#
directive|include
file|<android/asset_manager_jni.h>
end_include
begin_include
include|#
directive|include
file|"qandroidassetsfileenginehandler.h"
end_include
begin_include
include|#
directive|include
file|<android/api-level.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qjnihelpers_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_macro
name|Q_IMPORT_PLUGIN
argument_list|(
argument|QAndroidPlatformIntegrationPlugin
argument_list|)
end_macro
begin_decl_stmt
DECL|variable|m_javaVM
specifier|static
name|JavaVM
modifier|*
name|m_javaVM
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_applicationClass
specifier|static
name|jclass
name|m_applicationClass
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_classLoaderObject
specifier|static
name|jobject
name|m_classLoaderObject
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_loadClassMethodID
specifier|static
name|jmethodID
name|m_loadClassMethodID
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_assetManager
specifier|static
name|AAssetManager
modifier|*
name|m_assetManager
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_resourcesObj
specifier|static
name|jobject
name|m_resourcesObj
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_activityObject
specifier|static
name|jobject
name|m_activityObject
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_createSurfaceMethodID
specifier|static
name|jmethodID
name|m_createSurfaceMethodID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_insertNativeViewMethodID
specifier|static
name|jmethodID
name|m_insertNativeViewMethodID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_setSurfaceGeometryMethodID
specifier|static
name|jmethodID
name|m_setSurfaceGeometryMethodID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_destroySurfaceMethodID
specifier|static
name|jmethodID
name|m_destroySurfaceMethodID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_activityActive
specifier|static
name|bool
name|m_activityActive
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|m_activityActive
comment|// defaults to true because when the platform plugin is
end_comment
begin_comment
comment|// initialized, QtActivity::onResume() has already been called
end_comment
begin_decl_stmt
DECL|variable|m_bitmapClass
specifier|static
name|jclass
name|m_bitmapClass
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_createBitmapMethodID
specifier|static
name|jmethodID
name|m_createBitmapMethodID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_ARGB_8888_BitmapConfigValue
specifier|static
name|jobject
name|m_ARGB_8888_BitmapConfigValue
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_RGB_565_BitmapConfigValue
specifier|static
name|jobject
name|m_RGB_565_BitmapConfigValue
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_setFullScreenMethodID
name|jmethodID
name|m_setFullScreenMethodID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_statusBarShowing
specifier|static
name|bool
name|m_statusBarShowing
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_bitmapDrawableClass
specifier|static
name|jclass
name|m_bitmapDrawableClass
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_bitmapDrawableConstructorMethodID
specifier|static
name|jmethodID
name|m_bitmapDrawableConstructorMethodID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_extern
DECL|typedef|Main
extern|extern
literal|"C"
typedef|typedef
name|int
function_decl|(
modifier|*
name|Main
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_extern
begin_comment
DECL|typedef|Main
comment|//use the standard main method to start the application
end_comment
begin_decl_stmt
DECL|variable|m_main
specifier|static
name|Main
name|m_main
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_mainLibraryHnd
specifier|static
name|void
modifier|*
name|m_mainLibraryHnd
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_applicationParams
specifier|static
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|m_applicationParams
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|SurfaceData
struct|struct
name|SurfaceData
block|{
DECL|function|~SurfaceData
name|~
name|SurfaceData
parameter_list|()
block|{
operator|delete
name|surface
expr_stmt|;
block|}
DECL|member|surface
name|QJNIObjectPrivate
modifier|*
name|surface
init|=
literal|0
decl_stmt|;
DECL|member|client
name|AndroidSurfaceClient
modifier|*
name|client
init|=
literal|0
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|m_surfaces
name|QHash
argument_list|<
name|int
argument_list|,
name|AndroidSurfaceClient
modifier|*
argument_list|>
name|m_surfaces
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_surfacesMutex
specifier|static
name|QMutex
name|m_surfacesMutex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_surfaceId
specifier|static
name|int
name|m_surfaceId
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_quitAppSemaphore
specifier|static
name|QSemaphore
name|m_quitAppSemaphore
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_pauseApplicationSemaphore
specifier|static
name|QSemaphore
name|m_pauseApplicationSemaphore
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_pauseApplicationMutex
specifier|static
name|QMutex
name|m_pauseApplicationMutex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_androidPlatformIntegration
specifier|static
name|QAndroidPlatformIntegration
modifier|*
name|m_androidPlatformIntegration
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_desktopWidthPixels
specifier|static
name|int
name|m_desktopWidthPixels
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_desktopHeightPixels
specifier|static
name|int
name|m_desktopHeightPixels
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_scaledDensity
specifier|static
name|double
name|m_scaledDensity
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_pauseApplication
specifier|static
specifier|volatile
name|bool
name|m_pauseApplication
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_androidAssetsFileEngineHandler
specifier|static
name|AndroidAssetsFileEngineHandler
modifier|*
name|m_androidAssetsFileEngineHandler
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_qtTag
specifier|static
specifier|const
name|char
name|m_qtTag
index|[]
init|=
literal|"Qt"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_classErrorMsg
specifier|static
specifier|const
name|char
name|m_classErrorMsg
index|[]
init|=
literal|"Can't find class \"%s\""
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_methodErrorMsg
specifier|static
specifier|const
name|char
name|m_methodErrorMsg
index|[]
init|=
literal|"Can't find method \"%s%s\""
decl_stmt|;
end_decl_stmt
begin_namespace
DECL|namespace|QtAndroid
namespace|namespace
name|QtAndroid
block|{
DECL|function|setAndroidPlatformIntegration
name|void
name|setAndroidPlatformIntegration
parameter_list|(
name|QAndroidPlatformIntegration
modifier|*
name|androidPlatformIntegration
parameter_list|)
block|{
name|m_surfacesMutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|m_androidPlatformIntegration
operator|=
name|androidPlatformIntegration
expr_stmt|;
name|m_surfacesMutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|function|androidPlatformIntegration
name|QAndroidPlatformIntegration
modifier|*
name|androidPlatformIntegration
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|m_surfacesMutex
argument_list|)
decl_stmt|;
return|return
name|m_androidPlatformIntegration
return|;
block|}
DECL|function|topLevelWindowAt
name|QWindow
modifier|*
name|topLevelWindowAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
block|{
return|return
name|m_androidPlatformIntegration
condition|?
name|m_androidPlatformIntegration
operator|->
name|screen
argument_list|()
operator|->
name|topLevelAt
argument_list|(
name|globalPos
argument_list|)
else|:
literal|0
return|;
block|}
DECL|function|desktopWidthPixels
name|int
name|desktopWidthPixels
parameter_list|()
block|{
return|return
name|m_desktopWidthPixels
return|;
block|}
DECL|function|desktopHeightPixels
name|int
name|desktopHeightPixels
parameter_list|()
block|{
return|return
name|m_desktopHeightPixels
return|;
block|}
DECL|function|scaledDensity
name|double
name|scaledDensity
parameter_list|()
block|{
return|return
name|m_scaledDensity
return|;
block|}
DECL|function|javaVM
name|JavaVM
modifier|*
name|javaVM
parameter_list|()
block|{
return|return
name|m_javaVM
return|;
block|}
DECL|function|findClass
name|jclass
name|findClass
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|CallObjectMethod
argument_list|(
name|m_classLoaderObject
argument_list|,
name|m_loadClassMethodID
argument_list|,
name|env
operator|->
name|NewString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|jchar
operator|*
argument_list|>
argument_list|(
name|className
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|jsize
argument_list|(
name|className
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|function|assetManager
name|AAssetManager
modifier|*
name|assetManager
parameter_list|()
block|{
return|return
name|m_assetManager
return|;
block|}
DECL|function|applicationClass
name|jclass
name|applicationClass
parameter_list|()
block|{
return|return
name|m_applicationClass
return|;
block|}
DECL|function|activity
name|jobject
name|activity
parameter_list|()
block|{
return|return
name|m_activityObject
return|;
block|}
DECL|function|showStatusBar
name|void
name|showStatusBar
parameter_list|()
block|{
if|if
condition|(
name|m_statusBarShowing
condition|)
return|return;
name|QtAndroid
operator|::
name|AttachedJNIEnv
name|env
decl_stmt|;
if|if
condition|(
name|env
operator|.
name|jniEnv
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to get JNI Environment."
argument_list|)
expr_stmt|;
return|return;
block|}
name|env
operator|.
name|jniEnv
operator|->
name|CallStaticVoidMethod
argument_list|(
name|m_applicationClass
argument_list|,
name|m_setFullScreenMethodID
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|m_statusBarShowing
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|hideStatusBar
name|void
name|hideStatusBar
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_statusBarShowing
condition|)
return|return;
name|QtAndroid
operator|::
name|AttachedJNIEnv
name|env
decl_stmt|;
if|if
condition|(
name|env
operator|.
name|jniEnv
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to get JNI Environment."
argument_list|)
expr_stmt|;
return|return;
block|}
name|env
operator|.
name|jniEnv
operator|->
name|CallStaticVoidMethod
argument_list|(
name|m_applicationClass
argument_list|,
name|m_setFullScreenMethodID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|m_statusBarShowing
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|setApplicationActive
name|void
name|setApplicationActive
parameter_list|()
block|{
if|if
condition|(
name|m_activityActive
condition|)
name|QWindowSystemInterface
operator|::
name|handleApplicationStateChanged
argument_list|(
name|Qt
operator|::
name|ApplicationActive
argument_list|)
expr_stmt|;
block|}
DECL|function|createBitmap
name|jobject
name|createBitmap
parameter_list|(
name|QImage
name|img
parameter_list|,
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_bitmapClass
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|img
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_RGBA8888
operator|&&
name|img
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_RGB16
condition|)
name|img
operator|=
name|img
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGBA8888
argument_list|)
expr_stmt|;
name|jobject
name|bitmap
init|=
name|env
operator|->
name|CallStaticObjectMethod
argument_list|(
name|m_bitmapClass
argument_list|,
name|m_createBitmapMethodID
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGBA8888
condition|?
name|m_ARGB_8888_BitmapConfigValue
else|:
name|m_RGB_565_BitmapConfigValue
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bitmap
condition|)
return|return
literal|0
return|;
name|AndroidBitmapInfo
name|info
decl_stmt|;
if|if
condition|(
name|AndroidBitmap_getInfo
argument_list|(
name|env
argument_list|,
name|bitmap
argument_list|,
operator|&
name|info
argument_list|)
operator|<
literal|0
condition|)
block|{
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|void
modifier|*
name|pixels
decl_stmt|;
if|if
condition|(
name|AndroidBitmap_lockPixels
argument_list|(
name|env
argument_list|,
name|bitmap
argument_list|,
operator|&
name|pixels
argument_list|)
operator|<
literal|0
condition|)
block|{
name|env
operator|->
name|DeleteLocalRef
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|info
operator|.
name|stride
operator|==
name|uint
argument_list|(
name|img
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
operator|&&
name|info
operator|.
name|width
operator|==
name|uint
argument_list|(
name|img
operator|.
name|width
argument_list|()
argument_list|)
operator|&&
name|info
operator|.
name|height
operator|==
name|uint
argument_list|(
name|img
operator|.
name|height
argument_list|()
argument_list|)
condition|)
block|{
name|memcpy
argument_list|(
name|pixels
argument_list|,
name|img
operator|.
name|constBits
argument_list|()
argument_list|,
name|info
operator|.
name|stride
operator|*
name|info
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uchar
modifier|*
name|bmpPtr
init|=
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|pixels
argument_list|)
decl_stmt|;
specifier|const
name|unsigned
name|width
init|=
name|qMin
argument_list|(
name|info
operator|.
name|width
argument_list|,
operator|(
name|uint
operator|)
name|img
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
comment|//should be the same
specifier|const
name|unsigned
name|height
init|=
name|qMin
argument_list|(
name|info
operator|.
name|height
argument_list|,
operator|(
name|uint
operator|)
name|img
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
comment|//should be the same
for|for
control|(
name|unsigned
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
operator|,
name|bmpPtr
operator|+=
name|info
operator|.
name|stride
control|)
name|memcpy
argument_list|(
name|bmpPtr
argument_list|,
name|img
operator|.
name|constScanLine
argument_list|(
name|y
argument_list|)
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
name|AndroidBitmap_unlockPixels
argument_list|(
name|env
argument_list|,
name|bitmap
argument_list|)
expr_stmt|;
return|return
name|bitmap
return|;
block|}
DECL|function|createBitmap
name|jobject
name|createBitmap
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|QImage
operator|::
name|Format
name|format
parameter_list|,
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
if|if
condition|(
name|format
operator|!=
name|QImage
operator|::
name|Format_RGBA8888
operator|&&
name|format
operator|!=
name|QImage
operator|::
name|Format_RGB16
condition|)
return|return
literal|0
return|;
return|return
name|env
operator|->
name|CallStaticObjectMethod
argument_list|(
name|m_bitmapClass
argument_list|,
name|m_createBitmapMethodID
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
operator|==
name|QImage
operator|::
name|Format_RGB16
condition|?
name|m_RGB_565_BitmapConfigValue
else|:
name|m_ARGB_8888_BitmapConfigValue
argument_list|)
return|;
block|}
DECL|function|createBitmapDrawable
name|jobject
name|createBitmapDrawable
parameter_list|(
name|jobject
name|bitmap
parameter_list|,
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
if|if
condition|(
operator|!
name|bitmap
operator|||
operator|!
name|m_bitmapDrawableClass
operator|||
operator|!
name|m_resourcesObj
condition|)
return|return
literal|0
return|;
return|return
name|env
operator|->
name|NewObject
argument_list|(
name|m_bitmapDrawableClass
argument_list|,
name|m_bitmapDrawableConstructorMethodID
argument_list|,
name|m_resourcesObj
argument_list|,
name|bitmap
argument_list|)
return|;
block|}
DECL|function|classErrorMsgFmt
specifier|const
name|char
modifier|*
name|classErrorMsgFmt
parameter_list|()
block|{
return|return
name|m_classErrorMsg
return|;
block|}
DECL|function|methodErrorMsgFmt
specifier|const
name|char
modifier|*
name|methodErrorMsgFmt
parameter_list|()
block|{
return|return
name|m_methodErrorMsg
return|;
block|}
DECL|function|qtTagText
specifier|const
name|char
modifier|*
name|qtTagText
parameter_list|()
block|{
return|return
name|m_qtTag
return|;
block|}
DECL|function|deviceName
name|QString
name|deviceName
parameter_list|()
block|{
name|QString
name|manufacturer
init|=
name|QJNIObjectPrivate
operator|::
name|getStaticObjectField
argument_list|(
literal|"android/os/Build"
argument_list|,
literal|"MANUFACTURER"
argument_list|,
literal|"Ljava/lang/String;"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QString
name|model
init|=
name|QJNIObjectPrivate
operator|::
name|getStaticObjectField
argument_list|(
literal|"android/os/Build"
argument_list|,
literal|"MODEL"
argument_list|,
literal|"Ljava/lang/String;"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|manufacturer
operator|+
name|QStringLiteral
argument_list|(
literal|" "
argument_list|)
operator|+
name|model
return|;
block|}
DECL|function|createSurface
name|int
name|createSurface
parameter_list|(
name|AndroidSurfaceClient
modifier|*
name|client
parameter_list|,
specifier|const
name|QRect
modifier|&
name|geometry
parameter_list|,
name|bool
name|onTop
parameter_list|,
name|int
name|imageDepth
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
if|if
condition|(
operator|!
name|env
condition|)
return|return
operator|-
literal|1
return|;
name|m_surfacesMutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|int
name|surfaceId
init|=
name|m_surfaceId
operator|++
decl_stmt|;
name|m_surfaces
index|[
name|surfaceId
index|]
operator|=
name|client
expr_stmt|;
name|m_surfacesMutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|jint
name|x
init|=
literal|0
decl_stmt|,
name|y
init|=
literal|0
decl_stmt|,
name|w
init|=
operator|-
literal|1
decl_stmt|,
name|h
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|geometry
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|x
operator|=
name|geometry
operator|.
name|x
argument_list|()
expr_stmt|;
name|y
operator|=
name|geometry
operator|.
name|y
argument_list|()
expr_stmt|;
name|w
operator|=
name|std
operator|::
name|max
argument_list|(
name|geometry
operator|.
name|width
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|h
operator|=
name|std
operator|::
name|max
argument_list|(
name|geometry
operator|.
name|height
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|env
operator|->
name|CallStaticVoidMethod
argument_list|(
name|m_applicationClass
argument_list|,
name|m_createSurfaceMethodID
argument_list|,
name|surfaceId
argument_list|,
name|jboolean
argument_list|(
name|onTop
argument_list|)
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|imageDepth
argument_list|)
expr_stmt|;
return|return
name|surfaceId
return|;
block|}
DECL|function|insertNativeView
name|int
name|insertNativeView
parameter_list|(
name|jobject
name|view
parameter_list|,
specifier|const
name|QRect
modifier|&
name|geometry
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
if|if
condition|(
operator|!
name|env
condition|)
return|return
literal|0
return|;
name|m_surfacesMutex
operator|.
name|lock
argument_list|()
expr_stmt|;
specifier|const
name|int
name|surfaceId
init|=
name|m_surfaceId
operator|++
decl_stmt|;
name|m_surfacesMutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|jint
name|x
init|=
literal|0
decl_stmt|,
name|y
init|=
literal|0
decl_stmt|,
name|w
init|=
operator|-
literal|1
decl_stmt|,
name|h
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|geometry
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|x
operator|=
name|geometry
operator|.
name|x
argument_list|()
expr_stmt|;
name|y
operator|=
name|geometry
operator|.
name|y
argument_list|()
expr_stmt|;
name|w
operator|=
name|std
operator|::
name|max
argument_list|(
name|geometry
operator|.
name|width
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|h
operator|=
name|std
operator|::
name|max
argument_list|(
name|geometry
operator|.
name|height
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|env
operator|->
name|CallStaticVoidMethod
argument_list|(
name|m_applicationClass
argument_list|,
name|m_insertNativeViewMethodID
argument_list|,
name|surfaceId
argument_list|,
name|view
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
return|return
name|surfaceId
return|;
block|}
DECL|function|setSurfaceGeometry
name|void
name|setSurfaceGeometry
parameter_list|(
name|int
name|surfaceId
parameter_list|,
specifier|const
name|QRect
modifier|&
name|geometry
parameter_list|)
block|{
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
if|if
condition|(
operator|!
name|env
condition|)
return|return;
name|jint
name|x
init|=
literal|0
decl_stmt|,
name|y
init|=
literal|0
decl_stmt|,
name|w
init|=
operator|-
literal|1
decl_stmt|,
name|h
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|geometry
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|x
operator|=
name|geometry
operator|.
name|x
argument_list|()
expr_stmt|;
name|y
operator|=
name|geometry
operator|.
name|y
argument_list|()
expr_stmt|;
name|w
operator|=
name|geometry
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|geometry
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|env
operator|->
name|CallStaticVoidMethod
argument_list|(
name|m_applicationClass
argument_list|,
name|m_setSurfaceGeometryMethodID
argument_list|,
name|surfaceId
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
DECL|function|destroySurface
name|void
name|destroySurface
parameter_list|(
name|int
name|surfaceId
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|m_surfacesMutex
argument_list|)
decl_stmt|;
specifier|const
specifier|auto
modifier|&
name|it
init|=
name|m_surfaces
operator|.
name|find
argument_list|(
name|surfaceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|m_surfaces
operator|.
name|end
argument_list|()
condition|)
return|return;
name|m_surfaces
operator|.
name|remove
argument_list|(
name|surfaceId
argument_list|)
expr_stmt|;
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
if|if
condition|(
operator|!
name|env
condition|)
return|return;
name|env
operator|->
name|CallStaticVoidMethod
argument_list|(
name|m_applicationClass
argument_list|,
name|m_destroySurfaceMethodID
argument_list|,
name|surfaceId
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace QtAndroid
end_comment
begin_function
DECL|function|startQtAndroidPlugin
specifier|static
name|jboolean
name|startQtAndroidPlugin
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*object*/
comment|/*, jobject applicationAssetManager*/
parameter_list|)
block|{
name|m_androidPlatformIntegration
operator|=
literal|0
expr_stmt|;
name|m_androidAssetsFileEngineHandler
operator|=
operator|new
name|AndroidAssetsFileEngineHandler
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|startMainMethod
specifier|static
name|void
modifier|*
name|startMainMethod
parameter_list|(
name|void
modifier|*
comment|/*data*/
parameter_list|)
block|{
name|QVarLengthArray
argument_list|<
specifier|const
name|char
modifier|*
argument_list|>
name|params
argument_list|(
name|m_applicationParams
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_applicationParams
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|params
index|[
name|i
index|]
operator|=
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|m_applicationParams
index|[
name|i
index|]
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|m_main
argument_list|(
name|m_applicationParams
operator|.
name|length
argument_list|()
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
operator|*
argument_list|>
argument_list|(
name|params
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_mainLibraryHnd
condition|)
block|{
name|int
name|res
init|=
name|dlclose
argument_list|(
name|m_mainLibraryHnd
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|<
literal|0
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"dlclose failed:"
operator|<<
name|dlerror
argument_list|()
expr_stmt|;
block|}
name|QtAndroid
operator|::
name|AttachedJNIEnv
name|env
decl_stmt|;
if|if
condition|(
operator|!
name|env
operator|.
name|jniEnv
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|m_applicationClass
condition|)
block|{
name|jmethodID
name|quitApp
init|=
name|env
operator|.
name|jniEnv
operator|->
name|GetStaticMethodID
argument_list|(
name|m_applicationClass
argument_list|,
literal|"quitApp"
argument_list|,
literal|"()V"
argument_list|)
decl_stmt|;
name|env
operator|.
name|jniEnv
operator|->
name|CallStaticVoidMethod
argument_list|(
name|m_applicationClass
argument_list|,
name|quitApp
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|startQtApplication
specifier|static
name|jboolean
name|startQtApplication
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*object*/
parameter_list|,
name|jstring
name|paramsString
parameter_list|,
name|jstring
name|environmentString
parameter_list|)
block|{
name|m_mainLibraryHnd
operator|=
name|NULL
expr_stmt|;
specifier|const
name|char
modifier|*
name|nativeString
init|=
name|env
operator|->
name|GetStringUTFChars
argument_list|(
name|environmentString
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QByteArray
name|string
init|=
name|nativeString
decl_stmt|;
name|env
operator|->
name|ReleaseStringUTFChars
argument_list|(
name|environmentString
argument_list|,
name|nativeString
argument_list|)
expr_stmt|;
name|m_applicationParams
operator|=
name|string
operator|.
name|split
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|string
init|,
name|m_applicationParams
control|)
block|{
if|if
condition|(
operator|!
name|string
operator|.
name|isEmpty
argument_list|()
operator|&&
name|putenv
argument_list|(
name|string
operator|.
name|constData
argument_list|()
argument_list|)
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"Can't set environment"
operator|<<
name|string
expr_stmt|;
block|}
name|nativeString
operator|=
name|env
operator|->
name|GetStringUTFChars
argument_list|(
name|paramsString
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|string
operator|=
name|nativeString
expr_stmt|;
name|env
operator|->
name|ReleaseStringUTFChars
argument_list|(
name|paramsString
argument_list|,
name|nativeString
argument_list|)
expr_stmt|;
name|m_applicationParams
operator|=
name|string
operator|.
name|split
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
comment|// Go home
name|QDir
operator|::
name|setCurrent
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
comment|//look for main()
if|if
condition|(
name|m_applicationParams
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// Obtain a handle to the main library (the library that contains the main() function).
comment|// This library should already be loaded, and calling dlopen() will just return a reference to it.
name|m_mainLibraryHnd
operator|=
name|dlopen
argument_list|(
name|m_applicationParams
operator|.
name|first
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_mainLibraryHnd
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"dlopen failed:"
operator|<<
name|dlerror
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|m_main
operator|=
operator|(
name|Main
operator|)
name|dlsym
argument_list|(
name|m_mainLibraryHnd
argument_list|,
literal|"main"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"No main library was specified; searching entire process (this is slow!)"
expr_stmt|;
name|m_main
operator|=
operator|(
name|Main
operator|)
name|dlsym
argument_list|(
name|RTLD_DEFAULT
argument_list|,
literal|"main"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_main
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"dlsym failed:"
operator|<<
name|dlerror
argument_list|()
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"Could not find main method"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|pthread_t
name|appThread
decl_stmt|;
return|return
name|pthread_create
argument_list|(
operator|&
name|appThread
argument_list|,
name|NULL
argument_list|,
name|startMainMethod
argument_list|,
name|NULL
argument_list|)
operator|==
literal|0
return|;
block|}
end_function
begin_function
DECL|function|quitQtAndroidPlugin
specifier|static
name|void
name|quitQtAndroidPlugin
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jclass
comment|/*clazz*/
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|m_androidPlatformIntegration
operator|=
literal|0
expr_stmt|;
operator|delete
name|m_androidAssetsFileEngineHandler
expr_stmt|;
block|}
end_function
begin_function
DECL|function|terminateQt
specifier|static
name|void
name|terminateQt
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jclass
comment|/*clazz*/
parameter_list|)
block|{
name|env
operator|->
name|DeleteGlobalRef
argument_list|(
name|m_applicationClass
argument_list|)
expr_stmt|;
name|env
operator|->
name|DeleteGlobalRef
argument_list|(
name|m_classLoaderObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_resourcesObj
condition|)
name|env
operator|->
name|DeleteGlobalRef
argument_list|(
name|m_resourcesObj
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_activityObject
condition|)
name|env
operator|->
name|DeleteGlobalRef
argument_list|(
name|m_activityObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_bitmapClass
condition|)
name|env
operator|->
name|DeleteGlobalRef
argument_list|(
name|m_bitmapClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_ARGB_8888_BitmapConfigValue
condition|)
name|env
operator|->
name|DeleteGlobalRef
argument_list|(
name|m_ARGB_8888_BitmapConfigValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_RGB_565_BitmapConfigValue
condition|)
name|env
operator|->
name|DeleteGlobalRef
argument_list|(
name|m_RGB_565_BitmapConfigValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_bitmapDrawableClass
condition|)
name|env
operator|->
name|DeleteGlobalRef
argument_list|(
name|m_bitmapDrawableClass
argument_list|)
expr_stmt|;
name|m_androidPlatformIntegration
operator|=
literal|0
expr_stmt|;
operator|delete
name|m_androidAssetsFileEngineHandler
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSurface
specifier|static
name|void
name|setSurface
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|id
parameter_list|,
name|jobject
name|jSurface
parameter_list|,
name|jint
name|w
parameter_list|,
name|jint
name|h
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|m_surfacesMutex
argument_list|)
decl_stmt|;
specifier|const
specifier|auto
modifier|&
name|it
init|=
name|m_surfaces
operator|.
name|find
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|m_surfaces
operator|.
name|end
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Can't find surface"
operator|<<
name|id
expr_stmt|;
return|return;
block|}
name|it
operator|.
name|value
argument_list|()
operator|->
name|surfaceChanged
argument_list|(
name|env
argument_list|,
name|jSurface
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDisplayMetrics
specifier|static
name|void
name|setDisplayMetrics
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jclass
comment|/*clazz*/
parameter_list|,
name|jint
comment|/*widthPixels*/
parameter_list|,
name|jint
comment|/*heightPixels*/
parameter_list|,
name|jint
name|desktopWidthPixels
parameter_list|,
name|jint
name|desktopHeightPixels
parameter_list|,
name|jdouble
name|xdpi
parameter_list|,
name|jdouble
name|ydpi
parameter_list|,
name|jdouble
name|scaledDensity
parameter_list|)
block|{
name|m_desktopWidthPixels
operator|=
name|desktopWidthPixels
expr_stmt|;
name|m_desktopHeightPixels
operator|=
name|desktopHeightPixels
expr_stmt|;
name|m_scaledDensity
operator|=
name|scaledDensity
expr_stmt|;
if|if
condition|(
operator|!
name|m_androidPlatformIntegration
condition|)
block|{
name|QAndroidPlatformIntegration
operator|::
name|setDefaultDisplayMetrics
argument_list|(
name|desktopWidthPixels
argument_list|,
name|desktopHeightPixels
argument_list|,
name|qRound
argument_list|(
name|double
argument_list|(
name|desktopWidthPixels
argument_list|)
operator|/
name|xdpi
operator|*
literal|25.4
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|double
argument_list|(
name|desktopHeightPixels
argument_list|)
operator|/
name|ydpi
operator|*
literal|25.4
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_androidPlatformIntegration
operator|->
name|setDisplayMetrics
argument_list|(
name|qRound
argument_list|(
name|double
argument_list|(
name|desktopWidthPixels
argument_list|)
operator|/
name|xdpi
operator|*
literal|25.4
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|double
argument_list|(
name|desktopHeightPixels
argument_list|)
operator|/
name|ydpi
operator|*
literal|25.4
argument_list|)
argument_list|)
expr_stmt|;
name|m_androidPlatformIntegration
operator|->
name|setDesktopSize
argument_list|(
name|desktopWidthPixels
argument_list|,
name|desktopHeightPixels
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateWindow
specifier|static
name|void
name|updateWindow
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidPlatformIntegration
condition|)
return|return;
if|if
condition|(
name|QGuiApplication
operator|::
name|instance
argument_list|()
operator|!=
literal|0
condition|)
block|{
foreach|foreach
control|(
name|QWindow
modifier|*
name|w
decl|,
name|QGuiApplication
operator|::
name|topLevelWindows
argument_list|()
control|)
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|w
argument_list|,
name|QRegion
argument_list|(
name|w
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QAndroidPlatformScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QAndroidPlatformScreen
operator|*
argument_list|>
argument_list|(
name|m_androidPlatformIntegration
operator|->
name|screen
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|screen
operator|->
name|rasterSurfaces
argument_list|()
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|screen
argument_list|,
literal|"setDirty"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QRect
argument_list|,
name|screen
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateApplicationState
specifier|static
name|void
name|updateApplicationState
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|state
parameter_list|)
block|{
name|m_activityActive
operator|=
operator|(
name|state
operator|==
name|Qt
operator|::
name|ApplicationActive
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_androidPlatformIntegration
operator|||
operator|!
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
condition|)
return|return;
name|QWindowSystemInterface
operator|::
name|handleApplicationStateChanged
argument_list|(
name|Qt
operator|::
name|ApplicationState
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleOrientationChanged
specifier|static
name|void
name|handleOrientationChanged
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|newRotation
parameter_list|,
name|jint
name|nativeOrientation
parameter_list|)
block|{
comment|// Array of orientations rotated in 90 degree increments, counterclockwise
comment|// (same direction as Android measures angles)
specifier|static
specifier|const
name|Qt
operator|::
name|ScreenOrientation
name|orientations
index|[]
init|=
block|{
name|Qt
operator|::
name|PortraitOrientation
block|,
name|Qt
operator|::
name|LandscapeOrientation
block|,
name|Qt
operator|::
name|InvertedPortraitOrientation
block|,
name|Qt
operator|::
name|InvertedLandscapeOrientation
block|}
decl_stmt|;
comment|// The Android API defines the following constants:
comment|// ROTATION_0 :   0
comment|// ROTATION_90 :  1
comment|// ROTATION_180 : 2
comment|// ROTATION_270 : 3
comment|// ORIENTATION_PORTRAIT :  1
comment|// ORIENTATION_LANDSCAPE : 2
comment|// and newRotation is how much the current orientation is rotated relative to nativeOrientation
comment|// which means that we can be really clever here :)
name|Qt
operator|::
name|ScreenOrientation
name|screenOrientation
init|=
name|orientations
index|[
operator|(
name|nativeOrientation
operator|-
literal|1
operator|+
name|newRotation
operator|)
operator|%
literal|4
index|]
decl_stmt|;
name|Qt
operator|::
name|ScreenOrientation
name|native
init|=
name|orientations
index|[
name|nativeOrientation
operator|-
literal|1
index|]
decl_stmt|;
name|QAndroidPlatformIntegration
operator|::
name|setScreenOrientation
argument_list|(
name|screenOrientation
argument_list|,
name|native
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_androidPlatformIntegration
condition|)
block|{
name|QPlatformScreen
modifier|*
name|screen
init|=
name|m_androidPlatformIntegration
operator|->
name|screen
argument_list|()
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleScreenOrientationChange
argument_list|(
name|screen
operator|->
name|screen
argument_list|()
argument_list|,
name|screenOrientation
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|onActivityResult
specifier|static
name|void
name|onActivityResult
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jclass
comment|/*cls*/
parameter_list|,
name|jint
name|requestCode
parameter_list|,
name|jint
name|resultCode
parameter_list|,
name|jobject
name|data
parameter_list|)
block|{
name|QtAndroidPrivate
operator|::
name|handleActivityResult
argument_list|(
name|requestCode
argument_list|,
name|resultCode
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|methods
specifier|static
name|JNINativeMethod
name|methods
index|[]
init|=
block|{
block|{
literal|"startQtAndroidPlugin"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|startQtAndroidPlugin
block|}
block|,
block|{
literal|"startQtApplication"
block|,
literal|"(Ljava/lang/String;Ljava/lang/String;)V"
block|,
operator|(
name|void
operator|*
operator|)
name|startQtApplication
block|}
block|,
block|{
literal|"quitQtAndroidPlugin"
block|,
literal|"()V"
block|,
operator|(
name|void
operator|*
operator|)
name|quitQtAndroidPlugin
block|}
block|,
block|{
literal|"terminateQt"
block|,
literal|"()V"
block|,
operator|(
name|void
operator|*
operator|)
name|terminateQt
block|}
block|,
block|{
literal|"setDisplayMetrics"
block|,
literal|"(IIIIDDD)V"
block|,
operator|(
name|void
operator|*
operator|)
name|setDisplayMetrics
block|}
block|,
block|{
literal|"setSurface"
block|,
literal|"(ILjava/lang/Object;II)V"
block|,
operator|(
name|void
operator|*
operator|)
name|setSurface
block|}
block|,
block|{
literal|"updateWindow"
block|,
literal|"()V"
block|,
operator|(
name|void
operator|*
operator|)
name|updateWindow
block|}
block|,
block|{
literal|"updateApplicationState"
block|,
literal|"(I)V"
block|,
operator|(
name|void
operator|*
operator|)
name|updateApplicationState
block|}
block|,
block|{
literal|"handleOrientationChanged"
block|,
literal|"(II)V"
block|,
operator|(
name|void
operator|*
operator|)
name|handleOrientationChanged
block|}
block|,
block|{
literal|"onActivityResult"
block|,
literal|"(IILandroid/content/Intent;)V"
block|,
operator|(
name|void
operator|*
operator|)
name|onActivityResult
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|FIND_AND_CHECK_CLASS
define|#
directive|define
name|FIND_AND_CHECK_CLASS
parameter_list|(
name|CLASS_NAME
parameter_list|)
define|\
value|clazz = env->FindClass(CLASS_NAME); \ if (!clazz) { \     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_classErrorMsg, CLASS_NAME); \     return JNI_FALSE; \ }
end_define
begin_define
DECL|macro|GET_AND_CHECK_METHOD
define|#
directive|define
name|GET_AND_CHECK_METHOD
parameter_list|(
name|VAR
parameter_list|,
name|CLASS
parameter_list|,
name|METHOD_NAME
parameter_list|,
name|METHOD_SIGNATURE
parameter_list|)
define|\
value|VAR = env->GetMethodID(CLASS, METHOD_NAME, METHOD_SIGNATURE); \ if (!VAR) { \     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_methodErrorMsg, METHOD_NAME, METHOD_SIGNATURE); \     return JNI_FALSE; \ }
end_define
begin_define
DECL|macro|GET_AND_CHECK_STATIC_METHOD
define|#
directive|define
name|GET_AND_CHECK_STATIC_METHOD
parameter_list|(
name|VAR
parameter_list|,
name|CLASS
parameter_list|,
name|METHOD_NAME
parameter_list|,
name|METHOD_SIGNATURE
parameter_list|)
define|\
value|VAR = env->GetStaticMethodID(CLASS, METHOD_NAME, METHOD_SIGNATURE); \ if (!VAR) { \     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_methodErrorMsg, METHOD_NAME, METHOD_SIGNATURE); \     return JNI_FALSE; \ }
end_define
begin_define
DECL|macro|GET_AND_CHECK_FIELD
define|#
directive|define
name|GET_AND_CHECK_FIELD
parameter_list|(
name|VAR
parameter_list|,
name|CLASS
parameter_list|,
name|FIELD_NAME
parameter_list|,
name|FIELD_SIGNATURE
parameter_list|)
define|\
value|VAR = env->GetFieldID(CLASS, FIELD_NAME, FIELD_SIGNATURE); \ if (!VAR) { \     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_methodErrorMsg, FIELD_NAME, FIELD_SIGNATURE); \     return JNI_FALSE; \ }
end_define
begin_define
DECL|macro|GET_AND_CHECK_STATIC_FIELD
define|#
directive|define
name|GET_AND_CHECK_STATIC_FIELD
parameter_list|(
name|VAR
parameter_list|,
name|CLASS
parameter_list|,
name|FIELD_NAME
parameter_list|,
name|FIELD_SIGNATURE
parameter_list|)
define|\
value|VAR = env->GetStaticFieldID(CLASS, FIELD_NAME, FIELD_SIGNATURE); \ if (!VAR) { \     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_methodErrorMsg, FIELD_NAME, FIELD_SIGNATURE); \     return JNI_FALSE; \ }
end_define
begin_function
DECL|function|registerNatives
specifier|static
name|int
name|registerNatives
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
name|jclass
name|clazz
decl_stmt|;
name|FIND_AND_CHECK_CLASS
argument_list|(
literal|"org/qtproject/qt5/android/QtNative"
argument_list|)
expr_stmt|;
name|m_applicationClass
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|m_setFullScreenMethodID
argument_list|,
name|m_applicationClass
argument_list|,
literal|"setFullScreen"
argument_list|,
literal|"(Z)V"
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|->
name|RegisterNatives
argument_list|(
name|m_applicationClass
argument_list|,
name|methods
argument_list|,
sizeof|sizeof
argument_list|(
name|methods
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|methods
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|__android_log_print
argument_list|(
name|ANDROID_LOG_FATAL
argument_list|,
literal|"Qt"
argument_list|,
literal|"RegisterNatives failed"
argument_list|)
expr_stmt|;
return|return
name|JNI_FALSE
return|;
block|}
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|m_createSurfaceMethodID
argument_list|,
name|m_applicationClass
argument_list|,
literal|"createSurface"
argument_list|,
literal|"(IZIIIII)V"
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|m_insertNativeViewMethodID
argument_list|,
name|m_applicationClass
argument_list|,
literal|"insertNativeView"
argument_list|,
literal|"(ILandroid/view/View;IIII)V"
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|m_setSurfaceGeometryMethodID
argument_list|,
name|m_applicationClass
argument_list|,
literal|"setSurfaceGeometry"
argument_list|,
literal|"(IIIII)V"
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|m_destroySurfaceMethodID
argument_list|,
name|m_applicationClass
argument_list|,
literal|"destroySurface"
argument_list|,
literal|"(I)V"
argument_list|)
expr_stmt|;
name|jmethodID
name|methodID
decl_stmt|;
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|methodID
argument_list|,
name|m_applicationClass
argument_list|,
literal|"activity"
argument_list|,
literal|"()Landroid/app/Activity;"
argument_list|)
expr_stmt|;
name|jobject
name|activityObject
init|=
name|env
operator|->
name|CallStaticObjectMethod
argument_list|(
name|m_applicationClass
argument_list|,
name|methodID
argument_list|)
decl_stmt|;
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|methodID
argument_list|,
name|m_applicationClass
argument_list|,
literal|"classLoader"
argument_list|,
literal|"()Ljava/lang/ClassLoader;"
argument_list|)
expr_stmt|;
name|m_classLoaderObject
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|env
operator|->
name|CallStaticObjectMethod
argument_list|(
name|m_applicationClass
argument_list|,
name|methodID
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|=
name|env
operator|->
name|GetObjectClass
argument_list|(
name|m_classLoaderObject
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_METHOD
argument_list|(
name|m_loadClassMethodID
argument_list|,
name|clazz
argument_list|,
literal|"loadClass"
argument_list|,
literal|"(Ljava/lang/String;)Ljava/lang/Class;"
argument_list|)
expr_stmt|;
if|if
condition|(
name|activityObject
condition|)
block|{
name|m_activityObject
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|activityObject
argument_list|)
expr_stmt|;
name|FIND_AND_CHECK_CLASS
argument_list|(
literal|"android/content/ContextWrapper"
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_METHOD
argument_list|(
name|methodID
argument_list|,
name|clazz
argument_list|,
literal|"getAssets"
argument_list|,
literal|"()Landroid/content/res/AssetManager;"
argument_list|)
expr_stmt|;
name|m_assetManager
operator|=
name|AAssetManager_fromJava
argument_list|(
name|env
argument_list|,
name|env
operator|->
name|CallObjectMethod
argument_list|(
name|activityObject
argument_list|,
name|methodID
argument_list|)
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_METHOD
argument_list|(
name|methodID
argument_list|,
name|clazz
argument_list|,
literal|"getResources"
argument_list|,
literal|"()Landroid/content/res/Resources;"
argument_list|)
expr_stmt|;
name|m_resourcesObj
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|env
operator|->
name|CallObjectMethod
argument_list|(
name|activityObject
argument_list|,
name|methodID
argument_list|)
argument_list|)
expr_stmt|;
name|FIND_AND_CHECK_CLASS
argument_list|(
literal|"android/graphics/Bitmap"
argument_list|)
expr_stmt|;
name|m_bitmapClass
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|m_createBitmapMethodID
argument_list|,
name|m_bitmapClass
argument_list|,
literal|"createBitmap"
argument_list|,
literal|"(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;"
argument_list|)
expr_stmt|;
name|FIND_AND_CHECK_CLASS
argument_list|(
literal|"android/graphics/Bitmap$Config"
argument_list|)
expr_stmt|;
name|jfieldID
name|fieldId
decl_stmt|;
name|GET_AND_CHECK_STATIC_FIELD
argument_list|(
name|fieldId
argument_list|,
name|clazz
argument_list|,
literal|"ARGB_8888"
argument_list|,
literal|"Landroid/graphics/Bitmap$Config;"
argument_list|)
expr_stmt|;
name|m_ARGB_8888_BitmapConfigValue
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|env
operator|->
name|GetStaticObjectField
argument_list|(
name|clazz
argument_list|,
name|fieldId
argument_list|)
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_STATIC_FIELD
argument_list|(
name|fieldId
argument_list|,
name|clazz
argument_list|,
literal|"RGB_565"
argument_list|,
literal|"Landroid/graphics/Bitmap$Config;"
argument_list|)
expr_stmt|;
name|m_RGB_565_BitmapConfigValue
operator|=
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|env
operator|->
name|GetStaticObjectField
argument_list|(
name|clazz
argument_list|,
name|fieldId
argument_list|)
argument_list|)
expr_stmt|;
name|FIND_AND_CHECK_CLASS
argument_list|(
literal|"android/graphics/drawable/BitmapDrawable"
argument_list|)
expr_stmt|;
name|m_bitmapDrawableClass
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_METHOD
argument_list|(
name|m_bitmapDrawableConstructorMethodID
argument_list|,
name|m_bitmapDrawableClass
argument_list|,
literal|"<init>"
argument_list|,
literal|"(Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V"
argument_list|)
expr_stmt|;
block|}
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|androidApiLevel
name|jint
name|androidApiLevel
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
name|jclass
name|clazz
decl_stmt|;
name|FIND_AND_CHECK_CLASS
argument_list|(
literal|"android/os/Build$VERSION"
argument_list|)
expr_stmt|;
name|jfieldID
name|fieldId
decl_stmt|;
name|GET_AND_CHECK_STATIC_FIELD
argument_list|(
name|fieldId
argument_list|,
name|clazz
argument_list|,
literal|"SDK_INT"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
return|return
name|env
operator|->
name|GetStaticIntField
argument_list|(
name|clazz
argument_list|,
name|fieldId
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|JNI_OnLoad
name|Q_DECL_EXPORT
name|jint
name|JNICALL
name|JNI_OnLoad
parameter_list|(
name|JavaVM
modifier|*
name|vm
parameter_list|,
name|void
modifier|*
comment|/*reserved*/
parameter_list|)
block|{
typedef|typedef
union|union
block|{
name|JNIEnv
modifier|*
name|nativeEnvironment
decl_stmt|;
name|void
modifier|*
name|venv
decl_stmt|;
block|}
name|UnionJNIEnvToVoid
typedef|;
name|__android_log_print
argument_list|(
name|ANDROID_LOG_INFO
argument_list|,
literal|"Qt"
argument_list|,
literal|"qt start"
argument_list|)
expr_stmt|;
name|UnionJNIEnvToVoid
name|uenv
decl_stmt|;
name|uenv
operator|.
name|venv
operator|=
name|NULL
expr_stmt|;
name|m_javaVM
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|vm
operator|->
name|GetEnv
argument_list|(
operator|&
name|uenv
operator|.
name|venv
argument_list|,
name|JNI_VERSION_1_4
argument_list|)
operator|!=
name|JNI_OK
condition|)
block|{
name|__android_log_print
argument_list|(
name|ANDROID_LOG_FATAL
argument_list|,
literal|"Qt"
argument_list|,
literal|"GetEnv failed"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|JNIEnv
modifier|*
name|env
init|=
name|uenv
operator|.
name|nativeEnvironment
decl_stmt|;
if|if
condition|(
operator|!
name|registerNatives
argument_list|(
name|env
argument_list|)
operator|||
operator|!
name|QtAndroidInput
operator|::
name|registerNatives
argument_list|(
name|env
argument_list|)
operator|||
operator|!
name|QtAndroidClipboard
operator|::
name|registerNatives
argument_list|(
name|env
argument_list|)
operator|||
operator|!
name|QtAndroidMenu
operator|::
name|registerNatives
argument_list|(
name|env
argument_list|)
operator|||
operator|!
name|QtAndroidAccessibility
operator|::
name|registerNatives
argument_list|(
name|env
argument_list|)
operator|||
operator|!
name|QtAndroidDialogHelpers
operator|::
name|registerNatives
argument_list|(
name|env
argument_list|)
condition|)
block|{
name|__android_log_print
argument_list|(
name|ANDROID_LOG_FATAL
argument_list|,
literal|"Qt"
argument_list|,
literal|"registerNatives failed"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|jint
name|apiLevel
init|=
name|androidApiLevel
argument_list|(
name|env
argument_list|)
decl_stmt|;
if|if
condition|(
name|apiLevel
operator|>=
literal|16
operator|&&
operator|!
name|QtAndroidAccessibility
operator|::
name|registerNatives
argument_list|(
name|env
argument_list|)
condition|)
block|{
name|__android_log_print
argument_list|(
name|ANDROID_LOG_FATAL
argument_list|,
literal|"Qt A11y"
argument_list|,
literal|"registerNatives failed"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|m_javaVM
operator|=
name|vm
expr_stmt|;
return|return
name|JNI_VERSION_1_4
return|;
block|}
end_function
end_unit
