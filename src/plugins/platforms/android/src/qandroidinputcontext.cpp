begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<android/log.h>
end_include
begin_include
include|#
directive|include
file|"qandroidinputcontext.h"
end_include
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_include
include|#
directive|include
file|"androidjniinput.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<qsharedpointer.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qinputmethod.h>
end_include
begin_include
include|#
directive|include
file|<qwindow.h>
end_include
begin_include
include|#
directive|include
file|<QTextCharFormat>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|m_androidInputContext
specifier|static
name|QAndroidInputContext
modifier|*
name|m_androidInputContext
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QtNativeInputConnectionClassName
specifier|static
name|char
specifier|const
modifier|*
specifier|const
name|QtNativeInputConnectionClassName
init|=
literal|"org/qtproject/qt5/android/QtNativeInputConnection"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QtExtractedTextClassName
specifier|static
name|char
specifier|const
modifier|*
specifier|const
name|QtExtractedTextClassName
init|=
literal|"org/qtproject/qt5/android/QtExtractedText"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_extractedTextClass
specifier|static
name|jclass
name|m_extractedTextClass
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_classConstructorMethodID
specifier|static
name|jmethodID
name|m_classConstructorMethodID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_partialEndOffsetFieldID
specifier|static
name|jfieldID
name|m_partialEndOffsetFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_partialStartOffsetFieldID
specifier|static
name|jfieldID
name|m_partialStartOffsetFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_selectionEndFieldID
specifier|static
name|jfieldID
name|m_selectionEndFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_selectionStartFieldID
specifier|static
name|jfieldID
name|m_selectionStartFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_startOffsetFieldID
specifier|static
name|jfieldID
name|m_startOffsetFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_textFieldID
specifier|static
name|jfieldID
name|m_textFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|commitText
specifier|static
name|jboolean
name|commitText
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jstring
name|text
parameter_list|,
name|jint
name|newCursorPosition
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
name|jboolean
name|isCopy
decl_stmt|;
specifier|const
name|jchar
modifier|*
name|jstr
init|=
name|env
operator|->
name|GetStringChars
argument_list|(
name|text
argument_list|,
operator|&
name|isCopy
argument_list|)
decl_stmt|;
name|QString
name|str
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|jstr
argument_list|)
argument_list|,
name|env
operator|->
name|GetStringLength
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|env
operator|->
name|ReleaseStringChars
argument_list|(
name|text
argument_list|,
name|jstr
argument_list|)
expr_stmt|;
return|return
name|m_androidInputContext
operator|->
name|commitText
argument_list|(
name|str
argument_list|,
name|newCursorPosition
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|deleteSurroundingText
specifier|static
name|jboolean
name|deleteSurroundingText
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|leftLength
parameter_list|,
name|jint
name|rightLength
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
return|return
name|m_androidInputContext
operator|->
name|deleteSurroundingText
argument_list|(
name|leftLength
argument_list|,
name|rightLength
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|finishComposingText
specifier|static
name|jboolean
name|finishComposingText
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
return|return
name|m_androidInputContext
operator|->
name|finishComposingText
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getCursorCapsMode
specifier|static
name|jint
name|getCursorCapsMode
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|reqModes
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
literal|0
return|;
return|return
name|m_androidInputContext
operator|->
name|getCursorCapsMode
argument_list|(
name|reqModes
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getExtractedText
specifier|static
name|jobject
name|getExtractedText
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|int
name|hintMaxChars
parameter_list|,
name|int
name|hintMaxLines
parameter_list|,
name|jint
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
literal|0
return|;
specifier|const
name|QAndroidInputContext
operator|::
name|ExtractedText
modifier|&
name|extractedText
init|=
name|m_androidInputContext
operator|->
name|getExtractedText
argument_list|(
name|hintMaxChars
argument_list|,
name|hintMaxLines
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|jobject
name|object
init|=
name|env
operator|->
name|NewObject
argument_list|(
name|m_extractedTextClass
argument_list|,
name|m_classConstructorMethodID
argument_list|)
decl_stmt|;
name|env
operator|->
name|SetIntField
argument_list|(
name|object
argument_list|,
name|m_partialStartOffsetFieldID
argument_list|,
name|extractedText
operator|.
name|partialStartOffset
argument_list|)
expr_stmt|;
name|env
operator|->
name|SetIntField
argument_list|(
name|object
argument_list|,
name|m_partialEndOffsetFieldID
argument_list|,
name|extractedText
operator|.
name|partialEndOffset
argument_list|)
expr_stmt|;
name|env
operator|->
name|SetIntField
argument_list|(
name|object
argument_list|,
name|m_selectionStartFieldID
argument_list|,
name|extractedText
operator|.
name|selectionStart
argument_list|)
expr_stmt|;
name|env
operator|->
name|SetIntField
argument_list|(
name|object
argument_list|,
name|m_selectionEndFieldID
argument_list|,
name|extractedText
operator|.
name|selectionEnd
argument_list|)
expr_stmt|;
name|env
operator|->
name|SetIntField
argument_list|(
name|object
argument_list|,
name|m_startOffsetFieldID
argument_list|,
name|extractedText
operator|.
name|startOffset
argument_list|)
expr_stmt|;
name|env
operator|->
name|SetObjectField
argument_list|(
name|object
argument_list|,
name|m_textFieldID
argument_list|,
name|env
operator|->
name|NewString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|jchar
operator|*
argument_list|>
argument_list|(
name|extractedText
operator|.
name|text
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|jsize
argument_list|(
name|extractedText
operator|.
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
end_function
begin_function
DECL|function|getSelectedText
specifier|static
name|jstring
name|getSelectedText
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
literal|0
return|;
specifier|const
name|QString
modifier|&
name|text
init|=
name|m_androidInputContext
operator|->
name|getSelectedText
argument_list|(
name|flags
argument_list|)
decl_stmt|;
return|return
name|env
operator|->
name|NewString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|jchar
operator|*
argument_list|>
argument_list|(
name|text
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|jsize
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getTextAfterCursor
specifier|static
name|jstring
name|getTextAfterCursor
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|length
parameter_list|,
name|jint
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
literal|0
return|;
specifier|const
name|QString
modifier|&
name|text
init|=
name|m_androidInputContext
operator|->
name|getTextAfterCursor
argument_list|(
name|length
argument_list|,
name|flags
argument_list|)
decl_stmt|;
return|return
name|env
operator|->
name|NewString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|jchar
operator|*
argument_list|>
argument_list|(
name|text
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|jsize
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getTextBeforeCursor
specifier|static
name|jstring
name|getTextBeforeCursor
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|length
parameter_list|,
name|jint
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
literal|0
return|;
specifier|const
name|QString
modifier|&
name|text
init|=
name|m_androidInputContext
operator|->
name|getTextBeforeCursor
argument_list|(
name|length
argument_list|,
name|flags
argument_list|)
decl_stmt|;
return|return
name|env
operator|->
name|NewString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|jchar
operator|*
argument_list|>
argument_list|(
name|text
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|jsize
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setComposingText
specifier|static
name|jboolean
name|setComposingText
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jstring
name|text
parameter_list|,
name|jint
name|newCursorPosition
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
name|jboolean
name|isCopy
decl_stmt|;
specifier|const
name|jchar
modifier|*
name|jstr
init|=
name|env
operator|->
name|GetStringChars
argument_list|(
name|text
argument_list|,
operator|&
name|isCopy
argument_list|)
decl_stmt|;
name|QString
name|str
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|jstr
argument_list|)
argument_list|,
name|env
operator|->
name|GetStringLength
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|env
operator|->
name|ReleaseStringChars
argument_list|(
name|text
argument_list|,
name|jstr
argument_list|)
expr_stmt|;
return|return
name|m_androidInputContext
operator|->
name|setComposingText
argument_list|(
name|str
argument_list|,
name|newCursorPosition
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setSelection
specifier|static
name|jboolean
name|setSelection
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|start
parameter_list|,
name|jint
name|end
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
return|return
name|m_androidInputContext
operator|->
name|setSelection
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selectAll
specifier|static
name|jboolean
name|selectAll
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
return|return
name|m_androidInputContext
operator|->
name|selectAll
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|cut
specifier|static
name|jboolean
name|cut
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
return|return
name|m_androidInputContext
operator|->
name|cut
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|copy
specifier|static
name|jboolean
name|copy
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
return|return
name|m_androidInputContext
operator|->
name|copy
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|copyURL
specifier|static
name|jboolean
name|copyURL
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
return|return
name|m_androidInputContext
operator|->
name|copyURL
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|paste
specifier|static
name|jboolean
name|paste
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
return|return
name|m_androidInputContext
operator|->
name|paste
argument_list|()
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|methods
specifier|static
name|JNINativeMethod
name|methods
index|[]
init|=
block|{
block|{
literal|"commitText"
block|,
literal|"(Ljava/lang/String;I)Z"
block|,
operator|(
name|void
operator|*
operator|)
name|commitText
block|}
block|,
block|{
literal|"deleteSurroundingText"
block|,
literal|"(II)Z"
block|,
operator|(
name|void
operator|*
operator|)
name|deleteSurroundingText
block|}
block|,
block|{
literal|"finishComposingText"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|finishComposingText
block|}
block|,
block|{
literal|"getCursorCapsMode"
block|,
literal|"(I)I"
block|,
operator|(
name|void
operator|*
operator|)
name|getCursorCapsMode
block|}
block|,
block|{
literal|"getExtractedText"
block|,
literal|"(III)Lorg/qtproject/qt5/android/QtExtractedText;"
block|,
operator|(
name|void
operator|*
operator|)
name|getExtractedText
block|}
block|,
block|{
literal|"getSelectedText"
block|,
literal|"(I)Ljava/lang/String;"
block|,
operator|(
name|void
operator|*
operator|)
name|getSelectedText
block|}
block|,
block|{
literal|"getTextAfterCursor"
block|,
literal|"(II)Ljava/lang/String;"
block|,
operator|(
name|void
operator|*
operator|)
name|getTextAfterCursor
block|}
block|,
block|{
literal|"getTextBeforeCursor"
block|,
literal|"(II)Ljava/lang/String;"
block|,
operator|(
name|void
operator|*
operator|)
name|getTextBeforeCursor
block|}
block|,
block|{
literal|"setComposingText"
block|,
literal|"(Ljava/lang/String;I)Z"
block|,
operator|(
name|void
operator|*
operator|)
name|setComposingText
block|}
block|,
block|{
literal|"setSelection"
block|,
literal|"(II)Z"
block|,
operator|(
name|void
operator|*
operator|)
name|setSelection
block|}
block|,
block|{
literal|"selectAll"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|selectAll
block|}
block|,
block|{
literal|"cut"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|cut
block|}
block|,
block|{
literal|"copy"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|copy
block|}
block|,
block|{
literal|"copyURL"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|copyURL
block|}
block|,
block|{
literal|"paste"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|paste
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QAndroidInputContext
name|QAndroidInputContext
operator|::
name|QAndroidInputContext
parameter_list|()
member_init_list|:
name|QPlatformInputContext
argument_list|()
block|{
name|JNIEnv
modifier|*
name|env
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QtAndroid
operator|::
name|javaVM
argument_list|()
operator|->
name|AttachCurrentThread
argument_list|(
operator|&
name|env
argument_list|,
name|NULL
argument_list|)
operator|<
literal|0
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"AttachCurrentThread failed"
expr_stmt|;
return|return;
block|}
name|jclass
name|clazz
init|=
name|QtAndroid
operator|::
name|findClass
argument_list|(
name|QtNativeInputConnectionClassName
argument_list|,
name|env
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Native registration unable to find class '"
operator|<<
name|QtNativeInputConnectionClassName
operator|<<
literal|"'"
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|env
operator|->
name|RegisterNatives
argument_list|(
name|clazz
argument_list|,
name|methods
argument_list|,
sizeof|sizeof
argument_list|(
name|methods
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|methods
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"RegisterNatives failed for '"
operator|<<
name|QtNativeInputConnectionClassName
operator|<<
literal|"'"
expr_stmt|;
return|return;
block|}
name|clazz
operator|=
name|QtAndroid
operator|::
name|findClass
argument_list|(
name|QtExtractedTextClassName
argument_list|,
name|env
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Native registration unable to find class '"
operator|<<
name|QtExtractedTextClassName
operator|<<
literal|"'"
expr_stmt|;
return|return;
block|}
name|m_extractedTextClass
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|m_classConstructorMethodID
operator|=
name|env
operator|->
name|GetMethodID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"<init>"
argument_list|,
literal|"()V"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_classConstructorMethodID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"GetMethodID failed"
expr_stmt|;
return|return;
block|}
name|m_partialEndOffsetFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"partialEndOffset"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_partialEndOffsetFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field partialEndOffset"
expr_stmt|;
return|return;
block|}
name|m_partialStartOffsetFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"partialStartOffset"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_partialStartOffsetFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field partialStartOffset"
expr_stmt|;
return|return;
block|}
name|m_selectionEndFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"selectionEnd"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_selectionEndFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field selectionEnd"
expr_stmt|;
return|return;
block|}
name|m_selectionStartFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"selectionStart"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_selectionStartFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field selectionStart"
expr_stmt|;
return|return;
block|}
name|m_startOffsetFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"startOffset"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_startOffsetFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field startOffset"
expr_stmt|;
return|return;
block|}
name|m_textFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"text"
argument_list|,
literal|"Ljava/lang/String;"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_textFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field text"
expr_stmt|;
return|return;
block|}
name|qRegisterMetaType
argument_list|<
name|QInputMethodEvent
operator|*
argument_list|>
argument_list|(
literal|"QInputMethodEvent*"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QInputMethodQueryEvent
operator|*
argument_list|>
argument_list|(
literal|"QInputMethodQueryEvent*"
argument_list|)
expr_stmt|;
name|m_androidInputContext
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QAndroidInputContext
name|QAndroidInputContext
operator|::
name|~
name|QAndroidInputContext
parameter_list|()
block|{
name|m_androidInputContext
operator|=
literal|0
expr_stmt|;
name|m_extractedTextClass
operator|=
literal|0
expr_stmt|;
name|m_partialEndOffsetFieldID
operator|=
literal|0
expr_stmt|;
name|m_partialStartOffsetFieldID
operator|=
literal|0
expr_stmt|;
name|m_selectionEndFieldID
operator|=
literal|0
expr_stmt|;
name|m_selectionStartFieldID
operator|=
literal|0
expr_stmt|;
name|m_startOffsetFieldID
operator|=
literal|0
expr_stmt|;
name|m_textFieldID
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|reset
name|void
name|QAndroidInputContext
operator|::
name|reset
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|qGuiApp
operator|->
name|focusObject
argument_list|()
condition|)
name|QtAndroidInput
operator|::
name|resetSoftwareKeyboard
argument_list|()
expr_stmt|;
else|else
name|QtAndroidInput
operator|::
name|hideSoftwareKeyboard
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|commit
name|void
name|QAndroidInputContext
operator|::
name|commit
parameter_list|()
block|{
name|finishComposingText
argument_list|()
expr_stmt|;
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|int
name|cursorPos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QtAndroidInput
operator|::
name|updateSelection
argument_list|(
name|cursorPos
argument_list|,
name|cursorPos
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//selection empty and no pre-edit text
block|}
block|}
end_function
begin_function
DECL|function|update
name|void
name|QAndroidInputContext
operator|::
name|update
parameter_list|(
name|Qt
operator|::
name|InputMethodQueries
name|queries
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQuery
argument_list|(
name|queries
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return;
warning|#
directive|warning
warning|TODO extract the needed data from query
block|}
end_function
begin_function
DECL|function|invokeAction
name|void
name|QAndroidInputContext
operator|::
name|invokeAction
parameter_list|(
name|QInputMethod
operator|::
name|Action
name|action
parameter_list|,
name|int
name|cursorPosition
parameter_list|)
block|{
warning|#
directive|warning
warning|TODO Handle at least QInputMethod::ContextMenu action
name|Q_UNUSED
argument_list|(
argument|action
argument_list|)
name|Q_UNUSED
argument_list|(
argument|cursorPosition
argument_list|)
if|if
condition|(
name|action
operator|==
name|QInputMethod
operator|::
name|Click
condition|)
name|commit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyboardRect
name|QRectF
name|QAndroidInputContext
operator|::
name|keyboardRect
parameter_list|()
specifier|const
block|{
return|return
name|QPlatformInputContext
operator|::
name|keyboardRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isAnimating
name|bool
name|QAndroidInputContext
operator|::
name|isAnimating
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|showInputPanel
name|void
name|QAndroidInputContext
operator|::
name|showInputPanel
parameter_list|()
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QRectF
name|itemRect
init|=
name|qGuiApp
operator|->
name|inputMethod
argument_list|()
operator|->
name|inputItemRectangle
argument_list|()
decl_stmt|;
name|QRect
name|rect
init|=
name|qGuiApp
operator|->
name|inputMethod
argument_list|()
operator|->
name|inputItemTransform
argument_list|()
operator|.
name|mapRect
argument_list|(
name|itemRect
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|QWindow
modifier|*
name|window
init|=
name|qGuiApp
operator|->
name|focusWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|window
condition|)
name|rect
operator|=
name|QRect
argument_list|(
name|window
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QtAndroidInput
operator|::
name|showSoftwareKeyboard
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImHints
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideInputPanel
name|void
name|QAndroidInputContext
operator|::
name|hideInputPanel
parameter_list|()
block|{
name|QtAndroidInput
operator|::
name|hideSoftwareKeyboard
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isInputPanelVisible
name|bool
name|QAndroidInputContext
operator|::
name|isInputPanelVisible
parameter_list|()
specifier|const
block|{
return|return
name|QtAndroidInput
operator|::
name|isSoftwareKeyboardVisible
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isComposing
name|bool
name|QAndroidInputContext
operator|::
name|isComposing
parameter_list|()
specifier|const
block|{
return|return
name|m_composingText
operator|.
name|length
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QAndroidInputContext
operator|::
name|clear
parameter_list|()
block|{
name|m_composingText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_extractedText
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendEvent
name|void
name|QAndroidInputContext
operator|::
name|sendEvent
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
name|QInputMethodEvent
modifier|*
name|event
parameter_list|)
block|{
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|receiver
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendEvent
name|void
name|QAndroidInputContext
operator|::
name|sendEvent
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
name|QInputMethodQueryEvent
modifier|*
name|event
parameter_list|)
block|{
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|receiver
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|commitText
name|jboolean
name|QAndroidInputContext
operator|::
name|commitText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|jint
comment|/*newCursorPosition*/
parameter_list|)
block|{
name|m_composingText
operator|=
name|text
expr_stmt|;
return|return
name|finishComposingText
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|deleteSurroundingText
name|jboolean
name|QAndroidInputContext
operator|::
name|deleteSurroundingText
parameter_list|(
name|jint
name|leftLength
parameter_list|,
name|jint
name|rightLength
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|JNI_TRUE
return|;
name|m_composingText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QInputMethodEvent
name|event
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|QString
argument_list|()
argument_list|,
operator|-
name|leftLength
argument_list|,
name|leftLength
operator|+
name|rightLength
argument_list|)
expr_stmt|;
name|sendInputMethodEvent
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|finishComposingText
name|jboolean
name|QAndroidInputContext
operator|::
name|finishComposingText
parameter_list|()
block|{
name|QInputMethodEvent
name|event
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|m_composingText
argument_list|)
expr_stmt|;
name|sendInputMethodEvent
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|getCursorCapsMode
name|jint
name|QAndroidInputContext
operator|::
name|getCursorCapsMode
parameter_list|(
name|jint
comment|/*reqModes*/
parameter_list|)
block|{
name|jint
name|res
init|=
literal|0
decl_stmt|;
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
return|;
specifier|const
name|uint
name|qtInputMethodHints
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImHints
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|qtInputMethodHints
operator|&
name|Qt
operator|::
name|ImhPreferUppercase
condition|)
name|res
operator|=
name|CAP_MODE_SENTENCES
expr_stmt|;
if|if
condition|(
name|qtInputMethodHints
operator|&
name|Qt
operator|::
name|ImhUppercaseOnly
condition|)
name|res
operator|=
name|CAP_MODE_CHARACTERS
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|getExtractedText
specifier|const
name|QAndroidInputContext
operator|::
name|ExtractedText
modifier|&
name|QAndroidInputContext
operator|::
name|getExtractedText
parameter_list|(
name|jint
name|hintMaxChars
parameter_list|,
name|jint
comment|/*hintMaxLines*/
parameter_list|,
name|jint
comment|/*flags*/
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|m_extractedText
return|;
if|if
condition|(
name|hintMaxChars
condition|)
name|m_extractedText
operator|.
name|text
operator|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|right
argument_list|(
name|hintMaxChars
argument_list|)
expr_stmt|;
name|m_extractedText
operator|.
name|startOffset
operator|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
specifier|const
name|QString
modifier|&
name|selection
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|const
name|int
name|selLen
init|=
name|selection
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|selLen
condition|)
block|{
name|m_extractedText
operator|.
name|selectionStart
operator|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImAnchorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|m_extractedText
operator|.
name|selectionEnd
operator|=
name|m_extractedText
operator|.
name|startOffset
expr_stmt|;
block|}
return|return
name|m_extractedText
return|;
block|}
end_function
begin_function
DECL|function|getSelectedText
name|QString
name|QAndroidInputContext
operator|::
name|getSelectedText
parameter_list|(
name|jint
comment|/*flags*/
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getTextAfterCursor
name|QString
name|QAndroidInputContext
operator|::
name|getTextAfterCursor
parameter_list|(
name|jint
name|length
parameter_list|,
name|jint
comment|/*flags*/
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|text
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|length
argument_list|()
condition|)
return|return
name|text
return|;
name|int
name|cursorPos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
return|return
name|text
operator|.
name|mid
argument_list|(
name|cursorPos
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getTextBeforeCursor
name|QString
name|QAndroidInputContext
operator|::
name|getTextBeforeCursor
parameter_list|(
name|jint
name|length
parameter_list|,
name|jint
comment|/*flags*/
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|text
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|length
argument_list|()
condition|)
return|return
name|text
return|;
name|int
name|cursorPos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
specifier|const
name|int
name|wordLeftPos
init|=
name|cursorPos
operator|-
name|length
decl_stmt|;
return|return
name|text
operator|.
name|mid
argument_list|(
name|wordLeftPos
operator|>
literal|0
condition|?
name|wordLeftPos
else|:
literal|0
argument_list|,
name|cursorPos
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setComposingText
name|jboolean
name|QAndroidInputContext
operator|::
name|setComposingText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|jint
name|newCursorPosition
parameter_list|)
block|{
if|if
condition|(
name|newCursorPosition
operator|>
literal|0
condition|)
name|newCursorPosition
operator|+=
name|text
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|m_composingText
operator|=
name|text
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Cursor
argument_list|,
name|newCursorPosition
argument_list|,
literal|1
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Show compose text underlined
name|QTextCharFormat
name|underlined
decl_stmt|;
name|underlined
operator|.
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|,
name|QVariant
argument_list|(
name|underlined
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|m_composingText
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|sendInputMethodEvent
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQuery
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|int
name|cursorPos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|preeditLength
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|QtAndroidInput
operator|::
name|updateSelection
argument_list|(
name|cursorPos
operator|+
name|preeditLength
argument_list|,
name|cursorPos
operator|+
name|preeditLength
argument_list|,
name|cursorPos
argument_list|,
name|cursorPos
operator|+
name|preeditLength
argument_list|)
expr_stmt|;
block|}
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|setSelection
name|jboolean
name|QAndroidInputContext
operator|::
name|setSelection
parameter_list|(
name|jint
name|start
parameter_list|,
name|jint
name|end
parameter_list|)
block|{
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Selection
argument_list|,
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|QString
argument_list|()
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|sendInputMethodEvent
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|selectAll
name|jboolean
name|QAndroidInputContext
operator|::
name|selectAll
parameter_list|()
block|{
warning|#
directive|warning
warning|TODO
return|return
name|JNI_FALSE
return|;
block|}
end_function
begin_function
DECL|function|cut
name|jboolean
name|QAndroidInputContext
operator|::
name|cut
parameter_list|()
block|{
warning|#
directive|warning
warning|TODO
return|return
name|JNI_FALSE
return|;
block|}
end_function
begin_function
DECL|function|copy
name|jboolean
name|QAndroidInputContext
operator|::
name|copy
parameter_list|()
block|{
warning|#
directive|warning
warning|TODO
return|return
name|JNI_FALSE
return|;
block|}
end_function
begin_function
DECL|function|copyURL
name|jboolean
name|QAndroidInputContext
operator|::
name|copyURL
parameter_list|()
block|{
warning|#
directive|warning
warning|TODO
return|return
name|JNI_FALSE
return|;
block|}
end_function
begin_function
DECL|function|paste
name|jboolean
name|QAndroidInputContext
operator|::
name|paste
parameter_list|()
block|{
warning|#
directive|warning
warning|TODO
return|return
name|JNI_FALSE
return|;
block|}
end_function
begin_function
DECL|function|focusObjectInputMethodQuery
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|QAndroidInputContext
operator|::
name|focusObjectInputMethodQuery
parameter_list|(
name|Qt
operator|::
name|InputMethodQueries
name|queries
parameter_list|)
block|{
warning|#
directive|warning
warning|TODO make qGuiApp->focusObject() thread safe !!!
name|QObject
modifier|*
name|focusObject
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focusObject
condition|)
return|return
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
argument_list|()
return|;
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|ret
init|=
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
argument_list|(
operator|new
name|QInputMethodQueryEvent
argument_list|(
name|queries
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qGuiApp
operator|->
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|focusObject
argument_list|,
name|ret
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"sendEvent"
argument_list|,
name|Qt
operator|::
name|BlockingQueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QObject
operator|*
argument_list|,
name|focusObject
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QInputMethodQueryEvent
operator|*
argument_list|,
name|ret
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|sendInputMethodEvent
name|void
name|QAndroidInputContext
operator|::
name|sendInputMethodEvent
parameter_list|(
name|QInputMethodEvent
modifier|*
name|event
parameter_list|)
block|{
warning|#
directive|warning
warning|TODO make qGuiApp->focusObject() thread safe !!!
name|QObject
modifier|*
name|focusObject
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focusObject
condition|)
return|return;
if|if
condition|(
name|qGuiApp
operator|->
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
condition|)
block|{
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|focusObject
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"sendEvent"
argument_list|,
name|Qt
operator|::
name|BlockingQueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QObject
operator|*
argument_list|,
name|focusObject
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QInputMethodEvent
operator|*
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
