begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qandroidplatformtheme.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformmenubar.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformmenu.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformmenuitem.h"
end_include
begin_include
include|#
directive|include
file|<QVariant>
end_include
begin_include
include|#
directive|include
file|<QFileInfo>
end_include
begin_include
include|#
directive|include
file|<qandroidplatformintegration.h>
end_include
begin_constructor
DECL|function|QAndroidPlatformTheme
name|QAndroidPlatformTheme
operator|::
name|QAndroidPlatformTheme
parameter_list|(
name|QAndroidPlatformNativeInterface
modifier|*
name|androidPlatformNativeInterface
parameter_list|)
block|{
name|m_androidPlatformNativeInterface
operator|=
name|androidPlatformNativeInterface
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|createPlatformMenuBar
name|QPlatformMenuBar
modifier|*
name|QAndroidPlatformTheme
operator|::
name|createPlatformMenuBar
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QAndroidPlatformMenuBar
return|;
block|}
end_function
begin_function
DECL|function|createPlatformMenu
name|QPlatformMenu
modifier|*
name|QAndroidPlatformTheme
operator|::
name|createPlatformMenu
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QAndroidPlatformMenu
return|;
block|}
end_function
begin_function
DECL|function|createPlatformMenuItem
name|QPlatformMenuItem
modifier|*
name|QAndroidPlatformTheme
operator|::
name|createPlatformMenuItem
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QAndroidPlatformMenuItem
return|;
block|}
end_function
begin_function
DECL|function|paletteType
specifier|static
specifier|inline
name|int
name|paletteType
parameter_list|(
name|QPlatformTheme
operator|::
name|Palette
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|ToolButtonPalette
case|:
case|case
name|QPlatformTheme
operator|::
name|ButtonPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|ButtonPalette
return|;
case|case
name|QPlatformTheme
operator|::
name|CheckBoxPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|CheckBoxPalette
return|;
case|case
name|QPlatformTheme
operator|::
name|RadioButtonPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|RadioButtonPalette
return|;
case|case
name|QPlatformTheme
operator|::
name|ComboBoxPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|ComboBoxPalette
return|;
case|case
name|QPlatformTheme
operator|::
name|TextEditPalette
case|:
case|case
name|QPlatformTheme
operator|::
name|TextLineEditPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|TextLineEditPalette
return|;
case|case
name|QPlatformTheme
operator|::
name|ItemViewPalette
case|:
return|return
name|QPlatformTheme
operator|::
name|ItemViewPalette
return|;
default|default:
return|return
name|QPlatformTheme
operator|::
name|SystemPalette
return|;
block|}
block|}
end_function
begin_function
DECL|function|palette
specifier|const
name|QPalette
modifier|*
name|QAndroidPlatformTheme
operator|::
name|palette
parameter_list|(
name|Palette
name|type
parameter_list|)
specifier|const
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QPalette
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|m_androidPlatformNativeInterface
operator|->
name|m_palettes
operator|.
name|find
argument_list|(
name|paletteType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_androidPlatformNativeInterface
operator|->
name|m_palettes
operator|.
name|end
argument_list|()
condition|)
return|return
operator|&
operator|(
name|it
operator|.
name|value
argument_list|()
operator|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|fontType
specifier|static
specifier|inline
name|int
name|fontType
parameter_list|(
name|QPlatformTheme
operator|::
name|Font
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QPlatformTheme
operator|::
name|LabelFont
case|:
return|return
name|QPlatformTheme
operator|::
name|SystemFont
return|;
case|case
name|QPlatformTheme
operator|::
name|ToolButtonFont
case|:
return|return
name|QPlatformTheme
operator|::
name|PushButtonFont
return|;
default|default:
return|return
name|type
return|;
block|}
block|}
end_function
begin_function
DECL|function|font
specifier|const
name|QFont
modifier|*
name|QAndroidPlatformTheme
operator|::
name|font
parameter_list|(
name|Font
name|type
parameter_list|)
specifier|const
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QFont
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|m_androidPlatformNativeInterface
operator|->
name|m_fonts
operator|.
name|find
argument_list|(
name|fontType
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_androidPlatformNativeInterface
operator|->
name|m_fonts
operator|.
name|end
argument_list|()
condition|)
return|return
operator|&
operator|(
name|it
operator|.
name|value
argument_list|()
operator|)
return|;
comment|// default in case the style has not set a font
specifier|static
name|QFont
name|systemFont
argument_list|(
literal|"Roboto"
argument_list|,
literal|12.0
operator|*
literal|100
operator|/
literal|72
argument_list|)
decl_stmt|;
comment|// keep default size the same after changing from 100 dpi to 72 dpi
if|if
condition|(
name|type
operator|==
name|QPlatformTheme
operator|::
name|SystemFont
condition|)
return|return
operator|&
name|systemFont
return|;
return|return
literal|0
return|;
block|}
end_function
begin_decl_stmt
specifier|static
specifier|const
name|QLatin1String
name|STYLES_PATH
argument_list|(
literal|"/data/data/org.kde.necessitas.ministro/files/dl/style/"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|QLatin1String
name|STYLE_FILE
argument_list|(
literal|"/style.json"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|themeHint
name|QVariant
name|QAndroidPlatformTheme
operator|::
name|themeHint
parameter_list|(
name|ThemeHint
name|hint
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|hint
condition|)
block|{
case|case
name|StyleNames
case|:
if|if
condition|(
name|qgetenv
argument_list|(
literal|"QT_USE_ANDROID_NATIVE_STYLE"
argument_list|)
operator|.
name|toInt
argument_list|()
operator|&&
operator|(
operator|!
name|qgetenv
argument_list|(
literal|"MINISTRO_ANDROID_STYLE_PATH"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|||
name|QFileInfo
argument_list|(
name|STYLES_PATH
operator|+
name|QLatin1String
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_ANDROID_THEME_DISPLAY_DPI"
argument_list|)
argument_list|)
operator|+
name|STYLE_FILE
argument_list|)
operator|.
name|exists
argument_list|()
operator|)
condition|)
block|{
return|return
name|QStringList
argument_list|(
literal|"android"
argument_list|)
return|;
block|}
return|return
name|QStringList
argument_list|(
literal|"fusion"
argument_list|)
return|;
break|break;
default|default:
return|return
name|QPlatformTheme
operator|::
name|themeHint
argument_list|(
name|hint
argument_list|)
return|;
block|}
block|}
end_function
end_unit
