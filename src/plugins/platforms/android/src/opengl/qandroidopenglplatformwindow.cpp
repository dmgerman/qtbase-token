begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qandroidopenglplatformwindow.h"
end_include
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformintegration.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|m_staticSurface
name|EGLSurface
name|QAndroidOpenGLPlatformWindow
operator|::
name|m_staticSurface
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_staticNativeWindow
name|EGLNativeWindowType
name|QAndroidOpenGLPlatformWindow
operator|::
name|m_staticNativeWindow
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_staticSurfaceLock
name|QReadWriteLock
name|QAndroidOpenGLPlatformWindow
operator|::
name|m_staticSurfaceLock
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_referenceCount
name|QBasicAtomicInt
name|QAndroidOpenGLPlatformWindow
operator|::
name|m_referenceCount
init|=
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|0
argument_list|)
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QAndroidOpenGLPlatformWindow
name|QAndroidOpenGLPlatformWindow
operator|::
name|QAndroidOpenGLPlatformWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QEglFSWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_state
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QAndroidOpenGLPlatformWindow
name|QAndroidOpenGLPlatformWindow
operator|::
name|~
name|QAndroidOpenGLPlatformWindow
parameter_list|()
block|{
name|destroy
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isExposed
name|bool
name|QAndroidOpenGLPlatformWindow
operator|::
name|isExposed
parameter_list|()
specifier|const
block|{
return|return
name|QtAndroid
operator|::
name|nativeWindow
argument_list|(
literal|false
argument_list|)
operator|!=
literal|0
operator|&&
name|QEglFSWindow
operator|::
name|isExposed
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|invalidateSurface
name|void
name|QAndroidOpenGLPlatformWindow
operator|::
name|invalidateSurface
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
comment|// Obscure event
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
name|m_window
operator|=
literal|0
expr_stmt|;
name|m_surface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|m_referenceCount
operator|.
name|deref
argument_list|()
condition|)
block|{
name|QWriteLocker
name|locker
argument_list|(
operator|&
name|m_staticSurfaceLock
argument_list|)
decl_stmt|;
name|EGLDisplay
name|display
init|=
operator|(
cast|static_cast
argument_list|<
name|QEglFSScreen
operator|*
argument_list|>
argument_list|(
name|window
argument_list|()
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
operator|)
operator|->
name|display
argument_list|()
decl_stmt|;
name|eglDestroySurface
argument_list|(
name|display
argument_list|,
name|m_staticSurface
argument_list|)
expr_stmt|;
name|m_staticSurface
operator|=
literal|0
expr_stmt|;
name|m_staticNativeWindow
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateStaticNativeWindow
name|void
name|QAndroidOpenGLPlatformWindow
operator|::
name|updateStaticNativeWindow
parameter_list|()
block|{
name|QWriteLocker
name|locker
argument_list|(
operator|&
name|m_staticSurfaceLock
argument_list|)
decl_stmt|;
name|m_staticNativeWindow
operator|=
name|QtAndroid
operator|::
name|nativeWindow
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetSurface
name|void
name|QAndroidOpenGLPlatformWindow
operator|::
name|resetSurface
parameter_list|()
block|{
comment|// Only add a reference if we're not already holding one, otherwise we're just updating
comment|// the native window pointer
if|if
condition|(
name|m_window
operator|==
literal|0
condition|)
name|m_referenceCount
operator|.
name|ref
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_staticSurface
operator|==
literal|0
condition|)
block|{
name|QWriteLocker
name|locker
argument_list|(
operator|&
name|m_staticSurfaceLock
argument_list|)
decl_stmt|;
name|QEglFSWindow
operator|::
name|resetSurface
argument_list|()
expr_stmt|;
name|m_staticSurface
operator|=
name|m_surface
expr_stmt|;
name|m_staticNativeWindow
operator|=
name|m_window
expr_stmt|;
block|}
else|else
block|{
name|QReadLocker
name|locker
argument_list|(
operator|&
name|m_staticSurfaceLock
argument_list|)
decl_stmt|;
name|m_window
operator|=
name|m_staticNativeWindow
expr_stmt|;
name|m_surface
operator|=
name|m_staticSurface
expr_stmt|;
block|}
block|{
name|lock
argument_list|()
expr_stmt|;
comment|// Use the desktop size.
comment|// On some devices, the getters for the native window size gives wrong values
name|scheduleResize
argument_list|(
name|QAndroidPlatformIntegration
operator|::
name|defaultDesktopSize
argument_list|()
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRegion
argument_list|(
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expose event
name|unlock
argument_list|()
expr_stmt|;
block|}
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destroy
name|void
name|QAndroidOpenGLPlatformWindow
operator|::
name|destroy
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_referenceCount
operator|.
name|deref
argument_list|()
condition|)
block|{
name|QEglFSWindow
operator|::
name|destroy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|m_window
operator|=
literal|0
expr_stmt|;
name|m_surface
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateStatusBarVisibility
name|void
name|QAndroidOpenGLPlatformWindow
operator|::
name|updateStatusBarVisibility
parameter_list|()
block|{
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|window
argument_list|()
operator|->
name|flags
argument_list|()
decl_stmt|;
name|bool
name|isNonRegularWindow
init|=
name|flags
operator|&
operator|(
name|Qt
operator|::
name|Popup
operator||
name|Qt
operator|::
name|Dialog
operator||
name|Qt
operator|::
name|Sheet
operator|)
operator|&
operator|~
name|Qt
operator|::
name|Window
decl_stmt|;
if|if
condition|(
operator|!
name|isNonRegularWindow
condition|)
block|{
if|if
condition|(
name|m_state
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
name|QtAndroid
operator|::
name|hideStatusBar
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|m_state
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
name|QtAndroid
operator|::
name|showStatusBar
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|raise
name|void
name|QAndroidOpenGLPlatformWindow
operator|::
name|raise
parameter_list|()
block|{
name|updateStatusBarVisibility
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|QAndroidOpenGLPlatformWindow
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
if|if
condition|(
name|m_state
operator|==
name|state
condition|)
return|return;
name|m_state
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
name|updateStatusBarVisibility
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QAndroidOpenGLPlatformWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|visible
condition|)
name|updateStatusBarVisibility
argument_list|()
expr_stmt|;
name|QEglFSWindow
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
comment|// The Android Activity is activated before Qt is initialized, causing the application state to
comment|// never be set to 'active'. We explicitly set this state when the first window becomes visible.
if|if
condition|(
name|visible
condition|)
name|QtAndroid
operator|::
name|setApplicationActive
argument_list|()
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRegion
argument_list|(
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expose event
name|QWindowSystemInterface
operator|::
name|flushWindowSystemEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
