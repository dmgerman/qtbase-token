begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeglfshooks.h"
end_include
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformintegration.h"
end_include
begin_include
include|#
directive|include
file|<android/native_window.h>
end_include
begin_include
include|#
directive|include
file|<jni.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QEglFSAndroidHooks
class|class
name|QEglFSAndroidHooks
super|:
specifier|public
name|QEglFSHooks
block|{
public|public:
name|void
name|platformInit
parameter_list|()
function_decl|;
name|void
name|platformDestroy
parameter_list|()
function_decl|;
name|EGLNativeDisplayType
name|platformDisplay
parameter_list|()
specifier|const
function_decl|;
name|QSize
name|screenSize
parameter_list|()
specifier|const
function_decl|;
name|QSizeF
name|physicalScreenSize
parameter_list|()
specifier|const
function_decl|;
name|QDpi
name|logicalDpi
parameter_list|()
specifier|const
function_decl|;
name|Qt
operator|::
name|ScreenOrientation
name|orientation
parameter_list|()
specifier|const
function_decl|;
name|Qt
operator|::
name|ScreenOrientation
name|nativeOrientation
parameter_list|()
specifier|const
function_decl|;
name|int
name|screenDepth
parameter_list|()
specifier|const
function_decl|;
name|QSurfaceFormat
name|surfaceFormatFor
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|inputFormat
parameter_list|)
specifier|const
function_decl|;
name|EGLNativeWindowType
name|createNativeWindow
parameter_list|(
name|QPlatformWindow
modifier|*
name|platformWindow
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
function_decl|;
name|void
name|destroyNativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
function_decl|;
name|bool
name|hasCapability
parameter_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|cap
parameter_list|)
specifier|const
function_decl|;
name|QEglFSCursor
modifier|*
name|createCursor
parameter_list|(
name|QEglFSScreen
modifier|*
name|screen
parameter_list|)
specifier|const
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|platformInit
name|void
name|QEglFSAndroidHooks
operator|::
name|platformInit
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|platformDestroy
name|void
name|QEglFSAndroidHooks
operator|::
name|platformDestroy
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|platformDisplay
name|EGLNativeDisplayType
name|QEglFSAndroidHooks
operator|::
name|platformDisplay
parameter_list|()
specifier|const
block|{
return|return
name|EGL_DEFAULT_DISPLAY
return|;
block|}
end_function
begin_function
DECL|function|screenSize
name|QSize
name|QEglFSAndroidHooks
operator|::
name|screenSize
parameter_list|()
specifier|const
block|{
return|return
name|QAndroidPlatformIntegration
operator|::
name|defaultDesktopSize
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|physicalScreenSize
name|QSizeF
name|QEglFSAndroidHooks
operator|::
name|physicalScreenSize
parameter_list|()
specifier|const
block|{
return|return
name|QSizeF
argument_list|(
name|QAndroidPlatformIntegration
operator|::
name|m_defaultPhysicalSizeWidth
argument_list|,
name|QAndroidPlatformIntegration
operator|::
name|m_defaultPhysicalSizeHeight
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|logicalDpi
name|QDpi
name|QEglFSAndroidHooks
operator|::
name|logicalDpi
parameter_list|()
specifier|const
block|{
name|qreal
name|lDpi
init|=
name|QtAndroid
operator|::
name|scaledDensity
argument_list|()
operator|*
literal|72
decl_stmt|;
return|return
name|QDpi
argument_list|(
name|lDpi
argument_list|,
name|lDpi
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|orientation
name|Qt
operator|::
name|ScreenOrientation
name|QEglFSAndroidHooks
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
return|return
name|QAndroidPlatformIntegration
operator|::
name|m_orientation
return|;
block|}
end_function
begin_function
DECL|function|nativeOrientation
name|Qt
operator|::
name|ScreenOrientation
name|QEglFSAndroidHooks
operator|::
name|nativeOrientation
parameter_list|()
specifier|const
block|{
return|return
name|QAndroidPlatformIntegration
operator|::
name|m_nativeOrientation
return|;
block|}
end_function
begin_function
DECL|function|createNativeWindow
name|EGLNativeWindowType
name|QEglFSAndroidHooks
operator|::
name|createNativeWindow
parameter_list|(
name|QPlatformWindow
modifier|*
name|platformWindow
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|platformWindow
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|ANativeWindow
modifier|*
name|window
init|=
name|QtAndroid
operator|::
name|nativeWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|window
operator|!=
literal|0
condition|)
name|ANativeWindow_acquire
argument_list|(
name|window
argument_list|)
expr_stmt|;
return|return
name|window
return|;
block|}
end_function
begin_function
DECL|function|destroyNativeWindow
name|void
name|QEglFSAndroidHooks
operator|::
name|destroyNativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
block|{
if|if
condition|(
name|window
operator|!=
literal|0
condition|)
name|ANativeWindow_release
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasCapability
name|bool
name|QEglFSAndroidHooks
operator|::
name|hasCapability
parameter_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|capability
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|capability
condition|)
block|{
case|case
name|QPlatformIntegration
operator|::
name|OpenGL
case|:
return|return
literal|true
return|;
case|case
name|QPlatformIntegration
operator|::
name|ThreadedOpenGL
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
empty_stmt|;
block|}
end_function
begin_function
DECL|function|screenDepth
name|int
name|QEglFSAndroidHooks
operator|::
name|screenDepth
parameter_list|()
specifier|const
block|{
comment|// ### Hardcoded
return|return
literal|32
return|;
block|}
end_function
begin_function
DECL|function|surfaceFormatFor
name|QSurfaceFormat
name|QEglFSAndroidHooks
operator|::
name|surfaceFormatFor
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|inputFormat
parameter_list|)
specifier|const
block|{
name|QSurfaceFormat
name|ret
argument_list|(
name|inputFormat
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setAlphaBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setRedBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setGreenBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setBlueBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|createCursor
name|QEglFSCursor
modifier|*
name|QEglFSAndroidHooks
operator|::
name|createCursor
parameter_list|(
name|QEglFSScreen
modifier|*
name|screen
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|screen
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|eglFSAndroidHooks
specifier|static
name|QEglFSAndroidHooks
name|eglFSAndroidHooks
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|platformHooks
name|QEglFSHooks
modifier|*
name|platformHooks
init|=
operator|&
name|eglFSAndroidHooks
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
