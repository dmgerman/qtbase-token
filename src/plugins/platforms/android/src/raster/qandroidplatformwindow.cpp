begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qandroidplatformwindow.h"
end_include
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_constructor
DECL|function|QAndroidPlatformWindow
name|QAndroidPlatformWindow
operator|::
name|QAndroidPlatformWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QFbWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_state
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setGeometry
name|void
name|QAndroidPlatformWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QFbWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|propagateSizeHints
name|void
name|QAndroidPlatformWindow
operator|::
name|propagateSizeHints
parameter_list|()
block|{
comment|//shut up warning from default implementation
block|}
end_function
begin_function
DECL|function|updateStatusBarVisibility
name|void
name|QAndroidPlatformWindow
operator|::
name|updateStatusBarVisibility
parameter_list|()
block|{
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|window
argument_list|()
operator|->
name|flags
argument_list|()
decl_stmt|;
name|bool
name|isNonRegularWindow
init|=
name|flags
operator|&
operator|(
name|Qt
operator|::
name|Popup
operator||
name|Qt
operator|::
name|Dialog
operator||
name|Qt
operator|::
name|Sheet
operator|)
operator|&
operator|~
name|Qt
operator|::
name|Window
decl_stmt|;
if|if
condition|(
operator|!
name|isNonRegularWindow
condition|)
block|{
if|if
condition|(
name|m_state
operator|&
name|Qt
operator|::
name|WindowFullScreen
condition|)
name|QtAndroid
operator|::
name|hideStatusBar
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|m_state
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
name|QtAndroid
operator|::
name|showStatusBar
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|raise
name|void
name|QAndroidPlatformWindow
operator|::
name|raise
parameter_list|()
block|{
name|updateStatusBarVisibility
argument_list|()
expr_stmt|;
name|QFbWindow
operator|::
name|raise
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|QAndroidPlatformWindow
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
if|if
condition|(
name|m_state
operator|==
name|state
condition|)
return|return;
name|m_state
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
name|updateStatusBarVisibility
argument_list|()
expr_stmt|;
name|QFbWindow
operator|::
name|setWindowState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QAndroidPlatformWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|visible
condition|)
name|updateStatusBarVisibility
argument_list|()
expr_stmt|;
name|QFbWindow
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
comment|// The Android Activity is activated before Qt is initialized, causing the application state to
comment|// never be set to 'active'. We explicitly set this state when the first window becomes visible.
if|if
condition|(
name|visible
condition|)
name|QtAndroid
operator|::
name|setApplicationActive
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
