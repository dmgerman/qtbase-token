begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|ANDROID_APP_H
end_ifndef
begin_define
DECL|macro|ANDROID_APP_H
define|#
directive|define
name|ANDROID_APP_H
end_define
begin_include
include|#
directive|include
file|<android/log.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|ANDROID_PLUGIN_OPENGL
end_ifdef
begin_include
include|#
directive|include
file|<EGL/eglplatform.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtCore/qsize.h>
end_include
begin_include
include|#
directive|include
file|<jni.h>
end_include
begin_include
include|#
directive|include
file|<android/asset_manager.h>
end_include
begin_decl_stmt
DECL|variable|QImage
name|class
name|QImage
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRect
name|class
name|QRect
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPoint
name|class
name|QPoint
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QThread
name|class
name|QThread
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QAndroidPlatformIntegration
name|class
name|QAndroidPlatformIntegration
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWidget
name|class
name|QWidget
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QString
name|class
name|QString
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QWindow
name|class
name|QWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|QtAndroid
block|{
name|QAndroidPlatformIntegration
modifier|*
name|androidPlatformIntegration
parameter_list|()
function_decl|;
name|void
name|setAndroidPlatformIntegration
parameter_list|(
name|QAndroidPlatformIntegration
modifier|*
name|androidPlatformIntegration
parameter_list|)
function_decl|;
name|void
name|setQtThread
parameter_list|(
name|QThread
modifier|*
name|thread
parameter_list|)
function_decl|;
name|void
name|setFullScreen
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|ANDROID_PLUGIN_OPENGL
name|void
name|flushImage
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
function_decl|;
else|#
directive|else
name|EGLNativeWindowType
name|nativeWindow
parameter_list|(
name|bool
name|waitToCreate
init|=
name|true
parameter_list|)
function_decl|;
name|QSize
name|nativeWindowSize
parameter_list|()
function_decl|;
endif|#
directive|endif
name|QWindow
modifier|*
name|topLevelWindowAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
function_decl|;
name|int
name|desktopWidthPixels
parameter_list|()
function_decl|;
name|int
name|desktopHeightPixels
parameter_list|()
function_decl|;
name|double
name|scaledDensity
parameter_list|()
function_decl|;
name|JavaVM
modifier|*
name|javaVM
parameter_list|()
function_decl|;
name|jclass
name|findClass
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
name|JNIEnv
modifier|*
name|env
parameter_list|)
function_decl|;
name|AAssetManager
modifier|*
name|assetManager
parameter_list|()
function_decl|;
name|jclass
name|applicationClass
parameter_list|()
function_decl|;
name|jobject
name|activity
parameter_list|()
function_decl|;
name|void
name|setApplicationActive
parameter_list|()
function_decl|;
name|jobject
name|createBitmap
parameter_list|(
name|QImage
name|img
parameter_list|,
name|JNIEnv
modifier|*
name|env
init|=
literal|0
parameter_list|)
function_decl|;
name|jobject
name|createBitmapDrawable
parameter_list|(
name|jobject
name|bitmap
parameter_list|,
name|JNIEnv
modifier|*
name|env
init|=
literal|0
parameter_list|)
function_decl|;
struct|struct
name|AttachedJNIEnv
block|{
name|AttachedJNIEnv
argument_list|()
block|{
name|attached
operator|=
name|false
expr_stmt|;
if|if
condition|(
name|QtAndroid
operator|::
name|javaVM
argument_list|()
operator|->
name|GetEnv
argument_list|(
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|jniEnv
argument_list|,
name|JNI_VERSION_1_6
argument_list|)
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|QtAndroid
operator|::
name|javaVM
argument_list|()
operator|->
name|AttachCurrentThread
argument_list|(
operator|&
name|jniEnv
argument_list|,
name|NULL
argument_list|)
operator|<
literal|0
condition|)
block|{
name|__android_log_print
argument_list|(
name|ANDROID_LOG_ERROR
argument_list|,
literal|"Qt"
argument_list|,
literal|"AttachCurrentThread failed"
argument_list|)
expr_stmt|;
name|jniEnv
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|attached
operator|=
name|true
expr_stmt|;
block|}
block|}
operator|~
name|AttachedJNIEnv
argument_list|()
block|{
if|if
condition|(
name|attached
condition|)
name|QtAndroid
operator|::
name|javaVM
argument_list|()
operator|->
name|DetachCurrentThread
argument_list|()
expr_stmt|;
block|}
name|bool
name|attached
decl_stmt|;
name|JNIEnv
modifier|*
name|jniEnv
decl_stmt|;
block|}
struct|;
specifier|const
name|char
modifier|*
name|classErrorMsgFmt
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|methodErrorMsgFmt
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|qtTagText
parameter_list|()
function_decl|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ANDROID_APP_H
end_comment
end_unit
