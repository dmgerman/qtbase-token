begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qandroidassetsfileenginehandler.h"
end_include
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QVector>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_typedef
DECL|typedef|FilesList
typedef|typedef
name|QVector
argument_list|<
name|QString
argument_list|>
name|FilesList
typedef|;
end_typedef
begin_struct
DECL|struct|AndroidAssetDir
struct|struct
name|AndroidAssetDir
block|{
DECL|function|AndroidAssetDir
name|AndroidAssetDir
parameter_list|(
name|AAssetDir
modifier|*
name|ad
parameter_list|)
block|{
if|if
condition|(
name|ad
condition|)
block|{
specifier|const
name|char
modifier|*
name|fileName
decl_stmt|;
while|while
condition|(
operator|(
name|fileName
operator|=
name|AAssetDir_getNextFileName
argument_list|(
name|ad
argument_list|)
operator|)
condition|)
name|m_items
operator|.
name|push_back
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|AAssetDir_close
argument_list|(
name|ad
argument_list|)
expr_stmt|;
block|}
block|}
DECL|member|m_items
name|FilesList
name|m_items
decl_stmt|;
block|}
struct|;
end_struct
begin_class
DECL|class|AndroidAbstractFileEngineIterator
class|class
name|AndroidAbstractFileEngineIterator
super|:
specifier|public
name|QAbstractFileEngineIterator
block|{
public|public:
DECL|function|AndroidAbstractFileEngineIterator
name|AndroidAbstractFileEngineIterator
parameter_list|(
name|QDir
operator|::
name|Filters
name|filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|nameFilters
parameter_list|,
name|QSharedPointer
argument_list|<
name|AndroidAssetDir
argument_list|>
name|asset
parameter_list|,
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
member_init_list|:
name|QAbstractFileEngineIterator
argument_list|(
name|filters
argument_list|,
name|nameFilters
argument_list|)
block|{
name|m_items
operator|=
name|asset
operator|->
name|m_items
expr_stmt|;
name|m_index
operator|=
operator|-
literal|1
expr_stmt|;
name|m_path
operator|=
name|path
expr_stmt|;
block|}
DECL|function|currentFileInfo
specifier|virtual
name|QFileInfo
name|currentFileInfo
parameter_list|()
specifier|const
block|{
return|return
name|QFileInfo
argument_list|(
name|currentFilePath
argument_list|()
argument_list|)
return|;
block|}
DECL|function|currentFileName
specifier|virtual
name|QString
name|currentFileName
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_index
operator|<
literal|0
operator|||
name|m_index
operator|>=
name|m_items
operator|.
name|size
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|fileName
init|=
name|m_items
index|[
name|m_index
index|]
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|fileName
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|fileName
return|;
block|}
DECL|function|currentFilePath
specifier|virtual
name|QString
name|currentFilePath
parameter_list|()
specifier|const
block|{
return|return
name|m_path
operator|+
name|currentFileName
argument_list|()
return|;
block|}
DECL|function|hasNext
specifier|virtual
name|bool
name|hasNext
parameter_list|()
specifier|const
block|{
return|return
name|m_items
operator|.
name|size
argument_list|()
operator|&&
operator|(
name|m_index
operator|<
name|m_items
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
DECL|function|next
specifier|virtual
name|QString
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|m_index
operator|++
expr_stmt|;
return|return
name|currentFileName
argument_list|()
return|;
block|}
private|private:
DECL|member|m_path
name|QString
name|m_path
decl_stmt|;
DECL|member|m_items
name|FilesList
name|m_items
decl_stmt|;
DECL|member|m_index
name|int
name|m_index
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|AndroidAbstractFileEngine
class|class
name|AndroidAbstractFileEngine
super|:
specifier|public
name|QAbstractFileEngine
block|{
public|public:
DECL|function|AndroidAbstractFileEngine
specifier|explicit
name|AndroidAbstractFileEngine
parameter_list|(
name|AAsset
modifier|*
name|asset
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|m_assetFile
operator|=
name|asset
expr_stmt|;
name|m_fileName
operator|=
name|fileName
expr_stmt|;
block|}
DECL|function|AndroidAbstractFileEngine
specifier|explicit
name|AndroidAbstractFileEngine
parameter_list|(
name|QSharedPointer
argument_list|<
name|AndroidAssetDir
argument_list|>
name|asset
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|m_assetFile
operator|=
literal|0
expr_stmt|;
name|m_assetDir
operator|=
name|asset
expr_stmt|;
name|m_fileName
operator|=
name|fileName
expr_stmt|;
if|if
condition|(
operator|!
name|m_fileName
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
condition|)
name|m_fileName
operator|+=
literal|"/"
expr_stmt|;
block|}
DECL|function|~AndroidAbstractFileEngine
name|~
name|AndroidAbstractFileEngine
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
DECL|function|open
specifier|virtual
name|bool
name|open
parameter_list|(
name|QIODevice
operator|::
name|OpenMode
name|openMode
parameter_list|)
block|{
if|if
condition|(
name|m_assetFile
condition|)
return|return
name|openMode
operator|&
name|QIODevice
operator|::
name|ReadOnly
return|;
return|return
literal|false
return|;
block|}
DECL|function|close
specifier|virtual
name|bool
name|close
parameter_list|()
block|{
if|if
condition|(
name|m_assetFile
condition|)
block|{
name|AAsset_close
argument_list|(
name|m_assetFile
argument_list|)
expr_stmt|;
name|m_assetFile
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|size
specifier|virtual
name|qint64
name|size
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_assetFile
condition|)
return|return
name|AAsset_getLength
argument_list|(
name|m_assetFile
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
DECL|function|pos
specifier|virtual
name|qint64
name|pos
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_assetFile
condition|)
return|return
name|AAsset_seek
argument_list|(
name|m_assetFile
argument_list|,
literal|0
argument_list|,
name|SEEK_CUR
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
DECL|function|seek
specifier|virtual
name|bool
name|seek
parameter_list|(
name|qint64
name|pos
parameter_list|)
block|{
if|if
condition|(
name|m_assetFile
condition|)
return|return
name|pos
operator|==
name|AAsset_seek
argument_list|(
name|m_assetFile
argument_list|,
name|pos
argument_list|,
name|SEEK_SET
argument_list|)
return|;
return|return
literal|false
return|;
block|}
DECL|function|read
specifier|virtual
name|qint64
name|read
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
if|if
condition|(
name|m_assetFile
condition|)
return|return
name|AAsset_read
argument_list|(
name|m_assetFile
argument_list|,
name|data
argument_list|,
name|maxlen
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
DECL|function|isSequential
specifier|virtual
name|bool
name|isSequential
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|caseSensitive
specifier|virtual
name|bool
name|caseSensitive
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
DECL|function|isRelativePath
specifier|virtual
name|bool
name|isRelativePath
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|fileFlags
specifier|virtual
name|FileFlags
name|fileFlags
parameter_list|(
name|FileFlags
name|type
init|=
name|FileInfoAll
parameter_list|)
specifier|const
block|{
name|FileFlags
name|flags
argument_list|(
name|ReadOwnerPerm
operator||
name|ReadUserPerm
operator||
name|ReadGroupPerm
operator||
name|ReadOtherPerm
operator||
name|ExistsFlag
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_assetFile
condition|)
name|flags
operator||=
name|FileType
expr_stmt|;
if|if
condition|(
operator|!
name|m_assetDir
operator|.
name|isNull
argument_list|()
condition|)
name|flags
operator||=
name|DirectoryType
expr_stmt|;
return|return
name|type
operator|&
name|flags
return|;
block|}
DECL|function|fileName
specifier|virtual
name|QString
name|fileName
parameter_list|(
name|FileName
name|file
init|=
name|DefaultName
parameter_list|)
specifier|const
block|{
name|int
name|pos
decl_stmt|;
switch|switch
condition|(
name|file
condition|)
block|{
case|case
name|DefaultName
case|:
case|case
name|AbsoluteName
case|:
case|case
name|CanonicalName
case|:
return|return
name|m_fileName
return|;
case|case
name|BaseName
case|:
if|if
condition|(
operator|(
name|pos
operator|=
name|m_fileName
operator|.
name|lastIndexOf
argument_list|(
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
return|return
name|m_fileName
operator|.
name|mid
argument_list|(
name|pos
argument_list|)
return|;
else|else
return|return
name|m_fileName
return|;
case|case
name|PathName
case|:
case|case
name|AbsolutePathName
case|:
case|case
name|CanonicalPathName
case|:
if|if
condition|(
operator|(
name|pos
operator|=
name|m_fileName
operator|.
name|lastIndexOf
argument_list|(
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
return|return
name|m_fileName
operator|.
name|left
argument_list|(
name|pos
argument_list|)
return|;
else|else
return|return
name|m_fileName
return|;
default|default:
return|return
name|QString
argument_list|()
return|;
block|}
block|}
DECL|function|setFileName
specifier|virtual
name|void
name|setFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|==
name|m_fileName
condition|)
return|return;
name|m_fileName
operator|=
name|file
expr_stmt|;
if|if
condition|(
operator|!
name|m_fileName
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
condition|)
name|m_fileName
operator|+=
literal|"/"
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
DECL|function|beginEntryList
specifier|virtual
name|Iterator
modifier|*
name|beginEntryList
parameter_list|(
name|QDir
operator|::
name|Filters
name|filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|filterNames
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_assetDir
operator|.
name|isNull
argument_list|()
condition|)
return|return
operator|new
name|AndroidAbstractFileEngineIterator
argument_list|(
name|filters
argument_list|,
name|filterNames
argument_list|,
name|m_assetDir
argument_list|,
name|m_fileName
argument_list|)
return|;
return|return
literal|0
return|;
block|}
private|private:
DECL|member|m_assetFile
name|AAsset
modifier|*
name|m_assetFile
decl_stmt|;
DECL|member|m_assetDir
name|QSharedPointer
argument_list|<
name|AndroidAssetDir
argument_list|>
name|m_assetDir
decl_stmt|;
DECL|member|m_fileName
name|QString
name|m_fileName
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|AndroidAssetsFileEngineHandler
name|AndroidAssetsFileEngineHandler
operator|::
name|AndroidAssetsFileEngineHandler
parameter_list|()
member_init_list|:
name|m_assetsCache
argument_list|(
name|std
operator|::
name|max
argument_list|(
literal|5
argument_list|,
name|qEnvironmentVariableIntValue
argument_list|(
literal|"QT_ANDROID_MAX_ASSETS_CACHE_SIZE"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_hasPrepopulatedCache
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_hasTriedPrepopulatingCache
argument_list|(
literal|false
argument_list|)
block|{
name|m_assetManager
operator|=
name|QtAndroid
operator|::
name|assetManager
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~AndroidAssetsFileEngineHandler
name|AndroidAssetsFileEngineHandler
operator|::
name|~
name|AndroidAssetsFileEngineHandler
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|prepopulateCache
name|void
name|AndroidAssetsFileEngineHandler
operator|::
name|prepopulateCache
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|m_hasTriedPrepopulatingCache
argument_list|)
expr_stmt|;
name|m_hasTriedPrepopulatingCache
operator|=
literal|true
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|m_assetsCache
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Failsafe: Don't read cache files that are larger than 1MB
specifier|static
name|qint64
name|maxPrepopulatedCacheSize
init|=
name|qMax
argument_list|(
literal|1024LL
operator|*
literal|1024LL
argument_list|,
name|qgetenv
argument_list|(
literal|"QT_ANDROID_MAX_PREPOPULATED_ASSETS_CACHE_SIZE"
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|fileName
init|=
literal|"--Added-by-androiddeployqt--/qt_cache_pregenerated_file_list"
decl_stmt|;
name|AAsset
modifier|*
name|asset
init|=
name|AAssetManager_open
argument_list|(
name|m_assetManager
argument_list|,
name|fileName
argument_list|,
name|AASSET_MODE_BUFFER
argument_list|)
decl_stmt|;
if|if
condition|(
name|asset
condition|)
block|{
name|m_hasPrepopulatedCache
operator|=
literal|true
expr_stmt|;
name|AndroidAbstractFileEngine
name|fileEngine
argument_list|(
name|asset
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileEngine
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|qint64
name|size
init|=
name|fileEngine
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
name|maxPrepopulatedCacheSize
condition|)
block|{
name|QByteArray
name|bytes
argument_list|(
name|size
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|qint64
name|read
init|=
name|fileEngine
operator|.
name|read
argument_list|(
name|bytes
operator|.
name|data
argument_list|()
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|!=
name|size
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to read prepopulated cache"
argument_list|)
expr_stmt|;
return|return;
block|}
name|QDataStream
name|stream
argument_list|(
operator|&
name|bytes
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_5_3
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|status
argument_list|()
operator|!=
name|QDataStream
operator|::
name|Ok
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to read prepopulated cache"
argument_list|)
expr_stmt|;
return|return;
block|}
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|directoryName
decl_stmt|;
name|stream
operator|>>
name|directoryName
expr_stmt|;
name|int
name|fileCount
decl_stmt|;
name|stream
operator|>>
name|fileCount
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|fileList
decl_stmt|;
name|fileList
operator|.
name|reserve
argument_list|(
name|fileCount
argument_list|)
expr_stmt|;
while|while
condition|(
name|fileCount
operator|--
condition|)
block|{
name|QString
name|fileName
decl_stmt|;
name|stream
operator|>>
name|fileName
expr_stmt|;
name|fileList
operator|.
name|append
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|QSharedPointer
argument_list|<
name|AndroidAssetDir
argument_list|>
modifier|*
name|aad
init|=
operator|new
name|QSharedPointer
argument_list|<
name|AndroidAssetDir
argument_list|>
argument_list|(
operator|new
name|AndroidAssetDir
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|*
name|aad
operator|)
operator|->
name|m_items
operator|=
name|fileList
expr_stmt|;
comment|// Cost = 0, because we should always cache everything if there's a prepopulated cache
name|QByteArray
name|key
init|=
name|directoryName
operator|!=
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
condition|?
name|QByteArray
argument_list|(
literal|"assets:/"
argument_list|)
operator|+
name|directoryName
operator|.
name|toUtf8
argument_list|()
else|:
name|QByteArray
argument_list|(
literal|"assets:"
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
name|m_assetsCache
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|aad
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|qWarning
argument_list|(
literal|"Failed to insert in cache: %s"
argument_list|,
name|qPrintable
argument_list|(
name|directoryName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Prepopulated cache is too large to read.\n"
literal|"Use environment variable QT_ANDROID_MAX_PREPOPULATED_ASSETS_CACHE_SIZE to adjust size."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|create
name|QAbstractFileEngine
modifier|*
name|AndroidAssetsFileEngineHandler
operator|::
name|create
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
specifier|static
name|QLatin1String
name|assetsPrefix
argument_list|(
literal|"assets:"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|startsWith
argument_list|(
name|assetsPrefix
argument_list|)
condition|)
return|return
literal|0
return|;
specifier|static
name|int
name|prefixSize
init|=
name|assetsPrefix
operator|.
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
name|QByteArray
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
block|{
name|path
operator|=
name|fileName
operator|.
name|toUtf8
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|size
argument_list|()
operator|>
name|prefixSize
condition|)
block|{
name|AAsset
modifier|*
name|asset
init|=
name|AAssetManager_open
argument_list|(
name|m_assetManager
argument_list|,
name|path
operator|.
name|constData
argument_list|()
operator|+
name|prefixSize
argument_list|,
name|AASSET_MODE_BUFFER
argument_list|)
decl_stmt|;
if|if
condition|(
name|asset
condition|)
return|return
operator|new
name|AndroidAbstractFileEngine
argument_list|(
name|asset
argument_list|,
name|fileName
argument_list|)
return|;
block|}
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|size
argument_list|()
condition|)
name|path
operator|=
name|fileName
operator|.
name|left
argument_list|(
name|fileName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|toUtf8
argument_list|()
expr_stmt|;
name|m_assetsCacheMutext
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_hasTriedPrepopulatingCache
condition|)
name|prepopulateCache
argument_list|()
expr_stmt|;
name|QSharedPointer
argument_list|<
name|AndroidAssetDir
argument_list|>
modifier|*
name|aad
init|=
name|m_assetsCache
operator|.
name|object
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|m_assetsCacheMutext
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|aad
condition|)
block|{
if|if
condition|(
operator|!
name|m_hasPrepopulatedCache
operator|&&
name|path
operator|.
name|size
argument_list|()
operator|>
name|prefixSize
condition|)
block|{
name|AAssetDir
modifier|*
name|assetDir
init|=
name|AAssetManager_openDir
argument_list|(
name|m_assetManager
argument_list|,
name|path
operator|.
name|constData
argument_list|()
operator|+
name|prefixSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|assetDir
condition|)
block|{
if|if
condition|(
name|AAssetDir_getNextFileName
argument_list|(
name|assetDir
argument_list|)
condition|)
block|{
name|AAssetDir_rewind
argument_list|(
name|assetDir
argument_list|)
expr_stmt|;
name|aad
operator|=
operator|new
name|QSharedPointer
argument_list|<
name|AndroidAssetDir
argument_list|>
argument_list|(
operator|new
name|AndroidAssetDir
argument_list|(
name|assetDir
argument_list|)
argument_list|)
expr_stmt|;
name|m_assetsCacheMutext
operator|.
name|lock
argument_list|()
expr_stmt|;
name|m_assetsCache
operator|.
name|insert
argument_list|(
name|path
argument_list|,
name|aad
argument_list|)
expr_stmt|;
name|m_assetsCacheMutext
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
operator|new
name|AndroidAbstractFileEngine
argument_list|(
operator|*
name|aad
argument_list|,
name|fileName
argument_list|)
return|;
block|}
else|else
block|{
name|AAssetDir_close
argument_list|(
name|assetDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
return|return
operator|new
name|AndroidAbstractFileEngine
argument_list|(
operator|*
name|aad
argument_list|,
name|fileName
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
