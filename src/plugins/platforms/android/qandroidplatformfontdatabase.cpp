begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|"qandroidplatformfontdatabase.h"
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|fontDir
name|QString
name|QAndroidPlatformFontDatabase
operator|::
name|fontDir
parameter_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"/system/fonts"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|populateFontDatabase
name|void
name|QAndroidPlatformFontDatabase
operator|::
name|populateFontDatabase
parameter_list|()
block|{
name|QString
name|fontpath
init|=
name|fontDir
argument_list|()
decl_stmt|;
name|QDir
name|dir
argument_list|(
name|fontpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
condition|)
block|{
name|qFatal
argument_list|(
literal|"QFontDatabase: Cannot find font directory %s - is Qt installed correctly?"
argument_list|,
name|qPrintable
argument_list|(
name|fontpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QStringList
name|nameFilters
decl_stmt|;
name|nameFilters
operator|<<
name|QLatin1String
argument_list|(
literal|"*.ttf"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"*.otf"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|fi
decl|,
name|dir
operator|.
name|entryInfoList
argument_list|(
name|nameFilters
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
control|)
block|{
specifier|const
name|QByteArray
name|file
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|fi
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|QBasicFontDatabase
operator|::
name|addTTFile
argument_list|(
name|QByteArray
argument_list|()
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fallbacksForFamily
name|QStringList
name|QAndroidPlatformFontDatabase
operator|::
name|fallbacksForFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|family
parameter_list|,
name|QFont
operator|::
name|Style
name|style
parameter_list|,
name|QFont
operator|::
name|StyleHint
name|styleHint
parameter_list|,
name|QChar
operator|::
name|Script
name|script
parameter_list|)
specifier|const
block|{
name|QStringList
name|result
decl_stmt|;
if|if
condition|(
name|styleHint
operator|==
name|QFont
operator|::
name|Monospace
operator|||
name|styleHint
operator|==
name|QFont
operator|::
name|Courier
condition|)
name|result
operator|.
name|append
argument_list|(
name|QString
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_ANDROID_FONTS_MONOSPACE"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|styleHint
operator|==
name|QFont
operator|::
name|Serif
condition|)
name|result
operator|.
name|append
argument_list|(
name|QString
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_ANDROID_FONTS_SERIF"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|result
operator|.
name|append
argument_list|(
name|QString
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_ANDROID_FONTS"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|QPlatformFontDatabase
operator|::
name|fallbacksForFamily
argument_list|(
name|family
argument_list|,
name|style
argument_list|,
name|styleHint
argument_list|,
name|script
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
