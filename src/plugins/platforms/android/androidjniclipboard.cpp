begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"androidjniclipboard.h"
end_include
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_using
using|using
namespace|namespace
name|QtAndroid
namespace|;
end_using
begin_namespace
DECL|namespace|QtAndroidClipboard
namespace|namespace
name|QtAndroidClipboard
block|{
comment|// Clipboard support
DECL|member|m_registerClipboardManagerMethodID
specifier|static
name|jmethodID
name|m_registerClipboardManagerMethodID
init|=
literal|0
decl_stmt|;
DECL|member|m_setClipboardTextMethodID
specifier|static
name|jmethodID
name|m_setClipboardTextMethodID
init|=
literal|0
decl_stmt|;
DECL|member|m_hasClipboardTextMethodID
specifier|static
name|jmethodID
name|m_hasClipboardTextMethodID
init|=
literal|0
decl_stmt|;
DECL|member|m_getClipboardTextMethodID
specifier|static
name|jmethodID
name|m_getClipboardTextMethodID
init|=
literal|0
decl_stmt|;
comment|// Clipboard support
DECL|function|setClipboardListener
name|void
name|setClipboardListener
parameter_list|(
name|QAndroidPlatformClipboard
modifier|*
name|listener
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|AttachedJNIEnv
name|env
decl_stmt|;
if|if
condition|(
operator|!
name|env
operator|.
name|jniEnv
condition|)
return|return;
name|env
operator|.
name|jniEnv
operator|->
name|CallStaticVoidMethod
argument_list|(
name|applicationClass
argument_list|()
argument_list|,
name|m_registerClipboardManagerMethodID
argument_list|)
expr_stmt|;
block|}
DECL|function|setClipboardText
name|void
name|setClipboardText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|AttachedJNIEnv
name|env
decl_stmt|;
if|if
condition|(
operator|!
name|env
operator|.
name|jniEnv
condition|)
return|return;
name|jstring
name|jtext
init|=
name|env
operator|.
name|jniEnv
operator|->
name|NewString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|jchar
operator|*
argument_list|>
argument_list|(
name|text
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|env
operator|.
name|jniEnv
operator|->
name|CallStaticVoidMethod
argument_list|(
name|applicationClass
argument_list|()
argument_list|,
name|m_setClipboardTextMethodID
argument_list|,
name|jtext
argument_list|)
expr_stmt|;
name|env
operator|.
name|jniEnv
operator|->
name|DeleteLocalRef
argument_list|(
name|jtext
argument_list|)
expr_stmt|;
block|}
DECL|function|hasClipboardText
name|bool
name|hasClipboardText
parameter_list|()
block|{
name|AttachedJNIEnv
name|env
decl_stmt|;
if|if
condition|(
operator|!
name|env
operator|.
name|jniEnv
condition|)
return|return
literal|false
return|;
return|return
name|env
operator|.
name|jniEnv
operator|->
name|CallStaticBooleanMethod
argument_list|(
name|applicationClass
argument_list|()
argument_list|,
name|m_hasClipboardTextMethodID
argument_list|)
return|;
block|}
DECL|function|clipboardText
name|QString
name|clipboardText
parameter_list|()
block|{
name|AttachedJNIEnv
name|env
decl_stmt|;
if|if
condition|(
operator|!
name|env
operator|.
name|jniEnv
condition|)
return|return
name|QString
argument_list|()
return|;
name|jstring
name|text
init|=
cast|reinterpret_cast
argument_list|<
name|jstring
argument_list|>
argument_list|(
name|env
operator|.
name|jniEnv
operator|->
name|CallStaticObjectMethod
argument_list|(
name|applicationClass
argument_list|()
argument_list|,
name|m_getClipboardTextMethodID
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|jchar
modifier|*
name|jstr
init|=
name|env
operator|.
name|jniEnv
operator|->
name|GetStringChars
argument_list|(
name|text
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QString
name|str
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|jstr
argument_list|)
argument_list|,
name|env
operator|.
name|jniEnv
operator|->
name|GetStringLength
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|env
operator|.
name|jniEnv
operator|->
name|ReleaseStringChars
argument_list|(
name|text
argument_list|,
name|jstr
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
DECL|macro|GET_AND_CHECK_STATIC_METHOD
define|#
directive|define
name|GET_AND_CHECK_STATIC_METHOD
parameter_list|(
name|VAR
parameter_list|,
name|CLASS
parameter_list|,
name|METHOD_NAME
parameter_list|,
name|METHOD_SIGNATURE
parameter_list|)
define|\
value|VAR = env->GetStaticMethodID(CLASS, METHOD_NAME, METHOD_SIGNATURE); \     if (!VAR) { \         __android_log_print(ANDROID_LOG_FATAL, qtTagText(), methodErrorMsgFmt(), METHOD_NAME, METHOD_SIGNATURE); \         return false; \     }
DECL|function|registerNatives
name|bool
name|registerNatives
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
name|jclass
name|appClass
init|=
name|QtAndroid
operator|::
name|applicationClass
argument_list|()
decl_stmt|;
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|m_registerClipboardManagerMethodID
argument_list|,
name|appClass
argument_list|,
literal|"registerClipboardManager"
argument_list|,
literal|"()V"
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|m_setClipboardTextMethodID
argument_list|,
name|appClass
argument_list|,
literal|"setClipboardText"
argument_list|,
literal|"(Ljava/lang/String;)V"
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|m_hasClipboardTextMethodID
argument_list|,
name|appClass
argument_list|,
literal|"hasClipboardText"
argument_list|,
literal|"()Z"
argument_list|)
expr_stmt|;
name|GET_AND_CHECK_STATIC_METHOD
argument_list|(
name|m_getClipboardTextMethodID
argument_list|,
name|appClass
argument_list|,
literal|"getClipboardText"
argument_list|,
literal|"()Ljava/lang/String;"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_namespace
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
