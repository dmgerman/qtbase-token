begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"androidjniaccessibility.h"
end_include
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformintegration.h"
end_include
begin_include
include|#
directive|include
file|"qpa/qplatformaccessibility.h"
end_include
begin_include
include|#
directive|include
file|"qguiapplication.h"
end_include
begin_include
include|#
directive|include
file|"qwindow.h"
end_include
begin_include
include|#
directive|include
file|"qrect.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qaccessible.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_decl_stmt
DECL|variable|m_qtTag
specifier|static
specifier|const
name|char
name|m_qtTag
index|[]
init|=
literal|"Qt A11Y"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_classErrorMsg
specifier|static
specifier|const
name|char
name|m_classErrorMsg
index|[]
init|=
literal|"Can't find class \"%s\""
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_methodErrorMsg
specifier|static
specifier|const
name|char
name|m_methodErrorMsg
index|[]
init|=
literal|"Can't find method \"%s%s\""
decl_stmt|;
end_decl_stmt
begin_namespace
DECL|namespace|QtAndroidAccessibility
namespace|namespace
name|QtAndroidAccessibility
block|{
DECL|function|setActive
specifier|static
name|void
name|setActive
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jboolean
name|active
parameter_list|)
block|{
name|QAndroidPlatformIntegration
modifier|*
name|platformIntegration
init|=
name|QtAndroid
operator|::
name|androidPlatformIntegration
argument_list|()
decl_stmt|;
if|if
condition|(
name|platformIntegration
condition|)
name|platformIntegration
operator|->
name|accessibility
argument_list|()
operator|->
name|setActive
argument_list|(
name|active
argument_list|)
expr_stmt|;
else|else
name|__android_log_print
argument_list|(
name|ANDROID_LOG_WARN
argument_list|,
name|m_qtTag
argument_list|,
literal|"Could not activate platform accessibility."
argument_list|)
expr_stmt|;
block|}
DECL|function|interfaceFromId
name|QAccessibleInterface
modifier|*
name|interfaceFromId
parameter_list|(
name|jint
name|objectId
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|objectId
operator|==
operator|-
literal|1
condition|)
block|{
name|QWindow
modifier|*
name|win
init|=
name|qApp
operator|->
name|focusWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|win
condition|)
name|iface
operator|=
name|win
operator|->
name|accessibleRoot
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iface
operator|=
name|QAccessible
operator|::
name|accessibleInterface
argument_list|(
name|objectId
argument_list|)
expr_stmt|;
block|}
return|return
name|iface
return|;
block|}
DECL|function|childIdListForAccessibleObject
specifier|static
name|jintArray
name|childIdListForAccessibleObject
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|objectId
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|interfaceFromId
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|iface
condition|)
block|{
name|jintArray
name|jArray
init|=
name|env
operator|->
name|NewIntArray
argument_list|(
name|jsize
argument_list|(
name|iface
operator|->
name|childCount
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iface
operator|->
name|childCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAccessibleInterface
modifier|*
name|child
init|=
name|iface
operator|->
name|child
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
condition|)
block|{
name|QAccessible
operator|::
name|Id
name|ifaceId
init|=
name|QAccessible
operator|::
name|uniqueId
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|jint
name|jid
init|=
name|ifaceId
decl_stmt|;
name|env
operator|->
name|SetIntArrayRegion
argument_list|(
name|jArray
argument_list|,
name|i
argument_list|,
literal|1
argument_list|,
operator|&
name|jid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jArray
return|;
block|}
return|return
name|env
operator|->
name|NewIntArray
argument_list|(
name|jsize
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
DECL|function|parentId
specifier|static
name|jint
name|parentId
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|objectId
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|interfaceFromId
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|iface
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|parent
init|=
name|iface
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
condition|)
block|{
if|if
condition|(
name|parent
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|Application
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|QAccessible
operator|::
name|uniqueId
argument_list|(
name|parent
argument_list|)
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|function|screenRect
specifier|static
name|jobject
name|screenRect
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|objectId
parameter_list|)
block|{
name|QRect
name|rect
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|interfaceFromId
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|iface
operator|&&
name|iface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|rect
operator|=
name|iface
operator|->
name|rect
argument_list|()
expr_stmt|;
block|}
name|jclass
name|rectClass
init|=
name|env
operator|->
name|FindClass
argument_list|(
literal|"android/graphics/Rect"
argument_list|)
decl_stmt|;
name|jmethodID
name|ctor
init|=
name|env
operator|->
name|GetMethodID
argument_list|(
name|rectClass
argument_list|,
literal|"<init>"
argument_list|,
literal|"(IIII)V"
argument_list|)
decl_stmt|;
name|jobject
name|jrect
init|=
name|env
operator|->
name|NewObject
argument_list|(
name|rectClass
argument_list|,
name|ctor
argument_list|,
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|right
argument_list|()
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|jrect
return|;
block|}
DECL|function|hitTest
specifier|static
name|jint
name|hitTest
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jfloat
name|x
parameter_list|,
name|jfloat
name|y
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|root
init|=
name|interfaceFromId
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|child
init|=
name|root
operator|->
name|childAt
argument_list|(
operator|(
name|int
operator|)
name|x
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|lastChild
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|child
operator|&&
operator|(
name|child
operator|!=
name|lastChild
operator|)
condition|)
block|{
name|lastChild
operator|=
name|child
expr_stmt|;
name|child
operator|=
name|child
operator|->
name|childAt
argument_list|(
operator|(
name|int
operator|)
name|x
argument_list|,
operator|(
name|int
operator|)
name|y
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastChild
condition|)
return|return
name|QAccessible
operator|::
name|uniqueId
argument_list|(
name|lastChild
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|function|clickAction
specifier|static
name|jboolean
name|clickAction
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|objectId
parameter_list|)
block|{
comment|//        qDebug()<< "A11Y: CLICK: "<< objectId;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|interfaceFromId
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|iface
operator|&&
name|iface
operator|->
name|actionInterface
argument_list|()
condition|)
block|{
if|if
condition|(
name|iface
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
operator|.
name|contains
argument_list|(
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
condition|)
name|iface
operator|->
name|actionInterface
argument_list|()
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iface
operator|->
name|actionInterface
argument_list|()
operator|->
name|doAction
argument_list|(
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|macro|FIND_AND_CHECK_CLASS
define|#
directive|define
name|FIND_AND_CHECK_CLASS
parameter_list|(
name|CLASS_NAME
parameter_list|)
define|\
value|clazz = env->FindClass(CLASS_NAME); \ if (!clazz) { \     __android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_classErrorMsg, CLASS_NAME); \     return JNI_FALSE; \ }
comment|//__android_log_print(ANDROID_LOG_FATAL, m_qtTag, m_methodErrorMsg, METHOD_NAME, METHOD_SIGNATURE);
DECL|macro|CALL_METHOD
define|#
directive|define
name|CALL_METHOD
parameter_list|(
name|OBJECT
parameter_list|,
name|METHOD_NAME
parameter_list|,
name|METHOD_SIGNATURE
parameter_list|,
modifier|...
parameter_list|)
define|\
value|{ \     jclass clazz = env->GetObjectClass(OBJECT); \     jmethodID method = env->GetMethodID(clazz, METHOD_NAME, METHOD_SIGNATURE); \     if (!method) { \         __android_log_print(ANDROID_LOG_WARN, m_qtTag, m_methodErrorMsg, METHOD_NAME, METHOD_SIGNATURE); \         return false; \     } \     env->CallVoidMethod(OBJECT, method, __VA_ARGS__); \ }
DECL|function|descriptionForAccessibleObject
specifier|static
name|jstring
name|descriptionForAccessibleObject
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|objectId
parameter_list|)
block|{
name|QString
name|desc
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|interfaceFromId
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|iface
operator|&&
name|iface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|desc
operator|=
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|isEmpty
argument_list|()
condition|)
name|desc
operator|=
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Description
argument_list|)
expr_stmt|;
block|}
name|jstring
name|jdesc
init|=
name|env
operator|->
name|NewString
argument_list|(
operator|(
name|jchar
operator|*
operator|)
name|desc
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|jsize
operator|)
name|desc
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|jdesc
return|;
block|}
DECL|function|populateNode
specifier|static
name|bool
name|populateNode
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|objectId
parameter_list|,
name|jobject
name|node
parameter_list|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|interfaceFromId
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iface
operator|||
operator|!
name|iface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|__android_log_print
argument_list|(
name|ANDROID_LOG_WARN
argument_list|,
name|m_qtTag
argument_list|,
literal|"Accessibility: populateNode for Invalid ID"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QAccessible
operator|::
name|State
name|state
init|=
name|iface
operator|->
name|state
argument_list|()
decl_stmt|;
comment|// try to fill in the text property, this is what the screen reader reads
name|QString
name|desc
init|=
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Value
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|isEmpty
argument_list|()
condition|)
name|desc
operator|=
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|isEmpty
argument_list|()
condition|)
name|desc
operator|=
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Description
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAccessibleTextInterface
modifier|*
name|textIface
init|=
name|iface
operator|->
name|textInterface
argument_list|()
condition|)
block|{
if|if
condition|(
name|textIface
operator|->
name|selectionCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|startSelection
decl_stmt|;
name|int
name|endSelection
decl_stmt|;
name|textIface
operator|->
name|selection
argument_list|(
literal|0
argument_list|,
operator|&
name|startSelection
argument_list|,
operator|&
name|endSelection
argument_list|)
expr_stmt|;
name|CALL_METHOD
argument_list|(
argument|node
argument_list|,
literal|"setTextSelection"
argument_list|,
literal|"(II)V"
argument_list|,
argument|startSelection
argument_list|,
argument|endSelection
argument_list|)
block|}
block|}
name|CALL_METHOD
argument_list|(
argument|node
argument_list|,
literal|"setEnabled"
argument_list|,
literal|"(Z)V"
argument_list|,
argument|!state.disabled
argument_list|)
comment|//CALL_METHOD(node, "setFocusable", "(Z)V", state.focusable)
name|CALL_METHOD
argument_list|(
argument|node
argument_list|,
literal|"setFocusable"
argument_list|,
literal|"(Z)V"
argument_list|,
literal|true
argument_list|)
comment|//CALL_METHOD(node, "setFocused", "(Z)V", state.focused)
name|CALL_METHOD
argument_list|(
argument|node
argument_list|,
literal|"setCheckable"
argument_list|,
literal|"(Z)V"
argument_list|,
argument|state.checkable
argument_list|)
name|CALL_METHOD
argument_list|(
argument|node
argument_list|,
literal|"setChecked"
argument_list|,
literal|"(Z)V"
argument_list|,
argument|state.checked
argument_list|)
name|CALL_METHOD
argument_list|(
argument|node
argument_list|,
literal|"setVisibleToUser"
argument_list|,
literal|"(Z)V"
argument_list|,
argument|!state.invisible
argument_list|)
if|if
condition|(
name|iface
operator|->
name|actionInterface
argument_list|()
condition|)
block|{
name|QStringList
name|actions
init|=
name|iface
operator|->
name|actionInterface
argument_list|()
operator|->
name|actionNames
argument_list|()
decl_stmt|;
name|bool
name|clickable
init|=
name|actions
operator|.
name|contains
argument_list|(
name|QAccessibleActionInterface
operator|::
name|pressAction
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|toggle
init|=
name|actions
operator|.
name|contains
argument_list|(
name|QAccessibleActionInterface
operator|::
name|toggleAction
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clickable
operator|||
name|toggle
condition|)
block|{
name|CALL_METHOD
argument_list|(
argument|node
argument_list|,
literal|"setClickable"
argument_list|,
literal|"(Z)V"
argument_list|,
argument|clickable
argument_list|)
name|CALL_METHOD
argument_list|(
argument|node
argument_list|,
literal|"addAction"
argument_list|,
literal|"(I)V"
argument_list|,
literal|16
argument_list|)
comment|// ACTION_CLICK defined in AccessibilityNodeInfo
block|}
block|}
name|jstring
name|jdesc
init|=
name|env
operator|->
name|NewString
argument_list|(
operator|(
name|jchar
operator|*
operator|)
name|desc
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|jsize
operator|)
name|desc
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|//CALL_METHOD(node, "setText", "(Ljava/lang/CharSequence;)V", jdesc)
name|CALL_METHOD
argument_list|(
argument|node
argument_list|,
literal|"setContentDescription"
argument_list|,
literal|"(Ljava/lang/CharSequence;)V"
argument_list|,
argument|jdesc
argument_list|)
return|return
literal|true
return|;
block|}
DECL|member|methods
specifier|static
name|JNINativeMethod
name|methods
index|[]
init|=
block|{
block|{
literal|"setActive"
block|,
literal|"(Z)V"
block|,
operator|(
name|void
operator|*
operator|)
name|setActive
block|}
block|,
block|{
literal|"childIdListForAccessibleObject"
block|,
literal|"(I)[I"
block|,
operator|(
name|jintArray
operator|)
name|childIdListForAccessibleObject
block|}
block|,
block|{
literal|"parentId"
block|,
literal|"(I)I"
block|,
operator|(
name|void
operator|*
operator|)
name|parentId
block|}
block|,
block|{
literal|"descriptionForAccessibleObject"
block|,
literal|"(I)Ljava/lang/String;"
block|,
operator|(
name|jstring
operator|)
name|descriptionForAccessibleObject
block|}
block|,
block|{
literal|"screenRect"
block|,
literal|"(I)Landroid/graphics/Rect;"
block|,
operator|(
name|jobject
operator|)
name|screenRect
block|}
block|,
block|{
literal|"hitTest"
block|,
literal|"(FF)I"
block|,
operator|(
name|void
operator|*
operator|)
name|hitTest
block|}
block|,
block|{
literal|"populateNode"
block|,
literal|"(ILandroid/view/accessibility/AccessibilityNodeInfo;)Z"
block|,
operator|(
name|void
operator|*
operator|)
name|populateNode
block|}
block|,
block|{
literal|"clickAction"
block|,
literal|"(I)Z"
block|,
operator|(
name|void
operator|*
operator|)
name|clickAction
block|}
block|,     }
decl_stmt|;
DECL|function|registerNatives
name|bool
name|registerNatives
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|)
block|{
name|jclass
name|clazz
decl_stmt|;
name|FIND_AND_CHECK_CLASS
argument_list|(
literal|"org/qtproject/qt5/android/accessibility/QtNativeAccessibility"
argument_list|)
expr_stmt|;
name|jclass
name|appClass
init|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|clazz
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|env
operator|->
name|RegisterNatives
argument_list|(
name|appClass
argument_list|,
name|methods
argument_list|,
sizeof|sizeof
argument_list|(
name|methods
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|methods
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|__android_log_print
argument_list|(
name|ANDROID_LOG_FATAL
argument_list|,
literal|"Qt"
argument_list|,
literal|"RegisterNatives failed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_namespace
end_unit
