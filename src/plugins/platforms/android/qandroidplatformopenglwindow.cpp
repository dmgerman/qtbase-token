begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 BogDan Vatra<bogdan@kde.org> ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qandroidplatformopenglwindow.h"
end_include
begin_include
include|#
directive|include
file|"qandroidplatformscreen.h"
end_include
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_include
include|#
directive|include
file|"qandroideventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|"androiddeadlockprotector.h"
end_include
begin_include
include|#
directive|include
file|<QSurfaceFormat>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qwindow_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformscreen.h>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qeglconvenience_p.h>
end_include
begin_include
include|#
directive|include
file|<android/native_window.h>
end_include
begin_include
include|#
directive|include
file|<android/native_window_jni.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QAndroidPlatformOpenGLWindow
name|QAndroidPlatformOpenGLWindow
operator|::
name|QAndroidPlatformOpenGLWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|EGLDisplay
name|display
parameter_list|)
member_init_list|:
name|QAndroidPlatformWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_eglDisplay
argument_list|(
name|display
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QAndroidPlatformOpenGLWindow
name|QAndroidPlatformOpenGLWindow
operator|::
name|~
name|QAndroidPlatformOpenGLWindow
parameter_list|()
block|{
name|m_surfaceWaitCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|lockSurface
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_nativeSurfaceId
operator|!=
operator|-
literal|1
condition|)
name|QtAndroid
operator|::
name|destroySurface
argument_list|(
name|m_nativeSurfaceId
argument_list|)
expr_stmt|;
name|clearEgl
argument_list|()
expr_stmt|;
name|unlockSurface
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|repaint
name|void
name|QAndroidPlatformOpenGLWindow
operator|::
name|repaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
comment|// This is only for real raster top-level windows. Stop in all other cases.
if|if
condition|(
operator|(
name|window
argument_list|()
operator|->
name|surfaceType
argument_list|()
operator|==
name|QSurface
operator|::
name|RasterGLSurface
operator|&&
name|qt_window_private
argument_list|(
name|window
argument_list|()
argument_list|)
operator|->
name|compositing
operator|)
operator|||
name|window
argument_list|()
operator|->
name|surfaceType
argument_list|()
operator|==
name|QSurface
operator|::
name|OpenGLSurface
operator|||
name|QAndroidPlatformWindow
operator|::
name|parent
argument_list|()
condition|)
return|return;
name|QRect
name|currentGeometry
init|=
name|geometry
argument_list|()
decl_stmt|;
name|QRect
name|dirtyClient
init|=
name|region
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|QRect
name|dirtyRegion
argument_list|(
name|currentGeometry
operator|.
name|left
argument_list|()
operator|+
name|dirtyClient
operator|.
name|left
argument_list|()
argument_list|,
name|currentGeometry
operator|.
name|top
argument_list|()
operator|+
name|dirtyClient
operator|.
name|top
argument_list|()
argument_list|,
name|dirtyClient
operator|.
name|width
argument_list|()
argument_list|,
name|dirtyClient
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|mOldGeometryLocal
init|=
name|m_oldGeometry
decl_stmt|;
name|m_oldGeometry
operator|=
name|currentGeometry
expr_stmt|;
comment|// If this is a move, redraw the previous location
if|if
condition|(
name|mOldGeometryLocal
operator|!=
name|currentGeometry
condition|)
name|platformScreen
argument_list|()
operator|->
name|setDirty
argument_list|(
name|mOldGeometryLocal
argument_list|)
expr_stmt|;
name|platformScreen
argument_list|()
operator|->
name|setDirty
argument_list|(
name|dirtyRegion
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QAndroidPlatformOpenGLWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|rect
operator|==
name|geometry
argument_list|()
condition|)
return|return;
name|m_oldGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
name|QAndroidPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_nativeSurfaceId
operator|!=
operator|-
literal|1
condition|)
name|QtAndroid
operator|::
name|setSurfaceGeometry
argument_list|(
name|m_nativeSurfaceId
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|QRect
name|availableGeometry
init|=
name|screen
argument_list|()
operator|->
name|availableGeometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_oldGeometry
operator|.
name|width
argument_list|()
operator|==
literal|0
operator|&&
name|m_oldGeometry
operator|.
name|height
argument_list|()
operator|==
literal|0
operator|&&
name|rect
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|rect
operator|.
name|height
argument_list|()
operator|>
literal|0
operator|&&
name|availableGeometry
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|availableGeometry
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|!=
name|m_oldGeometry
operator|.
name|topLeft
argument_list|()
condition|)
name|repaint
argument_list|(
name|QRegion
argument_list|(
name|rect
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eglSurface
name|EGLSurface
name|QAndroidPlatformOpenGLWindow
operator|::
name|eglSurface
parameter_list|(
name|EGLConfig
name|config
parameter_list|)
block|{
if|if
condition|(
name|QAndroidEventDispatcherStopper
operator|::
name|stopped
argument_list|()
condition|)
return|return
name|m_eglSurface
return|;
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|m_surfaceMutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_nativeSurfaceId
operator|==
operator|-
literal|1
condition|)
block|{
name|AndroidDeadlockProtector
name|protector
decl_stmt|;
if|if
condition|(
operator|!
name|protector
operator|.
name|acquire
argument_list|()
condition|)
return|return
name|m_eglSurface
return|;
specifier|const
name|bool
name|windowStaysOnTop
init|=
name|bool
argument_list|(
name|window
argument_list|()
operator|->
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
decl_stmt|;
name|m_nativeSurfaceId
operator|=
name|QtAndroid
operator|::
name|createSurface
argument_list|(
name|this
argument_list|,
name|geometry
argument_list|()
argument_list|,
name|windowStaysOnTop
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|m_surfaceWaitCondition
operator|.
name|wait
argument_list|(
operator|&
name|m_surfaceMutex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_eglSurface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|m_surfaceMutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|checkNativeSurface
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|m_surfaceMutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
return|return
name|m_eglSurface
return|;
block|}
end_function
begin_function
DECL|function|checkNativeSurface
name|bool
name|QAndroidPlatformOpenGLWindow
operator|::
name|checkNativeSurface
parameter_list|(
name|EGLConfig
name|config
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|m_surfaceMutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_nativeSurfaceId
operator|==
operator|-
literal|1
operator|||
operator|!
name|m_androidSurfaceObject
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// makeCurrent is NOT needed.
name|createEgl
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// we've create another surface, the window should be repainted
name|QRect
name|availableGeometry
init|=
name|screen
argument_list|()
operator|->
name|availableGeometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
operator|>
literal|0
operator|&&
name|availableGeometry
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|availableGeometry
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRegion
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// makeCurrent is needed!
block|}
end_function
begin_function
DECL|function|applicationStateChanged
name|void
name|QAndroidPlatformOpenGLWindow
operator|::
name|applicationStateChanged
parameter_list|(
name|Qt
operator|::
name|ApplicationState
name|state
parameter_list|)
block|{
name|QAndroidPlatformWindow
operator|::
name|applicationStateChanged
argument_list|(
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|<=
name|Qt
operator|::
name|ApplicationHidden
condition|)
block|{
name|lockSurface
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_nativeSurfaceId
operator|!=
operator|-
literal|1
condition|)
block|{
name|QtAndroid
operator|::
name|destroySurface
argument_list|(
name|m_nativeSurfaceId
argument_list|)
expr_stmt|;
name|m_nativeSurfaceId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|clearEgl
argument_list|()
expr_stmt|;
name|unlockSurface
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createEgl
name|void
name|QAndroidPlatformOpenGLWindow
operator|::
name|createEgl
parameter_list|(
name|EGLConfig
name|config
parameter_list|)
block|{
name|clearEgl
argument_list|()
expr_stmt|;
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
name|m_nativeWindow
operator|=
name|ANativeWindow_fromSurface
argument_list|(
name|env
argument_list|,
name|m_androidSurfaceObject
operator|.
name|object
argument_list|()
argument_list|)
expr_stmt|;
name|m_androidSurfaceObject
operator|=
name|QJNIObjectPrivate
argument_list|()
expr_stmt|;
name|m_eglSurface
operator|=
name|eglCreateWindowSurface
argument_list|(
name|m_eglDisplay
argument_list|,
name|config
argument_list|,
name|m_nativeWindow
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|m_format
operator|=
name|q_glFormatFromConfig
argument_list|(
name|m_eglDisplay
argument_list|,
name|config
argument_list|,
name|window
argument_list|()
operator|->
name|requestedFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_eglSurface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|EGLint
name|error
init|=
name|eglGetError
argument_list|()
decl_stmt|;
name|eglTerminate
argument_list|(
name|m_eglDisplay
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"EGL Error : Could not create the egl surface: error = 0x%x\n"
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|format
name|QSurfaceFormat
name|QAndroidPlatformOpenGLWindow
operator|::
name|format
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_nativeWindow
operator|==
literal|0
condition|)
return|return
name|window
argument_list|()
operator|->
name|requestedFormat
argument_list|()
return|;
else|else
return|return
name|m_format
return|;
block|}
end_function
begin_function
DECL|function|clearEgl
name|void
name|QAndroidPlatformOpenGLWindow
operator|::
name|clearEgl
parameter_list|()
block|{
if|if
condition|(
name|m_eglSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
name|eglMakeCurrent
argument_list|(
name|m_eglDisplay
argument_list|,
name|EGL_NO_SURFACE
argument_list|,
name|EGL_NO_SURFACE
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
expr_stmt|;
name|eglDestroySurface
argument_list|(
name|m_eglDisplay
argument_list|,
name|m_eglSurface
argument_list|)
expr_stmt|;
name|m_eglSurface
operator|=
name|EGL_NO_SURFACE
expr_stmt|;
block|}
if|if
condition|(
name|m_nativeWindow
condition|)
block|{
name|ANativeWindow_release
argument_list|(
name|m_nativeWindow
argument_list|)
expr_stmt|;
name|m_nativeWindow
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|surfaceChanged
name|void
name|QAndroidPlatformOpenGLWindow
operator|::
name|surfaceChanged
parameter_list|(
name|JNIEnv
modifier|*
name|jniEnv
parameter_list|,
name|jobject
name|surface
parameter_list|,
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|jniEnv
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|lockSurface
argument_list|()
expr_stmt|;
name|m_androidSurfaceObject
operator|=
name|surface
expr_stmt|;
if|if
condition|(
name|surface
condition|)
comment|// wait until we have a valid surface to draw into
name|m_surfaceWaitCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|unlockSurface
argument_list|()
expr_stmt|;
if|if
condition|(
name|surface
condition|)
block|{
comment|// repaint the window, when we have a valid surface
name|QRect
name|availableGeometry
init|=
name|screen
argument_list|()
operator|->
name|availableGeometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
operator|>
literal|0
operator|&&
name|availableGeometry
operator|.
name|width
argument_list|()
operator|>
literal|0
operator|&&
name|availableGeometry
operator|.
name|height
argument_list|()
operator|>
literal|0
condition|)
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRegion
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|()
argument_list|,
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
