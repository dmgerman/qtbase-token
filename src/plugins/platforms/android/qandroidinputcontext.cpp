begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2012 BogDan Vatra<bogdan@kde.org> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<android/log.h>
end_include
begin_include
include|#
directive|include
file|"qandroidinputcontext.h"
end_include
begin_include
include|#
directive|include
file|"androidjnimain.h"
end_include
begin_include
include|#
directive|include
file|"androidjniinput.h"
end_include
begin_include
include|#
directive|include
file|"qandroideventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|"androiddeadlockprotector.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qguiapplication.h>
end_include
begin_include
include|#
directive|include
file|<qsharedpointer.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qinputmethod.h>
end_include
begin_include
include|#
directive|include
file|<qwindow.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qjni_p.h>
end_include
begin_include
include|#
directive|include
file|<QTextCharFormat>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|m_androidInputContext
specifier|static
name|QAndroidInputContext
modifier|*
name|m_androidInputContext
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QtNativeInputConnectionClassName
specifier|static
name|char
specifier|const
modifier|*
specifier|const
name|QtNativeInputConnectionClassName
init|=
literal|"org/qtproject/qt5/android/QtNativeInputConnection"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QtExtractedTextClassName
specifier|static
name|char
specifier|const
modifier|*
specifier|const
name|QtExtractedTextClassName
init|=
literal|"org/qtproject/qt5/android/QtExtractedText"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_extractedTextClass
specifier|static
name|jclass
name|m_extractedTextClass
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_classConstructorMethodID
specifier|static
name|jmethodID
name|m_classConstructorMethodID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_partialEndOffsetFieldID
specifier|static
name|jfieldID
name|m_partialEndOffsetFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_partialStartOffsetFieldID
specifier|static
name|jfieldID
name|m_partialStartOffsetFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_selectionEndFieldID
specifier|static
name|jfieldID
name|m_selectionEndFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_selectionStartFieldID
specifier|static
name|jfieldID
name|m_selectionStartFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_startOffsetFieldID
specifier|static
name|jfieldID
name|m_startOffsetFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|m_textFieldID
specifier|static
name|jfieldID
name|m_textFieldID
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|beginBatchEdit
specifier|static
name|jboolean
name|beginBatchEdit
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ BEGINBATCH"
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|beginBatchEdit
argument_list|()
return|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|endBatchEdit
specifier|static
name|jboolean
name|endBatchEdit
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ ENDBATCH"
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|endBatchEdit
argument_list|()
return|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|commitText
specifier|static
name|jboolean
name|commitText
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jstring
name|text
parameter_list|,
name|jint
name|newCursorPosition
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
name|jboolean
name|isCopy
decl_stmt|;
specifier|const
name|jchar
modifier|*
name|jstr
init|=
name|env
operator|->
name|GetStringChars
argument_list|(
name|text
argument_list|,
operator|&
name|isCopy
argument_list|)
decl_stmt|;
name|QString
name|str
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|jstr
argument_list|)
argument_list|,
name|env
operator|->
name|GetStringLength
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|env
operator|->
name|ReleaseStringChars
argument_list|(
name|text
argument_list|,
name|jstr
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ COMMIT"
operator|<<
name|str
operator|<<
name|newCursorPosition
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|commitText
argument_list|(
name|str
argument_list|,
name|newCursorPosition
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|deleteSurroundingText
specifier|static
name|jboolean
name|deleteSurroundingText
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|leftLength
parameter_list|,
name|jint
name|rightLength
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ DELETE"
operator|<<
name|leftLength
operator|<<
name|rightLength
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|deleteSurroundingText
argument_list|(
name|leftLength
argument_list|,
name|rightLength
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|finishComposingText
specifier|static
name|jboolean
name|finishComposingText
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ FINISH"
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|finishComposingText
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getCursorCapsMode
specifier|static
name|jint
name|getCursorCapsMode
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|reqModes
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
literal|0
return|;
return|return
name|m_androidInputContext
operator|->
name|getCursorCapsMode
argument_list|(
name|reqModes
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getExtractedText
specifier|static
name|jobject
name|getExtractedText
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|int
name|hintMaxChars
parameter_list|,
name|int
name|hintMaxLines
parameter_list|,
name|jint
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
literal|0
return|;
specifier|const
name|QAndroidInputContext
operator|::
name|ExtractedText
modifier|&
name|extractedText
init|=
name|m_androidInputContext
operator|->
name|getExtractedText
argument_list|(
name|hintMaxChars
argument_list|,
name|hintMaxLines
argument_list|,
name|flags
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ GETEX"
operator|<<
name|hintMaxChars
operator|<<
name|hintMaxLines
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"0x"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|flags
argument_list|,
literal|16
argument_list|)
operator|<<
name|extractedText
operator|.
name|text
operator|<<
literal|"partOff:"
operator|<<
name|extractedText
operator|.
name|partialStartOffset
operator|<<
name|extractedText
operator|.
name|partialEndOffset
operator|<<
literal|"sel:"
operator|<<
name|extractedText
operator|.
name|selectionStart
operator|<<
name|extractedText
operator|.
name|selectionEnd
operator|<<
literal|"offset:"
operator|<<
name|extractedText
operator|.
name|startOffset
expr_stmt|;
endif|#
directive|endif
name|jobject
name|object
init|=
name|env
operator|->
name|NewObject
argument_list|(
name|m_extractedTextClass
argument_list|,
name|m_classConstructorMethodID
argument_list|)
decl_stmt|;
name|env
operator|->
name|SetIntField
argument_list|(
name|object
argument_list|,
name|m_partialStartOffsetFieldID
argument_list|,
name|extractedText
operator|.
name|partialStartOffset
argument_list|)
expr_stmt|;
name|env
operator|->
name|SetIntField
argument_list|(
name|object
argument_list|,
name|m_partialEndOffsetFieldID
argument_list|,
name|extractedText
operator|.
name|partialEndOffset
argument_list|)
expr_stmt|;
name|env
operator|->
name|SetIntField
argument_list|(
name|object
argument_list|,
name|m_selectionStartFieldID
argument_list|,
name|extractedText
operator|.
name|selectionStart
argument_list|)
expr_stmt|;
name|env
operator|->
name|SetIntField
argument_list|(
name|object
argument_list|,
name|m_selectionEndFieldID
argument_list|,
name|extractedText
operator|.
name|selectionEnd
argument_list|)
expr_stmt|;
name|env
operator|->
name|SetIntField
argument_list|(
name|object
argument_list|,
name|m_startOffsetFieldID
argument_list|,
name|extractedText
operator|.
name|startOffset
argument_list|)
expr_stmt|;
name|env
operator|->
name|SetObjectField
argument_list|(
name|object
argument_list|,
name|m_textFieldID
argument_list|,
name|env
operator|->
name|NewString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|jchar
operator|*
argument_list|>
argument_list|(
name|extractedText
operator|.
name|text
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|jsize
argument_list|(
name|extractedText
operator|.
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
end_function
begin_function
DECL|function|getSelectedText
specifier|static
name|jstring
name|getSelectedText
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
literal|0
return|;
specifier|const
name|QString
modifier|&
name|text
init|=
name|m_androidInputContext
operator|->
name|getSelectedText
argument_list|(
name|flags
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ GETSEL"
operator|<<
name|text
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|env
operator|->
name|NewString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|jchar
operator|*
argument_list|>
argument_list|(
name|text
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|jsize
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getTextAfterCursor
specifier|static
name|jstring
name|getTextAfterCursor
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|length
parameter_list|,
name|jint
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
literal|0
return|;
specifier|const
name|QString
modifier|&
name|text
init|=
name|m_androidInputContext
operator|->
name|getTextAfterCursor
argument_list|(
name|length
argument_list|,
name|flags
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ GETA"
operator|<<
name|length
operator|<<
name|text
expr_stmt|;
endif|#
directive|endif
return|return
name|env
operator|->
name|NewString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|jchar
operator|*
argument_list|>
argument_list|(
name|text
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|jsize
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getTextBeforeCursor
specifier|static
name|jstring
name|getTextBeforeCursor
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|length
parameter_list|,
name|jint
name|flags
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
literal|0
return|;
specifier|const
name|QString
modifier|&
name|text
init|=
name|m_androidInputContext
operator|->
name|getTextBeforeCursor
argument_list|(
name|length
argument_list|,
name|flags
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ GETB"
operator|<<
name|length
operator|<<
name|text
expr_stmt|;
endif|#
directive|endif
return|return
name|env
operator|->
name|NewString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|jchar
operator|*
argument_list|>
argument_list|(
name|text
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|jsize
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setComposingText
specifier|static
name|jboolean
name|setComposingText
parameter_list|(
name|JNIEnv
modifier|*
name|env
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jstring
name|text
parameter_list|,
name|jint
name|newCursorPosition
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
name|jboolean
name|isCopy
decl_stmt|;
specifier|const
name|jchar
modifier|*
name|jstr
init|=
name|env
operator|->
name|GetStringChars
argument_list|(
name|text
argument_list|,
operator|&
name|isCopy
argument_list|)
decl_stmt|;
name|QString
name|str
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|jstr
argument_list|)
argument_list|,
name|env
operator|->
name|GetStringLength
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|env
operator|->
name|ReleaseStringChars
argument_list|(
name|text
argument_list|,
name|jstr
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ SET"
operator|<<
name|str
operator|<<
name|newCursorPosition
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|setComposingText
argument_list|(
name|str
argument_list|,
name|newCursorPosition
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setComposingRegion
specifier|static
name|jboolean
name|setComposingRegion
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|start
parameter_list|,
name|jint
name|end
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ SETR"
operator|<<
name|start
operator|<<
name|end
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|setComposingRegion
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setSelection
specifier|static
name|jboolean
name|setSelection
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|,
name|jint
name|start
parameter_list|,
name|jint
name|end
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ SETSEL"
operator|<<
name|start
operator|<<
name|end
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|setSelection
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selectAll
specifier|static
name|jboolean
name|selectAll
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ SELALL"
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|selectAll
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|cut
specifier|static
name|jboolean
name|cut
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@"
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|cut
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|copy
specifier|static
name|jboolean
name|copy
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@"
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|copy
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|copyURL
specifier|static
name|jboolean
name|copyURL
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@"
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|copyURL
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|paste
specifier|static
name|jboolean
name|paste
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@"
expr_stmt|;
endif|#
directive|endif
return|return
name|m_androidInputContext
operator|->
name|paste
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|updateCursorPosition
specifier|static
name|jboolean
name|updateCursorPosition
parameter_list|(
name|JNIEnv
modifier|*
comment|/*env*/
parameter_list|,
name|jobject
comment|/*thiz*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_androidInputContext
condition|)
return|return
name|JNI_FALSE
return|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|qDebug
argument_list|()
operator|<<
literal|"@@@ UPDATECURSORPOS"
expr_stmt|;
endif|#
directive|endif
name|m_androidInputContext
operator|->
name|updateCursorPosition
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|methods
specifier|static
name|JNINativeMethod
name|methods
index|[]
init|=
block|{
block|{
literal|"beginBatchEdit"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|beginBatchEdit
block|}
block|,
block|{
literal|"endBatchEdit"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|endBatchEdit
block|}
block|,
block|{
literal|"commitText"
block|,
literal|"(Ljava/lang/String;I)Z"
block|,
operator|(
name|void
operator|*
operator|)
name|commitText
block|}
block|,
block|{
literal|"deleteSurroundingText"
block|,
literal|"(II)Z"
block|,
operator|(
name|void
operator|*
operator|)
name|deleteSurroundingText
block|}
block|,
block|{
literal|"finishComposingText"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|finishComposingText
block|}
block|,
block|{
literal|"getCursorCapsMode"
block|,
literal|"(I)I"
block|,
operator|(
name|void
operator|*
operator|)
name|getCursorCapsMode
block|}
block|,
block|{
literal|"getExtractedText"
block|,
literal|"(III)Lorg/qtproject/qt5/android/QtExtractedText;"
block|,
operator|(
name|void
operator|*
operator|)
name|getExtractedText
block|}
block|,
block|{
literal|"getSelectedText"
block|,
literal|"(I)Ljava/lang/String;"
block|,
operator|(
name|void
operator|*
operator|)
name|getSelectedText
block|}
block|,
block|{
literal|"getTextAfterCursor"
block|,
literal|"(II)Ljava/lang/String;"
block|,
operator|(
name|void
operator|*
operator|)
name|getTextAfterCursor
block|}
block|,
block|{
literal|"getTextBeforeCursor"
block|,
literal|"(II)Ljava/lang/String;"
block|,
operator|(
name|void
operator|*
operator|)
name|getTextBeforeCursor
block|}
block|,
block|{
literal|"setComposingText"
block|,
literal|"(Ljava/lang/String;I)Z"
block|,
operator|(
name|void
operator|*
operator|)
name|setComposingText
block|}
block|,
block|{
literal|"setComposingRegion"
block|,
literal|"(II)Z"
block|,
operator|(
name|void
operator|*
operator|)
name|setComposingRegion
block|}
block|,
block|{
literal|"setSelection"
block|,
literal|"(II)Z"
block|,
operator|(
name|void
operator|*
operator|)
name|setSelection
block|}
block|,
block|{
literal|"selectAll"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|selectAll
block|}
block|,
block|{
literal|"cut"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|cut
block|}
block|,
block|{
literal|"copy"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|copy
block|}
block|,
block|{
literal|"copyURL"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|copyURL
block|}
block|,
block|{
literal|"paste"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|paste
block|}
block|,
block|{
literal|"updateCursorPosition"
block|,
literal|"()Z"
block|,
operator|(
name|void
operator|*
operator|)
name|updateCursorPosition
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QAndroidInputContext
name|QAndroidInputContext
operator|::
name|QAndroidInputContext
parameter_list|()
member_init_list|:
name|QPlatformInputContext
argument_list|()
member_init_list|,
name|m_composingTextStart
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_blockUpdateSelection
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_batchEditNestingLevel
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_focusObject
argument_list|(
literal|0
argument_list|)
block|{
name|jclass
name|clazz
init|=
name|QJNIEnvironmentPrivate
operator|::
name|findClass
argument_list|(
name|QtNativeInputConnectionClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Native registration unable to find class '"
operator|<<
name|QtNativeInputConnectionClassName
operator|<<
literal|"'"
expr_stmt|;
return|return;
block|}
name|QJNIEnvironmentPrivate
name|env
decl_stmt|;
if|if
condition|(
name|env
operator|->
name|RegisterNatives
argument_list|(
name|clazz
argument_list|,
name|methods
argument_list|,
sizeof|sizeof
argument_list|(
name|methods
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|methods
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"RegisterNatives failed for '"
operator|<<
name|QtNativeInputConnectionClassName
operator|<<
literal|"'"
expr_stmt|;
return|return;
block|}
name|clazz
operator|=
name|QJNIEnvironmentPrivate
operator|::
name|findClass
argument_list|(
name|QtExtractedTextClassName
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Native registration unable to find class '"
operator|<<
name|QtExtractedTextClassName
operator|<<
literal|"'"
expr_stmt|;
return|return;
block|}
name|m_extractedTextClass
operator|=
cast|static_cast
argument_list|<
name|jclass
argument_list|>
argument_list|(
name|env
operator|->
name|NewGlobalRef
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|m_classConstructorMethodID
operator|=
name|env
operator|->
name|GetMethodID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"<init>"
argument_list|,
literal|"()V"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_classConstructorMethodID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"GetMethodID failed"
expr_stmt|;
return|return;
block|}
name|m_partialEndOffsetFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"partialEndOffset"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_partialEndOffsetFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field partialEndOffset"
expr_stmt|;
return|return;
block|}
name|m_partialStartOffsetFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"partialStartOffset"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_partialStartOffsetFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field partialStartOffset"
expr_stmt|;
return|return;
block|}
name|m_selectionEndFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"selectionEnd"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_selectionEndFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field selectionEnd"
expr_stmt|;
return|return;
block|}
name|m_selectionStartFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"selectionStart"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_selectionStartFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field selectionStart"
expr_stmt|;
return|return;
block|}
name|m_startOffsetFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"startOffset"
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_startOffsetFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field startOffset"
expr_stmt|;
return|return;
block|}
name|m_textFieldID
operator|=
name|env
operator|->
name|GetFieldID
argument_list|(
name|m_extractedTextClass
argument_list|,
literal|"text"
argument_list|,
literal|"Ljava/lang/String;"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_textFieldID
operator|==
name|NULL
condition|)
block|{
name|qCritical
argument_list|()
operator|<<
literal|"Can't find field text"
expr_stmt|;
return|return;
block|}
name|qRegisterMetaType
argument_list|<
name|QInputMethodEvent
operator|*
argument_list|>
argument_list|(
literal|"QInputMethodEvent*"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QInputMethodQueryEvent
operator|*
argument_list|>
argument_list|(
literal|"QInputMethodQueryEvent*"
argument_list|)
expr_stmt|;
name|m_androidInputContext
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QAndroidInputContext
name|QAndroidInputContext
operator|::
name|~
name|QAndroidInputContext
parameter_list|()
block|{
name|m_androidInputContext
operator|=
literal|0
expr_stmt|;
name|m_extractedTextClass
operator|=
literal|0
expr_stmt|;
name|m_partialEndOffsetFieldID
operator|=
literal|0
expr_stmt|;
name|m_partialStartOffsetFieldID
operator|=
literal|0
expr_stmt|;
name|m_selectionEndFieldID
operator|=
literal|0
expr_stmt|;
name|m_selectionStartFieldID
operator|=
literal|0
expr_stmt|;
name|m_startOffsetFieldID
operator|=
literal|0
expr_stmt|;
name|m_textFieldID
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|androidInputContext
name|QAndroidInputContext
modifier|*
name|QAndroidInputContext
operator|::
name|androidInputContext
parameter_list|()
block|{
return|return
name|m_androidInputContext
return|;
block|}
end_function
begin_comment
comment|// cursor position getter that also works with editors that have not been updated to the new API
end_comment
begin_function
DECL|function|getAbsoluteCursorPosition
specifier|static
specifier|inline
name|int
name|getAbsoluteCursorPosition
parameter_list|(
specifier|const
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
modifier|&
name|query
parameter_list|)
block|{
name|QVariant
name|absolutePos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImAbsolutePosition
argument_list|)
decl_stmt|;
return|return
name|absolutePos
operator|.
name|isValid
argument_list|()
condition|?
name|absolutePos
operator|.
name|toInt
argument_list|()
else|:
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// position of the start of the current block
end_comment
begin_function
DECL|function|getBlockPosition
specifier|static
specifier|inline
name|int
name|getBlockPosition
parameter_list|(
specifier|const
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
modifier|&
name|query
parameter_list|)
block|{
name|QVariant
name|absolutePos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImAbsolutePosition
argument_list|)
decl_stmt|;
return|return
name|absolutePos
operator|.
name|isValid
argument_list|()
condition|?
name|absolutePos
operator|.
name|toInt
argument_list|()
operator|-
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QAndroidInputContext
operator|::
name|reset
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
name|m_batchEditNestingLevel
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|qGuiApp
operator|->
name|focusObject
argument_list|()
condition|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|(
name|Qt
operator|::
name|ImEnabled
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isNull
argument_list|()
operator|&&
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImEnabled
argument_list|)
operator|.
name|toBool
argument_list|()
condition|)
block|{
name|QtAndroidInput
operator|::
name|resetSoftwareKeyboard
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|QtAndroidInput
operator|::
name|hideSoftwareKeyboard
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|commit
name|void
name|QAndroidInputContext
operator|::
name|commit
parameter_list|()
block|{
name|finishComposingText
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateCursorPosition
name|void
name|QAndroidInputContext
operator|::
name|updateCursorPosition
parameter_list|()
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|m_blockUpdateSelection
operator|&&
operator|!
name|m_batchEditNestingLevel
condition|)
block|{
specifier|const
name|int
name|cursorPos
init|=
name|getAbsoluteCursorPosition
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|const
name|int
name|composeLength
init|=
name|m_composingText
operator|.
name|length
argument_list|()
decl_stmt|;
comment|//Q_ASSERT(m_composingText.isEmpty() == (m_composingTextStart == -1));
if|if
condition|(
name|m_composingText
operator|.
name|isEmpty
argument_list|()
operator|!=
operator|(
name|m_composingTextStart
operator|==
operator|-
literal|1
operator|)
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"Input method out of sync"
operator|<<
name|m_composingText
operator|<<
name|m_composingTextStart
expr_stmt|;
name|int
name|realCursorPosition
init|=
name|cursorPos
decl_stmt|;
name|int
name|realAnchorPosition
init|=
name|cursorPos
decl_stmt|;
name|int
name|cpos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|anchor
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImAnchorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|cpos
operator|!=
name|anchor
condition|)
block|{
if|if
condition|(
operator|!
name|m_composingText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Selecting text while preediting may give unpredictable results."
argument_list|)
expr_stmt|;
name|finishComposingText
argument_list|()
expr_stmt|;
block|}
name|int
name|blockPos
init|=
name|getBlockPosition
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|realCursorPosition
operator|=
name|blockPos
operator|+
name|cpos
expr_stmt|;
name|realAnchorPosition
operator|=
name|blockPos
operator|+
name|anchor
expr_stmt|;
block|}
comment|// Qt's idea of the cursor position is the start of the preedit area, so we maintain our own preedit cursor pos
if|if
condition|(
operator|!
name|m_composingText
operator|.
name|isEmpty
argument_list|()
condition|)
name|realCursorPosition
operator|=
name|realAnchorPosition
operator|=
name|m_composingCursor
expr_stmt|;
name|QtAndroidInput
operator|::
name|updateSelection
argument_list|(
name|realCursorPosition
argument_list|,
name|realAnchorPosition
argument_list|,
name|m_composingTextStart
argument_list|,
name|m_composingTextStart
operator|+
name|composeLength
argument_list|)
expr_stmt|;
comment|// pre-edit text
block|}
block|}
end_function
begin_function
DECL|function|update
name|void
name|QAndroidInputContext
operator|::
name|update
parameter_list|(
name|Qt
operator|::
name|InputMethodQueries
name|queries
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|(
name|queries
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return;
warning|#
directive|warning
warning|TODO extract the needed data from query
block|}
end_function
begin_function
DECL|function|invokeAction
name|void
name|QAndroidInputContext
operator|::
name|invokeAction
parameter_list|(
name|QInputMethod
operator|::
name|Action
name|action
parameter_list|,
name|int
name|cursorPosition
parameter_list|)
block|{
warning|#
directive|warning
warning|TODO Handle at least QInputMethod::ContextMenu action
name|Q_UNUSED
argument_list|(
argument|action
argument_list|)
name|Q_UNUSED
argument_list|(
argument|cursorPosition
argument_list|)
comment|//### click should be passed to the IM, but in the meantime it's better to ignore it than to do something wrong
comment|// if (action == QInputMethod::Click)
comment|//     commit();
block|}
end_function
begin_function
DECL|function|keyboardRect
name|QRectF
name|QAndroidInputContext
operator|::
name|keyboardRect
parameter_list|()
specifier|const
block|{
return|return
name|QPlatformInputContext
operator|::
name|keyboardRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isAnimating
name|bool
name|QAndroidInputContext
operator|::
name|isAnimating
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|showInputPanel
name|void
name|QAndroidInputContext
operator|::
name|showInputPanel
parameter_list|()
block|{
if|if
condition|(
name|QGuiApplication
operator|::
name|applicationState
argument_list|()
operator|!=
name|Qt
operator|::
name|ApplicationActive
condition|)
block|{
name|connect
argument_list|(
name|qGuiApp
argument_list|,
name|SIGNAL
argument_list|(
name|applicationStateChanged
argument_list|(
name|Qt
operator|::
name|ApplicationState
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showInputPanelLater
argument_list|(
name|Qt
operator|::
name|ApplicationState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|disconnect
argument_list|(
name|m_updateCursorPosConnection
argument_list|)
expr_stmt|;
if|if
condition|(
name|qGuiApp
operator|->
name|focusObject
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|indexOfSignal
argument_list|(
literal|"cursorPositionChanged(int,int)"
argument_list|)
operator|>=
literal|0
condition|)
comment|// QLineEdit breaks the pattern
name|m_updateCursorPosConnection
operator|=
name|connect
argument_list|(
name|qGuiApp
operator|->
name|focusObject
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateCursorPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|m_updateCursorPosConnection
operator|=
name|connect
argument_list|(
name|qGuiApp
operator|->
name|focusObject
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateCursorPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QRectF
name|itemRect
init|=
name|qGuiApp
operator|->
name|inputMethod
argument_list|()
operator|->
name|inputItemRectangle
argument_list|()
decl_stmt|;
name|QRect
name|rect
init|=
name|qGuiApp
operator|->
name|inputMethod
argument_list|()
operator|->
name|inputItemTransform
argument_list|()
operator|.
name|mapRect
argument_list|(
name|itemRect
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|QWindow
modifier|*
name|window
init|=
name|qGuiApp
operator|->
name|focusWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|window
condition|)
name|rect
operator|=
name|QRect
argument_list|(
name|window
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QtAndroidInput
operator|::
name|showSoftwareKeyboard
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|,
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImHints
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showInputPanelLater
name|void
name|QAndroidInputContext
operator|::
name|showInputPanelLater
parameter_list|(
name|Qt
operator|::
name|ApplicationState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|!=
name|Qt
operator|::
name|ApplicationActive
condition|)
return|return;
name|disconnect
argument_list|(
name|qGuiApp
argument_list|,
name|SIGNAL
argument_list|(
name|applicationStateChanged
argument_list|(
name|Qt
operator|::
name|ApplicationState
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showInputPanelLater
argument_list|(
name|Qt
operator|::
name|ApplicationState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|showInputPanel
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideInputPanel
name|void
name|QAndroidInputContext
operator|::
name|hideInputPanel
parameter_list|()
block|{
name|QtAndroidInput
operator|::
name|hideSoftwareKeyboard
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isInputPanelVisible
name|bool
name|QAndroidInputContext
operator|::
name|isInputPanelVisible
parameter_list|()
specifier|const
block|{
return|return
name|QtAndroidInput
operator|::
name|isSoftwareKeyboardVisible
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isComposing
name|bool
name|QAndroidInputContext
operator|::
name|isComposing
parameter_list|()
specifier|const
block|{
return|return
name|m_composingText
operator|.
name|length
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QAndroidInputContext
operator|::
name|clear
parameter_list|()
block|{
name|m_composingText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_composingTextStart
operator|=
operator|-
literal|1
expr_stmt|;
name|m_extractedText
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFocusObject
name|void
name|QAndroidInputContext
operator|::
name|setFocusObject
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|!=
name|m_focusObject
condition|)
block|{
name|m_focusObject
operator|=
name|object
expr_stmt|;
if|if
condition|(
operator|!
name|m_composingText
operator|.
name|isEmpty
argument_list|()
condition|)
name|finishComposingText
argument_list|()
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
name|QPlatformInputContext
operator|::
name|setFocusObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginBatchEdit
name|jboolean
name|QAndroidInputContext
operator|::
name|beginBatchEdit
parameter_list|()
block|{
operator|++
name|m_batchEditNestingLevel
expr_stmt|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|endBatchEdit
name|jboolean
name|QAndroidInputContext
operator|::
name|endBatchEdit
parameter_list|()
block|{
if|if
condition|(
operator|--
name|m_batchEditNestingLevel
operator|==
literal|0
operator|&&
operator|!
name|m_blockUpdateSelection
condition|)
comment|//ending batch edit mode
name|updateCursorPosition
argument_list|()
expr_stmt|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_comment
comment|/*   Android docs say: If composing, replace compose text with \a text.   Otherwise insert \a text at current cursor position.    The cursor should then be moved to newCursorPosition. If> 0, this is   relative to the end of the text - 1; if<= 0, this is relative to the start   of the text. updateSelection() needs to be called. */
end_comment
begin_function
DECL|function|commitText
name|jboolean
name|QAndroidInputContext
operator|::
name|commitText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|jint
name|newCursorPosition
parameter_list|)
block|{
name|bool
name|updateSelectionWasBlocked
init|=
name|m_blockUpdateSelection
decl_stmt|;
name|m_blockUpdateSelection
operator|=
literal|true
expr_stmt|;
name|QInputMethodEvent
name|event
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|sendInputMethodEventThreadSafe
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
comment|// Qt has now put the cursor at the end of the text, corresponding to newCursorPosition == 1
if|if
condition|(
name|newCursorPosition
operator|!=
literal|1
condition|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
specifier|const
name|int
name|localPos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
specifier|const
name|int
name|newLocalPos
init|=
name|newCursorPosition
operator|>
literal|0
condition|?
name|localPos
operator|+
name|newCursorPosition
operator|-
literal|1
else|:
name|localPos
operator|-
name|text
operator|.
name|length
argument_list|()
operator|+
name|newCursorPosition
decl_stmt|;
comment|//move the cursor
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Selection
argument_list|,
name|newLocalPos
argument_list|,
literal|0
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|m_blockUpdateSelection
operator|=
name|updateSelectionWasBlocked
expr_stmt|;
name|updateCursorPosition
argument_list|()
expr_stmt|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|deleteSurroundingText
name|jboolean
name|QAndroidInputContext
operator|::
name|deleteSurroundingText
parameter_list|(
name|jint
name|leftLength
parameter_list|,
name|jint
name|rightLength
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|JNI_TRUE
return|;
name|m_composingText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_composingTextStart
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|leftLength
operator|<
literal|0
condition|)
block|{
name|rightLength
operator|+=
operator|-
name|leftLength
expr_stmt|;
name|leftLength
operator|=
literal|0
expr_stmt|;
block|}
name|QInputMethodEvent
name|event
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|QString
argument_list|()
argument_list|,
operator|-
name|leftLength
argument_list|,
name|leftLength
operator|+
name|rightLength
argument_list|)
expr_stmt|;
name|sendInputMethodEventThreadSafe
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_comment
comment|// Android docs say the cursor must not move
end_comment
begin_function
DECL|function|finishComposingText
name|jboolean
name|QAndroidInputContext
operator|::
name|finishComposingText
parameter_list|()
block|{
if|if
condition|(
name|m_composingText
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|JNI_TRUE
return|;
comment|// not composing
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|JNI_FALSE
return|;
specifier|const
name|int
name|blockPos
init|=
name|getBlockPosition
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|const
name|int
name|localCursorPos
init|=
name|m_composingCursor
operator|-
name|blockPos
decl_stmt|;
comment|// Moving Qt's cursor to where the preedit cursor used to be
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Selection
argument_list|,
name|localCursorPos
argument_list|,
literal|0
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|QString
argument_list|()
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|m_composingText
argument_list|)
expr_stmt|;
name|sendInputMethodEventThreadSafe
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|getCursorCapsMode
name|jint
name|QAndroidInputContext
operator|::
name|getCursorCapsMode
parameter_list|(
name|jint
comment|/*reqModes*/
parameter_list|)
block|{
name|jint
name|res
init|=
literal|0
decl_stmt|;
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|res
return|;
specifier|const
name|uint
name|qtInputMethodHints
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImHints
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|qtInputMethodHints
operator|&
name|Qt
operator|::
name|ImhPreferUppercase
condition|)
name|res
operator|=
name|CAP_MODE_SENTENCES
expr_stmt|;
if|if
condition|(
name|qtInputMethodHints
operator|&
name|Qt
operator|::
name|ImhUppercaseOnly
condition|)
name|res
operator|=
name|CAP_MODE_CHARACTERS
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|getExtractedText
specifier|const
name|QAndroidInputContext
operator|::
name|ExtractedText
modifier|&
name|QAndroidInputContext
operator|::
name|getExtractedText
parameter_list|(
name|jint
comment|/*hintMaxChars*/
parameter_list|,
name|jint
comment|/*hintMaxLines*/
parameter_list|,
name|jint
comment|/*flags*/
parameter_list|)
block|{
comment|// Note to self: "if the GET_EXTRACTED_TEXT_MONITOR flag is set, you should be calling
comment|// updateExtractedText(View, int, ExtractedText) whenever you call
comment|// updateSelection(View, int, int, int, int)."  QTBUG-37980
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|m_extractedText
return|;
name|int
name|localPos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
comment|//position before pre-edit text relative to the current block
name|int
name|blockPos
init|=
name|getBlockPosition
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QString
name|blockText
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|composeLength
init|=
name|m_composingText
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|composeLength
operator|>
literal|0
condition|)
block|{
comment|//Qt doesn't give us the preedit text, so we have to insert it at the correct position
name|int
name|localComposePos
init|=
name|m_composingTextStart
operator|-
name|blockPos
decl_stmt|;
name|blockText
operator|=
name|blockText
operator|.
name|left
argument_list|(
name|localComposePos
argument_list|)
operator|+
name|m_composingText
operator|+
name|blockText
operator|.
name|mid
argument_list|(
name|localComposePos
argument_list|)
expr_stmt|;
block|}
name|int
name|cpos
init|=
name|localPos
operator|+
name|composeLength
decl_stmt|;
comment|//actual cursor pos relative to the current block
name|int
name|localOffset
init|=
literal|0
decl_stmt|;
comment|// start of extracted text relative to the current block
comment|// It is documented that we should try to return hintMaxChars
comment|// characters, but that's not what the standard Android controls do, and
comment|// there are input methods out there that (surprise) seem to depend on
comment|// what happens in reality rather than what's documented.
name|m_extractedText
operator|.
name|text
operator|=
name|blockText
expr_stmt|;
name|m_extractedText
operator|.
name|startOffset
operator|=
name|blockPos
operator|+
name|localOffset
expr_stmt|;
specifier|const
name|QString
modifier|&
name|selection
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|const
name|int
name|selLen
init|=
name|selection
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|selLen
condition|)
block|{
name|m_extractedText
operator|.
name|selectionStart
operator|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImAnchorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
operator|-
name|localOffset
expr_stmt|;
name|m_extractedText
operator|.
name|selectionEnd
operator|=
name|m_extractedText
operator|.
name|selectionStart
operator|+
name|selLen
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|composeLength
operator|>
literal|0
condition|)
block|{
name|m_extractedText
operator|.
name|selectionStart
operator|=
name|m_composingCursor
operator|-
name|m_extractedText
operator|.
name|startOffset
expr_stmt|;
name|m_extractedText
operator|.
name|selectionEnd
operator|=
name|m_composingCursor
operator|-
name|m_extractedText
operator|.
name|startOffset
expr_stmt|;
block|}
else|else
block|{
name|m_extractedText
operator|.
name|selectionStart
operator|=
name|cpos
operator|-
name|localOffset
expr_stmt|;
name|m_extractedText
operator|.
name|selectionEnd
operator|=
name|cpos
operator|-
name|localOffset
expr_stmt|;
block|}
return|return
name|m_extractedText
return|;
block|}
end_function
begin_function
DECL|function|getSelectedText
name|QString
name|QAndroidInputContext
operator|::
name|getSelectedText
parameter_list|(
name|jint
comment|/*flags*/
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getTextAfterCursor
name|QString
name|QAndroidInputContext
operator|::
name|getTextAfterCursor
parameter_list|(
name|jint
name|length
parameter_list|,
name|jint
comment|/*flags*/
parameter_list|)
block|{
comment|//### the preedit text could theoretically be after the cursor
name|QVariant
name|textAfter
init|=
name|queryFocusObjectThreadSafe
argument_list|(
name|Qt
operator|::
name|ImTextAfterCursor
argument_list|,
name|QVariant
argument_list|(
name|length
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|textAfter
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|textAfter
operator|.
name|toString
argument_list|()
operator|.
name|left
argument_list|(
name|length
argument_list|)
return|;
block|}
comment|//compatibility code for old controls that do not implement the new API
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|text
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|length
argument_list|()
condition|)
return|return
name|text
return|;
name|int
name|cursorPos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
return|return
name|text
operator|.
name|mid
argument_list|(
name|cursorPos
argument_list|,
name|length
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getTextBeforeCursor
name|QString
name|QAndroidInputContext
operator|::
name|getTextBeforeCursor
parameter_list|(
name|jint
name|length
parameter_list|,
name|jint
comment|/*flags*/
parameter_list|)
block|{
name|QVariant
name|textBefore
init|=
name|queryFocusObjectThreadSafe
argument_list|(
name|Qt
operator|::
name|ImTextBeforeCursor
argument_list|,
name|QVariant
argument_list|(
name|length
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|textBefore
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|textBefore
operator|.
name|toString
argument_list|()
operator|.
name|right
argument_list|(
name|length
argument_list|)
operator|+
name|m_composingText
return|;
block|}
comment|//compatibility code for old controls that do not implement the new API
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|int
name|cursorPos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QString
name|text
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|length
argument_list|()
condition|)
return|return
name|text
return|;
comment|//### the preedit text does not need to be immediately before the cursor
if|if
condition|(
name|cursorPos
operator|<=
name|length
condition|)
return|return
name|text
operator|.
name|left
argument_list|(
name|cursorPos
argument_list|)
operator|+
name|m_composingText
return|;
else|else
return|return
name|text
operator|.
name|mid
argument_list|(
name|cursorPos
operator|-
name|length
argument_list|,
name|length
argument_list|)
operator|+
name|m_composingText
return|;
block|}
end_function
begin_comment
comment|/*   Android docs say that this function should remove the current preedit text   if any, and replace it with the given text. Any selected text should be   removed. The cursor is then moved to newCursorPosition. If> 0, this is   relative to the end of the text - 1; if<= 0, this is relative to the start   of the text.  */
end_comment
begin_function
DECL|function|setComposingText
name|jboolean
name|QAndroidInputContext
operator|::
name|setComposingText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|jint
name|newCursorPosition
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|JNI_FALSE
return|;
specifier|const
name|int
name|cursorPos
init|=
name|getAbsoluteCursorPosition
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCursorPosition
operator|>
literal|0
condition|)
name|newCursorPosition
operator|+=
name|text
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|m_composingText
operator|=
name|text
expr_stmt|;
name|m_composingTextStart
operator|=
name|text
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
name|cursorPos
expr_stmt|;
name|m_composingCursor
operator|=
name|cursorPos
operator|+
name|newCursorPosition
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Cursor
argument_list|,
name|newCursorPosition
argument_list|,
literal|1
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Show compose text underlined
name|QTextCharFormat
name|underlined
decl_stmt|;
name|underlined
operator|.
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|,
name|QVariant
argument_list|(
name|underlined
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|m_composingText
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|sendInputMethodEventThreadSafe
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
name|updateCursorPosition
argument_list|()
expr_stmt|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_comment
comment|// Android docs say:
end_comment
begin_comment
comment|// * start may be after end, same meaning as if swapped
end_comment
begin_comment
comment|// * this function should not trigger updateSelection
end_comment
begin_comment
comment|// * if start == end then we should stop composing
end_comment
begin_function
DECL|function|setComposingRegion
name|jboolean
name|QAndroidInputContext
operator|::
name|setComposingRegion
parameter_list|(
name|jint
name|start
parameter_list|,
name|jint
name|end
parameter_list|)
block|{
comment|// Qt will not include the current preedit text in the query results, and interprets all
comment|// parameters relative to the text excluding the preedit. The simplest solution is therefore to
comment|// tell Qt that we commit the text before we set the new region. This may cause a little flicker, but is
comment|// much more robust than trying to keep the two different world views in sync
name|bool
name|wasComposing
init|=
operator|!
name|m_composingText
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|wasComposing
condition|)
name|finishComposingText
argument_list|()
expr_stmt|;
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|JNI_FALSE
return|;
if|if
condition|(
name|start
operator|>
name|end
condition|)
name|qSwap
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
comment|/*       start and end are  cursor positions, not character positions,       i.e. selecting the first character is done by start == 0 and end == 1,       and start == end means no character selected        Therefore, the length of the region is end - start      */
name|int
name|length
init|=
name|end
operator|-
name|start
decl_stmt|;
name|int
name|localPos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|blockPosition
init|=
name|getBlockPosition
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|localStart
init|=
name|start
operator|-
name|blockPosition
decl_stmt|;
comment|// Qt uses position inside block
name|int
name|currentCursor
init|=
name|wasComposing
condition|?
name|m_composingCursor
else|:
name|blockPosition
operator|+
name|localPos
decl_stmt|;
name|bool
name|updateSelectionWasBlocked
init|=
name|m_blockUpdateSelection
decl_stmt|;
name|m_blockUpdateSelection
operator|=
literal|true
expr_stmt|;
name|QString
name|text
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|m_composingText
operator|=
name|text
operator|.
name|mid
argument_list|(
name|localStart
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|m_composingTextStart
operator|=
name|start
expr_stmt|;
name|m_composingCursor
operator|=
name|currentCursor
expr_stmt|;
comment|//in the Qt text controls, the preedit is defined relative to the cursor position
name|int
name|relativeStart
init|=
name|localStart
operator|-
name|localPos
decl_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
comment|// Show compose text underlined
name|QTextCharFormat
name|underlined
decl_stmt|;
name|underlined
operator|.
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
literal|0
argument_list|,
name|length
argument_list|,
name|QVariant
argument_list|(
name|underlined
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Keep the cursor position unchanged (don't move to end of preedit)
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Cursor
argument_list|,
name|currentCursor
operator|-
name|start
argument_list|,
literal|1
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|m_composingText
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|QString
argument_list|()
argument_list|,
name|relativeStart
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|sendInputMethodEventThreadSafe
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
name|m_blockUpdateSelection
operator|=
name|updateSelectionWasBlocked
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_DEBUG_ANDROID_IM_PROTOCOL
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query2
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|query2
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Setting. Prev local cpos:"
operator|<<
name|localPos
operator|<<
literal|"block pos:"
operator|<<
name|blockPosition
operator|<<
literal|"comp.start:"
operator|<<
name|m_composingTextStart
operator|<<
literal|"rel.start:"
operator|<<
name|relativeStart
operator|<<
literal|"len:"
operator|<<
name|length
operator|<<
literal|"cpos attr:"
operator|<<
name|localPos
operator|-
name|localStart
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"New cursor pos"
operator|<<
name|getAbsoluteCursorPosition
argument_list|(
name|query2
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|setSelection
name|jboolean
name|QAndroidInputContext
operator|::
name|setSelection
parameter_list|(
name|jint
name|start
parameter_list|,
name|jint
name|end
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|query
init|=
name|focusObjectInputMethodQueryThreadSafe
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|JNI_FALSE
return|;
name|int
name|blockPosition
init|=
name|getBlockPosition
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|localCursorPos
init|=
name|start
operator|-
name|blockPosition
decl_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
if|if
condition|(
operator|!
name|m_composingText
operator|.
name|isEmpty
argument_list|()
operator|&&
name|start
operator|==
name|end
condition|)
block|{
comment|// not actually changing the selection; just moving the
comment|// preedit cursor
name|int
name|localOldPos
init|=
name|query
operator|->
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|localCursorPos
operator|-
name|localOldPos
decl_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Cursor
argument_list|,
name|pos
argument_list|,
literal|1
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//but we have to tell Qt about the compose text all over again
comment|// Show compose text underlined
name|QTextCharFormat
name|underlined
decl_stmt|;
name|underlined
operator|.
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
literal|0
argument_list|,
name|m_composingText
operator|.
name|length
argument_list|()
argument_list|,
name|QVariant
argument_list|(
name|underlined
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m_composingCursor
operator|=
name|start
expr_stmt|;
block|}
else|else
block|{
comment|// actually changing the selection
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Selection
argument_list|,
name|localCursorPos
argument_list|,
name|end
operator|-
name|start
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QInputMethodEvent
name|event
argument_list|(
name|m_composingText
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|sendInputMethodEventThreadSafe
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
name|updateCursorPosition
argument_list|()
expr_stmt|;
return|return
name|JNI_TRUE
return|;
block|}
end_function
begin_function
DECL|function|selectAll
name|jboolean
name|QAndroidInputContext
operator|::
name|selectAll
parameter_list|()
block|{
warning|#
directive|warning
warning|TODO
return|return
name|JNI_FALSE
return|;
block|}
end_function
begin_function
DECL|function|cut
name|jboolean
name|QAndroidInputContext
operator|::
name|cut
parameter_list|()
block|{
warning|#
directive|warning
warning|TODO
return|return
name|JNI_FALSE
return|;
block|}
end_function
begin_function
DECL|function|copy
name|jboolean
name|QAndroidInputContext
operator|::
name|copy
parameter_list|()
block|{
warning|#
directive|warning
warning|TODO
return|return
name|JNI_FALSE
return|;
block|}
end_function
begin_function
DECL|function|copyURL
name|jboolean
name|QAndroidInputContext
operator|::
name|copyURL
parameter_list|()
block|{
warning|#
directive|warning
warning|TODO
return|return
name|JNI_FALSE
return|;
block|}
end_function
begin_function
DECL|function|paste
name|jboolean
name|QAndroidInputContext
operator|::
name|paste
parameter_list|()
block|{
warning|#
directive|warning
warning|TODO
return|return
name|JNI_FALSE
return|;
block|}
end_function
begin_function
DECL|function|queryFocusObjectUnsafe
name|Q_INVOKABLE
name|QVariant
name|QAndroidInputContext
operator|::
name|queryFocusObjectUnsafe
parameter_list|(
name|Qt
operator|::
name|InputMethodQuery
name|query
parameter_list|,
name|QVariant
name|argument
parameter_list|)
block|{
return|return
name|QInputMethod
operator|::
name|queryFocusObject
argument_list|(
name|query
argument_list|,
name|argument
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|queryFocusObjectThreadSafe
name|QVariant
name|QAndroidInputContext
operator|::
name|queryFocusObjectThreadSafe
parameter_list|(
name|Qt
operator|::
name|InputMethodQuery
name|query
parameter_list|,
name|QVariant
name|argument
parameter_list|)
block|{
name|QVariant
name|retval
decl_stmt|;
if|if
condition|(
operator|!
name|qGuiApp
condition|)
return|return
name|retval
return|;
specifier|const
name|bool
name|inMainThread
init|=
name|qGuiApp
operator|->
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|QAndroidEventDispatcherStopper
operator|::
name|stopped
argument_list|()
operator|&&
operator|!
name|inMainThread
condition|)
return|return
name|retval
return|;
name|AndroidDeadlockProtector
name|protector
decl_stmt|;
if|if
condition|(
operator|!
name|inMainThread
operator|&&
operator|!
name|protector
operator|.
name|acquire
argument_list|()
condition|)
return|return
name|retval
return|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"queryFocusObjectUnsafe"
argument_list|,
name|inMainThread
condition|?
name|Qt
operator|::
name|DirectConnection
else|:
name|Qt
operator|::
name|BlockingQueuedConnection
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QVariant
argument_list|,
name|retval
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|Qt
operator|::
name|InputMethodQuery
argument_list|,
name|query
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QVariant
argument_list|,
name|argument
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|focusObjectInputMethodQueryThreadSafe
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|QAndroidInputContext
operator|::
name|focusObjectInputMethodQueryThreadSafe
parameter_list|(
name|Qt
operator|::
name|InputMethodQueries
name|queries
parameter_list|)
block|{
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
name|retval
decl_stmt|;
if|if
condition|(
operator|!
name|qGuiApp
condition|)
return|return
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
argument_list|()
return|;
specifier|const
name|bool
name|inMainThread
init|=
name|qGuiApp
operator|->
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|QAndroidEventDispatcherStopper
operator|::
name|stopped
argument_list|()
operator|&&
operator|!
name|inMainThread
condition|)
return|return
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
argument_list|()
return|;
name|AndroidDeadlockProtector
name|protector
decl_stmt|;
if|if
condition|(
operator|!
name|inMainThread
operator|&&
operator|!
name|protector
operator|.
name|acquire
argument_list|()
condition|)
return|return
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
argument_list|()
return|;
name|QInputMethodQueryEvent
modifier|*
name|queryEvent
init|=
literal|0
decl_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"focusObjectInputMethodQueryUnsafe"
argument_list|,
name|inMainThread
condition|?
name|Qt
operator|::
name|DirectConnection
else|:
name|Qt
operator|::
name|BlockingQueuedConnection
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QInputMethodQueryEvent
operator|*
argument_list|,
name|queryEvent
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|Qt
operator|::
name|InputMethodQueries
argument_list|,
name|queries
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QSharedPointer
argument_list|<
name|QInputMethodQueryEvent
argument_list|>
argument_list|(
name|queryEvent
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|focusObjectInputMethodQueryUnsafe
name|QInputMethodQueryEvent
modifier|*
name|QAndroidInputContext
operator|::
name|focusObjectInputMethodQueryUnsafe
parameter_list|(
name|Qt
operator|::
name|InputMethodQueries
name|queries
parameter_list|)
block|{
name|QObject
modifier|*
name|focusObject
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focusObject
condition|)
return|return
literal|0
return|;
name|QInputMethodQueryEvent
modifier|*
name|ret
init|=
operator|new
name|QInputMethodQueryEvent
argument_list|(
name|queries
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|focusObject
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|sendInputMethodEventUnsafe
name|void
name|QAndroidInputContext
operator|::
name|sendInputMethodEventUnsafe
parameter_list|(
name|QInputMethodEvent
modifier|*
name|event
parameter_list|)
block|{
name|QObject
modifier|*
name|focusObject
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focusObject
condition|)
return|return;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|focusObject
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendInputMethodEventThreadSafe
name|void
name|QAndroidInputContext
operator|::
name|sendInputMethodEventThreadSafe
parameter_list|(
name|QInputMethodEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|qGuiApp
condition|)
return|return;
specifier|const
name|bool
name|inMainThread
init|=
name|qGuiApp
operator|->
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|QAndroidEventDispatcherStopper
operator|::
name|stopped
argument_list|()
operator|&&
operator|!
name|inMainThread
condition|)
return|return;
name|AndroidDeadlockProtector
name|protector
decl_stmt|;
if|if
condition|(
operator|!
name|inMainThread
operator|&&
operator|!
name|protector
operator|.
name|acquire
argument_list|()
condition|)
return|return;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"sendInputMethodEventUnsafe"
argument_list|,
name|inMainThread
condition|?
name|Qt
operator|::
name|DirectConnection
else|:
name|Qt
operator|::
name|BlockingQueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QInputMethodEvent
operator|*
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
