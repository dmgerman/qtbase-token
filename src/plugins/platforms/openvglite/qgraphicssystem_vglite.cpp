begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgraphicssystem_vglite.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsurface_vglite.h"
end_include
begin_include
include|#
directive|include
file|<QtOpenVG/private/qpixmapdata_vg_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qegl_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|OPENVG_USBHP_INIT
end_ifdef
begin_extern
extern|extern
literal|"C"
block|{
include|#
directive|include
file|<linuxusbhp.h>
block|}
end_extern
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QVGLiteGraphicsSystem
name|QVGLiteGraphicsSystem
operator|::
name|QVGLiteGraphicsSystem
parameter_list|()
member_init_list|:
name|w
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|h
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dw
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dh
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|physWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|physHeight
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|surface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|context
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|rootWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|screenFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
member_init_list|,
name|preservedSwap
argument_list|(
literal|false
argument_list|)
block|{
ifdef|#
directive|ifdef
name|OPENVG_USBHP_INIT
name|initLibrary
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// The graphics system is also the screen definition.
name|mScreens
operator|.
name|append
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QString
name|displaySpec
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qgetenv
argument_list|(
literal|"QWS_DISPLAY"
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|displayArgs
init|=
name|displaySpec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
comment|// Initialize EGL and create the global EGL context.
name|context
operator|=
name|qt_vg_create_context
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
condition|)
block|{
name|qFatal
argument_list|(
literal|"QVGLiteGraphicsSystem: could not initialize EGL"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Get the root window handle to use.  Default to zero.
name|QRegExp
name|winidRx
argument_list|(
name|QLatin1String
argument_list|(
literal|"winid=?(\\d+)"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|winidIdx
init|=
name|displayArgs
operator|.
name|indexOf
argument_list|(
name|winidRx
argument_list|)
decl_stmt|;
name|int
name|handle
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|winidIdx
operator|>=
literal|0
condition|)
block|{
name|winidRx
operator|.
name|exactMatch
argument_list|(
name|displayArgs
operator|.
name|at
argument_list|(
name|winidIdx
argument_list|)
argument_list|)
expr_stmt|;
name|handle
operator|=
name|winidRx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
comment|// Create a full-screen window based on the native handle.
comment|// If the context is premultiplied, the window should be too.
name|QEglProperties
name|props
decl_stmt|;
ifdef|#
directive|ifdef
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
name|EGLint
name|surfaceType
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|context
operator|->
name|configAttrib
argument_list|(
name|EGL_SURFACE_TYPE
argument_list|,
operator|&
name|surfaceType
argument_list|)
operator|&&
operator|(
name|surfaceType
operator|&
name|EGL_VG_ALPHA_FORMAT_PRE_BIT
operator|)
operator|!=
literal|0
condition|)
name|props
operator|.
name|setValue
argument_list|(
name|EGL_VG_ALPHA_FORMAT
argument_list|,
name|EGL_VG_ALPHA_FORMAT_PRE
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|rootWindow
operator|=
name|eglCreateWindowSurface
argument_list|(
name|context
operator|->
name|display
argument_list|()
argument_list|,
name|context
operator|->
name|config
argument_list|()
argument_list|,
operator|(
name|EGLNativeWindowType
operator|)
name|handle
argument_list|,
name|props
operator|.
name|properties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rootWindow
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
operator|delete
name|context
expr_stmt|;
name|context
operator|=
literal|0
expr_stmt|;
name|qFatal
argument_list|(
literal|"QVGLiteGraphicsSystem: could not create full-screen window"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Try to turn on preserved swap behaviour on the root window.
comment|// This will allow us to optimize compositing to focus on just
comment|// the screen region that has changed.  Otherwise we must
comment|// re-composite the entire screen every frame.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QVG_NO_PRESERVED_SWAP
argument_list|)
name|eglGetError
argument_list|()
expr_stmt|;
comment|// Clear error state first.
name|eglSurfaceAttrib
argument_list|(
name|context
operator|->
name|display
argument_list|()
argument_list|,
name|rootWindow
argument_list|,
name|EGL_SWAP_BEHAVIOR
argument_list|,
name|EGL_BUFFER_PRESERVED
argument_list|)
expr_stmt|;
name|preservedSwap
operator|=
operator|(
name|eglGetError
argument_list|()
operator|==
name|EGL_SUCCESS
operator|)
expr_stmt|;
else|#
directive|else
name|preservedSwap
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
comment|// Fetch the root window properties.
name|eglQuerySurface
argument_list|(
name|context
operator|->
name|display
argument_list|()
argument_list|,
name|rootWindow
argument_list|,
name|EGL_WIDTH
argument_list|,
operator|&
name|w
argument_list|)
expr_stmt|;
name|eglQuerySurface
argument_list|(
name|context
operator|->
name|display
argument_list|()
argument_list|,
name|rootWindow
argument_list|,
name|EGL_HEIGHT
argument_list|,
operator|&
name|h
argument_list|)
expr_stmt|;
name|screenFormat
operator|=
name|qt_vg_config_to_image_format
argument_list|(
name|context
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|screenFormat
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
default|default:
name|d
operator|=
literal|32
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
case|case
name|QImage
operator|::
name|Format_ARGB4444_Premultiplied
case|:
name|d
operator|=
literal|16
expr_stmt|;
break|break;
block|}
name|dw
operator|=
name|w
expr_stmt|;
name|dh
operator|=
name|h
expr_stmt|;
name|qDebug
argument_list|(
literal|"screen size: %dx%dx%d"
argument_list|,
name|w
argument_list|,
name|h
argument_list|,
name|d
argument_list|)
expr_stmt|;
comment|// Handle display physical size spec.  From qscreenlinuxfb_qws.cpp.
name|QRegExp
name|mmWidthRx
argument_list|(
name|QLatin1String
argument_list|(
literal|"mmWidth=?(\\d+)"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|dimIdxW
init|=
name|displayArgs
operator|.
name|indexOf
argument_list|(
name|mmWidthRx
argument_list|)
decl_stmt|;
name|QRegExp
name|mmHeightRx
argument_list|(
name|QLatin1String
argument_list|(
literal|"mmHeight=?(\\d+)"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|dimIdxH
init|=
name|displayArgs
operator|.
name|indexOf
argument_list|(
name|mmHeightRx
argument_list|)
decl_stmt|;
if|if
condition|(
name|dimIdxW
operator|>=
literal|0
condition|)
block|{
name|mmWidthRx
operator|.
name|exactMatch
argument_list|(
name|displayArgs
operator|.
name|at
argument_list|(
name|dimIdxW
argument_list|)
argument_list|)
expr_stmt|;
name|physWidth
operator|=
name|mmWidthRx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|dimIdxH
operator|<
literal|0
condition|)
name|physHeight
operator|=
name|dh
operator|*
name|physWidth
operator|/
name|dw
expr_stmt|;
block|}
if|if
condition|(
name|dimIdxH
operator|>=
literal|0
condition|)
block|{
name|mmHeightRx
operator|.
name|exactMatch
argument_list|(
name|displayArgs
operator|.
name|at
argument_list|(
name|dimIdxH
argument_list|)
argument_list|)
expr_stmt|;
name|physHeight
operator|=
name|mmHeightRx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|dimIdxW
operator|<
literal|0
condition|)
name|physWidth
operator|=
name|dw
operator|*
name|physHeight
operator|/
name|dh
expr_stmt|;
block|}
if|if
condition|(
name|dimIdxW
operator|<
literal|0
operator|&&
name|dimIdxH
operator|<
literal|0
condition|)
block|{
specifier|const
name|int
name|dpi
init|=
literal|72
decl_stmt|;
name|physWidth
operator|=
name|qRound
argument_list|(
name|dw
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
name|physHeight
operator|=
name|qRound
argument_list|(
name|dh
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QVGLiteGraphicsSystem
name|QVGLiteGraphicsSystem
operator|::
name|~
name|QVGLiteGraphicsSystem
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|createPixmapData
name|QPixmapData
modifier|*
name|QVGLiteGraphicsSystem
operator|::
name|createPixmapData
parameter_list|(
name|QPixmapData
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QVGLite_NO_SINGLE_CONTEXT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QVGLite_NO_PIXMAP_DATA
argument_list|)
comment|// Pixmaps can use QVGLitePixmapData; bitmaps must use raster.
if|if
condition|(
name|type
operator|==
name|QPixmapData
operator|::
name|PixmapType
condition|)
return|return
operator|new
name|QVGPixmapData
argument_list|(
name|type
argument_list|)
return|;
else|else
return|return
operator|new
name|QRasterPixmapData
argument_list|(
name|type
argument_list|)
return|;
else|#
directive|else
return|return
operator|new
name|QRasterPixmapData
argument_list|(
name|type
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|createWindowSurface
name|QWindowSurface
modifier|*
name|QVGLiteGraphicsSystem
operator|::
name|createWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|widget
operator|->
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Desktop
condition|)
return|return
literal|0
return|;
comment|// Don't create an explicit window surface for the destkop.
if|if
condition|(
name|surface
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QVGLiteGraphicsSystem: only one window surface "
literal|"is supported at a time"
expr_stmt|;
return|return
literal|0
return|;
block|}
name|surface
operator|=
operator|new
name|QVGLiteWindowSurface
argument_list|(
cast|const_cast
argument_list|<
name|QVGLiteGraphicsSystem
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return
name|surface
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
