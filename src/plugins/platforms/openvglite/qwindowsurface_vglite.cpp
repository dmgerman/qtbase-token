begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsurface_vglite.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicssystem_vglite.h"
end_include
begin_include
include|#
directive|include
file|<QtOpenVG/qvg.h>
end_include
begin_include
include|#
directive|include
file|<QtOpenVG/private/qvg_p.h>
end_include
begin_include
include|#
directive|include
file|<QtOpenVG/private/qpaintengine_vg_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QVGLiteWindowSurface
name|QVGLiteWindowSurface
operator|::
name|QVGLiteWindowSurface
parameter_list|(
name|QVGLiteGraphicsSystem
modifier|*
name|gs
parameter_list|,
name|QWidget
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QWindowSurface
argument_list|(
name|window
argument_list|)
member_init_list|,
name|graphicsSystem
argument_list|(
name|gs
argument_list|)
member_init_list|,
name|isPaintingActive
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|engine
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QVGLiteWindowSurface
name|QVGLiteWindowSurface
operator|::
name|~
name|QVGLiteWindowSurface
parameter_list|()
block|{
name|graphicsSystem
operator|->
name|surface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|engine
condition|)
name|qt_vg_destroy_paint_engine
argument_list|(
name|engine
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|paintDevice
name|QPaintDevice
modifier|*
name|QVGLiteWindowSurface
operator|::
name|paintDevice
parameter_list|()
block|{
name|qt_vg_make_current
argument_list|(
name|graphicsSystem
operator|->
name|context
argument_list|,
name|graphicsSystem
operator|->
name|rootWindow
argument_list|)
expr_stmt|;
name|isPaintingActive
operator|=
literal|true
expr_stmt|;
comment|// TODO: clear the parts of the back buffer that are not
comment|// covered by the window surface to black.
return|return
name|this
return|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QVGLiteWindowSurface
operator|::
name|flush
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|QEglContext
modifier|*
name|context
init|=
name|graphicsSystem
operator|->
name|context
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|isPaintingActive
condition|)
name|qt_vg_make_current
argument_list|(
name|context
argument_list|,
name|graphicsSystem
operator|->
name|rootWindow
argument_list|)
expr_stmt|;
name|context
operator|->
name|swapBuffers
argument_list|()
expr_stmt|;
name|qt_vg_done_current
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|->
name|setSurface
argument_list|(
name|EGL_NO_SURFACE
argument_list|)
expr_stmt|;
name|isPaintingActive
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QVGLiteWindowSurface
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QWindowSurface
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scroll
name|bool
name|QVGLiteWindowSurface
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|area
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
return|return
name|QWindowSurface
operator|::
name|scroll
argument_list|(
name|area
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QVGLiteWindowSurface
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QVGLiteWindowSurface
operator|::
name|endPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QVGLiteWindowSurface
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|engine
condition|)
name|engine
operator|=
name|qt_vg_create_paint_engine
argument_list|()
expr_stmt|;
return|return
name|engine
return|;
block|}
end_function
begin_comment
comment|// We need to get access to QWidget::metric() from QVGLiteWindowSurface::metric,
end_comment
begin_comment
comment|// but it is not a friend of QWidget.  To get around this, we create a
end_comment
begin_comment
comment|// fake QX11PaintEngine class, which is a friend.
end_comment
begin_class
DECL|class|QX11PaintEngine
class|class
name|QX11PaintEngine
block|{
public|public:
DECL|function|metric
specifier|static
name|int
name|metric
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|met
parameter_list|)
block|{
return|return
name|widget
operator|->
name|metric
argument_list|(
name|met
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|metric
name|int
name|QVGLiteWindowSurface
operator|::
name|metric
parameter_list|(
name|PaintDeviceMetric
name|met
parameter_list|)
specifier|const
block|{
return|return
name|QX11PaintEngine
operator|::
name|metric
argument_list|(
name|window
argument_list|()
argument_list|,
name|met
argument_list|)
return|;
block|}
end_function
end_unit
