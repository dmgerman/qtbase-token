begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Tobias Koenig<tobias.koenig@kdab.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qhaikuservices.h"
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QMimeDatabase>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QUrl>
end_include
begin_include
include|#
directive|include
file|<Roster.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|openUrl
name|bool
name|QHaikuServices
operator|::
name|openUrl
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
specifier|const
name|QMimeDatabase
name|mimeDatabase
decl_stmt|;
specifier|const
name|QMimeType
name|mimeType
init|=
name|mimeDatabase
operator|.
name|mimeTypeForUrl
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mimeType
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QByteArray
name|mimeTypeName
init|=
name|mimeType
operator|.
name|name
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QByteArray
name|urlData
init|=
name|url
operator|.
name|toString
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|char
modifier|*
name|rawUrlData
init|=
name|urlData
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|be_roster
operator|->
name|Launch
argument_list|(
name|mimeTypeName
operator|.
name|constData
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|rawUrlData
argument_list|)
operator|!=
name|B_OK
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|openDocument
name|bool
name|QHaikuServices
operator|::
name|openDocument
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
specifier|const
name|QByteArray
name|localPath
init|=
name|QFile
operator|::
name|encodeName
argument_list|(
name|url
operator|.
name|toLocalFile
argument_list|()
argument_list|)
decl_stmt|;
name|entry_ref
name|ref
decl_stmt|;
if|if
condition|(
name|get_ref_for_path
argument_list|(
name|localPath
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|ref
argument_list|)
operator|!=
name|B_OK
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|be_roster
operator|->
name|Launch
argument_list|(
operator|&
name|ref
argument_list|)
operator|!=
name|B_OK
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|desktopEnvironment
name|QByteArray
name|QHaikuServices
operator|::
name|desktopEnvironment
parameter_list|()
specifier|const
block|{
return|return
name|QByteArray
argument_list|(
literal|"Haiku"
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
