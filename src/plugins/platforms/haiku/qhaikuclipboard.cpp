begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Tobias Koenig<tobias.koenig@kdab.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CLIPBOARD
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qhaikuclipboard.h"
end_include
begin_include
include|#
directive|include
file|<QMimeData>
end_include
begin_include
include|#
directive|include
file|<QThread>
end_include
begin_include
include|#
directive|include
file|<Clipboard.h>
end_include
begin_constructor
DECL|function|QHaikuClipboard
name|QHaikuClipboard
operator|::
name|QHaikuClipboard
parameter_list|()
block|{
if|if
condition|(
name|be_clipboard
condition|)
name|be_clipboard
operator|->
name|StartWatching
argument_list|(
name|BMessenger
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QHaikuClipboard
name|QHaikuClipboard
operator|::
name|~
name|QHaikuClipboard
parameter_list|()
block|{
if|if
condition|(
name|be_clipboard
condition|)
name|be_clipboard
operator|->
name|StopWatching
argument_list|(
name|BMessenger
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|mimeData
name|QMimeData
modifier|*
name|QHaikuClipboard
operator|::
name|mimeData
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
block|{
name|QMimeData
modifier|*
name|mimeData
init|=
operator|new
name|QMimeData
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
name|QClipboard
operator|::
name|Clipboard
condition|)
return|return
name|mimeData
return|;
if|if
condition|(
operator|!
name|be_clipboard
operator|->
name|Lock
argument_list|()
condition|)
return|return
name|mimeData
return|;
specifier|const
name|BMessage
modifier|*
name|clipboard
init|=
name|be_clipboard
operator|->
name|Data
argument_list|()
decl_stmt|;
if|if
condition|(
name|clipboard
condition|)
block|{
name|char
modifier|*
name|name
init|=
name|Q_NULLPTR
decl_stmt|;
name|uint32
name|type
init|=
literal|0
decl_stmt|;
name|int32
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|clipboard
operator|->
name|GetInfo
argument_list|(
name|B_MIME_TYPE
argument_list|,
name|i
argument_list|,
operator|&
name|name
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|count
argument_list|)
operator|==
name|B_OK
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|void
modifier|*
name|data
init|=
name|Q_NULLPTR
decl_stmt|;
name|int32
name|dataLen
init|=
literal|0
decl_stmt|;
specifier|const
name|status_t
name|status
init|=
name|clipboard
operator|->
name|FindData
argument_list|(
name|name
argument_list|,
name|B_MIME_TYPE
argument_list|,
operator|&
name|data
argument_list|,
operator|&
name|dataLen
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataLen
operator|&&
operator|(
name|status
operator|==
name|B_OK
operator|)
condition|)
block|{
specifier|const
name|QString
name|format
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|QStringLiteral
argument_list|(
literal|"text/plain"
argument_list|)
condition|)
block|{
name|mimeData
operator|->
name|setText
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
name|dataLen
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
name|QStringLiteral
argument_list|(
literal|"text/html"
argument_list|)
condition|)
block|{
name|mimeData
operator|->
name|setHtml
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
name|dataLen
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mimeData
operator|->
name|setData
argument_list|(
name|format
argument_list|,
name|QByteArray
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|,
name|dataLen
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|be_clipboard
operator|->
name|Unlock
argument_list|()
expr_stmt|;
return|return
name|mimeData
return|;
block|}
end_function
begin_function
DECL|function|setMimeData
name|void
name|QHaikuClipboard
operator|::
name|setMimeData
parameter_list|(
name|QMimeData
modifier|*
name|mimeData
parameter_list|,
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|!=
name|QClipboard
operator|::
name|Clipboard
condition|)
return|return;
if|if
condition|(
operator|!
name|be_clipboard
operator|->
name|Lock
argument_list|()
condition|)
return|return;
name|be_clipboard
operator|->
name|Clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|mimeData
condition|)
block|{
name|BMessage
modifier|*
name|clipboard
init|=
name|be_clipboard
operator|->
name|Data
argument_list|()
decl_stmt|;
if|if
condition|(
name|clipboard
condition|)
block|{
specifier|const
name|QStringList
name|formats
init|=
name|mimeData
operator|->
name|formats
argument_list|()
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QString&format
argument_list|,
argument|formats
argument_list|)
block|{
specifier|const
name|QByteArray
name|data
init|=
name|mimeData
operator|->
name|data
argument_list|(
name|format
argument_list|)
operator|.
name|data
argument_list|()
decl_stmt|;
name|clipboard
operator|->
name|AddData
argument_list|(
name|format
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|B_MIME_TYPE
argument_list|,
name|data
argument_list|,
name|data
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|be_clipboard
operator|->
name|Commit
argument_list|()
operator|!=
name|B_OK
condition|)
name|qWarning
argument_list|(
literal|"Unable to store mime data on clipboard"
argument_list|)
expr_stmt|;
name|be_clipboard
operator|->
name|Unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsMode
name|bool
name|QHaikuClipboard
operator|::
name|supportsMode
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mode
operator|==
name|QClipboard
operator|::
name|Clipboard
operator|)
return|;
block|}
end_function
begin_function
DECL|function|ownsMode
name|bool
name|QHaikuClipboard
operator|::
name|ownsMode
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|mode
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|MessageReceived
name|void
name|QHaikuClipboard
operator|::
name|MessageReceived
parameter_list|(
name|BMessage
modifier|*
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|->
name|what
operator|==
name|B_CLIPBOARD_CHANGED
condition|)
name|emitChanged
argument_list|(
name|QClipboard
operator|::
name|Clipboard
argument_list|)
expr_stmt|;
name|BHandler
operator|::
name|MessageReceived
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
end_unit
