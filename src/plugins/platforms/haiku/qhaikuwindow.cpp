begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Tobias Koenig<tobias.koenig@kdab.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qhaikuwindow.h"
end_include
begin_include
include|#
directive|include
file|"private/qguiapplication_p.h"
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QThread>
end_include
begin_include
include|#
directive|include
file|<QWindow>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<Rect.h>
end_include
begin_include
include|#
directive|include
file|<Window.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|enum
type|{
DECL|enumerator|DefaultWindowWidth
name|DefaultWindowWidth
init|=
literal|160
decl_stmt|,
DECL|enumerator|DefaultWindowHeight
name|DefaultWindowHeight
init|=
literal|160
end_decl_stmt
begin_constructor
DECL|enumerator|DefaultWindowHeight
unit|};
DECL|function|HaikuWindowProxy
name|HaikuWindowProxy
operator|::
name|HaikuWindowProxy
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|BWindow
argument_list|(
name|BRect
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|right
argument_list|()
operator|-
literal|1
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|window
operator|->
name|title
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|B_NO_BORDER_WINDOW_LOOK
argument_list|,
name|B_NORMAL_WINDOW_FEEL
argument_list|,
literal|0
argument_list|)
member_init_list|,
name|m_qtCalledZoom
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_zoomInProgress
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|FrameMoved
name|void
name|HaikuWindowProxy
operator|::
name|FrameMoved
parameter_list|(
name|BPoint
name|pos
parameter_list|)
block|{
name|Q_EMIT
name|moved
argument_list|(
name|QPoint
argument_list|(
name|pos
operator|.
name|x
argument_list|,
name|pos
operator|.
name|y
argument_list|)
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|FrameResized
name|void
name|HaikuWindowProxy
operator|::
name|FrameResized
parameter_list|(
name|float
name|width
parameter_list|,
name|float
name|height
parameter_list|)
block|{
name|Q_EMIT
name|resized
argument_list|(
name|QSize
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|width
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|height
argument_list|)
argument_list|)
argument_list|,
name|m_zoomInProgress
argument_list|)
decl_stmt|;
name|m_zoomInProgress
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|WindowActivated
name|void
name|HaikuWindowProxy
operator|::
name|WindowActivated
parameter_list|(
name|bool
name|activated
parameter_list|)
block|{
name|Q_EMIT
name|windowActivated
argument_list|(
name|activated
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|Minimize
name|void
name|HaikuWindowProxy
operator|::
name|Minimize
parameter_list|(
name|bool
name|minimize
parameter_list|)
block|{
name|BWindow
operator|::
name|Minimize
argument_list|(
name|minimize
argument_list|)
expr_stmt|;
name|Q_EMIT
name|minimized
argument_list|(
name|minimize
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|Zoom
name|void
name|HaikuWindowProxy
operator|::
name|Zoom
parameter_list|(
name|BPoint
name|pos
parameter_list|,
name|float
name|width
parameter_list|,
name|float
name|height
parameter_list|)
block|{
name|m_zoomInProgress
operator|=
literal|true
expr_stmt|;
name|BWindow
operator|::
name|Zoom
argument_list|(
name|pos
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
comment|// Only notify about Zoom invocations from the Haiku windowing system
if|if
condition|(
operator|!
name|m_qtCalledZoom
condition|)
name|Q_EMIT
name|zoomed
argument_list|()
decl_stmt|;
block|}
end_function
begin_function
DECL|function|QuitRequested
name|bool
name|HaikuWindowProxy
operator|::
name|QuitRequested
parameter_list|()
block|{
name|Q_EMIT
name|quitRequested
argument_list|()
decl_stmt|;
comment|// Return false to prevent Haiku windowing system to clean up
comment|// the BWindow and BView instances. We will do that ourself when
comment|// Qt invokes the dtor of QHaikuWindow
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|zoomByQt
name|void
name|HaikuWindowProxy
operator|::
name|zoomByQt
parameter_list|()
block|{
name|m_qtCalledZoom
operator|=
literal|true
expr_stmt|;
name|BWindow
operator|::
name|Zoom
argument_list|()
expr_stmt|;
name|m_qtCalledZoom
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QHaikuWindow
name|QHaikuWindow
operator|::
name|QHaikuWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QPlatformWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_window
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_windowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
block|{
specifier|const
name|QRect
name|rect
init|=
name|initialGeometry
argument_list|(
name|window
argument_list|,
name|window
operator|->
name|geometry
argument_list|()
argument_list|,
name|DefaultWindowWidth
argument_list|,
name|DefaultWindowHeight
argument_list|)
decl_stmt|;
name|HaikuWindowProxy
modifier|*
name|haikuWindow
init|=
operator|new
name|HaikuWindowProxy
argument_list|(
name|window
argument_list|,
name|rect
argument_list|,
name|Q_NULLPTR
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|haikuWindow
argument_list|,
name|SIGNAL
argument_list|(
name|moved
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|haikuWindowMoved
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|haikuWindow
argument_list|,
name|SIGNAL
argument_list|(
name|resized
argument_list|(
name|QSize
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|haikuWindowResized
argument_list|(
name|QSize
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|haikuWindow
argument_list|,
name|SIGNAL
argument_list|(
name|windowActivated
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|haikuWindowActivated
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|haikuWindow
argument_list|,
name|SIGNAL
argument_list|(
name|minimized
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|haikuWindowMinimized
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|haikuWindow
argument_list|,
name|SIGNAL
argument_list|(
name|zoomed
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|haikuWindowZoomed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|haikuWindow
argument_list|,
name|SIGNAL
argument_list|(
name|quitRequested
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|haikuWindowQuitRequested
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|BlockingQueuedConnection
argument_list|)
expr_stmt|;
name|m_window
operator|=
name|haikuWindow
expr_stmt|;
if|if
condition|(
operator|!
name|m_window
condition|)
name|qFatal
argument_list|(
literal|"QHaikuWindow: failed to create window"
argument_list|)
expr_stmt|;
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|setWindowFlags
argument_list|(
name|window
operator|->
name|flags
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QHaikuWindow
name|QHaikuWindow
operator|::
name|~
name|QHaikuWindow
parameter_list|()
block|{
name|m_window
operator|->
name|LockLooper
argument_list|()
expr_stmt|;
name|m_window
operator|->
name|Quit
argument_list|()
expr_stmt|;
name|m_window
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setGeometry
name|void
name|QHaikuWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|m_window
operator|->
name|MoveTo
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|m_window
operator|->
name|ResizeTo
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|frameMargins
name|QMargins
name|QHaikuWindow
operator|::
name|frameMargins
parameter_list|()
specifier|const
block|{
specifier|const
name|BRect
name|decoratorFrame
init|=
name|m_window
operator|->
name|DecoratorFrame
argument_list|()
decl_stmt|;
specifier|const
name|BRect
name|frame
init|=
name|m_window
operator|->
name|Frame
argument_list|()
decl_stmt|;
return|return
name|QMargins
argument_list|(
name|frame
operator|.
name|left
operator|-
name|decoratorFrame
operator|.
name|left
argument_list|,
name|frame
operator|.
name|top
operator|-
name|decoratorFrame
operator|.
name|top
argument_list|,
name|decoratorFrame
operator|.
name|right
operator|-
name|frame
operator|.
name|right
argument_list|,
name|decoratorFrame
operator|.
name|bottom
operator|-
name|frame
operator|.
name|bottom
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QHaikuWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|visible
condition|)
block|{
name|m_window
operator|->
name|Show
argument_list|()
expr_stmt|;
name|window
argument_list|()
operator|->
name|requestActivate
argument_list|()
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|window
argument_list|()
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_window
operator|->
name|Hide
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isExposed
name|bool
name|QHaikuWindow
operator|::
name|isExposed
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|m_window
operator|->
name|IsHidden
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isActive
name|bool
name|QHaikuWindow
operator|::
name|isActive
parameter_list|()
specifier|const
block|{
return|return
name|m_window
operator|->
name|IsActive
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|winId
name|WId
name|QHaikuWindow
operator|::
name|winId
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|WId
operator|)
cast|static_cast
argument_list|<
name|BWindow
operator|*
argument_list|>
argument_list|(
name|m_window
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeHandle
name|BWindow
modifier|*
name|QHaikuWindow
operator|::
name|nativeHandle
parameter_list|()
specifier|const
block|{
return|return
name|m_window
return|;
block|}
end_function
begin_function
DECL|function|requestActivateWindow
name|void
name|QHaikuWindow
operator|::
name|requestActivateWindow
parameter_list|()
block|{
name|m_window
operator|->
name|Activate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|QHaikuWindow
operator|::
name|setWindowState
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
if|if
condition|(
name|m_windowState
operator|==
name|state
condition|)
return|return;
specifier|const
name|Qt
operator|::
name|WindowState
name|oldState
init|=
name|m_windowState
decl_stmt|;
name|m_windowState
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|m_windowState
operator|==
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
name|m_window
operator|->
name|zoomByQt
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_windowState
operator|==
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
name|m_window
operator|->
name|Minimize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_windowState
operator|==
name|Qt
operator|::
name|WindowNoState
condition|)
block|{
if|if
condition|(
name|oldState
operator|==
name|Qt
operator|::
name|WindowMaximized
condition|)
name|m_window
operator|->
name|zoomByQt
argument_list|()
expr_stmt|;
comment|// undo zoom
if|if
condition|(
name|oldState
operator|==
name|Qt
operator|::
name|WindowMinimized
condition|)
name|m_window
operator|->
name|Minimize
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// undo minimize
block|}
block|}
end_function
begin_function
DECL|function|setWindowFlags
name|void
name|QHaikuWindow
operator|::
name|setWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
specifier|const
name|Qt
operator|::
name|WindowType
name|type
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowType
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|isPopup
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|Popup
operator|)
decl_stmt|;
specifier|const
name|bool
name|isSplashScreen
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|SplashScreen
operator|)
decl_stmt|;
specifier|const
name|bool
name|isDialog
init|=
operator|(
operator|(
name|type
operator|==
name|Qt
operator|::
name|Dialog
operator|)
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|Sheet
operator|)
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator|)
operator|)
decl_stmt|;
specifier|const
name|bool
name|isTool
init|=
operator|(
operator|(
name|type
operator|==
name|Qt
operator|::
name|Tool
operator|)
operator|||
operator|(
name|type
operator|==
name|Qt
operator|::
name|Drawer
operator|)
operator|)
decl_stmt|;
specifier|const
name|bool
name|isToolTip
init|=
operator|(
name|type
operator|==
name|Qt
operator|::
name|ToolTip
operator|)
decl_stmt|;
name|window_look
name|wlook
init|=
name|B_TITLED_WINDOW_LOOK
decl_stmt|;
name|window_feel
name|wfeel
init|=
name|B_NORMAL_WINDOW_FEEL
decl_stmt|;
name|uint32
name|wflag
init|=
operator|(
name|B_NO_WORKSPACE_ACTIVATION
operator||
name|B_NOT_ANCHORED_ON_ACTIVATE
operator|)
decl_stmt|;
if|if
condition|(
name|isTool
condition|)
block|{
name|wlook
operator|=
name|B_FLOATING_WINDOW_LOOK
expr_stmt|;
name|wflag
operator||=
name|B_WILL_ACCEPT_FIRST_CLICK
expr_stmt|;
block|}
if|if
condition|(
name|isSplashScreen
condition|)
block|{
name|wlook
operator|=
name|B_NO_BORDER_WINDOW_LOOK
expr_stmt|;
block|}
if|if
condition|(
name|isPopup
condition|)
block|{
name|wlook
operator|=
name|B_NO_BORDER_WINDOW_LOOK
expr_stmt|;
name|wflag
operator||=
operator|(
name|B_WILL_ACCEPT_FIRST_CLICK
operator||
name|B_AVOID_FRONT
operator||
name|B_AVOID_FOCUS
operator|)
expr_stmt|;
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
expr_stmt|;
block|}
if|if
condition|(
name|isDialog
condition|)
block|{
if|if
condition|(
name|window
argument_list|()
operator|->
name|modality
argument_list|()
operator|==
name|Qt
operator|::
name|WindowModal
condition|)
name|wfeel
operator|=
name|B_MODAL_SUBSET_WINDOW_FEEL
expr_stmt|;
elseif|else
if|if
condition|(
name|window
argument_list|()
operator|->
name|modality
argument_list|()
operator|==
name|Qt
operator|::
name|ApplicationModal
condition|)
name|wfeel
operator|=
name|B_MODAL_APP_WINDOW_FEEL
expr_stmt|;
block|}
if|if
condition|(
name|isToolTip
condition|)
block|{
name|wlook
operator|=
name|B_NO_BORDER_WINDOW_LOOK
expr_stmt|;
name|wflag
operator||=
operator|(
name|B_WILL_ACCEPT_FIRST_CLICK
operator||
name|B_AVOID_FOCUS
operator|)
expr_stmt|;
name|flags
operator||=
name|Qt
operator|::
name|WindowStaysOnTopHint
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
name|wlook
operator|=
name|B_NO_BORDER_WINDOW_LOOK
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
condition|)
name|wflag
operator||=
operator|(
name|B_NOT_RESIZABLE
operator||
name|B_NOT_ZOOMABLE
operator|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|CustomizeWindowHint
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
name|wflag
operator||=
name|B_NOT_MINIMIZABLE
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
name|wflag
operator||=
name|B_NOT_ZOOMABLE
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowCloseButtonHint
operator|)
condition|)
name|wflag
operator||=
name|B_NOT_CLOSABLE
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
condition|)
name|wfeel
operator|=
name|B_FLOATING_ALL_WINDOW_FEEL
expr_stmt|;
name|m_window
operator|->
name|SetLook
argument_list|(
name|wlook
argument_list|)
expr_stmt|;
name|m_window
operator|->
name|SetFeel
argument_list|(
name|wfeel
argument_list|)
expr_stmt|;
name|m_window
operator|->
name|SetFlags
argument_list|(
name|wflag
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowTitle
name|void
name|QHaikuWindow
operator|::
name|setWindowTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|m_window
operator|->
name|SetTitle
argument_list|(
name|title
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|propagateSizeHints
name|void
name|QHaikuWindow
operator|::
name|propagateSizeHints
parameter_list|()
block|{
name|m_window
operator|->
name|SetSizeLimits
argument_list|(
name|window
argument_list|()
operator|->
name|minimumSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|maximumSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|minimumSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|maximumSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_window
operator|->
name|SetZoomLimits
argument_list|(
name|window
argument_list|()
operator|->
name|maximumSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|window
argument_list|()
operator|->
name|maximumSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|haikuWindowMoved
name|void
name|QHaikuWindow
operator|::
name|haikuWindowMoved
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
specifier|const
name|QRect
name|newGeometry
argument_list|(
name|pos
argument_list|,
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|newGeometry
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|newGeometry
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newGeometry
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|haikuWindowResized
name|void
name|QHaikuWindow
operator|::
name|haikuWindowResized
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
name|bool
name|zoomInProgress
parameter_list|)
block|{
specifier|const
name|QRect
name|newGeometry
argument_list|(
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|newGeometry
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleGeometryChange
argument_list|(
name|window
argument_list|()
argument_list|,
name|newGeometry
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newGeometry
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|m_windowState
operator|==
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|&&
operator|!
name|zoomInProgress
condition|)
block|{
comment|// the user has resized the window while maximized -> reset maximized flag
name|m_windowState
operator|=
name|Qt
operator|::
name|WindowNoState
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowStateChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|m_windowState
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|haikuWindowActivated
name|void
name|QHaikuWindow
operator|::
name|haikuWindowActivated
parameter_list|(
name|bool
name|activated
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|activated
condition|?
name|window
argument_list|()
else|:
name|Q_NULLPTR
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|haikuWindowMinimized
name|void
name|QHaikuWindow
operator|::
name|haikuWindowMinimized
parameter_list|(
name|bool
name|minimize
parameter_list|)
block|{
name|m_windowState
operator|=
operator|(
name|minimize
condition|?
name|Qt
operator|::
name|WindowMinimized
else|:
name|Qt
operator|::
name|WindowNoState
operator|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowStateChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|m_windowState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|haikuWindowZoomed
name|void
name|QHaikuWindow
operator|::
name|haikuWindowZoomed
parameter_list|()
block|{
name|m_windowState
operator|=
operator|(
name|m_windowState
operator|==
name|Qt
operator|::
name|WindowMaximized
condition|?
name|Qt
operator|::
name|WindowNoState
else|:
name|Qt
operator|::
name|WindowMaximized
operator|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleWindowStateChanged
argument_list|(
name|window
argument_list|()
argument_list|,
name|m_windowState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|haikuWindowQuitRequested
name|void
name|QHaikuWindow
operator|::
name|haikuWindowQuitRequested
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleCloseEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|haikuMouseEvent
name|void
name|QHaikuWindow
operator|::
name|haikuMouseEvent
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|localPosition
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|globalPosition
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Qt
operator|::
name|MouseEventSource
name|source
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|localPosition
argument_list|,
name|globalPosition
argument_list|,
name|buttons
argument_list|,
name|modifiers
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|haikuWheelEvent
name|void
name|QHaikuWindow
operator|::
name|haikuWheelEvent
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|localPosition
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|globalPosition
parameter_list|,
name|int
name|delta
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|localPosition
argument_list|,
name|globalPosition
argument_list|,
name|delta
argument_list|,
name|orientation
argument_list|,
name|modifiers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|haikuKeyEvent
name|void
name|QHaikuWindow
operator|::
name|haikuKeyEvent
parameter_list|(
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|int
name|key
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|type
argument_list|,
name|key
argument_list|,
name|modifiers
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|haikuEnteredView
name|void
name|QHaikuWindow
operator|::
name|haikuEnteredView
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|haikuExitedView
name|void
name|QHaikuWindow
operator|::
name|haikuExitedView
parameter_list|()
block|{
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|haikuDrawRequest
name|void
name|QHaikuWindow
operator|::
name|haikuDrawRequest
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QWindowSystemInterface
operator|::
name|handleExposeEvent
argument_list|(
name|window
argument_list|()
argument_list|,
name|QRegion
argument_list|(
name|rect
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
