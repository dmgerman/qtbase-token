begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Tobias Koenig<tobias.koenig@kdab.com> ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qhaikubuffer.h"
end_include
begin_include
include|#
directive|include
file|<Bitmap.h>
end_include
begin_include
include|#
directive|include
file|<Rect.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QHaikuBuffer
name|QHaikuBuffer
operator|::
name|QHaikuBuffer
parameter_list|()
member_init_list|:
name|m_buffer
argument_list|(
name|Q_NULLPTR
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QHaikuBuffer
name|QHaikuBuffer
operator|::
name|QHaikuBuffer
parameter_list|(
name|BBitmap
modifier|*
name|buffer
parameter_list|)
member_init_list|:
name|m_buffer
argument_list|(
name|buffer
argument_list|)
block|{
comment|// wrap buffer in an image
name|m_image
operator|=
name|QImage
argument_list|(
cast|static_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|m_buffer
operator|->
name|Bits
argument_list|()
argument_list|)
argument_list|,
name|m_buffer
operator|->
name|Bounds
argument_list|()
operator|.
name|right
argument_list|,
name|m_buffer
operator|->
name|Bounds
argument_list|()
operator|.
name|bottom
argument_list|,
name|m_buffer
operator|->
name|BytesPerRow
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|nativeBuffer
name|BBitmap
modifier|*
name|QHaikuBuffer
operator|::
name|nativeBuffer
parameter_list|()
specifier|const
block|{
return|return
name|m_buffer
return|;
block|}
end_function
begin_function
DECL|function|image
specifier|const
name|QImage
modifier|*
name|QHaikuBuffer
operator|::
name|image
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|m_buffer
operator|!=
name|Q_NULLPTR
operator|)
condition|?
operator|&
name|m_image
else|:
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|image
name|QImage
modifier|*
name|QHaikuBuffer
operator|::
name|image
parameter_list|()
block|{
return|return
operator|(
name|m_buffer
operator|!=
name|Q_NULLPTR
operator|)
condition|?
operator|&
name|m_image
else|:
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QHaikuBuffer
operator|::
name|rect
parameter_list|()
specifier|const
block|{
return|return
name|m_image
operator|.
name|rect
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
