begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Tobias Koenig<tobias.koenig@kdab.com> ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qhaikuutils.h"
end_include
begin_function
DECL|function|imageFormatToColorSpace
name|color_space
name|QHaikuUtils
operator|::
name|imageFormatToColorSpace
parameter_list|(
name|QImage
operator|::
name|Format
name|format
parameter_list|)
block|{
name|color_space
name|colorSpace
init|=
name|B_NO_COLOR_SPACE
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_Invalid
case|:
name|colorSpace
operator|=
name|B_NO_COLOR_SPACE
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_MonoLSB
case|:
name|colorSpace
operator|=
name|B_GRAY1
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
name|colorSpace
operator|=
name|B_CMAP8
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
name|colorSpace
operator|=
name|B_RGB32
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
name|colorSpace
operator|=
name|B_RGBA32
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
name|colorSpace
operator|=
name|B_RGB16
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB555
case|:
name|colorSpace
operator|=
name|B_RGB15
expr_stmt|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB888
case|:
name|colorSpace
operator|=
name|B_RGB24
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"Cannot convert image format %d to color space"
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|colorSpace
return|;
block|}
end_function
begin_function
DECL|function|colorSpaceToImageFormat
name|QImage
operator|::
name|Format
name|QHaikuUtils
operator|::
name|colorSpaceToImageFormat
parameter_list|(
name|color_space
name|colorSpace
parameter_list|)
block|{
name|QImage
operator|::
name|Format
name|format
init|=
name|QImage
operator|::
name|Format_Invalid
decl_stmt|;
switch|switch
condition|(
name|colorSpace
condition|)
block|{
case|case
name|B_NO_COLOR_SPACE
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_Invalid
expr_stmt|;
break|break;
case|case
name|B_GRAY1
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_MonoLSB
expr_stmt|;
break|break;
case|case
name|B_CMAP8
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_Indexed8
expr_stmt|;
break|break;
case|case
name|B_RGB32
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
break|break;
case|case
name|B_RGBA32
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
break|break;
case|case
name|B_RGB16
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
break|break;
case|case
name|B_RGB15
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB555
expr_stmt|;
break|break;
case|case
name|B_RGB24
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB888
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"Cannot convert color space %d to image format"
argument_list|,
name|colorSpace
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|format
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
