begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Tobias Koenig<tobias.koenig@kdab.com> ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qhaikucursor.h"
end_include
begin_include
include|#
directive|include
file|"qhaikurasterwindow.h"
end_include
begin_include
include|#
directive|include
file|<Cursor.h>
end_include
begin_constructor
DECL|function|QHaikuCursor
name|QHaikuCursor
operator|::
name|QHaikuCursor
parameter_list|()
block|{
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|,
name|B_CURSOR_ID_SYSTEM_DEFAULT
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|UpArrowCursor
argument_list|,
name|B_CURSOR_ID_RESIZE_NORTH
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|CrossCursor
argument_list|,
name|B_CURSOR_ID_CROSS_HAIR
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|WaitCursor
argument_list|,
name|B_CURSOR_ID_PROGRESS
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|IBeamCursor
argument_list|,
name|B_CURSOR_ID_I_BEAM
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|SizeVerCursor
argument_list|,
name|B_CURSOR_ID_RESIZE_NORTH_SOUTH
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|SizeHorCursor
argument_list|,
name|B_CURSOR_ID_RESIZE_EAST_WEST
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|SizeBDiagCursor
argument_list|,
name|B_CURSOR_ID_RESIZE_NORTH_EAST_SOUTH_WEST
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|SizeFDiagCursor
argument_list|,
name|B_CURSOR_ID_RESIZE_NORTH_WEST_SOUTH_EAST
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|SizeAllCursor
argument_list|,
name|B_CURSOR_ID_MOVE
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|BlankCursor
argument_list|,
name|B_CURSOR_ID_NO_CURSOR
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|SplitVCursor
argument_list|,
name|B_CURSOR_ID_RESIZE_NORTH_SOUTH
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|SplitHCursor
argument_list|,
name|B_CURSOR_ID_RESIZE_EAST_WEST
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|PointingHandCursor
argument_list|,
name|B_CURSOR_ID_FOLLOW_LINK
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|ForbiddenCursor
argument_list|,
name|B_CURSOR_ID_NOT_ALLOWED
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|OpenHandCursor
argument_list|,
name|B_CURSOR_ID_GRAB
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|ClosedHandCursor
argument_list|,
name|B_CURSOR_ID_GRABBING
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|WhatsThisCursor
argument_list|,
name|B_CURSOR_ID_HELP
argument_list|)
expr_stmt|;
name|m_cursorIds
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|BusyCursor
argument_list|,
name|B_CURSOR_ID_PROGRESS
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|changeCursor
name|void
name|QHaikuCursor
operator|::
name|changeCursor
parameter_list|(
name|QCursor
modifier|*
name|windowCursor
parameter_list|,
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
if|if
condition|(
operator|!
name|window
condition|)
return|return;
name|BWindow
modifier|*
name|haikuWindow
init|=
cast|reinterpret_cast
argument_list|<
name|BWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|winId
argument_list|()
argument_list|)
decl_stmt|;
comment|// We expect that every BWindow has exactly one BView as child,
comment|// so we can use CurrentFocus to retrieve it and call SetViewCursor
comment|// to change the cursor for the whole window.
if|if
condition|(
operator|!
name|windowCursor
condition|)
block|{
name|BView
modifier|*
name|view
init|=
name|haikuWindow
operator|->
name|CurrentFocus
argument_list|()
decl_stmt|;
if|if
condition|(
name|view
condition|)
block|{
name|view
operator|->
name|SetViewCursor
argument_list|(
name|B_CURSOR_SYSTEM_DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|Qt
operator|::
name|CursorShape
name|shape
init|=
name|windowCursor
operator|->
name|shape
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m_cursors
operator|.
name|contains
argument_list|(
name|shape
argument_list|)
condition|)
name|m_cursors
operator|.
name|insert
argument_list|(
name|shape
argument_list|,
operator|new
name|BCursor
argument_list|(
name|m_cursorIds
operator|.
name|value
argument_list|(
name|shape
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BView
modifier|*
name|view
init|=
name|haikuWindow
operator|->
name|CurrentFocus
argument_list|()
decl_stmt|;
if|if
condition|(
name|view
condition|)
block|{
name|view
operator|->
name|LockLooper
argument_list|()
expr_stmt|;
name|view
operator|->
name|SetViewCursor
argument_list|(
name|m_cursors
operator|.
name|value
argument_list|(
name|shape
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|->
name|UnlockLooper
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
end_unit
