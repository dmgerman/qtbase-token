begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Tobias Koenig<tobias.koenig@kdab.com> ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qhaikuapplication.h"
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QFileOpenEvent>
end_include
begin_include
include|#
directive|include
file|<Entry.h>
end_include
begin_include
include|#
directive|include
file|<Path.h>
end_include
begin_constructor
DECL|function|QHaikuApplication
name|QHaikuApplication
operator|::
name|QHaikuApplication
parameter_list|(
specifier|const
name|char
modifier|*
name|signature
parameter_list|)
member_init_list|:
name|BApplication
argument_list|(
name|signature
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|QuitRequested
name|bool
name|QHaikuApplication
operator|::
name|QuitRequested
parameter_list|()
block|{
name|QEvent
name|quitEvent
argument_list|(
name|QEvent
operator|::
name|Quit
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
operator|&
name|quitEvent
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|RefsReceived
name|void
name|QHaikuApplication
operator|::
name|RefsReceived
parameter_list|(
name|BMessage
modifier|*
name|message
parameter_list|)
block|{
name|uint32
name|type
decl_stmt|;
name|int32
name|count
decl_stmt|;
specifier|const
name|status_t
name|status
init|=
name|message
operator|->
name|GetInfo
argument_list|(
literal|"refs"
argument_list|,
operator|&
name|type
argument_list|,
operator|&
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|B_OK
operator|&&
name|type
operator|==
name|B_REF_TYPE
condition|)
block|{
name|entry_ref
name|ref
decl_stmt|;
for|for
control|(
name|int32
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|message
operator|->
name|FindRef
argument_list|(
literal|"refs"
argument_list|,
name|i
argument_list|,
operator|&
name|ref
argument_list|)
operator|==
name|B_OK
condition|)
block|{
specifier|const
name|BPath
name|path
argument_list|(
operator|&
name|ref
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
operator|new
name|QFileOpenEvent
argument_list|(
name|QFile
operator|::
name|decodeName
argument_list|(
name|path
operator|.
name|Path
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|BApplication
operator|::
name|RefsReceived
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
