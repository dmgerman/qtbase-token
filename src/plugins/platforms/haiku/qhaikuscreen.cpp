begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Tobias Koenig<tobias.koenig@kdab.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qhaikuscreen.h"
end_include
begin_include
include|#
directive|include
file|"qhaikucursor.h"
end_include
begin_include
include|#
directive|include
file|"qhaikuutils.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<Bitmap.h>
end_include
begin_include
include|#
directive|include
file|<Screen.h>
end_include
begin_include
include|#
directive|include
file|<Window.h>
end_include
begin_constructor
DECL|function|QHaikuScreen
name|QHaikuScreen
operator|::
name|QHaikuScreen
parameter_list|()
member_init_list|:
name|m_screen
argument_list|(
operator|new
name|BScreen
argument_list|(
name|B_MAIN_SCREEN_ID
argument_list|)
argument_list|)
member_init_list|,
name|m_cursor
argument_list|(
operator|new
name|QHaikuCursor
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|m_screen
operator|->
name|IsValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QHaikuScreen
name|QHaikuScreen
operator|::
name|~
name|QHaikuScreen
parameter_list|()
block|{
operator|delete
name|m_cursor
expr_stmt|;
name|m_cursor
operator|=
name|Q_NULLPTR
expr_stmt|;
operator|delete
name|m_screen
expr_stmt|;
name|m_screen
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|grabWindow
name|QPixmap
name|QHaikuScreen
operator|::
name|grabWindow
parameter_list|(
name|WId
name|winId
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
condition|)
return|return
name|QPixmap
argument_list|()
return|;
name|BScreen
name|screen
argument_list|(
name|Q_NULLPTR
argument_list|)
decl_stmt|;
name|BBitmap
modifier|*
name|bitmap
init|=
name|Q_NULLPTR
decl_stmt|;
name|screen
operator|.
name|GetBitmap
argument_list|(
operator|&
name|bitmap
argument_list|)
expr_stmt|;
specifier|const
name|BRect
name|frame
init|=
operator|(
name|winId
condition|?
operator|(
operator|(
name|BWindow
operator|*
operator|)
name|winId
operator|)
operator|->
name|Frame
argument_list|()
else|:
name|screen
operator|.
name|Frame
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|int
name|absoluteX
init|=
name|frame
operator|.
name|left
operator|+
name|x
decl_stmt|;
specifier|const
name|int
name|absoluteY
init|=
name|frame
operator|.
name|top
operator|+
name|y
decl_stmt|;
if|if
condition|(
name|width
operator|<
literal|0
condition|)
name|width
operator|=
name|frame
operator|.
name|Width
argument_list|()
operator|-
name|x
expr_stmt|;
if|if
condition|(
name|height
operator|<
literal|0
condition|)
name|height
operator|=
name|frame
operator|.
name|Height
argument_list|()
operator|-
name|y
expr_stmt|;
specifier|const
name|QImage
operator|::
name|Format
name|format
init|=
name|QHaikuUtils
operator|::
name|colorSpaceToImageFormat
argument_list|(
name|bitmap
operator|->
name|ColorSpace
argument_list|()
argument_list|)
decl_stmt|;
comment|// get image of complete screen
name|QImage
name|image
argument_list|(
operator|(
name|uchar
operator|*
operator|)
name|bitmap
operator|->
name|Bits
argument_list|()
argument_list|,
name|screen
operator|.
name|Frame
argument_list|()
operator|.
name|Width
argument_list|()
operator|+
literal|1
argument_list|,
name|screen
operator|.
name|Frame
argument_list|()
operator|.
name|Height
argument_list|()
operator|+
literal|1
argument_list|,
name|bitmap
operator|->
name|BytesPerRow
argument_list|()
argument_list|,
name|format
argument_list|)
decl_stmt|;
comment|// extract the area of the requested window
name|QRect
name|grabRect
argument_list|(
name|absoluteX
argument_list|,
name|absoluteY
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|image
operator|=
name|image
operator|.
name|copy
argument_list|(
name|grabRect
argument_list|)
expr_stmt|;
operator|delete
name|bitmap
expr_stmt|;
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|geometry
name|QRect
name|QHaikuScreen
operator|::
name|geometry
parameter_list|()
specifier|const
block|{
specifier|const
name|BRect
name|frame
init|=
name|m_screen
operator|->
name|Frame
argument_list|()
decl_stmt|;
return|return
name|QRect
argument_list|(
name|frame
operator|.
name|left
argument_list|,
name|frame
operator|.
name|top
argument_list|,
name|frame
operator|.
name|right
operator|-
name|frame
operator|.
name|left
argument_list|,
name|frame
operator|.
name|bottom
operator|-
name|frame
operator|.
name|top
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|depth
name|int
name|QHaikuScreen
operator|::
name|depth
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|format
argument_list|()
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_Invalid
case|:
return|return
literal|0
return|;
break|break;
case|case
name|QImage
operator|::
name|Format_MonoLSB
case|:
return|return
literal|1
return|;
break|break;
case|case
name|QImage
operator|::
name|Format_Indexed8
case|:
return|return
literal|8
return|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
case|case
name|QImage
operator|::
name|Format_RGB555
case|:
return|return
literal|16
return|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB888
case|:
return|return
literal|24
return|;
break|break;
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
default|default:
return|return
literal|32
return|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|format
name|QImage
operator|::
name|Format
name|QHaikuScreen
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|QHaikuUtils
operator|::
name|colorSpaceToImageFormat
argument_list|(
name|m_screen
operator|->
name|ColorSpace
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|cursor
name|QPlatformCursor
modifier|*
name|QHaikuScreen
operator|::
name|cursor
parameter_list|()
specifier|const
block|{
return|return
name|m_cursor
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
