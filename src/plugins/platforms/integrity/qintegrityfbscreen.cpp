begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qintegrityfbscreen.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qfbcursor_p.h>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qfbwindow_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QRegularExpression>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<INTEGRITY.h>
end_include
begin_include
include|#
directive|include
file|<memory_region.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|determineFormat
specifier|static
name|QImage
operator|::
name|Format
name|determineFormat
parameter_list|(
specifier|const
name|FBInfo
modifier|*
name|fbinfo
parameter_list|)
block|{
name|QImage
operator|::
name|Format
name|format
init|=
name|QImage
operator|::
name|Format_Invalid
decl_stmt|;
switch|switch
condition|(
name|fbinfo
operator|->
name|BitsPerPixel
condition|)
block|{
case|case
literal|32
case|:
if|if
condition|(
name|fbinfo
operator|->
name|Alpha
operator|.
name|Bits
condition|)
name|format
operator|=
name|QImage
operator|::
name|Format_ARGB32
expr_stmt|;
else|else
name|format
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB888
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB666
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB16
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB555
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_RGB444
expr_stmt|;
break|break;
case|case
literal|8
case|:
break|break;
case|case
literal|1
case|:
name|format
operator|=
name|QImage
operator|::
name|Format_Mono
expr_stmt|;
comment|//###: LSB???
break|break;
default|default:
break|break;
block|}
return|return
name|format
return|;
block|}
end_function
begin_constructor
DECL|function|QIntegrityFbScreen
name|QIntegrityFbScreen
operator|::
name|QIntegrityFbScreen
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|args
parameter_list|)
member_init_list|:
name|mArgs
argument_list|(
name|args
argument_list|)
member_init_list|,
name|mBlitter
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QIntegrityFbScreen
name|QIntegrityFbScreen
operator|::
name|~
name|QIntegrityFbScreen
parameter_list|()
block|{
if|if
condition|(
name|mFbh
condition|)
block|{
name|MemoryRegion
name|vmr
decl_stmt|;
name|CheckSuccess
argument_list|(
name|gh_FB_close_munmap
argument_list|(
name|mFbh
argument_list|,
operator|&
name|vmr
argument_list|)
argument_list|)
expr_stmt|;
name|CheckSuccess
argument_list|(
name|DeallocateMemoryRegionWithCookie
argument_list|(
name|__ghs_VirtualMemoryRegionPool
argument_list|,
name|vmr
argument_list|,
name|mVMRCookie
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|delete
name|mBlitter
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|initialize
name|bool
name|QIntegrityFbScreen
operator|::
name|initialize
parameter_list|()
block|{
name|Error
name|err
decl_stmt|;
name|QRegularExpression
name|fbRx
argument_list|(
name|QLatin1String
argument_list|(
literal|"fb=(.*)"
argument_list|)
argument_list|)
decl_stmt|;
name|QRegularExpression
name|sizeRx
argument_list|(
name|QLatin1String
argument_list|(
literal|"size=(\\d+)x(\\d+)"
argument_list|)
argument_list|)
decl_stmt|;
name|QRegularExpression
name|offsetRx
argument_list|(
name|QLatin1String
argument_list|(
literal|"offset=(\\d+)x(\\d+)"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|fbDevice
decl_stmt|;
name|QRect
name|userGeometry
decl_stmt|;
comment|// Parse arguments
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|arg
decl|,
name|mArgs
control|)
block|{
name|QRegularExpressionMatch
name|match
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|contains
argument_list|(
name|sizeRx
argument_list|,
operator|&
name|match
argument_list|)
condition|)
name|userGeometry
operator|.
name|setSize
argument_list|(
name|QSize
argument_list|(
name|match
operator|.
name|captured
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|match
operator|.
name|captured
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|contains
argument_list|(
name|offsetRx
argument_list|,
operator|&
name|match
argument_list|)
condition|)
name|userGeometry
operator|.
name|setTopLeft
argument_list|(
name|QPoint
argument_list|(
name|match
operator|.
name|captured
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|match
operator|.
name|captured
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|arg
operator|.
name|contains
argument_list|(
name|fbRx
argument_list|,
operator|&
name|match
argument_list|)
condition|)
name|fbDevice
operator|=
name|match
operator|.
name|captured
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fbDevice
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|/* no driver specified, try to get default one */
name|err
operator|=
name|gh_FB_get_driver_by_name
argument_list|(
name|NULL
argument_list|,
operator|&
name|mFbd
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|Success
condition|)
block|{
name|uintptr_t
name|context
init|=
literal|0
decl_stmt|;
comment|/* no default driver, take the first available one */
name|err
operator|=
name|gh_FB_get_next_driver
argument_list|(
operator|&
name|context
argument_list|,
operator|&
name|mFbd
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|err
operator|=
name|gh_FB_get_driver_by_name
argument_list|(
name|qPrintable
argument_list|(
name|fbDevice
argument_list|)
argument_list|,
operator|&
name|mFbd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|!=
name|Success
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Failed to open framebuffer %s: %d"
argument_list|,
name|qPrintable
argument_list|(
name|fbDevice
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|memset
argument_list|(
operator|&
name|mFbinfo
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|FBInfo
argument_list|)
argument_list|)
expr_stmt|;
name|CheckSuccess
argument_list|(
name|gh_FB_check_info
argument_list|(
name|mFbd
argument_list|,
operator|&
name|mFbinfo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|userGeometry
operator|.
name|width
argument_list|()
operator|&&
name|userGeometry
operator|.
name|height
argument_list|()
condition|)
block|{
name|mFbinfo
operator|.
name|Width
operator|=
name|userGeometry
operator|.
name|width
argument_list|()
expr_stmt|;
name|mFbinfo
operator|.
name|Height
operator|=
name|userGeometry
operator|.
name|height
argument_list|()
expr_stmt|;
name|err
operator|=
name|gh_FB_check_info
argument_list|(
name|mFbd
argument_list|,
operator|&
name|mFbinfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|Success
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Unsupported resolution %dx%d for %s: %d"
argument_list|,
name|userGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|userGeometry
operator|.
name|height
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|fbDevice
argument_list|)
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|mFbinfo
operator|.
name|MMapSize
condition|)
block|{
name|err
operator|=
name|AllocateAnyMemoryRegionWithCookie
argument_list|(
name|__ghs_VirtualMemoryRegionPool
argument_list|,
name|mFbinfo
operator|.
name|MMapSize
argument_list|,
operator|&
name|mVMR
argument_list|,
operator|&
name|mVMRCookie
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|Success
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Could not mmap: %d"
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|err
operator|=
name|gh_FB_open_mmap
argument_list|(
name|mFbd
argument_list|,
operator|&
name|mFbinfo
argument_list|,
name|mVMR
argument_list|,
operator|&
name|mFbh
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|err
operator|=
name|gh_FB_open
argument_list|(
name|mFbd
argument_list|,
operator|&
name|mFbinfo
argument_list|,
operator|&
name|mFbh
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|!=
name|Success
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Could not open framebuffer: %d"
argument_list|,
name|err
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|CheckSuccess
argument_list|(
name|gh_FB_get_info
argument_list|(
name|mFbh
argument_list|,
operator|&
name|mFbinfo
argument_list|)
argument_list|)
expr_stmt|;
name|mDepth
operator|=
name|mFbinfo
operator|.
name|BitsPerPixel
expr_stmt|;
name|mGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|mFbinfo
operator|.
name|Width
argument_list|,
name|mFbinfo
operator|.
name|Height
argument_list|)
expr_stmt|;
name|mFormat
operator|=
name|determineFormat
argument_list|(
operator|&
name|mFbinfo
argument_list|)
expr_stmt|;
specifier|const
name|int
name|dpi
init|=
literal|100
decl_stmt|;
name|int
name|mmWidth
init|=
name|qRound
argument_list|(
operator|(
name|mFbinfo
operator|.
name|Width
operator|*
literal|25.4
operator|)
operator|/
name|dpi
argument_list|)
decl_stmt|;
name|int
name|mmHeight
init|=
name|qRound
argument_list|(
operator|(
name|mFbinfo
operator|.
name|Height
operator|*
literal|25.4
operator|)
operator|/
name|dpi
argument_list|)
decl_stmt|;
name|mPhysicalSize
operator|=
name|QSizeF
argument_list|(
name|mmWidth
argument_list|,
name|mmHeight
argument_list|)
expr_stmt|;
name|QFbScreen
operator|::
name|initializeCompositor
argument_list|()
expr_stmt|;
name|mFbScreenImage
operator|=
name|QImage
argument_list|(
operator|(
name|uchar
operator|*
operator|)
name|mFbinfo
operator|.
name|Start
argument_list|,
name|mFbinfo
operator|.
name|Width
argument_list|,
name|mFbinfo
operator|.
name|Height
argument_list|,
name|mFbinfo
operator|.
name|BytesPerLine
argument_list|,
name|mFormat
argument_list|)
expr_stmt|;
name|mCursor
operator|=
operator|new
name|QFbCursor
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|doRedraw
name|QRegion
name|QIntegrityFbScreen
operator|::
name|doRedraw
parameter_list|()
block|{
name|QRegion
name|touched
init|=
name|QFbScreen
operator|::
name|doRedraw
argument_list|()
decl_stmt|;
if|if
condition|(
name|touched
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|touched
return|;
if|if
condition|(
operator|!
name|mBlitter
condition|)
name|mBlitter
operator|=
operator|new
name|QPainter
argument_list|(
operator|&
name|mFbScreenImage
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|touched
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FBRect
name|fbrect
init|=
block|{
operator|(
name|uint32_t
operator|)
name|rects
index|[
name|i
index|]
operator|.
name|left
argument_list|()
block|,
operator|(
name|uint32_t
operator|)
name|rects
index|[
name|i
index|]
operator|.
name|top
argument_list|()
block|,
operator|(
name|uint32_t
operator|)
name|rects
index|[
name|i
index|]
operator|.
name|width
argument_list|()
block|,
operator|(
name|uint32_t
operator|)
name|rects
index|[
name|i
index|]
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|mBlitter
operator|->
name|drawImage
argument_list|(
name|rects
index|[
name|i
index|]
argument_list|,
operator|*
name|mScreenImage
argument_list|,
name|rects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|gh_FB_expose
argument_list|(
name|mFbh
argument_list|,
operator|&
name|fbrect
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
return|return
name|touched
return|;
block|}
end_function
begin_comment
comment|// grabWindow() grabs "from the screen" not from the backingstores.
end_comment
begin_comment
comment|// In integrityfb's case it will also include the mouse cursor.
end_comment
begin_function
DECL|function|grabWindow
name|QPixmap
name|QIntegrityFbScreen
operator|::
name|grabWindow
parameter_list|(
name|WId
name|wid
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|wid
condition|)
block|{
if|if
condition|(
name|width
operator|<
literal|0
condition|)
name|width
operator|=
name|mFbScreenImage
operator|.
name|width
argument_list|()
operator|-
name|x
expr_stmt|;
if|if
condition|(
name|height
operator|<
literal|0
condition|)
name|height
operator|=
name|mFbScreenImage
operator|.
name|height
argument_list|()
operator|-
name|y
expr_stmt|;
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|mFbScreenImage
argument_list|)
operator|.
name|copy
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
name|QFbWindow
modifier|*
name|window
init|=
name|windowForId
argument_list|(
name|wid
argument_list|)
decl_stmt|;
if|if
condition|(
name|window
condition|)
block|{
specifier|const
name|QRect
name|geom
init|=
name|window
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|<
literal|0
condition|)
name|width
operator|=
name|geom
operator|.
name|width
argument_list|()
operator|-
name|x
expr_stmt|;
if|if
condition|(
name|height
operator|<
literal|0
condition|)
name|height
operator|=
name|geom
operator|.
name|height
argument_list|()
operator|-
name|y
expr_stmt|;
name|QRect
name|rect
argument_list|(
name|geom
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
decl_stmt|;
name|rect
operator|&=
name|window
operator|->
name|geometry
argument_list|()
expr_stmt|;
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|mFbScreenImage
argument_list|)
operator|.
name|copy
argument_list|(
name|rect
argument_list|)
return|;
block|}
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
