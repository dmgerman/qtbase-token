begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2011 - 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qbbinputcontext_noimf.h"
end_include
begin_include
include|#
directive|include
file|"qbbvirtualkeyboard.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QAbstractSpinBox>
end_include
begin_constructor
DECL|function|QBBInputContext
name|QBBInputContext
operator|::
name|QBBInputContext
parameter_list|()
member_init_list|:
name|QPlatformInputContext
argument_list|()
member_init_list|,
name|m_inputPanelVisible
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_inputPanelLocale
argument_list|(
name|QLocale
operator|::
name|c
argument_list|()
argument_list|)
block|{
name|QBBVirtualKeyboard
modifier|&
name|keyboard
init|=
name|QBBVirtualKeyboard
operator|::
name|instance
argument_list|()
decl_stmt|;
name|connect
argument_list|(
operator|&
name|keyboard
argument_list|,
name|SIGNAL
argument_list|(
name|visibilityChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|keyboardVisibilityChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|keyboard
argument_list|,
name|SIGNAL
argument_list|(
name|localeChanged
argument_list|(
name|QLocale
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|keyboardLocaleChanged
argument_list|(
name|QLocale
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|keyboardVisibilityChanged
argument_list|(
name|keyboard
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|keyboardLocaleChanged
argument_list|(
name|keyboard
operator|.
name|locale
argument_list|()
argument_list|)
expr_stmt|;
name|QInputMethod
modifier|*
name|inputMethod
init|=
name|qApp
operator|->
name|inputMethod
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|inputMethod
argument_list|,
name|SIGNAL
argument_list|(
name|inputItemChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|inputItemChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QBBInputContext
name|QBBInputContext
operator|::
name|~
name|QBBInputContext
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QBBInputContext
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|hasPhysicalKeyboard
name|bool
name|QBBInputContext
operator|::
name|hasPhysicalKeyboard
parameter_list|()
block|{
comment|// TODO: This should query the system to check if a USB keyboard is connected.
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QBBInputContext
operator|::
name|reset
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|filterEvent
name|bool
name|QBBInputContext
operator|::
name|filterEvent
parameter_list|(
specifier|const
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|hasPhysicalKeyboard
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|CloseSoftwareInputPanel
condition|)
block|{
name|QBBVirtualKeyboard
operator|::
name|instance
argument_list|()
operator|.
name|hideKeyboard
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: hiding virtual keyboard"
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|RequestSoftwareInputPanel
condition|)
block|{
name|QBBVirtualKeyboard
operator|::
name|instance
argument_list|()
operator|.
name|showKeyboard
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: requesting virtual keyboard"
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|handleKeyboardEvent
name|bool
name|QBBInputContext
operator|::
name|handleKeyboardEvent
parameter_list|(
name|int
name|flags
parameter_list|,
name|int
name|sym
parameter_list|,
name|int
name|mod
parameter_list|,
name|int
name|scan
parameter_list|,
name|int
name|cap
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|sym
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|mod
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|cap
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|showInputPanel
name|void
name|QBBInputContext
operator|::
name|showInputPanel
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QBBINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QBBVirtualKeyboard
operator|::
name|instance
argument_list|()
operator|.
name|showKeyboard
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideInputPanel
name|void
name|QBBInputContext
operator|::
name|hideInputPanel
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QBBINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QBBVirtualKeyboard
operator|::
name|instance
argument_list|()
operator|.
name|hideKeyboard
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isInputPanelVisible
name|bool
name|QBBInputContext
operator|::
name|isInputPanelVisible
parameter_list|()
specifier|const
block|{
return|return
name|m_inputPanelVisible
return|;
block|}
end_function
begin_function
DECL|function|locale
name|QLocale
name|QBBInputContext
operator|::
name|locale
parameter_list|()
specifier|const
block|{
return|return
name|m_inputPanelLocale
return|;
block|}
end_function
begin_function
DECL|function|keyboardVisibilityChanged
name|void
name|QBBInputContext
operator|::
name|keyboardVisibilityChanged
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QBBINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"visible="
operator|<<
name|visible
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|m_inputPanelVisible
operator|!=
name|visible
condition|)
block|{
name|m_inputPanelVisible
operator|=
name|visible
expr_stmt|;
name|emitInputPanelVisibleChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|keyboardLocaleChanged
name|void
name|QBBInputContext
operator|::
name|keyboardLocaleChanged
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QBBINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"locale="
operator|<<
name|locale
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|m_inputPanelLocale
operator|!=
name|locale
condition|)
block|{
name|m_inputPanelLocale
operator|=
name|locale
expr_stmt|;
name|emitLocaleChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|inputItemChanged
name|void
name|QBBInputContext
operator|::
name|inputItemChanged
parameter_list|()
block|{
name|QInputMethod
modifier|*
name|inputMethod
init|=
name|qApp
operator|->
name|inputMethod
argument_list|()
decl_stmt|;
name|QObject
modifier|*
name|inputItem
init|=
name|inputMethod
operator|->
name|inputItem
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"input item="
operator|<<
name|inputItem
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|inputItem
condition|)
block|{
if|if
condition|(
name|m_inputPanelVisible
condition|)
name|hideInputPanel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|inputItem
argument_list|)
condition|)
block|{
name|QBBVirtualKeyboard
operator|::
name|instance
argument_list|()
operator|.
name|setKeyboardMode
argument_list|(
name|QBBVirtualKeyboard
operator|::
name|NumPunc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QBBVirtualKeyboard
operator|::
name|instance
argument_list|()
operator|.
name|setKeyboardMode
argument_list|(
name|QBBVirtualKeyboard
operator|::
name|Default
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_inputPanelVisible
condition|)
name|showInputPanel
argument_list|()
expr_stmt|;
block|}
block|}
end_function
end_unit
