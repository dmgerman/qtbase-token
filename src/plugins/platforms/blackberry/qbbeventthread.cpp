begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2011 - 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qbbeventthread.h"
end_include
begin_include
include|#
directive|include
file|"qbbintegration.h"
end_include
begin_include
include|#
directive|include
file|"qbbkeytranslator.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QBB_IMF
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qbbinputcontext_imf.h"
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|"qbbinputcontext_noimf.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPlatformScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/keycodes.h>
end_include
begin_include
include|#
directive|include
file|<cctype>
end_include
begin_constructor
DECL|function|QBBEventThread
name|QBBEventThread
operator|::
name|QBBEventThread
parameter_list|(
name|screen_context_t
name|context
parameter_list|,
name|QPlatformScreen
modifier|&
name|screen
parameter_list|)
member_init_list|:
name|QThread
argument_list|()
member_init_list|,
name|m_screenContext
argument_list|(
name|context
argument_list|)
member_init_list|,
name|m_platformScreen
argument_list|(
name|screen
argument_list|)
member_init_list|,
name|m_quit
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_lastButtonState
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
member_init_list|,
name|m_lastMouseWindow
argument_list|(
literal|0
argument_list|)
block|{
comment|// Create a touch device
name|m_touchDevice
operator|=
operator|new
name|QTouchDevice
expr_stmt|;
name|m_touchDevice
operator|->
name|setType
argument_list|(
name|QTouchDevice
operator|::
name|TouchScreen
argument_list|)
expr_stmt|;
name|m_touchDevice
operator|->
name|setCapabilities
argument_list|(
name|QTouchDevice
operator|::
name|Position
operator||
name|QTouchDevice
operator|::
name|Area
operator||
name|QTouchDevice
operator|::
name|Pressure
operator||
name|QTouchDevice
operator|::
name|NormalizedPosition
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
argument_list|(
name|m_touchDevice
argument_list|)
expr_stmt|;
comment|// initialize array of touch points
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MaximumTouchPoints
condition|;
name|i
operator|++
control|)
block|{
comment|// map array index to id
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|id
operator|=
name|i
expr_stmt|;
comment|// pressure is not supported - use default
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|pressure
operator|=
literal|1.0
expr_stmt|;
comment|// nothing touching
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QBBEventThread
name|QBBEventThread
operator|::
name|~
name|QBBEventThread
parameter_list|()
block|{
comment|// block until thread terminates
name|shutdown
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|run
name|void
name|QBBEventThread
operator|::
name|run
parameter_list|()
block|{
name|screen_event_t
name|event
decl_stmt|;
comment|// create screen event
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|result
init|=
name|screen_create_event
argument_list|(
operator|&
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to create event, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: event loop started"
expr_stmt|;
endif|#
directive|endif
comment|// loop indefinitely
while|while
condition|(
operator|!
name|m_quit
condition|)
block|{
comment|// block until screen event is available
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_get_event
argument_list|(
name|m_screenContext
argument_list|,
name|event
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to get event, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// process received event
name|dispatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: event loop stopped"
expr_stmt|;
endif|#
directive|endif
comment|// cleanup
name|screen_destroy_event
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shutdown
name|void
name|QBBEventThread
operator|::
name|shutdown
parameter_list|()
block|{
name|screen_event_t
name|event
decl_stmt|;
comment|// create screen event
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|result
init|=
name|screen_create_event
argument_list|(
operator|&
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to create event, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// set the event type as user
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|type
init|=
name|SCREEN_EVENT_USER
decl_stmt|;
name|result
operator|=
name|screen_set_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_TYPE
argument_list|,
operator|&
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to set event type, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: ignore SCREEN_PROPERTY_USER_DATA; treat all user events as shutdown events
comment|// post event to event loop so it will wake up and die
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_send_event
argument_list|(
name|m_screenContext
argument_list|,
name|event
argument_list|,
name|getpid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to set event type, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// cleanup
name|screen_destroy_event
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: event loop shutdown begin"
expr_stmt|;
endif|#
directive|endif
comment|// block until thread terminates
name|wait
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: event loop shutdown end"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|dispatchEvent
name|void
name|QBBEventThread
operator|::
name|dispatchEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|)
block|{
comment|// get the event type
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|qnxType
decl_stmt|;
name|int
name|result
init|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_TYPE
argument_list|,
operator|&
name|qnxType
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event type, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|qnxType
condition|)
block|{
case|case
name|SCREEN_EVENT_MTOUCH_TOUCH
case|:
case|case
name|SCREEN_EVENT_MTOUCH_MOVE
case|:
case|case
name|SCREEN_EVENT_MTOUCH_RELEASE
case|:
name|handleTouchEvent
argument_list|(
name|event
argument_list|,
name|qnxType
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_KEYBOARD
case|:
name|handleKeyboardEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_POINTER
case|:
name|handlePointerEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_CLOSE
case|:
name|handleCloseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_USER
case|:
comment|// treat all user events as shutdown requests
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: QNX user event"
expr_stmt|;
endif|#
directive|endif
name|m_quit
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
comment|// event ignored
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: QNX unknown event"
expr_stmt|;
endif|#
directive|endif
break|break;
block|}
block|}
end_function
begin_function
DECL|function|handleKeyboardEvent
name|void
name|QBBEventThread
operator|::
name|handleKeyboardEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|)
block|{
comment|// get flags of key event
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|flags
decl_stmt|;
name|int
name|result
init|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_KEY_FLAGS
argument_list|,
operator|&
name|flags
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event flags, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// get key code
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|sym
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_KEY_SYM
argument_list|,
operator|&
name|sym
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event sym, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|int
name|modifiers
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_KEY_MODIFIERS
argument_list|,
operator|&
name|modifiers
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event modifiers, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|int
name|scan
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_KEY_SCAN
argument_list|,
operator|&
name|scan
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event modifiers, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|int
name|cap
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_KEY_CAP
argument_list|,
operator|&
name|cap
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event cap, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|injectKeyboardEvent
argument_list|(
name|flags
argument_list|,
name|sym
argument_list|,
name|modifiers
argument_list|,
name|scan
argument_list|,
name|cap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|injectKeyboardEvent
name|void
name|QBBEventThread
operator|::
name|injectKeyboardEvent
parameter_list|(
name|int
name|flags
parameter_list|,
name|int
name|sym
parameter_list|,
name|int
name|modifiers
parameter_list|,
name|int
name|scan
parameter_list|,
name|int
name|cap
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|qtMod
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
if|if
condition|(
name|modifiers
operator|&
name|KEYMOD_SHIFT
condition|)
name|qtMod
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|modifiers
operator|&
name|KEYMOD_CTRL
condition|)
name|qtMod
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|modifiers
operator|&
name|KEYMOD_ALT
condition|)
name|qtMod
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
comment|// determine event type
name|QEvent
operator|::
name|Type
name|type
init|=
operator|(
name|flags
operator|&
name|KEY_DOWN
operator|)
condition|?
name|QEvent
operator|::
name|KeyPress
else|:
name|QEvent
operator|::
name|KeyRelease
decl_stmt|;
comment|// Check if the key cap is valid
if|if
condition|(
name|flags
operator|&
name|KEY_CAP_VALID
condition|)
block|{
name|Qt
operator|::
name|Key
name|key
decl_stmt|;
name|QString
name|keyStr
decl_stmt|;
if|if
condition|(
name|cap
operator|>=
literal|0x20
operator|&&
name|cap
operator|<=
literal|0x0ff
condition|)
block|{
name|key
operator|=
name|Qt
operator|::
name|Key
argument_list|(
name|std
operator|::
name|toupper
argument_list|(
name|cap
argument_list|)
argument_list|)
expr_stmt|;
comment|// Qt expects the CAP to be upper case.
if|if
condition|(
name|qtMod
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
block|{
name|keyStr
operator|=
name|QChar
argument_list|(
call|(
name|int
call|)
argument_list|(
name|key
operator|&
literal|0x3f
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|flags
operator|&
name|KEY_SYM_VALID
condition|)
block|{
name|keyStr
operator|=
name|QChar
argument_list|(
name|sym
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|cap
operator|>
literal|0x0ff
operator|&&
name|cap
operator|<
name|UNICODE_PRIVATE_USE_AREA_FIRST
operator|)
operator|||
name|cap
operator|>
name|UNICODE_PRIVATE_USE_AREA_LAST
condition|)
block|{
name|key
operator|=
operator|(
name|Qt
operator|::
name|Key
operator|)
name|cap
expr_stmt|;
name|keyStr
operator|=
name|QChar
argument_list|(
name|sym
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isKeypadKey
argument_list|(
name|cap
argument_list|)
condition|)
name|qtMod
operator||=
name|Qt
operator|::
name|KeypadModifier
expr_stmt|;
comment|// Is this right?
name|key
operator|=
name|keyTranslator
argument_list|(
name|cap
argument_list|)
expr_stmt|;
block|}
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
name|type
argument_list|,
name|key
argument_list|,
name|qtMod
argument_list|,
name|keyStr
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: Qt key t="
operator|<<
name|type
operator|<<
literal|", k="
operator|<<
name|key
operator|<<
literal|", s="
operator|<<
name|keyStr
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|handlePointerEvent
name|void
name|QBBEventThread
operator|::
name|handlePointerEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|)
block|{
name|errno
operator|=
literal|0
expr_stmt|;
comment|// Query the window that was clicked
name|screen_window_t
name|qnxWindow
decl_stmt|;
name|void
modifier|*
name|handle
decl_stmt|;
name|int
name|result
init|=
name|screen_get_event_property_pv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_WINDOW
argument_list|,
operator|&
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event window, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|qnxWindow
operator|=
cast|static_cast
argument_list|<
name|screen_window_t
argument_list|>
argument_list|(
name|handle
argument_list|)
expr_stmt|;
comment|// Query the button states
name|int
name|buttonState
init|=
literal|0
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_BUTTONS
argument_list|,
operator|&
name|buttonState
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event button state, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Query the window position
name|int
name|windowPos
index|[
literal|2
index|]
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_SOURCE_POSITION
argument_list|,
name|windowPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event window position, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Query the screen position
name|int
name|pos
index|[
literal|2
index|]
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_POSITION
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event position, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Query the wheel delta
name|int
name|wheelDelta
init|=
literal|0
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_MOUSE_WHEEL
argument_list|,
operator|&
name|wheelDelta
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event wheel delta, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Map window handle to top-level QWindow
name|QWindow
modifier|*
name|w
init|=
name|QBBIntegration
operator|::
name|window
argument_list|(
name|qnxWindow
argument_list|)
decl_stmt|;
comment|// Generate enter and leave events as needed.
if|if
condition|(
name|qnxWindow
operator|!=
name|m_lastMouseWindow
condition|)
block|{
name|QWindow
modifier|*
name|wOld
init|=
name|QBBIntegration
operator|::
name|window
argument_list|(
name|m_lastMouseWindow
argument_list|)
decl_stmt|;
if|if
condition|(
name|wOld
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
name|wOld
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: Qt leave, w="
operator|<<
name|wOld
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|w
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: Qt enter, w="
operator|<<
name|w
expr_stmt|;
endif|#
directive|endif
block|}
block|}
name|m_lastMouseWindow
operator|=
name|qnxWindow
expr_stmt|;
comment|// Apply scaling to wheel delta and invert value for Qt. We'll probably want to scale
comment|// this via a system preference at some point. But for now this is a sane value and makes
comment|// the wheel usable.
name|wheelDelta
operator|*=
operator|-
literal|10
expr_stmt|;
comment|// convert point to local coordinates
name|QPoint
name|globalPoint
argument_list|(
name|pos
index|[
literal|0
index|]
argument_list|,
name|pos
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|QPoint
name|localPoint
argument_list|(
name|windowPos
index|[
literal|0
index|]
argument_list|,
name|windowPos
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// Convert buttons.
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
if|if
condition|(
name|buttonState
operator|&
literal|1
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|buttonState
operator|&
literal|2
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
if|if
condition|(
name|buttonState
operator|&
literal|4
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
if|if
condition|(
name|w
condition|)
block|{
comment|// Inject mouse event into Qt only if something has changed.
if|if
condition|(
name|m_lastGlobalMousePoint
operator|!=
name|globalPoint
operator|||
name|m_lastLocalMousePoint
operator|!=
name|localPoint
operator|||
name|m_lastButtonState
operator|!=
name|buttons
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|w
argument_list|,
name|localPoint
argument_list|,
name|globalPoint
argument_list|,
name|buttons
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: Qt mouse, w="
operator|<<
name|w
operator|<<
literal|", ("
operator|<<
name|localPoint
operator|.
name|x
argument_list|()
operator|<<
literal|","
operator|<<
name|localPoint
operator|.
name|y
argument_list|()
operator|<<
literal|"), b="
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|wheelDelta
condition|)
block|{
comment|// Screen only supports a single wheel, so we will assume Vertical orientation for
comment|// now since that is pretty much standard.
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|w
argument_list|,
name|localPoint
argument_list|,
name|globalPoint
argument_list|,
name|wheelDelta
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: Qt wheel, w="
operator|<<
name|w
operator|<<
literal|", ("
operator|<<
name|localPoint
operator|.
name|x
argument_list|()
operator|<<
literal|","
operator|<<
name|localPoint
operator|.
name|y
argument_list|()
operator|<<
literal|"), d="
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|wheelDelta
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
name|m_lastGlobalMousePoint
operator|=
name|globalPoint
expr_stmt|;
name|m_lastLocalMousePoint
operator|=
name|localPoint
expr_stmt|;
name|m_lastButtonState
operator|=
name|buttons
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTouchEvent
name|void
name|QBBEventThread
operator|::
name|handleTouchEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|,
name|int
name|qnxType
parameter_list|)
block|{
comment|// get display coordinates of touch
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|pos
index|[
literal|2
index|]
decl_stmt|;
name|int
name|result
init|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_POSITION
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event position, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// get window coordinates of touch
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|windowPos
index|[
literal|2
index|]
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_SOURCE_POSITION
argument_list|,
name|windowPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event window position, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// determine which finger touched
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|touchId
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_TOUCH_ID
argument_list|,
operator|&
name|touchId
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event touch id, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// determine which window was touched
name|errno
operator|=
literal|0
expr_stmt|;
name|void
modifier|*
name|handle
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_pv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_WINDOW
argument_list|,
operator|&
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event window, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|screen_window_t
name|qnxWindow
init|=
cast|static_cast
argument_list|<
name|screen_window_t
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
comment|// check if finger is valid
if|if
condition|(
name|touchId
operator|<
name|MaximumTouchPoints
condition|)
block|{
comment|// Map window handle to top-level QWindow
name|QWindow
modifier|*
name|w
init|=
name|QBBIntegration
operator|::
name|window
argument_list|(
name|qnxWindow
argument_list|)
decl_stmt|;
comment|// Generate enter and leave events as needed.
if|if
condition|(
name|qnxWindow
operator|!=
name|m_lastMouseWindow
condition|)
block|{
name|QWindow
modifier|*
name|wOld
init|=
name|QBBIntegration
operator|::
name|window
argument_list|(
name|m_lastMouseWindow
argument_list|)
decl_stmt|;
if|if
condition|(
name|wOld
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
name|wOld
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: Qt leave, w="
operator|<<
name|wOld
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|w
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: Qt enter, w="
operator|<<
name|w
expr_stmt|;
endif|#
directive|endif
block|}
block|}
name|m_lastMouseWindow
operator|=
name|qnxWindow
expr_stmt|;
if|if
condition|(
name|w
condition|)
block|{
comment|// convert primary touch to mouse event
if|if
condition|(
name|touchId
operator|==
literal|0
condition|)
block|{
comment|// convert point to local coordinates
name|QPoint
name|globalPoint
argument_list|(
name|pos
index|[
literal|0
index|]
argument_list|,
name|pos
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|QPoint
name|localPoint
argument_list|(
name|windowPos
index|[
literal|0
index|]
argument_list|,
name|windowPos
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// map touch state to button state
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
operator|(
name|qnxType
operator|==
name|SCREEN_EVENT_MTOUCH_RELEASE
operator|)
condition|?
name|Qt
operator|::
name|NoButton
else|:
name|Qt
operator|::
name|LeftButton
decl_stmt|;
comment|// inject event into Qt
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|w
argument_list|,
name|localPoint
argument_list|,
name|globalPoint
argument_list|,
name|buttons
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: Qt mouse, w="
operator|<<
name|w
operator|<<
literal|", ("
operator|<<
name|localPoint
operator|.
name|x
argument_list|()
operator|<<
literal|","
operator|<<
name|localPoint
operator|.
name|y
argument_list|()
operator|<<
literal|"), b="
operator|<<
name|buttons
expr_stmt|;
endif|#
directive|endif
block|}
comment|// get size of screen which contains window
name|QPlatformScreen
modifier|*
name|platformScreen
init|=
name|QPlatformScreen
operator|::
name|platformScreenForWindow
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|QSizeF
name|screenSize
init|=
name|platformScreen
operator|->
name|physicalSize
argument_list|()
decl_stmt|;
comment|// update cached position of current touch point
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|normalPosition
operator|=
name|QPointF
argument_list|(
cast|static_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
name|pos
index|[
literal|0
index|]
argument_list|)
operator|/
name|screenSize
operator|.
name|width
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
name|pos
index|[
literal|1
index|]
argument_list|)
operator|/
name|screenSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|area
operator|=
name|QRectF
argument_list|(
name|pos
index|[
literal|0
index|]
argument_list|,
name|pos
index|[
literal|1
index|]
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
comment|// determine event type and update state of current touch point
name|QEvent
operator|::
name|Type
name|type
init|=
name|QEvent
operator|::
name|None
decl_stmt|;
switch|switch
condition|(
name|qnxType
condition|)
block|{
case|case
name|SCREEN_EVENT_MTOUCH_TOUCH
case|:
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|type
operator|=
name|QEvent
operator|::
name|TouchBegin
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_MTOUCH_MOVE
case|:
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
name|type
operator|=
name|QEvent
operator|::
name|TouchUpdate
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_MTOUCH_RELEASE
case|:
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|type
operator|=
name|QEvent
operator|::
name|TouchEnd
expr_stmt|;
break|break;
block|}
comment|// build list of active touch points
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|pointList
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MaximumTouchPoints
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|touchId
condition|)
block|{
comment|// current touch point is always active
name|pointList
operator|.
name|append
argument_list|(
name|m_touchPoints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|state
operator|!=
name|Qt
operator|::
name|TouchPointReleased
condition|)
block|{
comment|// finger is down but did not move
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointStationary
expr_stmt|;
name|pointList
operator|.
name|append
argument_list|(
name|m_touchPoints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// inject event into Qt
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|w
argument_list|,
name|m_touchDevice
argument_list|,
name|pointList
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: Qt touch, w="
operator|<<
name|w
operator|<<
literal|", p=("
operator|<<
name|pos
index|[
literal|0
index|]
operator|<<
literal|","
operator|<<
name|pos
index|[
literal|1
index|]
operator|<<
literal|"), t="
operator|<<
name|type
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
end_function
begin_function
DECL|function|handleCloseEvent
name|void
name|QBBEventThread
operator|::
name|handleCloseEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|)
block|{
comment|// Query the window that was closed
name|void
modifier|*
name|handle
decl_stmt|;
name|int
name|result
init|=
name|screen_get_event_property_pv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_WINDOW
argument_list|,
operator|&
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QBB: failed to query event window, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|screen_window_t
name|qnxWindow
init|=
cast|static_cast
argument_list|<
name|screen_window_t
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
comment|// Map window handle to top-level QWindow
name|QWindow
modifier|*
name|w
init|=
name|QBBIntegration
operator|::
name|window
argument_list|(
name|qnxWindow
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|0
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleCloseEvent
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
end_function
end_unit
