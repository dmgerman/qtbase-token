begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2011 - 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QBBWINDOW_H
end_ifndef
begin_define
DECL|macro|QBBWINDOW_H
define|#
directive|define
name|QBBWINDOW_H
end_define
begin_include
include|#
directive|include
file|<QtGui/QPlatformWindow>
end_include
begin_include
include|#
directive|include
file|"qbbbuffer.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QImage>
end_include
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_include
include|#
directive|include
file|<screen/screen.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// all surfaces double buffered
DECL|macro|MAX_BUFFER_COUNT
define|#
directive|define
name|MAX_BUFFER_COUNT
value|2
DECL|variable|QBBGLContext
name|class
name|QBBGLContext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QBBScreen
name|class
name|QBBScreen
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPlatformGLContext
name|class
name|QPlatformGLContext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QSurfaceFormat
name|class
name|QSurfaceFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QBBWindow
range|:
name|public
name|QPlatformWindow
block|{
name|friend
name|class
name|QBBScreen
block|;
name|public
operator|:
name|QBBWindow
argument_list|(
argument|QWindow *window
argument_list|,
argument|screen_context_t context
argument_list|)
block|;
name|virtual
operator|~
name|QBBWindow
argument_list|()
block|;
name|virtual
name|void
name|setGeometry
argument_list|(
specifier|const
name|QRect
operator|&
name|rect
argument_list|)
block|;
name|virtual
name|void
name|setVisible
argument_list|(
argument|bool visible
argument_list|)
block|;
name|virtual
name|void
name|setOpacity
argument_list|(
argument|qreal level
argument_list|)
block|;
name|virtual
name|WId
name|winId
argument_list|()
specifier|const
block|{
return|return
operator|(
name|WId
operator|)
name|m_window
return|;
block|}
name|screen_window_t
name|nativeHandle
argument_list|()
specifier|const
block|{
return|return
name|m_window
return|;
block|}
name|void
name|setBufferSize
argument_list|(
specifier|const
name|QSize
operator|&
name|size
argument_list|)
block|;
name|QSize
name|bufferSize
argument_list|()
specifier|const
block|{
return|return
name|m_bufferSize
return|;
block|}
name|bool
name|hasBuffers
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_bufferSize
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|QBBBuffer
operator|&
name|renderBuffer
argument_list|()
block|;
name|void
name|scroll
argument_list|(
argument|const QRegion&region
argument_list|,
argument|int dx
argument_list|,
argument|int dy
argument_list|,
argument|bool flush=false
argument_list|)
block|;
name|void
name|post
argument_list|(
specifier|const
name|QRegion
operator|&
name|dirty
argument_list|)
block|;
name|void
name|setScreen
argument_list|(
name|QBBScreen
operator|*
name|platformScreen
argument_list|)
block|;
name|virtual
name|void
name|setParent
argument_list|(
specifier|const
name|QPlatformWindow
operator|*
name|window
argument_list|)
block|;
name|virtual
name|void
name|raise
argument_list|()
block|;
name|virtual
name|void
name|lower
argument_list|()
block|;
name|virtual
name|void
name|requestActivateWindow
argument_list|()
block|;
name|void
name|gainedFocus
argument_list|()
block|;
name|QBBScreen
operator|*
name|screen
argument_list|()
specifier|const
block|{
return|return
name|m_screen
return|;
block|}
specifier|const
name|QList
operator|<
name|QBBWindow
operator|*
operator|>
operator|&
name|children
argument_list|()
specifier|const
block|{
return|return
name|m_childWindows
return|;
block|}
name|void
name|setPlatformOpenGLContext
argument_list|(
name|QBBGLContext
operator|*
name|platformOpenGLContext
argument_list|)
block|;
name|QBBGLContext
operator|*
name|platformOpenGLContext
argument_list|()
specifier|const
block|{
return|return
name|m_platformOpenGLContext
return|;
block|}
name|private
operator|:
name|void
name|removeFromParent
argument_list|()
block|;
name|void
name|offset
argument_list|(
specifier|const
name|QPoint
operator|&
name|offset
argument_list|)
block|;
name|void
name|updateVisibility
argument_list|(
argument|bool parentVisible
argument_list|)
block|;
name|void
name|updateZorder
argument_list|(
name|int
operator|&
name|topZorder
argument_list|)
block|;
name|void
name|fetchBuffers
argument_list|()
block|;
name|void
name|copyBack
argument_list|(
argument|const QRegion&region
argument_list|,
argument|int dx
argument_list|,
argument|int dy
argument_list|,
argument|bool flush=false
argument_list|)
block|;
specifier|static
name|int
name|platformWindowFormatToNativeFormat
argument_list|(
specifier|const
name|QSurfaceFormat
operator|&
name|format
argument_list|)
block|;
name|screen_context_t
name|m_screenContext
block|;
name|screen_window_t
name|m_window
block|;
name|QSize
name|m_bufferSize
block|;
name|QBBBuffer
name|m_buffers
index|[
name|MAX_BUFFER_COUNT
index|]
block|;
name|int
name|m_currentBufferIndex
block|;
name|int
name|m_previousBufferIndex
block|;
name|QRegion
name|m_previousDirty
block|;
name|QRegion
name|m_scrolled
block|;
name|QBBGLContext
operator|*
name|m_platformOpenGLContext
block|;
name|QBBScreen
operator|*
name|m_screen
block|;
name|QList
operator|<
name|QBBWindow
operator|*
operator|>
name|m_childWindows
block|;
name|QBBWindow
operator|*
name|m_parentWindow
block|;
name|bool
name|m_visible
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QBBWINDOW_H
end_comment
end_unit
