begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2011 - 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_include
include|#
directive|include
file|"qbbclipboard.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QColor>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QUrl>
end_include
begin_include
include|#
directive|include
file|<clipboard/clipboard.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|typeList
specifier|static
specifier|const
name|char
modifier|*
name|typeList
index|[]
init|=
block|{
literal|"text/html"
block|,
literal|"text/plain"
block|,
literal|"application/x-color"
block|}
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QBBClipboard
name|QBBClipboard
operator|::
name|QBBClipboard
parameter_list|()
block|{
name|m_mimeData
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QBBClipboard
name|QBBClipboard
operator|::
name|~
name|QBBClipboard
parameter_list|()
block|{
operator|delete
name|m_mimeData
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setMimeData
name|void
name|QBBClipboard
operator|::
name|setMimeData
parameter_list|(
name|QMimeData
modifier|*
name|data
parameter_list|,
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|!=
name|QClipboard
operator|::
name|Clipboard
condition|)
return|return;
if|if
condition|(
name|m_mimeData
operator|!=
name|data
condition|)
block|{
operator|delete
name|m_mimeData
expr_stmt|;
name|m_mimeData
operator|=
name|data
expr_stmt|;
block|}
name|empty_clipboard
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|==
literal|0
condition|)
return|return;
name|QStringList
name|format
init|=
name|data
operator|->
name|formats
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|format
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|type
init|=
name|format
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QByteArray
name|buf
init|=
name|data
operator|->
name|data
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buf
operator|.
name|size
argument_list|()
condition|)
continue|continue;
name|int
name|ret
init|=
name|set_clipboard_data
argument_list|(
name|type
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBCLIPBOARD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: set "
operator|<<
name|type
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
operator|<<
literal|"to clipboard, size="
operator|<<
name|buf
operator|.
name|size
argument_list|()
operator|<<
literal|";ret="
operator|<<
name|ret
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|ret
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|readClipboardBuff
name|void
name|QBBClipboard
operator|::
name|readClipboardBuff
parameter_list|(
specifier|const
name|char
modifier|*
name|type
parameter_list|)
block|{
name|char
modifier|*
name|pbuffer
decl_stmt|;
if|if
condition|(
name|is_clipboard_format_present
argument_list|(
name|type
argument_list|)
operator|==
literal|0
condition|)
block|{
name|int
name|size
init|=
name|get_clipboard_data
argument_list|(
name|type
argument_list|,
operator|&
name|pbuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
operator|&&
name|pbuffer
condition|)
block|{
name|QString
name|qtype
init|=
name|type
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QBBCLIPBOARD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QBB: clipboard has "
operator|<<
name|qtype
expr_stmt|;
endif|#
directive|endif
name|m_mimeData
operator|->
name|setData
argument_list|(
name|qtype
argument_list|,
name|QByteArray
argument_list|(
name|pbuffer
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|pbuffer
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|mimeData
name|QMimeData
modifier|*
name|QBBClipboard
operator|::
name|mimeData
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|!=
name|QClipboard
operator|::
name|Clipboard
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|m_mimeData
condition|)
name|m_mimeData
operator|=
operator|new
name|QMimeData
argument_list|()
expr_stmt|;
name|m_mimeData
operator|->
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
name|readClipboardBuff
argument_list|(
name|typeList
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|m_mimeData
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_CLIPBOAR
end_comment
end_unit
