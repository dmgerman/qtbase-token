begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeglplatformcontext.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QPlatformWindow>
end_include
begin_include
include|#
directive|include
file|"qeglconvenience.h"
end_include
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_constructor
DECL|function|QEGLPlatformContext
name|QEGLPlatformContext
operator|::
name|QEGLPlatformContext
parameter_list|(
name|EGLDisplay
name|display
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLint
name|contextAttrs
index|[]
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLenum
name|eglApi
parameter_list|)
member_init_list|:
name|QPlatformGLContext
argument_list|()
member_init_list|,
name|m_eglDisplay
argument_list|(
name|display
argument_list|)
member_init_list|,
name|m_eglSurface
argument_list|(
name|surface
argument_list|)
member_init_list|,
name|m_eglApi
argument_list|(
name|eglApi
argument_list|)
block|{
if|if
condition|(
name|m_eglSurface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|qWarning
argument_list|(
literal|"Createing QEGLPlatformContext with no surface"
argument_list|)
expr_stmt|;
block|}
name|eglBindAPI
argument_list|(
name|m_eglApi
argument_list|)
expr_stmt|;
name|m_eglContext
operator|=
name|eglCreateContext
argument_list|(
name|m_eglDisplay
argument_list|,
name|config
argument_list|,
literal|0
argument_list|,
name|contextAttrs
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_eglContext
operator|==
name|EGL_NO_CONTEXT
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not create the egl context\n"
argument_list|)
expr_stmt|;
name|eglTerminate
argument_list|(
name|m_eglDisplay
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"EGL error"
argument_list|)
expr_stmt|;
block|}
name|m_windowFormat
operator|=
name|q_windowFormatFromConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QEGLPlatformContext
name|QEGLPlatformContext
operator|::
name|~
name|QEGLPlatformContext
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QEGL_EXTRA_DEBUG
name|qWarning
argument_list|(
literal|"QEglContext::~QEglContext(): %p\n"
argument_list|,
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|m_eglSurface
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
name|doneCurrent
argument_list|()
expr_stmt|;
name|eglDestroySurface
argument_list|(
name|m_eglDisplay
argument_list|,
name|m_eglSurface
argument_list|)
expr_stmt|;
name|m_eglSurface
operator|=
name|EGL_NO_SURFACE
expr_stmt|;
block|}
if|if
condition|(
name|m_eglContext
operator|!=
name|EGL_NO_CONTEXT
condition|)
block|{
name|eglDestroyContext
argument_list|(
name|m_eglDisplay
argument_list|,
name|m_eglContext
argument_list|)
expr_stmt|;
name|m_eglContext
operator|=
name|EGL_NO_CONTEXT
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|makeCurrent
name|void
name|QEGLPlatformContext
operator|::
name|makeCurrent
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QEGL_EXTRA_DEBUG
name|qWarning
argument_list|(
literal|"QEglContext::makeCurrent: %p\n"
argument_list|,
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|eglBindAPI
argument_list|(
name|m_eglApi
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
name|eglMakeCurrent
argument_list|(
name|m_eglDisplay
argument_list|,
name|m_eglSurface
argument_list|,
name|m_eglSurface
argument_list|,
name|m_eglContext
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|qWarning
argument_list|(
literal|"QEGLPlatformContext::makeCurrent: eglError: %d, this: %p \n"
argument_list|,
name|eglGetError
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QEGL_EXTRA_DEBUG
specifier|static
name|bool
name|showDebug
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|showDebug
condition|)
block|{
name|showDebug
operator|=
literal|false
expr_stmt|;
specifier|const
name|char
modifier|*
name|str
init|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|glGetString
argument_list|(
name|GL_VENDOR
argument_list|)
decl_stmt|;
name|qWarning
argument_list|(
literal|"Vendor %s\n"
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|str
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|glGetString
argument_list|(
name|GL_RENDERER
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Renderer %s\n"
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|str
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|glGetString
argument_list|(
name|GL_VERSION
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Version %s\n"
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|str
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|glGetString
argument_list|(
name|GL_SHADING_LANGUAGE_VERSION
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Extensions %s\n"
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|str
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|glGetString
argument_list|(
name|GL_EXTENSIONS
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Extensions %s\n"
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|doneCurrent
name|void
name|QEGLPlatformContext
operator|::
name|doneCurrent
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QEGL_EXTRA_DEBUG
name|qWarning
argument_list|(
literal|"QEglContext::doneCurrent:%p\n"
argument_list|,
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|eglBindAPI
argument_list|(
name|m_eglApi
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
name|eglMakeCurrent
argument_list|(
name|m_eglDisplay
argument_list|,
name|EGL_NO_SURFACE
argument_list|,
name|EGL_NO_SURFACE
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|qWarning
argument_list|(
literal|"QEGLPlatformContext::doneCurrent(): eglError: %d, this: %p \n"
argument_list|,
name|eglGetError
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swapBuffers
name|void
name|QEGLPlatformContext
operator|::
name|swapBuffers
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QEGL_EXTRA_DEBUG
name|qWarning
argument_list|(
literal|"QEglContext::swapBuffers:%p\n"
argument_list|,
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|eglBindAPI
argument_list|(
name|m_eglApi
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
name|eglSwapBuffers
argument_list|(
name|m_eglDisplay
argument_list|,
name|m_eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|qWarning
argument_list|(
literal|"QEGLPlatformContext::swapBuffers(): eglError: %d, this: %p \n"
argument_list|,
name|eglGetError
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getProcAddress
name|void
modifier|*
name|QEGLPlatformContext
operator|::
name|getProcAddress
parameter_list|(
specifier|const
name|QString
modifier|&
name|procName
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QEGL_EXTRA_DEBUG
name|qWarning
argument_list|(
literal|"QEglContext::getProcAddress%p\n"
argument_list|,
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|eglBindAPI
argument_list|(
name|m_eglApi
argument_list|)
expr_stmt|;
return|return
operator|(
name|void
operator|*
operator|)
name|eglGetProcAddress
argument_list|(
name|qPrintable
argument_list|(
name|procName
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|windowFormat
name|QWindowFormat
name|QEGLPlatformContext
operator|::
name|windowFormat
parameter_list|()
specifier|const
block|{
return|return
name|m_windowFormat
return|;
block|}
end_function
begin_function
DECL|function|eglContext
name|EGLContext
name|QEGLPlatformContext
operator|::
name|eglContext
parameter_list|()
specifier|const
block|{
return|return
name|m_eglContext
return|;
block|}
end_function
end_unit
