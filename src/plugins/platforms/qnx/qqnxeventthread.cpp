begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2011 - 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxeventthread.h"
end_include
begin_include
include|#
directive|include
file|"qqnxscreeneventhandler.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<cctype>
end_include
begin_constructor
DECL|function|QQnxEventThread
name|QQnxEventThread
operator|::
name|QQnxEventThread
parameter_list|(
name|screen_context_t
name|context
parameter_list|)
member_init_list|:
name|QThread
argument_list|()
member_init_list|,
name|m_screenContext
argument_list|(
name|context
argument_list|)
member_init_list|,
name|m_quit
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QQnxEventThread
name|QQnxEventThread
operator|::
name|~
name|QQnxEventThread
parameter_list|()
block|{
comment|// block until thread terminates
name|shutdown
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|injectKeyboardEvent
name|void
name|QQnxEventThread
operator|::
name|injectKeyboardEvent
parameter_list|(
name|int
name|flags
parameter_list|,
name|int
name|sym
parameter_list|,
name|int
name|mod
parameter_list|,
name|int
name|scan
parameter_list|,
name|int
name|cap
parameter_list|)
block|{
name|QQnxScreenEventHandler
operator|::
name|injectKeyboardEvent
argument_list|(
name|flags
argument_list|,
name|sym
argument_list|,
name|mod
argument_list|,
name|scan
argument_list|,
name|cap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|run
name|void
name|QQnxEventThread
operator|::
name|run
parameter_list|()
block|{
name|QQnxScreenEventHandler
name|eventHandler
decl_stmt|;
name|screen_event_t
name|event
decl_stmt|;
comment|// create screen event
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|result
init|=
name|screen_create_event
argument_list|(
operator|&
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
name|qFatal
argument_list|(
literal|"QQNX: failed to create event, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQNX: event loop started"
expr_stmt|;
endif|#
directive|endif
comment|// loop indefinitely
while|while
condition|(
operator|!
name|m_quit
condition|)
block|{
comment|// block until screen event is available
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_get_event
argument_list|(
name|m_screenContext
argument_list|,
name|event
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
name|qFatal
argument_list|(
literal|"QQNX: failed to get event, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
comment|// process received event
comment|// get the event type
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|qnxType
decl_stmt|;
name|result
operator|=
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_TYPE
argument_list|,
operator|&
name|qnxType
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
name|qFatal
argument_list|(
literal|"QQNX: failed to query event type, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
if|if
condition|(
name|qnxType
operator|==
name|SCREEN_EVENT_USER
condition|)
block|{
comment|// treat all user events as shutdown requests
if|#
directive|if
name|defined
argument_list|(
name|QQNXEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQNX: QNX user event"
expr_stmt|;
endif|#
directive|endif
name|m_quit
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|eventHandler
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|qnxType
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|QQNXEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQNX: event loop stopped"
expr_stmt|;
endif|#
directive|endif
comment|// cleanup
name|screen_destroy_event
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shutdown
name|void
name|QQnxEventThread
operator|::
name|shutdown
parameter_list|()
block|{
name|screen_event_t
name|event
decl_stmt|;
comment|// create screen event
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|result
init|=
name|screen_create_event
argument_list|(
operator|&
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
name|qFatal
argument_list|(
literal|"QQNX: failed to create event, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
comment|// set the event type as user
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|type
init|=
name|SCREEN_EVENT_USER
decl_stmt|;
name|result
operator|=
name|screen_set_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_TYPE
argument_list|,
operator|&
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
name|qFatal
argument_list|(
literal|"QQNX: failed to set event type, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
comment|// NOTE: ignore SCREEN_PROPERTY_USER_DATA; treat all user events as shutdown events
comment|// post event to event loop so it will wake up and die
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_send_event
argument_list|(
name|m_screenContext
argument_list|,
name|event
argument_list|,
name|getpid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
name|qFatal
argument_list|(
literal|"QQNX: failed to set event type, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
comment|// cleanup
name|screen_destroy_event
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQNX: event loop shutdown begin"
expr_stmt|;
endif|#
directive|endif
comment|// block until thread terminates
name|wait
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXEVENTTHREAD_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQNX: event loop shutdown end"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
end_unit
