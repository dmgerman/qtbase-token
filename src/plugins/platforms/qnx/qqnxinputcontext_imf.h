begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2013 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QQNXINPUTCONTEXT_H
end_ifndef
begin_define
DECL|macro|QQNXINPUTCONTEXT_H
define|#
directive|define
name|QQNXINPUTCONTEXT_H
end_define
begin_include
include|#
directive|include
file|<qpa/qplatforminputcontext.h>
end_include
begin_include
include|#
directive|include
file|"qqnxscreeneventfilter.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QLocale>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMetaType>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|"imf/imf_client.h"
end_include
begin_include
include|#
directive|include
file|"imf/input_control.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QQnxAbstractVirtualKeyboard
name|class
name|QQnxAbstractVirtualKeyboard
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QQnxIntegration
name|class
name|QQnxIntegration
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QQnxImfRequest
name|class
name|QQnxImfRequest
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPlatformInputContext
name|class
name|QQnxInputContext
range|:
name|public
name|QPlatformInputContext
decl_stmt|,
name|public
name|QQnxScreenEventFilter
block|{
name|Q_OBJECT
name|public
range|:
name|explicit
name|QQnxInputContext
argument_list|(
name|QQnxIntegration
operator|*
name|integration
argument_list|,
name|QQnxAbstractVirtualKeyboard
operator|&
name|keyboard
argument_list|)
decl_stmt|;
operator|~
name|QQnxInputContext
argument_list|()
expr_stmt|;
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|filterEvent
parameter_list|(
specifier|const
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|QRectF
name|keyboardRect
argument_list|()
specifier|const
expr_stmt|;
name|void
name|reset
parameter_list|()
function_decl|;
name|void
name|commit
parameter_list|()
function_decl|;
name|void
name|update
argument_list|(
name|Qt
operator|::
name|InputMethodQueries
argument_list|)
decl_stmt|;
name|bool
name|handleKeyboardEvent
parameter_list|(
name|int
name|flags
parameter_list|,
name|int
name|sym
parameter_list|,
name|int
name|mod
parameter_list|,
name|int
name|scan
parameter_list|,
name|int
name|cap
parameter_list|,
name|int
name|sequenceId
parameter_list|)
function_decl|;
name|void
name|showInputPanel
parameter_list|()
function_decl|;
name|void
name|hideInputPanel
parameter_list|()
function_decl|;
name|bool
name|isInputPanelVisible
argument_list|()
specifier|const
expr_stmt|;
name|QLocale
name|locale
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setFocusObject
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
function_decl|;
name|private
name|Q_SLOTS
range|:
name|void
name|keyboardVisibilityChanged
argument_list|(
argument|bool visible
argument_list|)
decl_stmt|;
name|void
name|keyboardLocaleChanged
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
function_decl|;
name|void
name|processImfEvent
parameter_list|(
name|QQnxImfRequest
modifier|*
name|event
parameter_list|)
function_decl|;
name|private
label|:
comment|// IMF Event dispatchers
name|bool
name|dispatchFocusGainEvent
parameter_list|(
name|int
name|inputHints
parameter_list|)
function_decl|;
name|void
name|dispatchFocusLossEvent
parameter_list|()
function_decl|;
name|bool
name|dispatchRequestSoftwareInputPanel
parameter_list|()
function_decl|;
name|bool
name|dispatchCloseSoftwareInputPanel
parameter_list|()
function_decl|;
name|int32_t
name|processEvent
parameter_list|(
name|event_t
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|closeSession
parameter_list|()
function_decl|;
name|bool
name|openSession
parameter_list|()
function_decl|;
name|bool
name|hasSession
parameter_list|()
function_decl|;
name|void
name|updateCursorPosition
parameter_list|()
function_decl|;
name|void
name|endComposition
parameter_list|()
function_decl|;
name|void
name|finishComposingText
parameter_list|()
function_decl|;
name|bool
name|hasSelectedText
parameter_list|()
function_decl|;
name|void
name|updateComposition
parameter_list|(
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
function_decl|;
comment|// IMF Event handlers - these events will come in from QCoreApplication.
name|int32_t
name|onCommitText
parameter_list|(
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
function_decl|;
name|int32_t
name|onDeleteSurroundingText
parameter_list|(
name|int32_t
name|left_length
parameter_list|,
name|int32_t
name|right_length
parameter_list|)
function_decl|;
name|int32_t
name|onGetCursorCapsMode
parameter_list|(
name|int32_t
name|req_modes
parameter_list|)
function_decl|;
name|int32_t
name|onFinishComposingText
parameter_list|()
function_decl|;
name|int32_t
name|onGetCursorPosition
parameter_list|()
function_decl|;
name|spannable_string_t
modifier|*
name|onGetTextAfterCursor
parameter_list|(
name|int32_t
name|n
parameter_list|,
name|int32_t
name|flags
parameter_list|)
function_decl|;
name|spannable_string_t
modifier|*
name|onGetTextBeforeCursor
parameter_list|(
name|int32_t
name|n
parameter_list|,
name|int32_t
name|flags
parameter_list|)
function_decl|;
name|int32_t
name|onSendEvent
parameter_list|(
name|event_t
modifier|*
name|event
parameter_list|)
function_decl|;
name|int32_t
name|onSendAsyncEvent
parameter_list|(
name|event_t
modifier|*
name|event
parameter_list|)
function_decl|;
name|int32_t
name|onSetComposingRegion
parameter_list|(
name|int32_t
name|start
parameter_list|,
name|int32_t
name|end
parameter_list|)
function_decl|;
name|int32_t
name|onSetComposingText
parameter_list|(
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
function_decl|;
name|int32_t
name|onIsTextSelected
parameter_list|(
name|int32_t
modifier|*
name|pIsSelected
parameter_list|)
function_decl|;
name|int32_t
name|onIsAllTextSelected
parameter_list|(
name|int32_t
modifier|*
name|pIsSelected
parameter_list|)
function_decl|;
name|int32_t
name|onForceUpdate
parameter_list|()
function_decl|;
name|int
name|m_caretPosition
decl_stmt|;
name|bool
name|m_isComposing
decl_stmt|;
name|QString
name|m_composingText
decl_stmt|;
name|bool
name|m_isUpdatingText
decl_stmt|;
name|bool
name|m_inputPanelVisible
decl_stmt|;
name|QLocale
name|m_inputPanelLocale
decl_stmt|;
name|QQnxIntegration
modifier|*
name|m_integration
decl_stmt|;
name|QQnxAbstractVirtualKeyboard
modifier|&
name|m_virtualKeyboard
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QQNXINPUTCONTEXT_H
end_comment
end_unit
