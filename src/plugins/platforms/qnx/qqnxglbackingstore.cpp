begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2011 - 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxglbackingstore.h"
end_include
begin_include
include|#
directive|include
file|"qqnxglcontext.h"
end_include
begin_include
include|#
directive|include
file|"qqnxwindow.h"
end_include
begin_include
include|#
directive|include
file|"qqnxscreen.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qwindow.h>
end_include
begin_include
include|#
directive|include
file|<QtOpenGL/private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<QtOpenGL/QGLContext>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QQnxGLPaintDevice
name|QQnxGLPaintDevice
operator|::
name|QQnxGLPaintDevice
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QGLPaintDevice
argument_list|()
member_init_list|,
name|m_window
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_glContext
argument_list|(
literal|0
argument_list|)
block|{
name|m_window
operator|=
cast|static_cast
argument_list|<
name|QQnxWindow
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
comment|// Extract the QPlatformOpenGLContext from the window
name|QPlatformOpenGLContext
modifier|*
name|platformOpenGLContext
init|=
name|m_window
operator|->
name|platformOpenGLContext
argument_list|()
decl_stmt|;
comment|// Convert this to a QGLContext
name|m_glContext
operator|=
name|QGLContext
operator|::
name|fromOpenGLContext
argument_list|(
name|platformOpenGLContext
operator|->
name|context
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QQnxGLPaintDevice
name|QQnxGLPaintDevice
operator|::
name|~
name|QQnxGLPaintDevice
parameter_list|()
block|{
comment|// Cleanup GL context
operator|delete
name|m_glContext
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QQnxGLPaintDevice
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
comment|// Select a paint engine based on configued OpenGL version
return|return
name|qt_qgl_paint_engine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|size
name|QSize
name|QQnxGLPaintDevice
operator|::
name|size
parameter_list|()
specifier|const
block|{
comment|// Get size of EGL surface
return|return
name|m_window
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|QQnxGLBackingStore
name|QQnxGLBackingStore
operator|::
name|QQnxGLBackingStore
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|QPlatformBackingStore
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_openGLContext
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_paintDevice
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_requestedSize
argument_list|()
member_init_list|,
name|m_size
argument_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXGLBACKINGSTORE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQnxGLBackingStore::QQnxGLBackingStore - w="
operator|<<
name|window
expr_stmt|;
endif|#
directive|endif
comment|// Create an OpenGL paint device which in turn creates a QGLContext for us
name|m_paintDevice
operator|=
operator|new
name|QQnxGLPaintDevice
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|m_openGLContext
operator|=
name|m_paintDevice
operator|->
name|context
argument_list|()
operator|->
name|contextHandle
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QQnxGLBackingStore
name|QQnxGLBackingStore
operator|::
name|~
name|QQnxGLBackingStore
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXGLBACKINGSTORE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQnxGLBackingStore::~QQnxGLBackingStore - w="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// cleanup OpenGL paint device
operator|delete
name|m_paintDevice
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|flush
name|void
name|QQnxGLBackingStore
operator|::
name|flush
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXGLBACKINGSTORE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQnxGLBackingStore::flush - w="
operator|<<
name|window
expr_stmt|;
endif|#
directive|endif
comment|// update the display with newly rendered content
name|m_openGLContext
operator|->
name|swapBuffers
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resize
name|void
name|QQnxGLBackingStore
operator|::
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|staticContents
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|staticContents
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXGLBACKINGSTORE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQnxGLBackingStore::resize - w="
operator|<<
name|window
argument_list|()
operator|<<
literal|", s="
operator|<<
name|size
expr_stmt|;
endif|#
directive|endif
comment|// NOTE: defer resizing window buffers until next paint as
comment|// resize() can be called multiple times before a paint occurs
name|m_requestedSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginPaint
name|void
name|QQnxGLBackingStore
operator|::
name|beginPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXGLBACKINGSTORE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQnxGLBackingStore::beginPaint - w="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// resize EGL surface if window surface resized
if|if
condition|(
name|m_size
operator|!=
name|m_requestedSize
condition|)
block|{
name|resizeSurface
argument_list|(
name|m_requestedSize
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|endPaint
name|void
name|QQnxGLBackingStore
operator|::
name|endPaint
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|region
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXGLBACKINGSTORE_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQnxGLBackingStore::endPaint - w="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|resizeSurface
name|void
name|QQnxGLBackingStore
operator|::
name|resizeSurface
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
comment|// need to destroy surface so make sure its not current
name|bool
name|restoreCurrent
init|=
literal|false
decl_stmt|;
name|QQnxGLContext
modifier|*
name|platformContext
init|=
cast|static_cast
argument_list|<
name|QQnxGLContext
operator|*
argument_list|>
argument_list|(
name|m_openGLContext
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|platformContext
operator|->
name|isCurrent
argument_list|()
condition|)
block|{
name|m_openGLContext
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
name|restoreCurrent
operator|=
literal|true
expr_stmt|;
block|}
comment|// destroy old EGL surface
name|platformContext
operator|->
name|destroySurface
argument_list|()
expr_stmt|;
comment|// resize window's buffers
cast|static_cast
argument_list|<
name|QQnxWindow
operator|*
argument_list|>
argument_list|(
name|window
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|setBufferSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// re-create EGL surface with new size
name|m_size
operator|=
name|size
expr_stmt|;
name|platformContext
operator|->
name|createSurface
argument_list|(
name|window
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
expr_stmt|;
comment|// make context current again
if|if
condition|(
name|restoreCurrent
condition|)
block|{
name|m_openGLContext
operator|->
name|makeCurrent
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
