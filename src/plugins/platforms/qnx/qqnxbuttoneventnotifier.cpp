begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2012 Research In Motion ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxbuttoneventnotifier.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMetaEnum>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSocketNotifier>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_unix_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QQNXBUTTON_DEBUG
argument_list|)
end_if
begin_define
DECL|macro|qButtonDebug
define|#
directive|define
name|qButtonDebug
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qButtonDebug
define|#
directive|define
name|qButtonDebug
value|QT_NO_QDEBUG_MACRO
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|ppsPath
specifier|static
specifier|const
name|char
modifier|*
name|ppsPath
init|=
literal|"/pps/system/buttons/status"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ppsBufferSize
specifier|static
specifier|const
name|int
name|ppsBufferSize
init|=
literal|256
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QQnxButtonEventNotifier
name|QQnxButtonEventNotifier
operator|::
name|QQnxButtonEventNotifier
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_readNotifier
argument_list|(
literal|0
argument_list|)
block|{
comment|// Set initial state of buttons to ButtonUp and
comment|// fetch the new button ids
name|int
name|enumeratorIndex
init|=
name|QQnxButtonEventNotifier
operator|::
name|staticMetaObject
operator|.
name|indexOfEnumerator
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"ButtonId"
argument_list|)
argument_list|)
decl_stmt|;
name|QMetaEnum
name|enumerator
init|=
name|QQnxButtonEventNotifier
operator|::
name|staticMetaObject
operator|.
name|enumerator
argument_list|(
name|enumeratorIndex
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|buttonId
init|=
name|bid_minus
init|;
name|buttonId
operator|<
name|ButtonCount
condition|;
operator|++
name|buttonId
control|)
block|{
name|m_buttonKeys
operator|.
name|append
argument_list|(
name|enumerator
operator|.
name|valueToKey
argument_list|(
name|buttonId
argument_list|)
argument_list|)
expr_stmt|;
name|m_state
index|[
name|buttonId
index|]
operator|=
name|ButtonUp
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QQnxButtonEventNotifier
name|QQnxButtonEventNotifier
operator|::
name|~
name|QQnxButtonEventNotifier
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|start
name|void
name|QQnxButtonEventNotifier
operator|::
name|start
parameter_list|()
block|{
name|qButtonDebug
argument_list|(
literal|"starting hardware button event processing"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_fd
operator|!=
operator|-
literal|1
condition|)
return|return;
comment|// Open the pps interface
name|errno
operator|=
literal|0
expr_stmt|;
name|m_fd
operator|=
name|qt_safe_open
argument_list|(
name|ppsPath
argument_list|,
name|O_RDONLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_fd
operator|==
operator|-
literal|1
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXBUTTON_DEBUG
argument_list|)
name|qWarning
argument_list|(
literal|"QQNX: failed to open buttons pps, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
name|m_readNotifier
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|m_fd
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|m_readNotifier
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateButtonStates
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|qButtonDebug
argument_list|()
operator|<<
literal|"successfully connected to Navigator. fd ="
operator|<<
name|m_fd
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateButtonStates
name|void
name|QQnxButtonEventNotifier
operator|::
name|updateButtonStates
parameter_list|()
block|{
comment|// Allocate buffer for pps data
name|char
name|buffer
index|[
name|ppsBufferSize
index|]
decl_stmt|;
comment|// Attempt to read pps data
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|bytes
init|=
name|qt_safe_read
argument_list|(
name|m_fd
argument_list|,
name|buffer
argument_list|,
name|ppsBufferSize
operator|-
literal|1
argument_list|)
decl_stmt|;
name|qButtonDebug
argument_list|()
operator|<<
literal|"Read"
operator|<<
name|bytes
operator|<<
literal|"bytes of data"
expr_stmt|;
if|if
condition|(
name|bytes
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QQNX: failed to read hardware buttons pps object, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We seem to get a spurious read notification after the real one. Ignore it
if|if
condition|(
name|bytes
operator|==
literal|0
condition|)
return|return;
comment|// Ensure data is null terminated
name|buffer
index|[
name|bytes
index|]
operator|=
literal|'\0'
expr_stmt|;
name|qButtonDebug
argument_list|()
operator|<<
literal|"received PPS message:\n"
operator|<<
name|buffer
expr_stmt|;
comment|// Process received message
name|QByteArray
name|ppsData
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|buffer
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
name|fields
decl_stmt|;
if|if
condition|(
operator|!
name|parsePPS
argument_list|(
name|ppsData
argument_list|,
operator|&
name|fields
argument_list|)
condition|)
return|return;
comment|// Update our state and inject key events as needed
for|for
control|(
name|int
name|buttonId
init|=
name|bid_minus
init|;
name|buttonId
operator|<
name|ButtonCount
condition|;
operator|++
name|buttonId
control|)
block|{
comment|// Extract the new button state
name|QByteArray
name|key
init|=
name|m_buttonKeys
operator|.
name|at
argument_list|(
name|buttonId
argument_list|)
decl_stmt|;
name|ButtonState
name|newState
init|=
operator|(
name|fields
operator|.
name|value
argument_list|(
name|key
argument_list|)
operator|==
literal|"b_up"
condition|?
name|ButtonUp
else|:
name|ButtonDown
operator|)
decl_stmt|;
comment|// If state has changed, update our state and inject a keypress event
if|if
condition|(
name|m_state
index|[
name|buttonId
index|]
operator|!=
name|newState
condition|)
block|{
name|qButtonDebug
argument_list|()
operator|<<
literal|"Hardware button event: button ="
operator|<<
name|key
operator|<<
literal|"state ="
operator|<<
name|fields
operator|.
name|value
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|m_state
index|[
name|buttonId
index|]
operator|=
name|newState
expr_stmt|;
comment|// Is it a key press or key release event?
name|QEvent
operator|::
name|Type
name|type
init|=
operator|(
name|newState
operator|==
name|ButtonDown
operator|)
condition|?
name|QEvent
operator|::
name|KeyPress
else|:
name|QEvent
operator|::
name|KeyRelease
decl_stmt|;
name|Qt
operator|::
name|Key
name|key
decl_stmt|;
switch|switch
condition|(
name|buttonId
condition|)
block|{
case|case
name|bid_minus
case|:
name|key
operator|=
name|Qt
operator|::
name|Key_VolumeDown
expr_stmt|;
break|break;
case|case
name|bid_playpause
case|:
name|key
operator|=
name|Qt
operator|::
name|Key_Play
expr_stmt|;
break|break;
case|case
name|bid_plus
case|:
name|key
operator|=
name|Qt
operator|::
name|Key_VolumeUp
expr_stmt|;
break|break;
case|case
name|bid_power
case|:
name|key
operator|=
name|Qt
operator|::
name|Key_PowerDown
expr_stmt|;
break|break;
default|default:
name|qButtonDebug
argument_list|(
literal|"Unknown hardware button"
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// No modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|modifier
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
comment|// Post the event
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
name|type
argument_list|,
name|key
argument_list|,
name|modifier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|close
name|void
name|QQnxButtonEventNotifier
operator|::
name|close
parameter_list|()
block|{
operator|delete
name|m_readNotifier
expr_stmt|;
name|m_readNotifier
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|m_fd
operator|!=
operator|-
literal|1
condition|)
block|{
name|qt_safe_close
argument_list|(
name|m_fd
argument_list|)
expr_stmt|;
name|m_fd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|parsePPS
name|bool
name|QQnxButtonEventNotifier
operator|::
name|parsePPS
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|ppsData
parameter_list|,
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|QByteArray
argument_list|>
modifier|*
name|messageFields
parameter_list|)
specifier|const
block|{
comment|// tokenize pps data into lines
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|lines
init|=
name|ppsData
operator|.
name|split
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
comment|// validate pps object
if|if
condition|(
name|lines
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|lines
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"@status"
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QQNX: unrecognized pps object, data=%s"
argument_list|,
name|ppsData
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// parse pps object attributes and extract values
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|lines
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// tokenize current attribute
specifier|const
name|QByteArray
modifier|&
name|attr
init|=
name|lines
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qButtonDebug
argument_list|()
operator|<<
literal|"attr="
operator|<<
name|attr
expr_stmt|;
name|int
name|doubleColon
init|=
name|attr
operator|.
name|indexOf
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"::"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|doubleColon
operator|==
operator|-
literal|1
condition|)
block|{
comment|// abort - malformed attribute
continue|continue;
block|}
name|QByteArray
name|key
init|=
name|attr
operator|.
name|left
argument_list|(
name|doubleColon
argument_list|)
decl_stmt|;
name|QByteArray
name|value
init|=
name|attr
operator|.
name|mid
argument_list|(
name|doubleColon
operator|+
literal|2
argument_list|)
decl_stmt|;
name|messageFields
operator|->
name|insert
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
