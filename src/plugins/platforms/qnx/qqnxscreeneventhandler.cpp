begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2013 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxglobal.h"
end_include
begin_include
include|#
directive|include
file|"qqnxscreeneventhandler.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QQNX_SCREENEVENTTHREAD
argument_list|)
end_if
begin_include
include|#
directive|include
file|"qqnxscreeneventthread.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qqnxintegration.h"
end_include
begin_include
include|#
directive|include
file|"qqnxkeytranslator.h"
end_include
begin_include
include|#
directive|include
file|"qqnxscreen.h"
end_include
begin_include
include|#
directive|include
file|"qqnxscreeneventfilter.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<sys/keycodes.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QQNXSCREENEVENT_DEBUG
argument_list|)
end_if
begin_define
DECL|macro|qScreenEventDebug
define|#
directive|define
name|qScreenEventDebug
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qScreenEventDebug
define|#
directive|define
name|qScreenEventDebug
value|QT_NO_QDEBUG_MACRO
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QQnxScreenEventHandler
name|QQnxScreenEventHandler
operator|::
name|QQnxScreenEventHandler
parameter_list|(
name|QQnxIntegration
modifier|*
name|integration
parameter_list|)
member_init_list|:
name|m_qnxIntegration
argument_list|(
name|integration
argument_list|)
member_init_list|,
name|m_lastButtonState
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
member_init_list|,
name|m_lastMouseWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_touchDevice
argument_list|(
literal|0
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|QQNX_SCREENEVENTTHREAD
argument_list|)
member_init_list|,
name|m_eventThread
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
member_init_list|,
name|m_focusLostTimer
argument_list|(
operator|-
literal|1
argument_list|)
block|{
comment|// Create a touch device
name|m_touchDevice
operator|=
operator|new
name|QTouchDevice
expr_stmt|;
name|m_touchDevice
operator|->
name|setType
argument_list|(
name|QTouchDevice
operator|::
name|TouchScreen
argument_list|)
expr_stmt|;
name|m_touchDevice
operator|->
name|setCapabilities
argument_list|(
name|QTouchDevice
operator|::
name|Position
operator||
name|QTouchDevice
operator|::
name|Area
operator||
name|QTouchDevice
operator|::
name|Pressure
operator||
name|QTouchDevice
operator|::
name|NormalizedPosition
argument_list|)
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|registerTouchDevice
argument_list|(
name|m_touchDevice
argument_list|)
expr_stmt|;
comment|// initialize array of touch points
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MaximumTouchPoints
condition|;
name|i
operator|++
control|)
block|{
comment|// map array index to id
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|id
operator|=
name|i
expr_stmt|;
comment|// pressure is not supported - use default
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|pressure
operator|=
literal|1.0
expr_stmt|;
comment|// nothing touching
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|addScreenEventFilter
name|void
name|QQnxScreenEventHandler
operator|::
name|addScreenEventFilter
parameter_list|(
name|QQnxScreenEventFilter
modifier|*
name|filter
parameter_list|)
block|{
name|m_eventFilters
operator|.
name|append
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeScreenEventFilter
name|void
name|QQnxScreenEventHandler
operator|::
name|removeScreenEventFilter
parameter_list|(
name|QQnxScreenEventFilter
modifier|*
name|filter
parameter_list|)
block|{
name|m_eventFilters
operator|.
name|removeOne
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleEvent
name|bool
name|QQnxScreenEventHandler
operator|::
name|handleEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|)
block|{
comment|// get the event type
name|int
name|qnxType
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_TYPE
argument_list|,
operator|&
name|qnxType
argument_list|)
argument_list|,
literal|"Failed to query event type"
argument_list|)
expr_stmt|;
return|return
name|handleEvent
argument_list|(
name|event
argument_list|,
name|qnxType
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleEvent
name|bool
name|QQnxScreenEventHandler
operator|::
name|handleEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|,
name|int
name|qnxType
parameter_list|)
block|{
switch|switch
condition|(
name|qnxType
condition|)
block|{
case|case
name|SCREEN_EVENT_MTOUCH_TOUCH
case|:
case|case
name|SCREEN_EVENT_MTOUCH_MOVE
case|:
case|case
name|SCREEN_EVENT_MTOUCH_RELEASE
case|:
name|handleTouchEvent
argument_list|(
name|event
argument_list|,
name|qnxType
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_KEYBOARD
case|:
name|handleKeyboardEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_POINTER
case|:
name|handlePointerEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_CREATE
case|:
name|handleCreateEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_CLOSE
case|:
name|handleCloseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_DISPLAY
case|:
name|handleDisplayEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_PROPERTY
case|:
name|handlePropertyEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// event ignored
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"unknown event"
operator|<<
name|qnxType
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|injectKeyboardEvent
name|void
name|QQnxScreenEventHandler
operator|::
name|injectKeyboardEvent
parameter_list|(
name|int
name|flags
parameter_list|,
name|int
name|sym
parameter_list|,
name|int
name|modifiers
parameter_list|,
name|int
name|scan
parameter_list|,
name|int
name|cap
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|KeyboardModifiers
name|qtMod
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
if|if
condition|(
name|modifiers
operator|&
name|KEYMOD_SHIFT
condition|)
name|qtMod
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|modifiers
operator|&
name|KEYMOD_CTRL
condition|)
name|qtMod
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|modifiers
operator|&
name|KEYMOD_ALT
condition|)
name|qtMod
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
comment|// determine event type
name|QEvent
operator|::
name|Type
name|type
init|=
operator|(
name|flags
operator|&
name|KEY_DOWN
operator|)
condition|?
name|QEvent
operator|::
name|KeyPress
else|:
name|QEvent
operator|::
name|KeyRelease
decl_stmt|;
comment|// Check if the key cap is valid
if|if
condition|(
name|flags
operator|&
name|KEY_CAP_VALID
condition|)
block|{
name|Qt
operator|::
name|Key
name|key
decl_stmt|;
name|QString
name|keyStr
decl_stmt|;
if|if
condition|(
name|cap
operator|>=
literal|0x20
operator|&&
name|cap
operator|<=
literal|0x0ff
condition|)
block|{
name|key
operator|=
name|Qt
operator|::
name|Key
argument_list|(
name|std
operator|::
name|toupper
argument_list|(
name|cap
argument_list|)
argument_list|)
expr_stmt|;
comment|// Qt expects the CAP to be upper case.
if|if
condition|(
name|qtMod
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
block|{
name|keyStr
operator|=
name|QChar
argument_list|(
call|(
name|int
call|)
argument_list|(
name|key
operator|&
literal|0x3f
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|flags
operator|&
name|KEY_SYM_VALID
condition|)
name|keyStr
operator|=
name|QChar
argument_list|(
name|sym
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|cap
operator|>
literal|0x0ff
operator|&&
name|cap
operator|<
name|UNICODE_PRIVATE_USE_AREA_FIRST
operator|)
operator|||
name|cap
operator|>
name|UNICODE_PRIVATE_USE_AREA_LAST
condition|)
block|{
name|key
operator|=
operator|(
name|Qt
operator|::
name|Key
operator|)
name|cap
expr_stmt|;
name|keyStr
operator|=
name|QChar
argument_list|(
name|sym
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isKeypadKey
argument_list|(
name|cap
argument_list|)
condition|)
name|qtMod
operator||=
name|Qt
operator|::
name|KeypadModifier
expr_stmt|;
comment|// Is this right?
name|key
operator|=
name|keyTranslator
argument_list|(
name|cap
argument_list|)
expr_stmt|;
block|}
name|QWindowSystemInterface
operator|::
name|handleExtendedKeyEvent
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
argument_list|,
name|type
argument_list|,
name|key
argument_list|,
name|qtMod
argument_list|,
name|scan
argument_list|,
name|sym
argument_list|,
name|modifiers
argument_list|,
name|keyStr
argument_list|)
expr_stmt|;
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"Qt key t="
operator|<<
name|type
operator|<<
literal|", k="
operator|<<
name|key
operator|<<
literal|", s="
operator|<<
name|keyStr
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QQNX_SCREENEVENTTHREAD
argument_list|)
end_if
begin_function
DECL|function|setScreenEventThread
name|void
name|QQnxScreenEventHandler
operator|::
name|setScreenEventThread
parameter_list|(
name|QQnxScreenEventThread
modifier|*
name|eventThread
parameter_list|)
block|{
name|m_eventThread
operator|=
name|eventThread
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processEventsFromScreenThread
name|void
name|QQnxScreenEventHandler
operator|::
name|processEventsFromScreenThread
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_eventThread
condition|)
return|return;
name|QQnxScreenEventArray
modifier|*
name|events
init|=
name|m_eventThread
operator|->
name|lock
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|events
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|screen_event_t
name|event
init|=
name|events
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|event
condition|)
continue|continue;
operator|(
operator|*
name|events
operator|)
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|m_eventThread
operator|->
name|unlock
argument_list|()
expr_stmt|;
name|long
name|result
init|=
literal|0
decl_stmt|;
name|QAbstractEventDispatcher
modifier|*
name|dispatcher
init|=
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
decl_stmt|;
name|bool
name|handled
init|=
name|dispatcher
operator|&&
name|dispatcher
operator|->
name|filterNativeEvent
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"screen_event_t"
argument_list|)
argument_list|,
name|event
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|handled
condition|)
name|handleEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|screen_destroy_event
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|m_eventThread
operator|->
name|lock
argument_list|()
expr_stmt|;
block|}
name|events
operator|->
name|clear
argument_list|()
expr_stmt|;
name|m_eventThread
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|handleKeyboardEvent
name|void
name|QQnxScreenEventHandler
operator|::
name|handleKeyboardEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|)
block|{
comment|// get flags of key event
name|int
name|flags
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_KEY_FLAGS
argument_list|,
operator|&
name|flags
argument_list|)
argument_list|,
literal|"Failed to query event flags"
argument_list|)
expr_stmt|;
comment|// get key code
name|int
name|sym
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_KEY_SYM
argument_list|,
operator|&
name|sym
argument_list|)
argument_list|,
literal|"Failed to query event sym"
argument_list|)
expr_stmt|;
name|int
name|modifiers
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_KEY_MODIFIERS
argument_list|,
operator|&
name|modifiers
argument_list|)
argument_list|,
literal|"Failed to query event modifieres"
argument_list|)
expr_stmt|;
name|int
name|scan
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_KEY_SCAN
argument_list|,
operator|&
name|scan
argument_list|)
argument_list|,
literal|"Failed to query event scan"
argument_list|)
expr_stmt|;
name|int
name|cap
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_KEY_CAP
argument_list|,
operator|&
name|cap
argument_list|)
argument_list|,
literal|"Failed to query event cap"
argument_list|)
expr_stmt|;
name|int
name|sequenceId
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_SEQUENCE_ID
argument_list|,
operator|&
name|sequenceId
argument_list|)
argument_list|,
literal|"Failed to query event seqId"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|bool
name|inject
init|=
literal|true
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|QQnxScreenEventFilter *filter
argument_list|,
argument|m_eventFilters
argument_list|)
block|{
if|if
condition|(
name|filter
operator|->
name|handleKeyboardEvent
argument_list|(
name|flags
argument_list|,
name|sym
argument_list|,
name|modifiers
argument_list|,
name|scan
argument_list|,
name|cap
argument_list|,
name|sequenceId
argument_list|)
condition|)
block|{
name|inject
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|inject
condition|)
name|injectKeyboardEvent
argument_list|(
name|flags
argument_list|,
name|sym
argument_list|,
name|modifiers
argument_list|,
name|scan
argument_list|,
name|cap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handlePointerEvent
name|void
name|QQnxScreenEventHandler
operator|::
name|handlePointerEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|)
block|{
name|errno
operator|=
literal|0
expr_stmt|;
comment|// Query the window that was clicked
name|screen_window_t
name|qnxWindow
decl_stmt|;
name|void
modifier|*
name|handle
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_pv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_WINDOW
argument_list|,
operator|&
name|handle
argument_list|)
argument_list|,
literal|"Failed to query event window"
argument_list|)
expr_stmt|;
name|qnxWindow
operator|=
cast|static_cast
argument_list|<
name|screen_window_t
argument_list|>
argument_list|(
name|handle
argument_list|)
expr_stmt|;
comment|// Query the button states
name|int
name|buttonState
init|=
literal|0
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_BUTTONS
argument_list|,
operator|&
name|buttonState
argument_list|)
argument_list|,
literal|"Failed to query event button state"
argument_list|)
expr_stmt|;
comment|// Query the window position
name|int
name|windowPos
index|[
literal|2
index|]
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_SOURCE_POSITION
argument_list|,
name|windowPos
argument_list|)
argument_list|,
literal|"Failed to query event window position"
argument_list|)
expr_stmt|;
comment|// Query the screen position
name|int
name|pos
index|[
literal|2
index|]
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_POSITION
argument_list|,
name|pos
argument_list|)
argument_list|,
literal|"Failed to query event position"
argument_list|)
expr_stmt|;
comment|// Query the wheel delta
name|int
name|wheelDelta
init|=
literal|0
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_MOUSE_WHEEL
argument_list|,
operator|&
name|wheelDelta
argument_list|)
argument_list|,
literal|"Failed to query event wheel delta"
argument_list|)
expr_stmt|;
comment|// Map window handle to top-level QWindow
name|QWindow
modifier|*
name|w
init|=
name|QQnxIntegration
operator|::
name|window
argument_list|(
name|qnxWindow
argument_list|)
decl_stmt|;
comment|// Generate enter and leave events as needed.
if|if
condition|(
name|qnxWindow
operator|!=
name|m_lastMouseWindow
condition|)
block|{
name|QWindow
modifier|*
name|wOld
init|=
name|QQnxIntegration
operator|::
name|window
argument_list|(
name|m_lastMouseWindow
argument_list|)
decl_stmt|;
if|if
condition|(
name|wOld
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
name|wOld
argument_list|)
expr_stmt|;
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"Qt leave, w="
operator|<<
name|wOld
expr_stmt|;
block|}
if|if
condition|(
name|w
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"Qt enter, w="
operator|<<
name|w
expr_stmt|;
block|}
block|}
name|m_lastMouseWindow
operator|=
name|qnxWindow
expr_stmt|;
comment|// Apply scaling to wheel delta and invert value for Qt. We'll probably want to scale
comment|// this via a system preference at some point. But for now this is a sane value and makes
comment|// the wheel usable.
name|wheelDelta
operator|*=
operator|-
literal|10
expr_stmt|;
comment|// convert point to local coordinates
name|QPoint
name|globalPoint
argument_list|(
name|pos
index|[
literal|0
index|]
argument_list|,
name|pos
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|QPoint
name|localPoint
argument_list|(
name|windowPos
index|[
literal|0
index|]
argument_list|,
name|windowPos
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// Convert buttons.
comment|// Some QNX header files invert 'Right Button versus "Left Button' ('Right' == 0x01). But they also offer a 'Button Swap' bit,
comment|// so we may receive events as shown. (If this is wrong, the fix is easy.)
comment|// QNX Button mask is 8 buttons wide, with a maximum value of x080.
name|Qt
operator|::
name|MouseButtons
name|buttons
init|=
name|Qt
operator|::
name|NoButton
decl_stmt|;
if|if
condition|(
name|buttonState
operator|&
literal|0x01
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
if|if
condition|(
name|buttonState
operator|&
literal|0x02
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|MidButton
expr_stmt|;
if|if
condition|(
name|buttonState
operator|&
literal|0x04
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|RightButton
expr_stmt|;
if|if
condition|(
name|buttonState
operator|&
literal|0x08
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|ExtraButton1
expr_stmt|;
comment|// AKA 'Qt::BackButton'
if|if
condition|(
name|buttonState
operator|&
literal|0x10
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|ExtraButton2
expr_stmt|;
comment|// AKA 'Qt::ForwardButton'
if|if
condition|(
name|buttonState
operator|&
literal|0x20
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|ExtraButton3
expr_stmt|;
if|if
condition|(
name|buttonState
operator|&
literal|0x40
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|ExtraButton4
expr_stmt|;
if|if
condition|(
name|buttonState
operator|&
literal|0x80
condition|)
name|buttons
operator||=
name|Qt
operator|::
name|ExtraButton5
expr_stmt|;
if|if
condition|(
name|w
condition|)
block|{
comment|// Inject mouse event into Qt only if something has changed.
if|if
condition|(
name|m_lastGlobalMousePoint
operator|!=
name|globalPoint
operator|||
name|m_lastLocalMousePoint
operator|!=
name|localPoint
operator|||
name|m_lastButtonState
operator|!=
name|buttons
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
name|w
argument_list|,
name|localPoint
argument_list|,
name|globalPoint
argument_list|,
name|buttons
argument_list|)
expr_stmt|;
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"Qt mouse, w="
operator|<<
name|w
operator|<<
literal|", ("
operator|<<
name|localPoint
operator|.
name|x
argument_list|()
operator|<<
literal|","
operator|<<
name|localPoint
operator|.
name|y
argument_list|()
operator|<<
literal|"), b="
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wheelDelta
condition|)
block|{
comment|// Screen only supports a single wheel, so we will assume Vertical orientation for
comment|// now since that is pretty much standard.
name|QWindowSystemInterface
operator|::
name|handleWheelEvent
argument_list|(
name|w
argument_list|,
name|localPoint
argument_list|,
name|globalPoint
argument_list|,
name|wheelDelta
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"Qt wheel, w="
operator|<<
name|w
operator|<<
literal|", ("
operator|<<
name|localPoint
operator|.
name|x
argument_list|()
operator|<<
literal|","
operator|<<
name|localPoint
operator|.
name|y
argument_list|()
operator|<<
literal|"), d="
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|wheelDelta
argument_list|)
expr_stmt|;
block|}
block|}
name|m_lastGlobalMousePoint
operator|=
name|globalPoint
expr_stmt|;
name|m_lastLocalMousePoint
operator|=
name|localPoint
expr_stmt|;
name|m_lastButtonState
operator|=
name|buttons
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleTouchEvent
name|void
name|QQnxScreenEventHandler
operator|::
name|handleTouchEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|,
name|int
name|qnxType
parameter_list|)
block|{
comment|// get display coordinates of touch
name|int
name|pos
index|[
literal|2
index|]
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_POSITION
argument_list|,
name|pos
argument_list|)
argument_list|,
literal|"Failed to query event position"
argument_list|)
expr_stmt|;
name|QCursor
operator|::
name|setPos
argument_list|(
name|pos
index|[
literal|0
index|]
argument_list|,
name|pos
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// get window coordinates of touch
name|int
name|windowPos
index|[
literal|2
index|]
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_SOURCE_POSITION
argument_list|,
name|windowPos
argument_list|)
argument_list|,
literal|"Failed to query event window position"
argument_list|)
expr_stmt|;
comment|// determine which finger touched
name|int
name|touchId
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_TOUCH_ID
argument_list|,
operator|&
name|touchId
argument_list|)
argument_list|,
literal|"Failed to query event touch id"
argument_list|)
expr_stmt|;
comment|// determine which window was touched
name|void
modifier|*
name|handle
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_pv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_WINDOW
argument_list|,
operator|&
name|handle
argument_list|)
argument_list|,
literal|"Failed to query event window"
argument_list|)
expr_stmt|;
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|touchArea
index|[
literal|2
index|]
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_SIZE
argument_list|,
name|touchArea
argument_list|)
argument_list|,
literal|"Failed to query event touch area"
argument_list|)
expr_stmt|;
name|int
name|touchPressure
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_TOUCH_PRESSURE
argument_list|,
operator|&
name|touchPressure
argument_list|)
argument_list|,
literal|"Failed to query event touch pressure"
argument_list|)
expr_stmt|;
name|screen_window_t
name|qnxWindow
init|=
cast|static_cast
argument_list|<
name|screen_window_t
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
comment|// check if finger is valid
if|if
condition|(
name|touchId
operator|<
name|MaximumTouchPoints
condition|)
block|{
comment|// Map window handle to top-level QWindow
name|QWindow
modifier|*
name|w
init|=
name|QQnxIntegration
operator|::
name|window
argument_list|(
name|qnxWindow
argument_list|)
decl_stmt|;
comment|// Generate enter and leave events as needed.
if|if
condition|(
name|qnxWindow
operator|!=
name|m_lastMouseWindow
condition|)
block|{
name|QWindow
modifier|*
name|wOld
init|=
name|QQnxIntegration
operator|::
name|window
argument_list|(
name|m_lastMouseWindow
argument_list|)
decl_stmt|;
if|if
condition|(
name|wOld
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleLeaveEvent
argument_list|(
name|wOld
argument_list|)
expr_stmt|;
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"Qt leave, w="
operator|<<
name|wOld
expr_stmt|;
block|}
if|if
condition|(
name|w
condition|)
block|{
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"Qt enter, w="
operator|<<
name|w
expr_stmt|;
block|}
block|}
name|m_lastMouseWindow
operator|=
name|qnxWindow
expr_stmt|;
if|if
condition|(
name|w
condition|)
block|{
comment|// get size of screen which contains window
name|QPlatformScreen
modifier|*
name|platformScreen
init|=
name|QPlatformScreen
operator|::
name|platformScreenForWindow
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|QSizeF
name|screenSize
init|=
name|platformScreen
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// update cached position of current touch point
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|normalPosition
operator|=
name|QPointF
argument_list|(
cast|static_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
name|pos
index|[
literal|0
index|]
argument_list|)
operator|/
name|screenSize
operator|.
name|width
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
name|pos
index|[
literal|1
index|]
argument_list|)
operator|/
name|screenSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|area
operator|=
name|QRectF
argument_list|(
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|left
argument_list|()
operator|+
name|windowPos
index|[
literal|0
index|]
operator|-
operator|(
name|touchArea
index|[
literal|0
index|]
operator|>>
literal|1
operator|)
argument_list|,
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|top
argument_list|()
operator|+
name|windowPos
index|[
literal|1
index|]
operator|-
operator|(
name|touchArea
index|[
literal|1
index|]
operator|>>
literal|1
operator|)
argument_list|,
operator|(
name|touchArea
index|[
literal|0
index|]
operator|>>
literal|1
operator|)
argument_list|,
operator|(
name|touchArea
index|[
literal|1
index|]
operator|>>
literal|1
operator|)
argument_list|)
expr_stmt|;
name|QWindow
modifier|*
name|parent
init|=
name|w
operator|->
name|parent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
condition|)
block|{
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|area
operator|.
name|translate
argument_list|(
name|parent
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|->
name|parent
argument_list|()
expr_stmt|;
block|}
comment|//Qt expects the pressure between 0 and 1. There is however no definit upper limit for
comment|//the integer value of touch event pressure. The 200 was determined by experiment, it
comment|//usually does not get higher than that.
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|pressure
operator|=
cast|static_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
name|touchPressure
argument_list|)
operator|/
literal|200.0
expr_stmt|;
comment|// Can happen, because there is no upper limit for pressure
if|if
condition|(
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|pressure
operator|>
literal|1
condition|)
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|pressure
operator|=
literal|1
expr_stmt|;
comment|// determine event type and update state of current touch point
name|QEvent
operator|::
name|Type
name|type
init|=
name|QEvent
operator|::
name|None
decl_stmt|;
switch|switch
condition|(
name|qnxType
condition|)
block|{
case|case
name|SCREEN_EVENT_MTOUCH_TOUCH
case|:
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointPressed
expr_stmt|;
name|type
operator|=
name|QEvent
operator|::
name|TouchBegin
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_MTOUCH_MOVE
case|:
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointMoved
expr_stmt|;
name|type
operator|=
name|QEvent
operator|::
name|TouchUpdate
expr_stmt|;
break|break;
case|case
name|SCREEN_EVENT_MTOUCH_RELEASE
case|:
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointReleased
expr_stmt|;
name|type
operator|=
name|QEvent
operator|::
name|TouchEnd
expr_stmt|;
break|break;
block|}
comment|// build list of active touch points
name|QList
argument_list|<
name|QWindowSystemInterface
operator|::
name|TouchPoint
argument_list|>
name|pointList
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MaximumTouchPoints
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|touchId
condition|)
block|{
comment|// current touch point is always active
name|pointList
operator|.
name|append
argument_list|(
name|m_touchPoints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|state
operator|!=
name|Qt
operator|::
name|TouchPointReleased
condition|)
block|{
comment|// finger is down but did not move
name|m_touchPoints
index|[
name|i
index|]
operator|.
name|state
operator|=
name|Qt
operator|::
name|TouchPointStationary
expr_stmt|;
name|pointList
operator|.
name|append
argument_list|(
name|m_touchPoints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// inject event into Qt
name|QWindowSystemInterface
operator|::
name|handleTouchEvent
argument_list|(
name|w
argument_list|,
name|m_touchDevice
argument_list|,
name|pointList
argument_list|)
expr_stmt|;
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"Qt touch, w ="
operator|<<
name|w
operator|<<
literal|", p="
operator|<<
name|m_touchPoints
index|[
name|touchId
index|]
operator|.
name|area
operator|.
name|topLeft
argument_list|()
operator|<<
literal|", t="
operator|<<
name|type
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|handleCloseEvent
name|void
name|QQnxScreenEventHandler
operator|::
name|handleCloseEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|)
block|{
name|screen_window_t
name|window
init|=
literal|0
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_pv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_WINDOW
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|window
argument_list|)
argument_list|,
literal|"Failed to query window property"
argument_list|)
expr_stmt|;
name|Q_EMIT
name|windowClosed
argument_list|(
name|window
argument_list|)
decl_stmt|;
comment|// Map window handle to top-level QWindow
name|QWindow
modifier|*
name|w
init|=
name|QQnxIntegration
operator|::
name|window
argument_list|(
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|0
condition|)
name|QWindowSystemInterface
operator|::
name|handleCloseEvent
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleCreateEvent
name|void
name|QQnxScreenEventHandler
operator|::
name|handleCreateEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|)
block|{
name|screen_window_t
name|window
init|=
literal|0
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_pv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_WINDOW
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|window
argument_list|)
argument_list|,
literal|"Failed to query window property"
argument_list|)
expr_stmt|;
name|Q_EMIT
name|newWindowCreated
argument_list|(
name|window
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|handleDisplayEvent
name|void
name|QQnxScreenEventHandler
operator|::
name|handleDisplayEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|)
block|{
name|screen_display_t
name|nativeDisplay
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|screen_get_event_property_pv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_DISPLAY
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|nativeDisplay
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QQnx: failed to query display property, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|isAttached
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_ATTACHED
argument_list|,
operator|&
name|isAttached
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QQnx: failed to query display attached property, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
return|return;
block|}
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"display attachment is now:"
operator|<<
name|isAttached
expr_stmt|;
name|QQnxScreen
modifier|*
name|screen
init|=
name|m_qnxIntegration
operator|->
name|screenForNative
argument_list|(
name|nativeDisplay
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
block|{
if|if
condition|(
name|isAttached
condition|)
block|{
name|int
name|val
index|[
literal|2
index|]
decl_stmt|;
name|screen_get_display_property_iv
argument_list|(
name|nativeDisplay
argument_list|,
name|SCREEN_PROPERTY_SIZE
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
index|[
literal|0
index|]
operator|==
literal|0
operator|&&
name|val
index|[
literal|1
index|]
operator|==
literal|0
condition|)
comment|//If screen size is invalid, wait for the next event
return|return;
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"creating new QQnxScreen for newly attached display"
expr_stmt|;
name|m_qnxIntegration
operator|->
name|createDisplay
argument_list|(
name|nativeDisplay
argument_list|,
literal|false
comment|/* not primary, we assume */
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isAttached
condition|)
block|{
comment|// We never remove the primary display, the qpa plugin doesn't support that and it crashes.
comment|// To support it, this would be needed:
comment|// - Adjust all qnx qpa code which uses screens
comment|// - Make QWidgetBackingStore not dereference a null paint device
comment|// - Create platform resources ( QQnxWindow ) for all QWindow because they would be deleted
comment|//   when you delete the screen
if|if
condition|(
operator|!
name|screen
operator|->
name|isPrimaryScreen
argument_list|()
condition|)
block|{
comment|// libscreen display is deactivated, let's remove the QQnxScreen / QScreen
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"removing display"
expr_stmt|;
name|m_qnxIntegration
operator|->
name|removeDisplay
argument_list|(
name|screen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|handlePropertyEvent
name|void
name|QQnxScreenEventHandler
operator|::
name|handlePropertyEvent
parameter_list|(
name|screen_event_t
name|event
parameter_list|)
block|{
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|objectType
decl_stmt|;
name|Q_SCREEN_CHECKERROR
argument_list|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_OBJECT_TYPE
argument_list|,
operator|&
name|objectType
argument_list|)
argument_list|,
literal|"Failed to query object type property"
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectType
operator|!=
name|SCREEN_OBJECT_TYPE_WINDOW
condition|)
return|return;
name|errno
operator|=
literal|0
expr_stmt|;
name|screen_window_t
name|window
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|screen_get_event_property_pv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_WINDOW
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|window
argument_list|)
operator|!=
literal|0
condition|)
name|qFatal
argument_list|(
literal|"QQnx: failed to query window property, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|property
decl_stmt|;
if|if
condition|(
name|screen_get_event_property_iv
argument_list|(
name|event
argument_list|,
name|SCREEN_PROPERTY_NAME
argument_list|,
operator|&
name|property
argument_list|)
operator|!=
literal|0
condition|)
name|qFatal
argument_list|(
literal|"QQnx: failed to query window property, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|property
condition|)
block|{
case|case
name|SCREEN_PROPERTY_KEYBOARD_FOCUS
case|:
name|handleKeyboardFocusPropertyEvent
argument_list|(
name|window
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// event ignored
name|qScreenEventDebug
argument_list|()
operator|<<
literal|"Ignore property event for property: "
operator|<<
name|property
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleKeyboardFocusPropertyEvent
name|void
name|QQnxScreenEventHandler
operator|::
name|handleKeyboardFocusPropertyEvent
parameter_list|(
name|screen_window_t
name|window
parameter_list|)
block|{
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|focus
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|window
operator|&&
name|screen_get_window_property_iv
argument_list|(
name|window
argument_list|,
name|SCREEN_PROPERTY_KEYBOARD_FOCUS
argument_list|,
operator|&
name|focus
argument_list|)
operator|!=
literal|0
condition|)
name|qFatal
argument_list|(
literal|"QQnx: failed to query keyboard focus property, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
name|QWindow
modifier|*
name|focusWindow
init|=
name|QQnxIntegration
operator|::
name|window
argument_list|(
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_focusLostTimer
operator|!=
operator|-
literal|1
condition|)
block|{
name|killTimer
argument_list|(
name|m_focusLostTimer
argument_list|)
expr_stmt|;
name|m_focusLostTimer
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|focus
operator|&&
name|focusWindow
operator|!=
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
condition|)
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|focusWindow
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|focus
operator|&&
name|focusWindow
operator|==
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
condition|)
name|m_focusLostTimer
operator|=
name|startTimer
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QQnxScreenEventHandler
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|m_focusLostTimer
condition|)
block|{
name|killTimer
argument_list|(
name|m_focusLostTimer
argument_list|)
expr_stmt|;
name|m_focusLostTimer
operator|=
operator|-
literal|1
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QObject
operator|::
name|timerEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_include
include|#
directive|include
file|"moc_qqnxscreeneventhandler.cpp"
end_include
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
