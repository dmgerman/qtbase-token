begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2012 Research In Motion ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxnavigatoreventhandler.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QQNXNAVIGATOREVENTHANDLER_DEBUG
argument_list|)
end_if
begin_define
DECL|macro|qNavigatorEventHandlerDebug
define|#
directive|define
name|qNavigatorEventHandlerDebug
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qNavigatorEventHandlerDebug
define|#
directive|define
name|qNavigatorEventHandlerDebug
value|QT_NO_QDEBUG_MACRO
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QQnxNavigatorEventHandler
name|QQnxNavigatorEventHandler
operator|::
name|QQnxNavigatorEventHandler
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|handleOrientationCheck
name|bool
name|QQnxNavigatorEventHandler
operator|::
name|handleOrientationCheck
parameter_list|(
name|int
name|angle
parameter_list|)
block|{
comment|// reply to navigator that (any) orientation is acceptable
comment|// TODO: check if top window flags prohibit orientation change
name|qNavigatorEventHandlerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"angle="
operator|<<
name|angle
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|handleOrientationChange
name|void
name|QQnxNavigatorEventHandler
operator|::
name|handleOrientationChange
parameter_list|(
name|int
name|angle
parameter_list|)
block|{
comment|// update screen geometry and reply to navigator that we're ready
name|qNavigatorEventHandlerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"angle="
operator|<<
name|angle
expr_stmt|;
emit|emit
name|rotationChanged
argument_list|(
name|angle
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|handleSwipeDown
name|void
name|QQnxNavigatorEventHandler
operator|::
name|handleSwipeDown
parameter_list|()
block|{
name|qNavigatorEventHandlerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QWindow
modifier|*
name|w
init|=
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
condition|)
block|{
comment|// Get the top level window that is ancestor of the focus window
while|while
condition|(
name|QWindow
modifier|*
name|parent
init|=
name|w
operator|->
name|parent
argument_list|()
condition|)
name|w
operator|=
name|parent
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handlePlatformPanelEvent
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleExit
name|void
name|QQnxNavigatorEventHandler
operator|::
name|handleExit
parameter_list|()
block|{
comment|// shutdown everything
name|qNavigatorEventHandlerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QCoreApplication
operator|::
name|quit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleWindowGroupActivated
name|void
name|QQnxNavigatorEventHandler
operator|::
name|handleWindowGroupActivated
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|id
parameter_list|)
block|{
name|qNavigatorEventHandlerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|id
expr_stmt|;
name|Q_EMIT
name|windowGroupActivated
argument_list|(
name|id
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|handleWindowGroupDeactivated
name|void
name|QQnxNavigatorEventHandler
operator|::
name|handleWindowGroupDeactivated
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|id
parameter_list|)
block|{
name|qNavigatorEventHandlerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|id
expr_stmt|;
name|Q_EMIT
name|windowGroupDeactivated
argument_list|(
name|id
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|handleWindowGroupStateChanged
name|void
name|QQnxNavigatorEventHandler
operator|::
name|handleWindowGroupStateChanged
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|id
parameter_list|,
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
name|qNavigatorEventHandlerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|id
expr_stmt|;
name|Q_EMIT
name|windowGroupStateChanged
argument_list|(
name|id
argument_list|,
name|state
argument_list|)
decl_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
