begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2011 - 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxwindow.h"
end_include
begin_include
include|#
directive|include
file|"qqnxglcontext.h"
end_include
begin_include
include|#
directive|include
file|"qqnxintegration.h"
end_include
begin_include
include|#
directive|include
file|"qqnxscreen.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindowSystemInterface>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QQnxWindow
name|QQnxWindow
operator|::
name|QQnxWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|screen_context_t
name|context
parameter_list|)
member_init_list|:
name|QPlatformWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|m_screenContext
argument_list|(
name|context
argument_list|)
member_init_list|,
name|m_window
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_currentBufferIndex
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_previousBufferIndex
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_platformOpenGLContext
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_screen
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_parentWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_visible
argument_list|(
literal|true
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
operator|<<
literal|", size ="
operator|<<
name|window
operator|->
name|size
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|result
decl_stmt|;
comment|// Create child QNX window
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_create_window_type
argument_list|(
operator|&
name|m_window
argument_list|,
name|m_screenContext
argument_list|,
name|SCREEN_CHILD_WINDOW
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to create window, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Set window buffer usage based on rendering API
name|int
name|val
decl_stmt|;
name|QSurface
operator|::
name|SurfaceType
name|surfaceType
init|=
name|window
operator|->
name|surfaceType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|surfaceType
condition|)
block|{
case|case
name|QSurface
operator|::
name|RasterSurface
case|:
name|val
operator|=
name|SCREEN_USAGE_NATIVE
operator||
name|SCREEN_USAGE_READ
operator||
name|SCREEN_USAGE_WRITE
expr_stmt|;
break|break;
case|case
name|QSurface
operator|::
name|OpenGLSurface
case|:
name|val
operator|=
name|SCREEN_USAGE_OPENGL_ES2
expr_stmt|;
break|break;
default|default:
name|qFatal
argument_list|(
literal|"QQnxWindow: unsupported window API"
argument_list|)
expr_stmt|;
break|break;
block|}
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_USAGE
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window buffer usage, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Alpha channel is always pre-multiplied if present
name|errno
operator|=
literal|0
expr_stmt|;
name|val
operator|=
name|SCREEN_PRE_MULTIPLIED_ALPHA
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_ALPHA_MODE
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window alpha mode, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Make the window opaque
name|errno
operator|=
literal|0
expr_stmt|;
name|val
operator|=
name|SCREEN_TRANSPARENCY_NONE
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_TRANSPARENCY
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window transparency, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Set the window swap interval
name|errno
operator|=
literal|0
expr_stmt|;
name|val
operator|=
literal|1
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_SWAP_INTERVAL
argument_list|,
operator|&
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window swap interval, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|setScreen
argument_list|(
cast|static_cast
argument_list|<
name|QQnxScreen
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the window to the root of the hierarchy
name|m_screen
operator|->
name|addWindow
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Add window to plugin's window mapper
name|QQnxIntegration
operator|::
name|addWindow
argument_list|(
name|m_window
argument_list|,
name|window
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QQnxWindow
name|QQnxWindow
operator|::
name|~
name|QQnxWindow
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Remove from plugin's window mapper
name|QQnxIntegration
operator|::
name|removeWindow
argument_list|(
name|m_window
argument_list|)
expr_stmt|;
comment|// Remove from parent's Hierarchy.
name|removeFromParent
argument_list|()
expr_stmt|;
name|m_screen
operator|->
name|updateHierarchy
argument_list|()
expr_stmt|;
comment|// We shouldn't allow this case unless QT allows it. Does it? Or should we send the
comment|// handleCloseEvent on all children when this window is deleted?
if|if
condition|(
name|m_childWindows
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|qFatal
argument_list|(
literal|"QQnxWindow: window destroyed before children!"
argument_list|)
expr_stmt|;
comment|// Cleanup QNX window and its buffers
name|screen_destroy_window
argument_list|(
name|m_window
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setGeometry
name|void
name|QQnxWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
operator|<<
literal|", ("
operator|<<
name|rect
operator|.
name|x
argument_list|()
operator|<<
literal|","
operator|<<
name|rect
operator|.
name|y
argument_list|()
operator|<<
literal|","
operator|<<
name|rect
operator|.
name|width
argument_list|()
operator|<<
literal|","
operator|<<
name|rect
operator|.
name|height
argument_list|()
operator|<<
literal|")"
expr_stmt|;
endif|#
directive|endif
name|QRect
name|oldGeometry
init|=
name|geometry
argument_list|()
decl_stmt|;
comment|// Call base class method
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
comment|// Set window geometry equal to widget geometry
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|val
index|[
literal|2
index|]
decl_stmt|;
name|val
index|[
literal|0
index|]
operator|=
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
name|val
index|[
literal|1
index|]
operator|=
name|rect
operator|.
name|y
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_POSITION
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window position, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|errno
operator|=
literal|0
expr_stmt|;
name|val
index|[
literal|0
index|]
operator|=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
name|val
index|[
literal|1
index|]
operator|=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_SIZE
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window size, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Set viewport size equal to window size
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_SOURCE_SIZE
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window source size, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Now move all children.
name|QPoint
name|offset
decl_stmt|;
if|if
condition|(
operator|!
name|oldGeometry
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|offset
operator|=
name|rect
operator|.
name|topLeft
argument_list|()
expr_stmt|;
name|offset
operator|-=
name|oldGeometry
operator|.
name|topLeft
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QQnxWindow
modifier|*
argument_list|>
operator|::
name|iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|m_childWindows
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|m_childWindows
operator|.
name|end
argument_list|()
condition|;
name|it
operator|++
control|)
block|{
operator|(
operator|*
name|it
operator|)
operator|->
name|offset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|offset
name|void
name|QQnxWindow
operator|::
name|offset
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Move self and then children.
name|QRect
name|newGeometry
init|=
name|geometry
argument_list|()
decl_stmt|;
name|newGeometry
operator|.
name|translate
argument_list|(
name|offset
argument_list|)
expr_stmt|;
comment|// Call the base class
name|QPlatformWindow
operator|::
name|setGeometry
argument_list|(
name|newGeometry
argument_list|)
expr_stmt|;
name|int
name|val
index|[
literal|2
index|]
decl_stmt|;
name|errno
operator|=
literal|0
expr_stmt|;
name|val
index|[
literal|0
index|]
operator|=
name|newGeometry
operator|.
name|x
argument_list|()
expr_stmt|;
name|val
index|[
literal|1
index|]
operator|=
name|newGeometry
operator|.
name|y
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_POSITION
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window position, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QQnxWindow
modifier|*
argument_list|>
operator|::
name|iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|m_childWindows
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|m_childWindows
operator|.
name|end
argument_list|()
condition|;
name|it
operator|++
control|)
block|{
operator|(
operator|*
name|it
operator|)
operator|->
name|offset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QQnxWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
operator|<<
literal|"visible ="
operator|<<
name|visible
expr_stmt|;
endif|#
directive|endif
name|m_visible
operator|=
name|visible
expr_stmt|;
name|QQnxWindow
modifier|*
name|root
init|=
name|this
decl_stmt|;
while|while
condition|(
name|root
operator|->
name|m_parentWindow
condition|)
name|root
operator|=
name|root
operator|->
name|m_parentWindow
expr_stmt|;
name|root
operator|->
name|updateVisibility
argument_list|(
name|root
operator|->
name|m_visible
argument_list|)
expr_stmt|;
name|window
argument_list|()
operator|->
name|requestActivateWindow
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateVisibility
name|void
name|QQnxWindow
operator|::
name|updateVisibility
parameter_list|(
name|bool
name|parentVisible
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"parentVisible ="
operator|<<
name|parentVisible
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Set window visibility
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|val
init|=
operator|(
name|m_visible
operator|&&
name|parentVisible
operator|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|result
init|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_VISIBLE
argument_list|,
operator|&
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window visibility, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QQnxWindow
modifier|*
argument_list|>
operator|::
name|iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|m_childWindows
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|m_childWindows
operator|.
name|end
argument_list|()
condition|;
name|it
operator|++
control|)
block|{
operator|(
operator|*
name|it
operator|)
operator|->
name|updateVisibility
argument_list|(
name|m_visible
operator|&&
name|parentVisible
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setOpacity
name|void
name|QQnxWindow
operator|::
name|setOpacity
parameter_list|(
name|qreal
name|level
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
operator|<<
literal|"opacity ="
operator|<<
name|level
expr_stmt|;
endif|#
directive|endif
comment|// Set window global alpha
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|val
init|=
call|(
name|int
call|)
argument_list|(
name|level
operator|*
literal|255
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_GLOBAL_ALPHA
argument_list|,
operator|&
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window global alpha, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// TODO: How to handle children of this window? If we change all the visibilities, then
comment|//       the transparency will look wrong...
block|}
end_function
begin_function
DECL|function|setBufferSize
name|void
name|QQnxWindow
operator|::
name|setBufferSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
operator|<<
literal|"size ="
operator|<<
name|size
expr_stmt|;
endif|#
directive|endif
comment|// Set window buffer size
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|val
index|[
literal|2
index|]
init|=
block|{
name|size
operator|.
name|width
argument_list|()
block|,
name|size
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|int
name|result
init|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_BUFFER_SIZE
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window buffer size, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Create window buffers if they do not exist
if|if
condition|(
operator|!
name|hasBuffers
argument_list|()
condition|)
block|{
comment|// Get pixel format from EGL config if using OpenGL;
comment|// otherwise inherit pixel format of window's screen
if|if
condition|(
name|m_platformOpenGLContext
operator|!=
literal|0
condition|)
block|{
name|val
index|[
literal|0
index|]
operator|=
name|platformWindowFormatToNativeFormat
argument_list|(
name|m_platformOpenGLContext
operator|->
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|val
index|[
literal|0
index|]
operator|=
name|m_screen
operator|->
name|nativeFormat
argument_list|()
expr_stmt|;
block|}
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_FORMAT
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window pixel format, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_create_window_buffers
argument_list|(
name|m_window
argument_list|,
name|MAX_BUFFER_COUNT
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to create window buffers, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Cache new buffer size
name|m_bufferSize
operator|=
name|size
expr_stmt|;
comment|// Buffers were destroyed; reacquire them
name|m_currentBufferIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|m_previousDirty
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|m_scrolled
operator|=
name|QRegion
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderBuffer
name|QQnxBuffer
modifier|&
name|QQnxWindow
operator|::
name|renderBuffer
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Check if render buffer is invalid
if|if
condition|(
name|m_currentBufferIndex
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Get all buffers available for rendering
name|errno
operator|=
literal|0
expr_stmt|;
name|screen_buffer_t
name|buffers
index|[
name|MAX_BUFFER_COUNT
index|]
decl_stmt|;
name|int
name|result
init|=
name|screen_get_window_property_pv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_RENDER_BUFFERS
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|buffers
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to query window buffers, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Wrap each buffer
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_BUFFER_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|m_buffers
index|[
name|i
index|]
operator|=
name|QQnxBuffer
argument_list|(
name|buffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Use the first available render buffer
name|m_currentBufferIndex
operator|=
literal|0
expr_stmt|;
name|m_previousBufferIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|m_buffers
index|[
name|m_currentBufferIndex
index|]
return|;
block|}
end_function
begin_function
DECL|function|scroll
name|void
name|QQnxWindow
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
name|bool
name|flush
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|copyBack
argument_list|(
name|region
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|flush
argument_list|)
expr_stmt|;
name|m_scrolled
operator|+=
name|region
expr_stmt|;
block|}
end_function
begin_function
DECL|function|post
name|void
name|QQnxWindow
operator|::
name|post
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|dirty
parameter_list|)
block|{
comment|// Check if render buffer exists and something was rendered
if|if
condition|(
name|m_currentBufferIndex
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|dirty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQnxWindow::post - window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QQnxBuffer
modifier|&
name|currentBuffer
init|=
name|m_buffers
index|[
name|m_currentBufferIndex
index|]
decl_stmt|;
comment|// Copy unmodified region from old render buffer to new render buffer;
comment|// required to allow partial updates
name|QRegion
name|preserve
init|=
name|m_previousDirty
operator|-
name|dirty
operator|-
name|m_scrolled
decl_stmt|;
name|copyBack
argument_list|(
name|preserve
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Calculate region that changed
name|QRegion
name|modified
init|=
name|preserve
operator|+
name|dirty
operator|+
name|m_scrolled
decl_stmt|;
name|QRect
name|rect
init|=
name|modified
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|int
name|dirtyRect
index|[
literal|4
index|]
init|=
block|{
name|rect
operator|.
name|x
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
block|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
comment|// Update the display with contents of render buffer
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|result
init|=
name|screen_post_window
argument_list|(
name|m_window
argument_list|,
name|currentBuffer
operator|.
name|nativeBuffer
argument_list|()
argument_list|,
literal|1
argument_list|,
name|dirtyRect
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to post window buffer, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Advance to next nender buffer
name|m_previousBufferIndex
operator|=
name|m_currentBufferIndex
operator|++
expr_stmt|;
if|if
condition|(
name|m_currentBufferIndex
operator|>=
name|MAX_BUFFER_COUNT
condition|)
block|{
name|m_currentBufferIndex
operator|=
literal|0
expr_stmt|;
block|}
comment|// Save modified region and clear scrolled region
name|m_previousDirty
operator|=
name|dirty
expr_stmt|;
name|m_scrolled
operator|=
name|QRegion
argument_list|()
expr_stmt|;
comment|// Notify screen that window posted
if|if
condition|(
name|m_screen
operator|!=
literal|0
condition|)
block|{
name|m_screen
operator|->
name|onWindowPost
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setScreen
name|void
name|QQnxWindow
operator|::
name|setScreen
parameter_list|(
name|QQnxScreen
modifier|*
name|platformScreen
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
operator|<<
literal|"platformScreen ="
operator|<<
name|platformScreen
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|m_screen
operator|==
name|platformScreen
condition|)
return|return;
if|if
condition|(
name|m_screen
operator|&&
name|m_screen
operator|->
name|findWindow
argument_list|(
name|m_window
argument_list|)
condition|)
block|{
name|m_screen
operator|->
name|removeWindow
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|platformScreen
operator|->
name|addWindow
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|m_screen
operator|=
name|platformScreen
expr_stmt|;
comment|// Move window to proper screen/display
name|errno
operator|=
literal|0
expr_stmt|;
name|screen_display_t
name|display
init|=
name|platformScreen
operator|->
name|nativeDisplay
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|screen_set_window_property_pv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_DISPLAY
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window display, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Add window to display's window group
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_join_window_group
argument_list|(
name|m_window
argument_list|,
name|platformScreen
operator|->
name|windowGroupName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to join window group, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QQnxWindow
modifier|*
argument_list|>
operator|::
name|iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|m_childWindows
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|m_childWindows
operator|.
name|end
argument_list|()
condition|;
name|it
operator|++
control|)
block|{
comment|// Only subwindows and tooltips need necessarily be moved to another display with the window.
if|if
condition|(
operator|(
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|&
name|Qt
operator|::
name|WindowType_Mask
operator|)
operator|==
name|Qt
operator|::
name|SubWindow
operator|||
operator|(
name|window
argument_list|()
operator|->
name|windowType
argument_list|()
operator|&
name|Qt
operator|::
name|WindowType_Mask
operator|)
operator|==
name|Qt
operator|::
name|ToolTip
condition|)
operator|(
operator|*
name|it
operator|)
operator|->
name|setScreen
argument_list|(
name|platformScreen
argument_list|)
expr_stmt|;
block|}
name|m_screen
operator|->
name|updateHierarchy
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeFromParent
name|void
name|QQnxWindow
operator|::
name|removeFromParent
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Remove from old Hierarchy position
if|if
condition|(
name|m_parentWindow
condition|)
block|{
if|if
condition|(
name|m_parentWindow
operator|->
name|m_childWindows
operator|.
name|removeAll
argument_list|(
name|this
argument_list|)
condition|)
name|m_parentWindow
operator|=
literal|0
expr_stmt|;
else|else
name|qFatal
argument_list|(
literal|"QQnxWindow: Window Hierarchy broken; window has parent, but parent hasn't got child."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_screen
operator|->
name|removeWindow
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setParent
name|void
name|QQnxWindow
operator|::
name|setParent
parameter_list|(
specifier|const
name|QPlatformWindow
modifier|*
name|window
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|this
operator|->
name|window
argument_list|()
operator|<<
literal|"platformWindow ="
operator|<<
name|window
expr_stmt|;
endif|#
directive|endif
comment|// Cast away the const, we need to modify the hierarchy.
name|QQnxWindow
modifier|*
name|newParent
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|window
condition|)
name|newParent
operator|=
cast|static_cast
argument_list|<
name|QQnxWindow
operator|*
argument_list|>
argument_list|(
operator|(
name|QPlatformWindow
operator|*
operator|)
name|window
argument_list|)
expr_stmt|;
if|if
condition|(
name|newParent
operator|==
name|m_parentWindow
condition|)
return|return;
name|removeFromParent
argument_list|()
expr_stmt|;
name|m_parentWindow
operator|=
name|newParent
expr_stmt|;
comment|// Add to new hierarchy position.
if|if
condition|(
name|m_parentWindow
condition|)
block|{
if|if
condition|(
name|m_parentWindow
operator|->
name|m_screen
operator|!=
name|m_screen
condition|)
name|setScreen
argument_list|(
name|m_parentWindow
operator|->
name|m_screen
argument_list|)
expr_stmt|;
name|m_parentWindow
operator|->
name|m_childWindows
operator|.
name|push_back
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_screen
operator|->
name|addWindow
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|m_screen
operator|->
name|updateHierarchy
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|raise
name|void
name|QQnxWindow
operator|::
name|raise
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QQnxWindow
modifier|*
name|oldParent
init|=
name|m_parentWindow
decl_stmt|;
if|if
condition|(
name|oldParent
condition|)
block|{
name|removeFromParent
argument_list|()
expr_stmt|;
name|oldParent
operator|->
name|m_childWindows
operator|.
name|push_back
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_screen
operator|->
name|raiseWindow
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|m_screen
operator|->
name|updateHierarchy
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lower
name|void
name|QQnxWindow
operator|::
name|lower
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QQnxWindow
modifier|*
name|oldParent
init|=
name|m_parentWindow
decl_stmt|;
if|if
condition|(
name|oldParent
condition|)
block|{
name|removeFromParent
argument_list|()
expr_stmt|;
name|oldParent
operator|->
name|m_childWindows
operator|.
name|push_front
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_screen
operator|->
name|lowerWindow
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|m_screen
operator|->
name|updateHierarchy
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|requestActivateWindow
name|void
name|QQnxWindow
operator|::
name|requestActivateWindow
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// TODO: Tell screen to set keyboard focus to this window.
comment|// Notify that we gained focus.
name|gainedFocus
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|gainedFocus
name|void
name|QQnxWindow
operator|::
name|gainedFocus
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Got focus
name|QWindowSystemInterface
operator|::
name|handleWindowActivated
argument_list|(
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPlatformOpenGLContext
name|void
name|QQnxWindow
operator|::
name|setPlatformOpenGLContext
parameter_list|(
name|QQnxGLContext
modifier|*
name|platformOpenGLContext
parameter_list|)
block|{
comment|// This function does not take ownership of the platform gl context.
comment|// It is owned by the frontend QOpenGLContext
name|m_platformOpenGLContext
operator|=
name|platformOpenGLContext
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findWindow
name|QQnxWindow
modifier|*
name|QQnxWindow
operator|::
name|findWindow
parameter_list|(
name|screen_window_t
name|windowHandle
parameter_list|)
block|{
if|if
condition|(
name|m_window
operator|==
name|windowHandle
condition|)
return|return
name|this
return|;
name|Q_FOREACH
argument_list|(
argument|QQnxWindow *window
argument_list|,
argument|m_childWindows
argument_list|)
block|{
name|QQnxWindow
modifier|*
specifier|const
name|result
init|=
name|window
operator|->
name|findWindow
argument_list|(
name|windowHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
return|return
name|result
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|updateZorder
name|void
name|QQnxWindow
operator|::
name|updateZorder
parameter_list|(
name|int
modifier|&
name|topZorder
parameter_list|)
block|{
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|result
init|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_ZORDER
argument_list|,
operator|&
name|topZorder
argument_list|)
decl_stmt|;
name|topZorder
operator|++
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to set window z-order=%d, errno=%d, mWindow=%p"
argument_list|,
name|topZorder
argument_list|,
name|errno
argument_list|,
name|m_window
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QQnxWindow
modifier|*
argument_list|>
operator|::
name|const_iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|m_childWindows
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|m_childWindows
operator|.
name|end
argument_list|()
condition|;
name|it
operator|++
control|)
operator|(
operator|*
name|it
operator|)
operator|->
name|updateZorder
argument_list|(
name|topZorder
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyBack
name|void
name|QQnxWindow
operator|::
name|copyBack
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
name|bool
name|flush
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|int
name|result
decl_stmt|;
comment|// Abort if previous buffer is invalid
if|if
condition|(
name|m_previousBufferIndex
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
comment|// Abort if nothing to copy
if|if
condition|(
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|QQnxBuffer
modifier|&
name|currentBuffer
init|=
name|m_buffers
index|[
name|m_currentBufferIndex
index|]
decl_stmt|;
name|QQnxBuffer
modifier|&
name|previousBuffer
init|=
name|m_buffers
index|[
name|m_previousBufferIndex
index|]
decl_stmt|;
comment|// Break down region into non-overlapping rectangles
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|rects
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// Clip rectangle to bounds of target
name|QRect
name|rect
init|=
name|rects
index|[
name|i
index|]
operator|.
name|intersected
argument_list|(
name|currentBuffer
operator|.
name|rect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
comment|// Setup blit operation
name|int
name|attribs
index|[]
init|=
block|{
name|SCREEN_BLIT_SOURCE_X
block|,
name|rect
operator|.
name|x
argument_list|()
block|,
name|SCREEN_BLIT_SOURCE_Y
block|,
name|rect
operator|.
name|y
argument_list|()
block|,
name|SCREEN_BLIT_SOURCE_WIDTH
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|SCREEN_BLIT_SOURCE_HEIGHT
block|,
name|rect
operator|.
name|height
argument_list|()
block|,
name|SCREEN_BLIT_DESTINATION_X
block|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|dx
block|,
name|SCREEN_BLIT_DESTINATION_Y
block|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|dy
block|,
name|SCREEN_BLIT_DESTINATION_WIDTH
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|SCREEN_BLIT_DESTINATION_HEIGHT
block|,
name|rect
operator|.
name|height
argument_list|()
block|,
name|SCREEN_BLIT_END
block|}
decl_stmt|;
comment|// Queue blit operation
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_blit
argument_list|(
name|m_screenContext
argument_list|,
name|currentBuffer
operator|.
name|nativeBuffer
argument_list|()
argument_list|,
name|previousBuffer
operator|.
name|nativeBuffer
argument_list|()
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to blit buffers, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check if flush requested
if|if
condition|(
name|flush
condition|)
block|{
comment|// Wait for all blits to complete
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_flush_blits
argument_list|(
name|m_screenContext
argument_list|,
name|SCREEN_WAIT_IDLE
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to flush blits, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Buffer was modified outside the CPU
name|currentBuffer
operator|.
name|invalidateInCache
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|platformWindowFormatToNativeFormat
name|int
name|QQnxWindow
operator|::
name|platformWindowFormatToNativeFormat
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXWINDOW_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
comment|// Extract size of colour channels from window format
name|int
name|redSize
init|=
name|format
operator|.
name|redBufferSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|redSize
operator|==
operator|-
literal|1
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: red size not defined"
argument_list|)
expr_stmt|;
block|}
name|int
name|greenSize
init|=
name|format
operator|.
name|greenBufferSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|greenSize
operator|==
operator|-
literal|1
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: green size not defined"
argument_list|)
expr_stmt|;
block|}
name|int
name|blueSize
init|=
name|format
operator|.
name|blueBufferSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|blueSize
operator|==
operator|-
literal|1
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: blue size not defined"
argument_list|)
expr_stmt|;
block|}
comment|// select matching native format
if|if
condition|(
name|redSize
operator|==
literal|5
operator|&&
name|greenSize
operator|==
literal|6
operator|&&
name|blueSize
operator|==
literal|5
condition|)
block|{
return|return
name|SCREEN_FORMAT_RGB565
return|;
block|}
elseif|else
if|if
condition|(
name|redSize
operator|==
literal|8
operator|&&
name|greenSize
operator|==
literal|8
operator|&&
name|blueSize
operator|==
literal|8
condition|)
block|{
return|return
name|SCREEN_FORMAT_RGBA8888
return|;
block|}
else|else
block|{
name|qFatal
argument_list|(
literal|"QQnxWindow: unsupported pixel format"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
