begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2013 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QQNXSCREENEVENTHANDLER_H
end_ifndef
begin_define
DECL|macro|QQNXSCREENEVENTHANDLER_H
define|#
directive|define
name|QQNXSCREENEVENTHANDLER_H
end_define
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<screen/screen.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QQnxIntegration
name|class
name|QQnxIntegration
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QQnxScreenEventFilter
name|class
name|QQnxScreenEventFilter
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QQNX_SCREENEVENTTHREAD
argument_list|)
end_if
begin_decl_stmt
DECL|variable|QQnxScreenEventThread
name|class
name|QQnxScreenEventThread
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|QQnxScreenEventHandler
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QQnxScreenEventHandler
argument_list|(
name|QQnxIntegration
operator|*
name|integration
argument_list|)
block|;
name|void
name|addScreenEventFilter
argument_list|(
name|QQnxScreenEventFilter
operator|*
name|filter
argument_list|)
block|;
name|void
name|removeScreenEventFilter
argument_list|(
name|QQnxScreenEventFilter
operator|*
name|filter
argument_list|)
block|;
name|bool
name|handleEvent
argument_list|(
argument|screen_event_t event
argument_list|)
block|;
name|bool
name|handleEvent
argument_list|(
argument|screen_event_t event
argument_list|,
argument|int qnxType
argument_list|)
block|;
specifier|static
name|void
name|injectKeyboardEvent
argument_list|(
argument|int flags
argument_list|,
argument|int sym
argument_list|,
argument|int mod
argument_list|,
argument|int scan
argument_list|,
argument|int cap
argument_list|)
block|;
if|#
directive|if
name|defined
argument_list|(
name|QQNX_SCREENEVENTTHREAD
argument_list|)
name|void
name|setScreenEventThread
argument_list|(
name|QQnxScreenEventThread
operator|*
name|eventThread
argument_list|)
block|;
endif|#
directive|endif
name|Q_SIGNALS
operator|:
name|void
name|newWindowCreated
argument_list|(
name|void
operator|*
name|window
argument_list|)
block|;
name|void
name|windowClosed
argument_list|(
name|void
operator|*
name|window
argument_list|)
block|;
name|protected
operator|:
name|void
name|timerEvent
argument_list|(
name|QTimerEvent
operator|*
name|event
argument_list|)
block|;
if|#
directive|if
name|defined
argument_list|(
name|QQNX_SCREENEVENTTHREAD
argument_list|)
name|private
name|Q_SLOTS
operator|:
name|void
name|processEventsFromScreenThread
argument_list|()
block|;
endif|#
directive|endif
name|private
operator|:
name|void
name|handleKeyboardEvent
argument_list|(
argument|screen_event_t event
argument_list|)
block|;
name|void
name|handlePointerEvent
argument_list|(
argument|screen_event_t event
argument_list|)
block|;
name|void
name|handleTouchEvent
argument_list|(
argument|screen_event_t event
argument_list|,
argument|int qnxType
argument_list|)
block|;
name|void
name|handleCloseEvent
argument_list|(
argument|screen_event_t event
argument_list|)
block|;
name|void
name|handleCreateEvent
argument_list|(
argument|screen_event_t event
argument_list|)
block|;
name|void
name|handleDisplayEvent
argument_list|(
argument|screen_event_t event
argument_list|)
block|;
name|void
name|handlePropertyEvent
argument_list|(
argument|screen_event_t event
argument_list|)
block|;
name|void
name|handleKeyboardFocusPropertyEvent
argument_list|(
argument|screen_window_t window
argument_list|)
block|;
name|private
operator|:
expr|enum
block|{
name|MaximumTouchPoints
operator|=
literal|10
block|}
block|;
name|QQnxIntegration
operator|*
name|m_qnxIntegration
block|;
name|QPoint
name|m_lastGlobalMousePoint
block|;
name|QPoint
name|m_lastLocalMousePoint
block|;
name|Qt
operator|::
name|MouseButtons
name|m_lastButtonState
block|;
name|screen_window_t
name|m_lastMouseWindow
block|;
name|QTouchDevice
operator|*
name|m_touchDevice
block|;
name|QWindowSystemInterface
operator|::
name|TouchPoint
name|m_touchPoints
index|[
name|MaximumTouchPoints
index|]
block|;
name|QList
operator|<
name|QQnxScreenEventFilter
operator|*
operator|>
name|m_eventFilters
block|;
if|#
directive|if
name|defined
argument_list|(
name|QQNX_SCREENEVENTTHREAD
argument_list|)
name|QQnxScreenEventThread
operator|*
name|m_eventThread
block|;
endif|#
directive|endif
name|int
name|m_focusLostTimer
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QQNXSCREENEVENTHANDLER_H
end_comment
end_unit
