begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2011 - 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxinputcontext_imf.h"
end_include
begin_include
include|#
directive|include
file|"qqnxeventthread.h"
end_include
begin_include
include|#
directive|include
file|"qqnxabstractvirtualkeyboard.h"
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QAbstractSpinBox>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QAction>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QInputMethodEvent>
end_include
begin_include
include|#
directive|include
file|<QtGui/QTextCharFormat>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMutex>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariantHash>
end_include
begin_include
include|#
directive|include
file|<QtCore/QWaitCondition>
end_include
begin_include
include|#
directive|include
file|<dlfcn.h>
end_include
begin_include
include|#
directive|include
file|"imf/imf_client.h"
end_include
begin_include
include|#
directive|include
file|"imf/input_control.h"
end_include
begin_include
include|#
directive|include
file|<process.h>
end_include
begin_include
include|#
directive|include
file|<sys/keycodes.h>
end_include
begin_comment
comment|/** TODO:     Support inputMethodHints to restrict input (needs additional features in IMF). */
end_comment
begin_define
DECL|macro|STRX
define|#
directive|define
name|STRX
parameter_list|(
name|x
parameter_list|)
value|#x
end_define
begin_define
DECL|macro|STR
define|#
directive|define
name|STR
parameter_list|(
name|x
parameter_list|)
value|STRX(x)
end_define
begin_comment
comment|// Someone tell me why input_control methods are in this namespace, but the rest is not.
end_comment
begin_using
using|using
namespace|namespace
name|InputMethodSystem
namespace|;
end_using
begin_define
DECL|macro|qs
define|#
directive|define
name|qs
parameter_list|(
name|x
parameter_list|)
value|QString::fromLatin1(x)
end_define
begin_define
DECL|macro|iarg
define|#
directive|define
name|iarg
parameter_list|(
name|name
parameter_list|)
value|event->mArgs[qs(#name)] = QVariant::fromValue(name)
end_define
begin_define
DECL|macro|parg
define|#
directive|define
name|parg
parameter_list|(
name|name
parameter_list|)
value|event->mArgs[qs(#name)] = QVariant::fromValue((void*)name)
end_define
begin_namespace
namespace|namespace
block|{
name|spannable_string_t
modifier|*
name|toSpannableString
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
DECL|member|sInputSession
specifier|static
specifier|const
name|input_session_t
modifier|*
name|sInputSession
init|=
literal|0
decl_stmt|;
DECL|function|isSessionOkay
name|bool
name|isSessionOkay
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
return|return
name|ic
operator|!=
literal|0
operator|&&
name|sInputSession
operator|!=
literal|0
operator|&&
name|ic
operator|->
name|component_id
operator|==
name|sInputSession
operator|->
name|component_id
return|;
block|}
DECL|enum|ImfEventType
enum|enum
name|ImfEventType
block|{
DECL|enumerator|ImfBeginBatchEdit
name|ImfBeginBatchEdit
block|,
DECL|enumerator|ImfClearMetaKeyStates
name|ImfClearMetaKeyStates
block|,
DECL|enumerator|ImfCommitText
name|ImfCommitText
block|,
DECL|enumerator|ImfDeleteSurroundingText
name|ImfDeleteSurroundingText
block|,
DECL|enumerator|ImfEndBatchEdit
name|ImfEndBatchEdit
block|,
DECL|enumerator|ImfFinishComposingText
name|ImfFinishComposingText
block|,
DECL|enumerator|ImfGetCursorCapsMode
name|ImfGetCursorCapsMode
block|,
DECL|enumerator|ImfGetCursorPosition
name|ImfGetCursorPosition
block|,
DECL|enumerator|ImfGetExtractedText
name|ImfGetExtractedText
block|,
DECL|enumerator|ImfGetSelectedText
name|ImfGetSelectedText
block|,
DECL|enumerator|ImfGetTextAfterCursor
name|ImfGetTextAfterCursor
block|,
DECL|enumerator|ImfGetTextBeforeCursor
name|ImfGetTextBeforeCursor
block|,
DECL|enumerator|ImfPerformEditorAction
name|ImfPerformEditorAction
block|,
DECL|enumerator|ImfReportFullscreenMode
name|ImfReportFullscreenMode
block|,
DECL|enumerator|ImfSendEvent
name|ImfSendEvent
block|,
DECL|enumerator|ImfSendAsyncEvent
name|ImfSendAsyncEvent
block|,
DECL|enumerator|ImfSetComposingRegion
name|ImfSetComposingRegion
block|,
DECL|enumerator|ImfSetComposingText
name|ImfSetComposingText
block|,
DECL|enumerator|ImfSetSelection
name|ImfSetSelection
block|}
enum|;
comment|// We use this class as a round about way to support a posting synchronous event into
comment|// Qt's main thread from the IMF thread.
DECL|class|ImfEventResult
class|class
name|ImfEventResult
block|{
public|public:
DECL|function|ImfEventResult
name|ImfEventResult
parameter_list|()
block|{
name|m_mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
DECL|function|~ImfEventResult
name|~
name|ImfEventResult
parameter_list|()
block|{
name|m_mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|function|wait
name|void
name|wait
parameter_list|()
block|{
name|m_wait
operator|.
name|wait
argument_list|(
operator|&
name|m_mutex
argument_list|)
expr_stmt|;
block|}
DECL|function|signal
name|void
name|signal
parameter_list|()
block|{
name|m_wait
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
block|}
DECL|function|setResult
name|void
name|setResult
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|result
parameter_list|)
block|{
name|m_mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|m_retVal
operator|=
name|result
expr_stmt|;
name|signal
argument_list|()
expr_stmt|;
name|m_mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|function|result
name|QVariant
name|result
parameter_list|()
block|{
return|return
name|m_retVal
return|;
block|}
private|private:
DECL|member|m_retVal
name|QVariant
name|m_retVal
decl_stmt|;
DECL|member|m_mutex
name|QMutex
name|m_mutex
decl_stmt|;
DECL|member|m_wait
name|QWaitCondition
name|m_wait
decl_stmt|;
block|}
class|;
DECL|class|ImfEvent
class|class
name|ImfEvent
super|:
specifier|public
name|QEvent
block|{
public|public:
DECL|function|ImfEvent
name|ImfEvent
parameter_list|(
name|input_session_t
modifier|*
name|session
parameter_list|,
name|ImfEventType
name|type
parameter_list|,
name|ImfEventResult
modifier|*
name|result
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
operator|(
name|QEvent
operator|::
name|Type
operator|)
name|sUserEventType
argument_list|)
member_init_list|,
name|m_session
argument_list|(
name|session
argument_list|)
member_init_list|,
name|m_imfType
argument_list|(
name|type
argument_list|)
member_init_list|,
name|m_result
argument_list|(
name|result
argument_list|)
block|{         }
DECL|function|~ImfEvent
name|~
name|ImfEvent
parameter_list|()
block|{ }
DECL|member|m_session
name|input_session_t
modifier|*
name|m_session
decl_stmt|;
DECL|member|m_imfType
name|ImfEventType
name|m_imfType
decl_stmt|;
DECL|member|m_args
name|QVariantHash
name|m_args
decl_stmt|;
DECL|member|m_result
name|ImfEventResult
modifier|*
name|m_result
decl_stmt|;
DECL|member|sUserEventType
specifier|static
name|int
name|sUserEventType
decl_stmt|;
block|}
class|;
DECL|member|sUserEventType
name|int
name|ImfEvent
operator|::
name|sUserEventType
init|=
name|QEvent
operator|::
name|registerEventType
argument_list|()
decl_stmt|;
DECL|function|imfBeginBatchEdit
specifier|static
name|int32_t
name|imfBeginBatchEdit
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfBeginBatchEdit
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfClearMetaKeyStates
specifier|static
name|int32_t
name|imfClearMetaKeyStates
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|states
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfClearMetaKeyStates
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|iarg
argument_list|(
name|states
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfCommitText
specifier|static
name|int32_t
name|imfCommitText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfCommitText
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|parg
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|iarg
argument_list|(
name|new_cursor_position
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfDeleteSurroundingText
specifier|static
name|int32_t
name|imfDeleteSurroundingText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|left_length
parameter_list|,
name|int32_t
name|right_length
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfDeleteSurroundingText
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|iarg
argument_list|(
name|left_length
argument_list|)
expr_stmt|;
name|iarg
argument_list|(
name|right_length
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfEndBatchEdit
specifier|static
name|int32_t
name|imfEndBatchEdit
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfEndBatchEdit
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfFinishComposingText
specifier|static
name|int32_t
name|imfFinishComposingText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfFinishComposingText
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfGetCursorCapsMode
specifier|static
name|int32_t
name|imfGetCursorCapsMode
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|req_modes
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfGetCursorCapsMode
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|iarg
argument_list|(
name|req_modes
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfGetCursorPosition
specifier|static
name|int32_t
name|imfGetCursorPosition
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfGetCursorPosition
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfGetExtractedText
specifier|static
name|extracted_text_t
modifier|*
name|imfGetExtractedText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|extracted_text_request_t
modifier|*
name|request
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
block|{
name|extracted_text_t
modifier|*
name|et
init|=
operator|(
name|extracted_text_t
operator|*
operator|)
name|calloc
argument_list|(
sizeof|sizeof
argument_list|(
name|extracted_text_t
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|et
operator|->
name|text
operator|=
operator|(
name|spannable_string_t
operator|*
operator|)
name|calloc
argument_list|(
sizeof|sizeof
argument_list|(
name|spannable_string_t
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|et
return|;
block|}
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfGetExtractedText
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|parg
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|iarg
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|extracted_text_t
operator|*
argument_list|>
argument_list|()
return|;
block|}
DECL|function|imfGetSelectedText
specifier|static
name|spannable_string_t
modifier|*
name|imfGetSelectedText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
name|toSpannableString
argument_list|(
literal|""
argument_list|)
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfGetSelectedText
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|iarg
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|extracted_text_t
operator|*
argument_list|>
argument_list|()
return|;
block|}
DECL|function|imfGetTextAfterCursor
specifier|static
name|spannable_string_t
modifier|*
name|imfGetTextAfterCursor
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|n
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
name|toSpannableString
argument_list|(
literal|""
argument_list|)
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfGetTextAfterCursor
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|iarg
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|iarg
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|extracted_text_t
operator|*
argument_list|>
argument_list|()
return|;
block|}
DECL|function|imfGetTextBeforeCursor
specifier|static
name|spannable_string_t
modifier|*
name|imfGetTextBeforeCursor
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|n
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
name|toSpannableString
argument_list|(
literal|""
argument_list|)
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfGetTextBeforeCursor
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|iarg
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|iarg
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|extracted_text_t
operator|*
argument_list|>
argument_list|()
return|;
block|}
DECL|function|imfPerformEditorAction
specifier|static
name|int32_t
name|imfPerformEditorAction
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|editor_action
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfPerformEditorAction
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|iarg
argument_list|(
name|editor_action
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfReportFullscreenMode
specifier|static
name|int32_t
name|imfReportFullscreenMode
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|enabled
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfReportFullscreenMode
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|iarg
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfSendEvent
specifier|static
name|int32_t
name|imfSendEvent
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|event_t
modifier|*
name|event
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEvent
modifier|*
name|imfEvent
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfSendEvent
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_args
index|[
name|qs
argument_list|(
literal|"event"
argument_list|)
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|imfEvent
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|imfSendAsyncEvent
specifier|static
name|int32_t
name|imfSendAsyncEvent
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|event_t
modifier|*
name|event
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEvent
modifier|*
name|imfEvent
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfSendAsyncEvent
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_args
index|[
name|qs
argument_list|(
literal|"event"
argument_list|)
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|imfEvent
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|imfSetComposingRegion
specifier|static
name|int32_t
name|imfSetComposingRegion
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|start
parameter_list|,
name|int32_t
name|end
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfSetComposingRegion
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|iarg
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|iarg
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfSetComposingText
specifier|static
name|int32_t
name|imfSetComposingText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfSetComposingText
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|parg
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|iarg
argument_list|(
name|new_cursor_position
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|function|imfSetSelection
specifier|static
name|int32_t
name|imfSetSelection
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|start
parameter_list|,
name|int32_t
name|end
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|ImfEventResult
name|result
decl_stmt|;
name|ImfEvent
modifier|*
name|event
init|=
operator|new
name|ImfEvent
argument_list|(
name|ic
argument_list|,
name|ImfSetSelection
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|iarg
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|iarg
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|result
operator|.
name|wait
argument_list|()
expr_stmt|;
name|int32_t
name|ret
init|=
name|result
operator|.
name|result
argument_list|()
operator|.
name|value
argument_list|<
name|int32_t
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|member|ic_funcs
specifier|static
name|connection_interface_t
name|ic_funcs
init|=
block|{
name|imfBeginBatchEdit
block|,
name|imfClearMetaKeyStates
block|,
name|imfCommitText
block|,
name|imfDeleteSurroundingText
block|,
name|imfEndBatchEdit
block|,
name|imfFinishComposingText
block|,
name|imfGetCursorCapsMode
block|,
name|imfGetCursorPosition
block|,
name|imfGetExtractedText
block|,
name|imfGetSelectedText
block|,
name|imfGetTextAfterCursor
block|,
name|imfGetTextBeforeCursor
block|,
name|imfPerformEditorAction
block|,
name|imfReportFullscreenMode
block|,
name|NULL
block|,
comment|//ic_send_key_event
name|imfSendEvent
block|,
name|imfSendAsyncEvent
block|,
name|imfSetComposingRegion
block|,
name|imfSetComposingText
block|,
name|imfSetSelection
block|,
name|NULL
block|,
comment|//ic_set_candidates,
block|}
decl_stmt|;
specifier|static
name|void
DECL|function|initEvent
name|initEvent
parameter_list|(
name|event_t
modifier|*
name|pEvent
parameter_list|,
specifier|const
name|input_session_t
modifier|*
name|pSession
parameter_list|,
name|EventType
name|eventType
parameter_list|,
name|int
name|eventId
parameter_list|)
block|{
specifier|static
name|int
name|s_transactionId
decl_stmt|;
comment|// Make sure structure is squeaky clean since it's not clear just what is significant.
name|memset
argument_list|(
name|pEvent
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|event_t
argument_list|)
argument_list|)
expr_stmt|;
name|pEvent
operator|->
name|event_type
operator|=
name|eventType
expr_stmt|;
name|pEvent
operator|->
name|event_id
operator|=
name|eventId
expr_stmt|;
name|pEvent
operator|->
name|pid
operator|=
name|getpid
argument_list|()
expr_stmt|;
name|pEvent
operator|->
name|component_id
operator|=
name|pSession
operator|->
name|component_id
expr_stmt|;
name|pEvent
operator|->
name|transaction_id
operator|=
operator|++
name|s_transactionId
expr_stmt|;
block|}
DECL|function|toSpannableString
name|spannable_string_t
modifier|*
name|toSpannableString
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|text
expr_stmt|;
endif|#
directive|endif
name|spannable_string_t
modifier|*
name|pString
init|=
cast|reinterpret_cast
argument_list|<
name|spannable_string_t
operator|*
argument_list|>
argument_list|(
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|spannable_string_t
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|pString
operator|->
name|str
operator|=
operator|(
name|wchar_t
operator|*
operator|)
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|text
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|pString
operator|->
name|length
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|pString
operator|->
name|spans
operator|=
name|NULL
expr_stmt|;
name|pString
operator|->
name|spans_count
operator|=
literal|0
expr_stmt|;
specifier|const
name|QChar
modifier|*
name|pData
init|=
name|text
operator|.
name|constData
argument_list|()
decl_stmt|;
name|wchar_t
modifier|*
name|pDst
init|=
name|pString
operator|->
name|str
decl_stmt|;
while|while
condition|(
operator|!
name|pData
operator|->
name|isNull
argument_list|()
condition|)
block|{
operator|*
name|pDst
operator|=
name|pData
operator|->
name|unicode
argument_list|()
expr_stmt|;
name|pDst
operator|++
expr_stmt|;
name|pData
operator|++
expr_stmt|;
block|}
operator|*
name|pDst
operator|=
literal|0
expr_stmt|;
return|return
name|pString
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace
end_comment
begin_function_decl
DECL|variable|p_ictrl_open_session
specifier|static
specifier|const
name|input_session_t
modifier|*
function_decl|(
modifier|*
name|p_ictrl_open_session
function_decl|)
parameter_list|(
name|connection_interface_t
modifier|*
parameter_list|)
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_ictrl_close_session
specifier|static
name|void
function_decl|(
modifier|*
name|p_ictrl_close_session
function_decl|)
parameter_list|(
name|input_session_t
modifier|*
parameter_list|)
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_ictrl_dispatch_event
specifier|static
name|int32_t
function_decl|(
modifier|*
name|p_ictrl_dispatch_event
function_decl|)
parameter_list|(
name|event_t
modifier|*
parameter_list|)
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_imf_client_init
specifier|static
name|int32_t
function_decl|(
modifier|*
name|p_imf_client_init
function_decl|)
parameter_list|()
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_imf_client_disconnect
specifier|static
name|void
function_decl|(
modifier|*
name|p_imf_client_disconnect
function_decl|)
parameter_list|()
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_vkb_init_selection_service
specifier|static
name|int32_t
function_decl|(
modifier|*
name|p_vkb_init_selection_service
function_decl|)
parameter_list|()
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_ictrl_get_num_active_sessions
specifier|static
name|int32_t
function_decl|(
modifier|*
name|p_ictrl_get_num_active_sessions
function_decl|)
parameter_list|()
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|s_imfInitFailed
specifier|static
name|bool
name|s_imfInitFailed
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|imfAvailable
specifier|static
name|bool
name|imfAvailable
parameter_list|()
block|{
specifier|static
name|bool
name|s_imfDisabled
init|=
name|getenv
argument_list|(
literal|"DISABLE_IMF"
argument_list|)
operator|!=
name|NULL
decl_stmt|;
specifier|static
name|bool
name|s_imfReady
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|s_imfInitFailed
operator|||
name|s_imfDisabled
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|s_imfReady
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|p_imf_client_init
operator|==
name|NULL
condition|)
block|{
name|void
modifier|*
name|handle
init|=
name|dlopen
argument_list|(
literal|"libinput_client.so.1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
name|p_imf_client_init
operator|=
operator|(
name|int32_t
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"imf_client_init"
argument_list|)
expr_stmt|;
name|p_imf_client_disconnect
operator|=
operator|(
name|void
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"imf_client_disconnect"
argument_list|)
expr_stmt|;
name|p_ictrl_open_session
operator|=
operator|(
specifier|const
name|input_session_t
operator|*
call|(
modifier|*
call|)
argument_list|(
name|connection_interface_t
operator|*
argument_list|)
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"ictrl_open_session"
argument_list|)
expr_stmt|;
name|p_ictrl_close_session
operator|=
operator|(
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|input_session_t
operator|*
argument_list|)
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"ictrl_close_session"
argument_list|)
expr_stmt|;
name|p_ictrl_dispatch_event
operator|=
operator|(
name|int32_t
argument_list|(
operator|*
argument_list|)
argument_list|(
name|event_t
operator|*
argument_list|)
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"ictrl_dispatch_event"
argument_list|)
expr_stmt|;
name|p_vkb_init_selection_service
operator|=
operator|(
name|int32_t
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"vkb_init_selection_service"
argument_list|)
expr_stmt|;
name|p_ictrl_get_num_active_sessions
operator|=
operator|(
name|int32_t
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"ictrl_get_num_active_sessions"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"libinput_client.so.1 is not present - IMF services are disabled."
expr_stmt|;
name|s_imfDisabled
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|p_imf_client_init
operator|&&
name|p_ictrl_open_session
operator|&&
name|p_ictrl_dispatch_event
condition|)
block|{
name|s_imfReady
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|p_ictrl_open_session
operator|=
name|NULL
expr_stmt|;
name|p_ictrl_dispatch_event
operator|=
name|NULL
expr_stmt|;
name|s_imfDisabled
operator|=
literal|true
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"libinput_client.so.1 did not contain the correct symbols, library mismatch? IMF services are disabled."
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
name|s_imfReady
return|;
block|}
end_function
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QQnxInputContext
name|QQnxInputContext
operator|::
name|QQnxInputContext
parameter_list|(
name|QQnxAbstractVirtualKeyboard
modifier|&
name|keyboard
parameter_list|)
member_init_list|:
name|QPlatformInputContext
argument_list|()
member_init_list|,
name|m_lastCaretPos
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_isComposing
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_inputPanelVisible
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_inputPanelLocale
argument_list|(
name|QLocale
operator|::
name|c
argument_list|()
argument_list|)
member_init_list|,
name|m_virtualKeyboad
argument_list|(
name|keyboard
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
condition|)
return|return;
if|if
condition|(
name|p_imf_client_init
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|s_imfInitFailed
operator|=
literal|true
expr_stmt|;
name|qCritical
argument_list|(
literal|"imf_client_init failed - IMF services will be unavailable"
argument_list|)
expr_stmt|;
block|}
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// p_vkb_init_selection_service();
name|connect
argument_list|(
operator|&
name|keyboard
argument_list|,
name|SIGNAL
argument_list|(
name|visibilityChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|keyboardVisibilityChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|keyboard
argument_list|,
name|SIGNAL
argument_list|(
name|localeChanged
argument_list|(
name|QLocale
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|keyboardLocaleChanged
argument_list|(
name|QLocale
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|keyboardVisibilityChanged
argument_list|(
name|keyboard
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|keyboardLocaleChanged
argument_list|(
name|keyboard
operator|.
name|locale
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QQnxInputContext
name|QQnxInputContext
operator|::
name|~
name|QQnxInputContext
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
condition|)
return|return;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|p_imf_client_disconnect
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_define
DECL|macro|getarg
define|#
directive|define
name|getarg
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
value|type name = imfEvent->mArgs[qs(#name)].value<type>()
end_define
begin_define
DECL|macro|getparg
define|#
directive|define
name|getparg
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
value|type name = (type)(imfEvent->mArgs[qs(#name)].value<void*>())
end_define
begin_function
DECL|function|isValid
name|bool
name|QQnxInputContext
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|imfAvailable
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|QQnxInputContext
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|ImfEvent
operator|::
name|sUserEventType
condition|)
block|{
comment|// Forward the event to our real handler.
name|ImfEvent
modifier|*
name|imfEvent
init|=
cast|static_cast
argument_list|<
name|ImfEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|imfEvent
operator|->
name|m_imfType
condition|)
block|{
case|case
name|ImfBeginBatchEdit
case|:
block|{
name|int32_t
name|ret
init|=
name|onBeginBatchEdit
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfClearMetaKeyStates
case|:
block|{
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|states
argument_list|)
expr_stmt|;
name|int32_t
name|ret
init|=
name|onClearMetaKeyStates
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|states
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfCommitText
case|:
block|{
name|getparg
argument_list|(
name|spannable_string_t
operator|*
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|new_cursor_position
argument_list|)
expr_stmt|;
name|int32_t
name|ret
init|=
name|onCommitText
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|text
argument_list|,
name|new_cursor_position
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfDeleteSurroundingText
case|:
block|{
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|left_length
argument_list|)
expr_stmt|;
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|right_length
argument_list|)
expr_stmt|;
name|int32_t
name|ret
init|=
name|onDeleteSurroundingText
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|left_length
argument_list|,
name|right_length
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfEndBatchEdit
case|:
block|{
name|int32_t
name|ret
init|=
name|onEndBatchEdit
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfFinishComposingText
case|:
block|{
name|int32_t
name|ret
init|=
name|onFinishComposingText
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfGetCursorCapsMode
case|:
block|{
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|req_modes
argument_list|)
expr_stmt|;
name|int32_t
name|ret
init|=
name|onGetCursorCapsMode
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|req_modes
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfGetCursorPosition
case|:
block|{
name|int32_t
name|ret
init|=
name|onGetCursorPosition
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfGetExtractedText
case|:
block|{
name|getparg
argument_list|(
name|extracted_text_request_t
operator|*
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|extracted_text_t
modifier|*
name|ret
init|=
name|onGetExtractedText
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|request
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|ret
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfGetSelectedText
case|:
block|{
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|spannable_string_t
modifier|*
name|ret
init|=
name|onGetSelectedText
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|ret
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfGetTextAfterCursor
case|:
block|{
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|spannable_string_t
modifier|*
name|ret
init|=
name|onGetTextAfterCursor
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|n
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|ret
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfGetTextBeforeCursor
case|:
block|{
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|spannable_string_t
modifier|*
name|ret
init|=
name|onGetTextBeforeCursor
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|n
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
operator|(
name|void
operator|*
operator|)
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfPerformEditorAction
case|:
block|{
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|editor_action
argument_list|)
expr_stmt|;
name|int32_t
name|ret
init|=
name|onPerformEditorAction
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|editor_action
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfReportFullscreenMode
case|:
block|{
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
name|int32_t
name|ret
init|=
name|onReportFullscreenMode
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|enabled
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfSendEvent
case|:
block|{
name|getparg
argument_list|(
name|event_t
operator|*
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|onSendEvent
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|event
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfSendAsyncEvent
case|:
block|{
name|getparg
argument_list|(
name|event_t
operator|*
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|onSendAsyncEvent
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|event
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfSetComposingRegion
case|:
block|{
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|int32_t
name|ret
init|=
name|onSetComposingRegion
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfSetComposingText
case|:
block|{
name|getparg
argument_list|(
name|spannable_string_t
operator|*
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|new_cursor_position
argument_list|)
expr_stmt|;
name|int32_t
name|ret
init|=
name|onSetComposingText
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|text
argument_list|,
name|new_cursor_position
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ImfSetSelection
case|:
block|{
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|getarg
argument_list|(
name|int32_t
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|int32_t
name|ret
init|=
name|onSetSelection
argument_list|(
name|imfEvent
operator|->
name|m_session
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|imfEvent
operator|->
name|m_result
operator|->
name|setResult
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
empty_stmt|;
comment|//switch
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// standard event processing
return|return
name|QObject
operator|::
name|eventFilter
argument_list|(
name|obj
argument_list|,
name|event
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|filterEvent
name|bool
name|QQnxInputContext
operator|::
name|filterEvent
parameter_list|(
specifier|const
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|event
expr_stmt|;
endif|#
directive|endif
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|CloseSoftwareInputPanel
case|:
block|{
return|return
name|dispatchCloseSoftwareInputPanel
argument_list|()
return|;
block|}
case|case
name|QEvent
operator|::
name|RequestSoftwareInputPanel
case|:
block|{
return|return
name|dispatchRequestSoftwareInputPanel
argument_list|()
return|;
block|}
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QQnxInputContext
operator|::
name|reset
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|endComposition
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|update
name|void
name|QQnxInputContext
operator|::
name|update
parameter_list|(
name|Qt
operator|::
name|InputMethodQueries
name|queries
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|reset
argument_list|()
expr_stmt|;
name|QPlatformInputContext
operator|::
name|update
argument_list|(
name|queries
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|closeSession
name|void
name|QQnxInputContext
operator|::
name|closeSession
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
endif|#
directive|endif
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
condition|)
return|return;
if|if
condition|(
name|sInputSession
condition|)
block|{
name|p_ictrl_close_session
argument_list|(
operator|(
name|input_session_t
operator|*
operator|)
name|sInputSession
argument_list|)
expr_stmt|;
name|sInputSession
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|openSession
name|void
name|QQnxInputContext
operator|::
name|openSession
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
endif|#
directive|endif
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
condition|)
return|return;
name|closeSession
argument_list|()
expr_stmt|;
name|sInputSession
operator|=
name|p_ictrl_open_session
argument_list|(
operator|&
name|ic_funcs
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasSession
name|bool
name|QQnxInputContext
operator|::
name|hasSession
parameter_list|()
block|{
return|return
name|sInputSession
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|hasSelectedText
name|bool
name|QQnxInputContext
operator|::
name|hasSelectedText
parameter_list|()
block|{
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return
literal|false
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
return|return
operator|!
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|dispatchRequestSoftwareInputPanel
name|bool
name|QQnxInputContext
operator|::
name|dispatchRequestSoftwareInputPanel
parameter_list|()
block|{
name|m_virtualKeyboard
operator|.
name|showKeyboard
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQNX: requesting virtual keyboard"
expr_stmt|;
endif|#
directive|endif
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
operator|||
operator|!
name|inputMethodAccepted
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|hasSession
argument_list|()
condition|)
name|openSession
argument_list|()
expr_stmt|;
comment|// This also means that the caret position has moved
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|int
name|caretPos
init|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|caret_event_t
name|caretEvent
decl_stmt|;
name|memset
argument_list|(
operator|&
name|caretEvent
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|caret_event_t
argument_list|)
argument_list|)
expr_stmt|;
name|initEvent
argument_list|(
operator|&
name|caretEvent
operator|.
name|event
argument_list|,
name|sInputSession
argument_list|,
name|EVENT_CARET
argument_list|,
name|CARET_POS_CHANGED
argument_list|)
expr_stmt|;
name|caretEvent
operator|.
name|old_pos
operator|=
name|m_lastCaretPos
expr_stmt|;
name|m_lastCaretPos
operator|=
name|caretEvent
operator|.
name|new_pos
operator|=
name|caretPos
expr_stmt|;
name|p_ictrl_dispatch_event
argument_list|(
operator|(
name|event_t
operator|*
operator|)
operator|&
name|caretEvent
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|dispatchCloseSoftwareInputPanel
name|bool
name|QQnxInputContext
operator|::
name|dispatchCloseSoftwareInputPanel
parameter_list|()
block|{
name|m_virtualKeyboard
operator|.
name|hideKeyboard
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
literal|"QQNX: hiding virtual keyboard"
expr_stmt|;
endif|#
directive|endif
comment|// This also means we are stopping composition, but we should already have done that.
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/**  * IMF Event Dispatchers.  */
end_comment
begin_function
DECL|function|dispatchFocusEvent
name|bool
name|QQnxInputContext
operator|::
name|dispatchFocusEvent
parameter_list|(
name|FocusEventId
name|id
parameter_list|,
name|int
name|hints
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|sInputSession
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Attempt to dispatch a focus event with no input session."
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Set the last caret position to 0 since we don't really have one and we don't
comment|// want to have the old one.
name|m_lastCaretPos
operator|=
literal|0
expr_stmt|;
name|focus_event_t
name|focusEvent
decl_stmt|;
name|memset
argument_list|(
operator|&
name|focusEvent
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|focusEvent
argument_list|)
argument_list|)
expr_stmt|;
name|initEvent
argument_list|(
operator|&
name|focusEvent
operator|.
name|event
argument_list|,
name|sInputSession
argument_list|,
name|EVENT_FOCUS
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|focusEvent
operator|.
name|style
operator|=
name|DEFAULT_STYLE
expr_stmt|;
if|if
condition|(
name|hints
operator|&&
name|Qt
operator|::
name|ImhNoPredictiveText
condition|)
name|focusEvent
operator|.
name|style
operator||=
name|NO_PREDICTION
operator||
name|NO_AUTO_CORRECTION
expr_stmt|;
if|if
condition|(
name|hints
operator|&&
name|Qt
operator|::
name|ImhNoAutoUppercase
condition|)
name|focusEvent
operator|.
name|style
operator||=
name|NO_AUTO_TEXT
expr_stmt|;
name|p_ictrl_dispatch_event
argument_list|(
operator|(
name|event_t
operator|*
operator|)
operator|&
name|focusEvent
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|handleKeyboardEvent
name|bool
name|QQnxInputContext
operator|::
name|handleKeyboardEvent
parameter_list|(
name|int
name|flags
parameter_list|,
name|int
name|sym
parameter_list|,
name|int
name|mod
parameter_list|,
name|int
name|scan
parameter_list|,
name|int
name|cap
parameter_list|)
block|{
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|key
init|=
operator|(
name|flags
operator|&
name|KEY_SYM_VALID
operator|)
condition|?
name|sym
else|:
name|cap
decl_stmt|;
name|bool
name|navKey
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|key
condition|)
block|{
case|case
name|KEYCODE_RETURN
case|:
comment|/* In a single line edit we should end composition because enter might be used by something.             endComposition();             return false;*/
break|break;
case|case
name|KEYCODE_BACKSPACE
case|:
case|case
name|KEYCODE_DELETE
case|:
comment|// If there is a selection range, then we want a delete key to operate on that (by
comment|// deleting the contents of the select range) rather than operating on the composition
comment|// range.
if|if
condition|(
name|hasSelectedText
argument_list|()
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|KEYCODE_LEFT
case|:
name|key
operator|=
name|NAVIGATE_LEFT
expr_stmt|;
name|navKey
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|KEYCODE_RIGHT
case|:
name|key
operator|=
name|NAVIGATE_RIGHT
expr_stmt|;
name|navKey
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|KEYCODE_UP
case|:
name|key
operator|=
name|NAVIGATE_UP
expr_stmt|;
name|navKey
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|KEYCODE_DOWN
case|:
name|key
operator|=
name|NAVIGATE_DOWN
expr_stmt|;
name|navKey
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|KEYCODE_CAPS_LOCK
case|:
case|case
name|KEYCODE_LEFT_SHIFT
case|:
case|case
name|KEYCODE_RIGHT_SHIFT
case|:
case|case
name|KEYCODE_LEFT_CTRL
case|:
case|case
name|KEYCODE_RIGHT_CTRL
case|:
case|case
name|KEYCODE_LEFT_ALT
case|:
case|case
name|KEYCODE_RIGHT_ALT
case|:
case|case
name|KEYCODE_MENU
case|:
case|case
name|KEYCODE_LEFT_HYPER
case|:
case|case
name|KEYCODE_RIGHT_HYPER
case|:
case|case
name|KEYCODE_INSERT
case|:
case|case
name|KEYCODE_HOME
case|:
case|case
name|KEYCODE_PG_UP
case|:
case|case
name|KEYCODE_END
case|:
case|case
name|KEYCODE_PG_DOWN
case|:
comment|// Don't send these
name|key
operator|=
literal|0
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|mod
operator|&
name|KEYMOD_CTRL
condition|)
block|{
comment|// If CTRL is pressed, just let AIR handle it.  But terminate any composition first
comment|//endComposition();
return|return
literal|false
return|;
block|}
comment|// Pass the keys we don't know about on through
if|if
condition|(
name|key
operator|==
literal|0
condition|)
return|return
literal|false
return|;
comment|// IMF doesn't need key releases so just swallow them.
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|KEY_DOWN
operator|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|navKey
condition|)
block|{
comment|// Even if we're forwarding up events, we can't do this for
comment|// navigation keys.
if|if
condition|(
name|flags
operator|&
name|KEY_DOWN
condition|)
block|{
name|navigation_event_t
name|navEvent
decl_stmt|;
name|initEvent
argument_list|(
operator|&
name|navEvent
operator|.
name|event
argument_list|,
name|sInputSession
argument_list|,
name|EVENT_NAVIGATION
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|navEvent
operator|.
name|magnitude
operator|=
literal|1
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"dispatch navigation event "
operator|<<
name|key
expr_stmt|;
endif|#
directive|endif
name|p_ictrl_dispatch_event
argument_list|(
operator|&
name|navEvent
operator|.
name|event
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|key_event_t
name|keyEvent
decl_stmt|;
name|initEvent
argument_list|(
operator|&
name|keyEvent
operator|.
name|event
argument_list|,
name|sInputSession
argument_list|,
name|EVENT_KEY
argument_list|,
name|flags
operator|&
name|KEY_DOWN
condition|?
name|IMF_KEY_DOWN
else|:
name|IMF_KEY_UP
argument_list|)
expr_stmt|;
name|keyEvent
operator|.
name|key_code
operator|=
name|key
expr_stmt|;
name|keyEvent
operator|.
name|character
operator|=
literal|0
expr_stmt|;
name|keyEvent
operator|.
name|meta_key_state
operator|=
literal|0
expr_stmt|;
name|p_ictrl_dispatch_event
argument_list|(
operator|&
name|keyEvent
operator|.
name|event
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"dispatch key event "
operator|<<
name|key
expr_stmt|;
endif|#
directive|endif
block|}
name|scan
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|endComposition
name|void
name|QQnxInputContext
operator|::
name|endComposition
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_isComposing
condition|)
return|return;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
condition|)
return|return;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|m_composingText
argument_list|)
expr_stmt|;
name|m_composingText
operator|=
name|QString
argument_list|()
expr_stmt|;
name|m_isComposing
operator|=
literal|false
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|action_event_t
name|actionEvent
decl_stmt|;
name|memset
argument_list|(
operator|&
name|actionEvent
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|actionEvent
argument_list|)
argument_list|)
expr_stmt|;
name|initEvent
argument_list|(
operator|&
name|actionEvent
operator|.
name|event
argument_list|,
name|sInputSession
argument_list|,
name|EVENT_ACTION
argument_list|,
name|ACTION_END_COMPOSITION
argument_list|)
expr_stmt|;
name|p_ictrl_dispatch_event
argument_list|(
operator|&
name|actionEvent
operator|.
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setComposingText
name|void
name|QQnxInputContext
operator|::
name|setComposingText
parameter_list|(
name|QString
specifier|const
modifier|&
name|composingText
parameter_list|)
block|{
name|m_composingText
operator|=
name|composingText
expr_stmt|;
name|m_isComposing
operator|=
literal|true
expr_stmt|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
condition|)
return|return;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|QTextCharFormat
name|format
decl_stmt|;
name|format
operator|.
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|push_back
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
literal|0
argument_list|,
name|composingText
operator|.
name|length
argument_list|()
argument_list|,
name|format
argument_list|)
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|composingText
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processEvent
name|int32_t
name|QQnxInputContext
operator|::
name|processEvent
parameter_list|(
name|event_t
modifier|*
name|event
parameter_list|)
block|{
name|int32_t
name|result
init|=
operator|-
literal|1
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|event_type
condition|)
block|{
case|case
name|EVENT_SPELL_CHECK
case|:
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"EVENT_SPELL_CHECK"
expr_stmt|;
endif|#
directive|endif
name|result
operator|=
literal|0
expr_stmt|;
break|break;
block|}
case|case
name|EVENT_NAVIGATION
case|:
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"EVENT_NAVIGATION"
expr_stmt|;
endif|#
directive|endif
name|int
name|key
init|=
name|event
operator|->
name|event_id
operator|==
name|NAVIGATE_UP
condition|?
name|KEYCODE_UP
else|:
name|event
operator|->
name|event_id
operator|==
name|NAVIGATE_DOWN
condition|?
name|KEYCODE_DOWN
else|:
name|event
operator|->
name|event_id
operator|==
name|NAVIGATE_LEFT
condition|?
name|KEYCODE_LEFT
else|:
name|event
operator|->
name|event_id
operator|==
name|NAVIGATE_RIGHT
condition|?
name|KEYCODE_RIGHT
else|:
literal|0
decl_stmt|;
name|QQnxEventThread
operator|::
name|injectKeyboardEvent
argument_list|(
name|KEY_DOWN
operator||
name|KEY_CAP_VALID
argument_list|,
name|key
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QQnxEventThread
operator|::
name|injectKeyboardEvent
argument_list|(
name|KEY_CAP_VALID
argument_list|,
name|key
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
literal|0
expr_stmt|;
break|break;
block|}
case|case
name|EVENT_KEY
case|:
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"EVENT_KEY"
expr_stmt|;
endif|#
directive|endif
name|key_event_t
modifier|*
name|kevent
init|=
cast|static_cast
argument_list|<
name|key_event_t
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QQnxEventThread
operator|::
name|injectKeyboardEvent
argument_list|(
name|KEY_DOWN
operator||
name|KEY_SYM_VALID
operator||
name|KEY_CAP_VALID
argument_list|,
name|kevent
operator|->
name|key_code
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|kevent
operator|->
name|key_code
argument_list|)
expr_stmt|;
name|QQnxEventThread
operator|::
name|injectKeyboardEvent
argument_list|(
name|KEY_SYM_VALID
operator||
name|KEY_CAP_VALID
argument_list|,
name|kevent
operator|->
name|key_code
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|kevent
operator|->
name|key_code
argument_list|)
expr_stmt|;
name|result
operator|=
literal|0
expr_stmt|;
break|break;
block|}
case|case
name|EVENT_ACTION
case|:
comment|// Don't care, indicates that IMF is done.
break|break;
case|case
name|EVENT_CARET
case|:
case|case
name|EVENT_NOTHING
case|:
case|case
name|EVENT_FOCUS
case|:
case|case
name|EVENT_USER_ACTION
case|:
case|case
name|EVENT_STROKE
case|:
case|case
name|EVENT_INVOKE_LATER
case|:
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Unsupported event type: "
operator|<<
name|event
operator|->
name|event_type
expr_stmt|;
break|break;
default|default:
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Unknown event type: "
operator|<<
name|event
operator|->
name|event_type
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/**  * IMF Event Handlers  */
end_comment
begin_function
DECL|function|onBeginBatchEdit
name|int32_t
name|QQnxInputContext
operator|::
name|onBeginBatchEdit
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
comment|// We don't care.
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onClearMetaKeyStates
name|int32_t
name|QQnxInputContext
operator|::
name|onClearMetaKeyStates
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|states
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|states
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
comment|// Should never get called.
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"onClearMetaKeyStates is unsupported."
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onCommitText
name|int32_t
name|QQnxInputContext
operator|::
name|onCommitText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|new_cursor_position
argument_list|)
expr_stmt|;
comment|// TODO: How can we set the cursor position it's not part of the API.
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
condition|)
return|return
literal|0
return|;
name|QString
name|commitString
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|text
operator|->
name|str
argument_list|,
name|text
operator|->
name|length
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Committing ["
operator|<<
name|commitString
operator|<<
literal|"]"
expr_stmt|;
endif|#
directive|endif
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|commitString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|m_composingText
operator|=
name|QString
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onDeleteSurroundingText
name|int32_t
name|QQnxInputContext
operator|::
name|onDeleteSurroundingText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|left_length
parameter_list|,
name|int32_t
name|right_length
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"L:"
operator|<<
name|left_length
operator|<<
literal|" R:"
operator|<<
name|right_length
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|hasSelectedText
argument_list|()
condition|)
block|{
name|QQnxEventThread
operator|::
name|injectKeyboardEvent
argument_list|(
name|KEY_DOWN
operator||
name|KEY_CAP_VALID
argument_list|,
name|KEYCODE_DELETE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QQnxEventThread
operator|::
name|injectKeyboardEvent
argument_list|(
name|KEY_CAP_VALID
argument_list|,
name|KEYCODE_DELETE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|int
name|replacementLength
init|=
name|left_length
operator|+
name|right_length
decl_stmt|;
name|int
name|replacementStart
init|=
operator|-
name|left_length
decl_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|replacementStart
argument_list|,
name|replacementLength
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onEndBatchEdit
name|int32_t
name|QQnxInputContext
operator|::
name|onEndBatchEdit
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onFinishComposingText
name|int32_t
name|QQnxInputContext
operator|::
name|onFinishComposingText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
condition|)
return|return
literal|0
return|;
comment|// Only update the control, no need to send a message back to imf (don't call
comment|// end composition)
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|m_composingText
argument_list|)
expr_stmt|;
name|m_composingText
operator|=
name|QString
argument_list|()
expr_stmt|;
name|m_isComposing
operator|=
literal|false
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onGetCursorCapsMode
name|int32_t
name|QQnxInputContext
operator|::
name|onGetCursorCapsMode
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|req_modes
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|req_modes
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
comment|// Should never get called.
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"onGetCursorCapsMode is unsupported."
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onGetCursorPosition
name|int32_t
name|QQnxInputContext
operator|::
name|onGetCursorPosition
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
condition|)
return|return
literal|0
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|m_lastCaretPos
operator|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
return|return
name|m_lastCaretPos
return|;
block|}
end_function
begin_function
DECL|function|onGetExtractedText
name|extracted_text_t
modifier|*
name|QQnxInputContext
operator|::
name|onGetExtractedText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|extracted_text_request_t
modifier|*
name|request
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
block|{
name|extracted_text_t
modifier|*
name|et
init|=
operator|(
name|extracted_text_t
operator|*
operator|)
name|calloc
argument_list|(
sizeof|sizeof
argument_list|(
name|extracted_text_t
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|et
operator|->
name|text
operator|=
cast|reinterpret_cast
argument_list|<
name|spannable_string_t
operator|*
argument_list|>
argument_list|(
name|calloc
argument_list|(
sizeof|sizeof
argument_list|(
name|spannable_string_t
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|et
return|;
block|}
comment|// Used to update dictionaries, but not supported right now.
name|extracted_text_t
modifier|*
name|et
init|=
operator|(
name|extracted_text_t
operator|*
operator|)
name|calloc
argument_list|(
sizeof|sizeof
argument_list|(
name|extracted_text_t
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|et
operator|->
name|text
operator|=
cast|reinterpret_cast
argument_list|<
name|spannable_string_t
operator|*
argument_list|>
argument_list|(
name|calloc
argument_list|(
sizeof|sizeof
argument_list|(
name|spannable_string_t
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|et
return|;
block|}
end_function
begin_function
DECL|function|onGetSelectedText
name|spannable_string_t
modifier|*
name|QQnxInputContext
operator|::
name|onGetSelectedText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
name|toSpannableString
argument_list|(
literal|""
argument_list|)
return|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
condition|)
return|return
literal|0
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|toSpannableString
argument_list|(
name|text
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|onGetTextAfterCursor
name|spannable_string_t
modifier|*
name|QQnxInputContext
operator|::
name|onGetTextAfterCursor
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|n
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
name|toSpannableString
argument_list|(
literal|""
argument_list|)
return|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
condition|)
return|return
name|toSpannableString
argument_list|(
literal|""
argument_list|)
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
operator||
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|m_lastCaretPos
operator|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
return|return
name|toSpannableString
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|m_lastCaretPos
operator|+
literal|1
argument_list|,
name|n
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|onGetTextBeforeCursor
name|spannable_string_t
modifier|*
name|QQnxInputContext
operator|::
name|onGetTextBeforeCursor
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|n
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
name|toSpannableString
argument_list|(
literal|""
argument_list|)
return|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
condition|)
return|return
name|toSpannableString
argument_list|(
literal|""
argument_list|)
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
operator||
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|m_lastCaretPos
operator|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|n
operator|<
name|m_lastCaretPos
condition|)
block|{
return|return
name|toSpannableString
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|m_lastCaretPos
operator|-
name|n
argument_list|,
name|n
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|toSpannableString
argument_list|(
name|text
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|m_lastCaretPos
argument_list|)
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|onPerformEditorAction
name|int32_t
name|QQnxInputContext
operator|::
name|onPerformEditorAction
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|editor_action
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|editor_action
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
comment|// Should never get called.
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"onPerformEditorAction is unsupported."
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onReportFullscreenMode
name|int32_t
name|QQnxInputContext
operator|::
name|onReportFullscreenMode
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|enabled
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
comment|// Should never get called.
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"onReportFullscreenMode is unsupported."
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onSendEvent
name|int32_t
name|QQnxInputContext
operator|::
name|onSendEvent
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|event_t
modifier|*
name|event
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
name|processEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|onSendAsyncEvent
name|int32_t
name|QQnxInputContext
operator|::
name|onSendAsyncEvent
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|event_t
modifier|*
name|event
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
name|processEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|onSetComposingRegion
name|int32_t
name|QQnxInputContext
operator|::
name|onSetComposingRegion
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|start
parameter_list|,
name|int32_t
name|end
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
condition|)
return|return
literal|0
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
operator||
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|m_lastCaretPos
operator|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|QString
name|empty
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|text
operator|=
name|text
operator|.
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
comment|// Delete the current text.
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
name|empty
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|empty
argument_list|,
name|start
operator|-
name|m_lastCaretPos
argument_list|,
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
comment|// Move the specified text into a preedit string.
name|setComposingText
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onSetComposingText
name|int32_t
name|QQnxInputContext
operator|::
name|onSetComposingText
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|new_cursor_position
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
operator|||
operator|!
name|input
condition|)
return|return
literal|0
return|;
name|m_isComposing
operator|=
literal|true
expr_stmt|;
name|QString
name|preeditString
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|text
operator|->
name|str
argument_list|,
name|text
operator|->
name|length
argument_list|)
decl_stmt|;
name|setComposingText
argument_list|(
name|preeditString
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onSetSelection
name|int32_t
name|QQnxInputContext
operator|::
name|onSetSelection
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|start
parameter_list|,
name|int32_t
name|end
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|end
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|ic
argument_list|)
condition|)
return|return
literal|0
return|;
comment|// Should never get called.
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"onSetSelection is unsupported."
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|showInputPanel
name|void
name|QQnxInputContext
operator|::
name|showInputPanel
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|dispatchRequestSoftwareInputPanel
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideInputPanel
name|void
name|QQnxInputContext
operator|::
name|hideInputPanel
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|dispatchCloseSoftwareInputPanel
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isInputPanelVisible
name|bool
name|QQnxInputContext
operator|::
name|isInputPanelVisible
parameter_list|()
specifier|const
block|{
return|return
name|m_inputPanelVisible
return|;
block|}
end_function
begin_function
DECL|function|locale
name|QLocale
name|QQnxInputContext
operator|::
name|locale
parameter_list|()
specifier|const
block|{
return|return
name|m_inputPanelLocale
return|;
block|}
end_function
begin_function
DECL|function|keyboardVisibilityChanged
name|void
name|QQnxInputContext
operator|::
name|keyboardVisibilityChanged
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"visible="
operator|<<
name|visible
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|m_inputPanelVisible
operator|!=
name|visible
condition|)
block|{
name|m_inputPanelVisible
operator|=
name|visible
expr_stmt|;
name|emitInputPanelVisibleChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|keyboardLocaleChanged
name|void
name|QQnxInputContext
operator|::
name|keyboardLocaleChanged
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"locale="
operator|<<
name|locale
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|m_inputPanelLocale
operator|!=
name|locale
condition|)
block|{
name|m_inputPanelLocale
operator|=
name|locale
expr_stmt|;
name|emitLocaleChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setFocusObject
name|void
name|QQnxInputContext
operator|::
name|setFocusObject
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
name|qDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"input item="
operator|<<
name|object
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|inputMethodAccepted
argument_list|()
condition|)
block|{
if|if
condition|(
name|m_inputPanelVisible
condition|)
name|hideInputPanel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
condition|)
name|m_virtualKeyboard
operator|.
name|setKeyboardMode
argument_list|(
name|QQnxAbstractVirtualKeyboard
operator|::
name|Phone
argument_list|)
expr_stmt|;
else|else
name|m_virtualKeyboard
operator|.
name|setKeyboardMode
argument_list|(
name|QQnxAbstractVirtualKeyboard
operator|::
name|Default
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_inputPanelVisible
condition|)
name|showInputPanel
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
