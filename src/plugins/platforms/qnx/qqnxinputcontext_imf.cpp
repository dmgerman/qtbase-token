begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2013 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxinputcontext_imf.h"
end_include
begin_include
include|#
directive|include
file|"qqnxabstractvirtualkeyboard.h"
end_include
begin_include
include|#
directive|include
file|"qqnxintegration.h"
end_include
begin_include
include|#
directive|include
file|"qqnxscreen.h"
end_include
begin_include
include|#
directive|include
file|"qqnxscreeneventhandler.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QInputMethodEvent>
end_include
begin_include
include|#
directive|include
file|<QtGui/QTextCharFormat>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMutex>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariantHash>
end_include
begin_include
include|#
directive|include
file|<QtCore/QWaitCondition>
end_include
begin_include
include|#
directive|include
file|<QtCore/QQueue>
end_include
begin_include
include|#
directive|include
file|<QtCore/QGlobalStatic>
end_include
begin_include
include|#
directive|include
file|<dlfcn.h>
end_include
begin_include
include|#
directive|include
file|"imf/imf_client.h"
end_include
begin_include
include|#
directive|include
file|"imf/input_control.h"
end_include
begin_include
include|#
directive|include
file|<process.h>
end_include
begin_include
include|#
directive|include
file|<sys/keycodes.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_IMF_EVENT_DEBUG
argument_list|)
end_if
begin_define
DECL|macro|qInputContextIMFRequestDebug
define|#
directive|define
name|qInputContextIMFRequestDebug
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qInputContextIMFRequestDebug
define|#
directive|define
name|qInputContextIMFRequestDebug
value|QT_NO_QDEBUG_MACRO
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QQNXINPUTCONTEXT_DEBUG
argument_list|)
end_if
begin_define
DECL|macro|qInputContextDebug
define|#
directive|define
name|qInputContextDebug
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qInputContextDebug
define|#
directive|define
name|qInputContextDebug
value|QT_NO_QDEBUG_MACRO
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|sInputContextInstance
specifier|static
name|QQnxInputContext
modifier|*
name|sInputContextInstance
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QColor
name|sSelectedColor
argument_list|(
literal|0
argument_list|,
literal|0xb8
argument_list|,
literal|0
argument_list|,
literal|85
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sSpellCheckSession
specifier|static
specifier|const
name|input_session_t
modifier|*
name|sSpellCheckSession
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sInputSession
specifier|static
specifier|const
name|input_session_t
modifier|*
name|sInputSession
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|isSessionOkay
specifier|static
name|bool
name|isSessionOkay
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
return|return
name|ic
operator|!=
literal|0
operator|&&
name|sInputSession
operator|!=
literal|0
operator|&&
name|ic
operator|->
name|component_id
operator|==
name|sInputSession
operator|->
name|component_id
return|;
block|}
end_function
begin_enum
DECL|enum|ImfEventType
enum|enum
name|ImfEventType
block|{
DECL|enumerator|ImfCommitText
name|ImfCommitText
block|,
DECL|enumerator|ImfDeleteSurroundingText
name|ImfDeleteSurroundingText
block|,
DECL|enumerator|ImfFinishComposingText
name|ImfFinishComposingText
block|,
DECL|enumerator|ImfGetCursorPosition
name|ImfGetCursorPosition
block|,
DECL|enumerator|ImfGetTextAfterCursor
name|ImfGetTextAfterCursor
block|,
DECL|enumerator|ImfGetTextBeforeCursor
name|ImfGetTextBeforeCursor
block|,
DECL|enumerator|ImfSendEvent
name|ImfSendEvent
block|,
DECL|enumerator|ImfSetComposingRegion
name|ImfSetComposingRegion
block|,
DECL|enumerator|ImfSetComposingText
name|ImfSetComposingText
block|,
DECL|enumerator|ImfIsTextSelected
name|ImfIsTextSelected
block|,
DECL|enumerator|ImfIsAllTextSelected
name|ImfIsAllTextSelected
block|, }
enum|;
end_enum
begin_struct
DECL|struct|SpellCheckInfo
struct|struct
name|SpellCheckInfo
block|{
DECL|function|SpellCheckInfo
name|SpellCheckInfo
parameter_list|(
name|void
modifier|*
name|_context
parameter_list|,
name|void
function_decl|(
modifier|*
name|_spellCheckDone
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
parameter_list|)
parameter_list|)
member_init_list|:
name|context
argument_list|(
name|_context
argument_list|)
member_init_list|,
name|spellCheckDone
argument_list|(
name|_spellCheckDone
argument_list|)
block|{}
DECL|member|context
name|void
modifier|*
name|context
decl_stmt|;
DECL|member|spellCheckDone
name|void
function_decl|(
modifier|*
name|spellCheckDone
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
parameter_list|)
function_decl|;
block|}
struct|;
end_struct
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QQueue<SpellCheckInfo>
argument_list|,
argument|sSpellCheckQueue
argument_list|)
end_macro
begin_comment
comment|// IMF requests all arrive on IMF's own thread and have to be posted to the main thread to be processed.
end_comment
begin_class
DECL|class|QQnxImfRequest
class|class
name|QQnxImfRequest
block|{
public|public:
DECL|function|QQnxImfRequest
name|QQnxImfRequest
parameter_list|(
name|input_session_t
modifier|*
name|_session
parameter_list|,
name|ImfEventType
name|_type
parameter_list|)
member_init_list|:
name|session
argument_list|(
name|_session
argument_list|)
member_init_list|,
name|type
argument_list|(
name|_type
argument_list|)
block|{ }
DECL|function|~QQnxImfRequest
name|~
name|QQnxImfRequest
parameter_list|()
block|{ }
DECL|member|session
name|input_session_t
modifier|*
name|session
decl_stmt|;
DECL|member|type
name|ImfEventType
name|type
decl_stmt|;
union|union
block|{
struct|struct
block|{
DECL|member|n
name|int32_t
name|n
decl_stmt|;
DECL|member|flags
name|int32_t
name|flags
decl_stmt|;
DECL|member|before
name|bool
name|before
decl_stmt|;
DECL|member|result
name|spannable_string_t
modifier|*
name|result
decl_stmt|;
DECL|member|gtac
block|}
name|gtac
struct|;
comment|// ic_get_text_before_cursor/ic_get_text_after_cursor
struct|struct
block|{
DECL|member|result
name|int32_t
name|result
decl_stmt|;
DECL|member|gcp
block|}
name|gcp
struct|;
comment|// ic_get_cursor_position
struct|struct
block|{
DECL|member|start
name|int32_t
name|start
decl_stmt|;
DECL|member|end
name|int32_t
name|end
decl_stmt|;
DECL|member|result
name|int32_t
name|result
decl_stmt|;
DECL|member|scr
block|}
name|scr
struct|;
comment|// ic_set_composing_region
struct|struct
block|{
DECL|member|text
name|spannable_string_t
modifier|*
name|text
decl_stmt|;
DECL|member|new_cursor_position
name|int32_t
name|new_cursor_position
decl_stmt|;
DECL|member|result
name|int32_t
name|result
decl_stmt|;
DECL|member|sct
block|}
name|sct
struct|;
comment|// ic_set_composing_text
struct|struct
block|{
DECL|member|text
name|spannable_string_t
modifier|*
name|text
decl_stmt|;
DECL|member|new_cursor_position
name|int32_t
name|new_cursor_position
decl_stmt|;
DECL|member|result
name|int32_t
name|result
decl_stmt|;
DECL|member|ct
block|}
name|ct
struct|;
comment|// ic_commit_text
struct|struct
block|{
DECL|member|result
name|int32_t
name|result
decl_stmt|;
DECL|member|fct
block|}
name|fct
struct|;
comment|// ic_finish_composing_text
struct|struct
block|{
DECL|member|left_length
name|int32_t
name|left_length
decl_stmt|;
DECL|member|right_length
name|int32_t
name|right_length
decl_stmt|;
DECL|member|result
name|int32_t
name|result
decl_stmt|;
DECL|member|dst
block|}
name|dst
struct|;
comment|// ic_delete_surrounding_text
struct|struct
block|{
DECL|member|event
name|event_t
modifier|*
name|event
decl_stmt|;
DECL|member|result
name|int32_t
name|result
decl_stmt|;
DECL|member|sae
block|}
name|sae
struct|;
comment|// ic_send_async_event/ic_send_event
struct|struct
block|{
DECL|member|pIsSelected
name|int32_t
modifier|*
name|pIsSelected
decl_stmt|;
DECL|member|result
name|int32_t
name|result
decl_stmt|;
DECL|member|its
block|}
name|its
struct|;
comment|// ic_is_text_selected/ic_is_all_text_selected
block|}
union|;
block|}
class|;
end_class
begin_comment
comment|// Invoke an IMF initiated request synchronously on Qt's main thread.  As describe below all
end_comment
begin_comment
comment|// IMF requests are made from another thread but need to be executed on the main thread.
end_comment
begin_function
DECL|function|executeIMFRequest
specifier|static
name|void
name|executeIMFRequest
parameter_list|(
name|QQnxImfRequest
modifier|*
name|event
parameter_list|)
block|{
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|sInputContextInstance
argument_list|,
literal|"processImfEvent"
argument_list|,
name|Qt
operator|::
name|BlockingQueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QQnxImfRequest
operator|*
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// The following functions (ic_*) are callback functions called by the input system to query information
end_comment
begin_comment
comment|// about the text object that currently has focus or to make changes to it.  All calls are made from the
end_comment
begin_comment
comment|// input system's own thread.  The pattern for each callback function is to copy its parameters into
end_comment
begin_comment
comment|// a QQnxImfRequest structure and call executeIMFRequest to have it passed synchronously to Qt's main thread.
end_comment
begin_comment
comment|// Any return values should be pre-initialised with suitable default values as in some cases
end_comment
begin_comment
comment|// (e.g. a stale session) the call will return without having executed any request specific code.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// To make the correspondence more obvious, the names of these functions match those defined in the headers.
end_comment
begin_comment
comment|// They're in an anonymous namespace to avoid compiler conflicts with external functions defined with the
end_comment
begin_comment
comment|// same names.
end_comment
begin_namespace
namespace|namespace
block|{
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_begin_batch_edit
specifier|static
name|int32_t
name|ic_begin_batch_edit
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ic
argument_list|)
expr_stmt|;
comment|// Ignore silently.
return|return
literal|0
return|;
block|}
comment|// End composition, committing the supplied text.
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_commit_text
specifier|static
name|int32_t
name|ic_commit_text
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QQnxImfRequest
name|event
argument_list|(
name|ic
argument_list|,
name|ImfCommitText
argument_list|)
decl_stmt|;
name|event
operator|.
name|ct
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|event
operator|.
name|ct
operator|.
name|new_cursor_position
operator|=
name|new_cursor_position
expr_stmt|;
name|event
operator|.
name|ct
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
name|event
operator|.
name|ct
operator|.
name|result
return|;
block|}
comment|// Delete left_length characters before and right_length characters after the cursor.
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_delete_surrounding_text
specifier|static
name|int32_t
name|ic_delete_surrounding_text
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|left_length
parameter_list|,
name|int32_t
name|right_length
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QQnxImfRequest
name|event
argument_list|(
name|ic
argument_list|,
name|ImfDeleteSurroundingText
argument_list|)
decl_stmt|;
name|event
operator|.
name|dst
operator|.
name|left_length
operator|=
name|left_length
expr_stmt|;
name|event
operator|.
name|dst
operator|.
name|right_length
operator|=
name|right_length
expr_stmt|;
name|event
operator|.
name|dst
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
name|event
operator|.
name|dst
operator|.
name|result
return|;
block|}
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_end_batch_edit
specifier|static
name|int32_t
name|ic_end_batch_edit
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ic
argument_list|)
expr_stmt|;
comment|// Ignore silently.
return|return
literal|0
return|;
block|}
comment|// End composition, committing what's there.
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_finish_composing_text
specifier|static
name|int32_t
name|ic_finish_composing_text
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QQnxImfRequest
name|event
argument_list|(
name|ic
argument_list|,
name|ImfFinishComposingText
argument_list|)
decl_stmt|;
name|event
operator|.
name|fct
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
name|event
operator|.
name|fct
operator|.
name|result
return|;
block|}
comment|// Return the position of the cursor.
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_get_cursor_position
specifier|static
name|int32_t
name|ic_get_cursor_position
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QQnxImfRequest
name|event
argument_list|(
name|ic
argument_list|,
name|ImfGetCursorPosition
argument_list|)
decl_stmt|;
name|event
operator|.
name|gcp
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
name|event
operator|.
name|gcp
operator|.
name|result
return|;
block|}
comment|// Return the n characters after the cursor.
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_get_text_after_cursor
specifier|static
name|spannable_string_t
modifier|*
name|ic_get_text_after_cursor
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|n
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QQnxImfRequest
name|event
argument_list|(
name|ic
argument_list|,
name|ImfGetTextAfterCursor
argument_list|)
decl_stmt|;
name|event
operator|.
name|gtac
operator|.
name|n
operator|=
name|n
expr_stmt|;
name|event
operator|.
name|gtac
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|event
operator|.
name|gtac
operator|.
name|result
operator|=
literal|0
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
name|event
operator|.
name|gtac
operator|.
name|result
return|;
block|}
comment|// Return the n characters before the cursor.
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_get_text_before_cursor
specifier|static
name|spannable_string_t
modifier|*
name|ic_get_text_before_cursor
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|n
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QQnxImfRequest
name|event
argument_list|(
name|ic
argument_list|,
name|ImfGetTextBeforeCursor
argument_list|)
decl_stmt|;
name|event
operator|.
name|gtac
operator|.
name|n
operator|=
name|n
expr_stmt|;
name|event
operator|.
name|gtac
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|event
operator|.
name|gtac
operator|.
name|result
operator|=
literal|0
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
name|event
operator|.
name|gtac
operator|.
name|result
return|;
block|}
comment|// Process an event from IMF.  Primarily used for reflecting back keyboard events.
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_send_event
specifier|static
name|int32_t
name|ic_send_event
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|event_t
modifier|*
name|event
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QQnxImfRequest
name|imfEvent
argument_list|(
name|ic
argument_list|,
name|ImfSendEvent
argument_list|)
decl_stmt|;
name|imfEvent
operator|.
name|sae
operator|.
name|event
operator|=
name|event
expr_stmt|;
name|imfEvent
operator|.
name|sae
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|imfEvent
argument_list|)
expr_stmt|;
return|return
name|imfEvent
operator|.
name|sae
operator|.
name|result
return|;
block|}
comment|// Same as ic_send_event.
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_send_async_event
specifier|static
name|int32_t
name|ic_send_async_event
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|event_t
modifier|*
name|event
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
comment|// There's no difference from our point of view between ic_send_event& ic_send_async_event
name|QQnxImfRequest
name|imfEvent
argument_list|(
name|ic
argument_list|,
name|ImfSendEvent
argument_list|)
decl_stmt|;
name|imfEvent
operator|.
name|sae
operator|.
name|event
operator|=
name|event
expr_stmt|;
name|imfEvent
operator|.
name|sae
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|imfEvent
argument_list|)
expr_stmt|;
return|return
name|imfEvent
operator|.
name|sae
operator|.
name|result
return|;
block|}
comment|// Set the range of text between start and end as the composition range.
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_set_composing_region
specifier|static
name|int32_t
name|ic_set_composing_region
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|start
parameter_list|,
name|int32_t
name|end
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QQnxImfRequest
name|event
argument_list|(
name|ic
argument_list|,
name|ImfSetComposingRegion
argument_list|)
decl_stmt|;
name|event
operator|.
name|scr
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|event
operator|.
name|scr
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|event
operator|.
name|scr
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
name|event
operator|.
name|scr
operator|.
name|result
return|;
block|}
comment|// Update the composition range with the supplied text.  This can be called when no composition
comment|// range is in effect in which case one is started at the current cursor position.
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_set_composing_text
specifier|static
name|int32_t
name|ic_set_composing_text
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QQnxImfRequest
name|event
argument_list|(
name|ic
argument_list|,
name|ImfSetComposingText
argument_list|)
decl_stmt|;
name|event
operator|.
name|sct
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|event
operator|.
name|sct
operator|.
name|new_cursor_position
operator|=
name|new_cursor_position
expr_stmt|;
name|event
operator|.
name|sct
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
name|event
operator|.
name|sct
operator|.
name|result
return|;
block|}
comment|// Indicate if any text is selected
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_is_text_selected
specifier|static
name|int32_t
name|ic_is_text_selected
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
modifier|*
name|pIsSelected
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QQnxImfRequest
name|event
argument_list|(
name|ic
argument_list|,
name|ImfIsTextSelected
argument_list|)
decl_stmt|;
name|event
operator|.
name|its
operator|.
name|pIsSelected
operator|=
name|pIsSelected
expr_stmt|;
name|event
operator|.
name|its
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
name|event
operator|.
name|its
operator|.
name|result
return|;
block|}
comment|// Indicate if all text is selected
comment|// See comment at beginning of namespace declaration for general information
DECL|function|ic_is_all_text_selected
specifier|static
name|int32_t
name|ic_is_all_text_selected
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
modifier|*
name|pIsSelected
parameter_list|)
block|{
name|qInputContextIMFRequestDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QQnxImfRequest
name|event
argument_list|(
name|ic
argument_list|,
name|ImfIsAllTextSelected
argument_list|)
decl_stmt|;
name|event
operator|.
name|its
operator|.
name|pIsSelected
operator|=
name|pIsSelected
expr_stmt|;
name|event
operator|.
name|its
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|executeIMFRequest
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
return|return
name|event
operator|.
name|its
operator|.
name|result
return|;
block|}
comment|// LCOV_EXCL_START - exclude from code coverage analysis
comment|// The following functions are defined in the IMF headers but are not currently called.
comment|// Not currently used
DECL|function|ic_perform_editor_action
specifier|static
name|int32_t
name|ic_perform_editor_action
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|editor_action
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|editor_action
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"ic_perform_editor_action not implemented"
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// Not currently used
DECL|function|ic_report_fullscreen_mode
specifier|static
name|int32_t
name|ic_report_fullscreen_mode
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|enabled
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"ic_report_fullscreen_mode not implemented"
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// Not currently used
DECL|function|ic_get_extracted_text
specifier|static
name|extracted_text_t
modifier|*
name|ic_get_extracted_text
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|extracted_text_request_t
modifier|*
name|request
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"ic_get_extracted_text not implemented"
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// Not currently used
DECL|function|ic_get_selected_text
specifier|static
name|spannable_string_t
modifier|*
name|ic_get_selected_text
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"ic_get_selected_text not implemented"
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// Not currently used
DECL|function|ic_get_cursor_caps_mode
specifier|static
name|int32_t
name|ic_get_cursor_caps_mode
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|req_modes
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|req_modes
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"ic_get_cursor_caps_mode not implemented"
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// Not currently used
DECL|function|ic_clear_meta_key_states
specifier|static
name|int32_t
name|ic_clear_meta_key_states
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|states
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|states
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"ic_clear_meta_key_states not implemented"
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// Not currently used
DECL|function|ic_set_selection
specifier|static
name|int32_t
name|ic_set_selection
parameter_list|(
name|input_session_t
modifier|*
name|ic
parameter_list|,
name|int32_t
name|start
parameter_list|,
name|int32_t
name|end
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"ic_set_selection not implemented"
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// End of un-hittable code
comment|// LCOV_EXCL_STOP
DECL|member|ic_funcs
specifier|static
name|connection_interface_t
name|ic_funcs
init|=
block|{
name|ic_begin_batch_edit
block|,
name|ic_clear_meta_key_states
block|,
name|ic_commit_text
block|,
name|ic_delete_surrounding_text
block|,
name|ic_end_batch_edit
block|,
name|ic_finish_composing_text
block|,
name|ic_get_cursor_caps_mode
block|,
name|ic_get_cursor_position
block|,
name|ic_get_extracted_text
block|,
name|ic_get_selected_text
block|,
name|ic_get_text_after_cursor
block|,
name|ic_get_text_before_cursor
block|,
name|ic_perform_editor_action
block|,
name|ic_report_fullscreen_mode
block|,
literal|0
block|,
comment|//ic_send_key_event
name|ic_send_event
block|,
name|ic_send_async_event
block|,
name|ic_set_composing_region
block|,
name|ic_set_composing_text
block|,
name|ic_set_selection
block|,
literal|0
block|,
comment|//ic_set_candidates,
literal|0
block|,
comment|//ic_get_cursor_offset,
literal|0
block|,
comment|//ic_get_selection,
name|ic_is_text_selected
block|,
name|ic_is_all_text_selected
block|,
literal|0
block|,
comment|//ic_get_max_cursor_offset_t
block|}
decl_stmt|;
block|}
end_namespace
begin_comment
comment|// namespace
end_comment
begin_function
specifier|static
name|void
DECL|function|initEvent
name|initEvent
parameter_list|(
name|event_t
modifier|*
name|pEvent
parameter_list|,
specifier|const
name|input_session_t
modifier|*
name|pSession
parameter_list|,
name|EventType
name|eventType
parameter_list|,
name|int
name|eventId
parameter_list|,
name|int
name|eventSize
parameter_list|)
block|{
specifier|static
name|int
name|s_transactionId
decl_stmt|;
comment|// Make sure structure is squeaky clean since it's not clear just what is significant.
name|memset
argument_list|(
name|pEvent
argument_list|,
literal|0
argument_list|,
name|eventSize
argument_list|)
expr_stmt|;
name|pEvent
operator|->
name|event_type
operator|=
name|eventType
expr_stmt|;
name|pEvent
operator|->
name|event_id
operator|=
name|eventId
expr_stmt|;
name|pEvent
operator|->
name|pid
operator|=
name|getpid
argument_list|()
expr_stmt|;
name|pEvent
operator|->
name|component_id
operator|=
name|pSession
operator|->
name|component_id
expr_stmt|;
name|pEvent
operator|->
name|transaction_id
operator|=
operator|++
name|s_transactionId
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toSpannableString
specifier|static
name|spannable_string_t
modifier|*
name|toSpannableString
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|text
expr_stmt|;
name|spannable_string_t
modifier|*
name|pString
init|=
cast|static_cast
argument_list|<
name|spannable_string_t
operator|*
argument_list|>
argument_list|(
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|spannable_string_t
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|pString
operator|->
name|str
operator|=
cast|static_cast
argument_list|<
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
name|text
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|pString
operator|->
name|length
operator|=
name|text
operator|.
name|toWCharArray
argument_list|(
name|pString
operator|->
name|str
argument_list|)
expr_stmt|;
name|pString
operator|->
name|spans
operator|=
literal|0
expr_stmt|;
name|pString
operator|->
name|spans_count
operator|=
literal|0
expr_stmt|;
name|pString
operator|->
name|str
index|[
name|pString
operator|->
name|length
index|]
operator|=
literal|0
expr_stmt|;
return|return
name|pString
return|;
block|}
end_function
begin_function_decl
DECL|variable|p_ictrl_open_session
specifier|static
specifier|const
name|input_session_t
modifier|*
function_decl|(
modifier|*
name|p_ictrl_open_session
function_decl|)
parameter_list|(
name|connection_interface_t
modifier|*
parameter_list|)
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_ictrl_close_session
specifier|static
name|void
function_decl|(
modifier|*
name|p_ictrl_close_session
function_decl|)
parameter_list|(
name|input_session_t
modifier|*
parameter_list|)
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_ictrl_dispatch_event
specifier|static
name|int32_t
function_decl|(
modifier|*
name|p_ictrl_dispatch_event
function_decl|)
parameter_list|(
name|event_t
modifier|*
parameter_list|)
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_imf_client_init
specifier|static
name|int32_t
function_decl|(
modifier|*
name|p_imf_client_init
function_decl|)
parameter_list|()
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_imf_client_disconnect
specifier|static
name|void
function_decl|(
modifier|*
name|p_imf_client_disconnect
function_decl|)
parameter_list|()
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_vkb_init_selection_service
specifier|static
name|int32_t
function_decl|(
modifier|*
name|p_vkb_init_selection_service
function_decl|)
parameter_list|()
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_function_decl
DECL|variable|p_ictrl_get_num_active_sessions
specifier|static
name|int32_t
function_decl|(
modifier|*
name|p_ictrl_get_num_active_sessions
function_decl|)
parameter_list|()
function_decl|=
literal|0
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|s_imfInitFailed
specifier|static
name|bool
name|s_imfInitFailed
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|imfAvailable
specifier|static
name|bool
name|imfAvailable
parameter_list|()
block|{
specifier|static
name|bool
name|s_imfDisabled
init|=
name|getenv
argument_list|(
literal|"DISABLE_IMF"
argument_list|)
operator|!=
literal|0
decl_stmt|;
specifier|static
name|bool
name|s_imfReady
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|s_imfInitFailed
operator|||
name|s_imfDisabled
condition|)
return|return
literal|false
return|;
elseif|else
if|if
condition|(
name|s_imfReady
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|p_imf_client_init
operator|==
literal|0
condition|)
block|{
name|void
modifier|*
name|handle
init|=
name|dlopen
argument_list|(
literal|"libinput_client.so.1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
name|p_imf_client_init
operator|=
operator|(
name|int32_t
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"imf_client_init"
argument_list|)
expr_stmt|;
name|p_imf_client_disconnect
operator|=
operator|(
name|void
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"imf_client_disconnect"
argument_list|)
expr_stmt|;
name|p_ictrl_open_session
operator|=
operator|(
specifier|const
name|input_session_t
operator|*
call|(
modifier|*
call|)
argument_list|(
name|connection_interface_t
operator|*
argument_list|)
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"ictrl_open_session"
argument_list|)
expr_stmt|;
name|p_ictrl_close_session
operator|=
operator|(
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|input_session_t
operator|*
argument_list|)
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"ictrl_close_session"
argument_list|)
expr_stmt|;
name|p_ictrl_dispatch_event
operator|=
operator|(
name|int32_t
argument_list|(
operator|*
argument_list|)
argument_list|(
name|event_t
operator|*
argument_list|)
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"ictrl_dispatch_event"
argument_list|)
expr_stmt|;
name|p_vkb_init_selection_service
operator|=
operator|(
name|int32_t
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"vkb_init_selection_service"
argument_list|)
expr_stmt|;
name|p_ictrl_get_num_active_sessions
operator|=
operator|(
name|int32_t
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|)
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"ictrl_get_num_active_sessions"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"libinput_client.so.1 is not present - IMF services are disabled."
expr_stmt|;
name|s_imfDisabled
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|p_imf_client_init
operator|&&
name|p_ictrl_open_session
operator|&&
name|p_ictrl_dispatch_event
condition|)
block|{
name|s_imfReady
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|p_ictrl_open_session
operator|=
literal|0
expr_stmt|;
name|p_ictrl_dispatch_event
operator|=
literal|0
expr_stmt|;
name|s_imfDisabled
operator|=
literal|true
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"libinput_client.so.1 did not contain the correct symbols, library mismatch? IMF services are disabled."
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
name|s_imfReady
return|;
block|}
end_function
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QQnxInputContext
name|QQnxInputContext
operator|::
name|QQnxInputContext
parameter_list|(
name|QQnxIntegration
modifier|*
name|integration
parameter_list|,
name|QQnxAbstractVirtualKeyboard
modifier|&
name|keyboard
parameter_list|)
member_init_list|:
name|QPlatformInputContext
argument_list|()
member_init_list|,
name|m_caretPosition
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_isComposing
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_isUpdatingText
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_inputPanelVisible
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_inputPanelLocale
argument_list|(
name|QLocale
operator|::
name|c
argument_list|()
argument_list|)
member_init_list|,
name|m_focusObject
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_integration
argument_list|(
name|integration
argument_list|)
member_init_list|,
name|m_virtualKeyboard
argument_list|(
name|keyboard
argument_list|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
condition|)
return|return;
comment|// Save a pointer to ourselves so we can execute calls from IMF through executeIMFRequest
comment|// In practice there will only ever be a single instance.
name|Q_ASSERT
argument_list|(
name|sInputContextInstance
operator|==
literal|0
argument_list|)
expr_stmt|;
name|sInputContextInstance
operator|=
name|this
expr_stmt|;
if|if
condition|(
name|p_imf_client_init
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|s_imfInitFailed
operator|=
literal|true
expr_stmt|;
name|qCritical
argument_list|(
literal|"imf_client_init failed - IMF services will be unavailable"
argument_list|)
expr_stmt|;
block|}
name|connect
argument_list|(
operator|&
name|keyboard
argument_list|,
name|SIGNAL
argument_list|(
name|visibilityChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|keyboardVisibilityChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|keyboard
argument_list|,
name|SIGNAL
argument_list|(
name|localeChanged
argument_list|(
name|QLocale
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|keyboardLocaleChanged
argument_list|(
name|QLocale
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|keyboardVisibilityChanged
argument_list|(
name|keyboard
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|keyboardLocaleChanged
argument_list|(
name|keyboard
operator|.
name|locale
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QQnxInputContext
name|QQnxInputContext
operator|::
name|~
name|QQnxInputContext
parameter_list|()
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|sInputContextInstance
operator|==
name|this
argument_list|)
expr_stmt|;
name|sInputContextInstance
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
condition|)
return|return;
name|p_imf_client_disconnect
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QQnxInputContext
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|imfAvailable
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|processImfEvent
name|void
name|QQnxInputContext
operator|::
name|processImfEvent
parameter_list|(
name|QQnxImfRequest
modifier|*
name|imfEvent
parameter_list|)
block|{
comment|// If input session is no longer current, just bail, imfEvent should already be set with the appropriate
comment|// return value.  The only exception is spell check events since they're not associated with the
comment|// object with focus.
if|if
condition|(
name|imfEvent
operator|->
name|type
operator|!=
name|ImfSendEvent
operator|||
name|imfEvent
operator|->
name|sae
operator|.
name|event
operator|->
name|event_type
operator|!=
name|EVENT_SPELL_CHECK
condition|)
block|{
if|if
condition|(
operator|!
name|isSessionOkay
argument_list|(
name|imfEvent
operator|->
name|session
argument_list|)
condition|)
return|return;
block|}
switch|switch
condition|(
name|imfEvent
operator|->
name|type
condition|)
block|{
case|case
name|ImfCommitText
case|:
name|imfEvent
operator|->
name|ct
operator|.
name|result
operator|=
name|onCommitText
argument_list|(
name|imfEvent
operator|->
name|ct
operator|.
name|text
argument_list|,
name|imfEvent
operator|->
name|ct
operator|.
name|new_cursor_position
argument_list|)
expr_stmt|;
break|break;
case|case
name|ImfDeleteSurroundingText
case|:
name|imfEvent
operator|->
name|dst
operator|.
name|result
operator|=
name|onDeleteSurroundingText
argument_list|(
name|imfEvent
operator|->
name|dst
operator|.
name|left_length
argument_list|,
name|imfEvent
operator|->
name|dst
operator|.
name|right_length
argument_list|)
expr_stmt|;
break|break;
case|case
name|ImfFinishComposingText
case|:
name|imfEvent
operator|->
name|fct
operator|.
name|result
operator|=
name|onFinishComposingText
argument_list|()
expr_stmt|;
break|break;
case|case
name|ImfGetCursorPosition
case|:
name|imfEvent
operator|->
name|gcp
operator|.
name|result
operator|=
name|onGetCursorPosition
argument_list|()
expr_stmt|;
break|break;
case|case
name|ImfGetTextAfterCursor
case|:
name|imfEvent
operator|->
name|gtac
operator|.
name|result
operator|=
name|onGetTextAfterCursor
argument_list|(
name|imfEvent
operator|->
name|gtac
operator|.
name|n
argument_list|,
name|imfEvent
operator|->
name|gtac
operator|.
name|flags
argument_list|)
expr_stmt|;
break|break;
case|case
name|ImfGetTextBeforeCursor
case|:
name|imfEvent
operator|->
name|gtac
operator|.
name|result
operator|=
name|onGetTextBeforeCursor
argument_list|(
name|imfEvent
operator|->
name|gtac
operator|.
name|n
argument_list|,
name|imfEvent
operator|->
name|gtac
operator|.
name|flags
argument_list|)
expr_stmt|;
break|break;
case|case
name|ImfSendEvent
case|:
name|imfEvent
operator|->
name|sae
operator|.
name|result
operator|=
name|onSendEvent
argument_list|(
name|imfEvent
operator|->
name|sae
operator|.
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|ImfSetComposingRegion
case|:
name|imfEvent
operator|->
name|scr
operator|.
name|result
operator|=
name|onSetComposingRegion
argument_list|(
name|imfEvent
operator|->
name|scr
operator|.
name|start
argument_list|,
name|imfEvent
operator|->
name|scr
operator|.
name|end
argument_list|)
expr_stmt|;
break|break;
case|case
name|ImfSetComposingText
case|:
name|imfEvent
operator|->
name|sct
operator|.
name|result
operator|=
name|onSetComposingText
argument_list|(
name|imfEvent
operator|->
name|sct
operator|.
name|text
argument_list|,
name|imfEvent
operator|->
name|sct
operator|.
name|new_cursor_position
argument_list|)
expr_stmt|;
break|break;
case|case
name|ImfIsTextSelected
case|:
name|imfEvent
operator|->
name|its
operator|.
name|result
operator|=
name|onIsTextSelected
argument_list|(
name|imfEvent
operator|->
name|its
operator|.
name|pIsSelected
argument_list|)
expr_stmt|;
break|break;
case|case
name|ImfIsAllTextSelected
case|:
name|imfEvent
operator|->
name|its
operator|.
name|result
operator|=
name|onIsAllTextSelected
argument_list|(
name|imfEvent
operator|->
name|its
operator|.
name|pIsSelected
argument_list|)
expr_stmt|;
break|break;
block|}
empty_stmt|;
comment|//switch
block|}
end_function
begin_function
DECL|function|filterEvent
name|bool
name|QQnxInputContext
operator|::
name|filterEvent
parameter_list|(
specifier|const
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|event
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|CloseSoftwareInputPanel
case|:
return|return
name|dispatchCloseSoftwareInputPanel
argument_list|()
return|;
case|case
name|QEvent
operator|::
name|RequestSoftwareInputPanel
case|:
return|return
name|dispatchRequestSoftwareInputPanel
argument_list|()
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|keyboardRect
name|QRectF
name|QQnxInputContext
operator|::
name|keyboardRect
parameter_list|()
specifier|const
block|{
name|QRect
name|screenGeometry
init|=
name|m_integration
operator|->
name|primaryDisplay
argument_list|()
operator|->
name|geometry
argument_list|()
decl_stmt|;
return|return
name|QRectF
argument_list|(
name|screenGeometry
operator|.
name|x
argument_list|()
argument_list|,
name|screenGeometry
operator|.
name|height
argument_list|()
operator|-
name|m_virtualKeyboard
operator|.
name|height
argument_list|()
argument_list|,
name|screenGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|m_virtualKeyboard
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QQnxInputContext
operator|::
name|reset
parameter_list|()
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|endComposition
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|commit
name|void
name|QQnxInputContext
operator|::
name|commit
parameter_list|()
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|endComposition
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|update
name|void
name|QQnxInputContext
operator|::
name|update
parameter_list|(
name|Qt
operator|::
name|InputMethodQueries
name|queries
parameter_list|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|queries
expr_stmt|;
if|if
condition|(
name|queries
operator|&
name|Qt
operator|::
name|ImCursorPosition
condition|)
block|{
name|int
name|lastCaret
init|=
name|m_caretPosition
decl_stmt|;
name|updateCursorPosition
argument_list|()
expr_stmt|;
comment|// If caret position has changed we need to inform IMF unless this is just due to our own action
comment|// such as committing text.
if|if
condition|(
name|hasSession
argument_list|()
operator|&&
operator|!
name|m_isUpdatingText
operator|&&
name|lastCaret
operator|!=
name|m_caretPosition
condition|)
block|{
name|caret_event_t
name|caretEvent
decl_stmt|;
name|initEvent
argument_list|(
operator|&
name|caretEvent
operator|.
name|event
argument_list|,
name|sInputSession
argument_list|,
name|EVENT_CARET
argument_list|,
name|CARET_POS_CHANGED
argument_list|,
sizeof|sizeof
argument_list|(
name|caretEvent
argument_list|)
argument_list|)
expr_stmt|;
name|caretEvent
operator|.
name|old_pos
operator|=
name|lastCaret
expr_stmt|;
name|caretEvent
operator|.
name|new_pos
operator|=
name|m_caretPosition
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"ictrl_dispatch_event caret changed"
operator|<<
name|lastCaret
operator|<<
name|m_caretPosition
expr_stmt|;
name|p_ictrl_dispatch_event
argument_list|(
operator|&
name|caretEvent
operator|.
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|closeSession
name|void
name|QQnxInputContext
operator|::
name|closeSession
parameter_list|()
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
condition|)
return|return;
if|if
condition|(
name|sInputSession
condition|)
block|{
name|p_ictrl_close_session
argument_list|(
operator|(
name|input_session_t
operator|*
operator|)
name|sInputSession
argument_list|)
expr_stmt|;
name|sInputSession
operator|=
literal|0
expr_stmt|;
block|}
comment|// These are likely already in the right state but this depends on the text control
comment|// having called reset or commit.  So, just in case, set them to proper values.
name|m_isComposing
operator|=
literal|false
expr_stmt|;
name|m_composingText
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openSession
name|bool
name|QQnxInputContext
operator|::
name|openSession
parameter_list|()
block|{
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
condition|)
return|return
literal|false
return|;
name|closeSession
argument_list|()
expr_stmt|;
name|sInputSession
operator|=
name|p_ictrl_open_session
argument_list|(
operator|&
name|ic_funcs
argument_list|)
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
return|return
name|sInputSession
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|hasSession
name|bool
name|QQnxInputContext
operator|::
name|hasSession
parameter_list|()
block|{
return|return
name|sInputSession
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|hasSelectedText
name|bool
name|QQnxInputContext
operator|::
name|hasSelectedText
parameter_list|()
block|{
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return
literal|false
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
return|return
operator|!
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|dispatchRequestSoftwareInputPanel
name|bool
name|QQnxInputContext
operator|::
name|dispatchRequestSoftwareInputPanel
parameter_list|()
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"requesting keyboard"
operator|<<
name|m_inputPanelVisible
expr_stmt|;
name|m_virtualKeyboard
operator|.
name|showKeyboard
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|dispatchCloseSoftwareInputPanel
name|bool
name|QQnxInputContext
operator|::
name|dispatchCloseSoftwareInputPanel
parameter_list|()
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"hiding keyboard"
operator|<<
name|m_inputPanelVisible
expr_stmt|;
name|m_virtualKeyboard
operator|.
name|hideKeyboard
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/**  * IMF Event Dispatchers.  */
end_comment
begin_function
DECL|function|dispatchFocusGainEvent
name|bool
name|QQnxInputContext
operator|::
name|dispatchFocusGainEvent
parameter_list|(
name|int
name|inputHints
parameter_list|)
block|{
if|if
condition|(
name|hasSession
argument_list|()
condition|)
name|dispatchFocusLossEvent
argument_list|()
expr_stmt|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
operator|||
operator|!
name|openSession
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Set the last caret position to 0 since we don't really have one and we don't
comment|// want to have the old one.
name|m_caretPosition
operator|=
literal|0
expr_stmt|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImHints
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|focus_event_t
name|focusEvent
decl_stmt|;
name|initEvent
argument_list|(
operator|&
name|focusEvent
operator|.
name|event
argument_list|,
name|sInputSession
argument_list|,
name|EVENT_FOCUS
argument_list|,
name|FOCUS_GAINED
argument_list|,
sizeof|sizeof
argument_list|(
name|focusEvent
argument_list|)
argument_list|)
expr_stmt|;
name|focusEvent
operator|.
name|style
operator|=
name|DEFAULT_STYLE
expr_stmt|;
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhNoPredictiveText
condition|)
name|focusEvent
operator|.
name|style
operator||=
name|NO_PREDICTION
operator||
name|NO_AUTO_CORRECTION
expr_stmt|;
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhNoAutoUppercase
condition|)
name|focusEvent
operator|.
name|style
operator||=
name|NO_AUTO_TEXT
expr_stmt|;
comment|// Following styles are mutually exclusive
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhHiddenText
condition|)
block|{
name|focusEvent
operator|.
name|style
operator||=
name|IMF_PASSWORD_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhDialableCharactersOnly
condition|)
block|{
name|focusEvent
operator|.
name|style
operator||=
name|IMF_PHONE_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhUrlCharactersOnly
condition|)
block|{
name|focusEvent
operator|.
name|style
operator||=
name|IMF_URL_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhEmailCharactersOnly
condition|)
block|{
name|focusEvent
operator|.
name|style
operator||=
name|IMF_EMAIL_TYPE
expr_stmt|;
block|}
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"ictrl_dispatch_event focus gain style:"
operator|<<
name|focusEvent
operator|.
name|style
expr_stmt|;
name|p_ictrl_dispatch_event
argument_list|(
operator|(
name|event_t
operator|*
operator|)
operator|&
name|focusEvent
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|dispatchFocusLossEvent
name|void
name|QQnxInputContext
operator|::
name|dispatchFocusLossEvent
parameter_list|()
block|{
if|if
condition|(
name|hasSession
argument_list|()
condition|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"ictrl_dispatch_event focus lost"
expr_stmt|;
name|focus_event_t
name|focusEvent
decl_stmt|;
name|initEvent
argument_list|(
operator|&
name|focusEvent
operator|.
name|event
argument_list|,
name|sInputSession
argument_list|,
name|EVENT_FOCUS
argument_list|,
name|FOCUS_LOST
argument_list|,
sizeof|sizeof
argument_list|(
name|focusEvent
argument_list|)
argument_list|)
expr_stmt|;
name|p_ictrl_dispatch_event
argument_list|(
operator|(
name|event_t
operator|*
operator|)
operator|&
name|focusEvent
argument_list|)
expr_stmt|;
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleKeyboardEvent
name|bool
name|QQnxInputContext
operator|::
name|handleKeyboardEvent
parameter_list|(
name|int
name|flags
parameter_list|,
name|int
name|sym
parameter_list|,
name|int
name|mod
parameter_list|,
name|int
name|scan
parameter_list|,
name|int
name|cap
parameter_list|,
name|int
name|sequenceId
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|scan
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasSession
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|key
init|=
operator|(
name|flags
operator|&
name|KEY_SYM_VALID
operator|)
condition|?
name|sym
else|:
name|cap
decl_stmt|;
name|bool
name|navigationKey
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|key
condition|)
block|{
case|case
name|KEYCODE_RETURN
case|:
comment|/* In a single line edit we should end composition because enter might be used by something.             endComposition();             return false;*/
break|break;
case|case
name|KEYCODE_BACKSPACE
case|:
case|case
name|KEYCODE_DELETE
case|:
comment|// If there is a selection range, then we want a delete key to operate on that (by
comment|// deleting the contents of the select range) rather than operating on the composition
comment|// range.
if|if
condition|(
name|hasSelectedText
argument_list|()
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|KEYCODE_LEFT
case|:
name|key
operator|=
name|NAVIGATE_LEFT
expr_stmt|;
name|navigationKey
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|KEYCODE_RIGHT
case|:
name|key
operator|=
name|NAVIGATE_RIGHT
expr_stmt|;
name|navigationKey
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|KEYCODE_UP
case|:
name|key
operator|=
name|NAVIGATE_UP
expr_stmt|;
name|navigationKey
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|KEYCODE_DOWN
case|:
name|key
operator|=
name|NAVIGATE_DOWN
expr_stmt|;
name|navigationKey
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|KEYCODE_LEFT_CTRL
case|:
case|case
name|KEYCODE_RIGHT_CTRL
case|:
case|case
name|KEYCODE_MENU
case|:
case|case
name|KEYCODE_LEFT_HYPER
case|:
case|case
name|KEYCODE_RIGHT_HYPER
case|:
case|case
name|KEYCODE_INSERT
case|:
case|case
name|KEYCODE_HOME
case|:
case|case
name|KEYCODE_PG_UP
case|:
case|case
name|KEYCODE_END
case|:
case|case
name|KEYCODE_PG_DOWN
case|:
comment|// Don't send these
name|key
operator|=
literal|0
expr_stmt|;
break|break;
block|}
comment|// Pass the keys we don't know about on through
if|if
condition|(
name|key
operator|==
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|navigationKey
condition|)
block|{
comment|// Even if we're forwarding up events, we can't do this for
comment|// navigation keys.
if|if
condition|(
name|flags
operator|&
name|KEY_DOWN
condition|)
block|{
name|navigation_event_t
name|navEvent
decl_stmt|;
name|initEvent
argument_list|(
operator|&
name|navEvent
operator|.
name|event
argument_list|,
name|sInputSession
argument_list|,
name|EVENT_NAVIGATION
argument_list|,
name|key
argument_list|,
sizeof|sizeof
argument_list|(
name|navEvent
argument_list|)
argument_list|)
expr_stmt|;
name|navEvent
operator|.
name|magnitude
operator|=
literal|1
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"ictrl_dispatch_even navigation"
operator|<<
name|key
expr_stmt|;
name|p_ictrl_dispatch_event
argument_list|(
operator|&
name|navEvent
operator|.
name|event
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|key_event_t
name|keyEvent
decl_stmt|;
name|initEvent
argument_list|(
operator|&
name|keyEvent
operator|.
name|event
argument_list|,
name|sInputSession
argument_list|,
name|EVENT_KEY
argument_list|,
name|flags
operator|&
name|KEY_DOWN
condition|?
name|IMF_KEY_DOWN
else|:
name|IMF_KEY_UP
argument_list|,
sizeof|sizeof
argument_list|(
name|keyEvent
argument_list|)
argument_list|)
expr_stmt|;
name|keyEvent
operator|.
name|key_code
operator|=
name|cap
expr_stmt|;
name|keyEvent
operator|.
name|character
operator|=
name|sym
expr_stmt|;
name|keyEvent
operator|.
name|meta_key_state
operator|=
name|mod
expr_stmt|;
name|keyEvent
operator|.
name|sequence_id
operator|=
name|sequenceId
expr_stmt|;
name|p_ictrl_dispatch_event
argument_list|(
operator|&
name|keyEvent
operator|.
name|event
argument_list|)
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"ictrl_dispatch_even key"
operator|<<
name|key
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|updateCursorPosition
name|void
name|QQnxInputContext
operator|::
name|updateCursorPosition
parameter_list|()
block|{
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|m_caretPosition
operator|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|m_caretPosition
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endComposition
name|void
name|QQnxInputContext
operator|::
name|endComposition
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_isComposing
condition|)
return|return;
name|finishComposingText
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasSession
argument_list|()
condition|)
block|{
name|action_event_t
name|actionEvent
decl_stmt|;
name|initEvent
argument_list|(
operator|&
name|actionEvent
operator|.
name|event
argument_list|,
name|sInputSession
argument_list|,
name|EVENT_ACTION
argument_list|,
name|ACTION_END_COMPOSITION
argument_list|,
sizeof|sizeof
argument_list|(
name|actionEvent
argument_list|)
argument_list|)
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"ictrl_dispatch_even end composition"
expr_stmt|;
name|p_ictrl_dispatch_event
argument_list|(
operator|&
name|actionEvent
operator|.
name|event
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateComposition
name|void
name|QQnxInputContext
operator|::
name|updateComposition
parameter_list|(
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
block|{
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return;
if|if
condition|(
name|new_cursor_position
operator|>
literal|0
condition|)
name|new_cursor_position
operator|+=
name|text
operator|->
name|length
operator|-
literal|1
expr_stmt|;
name|m_composingText
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|text
operator|->
name|str
argument_list|,
name|text
operator|->
name|length
argument_list|)
expr_stmt|;
name|m_isComposing
operator|=
literal|true
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|m_composingText
operator|<<
name|new_cursor_position
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Cursor
argument_list|,
name|new_cursor_position
argument_list|,
literal|1
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|->
name|spans_count
condition|;
operator|++
name|i
control|)
block|{
name|QColor
name|highlightColor
decl_stmt|;
name|bool
name|underline
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|text
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|attributes_mask
operator|&
name|COMPOSED_TEXT_ATTRIB
operator|)
operator|!=
literal|0
condition|)
name|underline
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|text
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|attributes_mask
operator|&
name|ACTIVE_REGION_ATTRIB
operator|)
operator|!=
literal|0
condition|)
block|{
name|underline
operator|=
literal|true
expr_stmt|;
name|highlightColor
operator|=
name|m_highlightColor
index|[
name|ActiveRegion
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|text
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|attributes_mask
operator|&
name|AUTO_CORRECTION_ATTRIB
operator|)
operator|!=
literal|0
condition|)
block|{
name|highlightColor
operator|=
name|m_highlightColor
index|[
name|AutoCorrected
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|text
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|attributes_mask
operator|&
name|REVERT_CORRECTION_ATTRIB
operator|)
operator|!=
literal|0
condition|)
block|{
name|highlightColor
operator|=
name|m_highlightColor
index|[
name|Reverted
index|]
expr_stmt|;
block|}
if|if
condition|(
name|underline
operator|||
name|highlightColor
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QTextCharFormat
name|format
decl_stmt|;
if|if
condition|(
name|underline
condition|)
name|format
operator|.
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|highlightColor
operator|.
name|isValid
argument_list|()
condition|)
name|format
operator|.
name|setBackground
argument_list|(
name|QBrush
argument_list|(
name|highlightColor
argument_list|)
argument_list|)
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
literal|"    attrib:  "
operator|<<
name|underline
operator|<<
name|highlightColor
operator|<<
name|text
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|start
operator|<<
name|text
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|end
expr_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
name|text
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|start
argument_list|,
name|text
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|end
operator|-
name|text
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|start
operator|+
literal|1
argument_list|,
name|QVariant
argument_list|(
name|format
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QInputMethodEvent
name|event
argument_list|(
name|m_composingText
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|m_isUpdatingText
operator|=
literal|true
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|m_isUpdatingText
operator|=
literal|false
expr_stmt|;
name|updateCursorPosition
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|finishComposingText
name|void
name|QQnxInputContext
operator|::
name|finishComposingText
parameter_list|()
block|{
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
condition|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|m_composingText
expr_stmt|;
name|QInputMethodEvent
name|event
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|m_composingText
argument_list|)
expr_stmt|;
name|m_isUpdatingText
operator|=
literal|true
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|m_isUpdatingText
operator|=
literal|false
expr_stmt|;
block|}
name|m_composingText
operator|=
name|QString
argument_list|()
expr_stmt|;
name|m_isComposing
operator|=
literal|false
expr_stmt|;
name|updateCursorPosition
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// Return the index relative to a UTF-16 sequence of characters for a index that is relative to the
end_comment
begin_comment
comment|// corresponding UTF-32 character string given a starting index in the UTF-16 string and a count
end_comment
begin_comment
comment|// of the number of lead surrogates prior to that index.  Updates the highSurrogateCount to reflect the
end_comment
begin_comment
comment|// new surrogate characters encountered.
end_comment
begin_function
DECL|function|adjustIndex
specifier|static
name|int
name|adjustIndex
parameter_list|(
specifier|const
name|QChar
modifier|*
name|text
parameter_list|,
name|int
name|utf32Index
parameter_list|,
name|int
name|utf16StartIndex
parameter_list|,
name|int
modifier|*
name|highSurrogateCount
parameter_list|)
block|{
name|int
name|utf16Index
init|=
name|utf32Index
operator|+
operator|*
name|highSurrogateCount
decl_stmt|;
while|while
condition|(
name|utf16StartIndex
operator|<
name|utf16Index
condition|)
block|{
if|if
condition|(
name|text
index|[
name|utf16StartIndex
index|]
operator|.
name|isHighSurrogate
argument_list|()
condition|)
block|{
operator|++
name|utf16Index
expr_stmt|;
operator|++
operator|*
name|highSurrogateCount
expr_stmt|;
block|}
operator|++
name|utf16StartIndex
expr_stmt|;
block|}
return|return
name|utf16StartIndex
return|;
block|}
end_function
begin_function
DECL|function|handleSpellCheck
name|int
name|QQnxInputContext
operator|::
name|handleSpellCheck
parameter_list|(
name|spell_check_event_t
modifier|*
name|event
parameter_list|)
block|{
comment|// These should never happen.
if|if
condition|(
name|sSpellCheckQueue
operator|->
name|isEmpty
argument_list|()
operator|||
name|event
operator|->
name|event
operator|.
name|event_id
operator|!=
name|NOTIFY_SP_CHECK_MISSPELLINGS
condition|)
return|return
operator|-
literal|1
return|;
name|SpellCheckInfo
name|callerInfo
init|=
name|sSpellCheckQueue
operator|->
name|dequeue
argument_list|()
decl_stmt|;
name|spannable_string_t
modifier|*
name|spellCheckData
init|=
operator|*
name|event
operator|->
name|data
decl_stmt|;
name|QString
name|text
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|spellCheckData
operator|->
name|str
argument_list|,
name|spellCheckData
operator|->
name|length
argument_list|)
decl_stmt|;
comment|// Generate the list of indices indicating misspelled words in the text.  We use end + 1
comment|// since it's more conventional to have the end index point just past the string.  We also
comment|// can't use the indices directly since they are relative to UTF-32 encoded data and the
comment|// conversion to Qt's UTF-16 internal format might cause lengthening.
name|QList
argument_list|<
name|int
argument_list|>
name|indices
decl_stmt|;
name|int
name|adjustment
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|spellCheckData
operator|->
name|spans_count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|spellCheckData
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|attributes_mask
operator|&
name|MISSPELLED_WORD_ATTRIB
condition|)
block|{
name|index
operator|=
name|adjustIndex
argument_list|(
name|text
operator|.
name|data
argument_list|()
argument_list|,
name|spellCheckData
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|start
argument_list|,
name|index
argument_list|,
operator|&
name|adjustment
argument_list|)
expr_stmt|;
name|indices
operator|.
name|push_back
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|index
operator|=
name|adjustIndex
argument_list|(
name|text
operator|.
name|data
argument_list|()
argument_list|,
name|spellCheckData
operator|->
name|spans
index|[
name|i
index|]
operator|.
name|end
operator|+
literal|1
argument_list|,
name|index
argument_list|,
operator|&
name|adjustment
argument_list|)
expr_stmt|;
name|indices
operator|.
name|push_back
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
name|callerInfo
operator|.
name|spellCheckDone
argument_list|(
name|callerInfo
operator|.
name|context
argument_list|,
name|text
argument_list|,
name|indices
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|processEvent
name|int32_t
name|QQnxInputContext
operator|::
name|processEvent
parameter_list|(
name|event_t
modifier|*
name|event
parameter_list|)
block|{
name|int32_t
name|result
init|=
operator|-
literal|1
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|event_type
condition|)
block|{
case|case
name|EVENT_SPELL_CHECK
case|:
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"EVENT_SPELL_CHECK"
expr_stmt|;
name|result
operator|=
name|handleSpellCheck
argument_list|(
cast|reinterpret_cast
argument_list|<
name|spell_check_event_t
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EVENT_NAVIGATION
case|:
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"EVENT_NAVIGATION"
expr_stmt|;
name|int
name|key
init|=
name|event
operator|->
name|event_id
operator|==
name|NAVIGATE_UP
condition|?
name|KEYCODE_UP
else|:
name|event
operator|->
name|event_id
operator|==
name|NAVIGATE_DOWN
condition|?
name|KEYCODE_DOWN
else|:
name|event
operator|->
name|event_id
operator|==
name|NAVIGATE_LEFT
condition|?
name|KEYCODE_LEFT
else|:
name|event
operator|->
name|event_id
operator|==
name|NAVIGATE_RIGHT
condition|?
name|KEYCODE_RIGHT
else|:
literal|0
decl_stmt|;
name|QQnxScreenEventHandler
operator|::
name|injectKeyboardEvent
argument_list|(
name|KEY_DOWN
operator||
name|KEY_CAP_VALID
argument_list|,
name|key
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QQnxScreenEventHandler
operator|::
name|injectKeyboardEvent
argument_list|(
name|KEY_CAP_VALID
argument_list|,
name|key
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
literal|0
expr_stmt|;
break|break;
block|}
case|case
name|EVENT_KEY
case|:
block|{
name|key_event_t
modifier|*
name|kevent
init|=
cast|reinterpret_cast
argument_list|<
name|key_event_t
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|int
name|keySym
init|=
name|kevent
operator|->
name|character
operator|!=
literal|0
condition|?
name|kevent
operator|->
name|character
else|:
name|kevent
operator|->
name|key_code
decl_stmt|;
name|int
name|keyCap
init|=
name|kevent
operator|->
name|key_code
decl_stmt|;
name|int
name|modifiers
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|kevent
operator|->
name|meta_key_state
operator|&
name|META_SHIFT_ON
condition|)
name|modifiers
operator||=
name|KEYMOD_SHIFT
expr_stmt|;
name|int
name|flags
init|=
name|KEY_SYM_VALID
operator||
name|KEY_CAP_VALID
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|event_id
operator|==
name|IMF_KEY_DOWN
condition|)
name|flags
operator||=
name|KEY_DOWN
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"EVENT_KEY"
operator|<<
name|flags
operator|<<
name|keySym
expr_stmt|;
name|QQnxScreenEventHandler
operator|::
name|injectKeyboardEvent
argument_list|(
name|flags
argument_list|,
name|keySym
argument_list|,
name|modifiers
argument_list|,
literal|0
argument_list|,
name|keyCap
argument_list|)
expr_stmt|;
name|result
operator|=
literal|0
expr_stmt|;
break|break;
block|}
case|case
name|EVENT_ACTION
case|:
comment|// Don't care, indicates that IMF is done.
break|break;
case|case
name|EVENT_CARET
case|:
case|case
name|EVENT_NOTHING
case|:
case|case
name|EVENT_FOCUS
case|:
case|case
name|EVENT_USER_ACTION
case|:
case|case
name|EVENT_STROKE
case|:
case|case
name|EVENT_INVOKE_LATER
case|:
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Unsupported event type: "
operator|<<
name|event
operator|->
name|event_type
expr_stmt|;
break|break;
default|default:
name|qCritical
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Unknown event type: "
operator|<<
name|event
operator|->
name|event_type
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/**  * IMF Event Handlers  */
end_comment
begin_function
DECL|function|onCommitText
name|int32_t
name|QQnxInputContext
operator|::
name|onCommitText
parameter_list|(
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|new_cursor_position
argument_list|)
expr_stmt|;
name|updateComposition
argument_list|(
name|text
argument_list|,
name|new_cursor_position
argument_list|)
expr_stmt|;
name|finishComposingText
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onDeleteSurroundingText
name|int32_t
name|QQnxInputContext
operator|::
name|onDeleteSurroundingText
parameter_list|(
name|int32_t
name|left_length
parameter_list|,
name|int32_t
name|right_length
parameter_list|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"L:"
operator|<<
name|left_length
operator|<<
literal|" R:"
operator|<<
name|right_length
expr_stmt|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return
literal|0
return|;
name|int
name|replacementLength
init|=
name|left_length
operator|+
name|right_length
decl_stmt|;
name|int
name|replacementStart
init|=
operator|-
name|left_length
decl_stmt|;
name|finishComposingText
argument_list|()
expr_stmt|;
name|QInputMethodEvent
name|event
decl_stmt|;
name|event
operator|.
name|setCommitString
argument_list|(
name|QString
argument_list|()
argument_list|,
name|replacementStart
argument_list|,
name|replacementLength
argument_list|)
expr_stmt|;
name|m_isUpdatingText
operator|=
literal|true
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|m_isUpdatingText
operator|=
literal|false
expr_stmt|;
name|updateCursorPosition
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onFinishComposingText
name|int32_t
name|QQnxInputContext
operator|::
name|onFinishComposingText
parameter_list|()
block|{
name|finishComposingText
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onGetCursorPosition
name|int32_t
name|QQnxInputContext
operator|::
name|onGetCursorPosition
parameter_list|()
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return
literal|0
return|;
name|updateCursorPosition
argument_list|()
expr_stmt|;
return|return
name|m_caretPosition
return|;
block|}
end_function
begin_function
DECL|function|onGetTextAfterCursor
name|spannable_string_t
modifier|*
name|QQnxInputContext
operator|::
name|onGetTextAfterCursor
parameter_list|(
name|int32_t
name|n
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return
name|toSpannableString
argument_list|(
literal|""
argument_list|)
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
operator||
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|m_caretPosition
operator|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
return|return
name|toSpannableString
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|m_caretPosition
argument_list|,
name|n
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|onGetTextBeforeCursor
name|spannable_string_t
modifier|*
name|QQnxInputContext
operator|::
name|onGetTextBeforeCursor
parameter_list|(
name|int32_t
name|n
parameter_list|,
name|int32_t
name|flags
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return
name|toSpannableString
argument_list|(
literal|""
argument_list|)
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
operator||
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|m_caretPosition
operator|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|n
operator|<
name|m_caretPosition
condition|)
return|return
name|toSpannableString
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|m_caretPosition
operator|-
name|n
argument_list|,
name|n
argument_list|)
argument_list|)
return|;
else|else
return|return
name|toSpannableString
argument_list|(
name|text
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|m_caretPosition
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|onSendEvent
name|int32_t
name|QQnxInputContext
operator|::
name|onSendEvent
parameter_list|(
name|event_t
modifier|*
name|event
parameter_list|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
return|return
name|processEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|onSetComposingRegion
name|int32_t
name|QQnxInputContext
operator|::
name|onSetComposingRegion
parameter_list|(
name|int32_t
name|start
parameter_list|,
name|int32_t
name|end
parameter_list|)
block|{
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return
literal|0
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
operator||
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|m_caretPosition
operator|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
name|text
expr_stmt|;
name|m_isUpdatingText
operator|=
literal|true
expr_stmt|;
comment|// Delete the current text.
name|QInputMethodEvent
name|deleteEvent
decl_stmt|;
name|deleteEvent
operator|.
name|setCommitString
argument_list|(
name|QString
argument_list|()
argument_list|,
name|start
operator|-
name|m_caretPosition
argument_list|,
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|deleteEvent
argument_list|)
expr_stmt|;
name|m_composingText
operator|=
name|text
operator|.
name|mid
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
name|m_isComposing
operator|=
literal|true
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|QTextCharFormat
name|format
decl_stmt|;
name|format
operator|.
name|setFontUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|push_back
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|TextFormat
argument_list|,
literal|0
argument_list|,
name|m_composingText
operator|.
name|length
argument_list|()
argument_list|,
name|format
argument_list|)
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|setTextEvent
argument_list|(
name|m_composingText
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|setTextEvent
argument_list|)
expr_stmt|;
name|m_isUpdatingText
operator|=
literal|false
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onSetComposingText
name|int32_t
name|QQnxInputContext
operator|::
name|onSetComposingText
parameter_list|(
name|spannable_string_t
modifier|*
name|text
parameter_list|,
name|int32_t
name|new_cursor_position
parameter_list|)
block|{
if|if
condition|(
name|text
operator|->
name|length
operator|>
literal|0
condition|)
block|{
name|updateComposition
argument_list|(
name|text
argument_list|,
name|new_cursor_position
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the composing text is empty we can simply end composition, the visual effect is the same.
comment|// However, sometimes one wants to display hint text in an empty text field and for this to work
comment|// QQuickTextEdit.inputMethodComposing has to be false if the composition string is empty.
name|m_composingText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|finishComposingText
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onIsTextSelected
name|int32_t
name|QQnxInputContext
operator|::
name|onIsTextSelected
parameter_list|(
name|int32_t
modifier|*
name|pIsSelected
parameter_list|)
block|{
operator|*
name|pIsSelected
operator|=
name|hasSelectedText
argument_list|()
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
operator|*
name|pIsSelected
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|onIsAllTextSelected
name|int32_t
name|QQnxInputContext
operator|::
name|onIsAllTextSelected
parameter_list|(
name|int32_t
modifier|*
name|pIsSelected
parameter_list|)
block|{
name|QObject
modifier|*
name|input
init|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|input
condition|)
return|return
operator|-
literal|1
return|;
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
operator||
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|input
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
operator|*
name|pIsSelected
operator|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|==
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImCurrentSelection
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
operator|*
name|pIsSelected
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|showInputPanel
name|void
name|QQnxInputContext
operator|::
name|showInputPanel
parameter_list|()
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|dispatchRequestSoftwareInputPanel
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideInputPanel
name|void
name|QQnxInputContext
operator|::
name|hideInputPanel
parameter_list|()
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|dispatchCloseSoftwareInputPanel
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isInputPanelVisible
name|bool
name|QQnxInputContext
operator|::
name|isInputPanelVisible
parameter_list|()
specifier|const
block|{
return|return
name|m_inputPanelVisible
return|;
block|}
end_function
begin_function
DECL|function|locale
name|QLocale
name|QQnxInputContext
operator|::
name|locale
parameter_list|()
specifier|const
block|{
return|return
name|m_inputPanelLocale
return|;
block|}
end_function
begin_function
DECL|function|keyboardVisibilityChanged
name|void
name|QQnxInputContext
operator|::
name|keyboardVisibilityChanged
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"visible="
operator|<<
name|visible
expr_stmt|;
if|if
condition|(
name|m_inputPanelVisible
operator|!=
name|visible
condition|)
block|{
name|m_inputPanelVisible
operator|=
name|visible
expr_stmt|;
name|emitInputPanelVisibleChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|keyboardLocaleChanged
name|void
name|QQnxInputContext
operator|::
name|keyboardLocaleChanged
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"locale="
operator|<<
name|locale
expr_stmt|;
if|if
condition|(
name|m_inputPanelLocale
operator|!=
name|locale
condition|)
block|{
name|m_inputPanelLocale
operator|=
name|locale
expr_stmt|;
name|emitLocaleChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setHighlightColor
name|void
name|QQnxInputContext
operator|::
name|setHighlightColor
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"setHighlightColor"
operator|<<
name|index
operator|<<
name|color
operator|<<
name|qGuiApp
operator|->
name|focusObject
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sInputContextInstance
condition|)
return|return;
comment|// If the focus has changed, revert all colors to the default.
if|if
condition|(
name|sInputContextInstance
operator|->
name|m_focusObject
operator|!=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
condition|)
block|{
name|QColor
name|invalidColor
decl_stmt|;
name|sInputContextInstance
operator|->
name|m_highlightColor
index|[
name|ActiveRegion
index|]
operator|=
name|sSelectedColor
expr_stmt|;
name|sInputContextInstance
operator|->
name|m_highlightColor
index|[
name|AutoCorrected
index|]
operator|=
name|invalidColor
expr_stmt|;
name|sInputContextInstance
operator|->
name|m_highlightColor
index|[
name|Reverted
index|]
operator|=
name|invalidColor
expr_stmt|;
name|sInputContextInstance
operator|->
name|m_focusObject
operator|=
name|qGuiApp
operator|->
name|focusObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<=
name|Reverted
condition|)
name|sInputContextInstance
operator|->
name|m_highlightColor
index|[
name|index
index|]
operator|=
name|color
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFocusObject
name|void
name|QQnxInputContext
operator|::
name|setFocusObject
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"input item="
operator|<<
name|object
expr_stmt|;
comment|// Ensure the colors are reset if we've a change in focus object
name|setHighlightColor
argument_list|(
operator|-
literal|1
argument_list|,
name|QColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inputMethodAccepted
argument_list|()
condition|)
block|{
if|if
condition|(
name|m_inputPanelVisible
condition|)
name|hideInputPanel
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasSession
argument_list|()
condition|)
name|dispatchFocusLossEvent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QInputMethodQueryEvent
name|query
argument_list|(
name|Qt
operator|::
name|ImHints
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendEvent
argument_list|(
name|object
argument_list|,
operator|&
name|query
argument_list|)
expr_stmt|;
name|int
name|inputHints
init|=
name|query
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|ImHints
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|dispatchFocusGainEvent
argument_list|(
name|inputHints
argument_list|)
expr_stmt|;
name|m_virtualKeyboard
operator|.
name|setInputHints
argument_list|(
name|inputHints
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_inputPanelVisible
condition|)
name|showInputPanel
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|checkSpelling
name|bool
name|QQnxInputContext
operator|::
name|checkSpelling
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|void
function_decl|(
modifier|*
name|spellCheckDone
function_decl|)
parameter_list|(
name|void
modifier|*
name|context
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|indices
parameter_list|)
parameter_list|)
block|{
name|qInputContextDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"text"
operator|<<
name|text
expr_stmt|;
if|if
condition|(
operator|!
name|imfAvailable
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|sSpellCheckSession
condition|)
name|sSpellCheckSession
operator|=
name|p_ictrl_open_session
argument_list|(
operator|&
name|ic_funcs
argument_list|)
expr_stmt|;
name|action_event_t
name|spellEvent
decl_stmt|;
name|initEvent
argument_list|(
operator|&
name|spellEvent
operator|.
name|event
argument_list|,
name|sSpellCheckSession
argument_list|,
name|EVENT_ACTION
argument_list|,
name|ACTION_CHECK_MISSPELLINGS
argument_list|,
sizeof|sizeof
argument_list|(
name|spellEvent
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|spellEvent
operator|.
name|event_data
operator|=
name|alloca
argument_list|(
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
operator|(
name|len
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|spellEvent
operator|.
name|length_data
operator|=
name|text
operator|.
name|toWCharArray
argument_list|(
cast|static_cast
argument_list|<
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|spellEvent
operator|.
name|event_data
argument_list|)
argument_list|)
operator|*
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|p_ictrl_dispatch_event
argument_list|(
cast|reinterpret_cast
argument_list|<
name|event_t
operator|*
argument_list|>
argument_list|(
operator|&
name|spellEvent
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
block|{
name|sSpellCheckQueue
operator|->
name|enqueue
argument_list|(
name|SpellCheckInfo
argument_list|(
name|context
argument_list|,
name|spellCheckDone
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
