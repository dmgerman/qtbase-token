begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2013 BlackBerry Limited. All rights reserved. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxabstractvirtualkeyboard.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QQnxAbstractVirtualKeyboard
name|QQnxAbstractVirtualKeyboard
operator|::
name|QQnxAbstractVirtualKeyboard
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_height
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_visible
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_locale
argument_list|(
name|QLocale
operator|::
name|system
argument_list|()
argument_list|)
member_init_list|,
name|m_keyboardMode
argument_list|(
name|Default
argument_list|)
member_init_list|,
name|m_enterKeyType
argument_list|(
name|DefaultReturn
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setKeyboardMode
name|void
name|QQnxAbstractVirtualKeyboard
operator|::
name|setKeyboardMode
parameter_list|(
name|KeyboardMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|m_keyboardMode
condition|)
return|return;
name|m_keyboardMode
operator|=
name|mode
expr_stmt|;
if|if
condition|(
name|m_visible
condition|)
name|applyKeyboardOptions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setEnterKeyType
name|void
name|QQnxAbstractVirtualKeyboard
operator|::
name|setEnterKeyType
parameter_list|(
name|EnterKeyType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|m_enterKeyType
condition|)
return|return;
name|m_enterKeyType
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|m_visible
condition|)
name|applyKeyboardOptions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setInputHints
name|void
name|QQnxAbstractVirtualKeyboard
operator|::
name|setInputHints
parameter_list|(
name|int
name|inputHints
parameter_list|)
block|{
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhEmailCharactersOnly
condition|)
block|{
name|setKeyboardMode
argument_list|(
name|QQnxAbstractVirtualKeyboard
operator|::
name|Email
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhDialableCharactersOnly
condition|)
block|{
name|setKeyboardMode
argument_list|(
name|QQnxAbstractVirtualKeyboard
operator|::
name|Phone
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhUrlCharactersOnly
condition|)
block|{
name|setKeyboardMode
argument_list|(
name|QQnxAbstractVirtualKeyboard
operator|::
name|Url
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhFormattedNumbersOnly
operator|||
name|inputHints
operator|&
name|Qt
operator|::
name|ImhDigitsOnly
condition|)
block|{
name|setKeyboardMode
argument_list|(
name|QQnxAbstractVirtualKeyboard
operator|::
name|Number
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhDate
operator|||
name|inputHints
operator|&
name|Qt
operator|::
name|ImhTime
condition|)
block|{
name|setKeyboardMode
argument_list|(
name|QQnxAbstractVirtualKeyboard
operator|::
name|NumPunc
argument_list|)
expr_stmt|;
comment|// Use NumPunc so that : is available.
block|}
elseif|else
if|if
condition|(
name|inputHints
operator|&
name|Qt
operator|::
name|ImhHiddenText
condition|)
block|{
name|setKeyboardMode
argument_list|(
name|QQnxAbstractVirtualKeyboard
operator|::
name|Password
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setKeyboardMode
argument_list|(
name|QQnxAbstractVirtualKeyboard
operator|::
name|Default
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setHeight
name|void
name|QQnxAbstractVirtualKeyboard
operator|::
name|setHeight
parameter_list|(
name|int
name|height
parameter_list|)
block|{
if|if
condition|(
name|height
operator|==
name|m_height
condition|)
return|return;
specifier|const
name|int
name|effectiveHeight
init|=
name|this
operator|->
name|height
argument_list|()
decl_stmt|;
name|m_height
operator|=
name|height
expr_stmt|;
if|if
condition|(
name|effectiveHeight
operator|!=
name|this
operator|->
name|height
argument_list|()
condition|)
emit|emit
name|heightChanged
argument_list|(
name|this
operator|->
name|height
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QQnxAbstractVirtualKeyboard
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|visible
operator|==
name|m_visible
condition|)
return|return;
specifier|const
name|int
name|effectiveHeight
init|=
name|height
argument_list|()
decl_stmt|;
name|m_visible
operator|=
name|visible
expr_stmt|;
emit|emit
name|visibilityChanged
argument_list|(
name|visible
argument_list|)
emit|;
if|if
condition|(
name|effectiveHeight
operator|!=
name|height
argument_list|()
condition|)
emit|emit
name|heightChanged
argument_list|(
name|height
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|setLocale
name|void
name|QQnxAbstractVirtualKeyboard
operator|::
name|setLocale
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
block|{
if|if
condition|(
name|locale
operator|==
name|m_locale
condition|)
return|return;
name|m_locale
operator|=
name|locale
expr_stmt|;
emit|emit
name|localeChanged
argument_list|(
name|locale
argument_list|)
emit|;
block|}
end_function
begin_function
name|QQnxAbstractVirtualKeyboard
operator|::
name|EnterKeyType
DECL|function|qtEnterKeyTypeToQnx
name|QQnxAbstractVirtualKeyboard
operator|::
name|qtEnterKeyTypeToQnx
parameter_list|(
name|Qt
operator|::
name|EnterKeyType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Qt
operator|::
name|EnterKeyDone
case|:
return|return
name|Done
return|;
case|case
name|Qt
operator|::
name|EnterKeyGo
case|:
return|return
name|Go
return|;
case|case
name|Qt
operator|::
name|EnterKeyNext
case|:
return|return
name|Next
return|;
case|case
name|Qt
operator|::
name|EnterKeySearch
case|:
return|return
name|Search
return|;
case|case
name|Qt
operator|::
name|EnterKeySend
case|:
return|return
name|Send
return|;
case|case
name|Qt
operator|::
name|EnterKeyDefault
case|:
case|case
name|Qt
operator|::
name|EnterKeyReturn
case|:
case|case
name|Qt
operator|::
name|EnterKeyPrevious
case|:
comment|// unsupported
return|return
name|DefaultReturn
return|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
