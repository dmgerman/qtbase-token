begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2011 - 2012 Research In Motion ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxabstractvirtualkeyboard.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QQnxAbstractVirtualKeyboard
name|QQnxAbstractVirtualKeyboard
operator|::
name|QQnxAbstractVirtualKeyboard
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_height
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_visible
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_locale
argument_list|(
name|QLocale
operator|::
name|system
argument_list|()
argument_list|)
member_init_list|,
name|m_keyboardMode
argument_list|(
name|Default
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setKeyboardMode
name|void
name|QQnxAbstractVirtualKeyboard
operator|::
name|setKeyboardMode
parameter_list|(
name|KeyboardMode
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|m_keyboardMode
condition|)
return|return;
name|m_keyboardMode
operator|=
name|mode
expr_stmt|;
name|applyKeyboardMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setHeight
name|void
name|QQnxAbstractVirtualKeyboard
operator|::
name|setHeight
parameter_list|(
name|int
name|height
parameter_list|)
block|{
if|if
condition|(
name|height
operator|==
name|m_height
condition|)
return|return;
specifier|const
name|int
name|effectiveHeight
init|=
name|this
operator|->
name|height
argument_list|()
decl_stmt|;
name|m_height
operator|=
name|height
expr_stmt|;
if|if
condition|(
name|effectiveHeight
operator|!=
name|this
operator|->
name|height
argument_list|()
condition|)
emit|emit
name|heightChanged
argument_list|(
name|this
operator|->
name|height
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QQnxAbstractVirtualKeyboard
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|visible
operator|==
name|m_visible
condition|)
return|return;
specifier|const
name|int
name|effectiveHeight
init|=
name|height
argument_list|()
decl_stmt|;
name|m_visible
operator|=
name|visible
expr_stmt|;
emit|emit
name|visibilityChanged
argument_list|(
name|visible
argument_list|)
emit|;
if|if
condition|(
name|effectiveHeight
operator|!=
name|height
argument_list|()
condition|)
emit|emit
name|heightChanged
argument_list|(
name|height
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|setLocale
name|void
name|QQnxAbstractVirtualKeyboard
operator|::
name|setLocale
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
block|{
if|if
condition|(
name|locale
operator|==
name|m_locale
condition|)
return|return;
name|m_locale
operator|=
name|locale
expr_stmt|;
emit|emit
name|localeChanged
argument_list|(
name|locale
argument_list|)
emit|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
