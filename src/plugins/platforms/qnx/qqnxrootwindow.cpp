begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2011 - 2012 Research In Motion ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxrootwindow.h"
end_include
begin_include
include|#
directive|include
file|"qqnxscreen.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QUuid>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QQNXROOTWINDOW_DEBUG
argument_list|)
end_if
begin_define
DECL|macro|qRootWindowDebug
define|#
directive|define
name|qRootWindowDebug
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qRootWindowDebug
define|#
directive|define
name|qRootWindowDebug
value|QT_NO_QDEBUG_MACRO
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_decl_stmt
DECL|variable|MAGIC_ZORDER_FOR_NO_NAV
specifier|static
specifier|const
name|int
name|MAGIC_ZORDER_FOR_NO_NAV
init|=
literal|10
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QQnxRootWindow
name|QQnxRootWindow
operator|::
name|QQnxRootWindow
parameter_list|(
specifier|const
name|QQnxScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|m_screen
argument_list|(
name|screen
argument_list|)
member_init_list|,
name|m_window
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_windowGroupName
argument_list|()
block|{
name|qRootWindowDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
comment|// Create one top-level QNX window to act as a container for child windows
comment|// since navigator only supports one application window
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|result
init|=
name|screen_create_window
argument_list|(
operator|&
name|m_window
argument_list|,
name|m_screen
operator|->
name|nativeContext
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|val
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to create window, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Move window to proper display
name|errno
operator|=
literal|0
expr_stmt|;
name|screen_display_t
name|display
init|=
name|m_screen
operator|->
name|nativeDisplay
argument_list|()
decl_stmt|;
name|result
operator|=
name|screen_set_window_property_pv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_DISPLAY
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|display
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window display, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Make sure window is above navigator but below keyboard if running as root
comment|// since navigator won't automatically set our z-order in this case
if|if
condition|(
name|getuid
argument_list|()
operator|==
literal|0
condition|)
block|{
name|errno
operator|=
literal|0
expr_stmt|;
name|val
index|[
literal|0
index|]
operator|=
name|MAGIC_ZORDER_FOR_NO_NAV
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_ZORDER
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window z-order, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Window won't be visible unless it has some buffers so make one dummy buffer that is 1x1
name|errno
operator|=
literal|0
expr_stmt|;
name|val
index|[
literal|0
index|]
operator|=
name|SCREEN_USAGE_NATIVE
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_USAGE
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window buffer usage, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|errno
operator|=
literal|0
expr_stmt|;
name|val
index|[
literal|0
index|]
operator|=
name|m_screen
operator|->
name|nativeFormat
argument_list|()
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_FORMAT
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window pixel format, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|errno
operator|=
literal|0
expr_stmt|;
name|val
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|val
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_BUFFER_SIZE
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window buffer size, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_create_window_buffers
argument_list|(
name|m_window
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQNX: failed to create window buffer, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Window is always the size of the display
name|errno
operator|=
literal|0
expr_stmt|;
name|QRect
name|geometry
init|=
name|m_screen
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|val
index|[
literal|0
index|]
operator|=
name|geometry
operator|.
name|width
argument_list|()
expr_stmt|;
name|val
index|[
literal|1
index|]
operator|=
name|geometry
operator|.
name|height
argument_list|()
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_SIZE
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window size, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Fill the window with solid black
name|errno
operator|=
literal|0
expr_stmt|;
name|val
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_COLOR
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window colour, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Make the window opaque
name|errno
operator|=
literal|0
expr_stmt|;
name|val
index|[
literal|0
index|]
operator|=
name|SCREEN_TRANSPARENCY_NONE
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_TRANSPARENCY
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window transparency, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Set the swap interval to 1
name|errno
operator|=
literal|0
expr_stmt|;
name|val
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_SWAP_INTERVAL
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window swap interval, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Set viewport size equal to window size but move outside buffer so the fill colour is used exclusively
name|errno
operator|=
literal|0
expr_stmt|;
name|val
index|[
literal|0
index|]
operator|=
name|geometry
operator|.
name|width
argument_list|()
expr_stmt|;
name|val
index|[
literal|1
index|]
operator|=
name|geometry
operator|.
name|height
argument_list|()
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_SOURCE_SIZE
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window source size, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|errno
operator|=
literal|0
expr_stmt|;
name|val
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|val
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_SOURCE_POSITION
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window source position, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|createWindowGroup
argument_list|()
expr_stmt|;
name|post
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QQnxRootWindow
name|QQnxRootWindow
operator|::
name|~
name|QQnxRootWindow
parameter_list|()
block|{
comment|// Cleanup top-level QNX window
name|screen_destroy_window
argument_list|(
name|m_window
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|post
name|void
name|QQnxRootWindow
operator|::
name|post
parameter_list|()
specifier|const
block|{
name|qRootWindowDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
name|errno
operator|=
literal|0
expr_stmt|;
name|screen_buffer_t
name|buffer
decl_stmt|;
name|int
name|result
init|=
name|screen_get_window_property_pv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_RENDER_BUFFERS
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to query window buffer, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|dirtyRect
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|result
operator|=
name|screen_post_window
argument_list|(
name|m_window
argument_list|,
name|buffer
argument_list|,
literal|1
argument_list|,
name|dirtyRect
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQNX: failed to post window buffer, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|flush
name|void
name|QQnxRootWindow
operator|::
name|flush
parameter_list|()
specifier|const
block|{
name|qRootWindowDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
expr_stmt|;
comment|// Force immediate display update
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|result
init|=
name|screen_flush_context
argument_list|(
name|m_screen
operator|->
name|nativeContext
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to flush context, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setRotation
name|void
name|QQnxRootWindow
operator|::
name|setRotation
parameter_list|(
name|int
name|rotation
parameter_list|)
block|{
name|qRootWindowDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"angle ="
operator|<<
name|rotation
expr_stmt|;
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|result
init|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_ROTATION
argument_list|,
operator|&
name|rotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window rotation, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resize
name|void
name|QQnxRootWindow
operator|::
name|resize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|val
index|[]
init|=
block|{
name|size
operator|.
name|width
argument_list|()
block|,
name|size
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
name|int
name|result
init|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_SIZE
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window size, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_set_window_property_iv
argument_list|(
name|m_window
argument_list|,
name|SCREEN_PROPERTY_SOURCE_SIZE
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to set window source size, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: display will update when child windows relayout and repaint
block|}
end_function
begin_function
DECL|function|createWindowGroup
name|void
name|QQnxRootWindow
operator|::
name|createWindowGroup
parameter_list|()
block|{
comment|// Generate a random window group name
name|m_windowGroupName
operator|=
name|QUuid
operator|::
name|createUuid
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
comment|// Create window group so child windows can be parented by container window
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|result
init|=
name|screen_create_window_group
argument_list|(
name|m_window
argument_list|,
name|m_windowGroupName
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|qFatal
argument_list|(
literal|"QQnxRootWindow: failed to create app window group, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
block|}
end_function
end_unit
