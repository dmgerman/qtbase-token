begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2011 - 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QBBSCREEN_H
end_ifndef
begin_define
DECL|macro|QBBSCREEN_H
define|#
directive|define
name|QBBSCREEN_H
end_define
begin_include
include|#
directive|include
file|<QtGui/QPlatformScreen>
end_include
begin_include
include|#
directive|include
file|"qqnxrootwindow.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedPointer>
end_include
begin_include
include|#
directive|include
file|<screen/screen.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QQnxWindow
name|class
name|QQnxWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QQnxScreen
range|:
name|public
name|QPlatformScreen
block|{
name|public
operator|:
specifier|static
name|QList
operator|<
name|QPlatformScreen
operator|*
operator|>
name|screens
argument_list|()
block|{
return|return
name|ms_screens
return|;
block|}
specifier|static
name|void
name|createDisplays
argument_list|(
argument|screen_context_t context
argument_list|)
block|;
specifier|static
name|void
name|destroyDisplays
argument_list|()
block|;
specifier|static
name|QQnxScreen
operator|*
name|primaryDisplay
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|QQnxScreen
operator|*
operator|>
operator|(
name|ms_screens
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
specifier|static
name|int
name|defaultDepth
argument_list|()
block|;
name|virtual
name|QRect
name|geometry
argument_list|()
specifier|const
block|{
return|return
name|m_currentGeometry
return|;
block|}
name|virtual
name|QRect
name|availableGeometry
argument_list|()
specifier|const
block|;
name|virtual
name|int
name|depth
argument_list|()
specifier|const
block|{
return|return
name|defaultDepth
argument_list|()
return|;
block|}
name|virtual
name|QImage
operator|::
name|Format
name|format
argument_list|()
specifier|const
block|{
return|return
operator|(
name|depth
argument_list|()
operator|==
literal|32
operator|)
operator|?
name|QImage
operator|::
name|Format_RGB32
operator|:
name|QImage
operator|::
name|Format_RGB16
return|;
block|}
name|virtual
name|QSizeF
name|physicalSize
argument_list|()
specifier|const
block|{
return|return
name|m_currentPhysicalSize
return|;
block|}
name|bool
name|isPrimaryScreen
argument_list|()
specifier|const
block|{
return|return
name|m_primaryScreen
return|;
block|}
name|int
name|rotation
argument_list|()
specifier|const
block|{
return|return
name|m_currentRotation
return|;
block|}
name|void
name|setRotation
argument_list|(
argument|int rotation
argument_list|)
block|;
name|int
name|nativeFormat
argument_list|()
specifier|const
block|{
return|return
operator|(
name|depth
argument_list|()
operator|==
literal|32
operator|)
condition|?
name|SCREEN_FORMAT_RGBA8888
else|:
name|SCREEN_FORMAT_RGB565
return|;
block|}
name|screen_display_t
name|nativeDisplay
argument_list|()
specifier|const
block|{
return|return
name|m_display
return|;
block|}
name|screen_context_t
name|nativeContext
argument_list|()
specifier|const
block|{
return|return
name|m_screenContext
return|;
block|}
specifier|const
name|char
operator|*
name|windowGroupName
argument_list|()
specifier|const
block|{
return|return
name|m_rootWindow
operator|->
name|groupName
argument_list|()
operator|.
name|constData
argument_list|()
return|;
block|}
comment|/* Window hierarchy management */
specifier|static
name|void
name|addWindow
argument_list|(
name|QQnxWindow
operator|*
name|child
argument_list|)
block|;
specifier|static
name|void
name|removeWindow
argument_list|(
name|QQnxWindow
operator|*
name|child
argument_list|)
block|;
specifier|static
name|void
name|raiseWindow
argument_list|(
name|QQnxWindow
operator|*
name|window
argument_list|)
block|;
specifier|static
name|void
name|lowerWindow
argument_list|(
name|QQnxWindow
operator|*
name|window
argument_list|)
block|;
specifier|static
name|void
name|updateHierarchy
argument_list|()
block|;
name|void
name|onWindowPost
argument_list|(
name|QQnxWindow
operator|*
name|window
argument_list|)
block|;
name|QSharedPointer
operator|<
name|QQnxRootWindow
operator|>
name|rootWindow
argument_list|()
specifier|const
block|{
return|return
name|m_rootWindow
return|;
block|}
name|private
operator|:
name|QQnxScreen
argument_list|(
argument|screen_context_t context
argument_list|,
argument|screen_display_t display
argument_list|,
argument|bool primaryScreen
argument_list|)
block|;
name|virtual
operator|~
name|QQnxScreen
argument_list|()
block|;
specifier|static
name|bool
name|orthogonal
argument_list|(
argument|int rotation1
argument_list|,
argument|int rotation2
argument_list|)
block|;
name|screen_context_t
name|m_screenContext
block|;
name|screen_display_t
name|m_display
block|;
name|QSharedPointer
operator|<
name|QQnxRootWindow
operator|>
name|m_rootWindow
block|;
name|bool
name|m_primaryScreen
block|;
name|bool
name|m_posted
block|;
name|bool
name|m_usingOpenGL
block|;
name|int
name|m_initialRotation
block|;
name|int
name|m_currentRotation
block|;
name|QSize
name|m_initialPhysicalSize
block|;
name|QSize
name|m_currentPhysicalSize
block|;
name|QRect
name|m_initialGeometry
block|;
name|QRect
name|m_currentGeometry
block|;
name|QPlatformOpenGLContext
operator|*
name|m_platformContext
block|;
specifier|static
name|QList
operator|<
name|QPlatformScreen
operator|*
operator|>
name|ms_screens
block|;
specifier|static
name|QList
operator|<
name|QQnxWindow
operator|*
operator|>
name|ms_childWindows
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QBBSCREEN_H
end_comment
end_unit
