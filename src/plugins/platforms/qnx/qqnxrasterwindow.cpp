begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2013 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qqnxrasterwindow.h"
end_include
begin_include
include|#
directive|include
file|"qqnxscreen.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QQNXRASTERWINDOW_DEBUG
argument_list|)
end_if
begin_define
DECL|macro|qRasterWindowDebug
define|#
directive|define
name|qRasterWindowDebug
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qRasterWindowDebug
define|#
directive|define
name|qRasterWindowDebug
value|QT_NO_QDEBUG_MACRO
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QQnxRasterWindow
name|QQnxRasterWindow
operator|::
name|QQnxRasterWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|screen_context_t
name|context
parameter_list|,
name|bool
name|needRootWindow
parameter_list|)
member_init_list|:
name|QQnxWindow
argument_list|(
name|window
argument_list|,
name|context
argument_list|,
name|needRootWindow
argument_list|)
member_init_list|,
name|m_currentBufferIndex
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_previousBufferIndex
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|initWindow
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|post
name|void
name|QQnxRasterWindow
operator|::
name|post
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|dirty
parameter_list|)
block|{
comment|// How double-buffering works
comment|// --------------------------
comment|//
comment|// The are two buffers, the previous one and the current one.
comment|// The previous buffer always contains the complete, full image of the whole window when it
comment|// was last posted.
comment|// The current buffer starts with the complete, full image of the second to last posting
comment|// of the window.
comment|//
comment|// During painting, Qt paints on the current buffer. Thus, when Qt has finished painting, the
comment|// current buffer contains the second to last image plus the newly painted regions.
comment|// Since the second to last image is too old, we copy over the image from the previous buffer, but
comment|// only for those regions that Qt didn't paint (because that would overwrite what Qt has just
comment|// painted). This is the copyPreviousToCurrent() call below.
comment|//
comment|// After the call to copyPreviousToCurrent(), the current buffer contains the complete, full image of the
comment|// whole window in its current state, and we call screen_post_window() to make the new buffer
comment|// available to libscreen (called "posting"). There, only the regions that Qt painted on are
comment|// posted, as nothing else has changed.
comment|//
comment|// After that, the previous and the current buffers are swapped, and the whole cycle starts anew.
comment|// Check if render buffer exists and something was rendered
if|if
condition|(
name|m_currentBufferIndex
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|dirty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qRasterWindowDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
name|QQnxBuffer
modifier|&
name|currentBuffer
init|=
name|m_buffers
index|[
name|m_currentBufferIndex
index|]
decl_stmt|;
comment|// Copy unmodified region from old render buffer to new render buffer;
comment|// required to allow partial updates
name|QRegion
name|preserve
init|=
name|m_previousDirty
operator|-
name|dirty
operator|-
name|m_scrolled
decl_stmt|;
name|blitPreviousToCurrent
argument_list|(
name|preserve
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Calculate region that changed
name|QRegion
name|modified
init|=
name|preserve
operator|+
name|dirty
operator|+
name|m_scrolled
decl_stmt|;
name|QRect
name|rect
init|=
name|modified
operator|.
name|boundingRect
argument_list|()
decl_stmt|;
name|int
name|dirtyRect
index|[
literal|4
index|]
init|=
block|{
name|rect
operator|.
name|x
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
block|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
comment|// Update the display with contents of render buffer
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|result
init|=
name|screen_post_window
argument_list|(
name|nativeHandle
argument_list|()
argument_list|,
name|currentBuffer
operator|.
name|nativeBuffer
argument_list|()
argument_list|,
literal|1
argument_list|,
name|dirtyRect
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to post window buffer, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
comment|// Advance to next nender buffer
name|m_previousBufferIndex
operator|=
name|m_currentBufferIndex
operator|++
expr_stmt|;
if|if
condition|(
name|m_currentBufferIndex
operator|>=
name|MAX_BUFFER_COUNT
condition|)
name|m_currentBufferIndex
operator|=
literal|0
expr_stmt|;
comment|// Save modified region and clear scrolled region
name|m_previousDirty
operator|=
name|dirty
expr_stmt|;
name|m_scrolled
operator|=
name|QRegion
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_cover
condition|)
name|m_cover
operator|->
name|updateCover
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|scroll
name|void
name|QQnxRasterWindow
operator|::
name|scroll
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
name|bool
name|flush
parameter_list|)
block|{
name|qRasterWindowDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
name|blitPreviousToCurrent
argument_list|(
name|region
argument_list|,
name|dx
argument_list|,
name|dy
argument_list|,
name|flush
argument_list|)
expr_stmt|;
name|m_scrolled
operator|+=
name|region
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderBuffer
name|QQnxBuffer
modifier|&
name|QQnxRasterWindow
operator|::
name|renderBuffer
parameter_list|()
block|{
name|qRasterWindowDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
comment|// Check if render buffer is invalid
if|if
condition|(
name|m_currentBufferIndex
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Get all buffers available for rendering
name|errno
operator|=
literal|0
expr_stmt|;
name|screen_buffer_t
name|buffers
index|[
name|MAX_BUFFER_COUNT
index|]
decl_stmt|;
name|int
name|result
init|=
name|screen_get_window_property_pv
argument_list|(
name|nativeHandle
argument_list|()
argument_list|,
name|SCREEN_PROPERTY_RENDER_BUFFERS
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|buffers
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
name|qFatal
argument_list|(
literal|"QQnxRasterWindow: failed to query window buffers, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
comment|// Wrap each buffer and clear
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_BUFFER_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|m_buffers
index|[
name|i
index|]
operator|=
name|QQnxBuffer
argument_list|(
name|buffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Clear Buffer
name|errno
operator|=
literal|0
expr_stmt|;
name|int
name|bg
index|[]
init|=
block|{
name|SCREEN_BLIT_COLOR
block|,
literal|0x00000000
block|,
name|SCREEN_BLIT_END
block|}
decl_stmt|;
name|result
operator|=
name|screen_fill
argument_list|(
name|screen
argument_list|()
operator|->
name|nativeContext
argument_list|()
argument_list|,
name|buffers
index|[
name|i
index|]
argument_list|,
name|bg
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to clear window buffer, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
name|errno
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|screen_flush_blits
argument_list|(
name|screen
argument_list|()
operator|->
name|nativeContext
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to flush blits, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
comment|// Use the first available render buffer
name|m_currentBufferIndex
operator|=
literal|0
expr_stmt|;
name|m_previousBufferIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|m_buffers
index|[
name|m_currentBufferIndex
index|]
return|;
block|}
end_function
begin_function
DECL|function|adjustBufferSize
name|void
name|QQnxRasterWindow
operator|::
name|adjustBufferSize
parameter_list|()
block|{
comment|// When having a raster window we don't need any buffers, since
comment|// Qt will draw to the parent TLW backing store.
specifier|const
name|QSize
name|windowSize
init|=
name|m_parentWindow
condition|?
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
else|:
name|window
argument_list|()
operator|->
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|windowSize
operator|!=
name|bufferSize
argument_list|()
condition|)
name|setBufferSize
argument_list|(
name|windowSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixelFormat
name|int
name|QQnxRasterWindow
operator|::
name|pixelFormat
parameter_list|()
specifier|const
block|{
return|return
name|screen
argument_list|()
operator|->
name|nativeFormat
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|resetBuffers
name|void
name|QQnxRasterWindow
operator|::
name|resetBuffers
parameter_list|()
block|{
comment|// Buffers were destroyed; reacquire them
name|m_currentBufferIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|m_previousDirty
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|m_scrolled
operator|=
name|QRegion
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blitPreviousToCurrent
name|void
name|QQnxRasterWindow
operator|::
name|blitPreviousToCurrent
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|,
name|bool
name|flush
parameter_list|)
block|{
name|qRasterWindowDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"window ="
operator|<<
name|window
argument_list|()
expr_stmt|;
comment|// Abort if previous buffer is invalid or if nothing to copy
if|if
condition|(
name|m_previousBufferIndex
operator|==
operator|-
literal|1
operator|||
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QQnxBuffer
modifier|&
name|currentBuffer
init|=
name|m_buffers
index|[
name|m_currentBufferIndex
index|]
decl_stmt|;
name|QQnxBuffer
modifier|&
name|previousBuffer
init|=
name|m_buffers
index|[
name|m_previousBufferIndex
index|]
decl_stmt|;
comment|// Break down region into non-overlapping rectangles
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|rects
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// Clip rectangle to bounds of target
specifier|const
name|QRect
name|rect
init|=
name|rects
index|[
name|i
index|]
operator|.
name|intersected
argument_list|(
name|currentBuffer
operator|.
name|rect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
comment|// Setup blit operation
name|int
name|attribs
index|[]
init|=
block|{
name|SCREEN_BLIT_SOURCE_X
block|,
name|rect
operator|.
name|x
argument_list|()
block|,
name|SCREEN_BLIT_SOURCE_Y
block|,
name|rect
operator|.
name|y
argument_list|()
block|,
name|SCREEN_BLIT_SOURCE_WIDTH
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|SCREEN_BLIT_SOURCE_HEIGHT
block|,
name|rect
operator|.
name|height
argument_list|()
block|,
name|SCREEN_BLIT_DESTINATION_X
block|,
name|rect
operator|.
name|x
argument_list|()
operator|+
name|dx
block|,
name|SCREEN_BLIT_DESTINATION_Y
block|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|dy
block|,
name|SCREEN_BLIT_DESTINATION_WIDTH
block|,
name|rect
operator|.
name|width
argument_list|()
block|,
name|SCREEN_BLIT_DESTINATION_HEIGHT
block|,
name|rect
operator|.
name|height
argument_list|()
block|,
name|SCREEN_BLIT_END
block|}
decl_stmt|;
comment|// Queue blit operation
name|errno
operator|=
literal|0
expr_stmt|;
specifier|const
name|int
name|result
init|=
name|screen_blit
argument_list|(
name|m_screenContext
argument_list|,
name|currentBuffer
operator|.
name|nativeBuffer
argument_list|()
argument_list|,
name|previousBuffer
operator|.
name|nativeBuffer
argument_list|()
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to blit buffers, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
block|}
comment|// Check if flush requested
if|if
condition|(
name|flush
condition|)
block|{
comment|// Wait for all blits to complete
name|errno
operator|=
literal|0
expr_stmt|;
specifier|const
name|int
name|result
init|=
name|screen_flush_blits
argument_list|(
name|m_screenContext
argument_list|,
name|SCREEN_WAIT_IDLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
name|qFatal
argument_list|(
literal|"QQnxWindow: failed to flush blits, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
comment|// Buffer was modified outside the CPU
name|currentBuffer
operator|.
name|invalidateInCache
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
