begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QTcpSocket>
end_include
begin_include
include|#
directive|include
file|<arpa/inet.h>
end_include
begin_include
include|#
directive|include
file|<QBitmap>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|"qvnccursor.h"
end_include
begin_include
include|#
directive|include
file|"qvncserver.h"
end_include
begin_include
include|#
directive|include
file|"qvncintegration.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QVNCCursor
name|QVNCCursor
operator|::
name|QVNCCursor
parameter_list|(
name|QVNCServer
modifier|*
name|srvr
parameter_list|,
name|QVNCScreen
modifier|*
name|scr
parameter_list|)
member_init_list|:
name|QPlatformSoftwareCursor
argument_list|(
name|scr
argument_list|)
member_init_list|,
name|useVncCursor
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|server
argument_list|(
name|srvr
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|changeCursor
name|void
name|QVNCCursor
operator|::
name|changeCursor
parameter_list|(
name|QCursor
modifier|*
name|widgetCursor
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QPlatformSoftwareCursor
operator|::
name|changeCursor
argument_list|(
name|widgetCursor
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|useVncCursor
condition|)
block|{
name|server
operator|->
name|setDirtyCursor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDirty
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setCursorMode
name|void
name|QVNCCursor
operator|::
name|setCursorMode
parameter_list|(
name|bool
name|vnc
parameter_list|)
block|{
if|if
condition|(
name|vnc
condition|)
block|{
name|setDirty
argument_list|()
expr_stmt|;
name|server
operator|->
name|setDirtyCursor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|server
operator|->
name|setDirtyCursor
argument_list|()
expr_stmt|;
block|}
name|useVncCursor
operator|=
name|vnc
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawCursor
name|QRect
name|QVNCCursor
operator|::
name|drawCursor
parameter_list|(
name|QPainter
modifier|&
name|painter
parameter_list|)
block|{
if|if
condition|(
name|useVncCursor
condition|)
return|return
name|QRect
argument_list|()
return|;
return|return
name|QPlatformSoftwareCursor
operator|::
name|drawCursor
argument_list|(
name|painter
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|clearClientCursor
name|void
name|QVNCCursor
operator|::
name|clearClientCursor
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|server
operator|->
name|clientSocket
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|socket
condition|)
block|{
return|return;
block|}
comment|// FramebufferUpdate header
block|{
specifier|const
name|quint16
name|tmp
index|[
literal|6
index|]
init|=
block|{
name|htons
argument_list|(
literal|0
argument_list|)
block|,
name|htons
argument_list|(
literal|1
argument_list|)
block|,
name|htons
argument_list|(
literal|0
argument_list|)
block|,
name|htons
argument_list|(
literal|0
argument_list|)
block|,
name|htons
argument_list|(
literal|0
argument_list|)
block|,
name|htons
argument_list|(
literal|0
argument_list|)
block|}
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|tmp
argument_list|,
sizeof|sizeof
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|quint32
name|encoding
init|=
name|htonl
argument_list|(
operator|-
literal|239
argument_list|)
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|(
operator|&
name|encoding
operator|)
argument_list|,
sizeof|sizeof
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sendClientCursor
name|void
name|QVNCCursor
operator|::
name|sendClientCursor
parameter_list|()
block|{
if|if
condition|(
name|useVncCursor
operator|==
literal|false
condition|)
block|{
name|clearClientCursor
argument_list|()
expr_stmt|;
return|return;
block|}
name|QImage
modifier|*
name|image
init|=
name|graphic
operator|->
name|image
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|->
name|isNull
argument_list|()
condition|)
return|return;
name|QTcpSocket
modifier|*
name|socket
init|=
name|server
operator|->
name|clientSocket
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|socket
condition|)
block|{
return|return;
block|}
comment|// FramebufferUpdate header
block|{
specifier|const
name|quint16
name|tmp
index|[
literal|6
index|]
init|=
block|{
name|htons
argument_list|(
literal|0
argument_list|)
block|,
name|htons
argument_list|(
literal|1
argument_list|)
block|,
name|htons
argument_list|(
name|graphic
operator|->
name|hotspot
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
block|,
name|htons
argument_list|(
name|graphic
operator|->
name|hotspot
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
block|,
name|htons
argument_list|(
name|image
operator|->
name|width
argument_list|()
argument_list|)
block|,
name|htons
argument_list|(
argument|image->height()
argument_list|)
block|}
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
name|tmp
argument_list|,
sizeof|sizeof
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|quint32
name|encoding
init|=
name|htonl
argument_list|(
operator|-
literal|239
argument_list|)
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|(
operator|&
name|encoding
operator|)
argument_list|,
sizeof|sizeof
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// write pixels
comment|//Q_ASSERT(cursor->hasAlphaChannel());
specifier|const
name|QImage
name|img
init|=
name|image
operator|->
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
specifier|const
name|int
name|n
init|=
name|server
operator|->
name|clientBytesPerPixel
argument_list|()
operator|*
name|img
operator|.
name|width
argument_list|()
decl_stmt|;
name|char
modifier|*
name|buffer
init|=
operator|new
name|char
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|img
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|server
operator|->
name|convertPixels
argument_list|(
name|buffer
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|img
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|buffer
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|buffer
expr_stmt|;
comment|// write mask
specifier|const
name|QImage
name|bitmap
init|=
name|image
operator|->
name|createAlphaMask
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Mono
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|bitmap
operator|.
name|depth
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|bitmap
operator|.
name|size
argument_list|()
operator|==
name|img
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|width
init|=
operator|(
name|bitmap
operator|.
name|width
argument_list|()
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bitmap
operator|.
name|height
argument_list|()
condition|;
operator|++
name|i
control|)
name|socket
operator|->
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|bitmap
operator|.
name|scanLine
argument_list|(
name|i
argument_list|)
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
