begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsdirect2dcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dintegration.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dbackingstore.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dplatformpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dnativeinterface.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dwindow.h"
end_include
begin_include
include|#
directive|include
file|"qwindowscontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsguieventdispatcher.h"
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpa/qwindowsysteminterface.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QWindowsDirect2DEventDispatcher
class|class
name|QWindowsDirect2DEventDispatcher
super|:
specifier|public
name|QWindowsGuiEventDispatcher
block|{
public|public:
DECL|function|QWindowsDirect2DEventDispatcher
name|QWindowsDirect2DEventDispatcher
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWindowsGuiEventDispatcher
argument_list|(
name|parent
argument_list|)
block|{
name|uninstallMessageHook
argument_list|()
expr_stmt|;
comment|// ### Workaround for QTBUG-42428
block|}
block|}
class|;
end_class
begin_class
DECL|class|QWindowsDirect2DIntegrationPrivate
class|class
name|QWindowsDirect2DIntegrationPrivate
block|{
public|public:
DECL|member|m_nativeInterface
name|QWindowsDirect2DNativeInterface
name|m_nativeInterface
decl_stmt|;
DECL|member|m_d2dContext
name|QWindowsDirect2DContext
name|m_d2dContext
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|Direct2DVersion
class|class
name|Direct2DVersion
block|{
private|private:
DECL|function|Direct2DVersion
name|Direct2DVersion
parameter_list|()
member_init_list|:
name|partOne
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|partTwo
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|partThree
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|partFour
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|Direct2DVersion
name|Direct2DVersion
parameter_list|(
name|int
name|one
parameter_list|,
name|int
name|two
parameter_list|,
name|int
name|three
parameter_list|,
name|int
name|four
parameter_list|)
member_init_list|:
name|partOne
argument_list|(
name|one
argument_list|)
member_init_list|,
name|partTwo
argument_list|(
name|two
argument_list|)
member_init_list|,
name|partThree
argument_list|(
name|three
argument_list|)
member_init_list|,
name|partFour
argument_list|(
name|four
argument_list|)
block|{}
public|public:
comment|// 6.2.9200.16492 corresponds to Direct2D 1.1 on Windows 7 SP1 with Platform Update
enum|enum
block|{
DECL|enumerator|D2DMinVersionPart1
name|D2DMinVersionPart1
init|=
literal|6
block|,
DECL|enumerator|D2DMinVersionPart2
name|D2DMinVersionPart2
init|=
literal|2
block|,
DECL|enumerator|D2DMinVersionPart3
name|D2DMinVersionPart3
init|=
literal|9200
block|,
DECL|enumerator|D2DMinVersionPart4
name|D2DMinVersionPart4
init|=
literal|16492
block|}
enum|;
DECL|function|systemVersion
specifier|static
name|Direct2DVersion
name|systemVersion
parameter_list|()
block|{
specifier|static
specifier|const
name|int
name|bufSize
init|=
literal|512
decl_stmt|;
name|TCHAR
name|filename
index|[
name|bufSize
index|]
decl_stmt|;
name|UINT
name|i
init|=
name|GetSystemDirectory
argument_list|(
name|filename
argument_list|,
name|bufSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|i
operator|<
name|bufSize
condition|)
block|{
if|if
condition|(
name|_tcscat_s
argument_list|(
name|filename
argument_list|,
name|bufSize
argument_list|,
name|__TEXT
argument_list|(
literal|"\\d2d1.dll"
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|DWORD
name|versionInfoSize
init|=
name|GetFileVersionInfoSize
argument_list|(
name|filename
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionInfoSize
condition|)
block|{
name|QVector
argument_list|<
name|BYTE
argument_list|>
name|info
argument_list|(
name|versionInfoSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetFileVersionInfo
argument_list|(
name|filename
argument_list|,
name|NULL
argument_list|,
name|versionInfoSize
argument_list|,
name|info
operator|.
name|data
argument_list|()
argument_list|)
condition|)
block|{
name|UINT
name|size
decl_stmt|;
name|DWORD
modifier|*
name|fi
decl_stmt|;
if|if
condition|(
name|VerQueryValue
argument_list|(
name|info
operator|.
name|constData
argument_list|()
argument_list|,
name|__TEXT
argument_list|(
literal|"\\"
argument_list|)
argument_list|,
operator|(
name|LPVOID
operator|*
operator|)
operator|&
name|fi
argument_list|,
operator|&
name|size
argument_list|)
operator|&&
name|size
condition|)
block|{
name|VS_FIXEDFILEINFO
modifier|*
name|verInfo
init|=
operator|(
name|VS_FIXEDFILEINFO
operator|*
operator|)
name|fi
decl_stmt|;
return|return
name|Direct2DVersion
argument_list|(
name|HIWORD
argument_list|(
name|verInfo
operator|->
name|dwFileVersionMS
argument_list|)
argument_list|,
name|LOWORD
argument_list|(
name|verInfo
operator|->
name|dwFileVersionMS
argument_list|)
argument_list|,
name|HIWORD
argument_list|(
name|verInfo
operator|->
name|dwFileVersionLS
argument_list|)
argument_list|,
name|LOWORD
argument_list|(
name|verInfo
operator|->
name|dwFileVersionLS
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
return|return
name|Direct2DVersion
argument_list|()
return|;
block|}
DECL|function|minimumVersion
specifier|static
name|Direct2DVersion
name|minimumVersion
parameter_list|()
block|{
return|return
name|Direct2DVersion
argument_list|(
name|D2DMinVersionPart1
argument_list|,
name|D2DMinVersionPart2
argument_list|,
name|D2DMinVersionPart3
argument_list|,
name|D2DMinVersionPart4
argument_list|)
return|;
block|}
DECL|function|isValid
name|bool
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|partOne
operator|||
name|partTwo
operator|||
name|partThree
operator|||
name|partFour
return|;
block|}
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|Direct2DVersion
modifier|&
name|other
parameter_list|)
block|{
name|int
name|c
init|=
name|cmp
argument_list|(
name|partOne
argument_list|,
name|other
operator|.
name|partOne
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
return|return
literal|true
return|;
name|c
operator|=
name|cmp
argument_list|(
name|partTwo
argument_list|,
name|other
operator|.
name|partTwo
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|>
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
return|return
literal|true
return|;
name|c
operator|=
name|cmp
argument_list|(
name|partThree
argument_list|,
name|other
operator|.
name|partThree
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|>
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
return|return
literal|true
return|;
name|c
operator|=
name|cmp
argument_list|(
name|partFour
argument_list|,
name|other
operator|.
name|partFour
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|>
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|function|cmp
specifier|static
name|Q_DECL_CONSTEXPR
name|int
name|cmp
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
name|a
operator|-
name|b
return|;
block|}
DECL|member|partOne
DECL|member|partTwo
DECL|member|partThree
DECL|member|partFour
name|int
name|partOne
decl_stmt|,
name|partTwo
decl_stmt|,
name|partThree
decl_stmt|,
name|partFour
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|create
name|QWindowsDirect2DIntegration
modifier|*
name|QWindowsDirect2DIntegration
operator|::
name|create
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paramList
parameter_list|)
block|{
name|Direct2DVersion
name|systemVersion
init|=
name|Direct2DVersion
operator|::
name|systemVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|systemVersion
operator|.
name|isValid
argument_list|()
operator|&&
name|systemVersion
operator|<
name|Direct2DVersion
operator|::
name|minimumVersion
argument_list|()
condition|)
block|{
name|QString
name|msg
init|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QWindowsDirect2DIntegration"
argument_list|,
literal|"Qt cannot load the direct2d platform plugin because "
expr|\
literal|"the Direct2D version on this system is too old. The "
expr|\
literal|"minimum system requirement for this platform plugin "
expr|\
literal|"is Windows 7 SP1 with Platform Update.\n\n"
expr|\
literal|"The minimum Direct2D version required is %1.%2.%3.%4. "
expr|\
literal|"The Direct2D version on this system is %5.%6.%7.%8."
argument_list|)
decl_stmt|;
name|msg
operator|=
name|msg
operator|.
name|arg
argument_list|(
name|Direct2DVersion
operator|::
name|D2DMinVersionPart1
argument_list|)
operator|.
name|arg
argument_list|(
name|Direct2DVersion
operator|::
name|D2DMinVersionPart2
argument_list|)
operator|.
name|arg
argument_list|(
name|Direct2DVersion
operator|::
name|D2DMinVersionPart3
argument_list|)
operator|.
name|arg
argument_list|(
name|Direct2DVersion
operator|::
name|D2DMinVersionPart4
argument_list|)
operator|.
name|arg
argument_list|(
name|systemVersion
operator|.
name|partOne
argument_list|)
operator|.
name|arg
argument_list|(
name|systemVersion
operator|.
name|partTwo
argument_list|)
operator|.
name|arg
argument_list|(
name|systemVersion
operator|.
name|partThree
argument_list|)
operator|.
name|arg
argument_list|(
name|systemVersion
operator|.
name|partFour
argument_list|)
expr_stmt|;
name|QString
name|caption
init|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QWindowsDirect2DIntegration"
argument_list|,
literal|"Cannot load direct2d platform plugin"
argument_list|)
decl_stmt|;
name|MessageBoxW
argument_list|(
name|NULL
argument_list|,
name|msg
operator|.
name|toStdWString
argument_list|()
operator|.
name|c_str
argument_list|()
argument_list|,
name|caption
operator|.
name|toStdWString
argument_list|()
operator|.
name|c_str
argument_list|()
argument_list|,
name|MB_OK
operator||
name|MB_ICONERROR
argument_list|)
expr_stmt|;
return|return
name|Q_NULLPTR
return|;
block|}
name|QWindowsDirect2DIntegration
modifier|*
name|integration
init|=
operator|new
name|QWindowsDirect2DIntegration
argument_list|(
name|paramList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|integration
operator|->
name|init
argument_list|()
condition|)
block|{
operator|delete
name|integration
expr_stmt|;
name|integration
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|integration
return|;
block|}
end_function
begin_destructor
DECL|function|~QWindowsDirect2DIntegration
name|QWindowsDirect2DIntegration
operator|::
name|~
name|QWindowsDirect2DIntegration
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|instance
name|QWindowsDirect2DIntegration
modifier|*
name|QWindowsDirect2DIntegration
operator|::
name|instance
parameter_list|()
block|{
return|return
cast|static_cast
argument_list|<
name|QWindowsDirect2DIntegration
operator|*
argument_list|>
argument_list|(
name|QWindowsIntegration
operator|::
name|instance
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createPlatformWindow
name|QPlatformWindow
modifier|*
name|QWindowsDirect2DIntegration
operator|::
name|createPlatformWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
specifier|const
block|{
name|QWindowsWindowData
name|data
init|=
name|createWindowData
argument_list|(
name|window
argument_list|)
decl_stmt|;
return|return
name|data
operator|.
name|hwnd
condition|?
operator|new
name|QWindowsDirect2DWindow
argument_list|(
name|window
argument_list|,
name|data
argument_list|)
else|:
name|Q_NULLPTR
return|;
block|}
end_function
begin_function
DECL|function|nativeInterface
name|QPlatformNativeInterface
modifier|*
name|QWindowsDirect2DIntegration
operator|::
name|nativeInterface
parameter_list|()
specifier|const
block|{
return|return
operator|&
name|d
operator|->
name|m_nativeInterface
return|;
block|}
end_function
begin_function
DECL|function|createPlatformPixmap
name|QPlatformPixmap
modifier|*
name|QWindowsDirect2DIntegration
operator|::
name|createPlatformPixmap
parameter_list|(
name|QPlatformPixmap
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QPlatformPixmap
operator|::
name|BitmapType
case|:
return|return
operator|new
name|QRasterPlatformPixmap
argument_list|(
name|type
argument_list|)
return|;
break|break;
default|default:
return|return
operator|new
name|QWindowsDirect2DPlatformPixmap
argument_list|(
name|type
argument_list|)
return|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|createPlatformBackingStore
name|QPlatformBackingStore
modifier|*
name|QWindowsDirect2DIntegration
operator|::
name|createPlatformBackingStore
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QWindowsDirect2DBackingStore
argument_list|(
name|window
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createEventDispatcher
name|QAbstractEventDispatcher
modifier|*
name|QWindowsDirect2DIntegration
operator|::
name|createEventDispatcher
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QWindowsDirect2DEventDispatcher
return|;
block|}
end_function
begin_function
DECL|function|direct2DContext
name|QWindowsDirect2DContext
modifier|*
name|QWindowsDirect2DIntegration
operator|::
name|direct2DContext
parameter_list|()
specifier|const
block|{
return|return
operator|&
name|d
operator|->
name|m_d2dContext
return|;
block|}
end_function
begin_constructor
DECL|function|QWindowsDirect2DIntegration
name|QWindowsDirect2DIntegration
operator|::
name|QWindowsDirect2DIntegration
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paramList
parameter_list|)
member_init_list|:
name|QWindowsIntegration
argument_list|(
name|paramList
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QWindowsDirect2DIntegrationPrivate
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|init
name|bool
name|QWindowsDirect2DIntegration
operator|::
name|init
parameter_list|()
block|{
return|return
name|d
operator|->
name|m_d2dContext
operator|.
name|init
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
