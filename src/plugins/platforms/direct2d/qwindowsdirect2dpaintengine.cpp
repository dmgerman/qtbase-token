begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsdirect2dpaintengine.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dplatformpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dpaintdevice.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dhelpers.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2ddevicecontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontengine.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsintegration.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QtMath>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStack>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSettings>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpaintengine_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qstatictext_p.h>
end_include
begin_include
include|#
directive|include
file|<d2d1_1.h>
end_include
begin_include
include|#
directive|include
file|<dwrite_1.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_using
using|using
name|Microsoft
operator|::
name|WRL
operator|::
name|ComPtr
using|;
end_using
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// The enum values below are set as tags on the device context
comment|// in the various draw methods. When EndDraw is called the device context
comment|// will report the last set tag number in case of errors
comment|// along with an error code
comment|// Microsoft keeps a list of d2d error codes here:
comment|// http://msdn.microsoft.com/en-us/library/windows/desktop/dd370979(v=vs.85).aspx
name|enum
type|{
DECL|enumerator|D2DDebugDrawInitialStateTag
name|D2DDebugDrawInitialStateTag
init|=
operator|-
literal|1
decl_stmt|,
DECL|enumerator|D2DDebugFillTag
name|D2DDebugFillTag
init|=
literal|1
decl_stmt|,
DECL|enumerator|D2DDebugFillRectTag
name|D2DDebugFillRectTag
decl_stmt|,
DECL|enumerator|D2DDebugDrawRectsTag
name|D2DDebugDrawRectsTag
decl_stmt|,
DECL|enumerator|D2DDebugDrawRectFsTag
name|D2DDebugDrawRectFsTag
decl_stmt|,
DECL|enumerator|D2DDebugDrawEllipseTag
name|D2DDebugDrawEllipseTag
decl_stmt|,
DECL|enumerator|D2DDebugDrawEllipseFTag
name|D2DDebugDrawEllipseFTag
decl_stmt|,
DECL|enumerator|D2DDebugDrawImageTag
name|D2DDebugDrawImageTag
decl_stmt|,
DECL|enumerator|D2DDebugDrawPixmapTag
name|D2DDebugDrawPixmapTag
decl_stmt|,
DECL|enumerator|D2DDebugDrawStaticTextItemTag
name|D2DDebugDrawStaticTextItemTag
decl_stmt|,
DECL|enumerator|D2DDebugDrawTextItemTag
name|D2DDebugDrawTextItemTag
end_decl_stmt
begin_comment
unit|};
comment|//Clipping flags
end_comment
begin_enum
enum|enum
block|{
DECL|enumerator|SimpleSystemClip
name|SimpleSystemClip
init|=
literal|0x1
block|}
enum|;
end_enum
begin_enum
DECL|enum|ClipType
enum|enum
name|ClipType
block|{
DECL|enumerator|AxisAlignedClip
name|AxisAlignedClip
block|,
DECL|enumerator|LayerClip
name|LayerClip
block|}
enum|;
end_enum
begin_comment
comment|// Since d2d is a float-based system we need to be able to snap our drawing to whole pixels.
end_comment
begin_comment
comment|// Applying the magical aliasing offset to coordinates will do so, just make sure that
end_comment
begin_comment
comment|// aliased painting is turned on on the d2d device context.
end_comment
begin_decl_stmt
DECL|variable|MAGICAL_ALIASING_OFFSET
specifier|static
specifier|const
name|qreal
name|MAGICAL_ALIASING_OFFSET
init|=
literal|0.5
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|D2D_TAG
define|#
directive|define
name|D2D_TAG
parameter_list|(
name|tag
parameter_list|)
value|d->dc()->SetTags(tag, tag)
end_define
begin_function_decl
name|Q_GUI_EXPORT
name|QImage
name|qt_imageForBrush
parameter_list|(
name|int
name|brushStyle
parameter_list|,
name|bool
name|invert
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|factory
specifier|static
specifier|inline
name|ID2D1Factory1
modifier|*
name|factory
parameter_list|()
block|{
return|return
name|QWindowsDirect2DContext
operator|::
name|instance
argument_list|()
operator|->
name|d2dFactory
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|transformFromLine
specifier|static
specifier|inline
name|D2D1_MATRIX_3X2_F
name|transformFromLine
parameter_list|(
specifier|const
name|QLineF
modifier|&
name|line
parameter_list|,
name|qreal
name|penWidth
parameter_list|,
name|qreal
name|dashOffset
parameter_list|)
block|{
specifier|const
name|qreal
name|halfWidth
init|=
name|penWidth
operator|/
literal|2
decl_stmt|;
specifier|const
name|qreal
name|angle
init|=
operator|-
name|qDegreesToRadians
argument_list|(
name|line
operator|.
name|angle
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|sinA
init|=
name|qSin
argument_list|(
name|angle
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|cosA
init|=
name|qCos
argument_list|(
name|angle
argument_list|)
decl_stmt|;
name|QTransform
name|transform
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|line
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|dashOffset
operator|*
name|cosA
operator|+
name|sinA
operator|*
name|halfWidth
argument_list|,
name|line
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
operator|+
name|dashOffset
operator|*
name|sinA
operator|-
name|cosA
operator|*
name|halfWidth
argument_list|)
decl_stmt|;
name|transform
operator|.
name|rotateRadians
argument_list|(
name|angle
argument_list|)
expr_stmt|;
return|return
name|to_d2d_matrix_3x2_f
argument_list|(
name|transform
argument_list|)
return|;
block|}
end_function
begin_function_decl
specifier|static
name|void
name|adjustLine
parameter_list|(
name|QPointF
modifier|*
name|p1
parameter_list|,
name|QPointF
modifier|*
name|p2
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
specifier|static
name|bool
name|isLinePositivelySloped
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p1
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p2
parameter_list|)
function_decl|;
end_function_decl
begin_class
DECL|class|Direct2DPathGeometryWriter
class|class
name|Direct2DPathGeometryWriter
block|{
public|public:
DECL|function|Direct2DPathGeometryWriter
name|Direct2DPathGeometryWriter
parameter_list|()
member_init_list|:
name|m_inFigure
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_roundCoordinates
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_adjustPositivelySlopedLines
argument_list|(
literal|false
argument_list|)
block|{      }
DECL|function|begin
name|bool
name|begin
parameter_list|()
block|{
name|HRESULT
name|hr
init|=
name|factory
argument_list|()
operator|->
name|CreatePathGeometry
argument_list|(
operator|&
name|m_geometry
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create path geometry: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|hr
operator|=
name|m_geometry
operator|->
name|Open
argument_list|(
operator|&
name|m_sink
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create geometry sink: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|setWindingFillEnabled
name|void
name|setWindingFillEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
if|if
condition|(
name|enable
condition|)
name|m_sink
operator|->
name|SetFillMode
argument_list|(
name|D2D1_FILL_MODE_WINDING
argument_list|)
expr_stmt|;
else|else
name|m_sink
operator|->
name|SetFillMode
argument_list|(
name|D2D1_FILL_MODE_ALTERNATE
argument_list|)
expr_stmt|;
block|}
DECL|function|setAliasingEnabled
name|void
name|setAliasingEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|m_roundCoordinates
operator|=
name|enable
expr_stmt|;
block|}
DECL|function|setPositiveSlopeAdjustmentEnabled
name|void
name|setPositiveSlopeAdjustmentEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|m_adjustPositivelySlopedLines
operator|=
name|enable
expr_stmt|;
block|}
DECL|function|isInFigure
name|bool
name|isInFigure
parameter_list|()
specifier|const
block|{
return|return
name|m_inFigure
return|;
block|}
DECL|function|moveTo
name|void
name|moveTo
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|)
block|{
if|if
condition|(
name|m_inFigure
condition|)
name|m_sink
operator|->
name|EndFigure
argument_list|(
name|D2D1_FIGURE_END_OPEN
argument_list|)
expr_stmt|;
name|m_sink
operator|->
name|BeginFigure
argument_list|(
name|adjusted
argument_list|(
name|point
argument_list|)
argument_list|,
name|D2D1_FIGURE_BEGIN_FILLED
argument_list|)
expr_stmt|;
name|m_inFigure
operator|=
literal|true
expr_stmt|;
name|m_previousPoint
operator|=
name|point
expr_stmt|;
block|}
DECL|function|lineTo
name|void
name|lineTo
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|)
block|{
name|QPointF
name|pt
init|=
name|point
decl_stmt|;
if|if
condition|(
name|m_adjustPositivelySlopedLines
operator|&&
name|isLinePositivelySloped
argument_list|(
name|m_previousPoint
argument_list|,
name|point
argument_list|)
condition|)
block|{
name|moveTo
argument_list|(
name|m_previousPoint
operator|-
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|pt
operator|-=
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|m_sink
operator|->
name|AddLine
argument_list|(
name|adjusted
argument_list|(
name|pt
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pt
operator|!=
name|point
condition|)
name|moveTo
argument_list|(
name|point
argument_list|)
expr_stmt|;
name|m_previousPoint
operator|=
name|point
expr_stmt|;
block|}
DECL|function|curveTo
name|void
name|curveTo
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p1
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p2
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p3
parameter_list|)
block|{
name|D2D1_BEZIER_SEGMENT
name|segment
init|=
block|{
name|adjusted
argument_list|(
name|p1
argument_list|)
block|,
name|adjusted
argument_list|(
name|p2
argument_list|)
block|,
name|adjusted
argument_list|(
argument|p3
argument_list|)
block|}
decl_stmt|;
name|m_sink
operator|->
name|AddBezier
argument_list|(
name|segment
argument_list|)
expr_stmt|;
name|m_previousPoint
operator|=
name|p3
expr_stmt|;
block|}
DECL|function|close
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|m_inFigure
condition|)
name|m_sink
operator|->
name|EndFigure
argument_list|(
name|D2D1_FIGURE_END_OPEN
argument_list|)
expr_stmt|;
name|m_sink
operator|->
name|Close
argument_list|()
expr_stmt|;
block|}
DECL|function|geometry
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|geometry
parameter_list|()
specifier|const
block|{
return|return
name|m_geometry
return|;
block|}
private|private:
DECL|function|adjusted
name|D2D1_POINT_2F
name|adjusted
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|)
block|{
specifier|static
specifier|const
name|QPointF
name|adjustment
argument_list|(
name|MAGICAL_ALIASING_OFFSET
argument_list|,
name|MAGICAL_ALIASING_OFFSET
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_roundCoordinates
condition|)
return|return
name|to_d2d_point_2f
argument_list|(
name|point
operator|+
name|adjustment
argument_list|)
return|;
else|else
return|return
name|to_d2d_point_2f
argument_list|(
name|point
argument_list|)
return|;
block|}
DECL|member|m_geometry
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|m_geometry
decl_stmt|;
DECL|member|m_sink
name|ComPtr
argument_list|<
name|ID2D1GeometrySink
argument_list|>
name|m_sink
decl_stmt|;
DECL|member|m_inFigure
name|bool
name|m_inFigure
decl_stmt|;
DECL|member|m_roundCoordinates
name|bool
name|m_roundCoordinates
decl_stmt|;
DECL|member|m_adjustPositivelySlopedLines
name|bool
name|m_adjustPositivelySlopedLines
decl_stmt|;
DECL|member|m_previousPoint
name|QPointF
name|m_previousPoint
decl_stmt|;
block|}
class|;
end_class
begin_struct
DECL|struct|D2DVectorPathCache
struct|struct
name|D2DVectorPathCache
block|{
DECL|member|aliased
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|aliased
decl_stmt|;
DECL|member|antiAliased
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|antiAliased
decl_stmt|;
DECL|function|cleanup_func
specifier|static
name|void
name|cleanup_func
parameter_list|(
name|QPaintEngineEx
modifier|*
name|engine
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|D2DVectorPathCache
modifier|*
name|e
init|=
cast|static_cast
argument_list|<
name|D2DVectorPathCache
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
operator|delete
name|e
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_class
DECL|class|QWindowsDirect2DPaintEnginePrivate
class|class
name|QWindowsDirect2DPaintEnginePrivate
super|:
specifier|public
name|QPaintEngineExPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QWindowsDirect2DPaintEngine
parameter_list|)
specifier|public
private|:
DECL|function|QWindowsDirect2DPaintEnginePrivate
name|QWindowsDirect2DPaintEnginePrivate
parameter_list|(
name|QWindowsDirect2DBitmap
modifier|*
name|bm
parameter_list|,
name|QWindowsDirect2DPaintEngine
operator|::
name|Flags
name|flags
parameter_list|)
member_init_list|:
name|bitmap
argument_list|(
name|bm
argument_list|)
member_init_list|,
name|clipFlags
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|flags
argument_list|(
name|flags
argument_list|)
block|{
name|pen
operator|.
name|reset
argument_list|()
expr_stmt|;
name|brush
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dc
argument_list|()
operator|->
name|SetAntialiasMode
argument_list|(
name|D2D1_ANTIALIAS_MODE_ALIASED
argument_list|)
expr_stmt|;
block|}
DECL|member|bitmap
name|QWindowsDirect2DBitmap
modifier|*
name|bitmap
decl_stmt|;
DECL|member|fallbackImage
name|QImage
name|fallbackImage
decl_stmt|;
DECL|member|clipFlags
name|unsigned
name|int
name|clipFlags
decl_stmt|;
DECL|member|pushedClips
name|QStack
argument_list|<
name|ClipType
argument_list|>
name|pushedClips
decl_stmt|;
DECL|member|flags
name|QWindowsDirect2DPaintEngine
operator|::
name|Flags
name|flags
decl_stmt|;
DECL|member|currentBrushOrigin
name|QPointF
name|currentBrushOrigin
decl_stmt|;
DECL|member|fontCache
name|QHash
argument_list|<
name|QFontDef
argument_list|,
name|ComPtr
argument_list|<
name|IDWriteFontFace
argument_list|>
argument_list|>
name|fontCache
decl_stmt|;
struct|struct
block|{
DECL|member|emulate
name|bool
name|emulate
decl_stmt|;
DECL|member|qpen
name|QPen
name|qpen
decl_stmt|;
DECL|member|brush
name|ComPtr
argument_list|<
name|ID2D1Brush
argument_list|>
name|brush
decl_stmt|;
DECL|member|strokeStyle
name|ComPtr
argument_list|<
name|ID2D1StrokeStyle1
argument_list|>
name|strokeStyle
decl_stmt|;
DECL|member|dashBrush
name|ComPtr
argument_list|<
name|ID2D1BitmapBrush1
argument_list|>
name|dashBrush
decl_stmt|;
DECL|member|dashLength
name|int
name|dashLength
decl_stmt|;
DECL|function|reset
specifier|inline
name|void
name|reset
parameter_list|()
block|{
name|emulate
operator|=
literal|false
expr_stmt|;
name|qpen
operator|=
name|QPen
argument_list|()
expr_stmt|;
name|brush
operator|.
name|Reset
argument_list|()
expr_stmt|;
name|strokeStyle
operator|.
name|Reset
argument_list|()
expr_stmt|;
name|dashBrush
operator|.
name|Reset
argument_list|()
expr_stmt|;
name|dashLength
operator|=
literal|0
expr_stmt|;
block|}
DECL|member|pen
block|}
name|pen
struct|;
struct|struct
block|{
DECL|member|emulate
name|bool
name|emulate
decl_stmt|;
DECL|member|qbrush
name|QBrush
name|qbrush
decl_stmt|;
DECL|member|brush
name|ComPtr
argument_list|<
name|ID2D1Brush
argument_list|>
name|brush
decl_stmt|;
DECL|function|reset
specifier|inline
name|void
name|reset
parameter_list|()
block|{
name|emulate
operator|=
literal|false
expr_stmt|;
name|brush
operator|.
name|Reset
argument_list|()
expr_stmt|;
name|qbrush
operator|=
name|QBrush
argument_list|()
expr_stmt|;
block|}
DECL|member|brush
block|}
name|brush
struct|;
DECL|function|dc
specifier|inline
name|ID2D1DeviceContext
modifier|*
name|dc
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
return|return
name|bitmap
operator|->
name|deviceContext
argument_list|()
operator|->
name|get
argument_list|()
return|;
block|}
DECL|function|interpolationMode
specifier|inline
name|D2D1_INTERPOLATION_MODE
name|interpolationMode
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
return|return
operator|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|SmoothPixmapTransform
operator|)
condition|?
name|D2D1_INTERPOLATION_MODE_LINEAR
else|:
name|D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR
return|;
block|}
DECL|function|antialiasMode
specifier|inline
name|D2D1_ANTIALIAS_MODE
name|antialiasMode
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
return|return
operator|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
condition|?
name|D2D1_ANTIALIAS_MODE_PER_PRIMITIVE
else|:
name|D2D1_ANTIALIAS_MODE_ALIASED
return|;
block|}
DECL|function|layerOptions
specifier|inline
name|D2D1_LAYER_OPTIONS1
name|layerOptions
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|flags
operator|&
name|QWindowsDirect2DPaintEngine
operator|::
name|TranslucentTopLevelWindow
condition|)
return|return
name|D2D1_LAYER_OPTIONS1_NONE
return|;
else|else
return|return
name|D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND
return|;
block|}
DECL|function|updateTransform
name|void
name|updateTransform
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|)
block|{
name|dc
argument_list|()
operator|->
name|SetTransform
argument_list|(
name|to_d2d_matrix_3x2_f
argument_list|(
name|transform
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|updateOpacity
name|void
name|updateOpacity
parameter_list|(
name|qreal
name|opacity
parameter_list|)
block|{
if|if
condition|(
name|brush
operator|.
name|brush
condition|)
name|brush
operator|.
name|brush
operator|->
name|SetOpacity
argument_list|(
name|opacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|pen
operator|.
name|brush
condition|)
name|pen
operator|.
name|brush
operator|->
name|SetOpacity
argument_list|(
name|opacity
argument_list|)
expr_stmt|;
block|}
DECL|function|pushClip
name|void
name|pushClip
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|D2D_RECT_F
name|rect
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|dc
argument_list|()
operator|->
name|PushAxisAlignedClip
argument_list|(
name|rect
argument_list|,
name|antialiasMode
argument_list|()
argument_list|)
expr_stmt|;
name|pushedClips
operator|.
name|push
argument_list|(
name|AxisAlignedClip
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|isRect
argument_list|()
operator|&&
operator|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|type
argument_list|()
operator|<=
name|QTransform
operator|::
name|TxScale
operator|)
condition|)
block|{
specifier|const
name|qreal
modifier|*
specifier|const
name|points
init|=
name|path
operator|.
name|points
argument_list|()
decl_stmt|;
name|D2D_RECT_F
name|rect
init|=
block|{
name|points
index|[
literal|0
index|]
block|,
comment|// left
name|points
index|[
literal|1
index|]
block|,
comment|// top
name|points
index|[
literal|2
index|]
block|,
comment|// right,
name|points
index|[
literal|5
index|]
comment|// bottom
block|}
decl_stmt|;
name|dc
argument_list|()
operator|->
name|PushAxisAlignedClip
argument_list|(
name|rect
argument_list|,
name|antialiasMode
argument_list|()
argument_list|)
expr_stmt|;
name|pushedClips
operator|.
name|push
argument_list|(
name|AxisAlignedClip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|geometry
init|=
name|vectorPathToID2D1PathGeometry
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|geometry
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not convert vector path to painter path!"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|dc
argument_list|()
operator|->
name|PushLayer
argument_list|(
name|D2D1
operator|::
name|LayerParameters1
argument_list|(
name|D2D1
operator|::
name|InfiniteRect
argument_list|()
argument_list|,
name|geometry
operator|.
name|Get
argument_list|()
argument_list|,
name|antialiasMode
argument_list|()
argument_list|,
name|D2D1
operator|::
name|IdentityMatrix
argument_list|()
argument_list|,
literal|1.0
argument_list|,
name|NULL
argument_list|,
name|layerOptions
argument_list|()
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|pushedClips
operator|.
name|push
argument_list|(
name|LayerClip
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|clearClips
name|void
name|clearClips
parameter_list|()
block|{
while|while
condition|(
operator|!
name|pushedClips
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|pushedClips
operator|.
name|pop
argument_list|()
condition|)
block|{
case|case
name|AxisAlignedClip
case|:
name|dc
argument_list|()
operator|->
name|PopAxisAlignedClip
argument_list|()
expr_stmt|;
break|break;
case|case
name|LayerClip
case|:
name|dc
argument_list|()
operator|->
name|PopLayer
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|function|updateClipEnabled
name|void
name|updateClipEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
name|clearClips
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|pushedClips
operator|.
name|isEmpty
argument_list|()
condition|)
name|replayClipOperations
argument_list|()
expr_stmt|;
block|}
DECL|function|clip
name|void
name|clip
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|operation
parameter_list|)
block|{
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|Qt
operator|::
name|NoClip
case|:
name|clearClips
argument_list|()
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ReplaceClip
case|:
name|clearClips
argument_list|()
expr_stmt|;
name|pushClip
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|IntersectClip
case|:
name|pushClip
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|function|updateCompositionMode
name|void
name|updateCompositionMode
parameter_list|(
name|QPainter
operator|::
name|CompositionMode
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|QPainter
operator|::
name|CompositionMode_Source
case|:
name|dc
argument_list|()
operator|->
name|SetPrimitiveBlend
argument_list|(
name|D2D1_PRIMITIVE_BLEND_COPY
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceOver
case|:
name|dc
argument_list|()
operator|->
name|SetPrimitiveBlend
argument_list|(
name|D2D1_PRIMITIVE_BLEND_SOURCE_OVER
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// Activating an unsupported mode at any time will cause the QImage
comment|// fallback to be used for the remainder of the active paint session
name|dc
argument_list|()
operator|->
name|SetPrimitiveBlend
argument_list|(
name|D2D1_PRIMITIVE_BLEND_COPY
argument_list|)
expr_stmt|;
name|flags
operator||=
name|QWindowsDirect2DPaintEngine
operator|::
name|EmulateComposition
expr_stmt|;
break|break;
block|}
block|}
DECL|function|updateBrush
name|void
name|updateBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|newBrush
parameter_list|)
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|qbrush_fast_equals
argument_list|(
name|brush
operator|.
name|qbrush
argument_list|,
name|newBrush
argument_list|)
operator|&&
operator|(
name|brush
operator|.
name|brush
operator|||
name|brush
operator|.
name|emulate
operator|)
condition|)
return|return;
name|brush
operator|.
name|brush
operator|=
name|to_d2d_brush
argument_list|(
name|newBrush
argument_list|,
operator|&
name|brush
operator|.
name|emulate
argument_list|)
expr_stmt|;
name|brush
operator|.
name|qbrush
operator|=
name|newBrush
expr_stmt|;
if|if
condition|(
name|brush
operator|.
name|brush
condition|)
block|{
name|brush
operator|.
name|brush
operator|->
name|SetOpacity
argument_list|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|opacity
argument_list|)
expr_stmt|;
name|applyBrushOrigin
argument_list|(
name|currentBrushOrigin
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|updateBrushOrigin
name|void
name|updateBrushOrigin
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|brushOrigin
parameter_list|)
block|{
name|negateCurrentBrushOrigin
argument_list|()
expr_stmt|;
name|applyBrushOrigin
argument_list|(
name|brushOrigin
argument_list|)
expr_stmt|;
block|}
DECL|function|negateCurrentBrushOrigin
name|void
name|negateCurrentBrushOrigin
parameter_list|()
block|{
if|if
condition|(
name|brush
operator|.
name|brush
operator|&&
operator|!
name|currentBrushOrigin
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|D2D1_MATRIX_3X2_F
name|transform
decl_stmt|;
name|brush
operator|.
name|brush
operator|->
name|GetTransform
argument_list|(
operator|&
name|transform
argument_list|)
expr_stmt|;
name|brush
operator|.
name|brush
operator|->
name|SetTransform
argument_list|(
operator|*
operator|(
name|D2D1
operator|::
name|Matrix3x2F
operator|::
name|ReinterpretBaseType
argument_list|(
operator|&
name|transform
argument_list|)
operator|)
operator|*
name|D2D1
operator|::
name|Matrix3x2F
operator|::
name|Translation
argument_list|(
operator|-
name|currentBrushOrigin
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|currentBrushOrigin
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|applyBrushOrigin
name|void
name|applyBrushOrigin
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|origin
parameter_list|)
block|{
if|if
condition|(
name|brush
operator|.
name|brush
operator|&&
operator|!
name|origin
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|D2D1_MATRIX_3X2_F
name|transform
decl_stmt|;
name|brush
operator|.
name|brush
operator|->
name|GetTransform
argument_list|(
operator|&
name|transform
argument_list|)
expr_stmt|;
name|brush
operator|.
name|brush
operator|->
name|SetTransform
argument_list|(
operator|*
operator|(
name|D2D1
operator|::
name|Matrix3x2F
operator|::
name|ReinterpretBaseType
argument_list|(
operator|&
name|transform
argument_list|)
operator|)
operator|*
name|D2D1
operator|::
name|Matrix3x2F
operator|::
name|Translation
argument_list|(
name|origin
operator|.
name|x
argument_list|()
argument_list|,
name|origin
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentBrushOrigin
operator|=
name|origin
expr_stmt|;
block|}
DECL|function|updatePen
name|void
name|updatePen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|newPen
parameter_list|)
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|qpen_fast_equals
argument_list|(
name|newPen
argument_list|,
name|pen
operator|.
name|qpen
argument_list|)
operator|&&
operator|(
name|pen
operator|.
name|brush
operator|||
name|pen
operator|.
name|emulate
operator|)
condition|)
return|return;
name|pen
operator|.
name|reset
argument_list|()
expr_stmt|;
name|pen
operator|.
name|qpen
operator|=
name|newPen
expr_stmt|;
if|if
condition|(
name|newPen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoPen
condition|)
return|return;
name|pen
operator|.
name|brush
operator|=
name|to_d2d_brush
argument_list|(
name|newPen
operator|.
name|brush
argument_list|()
argument_list|,
operator|&
name|pen
operator|.
name|emulate
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pen
operator|.
name|brush
condition|)
return|return;
name|pen
operator|.
name|brush
operator|->
name|SetOpacity
argument_list|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|opacity
argument_list|)
expr_stmt|;
name|D2D1_STROKE_STYLE_PROPERTIES1
name|props
init|=
block|{}
decl_stmt|;
switch|switch
condition|(
name|newPen
operator|.
name|capStyle
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|SquareCap
case|:
name|props
operator|.
name|startCap
operator|=
name|props
operator|.
name|endCap
operator|=
name|props
operator|.
name|dashCap
operator|=
name|D2D1_CAP_STYLE_SQUARE
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RoundCap
case|:
name|props
operator|.
name|startCap
operator|=
name|props
operator|.
name|endCap
operator|=
name|props
operator|.
name|dashCap
operator|=
name|D2D1_CAP_STYLE_ROUND
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|FlatCap
case|:
default|default:
name|props
operator|.
name|startCap
operator|=
name|props
operator|.
name|endCap
operator|=
name|props
operator|.
name|dashCap
operator|=
name|D2D1_CAP_STYLE_FLAT
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|newPen
operator|.
name|joinStyle
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|BevelJoin
case|:
name|props
operator|.
name|lineJoin
operator|=
name|D2D1_LINE_JOIN_BEVEL
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RoundJoin
case|:
name|props
operator|.
name|lineJoin
operator|=
name|D2D1_LINE_JOIN_ROUND
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|MiterJoin
case|:
default|default:
name|props
operator|.
name|lineJoin
operator|=
name|D2D1_LINE_JOIN_MITER
expr_stmt|;
break|break;
block|}
name|props
operator|.
name|miterLimit
operator|=
name|newPen
operator|.
name|miterLimit
argument_list|()
operator|*
name|qreal
argument_list|(
literal|2.0
argument_list|)
expr_stmt|;
comment|// D2D and Qt miter specs differ
name|props
operator|.
name|dashOffset
operator|=
name|newPen
operator|.
name|dashOffset
argument_list|()
expr_stmt|;
if|if
condition|(
name|newPen
operator|.
name|widthF
argument_list|()
operator|==
literal|0
condition|)
name|props
operator|.
name|transformType
operator|=
name|D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE
expr_stmt|;
elseif|else
if|if
condition|(
name|qt_pen_is_cosmetic
argument_list|(
name|newPen
argument_list|,
name|q
operator|->
name|state
argument_list|()
operator|->
name|renderHints
argument_list|)
condition|)
name|props
operator|.
name|transformType
operator|=
name|D2D1_STROKE_TRANSFORM_TYPE_FIXED
expr_stmt|;
else|else
name|props
operator|.
name|transformType
operator|=
name|D2D1_STROKE_TRANSFORM_TYPE_NORMAL
expr_stmt|;
switch|switch
condition|(
name|newPen
operator|.
name|style
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|SolidLine
case|:
name|props
operator|.
name|dashStyle
operator|=
name|D2D1_DASH_STYLE_SOLID
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DotLine
case|:
case|case
name|Qt
operator|::
name|DashDotLine
case|:
case|case
name|Qt
operator|::
name|DashDotDotLine
case|:
comment|// Try and match Qt's raster engine in output as closely as possible
if|if
condition|(
name|newPen
operator|.
name|widthF
argument_list|()
operator|<=
literal|1.0
condition|)
name|props
operator|.
name|startCap
operator|=
name|props
operator|.
name|endCap
operator|=
name|props
operator|.
name|dashCap
operator|=
name|D2D1_CAP_STYLE_FLAT
expr_stmt|;
comment|// fall through
default|default:
name|props
operator|.
name|dashStyle
operator|=
name|D2D1_DASH_STYLE_CUSTOM
expr_stmt|;
break|break;
block|}
name|HRESULT
name|hr
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|dashStyle
operator|==
name|D2D1_DASH_STYLE_CUSTOM
condition|)
block|{
name|QVector
argument_list|<
name|qreal
argument_list|>
name|dashes
init|=
name|newPen
operator|.
name|dashPattern
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|FLOAT
argument_list|>
name|converted
argument_list|(
name|dashes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|penWidth
init|=
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
decl_stmt|;
name|qreal
name|brushWidth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dashes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|converted
index|[
name|i
index|]
operator|=
name|dashes
index|[
name|i
index|]
expr_stmt|;
name|brushWidth
operator|+=
name|penWidth
operator|*
name|dashes
index|[
name|i
index|]
expr_stmt|;
block|}
name|hr
operator|=
name|factory
argument_list|()
operator|->
name|CreateStrokeStyle
argument_list|(
name|props
argument_list|,
name|converted
operator|.
name|constData
argument_list|()
argument_list|,
name|converted
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|pen
operator|.
name|strokeStyle
argument_list|)
expr_stmt|;
comment|// Create a combined brush/dash pattern for optimized line drawing
name|QWindowsDirect2DBitmap
name|bitmap
decl_stmt|;
name|bitmap
operator|.
name|resize
argument_list|(
name|ceil
argument_list|(
name|brushWidth
argument_list|)
argument_list|,
name|ceil
argument_list|(
name|penWidth
argument_list|)
argument_list|)
expr_stmt|;
name|bitmap
operator|.
name|deviceContext
argument_list|()
operator|->
name|begin
argument_list|()
expr_stmt|;
name|bitmap
operator|.
name|deviceContext
argument_list|()
operator|->
name|get
argument_list|()
operator|->
name|SetAntialiasMode
argument_list|(
name|antialiasMode
argument_list|()
argument_list|)
expr_stmt|;
name|bitmap
operator|.
name|deviceContext
argument_list|()
operator|->
name|get
argument_list|()
operator|->
name|SetTransform
argument_list|(
name|D2D1
operator|::
name|IdentityMatrix
argument_list|()
argument_list|)
expr_stmt|;
name|bitmap
operator|.
name|deviceContext
argument_list|()
operator|->
name|get
argument_list|()
operator|->
name|Clear
argument_list|()
expr_stmt|;
specifier|const
name|qreal
name|offsetX
init|=
operator|(
name|qreal
argument_list|(
name|bitmap
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
operator|-
name|brushWidth
operator|)
operator|/
literal|2
decl_stmt|;
specifier|const
name|qreal
name|offsetY
init|=
name|qreal
argument_list|(
name|bitmap
operator|.
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
operator|/
literal|2
decl_stmt|;
name|bitmap
operator|.
name|deviceContext
argument_list|()
operator|->
name|get
argument_list|()
operator|->
name|DrawLine
argument_list|(
name|D2D1
operator|::
name|Point2F
argument_list|(
name|offsetX
argument_list|,
name|offsetY
argument_list|)
argument_list|,
name|D2D1
operator|::
name|Point2F
argument_list|(
name|brushWidth
argument_list|,
name|offsetY
argument_list|)
argument_list|,
name|pen
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|,
name|penWidth
argument_list|,
name|pen
operator|.
name|strokeStyle
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
name|bitmap
operator|.
name|deviceContext
argument_list|()
operator|->
name|end
argument_list|()
expr_stmt|;
name|D2D1_BITMAP_BRUSH_PROPERTIES1
name|bitmapBrushProperties
init|=
name|D2D1
operator|::
name|BitmapBrushProperties1
argument_list|(
name|D2D1_EXTEND_MODE_WRAP
argument_list|,
name|D2D1_EXTEND_MODE_CLAMP
argument_list|,
name|D2D1_INTERPOLATION_MODE_LINEAR
argument_list|)
decl_stmt|;
name|hr
operator|=
name|dc
argument_list|()
operator|->
name|CreateBitmapBrush
argument_list|(
name|bitmap
operator|.
name|bitmap
argument_list|()
argument_list|,
name|bitmapBrushProperties
argument_list|,
operator|&
name|pen
operator|.
name|dashBrush
argument_list|)
expr_stmt|;
name|pen
operator|.
name|dashLength
operator|=
name|bitmap
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hr
operator|=
name|factory
argument_list|()
operator|->
name|CreateStrokeStyle
argument_list|(
name|props
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|pen
operator|.
name|strokeStyle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"%s: Could not create stroke style: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
block|}
DECL|function|to_d2d_brush
name|ComPtr
argument_list|<
name|ID2D1Brush
argument_list|>
name|to_d2d_brush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|newBrush
parameter_list|,
name|bool
modifier|*
name|needsEmulation
parameter_list|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|ID2D1Brush
argument_list|>
name|result
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|needsEmulation
argument_list|)
expr_stmt|;
operator|*
name|needsEmulation
operator|=
literal|false
expr_stmt|;
switch|switch
condition|(
name|newBrush
operator|.
name|style
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|NoBrush
case|:
break|break;
case|case
name|Qt
operator|::
name|SolidPattern
case|:
block|{
name|ComPtr
argument_list|<
name|ID2D1SolidColorBrush
argument_list|>
name|solid
decl_stmt|;
name|hr
operator|=
name|dc
argument_list|()
operator|->
name|CreateSolidColorBrush
argument_list|(
name|to_d2d_color_f
argument_list|(
name|newBrush
operator|.
name|color
argument_list|()
argument_list|)
argument_list|,
operator|&
name|solid
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create solid color brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
name|hr
operator|=
name|solid
operator|.
name|As
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"%s: Could not convert solid color brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|Dense1Pattern
case|:
case|case
name|Qt
operator|::
name|Dense2Pattern
case|:
case|case
name|Qt
operator|::
name|Dense3Pattern
case|:
case|case
name|Qt
operator|::
name|Dense4Pattern
case|:
case|case
name|Qt
operator|::
name|Dense5Pattern
case|:
case|case
name|Qt
operator|::
name|Dense6Pattern
case|:
case|case
name|Qt
operator|::
name|Dense7Pattern
case|:
case|case
name|Qt
operator|::
name|HorPattern
case|:
case|case
name|Qt
operator|::
name|VerPattern
case|:
case|case
name|Qt
operator|::
name|CrossPattern
case|:
case|case
name|Qt
operator|::
name|BDiagPattern
case|:
case|case
name|Qt
operator|::
name|FDiagPattern
case|:
case|case
name|Qt
operator|::
name|DiagCrossPattern
case|:
block|{
name|ComPtr
argument_list|<
name|ID2D1BitmapBrush1
argument_list|>
name|bitmapBrush
decl_stmt|;
name|D2D1_BITMAP_BRUSH_PROPERTIES1
name|bitmapBrushProperties
init|=
block|{
name|D2D1_EXTEND_MODE_WRAP
block|,
name|D2D1_EXTEND_MODE_WRAP
block|,
name|interpolationMode
argument_list|()
block|}
decl_stmt|;
name|QImage
name|brushImg
init|=
name|qt_imageForBrush
argument_list|(
name|newBrush
operator|.
name|style
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|brushImg
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|newBrush
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|brushImg
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowsDirect2DBitmap
name|bitmap
decl_stmt|;
name|bool
name|success
init|=
name|bitmap
operator|.
name|fromImage
argument_list|(
name|brushImg
argument_list|,
name|Qt
operator|::
name|AutoColor
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create Direct2D bitmap from Qt pattern brush image"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
break|break;
block|}
name|hr
operator|=
name|dc
argument_list|()
operator|->
name|CreateBitmapBrush
argument_list|(
name|bitmap
operator|.
name|bitmap
argument_list|()
argument_list|,
name|bitmapBrushProperties
argument_list|,
operator|&
name|bitmapBrush
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create Direct2D bitmap brush for Qt pattern brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
name|hr
operator|=
name|bitmapBrush
operator|.
name|As
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"%s: Could not convert Direct2D bitmap brush for Qt pattern brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|LinearGradientPattern
case|:
if|if
condition|(
name|newBrush
operator|.
name|gradient
argument_list|()
operator|->
name|spread
argument_list|()
operator|!=
name|QGradient
operator|::
name|PadSpread
condition|)
block|{
operator|*
name|needsEmulation
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|ComPtr
argument_list|<
name|ID2D1LinearGradientBrush
argument_list|>
name|linear
decl_stmt|;
specifier|const
name|QLinearGradient
modifier|*
name|qlinear
init|=
cast|static_cast
argument_list|<
specifier|const
name|QLinearGradient
operator|*
argument_list|>
argument_list|(
name|newBrush
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
name|D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
name|linearGradientBrushProperties
decl_stmt|;
name|ComPtr
argument_list|<
name|ID2D1GradientStopCollection
argument_list|>
name|gradientStopCollection
decl_stmt|;
specifier|const
name|QGradientStops
modifier|&
name|qstops
init|=
name|qlinear
operator|->
name|stops
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|D2D1_GRADIENT_STOP
argument_list|>
name|stops
argument_list|(
name|qstops
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|linearGradientBrushProperties
operator|.
name|startPoint
operator|=
name|to_d2d_point_2f
argument_list|(
name|qlinear
operator|->
name|start
argument_list|()
argument_list|)
expr_stmt|;
name|linearGradientBrushProperties
operator|.
name|endPoint
operator|=
name|to_d2d_point_2f
argument_list|(
name|qlinear
operator|->
name|finalStop
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stops
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|stops
index|[
name|i
index|]
operator|.
name|position
operator|=
name|qstops
index|[
name|i
index|]
operator|.
name|first
expr_stmt|;
name|stops
index|[
name|i
index|]
operator|.
name|color
operator|=
name|to_d2d_color_f
argument_list|(
name|qstops
index|[
name|i
index|]
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
name|hr
operator|=
name|dc
argument_list|()
operator|->
name|CreateGradientStopCollection
argument_list|(
name|stops
operator|.
name|constData
argument_list|()
argument_list|,
name|stops
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|gradientStopCollection
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create gradient stop collection for linear gradient: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
name|hr
operator|=
name|dc
argument_list|()
operator|->
name|CreateLinearGradientBrush
argument_list|(
name|linearGradientBrushProperties
argument_list|,
name|gradientStopCollection
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|linear
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create Direct2D linear gradient brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
name|hr
operator|=
name|linear
operator|.
name|As
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not convert Direct2D linear gradient brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
break|break;
case|case
name|Qt
operator|::
name|RadialGradientPattern
case|:
if|if
condition|(
name|newBrush
operator|.
name|gradient
argument_list|()
operator|->
name|spread
argument_list|()
operator|!=
name|QGradient
operator|::
name|PadSpread
condition|)
block|{
operator|*
name|needsEmulation
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|ComPtr
argument_list|<
name|ID2D1RadialGradientBrush
argument_list|>
name|radial
decl_stmt|;
specifier|const
name|QRadialGradient
modifier|*
name|qradial
init|=
cast|static_cast
argument_list|<
specifier|const
name|QRadialGradient
operator|*
argument_list|>
argument_list|(
name|newBrush
operator|.
name|gradient
argument_list|()
argument_list|)
decl_stmt|;
name|D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
name|radialGradientBrushProperties
decl_stmt|;
name|ComPtr
argument_list|<
name|ID2D1GradientStopCollection
argument_list|>
name|gradientStopCollection
decl_stmt|;
specifier|const
name|QGradientStops
modifier|&
name|qstops
init|=
name|qradial
operator|->
name|stops
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|D2D1_GRADIENT_STOP
argument_list|>
name|stops
argument_list|(
name|qstops
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|radialGradientBrushProperties
operator|.
name|center
operator|=
name|to_d2d_point_2f
argument_list|(
name|qradial
operator|->
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|radialGradientBrushProperties
operator|.
name|gradientOriginOffset
operator|=
name|to_d2d_point_2f
argument_list|(
name|qradial
operator|->
name|focalPoint
argument_list|()
operator|-
name|qradial
operator|->
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|radialGradientBrushProperties
operator|.
name|radiusX
operator|=
name|qradial
operator|->
name|radius
argument_list|()
expr_stmt|;
name|radialGradientBrushProperties
operator|.
name|radiusY
operator|=
name|qradial
operator|->
name|radius
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stops
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|stops
index|[
name|i
index|]
operator|.
name|position
operator|=
name|qstops
index|[
name|i
index|]
operator|.
name|first
expr_stmt|;
name|stops
index|[
name|i
index|]
operator|.
name|color
operator|=
name|to_d2d_color_f
argument_list|(
name|qstops
index|[
name|i
index|]
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
name|hr
operator|=
name|dc
argument_list|()
operator|->
name|CreateGradientStopCollection
argument_list|(
name|stops
operator|.
name|constData
argument_list|()
argument_list|,
name|stops
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|gradientStopCollection
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create gradient stop collection for radial gradient: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
name|hr
operator|=
name|dc
argument_list|()
operator|->
name|CreateRadialGradientBrush
argument_list|(
name|radialGradientBrushProperties
argument_list|,
name|gradientStopCollection
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|radial
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create Direct2D radial gradient brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
name|radial
operator|.
name|As
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not convert Direct2D radial gradient brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
break|break;
case|case
name|Qt
operator|::
name|ConicalGradientPattern
case|:
operator|*
name|needsEmulation
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TexturePattern
case|:
block|{
name|ComPtr
argument_list|<
name|ID2D1BitmapBrush1
argument_list|>
name|bitmapBrush
decl_stmt|;
name|D2D1_BITMAP_BRUSH_PROPERTIES1
name|bitmapBrushProperties
init|=
block|{
name|D2D1_EXTEND_MODE_WRAP
block|,
name|D2D1_EXTEND_MODE_WRAP
block|,
name|interpolationMode
argument_list|()
block|}
decl_stmt|;
name|QWindowsDirect2DPlatformPixmap
modifier|*
name|pp
init|=
cast|static_cast
argument_list|<
name|QWindowsDirect2DPlatformPixmap
operator|*
argument_list|>
argument_list|(
name|newBrush
operator|.
name|texture
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|QWindowsDirect2DBitmap
modifier|*
name|bitmap
init|=
name|pp
operator|->
name|bitmap
argument_list|()
decl_stmt|;
name|hr
operator|=
name|dc
argument_list|()
operator|->
name|CreateBitmapBrush
argument_list|(
name|bitmap
operator|->
name|bitmap
argument_list|()
argument_list|,
name|bitmapBrushProperties
argument_list|,
operator|&
name|bitmapBrush
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create texture brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
name|hr
operator|=
name|bitmapBrush
operator|.
name|As
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"%s: Could not convert texture brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|result
operator|&&
operator|!
name|newBrush
operator|.
name|transform
argument_list|()
operator|.
name|isIdentity
argument_list|()
condition|)
name|result
operator|->
name|SetTransform
argument_list|(
name|to_d2d_matrix_3x2_f
argument_list|(
name|newBrush
operator|.
name|transform
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|vectorPathToID2D1PathGeometry
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|vectorPathToID2D1PathGeometry
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|alias
init|=
operator|!
name|q
operator|->
name|antiAliasingEnabled
argument_list|()
decl_stmt|;
name|QVectorPath
operator|::
name|CacheEntry
modifier|*
name|cacheEntry
init|=
name|path
operator|.
name|isCacheable
argument_list|()
condition|?
name|path
operator|.
name|lookupCacheData
argument_list|(
name|q
argument_list|)
else|:
name|Q_NULLPTR
decl_stmt|;
if|if
condition|(
name|cacheEntry
condition|)
block|{
name|D2DVectorPathCache
modifier|*
name|e
init|=
cast|static_cast
argument_list|<
name|D2DVectorPathCache
operator|*
argument_list|>
argument_list|(
name|cacheEntry
operator|->
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|&&
name|e
operator|->
name|aliased
condition|)
return|return
name|e
operator|->
name|aliased
return|;
elseif|else
if|if
condition|(
operator|!
name|alias
operator|&&
name|e
operator|->
name|antiAliased
condition|)
return|return
name|e
operator|->
name|antiAliased
return|;
block|}
name|Direct2DPathGeometryWriter
name|writer
decl_stmt|;
if|if
condition|(
operator|!
name|writer
operator|.
name|begin
argument_list|()
condition|)
return|return
name|NULL
return|;
name|writer
operator|.
name|setWindingFillEnabled
argument_list|(
name|path
operator|.
name|hasWindingFill
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setAliasingEnabled
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setPositiveSlopeAdjustmentEnabled
argument_list|(
name|path
operator|.
name|shape
argument_list|()
operator|==
name|QVectorPath
operator|::
name|LinesHint
operator|||
name|path
operator|.
name|shape
argument_list|()
operator|==
name|QVectorPath
operator|::
name|PolygonHint
argument_list|)
expr_stmt|;
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|types
init|=
name|path
operator|.
name|elements
argument_list|()
decl_stmt|;
specifier|const
name|int
name|count
init|=
name|path
operator|.
name|elementCount
argument_list|()
decl_stmt|;
specifier|const
name|qreal
modifier|*
name|points
init|=
name|path
operator|.
name|points
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|points
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
condition|)
block|{
name|qreal
name|x
decl_stmt|,
name|y
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|x
operator|=
name|points
index|[
name|i
operator|*
literal|2
index|]
expr_stmt|;
name|y
operator|=
name|points
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
expr_stmt|;
switch|switch
condition|(
name|types
index|[
name|i
index|]
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
name|writer
operator|.
name|moveTo
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|writer
operator|.
name|lineTo
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
name|Q_ASSERT
argument_list|(
operator|(
name|i
operator|+
literal|2
operator|)
operator|<
name|count
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|types
index|[
name|i
operator|+
literal|1
index|]
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|types
index|[
name|i
operator|+
literal|2
index|]
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
specifier|const
name|qreal
name|x2
init|=
name|points
index|[
name|i
operator|*
literal|2
index|]
decl_stmt|;
specifier|const
name|qreal
name|y2
init|=
name|points
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|i
operator|++
expr_stmt|;
specifier|const
name|qreal
name|x3
init|=
name|points
index|[
name|i
operator|*
literal|2
index|]
decl_stmt|;
specifier|const
name|qreal
name|y3
init|=
name|points
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|writer
operator|.
name|curveTo
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToDataElement
case|:
name|qWarning
argument_list|(
literal|"%s: Unhandled Curve Data Element"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|writer
operator|.
name|moveTo
argument_list|(
name|QPointF
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|lineTo
argument_list|(
name|QPointF
argument_list|(
name|points
index|[
name|i
operator|*
literal|2
index|]
argument_list|,
name|points
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|.
name|isInFigure
argument_list|()
condition|)
if|if
condition|(
name|path
operator|.
name|hasImplicitClose
argument_list|()
condition|)
name|writer
operator|.
name|lineTo
argument_list|(
name|QPointF
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|geometry
init|=
name|writer
operator|.
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isCacheable
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|cacheEntry
condition|)
name|cacheEntry
operator|=
name|path
operator|.
name|addCacheData
argument_list|(
name|q
argument_list|,
operator|new
name|D2DVectorPathCache
argument_list|,
name|D2DVectorPathCache
operator|::
name|cleanup_func
argument_list|)
expr_stmt|;
name|D2DVectorPathCache
modifier|*
name|e
init|=
cast|static_cast
argument_list|<
name|D2DVectorPathCache
operator|*
argument_list|>
argument_list|(
name|cacheEntry
operator|->
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
condition|)
name|e
operator|->
name|aliased
operator|=
name|geometry
expr_stmt|;
else|else
name|e
operator|->
name|antiAliased
operator|=
name|geometry
expr_stmt|;
block|}
else|else
block|{
name|path
operator|.
name|makeCacheable
argument_list|()
expr_stmt|;
block|}
return|return
name|geometry
return|;
block|}
DECL|function|updateHints
name|void
name|updateHints
parameter_list|()
block|{
name|dc
argument_list|()
operator|->
name|SetAntialiasMode
argument_list|(
name|antialiasMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|drawGlyphRun
name|void
name|drawGlyphRun
parameter_list|(
specifier|const
name|D2D1_POINT_2F
modifier|&
name|pos
parameter_list|,
name|IDWriteFontFace
modifier|*
name|fontFace
parameter_list|,
specifier|const
name|QFontDef
modifier|&
name|fontDef
parameter_list|,
name|int
name|numGlyphs
parameter_list|,
specifier|const
name|UINT16
modifier|*
name|glyphIndices
parameter_list|,
specifier|const
name|FLOAT
modifier|*
name|glyphAdvances
parameter_list|,
specifier|const
name|DWRITE_GLYPH_OFFSET
modifier|*
name|glyphOffsets
parameter_list|,
name|bool
name|rtl
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|DWRITE_GLYPH_RUN
name|glyphRun
init|=
block|{
name|fontFace
block|,
comment|//    IDWriteFontFace           *fontFace;
name|fontDef
operator|.
name|pixelSize
block|,
comment|//    FLOAT                     fontEmSize;
name|numGlyphs
block|,
comment|//    UINT32                    glyphCount;
name|glyphIndices
block|,
comment|//    const UINT16              *glyphIndices;
name|glyphAdvances
block|,
comment|//    const FLOAT               *glyphAdvances;
name|glyphOffsets
block|,
comment|//    const DWRITE_GLYPH_OFFSET *glyphOffsets;
name|FALSE
block|,
comment|//    BOOL                      isSideways;
name|rtl
operator|?
literal|1
operator|:
literal|0
comment|//    UINT32                    bidiLevel;
block|}
decl_stmt|;
specifier|const
name|bool
name|antiAlias
init|=
name|bool
argument_list|(
operator|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|TextAntialiasing
operator|)
operator|&&
operator|!
operator|(
name|fontDef
operator|.
name|styleStrategy
operator|&
name|QFont
operator|::
name|NoAntialias
operator|)
argument_list|)
decl_stmt|;
specifier|const
name|D2D1_TEXT_ANTIALIAS_MODE
name|antialiasMode
init|=
operator|(
name|flags
operator|&
name|QWindowsDirect2DPaintEngine
operator|::
name|TranslucentTopLevelWindow
operator|)
condition|?
name|D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE
else|:
name|D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE
decl_stmt|;
name|dc
argument_list|()
operator|->
name|SetTextAntialiasMode
argument_list|(
name|antiAlias
condition|?
name|antialiasMode
else|:
name|D2D1_TEXT_ANTIALIAS_MODE_ALIASED
argument_list|)
expr_stmt|;
name|dc
argument_list|()
operator|->
name|DrawGlyphRun
argument_list|(
name|pos
argument_list|,
operator|&
name|glyphRun
argument_list|,
name|NULL
argument_list|,
name|pen
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|,
name|DWRITE_MEASURING_MODE_GDI_CLASSIC
argument_list|)
expr_stmt|;
block|}
DECL|function|stroke
name|void
name|stroke
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
comment|// Default path (no optimization)
if|if
condition|(
operator|!
operator|(
name|path
operator|.
name|shape
argument_list|()
operator|==
name|QVectorPath
operator|::
name|LinesHint
operator|||
name|path
operator|.
name|shape
argument_list|()
operator|==
name|QVectorPath
operator|::
name|PolygonHint
operator|)
operator|||
operator|!
name|pen
operator|.
name|dashBrush
operator|||
name|q
operator|->
name|state
argument_list|()
operator|->
name|renderHints
operator|.
name|testFlag
argument_list|(
name|QPainter
operator|::
name|HighQualityAntialiasing
argument_list|)
condition|)
block|{
name|ComPtr
argument_list|<
name|ID2D1Geometry
argument_list|>
name|geometry
init|=
name|vectorPathToID2D1PathGeometry
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|geometry
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not convert path to d2d geometry"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|dc
argument_list|()
operator|->
name|DrawGeometry
argument_list|(
name|geometry
operator|.
name|Get
argument_list|()
argument_list|,
name|pen
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|,
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
argument_list|,
name|pen
operator|.
name|strokeStyle
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Optimized dash line drawing
specifier|const
name|bool
name|isPolygon
init|=
name|path
operator|.
name|shape
argument_list|()
operator|==
name|QVectorPath
operator|::
name|PolygonHint
operator|&&
name|path
operator|.
name|elementCount
argument_list|()
operator|>=
literal|3
decl_stmt|;
specifier|const
name|bool
name|implicitClose
init|=
name|isPolygon
operator|&&
operator|(
name|path
operator|.
name|hints
argument_list|()
operator|&
name|QVectorPath
operator|::
name|ImplicitClose
operator|)
decl_stmt|;
specifier|const
name|bool
name|skipJoin
init|=
operator|!
name|isPolygon
comment|// Non-polygons don't require joins
operator|||
operator|(
name|pen
operator|.
name|qpen
operator|.
name|joinStyle
argument_list|()
operator|==
name|Qt
operator|::
name|MiterJoin
operator|&&
name|qFuzzyIsNull
argument_list|(
name|pen
operator|.
name|qpen
operator|.
name|miterLimit
argument_list|()
argument_list|)
operator|)
decl_stmt|;
specifier|const
name|qreal
modifier|*
name|points
init|=
name|path
operator|.
name|points
argument_list|()
decl_stmt|;
specifier|const
name|int
name|lastElement
init|=
name|path
operator|.
name|elementCount
argument_list|()
operator|-
operator|(
name|implicitClose
condition|?
literal|1
else|:
literal|2
operator|)
decl_stmt|;
name|qreal
name|dashOffset
init|=
literal|0
decl_stmt|;
name|QPointF
name|jointStart
decl_stmt|;
name|ID2D1Brush
modifier|*
name|brush
init|=
name|pen
operator|.
name|dashBrush
condition|?
name|pen
operator|.
name|dashBrush
operator|.
name|Get
argument_list|()
else|:
name|pen
operator|.
name|brush
operator|.
name|Get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|lastElement
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|p1
argument_list|(
name|points
index|[
name|i
operator|*
literal|2
index|]
argument_list|,
name|points
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|QPointF
name|p2
init|=
name|implicitClose
operator|&&
name|i
operator|==
name|lastElement
condition|?
name|QPointF
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
else|:
name|QPointF
argument_list|(
name|points
index|[
name|i
operator|*
literal|2
operator|+
literal|2
index|]
argument_list|,
name|points
index|[
name|i
operator|*
literal|2
operator|+
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isPolygon
condition|)
comment|// Advance the count for lines
operator|++
name|i
expr_stmt|;
comment|// Match raster engine output
if|if
condition|(
name|p1
operator|==
name|p2
operator|&&
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
operator|<=
literal|1.0
condition|)
block|{
name|q
operator|->
name|fillRect
argument_list|(
name|QRectF
argument_list|(
name|p1
argument_list|,
name|QSizeF
argument_list|(
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
argument_list|,
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|pen
operator|.
name|qpen
operator|.
name|brush
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|antiAliasingEnabled
argument_list|()
condition|)
name|adjustLine
argument_list|(
operator|&
name|p1
argument_list|,
operator|&
name|p2
argument_list|)
expr_stmt|;
name|q
operator|->
name|adjustForAliasing
argument_list|(
operator|&
name|p1
argument_list|)
expr_stmt|;
name|q
operator|->
name|adjustForAliasing
argument_list|(
operator|&
name|p2
argument_list|)
expr_stmt|;
specifier|const
name|QLineF
name|line
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
specifier|const
name|qreal
name|lineLength
init|=
name|line
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|pen
operator|.
name|dashBrush
condition|)
block|{
name|pen
operator|.
name|dashBrush
operator|->
name|SetTransform
argument_list|(
name|transformFromLine
argument_list|(
name|line
argument_list|,
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
argument_list|,
name|dashOffset
argument_list|)
argument_list|)
expr_stmt|;
name|dashOffset
operator|=
name|pen
operator|.
name|dashLength
operator|-
name|fmod
argument_list|(
name|lineLength
operator|-
name|dashOffset
argument_list|,
name|pen
operator|.
name|dashLength
argument_list|)
expr_stmt|;
block|}
name|dc
argument_list|()
operator|->
name|DrawLine
argument_list|(
name|to_d2d_point_2f
argument_list|(
name|p1
argument_list|)
argument_list|,
name|to_d2d_point_2f
argument_list|(
name|p2
argument_list|)
argument_list|,
name|brush
argument_list|,
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|skipJoin
condition|)
continue|continue;
comment|// Patch the join with the original brush
specifier|const
name|qreal
name|patchSegment
init|=
name|pen
operator|.
name|dashBrush
condition|?
name|qBound
argument_list|(
literal|0.0
argument_list|,
operator|(
name|pen
operator|.
name|dashLength
operator|-
name|dashOffset
operator|)
operator|/
name|lineLength
argument_list|,
literal|1.0
argument_list|)
else|:
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|Direct2DPathGeometryWriter
name|writer
decl_stmt|;
name|writer
operator|.
name|begin
argument_list|()
expr_stmt|;
name|writer
operator|.
name|moveTo
argument_list|(
name|jointStart
argument_list|)
expr_stmt|;
name|writer
operator|.
name|lineTo
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|lineTo
argument_list|(
name|line
operator|.
name|pointAt
argument_list|(
name|patchSegment
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dc
argument_list|()
operator|->
name|DrawGeometry
argument_list|(
name|writer
operator|.
name|geometry
argument_list|()
operator|.
name|Get
argument_list|()
argument_list|,
name|pen
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|,
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
argument_list|,
name|pen
operator|.
name|strokeStyle
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Record the start position of the next joint
name|jointStart
operator|=
name|line
operator|.
name|pointAt
argument_list|(
literal|1
operator|-
name|patchSegment
argument_list|)
expr_stmt|;
if|if
condition|(
name|implicitClose
operator|&&
name|i
operator|==
name|lastElement
condition|)
block|{
comment|// Close the polygon
name|Direct2DPathGeometryWriter
name|writer
decl_stmt|;
name|writer
operator|.
name|begin
argument_list|()
expr_stmt|;
name|writer
operator|.
name|moveTo
argument_list|(
name|jointStart
argument_list|)
expr_stmt|;
name|writer
operator|.
name|lineTo
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|lineTo
argument_list|(
name|QLineF
argument_list|(
name|p2
argument_list|,
name|QPointF
argument_list|(
name|points
index|[
literal|2
index|]
argument_list|,
name|points
index|[
literal|3
index|]
argument_list|)
argument_list|)
operator|.
name|pointAt
argument_list|(
name|patchSegment
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dc
argument_list|()
operator|->
name|DrawGeometry
argument_list|(
name|writer
operator|.
name|geometry
argument_list|()
operator|.
name|Get
argument_list|()
argument_list|,
name|pen
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|,
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
argument_list|,
name|pen
operator|.
name|strokeStyle
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|fontFaceFromFontEngine
name|ComPtr
argument_list|<
name|IDWriteFontFace
argument_list|>
name|fontFaceFromFontEngine
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|)
block|{
specifier|const
name|QFontDef
name|fontDef
init|=
name|fe
operator|->
name|fontDef
decl_stmt|;
name|ComPtr
argument_list|<
name|IDWriteFontFace
argument_list|>
name|fontFace
init|=
name|fontCache
operator|.
name|value
argument_list|(
name|fontDef
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontFace
condition|)
return|return
name|fontFace
return|;
name|LOGFONT
name|lf
init|=
name|QWindowsFontDatabase
operator|::
name|fontDefToLOGFONT
argument_list|(
name|fontDef
argument_list|)
decl_stmt|;
comment|// Get substitute name
specifier|static
specifier|const
name|char
name|keyC
index|[]
init|=
literal|"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\FontSubstitutes"
decl_stmt|;
specifier|const
name|QString
name|familyName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|nameSubstitute
init|=
name|QSettings
argument_list|(
name|QLatin1String
argument_list|(
name|keyC
argument_list|)
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|value
argument_list|(
name|familyName
argument_list|,
name|familyName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameSubstitute
operator|!=
name|familyName
condition|)
block|{
specifier|const
name|int
name|nameSubstituteLength
init|=
name|qMin
argument_list|(
name|nameSubstitute
operator|.
name|length
argument_list|()
argument_list|,
name|LF_FACESIZE
operator|-
literal|1
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|lf
operator|.
name|lfFaceName
argument_list|,
name|nameSubstitute
operator|.
name|utf16
argument_list|()
argument_list|,
name|nameSubstituteLength
operator|*
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
expr_stmt|;
name|lf
operator|.
name|lfFaceName
index|[
name|nameSubstituteLength
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|ComPtr
argument_list|<
name|IDWriteFont
argument_list|>
name|dwriteFont
decl_stmt|;
name|HRESULT
name|hr
init|=
name|QWindowsDirect2DContext
operator|::
name|instance
argument_list|()
operator|->
name|dwriteGdiInterop
argument_list|()
operator|->
name|CreateFontFromLOGFONT
argument_list|(
operator|&
name|lf
argument_list|,
operator|&
name|dwriteFont
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"%s: CreateFontFromLOGFONT failed: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
name|fontFace
return|;
block|}
name|hr
operator|=
name|dwriteFont
operator|->
name|CreateFontFace
argument_list|(
operator|&
name|fontFace
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"%s: CreateFontFace failed: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
name|fontFace
return|;
block|}
if|if
condition|(
name|fontFace
condition|)
name|fontCache
operator|.
name|insert
argument_list|(
name|fontDef
argument_list|,
name|fontFace
argument_list|)
expr_stmt|;
return|return
name|fontFace
return|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|QWindowsDirect2DPaintEngine
name|QWindowsDirect2DPaintEngine
operator|::
name|QWindowsDirect2DPaintEngine
parameter_list|(
name|QWindowsDirect2DBitmap
modifier|*
name|bitmap
parameter_list|,
name|Flags
name|flags
parameter_list|)
member_init_list|:
name|QPaintEngineEx
argument_list|(
operator|*
operator|(
operator|new
name|QWindowsDirect2DPaintEnginePrivate
argument_list|(
name|bitmap
argument_list|,
name|flags
argument_list|)
operator|)
argument_list|)
block|{
name|QPaintEngine
operator|::
name|PaintEngineFeatures
name|unsupported
init|=
comment|// As of 1.1 Direct2D does not natively support complex composition modes
comment|// However, using Direct2D effects that implement them should be possible
name|QPaintEngine
operator|::
name|PorterDuff
operator||
name|QPaintEngine
operator|::
name|BlendModes
operator||
name|QPaintEngine
operator|::
name|RasterOpModes
comment|// As of 1.1 Direct2D does not natively support perspective transforms
comment|// However, writing a custom effect that implements them should be possible
comment|// The built-in 3D transform effect unfortunately changes output image size, making
comment|// it unusable for us.
operator||
name|QPaintEngine
operator|::
name|PerspectiveTransform
decl_stmt|;
name|gccaps
operator|&=
operator|~
name|unsupported
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|begin
name|bool
name|QWindowsDirect2DPaintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|bitmap
operator|->
name|deviceContext
argument_list|()
operator|->
name|begin
argument_list|()
expr_stmt|;
name|d
operator|->
name|dc
argument_list|()
operator|->
name|SetTransform
argument_list|(
name|D2D1
operator|::
name|Matrix3x2F
operator|::
name|Identity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|systemClip
argument_list|()
operator|.
name|rectCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QPainterPath
name|p
decl_stmt|;
name|p
operator|.
name|addRegion
argument_list|(
name|systemClip
argument_list|()
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|geometry
init|=
name|d
operator|->
name|vectorPathToID2D1PathGeometry
argument_list|(
name|qtVectorPathForPath
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|geometry
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|dc
argument_list|()
operator|->
name|PushLayer
argument_list|(
name|D2D1
operator|::
name|LayerParameters1
argument_list|(
name|D2D1
operator|::
name|InfiniteRect
argument_list|()
argument_list|,
name|geometry
operator|.
name|Get
argument_list|()
argument_list|,
name|d
operator|->
name|antialiasMode
argument_list|()
argument_list|,
name|D2D1
operator|::
name|IdentityMatrix
argument_list|()
argument_list|,
literal|1.0
argument_list|,
name|NULL
argument_list|,
name|d
operator|->
name|layerOptions
argument_list|()
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|clip
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pdev
operator|->
name|width
argument_list|()
argument_list|,
name|pdev
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|systemClip
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|clip
operator|&=
name|systemClip
argument_list|()
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
name|d
operator|->
name|dc
argument_list|()
operator|->
name|PushAxisAlignedClip
argument_list|(
name|to_d2d_rect_f
argument_list|(
name|clip
argument_list|)
argument_list|,
name|D2D1_ANTIALIAS_MODE_ALIASED
argument_list|)
expr_stmt|;
name|d
operator|->
name|clipFlags
operator||=
name|SimpleSystemClip
expr_stmt|;
block|}
name|D2D_TAG
argument_list|(
name|D2DDebugDrawInitialStateTag
argument_list|)
expr_stmt|;
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QWindowsDirect2DPaintEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
comment|// Always clear all emulation-related things so we are in a clean state for our next painting run
specifier|const
name|bool
name|emulatingComposition
init|=
name|d
operator|->
name|flags
operator|.
name|testFlag
argument_list|(
name|EmulateComposition
argument_list|)
decl_stmt|;
name|d
operator|->
name|flags
operator|&=
operator|~
name|QWindowsDirect2DPaintEngine
operator|::
name|EmulateComposition
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|fallbackImage
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|emulatingComposition
condition|)
name|drawImage
argument_list|(
name|d
operator|->
name|fallbackImage
operator|.
name|rect
argument_list|()
argument_list|,
name|d
operator|->
name|fallbackImage
argument_list|,
name|d
operator|->
name|fallbackImage
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|fallbackImage
operator|=
name|QImage
argument_list|()
expr_stmt|;
block|}
comment|// Pop any user-applied clipping
name|d
operator|->
name|clearClips
argument_list|()
expr_stmt|;
comment|// Now the system clip from begin() above
if|if
condition|(
name|d
operator|->
name|clipFlags
operator|&
name|SimpleSystemClip
condition|)
block|{
name|d
operator|->
name|dc
argument_list|()
operator|->
name|PopAxisAlignedClip
argument_list|()
expr_stmt|;
name|d
operator|->
name|clipFlags
operator|&=
operator|~
name|SimpleSystemClip
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|dc
argument_list|()
operator|->
name|PopLayer
argument_list|()
expr_stmt|;
block|}
return|return
name|d
operator|->
name|bitmap
operator|->
name|deviceContext
argument_list|()
operator|->
name|end
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|type
name|QPaintEngine
operator|::
name|Type
name|QWindowsDirect2DPaintEngine
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QPaintEngine
operator|::
name|Direct2D
return|;
block|}
end_function
begin_function
DECL|function|setState
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|setState
parameter_list|(
name|QPainterState
modifier|*
name|s
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|QPaintEngineEx
operator|::
name|setState
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|d
operator|->
name|clearClips
argument_list|()
expr_stmt|;
name|clipEnabledChanged
argument_list|()
expr_stmt|;
name|penChanged
argument_list|()
expr_stmt|;
name|brushChanged
argument_list|()
expr_stmt|;
name|brushOriginChanged
argument_list|()
expr_stmt|;
name|opacityChanged
argument_list|()
expr_stmt|;
name|compositionModeChanged
argument_list|()
expr_stmt|;
name|renderHintsChanged
argument_list|()
expr_stmt|;
name|transformChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|draw
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|)
block|{
specifier|const
name|QBrush
modifier|&
name|brush
init|=
name|state
argument_list|()
operator|->
name|brush
decl_stmt|;
if|if
condition|(
name|qbrush_style
argument_list|(
name|brush
argument_list|)
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
if|if
condition|(
name|emulationRequired
argument_list|(
name|BrushEmulation
argument_list|)
condition|)
name|rasterFill
argument_list|(
name|path
argument_list|,
name|brush
argument_list|)
expr_stmt|;
else|else
name|fill
argument_list|(
name|path
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QPen
modifier|&
name|pen
init|=
name|state
argument_list|()
operator|->
name|pen
decl_stmt|;
if|if
condition|(
name|qpen_style
argument_list|(
name|pen
argument_list|)
operator|!=
name|Qt
operator|::
name|NoPen
operator|&&
name|qbrush_style
argument_list|(
name|qpen_brush
argument_list|(
name|pen
argument_list|)
argument_list|)
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
if|if
condition|(
name|emulationRequired
argument_list|(
name|PenEmulation
argument_list|)
condition|)
name|QPaintEngineEx
operator|::
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
else|else
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fill
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|fill
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugFillTag
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ensureBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
name|emulationRequired
argument_list|(
name|BrushEmulation
argument_list|)
condition|)
block|{
name|rasterFill
argument_list|(
name|path
argument_list|,
name|brush
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|brush
operator|.
name|brush
condition|)
return|return;
name|ComPtr
argument_list|<
name|ID2D1Geometry
argument_list|>
name|geometry
init|=
name|d
operator|->
name|vectorPathToID2D1PathGeometry
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|geometry
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not convert path to d2d geometry"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|dc
argument_list|()
operator|->
name|FillGeometry
argument_list|(
name|geometry
operator|.
name|Get
argument_list|()
argument_list|,
name|d
operator|->
name|brush
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stroke
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|stroke
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugFillTag
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ensurePen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
if|if
condition|(
name|emulationRequired
argument_list|(
name|PenEmulation
argument_list|)
condition|)
block|{
name|QPaintEngineEx
operator|::
name|stroke
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|pen
operator|.
name|brush
condition|)
return|return;
name|d
operator|->
name|stroke
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|clip
argument_list|(
name|path
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clipEnabledChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|clipEnabledChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateClipEnabled
argument_list|(
name|state
argument_list|()
operator|->
name|clipEnabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|penChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|penChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updatePen
argument_list|(
name|state
argument_list|()
operator|->
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|brushChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|brushChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateBrush
argument_list|(
name|state
argument_list|()
operator|->
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|brushOriginChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|brushOriginChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateBrushOrigin
argument_list|(
name|state
argument_list|()
operator|->
name|brushOrigin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|opacityChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|opacityChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateOpacity
argument_list|(
name|state
argument_list|()
operator|->
name|opacity
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compositionModeChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|compositionModeChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateCompositionMode
argument_list|(
name|state
argument_list|()
operator|->
name|compositionMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderHintsChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|renderHintsChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateHints
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transformChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|transformChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateTransform
argument_list|(
name|state
argument_list|()
operator|->
name|transform
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillRect
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|fillRect
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugFillRectTag
argument_list|)
expr_stmt|;
name|ensureBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
name|emulationRequired
argument_list|(
name|BrushEmulation
argument_list|)
condition|)
block|{
name|QPaintEngineEx
operator|::
name|fillRect
argument_list|(
name|rect
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRectF
name|r
init|=
name|rect
operator|.
name|normalized
argument_list|()
decl_stmt|;
name|adjustForAliasing
argument_list|(
operator|&
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|brush
operator|.
name|brush
condition|)
name|d
operator|->
name|dc
argument_list|()
operator|->
name|FillRectangle
argument_list|(
name|to_d2d_rect_f
argument_list|(
name|rect
argument_list|)
argument_list|,
name|d
operator|->
name|brush
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRect
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawRectsTag
argument_list|)
expr_stmt|;
name|ensureBrush
argument_list|()
expr_stmt|;
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
name|emulationRequired
argument_list|(
name|BrushEmulation
argument_list|)
operator|||
name|emulationRequired
argument_list|(
name|PenEmulation
argument_list|)
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRectF
name|rect
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
name|i
operator|++
control|)
block|{
name|rect
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|normalized
argument_list|()
expr_stmt|;
name|adjustForAliasing
argument_list|(
operator|&
name|rect
argument_list|)
expr_stmt|;
name|D2D1_RECT_F
name|d2d_rect
init|=
name|to_d2d_rect_f
argument_list|(
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|brush
operator|.
name|brush
condition|)
name|d
operator|->
name|dc
argument_list|()
operator|->
name|FillRectangle
argument_list|(
name|d2d_rect
argument_list|,
name|d
operator|->
name|brush
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pen
operator|.
name|brush
condition|)
name|d
operator|->
name|dc
argument_list|()
operator|->
name|DrawRectangle
argument_list|(
name|d2d_rect
argument_list|,
name|d
operator|->
name|pen
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|,
name|d
operator|->
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
argument_list|,
name|d
operator|->
name|pen
operator|.
name|strokeStyle
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|drawRects
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawRects
parameter_list|(
specifier|const
name|QRectF
modifier|*
name|rects
parameter_list|,
name|int
name|rectCount
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawRectFsTag
argument_list|)
expr_stmt|;
name|ensureBrush
argument_list|()
expr_stmt|;
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
name|emulationRequired
argument_list|(
name|BrushEmulation
argument_list|)
operator|||
name|emulationRequired
argument_list|(
name|PenEmulation
argument_list|)
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawRects
argument_list|(
name|rects
argument_list|,
name|rectCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRectF
name|rect
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rectCount
condition|;
name|i
operator|++
control|)
block|{
name|rect
operator|=
name|rects
index|[
name|i
index|]
operator|.
name|normalized
argument_list|()
expr_stmt|;
name|adjustForAliasing
argument_list|(
operator|&
name|rect
argument_list|)
expr_stmt|;
name|D2D1_RECT_F
name|d2d_rect
init|=
name|to_d2d_rect_f
argument_list|(
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|brush
operator|.
name|brush
condition|)
name|d
operator|->
name|dc
argument_list|()
operator|->
name|FillRectangle
argument_list|(
name|d2d_rect
argument_list|,
name|d
operator|->
name|brush
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pen
operator|.
name|brush
condition|)
name|d
operator|->
name|dc
argument_list|()
operator|->
name|DrawRectangle
argument_list|(
name|d2d_rect
argument_list|,
name|d
operator|->
name|pen
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|,
name|d
operator|->
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
argument_list|,
name|d
operator|->
name|pen
operator|.
name|strokeStyle
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|isLinePositivelySloped
specifier|static
name|bool
name|isLinePositivelySloped
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p1
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p2
operator|.
name|x
argument_list|()
operator|>
name|p1
operator|.
name|x
argument_list|()
condition|)
return|return
name|p2
operator|.
name|y
argument_list|()
operator|<
name|p1
operator|.
name|y
argument_list|()
return|;
if|if
condition|(
name|p1
operator|.
name|x
argument_list|()
operator|>
name|p2
operator|.
name|x
argument_list|()
condition|)
return|return
name|p1
operator|.
name|y
argument_list|()
operator|<
name|p2
operator|.
name|y
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|adjustLine
specifier|static
name|void
name|adjustLine
parameter_list|(
name|QPointF
modifier|*
name|p1
parameter_list|,
name|QPointF
modifier|*
name|p2
parameter_list|)
block|{
if|if
condition|(
name|isLinePositivelySloped
argument_list|(
operator|*
name|p1
argument_list|,
operator|*
name|p2
argument_list|)
condition|)
block|{
name|p1
operator|->
name|ry
argument_list|()
operator|-=
name|qreal
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|p2
operator|->
name|ry
argument_list|()
operator|-=
name|qreal
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawEllipse
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawEllipseFTag
argument_list|)
expr_stmt|;
name|ensureBrush
argument_list|()
expr_stmt|;
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
name|emulationRequired
argument_list|(
name|BrushEmulation
argument_list|)
operator|||
name|emulationRequired
argument_list|(
name|PenEmulation
argument_list|)
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawEllipse
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPointF
name|p
init|=
name|r
operator|.
name|center
argument_list|()
decl_stmt|;
name|adjustForAliasing
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|D2D1_ELLIPSE
name|ellipse
init|=
block|{
name|to_d2d_point_2f
argument_list|(
name|p
argument_list|)
block|,
name|r
operator|.
name|width
argument_list|()
operator|/
literal|2.0
block|,
name|r
operator|.
name|height
argument_list|()
operator|/
literal|2.0
block|}
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|brush
operator|.
name|brush
condition|)
name|d
operator|->
name|dc
argument_list|()
operator|->
name|FillEllipse
argument_list|(
name|ellipse
argument_list|,
name|d
operator|->
name|brush
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pen
operator|.
name|brush
condition|)
name|d
operator|->
name|dc
argument_list|()
operator|->
name|DrawEllipse
argument_list|(
name|ellipse
argument_list|,
name|d
operator|->
name|pen
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|,
name|d
operator|->
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
argument_list|,
name|d
operator|->
name|pen
operator|.
name|strokeStyle
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawEllipse
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawEllipse
parameter_list|(
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawEllipseTag
argument_list|)
expr_stmt|;
name|ensureBrush
argument_list|()
expr_stmt|;
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
name|emulationRequired
argument_list|(
name|BrushEmulation
argument_list|)
operator|||
name|emulationRequired
argument_list|(
name|PenEmulation
argument_list|)
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawEllipse
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPointF
name|p
init|=
name|r
operator|.
name|center
argument_list|()
decl_stmt|;
name|adjustForAliasing
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|D2D1_ELLIPSE
name|ellipse
init|=
block|{
name|to_d2d_point_2f
argument_list|(
name|p
argument_list|)
block|,
name|r
operator|.
name|width
argument_list|()
operator|/
literal|2.0
block|,
name|r
operator|.
name|height
argument_list|()
operator|/
literal|2.0
block|}
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|brush
operator|.
name|brush
condition|)
name|d
operator|->
name|dc
argument_list|()
operator|->
name|FillEllipse
argument_list|(
name|ellipse
argument_list|,
name|d
operator|->
name|brush
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pen
operator|.
name|brush
condition|)
name|d
operator|->
name|dc
argument_list|()
operator|->
name|DrawEllipse
argument_list|(
name|ellipse
argument_list|,
name|d
operator|->
name|pen
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|,
name|d
operator|->
name|pen
operator|.
name|qpen
operator|.
name|widthF
argument_list|()
argument_list|,
name|d
operator|->
name|pen
operator|.
name|strokeStyle
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rectangle
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawImageTag
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|drawPixmap
argument_list|(
name|rectangle
argument_list|,
name|pixmap
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawPixmapTag
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
return|return;
if|if
condition|(
name|pm
operator|.
name|handle
argument_list|()
operator|->
name|pixelType
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|BitmapType
condition|)
block|{
name|QImage
name|i
init|=
name|pm
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|i
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|d
operator|->
name|pen
operator|.
name|qpen
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|drawImage
argument_list|(
name|r
argument_list|,
name|i
argument_list|,
name|sr
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|flags
operator|.
name|testFlag
argument_list|(
name|EmulateComposition
argument_list|)
condition|)
block|{
specifier|const
name|qreal
name|points
index|[]
init|=
block|{
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|width
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
block|,
name|r
operator|.
name|x
argument_list|()
block|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
specifier|const
name|QVectorPath
name|vp
argument_list|(
name|points
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
argument_list|)
decl_stmt|;
name|QBrush
name|brush
argument_list|(
name|sr
operator|.
name|isValid
argument_list|()
condition|?
name|pm
operator|.
name|copy
argument_list|(
name|sr
operator|.
name|toRect
argument_list|()
argument_list|)
else|:
name|pm
argument_list|)
decl_stmt|;
name|brush
operator|.
name|setTransform
argument_list|(
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rasterFill
argument_list|(
name|vp
argument_list|,
name|brush
argument_list|)
expr_stmt|;
return|return;
block|}
name|QWindowsDirect2DPlatformPixmap
modifier|*
name|pp
init|=
cast|static_cast
argument_list|<
name|QWindowsDirect2DPlatformPixmap
operator|*
argument_list|>
argument_list|(
name|pm
operator|.
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|QWindowsDirect2DBitmap
modifier|*
name|bitmap
init|=
name|pp
operator|->
name|bitmap
argument_list|()
decl_stmt|;
name|ensurePen
argument_list|()
expr_stmt|;
if|if
condition|(
name|bitmap
operator|->
name|bitmap
argument_list|()
operator|!=
name|d
operator|->
name|bitmap
operator|->
name|bitmap
argument_list|()
condition|)
block|{
comment|// Good, src bitmap != dst bitmap
if|if
condition|(
name|sr
operator|.
name|isValid
argument_list|()
condition|)
name|d
operator|->
name|dc
argument_list|()
operator|->
name|DrawBitmap
argument_list|(
name|bitmap
operator|->
name|bitmap
argument_list|()
argument_list|,
name|to_d2d_rect_f
argument_list|(
name|r
argument_list|)
argument_list|,
name|state
argument_list|()
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|interpolationMode
argument_list|()
argument_list|,
name|to_d2d_rect_f
argument_list|(
name|sr
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|dc
argument_list|()
operator|->
name|DrawBitmap
argument_list|(
name|bitmap
operator|->
name|bitmap
argument_list|()
argument_list|,
name|to_d2d_rect_f
argument_list|(
name|r
argument_list|)
argument_list|,
name|state
argument_list|()
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|interpolationMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Ok, so the source pixmap and destination pixmap is the same.
comment|// D2D is not fond of this scenario, deal with it through
comment|// an intermediate bitmap
name|QWindowsDirect2DBitmap
name|intermediate
decl_stmt|;
if|if
condition|(
name|sr
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|r
init|=
name|intermediate
operator|.
name|resize
argument_list|(
name|sr
operator|.
name|width
argument_list|()
argument_list|,
name|sr
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not resize intermediate bitmap to source rect size"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|D2D1_RECT_U
name|d2d_sr
init|=
name|to_d2d_rect_u
argument_list|(
name|sr
operator|.
name|toRect
argument_list|()
argument_list|)
decl_stmt|;
name|HRESULT
name|hr
init|=
name|intermediate
operator|.
name|bitmap
argument_list|()
operator|->
name|CopyFromBitmap
argument_list|(
name|NULL
argument_list|,
name|bitmap
operator|->
name|bitmap
argument_list|()
argument_list|,
operator|&
name|d2d_sr
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not copy source rect area from source bitmap to intermediate bitmap: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|bool
name|r
init|=
name|intermediate
operator|.
name|resize
argument_list|(
name|bitmap
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|bitmap
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not resize intermediate bitmap to source bitmap size"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|HRESULT
name|hr
init|=
name|intermediate
operator|.
name|bitmap
argument_list|()
operator|->
name|CopyFromBitmap
argument_list|(
name|NULL
argument_list|,
name|bitmap
operator|->
name|bitmap
argument_list|()
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not copy source bitmap to intermediate bitmap: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|d
operator|->
name|dc
argument_list|()
operator|->
name|DrawBitmap
argument_list|(
name|intermediate
operator|.
name|bitmap
argument_list|()
argument_list|,
name|to_d2d_rect_f
argument_list|(
name|r
argument_list|)
argument_list|,
name|state
argument_list|()
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|interpolationMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|drawStaticTextItem
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawStaticTextItem
parameter_list|(
name|QStaticTextItem
modifier|*
name|staticTextItem
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawStaticTextItemTag
argument_list|)
expr_stmt|;
if|if
condition|(
name|staticTextItem
operator|->
name|numGlyphs
operator|==
literal|0
condition|)
return|return;
name|ensurePen
argument_list|()
expr_stmt|;
comment|// If we can't support the current configuration with Direct2D, fall back to slow path
if|if
condition|(
name|emulationRequired
argument_list|(
name|PenEmulation
argument_list|)
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawStaticTextItem
argument_list|(
name|staticTextItem
argument_list|)
expr_stmt|;
return|return;
block|}
name|ComPtr
argument_list|<
name|IDWriteFontFace
argument_list|>
name|fontFace
init|=
name|d
operator|->
name|fontFaceFromFontEngine
argument_list|(
name|staticTextItem
operator|->
name|fontEngine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fontFace
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not find font - falling back to slow text rendering path."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|QPaintEngineEx
operator|::
name|drawStaticTextItem
argument_list|(
name|staticTextItem
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVarLengthArray
argument_list|<
name|UINT16
argument_list|>
name|glyphIndices
argument_list|(
name|staticTextItem
operator|->
name|numGlyphs
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|FLOAT
argument_list|>
name|glyphAdvances
argument_list|(
name|staticTextItem
operator|->
name|numGlyphs
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|DWRITE_GLYPH_OFFSET
argument_list|>
name|glyphOffsets
argument_list|(
name|staticTextItem
operator|->
name|numGlyphs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|staticTextItem
operator|->
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|glyphIndices
index|[
name|i
index|]
operator|=
name|UINT16
argument_list|(
name|staticTextItem
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Imperfect conversion here
comment|// This looks  a little funky because the positions are precalculated
name|glyphAdvances
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|glyphOffsets
index|[
name|i
index|]
operator|.
name|advanceOffset
operator|=
name|staticTextItem
operator|->
name|glyphPositions
index|[
name|i
index|]
operator|.
name|x
operator|.
name|toReal
argument_list|()
expr_stmt|;
comment|// Qt and Direct2D seem to disagree on the direction of the ascender offset...
name|glyphOffsets
index|[
name|i
index|]
operator|.
name|ascenderOffset
operator|=
name|staticTextItem
operator|->
name|glyphPositions
index|[
name|i
index|]
operator|.
name|y
operator|.
name|toReal
argument_list|()
operator|*
operator|-
literal|1
expr_stmt|;
block|}
name|d
operator|->
name|drawGlyphRun
argument_list|(
name|D2D1
operator|::
name|Point2F
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fontFace
operator|.
name|Get
argument_list|()
argument_list|,
name|staticTextItem
operator|->
name|fontEngine
argument_list|()
operator|->
name|fontDef
argument_list|,
name|staticTextItem
operator|->
name|numGlyphs
argument_list|,
name|glyphIndices
operator|.
name|constData
argument_list|()
argument_list|,
name|glyphAdvances
operator|.
name|constData
argument_list|()
argument_list|,
name|glyphOffsets
operator|.
name|constData
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawTextItemTag
argument_list|)
expr_stmt|;
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|textItem
argument_list|)
decl_stmt|;
if|if
condition|(
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
operator|==
literal|0
condition|)
return|return;
name|ensurePen
argument_list|()
expr_stmt|;
comment|// If we can't support the current configuration with Direct2D, fall back to slow path
if|if
condition|(
name|emulationRequired
argument_list|(
name|PenEmulation
argument_list|)
condition|)
block|{
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
return|return;
block|}
name|ComPtr
argument_list|<
name|IDWriteFontFace
argument_list|>
name|fontFace
init|=
name|d
operator|->
name|fontFaceFromFontEngine
argument_list|(
name|ti
operator|.
name|fontEngine
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fontFace
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not find font - falling back to slow text rendering path."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVarLengthArray
argument_list|<
name|UINT16
argument_list|>
name|glyphIndices
argument_list|(
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|FLOAT
argument_list|>
name|glyphAdvances
argument_list|(
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
argument_list|)
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|DWRITE_GLYPH_OFFSET
argument_list|>
name|glyphOffsets
argument_list|(
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|glyphIndices
index|[
name|i
index|]
operator|=
name|UINT16
argument_list|(
name|ti
operator|.
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Imperfect conversion here
name|glyphAdvances
index|[
name|i
index|]
operator|=
name|ti
operator|.
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|i
argument_list|)
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|glyphOffsets
index|[
name|i
index|]
operator|.
name|advanceOffset
operator|=
name|ti
operator|.
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
operator|.
name|toReal
argument_list|()
expr_stmt|;
comment|// XXX Should we negate the y value like for static text items?
name|glyphOffsets
index|[
name|i
index|]
operator|.
name|ascenderOffset
operator|=
name|ti
operator|.
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
operator|.
name|toReal
argument_list|()
expr_stmt|;
block|}
specifier|const
name|bool
name|rtl
init|=
operator|(
name|ti
operator|.
name|flags
operator|&
name|QTextItem
operator|::
name|RightToLeft
operator|)
decl_stmt|;
specifier|const
name|QPointF
name|offset
argument_list|(
name|rtl
condition|?
name|ti
operator|.
name|width
operator|.
name|toReal
argument_list|()
else|:
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|d
operator|->
name|drawGlyphRun
argument_list|(
name|to_d2d_point_2f
argument_list|(
name|p
operator|+
name|offset
argument_list|)
argument_list|,
name|fontFace
operator|.
name|Get
argument_list|()
argument_list|,
name|ti
operator|.
name|fontEngine
operator|->
name|fontDef
argument_list|,
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
argument_list|,
name|glyphIndices
operator|.
name|constData
argument_list|()
argument_list|,
name|glyphAdvances
operator|.
name|constData
argument_list|()
argument_list|,
name|glyphOffsets
operator|.
name|constData
argument_list|()
argument_list|,
name|rtl
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureBrush
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|ensureBrush
parameter_list|()
block|{
name|ensureBrush
argument_list|(
name|state
argument_list|()
operator|->
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureBrush
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|ensureBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensurePen
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|ensurePen
parameter_list|()
block|{
name|ensurePen
argument_list|(
name|state
argument_list|()
operator|->
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensurePen
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|ensurePen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updatePen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rasterFill
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|rasterFill
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|fallbackImage
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|flags
operator|.
name|testFlag
argument_list|(
name|EmulateComposition
argument_list|)
condition|)
block|{
name|QWindowsDirect2DPaintEngineSuspender
name|suspender
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|d
operator|->
name|fallbackImage
operator|=
name|d
operator|->
name|bitmap
operator|->
name|toImage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|fallbackImage
operator|=
name|QImage
argument_list|(
name|d
operator|->
name|bitmap
operator|->
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|d
operator|->
name|fallbackImage
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
block|}
block|}
name|QImage
modifier|&
name|img
init|=
name|d
operator|->
name|fallbackImage
decl_stmt|;
name|QPainter
name|p
decl_stmt|;
name|QPaintEngine
modifier|*
name|engine
init|=
name|img
operator|.
name|paintEngine
argument_list|()
decl_stmt|;
if|if
condition|(
name|engine
operator|->
name|isExtended
argument_list|()
operator|&&
name|p
operator|.
name|begin
argument_list|(
operator|&
name|img
argument_list|)
condition|)
block|{
name|p
operator|.
name|setRenderHints
argument_list|(
name|state
argument_list|()
operator|->
name|renderHints
argument_list|)
expr_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|state
argument_list|()
operator|->
name|compositionMode
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setOpacity
argument_list|(
name|state
argument_list|()
operator|->
name|opacity
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrushOrigin
argument_list|(
name|state
argument_list|()
operator|->
name|brushOrigin
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|state
argument_list|()
operator|->
name|brush
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|state
argument_list|()
operator|->
name|pen
argument_list|)
expr_stmt|;
name|QPaintEngineEx
modifier|*
name|extended
init|=
cast|static_cast
argument_list|<
name|QPaintEngineEx
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QPainterClipInfo
modifier|&
name|info
decl|,
name|state
argument_list|()
operator|->
name|clipInfo
control|)
block|{
name|extended
operator|->
name|state
argument_list|()
operator|->
name|matrix
operator|=
name|info
operator|.
name|matrix
expr_stmt|;
name|extended
operator|->
name|transformChanged
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|info
operator|.
name|clipType
condition|)
block|{
case|case
name|QPainterClipInfo
operator|::
name|RegionClip
case|:
name|extended
operator|->
name|clip
argument_list|(
name|info
operator|.
name|region
argument_list|,
name|info
operator|.
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterClipInfo
operator|::
name|PathClip
case|:
name|extended
operator|->
name|clip
argument_list|(
name|info
operator|.
name|path
argument_list|,
name|info
operator|.
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterClipInfo
operator|::
name|RectClip
case|:
name|extended
operator|->
name|clip
argument_list|(
name|info
operator|.
name|rect
argument_list|,
name|info
operator|.
name|operation
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterClipInfo
operator|::
name|RectFClip
case|:
name|qreal
name|right
init|=
name|info
operator|.
name|rectf
operator|.
name|x
argument_list|()
operator|+
name|info
operator|.
name|rectf
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|bottom
init|=
name|info
operator|.
name|rectf
operator|.
name|y
argument_list|()
operator|+
name|info
operator|.
name|rectf
operator|.
name|height
argument_list|()
decl_stmt|;
name|qreal
name|pts
index|[]
init|=
block|{
name|info
operator|.
name|rectf
operator|.
name|x
argument_list|()
block|,
name|info
operator|.
name|rectf
operator|.
name|y
argument_list|()
block|,
name|right
block|,
name|info
operator|.
name|rectf
operator|.
name|y
argument_list|()
block|,
name|right
block|,
name|bottom
block|,
name|info
operator|.
name|rectf
operator|.
name|x
argument_list|()
block|,
name|bottom
block|}
decl_stmt|;
name|QVectorPath
name|vp
argument_list|(
name|pts
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|QVectorPath
operator|::
name|RectangleHint
argument_list|)
decl_stmt|;
name|extended
operator|->
name|clip
argument_list|(
name|vp
argument_list|,
name|info
operator|.
name|operation
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|extended
operator|->
name|state
argument_list|()
operator|->
name|matrix
operator|=
name|state
argument_list|()
operator|->
name|matrix
expr_stmt|;
name|extended
operator|->
name|transformChanged
argument_list|()
expr_stmt|;
name|extended
operator|->
name|fill
argument_list|(
name|path
argument_list|,
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|end
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"%s: Paint Engine end returned false"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|flags
operator|.
name|testFlag
argument_list|(
name|EmulateComposition
argument_list|)
condition|)
block|{
comment|// Emulated fallback will be flattened in end()
name|d
operator|->
name|updateClipEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
name|drawImage
argument_list|(
name|img
operator|.
name|rect
argument_list|()
argument_list|,
name|img
argument_list|,
name|img
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|fallbackImage
operator|=
name|QImage
argument_list|()
expr_stmt|;
name|transformChanged
argument_list|()
expr_stmt|;
name|clipEnabledChanged
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"%s: Could not fall back to QImage"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|emulationRequired
name|bool
name|QWindowsDirect2DPaintEngine
operator|::
name|emulationRequired
parameter_list|(
name|EmulationType
name|type
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|flags
operator|.
name|testFlag
argument_list|(
name|EmulateComposition
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|state
argument_list|()
operator|->
name|matrix
operator|.
name|isAffine
argument_list|()
condition|)
return|return
literal|true
return|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|PenEmulation
case|:
return|return
name|d
operator|->
name|pen
operator|.
name|emulate
return|;
break|break;
case|case
name|BrushEmulation
case|:
return|return
name|d
operator|->
name|brush
operator|.
name|emulate
return|;
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|antiAliasingEnabled
name|bool
name|QWindowsDirect2DPaintEngine
operator|::
name|antiAliasingEnabled
parameter_list|()
specifier|const
block|{
return|return
name|state
argument_list|()
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|Antialiasing
return|;
block|}
end_function
begin_function
DECL|function|adjustForAliasing
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|adjustForAliasing
parameter_list|(
name|QRectF
modifier|*
name|rect
parameter_list|)
block|{
if|if
condition|(
operator|!
name|antiAliasingEnabled
argument_list|()
condition|)
block|{
name|rect
operator|->
name|adjust
argument_list|(
name|MAGICAL_ALIASING_OFFSET
argument_list|,
name|MAGICAL_ALIASING_OFFSET
argument_list|,
name|MAGICAL_ALIASING_OFFSET
argument_list|,
name|MAGICAL_ALIASING_OFFSET
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|adjustForAliasing
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|adjustForAliasing
parameter_list|(
name|QPointF
modifier|*
name|point
parameter_list|)
block|{
specifier|static
specifier|const
name|QPointF
name|adjustment
argument_list|(
name|MAGICAL_ALIASING_OFFSET
argument_list|,
name|MAGICAL_ALIASING_OFFSET
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|antiAliasingEnabled
argument_list|()
condition|)
operator|(
operator|*
name|point
operator|)
operator|+=
name|adjustment
expr_stmt|;
block|}
end_function
begin_function
DECL|function|suspend
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|suspend
parameter_list|()
block|{
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resume
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|resume
parameter_list|()
block|{
name|begin
argument_list|(
name|paintDevice
argument_list|()
argument_list|)
expr_stmt|;
name|clipEnabledChanged
argument_list|()
expr_stmt|;
name|penChanged
argument_list|()
expr_stmt|;
name|brushChanged
argument_list|()
expr_stmt|;
name|brushOriginChanged
argument_list|()
expr_stmt|;
name|opacityChanged
argument_list|()
expr_stmt|;
name|compositionModeChanged
argument_list|()
expr_stmt|;
name|renderHintsChanged
argument_list|()
expr_stmt|;
name|transformChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QWindowsDirect2DPaintEngineSuspenderImpl
class|class
name|QWindowsDirect2DPaintEngineSuspenderImpl
block|{
name|Q_DISABLE_COPY
argument_list|(
argument|QWindowsDirect2DPaintEngineSuspenderImpl
argument_list|)
DECL|member|m_engine
name|QWindowsDirect2DPaintEngine
modifier|*
name|m_engine
decl_stmt|;
DECL|member|m_active
name|bool
name|m_active
decl_stmt|;
public|public:
DECL|function|QWindowsDirect2DPaintEngineSuspenderImpl
name|QWindowsDirect2DPaintEngineSuspenderImpl
parameter_list|(
name|QWindowsDirect2DPaintEngine
modifier|*
name|engine
parameter_list|)
member_init_list|:
name|m_engine
argument_list|(
name|engine
argument_list|)
member_init_list|,
name|m_active
argument_list|(
name|engine
operator|->
name|isActive
argument_list|()
argument_list|)
block|{
if|if
condition|(
name|m_active
condition|)
name|m_engine
operator|->
name|suspend
argument_list|()
expr_stmt|;
block|}
DECL|function|~QWindowsDirect2DPaintEngineSuspenderImpl
name|~
name|QWindowsDirect2DPaintEngineSuspenderImpl
parameter_list|()
block|{
if|if
condition|(
name|m_active
condition|)
name|m_engine
operator|->
name|resume
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QWindowsDirect2DPaintEngineSuspenderPrivate
class|class
name|QWindowsDirect2DPaintEngineSuspenderPrivate
block|{
public|public:
DECL|function|QWindowsDirect2DPaintEngineSuspenderPrivate
name|QWindowsDirect2DPaintEngineSuspenderPrivate
parameter_list|(
name|QWindowsDirect2DPaintEngine
modifier|*
name|engine
parameter_list|)
member_init_list|:
name|engineSuspender
argument_list|(
name|engine
argument_list|)
member_init_list|,
name|dcSuspender
argument_list|(
cast|static_cast
argument_list|<
name|QWindowsDirect2DPaintEnginePrivate
operator|*
argument_list|>
argument_list|(
name|engine
operator|->
name|d_ptr
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|bitmap
operator|->
name|deviceContext
argument_list|()
argument_list|)
block|{     }
DECL|member|engineSuspender
name|QWindowsDirect2DPaintEngineSuspenderImpl
name|engineSuspender
decl_stmt|;
DECL|member|dcSuspender
name|QWindowsDirect2DDeviceContextSuspender
name|dcSuspender
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWindowsDirect2DPaintEngineSuspender
name|QWindowsDirect2DPaintEngineSuspender
operator|::
name|QWindowsDirect2DPaintEngineSuspender
parameter_list|(
name|QWindowsDirect2DPaintEngine
modifier|*
name|engine
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QWindowsDirect2DPaintEngineSuspenderPrivate
argument_list|(
name|engine
argument_list|)
argument_list|)
block|{  }
end_constructor
begin_destructor
DECL|function|~QWindowsDirect2DPaintEngineSuspender
name|QWindowsDirect2DPaintEngineSuspender
operator|::
name|~
name|QWindowsDirect2DPaintEngineSuspender
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|resume
name|void
name|QWindowsDirect2DPaintEngineSuspender
operator|::
name|resume
parameter_list|()
block|{
name|d_ptr
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
