begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsdirect2dpaintengine.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dplatformpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dpaintdevice.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dhelpers.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2ddevicecontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontengine.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontenginedirectwrite.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsintegration.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpaintengine_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qtextengine_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qfontengine_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qstatictext_p.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_using
using|using
name|Microsoft
operator|::
name|WRL
operator|::
name|ComPtr
using|;
end_using
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// The enum values below are set as tags on the device context
comment|// in the various draw methods. When EndDraw is called the device context
comment|// will report the last set tag number in case of errors
comment|// along with an error code
comment|// Microsoft keeps a list of d2d error codes here:
comment|// http://msdn.microsoft.com/en-us/library/windows/desktop/dd370979(v=vs.85).aspx
name|enum
type|{
DECL|enumerator|D2DDebugDrawInitialStateTag
name|D2DDebugDrawInitialStateTag
init|=
operator|-
literal|1
decl_stmt|,
DECL|enumerator|D2DDebugDrawImageTag
name|D2DDebugDrawImageTag
init|=
literal|1
decl_stmt|,
DECL|enumerator|D2DDebugFillTag
name|D2DDebugFillTag
decl_stmt|,
DECL|enumerator|D2DDebugDrawPixmapTag
name|D2DDebugDrawPixmapTag
decl_stmt|,
DECL|enumerator|D2DDebugDrawStaticTextItemTag
name|D2DDebugDrawStaticTextItemTag
decl_stmt|,
DECL|enumerator|D2DDebugDrawTextItemTag
name|D2DDebugDrawTextItemTag
end_decl_stmt
begin_comment
unit|};
comment|//Clipping flags
end_comment
begin_enum
enum|enum
block|{
DECL|enumerator|UserClip
name|UserClip
init|=
literal|0x1
block|,
DECL|enumerator|SimpleSystemClip
name|SimpleSystemClip
init|=
literal|0x2
block|}
enum|;
end_enum
begin_define
DECL|macro|D2D_TAG
define|#
directive|define
name|D2D_TAG
parameter_list|(
name|tag
parameter_list|)
value|d->dc()->SetTags(tag, tag)
end_define
begin_function_decl
name|Q_GUI_EXPORT
name|QImage
name|qt_imageForBrush
parameter_list|(
name|int
name|brushStyle
parameter_list|,
name|bool
name|invert
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|factory
specifier|static
specifier|inline
name|ID2D1Factory1
modifier|*
name|factory
parameter_list|()
block|{
return|return
name|QWindowsDirect2DContext
operator|::
name|instance
argument_list|()
operator|->
name|d2dFactory
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// XXX reduce code duplication between painterPathToPathGeometry and
end_comment
begin_comment
comment|// vectorPathToID2D1PathGeometry, the two are quite similar
end_comment
begin_function
DECL|function|painterPathToPathGeometry
specifier|static
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|painterPathToPathGeometry
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|geometry
decl_stmt|;
name|ComPtr
argument_list|<
name|ID2D1GeometrySink
argument_list|>
name|sink
decl_stmt|;
name|HRESULT
name|hr
init|=
name|factory
argument_list|()
operator|->
name|CreatePathGeometry
argument_list|(
operator|&
name|geometry
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create path geometry: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|hr
operator|=
name|geometry
operator|->
name|Open
argument_list|(
operator|&
name|sink
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create geometry sink: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
switch|switch
condition|(
name|path
operator|.
name|fillRule
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|WindingFill
case|:
name|sink
operator|->
name|SetFillMode
argument_list|(
name|D2D1_FILL_MODE_WINDING
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|OddEvenFill
case|:
name|sink
operator|->
name|SetFillMode
argument_list|(
name|D2D1_FILL_MODE_ALTERNATE
argument_list|)
expr_stmt|;
break|break;
block|}
name|bool
name|inFigure
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
name|element
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|element
operator|.
name|type
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|inFigure
condition|)
name|sink
operator|->
name|EndFigure
argument_list|(
name|D2D1_FIGURE_END_OPEN
argument_list|)
expr_stmt|;
name|sink
operator|->
name|BeginFigure
argument_list|(
name|to_d2d_point_2f
argument_list|(
name|element
argument_list|)
argument_list|,
name|D2D1_FIGURE_BEGIN_FILLED
argument_list|)
expr_stmt|;
name|inFigure
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|sink
operator|->
name|AddLine
argument_list|(
name|to_d2d_point_2f
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
name|data1
init|=
name|path
operator|.
name|elementAt
argument_list|(
operator|++
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QPainterPath
operator|::
name|Element
name|data2
init|=
name|path
operator|.
name|elementAt
argument_list|(
operator|++
name|i
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|data1
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|data2
operator|.
name|type
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|D2D1_BEZIER_SEGMENT
name|segment
decl_stmt|;
name|segment
operator|.
name|point1
operator|=
name|to_d2d_point_2f
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|segment
operator|.
name|point2
operator|=
name|to_d2d_point_2f
argument_list|(
name|data1
argument_list|)
expr_stmt|;
name|segment
operator|.
name|point3
operator|=
name|to_d2d_point_2f
argument_list|(
name|data2
argument_list|)
expr_stmt|;
name|sink
operator|->
name|AddBezier
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToDataElement
case|:
name|qWarning
argument_list|(
literal|"%s: Unhandled Curve Data Element"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|inFigure
condition|)
name|sink
operator|->
name|EndFigure
argument_list|(
name|D2D1_FIGURE_END_OPEN
argument_list|)
expr_stmt|;
name|sink
operator|->
name|Close
argument_list|()
expr_stmt|;
return|return
name|geometry
return|;
block|}
end_function
begin_function
DECL|function|vectorPathToID2D1PathGeometry
specifier|static
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|vectorPathToID2D1PathGeometry
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
name|bool
name|alias
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|pathGeometry
decl_stmt|;
name|HRESULT
name|hr
init|=
name|factory
argument_list|()
operator|->
name|CreatePathGeometry
argument_list|(
name|pathGeometry
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create path geometry: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|pathGeometry
return|;
name|ComPtr
argument_list|<
name|ID2D1GeometrySink
argument_list|>
name|sink
decl_stmt|;
name|hr
operator|=
name|pathGeometry
operator|->
name|Open
argument_list|(
name|sink
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create geometry sink: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|sink
operator|->
name|SetFillMode
argument_list|(
name|path
operator|.
name|hasWindingFill
argument_list|()
condition|?
name|D2D1_FILL_MODE_WINDING
else|:
name|D2D1_FILL_MODE_ALTERNATE
argument_list|)
expr_stmt|;
name|bool
name|inFigure
init|=
literal|false
decl_stmt|;
specifier|const
name|QPainterPath
operator|::
name|ElementType
modifier|*
name|types
init|=
name|path
operator|.
name|elements
argument_list|()
decl_stmt|;
specifier|const
name|int
name|count
init|=
name|path
operator|.
name|elementCount
argument_list|()
decl_stmt|;
specifier|const
name|qreal
modifier|*
name|points
init|=
literal|0
decl_stmt|;
name|QScopedArrayPointer
argument_list|<
name|qreal
argument_list|>
name|rounded_points
decl_stmt|;
if|if
condition|(
name|alias
condition|)
block|{
comment|// Aliased painting, round to whole numbers
name|rounded_points
operator|.
name|reset
argument_list|(
operator|new
name|qreal
index|[
name|count
operator|*
literal|2
index|]
argument_list|)
expr_stmt|;
name|points
operator|=
name|rounded_points
operator|.
name|data
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|count
operator|*
literal|2
operator|)
condition|;
name|i
operator|++
control|)
name|rounded_points
index|[
name|i
index|]
operator|=
name|qRound
argument_list|(
name|path
operator|.
name|points
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Antialiased painting, keep original numbers
name|points
operator|=
name|path
operator|.
name|points
argument_list|()
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|points
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
condition|)
block|{
name|qreal
name|x
decl_stmt|,
name|y
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|x
operator|=
name|points
index|[
name|i
operator|*
literal|2
index|]
expr_stmt|;
name|y
operator|=
name|points
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
expr_stmt|;
switch|switch
condition|(
name|types
index|[
name|i
index|]
condition|)
block|{
case|case
name|QPainterPath
operator|::
name|MoveToElement
case|:
if|if
condition|(
name|inFigure
condition|)
name|sink
operator|->
name|EndFigure
argument_list|(
name|D2D1_FIGURE_END_OPEN
argument_list|)
expr_stmt|;
name|sink
operator|->
name|BeginFigure
argument_list|(
name|D2D1
operator|::
name|Point2F
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|D2D1_FIGURE_BEGIN_FILLED
argument_list|)
expr_stmt|;
name|inFigure
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|LineToElement
case|:
name|sink
operator|->
name|AddLine
argument_list|(
name|D2D1
operator|::
name|Point2F
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToElement
case|:
block|{
name|Q_ASSERT
argument_list|(
operator|(
name|i
operator|+
literal|2
operator|)
operator|<
name|count
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|types
index|[
name|i
operator|+
literal|1
index|]
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|types
index|[
name|i
operator|+
literal|2
index|]
operator|==
name|QPainterPath
operator|::
name|CurveToDataElement
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
specifier|const
name|qreal
name|x2
init|=
name|points
index|[
name|i
operator|*
literal|2
index|]
decl_stmt|;
specifier|const
name|qreal
name|y2
init|=
name|points
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|i
operator|++
expr_stmt|;
specifier|const
name|qreal
name|x3
init|=
name|points
index|[
name|i
operator|*
literal|2
index|]
decl_stmt|;
specifier|const
name|qreal
name|y3
init|=
name|points
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|D2D1_BEZIER_SEGMENT
name|segment
init|=
block|{
name|D2D1
operator|::
name|Point2F
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
block|,
name|D2D1
operator|::
name|Point2F
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
block|,
name|D2D1
operator|::
name|Point2F
operator|(
name|x3
expr|,
name|y3
operator|)
block|}
decl_stmt|;
name|sink
operator|->
name|AddBezier
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QPainterPath
operator|::
name|CurveToDataElement
case|:
name|qWarning
argument_list|(
literal|"%s: Unhandled Curve Data Element"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|sink
operator|->
name|BeginFigure
argument_list|(
name|D2D1
operator|::
name|Point2F
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|D2D1_FIGURE_BEGIN_FILLED
argument_list|)
expr_stmt|;
name|inFigure
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
name|sink
operator|->
name|AddLine
argument_list|(
name|D2D1
operator|::
name|Point2F
argument_list|(
name|points
index|[
name|i
operator|*
literal|2
index|]
argument_list|,
name|points
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inFigure
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|hasImplicitClose
argument_list|()
condition|)
name|sink
operator|->
name|AddLine
argument_list|(
name|D2D1
operator|::
name|Point2F
argument_list|(
name|points
index|[
literal|0
index|]
argument_list|,
name|points
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|sink
operator|->
name|EndFigure
argument_list|(
name|D2D1_FIGURE_END_OPEN
argument_list|)
expr_stmt|;
block|}
name|sink
operator|->
name|Close
argument_list|()
expr_stmt|;
return|return
name|pathGeometry
return|;
block|}
end_function
begin_class
DECL|class|QWindowsDirect2DPaintEnginePrivate
class|class
name|QWindowsDirect2DPaintEnginePrivate
super|:
specifier|public
name|QPaintEngineExPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QWindowsDirect2DPaintEngine
parameter_list|)
specifier|public
private|:
DECL|function|QWindowsDirect2DPaintEnginePrivate
name|QWindowsDirect2DPaintEnginePrivate
parameter_list|(
name|QWindowsDirect2DBitmap
modifier|*
name|bm
parameter_list|)
member_init_list|:
name|bitmap
argument_list|(
name|bm
argument_list|)
member_init_list|,
name|clipFlags
argument_list|(
literal|0
argument_list|)
block|{
name|pen
operator|.
name|reset
argument_list|()
expr_stmt|;
name|brush
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dc
argument_list|()
operator|->
name|SetAntialiasMode
argument_list|(
name|D2D1_ANTIALIAS_MODE_ALIASED
argument_list|)
expr_stmt|;
block|}
DECL|member|bitmap
name|QWindowsDirect2DBitmap
modifier|*
name|bitmap
decl_stmt|;
DECL|member|clipPath
name|QPainterPath
name|clipPath
decl_stmt|;
DECL|member|clipFlags
name|unsigned
name|int
name|clipFlags
decl_stmt|;
DECL|member|currentBrushOrigin
name|QPointF
name|currentBrushOrigin
decl_stmt|;
struct|struct
block|{
DECL|member|emulate
name|bool
name|emulate
decl_stmt|;
DECL|member|qpen
name|QPen
name|qpen
decl_stmt|;
DECL|member|brush
name|ComPtr
argument_list|<
name|ID2D1Brush
argument_list|>
name|brush
decl_stmt|;
DECL|member|strokeStyle
name|ComPtr
argument_list|<
name|ID2D1StrokeStyle1
argument_list|>
name|strokeStyle
decl_stmt|;
DECL|function|reset
specifier|inline
name|void
name|reset
parameter_list|()
block|{
name|emulate
operator|=
literal|false
expr_stmt|;
name|qpen
operator|=
name|QPen
argument_list|()
expr_stmt|;
name|brush
operator|.
name|Reset
argument_list|()
expr_stmt|;
name|strokeStyle
operator|.
name|Reset
argument_list|()
expr_stmt|;
block|}
DECL|member|pen
block|}
name|pen
struct|;
struct|struct
block|{
DECL|member|emulate
name|bool
name|emulate
decl_stmt|;
DECL|member|qbrush
name|QBrush
name|qbrush
decl_stmt|;
DECL|member|brush
name|ComPtr
argument_list|<
name|ID2D1Brush
argument_list|>
name|brush
decl_stmt|;
DECL|function|reset
specifier|inline
name|void
name|reset
parameter_list|()
block|{
name|emulate
operator|=
literal|false
expr_stmt|;
name|brush
operator|.
name|Reset
argument_list|()
expr_stmt|;
name|qbrush
operator|=
name|QBrush
argument_list|()
expr_stmt|;
block|}
DECL|member|brush
block|}
name|brush
struct|;
DECL|function|dc
specifier|inline
name|ID2D1DeviceContext
modifier|*
name|dc
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
return|return
name|bitmap
operator|->
name|deviceContext
argument_list|()
operator|->
name|get
argument_list|()
return|;
block|}
DECL|function|interpolationMode
specifier|inline
name|D2D1_INTERPOLATION_MODE
name|interpolationMode
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
comment|// XXX are we choosing the right d2d interpolation modes?
return|return
operator|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|SmoothPixmapTransform
operator|)
condition|?
name|D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC
else|:
name|D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR
return|;
block|}
DECL|function|antialiasMode
specifier|inline
name|D2D1_ANTIALIAS_MODE
name|antialiasMode
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
return|return
operator|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|Antialiasing
operator|)
condition|?
name|D2D1_ANTIALIAS_MODE_PER_PRIMITIVE
else|:
name|D2D1_ANTIALIAS_MODE_ALIASED
return|;
block|}
DECL|function|updateTransform
name|void
name|updateTransform
parameter_list|()
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
comment|// Note the loss of info going from 3x3 to 3x2 matrix here
name|dc
argument_list|()
operator|->
name|SetTransform
argument_list|(
name|to_d2d_matrix_3x2_f
argument_list|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|transform
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|updateOpacity
name|void
name|updateOpacity
parameter_list|()
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|qreal
name|opacity
init|=
name|q
operator|->
name|state
argument_list|()
operator|->
name|opacity
decl_stmt|;
if|if
condition|(
name|brush
operator|.
name|brush
condition|)
name|brush
operator|.
name|brush
operator|->
name|SetOpacity
argument_list|(
name|opacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|pen
operator|.
name|brush
condition|)
name|pen
operator|.
name|brush
operator|->
name|SetOpacity
argument_list|(
name|opacity
argument_list|)
expr_stmt|;
block|}
DECL|function|pushClip
name|void
name|pushClip
parameter_list|()
block|{
name|popClip
argument_list|()
expr_stmt|;
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|geometry
init|=
name|painterPathToPathGeometry
argument_list|(
name|clipPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|geometry
condition|)
return|return;
name|dc
argument_list|()
operator|->
name|PushLayer
argument_list|(
name|D2D1
operator|::
name|LayerParameters1
argument_list|(
name|D2D1
operator|::
name|InfiniteRect
argument_list|()
argument_list|,
name|geometry
operator|.
name|Get
argument_list|()
argument_list|,
name|antialiasMode
argument_list|()
argument_list|,
name|D2D1
operator|::
name|IdentityMatrix
argument_list|()
argument_list|,
literal|1.0
argument_list|,
name|NULL
argument_list|,
name|D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|clipFlags
operator||=
name|UserClip
expr_stmt|;
block|}
DECL|function|popClip
name|void
name|popClip
parameter_list|()
block|{
if|if
condition|(
name|clipFlags
operator|&
name|UserClip
condition|)
block|{
name|dc
argument_list|()
operator|->
name|PopLayer
argument_list|()
expr_stmt|;
name|clipFlags
operator|&=
operator|~
name|UserClip
expr_stmt|;
block|}
block|}
DECL|function|updateClipEnabled
name|void
name|updateClipEnabled
parameter_list|()
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|state
argument_list|()
operator|->
name|clipEnabled
condition|)
name|popClip
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|clipFlags
operator|&
name|UserClip
operator|)
condition|)
name|pushClip
argument_list|()
expr_stmt|;
block|}
DECL|function|updateClipPath
name|void
name|updateClipPath
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|operation
parameter_list|)
block|{
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|Qt
operator|::
name|NoClip
case|:
name|popClip
argument_list|()
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ReplaceClip
case|:
name|clipPath
operator|=
name|path
expr_stmt|;
name|pushClip
argument_list|()
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|IntersectClip
case|:
name|clipPath
operator|&=
name|path
expr_stmt|;
name|pushClip
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
DECL|function|updateCompositionMode
name|void
name|updateCompositionMode
parameter_list|()
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
name|q
operator|->
name|state
argument_list|()
operator|->
name|compositionMode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|QPainter
operator|::
name|CompositionMode_Source
case|:
name|dc
argument_list|()
operator|->
name|SetPrimitiveBlend
argument_list|(
name|D2D1_PRIMITIVE_BLEND_COPY
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPainter
operator|::
name|CompositionMode_SourceOver
case|:
name|dc
argument_list|()
operator|->
name|SetPrimitiveBlend
argument_list|(
name|D2D1_PRIMITIVE_BLEND_SOURCE_OVER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"Unsupported composition mode: %d"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|function|updateBrush
name|void
name|updateBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|newBrush
parameter_list|)
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
if|if
condition|(
name|qbrush_fast_equals
argument_list|(
name|brush
operator|.
name|qbrush
argument_list|,
name|newBrush
argument_list|)
condition|)
return|return;
name|brush
operator|.
name|brush
operator|=
name|to_d2d_brush
argument_list|(
name|newBrush
argument_list|,
operator|&
name|brush
operator|.
name|emulate
argument_list|)
expr_stmt|;
name|brush
operator|.
name|qbrush
operator|=
name|newBrush
expr_stmt|;
if|if
condition|(
name|brush
operator|.
name|brush
condition|)
block|{
name|brush
operator|.
name|brush
operator|->
name|SetOpacity
argument_list|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|opacity
argument_list|)
expr_stmt|;
name|applyBrushOrigin
argument_list|(
name|currentBrushOrigin
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|updateBrushOrigin
name|void
name|updateBrushOrigin
parameter_list|()
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|negateCurrentBrushOrigin
argument_list|()
expr_stmt|;
name|applyBrushOrigin
argument_list|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|brushOrigin
argument_list|)
expr_stmt|;
block|}
DECL|function|negateCurrentBrushOrigin
name|void
name|negateCurrentBrushOrigin
parameter_list|()
block|{
if|if
condition|(
name|brush
operator|.
name|brush
operator|&&
operator|!
name|currentBrushOrigin
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|D2D1_MATRIX_3X2_F
name|transform
decl_stmt|;
name|brush
operator|.
name|brush
operator|->
name|GetTransform
argument_list|(
operator|&
name|transform
argument_list|)
expr_stmt|;
name|brush
operator|.
name|brush
operator|->
name|SetTransform
argument_list|(
operator|*
operator|(
name|D2D1
operator|::
name|Matrix3x2F
operator|::
name|ReinterpretBaseType
argument_list|(
operator|&
name|transform
argument_list|)
operator|)
operator|*
name|D2D1
operator|::
name|Matrix3x2F
operator|::
name|Translation
argument_list|(
operator|-
name|currentBrushOrigin
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|currentBrushOrigin
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|applyBrushOrigin
name|void
name|applyBrushOrigin
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|origin
parameter_list|)
block|{
if|if
condition|(
name|brush
operator|.
name|brush
operator|&&
operator|!
name|origin
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|D2D1_MATRIX_3X2_F
name|transform
decl_stmt|;
name|brush
operator|.
name|brush
operator|->
name|GetTransform
argument_list|(
operator|&
name|transform
argument_list|)
expr_stmt|;
name|brush
operator|.
name|brush
operator|->
name|SetTransform
argument_list|(
operator|*
operator|(
name|D2D1
operator|::
name|Matrix3x2F
operator|::
name|ReinterpretBaseType
argument_list|(
operator|&
name|transform
argument_list|)
operator|)
operator|*
name|D2D1
operator|::
name|Matrix3x2F
operator|::
name|Translation
argument_list|(
name|origin
operator|.
name|x
argument_list|()
argument_list|,
name|origin
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentBrushOrigin
operator|=
name|origin
expr_stmt|;
block|}
DECL|function|updatePen
name|void
name|updatePen
parameter_list|()
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
specifier|const
name|QPen
modifier|&
name|newPen
init|=
name|q
operator|->
name|state
argument_list|()
operator|->
name|pen
decl_stmt|;
if|if
condition|(
name|qpen_fast_equals
argument_list|(
name|newPen
argument_list|,
name|pen
operator|.
name|qpen
argument_list|)
condition|)
return|return;
name|pen
operator|.
name|reset
argument_list|()
expr_stmt|;
name|pen
operator|.
name|qpen
operator|=
name|newPen
expr_stmt|;
if|if
condition|(
name|newPen
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoPen
condition|)
return|return;
name|pen
operator|.
name|brush
operator|=
name|to_d2d_brush
argument_list|(
name|newPen
operator|.
name|brush
argument_list|()
argument_list|,
operator|&
name|pen
operator|.
name|emulate
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pen
operator|.
name|brush
condition|)
return|return;
name|pen
operator|.
name|brush
operator|->
name|SetOpacity
argument_list|(
name|q
operator|->
name|state
argument_list|()
operator|->
name|opacity
argument_list|)
expr_stmt|;
name|D2D1_STROKE_STYLE_PROPERTIES1
name|props
init|=
block|{}
decl_stmt|;
switch|switch
condition|(
name|newPen
operator|.
name|capStyle
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|SquareCap
case|:
name|props
operator|.
name|startCap
operator|=
name|props
operator|.
name|endCap
operator|=
name|props
operator|.
name|dashCap
operator|=
name|D2D1_CAP_STYLE_SQUARE
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RoundCap
case|:
name|props
operator|.
name|startCap
operator|=
name|props
operator|.
name|endCap
operator|=
name|props
operator|.
name|dashCap
operator|=
name|D2D1_CAP_STYLE_ROUND
expr_stmt|;
case|case
name|Qt
operator|::
name|FlatCap
case|:
default|default:
name|props
operator|.
name|startCap
operator|=
name|props
operator|.
name|endCap
operator|=
name|props
operator|.
name|dashCap
operator|=
name|D2D1_CAP_STYLE_FLAT
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|newPen
operator|.
name|joinStyle
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|BevelJoin
case|:
name|props
operator|.
name|lineJoin
operator|=
name|D2D1_LINE_JOIN_BEVEL
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RoundJoin
case|:
name|props
operator|.
name|lineJoin
operator|=
name|D2D1_LINE_JOIN_ROUND
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|MiterJoin
case|:
default|default:
name|props
operator|.
name|lineJoin
operator|=
name|D2D1_LINE_JOIN_MITER
expr_stmt|;
break|break;
block|}
name|props
operator|.
name|miterLimit
operator|=
name|newPen
operator|.
name|miterLimit
argument_list|()
operator|*
name|qreal
argument_list|(
literal|2.0
argument_list|)
expr_stmt|;
comment|// D2D and Qt miter specs differ
name|props
operator|.
name|dashOffset
operator|=
name|newPen
operator|.
name|dashOffset
argument_list|()
expr_stmt|;
name|props
operator|.
name|transformType
operator|=
name|qIsNull
argument_list|(
name|newPen
operator|.
name|widthF
argument_list|()
argument_list|)
condition|?
name|D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE
else|:
name|newPen
operator|.
name|isCosmetic
argument_list|()
condition|?
name|D2D1_STROKE_TRANSFORM_TYPE_FIXED
else|:
name|D2D1_STROKE_TRANSFORM_TYPE_NORMAL
expr_stmt|;
switch|switch
condition|(
name|newPen
operator|.
name|style
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|SolidLine
case|:
name|props
operator|.
name|dashStyle
operator|=
name|D2D1_DASH_STYLE_SOLID
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|DotLine
case|:
case|case
name|Qt
operator|::
name|DashDotLine
case|:
case|case
name|Qt
operator|::
name|DashDotDotLine
case|:
comment|// Try and match Qt's raster engine in output as closely as possible
if|if
condition|(
name|newPen
operator|.
name|widthF
argument_list|()
operator|<=
literal|1.0
condition|)
name|props
operator|.
name|startCap
operator|=
name|props
operator|.
name|endCap
operator|=
name|props
operator|.
name|dashCap
operator|=
name|D2D1_CAP_STYLE_FLAT
expr_stmt|;
comment|// fall through
default|default:
name|props
operator|.
name|dashStyle
operator|=
name|D2D1_DASH_STYLE_CUSTOM
expr_stmt|;
break|break;
block|}
name|HRESULT
name|hr
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|dashStyle
operator|==
name|D2D1_DASH_STYLE_CUSTOM
condition|)
block|{
name|QVector
argument_list|<
name|qreal
argument_list|>
name|dashes
init|=
name|newPen
operator|.
name|dashPattern
argument_list|()
decl_stmt|;
name|QVector
argument_list|<
name|FLOAT
argument_list|>
name|converted
argument_list|(
name|dashes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dashes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|converted
index|[
name|i
index|]
operator|=
name|dashes
index|[
name|i
index|]
expr_stmt|;
block|}
name|hr
operator|=
name|factory
argument_list|()
operator|->
name|CreateStrokeStyle
argument_list|(
name|props
argument_list|,
name|converted
operator|.
name|constData
argument_list|()
argument_list|,
name|converted
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|pen
operator|.
name|strokeStyle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hr
operator|=
name|factory
argument_list|()
operator|->
name|CreateStrokeStyle
argument_list|(
name|props
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|pen
operator|.
name|strokeStyle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"%s: Could not create stroke style: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
block|}
DECL|function|to_d2d_brush
name|ComPtr
argument_list|<
name|ID2D1Brush
argument_list|>
name|to_d2d_brush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|newBrush
parameter_list|,
name|bool
modifier|*
name|needsEmulation
parameter_list|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|ID2D1Brush
argument_list|>
name|result
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|needsEmulation
argument_list|)
expr_stmt|;
operator|*
name|needsEmulation
operator|=
literal|false
expr_stmt|;
switch|switch
condition|(
name|newBrush
operator|.
name|style
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|NoBrush
case|:
break|break;
case|case
name|Qt
operator|::
name|SolidPattern
case|:
block|{
name|ComPtr
argument_list|<
name|ID2D1SolidColorBrush
argument_list|>
name|solid
decl_stmt|;
name|hr
operator|=
name|dc
argument_list|()
operator|->
name|CreateSolidColorBrush
argument_list|(
name|to_d2d_color_f
argument_list|(
name|newBrush
operator|.
name|color
argument_list|()
argument_list|)
argument_list|,
operator|&
name|solid
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create solid color brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
name|hr
operator|=
name|solid
operator|.
name|As
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"%s: Could not convert solid color brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|Dense1Pattern
case|:
case|case
name|Qt
operator|::
name|Dense2Pattern
case|:
case|case
name|Qt
operator|::
name|Dense3Pattern
case|:
case|case
name|Qt
operator|::
name|Dense4Pattern
case|:
case|case
name|Qt
operator|::
name|Dense5Pattern
case|:
case|case
name|Qt
operator|::
name|Dense6Pattern
case|:
case|case
name|Qt
operator|::
name|Dense7Pattern
case|:
case|case
name|Qt
operator|::
name|HorPattern
case|:
case|case
name|Qt
operator|::
name|VerPattern
case|:
case|case
name|Qt
operator|::
name|CrossPattern
case|:
case|case
name|Qt
operator|::
name|BDiagPattern
case|:
case|case
name|Qt
operator|::
name|FDiagPattern
case|:
case|case
name|Qt
operator|::
name|DiagCrossPattern
case|:
block|{
name|ComPtr
argument_list|<
name|ID2D1BitmapBrush1
argument_list|>
name|bitmapBrush
decl_stmt|;
name|D2D1_BITMAP_BRUSH_PROPERTIES1
name|bitmapBrushProperties
init|=
block|{
name|D2D1_EXTEND_MODE_WRAP
block|,
name|D2D1_EXTEND_MODE_WRAP
block|,
name|interpolationMode
argument_list|()
block|}
decl_stmt|;
name|QImage
name|brushImg
init|=
name|qt_imageForBrush
argument_list|(
name|newBrush
operator|.
name|style
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|brushImg
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|newBrush
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|brushImg
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QWindowsDirect2DBitmap
name|bitmap
decl_stmt|;
name|bool
name|success
init|=
name|bitmap
operator|.
name|fromImage
argument_list|(
name|brushImg
argument_list|,
name|Qt
operator|::
name|AutoColor
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create Direct2D bitmap from Qt pattern brush image"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
break|break;
block|}
name|hr
operator|=
name|dc
argument_list|()
operator|->
name|CreateBitmapBrush
argument_list|(
name|bitmap
operator|.
name|bitmap
argument_list|()
argument_list|,
name|bitmapBrushProperties
argument_list|,
operator|&
name|bitmapBrush
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create Direct2D bitmap brush for Qt pattern brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
name|hr
operator|=
name|bitmapBrush
operator|.
name|As
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"%s: Could not convert Direct2D bitmap brush for Qt pattern brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|LinearGradientPattern
case|:
case|case
name|Qt
operator|::
name|RadialGradientPattern
case|:
case|case
name|Qt
operator|::
name|ConicalGradientPattern
case|:
operator|*
name|needsEmulation
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TexturePattern
case|:
block|{
name|ComPtr
argument_list|<
name|ID2D1BitmapBrush1
argument_list|>
name|bitmapBrush
decl_stmt|;
name|D2D1_BITMAP_BRUSH_PROPERTIES1
name|bitmapBrushProperties
init|=
block|{
name|D2D1_EXTEND_MODE_WRAP
block|,
name|D2D1_EXTEND_MODE_WRAP
block|,
name|interpolationMode
argument_list|()
block|}
decl_stmt|;
name|QWindowsDirect2DPlatformPixmap
modifier|*
name|pp
init|=
cast|static_cast
argument_list|<
name|QWindowsDirect2DPlatformPixmap
operator|*
argument_list|>
argument_list|(
name|newBrush
operator|.
name|texture
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|QWindowsDirect2DBitmap
modifier|*
name|bitmap
init|=
name|pp
operator|->
name|bitmap
argument_list|()
decl_stmt|;
name|hr
operator|=
name|dc
argument_list|()
operator|->
name|CreateBitmapBrush
argument_list|(
name|bitmap
operator|->
name|bitmap
argument_list|()
argument_list|,
name|bitmapBrushProperties
argument_list|,
operator|&
name|bitmapBrush
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create texture brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
break|break;
block|}
name|hr
operator|=
name|bitmapBrush
operator|.
name|As
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"%s: Could not convert texture brush: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|result
operator|&&
operator|!
name|newBrush
operator|.
name|transform
argument_list|()
operator|.
name|isIdentity
argument_list|()
condition|)
name|result
operator|->
name|SetTransform
argument_list|(
name|to_d2d_matrix_3x2_f
argument_list|(
name|newBrush
operator|.
name|transform
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|updateHints
name|void
name|updateHints
parameter_list|()
block|{
name|dc
argument_list|()
operator|->
name|SetAntialiasMode
argument_list|(
name|antialiasMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|QWindowsDirect2DPaintEngine
name|QWindowsDirect2DPaintEngine
operator|::
name|QWindowsDirect2DPaintEngine
parameter_list|(
name|QWindowsDirect2DBitmap
modifier|*
name|bitmap
parameter_list|)
member_init_list|:
name|QPaintEngineEx
argument_list|(
operator|*
operator|(
operator|new
name|QWindowsDirect2DPaintEnginePrivate
argument_list|(
name|bitmap
argument_list|)
operator|)
argument_list|)
block|{
name|QPaintEngine
operator|::
name|PaintEngineFeatures
name|unsupported
init|=
comment|// As of 1.1 Direct2D gradient support is deficient for linear and radial gradients
name|QPaintEngine
operator|::
name|LinearGradientFill
operator||
name|QPaintEngine
operator|::
name|RadialGradientFill
comment|// As of 1.1 Direct2D does not support conical gradients at all
operator||
name|QPaintEngine
operator|::
name|ConicalGradientFill
comment|// As of 1.1 Direct2D does not natively support complex composition modes
comment|// However, using Direct2D effects that implement them should be possible
operator||
name|QPaintEngine
operator|::
name|PorterDuff
operator||
name|QPaintEngine
operator|::
name|BlendModes
operator||
name|QPaintEngine
operator|::
name|RasterOpModes
comment|// As of 1.1 Direct2D does not natively support perspective transforms
comment|// However, writing a custom effect that implements them should be possible
comment|// The built-in 3D transform effect unfortunately changes output image size, making
comment|// it unusable for us.
operator||
name|QPaintEngine
operator|::
name|PerspectiveTransform
decl_stmt|;
name|gccaps
operator|&=
operator|~
name|unsupported
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|begin
name|bool
name|QWindowsDirect2DPaintEngine
operator|::
name|begin
parameter_list|(
name|QPaintDevice
modifier|*
name|pdev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|bitmap
operator|->
name|deviceContext
argument_list|()
operator|->
name|begin
argument_list|()
expr_stmt|;
name|d
operator|->
name|dc
argument_list|()
operator|->
name|SetTransform
argument_list|(
name|D2D1
operator|::
name|Matrix3x2F
operator|::
name|Identity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|systemClip
argument_list|()
operator|.
name|rectCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QPainterPath
name|p
decl_stmt|;
name|p
operator|.
name|addRegion
argument_list|(
name|systemClip
argument_list|()
argument_list|)
expr_stmt|;
name|ComPtr
argument_list|<
name|ID2D1PathGeometry1
argument_list|>
name|geometry
init|=
name|painterPathToPathGeometry
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|geometry
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|dc
argument_list|()
operator|->
name|PushLayer
argument_list|(
name|D2D1
operator|::
name|LayerParameters1
argument_list|(
name|D2D1
operator|::
name|InfiniteRect
argument_list|()
argument_list|,
name|geometry
operator|.
name|Get
argument_list|()
argument_list|,
name|d
operator|->
name|antialiasMode
argument_list|()
argument_list|,
name|D2D1
operator|::
name|IdentityMatrix
argument_list|()
argument_list|,
literal|1.0
argument_list|,
name|NULL
argument_list|,
name|D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|clip
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pdev
operator|->
name|width
argument_list|()
argument_list|,
name|pdev
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|systemClip
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|clip
operator|&=
name|systemClip
argument_list|()
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
name|d
operator|->
name|dc
argument_list|()
operator|->
name|PushAxisAlignedClip
argument_list|(
name|to_d2d_rect_f
argument_list|(
name|clip
argument_list|)
argument_list|,
name|D2D1_ANTIALIAS_MODE_ALIASED
argument_list|)
expr_stmt|;
name|d
operator|->
name|clipFlags
operator||=
name|SimpleSystemClip
expr_stmt|;
block|}
name|D2D_TAG
argument_list|(
name|D2DDebugDrawInitialStateTag
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|end
name|bool
name|QWindowsDirect2DPaintEngine
operator|::
name|end
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
comment|// First pop any user-applied clipping
name|d
operator|->
name|popClip
argument_list|()
expr_stmt|;
comment|// Now the system clip from begin() above
if|if
condition|(
name|d
operator|->
name|clipFlags
operator|&
name|SimpleSystemClip
condition|)
block|{
name|d
operator|->
name|dc
argument_list|()
operator|->
name|PopAxisAlignedClip
argument_list|()
expr_stmt|;
name|d
operator|->
name|clipFlags
operator|&=
operator|~
name|SimpleSystemClip
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|dc
argument_list|()
operator|->
name|PopLayer
argument_list|()
expr_stmt|;
block|}
return|return
name|d
operator|->
name|bitmap
operator|->
name|deviceContext
argument_list|()
operator|->
name|end
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|type
name|QPaintEngine
operator|::
name|Type
name|QWindowsDirect2DPaintEngine
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|QPaintEngine
operator|::
name|Direct2D
return|;
block|}
end_function
begin_function
DECL|function|fill
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|fill
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugFillTag
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|d
operator|->
name|updateBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|brush
operator|.
name|emulate
condition|)
block|{
comment|// We mostly (only?) get here when gradients are required.
comment|// We could probably natively support linear and radial gradients that have pad reflect
name|QImage
name|img
argument_list|(
name|d
operator|->
name|bitmap
operator|->
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|img
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
decl_stmt|;
name|QPaintEngine
modifier|*
name|engine
init|=
name|img
operator|.
name|paintEngine
argument_list|()
decl_stmt|;
if|if
condition|(
name|engine
operator|->
name|isExtended
argument_list|()
operator|&&
name|p
operator|.
name|begin
argument_list|(
operator|&
name|img
argument_list|)
condition|)
block|{
name|QPaintEngineEx
modifier|*
name|extended
init|=
cast|static_cast
argument_list|<
name|QPaintEngineEx
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|)
decl_stmt|;
name|extended
operator|->
name|fill
argument_list|(
name|path
argument_list|,
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|end
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"%s: Paint Engine end returned false"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|drawImage
argument_list|(
name|img
operator|.
name|rect
argument_list|()
argument_list|,
name|img
argument_list|,
name|img
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"%s: Could not fall back to QImage"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|brush
operator|.
name|brush
condition|)
return|return;
name|ComPtr
argument_list|<
name|ID2D1Geometry
argument_list|>
name|geometry
init|=
name|vectorPathToID2D1PathGeometry
argument_list|(
name|path
argument_list|,
name|d
operator|->
name|antialiasMode
argument_list|()
operator|==
name|D2D1_ANTIALIAS_MODE_ALIASED
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|geometry
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not convert path to d2d geometry"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|dc
argument_list|()
operator|->
name|FillGeometry
argument_list|(
name|geometry
operator|.
name|Get
argument_list|()
argument_list|,
name|d
operator|->
name|brush
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// For clipping we convert everything to painter paths since it allows
end_comment
begin_comment
comment|// calculating intersections easily. It might be faster to convert to
end_comment
begin_comment
comment|// ID2D1Geometry and use its operations, although that needs to measured.
end_comment
begin_comment
comment|// The implementation would be more complex in any case.
end_comment
begin_function
DECL|function|clip
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QVectorPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|clip
argument_list|(
name|path
operator|.
name|convertToPainterPath
argument_list|()
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|QPainterPath
name|p
decl_stmt|;
name|p
operator|.
name|addRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|clip
argument_list|(
name|p
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|QPainterPath
name|p
decl_stmt|;
name|p
operator|.
name|addRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|clip
argument_list|(
name|p
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clip
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|clip
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|path
parameter_list|,
name|Qt
operator|::
name|ClipOperation
name|op
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateClipPath
argument_list|(
name|path
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clipEnabledChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|clipEnabledChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateClipEnabled
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|penChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|penChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updatePen
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|brushChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|brushChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateBrush
argument_list|(
name|state
argument_list|()
operator|->
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|brushOriginChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|brushOriginChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateBrushOrigin
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|opacityChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|opacityChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateOpacity
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compositionModeChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|compositionModeChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateCompositionMode
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renderHintsChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|renderHintsChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateHints
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transformChanged
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|transformChanged
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateTransform
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawImage
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawImage
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rectangle
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawImageTag
argument_list|)
expr_stmt|;
name|QPixmap
name|pixmap
init|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|image
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|drawPixmap
argument_list|(
name|rectangle
argument_list|,
name|pixmap
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawPixmap
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawPixmap
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|r
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|pm
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|sr
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawPixmapTag
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
return|return;
if|if
condition|(
name|pm
operator|.
name|handle
argument_list|()
operator|->
name|pixelType
argument_list|()
operator|==
name|QPlatformPixmap
operator|::
name|BitmapType
condition|)
block|{
name|QImage
name|i
init|=
name|pm
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|i
operator|.
name|setColor
argument_list|(
literal|0
argument_list|,
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|.
name|setColor
argument_list|(
literal|1
argument_list|,
name|d
operator|->
name|pen
operator|.
name|qpen
operator|.
name|color
argument_list|()
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|drawImage
argument_list|(
name|r
argument_list|,
name|i
argument_list|,
name|sr
argument_list|)
expr_stmt|;
return|return;
block|}
name|QWindowsDirect2DPlatformPixmap
modifier|*
name|pp
init|=
cast|static_cast
argument_list|<
name|QWindowsDirect2DPlatformPixmap
operator|*
argument_list|>
argument_list|(
name|pm
operator|.
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|QWindowsDirect2DBitmap
modifier|*
name|bitmap
init|=
name|pp
operator|->
name|bitmap
argument_list|()
decl_stmt|;
if|if
condition|(
name|bitmap
operator|->
name|bitmap
argument_list|()
operator|!=
name|d
operator|->
name|bitmap
operator|->
name|bitmap
argument_list|()
condition|)
block|{
comment|// Good, src bitmap != dst bitmap
if|if
condition|(
name|sr
operator|.
name|isValid
argument_list|()
condition|)
name|d
operator|->
name|dc
argument_list|()
operator|->
name|DrawBitmap
argument_list|(
name|bitmap
operator|->
name|bitmap
argument_list|()
argument_list|,
name|to_d2d_rect_f
argument_list|(
name|r
argument_list|)
argument_list|,
name|state
argument_list|()
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|interpolationMode
argument_list|()
argument_list|,
name|to_d2d_rect_f
argument_list|(
name|sr
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|dc
argument_list|()
operator|->
name|DrawBitmap
argument_list|(
name|bitmap
operator|->
name|bitmap
argument_list|()
argument_list|,
name|to_d2d_rect_f
argument_list|(
name|r
argument_list|)
argument_list|,
name|state
argument_list|()
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|interpolationMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Ok, so the source pixmap and destination pixmap is the same.
comment|// D2D is not fond of this scenario, deal with it through
comment|// an intermediate bitmap
name|QWindowsDirect2DBitmap
name|intermediate
decl_stmt|;
if|if
condition|(
name|sr
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|r
init|=
name|intermediate
operator|.
name|resize
argument_list|(
name|sr
operator|.
name|width
argument_list|()
argument_list|,
name|sr
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not resize intermediate bitmap to source rect size"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|D2D1_RECT_U
name|d2d_sr
init|=
name|to_d2d_rect_u
argument_list|(
name|sr
operator|.
name|toRect
argument_list|()
argument_list|)
decl_stmt|;
name|HRESULT
name|hr
init|=
name|intermediate
operator|.
name|bitmap
argument_list|()
operator|->
name|CopyFromBitmap
argument_list|(
name|NULL
argument_list|,
name|bitmap
operator|->
name|bitmap
argument_list|()
argument_list|,
operator|&
name|d2d_sr
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not copy source rect area from source bitmap to intermediate bitmap: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|bool
name|r
init|=
name|intermediate
operator|.
name|resize
argument_list|(
name|bitmap
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|bitmap
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not resize intermediate bitmap to source bitmap size"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|HRESULT
name|hr
init|=
name|intermediate
operator|.
name|bitmap
argument_list|()
operator|->
name|CopyFromBitmap
argument_list|(
name|NULL
argument_list|,
name|bitmap
operator|->
name|bitmap
argument_list|()
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not copy source bitmap to intermediate bitmap: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|d
operator|->
name|dc
argument_list|()
operator|->
name|DrawBitmap
argument_list|(
name|intermediate
operator|.
name|bitmap
argument_list|()
argument_list|,
name|to_d2d_rect_f
argument_list|(
name|r
argument_list|)
argument_list|,
name|state
argument_list|()
operator|->
name|opacity
argument_list|,
name|d
operator|->
name|interpolationMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fontFaceFromFontEngine
specifier|static
name|ComPtr
argument_list|<
name|IDWriteFontFace
argument_list|>
name|fontFaceFromFontEngine
parameter_list|(
name|QFontEngine
modifier|*
name|fe
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|IDWriteFontFace
argument_list|>
name|fontFace
decl_stmt|;
switch|switch
condition|(
name|fe
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QFontEngine
operator|::
name|Win
case|:
block|{
name|QWindowsFontEngine
modifier|*
name|wfe
init|=
cast|static_cast
argument_list|<
name|QWindowsFontEngine
operator|*
argument_list|>
argument_list|(
name|fe
argument_list|)
decl_stmt|;
name|QSharedPointer
argument_list|<
name|QWindowsFontEngineData
argument_list|>
name|wfed
init|=
name|wfe
operator|->
name|fontEngineData
argument_list|()
decl_stmt|;
name|HGDIOBJ
name|oldfont
init|=
name|wfe
operator|->
name|selectDesignFont
argument_list|()
decl_stmt|;
name|HRESULT
name|hr
init|=
name|QWindowsDirect2DContext
operator|::
name|instance
argument_list|()
operator|->
name|dwriteGdiInterop
argument_list|()
operator|->
name|CreateFontFaceFromHdc
argument_list|(
name|wfed
operator|->
name|hdc
argument_list|,
operator|&
name|fontFace
argument_list|)
decl_stmt|;
name|DeleteObject
argument_list|(
name|SelectObject
argument_list|(
name|wfed
operator|->
name|hdc
argument_list|,
name|oldfont
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"%s: Could not create DirectWrite fontface from HDC: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_DIRECTWRITE
case|case
name|QFontEngine
operator|::
name|DirectWrite
case|:
block|{
name|QWindowsFontEngineDirectWrite
modifier|*
name|wfedw
init|=
cast|static_cast
argument_list|<
name|QWindowsFontEngineDirectWrite
operator|*
argument_list|>
argument_list|(
name|fe
argument_list|)
decl_stmt|;
name|fontFace
operator|=
name|wfedw
operator|->
name|directWriteFontFace
argument_list|()
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_DIRECTWRITE
default|default:
name|qWarning
argument_list|(
literal|"%s: Unknown font engine!"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|fontFace
return|;
block|}
end_function
begin_function
DECL|function|drawStaticTextItem
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawStaticTextItem
parameter_list|(
name|QStaticTextItem
modifier|*
name|staticTextItem
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawStaticTextItemTag
argument_list|)
expr_stmt|;
if|if
condition|(
name|qpen_style
argument_list|(
name|d
operator|->
name|pen
operator|.
name|qpen
argument_list|)
operator|==
name|Qt
operator|::
name|NoPen
condition|)
return|return;
if|if
condition|(
name|staticTextItem
operator|->
name|numGlyphs
operator|==
literal|0
condition|)
return|return;
comment|// If we can't support the current configuration with Direct2D, fall back to slow path
comment|// Most common cases are perspective transform and gradient brush as pen
if|if
condition|(
operator|(
name|state
argument_list|()
operator|->
name|transform
argument_list|()
operator|.
name|isAffine
argument_list|()
operator|==
literal|false
operator|)
operator|||
name|d
operator|->
name|pen
operator|.
name|emulate
condition|)
block|{
name|QPaintEngineEx
operator|::
name|drawStaticTextItem
argument_list|(
name|staticTextItem
argument_list|)
expr_stmt|;
return|return;
block|}
name|ComPtr
argument_list|<
name|IDWriteFontFace
argument_list|>
name|fontFace
init|=
name|fontFaceFromFontEngine
argument_list|(
name|staticTextItem
operator|->
name|fontEngine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fontFace
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not find font - falling back to slow text rendering path."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|QPaintEngineEx
operator|::
name|drawStaticTextItem
argument_list|(
name|staticTextItem
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVector
argument_list|<
name|UINT16
argument_list|>
name|glyphIndices
argument_list|(
name|staticTextItem
operator|->
name|numGlyphs
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|FLOAT
argument_list|>
name|glyphAdvances
argument_list|(
name|staticTextItem
operator|->
name|numGlyphs
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|DWRITE_GLYPH_OFFSET
argument_list|>
name|glyphOffsets
argument_list|(
name|staticTextItem
operator|->
name|numGlyphs
argument_list|)
decl_stmt|;
comment|// XXX Are we generating a lot of cache misses here?
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|staticTextItem
operator|->
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|glyphIndices
index|[
name|i
index|]
operator|=
name|UINT16
argument_list|(
name|staticTextItem
operator|->
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Imperfect conversion here
comment|// This looks  a little funky because the positions are precalculated
name|glyphAdvances
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|glyphOffsets
index|[
name|i
index|]
operator|.
name|advanceOffset
operator|=
name|staticTextItem
operator|->
name|glyphPositions
index|[
name|i
index|]
operator|.
name|x
operator|.
name|toReal
argument_list|()
expr_stmt|;
comment|// Qt and Direct2D seem to disagree on the direction of the ascender offset...
name|glyphOffsets
index|[
name|i
index|]
operator|.
name|ascenderOffset
operator|=
name|staticTextItem
operator|->
name|glyphPositions
index|[
name|i
index|]
operator|.
name|y
operator|.
name|toReal
argument_list|()
operator|*
operator|-
literal|1
expr_stmt|;
block|}
name|drawGlyphRun
argument_list|(
name|D2D1
operator|::
name|Point2F
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fontFace
operator|.
name|Get
argument_list|()
argument_list|,
name|staticTextItem
operator|->
name|font
argument_list|,
name|staticTextItem
operator|->
name|numGlyphs
argument_list|,
name|glyphIndices
operator|.
name|constData
argument_list|()
argument_list|,
name|glyphAdvances
operator|.
name|constData
argument_list|()
argument_list|,
name|glyphOffsets
operator|.
name|constData
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawTextItem
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawTextItem
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QTextItem
modifier|&
name|textItem
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|D2D_TAG
argument_list|(
name|D2DDebugDrawTextItemTag
argument_list|)
expr_stmt|;
if|if
condition|(
name|qpen_style
argument_list|(
name|d
operator|->
name|pen
operator|.
name|qpen
argument_list|)
operator|==
name|Qt
operator|::
name|NoPen
condition|)
return|return;
specifier|const
name|QTextItemInt
modifier|&
name|ti
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTextItemInt
operator|&
argument_list|>
argument_list|(
name|textItem
argument_list|)
decl_stmt|;
if|if
condition|(
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
operator|==
literal|0
condition|)
return|return;
comment|// If we can't support the current configuration with Direct2D, fall back to slow path
comment|// Most common cases are perspective transform and gradient brush as pen
if|if
condition|(
operator|(
name|state
argument_list|()
operator|->
name|transform
argument_list|()
operator|.
name|isAffine
argument_list|()
operator|==
literal|false
operator|)
operator|||
name|d
operator|->
name|pen
operator|.
name|emulate
condition|)
block|{
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
return|return;
block|}
name|ComPtr
argument_list|<
name|IDWriteFontFace
argument_list|>
name|fontFace
init|=
name|fontFaceFromFontEngine
argument_list|(
name|ti
operator|.
name|fontEngine
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fontFace
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not find font - falling back to slow text rendering path."
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
name|QPaintEngine
operator|::
name|drawTextItem
argument_list|(
name|p
argument_list|,
name|textItem
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVector
argument_list|<
name|UINT16
argument_list|>
name|glyphIndices
argument_list|(
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|FLOAT
argument_list|>
name|glyphAdvances
argument_list|(
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|DWRITE_GLYPH_OFFSET
argument_list|>
name|glyphOffsets
argument_list|(
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
argument_list|)
decl_stmt|;
comment|// XXX Are we generating a lot of cache misses here?
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
condition|;
name|i
operator|++
control|)
block|{
name|glyphIndices
index|[
name|i
index|]
operator|=
name|UINT16
argument_list|(
name|ti
operator|.
name|glyphs
operator|.
name|glyphs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Imperfect conversion here
name|glyphAdvances
index|[
name|i
index|]
operator|=
name|ti
operator|.
name|glyphs
operator|.
name|effectiveAdvance
argument_list|(
name|i
argument_list|)
operator|.
name|toReal
argument_list|()
expr_stmt|;
name|glyphOffsets
index|[
name|i
index|]
operator|.
name|advanceOffset
operator|=
name|ti
operator|.
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|x
operator|.
name|toReal
argument_list|()
expr_stmt|;
comment|// XXX Should we negate the y value like for static text items?
name|glyphOffsets
index|[
name|i
index|]
operator|.
name|ascenderOffset
operator|=
name|ti
operator|.
name|glyphs
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|y
operator|.
name|toReal
argument_list|()
expr_stmt|;
block|}
specifier|const
name|bool
name|rtl
init|=
operator|(
name|ti
operator|.
name|flags
operator|&
name|QTextItem
operator|::
name|RightToLeft
operator|)
decl_stmt|;
specifier|const
name|QPointF
name|offset
argument_list|(
name|rtl
condition|?
name|ti
operator|.
name|width
operator|.
name|toReal
argument_list|()
else|:
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|drawGlyphRun
argument_list|(
name|to_d2d_point_2f
argument_list|(
name|p
operator|+
name|offset
argument_list|)
argument_list|,
name|fontFace
operator|.
name|Get
argument_list|()
argument_list|,
name|ti
operator|.
name|font
argument_list|()
argument_list|,
name|ti
operator|.
name|glyphs
operator|.
name|numGlyphs
argument_list|,
name|glyphIndices
operator|.
name|constData
argument_list|()
argument_list|,
name|glyphAdvances
operator|.
name|constData
argument_list|()
argument_list|,
name|glyphOffsets
operator|.
name|constData
argument_list|()
argument_list|,
name|rtl
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Points (1/72 inches) to Microsoft's Device Independent Pixels (1/96 inches)
end_comment
begin_function
DECL|function|pointSizeToDIP
specifier|inline
specifier|static
name|Q_DECL_CONSTEXPR
name|FLOAT
name|pointSizeToDIP
parameter_list|(
name|qreal
name|pointSize
parameter_list|)
block|{
return|return
name|pointSize
operator|+
operator|(
name|pointSize
operator|/
name|qreal
argument_list|(
literal|3.0
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|pixelSizeToDIP
specifier|inline
specifier|static
name|FLOAT
name|pixelSizeToDIP
parameter_list|(
name|int
name|pixelSize
parameter_list|)
block|{
name|FLOAT
name|dpiX
decl_stmt|,
name|dpiY
decl_stmt|;
name|factory
argument_list|()
operator|->
name|GetDesktopDpi
argument_list|(
operator|&
name|dpiX
argument_list|,
operator|&
name|dpiY
argument_list|)
expr_stmt|;
return|return
name|FLOAT
argument_list|(
name|pixelSize
argument_list|)
operator|/
operator|(
name|dpiY
operator|/
literal|96.0f
operator|)
return|;
block|}
end_function
begin_function
DECL|function|fontSizeInDIP
specifier|inline
specifier|static
name|FLOAT
name|fontSizeInDIP
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
comment|// Direct2d wants the font size in DIPs (Device Independent Pixels), each of which is 1/96 inches.
if|if
condition|(
name|font
operator|.
name|pixelSize
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
comment|// font size was set as points
return|return
name|pointSizeToDIP
argument_list|(
name|font
operator|.
name|pointSizeF
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// font size was set as pixels
return|return
name|pixelSizeToDIP
argument_list|(
name|font
operator|.
name|pixelSize
argument_list|()
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|drawGlyphRun
name|void
name|QWindowsDirect2DPaintEngine
operator|::
name|drawGlyphRun
parameter_list|(
specifier|const
name|D2D1_POINT_2F
modifier|&
name|pos
parameter_list|,
name|IDWriteFontFace
modifier|*
name|fontFace
parameter_list|,
specifier|const
name|QFont
modifier|&
name|font
parameter_list|,
name|int
name|numGlyphs
parameter_list|,
specifier|const
name|UINT16
modifier|*
name|glyphIndices
parameter_list|,
specifier|const
name|FLOAT
modifier|*
name|glyphAdvances
parameter_list|,
specifier|const
name|DWRITE_GLYPH_OFFSET
modifier|*
name|glyphOffsets
parameter_list|,
name|bool
name|rtl
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPaintEngine
argument_list|)
expr_stmt|;
name|DWRITE_GLYPH_RUN
name|glyphRun
init|=
block|{
name|fontFace
block|,
comment|//    IDWriteFontFace           *fontFace;
name|fontSizeInDIP
argument_list|(
name|font
argument_list|)
block|,
comment|//    FLOAT                     fontEmSize;
name|numGlyphs
block|,
comment|//    UINT32                    glyphCount;
name|glyphIndices
block|,
comment|//    const UINT16              *glyphIndices;
name|glyphAdvances
block|,
comment|//    const FLOAT               *glyphAdvances;
name|glyphOffsets
block|,
comment|//    const DWRITE_GLYPH_OFFSET *glyphOffsets;
name|FALSE
block|,
comment|//    BOOL                      isSideways;
name|rtl
operator|?
literal|1
operator|:
literal|0
comment|//    UINT32                    bidiLevel;
block|}
decl_stmt|;
specifier|const
name|bool
name|antiAlias
init|=
name|bool
argument_list|(
operator|(
name|state
argument_list|()
operator|->
name|renderHints
operator|&
name|QPainter
operator|::
name|TextAntialiasing
operator|)
operator|&&
operator|!
operator|(
name|font
operator|.
name|styleStrategy
argument_list|()
operator|&
name|QFont
operator|::
name|NoAntialias
operator|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|dc
argument_list|()
operator|->
name|SetTextAntialiasMode
argument_list|(
name|antiAlias
condition|?
name|D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE
else|:
name|D2D1_TEXT_ANTIALIAS_MODE_ALIASED
argument_list|)
expr_stmt|;
name|d
operator|->
name|dc
argument_list|()
operator|->
name|DrawGlyphRun
argument_list|(
name|pos
argument_list|,
operator|&
name|glyphRun
argument_list|,
name|NULL
argument_list|,
name|d
operator|->
name|pen
operator|.
name|brush
operator|.
name|Get
argument_list|()
argument_list|,
name|DWRITE_MEASURING_MODE_GDI_CLASSIC
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
