begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsdirect2dcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dhelpers.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dintegration.h"
end_include
begin_include
include|#
directive|include
file|<d3d11_1.h>
end_include
begin_include
include|#
directive|include
file|<d2d1_1.h>
end_include
begin_include
include|#
directive|include
file|<d2d1_1helper.h>
end_include
begin_include
include|#
directive|include
file|<dxgi1_2.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<dwrite.h>
end_include
begin_using
using|using
name|Microsoft
operator|::
name|WRL
operator|::
name|ComPtr
using|;
end_using
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QWindowsDirect2DContextPrivate
class|class
name|QWindowsDirect2DContextPrivate
block|{
public|public:
DECL|function|init
name|bool
name|init
parameter_list|()
block|{
name|HRESULT
name|hr
decl_stmt|;
name|D3D_FEATURE_LEVEL
name|level
decl_stmt|;
name|D3D_DRIVER_TYPE
name|typeAttempts
index|[]
init|=
block|{
name|D3D_DRIVER_TYPE_HARDWARE
block|,
name|D3D_DRIVER_TYPE_WARP
block|}
decl_stmt|;
specifier|const
name|int
name|ntypes
init|=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|typeAttempts
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|typeAttempts
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ntypes
condition|;
name|i
operator|++
control|)
block|{
name|hr
operator|=
name|D3D11CreateDevice
argument_list|(
name|NULL
argument_list|,
name|typeAttempts
index|[
name|i
index|]
argument_list|,
name|NULL
argument_list|,
name|D3D11_CREATE_DEVICE_SINGLETHREADED
operator||
name|D3D11_CREATE_DEVICE_BGRA_SUPPORT
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|D3D11_SDK_VERSION
argument_list|,
operator|&
name|d3dDevice
argument_list|,
operator|&
name|level
argument_list|,
operator|&
name|d3dDeviceContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
break|break;
block|}
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create Direct3D Device: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ComPtr
argument_list|<
name|IDXGIDevice
argument_list|>
name|dxgiDevice
decl_stmt|;
name|ComPtr
argument_list|<
name|IDXGIAdapter
argument_list|>
name|dxgiAdapter
decl_stmt|;
name|hr
operator|=
name|d3dDevice
operator|.
name|As
argument_list|(
operator|&
name|dxgiDevice
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: DXGI Device interface query failed on D3D Device: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|hr
operator|=
name|dxgiDevice
operator|->
name|GetAdapter
argument_list|(
operator|&
name|dxgiAdapter
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Failed to probe DXGI Device for parent DXGI Adapter: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|hr
operator|=
name|dxgiAdapter
operator|->
name|GetParent
argument_list|(
name|IID_PPV_ARGS
argument_list|(
operator|&
name|dxgiFactory
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Failed to probe DXGI Adapter for parent DXGI Factory: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|D2D1_FACTORY_OPTIONS
name|options
init|=
block|{}
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_D2D_DEBUG_OUTPUT
name|qDebug
argument_list|(
literal|"Turning on Direct2D debugging messages"
argument_list|)
expr_stmt|;
name|options
operator|.
name|debugLevel
operator|=
name|D2D1_DEBUG_LEVEL_INFORMATION
expr_stmt|;
endif|#
directive|endif
comment|// QT_D2D_DEBUG_OUTPUT
name|hr
operator|=
name|D2D1CreateFactory
argument_list|(
name|D2D1_FACTORY_TYPE_SINGLE_THREADED
argument_list|,
name|options
argument_list|,
name|d2dFactory
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create Direct2D Factory: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|hr
operator|=
name|d2dFactory
operator|->
name|CreateDevice
argument_list|(
name|dxgiDevice
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|d2dDevice
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create D2D Device: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|hr
operator|=
name|DWriteCreateFactory
argument_list|(
name|DWRITE_FACTORY_TYPE_SHARED
argument_list|,
name|__uuidof
argument_list|(
name|IDWriteFactory
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|IUnknown
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|directWriteFactory
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create DirectWrite factory: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|hr
operator|=
name|directWriteFactory
operator|->
name|GetGdiInterop
argument_list|(
operator|&
name|directWriteGdiInterop
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not create DirectWrite GDI Interop: %#x"
argument_list|,
name|__FUNCTION__
argument_list|,
name|hr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|member|d3dDevice
name|ComPtr
argument_list|<
name|ID3D11Device
argument_list|>
name|d3dDevice
decl_stmt|;
DECL|member|d2dFactory
name|ComPtr
argument_list|<
name|ID2D1Factory1
argument_list|>
name|d2dFactory
decl_stmt|;
DECL|member|d2dDevice
name|ComPtr
argument_list|<
name|ID2D1Device
argument_list|>
name|d2dDevice
decl_stmt|;
DECL|member|dxgiFactory
name|ComPtr
argument_list|<
name|IDXGIFactory2
argument_list|>
name|dxgiFactory
decl_stmt|;
DECL|member|d3dDeviceContext
name|ComPtr
argument_list|<
name|ID3D11DeviceContext
argument_list|>
name|d3dDeviceContext
decl_stmt|;
DECL|member|directWriteFactory
name|ComPtr
argument_list|<
name|IDWriteFactory
argument_list|>
name|directWriteFactory
decl_stmt|;
DECL|member|directWriteGdiInterop
name|ComPtr
argument_list|<
name|IDWriteGdiInterop
argument_list|>
name|directWriteGdiInterop
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QWindowsDirect2DContext
name|QWindowsDirect2DContext
operator|::
name|QWindowsDirect2DContext
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QWindowsDirect2DContextPrivate
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWindowsDirect2DContext
name|QWindowsDirect2DContext
operator|::
name|~
name|QWindowsDirect2DContext
parameter_list|()
block|{}
end_destructor
begin_function
DECL|function|init
name|bool
name|QWindowsDirect2DContext
operator|::
name|init
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|init
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|instance
name|QWindowsDirect2DContext
modifier|*
name|QWindowsDirect2DContext
operator|::
name|instance
parameter_list|()
block|{
return|return
name|QWindowsDirect2DIntegration
operator|::
name|instance
argument_list|()
operator|->
name|direct2DContext
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|d3dDevice
name|ID3D11Device
modifier|*
name|QWindowsDirect2DContext
operator|::
name|d3dDevice
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|d3dDevice
operator|.
name|Get
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|d2dDevice
name|ID2D1Device
modifier|*
name|QWindowsDirect2DContext
operator|::
name|d2dDevice
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|d2dDevice
operator|.
name|Get
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|d2dFactory
name|ID2D1Factory1
modifier|*
name|QWindowsDirect2DContext
operator|::
name|d2dFactory
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|d2dFactory
operator|.
name|Get
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|dxgiFactory
name|IDXGIFactory2
modifier|*
name|QWindowsDirect2DContext
operator|::
name|dxgiFactory
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|dxgiFactory
operator|.
name|Get
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|d3dDeviceContext
name|ID3D11DeviceContext
modifier|*
name|QWindowsDirect2DContext
operator|::
name|d3dDeviceContext
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|d3dDeviceContext
operator|.
name|Get
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|dwriteFactory
name|IDWriteFactory
modifier|*
name|QWindowsDirect2DContext
operator|::
name|dwriteFactory
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|directWriteFactory
operator|.
name|Get
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|dwriteGdiInterop
name|IDWriteGdiInterop
modifier|*
name|QWindowsDirect2DContext
operator|::
name|dwriteGdiInterop
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DContext
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|directWriteGdiInterop
operator|.
name|Get
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
