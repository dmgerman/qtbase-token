begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowsdirect2dcontext.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dpaintdevice.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dplatformpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qwindowsdirect2dhelpers.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtGui/QImage>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPaintDevice>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPaintEngine>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QWindowsDirect2DPlatformPixmapPrivate
class|class
name|QWindowsDirect2DPlatformPixmapPrivate
block|{
public|public:
DECL|function|QWindowsDirect2DPlatformPixmapPrivate
name|QWindowsDirect2DPlatformPixmapPrivate
parameter_list|()
member_init_list|:
name|owns_bitmap
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|bitmap
argument_list|(
operator|new
name|QWindowsDirect2DBitmap
argument_list|)
member_init_list|,
name|device
argument_list|(
operator|new
name|QWindowsDirect2DPaintDevice
argument_list|(
name|bitmap
argument_list|,
name|QInternal
operator|::
name|Pixmap
argument_list|)
argument_list|)
member_init_list|,
name|devicePixelRatio
argument_list|(
literal|1.0
argument_list|)
block|{}
DECL|function|QWindowsDirect2DPlatformPixmapPrivate
name|QWindowsDirect2DPlatformPixmapPrivate
parameter_list|(
name|QWindowsDirect2DBitmap
modifier|*
name|bitmap
parameter_list|,
name|QWindowsDirect2DPaintEngine
operator|::
name|Flags
name|flags
parameter_list|)
member_init_list|:
name|owns_bitmap
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|bitmap
argument_list|(
name|bitmap
argument_list|)
member_init_list|,
name|device
argument_list|(
operator|new
name|QWindowsDirect2DPaintDevice
argument_list|(
name|bitmap
argument_list|,
name|QInternal
operator|::
name|Pixmap
argument_list|,
name|flags
argument_list|)
argument_list|)
member_init_list|,
name|devicePixelRatio
argument_list|(
literal|1.0
argument_list|)
block|{}
DECL|function|~QWindowsDirect2DPlatformPixmapPrivate
name|~
name|QWindowsDirect2DPlatformPixmapPrivate
parameter_list|()
block|{
if|if
condition|(
name|owns_bitmap
condition|)
operator|delete
name|bitmap
expr_stmt|;
block|}
DECL|member|owns_bitmap
name|bool
name|owns_bitmap
decl_stmt|;
DECL|member|bitmap
name|QWindowsDirect2DBitmap
modifier|*
name|bitmap
decl_stmt|;
DECL|member|device
name|QScopedPointer
argument_list|<
name|QWindowsDirect2DPaintDevice
argument_list|>
name|device
decl_stmt|;
DECL|member|devicePixelRatio
name|qreal
name|devicePixelRatio
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|qt_d2dpixmap_serno
specifier|static
name|int
name|qt_d2dpixmap_serno
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QWindowsDirect2DPlatformPixmap
name|QWindowsDirect2DPlatformPixmap
operator|::
name|QWindowsDirect2DPlatformPixmap
parameter_list|(
name|PixelType
name|pixelType
parameter_list|)
member_init_list|:
name|QPlatformPixmap
argument_list|(
name|pixelType
argument_list|,
name|Direct2DClass
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QWindowsDirect2DPlatformPixmapPrivate
argument_list|)
block|{
name|setSerialNumber
argument_list|(
name|qt_d2dpixmap_serno
operator|++
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QWindowsDirect2DPlatformPixmap
name|QWindowsDirect2DPlatformPixmap
operator|::
name|QWindowsDirect2DPlatformPixmap
parameter_list|(
name|QPlatformPixmap
operator|::
name|PixelType
name|pixelType
parameter_list|,
name|QWindowsDirect2DPaintEngine
operator|::
name|Flags
name|flags
parameter_list|,
name|QWindowsDirect2DBitmap
modifier|*
name|bitmap
parameter_list|)
member_init_list|:
name|QPlatformPixmap
argument_list|(
name|pixelType
argument_list|,
name|Direct2DClass
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QWindowsDirect2DPlatformPixmapPrivate
argument_list|(
name|bitmap
argument_list|,
name|flags
argument_list|)
argument_list|)
block|{
name|setSerialNumber
argument_list|(
name|qt_d2dpixmap_serno
operator|++
argument_list|)
expr_stmt|;
name|is_null
operator|=
literal|false
expr_stmt|;
name|w
operator|=
name|bitmap
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|bitmap
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
expr_stmt|;
name|this
operator|->
name|d
operator|=
literal|32
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsDirect2DPlatformPixmap
name|QWindowsDirect2DPlatformPixmap
operator|::
name|~
name|QWindowsDirect2DPlatformPixmap
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|resize
name|void
name|QWindowsDirect2DPlatformPixmap
operator|::
name|resize
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPlatformPixmap
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|bitmap
operator|->
name|resize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not resize bitmap"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|is_null
operator|=
literal|false
expr_stmt|;
name|w
operator|=
name|width
expr_stmt|;
name|h
operator|=
name|height
expr_stmt|;
name|this
operator|->
name|d
operator|=
literal|32
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromImage
name|void
name|QWindowsDirect2DPlatformPixmap
operator|::
name|fromImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|Qt
operator|::
name|ImageConversionFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPlatformPixmap
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|bitmap
operator|->
name|fromImage
argument_list|(
name|image
argument_list|,
name|flags
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: Could not init from image"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
return|return;
block|}
name|is_null
operator|=
literal|false
expr_stmt|;
name|w
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|this
operator|->
name|d
operator|=
literal|32
expr_stmt|;
block|}
end_function
begin_function
DECL|function|metric
name|int
name|QWindowsDirect2DPlatformPixmap
operator|::
name|metric
parameter_list|(
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metric
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DPlatformPixmap
argument_list|)
expr_stmt|;
name|Q_GUI_EXPORT
name|int
name|qt_paint_device_metric
argument_list|(
specifier|const
name|QPaintDevice
operator|*
name|device
argument_list|,
name|QPaintDevice
operator|::
name|PaintDeviceMetric
name|metric
argument_list|)
decl_stmt|;
return|return
name|qt_paint_device_metric
argument_list|(
name|d
operator|->
name|device
operator|.
name|data
argument_list|()
argument_list|,
name|metric
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fill
name|void
name|QWindowsDirect2DPlatformPixmap
operator|::
name|fill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPlatformPixmap
argument_list|)
expr_stmt|;
name|d
operator|->
name|bitmap
operator|->
name|fill
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasAlphaChannel
name|bool
name|QWindowsDirect2DPlatformPixmap
operator|::
name|hasAlphaChannel
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|toImage
name|QImage
name|QWindowsDirect2DPlatformPixmap
operator|::
name|toImage
parameter_list|()
specifier|const
block|{
return|return
name|toImage
argument_list|(
name|QRect
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toImage
name|QImage
name|QWindowsDirect2DPlatformPixmap
operator|::
name|toImage
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DPlatformPixmap
argument_list|)
expr_stmt|;
name|bool
name|active
init|=
name|d
operator|->
name|device
operator|->
name|paintEngine
argument_list|()
operator|->
name|isActive
argument_list|()
decl_stmt|;
if|if
condition|(
name|active
condition|)
name|d
operator|->
name|device
operator|->
name|paintEngine
argument_list|()
operator|->
name|end
argument_list|()
expr_stmt|;
name|QImage
name|result
init|=
name|d
operator|->
name|bitmap
operator|->
name|toImage
argument_list|(
name|rect
argument_list|)
decl_stmt|;
if|if
condition|(
name|active
condition|)
name|d
operator|->
name|device
operator|->
name|paintEngine
argument_list|()
operator|->
name|begin
argument_list|(
name|d
operator|->
name|device
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|paintEngine
name|QPaintEngine
modifier|*
name|QWindowsDirect2DPlatformPixmap
operator|::
name|paintEngine
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DPlatformPixmap
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|device
operator|->
name|paintEngine
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|devicePixelRatio
name|qreal
name|QWindowsDirect2DPlatformPixmap
operator|::
name|devicePixelRatio
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DPlatformPixmap
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|devicePixelRatio
return|;
block|}
end_function
begin_function
DECL|function|setDevicePixelRatio
name|void
name|QWindowsDirect2DPlatformPixmap
operator|::
name|setDevicePixelRatio
parameter_list|(
name|qreal
name|scaleFactor
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWindowsDirect2DPlatformPixmap
argument_list|)
expr_stmt|;
name|d
operator|->
name|devicePixelRatio
operator|=
name|scaleFactor
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bitmap
name|QWindowsDirect2DBitmap
modifier|*
name|QWindowsDirect2DPlatformPixmap
operator|::
name|bitmap
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWindowsDirect2DPlatformPixmap
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|bitmap
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
