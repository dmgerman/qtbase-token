begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QEGLFSDEVICEINTEGRATION_H
end_ifndef
begin_define
DECL|macro|QEGLFSDEVICEINTEGRATION_H
define|#
directive|define
name|QEGLFSDEVICEINTEGRATION_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qeglfsglobal.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformscreen.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtGui/QSurfaceFormat>
end_include
begin_include
include|#
directive|include
file|<QtGui/QImage>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QPlatformSurface
name|class
name|QPlatformSurface
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QEglFSWindow
name|class
name|QEglFSWindow
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|QEGLDeviceIntegrationFactoryInterface_iid
define|#
directive|define
name|QEGLDeviceIntegrationFactoryInterface_iid
value|"org.qt-project.qt.qpa.egl.QEGLDeviceIntegrationFactoryInterface.5.5"
end_define
begin_decl_stmt
name|class
name|Q_EGLFS_EXPORT
name|QEGLDeviceIntegration
block|{
name|public
label|:
name|virtual
operator|~
name|QEGLDeviceIntegration
argument_list|()
block|{ }
name|virtual
name|void
name|platformInit
argument_list|()
expr_stmt|;
name|virtual
name|void
name|platformDestroy
parameter_list|()
function_decl|;
name|virtual
name|EGLNativeDisplayType
name|platformDisplay
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|EGLDisplay
name|createDisplay
parameter_list|(
name|EGLNativeDisplayType
name|nativeDisplay
parameter_list|)
function_decl|;
name|virtual
name|bool
name|usesDefaultScreen
parameter_list|()
function_decl|;
name|virtual
name|void
name|screenInit
parameter_list|()
function_decl|;
name|virtual
name|void
name|screenDestroy
parameter_list|()
function_decl|;
name|virtual
name|QSizeF
name|physicalScreenSize
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QSize
name|screenSize
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QDpi
name|logicalDpi
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|qreal
name|pixelDensity
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|Qt
operator|::
name|ScreenOrientation
name|nativeOrientation
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|Qt
operator|::
name|ScreenOrientation
name|orientation
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|int
name|screenDepth
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QImage
operator|::
name|Format
name|screenFormat
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|qreal
name|refreshRate
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QSurfaceFormat
name|surfaceFormatFor
argument_list|(
specifier|const
name|QSurfaceFormat
operator|&
name|inputFormat
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|EGLint
name|surfaceType
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QEglFSWindow
modifier|*
name|createWindow
argument_list|(
name|QWindow
operator|*
name|window
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|EGLNativeWindowType
name|createNativeWindow
parameter_list|(
name|QPlatformWindow
modifier|*
name|platformWindow
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
function_decl|;
name|virtual
name|EGLNativeWindowType
name|createNativeOffscreenWindow
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
function_decl|;
name|virtual
name|void
name|destroyNativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
function_decl|;
name|virtual
name|bool
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|cap
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|QPlatformCursor
modifier|*
name|createCursor
argument_list|(
name|QPlatformScreen
operator|*
name|screen
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|filterConfig
argument_list|(
name|EGLDisplay
name|display
argument_list|,
name|EGLConfig
name|config
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|waitForVSync
argument_list|(
name|QPlatformSurface
operator|*
name|surface
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|presentBuffer
parameter_list|(
name|QPlatformSurface
modifier|*
name|surface
parameter_list|)
function_decl|;
name|virtual
name|QByteArray
name|fbDeviceName
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|int
name|framebufferIndex
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|supportsPBuffers
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|supportsSurfacelessContexts
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
operator|*
name|wlDisplay
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_EGLFS_EXPORT
name|QEGLDeviceIntegrationPlugin
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|virtual
name|QEGLDeviceIntegration
operator|*
name|create
argument_list|()
operator|=
literal|0
block|;
comment|// the pattern expected by qLoadPlugin calls for a QString argument.
comment|// we don't need it, so don't bother subclasses with it:
name|QEGLDeviceIntegration
operator|*
name|create
argument_list|(
argument|const QString&
argument_list|)
block|{
return|return
name|create
argument_list|()
return|;
block|}
expr|}
block|;
name|class
name|Q_EGLFS_EXPORT
name|QEGLDeviceIntegrationFactory
block|{
name|public
operator|:
specifier|static
name|QStringList
name|keys
argument_list|(
specifier|const
name|QString
operator|&
name|pluginPath
operator|=
name|QString
argument_list|()
argument_list|)
block|;
specifier|static
name|QEGLDeviceIntegration
operator|*
name|create
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QString
operator|&
name|platformPluginPath
operator|=
name|QString
argument_list|()
argument_list|)
block|; }
block|;
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QEGLDEVICEINTEGRATION_H
end_comment
end_unit
