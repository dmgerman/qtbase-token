begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QEGLFSCURSOR_H
end_ifndef
begin_define
DECL|macro|QEGLFSCURSOR_H
define|#
directive|define
name|QEGLFSCURSOR_H
end_define
begin_include
include|#
directive|include
file|<qpa/qplatformcursor.h>
end_include
begin_include
include|#
directive|include
file|"qeglfsscreen.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QOpenGLShaderProgram
name|class
name|QOpenGLShaderProgram
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QEglFSCursor
range|:
name|public
name|QPlatformCursor
block|{
name|public
operator|:
name|QEglFSCursor
argument_list|(
name|QEglFSScreen
operator|*
name|screen
argument_list|)
block|;
operator|~
name|QEglFSCursor
argument_list|()
block|;
name|void
name|changeCursor
argument_list|(
name|QCursor
operator|*
name|cursor
argument_list|,
name|QWindow
operator|*
name|widget
argument_list|)
block|;
name|void
name|pointerEvent
argument_list|(
specifier|const
name|QMouseEvent
operator|&
name|event
argument_list|)
block|;
name|QPoint
name|pos
argument_list|()
specifier|const
block|;
name|void
name|setPos
argument_list|(
specifier|const
name|QPoint
operator|&
name|pos
argument_list|)
block|;
name|QRect
name|cursorRect
argument_list|()
specifier|const
block|{
return|return
name|QRect
argument_list|(
name|m_pos
argument_list|,
name|m_cursor
operator|.
name|size
argument_list|)
return|;
block|}
name|void
name|render
argument_list|()
block|;
name|private
operator|:
name|void
name|createShaderPrograms
argument_list|()
block|;
specifier|static
name|void
name|createCursorTexture
argument_list|(
name|uint
operator|*
name|texture
argument_list|,
specifier|const
name|QImage
operator|&
name|image
argument_list|)
block|;
name|void
name|initCursorAtlas
argument_list|()
block|;
name|QPlatformScreen
operator|*
name|m_screen
block|;
comment|// cursor atlas information
block|struct
name|CursorAtlas
block|{
name|CursorAtlas
argument_list|()
operator|:
name|texture
argument_list|(
literal|0
argument_list|)
block|,
name|cursorWidth
argument_list|(
literal|0
argument_list|)
block|,
name|cursorHeight
argument_list|(
literal|0
argument_list|)
block|{ }
name|uint
name|texture
block|;
name|int
name|width
block|,
name|height
block|;
comment|// width and height of the the atlas
name|int
name|cursorWidth
block|,
name|cursorHeight
block|;
comment|// width and height of cursors inside the atlas
name|QPoint
name|hotSpot
block|;     }
name|m_cursorAtlas
block|;
comment|// current cursor information
block|struct
name|Cursor
block|{
name|Cursor
argument_list|()
operator|:
name|texture
argument_list|(
literal|0
argument_list|)
block|,
name|shape
argument_list|(
argument|Qt::BlankCursor
argument_list|)
block|{ }
name|uint
name|texture
block|;
comment|// a texture from 'image' or the atlas
name|Qt
operator|::
name|CursorShape
name|shape
block|;
name|QRectF
name|textureRect
block|;
comment|// normalized rect inside texture
name|QSize
name|size
block|;
comment|// size of the cursor
name|QPoint
name|hotSpot
block|;     }
name|m_cursor
block|;
name|QPoint
name|m_pos
block|;
name|QOpenGLShaderProgram
operator|*
name|m_program
block|;
name|int
name|m_vertexCoordEntry
block|;
name|int
name|m_textureCoordEntry
block|;
name|int
name|m_textureEntry
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QEGLFSCURSOR_H
end_comment
end_unit
