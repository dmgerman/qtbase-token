begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qwindow.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qwindowsysteminterface.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformcursor.h>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qopenglcompositor_p.h>
end_include
begin_include
include|#
directive|include
file|"qeglfsscreen.h"
end_include
begin_include
include|#
directive|include
file|"qeglfswindow.h"
end_include
begin_include
include|#
directive|include
file|"qeglfshooks.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QEglFSScreen
name|QEglFSScreen
operator|::
name|QEglFSScreen
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|)
member_init_list|:
name|m_dpy
argument_list|(
name|dpy
argument_list|)
member_init_list|,
name|m_pointerWindow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_surface
argument_list|(
name|EGL_NO_SURFACE
argument_list|)
member_init_list|,
name|m_cursor
argument_list|(
literal|0
argument_list|)
block|{
name|m_cursor
operator|=
name|qt_egl_device_integration
argument_list|()
operator|->
name|createCursor
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QEglFSScreen
name|QEglFSScreen
operator|::
name|~
name|QEglFSScreen
parameter_list|()
block|{
operator|delete
name|m_cursor
expr_stmt|;
name|QOpenGLCompositor
operator|::
name|destroy
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|geometry
name|QRect
name|QEglFSScreen
operator|::
name|geometry
parameter_list|()
specifier|const
block|{
return|return
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|qt_egl_device_integration
argument_list|()
operator|->
name|screenSize
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|depth
name|int
name|QEglFSScreen
operator|::
name|depth
parameter_list|()
specifier|const
block|{
return|return
name|qt_egl_device_integration
argument_list|()
operator|->
name|screenDepth
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|format
name|QImage
operator|::
name|Format
name|QEglFSScreen
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|qt_egl_device_integration
argument_list|()
operator|->
name|screenFormat
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|physicalSize
name|QSizeF
name|QEglFSScreen
operator|::
name|physicalSize
parameter_list|()
specifier|const
block|{
return|return
name|qt_egl_device_integration
argument_list|()
operator|->
name|physicalScreenSize
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|logicalDpi
name|QDpi
name|QEglFSScreen
operator|::
name|logicalDpi
parameter_list|()
specifier|const
block|{
return|return
name|qt_egl_device_integration
argument_list|()
operator|->
name|logicalDpi
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|nativeOrientation
name|Qt
operator|::
name|ScreenOrientation
name|QEglFSScreen
operator|::
name|nativeOrientation
parameter_list|()
specifier|const
block|{
return|return
name|qt_egl_device_integration
argument_list|()
operator|->
name|nativeOrientation
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|orientation
name|Qt
operator|::
name|ScreenOrientation
name|QEglFSScreen
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
return|return
name|qt_egl_device_integration
argument_list|()
operator|->
name|orientation
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|cursor
name|QPlatformCursor
modifier|*
name|QEglFSScreen
operator|::
name|cursor
parameter_list|()
specifier|const
block|{
return|return
name|m_cursor
return|;
block|}
end_function
begin_function
DECL|function|refreshRate
name|qreal
name|QEglFSScreen
operator|::
name|refreshRate
parameter_list|()
specifier|const
block|{
return|return
name|qt_egl_device_integration
argument_list|()
operator|->
name|refreshRate
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setPrimarySurface
name|void
name|QEglFSScreen
operator|::
name|setPrimarySurface
parameter_list|(
name|EGLSurface
name|surface
parameter_list|)
block|{
name|m_surface
operator|=
name|surface
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleCursorMove
name|void
name|QEglFSScreen
operator|::
name|handleCursorMove
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
specifier|const
name|QOpenGLCompositor
modifier|*
name|compositor
init|=
name|QOpenGLCompositor
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QOpenGLCompositorWindow
modifier|*
argument_list|>
name|windows
init|=
name|compositor
operator|->
name|windows
argument_list|()
decl_stmt|;
comment|// Generate enter and leave events like a real windowing system would do.
if|if
condition|(
name|windows
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// First window is always fullscreen.
if|if
condition|(
name|windows
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QWindow
modifier|*
name|window
init|=
name|windows
index|[
literal|0
index|]
operator|->
name|sourceWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_pointerWindow
operator|!=
name|window
condition|)
block|{
name|m_pointerWindow
operator|=
name|window
expr_stmt|;
name|QWindowSystemInterface
operator|::
name|handleEnterEvent
argument_list|(
name|window
argument_list|,
name|window
operator|->
name|mapFromGlobal
argument_list|(
name|pos
argument_list|)
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|QWindow
modifier|*
name|enter
init|=
literal|0
decl_stmt|,
modifier|*
name|leave
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|windows
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QWindow
modifier|*
name|window
init|=
name|windows
index|[
name|i
index|]
operator|->
name|sourceWindow
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|geom
init|=
name|window
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|geom
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
block|{
if|if
condition|(
name|m_pointerWindow
operator|!=
name|window
condition|)
block|{
name|leave
operator|=
name|m_pointerWindow
expr_stmt|;
name|m_pointerWindow
operator|=
name|window
expr_stmt|;
name|enter
operator|=
name|window
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|enter
operator|&&
name|leave
condition|)
name|QWindowSystemInterface
operator|::
name|handleEnterLeaveEvent
argument_list|(
name|enter
argument_list|,
name|leave
argument_list|,
name|enter
operator|->
name|mapFromGlobal
argument_list|(
name|pos
argument_list|)
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|grabWindow
name|QPixmap
name|QEglFSScreen
operator|::
name|grabWindow
parameter_list|(
name|WId
name|wid
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
specifier|const
block|{
name|QOpenGLCompositor
modifier|*
name|compositor
init|=
name|QOpenGLCompositor
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QOpenGLCompositorWindow
modifier|*
argument_list|>
name|windows
init|=
name|compositor
operator|->
name|windows
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|windows
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|img
decl_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|QEglFSWindow
operator|*
argument_list|>
argument_list|(
name|windows
operator|.
name|first
argument_list|()
operator|->
name|sourceWindow
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
operator|->
name|isRaster
argument_list|()
condition|)
block|{
comment|// Request the compositor to render everything into an FBO and read it back. This
comment|// is of course slow, but it's safe and reliable. It will not include the mouse
comment|// cursor, which is a plus.
name|img
operator|=
name|compositor
operator|->
name|grab
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Just a single OpenGL window without compositing. Do not support this case for now. Doing
comment|// glReadPixels is not an option since it would read from the back buffer which may have
comment|// undefined content when calling right after a swapBuffers (unless preserved swap is
comment|// available and enabled, but we have no support for that).
name|qWarning
argument_list|(
literal|"grabWindow: Not supported for non-composited OpenGL content. Use QQuickWindow::grabWindow() instead."
argument_list|)
expr_stmt|;
return|return
name|QPixmap
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|wid
condition|)
block|{
specifier|const
name|QSize
name|screenSize
init|=
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|<
literal|0
condition|)
name|width
operator|=
name|screenSize
operator|.
name|width
argument_list|()
operator|-
name|x
expr_stmt|;
if|if
condition|(
name|height
operator|<
literal|0
condition|)
name|height
operator|=
name|screenSize
operator|.
name|height
argument_list|()
operator|-
name|y
expr_stmt|;
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
operator|.
name|copy
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
foreach|foreach
control|(
name|QOpenGLCompositorWindow
modifier|*
name|w
decl|,
name|windows
control|)
block|{
specifier|const
name|QWindow
modifier|*
name|window
init|=
name|w
operator|->
name|sourceWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|window
operator|->
name|winId
argument_list|()
operator|==
name|wid
condition|)
block|{
specifier|const
name|QRect
name|geom
init|=
name|window
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|<
literal|0
condition|)
name|width
operator|=
name|geom
operator|.
name|width
argument_list|()
operator|-
name|x
expr_stmt|;
if|if
condition|(
name|height
operator|<
literal|0
condition|)
name|height
operator|=
name|geom
operator|.
name|height
argument_list|()
operator|-
name|y
expr_stmt|;
name|QRect
name|rect
argument_list|(
name|geom
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
decl_stmt|;
name|rect
operator|&=
name|window
operator|->
name|geometry
argument_list|()
expr_stmt|;
return|return
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
operator|.
name|copy
argument_list|(
name|rect
argument_list|)
return|;
block|}
block|}
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
