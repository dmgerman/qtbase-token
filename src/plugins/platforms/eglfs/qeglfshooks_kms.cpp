begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the qmake spec of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeglfshooks.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qdevicediscovery_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_unix_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedPointer>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpa/qplatformwindow.h>
end_include
begin_include
include|#
directive|include
file|<xf86drm.h>
end_include
begin_include
include|#
directive|include
file|<xf86drmMode.h>
end_include
begin_include
include|#
directive|include
file|<gbm.h>
end_include
begin_macro
name|QT_USE_NAMESPACE
end_macro
begin_class
DECL|class|QEglKmsHooks
class|class
name|QEglKmsHooks
super|:
specifier|public
name|QEglFSHooks
block|{
public|public:
name|QEglKmsHooks
parameter_list|()
constructor_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|platformInit
parameter_list|()
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|platformDestroy
parameter_list|()
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|EGLNativeDisplayType
name|platformDisplay
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|QSizeF
name|physicalScreenSize
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|QSize
name|screenSize
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|int
name|screenDepth
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|QSurfaceFormat
name|surfaceFormatFor
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|inputFormat
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
name|EGLNativeWindowType
name|createNativeWindow
parameter_list|(
name|QPlatformWindow
modifier|*
name|platformWindow
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
DECL|member|Q_DECL_OVERRIDE
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|destroyNativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|bool
name|hasCapability
parameter_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|cap
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|presentBuffer
parameter_list|()
name|Q_DECL_OVERRIDE
function_decl|;
name|bool
name|setup_kms
parameter_list|()
function_decl|;
DECL|struct|FrameBuffer
struct|struct
name|FrameBuffer
block|{
DECL|function|FrameBuffer
name|FrameBuffer
parameter_list|()
member_init_list|:
name|fb
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|fb
name|uint32_t
name|fb
decl_stmt|;
block|}
struct|;
name|FrameBuffer
modifier|*
name|framebufferForBufferObject
parameter_list|(
name|gbm_bo
modifier|*
name|bo
parameter_list|)
function_decl|;
private|private:
comment|// device bits
DECL|member|m_device
name|QByteArray
name|m_device
decl_stmt|;
DECL|member|m_dri_fd
name|int
name|m_dri_fd
decl_stmt|;
DECL|member|m_gbm_device
name|gbm_device
modifier|*
name|m_gbm_device
decl_stmt|;
comment|// KMS bits
DECL|member|m_drm_connector
name|drmModeConnector
modifier|*
name|m_drm_connector
decl_stmt|;
DECL|member|m_drm_encoder
name|drmModeEncoder
modifier|*
name|m_drm_encoder
decl_stmt|;
DECL|member|m_drm_mode
name|drmModeModeInfo
name|m_drm_mode
decl_stmt|;
DECL|member|m_drm_crtc
name|quint32
name|m_drm_crtc
decl_stmt|;
comment|// Drawing bits
DECL|member|m_gbm_surface
name|gbm_surface
modifier|*
name|m_gbm_surface
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|kms_hooks
specifier|static
name|QEglKmsHooks
name|kms_hooks
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|platformHooks
name|QEglFSHooks
modifier|*
name|platformHooks
init|=
operator|&
name|kms_hooks
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QEglKmsHooks
name|QEglKmsHooks
operator|::
name|QEglKmsHooks
parameter_list|()
member_init_list|:
name|m_dri_fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_gbm_device
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_drm_connector
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_drm_encoder
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_drm_crtc
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_gbm_surface
argument_list|(
name|Q_NULLPTR
argument_list|)
block|{  }
end_constructor
begin_function
DECL|function|platformInit
name|void
name|QEglKmsHooks
operator|::
name|platformInit
parameter_list|()
block|{
name|QDeviceDiscovery
modifier|*
name|d
init|=
name|QDeviceDiscovery
operator|::
name|create
argument_list|(
name|QDeviceDiscovery
operator|::
name|Device_VideoMask
argument_list|)
decl_stmt|;
name|QStringList
name|devices
init|=
name|d
operator|->
name|scanConnectedDevices
argument_list|()
decl_stmt|;
name|d
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
if|if
condition|(
name|devices
operator|.
name|isEmpty
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"Could not find DRM device!"
argument_list|)
expr_stmt|;
name|m_device
operator|=
name|devices
operator|.
name|first
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|m_dri_fd
operator|=
name|qt_safe_open
argument_list|(
name|m_device
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
operator||
name|O_CLOEXEC
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_dri_fd
operator|==
operator|-
literal|1
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Could not open DRM device %s"
argument_list|,
name|m_device
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"DRM device required, aborting."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|setup_kms
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"Could not set up KMS on device %s!"
argument_list|,
name|m_device
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|m_gbm_device
operator|=
name|gbm_create_device
argument_list|(
name|m_dri_fd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_gbm_device
condition|)
name|qFatal
argument_list|(
literal|"Could not initialize gbm on device %s!"
argument_list|,
name|m_device
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|platformDestroy
name|void
name|QEglKmsHooks
operator|::
name|platformDestroy
parameter_list|()
block|{
name|gbm_device_destroy
argument_list|(
name|m_gbm_device
argument_list|)
expr_stmt|;
name|m_gbm_device
operator|=
name|Q_NULLPTR
expr_stmt|;
if|if
condition|(
name|qt_safe_close
argument_list|(
name|m_dri_fd
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|qErrnoWarning
argument_list|(
literal|"Could not close DRM device %s"
argument_list|,
name|m_device
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|m_dri_fd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|platformDisplay
name|EGLNativeDisplayType
name|QEglKmsHooks
operator|::
name|platformDisplay
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|EGLNativeDisplayType
argument_list|>
argument_list|(
name|m_gbm_device
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|physicalScreenSize
name|QSizeF
name|QEglKmsHooks
operator|::
name|physicalScreenSize
parameter_list|()
specifier|const
block|{
return|return
name|QSizeF
argument_list|(
name|m_drm_connector
operator|->
name|mmWidth
argument_list|,
name|m_drm_connector
operator|->
name|mmHeight
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|screenSize
name|QSize
name|QEglKmsHooks
operator|::
name|screenSize
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
name|m_drm_mode
operator|.
name|hdisplay
argument_list|,
name|m_drm_mode
operator|.
name|vdisplay
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|screenDepth
name|int
name|QEglKmsHooks
operator|::
name|screenDepth
parameter_list|()
specifier|const
block|{
return|return
literal|32
return|;
block|}
end_function
begin_function
DECL|function|surfaceFormatFor
name|QSurfaceFormat
name|QEglKmsHooks
operator|::
name|surfaceFormatFor
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|inputFormat
parameter_list|)
specifier|const
block|{
name|QSurfaceFormat
name|format
argument_list|(
name|inputFormat
argument_list|)
decl_stmt|;
name|format
operator|.
name|setRenderableType
argument_list|(
name|QSurfaceFormat
operator|::
name|OpenGLES
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSwapBehavior
argument_list|(
name|QSurfaceFormat
operator|::
name|DoubleBuffer
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRedBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format
operator|.
name|setGreenBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format
operator|.
name|setBlueBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
return|return
name|format
return|;
block|}
end_function
begin_function
DECL|function|createNativeWindow
name|EGLNativeWindowType
name|QEglKmsHooks
operator|::
name|createNativeWindow
parameter_list|(
name|QPlatformWindow
modifier|*
name|platformWindow
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|platformWindow
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_gbm_surface
condition|)
block|{
name|qWarning
argument_list|(
literal|"Only single window apps supported!"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|m_gbm_surface
operator|=
name|gbm_surface_create
argument_list|(
name|m_gbm_device
argument_list|,
name|screenSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|screenSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|GBM_FORMAT_XRGB8888
argument_list|,
name|GBM_BO_USE_SCANOUT
operator||
name|GBM_BO_USE_RENDERING
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_gbm_surface
condition|)
name|qFatal
argument_list|(
literal|"Could not initialize GBM surface"
argument_list|)
expr_stmt|;
return|return
cast|reinterpret_cast
argument_list|<
name|EGLNativeWindowType
argument_list|>
argument_list|(
name|m_gbm_surface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|destroyNativeWindow
name|void
name|QEglKmsHooks
operator|::
name|destroyNativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
block|{
name|gbm_surface
modifier|*
name|surface
init|=
cast|reinterpret_cast
argument_list|<
name|gbm_surface
operator|*
argument_list|>
argument_list|(
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|surface
operator|==
name|m_gbm_surface
condition|)
name|m_gbm_surface
operator|=
name|Q_NULLPTR
expr_stmt|;
name|gbm_surface_destroy
argument_list|(
name|surface
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasCapability
name|bool
name|QEglKmsHooks
operator|::
name|hasCapability
parameter_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|cap
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cap
condition|)
block|{
case|case
name|QPlatformIntegration
operator|::
name|ThreadedPixmaps
case|:
case|case
name|QPlatformIntegration
operator|::
name|OpenGL
case|:
case|case
name|QPlatformIntegration
operator|::
name|ThreadedOpenGL
case|:
case|case
name|QPlatformIntegration
operator|::
name|BufferQueueingOpenGL
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|gbm_bo_destroyed_callback
specifier|static
name|void
name|gbm_bo_destroyed_callback
parameter_list|(
name|gbm_bo
modifier|*
name|bo
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QEglKmsHooks
operator|::
name|FrameBuffer
modifier|*
name|fb
init|=
cast|static_cast
argument_list|<
name|QEglKmsHooks
operator|::
name|FrameBuffer
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|fb
operator|->
name|fb
condition|)
block|{
name|gbm_device
modifier|*
name|device
init|=
name|gbm_bo_get_device
argument_list|(
name|bo
argument_list|)
decl_stmt|;
name|drmModeRmFB
argument_list|(
name|gbm_device_get_fd
argument_list|(
name|device
argument_list|)
argument_list|,
name|fb
operator|->
name|fb
argument_list|)
expr_stmt|;
block|}
operator|delete
name|fb
expr_stmt|;
block|}
end_function
begin_function
DECL|function|framebufferForBufferObject
name|QEglKmsHooks
operator|::
name|FrameBuffer
modifier|*
name|QEglKmsHooks
operator|::
name|framebufferForBufferObject
parameter_list|(
name|gbm_bo
modifier|*
name|bo
parameter_list|)
block|{
block|{
name|FrameBuffer
modifier|*
name|fb
init|=
cast|static_cast
argument_list|<
name|FrameBuffer
operator|*
argument_list|>
argument_list|(
name|gbm_bo_get_user_data
argument_list|(
name|bo
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fb
condition|)
return|return
name|fb
return|;
block|}
name|uint32_t
name|width
init|=
name|gbm_bo_get_width
argument_list|(
name|bo
argument_list|)
decl_stmt|;
name|uint32_t
name|height
init|=
name|gbm_bo_get_height
argument_list|(
name|bo
argument_list|)
decl_stmt|;
name|uint32_t
name|stride
init|=
name|gbm_bo_get_stride
argument_list|(
name|bo
argument_list|)
decl_stmt|;
name|uint32_t
name|handle
init|=
name|gbm_bo_get_handle
argument_list|(
name|bo
argument_list|)
operator|.
name|u32
decl_stmt|;
name|QScopedPointer
argument_list|<
name|FrameBuffer
argument_list|>
name|fb
argument_list|(
operator|new
name|FrameBuffer
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
name|drmModeAddFB
argument_list|(
name|m_dri_fd
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|24
argument_list|,
literal|32
argument_list|,
name|stride
argument_list|,
name|handle
argument_list|,
operator|&
name|fb
operator|->
name|fb
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to create KMS FB!"
argument_list|)
expr_stmt|;
return|return
name|Q_NULLPTR
return|;
block|}
name|gbm_bo_set_user_data
argument_list|(
name|bo
argument_list|,
name|fb
operator|.
name|data
argument_list|()
argument_list|,
name|gbm_bo_destroyed_callback
argument_list|)
expr_stmt|;
return|return
name|fb
operator|.
name|take
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|page_flip_handler
specifier|static
name|void
name|page_flip_handler
parameter_list|(
name|int
name|fd
parameter_list|,
name|unsigned
name|int
name|sequence
parameter_list|,
name|unsigned
name|int
name|tv_sec
parameter_list|,
name|unsigned
name|int
name|tv_usec
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|tv_sec
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|tv_usec
argument_list|)
expr_stmt|;
comment|// We are no longer flipping
operator|*
cast|static_cast
argument_list|<
name|bool
operator|*
argument_list|>
argument_list|(
name|user_data
argument_list|)
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|presentBuffer
name|void
name|QEglKmsHooks
operator|::
name|presentBuffer
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_gbm_surface
condition|)
block|{
name|qWarning
argument_list|(
literal|"Cannot sync before platform init!"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gbm_surface_has_free_buffers
argument_list|(
name|m_gbm_surface
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Out of free GBM buffers!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|gbm_bo
modifier|*
name|front_buffer
init|=
name|gbm_surface_lock_front_buffer
argument_list|(
name|m_gbm_surface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|front_buffer
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not lock GBM surface front buffer!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|QEglKmsHooks
operator|::
name|FrameBuffer
modifier|*
name|fb
init|=
name|framebufferForBufferObject
argument_list|(
name|front_buffer
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
name|drmModeSetCrtc
argument_list|(
name|m_dri_fd
argument_list|,
name|m_drm_crtc
argument_list|,
name|fb
operator|->
name|fb
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|m_drm_connector
operator|->
name|connector_id
argument_list|,
literal|1
argument_list|,
operator|&
name|m_drm_mode
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Could not set DRM mode!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|bool
name|flipping
init|=
literal|true
decl_stmt|;
name|ret
operator|=
name|drmModePageFlip
argument_list|(
name|m_dri_fd
argument_list|,
name|m_drm_encoder
operator|->
name|crtc_id
argument_list|,
name|fb
operator|->
name|fb
argument_list|,
name|DRM_MODE_PAGE_FLIP_EVENT
argument_list|,
operator|&
name|flipping
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Could not queue DRM page flip!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|drmEventContext
name|drmEvent
init|=
block|{
name|DRM_EVENT_CONTEXT_VERSION
block|,
name|Q_NULLPTR
block|,
comment|// vblank handler
name|page_flip_handler
comment|// page flip handler
block|}
decl_stmt|;
name|fd_set
name|fds
decl_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fds
argument_list|)
expr_stmt|;
name|FD_SET
argument_list|(
name|m_dri_fd
argument_list|,
operator|&
name|fds
argument_list|)
expr_stmt|;
name|time_t
name|start
decl_stmt|,
name|cur
decl_stmt|;
name|time
argument_list|(
operator|&
name|start
argument_list|)
expr_stmt|;
while|while
condition|(
name|flipping
operator|&&
operator|(
name|time
argument_list|(
operator|&
name|cur
argument_list|)
operator|<
name|start
operator|+
literal|1
operator|)
condition|)
block|{
name|timespec
name|v
decl_stmt|;
name|memset
argument_list|(
operator|&
name|v
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|.
name|tv_sec
operator|=
name|start
operator|+
literal|1
operator|-
name|cur
expr_stmt|;
name|ret
operator|=
name|qt_safe_select
argument_list|(
name|m_dri_fd
operator|+
literal|1
argument_list|,
operator|&
name|fds
argument_list|,
name|Q_NULLPTR
argument_list|,
name|Q_NULLPTR
argument_list|,
operator|&
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
comment|// timeout
break|break;
block|}
elseif|else
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Error while selecting on DRM fd"
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|drmHandleEvent
argument_list|(
name|m_dri_fd
argument_list|,
operator|&
name|drmEvent
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not handle DRM event!"
argument_list|)
expr_stmt|;
block|}
block|}
name|gbm_surface_release_buffer
argument_list|(
name|m_gbm_surface
argument_list|,
name|front_buffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setup_kms
name|bool
name|QEglKmsHooks
operator|::
name|setup_kms
parameter_list|()
block|{
name|drmModeRes
modifier|*
name|resources
decl_stmt|;
name|drmModeConnector
modifier|*
name|connector
decl_stmt|;
name|drmModeEncoder
modifier|*
name|encoder
decl_stmt|;
name|quint32
name|crtc
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
name|resources
operator|=
name|drmModeGetResources
argument_list|(
name|m_dri_fd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|resources
condition|)
block|{
name|qWarning
argument_list|(
literal|"drmModeGetResources failed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|resources
operator|->
name|count_connectors
condition|;
name|i
operator|++
control|)
block|{
name|connector
operator|=
name|drmModeGetConnector
argument_list|(
name|m_dri_fd
argument_list|,
name|resources
operator|->
name|connectors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|connector
operator|==
name|NULL
condition|)
continue|continue;
if|if
condition|(
name|connector
operator|->
name|connection
operator|==
name|DRM_MODE_CONNECTED
operator|&&
name|connector
operator|->
name|count_modes
operator|>
literal|0
condition|)
block|{
break|break;
block|}
name|drmModeFreeConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|resources
operator|->
name|count_connectors
condition|)
block|{
name|qWarning
argument_list|(
literal|"No currently active connector found."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|resources
operator|->
name|count_encoders
condition|;
name|i
operator|++
control|)
block|{
name|encoder
operator|=
name|drmModeGetEncoder
argument_list|(
name|m_dri_fd
argument_list|,
name|resources
operator|->
name|encoders
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoder
operator|==
name|NULL
condition|)
continue|continue;
if|if
condition|(
name|encoder
operator|->
name|encoder_id
operator|==
name|connector
operator|->
name|encoder_id
condition|)
break|break;
name|drmModeFreeEncoder
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|resources
operator|->
name|count_crtcs
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|encoder
operator|->
name|possible_crtcs
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
condition|)
block|{
name|crtc
operator|=
name|resources
operator|->
name|crtcs
index|[
name|j
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|crtc
operator|==
literal|0
condition|)
name|qFatal
argument_list|(
literal|"No suitable CRTC available"
argument_list|)
expr_stmt|;
name|m_drm_connector
operator|=
name|connector
expr_stmt|;
name|m_drm_encoder
operator|=
name|encoder
expr_stmt|;
name|m_drm_mode
operator|=
name|connector
operator|->
name|modes
index|[
literal|0
index|]
expr_stmt|;
name|m_drm_crtc
operator|=
name|crtc
expr_stmt|;
name|drmModeFreeResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
end_unit
