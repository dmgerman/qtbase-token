begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 Pier Luigi Fiorini<pierluigi.fiorini@gmail.com> ** Copyright (C) 2016 The Qt Company Ltd. ** Copyright (C) 2016 Pelagicore AG ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeglfskmsintegration.h"
end_include
begin_include
include|#
directive|include
file|"qeglfskmsdevice.h"
end_include
begin_include
include|#
directive|include
file|"qeglfskmsscreen.h"
end_include
begin_include
include|#
directive|include
file|"qeglfswindow.h"
end_include
begin_include
include|#
directive|include
file|"qeglfscursor.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qeglconvenience_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonDocument>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonArray>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpa/qplatformwindow.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpa/qplatformcursor.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<xf86drm.h>
end_include
begin_include
include|#
directive|include
file|<xf86drmMode.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_LOGGING_CATEGORY
argument_list|(
name|qLcEglfsKmsDebug
argument_list|,
literal|"qt.qpa.eglfs.kms"
argument_list|)
DECL|function|QEglFSKmsIntegration
name|QEglFSKmsIntegration
operator|::
name|QEglFSKmsIntegration
argument_list|()
range|:
name|m_device
argument_list|(
name|Q_NULLPTR
argument_list|)
decl_stmt|,
name|m_hwCursor
argument_list|(
literal|false
argument_list|)
decl_stmt|,
name|m_pbuffers
argument_list|(
literal|false
argument_list|)
decl_stmt|,
name|m_separateScreens
argument_list|(
literal|false
argument_list|)
argument_list|{}
DECL|function|platformInit
name|void
name|QEglFSKmsIntegration
operator|::
name|platformInit
argument_list|()
argument_list|{
name|loadConfig
argument_list|()
argument_list|;      if
operator|(
operator|!
name|m_devicePath
operator|.
name|isEmpty
argument_list|()
operator|)
block|{
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Using DRM device"
operator|<<
name|m_devicePath
operator|<<
literal|"specified in config file"
block|;     }
name|m_device
operator|=
name|createDevice
argument_list|(
name|m_devicePath
argument_list|)
argument_list|;     if
operator|(
name|Q_UNLIKELY
argument_list|(
operator|!
name|m_device
operator|->
name|open
argument_list|()
argument_list|)
operator|)
name|qFatal
argument_list|(
literal|"Could not open device %s - aborting!"
argument_list|,
name|qPrintable
argument_list|(
name|m_devicePath
argument_list|)
argument_list|)
argument_list|; }
DECL|function|platformDestroy
name|void
name|QEglFSKmsIntegration
operator|::
name|platformDestroy
argument_list|()
argument_list|{
name|m_device
operator|->
name|close
argument_list|()
argument_list|;
operator|delete
name|m_device
argument_list|;
name|m_device
operator|=
name|Q_NULLPTR
argument_list|; }
DECL|function|platformDisplay
name|EGLNativeDisplayType
name|QEglFSKmsIntegration
operator|::
name|platformDisplay
argument_list|()
decl|const
argument_list|{
name|Q_ASSERT
argument_list|(
name|m_device
argument_list|)
argument_list|;     return
name|m_device
operator|->
name|nativeDisplay
argument_list|()
argument_list|; }
DECL|function|usesDefaultScreen
name|bool
name|QEglFSKmsIntegration
operator|::
name|usesDefaultScreen
argument_list|()
argument_list|{     return
literal|false
argument_list|; }
DECL|function|screenInit
name|void
name|QEglFSKmsIntegration
operator|::
name|screenInit
argument_list|()
argument_list|{
name|m_device
operator|->
name|createScreens
argument_list|()
argument_list|; }
DECL|function|surfaceFormatFor
name|QSurfaceFormat
name|QEglFSKmsIntegration
operator|::
name|surfaceFormatFor
argument_list|(
specifier|const
name|QSurfaceFormat
operator|&
name|inputFormat
argument_list|)
decl|const
argument_list|{
name|QSurfaceFormat
name|format
argument_list|(
name|inputFormat
argument_list|)
argument_list|;
name|format
operator|.
name|setRenderableType
argument_list|(
name|QSurfaceFormat
operator|::
name|OpenGLES
argument_list|)
argument_list|;
name|format
operator|.
name|setSwapBehavior
argument_list|(
name|QSurfaceFormat
operator|::
name|DoubleBuffer
argument_list|)
argument_list|;
name|format
operator|.
name|setRedBufferSize
argument_list|(
literal|8
argument_list|)
argument_list|;
name|format
operator|.
name|setGreenBufferSize
argument_list|(
literal|8
argument_list|)
argument_list|;
name|format
operator|.
name|setBlueBufferSize
argument_list|(
literal|8
argument_list|)
argument_list|;     return
name|format
argument_list|; }
DECL|function|hasCapability
name|bool
name|QEglFSKmsIntegration
operator|::
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|cap
argument_list|)
decl|const
argument_list|{     switch
operator|(
name|cap
operator|)
block|{
case|case
name|QPlatformIntegration
operator|::
name|ThreadedPixmaps
case|:
case|case
name|QPlatformIntegration
operator|::
name|OpenGL
case|:
case|case
name|QPlatformIntegration
operator|::
name|ThreadedOpenGL
case|:
return|return
literal|true
return|;
default|default:
argument_list|return
literal|false
argument_list|;     }
end_decl_stmt
begin_macro
unit|}  void
DECL|function|waitForVSync
name|QEglFSKmsIntegration
end_macro
begin_expr_stmt
DECL|function|waitForVSync
operator|::
name|waitForVSync
operator|(
name|QPlatformSurface
operator|*
name|surface
operator|)
specifier|const
block|{
name|QWindow
operator|*
name|window
operator|=
cast|static_cast
argument_list|<
name|QWindow
operator|*
argument_list|>
argument_list|(
name|surface
operator|->
name|surface
argument_list|()
argument_list|)
block|;
name|QEglFSKmsScreen
operator|*
name|screen
operator|=
cast|static_cast
argument_list|<
name|QEglFSKmsScreen
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
block|;
name|screen
operator|->
name|waitForFlip
argument_list|()
block|; }
DECL|function|supportsPBuffers
name|bool
name|QEglFSKmsIntegration
operator|::
name|supportsPBuffers
operator|(
operator|)
specifier|const
block|{
return|return
name|m_pbuffers
return|;
block|}
end_expr_stmt
begin_function
DECL|function|hwCursor
name|bool
name|QEglFSKmsIntegration
operator|::
name|hwCursor
parameter_list|()
specifier|const
block|{
return|return
name|m_hwCursor
return|;
block|}
end_function
begin_function
DECL|function|separateScreens
name|bool
name|QEglFSKmsIntegration
operator|::
name|separateScreens
parameter_list|()
specifier|const
block|{
return|return
name|m_separateScreens
return|;
block|}
end_function
begin_function
DECL|function|outputSettings
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariantMap
argument_list|>
name|QEglFSKmsIntegration
operator|::
name|outputSettings
parameter_list|()
specifier|const
block|{
return|return
name|m_outputSettings
return|;
block|}
end_function
begin_function
DECL|function|device
name|QEglFSKmsDevice
modifier|*
name|QEglFSKmsIntegration
operator|::
name|device
parameter_list|()
specifier|const
block|{
return|return
name|m_device
return|;
block|}
end_function
begin_function
DECL|function|loadConfig
name|void
name|QEglFSKmsIntegration
operator|::
name|loadConfig
parameter_list|()
block|{
specifier|static
name|QByteArray
name|json
init|=
name|qgetenv
argument_list|(
literal|"QT_QPA_EGLFS_KMS_CONFIG"
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Loading KMS setup from"
operator|<<
name|json
expr_stmt|;
name|QFile
name|file
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|json
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Could not open config file"
operator|<<
name|json
operator|<<
literal|"for reading"
expr_stmt|;
return|return;
block|}
specifier|const
name|QJsonDocument
name|doc
init|=
name|QJsonDocument
operator|::
name|fromJson
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|doc
operator|.
name|isObject
argument_list|()
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Invalid config file"
operator|<<
name|json
operator|<<
literal|"- no top-level JSON object"
expr_stmt|;
return|return;
block|}
specifier|const
name|QJsonObject
name|object
init|=
name|doc
operator|.
name|object
argument_list|()
decl_stmt|;
name|m_hwCursor
operator|=
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"hwcursor"
argument_list|)
argument_list|)
operator|.
name|toBool
argument_list|(
name|m_hwCursor
argument_list|)
expr_stmt|;
name|m_pbuffers
operator|=
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"pbuffers"
argument_list|)
argument_list|)
operator|.
name|toBool
argument_list|(
name|m_pbuffers
argument_list|)
expr_stmt|;
name|m_devicePath
operator|=
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"device"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|m_separateScreens
operator|=
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"separateScreens"
argument_list|)
argument_list|)
operator|.
name|toBool
argument_list|(
name|m_separateScreens
argument_list|)
expr_stmt|;
specifier|const
name|QJsonArray
name|outputs
init|=
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"outputs"
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QVariantMap
name|outputSettings
init|=
name|outputs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toObject
argument_list|()
operator|.
name|toVariantMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputSettings
operator|.
name|contains
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|name
init|=
name|outputSettings
operator|.
name|value
argument_list|(
name|QStringLiteral
argument_list|(
literal|"name"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_outputSettings
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Output"
operator|<<
name|name
operator|<<
literal|"configured multiple times!"
expr_stmt|;
block|}
name|m_outputSettings
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|outputSettings
argument_list|)
expr_stmt|;
block|}
block|}
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Configuration:\n"
operator|<<
literal|"\thwcursor:"
operator|<<
name|m_hwCursor
operator|<<
literal|"\n"
operator|<<
literal|"\tpbuffers:"
operator|<<
name|m_pbuffers
operator|<<
literal|"\n"
operator|<<
literal|"\tseparateScreens:"
operator|<<
name|m_separateScreens
operator|<<
literal|"\n"
operator|<<
literal|"\toutputs:"
operator|<<
name|m_outputSettings
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
