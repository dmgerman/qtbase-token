begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 Pier Luigi Fiorini<pierluigi.fiorini@gmail.com> ** Copyright (C) 2016 The Qt Company Ltd. ** Copyright (C) 2016 Pelagicore AG ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeglfskmsgbmdevice.h"
end_include
begin_include
include|#
directive|include
file|"qeglfskmsgbmscreen.h"
end_include
begin_include
include|#
directive|include
file|"qeglfsintegration.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QLoggingCategory>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_unix_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_define
DECL|macro|ARRAY_LENGTH
define|#
directive|define
name|ARRAY_LENGTH
parameter_list|(
name|a
parameter_list|)
value|(sizeof (a) / sizeof (a)[0])
end_define
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_LOGGING_CATEGORY
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
DECL|function|pageFlipHandler
name|void
name|QEglFSKmsGbmDevice
operator|::
name|pageFlipHandler
argument_list|(
name|int
name|fd
argument_list|,
name|unsigned
name|int
name|sequence
argument_list|,
name|unsigned
name|int
name|tv_sec
argument_list|,
name|unsigned
name|int
name|tv_usec
argument_list|,
name|void
operator|*
name|user_data
argument_list|)
argument_list|{
name|Q_UNUSED
argument_list|(
name|fd
argument_list|)
argument_list|;
name|Q_UNUSED
argument_list|(
name|sequence
argument_list|)
argument_list|;
name|Q_UNUSED
argument_list|(
name|tv_sec
argument_list|)
argument_list|;
name|Q_UNUSED
argument_list|(
name|tv_usec
argument_list|)
argument_list|;
name|QEglFSKmsScreen
operator|*
name|screen
operator|=
cast|static_cast
argument_list|<
name|QEglFSKmsScreen
operator|*
argument_list|>
argument_list|(
name|user_data
argument_list|)
argument_list|;
name|screen
operator|->
name|flipFinished
argument_list|()
argument_list|; }
DECL|function|QEglFSKmsGbmDevice
name|QEglFSKmsGbmDevice
operator|::
name|QEglFSKmsGbmDevice
argument_list|(
name|QEglFSKmsIntegration
operator|*
name|integration
argument_list|,
specifier|const
name|QString
operator|&
name|path
argument_list|)
range|:
name|QEglFSKmsDevice
argument_list|(
name|integration
argument_list|,
name|path
argument_list|)
decl_stmt|,
name|m_gbm_device
argument_list|(
name|Q_NULLPTR
argument_list|)
decl_stmt|,
name|m_globalCursor
argument_list|(
name|Q_NULLPTR
argument_list|)
argument_list|{ }
DECL|function|open
name|bool
name|QEglFSKmsGbmDevice
operator|::
name|open
argument_list|()
argument_list|{
name|Q_ASSERT
argument_list|(
name|fd
argument_list|()
operator|==
operator|-
literal|1
argument_list|)
argument_list|;
name|Q_ASSERT
argument_list|(
name|m_gbm_device
operator|==
name|Q_NULLPTR
argument_list|)
argument_list|;
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Opening device"
operator|<<
name|devicePath
argument_list|()
argument_list|;
name|int
name|fd
operator|=
name|qt_safe_open
argument_list|(
name|devicePath
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
operator||
name|O_CLOEXEC
argument_list|)
argument_list|;     if
operator|(
name|fd
operator|==
operator|-
literal|1
operator|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Could not open DRM device %s"
argument_list|,
name|qPrintable
argument_list|(
name|devicePath
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
literal|false
return|;
block|}
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Creating GBM device for file descriptor"
operator|<<
name|fd
operator|<<
literal|"obtained from"
operator|<<
name|devicePath
argument_list|()
argument_list|;
name|m_gbm_device
operator|=
name|gbm_create_device
argument_list|(
name|fd
argument_list|)
argument_list|;     if
operator|(
operator|!
name|m_gbm_device
operator|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Could not create GBM device"
argument_list|)
block|;
name|qt_safe_close
argument_list|(
name|fd
argument_list|)
block|;
name|fd
operator|=
operator|-
literal|1
block|;
return|return
literal|false
return|;
block|}
name|setFd
argument_list|(
name|fd
argument_list|)
argument_list|;      return
literal|true
argument_list|; }
DECL|function|close
name|void
name|QEglFSKmsGbmDevice
operator|::
name|close
argument_list|()
argument_list|{     if
operator|(
name|m_gbm_device
operator|)
block|{
name|gbm_device_destroy
argument_list|(
name|m_gbm_device
argument_list|)
block|;
name|m_gbm_device
operator|=
name|Q_NULLPTR
block|;     }
if|if
condition|(
name|fd
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|qt_safe_close
argument_list|(
name|fd
argument_list|()
argument_list|)
block|;
name|setFd
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
end_decl_stmt
begin_expr_stmt
unit|}      if
operator|(
name|m_globalCursor
operator|)
name|m_globalCursor
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|m_globalCursor
operator|=
name|Q_NULLPTR
expr_stmt|;
end_expr_stmt
begin_macro
unit|}  EGLNativeDisplayType
DECL|function|nativeDisplay
name|QEglFSKmsGbmDevice
end_macro
begin_expr_stmt
DECL|function|nativeDisplay
operator|::
name|nativeDisplay
operator|(
operator|)
specifier|const
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|EGLNativeDisplayType
argument_list|>
argument_list|(
name|m_gbm_device
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|gbmDevice
name|gbm_device
modifier|*
name|QEglFSKmsGbmDevice
operator|::
name|gbmDevice
parameter_list|()
specifier|const
block|{
return|return
name|m_gbm_device
return|;
block|}
end_function
begin_function
DECL|function|globalCursor
name|QPlatformCursor
modifier|*
name|QEglFSKmsGbmDevice
operator|::
name|globalCursor
parameter_list|()
specifier|const
block|{
return|return
name|m_globalCursor
return|;
block|}
end_function
begin_function
DECL|function|handleDrmEvent
name|void
name|QEglFSKmsGbmDevice
operator|::
name|handleDrmEvent
parameter_list|()
block|{
name|drmEventContext
name|drmEvent
init|=
block|{
name|DRM_EVENT_CONTEXT_VERSION
block|,
name|Q_NULLPTR
block|,
comment|// vblank handler
name|pageFlipHandler
comment|// page flip handler
block|}
decl_stmt|;
name|drmHandleEvent
argument_list|(
name|fd
argument_list|()
argument_list|,
operator|&
name|drmEvent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createScreen
name|QEglFSKmsScreen
modifier|*
name|QEglFSKmsGbmDevice
operator|::
name|createScreen
parameter_list|(
name|QEglFSKmsIntegration
modifier|*
name|integration
parameter_list|,
name|QEglFSKmsDevice
modifier|*
name|device
parameter_list|,
name|QEglFSKmsOutput
name|output
parameter_list|,
name|QPoint
name|position
parameter_list|)
block|{
specifier|static
name|bool
name|firstScreen
init|=
literal|true
decl_stmt|;
name|QEglFSKmsGbmScreen
modifier|*
name|screen
init|=
operator|new
name|QEglFSKmsGbmScreen
argument_list|(
name|integration
argument_list|,
name|device
argument_list|,
name|output
argument_list|,
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstScreen
operator|&&
name|integration
operator|->
name|hwCursor
argument_list|()
condition|)
block|{
name|m_globalCursor
operator|=
operator|new
name|QEglFSKmsGbmCursor
argument_list|(
name|screen
argument_list|)
expr_stmt|;
name|firstScreen
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|screen
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
