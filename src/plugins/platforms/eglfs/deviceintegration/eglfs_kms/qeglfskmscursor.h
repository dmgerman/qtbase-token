begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QEGLFSKMSCURSOR_H
end_ifndef
begin_define
DECL|macro|QEGLFSKMSCURSOR_H
define|#
directive|define
name|QEGLFSKMSCURSOR_H
end_define
begin_include
include|#
directive|include
file|<qpa/qplatformcursor.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QList>
end_include
begin_include
include|#
directive|include
file|<QtGui/QImage>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qinputdevicemanager_p.h>
end_include
begin_include
include|#
directive|include
file|<gbm.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QEglFSKmsScreen
name|class
name|QEglFSKmsScreen
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QEglFSKmsCursor
name|class
name|QEglFSKmsCursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QEglFSKmsCursorDeviceListener
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|QEglFSKmsCursorDeviceListener
argument_list|(
name|QEglFSKmsCursor
operator|*
name|cursor
argument_list|)
operator|:
name|m_cursor
argument_list|(
argument|cursor
argument_list|)
block|{ }
name|bool
name|hasMouse
argument_list|()
specifier|const
block|;
name|public
name|slots
operator|:
name|void
name|onDeviceListChanged
argument_list|(
argument|QInputDeviceManager::DeviceType type
argument_list|)
block|;
name|private
operator|:
name|QEglFSKmsCursor
operator|*
name|m_cursor
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QEglFSKmsCursor
range|:
name|public
name|QPlatformCursor
block|{
name|Q_OBJECT
name|public
operator|:
name|QEglFSKmsCursor
argument_list|(
name|QEglFSKmsScreen
operator|*
name|screen
argument_list|)
block|;
operator|~
name|QEglFSKmsCursor
argument_list|()
block|;
comment|// input methods
name|void
name|pointerEvent
argument_list|(
argument|const QMouseEvent& event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|void
name|changeCursor
argument_list|(
argument|QCursor * windowCursor
argument_list|,
argument|QWindow * window
argument_list|)
name|Q_DECL_OVERRIDE
block|;
endif|#
directive|endif
name|QPoint
name|pos
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setPos
argument_list|(
argument|const QPoint&pos
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|updateMouseStatus
argument_list|()
block|;
name|private
operator|:
name|void
name|initCursorAtlas
argument_list|()
block|;      enum
name|CursorState
block|{
name|CursorDisabled
block|,
name|CursorPendingHidden
block|,
name|CursorHidden
block|,
name|CursorPendingVisible
block|,
name|CursorVisible
block|}
block|;
name|QEglFSKmsScreen
operator|*
name|m_screen
block|;
name|QSize
name|m_cursorSize
block|;
name|gbm_bo
operator|*
name|m_bo
block|;
name|QPoint
name|m_pos
block|;
name|QPlatformCursorImage
name|m_cursorImage
block|;
name|CursorState
name|m_state
block|;
name|QEglFSKmsCursorDeviceListener
operator|*
name|m_deviceListener
block|;
comment|// cursor atlas information
block|struct
name|CursorAtlas
block|{
name|CursorAtlas
argument_list|()
operator|:
name|cursorsPerRow
argument_list|(
literal|0
argument_list|)
block|,
name|cursorWidth
argument_list|(
literal|0
argument_list|)
block|,
name|cursorHeight
argument_list|(
literal|0
argument_list|)
block|{ }
name|int
name|cursorsPerRow
block|;
name|int
name|width
block|,
name|height
block|;
comment|// width and height of the atlas
name|int
name|cursorWidth
block|,
name|cursorHeight
block|;
comment|// width and height of cursors inside the atlas
name|QList
operator|<
name|QPoint
operator|>
name|hotSpots
block|;
name|QImage
name|image
block|;     }
name|m_cursorAtlas
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
