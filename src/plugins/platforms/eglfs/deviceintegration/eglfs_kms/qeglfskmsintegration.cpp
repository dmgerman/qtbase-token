begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeglfskmsintegration.h"
end_include
begin_include
include|#
directive|include
file|"qeglfsintegration.h"
end_include
begin_include
include|#
directive|include
file|"qeglfsscreen.h"
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qeglplatformcursor_p.h>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qdevicediscovery_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qcore_unix_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonDocument>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QLoggingCategory>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpa/qplatformwindow.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpa/qplatformcursor.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPainter>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<xf86drm.h>
end_include
begin_include
include|#
directive|include
file|<xf86drmMode.h>
end_include
begin_include
include|#
directive|include
file|<gbm.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|DRM_CAP_CURSOR_WIDTH
end_ifndef
begin_define
DECL|macro|DRM_CAP_CURSOR_WIDTH
define|#
directive|define
name|DRM_CAP_CURSOR_WIDTH
value|0x8
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|DRM_CAP_CURSOR_HEIGHT
end_ifndef
begin_define
DECL|macro|DRM_CAP_CURSOR_HEIGHT
define|#
directive|define
name|DRM_CAP_CURSOR_HEIGHT
value|0x9
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|ARRAY_LENGTH
define|#
directive|define
name|ARRAY_LENGTH
parameter_list|(
name|a
parameter_list|)
value|(sizeof (a) / sizeof (a)[0])
end_define
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|Q_LOGGING_CATEGORY
argument_list|(
name|qLcEglfsKmsDebug
argument_list|,
literal|"qt.qpa.eglfs.kms"
argument_list|)
name|class
name|QEglFSKmsCursor
decl_stmt|;
end_decl_stmt
begin_class_decl
class_decl|class
name|QEglFSKmsScreen
class_decl|;
end_class_decl
begin_enum
DECL|enum|OutputConfiguration
enum|enum
name|OutputConfiguration
block|{
DECL|enumerator|OutputConfigOff
name|OutputConfigOff
block|,
DECL|enumerator|OutputConfigPreferred
name|OutputConfigPreferred
block|,
DECL|enumerator|OutputConfigCurrent
name|OutputConfigCurrent
block|,
DECL|enumerator|OutputConfigMode
name|OutputConfigMode
block|,
DECL|enumerator|OutputConfigModeline
name|OutputConfigModeline
block|}
enum|;
end_enum
begin_struct
DECL|struct|QEglFSKmsOutput
struct|struct
name|QEglFSKmsOutput
block|{
DECL|member|name
name|QString
name|name
decl_stmt|;
DECL|member|connector_id
name|uint32_t
name|connector_id
decl_stmt|;
DECL|member|crtc_id
name|uint32_t
name|crtc_id
decl_stmt|;
DECL|member|physical_size
name|QSizeF
name|physical_size
decl_stmt|;
DECL|member|mode
name|int
name|mode
decl_stmt|;
comment|// index of selected mode in list below
DECL|member|mode_set
name|bool
name|mode_set
decl_stmt|;
DECL|member|saved_crtc
name|drmModeCrtcPtr
name|saved_crtc
decl_stmt|;
DECL|member|modes
name|QList
argument_list|<
name|drmModeModeInfo
argument_list|>
name|modes
decl_stmt|;
block|}
struct|;
end_struct
begin_class
DECL|class|QEglFSKmsDevice
class|class
name|QEglFSKmsDevice
block|{
name|Q_DISABLE_COPY
argument_list|(
argument|QEglFSKmsDevice
argument_list|)
DECL|member|m_integration
name|QEglFSKmsIntegration
modifier|*
name|m_integration
decl_stmt|;
DECL|member|m_path
name|QString
name|m_path
decl_stmt|;
DECL|member|m_dri_fd
name|int
name|m_dri_fd
decl_stmt|;
DECL|member|m_gbm_device
name|gbm_device
modifier|*
name|m_gbm_device
decl_stmt|;
DECL|member|m_crtc_allocator
name|quint32
name|m_crtc_allocator
decl_stmt|;
DECL|member|m_connector_allocator
name|quint32
name|m_connector_allocator
decl_stmt|;
name|int
name|crtcForConnector
parameter_list|(
name|drmModeResPtr
name|resources
parameter_list|,
name|drmModeConnectorPtr
name|connector
parameter_list|)
function_decl|;
name|QEglFSKmsScreen
modifier|*
name|screenForConnector
parameter_list|(
name|drmModeResPtr
name|resources
parameter_list|,
name|drmModeConnectorPtr
name|connector
parameter_list|,
name|QPoint
name|pos
parameter_list|)
function_decl|;
specifier|static
name|void
name|pageFlipHandler
parameter_list|(
name|int
name|fd
parameter_list|,
name|unsigned
name|int
name|sequence
parameter_list|,
name|unsigned
name|int
name|tv_sec
parameter_list|,
name|unsigned
name|int
name|tv_usec
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
public|public:
name|QEglFSKmsDevice
parameter_list|(
name|QEglFSKmsIntegration
modifier|*
name|integration
parameter_list|,
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
constructor_decl|;
name|bool
name|open
parameter_list|()
function_decl|;
name|void
name|close
parameter_list|()
function_decl|;
name|void
name|createScreens
parameter_list|()
function_decl|;
name|gbm_device
modifier|*
name|device
parameter_list|()
specifier|const
function_decl|;
name|int
name|fd
parameter_list|()
specifier|const
function_decl|;
name|void
name|handleDrmEvent
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|QEglFSKmsScreen
class|class
name|QEglFSKmsScreen
super|:
specifier|public
name|QEglFSScreen
block|{
DECL|member|m_integration
name|QEglFSKmsIntegration
modifier|*
name|m_integration
decl_stmt|;
DECL|member|m_device
name|QEglFSKmsDevice
modifier|*
name|m_device
decl_stmt|;
DECL|member|m_gbm_surface
name|gbm_surface
modifier|*
name|m_gbm_surface
decl_stmt|;
DECL|member|m_gbm_bo_current
name|gbm_bo
modifier|*
name|m_gbm_bo_current
decl_stmt|;
DECL|member|m_gbm_bo_next
name|gbm_bo
modifier|*
name|m_gbm_bo_next
decl_stmt|;
DECL|member|m_output
name|QEglFSKmsOutput
name|m_output
decl_stmt|;
DECL|member|m_pos
name|QPoint
name|m_pos
decl_stmt|;
DECL|member|m_cursor
name|QScopedPointer
argument_list|<
name|QEglFSKmsCursor
argument_list|>
name|m_cursor
decl_stmt|;
DECL|struct|FrameBuffer
struct|struct
name|FrameBuffer
block|{
DECL|function|FrameBuffer
name|FrameBuffer
parameter_list|()
member_init_list|:
name|fb
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|fb
name|uint32_t
name|fb
decl_stmt|;
block|}
struct|;
specifier|static
name|void
name|bufferDestroyedHandler
parameter_list|(
name|gbm_bo
modifier|*
name|bo
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|FrameBuffer
modifier|*
name|framebufferForBufferObject
parameter_list|(
name|gbm_bo
modifier|*
name|bo
parameter_list|)
function_decl|;
DECL|member|m_waitForFlipMutex
specifier|static
name|QMutex
name|m_waitForFlipMutex
decl_stmt|;
public|public:
name|QEglFSKmsScreen
parameter_list|(
name|QEglFSKmsIntegration
modifier|*
name|integration
parameter_list|,
name|QEglFSKmsDevice
modifier|*
name|device
parameter_list|,
name|QEglFSKmsOutput
name|output
parameter_list|,
name|QPoint
name|position
parameter_list|)
constructor_decl|;
name|~
name|QEglFSKmsScreen
parameter_list|()
destructor_decl|;
DECL|member|Q_DECL_OVERRIDE
name|QRect
name|geometry
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|int
name|depth
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|QImage
operator|::
name|Format
name|format
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|QSizeF
name|physicalSize
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|QDpi
name|logicalDpi
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|Qt
operator|::
name|ScreenOrientation
name|nativeOrientation
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|Qt
operator|::
name|ScreenOrientation
name|orientation
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|QString
name|name
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|QPlatformCursor
modifier|*
name|cursor
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|function|device
name|QEglFSKmsDevice
modifier|*
name|device
parameter_list|()
specifier|const
block|{
return|return
name|m_device
return|;
block|}
DECL|function|surface
name|gbm_surface
modifier|*
name|surface
parameter_list|()
specifier|const
block|{
return|return
name|m_gbm_surface
return|;
block|}
name|gbm_surface
modifier|*
name|createSurface
parameter_list|()
function_decl|;
name|void
name|destroySurface
parameter_list|()
function_decl|;
name|void
name|waitForFlip
parameter_list|()
function_decl|;
name|void
name|flip
parameter_list|()
function_decl|;
name|void
name|flipFinished
parameter_list|()
function_decl|;
DECL|function|output
name|QEglFSKmsOutput
modifier|&
name|output
parameter_list|()
block|{
return|return
name|m_output
return|;
block|}
name|void
name|restoreMode
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|m_waitForFlipMutex
name|QMutex
name|QEglFSKmsScreen
operator|::
name|m_waitForFlipMutex
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QEglFSKmsCursor
class|class
name|QEglFSKmsCursor
super|:
specifier|public
name|QPlatformCursor
block|{
name|Q_OBJECT
public|public:
name|QEglFSKmsCursor
parameter_list|(
name|QEglFSKmsScreen
modifier|*
name|screen
parameter_list|)
constructor_decl|;
name|~
name|QEglFSKmsCursor
parameter_list|()
destructor_decl|;
comment|// input methods
DECL|member|Q_DECL_OVERRIDE
name|void
name|pointerEvent
parameter_list|(
specifier|const
name|QMouseEvent
modifier|&
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
DECL|member|Q_DECL_OVERRIDE
name|void
name|changeCursor
parameter_list|(
name|QCursor
modifier|*
name|windowCursor
parameter_list|,
name|QWindow
modifier|*
name|window
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
endif|#
directive|endif
DECL|member|Q_DECL_OVERRIDE
name|QPoint
name|pos
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|setPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
private|private:
name|void
name|initCursorAtlas
parameter_list|()
function_decl|;
DECL|member|m_screen
name|QEglFSKmsScreen
modifier|*
name|m_screen
decl_stmt|;
DECL|member|m_cursorSize
name|QSize
name|m_cursorSize
decl_stmt|;
DECL|member|m_bo
name|gbm_bo
modifier|*
name|m_bo
decl_stmt|;
DECL|member|m_pos
name|QPoint
name|m_pos
decl_stmt|;
DECL|member|m_cursorImage
name|QPlatformCursorImage
name|m_cursorImage
decl_stmt|;
DECL|member|m_visible
name|bool
name|m_visible
decl_stmt|;
comment|// cursor atlas information
DECL|struct|CursorAtlas
struct|struct
name|CursorAtlas
block|{
DECL|function|CursorAtlas
name|CursorAtlas
parameter_list|()
member_init_list|:
name|cursorsPerRow
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cursorWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cursorHeight
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|member|cursorsPerRow
name|int
name|cursorsPerRow
decl_stmt|;
DECL|member|width
DECL|member|height
name|int
name|width
decl_stmt|,
name|height
decl_stmt|;
comment|// width and height of the atlas
DECL|member|cursorWidth
DECL|member|cursorHeight
name|int
name|cursorWidth
decl_stmt|,
name|cursorHeight
decl_stmt|;
comment|// width and height of cursors inside the atlas
DECL|member|hotSpots
name|QList
argument_list|<
name|QPoint
argument_list|>
name|hotSpots
decl_stmt|;
DECL|member|image
name|QImage
name|image
decl_stmt|;
DECL|member|m_cursorAtlas
block|}
name|m_cursorAtlas
struct|;
block|}
class|;
end_class
begin_constructor
DECL|function|QEglFSKmsIntegration
name|QEglFSKmsIntegration
operator|::
name|QEglFSKmsIntegration
parameter_list|()
member_init_list|:
name|m_device
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_hwCursor
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|m_pbuffers
argument_list|(
literal|false
argument_list|)
block|{}
end_constructor
begin_function
DECL|function|platformInit
name|void
name|QEglFSKmsIntegration
operator|::
name|platformInit
parameter_list|()
block|{
name|loadConfig
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_devicePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Using DRM device"
operator|<<
name|m_devicePath
operator|<<
literal|"specified in config file"
expr_stmt|;
block|}
else|else
block|{
name|QDeviceDiscovery
modifier|*
name|d
init|=
name|QDeviceDiscovery
operator|::
name|create
argument_list|(
name|QDeviceDiscovery
operator|::
name|Device_VideoMask
argument_list|)
decl_stmt|;
name|QStringList
name|devices
init|=
name|d
operator|->
name|scanConnectedDevices
argument_list|()
decl_stmt|;
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Found the following video devices:"
operator|<<
name|devices
expr_stmt|;
name|d
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
if|if
condition|(
name|devices
operator|.
name|isEmpty
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"Could not find DRM device!"
argument_list|)
expr_stmt|;
name|m_devicePath
operator|=
name|devices
operator|.
name|first
argument_list|()
expr_stmt|;
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Using"
operator|<<
name|m_devicePath
expr_stmt|;
block|}
name|m_device
operator|=
operator|new
name|QEglFSKmsDevice
argument_list|(
name|this
argument_list|,
name|m_devicePath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_device
operator|->
name|open
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"Could not open device %s - aborting!"
argument_list|,
name|qPrintable
argument_list|(
name|m_devicePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|platformDestroy
name|void
name|QEglFSKmsIntegration
operator|::
name|platformDestroy
parameter_list|()
block|{
name|m_device
operator|->
name|close
argument_list|()
expr_stmt|;
operator|delete
name|m_device
expr_stmt|;
name|m_device
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
end_function
begin_function
DECL|function|platformDisplay
name|EGLNativeDisplayType
name|QEglFSKmsIntegration
operator|::
name|platformDisplay
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|m_device
argument_list|)
expr_stmt|;
return|return
cast|reinterpret_cast
argument_list|<
name|EGLNativeDisplayType
argument_list|>
argument_list|(
name|m_device
operator|->
name|device
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|usesDefaultScreen
name|bool
name|QEglFSKmsIntegration
operator|::
name|usesDefaultScreen
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|screenInit
name|void
name|QEglFSKmsIntegration
operator|::
name|screenInit
parameter_list|()
block|{
name|m_device
operator|->
name|createScreens
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|surfaceFormatFor
name|QSurfaceFormat
name|QEglFSKmsIntegration
operator|::
name|surfaceFormatFor
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|inputFormat
parameter_list|)
specifier|const
block|{
name|QSurfaceFormat
name|format
argument_list|(
name|inputFormat
argument_list|)
decl_stmt|;
name|format
operator|.
name|setRenderableType
argument_list|(
name|QSurfaceFormat
operator|::
name|OpenGLES
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSwapBehavior
argument_list|(
name|QSurfaceFormat
operator|::
name|DoubleBuffer
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRedBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format
operator|.
name|setGreenBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format
operator|.
name|setBlueBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
return|return
name|format
return|;
block|}
end_function
begin_function
DECL|function|createNativeWindow
name|EGLNativeWindowType
name|QEglFSKmsIntegration
operator|::
name|createNativeWindow
parameter_list|(
name|QPlatformWindow
modifier|*
name|platformWindow
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|,
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|QEglFSKmsScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QEglFSKmsScreen
operator|*
argument_list|>
argument_list|(
name|platformWindow
operator|->
name|screen
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|screen
operator|->
name|surface
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Only single window per screen supported!"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
cast|reinterpret_cast
argument_list|<
name|EGLNativeWindowType
argument_list|>
argument_list|(
name|screen
operator|->
name|createSurface
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createNativeOffscreenWindow
name|EGLNativeWindowType
name|QEglFSKmsIntegration
operator|::
name|createNativeOffscreenWindow
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|m_device
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Creating native off screen window"
expr_stmt|;
name|gbm_surface
modifier|*
name|surface
init|=
name|gbm_surface_create
argument_list|(
name|m_device
operator|->
name|device
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GBM_FORMAT_XRGB8888
argument_list|,
name|GBM_BO_USE_RENDERING
argument_list|)
decl_stmt|;
return|return
cast|reinterpret_cast
argument_list|<
name|EGLNativeWindowType
argument_list|>
argument_list|(
name|surface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|destroyNativeWindow
name|void
name|QEglFSKmsIntegration
operator|::
name|destroyNativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
block|{
name|gbm_surface
modifier|*
name|surface
init|=
cast|reinterpret_cast
argument_list|<
name|gbm_surface
operator|*
argument_list|>
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|gbm_surface_destroy
argument_list|(
name|surface
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasCapability
name|bool
name|QEglFSKmsIntegration
operator|::
name|hasCapability
parameter_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|cap
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cap
condition|)
block|{
case|case
name|QPlatformIntegration
operator|::
name|ThreadedPixmaps
case|:
case|case
name|QPlatformIntegration
operator|::
name|OpenGL
case|:
case|case
name|QPlatformIntegration
operator|::
name|ThreadedOpenGL
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|createCursor
name|QPlatformCursor
modifier|*
name|QEglFSKmsIntegration
operator|::
name|createCursor
parameter_list|(
name|QPlatformScreen
modifier|*
name|screen
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_hwCursor
condition|)
return|return
name|Q_NULLPTR
return|;
else|else
return|return
operator|new
name|QEGLPlatformCursor
argument_list|(
name|screen
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|waitForVSync
name|void
name|QEglFSKmsIntegration
operator|::
name|waitForVSync
parameter_list|(
name|QPlatformSurface
modifier|*
name|surface
parameter_list|)
specifier|const
block|{
name|QWindow
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QWindow
operator|*
argument_list|>
argument_list|(
name|surface
operator|->
name|surface
argument_list|()
argument_list|)
decl_stmt|;
name|QEglFSKmsScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QEglFSKmsScreen
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|screen
operator|->
name|waitForFlip
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|presentBuffer
name|void
name|QEglFSKmsIntegration
operator|::
name|presentBuffer
parameter_list|(
name|QPlatformSurface
modifier|*
name|surface
parameter_list|)
block|{
name|QWindow
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QWindow
operator|*
argument_list|>
argument_list|(
name|surface
operator|->
name|surface
argument_list|()
argument_list|)
decl_stmt|;
name|QEglFSKmsScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QEglFSKmsScreen
operator|*
argument_list|>
argument_list|(
name|window
operator|->
name|screen
argument_list|()
operator|->
name|handle
argument_list|()
argument_list|)
decl_stmt|;
name|screen
operator|->
name|flip
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|supportsPBuffers
name|bool
name|QEglFSKmsIntegration
operator|::
name|supportsPBuffers
parameter_list|()
specifier|const
block|{
return|return
name|m_pbuffers
return|;
block|}
end_function
begin_function
DECL|function|hwCursor
name|bool
name|QEglFSKmsIntegration
operator|::
name|hwCursor
parameter_list|()
specifier|const
block|{
return|return
name|m_hwCursor
return|;
block|}
end_function
begin_function
DECL|function|outputSettings
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariantMap
argument_list|>
name|QEglFSKmsIntegration
operator|::
name|outputSettings
parameter_list|()
specifier|const
block|{
return|return
name|m_outputSettings
return|;
block|}
end_function
begin_function
DECL|function|loadConfig
name|void
name|QEglFSKmsIntegration
operator|::
name|loadConfig
parameter_list|()
block|{
specifier|static
name|QByteArray
name|json
init|=
name|qgetenv
argument_list|(
literal|"QT_QPA_EGLFS_KMS_CONFIG"
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Loading KMS setup from"
operator|<<
name|json
expr_stmt|;
name|QFile
name|file
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|json
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Could not open config file"
operator|<<
name|json
operator|<<
literal|"for reading"
expr_stmt|;
return|return;
block|}
name|QJsonDocument
name|doc
init|=
name|QJsonDocument
operator|::
name|fromJson
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|doc
operator|.
name|isObject
argument_list|()
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Invalid config file"
operator|<<
name|json
operator|<<
literal|"- no top-level JSON object"
expr_stmt|;
return|return;
block|}
name|QJsonObject
name|object
init|=
name|doc
operator|.
name|object
argument_list|()
decl_stmt|;
name|m_hwCursor
operator|=
name|object
operator|.
name|value
argument_list|(
literal|"hwcursor"
argument_list|)
operator|.
name|toBool
argument_list|(
name|m_hwCursor
argument_list|)
expr_stmt|;
name|m_pbuffers
operator|=
name|object
operator|.
name|value
argument_list|(
literal|"pbuffers"
argument_list|)
operator|.
name|toBool
argument_list|(
name|m_pbuffers
argument_list|)
expr_stmt|;
name|m_devicePath
operator|=
name|object
operator|.
name|value
argument_list|(
literal|"device"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|QJsonArray
name|outputs
init|=
name|object
operator|.
name|value
argument_list|(
literal|"outputs"
argument_list|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QVariantMap
name|outputSettings
init|=
name|outputs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toObject
argument_list|()
operator|.
name|toVariantMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputSettings
operator|.
name|contains
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
name|QString
name|name
init|=
name|outputSettings
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_outputSettings
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Output"
operator|<<
name|name
operator|<<
literal|"configured multiple times!"
expr_stmt|;
block|}
name|m_outputSettings
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|outputSettings
argument_list|)
expr_stmt|;
block|}
block|}
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Configuration:\n"
operator|<<
literal|"\thwcursor:"
operator|<<
name|m_hwCursor
operator|<<
literal|"\n"
operator|<<
literal|"\tpbuffers:"
operator|<<
name|m_pbuffers
operator|<<
literal|"\n"
operator|<<
literal|"\toutputs:"
operator|<<
name|m_outputSettings
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QEglFSKmsCursor
name|QEglFSKmsCursor
operator|::
name|QEglFSKmsCursor
parameter_list|(
name|QEglFSKmsScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|m_screen
argument_list|(
name|screen
argument_list|)
member_init_list|,
name|m_cursorSize
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
comment|// 64x64 is the old standard size, we now try to query the real size below
member_init_list|,
name|m_bo
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_cursorImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
member_init_list|,
name|m_visible
argument_list|(
literal|true
argument_list|)
block|{
name|uint64_t
name|width
decl_stmt|,
name|height
decl_stmt|;
if|if
condition|(
operator|(
name|drmGetCap
argument_list|(
name|m_screen
operator|->
name|device
argument_list|()
operator|->
name|fd
argument_list|()
argument_list|,
name|DRM_CAP_CURSOR_WIDTH
argument_list|,
operator|&
name|width
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
name|drmGetCap
argument_list|(
name|m_screen
operator|->
name|device
argument_list|()
operator|->
name|fd
argument_list|()
argument_list|,
name|DRM_CAP_CURSOR_HEIGHT
argument_list|,
operator|&
name|height
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
name|m_cursorSize
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|m_cursorSize
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
block|}
name|m_bo
operator|=
name|gbm_bo_create
argument_list|(
name|m_screen
operator|->
name|device
argument_list|()
operator|->
name|device
argument_list|()
argument_list|,
name|m_cursorSize
operator|.
name|width
argument_list|()
argument_list|,
name|m_cursorSize
operator|.
name|height
argument_list|()
argument_list|,
name|GBM_FORMAT_ARGB8888
argument_list|,
name|GBM_BO_USE_CURSOR_64X64
operator||
name|GBM_BO_USE_WRITE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_bo
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not create buffer for cursor!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initCursorAtlas
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
name|cursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
decl_stmt|;
name|changeCursor
argument_list|(
operator|&
name|cursor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setPos
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QEglFSKmsCursor
name|QEglFSKmsCursor
operator|::
name|~
name|QEglFSKmsCursor
parameter_list|()
block|{
name|drmModeSetCursor
argument_list|(
name|m_screen
operator|->
name|device
argument_list|()
operator|->
name|fd
argument_list|()
argument_list|,
name|m_screen
operator|->
name|output
argument_list|()
operator|.
name|crtc_id
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|drmModeMoveCursor
argument_list|(
name|m_screen
operator|->
name|device
argument_list|()
operator|->
name|fd
argument_list|()
argument_list|,
name|m_screen
operator|->
name|output
argument_list|()
operator|.
name|crtc_id
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbm_bo_destroy
argument_list|(
name|m_bo
argument_list|)
expr_stmt|;
name|m_bo
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|pointerEvent
name|void
name|QEglFSKmsCursor
operator|::
name|pointerEvent
parameter_list|(
specifier|const
name|QMouseEvent
modifier|&
name|event
parameter_list|)
block|{
name|setPos
argument_list|(
name|event
operator|.
name|screenPos
argument_list|()
operator|.
name|toPoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|changeCursor
name|void
name|QEglFSKmsCursor
operator|::
name|changeCursor
parameter_list|(
name|QCursor
modifier|*
name|windowCursor
parameter_list|,
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|window
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_visible
condition|)
return|return;
specifier|const
name|Qt
operator|::
name|CursorShape
name|newShape
init|=
name|windowCursor
condition|?
name|windowCursor
operator|->
name|shape
argument_list|()
else|:
name|Qt
operator|::
name|ArrowCursor
decl_stmt|;
if|if
condition|(
name|newShape
operator|==
name|Qt
operator|::
name|BitmapCursor
condition|)
block|{
name|m_cursorImage
operator|.
name|set
argument_list|(
name|windowCursor
operator|->
name|pixmap
argument_list|()
operator|.
name|toImage
argument_list|()
argument_list|,
name|windowCursor
operator|->
name|hotSpot
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|windowCursor
operator|->
name|hotSpot
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Standard cursor, look up in atlas
specifier|const
name|int
name|width
init|=
name|m_cursorAtlas
operator|.
name|cursorWidth
decl_stmt|;
specifier|const
name|int
name|height
init|=
name|m_cursorAtlas
operator|.
name|cursorHeight
decl_stmt|;
specifier|const
name|qreal
name|ws
init|=
operator|(
name|qreal
operator|)
name|m_cursorAtlas
operator|.
name|cursorWidth
operator|/
name|m_cursorAtlas
operator|.
name|width
decl_stmt|;
specifier|const
name|qreal
name|hs
init|=
operator|(
name|qreal
operator|)
name|m_cursorAtlas
operator|.
name|cursorHeight
operator|/
name|m_cursorAtlas
operator|.
name|height
decl_stmt|;
name|QRect
name|textureRect
argument_list|(
name|ws
operator|*
operator|(
name|newShape
operator|%
name|m_cursorAtlas
operator|.
name|cursorsPerRow
operator|)
operator|*
name|m_cursorAtlas
operator|.
name|width
argument_list|,
name|hs
operator|*
operator|(
name|newShape
operator|/
name|m_cursorAtlas
operator|.
name|cursorsPerRow
operator|)
operator|*
name|m_cursorAtlas
operator|.
name|height
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|QPoint
name|hotSpot
init|=
name|m_cursorAtlas
operator|.
name|hotSpots
index|[
name|newShape
index|]
decl_stmt|;
name|m_cursorImage
operator|.
name|set
argument_list|(
name|m_cursorAtlas
operator|.
name|image
operator|.
name|copy
argument_list|(
name|textureRect
argument_list|)
argument_list|,
name|hotSpot
operator|.
name|x
argument_list|()
argument_list|,
name|hotSpot
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_cursorImage
operator|.
name|image
argument_list|()
operator|->
name|width
argument_list|()
operator|>
name|m_cursorSize
operator|.
name|width
argument_list|()
operator|||
name|m_cursorImage
operator|.
name|image
argument_list|()
operator|->
name|height
argument_list|()
operator|>
name|m_cursorSize
operator|.
name|height
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"Cursor larger than %dx%d, cursor will be clipped."
argument_list|,
name|m_cursorSize
operator|.
name|width
argument_list|()
argument_list|,
name|m_cursorSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QImage
name|cursorImage
argument_list|(
name|m_cursorSize
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|cursorImage
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|painter
decl_stmt|;
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|cursorImage
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|*
name|m_cursorImage
operator|.
name|image
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
name|gbm_bo_write
argument_list|(
name|m_bo
argument_list|,
name|cursorImage
operator|.
name|constBits
argument_list|()
argument_list|,
name|cursorImage
operator|.
name|byteCount
argument_list|()
argument_list|)
expr_stmt|;
name|uint32_t
name|handle
init|=
name|gbm_bo_get_handle
argument_list|(
name|m_bo
argument_list|)
operator|.
name|u32
decl_stmt|;
name|int
name|status
init|=
name|drmModeSetCursor
argument_list|(
name|m_screen
operator|->
name|device
argument_list|()
operator|->
name|fd
argument_list|()
argument_list|,
name|m_screen
operator|->
name|output
argument_list|()
operator|.
name|crtc_id
argument_list|,
name|handle
argument_list|,
name|m_cursorSize
operator|.
name|width
argument_list|()
argument_list|,
name|m_cursorSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|0
condition|)
name|qWarning
argument_list|(
literal|"Could not set cursor: %d"
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CURSOR
end_comment
begin_function
DECL|function|pos
name|QPoint
name|QEglFSKmsCursor
operator|::
name|pos
parameter_list|()
specifier|const
block|{
return|return
name|m_pos
return|;
block|}
end_function
begin_function
DECL|function|setPos
name|void
name|QEglFSKmsCursor
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|QPoint
name|adjustedPos
init|=
name|pos
operator|-
name|m_cursorImage
operator|.
name|hotspot
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|drmModeMoveCursor
argument_list|(
name|m_screen
operator|->
name|device
argument_list|()
operator|->
name|fd
argument_list|()
argument_list|,
name|m_screen
operator|->
name|output
argument_list|()
operator|.
name|crtc_id
argument_list|,
name|adjustedPos
operator|.
name|x
argument_list|()
argument_list|,
name|adjustedPos
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|m_pos
operator|=
name|pos
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Failed to move cursor: %d"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|initCursorAtlas
name|void
name|QEglFSKmsCursor
operator|::
name|initCursorAtlas
parameter_list|()
block|{
specifier|static
name|QByteArray
name|json
init|=
name|qgetenv
argument_list|(
literal|"QT_QPA_EGLFS_CURSOR"
argument_list|)
decl_stmt|;
if|if
condition|(
name|json
operator|.
name|isEmpty
argument_list|()
condition|)
name|json
operator|=
literal|":/cursor.json"
expr_stmt|;
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Initializing cursor atlas from"
operator|<<
name|json
expr_stmt|;
name|QFile
name|file
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|json
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|drmModeSetCursor
argument_list|(
name|m_screen
operator|->
name|device
argument_list|()
operator|->
name|fd
argument_list|()
argument_list|,
name|m_screen
operator|->
name|output
argument_list|()
operator|.
name|crtc_id
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|drmModeMoveCursor
argument_list|(
name|m_screen
operator|->
name|device
argument_list|()
operator|->
name|fd
argument_list|()
argument_list|,
name|m_screen
operator|->
name|output
argument_list|()
operator|.
name|crtc_id
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_visible
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|QJsonDocument
name|doc
init|=
name|QJsonDocument
operator|::
name|fromJson
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|)
decl_stmt|;
name|QJsonObject
name|object
init|=
name|doc
operator|.
name|object
argument_list|()
decl_stmt|;
name|QString
name|atlas
init|=
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"image"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|atlas
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|cursorsPerRow
init|=
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"cursorsPerRow"
argument_list|)
argument_list|)
operator|.
name|toDouble
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|cursorsPerRow
argument_list|)
expr_stmt|;
name|m_cursorAtlas
operator|.
name|cursorsPerRow
operator|=
name|cursorsPerRow
expr_stmt|;
specifier|const
name|QJsonArray
name|hotSpots
init|=
name|object
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"hotSpots"
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|hotSpots
operator|.
name|count
argument_list|()
operator|==
name|Qt
operator|::
name|LastCursor
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hotSpots
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QPoint
name|hotSpot
argument_list|(
name|hotSpots
index|[
name|i
index|]
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
operator|.
name|toDouble
argument_list|()
argument_list|,
name|hotSpots
index|[
name|i
index|]
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
operator|.
name|toDouble
argument_list|()
argument_list|)
decl_stmt|;
name|m_cursorAtlas
operator|.
name|hotSpots
operator|<<
name|hotSpot
expr_stmt|;
block|}
name|QImage
name|image
init|=
name|QImage
argument_list|(
name|atlas
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|m_cursorAtlas
operator|.
name|cursorWidth
operator|=
name|image
operator|.
name|width
argument_list|()
operator|/
name|m_cursorAtlas
operator|.
name|cursorsPerRow
expr_stmt|;
name|m_cursorAtlas
operator|.
name|cursorHeight
operator|=
name|image
operator|.
name|height
argument_list|()
operator|/
operator|(
operator|(
name|Qt
operator|::
name|LastCursor
operator|+
name|cursorsPerRow
operator|)
operator|/
name|cursorsPerRow
operator|)
expr_stmt|;
name|m_cursorAtlas
operator|.
name|width
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
name|m_cursorAtlas
operator|.
name|height
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|m_cursorAtlas
operator|.
name|image
operator|=
name|image
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bufferDestroyedHandler
name|void
name|QEglFSKmsScreen
operator|::
name|bufferDestroyedHandler
parameter_list|(
name|gbm_bo
modifier|*
name|bo
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|FrameBuffer
modifier|*
name|fb
init|=
cast|static_cast
argument_list|<
name|FrameBuffer
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|fb
operator|->
name|fb
condition|)
block|{
name|gbm_device
modifier|*
name|device
init|=
name|gbm_bo_get_device
argument_list|(
name|bo
argument_list|)
decl_stmt|;
name|drmModeRmFB
argument_list|(
name|gbm_device_get_fd
argument_list|(
name|device
argument_list|)
argument_list|,
name|fb
operator|->
name|fb
argument_list|)
expr_stmt|;
block|}
operator|delete
name|fb
expr_stmt|;
block|}
end_function
begin_function
DECL|function|framebufferForBufferObject
name|QEglFSKmsScreen
operator|::
name|FrameBuffer
modifier|*
name|QEglFSKmsScreen
operator|::
name|framebufferForBufferObject
parameter_list|(
name|gbm_bo
modifier|*
name|bo
parameter_list|)
block|{
block|{
name|FrameBuffer
modifier|*
name|fb
init|=
cast|static_cast
argument_list|<
name|FrameBuffer
operator|*
argument_list|>
argument_list|(
name|gbm_bo_get_user_data
argument_list|(
name|bo
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fb
condition|)
return|return
name|fb
return|;
block|}
name|uint32_t
name|width
init|=
name|gbm_bo_get_width
argument_list|(
name|bo
argument_list|)
decl_stmt|;
name|uint32_t
name|height
init|=
name|gbm_bo_get_height
argument_list|(
name|bo
argument_list|)
decl_stmt|;
name|uint32_t
name|stride
init|=
name|gbm_bo_get_stride
argument_list|(
name|bo
argument_list|)
decl_stmt|;
name|uint32_t
name|handle
init|=
name|gbm_bo_get_handle
argument_list|(
name|bo
argument_list|)
operator|.
name|u32
decl_stmt|;
name|QScopedPointer
argument_list|<
name|FrameBuffer
argument_list|>
name|fb
argument_list|(
operator|new
name|FrameBuffer
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
name|drmModeAddFB
argument_list|(
name|m_device
operator|->
name|fd
argument_list|()
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|24
argument_list|,
literal|32
argument_list|,
name|stride
argument_list|,
name|handle
argument_list|,
operator|&
name|fb
operator|->
name|fb
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to create KMS FB!"
argument_list|)
expr_stmt|;
return|return
name|Q_NULLPTR
return|;
block|}
name|gbm_bo_set_user_data
argument_list|(
name|bo
argument_list|,
name|fb
operator|.
name|data
argument_list|()
argument_list|,
name|bufferDestroyedHandler
argument_list|)
expr_stmt|;
return|return
name|fb
operator|.
name|take
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|QEglFSKmsScreen
name|QEglFSKmsScreen
operator|::
name|QEglFSKmsScreen
parameter_list|(
name|QEglFSKmsIntegration
modifier|*
name|integration
parameter_list|,
name|QEglFSKmsDevice
modifier|*
name|device
parameter_list|,
name|QEglFSKmsOutput
name|output
parameter_list|,
name|QPoint
name|position
parameter_list|)
member_init_list|:
name|QEglFSScreen
argument_list|(
name|eglGetDisplay
argument_list|(
cast|reinterpret_cast
argument_list|<
name|EGLNativeDisplayType
argument_list|>
argument_list|(
name|device
operator|->
name|device
argument_list|()
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_integration
argument_list|(
name|integration
argument_list|)
member_init_list|,
name|m_device
argument_list|(
name|device
argument_list|)
member_init_list|,
name|m_gbm_surface
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_gbm_bo_current
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_gbm_bo_next
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_output
argument_list|(
name|output
argument_list|)
member_init_list|,
name|m_pos
argument_list|(
name|position
argument_list|)
member_init_list|,
name|m_cursor
argument_list|(
name|Q_NULLPTR
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QEglFSKmsScreen
name|QEglFSKmsScreen
operator|::
name|~
name|QEglFSKmsScreen
parameter_list|()
block|{
name|restoreMode
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|geometry
name|QRect
name|QEglFSKmsScreen
operator|::
name|geometry
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|mode
init|=
name|m_output
operator|.
name|mode
decl_stmt|;
return|return
name|QRect
argument_list|(
name|m_pos
operator|.
name|x
argument_list|()
argument_list|,
name|m_pos
operator|.
name|y
argument_list|()
argument_list|,
name|m_output
operator|.
name|modes
index|[
name|mode
index|]
operator|.
name|hdisplay
argument_list|,
name|m_output
operator|.
name|modes
index|[
name|mode
index|]
operator|.
name|vdisplay
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|depth
name|int
name|QEglFSKmsScreen
operator|::
name|depth
parameter_list|()
specifier|const
block|{
return|return
literal|32
return|;
block|}
end_function
begin_function
DECL|function|format
name|QImage
operator|::
name|Format
name|QEglFSKmsScreen
operator|::
name|format
parameter_list|()
specifier|const
block|{
return|return
name|QImage
operator|::
name|Format_RGB32
return|;
block|}
end_function
begin_function
DECL|function|physicalSize
name|QSizeF
name|QEglFSKmsScreen
operator|::
name|physicalSize
parameter_list|()
specifier|const
block|{
return|return
name|m_output
operator|.
name|physical_size
return|;
block|}
end_function
begin_function
DECL|function|logicalDpi
name|QDpi
name|QEglFSKmsScreen
operator|::
name|logicalDpi
parameter_list|()
specifier|const
block|{
name|QSizeF
name|ps
init|=
name|physicalSize
argument_list|()
decl_stmt|;
name|QSize
name|s
init|=
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|ps
operator|.
name|isValid
argument_list|()
operator|&&
name|s
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QDpi
argument_list|(
literal|25.4
operator|*
name|s
operator|.
name|width
argument_list|()
operator|/
name|ps
operator|.
name|width
argument_list|()
argument_list|,
literal|25.4
operator|*
name|s
operator|.
name|height
argument_list|()
operator|/
name|ps
operator|.
name|height
argument_list|()
argument_list|)
return|;
else|else
return|return
name|QDpi
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nativeOrientation
name|Qt
operator|::
name|ScreenOrientation
name|QEglFSKmsScreen
operator|::
name|nativeOrientation
parameter_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|PrimaryOrientation
return|;
block|}
end_function
begin_function
DECL|function|orientation
name|Qt
operator|::
name|ScreenOrientation
name|QEglFSKmsScreen
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
return|return
name|Qt
operator|::
name|PrimaryOrientation
return|;
block|}
end_function
begin_function
DECL|function|name
name|QString
name|QEglFSKmsScreen
operator|::
name|name
parameter_list|()
specifier|const
block|{
return|return
name|m_output
operator|.
name|name
return|;
block|}
end_function
begin_function
DECL|function|cursor
name|QPlatformCursor
modifier|*
name|QEglFSKmsScreen
operator|::
name|cursor
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_integration
operator|->
name|hwCursor
argument_list|()
condition|)
block|{
if|if
condition|(
name|m_cursor
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QEglFSKmsScreen
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QEglFSKmsScreen
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|m_cursor
operator|.
name|reset
argument_list|(
operator|new
name|QEglFSKmsCursor
argument_list|(
name|that
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|m_cursor
operator|.
name|data
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|QEglFSScreen
operator|::
name|cursor
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|createSurface
name|gbm_surface
modifier|*
name|QEglFSKmsScreen
operator|::
name|createSurface
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_gbm_surface
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Creating window for screen"
operator|<<
name|name
argument_list|()
expr_stmt|;
name|m_gbm_surface
operator|=
name|gbm_surface_create
argument_list|(
name|m_device
operator|->
name|device
argument_list|()
argument_list|,
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|GBM_FORMAT_XRGB8888
argument_list|,
name|GBM_BO_USE_SCANOUT
operator||
name|GBM_BO_USE_RENDERING
argument_list|)
expr_stmt|;
block|}
return|return
name|m_gbm_surface
return|;
block|}
end_function
begin_function
DECL|function|destroySurface
name|void
name|QEglFSKmsScreen
operator|::
name|destroySurface
parameter_list|()
block|{
if|if
condition|(
name|m_gbm_bo_current
condition|)
block|{
name|gbm_bo_destroy
argument_list|(
name|m_gbm_bo_current
argument_list|)
expr_stmt|;
name|m_gbm_bo_current
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
if|if
condition|(
name|m_gbm_bo_next
condition|)
block|{
name|gbm_bo_destroy
argument_list|(
name|m_gbm_bo_next
argument_list|)
expr_stmt|;
name|m_gbm_bo_next
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
if|if
condition|(
name|m_gbm_surface
condition|)
block|{
name|gbm_surface_destroy
argument_list|(
name|m_gbm_surface
argument_list|)
expr_stmt|;
name|m_gbm_surface
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|waitForFlip
name|void
name|QEglFSKmsScreen
operator|::
name|waitForFlip
parameter_list|()
block|{
comment|// Don't lock the mutex unless we actually need to
if|if
condition|(
operator|!
name|m_gbm_bo_next
condition|)
return|return;
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|m_waitForFlipMutex
argument_list|)
decl_stmt|;
while|while
condition|(
name|m_gbm_bo_next
condition|)
name|m_device
operator|->
name|handleDrmEvent
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flip
name|void
name|QEglFSKmsScreen
operator|::
name|flip
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_gbm_surface
condition|)
block|{
name|qWarning
argument_list|(
literal|"Cannot sync before platform init!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|m_gbm_bo_next
operator|=
name|gbm_surface_lock_front_buffer
argument_list|(
name|m_gbm_surface
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_gbm_bo_next
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not lock GBM surface front buffer!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|FrameBuffer
modifier|*
name|fb
init|=
name|framebufferForBufferObject
argument_list|(
name|m_gbm_bo_next
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_output
operator|.
name|mode_set
condition|)
block|{
name|int
name|ret
init|=
name|drmModeSetCrtc
argument_list|(
name|m_device
operator|->
name|fd
argument_list|()
argument_list|,
name|m_output
operator|.
name|crtc_id
argument_list|,
name|fb
operator|->
name|fb
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|m_output
operator|.
name|connector_id
argument_list|,
literal|1
argument_list|,
operator|&
name|m_output
operator|.
name|modes
index|[
name|m_output
operator|.
name|mode
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
name|qErrnoWarning
argument_list|(
literal|"Could not set DRM mode!"
argument_list|)
expr_stmt|;
else|else
name|m_output
operator|.
name|mode_set
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|ret
init|=
name|drmModePageFlip
argument_list|(
name|m_device
operator|->
name|fd
argument_list|()
argument_list|,
name|m_output
operator|.
name|crtc_id
argument_list|,
name|fb
operator|->
name|fb
argument_list|,
name|DRM_MODE_PAGE_FLIP_EVENT
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Could not queue DRM page flip!"
argument_list|)
expr_stmt|;
name|gbm_surface_release_buffer
argument_list|(
name|m_gbm_surface
argument_list|,
name|m_gbm_bo_next
argument_list|)
expr_stmt|;
name|m_gbm_bo_next
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|flipFinished
name|void
name|QEglFSKmsScreen
operator|::
name|flipFinished
parameter_list|()
block|{
if|if
condition|(
name|m_gbm_bo_current
condition|)
name|gbm_surface_release_buffer
argument_list|(
name|m_gbm_surface
argument_list|,
name|m_gbm_bo_current
argument_list|)
expr_stmt|;
name|m_gbm_bo_current
operator|=
name|m_gbm_bo_next
expr_stmt|;
name|m_gbm_bo_next
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restoreMode
name|void
name|QEglFSKmsScreen
operator|::
name|restoreMode
parameter_list|()
block|{
if|if
condition|(
name|m_output
operator|.
name|mode_set
operator|&&
name|m_output
operator|.
name|saved_crtc
condition|)
block|{
name|drmModeSetCrtc
argument_list|(
name|m_device
operator|->
name|fd
argument_list|()
argument_list|,
name|m_output
operator|.
name|saved_crtc
operator|->
name|crtc_id
argument_list|,
name|m_output
operator|.
name|saved_crtc
operator|->
name|buffer_id
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|m_output
operator|.
name|connector_id
argument_list|,
literal|1
argument_list|,
operator|&
name|m_output
operator|.
name|saved_crtc
operator|->
name|mode
argument_list|)
expr_stmt|;
name|drmModeFreeCrtc
argument_list|(
name|m_output
operator|.
name|saved_crtc
argument_list|)
expr_stmt|;
name|m_output
operator|.
name|saved_crtc
operator|=
name|Q_NULLPTR
expr_stmt|;
name|m_output
operator|.
name|mode_set
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|crtcForConnector
name|int
name|QEglFSKmsDevice
operator|::
name|crtcForConnector
parameter_list|(
name|drmModeResPtr
name|resources
parameter_list|,
name|drmModeConnectorPtr
name|connector
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connector
operator|->
name|count_encoders
condition|;
name|i
operator|++
control|)
block|{
name|drmModeEncoderPtr
name|encoder
init|=
name|drmModeGetEncoder
argument_list|(
name|m_dri_fd
argument_list|,
name|connector
operator|->
name|encoders
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|encoder
condition|)
block|{
name|qWarning
argument_list|(
literal|"Failed to get encoder"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|quint32
name|possibleCrtcs
init|=
name|encoder
operator|->
name|possible_crtcs
decl_stmt|;
name|drmModeFreeEncoder
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|resources
operator|->
name|count_crtcs
condition|;
name|j
operator|++
control|)
block|{
name|bool
name|isPossible
init|=
name|possibleCrtcs
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
decl_stmt|;
name|bool
name|isAvailable
init|=
operator|!
operator|(
name|m_crtc_allocator
operator|&
literal|1
operator|<<
name|resources
operator|->
name|crtcs
index|[
name|j
index|]
operator|)
decl_stmt|;
if|if
condition|(
name|isPossible
operator|&&
name|isAvailable
condition|)
return|return
name|j
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|connector_type_names
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|connector_type_names
index|[]
init|=
block|{
literal|"None"
block|,
literal|"VGA"
block|,
literal|"DVI"
block|,
literal|"DVI"
block|,
literal|"DVI"
block|,
literal|"Composite"
block|,
literal|"TV"
block|,
literal|"LVDS"
block|,
literal|"CTV"
block|,
literal|"DIN"
block|,
literal|"DP"
block|,
literal|"HDMI"
block|,
literal|"HDMI"
block|,
literal|"TV"
block|,
literal|"eDP"
block|, }
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|nameForConnector
specifier|static
name|QString
name|nameForConnector
parameter_list|(
specifier|const
name|drmModeConnectorPtr
name|connector
parameter_list|)
block|{
name|QString
name|connectorName
init|=
literal|"UNKNOWN"
decl_stmt|;
if|if
condition|(
name|connector
operator|->
name|connector_type
operator|<
name|ARRAY_LENGTH
argument_list|(
name|connector_type_names
argument_list|)
condition|)
name|connectorName
operator|=
name|connector_type_names
index|[
name|connector
operator|->
name|connector_type
index|]
expr_stmt|;
name|connectorName
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|connector
operator|->
name|connector_type_id
argument_list|)
expr_stmt|;
return|return
name|connectorName
return|;
block|}
end_function
begin_function
DECL|function|parseModeline
specifier|static
name|bool
name|parseModeline
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|drmModeModeInfoPtr
name|mode
parameter_list|)
block|{
name|char
name|hsync
index|[
literal|16
index|]
decl_stmt|;
name|char
name|vsync
index|[
literal|16
index|]
decl_stmt|;
name|float
name|fclock
decl_stmt|;
name|mode
operator|->
name|type
operator|=
name|DRM_MODE_TYPE_USERDEF
expr_stmt|;
name|mode
operator|->
name|hskew
operator|=
literal|0
expr_stmt|;
name|mode
operator|->
name|vscan
operator|=
literal|0
expr_stmt|;
name|mode
operator|->
name|vrefresh
operator|=
literal|0
expr_stmt|;
name|mode
operator|->
name|flags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|sscanf
argument_list|(
name|qPrintable
argument_list|(
name|s
argument_list|)
argument_list|,
literal|"%f %hd %hd %hd %hd %hd %hd %hd %hd %15s %15s"
argument_list|,
operator|&
name|fclock
argument_list|,
operator|&
name|mode
operator|->
name|hdisplay
argument_list|,
operator|&
name|mode
operator|->
name|hsync_start
argument_list|,
operator|&
name|mode
operator|->
name|hsync_end
argument_list|,
operator|&
name|mode
operator|->
name|htotal
argument_list|,
operator|&
name|mode
operator|->
name|vdisplay
argument_list|,
operator|&
name|mode
operator|->
name|vsync_start
argument_list|,
operator|&
name|mode
operator|->
name|vsync_end
argument_list|,
operator|&
name|mode
operator|->
name|vtotal
argument_list|,
name|hsync
argument_list|,
name|vsync
argument_list|)
operator|!=
literal|11
condition|)
return|return
literal|false
return|;
name|mode
operator|->
name|clock
operator|=
name|fclock
operator|*
literal|1000
expr_stmt|;
if|if
condition|(
name|strcmp
argument_list|(
name|hsync
argument_list|,
literal|"+hsync"
argument_list|)
operator|==
literal|0
condition|)
name|mode
operator|->
name|flags
operator||=
name|DRM_MODE_FLAG_PHSYNC
expr_stmt|;
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|hsync
argument_list|,
literal|"-hsync"
argument_list|)
operator|==
literal|0
condition|)
name|mode
operator|->
name|flags
operator||=
name|DRM_MODE_FLAG_NHSYNC
expr_stmt|;
else|else
return|return
literal|false
return|;
if|if
condition|(
name|strcmp
argument_list|(
name|vsync
argument_list|,
literal|"+vsync"
argument_list|)
operator|==
literal|0
condition|)
name|mode
operator|->
name|flags
operator||=
name|DRM_MODE_FLAG_PVSYNC
expr_stmt|;
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|vsync
argument_list|,
literal|"-vsync"
argument_list|)
operator|==
literal|0
condition|)
name|mode
operator|->
name|flags
operator||=
name|DRM_MODE_FLAG_NVSYNC
expr_stmt|;
else|else
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|screenForConnector
name|QEglFSKmsScreen
modifier|*
name|QEglFSKmsDevice
operator|::
name|screenForConnector
parameter_list|(
name|drmModeResPtr
name|resources
parameter_list|,
name|drmModeConnectorPtr
name|connector
parameter_list|,
name|QPoint
name|pos
parameter_list|)
block|{
specifier|const
name|QString
name|connectorName
init|=
name|nameForConnector
argument_list|(
name|connector
argument_list|)
decl_stmt|;
specifier|const
name|int
name|crtc
init|=
name|crtcForConnector
argument_list|(
name|resources
argument_list|,
name|connector
argument_list|)
decl_stmt|;
if|if
condition|(
name|crtc
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"No usable crtc/encoder pair for connector"
operator|<<
name|connectorName
expr_stmt|;
return|return
name|Q_NULLPTR
return|;
block|}
name|OutputConfiguration
name|configuration
decl_stmt|;
name|QSize
name|configurationSize
decl_stmt|;
name|drmModeModeInfo
name|configurationModeline
decl_stmt|;
specifier|const
name|QString
name|mode
init|=
name|m_integration
operator|->
name|outputSettings
argument_list|()
operator|.
name|value
argument_list|(
name|connectorName
argument_list|)
operator|.
name|value
argument_list|(
literal|"mode"
argument_list|,
literal|"preferred"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|==
literal|"off"
condition|)
block|{
name|configuration
operator|=
name|OutputConfigOff
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
literal|"preferred"
condition|)
block|{
name|configuration
operator|=
name|OutputConfigPreferred
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
literal|"current"
condition|)
block|{
name|configuration
operator|=
name|OutputConfigCurrent
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sscanf
argument_list|(
name|qPrintable
argument_list|(
name|mode
argument_list|)
argument_list|,
literal|"%dx%d"
argument_list|,
operator|&
name|configurationSize
operator|.
name|rwidth
argument_list|()
argument_list|,
operator|&
name|configurationSize
operator|.
name|rheight
argument_list|()
argument_list|)
operator|==
literal|2
condition|)
block|{
name|configuration
operator|=
name|OutputConfigMode
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseModeline
argument_list|(
name|mode
argument_list|,
operator|&
name|configurationModeline
argument_list|)
condition|)
block|{
name|configuration
operator|=
name|OutputConfigModeline
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Invalid mode \"%s\" for output %s"
argument_list|,
name|qPrintable
argument_list|(
name|mode
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|connectorName
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|=
name|OutputConfigPreferred
expr_stmt|;
block|}
specifier|const
name|uint32_t
name|crtc_id
init|=
name|resources
operator|->
name|crtcs
index|[
name|crtc
index|]
decl_stmt|;
if|if
condition|(
name|configuration
operator|==
name|OutputConfigOff
condition|)
block|{
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Turning off output"
operator|<<
name|connectorName
expr_stmt|;
name|drmModeSetCrtc
argument_list|(
name|m_dri_fd
argument_list|,
name|crtc_id
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Q_NULLPTR
argument_list|)
expr_stmt|;
return|return
name|Q_NULLPTR
return|;
block|}
comment|// Get the current mode on the current crtc
name|drmModeModeInfo
name|crtc_mode
decl_stmt|;
name|memset
argument_list|(
operator|&
name|crtc_mode
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
name|crtc_mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|drmModeEncoderPtr
name|encoder
init|=
name|drmModeGetEncoder
argument_list|(
name|m_dri_fd
argument_list|,
name|connector
operator|->
name|connector_id
argument_list|)
condition|)
block|{
name|drmModeCrtcPtr
name|crtc
init|=
name|drmModeGetCrtc
argument_list|(
name|m_dri_fd
argument_list|,
name|encoder
operator|->
name|crtc_id
argument_list|)
decl_stmt|;
name|drmModeFreeEncoder
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|crtc
condition|)
return|return
name|Q_NULLPTR
return|;
if|if
condition|(
name|crtc
operator|->
name|mode_valid
condition|)
name|crtc_mode
operator|=
name|crtc
operator|->
name|mode
expr_stmt|;
name|drmModeFreeCrtc
argument_list|(
name|crtc
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|drmModeModeInfo
argument_list|>
name|modes
decl_stmt|;
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
name|connectorName
operator|<<
literal|"mode count:"
operator|<<
name|connector
operator|->
name|count_modes
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connector
operator|->
name|count_modes
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|drmModeModeInfo
modifier|&
name|mode
init|=
name|connector
operator|->
name|modes
index|[
name|i
index|]
decl_stmt|;
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"mode"
operator|<<
name|i
operator|<<
name|mode
operator|.
name|hdisplay
operator|<<
literal|"x"
operator|<<
name|mode
operator|.
name|vdisplay
operator|<<
literal|"@"
operator|<<
name|mode
operator|.
name|vrefresh
operator|<<
literal|"hz"
expr_stmt|;
name|modes
operator|<<
name|connector
operator|->
name|modes
index|[
name|i
index|]
expr_stmt|;
block|}
name|int
name|preferred
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|current
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|configured
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|best
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|modes
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|const
name|drmModeModeInfo
modifier|&
name|m
init|=
name|modes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|==
name|OutputConfigMode
operator|&&
name|m
operator|.
name|hdisplay
operator|==
name|configurationSize
operator|.
name|width
argument_list|()
operator|&&
name|m
operator|.
name|vdisplay
operator|==
name|configurationSize
operator|.
name|height
argument_list|()
condition|)
block|{
name|configured
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|memcmp
argument_list|(
operator|&
name|crtc_mode
argument_list|,
operator|&
name|m
argument_list|,
sizeof|sizeof
name|m
argument_list|)
condition|)
name|current
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|type
operator|&
name|DRM_MODE_TYPE_PREFERRED
condition|)
name|preferred
operator|=
name|i
expr_stmt|;
name|best
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|==
name|OutputConfigModeline
condition|)
block|{
name|modes
operator|<<
name|configurationModeline
expr_stmt|;
name|configured
operator|=
name|modes
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|<
literal|0
operator|&&
name|crtc_mode
operator|.
name|clock
operator|!=
literal|0
condition|)
block|{
name|modes
operator|<<
name|crtc_mode
expr_stmt|;
name|current
operator|=
name|mode
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|==
name|OutputConfigCurrent
condition|)
name|configured
operator|=
name|current
expr_stmt|;
name|int
name|selected_mode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|configured
operator|>=
literal|0
condition|)
name|selected_mode
operator|=
name|configured
expr_stmt|;
elseif|else
if|if
condition|(
name|preferred
operator|>=
literal|0
condition|)
name|selected_mode
operator|=
name|preferred
expr_stmt|;
elseif|else
if|if
condition|(
name|current
operator|>=
literal|0
condition|)
name|selected_mode
operator|=
name|current
expr_stmt|;
elseif|else
if|if
condition|(
name|best
operator|>=
literal|0
condition|)
name|selected_mode
operator|=
name|best
expr_stmt|;
if|if
condition|(
name|selected_mode
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"No modes available for output"
operator|<<
name|connectorName
expr_stmt|;
return|return
name|Q_NULLPTR
return|;
block|}
else|else
block|{
name|int
name|width
init|=
name|modes
index|[
name|selected_mode
index|]
operator|.
name|hdisplay
decl_stmt|;
name|int
name|height
init|=
name|modes
index|[
name|selected_mode
index|]
operator|.
name|vdisplay
decl_stmt|;
name|int
name|refresh
init|=
name|modes
index|[
name|selected_mode
index|]
operator|.
name|vrefresh
decl_stmt|;
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Selected mode"
operator|<<
name|selected_mode
operator|<<
literal|":"
operator|<<
name|width
operator|<<
literal|"x"
operator|<<
name|height
operator|<<
literal|"@"
operator|<<
name|refresh
operator|<<
literal|"hz for output"
operator|<<
name|connectorName
expr_stmt|;
block|}
name|QEglFSKmsOutput
name|output
init|=
block|{
name|connectorName
block|,
name|connector
operator|->
name|connector_id
block|,
name|crtc_id
block|,
name|QSizeF
argument_list|(
name|connector
operator|->
name|mmWidth
argument_list|,
name|connector
operator|->
name|mmHeight
argument_list|)
block|,
name|selected_mode
block|,
literal|false
block|,
name|drmModeGetCrtc
argument_list|(
name|m_dri_fd
argument_list|,
name|crtc_id
argument_list|)
block|,
name|modes
block|}
decl_stmt|;
name|m_crtc_allocator
operator||=
operator|(
literal|1
operator|<<
name|output
operator|.
name|crtc_id
operator|)
expr_stmt|;
name|m_connector_allocator
operator||=
operator|(
literal|1
operator|<<
name|output
operator|.
name|connector_id
operator|)
expr_stmt|;
return|return
operator|new
name|QEglFSKmsScreen
argument_list|(
name|m_integration
argument_list|,
name|this
argument_list|,
name|output
argument_list|,
name|pos
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|pageFlipHandler
name|void
name|QEglFSKmsDevice
operator|::
name|pageFlipHandler
parameter_list|(
name|int
name|fd
parameter_list|,
name|unsigned
name|int
name|sequence
parameter_list|,
name|unsigned
name|int
name|tv_sec
parameter_list|,
name|unsigned
name|int
name|tv_usec
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|tv_sec
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|tv_usec
argument_list|)
expr_stmt|;
name|QEglFSKmsScreen
modifier|*
name|screen
init|=
cast|static_cast
argument_list|<
name|QEglFSKmsScreen
operator|*
argument_list|>
argument_list|(
name|user_data
argument_list|)
decl_stmt|;
name|screen
operator|->
name|flipFinished
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QEglFSKmsDevice
name|QEglFSKmsDevice
operator|::
name|QEglFSKmsDevice
parameter_list|(
name|QEglFSKmsIntegration
modifier|*
name|integration
parameter_list|,
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
member_init_list|:
name|m_integration
argument_list|(
name|integration
argument_list|)
member_init_list|,
name|m_path
argument_list|(
name|path
argument_list|)
member_init_list|,
name|m_dri_fd
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_gbm_device
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|m_crtc_allocator
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_connector_allocator
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|open
name|bool
name|QEglFSKmsDevice
operator|::
name|open
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|m_dri_fd
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|m_gbm_device
operator|==
name|Q_NULLPTR
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Opening device"
operator|<<
name|m_path
expr_stmt|;
name|m_dri_fd
operator|=
name|qt_safe_open
argument_list|(
name|m_path
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDWR
operator||
name|O_CLOEXEC
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_dri_fd
operator|==
operator|-
literal|1
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Could not open DRM device %s"
argument_list|,
name|qPrintable
argument_list|(
name|m_path
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|qCDebug
argument_list|(
name|qLcEglfsKmsDebug
argument_list|)
operator|<<
literal|"Creating GBM device for file descriptor"
operator|<<
name|m_dri_fd
operator|<<
literal|"obtained from"
operator|<<
name|m_path
expr_stmt|;
name|m_gbm_device
operator|=
name|gbm_create_device
argument_list|(
name|m_dri_fd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_gbm_device
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Could not create GBM device"
argument_list|)
expr_stmt|;
name|qt_safe_close
argument_list|(
name|m_dri_fd
argument_list|)
expr_stmt|;
name|m_dri_fd
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QEglFSKmsDevice
operator|::
name|close
parameter_list|()
block|{
if|if
condition|(
name|m_gbm_device
condition|)
block|{
name|gbm_device_destroy
argument_list|(
name|m_gbm_device
argument_list|)
expr_stmt|;
name|m_gbm_device
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
if|if
condition|(
name|m_dri_fd
operator|!=
operator|-
literal|1
condition|)
block|{
name|qt_safe_close
argument_list|(
name|m_dri_fd
argument_list|)
expr_stmt|;
name|m_dri_fd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createScreens
name|void
name|QEglFSKmsDevice
operator|::
name|createScreens
parameter_list|()
block|{
name|drmModeResPtr
name|resources
init|=
name|drmModeGetResources
argument_list|(
name|m_dri_fd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resources
condition|)
block|{
name|qWarning
argument_list|(
literal|"drmModeGetResources failed"
argument_list|)
expr_stmt|;
return|return;
block|}
name|QPoint
name|pos
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QEglFSIntegration
modifier|*
name|integration
init|=
cast|static_cast
argument_list|<
name|QEglFSIntegration
operator|*
argument_list|>
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resources
operator|->
name|count_connectors
condition|;
name|i
operator|++
control|)
block|{
name|drmModeConnectorPtr
name|connector
init|=
name|drmModeGetConnector
argument_list|(
name|m_dri_fd
argument_list|,
name|resources
operator|->
name|connectors
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connector
condition|)
continue|continue;
name|QEglFSKmsScreen
modifier|*
name|screen
init|=
name|screenForConnector
argument_list|(
name|resources
argument_list|,
name|connector
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|screen
condition|)
block|{
name|integration
operator|->
name|addScreen
argument_list|(
name|screen
argument_list|)
expr_stmt|;
name|pos
operator|.
name|rx
argument_list|()
operator|+=
name|screen
operator|->
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
name|drmModeFreeConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
name|drmModeFreeResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|device
name|gbm_device
modifier|*
name|QEglFSKmsDevice
operator|::
name|device
parameter_list|()
specifier|const
block|{
return|return
name|m_gbm_device
return|;
block|}
end_function
begin_function
DECL|function|fd
name|int
name|QEglFSKmsDevice
operator|::
name|fd
parameter_list|()
specifier|const
block|{
return|return
name|m_dri_fd
return|;
block|}
end_function
begin_function
DECL|function|handleDrmEvent
name|void
name|QEglFSKmsDevice
operator|::
name|handleDrmEvent
parameter_list|()
block|{
name|drmEventContext
name|drmEvent
init|=
block|{
name|DRM_EVENT_CONTEXT_VERSION
block|,
name|Q_NULLPTR
block|,
comment|// vblank handler
name|pageFlipHandler
comment|// page flip handler
block|}
decl_stmt|;
name|drmHandleEvent
argument_list|(
name|m_dri_fd
argument_list|,
operator|&
name|drmEvent
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qeglfskmsintegration.moc"
end_include
end_unit
