begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qeglfscursor.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qwindowsysteminterface_qpa.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QOpenGLShaderProgram>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_define
DECL|macro|CURSORS_PER_ROW
define|#
directive|define
name|CURSORS_PER_ROW
value|8
end_define
begin_constructor
DECL|function|QEglFSCursor
name|QEglFSCursor
operator|::
name|QEglFSCursor
parameter_list|(
name|QEglFSScreen
modifier|*
name|screen
parameter_list|)
member_init_list|:
name|m_screen
argument_list|(
name|screen
argument_list|)
member_init_list|,
name|m_pos
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
member_init_list|,
name|m_program
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_vertexCoordEntry
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_textureCoordEntry
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_textureEntry
argument_list|(
literal|0
argument_list|)
block|{
name|createShaderPrograms
argument_list|()
expr_stmt|;
name|initCursorAtlas
argument_list|()
expr_stmt|;
comment|// ## this shouldn't be required
name|QCursor
name|cursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
decl_stmt|;
name|changeCursor
argument_list|(
operator|&
name|cursor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QEglFSCursor
name|QEglFSCursor
operator|::
name|~
name|QEglFSCursor
parameter_list|()
block|{
comment|// destroy atlas?
block|}
end_destructor
begin_function
DECL|function|createShaderPrograms
name|void
name|QEglFSCursor
operator|::
name|createShaderPrograms
parameter_list|()
block|{
specifier|static
specifier|const
name|char
modifier|*
name|textureVertexProgram
init|=
literal|"attribute highp vec2 vertexCoordEntry;\n"
literal|"attribute highp vec2 textureCoordEntry;\n"
literal|"varying highp vec2 textureCoord;\n"
literal|"void main() {\n"
literal|"   textureCoord = textureCoordEntry;\n"
literal|"   gl_Position = vec4(vertexCoordEntry, 1.0, 1.0);\n"
literal|"}\n"
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|textureFragmentProgram
init|=
literal|"uniform sampler2D texture;\n"
literal|"varying highp vec2 textureCoord;\n"
literal|"void main() {\n"
literal|"   gl_FragColor = texture2D(texture, textureCoord).bgra;\n"
literal|"}\n"
decl_stmt|;
name|m_program
operator|=
operator|new
name|QOpenGLShaderProgram
expr_stmt|;
name|m_program
operator|->
name|addShaderFromSourceCode
argument_list|(
name|QOpenGLShader
operator|::
name|Vertex
argument_list|,
name|textureVertexProgram
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|addShaderFromSourceCode
argument_list|(
name|QOpenGLShader
operator|::
name|Fragment
argument_list|,
name|textureFragmentProgram
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|link
argument_list|()
expr_stmt|;
name|m_vertexCoordEntry
operator|=
name|m_program
operator|->
name|attributeLocation
argument_list|(
literal|"vertexCoordEntry"
argument_list|)
expr_stmt|;
name|m_textureCoordEntry
operator|=
name|m_program
operator|->
name|attributeLocation
argument_list|(
literal|"textureCoordEntry"
argument_list|)
expr_stmt|;
name|m_textureEntry
operator|=
name|m_program
operator|->
name|uniformLocation
argument_list|(
literal|"texture"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createCursorTexture
name|void
name|QEglFSCursor
operator|::
name|createCursorTexture
parameter_list|(
name|uint
modifier|*
name|texture
parameter_list|,
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
block|{
name|glGenTextures
argument_list|(
literal|1
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
operator|*
name|texture
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_NEAREST
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glTexParameterf
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_WRAP_T
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
comment|/* level */
argument_list|,
name|GL_RGBA
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
literal|0
comment|/* border */
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|image
operator|.
name|constBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initCursorAtlas
name|void
name|QEglFSCursor
operator|::
name|initCursorAtlas
parameter_list|()
block|{
name|QImage
name|image
init|=
name|QImage
argument_list|(
literal|":/cursor-atlas.png"
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|m_cursorAtlas
operator|.
name|cursorWidth
operator|=
name|image
operator|.
name|width
argument_list|()
operator|/
name|CURSORS_PER_ROW
expr_stmt|;
name|m_cursorAtlas
operator|.
name|cursorHeight
operator|=
name|image
operator|.
name|height
argument_list|()
operator|/
operator|(
operator|(
name|Qt
operator|::
name|LastCursor
operator|+
name|CURSORS_PER_ROW
operator|-
literal|1
operator|)
operator|/
name|CURSORS_PER_ROW
operator|)
expr_stmt|;
name|m_cursorAtlas
operator|.
name|hotSpot
operator|=
name|QPoint
argument_list|(
name|m_cursorAtlas
operator|.
name|cursorWidth
operator|/
literal|2
argument_list|,
name|m_cursorAtlas
operator|.
name|cursorHeight
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// ## be smarter
name|m_cursorAtlas
operator|.
name|width
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
name|m_cursorAtlas
operator|.
name|height
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
name|createCursorTexture
argument_list|(
operator|&
name|m_cursorAtlas
operator|.
name|texture
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeCursor
name|void
name|QEglFSCursor
operator|::
name|changeCursor
parameter_list|(
name|QCursor
modifier|*
name|cursor
parameter_list|,
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
specifier|const
name|QRect
name|oldCursorRect
init|=
name|cursorRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_cursor
operator|.
name|shape
operator|==
name|Qt
operator|::
name|BitmapCursor
operator|&&
name|m_cursor
operator|.
name|texture
condition|)
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|m_cursor
operator|.
name|texture
argument_list|)
expr_stmt|;
name|m_cursor
operator|.
name|shape
operator|=
name|cursor
operator|->
name|shape
argument_list|()
expr_stmt|;
if|if
condition|(
name|cursor
operator|->
name|shape
argument_list|()
operator|!=
name|Qt
operator|::
name|BitmapCursor
condition|)
block|{
comment|// standard cursor
specifier|const
name|float
name|ws
init|=
operator|(
name|float
operator|)
name|m_cursorAtlas
operator|.
name|cursorWidth
operator|/
name|m_cursorAtlas
operator|.
name|width
decl_stmt|,
name|hs
init|=
operator|(
name|float
operator|)
name|m_cursorAtlas
operator|.
name|cursorHeight
operator|/
name|m_cursorAtlas
operator|.
name|height
decl_stmt|;
name|m_cursor
operator|.
name|textureRect
operator|=
name|QRectF
argument_list|(
name|ws
operator|*
operator|(
name|m_cursor
operator|.
name|shape
operator|%
name|CURSORS_PER_ROW
operator|)
argument_list|,
name|hs
operator|*
operator|(
name|m_cursor
operator|.
name|shape
operator|/
name|CURSORS_PER_ROW
operator|)
argument_list|,
name|ws
argument_list|,
name|hs
argument_list|)
expr_stmt|;
name|m_cursor
operator|.
name|hotSpot
operator|=
name|m_cursorAtlas
operator|.
name|hotSpot
expr_stmt|;
name|m_cursor
operator|.
name|texture
operator|=
name|m_cursorAtlas
operator|.
name|texture
expr_stmt|;
name|m_cursor
operator|.
name|size
operator|=
name|QSize
argument_list|(
name|m_cursorAtlas
operator|.
name|cursorWidth
argument_list|,
name|m_cursorAtlas
operator|.
name|cursorHeight
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QImage
name|image
init|=
name|cursor
operator|->
name|pixmap
argument_list|()
operator|.
name|toImage
argument_list|()
decl_stmt|;
name|m_cursor
operator|.
name|textureRect
operator|=
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|m_cursor
operator|.
name|hotSpot
operator|=
name|cursor
operator|->
name|hotSpot
argument_list|()
expr_stmt|;
name|m_cursor
operator|.
name|size
operator|=
name|image
operator|.
name|size
argument_list|()
expr_stmt|;
name|createCursorTexture
argument_list|(
operator|&
name|m_cursor
operator|.
name|texture
argument_list|,
name|image
argument_list|)
expr_stmt|;
block|}
name|QRegion
name|rgn
init|=
name|oldCursorRect
operator||
name|cursorRect
argument_list|()
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleSynchronousExposeEvent
argument_list|(
name|window
argument_list|,
name|rgn
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pos
name|QPoint
name|QEglFSCursor
operator|::
name|pos
parameter_list|()
specifier|const
block|{
return|return
name|m_pos
return|;
block|}
end_function
begin_function
DECL|function|setPos
name|void
name|QEglFSCursor
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
specifier|const
name|QRect
name|oldCursorRect
init|=
name|cursorRect
argument_list|()
decl_stmt|;
name|m_pos
operator|=
name|pos
expr_stmt|;
name|QRegion
name|rgn
init|=
name|oldCursorRect
operator||
name|cursorRect
argument_list|()
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleSynchronousExposeEvent
argument_list|(
name|m_screen
operator|->
name|topLevelAt
argument_list|(
name|m_pos
argument_list|)
argument_list|,
name|rgn
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pointerEvent
name|void
name|QEglFSCursor
operator|::
name|pointerEvent
parameter_list|(
specifier|const
name|QMouseEvent
modifier|&
name|event
parameter_list|)
block|{
specifier|const
name|QRect
name|oldCursorRect
init|=
name|cursorRect
argument_list|()
decl_stmt|;
name|m_pos
operator|=
name|event
operator|.
name|pos
argument_list|()
expr_stmt|;
name|QRegion
name|rgn
init|=
name|oldCursorRect
operator||
name|cursorRect
argument_list|()
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleSynchronousExposeEvent
argument_list|(
name|m_screen
operator|->
name|topLevelAt
argument_list|(
name|m_pos
argument_list|)
argument_list|,
name|rgn
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|QEglFSCursor
operator|::
name|render
parameter_list|()
block|{
name|m_program
operator|->
name|bind
argument_list|()
expr_stmt|;
specifier|const
name|QRectF
name|cr
init|=
name|cursorRect
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|screenRect
argument_list|(
name|m_screen
operator|->
name|geometry
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|GLfloat
name|x1
init|=
literal|2
operator|*
operator|(
name|cr
operator|.
name|left
argument_list|()
operator|/
name|screenRect
operator|.
name|width
argument_list|()
operator|)
operator|-
literal|1
decl_stmt|;
specifier|const
name|GLfloat
name|x2
init|=
literal|2
operator|*
operator|(
name|cr
operator|.
name|right
argument_list|()
operator|/
name|screenRect
operator|.
name|width
argument_list|()
operator|)
operator|-
literal|1
decl_stmt|;
specifier|const
name|GLfloat
name|y1
init|=
literal|1
operator|-
operator|(
name|cr
operator|.
name|top
argument_list|()
operator|/
name|screenRect
operator|.
name|height
argument_list|()
operator|)
operator|*
literal|2
decl_stmt|;
specifier|const
name|GLfloat
name|y2
init|=
literal|1
operator|-
operator|(
name|cr
operator|.
name|bottom
argument_list|()
operator|/
name|screenRect
operator|.
name|height
argument_list|()
operator|)
operator|*
literal|2
decl_stmt|;
specifier|const
name|GLfloat
name|cursorCoordinates
index|[]
init|=
block|{
name|x1
block|,
name|y2
block|,
name|x2
block|,
name|y2
block|,
name|x1
block|,
name|y1
block|,
name|x2
block|,
name|y1
block|}
decl_stmt|;
specifier|const
name|GLfloat
name|s1
init|=
name|m_cursor
operator|.
name|textureRect
operator|.
name|left
argument_list|()
decl_stmt|;
specifier|const
name|GLfloat
name|s2
init|=
name|m_cursor
operator|.
name|textureRect
operator|.
name|right
argument_list|()
decl_stmt|;
specifier|const
name|GLfloat
name|t1
init|=
name|m_cursor
operator|.
name|textureRect
operator|.
name|top
argument_list|()
decl_stmt|;
specifier|const
name|GLfloat
name|t2
init|=
name|m_cursor
operator|.
name|textureRect
operator|.
name|bottom
argument_list|()
decl_stmt|;
specifier|const
name|GLfloat
name|textureCoordinates
index|[]
init|=
block|{
name|s1
block|,
name|t2
block|,
name|s2
block|,
name|t2
block|,
name|s1
block|,
name|t1
block|,
name|s2
block|,
name|t1
block|}
decl_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|m_cursor
operator|.
name|texture
argument_list|)
expr_stmt|;
name|glEnableVertexAttribArray
argument_list|(
name|m_vertexCoordEntry
argument_list|)
expr_stmt|;
name|glEnableVertexAttribArray
argument_list|(
name|m_textureCoordEntry
argument_list|)
expr_stmt|;
name|glVertexAttribPointer
argument_list|(
name|m_vertexCoordEntry
argument_list|,
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|0
argument_list|,
name|cursorCoordinates
argument_list|)
expr_stmt|;
name|glVertexAttribPointer
argument_list|(
name|m_textureCoordEntry
argument_list|,
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|0
argument_list|,
name|textureCoordinates
argument_list|)
expr_stmt|;
name|glUniform1f
argument_list|(
name|m_textureEntry
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_BLEND
argument_list|)
expr_stmt|;
name|glBlendFunc
argument_list|(
name|GL_ONE
argument_list|,
name|GL_ONE_MINUS_SRC_ALPHA
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
comment|// disable depth testing to make sure cursor is always on top
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_STRIP
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_BLEND
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glDisableVertexAttribArray
argument_list|(
name|m_vertexCoordEntry
argument_list|)
expr_stmt|;
name|glDisableVertexAttribArray
argument_list|(
name|m_textureCoordEntry
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
