begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QEGLFSWINDOW_H
end_ifndef
begin_define
DECL|macro|QEGLFSWINDOW_H
define|#
directive|define
name|QEGLFSWINDOW_H
end_define
begin_include
include|#
directive|include
file|"qeglfsglobal.h"
end_include
begin_include
include|#
directive|include
file|"qeglfsintegration.h"
end_include
begin_include
include|#
directive|include
file|"qeglfsscreen.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformwindow.h>
end_include
begin_include
include|#
directive|include
file|<QtPlatformSupport/private/qopenglcompositor_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QOpenGLCompositorBackingStore
name|class
name|QOpenGLCompositorBackingStore
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPlatformTextureList
name|class
name|QPlatformTextureList
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPlatformWindow
name|class
name|Q_EGLFS_EXPORT
name|QEglFSWindow
range|:
name|public
name|QPlatformWindow
decl_stmt|,
name|public
name|QOpenGLCompositorWindow
block|{
name|public
label|:
name|QEglFSWindow
argument_list|(
name|QWindow
operator|*
name|w
argument_list|)
expr_stmt|;
operator|~
name|QEglFSWindow
argument_list|()
expr_stmt|;
name|void
name|create
parameter_list|()
function_decl|;
name|void
name|destroy
parameter_list|()
function_decl|;
name|void
name|setGeometry
argument_list|(
specifier|const
name|QRect
operator|&
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|QRect
name|geometry
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
expr_stmt|;
name|void
name|setVisible
argument_list|(
name|bool
name|visible
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|void
name|requestActivateWindow
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|void
name|raise
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|void
name|lower
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|void
name|propagateSizeHints
parameter_list|()
function|Q_DECL_OVERRIDE
block|{ }
name|void
name|setMask
parameter_list|(
specifier|const
name|QRegion
modifier|&
parameter_list|)
function|Q_DECL_OVERRIDE
block|{ }
name|bool
name|setKeyboardGrabEnabled
parameter_list|(
name|bool
parameter_list|)
function|Q_DECL_OVERRIDE
block|{
return|return
name|false
return|;
block|}
name|bool
name|setMouseGrabEnabled
parameter_list|(
name|bool
parameter_list|)
function|Q_DECL_OVERRIDE
block|{
return|return
name|false
return|;
block|}
name|void
name|setOpacity
argument_list|(
name|qreal
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|WId
name|winId
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
expr_stmt|;
name|QSurfaceFormat
name|format
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
expr_stmt|;
name|EGLNativeWindowType
name|eglWindow
argument_list|()
specifier|const
expr_stmt|;
name|EGLSurface
name|surface
argument_list|()
specifier|const
expr_stmt|;
name|QEglFSScreen
operator|*
name|screen
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|hasNativeWindow
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|testFlag
argument_list|(
name|HasNativeWindow
argument_list|)
return|;
block|}
name|virtual
name|void
name|invalidateSurface
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|virtual
name|void
name|resetSurface
parameter_list|()
function_decl|;
name|QOpenGLCompositorBackingStore
modifier|*
name|backingStore
parameter_list|()
block|{
return|return
name|m_backingStore
return|;
block|}
name|void
name|setBackingStore
parameter_list|(
name|QOpenGLCompositorBackingStore
modifier|*
name|backingStore
parameter_list|)
block|{
name|m_backingStore
operator|=
name|backingStore
expr_stmt|;
block|}
name|bool
name|isRaster
argument_list|()
specifier|const
expr_stmt|;
name|QWindow
operator|*
name|sourceWindow
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
expr_stmt|;
specifier|const
name|QPlatformTextureList
operator|*
name|textures
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
expr_stmt|;
name|void
name|endCompositing
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|protected
label|:
name|QOpenGLCompositorBackingStore
modifier|*
name|m_backingStore
decl_stmt|;
name|bool
name|m_raster
decl_stmt|;
name|WId
name|m_winId
decl_stmt|;
name|EGLSurface
name|m_surface
decl_stmt|;
name|EGLNativeWindowType
name|m_window
decl_stmt|;
name|EGLConfig
name|m_config
decl_stmt|;
name|QSurfaceFormat
name|m_format
decl_stmt|;
enum|enum
name|Flag
block|{
name|Created
init|=
literal|0x01
block|,
name|HasNativeWindow
init|=
literal|0x02
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|Flags
argument_list|,
argument|Flag
argument_list|)
name|Flags
name|m_flags
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QEGLFSWINDOW_H
end_comment
end_unit
