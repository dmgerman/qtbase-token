begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qopenkodewindow.h"
end_include
begin_include
include|#
directive|include
file|"qopenkodeintegration.h"
end_include
begin_include
include|#
directive|include
file|"../eglconvenience/qeglplatformcontext.h"
end_include
begin_include
include|#
directive|include
file|"../eglconvenience/qeglconvenience.h"
end_include
begin_include
include|#
directive|include
file|<KD/kd.h>
end_include
begin_include
include|#
directive|include
file|<KD/NV_display.h>
end_include
begin_include
include|#
directive|include
file|<KD/kdplatform.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|KD_ATX_keyboard
end_ifdef
begin_include
include|#
directive|include
file|"openkodekeytranslator.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qvector.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|kdProcessMouseEvents
name|void
name|kdProcessMouseEvents
parameter_list|(
specifier|const
name|KDEvent
modifier|*
name|event
parameter_list|)
block|{
name|QOpenKODEWindow
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QOpenKODEWindow
operator|*
argument_list|>
argument_list|(
name|event
operator|->
name|userptr
argument_list|)
decl_stmt|;
name|window
operator|->
name|processMouseEvents
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|KD_ATX_keyboard
end_ifdef
begin_function
DECL|function|kdProcessKeyEvents
name|void
name|kdProcessKeyEvents
parameter_list|(
specifier|const
name|KDEvent
modifier|*
name|event
parameter_list|)
block|{
name|QOpenKODEWindow
modifier|*
name|window
init|=
cast|static_cast
argument_list|<
name|QOpenKODEWindow
operator|*
argument_list|>
argument_list|(
name|event
operator|->
name|userptr
argument_list|)
decl_stmt|;
name|window
operator|->
name|processKeyEvents
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//KD_ATX_keyboard
end_comment
begin_constructor
DECL|function|QOpenKODEWindow
name|QOpenKODEWindow
operator|::
name|QOpenKODEWindow
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|)
member_init_list|:
name|QPlatformWindow
argument_list|(
name|tlw
argument_list|)
member_init_list|,
name|isFullScreen
argument_list|(
literal|false
argument_list|)
block|{
if|if
condition|(
name|tlw
operator|->
name|platformWindowFormat
argument_list|()
operator|.
name|windowApi
argument_list|()
operator|==
name|QPlatformWindowFormat
operator|::
name|OpenVG
condition|)
block|{
name|m_eglApi
operator|=
name|EGL_OPENVG_API
expr_stmt|;
block|}
else|else
block|{
name|m_eglContextAttrs
operator|.
name|append
argument_list|(
name|EGL_CONTEXT_CLIENT_VERSION
argument_list|)
expr_stmt|;
name|m_eglContextAttrs
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|m_eglApi
operator|=
name|EGL_OPENGL_ES_API
expr_stmt|;
block|}
name|eglBindAPI
argument_list|(
name|m_eglApi
argument_list|)
expr_stmt|;
name|m_eglContextAttrs
operator|.
name|append
argument_list|(
name|EGL_NONE
argument_list|)
expr_stmt|;
name|m_eglWindowAttrs
operator|.
name|append
argument_list|(
name|EGL_NONE
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPlatformScreen
modifier|*
argument_list|>
name|screens
init|=
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|screens
argument_list|()
decl_stmt|;
comment|//XXXX: jl figure out how to pick the correct screen.
comment|//    Q_ASSERT(screens.size()> tlw->d_func()->screenNumber);
comment|//    QOpenKODEScreen *screen = qobject_cast<QOpenKODEScreen *>(screens.at(tlw->d_func()->screenNumber));
name|QOpenKODEScreen
modifier|*
name|screen
init|=
name|qobject_cast
argument_list|<
name|QOpenKODEScreen
operator|*
argument_list|>
argument_list|(
name|screens
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|screen
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"Could not make QOpenKODEWindow without a screen"
argument_list|)
expr_stmt|;
block|}
name|QPlatformWindowFormat
name|format
init|=
name|tlw
operator|->
name|platformWindowFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|setRedBufferSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|format
operator|.
name|setGreenBufferSize
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|format
operator|.
name|setBlueBufferSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|m_eglConfig
operator|=
name|q_configFromQPlatformWindowFormat
argument_list|(
name|screen
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|m_kdWindow
operator|=
name|kdCreateWindow
argument_list|(
name|screen
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|m_eglConfig
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|kdInstallCallback
argument_list|(
name|kdProcessMouseEvents
argument_list|,
name|KD_EVENT_INPUT_POINTER
argument_list|,
name|this
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|KD_ATX_keyboard
name|kdInstallCallback
argument_list|(
name|kdProcessKeyEvents
argument_list|,
name|KD_EVENT_INPUT_KEY_ATX
argument_list|,
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//KD_ATX_keyboard
if|if
condition|(
operator|!
name|m_kdWindow
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Error creating native window"
argument_list|)
expr_stmt|;
return|return;
block|}
name|KDboolean
name|exclusive
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|kdSetWindowPropertybv
argument_list|(
name|m_kdWindow
argument_list|,
name|KD_WINDOWPROPERTY_DESKTOP_EXCLUSIVE_NV
argument_list|,
operator|&
name|exclusive
argument_list|)
condition|)
block|{
name|isFullScreen
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isFullScreen
condition|)
block|{
name|tlw
operator|->
name|setGeometry
argument_list|(
name|screen
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
name|screen
operator|->
name|setFullScreen
argument_list|(
name|isFullScreen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|KDint
name|windowSize
index|[
literal|2
index|]
init|=
block|{
name|tlw
operator|->
name|width
argument_list|()
block|,
name|tlw
operator|->
name|height
argument_list|()
block|}
decl_stmt|;
if|if
condition|(
name|kdSetWindowPropertyiv
argument_list|(
name|m_kdWindow
argument_list|,
name|KD_WINDOWPROPERTY_SIZE
argument_list|,
name|windowSize
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not set native window size"
argument_list|)
expr_stmt|;
block|}
name|KDboolean
name|visibillity
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|kdSetWindowPropertybv
argument_list|(
name|m_kdWindow
argument_list|,
name|KD_WINDOWPROPERTY_VISIBILITY
argument_list|,
operator|&
name|visibillity
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not set visibillity to false"
argument_list|)
expr_stmt|;
block|}
specifier|const
name|KDint
name|windowPos
index|[
literal|2
index|]
init|=
block|{
name|tlw
operator|->
name|x
argument_list|()
block|,
name|tlw
operator|->
name|y
argument_list|()
block|}
decl_stmt|;
if|if
condition|(
name|kdSetWindowPropertyiv
argument_list|(
name|m_kdWindow
argument_list|,
name|KD_WINDOWPROPERTY_DESKTOP_OFFSET_NV
argument_list|,
name|windowPos
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not set native window position"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|QOpenKODEIntegration
modifier|*
name|integration
init|=
cast|static_cast
argument_list|<
name|QOpenKODEIntegration
operator|*
argument_list|>
argument_list|(
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isFullScreen
operator|||
operator|(
name|isFullScreen
operator|&&
operator|!
name|integration
operator|->
name|mainGLContext
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|kdRealizeWindow
argument_list|(
name|m_kdWindow
argument_list|,
operator|&
name|m_eglWindow
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not realize native window"
argument_list|)
expr_stmt|;
return|return;
block|}
name|EGLSurface
name|surface
init|=
name|eglCreateWindowSurface
argument_list|(
name|screen
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|m_eglConfig
argument_list|,
name|m_eglWindow
argument_list|,
name|m_eglWindowAttrs
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|m_platformGlContext
operator|=
operator|new
name|QEGLPlatformContext
argument_list|(
name|screen
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|m_eglConfig
argument_list|,
name|m_eglContextAttrs
operator|.
name|data
argument_list|()
argument_list|,
name|surface
argument_list|,
name|m_eglApi
argument_list|)
expr_stmt|;
name|integration
operator|->
name|setMainGLContext
argument_list|(
name|m_platformGLContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_platformGlContext
operator|=
name|integration
operator|->
name|mainGLContext
argument_list|()
expr_stmt|;
name|kdDestroyWindow
argument_list|(
name|m_kdWindow
argument_list|)
expr_stmt|;
name|m_kdWindow
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QOpenKODEWindow
name|QOpenKODEWindow
operator|::
name|~
name|QOpenKODEWindow
parameter_list|()
block|{
if|if
condition|(
name|m_platformGlContext
operator|!=
cast|static_cast
argument_list|<
name|QOpenKODEIntegration
operator|*
argument_list|>
argument_list|(
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
argument_list|)
condition|)
block|{
operator|delete
name|m_platformGlContext
expr_stmt|;
block|}
if|if
condition|(
name|m_kdWindow
condition|)
name|kdDestroyWindow
argument_list|(
name|m_kdWindow
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setGeometry
name|void
name|QOpenKODEWindow
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
if|if
condition|(
name|isFullScreen
condition|)
block|{
name|QList
argument_list|<
name|QPlatformScreen
modifier|*
argument_list|>
name|screens
init|=
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|screens
argument_list|()
decl_stmt|;
name|QOpenKODEScreen
modifier|*
name|screen
init|=
name|qobject_cast
argument_list|<
name|QOpenKODEScreen
operator|*
argument_list|>
argument_list|(
name|screens
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|widget
argument_list|()
operator|->
name|setGeometry
argument_list|(
name|screen
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|bool
name|needToDeleteContext
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isFullScreen
condition|)
block|{
specifier|const
name|QRect
name|geo
init|=
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|geo
operator|.
name|size
argument_list|()
operator|!=
name|rect
operator|.
name|size
argument_list|()
condition|)
block|{
specifier|const
name|KDint
name|windowSize
index|[
literal|2
index|]
init|=
block|{
name|rect
operator|.
name|width
argument_list|()
block|,
name|rect
operator|.
name|height
argument_list|()
block|}
decl_stmt|;
if|if
condition|(
name|kdSetWindowPropertyiv
argument_list|(
name|m_kdWindow
argument_list|,
name|KD_WINDOWPROPERTY_SIZE
argument_list|,
name|windowSize
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not set native window size"
argument_list|)
expr_stmt|;
comment|//return;
block|}
else|else
block|{
name|needToDeleteContext
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|geo
operator|.
name|topLeft
argument_list|()
operator|!=
name|rect
operator|.
name|topLeft
argument_list|()
condition|)
block|{
specifier|const
name|KDint
name|windowPos
index|[
literal|2
index|]
init|=
block|{
name|rect
operator|.
name|x
argument_list|()
block|,
name|rect
operator|.
name|y
argument_list|()
block|}
decl_stmt|;
if|if
condition|(
name|kdSetWindowPropertyiv
argument_list|(
name|m_kdWindow
argument_list|,
name|KD_WINDOWPROPERTY_DESKTOP_OFFSET_NV
argument_list|,
name|windowPos
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not set native window position"
argument_list|)
expr_stmt|;
comment|//return;
block|}
else|else
block|{
name|needToDeleteContext
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|//need to recreate context
if|if
condition|(
name|needToDeleteContext
condition|)
block|{
operator|delete
name|m_platformGlContext
expr_stmt|;
name|QList
argument_list|<
name|QPlatformScreen
modifier|*
argument_list|>
name|screens
init|=
name|QApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|screens
argument_list|()
decl_stmt|;
name|QOpenKODEScreen
modifier|*
name|screen
init|=
name|qobject_cast
argument_list|<
name|QOpenKODEScreen
operator|*
argument_list|>
argument_list|(
name|screens
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|EGLSurface
name|surface
init|=
name|eglCreateWindowSurface
argument_list|(
name|screen
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|m_eglConfig
argument_list|,
name|m_eglWindow
argument_list|,
name|m_eglWindowAttrs
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|m_platformGlContext
operator|=
operator|new
name|QEGLPlatformContext
argument_list|(
name|screen
operator|->
name|eglDisplay
argument_list|()
argument_list|,
name|m_eglConfig
argument_list|,
name|m_eglContextAttrs
operator|.
name|data
argument_list|()
argument_list|,
name|surface
argument_list|,
name|m_eglApi
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QOpenKODEWindow
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_kdWindow
condition|)
return|return;
name|KDboolean
name|visibillity
argument_list|(
name|visible
argument_list|)
decl_stmt|;
if|if
condition|(
name|kdSetWindowPropertybv
argument_list|(
name|m_kdWindow
argument_list|,
name|KD_WINDOWPROPERTY_VISIBILITY
argument_list|,
operator|&
name|visibillity
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not set visibillity property"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|winId
name|WId
name|QOpenKODEWindow
operator|::
name|winId
parameter_list|()
specifier|const
block|{
specifier|static
name|int
name|i
init|=
literal|0
decl_stmt|;
return|return
name|i
operator|++
return|;
block|}
end_function
begin_function
DECL|function|glContext
name|QPlatformOpenGLContext
modifier|*
name|QOpenKODEWindow
operator|::
name|glContext
parameter_list|()
specifier|const
block|{
return|return
name|m_platformGlContext
return|;
block|}
end_function
begin_function
DECL|function|raise
name|void
name|QOpenKODEWindow
operator|::
name|raise
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_kdWindow
condition|)
return|return;
name|KDboolean
name|focus
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|kdSetWindowPropertybv
argument_list|(
name|m_kdWindow
argument_list|,
name|KD_WINDOWPROPERTY_FOCUS
argument_list|,
operator|&
name|focus
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not set focus"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lower
name|void
name|QOpenKODEWindow
operator|::
name|lower
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_kdWindow
condition|)
return|return;
name|KDboolean
name|focus
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|kdSetWindowPropertybv
argument_list|(
name|m_kdWindow
argument_list|,
name|KD_WINDOWPROPERTY_FOCUS
argument_list|,
operator|&
name|focus
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not set focus"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processMouseEvents
name|void
name|QOpenKODEWindow
operator|::
name|processMouseEvents
parameter_list|(
specifier|const
name|KDEvent
modifier|*
name|event
parameter_list|)
block|{
name|int
name|x
init|=
name|event
operator|->
name|data
operator|.
name|inputpointer
operator|.
name|x
decl_stmt|;
name|int
name|y
init|=
name|event
operator|->
name|data
operator|.
name|inputpointer
operator|.
name|y
decl_stmt|;
name|Qt
operator|::
name|MouseButtons
name|buttons
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|data
operator|.
name|inputpointer
operator|.
name|select
condition|)
block|{
case|case
literal|1
case|:
name|buttons
operator|=
name|Qt
operator|::
name|LeftButton
expr_stmt|;
break|break;
default|default:
name|buttons
operator|=
name|Qt
operator|::
name|NoButton
expr_stmt|;
block|}
name|QPoint
name|pos
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|QWindowSystemInterface
operator|::
name|handleMouseEvent
argument_list|(
literal|0
argument_list|,
name|event
operator|->
name|timestamp
argument_list|,
name|pos
argument_list|,
name|pos
argument_list|,
name|buttons
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processKeyEvents
name|void
name|QOpenKODEWindow
operator|::
name|processKeyEvents
parameter_list|(
specifier|const
name|KDEvent
modifier|*
name|event
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|KD_ATX_keyboard
comment|//KD_KEY_PRESS_ATX 1
name|QEvent
operator|::
name|Type
name|keyPressed
init|=
name|QEvent
operator|::
name|KeyRelease
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|data
operator|.
name|keyboardInputKey
operator|.
name|flags
condition|)
name|keyPressed
operator|=
name|QEvent
operator|::
name|KeyPress
expr_stmt|;
comment|//KD_KEY_LOCATION_LEFT_ATX // dont care for now
comment|//KD_KEY_LOCATION_RIGHT_ATX
comment|//KD_KEY_LOCATION_NUMPAD_ATX
name|Qt
operator|::
name|KeyboardModifiers
name|mod
init|=
name|Qt
operator|::
name|NoModifier
decl_stmt|;
name|int
name|openkodeMods
init|=
name|event
operator|->
name|data
operator|.
name|keyboardInputKey
operator|.
name|flags
decl_stmt|;
if|if
condition|(
name|openkodeMods
operator|&
name|KD_KEY_MODIFIER_SHIFT_ATX
condition|)
name|mod
operator||=
name|Qt
operator|::
name|ShiftModifier
expr_stmt|;
if|if
condition|(
name|openkodeMods
operator|&
name|KD_KEY_MODIFIER_CTRL_ATX
condition|)
name|mod
operator||=
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
if|if
condition|(
name|openkodeMods
operator|&
name|KD_KEY_MODIFIER_ALT_ATX
condition|)
name|mod
operator||=
name|Qt
operator|::
name|AltModifier
expr_stmt|;
if|if
condition|(
name|openkodeMods
operator|&
name|KD_KEY_MODIFIER_META_ATX
condition|)
name|mod
operator||=
name|Qt
operator|::
name|MetaModifier
expr_stmt|;
name|Qt
operator|::
name|Key
name|qtKey
decl_stmt|;
name|QChar
name|keyText
decl_stmt|;
name|int
name|key
init|=
name|event
operator|->
name|data
operator|.
name|keyboardInputKey
operator|.
name|keycode
decl_stmt|;
if|if
condition|(
name|key
operator|>=
literal|0x20
operator|&&
name|key
operator|<=
literal|0x0ff
condition|)
block|{
comment|// 8 bit printable Latin1
name|qtKey
operator|=
name|Qt
operator|::
name|Key
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|keyText
operator|=
name|QChar
argument_list|(
name|event
operator|->
name|data
operator|.
name|keyboardInputKeyChar
operator|.
name|character
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|mod
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
condition|)
name|keyText
operator|=
name|keyText
operator|.
name|toLower
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qtKey
operator|=
name|keyTranslator
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|QWindowSystemInterface
operator|::
name|handleKeyEvent
argument_list|(
literal|0
argument_list|,
name|event
operator|->
name|timestamp
argument_list|,
name|keyPressed
argument_list|,
name|qtKey
argument_list|,
name|mod
argument_list|,
name|keyText
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
