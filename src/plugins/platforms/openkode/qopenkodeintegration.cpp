begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qopenkodeintegration.h"
end_include
begin_include
include|#
directive|include
file|"qopenkodewindow.h"
end_include
begin_include
include|#
directive|include
file|"qopenkodeeventloopintegration.h"
end_include
begin_include
include|#
directive|include
file|<QtOpenGL/qplatformpixmap_gl_p.h>
end_include
begin_include
include|#
directive|include
file|<QtOpenGL/private/qwindowsurface_gl_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qpixmap_raster_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qthread.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfile.h>
end_include
begin_include
include|#
directive|include
file|"qgenericunixfontdatabase.h"
end_include
begin_include
include|#
directive|include
file|<KD/kd.h>
end_include
begin_include
include|#
directive|include
file|<KD/NV_display.h>
end_include
begin_include
include|#
directive|include
file|<KD/NV_initialize.h>
end_include
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_include
include|#
directive|include
file|"GLES2/gl2ext.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QOpenKODEScreen
name|QOpenKODEScreen
operator|::
name|QOpenKODEScreen
parameter_list|(
name|KDDisplayNV
modifier|*
name|kdDisplay
parameter_list|,
name|KDDesktopNV
modifier|*
name|kdDesktop
parameter_list|)
member_init_list|:
name|mIsFullScreen
argument_list|(
literal|false
argument_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"QOpenKODEScreen::QOpenKODEIntegrationScreen()"
expr_stmt|;
name|KDboolean
name|enabled
init|=
name|KD_TRUE
decl_stmt|;
name|kdSetDisplayPropertybvNV
argument_list|(
name|kdDisplay
argument_list|,
name|KD_DISPLAYPROPERTY_ENABLED_NV
argument_list|,
operator|&
name|enabled
argument_list|)
expr_stmt|;
name|KDboolean
name|power
init|=
name|KD_DISPLAY_POWER_ON
decl_stmt|;
name|kdSetDisplayPropertyivNV
argument_list|(
name|kdDisplay
argument_list|,
name|KD_DISPLAYPROPERTY_POWER_NV
argument_list|,
operator|&
name|power
argument_list|)
expr_stmt|;
name|kdSetDisplayPropertycvNV
argument_list|(
name|kdDisplay
argument_list|,
name|KD_DISPLAYPROPERTY_DESKTOP_NAME_NV
argument_list|,
name|KD_DEFAULT_DESKTOP_NV
argument_list|)
expr_stmt|;
name|KDDisplayModeNV
name|mode
decl_stmt|;
if|if
condition|(
name|kdGetDisplayModeNV
argument_list|(
name|kdDisplay
argument_list|,
operator|&
name|mode
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not get display mode"
argument_list|)
expr_stmt|;
return|return;
block|}
name|qDebug
argument_list|()
operator|<<
literal|" - display mode "
operator|<<
name|mode
operator|.
name|width
operator|<<
literal|"x"
operator|<<
name|mode
operator|.
name|height
operator|<<
literal|" refresh "
operator|<<
name|mode
operator|.
name|refresh
expr_stmt|;
name|KDint
name|desktopSize
index|[]
init|=
block|{
name|mode
operator|.
name|width
block|,
name|mode
operator|.
name|height
block|}
decl_stmt|;
if|if
condition|(
name|kdSetDesktopPropertyivNV
argument_list|(
name|kdDesktop
argument_list|,
name|KD_DESKTOPPROPERTY_SIZE_NV
argument_list|,
name|desktopSize
argument_list|)
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not set desktop size"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Once we've set up the desktop and display we don't need them anymore
name|kdReleaseDisplayNV
argument_list|(
name|kdDisplay
argument_list|)
expr_stmt|;
name|kdReleaseDesktopNV
argument_list|(
name|kdDesktop
argument_list|)
expr_stmt|;
name|mEglDisplay
operator|=
name|eglGetDisplay
argument_list|(
name|EGL_DEFAULT_DISPLAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|mEglDisplay
operator|==
name|EGL_NO_DISPLAY
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"EGL failed to obtain display"
argument_list|)
expr_stmt|;
block|}
comment|/* Initialize EGL display */
name|EGLBoolean
name|rvbool
init|=
name|eglInitialize
argument_list|(
name|mEglDisplay
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rvbool
condition|)
block|{
name|qErrnoWarning
argument_list|(
literal|"EGL failed to initialize display"
argument_list|)
expr_stmt|;
block|}
comment|//    cursor = new QOpenKODECursor(this);
name|mGeometry
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|mode
operator|.
name|width
argument_list|,
name|mode
operator|.
name|height
argument_list|)
expr_stmt|;
name|mDepth
operator|=
literal|24
expr_stmt|;
name|mFormat
operator|=
name|QImage
operator|::
name|Format_RGB32
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QOpenKODEIntegration
name|QOpenKODEIntegration
operator|::
name|QOpenKODEIntegration
parameter_list|()
member_init_list|:
name|mEventLoopIntegration
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mFontDb
argument_list|(
operator|new
name|QGenericUnixFontDatabase
argument_list|()
argument_list|)
member_init_list|,
name|mMainGlContext
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|kdInitializeNV
argument_list|()
operator|==
name|KD_ENOTINITIALIZED
condition|)
block|{
name|qFatal
argument_list|(
literal|"Did not manage to initialize openkode"
argument_list|)
expr_stmt|;
block|}
name|KDDisplaySystemNV
modifier|*
name|kdDisplaySystem
init|=
name|kdCreateDisplaySystemSnapshotNV
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|KDint32
name|displayCount
init|=
literal|0
decl_stmt|;
name|kdGetDisplaySystemPropertyivNV
argument_list|(
name|kdDisplaySystem
argument_list|,
name|KD_DISPLAYPROPERTY_COUNT_NV
argument_list|,
literal|0
argument_list|,
operator|&
name|displayCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|displayCount
condition|;
name|i
operator|++
control|)
block|{
name|KDchar
modifier|*
name|displayName
init|=
literal|0
decl_stmt|;
name|KDsize
name|displayNameLength
init|=
literal|0
decl_stmt|;
name|kdGetDisplaySystemPropertycvNV
argument_list|(
name|kdDisplaySystem
argument_list|,
name|KD_DISPLAYPROPERTY_NAME_NV
argument_list|,
name|i
argument_list|,
literal|0
argument_list|,
operator|&
name|displayNameLength
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|displayNameLength
condition|)
continue|continue;
name|displayName
operator|=
operator|new
name|KDchar
index|[
name|displayNameLength
index|]
expr_stmt|;
name|kdGetDisplaySystemPropertycvNV
argument_list|(
name|kdDisplaySystem
argument_list|,
name|KD_DISPLAYPROPERTY_NAME_NV
argument_list|,
name|i
argument_list|,
name|displayName
argument_list|,
operator|&
name|displayNameLength
argument_list|)
expr_stmt|;
name|KDDisplayNV
modifier|*
name|display
init|=
name|kdGetDisplayNV
argument_list|(
name|displayName
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|display
operator|||
name|display
operator|==
operator|(
name|void
operator|*
operator|)
operator|-
literal|1
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not obtain KDDisplayNV pointer"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|displayNameLength
condition|)
operator|delete
index|[]
name|displayName
expr_stmt|;
name|KDchar
modifier|*
name|desktopName
init|=
literal|0
decl_stmt|;
name|KDsize
name|desktopNameLength
init|=
literal|0
decl_stmt|;
name|bool
name|openkodeImpDoesNotFail
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|openkodeImpDoesNotFail
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"printing desktopname"
expr_stmt|;
name|kdGetDisplayPropertycvNV
argument_list|(
name|display
argument_list|,
name|KD_DISPLAYPROPERTY_DESKTOP_NAME_NV
argument_list|,
name|desktopName
argument_list|,
operator|&
name|desktopNameLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|desktopNameLength
condition|)
block|{
name|desktopName
operator|=
operator|new
name|KDchar
index|[
name|desktopNameLength
index|]
expr_stmt|;
name|kdGetDisplayPropertycvNV
argument_list|(
name|display
argument_list|,
name|KD_DISPLAYPROPERTY_DESKTOP_NAME_NV
argument_list|,
name|desktopName
argument_list|,
operator|&
name|desktopNameLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|desktopName
operator|=
name|KD_DEFAULT_DESKTOP_NV
expr_stmt|;
block|}
block|}
else|else
block|{
name|desktopName
operator|=
name|KD_DEFAULT_DESKTOP_NV
expr_stmt|;
block|}
name|KDDesktopNV
modifier|*
name|desktop
init|=
name|kdGetDesktopNV
argument_list|(
name|desktopName
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|desktop
operator|||
name|desktop
operator|==
operator|(
name|void
operator|*
operator|)
operator|-
literal|1
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|kdGetError
argument_list|()
argument_list|,
literal|"Could not obtain KDDesktopNV pointer"
argument_list|)
expr_stmt|;
name|kdReleaseDisplayNV
argument_list|(
name|display
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|desktopNameLength
condition|)
operator|delete
name|desktopName
expr_stmt|;
name|QOpenKODEScreen
modifier|*
name|screen
init|=
operator|new
name|QOpenKODEScreen
argument_list|(
name|display
argument_list|,
name|desktop
argument_list|)
decl_stmt|;
name|mScreens
operator|.
name|append
argument_list|(
name|screen
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QOpenKODEIntegration
name|QOpenKODEIntegration
operator|::
name|~
name|QOpenKODEIntegration
parameter_list|()
block|{
operator|delete
name|mEventLoopIntegration
expr_stmt|;
operator|delete
name|mFontDb
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|hasCapability
name|bool
name|QOpenKODEIntegration
operator|::
name|hasCapability
parameter_list|(
name|QPlatformIntegration
operator|::
name|Capability
name|cap
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|cap
condition|)
block|{
case|case
name|ThreadedPixmaps
case|:
return|return
literal|true
return|;
case|case
name|OpenGL
case|:
return|return
literal|true
return|;
default|default:
return|return
name|QPlatformIntegration
operator|::
name|hasCapability
argument_list|(
name|cap
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|createPlatformPixmap
name|QPlatformPixmap
modifier|*
name|QOpenKODEIntegration
operator|::
name|createPlatformPixmap
parameter_list|(
name|QPlatformPixmap
operator|::
name|PixelType
name|type
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QGLPlatformPixmap
argument_list|(
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createPlatformWindow
name|QPlatformWindow
modifier|*
name|QOpenKODEIntegration
operator|::
name|createPlatformWindow
parameter_list|(
name|QWidget
modifier|*
name|tlw
parameter_list|,
name|WId
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|QOpenKODEWindow
argument_list|(
name|tlw
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createWindowSurface
name|QWindowSurface
modifier|*
name|QOpenKODEIntegration
operator|::
name|createWindowSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|WId
parameter_list|)
specifier|const
block|{
name|QWindowSurface
modifier|*
name|returnSurface
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|widget
operator|->
name|platformWindowFormat
argument_list|()
operator|.
name|windowApi
argument_list|()
condition|)
block|{
case|case
name|QPlatformWindowFormat
operator|::
name|Raster
case|:
case|case
name|QPlatformWindowFormat
operator|::
name|OpenGL
case|:
name|returnSurface
operator|=
operator|new
name|QGLWindowSurface
argument_list|(
name|widget
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPlatformWindowFormat
operator|::
name|OpenVG
case|:
comment|//        returnSurface = new QVGWindowSurface(widget);
comment|//        break;
default|default:
name|returnSurface
operator|=
operator|new
name|QGLWindowSurface
argument_list|(
name|widget
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|returnSurface
return|;
block|}
end_function
begin_function
DECL|function|createEventLoopIntegration
name|QPlatformEventLoopIntegration
modifier|*
name|QOpenKODEIntegration
operator|::
name|createEventLoopIntegration
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|mEventLoopIntegration
condition|)
block|{
name|QOpenKODEIntegration
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QOpenKODEIntegration
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|mEventLoopIntegration
operator|=
operator|new
name|QOpenKODEEventLoopIntegration
expr_stmt|;
block|}
return|return
name|mEventLoopIntegration
return|;
block|}
end_function
begin_function
DECL|function|fontDatabase
name|QPlatformFontDatabase
modifier|*
name|QOpenKODEIntegration
operator|::
name|fontDatabase
parameter_list|()
specifier|const
block|{
return|return
name|mFontDb
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
