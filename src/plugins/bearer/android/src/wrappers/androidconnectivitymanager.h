begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|ANDROIDCONNECTIVITYMANAGER_H
end_ifndef
begin_define
DECL|macro|ANDROIDCONNECTIVITYMANAGER_H
define|#
directive|define
name|ANDROIDCONNECTIVITYMANAGER_H
end_define
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qjni_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|AndroidTrafficStats
block|{
name|public
label|:
specifier|static
name|qint64
name|getMobileTxBytes
parameter_list|()
function_decl|;
specifier|static
name|qint64
name|getMobileRxBytes
parameter_list|()
function_decl|;
specifier|static
name|qint64
name|getTotalTxBytes
parameter_list|()
function_decl|;
specifier|static
name|qint64
name|getTotalRxBytes
parameter_list|()
function_decl|;
specifier|static
name|bool
name|isTrafficStatsSupported
parameter_list|()
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|AndroidNetworkInfo
block|{
name|public
label|:
comment|// Needs to be in sync with the values from the android api.
enum|enum
name|NetworkState
block|{
name|UnknownState
block|,
name|Authenticating
block|,
name|Blocked
block|,
name|CaptivePortalCheck
block|,
name|Connected
block|,
name|Connecting
block|,
name|Disconnected
block|,
name|Disconnecting
block|,
name|Failed
block|,
name|Idle
block|,
name|ObtainingIpAddr
block|,
name|Scanning
block|,
name|Suspended
block|,
name|VerifyingPoorLink
block|}
enum|;
enum|enum
name|NetworkType
block|{
name|Mobile
block|,
name|Wifi
block|,
name|MobileMms
block|,
name|MobileSupl
block|,
name|MobileDun
block|,
name|MobileHipri
block|,
name|Wimax
block|,
name|Bluetooth
block|,
name|Dummy
block|,
name|Ethernet
block|,
name|UnknownType
block|}
enum|;
enum|enum
name|NetworkSubType
block|{
name|UnknownSubType
block|,
name|Gprs
block|,
name|Edge
block|,
name|Umts
block|,
name|Cdma
block|,
name|Evdo0
block|,
name|EvdoA
block|,
name|Cdma1xRTT
block|,
name|Hsdpa
block|,
name|Hsupa
block|,
name|Hspa
block|,
name|Iden
block|,
name|EvdoB
block|,
name|Lte
block|,
name|Ehrpd
block|,
name|Hspap
block|}
enum|;
specifier|inline
name|AndroidNetworkInfo
argument_list|(
specifier|const
name|QJNIObjectPrivate
operator|&
name|obj
argument_list|)
operator|:
name|m_networkInfo
argument_list|(
argument|obj
argument_list|)
block|{ }
name|NetworkState
name|getDetailedState
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|getExtraInfo
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|getReason
argument_list|()
specifier|const
expr_stmt|;
name|NetworkState
name|getState
argument_list|()
specifier|const
expr_stmt|;
name|NetworkSubType
name|getSubtype
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|getSubtypeName
argument_list|()
specifier|const
expr_stmt|;
name|NetworkType
name|getType
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|getTypeName
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isAvailable
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isConnected
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isConnectedOrConnecting
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isFailover
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isRoaming
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|QJNIObjectPrivate
name|m_networkInfo
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|AndroidConnectivityManager
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
specifier|static
name|AndroidConnectivityManager
operator|*
name|getInstance
argument_list|()
block|;
operator|~
name|AndroidConnectivityManager
argument_list|()
block|;
name|AndroidNetworkInfo
name|getActiveNetworkInfo
argument_list|()
specifier|const
block|;
name|QList
operator|<
name|AndroidNetworkInfo
operator|>
name|getAllNetworkInfo
argument_list|()
specifier|const
block|;
name|bool
name|getBackgroundDataSetting
argument_list|()
specifier|const
block|;
name|AndroidNetworkInfo
name|getNetworkInfo
argument_list|(
argument|int networkType
argument_list|)
specifier|const
block|;
name|int
name|getNetworkPreference
argument_list|()
specifier|const
block|;
name|bool
name|isActiveNetworkMetered
argument_list|()
specifier|const
block|;
specifier|static
name|bool
name|isNetworkTypeValid
argument_list|(
argument|int networkType
argument_list|)
block|;
name|bool
name|requestRouteToHost
argument_list|(
argument|int networkType
argument_list|,
argument|int hostAddress
argument_list|)
block|;
name|void
name|setNetworkPreference
argument_list|(
argument|int preference
argument_list|)
block|;
name|int
name|startUsingNetworkFeature
argument_list|(
argument|int networkType
argument_list|,
argument|const QString&feature
argument_list|)
block|;
name|int
name|stopUsingNetworkFeature
argument_list|(
argument|int networkType
argument_list|,
argument|const QString&feature
argument_list|)
block|;
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|m_connectivityManager
operator|.
name|isValid
argument_list|()
return|;
block|}
name|Q_SIGNAL
name|void
name|activeNetworkChanged
argument_list|()
block|;
name|private
operator|:
name|friend
expr|struct
name|AndroidConnectivityManagerInstance
block|;
name|AndroidConnectivityManager
argument_list|()
block|;
name|bool
name|registerNatives
argument_list|(
name|JNIEnv
operator|*
name|env
argument_list|)
block|;
name|QJNIObjectPrivate
name|m_connectivityManager
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ANDROIDCONNECTIVITYMANAGER_H
end_comment
end_unit
