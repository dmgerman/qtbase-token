begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QNETWORKSESSION_IMPL_H
end_ifndef
begin_define
DECL|macro|QNETWORKSESSION_IMPL_H
define|#
directive|define
name|QNETWORKSESSION_IMPL_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtNetwork/private/qnetworksession_p.h>
end_include
begin_include
include|#
directive|include
file|<QDateTime>
end_include
begin_include
include|#
directive|include
file|<e32base.h>
end_include
begin_include
include|#
directive|include
file|<commdbconnpref.h>
end_include
begin_include
include|#
directive|include
file|<es_sock.h>
end_include
begin_include
include|#
directive|include
file|<rconnmon.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
end_ifdef
begin_include
include|#
directive|include
file|<comms-infras/cs_mobility_apiext.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|ConnectionProgressNotifier
name|class
name|ConnectionProgressNotifier
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ConnectionStarter
name|class
name|ConnectionStarter
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|SymbianEngine
name|class
name|SymbianEngine
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|TOpenCUnSetdefaultifFunction
typedef|typedef
name|void
function_decl|(
modifier|*
name|TOpenCUnSetdefaultifFunction
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|QNetworkSessionPrivate
name|class
name|QNetworkSessionPrivateImpl
range|:
name|public
name|QNetworkSessionPrivate
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
decl_stmt|,
name|public
name|MMobilityProtocolResp
endif|#
directive|endif
block|{
name|Q_OBJECT
name|public
range|:
name|QNetworkSessionPrivateImpl
argument_list|(
name|SymbianEngine
operator|*
name|engine
argument_list|)
decl_stmt|;
operator|~
name|QNetworkSessionPrivateImpl
argument_list|()
expr_stmt|;
comment|//called by QNetworkSession constructor and ensures
comment|//that the state is immediately updated (w/o actually opening
comment|//a session). Also this function should take care of
comment|//notification hooks to discover future state changes.
name|void
name|syncStateWithInterface
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|QNetworkInterface
name|currentInterface
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
name|QVariant
name|sessionProperty
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
decl|const
decl_stmt|;
name|void
name|setSessionProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
name|void
name|setALREnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|void
name|open
parameter_list|()
function_decl|;
specifier|inline
name|void
name|close
parameter_list|()
block|{
name|close
argument_list|(
name|true
argument_list|)
expr_stmt|;
block|}
name|void
name|close
parameter_list|(
name|bool
name|allowSignals
parameter_list|)
function_decl|;
name|void
name|stop
parameter_list|()
function_decl|;
name|void
name|migrate
parameter_list|()
function_decl|;
name|void
name|accept
parameter_list|()
function_decl|;
name|void
name|ignore
parameter_list|()
function_decl|;
name|void
name|reject
parameter_list|()
function_decl|;
name|QString
name|errorString
argument_list|()
specifier|const
expr_stmt|;
comment|//must return translated string
name|QNetworkSession
operator|::
name|SessionError
name|error
argument_list|()
specifier|const
expr_stmt|;
name|quint64
name|bytesWritten
argument_list|()
specifier|const
expr_stmt|;
name|quint64
name|bytesReceived
argument_list|()
specifier|const
expr_stmt|;
name|quint64
name|activeTime
argument_list|()
specifier|const
expr_stmt|;
name|RConnection
modifier|*
name|nativeSession
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
name|public
label|:
comment|// From MMobilityProtocolResp
name|void
name|PreferredCarrierAvailable
parameter_list|(
name|TAccessPointInfo
name|aOldAPInfo
parameter_list|,
name|TAccessPointInfo
name|aNewAPInfo
parameter_list|,
name|TBool
name|aIsUpgrade
parameter_list|,
name|TBool
name|aIsSeamless
parameter_list|)
function_decl|;
name|void
name|NewCarrierActive
parameter_list|(
name|TAccessPointInfo
name|aNewAPInfo
parameter_list|,
name|TBool
name|aIsSeamless
parameter_list|)
function_decl|;
name|void
name|Error
parameter_list|(
name|TInt
name|aError
parameter_list|)
function_decl|;
endif|#
directive|endif
name|protected
label|:
comment|// From CActive
name|void
name|ConnectionStartComplete
parameter_list|(
name|TInt
name|statusCode
parameter_list|)
function_decl|;
name|void
name|DoCancel
parameter_list|()
function_decl|;
name|private
name|Q_SLOTS
range|:
name|void
name|configurationStateChanged
argument_list|(
argument|quint32 accessPointId
argument_list|,
argument|quint32 connMonId
argument_list|,
argument|QNetworkSession::State newState
argument_list|)
decl_stmt|;
name|void
name|configurationRemoved
parameter_list|(
name|QNetworkConfigurationPrivatePointer
name|config
parameter_list|)
function_decl|;
name|void
name|configurationAdded
parameter_list|(
name|QNetworkConfigurationPrivatePointer
name|config
parameter_list|)
function_decl|;
name|private
label|:
name|TUint
name|iapClientCount
argument_list|(
name|TUint
name|aIAPId
argument_list|)
decl|const
decl_stmt|;
name|quint64
name|transferredData
argument_list|(
name|TUint
name|dataType
argument_list|)
decl|const
decl_stmt|;
name|bool
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|State
name|newState
argument_list|,
name|TUint
name|accessPointId
operator|=
literal|0
argument_list|)
decl_stmt|;
name|void
name|handleSymbianConnectionStatusChange
parameter_list|(
name|TInt
name|aConnectionStatus
parameter_list|,
name|TInt
name|aError
parameter_list|,
name|TUint
name|accessPointId
init|=
literal|0
parameter_list|)
function_decl|;
name|QNetworkConfiguration
name|bestConfigFromSNAP
argument_list|(
specifier|const
name|QNetworkConfiguration
operator|&
name|snapConfig
argument_list|)
decl|const
decl_stmt|;
name|QNetworkConfiguration
name|activeConfiguration
argument_list|(
name|TUint32
name|iapId
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|QNetworkInterface
name|interface
argument_list|(
name|TUint
name|iapId
argument_list|)
decl|const
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|SNAP_FUNCTIONALITY_AVAILABLE
argument_list|)
name|bool
name|easyWlanTrueIapId
argument_list|(
name|TUint32
operator|&
name|trueIapId
argument_list|)
decl|const
decl_stmt|;
endif|#
directive|endif
name|void
name|closeHandles
parameter_list|()
function_decl|;
name|private
label|:
comment|// data
name|SymbianEngine
modifier|*
name|engine
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|mutable
name|QNetworkInterface
name|activeInterface
decl_stmt|;
endif|#
directive|endif
name|QDateTime
name|startTime
decl_stmt|;
name|mutable
name|RSocketServ
modifier|&
name|iSocketServ
decl_stmt|;
comment|//not owned, shared from QtCore
name|mutable
name|RConnection
name|iConnection
decl_stmt|;
name|mutable
name|RConnectionMonitor
name|iConnectionMonitor
decl_stmt|;
name|ConnectionProgressNotifier
modifier|*
name|ipConnectionNotifier
decl_stmt|;
name|ConnectionStarter
modifier|*
name|ipConnectionStarter
decl_stmt|;
name|bool
name|iHandleStateNotificationsFromManager
decl_stmt|;
name|bool
name|iFirstSync
decl_stmt|;
name|bool
name|iStoppedByUser
decl_stmt|;
name|bool
name|iClosedByUser
decl_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
name|CActiveCommsMobilityApiExt
modifier|*
name|iMobility
decl_stmt|;
endif|#
directive|endif
name|QNetworkSession
operator|::
name|SessionError
name|iError
expr_stmt|;
name|TInt
name|iALREnabled
decl_stmt|;
name|TBool
name|iALRUpgradingConnection
decl_stmt|;
name|TBool
name|iConnectInBackground
decl_stmt|;
name|QList
operator|<
name|QString
operator|>
name|iKnownConfigsBeforeConnectionStart
expr_stmt|;
name|TUint32
name|iOldRoamingIap
decl_stmt|;
name|TUint32
name|iNewRoamingIap
decl_stmt|;
name|bool
name|isOpening
decl_stmt|;
name|friend
name|class
name|ConnectionProgressNotifier
decl_stmt|;
name|friend
name|class
name|ConnectionStarter
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|ConnectionProgressNotifier
range|:
name|public
name|CActive
block|{
name|public
operator|:
name|ConnectionProgressNotifier
argument_list|(
name|QNetworkSessionPrivateImpl
operator|&
name|owner
argument_list|,
name|RConnection
operator|&
name|connection
argument_list|)
block|;
operator|~
name|ConnectionProgressNotifier
argument_list|()
block|;
name|void
name|StartNotifications
argument_list|()
block|;
name|void
name|StopNotifications
argument_list|()
block|;
name|protected
operator|:
comment|// From CActive
name|void
name|RunL
argument_list|()
block|;
name|void
name|DoCancel
argument_list|()
block|;
name|private
operator|:
comment|// Data
name|QNetworkSessionPrivateImpl
operator|&
name|iOwner
block|;
name|RConnection
operator|&
name|iConnection
block|;
name|TNifProgressBuf
name|iProgress
block|;      }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ConnectionStarter
range|:
name|public
name|CActive
block|{
name|public
operator|:
name|ConnectionStarter
argument_list|(
name|QNetworkSessionPrivateImpl
operator|&
name|owner
argument_list|,
name|RConnection
operator|&
name|connection
argument_list|)
block|;
operator|~
name|ConnectionStarter
argument_list|()
block|;
name|void
name|Start
argument_list|()
block|;
name|void
name|Start
argument_list|(
name|TConnPref
operator|&
name|pref
argument_list|)
block|;
name|protected
operator|:
name|void
name|RunL
argument_list|()
block|;
name|TInt
name|RunError
argument_list|(
argument|TInt err
argument_list|)
block|;
name|void
name|DoCancel
argument_list|()
block|;
name|private
operator|:
comment|// Data
name|QNetworkSessionPrivateImpl
operator|&
name|iOwner
block|;
name|RConnection
operator|&
name|iConnection
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QNETWORKSESSION_IMPL_H
end_comment
end_unit
