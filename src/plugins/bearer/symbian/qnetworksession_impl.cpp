begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qnetworksession_impl.h"
end_include
begin_include
include|#
directive|include
file|"symbianengine.h"
end_include
begin_include
include|#
directive|include
file|<es_enum.h>
end_include
begin_include
include|#
directive|include
file|<es_sock.h>
end_include
begin_include
include|#
directive|include
file|<in_sock.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_symbian_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
end_ifdef
begin_include
include|#
directive|include
file|<cmmanager.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|OCC_FUNCTIONALITY_AVAILABLE
argument_list|)
operator|&&
name|defined
argument_list|(
name|SNAP_FUNCTIONALITY_AVAILABLE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<extendedconnpref.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QNetworkSessionPrivateImpl
name|QNetworkSessionPrivateImpl
operator|::
name|QNetworkSessionPrivateImpl
parameter_list|(
name|SymbianEngine
modifier|*
name|engine
parameter_list|)
member_init_list|:
name|engine
argument_list|(
name|engine
argument_list|)
member_init_list|,
name|iSocketServ
argument_list|(
name|qt_symbianGetSocketServer
argument_list|()
argument_list|)
member_init_list|,
name|ipConnectionNotifier
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ipConnectionStarter
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|iHandleStateNotificationsFromManager
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|iFirstSync
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|iStoppedByUser
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|iClosedByUser
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|iError
argument_list|(
name|QNetworkSession
operator|::
name|UnknownSessionError
argument_list|)
member_init_list|,
name|iALREnabled
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|iConnectInBackground
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isOpening
argument_list|(
literal|false
argument_list|)
block|{
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
name|iMobility
operator|=
name|NULL
expr_stmt|;
endif|#
directive|endif
name|TRAP_IGNORE
argument_list|(
name|iConnectionMonitor
operator|.
name|ConnectL
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|closeHandles
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|closeHandles
parameter_list|()
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
comment|// Cancel Connection Progress Notifications first.
comment|// Note: ConnectionNotifier must be destroyed before RConnection::Close()
comment|//       => deleting ipConnectionNotifier results RConnection::CancelProgressNotification()
operator|delete
name|ipConnectionNotifier
expr_stmt|;
name|ipConnectionNotifier
operator|=
name|NULL
expr_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
comment|// mobility monitor must be deleted before RConnection is closed
operator|delete
name|iMobility
expr_stmt|;
name|iMobility
operator|=
name|NULL
expr_stmt|;
endif|#
directive|endif
comment|// Cancel possible RConnection::Start() - may call RConnection::Close if Start was in progress
operator|delete
name|ipConnectionStarter
expr_stmt|;
name|ipConnectionStarter
operator|=
literal|0
expr_stmt|;
comment|//close any open connection (note Close twice is safe in case Cancel did it above)
name|iConnection
operator|.
name|Close
argument_list|()
expr_stmt|;
name|QSymbianSocketManager
operator|::
name|instance
argument_list|()
operator|.
name|setDefaultConnection
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iConnectionMonitor
operator|.
name|Close
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - handles closed"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_destructor
DECL|function|~QNetworkSessionPrivateImpl
name|QNetworkSessionPrivateImpl
operator|::
name|~
name|QNetworkSessionPrivateImpl
parameter_list|()
block|{
name|isOpen
operator|=
literal|false
expr_stmt|;
name|isOpening
operator|=
literal|false
expr_stmt|;
name|closeHandles
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - destroyed"
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|configurationStateChanged
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|configurationStateChanged
parameter_list|(
name|quint32
name|accessPointId
parameter_list|,
name|quint32
name|connMonId
parameter_list|,
name|QNetworkSession
operator|::
name|State
name|newState
parameter_list|)
block|{
if|if
condition|(
name|iHandleStateNotificationsFromManager
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"configurationStateChanged from manager for IAP : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|accessPointId
argument_list|)
operator|<<
literal|"connMon ID : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|connMonId
argument_list|)
operator|<<
literal|" : to a state: "
operator|<<
name|newState
operator|<<
literal|"whereas my current state is: "
operator|<<
name|state
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|connMonId
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|this
operator|->
name|newState
argument_list|(
name|newState
argument_list|,
name|accessPointId
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|configurationRemoved
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|configurationRemoved
parameter_list|(
name|QNetworkConfigurationPrivatePointer
name|config
parameter_list|)
block|{
if|if
condition|(
operator|!
name|publicConfig
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|TUint32
name|publicNumericId
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|publicConfig
argument_list|)
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|toSymbianConfig
argument_list|(
name|config
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
operator|==
name|publicNumericId
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"configurationRemoved IAP: "
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|publicNumericId
argument_list|)
operator|<<
literal|" : going to State: Invalid"
expr_stmt|;
endif|#
directive|endif
name|this
operator|->
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Invalid
argument_list|,
name|publicNumericId
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|configurationAdded
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|configurationAdded
parameter_list|(
name|QNetworkConfigurationPrivatePointer
name|config
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// If session is based on service network, some other app may create new access points
comment|// to the SNAP --> synchronize session's state with that of interface's.
if|if
condition|(
operator|!
name|publicConfig
operator|.
name|isValid
argument_list|()
operator|||
name|publicConfig
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
condition|)
return|return;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"configurationAdded IAP: "
operator|<<
name|toSymbianConfig
argument_list|(
name|config
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|syncStateWithInterface
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// Function sets the state of the session to match the state
end_comment
begin_comment
comment|// of the underlying interface (the configuration this session is based on)
end_comment
begin_function
DECL|function|syncStateWithInterface
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|syncStateWithInterface
parameter_list|()
block|{
if|if
condition|(
operator|!
name|publicConfig
operator|.
name|isValid
argument_list|()
condition|)
return|return;
if|if
condition|(
name|iFirstSync
condition|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|engine
argument_list|,
name|SIGNAL
argument_list|(
name|configurationStateChanged
argument_list|(
name|quint32
argument_list|,
name|quint32
argument_list|,
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|configurationStateChanged
argument_list|(
name|quint32
argument_list|,
name|quint32
argument_list|,
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Listen to configuration removals, so that in case the configuration
comment|// this session is based on is removed, session knows to enter Invalid -state.
name|QObject
operator|::
name|connect
argument_list|(
name|engine
argument_list|,
name|SIGNAL
argument_list|(
name|configurationRemoved
argument_list|(
name|QNetworkConfigurationPrivatePointer
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|configurationRemoved
argument_list|(
name|QNetworkConfigurationPrivatePointer
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Connect to configuration additions, so that in case a configuration is added
comment|// in a SNAP this session is based on, the session knows to synch its state with its
comment|// interface.
name|QObject
operator|::
name|connect
argument_list|(
name|engine
argument_list|,
name|SIGNAL
argument_list|(
name|configurationAdded
argument_list|(
name|QNetworkConfigurationPrivatePointer
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|configurationAdded
argument_list|(
name|QNetworkConfigurationPrivatePointer
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Start listening IAP state changes from QNetworkConfigurationManagerPrivate
name|iHandleStateNotificationsFromManager
operator|=
literal|true
expr_stmt|;
comment|// Check what is the state of the configuration this session is based on
comment|// and set the session in appropriate state.
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"syncStateWithInterface() state of publicConfig is: "
operator|<<
name|publicConfig
operator|.
name|state
argument_list|()
expr_stmt|;
endif|#
directive|endif
switch|switch
condition|(
name|publicConfig
operator|.
name|state
argument_list|()
condition|)
block|{
case|case
name|QNetworkConfiguration
operator|::
name|Active
case|:
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|Discovered
case|:
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|Defined
case|:
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|NotAvailable
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|Undefined
case|:
default|default:
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Invalid
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
end_ifndef
begin_function
DECL|function|interface
name|QNetworkInterface
name|QNetworkSessionPrivateImpl
operator|::
name|interface
parameter_list|(
name|TUint
name|iapId
parameter_list|)
specifier|const
block|{
name|QString
name|interfaceName
decl_stmt|;
name|TSoInetInterfaceInfo
name|ifinfo
decl_stmt|;
name|TPckg
argument_list|<
name|TSoInetInterfaceInfo
argument_list|>
name|ifinfopkg
argument_list|(
name|ifinfo
argument_list|)
decl_stmt|;
name|TSoInetIfQuery
name|ifquery
decl_stmt|;
name|TPckg
argument_list|<
name|TSoInetIfQuery
argument_list|>
name|ifquerypkg
argument_list|(
name|ifquery
argument_list|)
decl_stmt|;
comment|// Open dummy socket for interface queries
name|RSocket
name|socket
decl_stmt|;
name|TInt
name|retVal
init|=
name|socket
operator|.
name|Open
argument_list|(
name|iSocketServ
argument_list|,
name|_L
argument_list|(
literal|"udp"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|!=
name|KErrNone
condition|)
block|{
return|return
name|QNetworkInterface
argument_list|()
return|;
block|}
comment|// Start enumerating interfaces
name|socket
operator|.
name|SetOpt
argument_list|(
name|KSoInetEnumInterfaces
argument_list|,
name|KSolInetIfCtrl
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|.
name|GetOpt
argument_list|(
name|KSoInetNextInterface
argument_list|,
name|KSolInetIfCtrl
argument_list|,
name|ifinfopkg
argument_list|)
operator|==
name|KErrNone
condition|)
block|{
name|ifquery
operator|.
name|iName
operator|=
name|ifinfo
operator|.
name|iName
expr_stmt|;
name|TInt
name|err
init|=
name|socket
operator|.
name|GetOpt
argument_list|(
name|KSoInetIfQueryByName
argument_list|,
name|KSolInetIfQuery
argument_list|,
name|ifquerypkg
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|KErrNone
operator|&&
name|ifquery
operator|.
name|iZone
index|[
literal|1
index|]
operator|==
name|iapId
condition|)
block|{
comment|// IAP ID is index 1 of iZone
if|if
condition|(
name|ifinfo
operator|.
name|iAddress
operator|.
name|Address
argument_list|()
operator|>
literal|0
condition|)
block|{
name|interfaceName
operator|=
name|QString
operator|::
name|fromUtf16
argument_list|(
name|ifinfo
operator|.
name|iName
operator|.
name|Ptr
argument_list|()
argument_list|,
name|ifinfo
operator|.
name|iName
operator|.
name|Length
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|socket
operator|.
name|Close
argument_list|()
expr_stmt|;
if|if
condition|(
name|interfaceName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|QNetworkInterface
argument_list|()
return|;
block|}
return|return
name|QNetworkInterface
operator|::
name|interfaceFromName
argument_list|(
name|interfaceName
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
end_ifndef
begin_function
DECL|function|currentInterface
name|QNetworkInterface
name|QNetworkSessionPrivateImpl
operator|::
name|currentInterface
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"currentInterface() requested, state: "
operator|<<
name|state
operator|<<
literal|"publicConfig validity: "
operator|<<
name|publicConfig
operator|.
name|isValid
argument_list|()
expr_stmt|;
if|if
condition|(
name|activeInterface
operator|.
name|isValid
argument_list|()
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"interface is: "
operator|<<
name|activeInterface
operator|.
name|humanReadableName
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|publicConfig
operator|.
name|isValid
argument_list|()
operator|||
name|state
operator|!=
name|QNetworkSession
operator|::
name|Connected
condition|)
block|{
return|return
name|QNetworkInterface
argument_list|()
return|;
block|}
return|return
name|activeInterface
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|sessionProperty
name|QVariant
name|QNetworkSessionPrivateImpl
operator|::
name|sessionProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|key
operator|==
literal|"ConnectInBackground"
condition|)
block|{
return|return
name|QVariant
argument_list|(
name|iConnectInBackground
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setSessionProperty
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|setSessionProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
comment|// Valid value means adding property, invalid means removing it.
if|if
condition|(
name|key
operator|==
literal|"ConnectInBackground"
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|iConnectInBackground
operator|=
name|value
operator|.
name|toBool
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iConnectInBackground
operator|=
name|EFalse
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|errorString
name|QString
name|QNetworkSessionPrivateImpl
operator|::
name|errorString
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|iError
condition|)
block|{
case|case
name|QNetworkSession
operator|::
name|UnknownSessionError
case|:
return|return
name|tr
argument_list|(
literal|"Unknown session error."
argument_list|)
return|;
case|case
name|QNetworkSession
operator|::
name|SessionAbortedError
case|:
return|return
name|tr
argument_list|(
literal|"The session was aborted by the user or system."
argument_list|)
return|;
case|case
name|QNetworkSession
operator|::
name|OperationNotSupportedError
case|:
return|return
name|tr
argument_list|(
literal|"The requested operation is not supported by the system."
argument_list|)
return|;
case|case
name|QNetworkSession
operator|::
name|InvalidConfigurationError
case|:
return|return
name|tr
argument_list|(
literal|"The specified configuration cannot be used."
argument_list|)
return|;
case|case
name|QNetworkSession
operator|::
name|RoamingError
case|:
return|return
name|tr
argument_list|(
literal|"Roaming was aborted or is not possible."
argument_list|)
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|error
name|QNetworkSession
operator|::
name|SessionError
name|QNetworkSessionPrivateImpl
operator|::
name|error
parameter_list|()
specifier|const
block|{
return|return
name|iError
return|;
block|}
end_function
begin_function
DECL|function|open
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|open
parameter_list|()
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"open() called, session state is: "
operator|<<
name|state
operator|<<
literal|" and isOpen is: "
operator|<<
name|isOpen
operator|<<
name|isOpening
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|isOpen
operator|||
name|isOpening
condition|)
return|return;
name|isOpening
operator|=
literal|true
expr_stmt|;
comment|// Stop handling IAP state change signals from QNetworkConfigurationManagerPrivate
comment|// => RConnection::ProgressNotification will be used for IAP/SNAP monitoring
name|iHandleStateNotificationsFromManager
operator|=
literal|false
expr_stmt|;
comment|// Configuration may have been invalidated after session creation by platform
comment|// (e.g. configuration has been deleted).
if|if
condition|(
operator|!
name|publicConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|iError
operator|=
name|QNetworkSession
operator|::
name|InvalidConfigurationError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|iError
argument_list|)
emit|;
return|return;
block|}
comment|// If opening a undefined configuration, session emits error and enters
comment|// NotAvailable -state. Note that we will try ones in 'defined' state to avoid excessive
comment|// need for WLAN scans (via updateConfigurations()), because user may have walked
comment|// into a WLAN range, but periodic background scan has not occurred yet -->
comment|// we don't want to force application to make frequent updateConfigurations() calls
comment|// to be able to try if e.g. home WLAN is available.
if|if
condition|(
name|publicConfig
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Undefined
condition|)
block|{
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|NotAvailable
argument_list|)
expr_stmt|;
name|iError
operator|=
name|QNetworkSession
operator|::
name|InvalidConfigurationError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|iError
argument_list|)
emit|;
return|return;
block|}
comment|// Clear possible previous states
name|iStoppedByUser
operator|=
literal|false
expr_stmt|;
name|iClosedByUser
operator|=
literal|false
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|iConnection
operator|.
name|SubSessionHandle
argument_list|()
argument_list|)
expr_stmt|;
name|TInt
name|error
init|=
name|iConnection
operator|.
name|Open
argument_list|(
name|iSocketServ
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|!=
name|KErrNone
condition|)
block|{
comment|// Could not open RConnection
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|iError
operator|=
name|QNetworkSession
operator|::
name|UnknownSessionError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|iError
argument_list|)
emit|;
name|syncStateWithInterface
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Use RConnection::ProgressNotification for IAP/SNAP monitoring
comment|// (<=> ConnectionProgressNotifier uses RConnection::ProgressNotification)
if|if
condition|(
operator|!
name|ipConnectionNotifier
condition|)
block|{
name|ipConnectionNotifier
operator|=
operator|new
name|ConnectionProgressNotifier
argument_list|(
operator|*
name|this
argument_list|,
name|iConnection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ipConnectionNotifier
condition|)
block|{
name|ipConnectionNotifier
operator|->
name|StartNotifications
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
condition|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|publicConfig
argument_list|)
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|OCC_FUNCTIONALITY_AVAILABLE
argument_list|)
operator|&&
name|defined
argument_list|(
name|SNAP_FUNCTIONALITY_AVAILABLE
argument_list|)
comment|// With One Click Connectivity (Symbian^3 onwards) it is possible
comment|// to connect silently, without any popups.
name|TConnPrefList
name|pref
decl_stmt|;
name|TExtendedConnPref
name|prefs
decl_stmt|;
name|prefs
operator|.
name|SetIapId
argument_list|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iConnectInBackground
condition|)
block|{
name|prefs
operator|.
name|SetNoteBehaviour
argument_list|(
name|TExtendedConnPref
operator|::
name|ENoteBehaviourConnSilent
argument_list|)
expr_stmt|;
block|}
name|pref
operator|.
name|AppendL
argument_list|(
operator|&
name|prefs
argument_list|)
expr_stmt|;
else|#
directive|else
name|TCommDbConnPref
name|pref
decl_stmt|;
name|pref
operator|.
name|SetDialogPreference
argument_list|(
name|ECommDbDialogPrefDoNotPrompt
argument_list|)
expr_stmt|;
name|pref
operator|.
name|SetIapId
argument_list|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|ipConnectionStarter
condition|)
block|{
name|ipConnectionStarter
operator|=
operator|new
name|ConnectionStarter
argument_list|(
operator|*
name|this
argument_list|,
name|iConnection
argument_list|)
expr_stmt|;
name|ipConnectionStarter
operator|->
name|Start
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
comment|// Avoid flip flop of states if the configuration is already
comment|// active. IsOpen/opened() will indicate when ready.
if|if
condition|(
name|state
operator|!=
name|QNetworkSession
operator|::
name|Connected
condition|)
block|{
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Connecting
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
condition|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|publicConfig
argument_list|)
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|OCC_FUNCTIONALITY_AVAILABLE
argument_list|)
operator|&&
name|defined
argument_list|(
name|SNAP_FUNCTIONALITY_AVAILABLE
argument_list|)
comment|// On Symbian^3 if service network is not reachable, it triggers a UI (aka EasyWLAN) where
comment|// user can create new IAPs. To detect this, we need to store the number of IAPs
comment|// there was before connection was started.
name|iKnownConfigsBeforeConnectionStart
operator|=
name|engine
operator|->
name|accessPointConfigurationIdentifiers
argument_list|()
expr_stmt|;
name|TConnPrefList
name|snapPref
decl_stmt|;
name|TExtendedConnPref
name|prefs
decl_stmt|;
name|prefs
operator|.
name|SetSnapId
argument_list|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iConnectInBackground
condition|)
block|{
name|prefs
operator|.
name|SetNoteBehaviour
argument_list|(
name|TExtendedConnPref
operator|::
name|ENoteBehaviourConnSilent
argument_list|)
expr_stmt|;
block|}
name|snapPref
operator|.
name|AppendL
argument_list|(
operator|&
name|prefs
argument_list|)
expr_stmt|;
else|#
directive|else
name|TConnSnapPref
name|snapPref
argument_list|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|ipConnectionStarter
condition|)
block|{
name|ipConnectionStarter
operator|=
operator|new
name|ConnectionStarter
argument_list|(
operator|*
name|this
argument_list|,
name|iConnection
argument_list|)
expr_stmt|;
name|ipConnectionStarter
operator|->
name|Start
argument_list|(
name|snapPref
argument_list|)
expr_stmt|;
block|}
comment|// Avoid flip flop of states if the configuration is already
comment|// active. IsOpen/opened() will indicate when ready.
if|if
condition|(
name|state
operator|!=
name|QNetworkSession
operator|::
name|Connected
condition|)
block|{
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Connecting
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
block|{
name|iKnownConfigsBeforeConnectionStart
operator|=
name|engine
operator|->
name|accessPointConfigurationIdentifiers
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ipConnectionStarter
condition|)
block|{
name|ipConnectionStarter
operator|=
operator|new
name|ConnectionStarter
argument_list|(
operator|*
name|this
argument_list|,
name|iConnection
argument_list|)
expr_stmt|;
name|ipConnectionStarter
operator|->
name|Start
argument_list|()
expr_stmt|;
block|}
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Connecting
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|!=
name|KErrNone
condition|)
block|{
name|isOpen
operator|=
literal|false
expr_stmt|;
name|isOpening
operator|=
literal|false
expr_stmt|;
name|iError
operator|=
name|QNetworkSession
operator|::
name|UnknownSessionError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|iError
argument_list|)
emit|;
name|closeHandles
argument_list|()
expr_stmt|;
name|syncStateWithInterface
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|iapClientCount
name|TUint
name|QNetworkSessionPrivateImpl
operator|::
name|iapClientCount
parameter_list|(
name|TUint
name|aIAPId
parameter_list|)
specifier|const
block|{
name|TRequestStatus
name|status
decl_stmt|;
name|TUint
name|connectionCount
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetConnectionCount
argument_list|(
name|connectionCount
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|Int
argument_list|()
operator|==
name|KErrNone
condition|)
block|{
for|for
control|(
name|TUint
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|connectionCount
condition|;
name|i
operator|++
control|)
block|{
name|TUint
name|connectionId
decl_stmt|;
name|TUint
name|subConnectionCount
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetConnectionInfo
argument_list|(
name|i
argument_list|,
name|connectionId
argument_list|,
name|subConnectionCount
argument_list|)
expr_stmt|;
name|TUint
name|apId
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetUintAttribute
argument_list|(
name|connectionId
argument_list|,
name|subConnectionCount
argument_list|,
name|KIAPId
argument_list|,
name|apId
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|apId
operator|==
name|aIAPId
condition|)
block|{
name|TConnMonClientEnumBuf
name|buf
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetPckgAttribute
argument_list|(
name|connectionId
argument_list|,
literal|0
argument_list|,
name|KClientInfo
argument_list|,
name|buf
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|Int
argument_list|()
operator|==
name|KErrNone
condition|)
block|{
return|return
name|buf
argument_list|()
operator|.
name|iCount
return|;
block|}
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|close
parameter_list|(
name|bool
name|allowSignals
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"close() called, session state is: "
operator|<<
name|state
operator|<<
literal|" and isOpen is : "
operator|<<
name|isOpen
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isOpen
operator|&&
name|state
operator|!=
name|QNetworkSession
operator|::
name|Connecting
condition|)
block|{
return|return;
block|}
comment|// Mark this session as closed-by-user so that we are able to report
comment|// distinguish between stop() and close() state transitions
comment|// when reporting.
name|iClosedByUser
operator|=
literal|true
expr_stmt|;
name|isOpen
operator|=
literal|false
expr_stmt|;
name|isOpening
operator|=
literal|false
expr_stmt|;
name|serviceConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
name|closeHandles
argument_list|()
expr_stmt|;
comment|// Start handling IAP state change signals from QNetworkConfigurationManagerPrivate
name|iHandleStateNotificationsFromManager
operator|=
literal|true
expr_stmt|;
comment|// If UserChoice, go down immediately. If some other configuration,
comment|// go down immediately if there is no reports expected from the platform;
comment|// in practice Connection Monitor is aware of connections only after
comment|// KFinishedSelection event, and hence reports only after that event, but
comment|// that does not seem to be trusted on all Symbian versions --> safest
comment|// to go down.
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
operator|||
name|state
operator|==
name|QNetworkSession
operator|::
name|Connecting
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"going disconnected right away, since either UserChoice or Connecting"
expr_stmt|;
endif|#
directive|endif
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Closing
argument_list|)
expr_stmt|;
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowSignals
condition|)
block|{
emit|emit
name|closed
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|stop
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|stop
parameter_list|()
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"stop() called, session state is: "
operator|<<
name|state
operator|<<
literal|" and isOpen is : "
operator|<<
name|isOpen
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isOpen
operator|&&
name|publicConfig
operator|.
name|isValid
argument_list|()
operator|&&
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"since session is not open, using RConnectionMonitor to stop() the interface"
expr_stmt|;
endif|#
directive|endif
name|iStoppedByUser
operator|=
literal|true
expr_stmt|;
comment|// If the publicConfig is type of IAP, enumerate through connections at
comment|// connection monitor. If publicConfig is active in that list, stop it.
comment|// Otherwise there is nothing to stop. Note: because this QNetworkSession is not open,
comment|// activeConfig is not usable.
name|TUint
name|count
decl_stmt|;
name|TRequestStatus
name|status
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetConnectionCount
argument_list|(
name|count
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|Int
argument_list|()
operator|!=
name|KErrNone
condition|)
block|{
return|return;
block|}
name|TUint
name|numSubConnections
decl_stmt|;
comment|// Not used but needed by GetConnectionInfo i/f
name|TUint
name|connectionId
decl_stmt|;
for|for
control|(
name|TUint
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|count
condition|;
operator|++
name|i
control|)
block|{
comment|// Get (connection monitor's assigned) connection ID
name|TInt
name|ret
init|=
name|iConnectionMonitor
operator|.
name|GetConnectionInfo
argument_list|(
name|i
argument_list|,
name|connectionId
argument_list|,
name|numSubConnections
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
name|KErrNone
condition|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|publicConfig
argument_list|)
argument_list|)
decl_stmt|;
comment|// See if connection Id matches with our Id. If so, stop() it.
if|if
condition|(
name|symbianConfig
operator|->
name|connectionIdentifier
argument_list|()
operator|==
name|connectionId
condition|)
block|{
name|ret
operator|=
name|iConnectionMonitor
operator|.
name|SetBoolAttribute
argument_list|(
name|connectionId
argument_list|,
literal|0
argument_list|,
comment|// subConnectionId don't care
name|KConnectionStop
argument_list|,
name|ETrue
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Enter disconnected state right away since the session is not even open.
comment|// Symbian^3 connection monitor does not emit KLinkLayerClosed when
comment|// connection is stopped via connection monitor.
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isOpen
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"since session is open, using RConnection to stop() the interface"
expr_stmt|;
endif|#
directive|endif
comment|// Since we are open, use RConnection to stop the interface
name|isOpen
operator|=
literal|false
expr_stmt|;
name|isOpening
operator|=
literal|false
expr_stmt|;
name|iStoppedByUser
operator|=
literal|true
expr_stmt|;
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Closing
argument_list|)
expr_stmt|;
if|if
condition|(
name|ipConnectionNotifier
condition|)
block|{
name|ipConnectionNotifier
operator|->
name|StopNotifications
argument_list|()
expr_stmt|;
comment|// Start handling IAP state change signals from QNetworkConfigurationManagerPrivate
name|iHandleStateNotificationsFromManager
operator|=
literal|true
expr_stmt|;
block|}
name|iConnection
operator|.
name|Stop
argument_list|(
name|RConnection
operator|::
name|EStopAuthoritative
argument_list|)
expr_stmt|;
name|isOpen
operator|=
literal|true
expr_stmt|;
name|isOpening
operator|=
literal|false
expr_stmt|;
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
emit|emit
name|closed
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|migrate
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|migrate
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
if|if
condition|(
name|iMobility
condition|)
block|{
name|QSymbianSocketManager
operator|::
name|instance
argument_list|()
operator|.
name|setDefaultConnection
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Start migrating to new IAP
name|iMobility
operator|->
name|MigrateToPreferredCarrier
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|ignore
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|ignore
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
if|if
condition|(
name|iMobility
condition|)
block|{
name|iMobility
operator|->
name|IgnorePreferredCarrier
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|iALRUpgradingConnection
condition|)
block|{
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Connected
argument_list|,
name|iOldRoamingIap
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|accept
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|accept
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
if|if
condition|(
name|iMobility
condition|)
block|{
name|iMobility
operator|->
name|NewCarrierAccepted
argument_list|()
expr_stmt|;
name|QNetworkConfiguration
name|newActiveConfig
init|=
name|activeConfiguration
argument_list|(
name|iNewRoamingIap
argument_list|)
decl_stmt|;
name|QSymbianSocketManager
operator|::
name|instance
argument_list|()
operator|.
name|setDefaultConnection
argument_list|(
operator|&
name|iConnection
argument_list|)
expr_stmt|;
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Connected
argument_list|,
name|iNewRoamingIap
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|reject
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|reject
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
if|if
condition|(
name|iMobility
condition|)
block|{
name|iMobility
operator|->
name|NewCarrierRejected
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|iALRUpgradingConnection
condition|)
block|{
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QNetworkConfiguration
name|newActiveConfig
init|=
name|activeConfiguration
argument_list|(
name|iOldRoamingIap
argument_list|)
decl_stmt|;
name|QSymbianSocketManager
operator|::
name|instance
argument_list|()
operator|.
name|setDefaultConnection
argument_list|(
operator|&
name|iConnection
argument_list|)
expr_stmt|;
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Connected
argument_list|,
name|iOldRoamingIap
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
end_ifdef
begin_function
DECL|function|PreferredCarrierAvailable
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|PreferredCarrierAvailable
parameter_list|(
name|TAccessPointInfo
name|aOldAPInfo
parameter_list|,
name|TAccessPointInfo
name|aNewAPInfo
parameter_list|,
name|TBool
name|aIsUpgrade
parameter_list|,
name|TBool
name|aIsSeamless
parameter_list|)
block|{
name|iOldRoamingIap
operator|=
name|aOldAPInfo
operator|.
name|AccessPoint
argument_list|()
expr_stmt|;
name|iNewRoamingIap
operator|=
name|aNewAPInfo
operator|.
name|AccessPoint
argument_list|()
expr_stmt|;
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Roaming
argument_list|)
expr_stmt|;
if|if
condition|(
name|iALREnabled
operator|>
literal|0
condition|)
block|{
name|iALRUpgradingConnection
operator|=
name|aIsUpgrade
expr_stmt|;
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|configs
init|=
name|publicConfig
operator|.
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configs
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|configs
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
operator|==
name|aNewAPInfo
operator|.
name|AccessPoint
argument_list|()
condition|)
block|{
comment|// Any slot connected to the signal might throw an std::exception,
comment|// which must not propagate into Symbian code (this function is a callback
comment|// from platform). We could convert exception to a symbian Leave, but since the
comment|// prototype of this function bans this (no trailing 'L'), we just catch
comment|// and drop.
name|QT_TRY
block|{
emit|emit
name|preferredConfigurationChanged
argument_list|(
name|configs
index|[
name|i
index|]
argument_list|,
name|aIsSeamless
argument_list|)
emit|;
block|}
name|QT_CATCH
argument_list|(
argument|std::exception&
argument_list|)
block|{}
block|}
block|}
block|}
else|else
block|{
name|migrate
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|NewCarrierActive
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|NewCarrierActive
parameter_list|(
name|TAccessPointInfo
comment|/*aNewAPInfo*/
parameter_list|,
name|TBool
comment|/*aIsSeamless*/
parameter_list|)
block|{
if|if
condition|(
name|iALREnabled
operator|>
literal|0
condition|)
block|{
name|QT_TRY
block|{
emit|emit
name|newConfigurationActivated
argument_list|()
emit|;
block|}
name|QT_CATCH
argument_list|(
argument|std::exception&
argument_list|)
block|{}
block|}
else|else
block|{
name|accept
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|Error
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|Error
parameter_list|(
name|TInt
name|aError
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"roaming Error() occurred"
operator|<<
name|aError
operator|<<
literal|", isOpen is: "
operator|<<
name|isOpen
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|aError
operator|==
name|KErrCancel
condition|)
return|return;
comment|//avoid recursive deletion
if|if
condition|(
name|isOpen
condition|)
block|{
name|isOpen
operator|=
literal|false
expr_stmt|;
name|isOpening
operator|=
literal|false
expr_stmt|;
name|activeConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
name|serviceConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
name|iError
operator|=
name|QNetworkSession
operator|::
name|RoamingError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|iError
argument_list|)
emit|;
name|closeHandles
argument_list|()
expr_stmt|;
name|QT_TRY
block|{
name|syncStateWithInterface
argument_list|()
expr_stmt|;
comment|// In some cases IAP is still in Connected state when
comment|// syncStateWithInterface(); is called
comment|// => Following call makes sure that Session state
comment|//    changes immediately to Disconnected.
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
emit|emit
name|closed
argument_list|()
emit|;
block|}
name|QT_CATCH
argument_list|(
argument|std::exception&
argument_list|)
block|{}
block|}
elseif|else
if|if
condition|(
name|iStoppedByUser
condition|)
block|{
comment|// If the user of this session has called the stop() and
comment|// configuration is based on internet SNAP, this needs to be
comment|// done here because platform might roam.
name|QT_TRY
block|{
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|std::exception&
argument_list|)
block|{}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setALREnabled
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|setALREnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|iALREnabled
operator|++
expr_stmt|;
block|}
else|else
block|{
name|iALREnabled
operator|--
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|bestConfigFromSNAP
name|QNetworkConfiguration
name|QNetworkSessionPrivateImpl
operator|::
name|bestConfigFromSNAP
parameter_list|(
specifier|const
name|QNetworkConfiguration
modifier|&
name|snapConfig
parameter_list|)
specifier|const
block|{
name|QNetworkConfiguration
name|config
decl_stmt|;
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|subConfigurations
init|=
name|snapConfig
operator|.
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subConfigurations
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|subConfigurations
index|[
name|i
index|]
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|config
operator|=
name|subConfigurations
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
operator|!
name|config
operator|.
name|isValid
argument_list|()
operator|&&
name|subConfigurations
index|[
name|i
index|]
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
name|config
operator|=
name|subConfigurations
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|isValid
argument_list|()
operator|&&
name|subConfigurations
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|config
operator|=
name|subConfigurations
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
end_function
begin_function
DECL|function|bytesWritten
name|quint64
name|QNetworkSessionPrivateImpl
operator|::
name|bytesWritten
parameter_list|()
specifier|const
block|{
return|return
name|transferredData
argument_list|(
name|KUplinkData
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|bytesReceived
name|quint64
name|QNetworkSessionPrivateImpl
operator|::
name|bytesReceived
parameter_list|()
specifier|const
block|{
return|return
name|transferredData
argument_list|(
name|KDownlinkData
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|transferredData
name|quint64
name|QNetworkSessionPrivateImpl
operator|::
name|transferredData
parameter_list|(
name|TUint
name|dataType
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|publicConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|QNetworkConfiguration
name|config
decl_stmt|;
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
block|{
if|if
condition|(
name|serviceConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|config
operator|=
name|serviceConfig
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|activeConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|config
operator|=
name|activeConfig
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|config
operator|=
name|publicConfig
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|TUint
name|count
decl_stmt|;
name|TRequestStatus
name|status
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetConnectionCount
argument_list|(
name|count
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|Int
argument_list|()
operator|!=
name|KErrNone
condition|)
block|{
return|return
literal|0
return|;
block|}
name|TUint
name|transferredData
init|=
literal|0
decl_stmt|;
name|TUint
name|numSubConnections
decl_stmt|;
name|TUint
name|connectionId
decl_stmt|;
name|bool
name|configFound
decl_stmt|;
for|for
control|(
name|TUint
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|count
condition|;
name|i
operator|++
control|)
block|{
name|TInt
name|ret
init|=
name|iConnectionMonitor
operator|.
name|GetConnectionInfo
argument_list|(
name|i
argument_list|,
name|connectionId
argument_list|,
name|numSubConnections
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
name|KErrNone
condition|)
block|{
name|TUint
name|apId
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetUintAttribute
argument_list|(
name|connectionId
argument_list|,
literal|0
argument_list|,
name|KIAPId
argument_list|,
name|apId
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|Int
argument_list|()
operator|==
name|KErrNone
condition|)
block|{
name|configFound
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
condition|)
block|{
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|configs
init|=
name|config
operator|.
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configs
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|configs
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
operator|==
name|apId
condition|)
block|{
name|configFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
operator|==
name|apId
condition|)
name|configFound
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|configFound
condition|)
block|{
name|TUint
name|tData
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetUintAttribute
argument_list|(
name|connectionId
argument_list|,
literal|0
argument_list|,
name|dataType
argument_list|,
name|tData
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|Int
argument_list|()
operator|==
name|KErrNone
condition|)
block|{
name|transferredData
operator|+=
name|tData
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|transferredData
return|;
block|}
end_function
begin_function
DECL|function|activeTime
name|quint64
name|QNetworkSessionPrivateImpl
operator|::
name|activeTime
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isOpen
operator|||
name|startTime
operator|.
name|isNull
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|startTime
operator|.
name|secsTo
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|activeConfiguration
name|QNetworkConfiguration
name|QNetworkSessionPrivateImpl
operator|::
name|activeConfiguration
parameter_list|(
name|TUint32
name|iapId
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|iapId
operator|==
literal|0
condition|)
block|{
name|_LIT
argument_list|(
name|KSetting
argument_list|,
literal|"IAP\\Id"
argument_list|)
expr_stmt|;
name|iConnection
operator|.
name|GetIntSetting
argument_list|(
name|KSetting
argument_list|,
name|iapId
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
comment|// Check if this is an Easy WLAN configuration. On Symbian^3 RConnection may report
comment|// the used configuration as 'EasyWLAN' IAP ID if someone has just opened the configuration
comment|// from WLAN Scan dialog, _and_ that connection is still up. We need to find the
comment|// real matching configuration. Function alters the Easy WLAN ID to real IAP ID (only if
comment|// easy WLAN):
name|easyWlanTrueIapId
argument_list|(
name|iapId
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
condition|)
block|{
comment|// Try to search IAP from the used SNAP using IAP Id
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|children
init|=
name|publicConfig
operator|.
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|childConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childConfig
operator|->
name|numericIdentifier
argument_list|()
operator|==
name|iapId
condition|)
return|return
name|children
index|[
name|i
index|]
return|;
block|}
comment|// Given IAP Id was not found from the used SNAP
comment|// => Try to search matching IAP using mappingName
comment|//    mappingName contains:
comment|//      1. "Access point name" for "Packet data" Bearer
comment|//      2. "WLAN network name" (= SSID) for "Wireless LAN" Bearer
comment|//      3. "Dial-up number" for "Data call Bearer" or "High Speed (GSM)" Bearer
comment|//<=> Note: It's possible that in this case reported IAP is
comment|//              clone of the one of the IAPs of the used SNAP
comment|//              => If mappingName matches, clone has been found
name|QNetworkConfiguration
name|pt
init|=
name|QNetworkConfigurationManager
argument_list|()
operator|.
name|configurationFromIdentifier
argument_list|(
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|iapId
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|pt
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbianConfig
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|childConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childConfig
operator|->
name|configMappingName
argument_list|()
operator|==
name|symbianConfig
operator|->
name|configMappingName
argument_list|()
condition|)
block|{
return|return
name|children
index|[
name|i
index|]
return|;
block|}
block|}
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
comment|// On Symbian^3 (only, not earlier or Symbian^4) if the SNAP was not reachable, it
comment|// triggers user choice type of activity (EasyWLAN). As a result, a new IAP may be
comment|// created, and hence if was not found yet. Therefore update configurations and see if
comment|// there is something new.
comment|// 1. Update knowledge from the databases.
if|if
condition|(
name|thread
argument_list|()
operator|!=
name|engine
operator|->
name|thread
argument_list|()
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|engine
argument_list|,
literal|"requestUpdate"
argument_list|,
name|Qt
operator|::
name|BlockingQueuedConnection
argument_list|)
expr_stmt|;
else|else
name|engine
operator|->
name|requestUpdate
argument_list|()
expr_stmt|;
comment|// 2. Check if new configuration was created during connection creation
name|QList
argument_list|<
name|QString
argument_list|>
name|knownConfigs
init|=
name|engine
operator|->
name|accessPointConfigurationIdentifiers
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"opened configuration was not known beforehand, looking for new."
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|knownConfigs
operator|.
name|count
argument_list|()
operator|>
name|iKnownConfigsBeforeConnectionStart
operator|.
name|count
argument_list|()
condition|)
block|{
comment|// Configuration count increased => new configuration was created
comment|// => Search new, created configuration
name|QString
name|newIapId
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iKnownConfigsBeforeConnectionStart
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|knownConfigs
index|[
name|i
index|]
operator|!=
name|iKnownConfigsBeforeConnectionStart
index|[
name|i
index|]
condition|)
block|{
name|newIapId
operator|=
name|knownConfigs
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|newIapId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newIapId
operator|=
name|knownConfigs
index|[
name|knownConfigs
operator|.
name|count
argument_list|()
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|pt
operator|=
name|QNetworkConfigurationManager
argument_list|()
operator|.
name|configurationFromIdentifier
argument_list|(
name|newIapId
argument_list|)
expr_stmt|;
if|if
condition|(
name|pt
operator|.
name|isValid
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"new configuration was found, name, IAP id: "
operator|<<
name|pt
operator|.
name|name
argument_list|()
operator|<<
name|pt
operator|.
name|identifier
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
name|pt
return|;
block|}
block|}
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"configuration was not found, returning invalid."
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|// Given IAP Id was not found from known IAPs array
return|return
name|QNetworkConfiguration
argument_list|()
return|;
block|}
comment|// Matching IAP was not found from used SNAP
comment|// => IAP from another SNAP is returned
comment|//    (Note: Returned IAP matches to given IAP Id)
return|return
name|pt
return|;
block|}
endif|#
directive|endif
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
block|{
if|if
condition|(
name|engine
condition|)
block|{
name|QNetworkConfiguration
name|pt
init|=
name|QNetworkConfigurationManager
argument_list|()
operator|.
name|configurationFromIdentifier
argument_list|(
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|iapId
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Try to found User Selected IAP from known IAPs (accessPointConfigurations)
if|if
condition|(
name|pt
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|pt
return|;
block|}
else|else
block|{
comment|// Check if new (WLAN) IAP was created in IAP/SNAP dialog
comment|// 1. Sync internal configurations array to commsdb first
if|if
condition|(
name|thread
argument_list|()
operator|!=
name|engine
operator|->
name|thread
argument_list|()
condition|)
block|{
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|engine
argument_list|,
literal|"requestUpdate"
argument_list|,
name|Qt
operator|::
name|BlockingQueuedConnection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|engine
operator|->
name|requestUpdate
argument_list|()
expr_stmt|;
block|}
comment|// 2. Check if new configuration was created during connection creation
name|QStringList
name|knownConfigs
init|=
name|engine
operator|->
name|accessPointConfigurationIdentifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|knownConfigs
operator|.
name|count
argument_list|()
operator|>
name|iKnownConfigsBeforeConnectionStart
operator|.
name|count
argument_list|()
condition|)
block|{
comment|// Configuration count increased => new configuration was created
comment|// => Search new, created configuration
name|QString
name|newIapId
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iKnownConfigsBeforeConnectionStart
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|knownConfigs
index|[
name|i
index|]
operator|!=
name|iKnownConfigsBeforeConnectionStart
index|[
name|i
index|]
condition|)
block|{
name|newIapId
operator|=
name|knownConfigs
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|newIapId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newIapId
operator|=
name|knownConfigs
index|[
name|knownConfigs
operator|.
name|count
argument_list|()
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|pt
operator|=
name|QNetworkConfigurationManager
argument_list|()
operator|.
name|configurationFromIdentifier
argument_list|(
name|newIapId
argument_list|)
expr_stmt|;
if|if
condition|(
name|pt
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|pt
return|;
block|}
block|}
block|}
return|return
name|QNetworkConfiguration
argument_list|()
return|;
block|}
return|return
name|publicConfig
return|;
block|}
end_function
begin_function
DECL|function|ConnectionStartComplete
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|ConnectionStartComplete
parameter_list|(
name|TInt
name|statusCode
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"RConnection::Start completed with status code: "
operator|<<
name|statusCode
expr_stmt|;
endif|#
directive|endif
operator|delete
name|ipConnectionStarter
expr_stmt|;
name|ipConnectionStarter
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|statusCode
condition|)
block|{
case|case
name|KErrNone
case|:
comment|// Connection created successfully
block|{
name|TInt
name|error
init|=
name|KErrNone
decl_stmt|;
name|QNetworkConfiguration
name|newActiveConfig
init|=
name|activeConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newActiveConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// RConnection startup was successful but no configuration
comment|// was found. That indicates that user has chosen to create a
comment|// new WLAN configuration (from scan results), but that new
comment|// configuration does not have access to Internet (Internet
comment|// Connectivity Test, ICT, failed).
name|error
operator|=
name|KErrGeneral
expr_stmt|;
block|}
else|else
block|{
name|QSymbianSocketManager
operator|::
name|instance
argument_list|()
operator|.
name|setDefaultConnection
argument_list|(
operator|&
name|iConnection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|!=
name|KErrNone
condition|)
block|{
name|isOpen
operator|=
literal|false
expr_stmt|;
name|isOpening
operator|=
literal|false
expr_stmt|;
name|iError
operator|=
name|QNetworkSession
operator|::
name|UnknownSessionError
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|iError
argument_list|)
argument_list|)
expr_stmt|;
name|closeHandles
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|newActiveConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// No valid configuration, bail out.
comment|// Status updates from QNCM won't be received correctly
comment|// because there is no configuration to associate them with so transit here.
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Closing
argument_list|)
expr_stmt|;
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
name|QT_TRYCATCH_LEAVING
argument_list|(
name|syncStateWithInterface
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
condition|)
block|{
comment|// Activate ALR monitoring
name|iMobility
operator|=
name|CActiveCommsMobilityApiExt
operator|::
name|NewL
argument_list|(
name|iConnection
argument_list|,
operator|*
name|this
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|isOpen
operator|=
literal|true
expr_stmt|;
name|isOpening
operator|=
literal|false
expr_stmt|;
name|activeConfig
operator|=
name|newActiveConfig
expr_stmt|;
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|activeInterface
operator|=
name|interface
argument_list|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
block|{
name|serviceConfig
operator|=
name|QNetworkConfigurationManager
argument_list|()
operator|.
name|configurationFromIdentifier
argument_list|(
name|activeConfig
operator|.
name|identifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startTime
operator|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(
argument|{                     newState(QNetworkSession::Connected);                     emit quitPendingWaitsForOpened();                 }
argument_list|)
empty_stmt|;
block|}
break|break;
case|case
name|KErrNotFound
case|:
comment|// Connection failed
name|isOpen
operator|=
literal|false
expr_stmt|;
name|isOpening
operator|=
literal|false
expr_stmt|;
name|activeConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
name|serviceConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
name|iError
operator|=
name|QNetworkSession
operator|::
name|InvalidConfigurationError
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|iError
argument_list|)
argument_list|)
expr_stmt|;
name|closeHandles
argument_list|()
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(
name|syncStateWithInterface
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|KErrCancel
case|:
comment|// Connection attempt cancelled
case|case
name|KErrAlreadyExists
case|:
comment|// Connection already exists
default|default:
name|isOpen
operator|=
literal|false
expr_stmt|;
name|isOpening
operator|=
literal|false
expr_stmt|;
name|activeConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
name|serviceConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
if|if
condition|(
name|statusCode
operator|==
name|KErrCancel
condition|)
block|{
name|iError
operator|=
name|QNetworkSession
operator|::
name|SessionAbortedError
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|publicConfig
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Undefined
operator|||
name|publicConfig
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Defined
condition|)
block|{
name|iError
operator|=
name|QNetworkSession
operator|::
name|InvalidConfigurationError
expr_stmt|;
block|}
else|else
block|{
name|iError
operator|=
name|QNetworkSession
operator|::
name|UnknownSessionError
expr_stmt|;
block|}
name|QT_TRYCATCH_LEAVING
argument_list|(emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|iError
argument_list|)
argument_list|)
expr_stmt|;
name|closeHandles
argument_list|()
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(
name|syncStateWithInterface
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|// Enters newState if feasible according to current state.
end_comment
begin_comment
comment|// AccessPointId may be given as parameter. If it is zero, state-change is assumed to
end_comment
begin_comment
comment|// concern this session's configuration. If non-zero, the configuration is looked up
end_comment
begin_comment
comment|// and checked if it matches the configuration this session is based on.
end_comment
begin_function
DECL|function|newState
name|bool
name|QNetworkSessionPrivateImpl
operator|::
name|newState
parameter_list|(
name|QNetworkSession
operator|::
name|State
name|newState
parameter_list|,
name|TUint
name|accessPointId
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"NEW STATE, IAP ID : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|accessPointId
argument_list|)
operator|<<
literal|" , newState : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|newState
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Make sure that activeConfig is always updated when SNAP is signaled to be
comment|// connected.
if|if
condition|(
name|isOpen
operator|&&
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
operator|&&
name|newState
operator|==
name|QNetworkSession
operator|::
name|Connected
condition|)
block|{
name|activeConfig
operator|=
name|activeConfiguration
argument_list|(
name|accessPointId
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
argument_list|)
decl_stmt|;
name|activeInterface
operator|=
name|interface
argument_list|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
name|QSymbianSocketManager
operator|::
name|instance
argument_list|()
operator|.
name|setDefaultConnection
argument_list|(
operator|&
name|iConnection
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|// Make sure that same state is not signaled twice in a row.
if|if
condition|(
name|state
operator|==
name|newState
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Make sure that Connecting state does not overwrite Roaming state
if|if
condition|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Roaming
operator|&&
name|newState
operator|==
name|QNetworkSession
operator|::
name|Connecting
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Make sure that Connected state is not reported when Connection is
comment|// already Closing.
comment|// Note: Stopping connection results sometimes KLinkLayerOpen
comment|//       to be reported first (just before KLinkLayerClosed).
if|if
condition|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Closing
operator|&&
name|newState
operator|==
name|QNetworkSession
operator|::
name|Connected
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Make sure that some lagging 'closing' state-changes do not overwrite
comment|// if we are already disconnected or closed.
if|if
condition|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Disconnected
operator|&&
name|newState
operator|==
name|QNetworkSession
operator|::
name|Closing
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Make sure that some lagging 'connecting' state-changes do not overwrite
comment|// if we are already connected (may righfully still happen with roaming though).
if|if
condition|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Connected
operator|&&
name|newState
operator|==
name|QNetworkSession
operator|::
name|Connecting
condition|)
block|{
return|return
literal|false
return|;
block|}
name|bool
name|emitSessionClosed
init|=
literal|false
decl_stmt|;
comment|// If we abruptly go down and user hasn't closed the session, we've been aborted.
comment|// Note that session may be in 'closing' state and not in 'connected' state, because
comment|// depending on platform the platform may report KConfigDaemonStartingDeregistration
comment|// event before KLinkLayerClosed
if|if
condition|(
operator|(
name|isOpen
operator|&&
name|state
operator|==
name|QNetworkSession
operator|::
name|Connected
operator|&&
name|newState
operator|==
name|QNetworkSession
operator|::
name|Disconnected
operator|)
operator|||
operator|(
name|isOpen
operator|&&
operator|!
name|iClosedByUser
operator|&&
name|newState
operator|==
name|QNetworkSession
operator|::
name|Disconnected
operator|)
condition|)
block|{
comment|// Active& Connected state should change directly to Disconnected state
comment|// only when something forces connection to close (eg. when another
comment|// application or session stops connection or when network drops
comment|// unexpectedly).
name|isOpen
operator|=
literal|false
expr_stmt|;
name|isOpening
operator|=
literal|false
expr_stmt|;
name|activeConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
name|serviceConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
name|iError
operator|=
name|QNetworkSession
operator|::
name|SessionAbortedError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|iError
argument_list|)
emit|;
name|closeHandles
argument_list|()
expr_stmt|;
comment|// Start handling IAP state change signals from QNetworkConfigurationManagerPrivate
name|iHandleStateNotificationsFromManager
operator|=
literal|true
expr_stmt|;
name|emitSessionClosed
operator|=
literal|true
expr_stmt|;
comment|// Emit SessionClosed after state change has been reported
block|}
name|bool
name|retVal
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|accessPointId
operator|==
literal|0
condition|)
block|{
name|state
operator|=
name|newState
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"===> EMIT State changed A to: "
operator|<<
name|state
expr_stmt|;
endif|#
directive|endif
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
name|retVal
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
condition|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|publicConfig
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
operator|==
name|accessPointId
condition|)
block|{
name|state
operator|=
name|newState
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"===> EMIT State changed B to: "
operator|<<
name|state
expr_stmt|;
endif|#
directive|endif
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
name|retVal
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
operator|&&
name|isOpen
condition|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
operator|==
name|accessPointId
condition|)
block|{
name|state
operator|=
name|newState
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"===> EMIT State changed C to: "
operator|<<
name|state
expr_stmt|;
endif|#
directive|endif
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
name|retVal
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
condition|)
block|{
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|subConfigurations
init|=
name|publicConfig
operator|.
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subConfigurations
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|subConfigurations
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
operator|==
name|accessPointId
condition|)
block|{
if|if
condition|(
name|newState
operator|!=
name|QNetworkSession
operator|::
name|Disconnected
condition|)
block|{
name|state
operator|=
name|newState
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"===> EMIT State changed D  to: "
operator|<<
name|state
expr_stmt|;
endif|#
directive|endif
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
name|retVal
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|QNetworkConfiguration
name|config
init|=
name|bestConfigFromSNAP
argument_list|(
name|publicConfig
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|config
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Defined
operator|)
operator|||
operator|(
name|config
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
condition|)
block|{
name|activeConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
name|state
operator|=
name|newState
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"===> EMIT State changed E  to: "
operator|<<
name|state
expr_stmt|;
endif|#
directive|endif
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
name|retVal
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
comment|// Connection to used IAP was closed, but there is another
comment|// IAP that's active in used SNAP
comment|// => Change state back to Connected
name|state
operator|=
name|QNetworkSession
operator|::
name|Connected
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
name|retVal
operator|=
literal|true
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"===> EMIT State changed F  to: "
operator|<<
name|state
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
block|}
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
comment|// If the retVal is not true here, it means that the status update may apply to an IAP outside of
comment|// SNAP (session is based on SNAP but follows IAP outside of it), which may occur on Symbian^3 EasyWlan.
if|if
condition|(
name|retVal
operator|==
literal|false
operator|&&
name|activeConfig
operator|.
name|isValid
argument_list|()
operator|&&
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
operator|==
name|accessPointId
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"===> EMIT State changed G  to: "
operator|<<
name|state
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|newState
operator|==
name|QNetworkSession
operator|::
name|Disconnected
condition|)
block|{
name|activeConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
block|}
name|state
operator|=
name|newState
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
name|retVal
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
if|if
condition|(
name|emitSessionClosed
condition|)
block|{
emit|emit
name|closed
argument_list|()
emit|;
block|}
if|if
condition|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Disconnected
condition|)
block|{
comment|// Just in case clear activeConfiguration.
name|activeConfig
operator|=
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
end_function
begin_function
DECL|function|handleSymbianConnectionStatusChange
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|handleSymbianConnectionStatusChange
parameter_list|(
name|TInt
name|aConnectionStatus
parameter_list|,
name|TInt
name|aError
parameter_list|,
name|TUint
name|accessPointId
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|accessPointId
argument_list|)
operator|<<
literal|" , status : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|aConnectionStatus
argument_list|)
expr_stmt|;
endif|#
directive|endif
switch|switch
condition|(
name|aConnectionStatus
condition|)
block|{
comment|// Connection unitialised
case|case
name|KConnectionUninitialised
case|:
break|break;
comment|// Starting connetion selection
case|case
name|KStartingSelection
case|:
break|break;
comment|// Selection finished
case|case
name|KFinishedSelection
case|:
if|if
condition|(
name|aError
operator|==
name|KErrNone
condition|)
block|{
break|break;
block|}
else|else
block|{
comment|// The user pressed e.g. "Cancel" and did not select an IAP
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|,
name|accessPointId
argument_list|)
expr_stmt|;
block|}
break|break;
comment|// Connection failure
case|case
name|KConnectionFailure
case|:
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|NotAvailable
argument_list|)
expr_stmt|;
break|break;
comment|// Prepearing connection (e.g. dialing)
case|case
name|KPsdStartingConfiguration
case|:
case|case
name|KPsdFinishedConfiguration
case|:
case|case
name|KCsdFinishedDialling
case|:
case|case
name|KCsdScanningScript
case|:
case|case
name|KCsdGettingLoginInfo
case|:
case|case
name|KCsdGotLoginInfo
case|:
break|break;
case|case
name|KConfigDaemonStartingRegistration
case|:
comment|// Creating connection (e.g. GPRS activation)
case|case
name|KCsdStartingConnect
case|:
case|case
name|KCsdFinishedConnect
case|:
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Connecting
argument_list|,
name|accessPointId
argument_list|)
expr_stmt|;
break|break;
comment|// Starting log in
case|case
name|KCsdStartingLogIn
case|:
break|break;
comment|// Finished login
case|case
name|KCsdFinishedLogIn
case|:
break|break;
comment|// Connection open
case|case
name|KConnectionOpen
case|:
break|break;
case|case
name|KLinkLayerOpen
case|:
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Connected
argument_list|,
name|accessPointId
argument_list|)
expr_stmt|;
break|break;
comment|// Connection blocked or suspended
case|case
name|KDataTransferTemporarilyBlocked
case|:
break|break;
case|case
name|KConfigDaemonStartingDeregistration
case|:
comment|// Hangup or GRPS deactivation
case|case
name|KConnectionStartingClose
case|:
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Closing
argument_list|,
name|accessPointId
argument_list|)
expr_stmt|;
break|break;
comment|// Connection closed
case|case
name|KConnectionClosed
case|:
case|case
name|KLinkLayerClosed
case|:
name|newState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|,
name|accessPointId
argument_list|)
expr_stmt|;
comment|// Report manager about this to make sure this event
comment|// is received by all interseted parties (mediated by
comment|// manager because it does always receive all events from
comment|// connection monitor).
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNS this : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
operator|(
name|uint
operator|)
name|this
argument_list|)
operator|<<
literal|" - "
operator|<<
literal|"reporting disconnection to manager."
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|publicConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|symbianConfig
init|=
name|toSymbianConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|publicConfig
argument_list|)
argument_list|)
decl_stmt|;
name|engine
operator|->
name|configurationStateChangeReport
argument_list|(
name|symbianConfig
operator|->
name|numericIdentifier
argument_list|()
argument_list|,
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
break|break;
comment|// Unhandled state
default|default:
break|break;
block|}
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|SNAP_FUNCTIONALITY_AVAILABLE
argument_list|)
end_if
begin_function
DECL|function|easyWlanTrueIapId
name|bool
name|QNetworkSessionPrivateImpl
operator|::
name|easyWlanTrueIapId
parameter_list|(
name|TUint32
modifier|&
name|trueIapId
parameter_list|)
specifier|const
block|{
name|RCmManager
name|iCmManager
decl_stmt|;
name|TRAPD
argument_list|(
name|err
argument_list|,
name|iCmManager
operator|.
name|OpenL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|KErrNone
condition|)
return|return
literal|false
return|;
comment|// Check if this is easy wlan id in the first place
if|if
condition|(
name|trueIapId
operator|!=
name|iCmManager
operator|.
name|EasyWlanIdL
argument_list|()
condition|)
block|{
name|iCmManager
operator|.
name|Close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|iCmManager
operator|.
name|Close
argument_list|()
expr_stmt|;
comment|// Loop through all connections that connection monitor is aware
comment|// and check for IAPs based on easy WLAN
name|TRequestStatus
name|status
decl_stmt|;
name|TUint
name|connectionCount
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetConnectionCount
argument_list|(
name|connectionCount
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|TUint
name|connectionId
decl_stmt|;
name|TUint
name|subConnectionCount
decl_stmt|;
name|TUint
name|apId
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|Int
argument_list|()
operator|==
name|KErrNone
condition|)
block|{
for|for
control|(
name|TUint
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|connectionCount
condition|;
name|i
operator|++
control|)
block|{
name|iConnectionMonitor
operator|.
name|GetConnectionInfo
argument_list|(
name|i
argument_list|,
name|connectionId
argument_list|,
name|subConnectionCount
argument_list|)
expr_stmt|;
name|iConnectionMonitor
operator|.
name|GetUintAttribute
argument_list|(
name|connectionId
argument_list|,
name|subConnectionCount
argument_list|,
name|KIAPId
argument_list|,
name|apId
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|apId
operator|==
name|trueIapId
condition|)
block|{
name|TBuf
argument_list|<
literal|50
argument_list|>
name|easyWlanNetworkName
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetStringAttribute
argument_list|(
name|connectionId
argument_list|,
literal|0
argument_list|,
name|KNetworkName
argument_list|,
name|easyWlanNetworkName
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|Int
argument_list|()
operator|!=
name|KErrNone
condition|)
continue|continue;
specifier|const
name|QString
name|ssid
init|=
name|QString
operator|::
name|fromUtf16
argument_list|(
name|easyWlanNetworkName
operator|.
name|Ptr
argument_list|()
argument_list|,
name|easyWlanNetworkName
operator|.
name|Length
argument_list|()
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|engine
operator|->
name|configurationFromSsid
argument_list|(
name|ssid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNCM easyWlanTrueIapId(), found true IAP ID: "
operator|<<
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|trueIapId
operator|=
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|nativeSession
name|RConnection
modifier|*
name|QNetworkSessionPrivateImpl
operator|::
name|nativeSession
parameter_list|()
block|{
return|return
operator|&
name|iConnection
return|;
block|}
end_function
begin_constructor
DECL|function|ConnectionProgressNotifier
name|ConnectionProgressNotifier
operator|::
name|ConnectionProgressNotifier
parameter_list|(
name|QNetworkSessionPrivateImpl
modifier|&
name|owner
parameter_list|,
name|RConnection
modifier|&
name|connection
parameter_list|)
member_init_list|:
name|CActive
argument_list|(
name|CActive
operator|::
name|EPriorityUserInput
argument_list|)
member_init_list|,
name|iOwner
argument_list|(
name|owner
argument_list|)
member_init_list|,
name|iConnection
argument_list|(
name|connection
argument_list|)
block|{
name|CActiveScheduler
operator|::
name|Add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~ConnectionProgressNotifier
name|ConnectionProgressNotifier
operator|::
name|~
name|ConnectionProgressNotifier
parameter_list|()
block|{
name|Cancel
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|StartNotifications
name|void
name|ConnectionProgressNotifier
operator|::
name|StartNotifications
parameter_list|()
block|{
if|if
condition|(
operator|!
name|IsActive
argument_list|()
condition|)
block|{
name|SetActive
argument_list|()
expr_stmt|;
name|iConnection
operator|.
name|ProgressNotification
argument_list|(
name|iProgress
argument_list|,
name|iStatus
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|StopNotifications
name|void
name|ConnectionProgressNotifier
operator|::
name|StopNotifications
parameter_list|()
block|{
name|Cancel
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|DoCancel
name|void
name|ConnectionProgressNotifier
operator|::
name|DoCancel
parameter_list|()
block|{
name|iConnection
operator|.
name|CancelProgressNotification
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|RunL
name|void
name|ConnectionProgressNotifier
operator|::
name|RunL
parameter_list|()
block|{
if|if
condition|(
name|iStatus
operator|==
name|KErrNone
condition|)
block|{
name|SetActive
argument_list|()
expr_stmt|;
name|iConnection
operator|.
name|ProgressNotification
argument_list|(
name|iProgress
argument_list|,
name|iStatus
argument_list|)
expr_stmt|;
comment|// warning, this object may be deleted in the callback - do nothing after handleSymbianConnectionStatusChange
name|QT_TRYCATCH_LEAVING
argument_list|(
name|iOwner
operator|.
name|handleSymbianConnectionStatusChange
argument_list|(
name|iProgress
argument_list|()
operator|.
name|iStage
argument_list|,
name|iProgress
argument_list|()
operator|.
name|iError
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|ConnectionStarter
name|ConnectionStarter
operator|::
name|ConnectionStarter
parameter_list|(
name|QNetworkSessionPrivateImpl
modifier|&
name|owner
parameter_list|,
name|RConnection
modifier|&
name|connection
parameter_list|)
member_init_list|:
name|CActive
argument_list|(
name|CActive
operator|::
name|EPriorityUserInput
argument_list|)
member_init_list|,
name|iOwner
argument_list|(
name|owner
argument_list|)
member_init_list|,
name|iConnection
argument_list|(
name|connection
argument_list|)
block|{
name|CActiveScheduler
operator|::
name|Add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~ConnectionStarter
name|ConnectionStarter
operator|::
name|~
name|ConnectionStarter
parameter_list|()
block|{
name|Cancel
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|Start
name|void
name|ConnectionStarter
operator|::
name|Start
parameter_list|()
block|{
if|if
condition|(
operator|!
name|IsActive
argument_list|()
condition|)
block|{
name|iConnection
operator|.
name|Start
argument_list|(
name|iStatus
argument_list|)
expr_stmt|;
name|SetActive
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|Start
name|void
name|ConnectionStarter
operator|::
name|Start
parameter_list|(
name|TConnPref
modifier|&
name|pref
parameter_list|)
block|{
if|if
condition|(
operator|!
name|IsActive
argument_list|()
condition|)
block|{
name|iConnection
operator|.
name|Start
argument_list|(
name|pref
argument_list|,
name|iStatus
argument_list|)
expr_stmt|;
name|SetActive
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|RunL
name|void
name|ConnectionStarter
operator|::
name|RunL
parameter_list|()
block|{
name|iOwner
operator|.
name|ConnectionStartComplete
argument_list|(
name|iStatus
operator|.
name|Int
argument_list|()
argument_list|)
expr_stmt|;
comment|//note owner deletes on callback
block|}
end_function
begin_function
DECL|function|RunError
name|TInt
name|ConnectionStarter
operator|::
name|RunError
parameter_list|(
name|TInt
name|err
parameter_list|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"ConnectionStarter::RunError"
operator|<<
name|err
expr_stmt|;
return|return
name|KErrNone
return|;
block|}
end_function
begin_function
DECL|function|DoCancel
name|void
name|ConnectionStarter
operator|::
name|DoCancel
parameter_list|()
block|{
name|iConnection
operator|.
name|Close
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_BEARERMANAGEMENT
end_comment
end_unit
