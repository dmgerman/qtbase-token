begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"symbianengine.h"
end_include
begin_include
include|#
directive|include
file|"qnetworksession_impl.h"
end_include
begin_include
include|#
directive|include
file|<commdb.h>
end_include
begin_include
include|#
directive|include
file|<cdbcols.h>
end_include
begin_include
include|#
directive|include
file|<d32dbms.h>
end_include
begin_include
include|#
directive|include
file|<nifvar.h>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QTime>
end_include
begin_comment
comment|// For randgen seeding
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_comment
comment|// For randgen seeding
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
end_ifdef
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
end_ifdef
begin_include
include|#
directive|include
file|<cmdestination.h>
end_include
begin_include
include|#
directive|include
file|<cmconnectionmethod.h>
end_include
begin_include
include|#
directive|include
file|<cmconnectionmethoddef.h>
end_include
begin_include
include|#
directive|include
file|<cmpluginwlandef.h>
end_include
begin_include
include|#
directive|include
file|<cmpluginpacketdatadef.h>
end_include
begin_include
include|#
directive|include
file|<cmplugindialcommondefs.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<ApAccessPointItem.h>
end_include
begin_include
include|#
directive|include
file|<ApDataHandler.h>
end_include
begin_include
include|#
directive|include
file|<ApUtils.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|KUserChoiceIAPId
specifier|static
specifier|const
name|int
name|KUserChoiceIAPId
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|SymbianNetworkConfigurationPrivate
name|SymbianNetworkConfigurationPrivate
operator|::
name|SymbianNetworkConfigurationPrivate
parameter_list|()
member_init_list|:
name|numericId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|connectionId
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~SymbianNetworkConfigurationPrivate
name|SymbianNetworkConfigurationPrivate
operator|::
name|~
name|SymbianNetworkConfigurationPrivate
parameter_list|()
block|{ }
end_destructor
begin_constructor
DECL|function|SymbianEngine
name|SymbianEngine
operator|::
name|SymbianEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QBearerEngine
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|CActive
argument_list|(
name|CActive
operator|::
name|EPriorityHigh
argument_list|)
member_init_list|,
name|iFirstUpdate
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|ipCommsDB
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|iInitOk
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|iUpdatePending
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ipAccessPointsAvailabilityScanner
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|initialize
name|void
name|SymbianEngine
operator|::
name|initialize
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|CActiveScheduler
operator|::
name|Add
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Seed the randomgenerator
name|qsrand
argument_list|(
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|secsTo
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
operator|+
name|QCoreApplication
operator|::
name|applicationPid
argument_list|()
argument_list|)
expr_stmt|;
name|TRAPD
argument_list|(
name|error
argument_list|,
name|ipCommsDB
operator|=
name|CCommsDatabase
operator|::
name|NewL
argument_list|(
name|EDatabaseTypeIAP
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|KErrNone
condition|)
block|{
name|iInitOk
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|TRAP_IGNORE
argument_list|(
name|iConnectionMonitor
operator|.
name|ConnectL
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
name|TRAP_IGNORE
argument_list|(
name|iConnectionMonitor
operator|.
name|SetUintAttribute
argument_list|(
name|EBearerIdAll
argument_list|,
literal|0
argument_list|,
name|KBearerGroupThreshold
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|TRAP_IGNORE
argument_list|(
name|iConnectionMonitor
operator|.
name|NotifyEventL
argument_list|(
operator|*
name|this
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
name|TRAP
argument_list|(
name|error
argument_list|,
name|iCmManager
operator|.
name|OpenL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|KErrNone
condition|)
block|{
name|iInitOk
operator|=
literal|false
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|SymbianNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
operator|new
name|SymbianNetworkConfigurationPrivate
decl_stmt|;
name|cpPriv
operator|->
name|name
operator|=
literal|"UserChoice"
expr_stmt|;
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerUnknown
expr_stmt|;
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Discovered
expr_stmt|;
name|cpPriv
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|cpPriv
operator|->
name|id
operator|=
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|KUserChoiceIAPId
argument_list|)
argument_list|)
expr_stmt|;
name|cpPriv
operator|->
name|numericId
operator|=
name|KUserChoiceIAPId
expr_stmt|;
name|cpPriv
operator|->
name|connectionId
operator|=
literal|0
expr_stmt|;
name|cpPriv
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|UserChoice
expr_stmt|;
name|cpPriv
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|UnknownPurpose
expr_stmt|;
name|cpPriv
operator|->
name|roamingSupported
operator|=
literal|false
expr_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
name|cpPriv
argument_list|)
decl_stmt|;
name|userChoiceConfigurations
operator|.
name|insert
argument_list|(
name|ptr
operator|->
name|id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|updateConfigurations
argument_list|()
expr_stmt|;
name|updateStatesToSnaps
argument_list|()
expr_stmt|;
name|updateAvailableAccessPoints
argument_list|()
expr_stmt|;
comment|// On first time updates (without WLAN scans)
comment|// Start monitoring IAP and/or SNAP changes in Symbian CommsDB
name|startCommsDatabaseNotifications
argument_list|()
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~SymbianEngine
name|SymbianEngine
operator|::
name|~
name|SymbianEngine
parameter_list|()
block|{
name|Cancel
argument_list|()
expr_stmt|;
comment|//The scanner may be using the connection monitor so it needs to be
comment|//deleted first while the handle is still valid.
operator|delete
name|ipAccessPointsAvailabilityScanner
expr_stmt|;
name|iConnectionMonitor
operator|.
name|CancelNotifications
argument_list|()
expr_stmt|;
name|iConnectionMonitor
operator|.
name|Close
argument_list|()
expr_stmt|;
comment|// CCommsDatabase destructor and RCmManager.Close() use cleanup stack. Since QNetworkConfigurationManager
comment|// is a global static, but the time we are here, E32Main() has been exited already and
comment|// the thread's default cleanup stack has been deleted. Without this line, a
comment|// 'E32USER-CBase 69' -panic will occur.
name|CTrapCleanup
modifier|*
name|cleanup
init|=
name|CTrapCleanup
operator|::
name|New
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
name|iCmManager
operator|.
name|Close
argument_list|()
expr_stmt|;
endif|#
directive|endif
operator|delete
name|ipCommsDB
expr_stmt|;
operator|delete
name|cleanup
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|delayedConfigurationUpdate
name|void
name|SymbianEngine
operator|::
name|delayedConfigurationUpdate
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|iUpdatePending
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|(
literal|"QNCM delayed configuration update (ECommit or ERecover occurred)."
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|TRAPD
argument_list|(
name|error
argument_list|,
name|updateConfigurationsL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|KErrNone
condition|)
block|{
name|updateStatesToSnaps
argument_list|()
expr_stmt|;
block|}
name|iUpdatePending
operator|=
literal|false
expr_stmt|;
comment|// Start monitoring again.
if|if
condition|(
operator|!
name|IsActive
argument_list|()
condition|)
block|{
name|SetActive
argument_list|()
expr_stmt|;
comment|// Start waiting for new notification
name|ipCommsDB
operator|->
name|RequestNotification
argument_list|(
name|iStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|hasIdentifier
name|bool
name|SymbianEngine
operator|::
name|hasIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|||
name|snapConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|||
name|userChoiceConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|capabilities
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|SymbianEngine
operator|::
name|capabilities
parameter_list|()
specifier|const
block|{
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|capFlags
decl_stmt|;
name|capFlags
operator|=
name|QNetworkConfigurationManager
operator|::
name|CanStartAndStopInterfaces
operator||
name|QNetworkConfigurationManager
operator|::
name|DirectConnectionRouting
operator||
name|QNetworkConfigurationManager
operator|::
name|SystemSessionSupport
operator||
name|QNetworkConfigurationManager
operator|::
name|DataStatistics
operator||
name|QNetworkConfigurationManager
operator|::
name|NetworkSessionRequired
expr_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
name|capFlags
operator||=
name|QNetworkConfigurationManager
operator|::
name|ApplicationLevelRoaming
operator||
name|QNetworkConfigurationManager
operator|::
name|ForcedRoaming
expr_stmt|;
endif|#
directive|endif
return|return
name|capFlags
return|;
block|}
end_function
begin_function
DECL|function|createSessionBackend
name|QNetworkSessionPrivate
modifier|*
name|SymbianEngine
operator|::
name|createSessionBackend
parameter_list|()
block|{
return|return
operator|new
name|QNetworkSessionPrivateImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|requestUpdate
name|void
name|SymbianEngine
operator|::
name|requestUpdate
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iInitOk
operator|||
name|iUpdateGoingOn
condition|)
block|{
return|return;
block|}
name|iUpdateGoingOn
operator|=
literal|true
expr_stmt|;
name|stopCommsDatabaseNotifications
argument_list|()
expr_stmt|;
name|updateConfigurations
argument_list|()
expr_stmt|;
comment|// Synchronous call
name|updateAvailableAccessPoints
argument_list|()
expr_stmt|;
comment|// Asynchronous call
block|}
end_function
begin_function
DECL|function|updateConfigurations
name|void
name|SymbianEngine
operator|::
name|updateConfigurations
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iInitOk
condition|)
return|return;
name|TRAP_IGNORE
argument_list|(
name|updateConfigurationsL
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateConfigurationsL
name|void
name|SymbianEngine
operator|::
name|updateConfigurationsL
parameter_list|()
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|knownConfigs
init|=
name|accessPointConfigurations
operator|.
name|keys
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|knownSnapConfigs
init|=
name|snapConfigurations
operator|.
name|keys
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
comment|// S60 version is>= Series60 3rd Edition Feature Pack 2
name|TInt
name|error
init|=
name|KErrNone
decl_stmt|;
comment|// Loop through all IAPs
name|RArray
argument_list|<
name|TUint32
argument_list|>
name|connectionMethods
decl_stmt|;
comment|// IAPs
name|CleanupClosePushL
argument_list|(
name|connectionMethods
argument_list|)
expr_stmt|;
name|iCmManager
operator|.
name|ConnectionMethodL
argument_list|(
name|connectionMethods
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connectionMethods
operator|.
name|Count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RCmConnectionMethod
name|connectionMethod
init|=
name|iCmManager
operator|.
name|ConnectionMethodL
argument_list|(
name|connectionMethods
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|CleanupClosePushL
argument_list|(
name|connectionMethod
argument_list|)
expr_stmt|;
name|TUint32
name|iapId
init|=
name|connectionMethod
operator|.
name|GetIntAttributeL
argument_list|(
name|CMManager
operator|::
name|ECmIapId
argument_list|)
decl_stmt|;
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|iapId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|ident
argument_list|)
condition|)
block|{
name|knownConfigs
operator|.
name|removeOne
argument_list|(
name|ident
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
name|NULL
decl_stmt|;
name|TRAP
argument_list|(
name|error
argument_list|,
name|cpPriv
operator|=
name|configFromConnectionMethodL
argument_list|(
name|connectionMethod
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|KErrNone
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
name|cpPriv
argument_list|)
decl_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|ptr
operator|->
name|id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iFirstUpdate
condition|)
block|{
comment|// Emit configuration added. Connected slots may throw execptions
comment|// which propagate here --> must be converted to leaves (standard
comment|// std::exception would cause any TRAP trapping this function to terminate
comment|// program).
name|QT_TRYCATCH_LEAVING
argument_list|(
name|updateActiveAccessPoints
argument_list|()
argument_list|)
expr_stmt|;
name|updateStatesToSnaps
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
operator|&
name|connectionMethod
argument_list|)
expr_stmt|;
block|}
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
operator|&
name|connectionMethods
argument_list|)
expr_stmt|;
comment|// Loop through all SNAPs
name|RArray
argument_list|<
name|TUint32
argument_list|>
name|destinations
decl_stmt|;
name|CleanupClosePushL
argument_list|(
name|destinations
argument_list|)
expr_stmt|;
name|iCmManager
operator|.
name|AllDestinationsL
argument_list|(
name|destinations
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|destinations
operator|.
name|Count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RCmDestination
name|destination
decl_stmt|;
comment|// Some destinatsions require ReadDeviceData -capability (MMS/WAP)
comment|// The below function will leave in these cases. Don't. Proceed to
comment|// next destination (if any).
name|TRAPD
argument_list|(
name|error
argument_list|,
name|destination
operator|=
name|iCmManager
operator|.
name|DestinationL
argument_list|(
name|destinations
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|KErrPermissionDenied
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|User
operator|::
name|LeaveIfError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
name|CleanupClosePushL
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_SNAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|destination
operator|.
name|Id
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapConfigurations
operator|.
name|contains
argument_list|(
name|ident
argument_list|)
condition|)
block|{
name|knownSnapConfigs
operator|.
name|removeOne
argument_list|(
name|ident
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
operator|new
name|SymbianNetworkConfigurationPrivate
decl_stmt|;
name|HBufC
modifier|*
name|pName
init|=
name|destination
operator|.
name|NameLC
argument_list|()
decl_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(
name|cpPriv
operator|->
name|name
operator|=
name|QString
operator|::
name|fromUtf16
argument_list|(
name|pName
operator|->
name|Ptr
argument_list|()
argument_list|,
name|pName
operator|->
name|Length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|pName
argument_list|)
expr_stmt|;
name|pName
operator|=
name|NULL
expr_stmt|;
name|cpPriv
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|cpPriv
operator|->
name|id
operator|=
name|ident
expr_stmt|;
name|cpPriv
operator|->
name|numericId
operator|=
name|destination
operator|.
name|Id
argument_list|()
expr_stmt|;
name|cpPriv
operator|->
name|connectionId
operator|=
literal|0
expr_stmt|;
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
name|cpPriv
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
expr_stmt|;
name|cpPriv
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|UnknownPurpose
expr_stmt|;
name|cpPriv
operator|->
name|roamingSupported
operator|=
literal|false
expr_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
name|cpPriv
argument_list|)
decl_stmt|;
name|snapConfigurations
operator|.
name|insert
argument_list|(
name|ident
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iFirstUpdate
condition|)
block|{
name|QT_TRYCATCH_LEAVING
argument_list|(
name|updateActiveAccessPoints
argument_list|()
argument_list|)
expr_stmt|;
name|updateStatesToSnaps
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Loop through all connection methods in this SNAP
name|QMap
argument_list|<
name|unsigned
name|int
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
name|connections
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|destination
operator|.
name|ConnectionMethodCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|RCmConnectionMethod
name|connectionMethod
init|=
name|destination
operator|.
name|ConnectionMethodL
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|CleanupClosePushL
argument_list|(
name|connectionMethod
argument_list|)
expr_stmt|;
name|TUint32
name|iapId
init|=
name|connectionMethod
operator|.
name|GetIntAttributeL
argument_list|(
name|CMManager
operator|::
name|ECmIapId
argument_list|)
decl_stmt|;
name|QString
name|iface
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|iapId
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check that IAP can be found from accessPointConfigurations list
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|iface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptr
condition|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
name|NULL
decl_stmt|;
name|TRAP
argument_list|(
name|error
argument_list|,
name|cpPriv
operator|=
name|configFromConnectionMethodL
argument_list|(
name|connectionMethod
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|KErrNone
condition|)
block|{
name|ptr
operator|=
name|QNetworkConfigurationPrivatePointer
argument_list|(
name|cpPriv
argument_list|)
expr_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|ptr
operator|->
name|id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iFirstUpdate
condition|)
block|{
name|QT_TRYCATCH_LEAVING
argument_list|(
name|updateActiveAccessPoints
argument_list|()
argument_list|)
expr_stmt|;
name|updateStatesToSnaps
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|knownConfigs
operator|.
name|removeOne
argument_list|(
name|iface
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ptr
condition|)
block|{
name|unsigned
name|int
name|priority
decl_stmt|;
name|TRAPD
argument_list|(
name|error
argument_list|,
name|priority
operator|=
name|destination
operator|.
name|PriorityL
argument_list|(
name|connectionMethod
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|error
condition|)
name|connections
operator|.
name|insert
argument_list|(
name|priority
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
operator|&
name|connectionMethod
argument_list|)
expr_stmt|;
block|}
name|QNetworkConfigurationPrivatePointer
name|privSNAP
init|=
name|snapConfigurations
operator|.
name|value
argument_list|(
name|ident
argument_list|)
decl_stmt|;
name|QMutexLocker
name|snapConfigLocker
argument_list|(
operator|&
name|privSNAP
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|privSNAP
operator|->
name|serviceNetworkMembers
operator|!=
name|connections
condition|)
block|{
name|privSNAP
operator|->
name|serviceNetworkMembers
operator|=
name|connections
expr_stmt|;
comment|// Roaming is supported only if SNAP contains more than one IAP
name|privSNAP
operator|->
name|roamingSupported
operator|=
name|privSNAP
operator|->
name|serviceNetworkMembers
operator|.
name|count
argument_list|()
operator|>
literal|1
expr_stmt|;
name|snapConfigLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|updateStatesToSnaps
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(emit
name|configurationChanged
argument_list|(
name|privSNAP
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
operator|&
name|destination
argument_list|)
expr_stmt|;
block|}
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
operator|&
name|destinations
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// S60 version is< Series60 3rd Edition Feature Pack 2
name|CCommsDbTableView
modifier|*
name|pDbTView
init|=
name|ipCommsDB
operator|->
name|OpenTableLC
argument_list|(
name|TPtrC
argument_list|(
name|IAP
argument_list|)
argument_list|)
decl_stmt|;
comment|// Loop through all IAPs
name|TUint32
name|apId
init|=
literal|0
decl_stmt|;
name|TInt
name|retVal
init|=
name|pDbTView
operator|->
name|GotoFirstRecord
argument_list|()
decl_stmt|;
while|while
condition|(
name|retVal
operator|==
name|KErrNone
condition|)
block|{
name|pDbTView
operator|->
name|ReadUintL
argument_list|(
name|TPtrC
argument_list|(
name|COMMDB_ID
argument_list|)
argument_list|,
name|apId
argument_list|)
expr_stmt|;
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|apId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|ident
argument_list|)
condition|)
block|{
name|knownConfigs
operator|.
name|removeOne
argument_list|(
name|ident
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
operator|new
name|SymbianNetworkConfigurationPrivate
decl_stmt|;
if|if
condition|(
name|readNetworkConfigurationValuesFromCommsDb
argument_list|(
name|apId
argument_list|,
name|cpPriv
argument_list|)
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
name|cpPriv
argument_list|)
decl_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|ident
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iFirstUpdate
condition|)
block|{
name|QT_TRYCATCH_LEAVING
argument_list|(
name|updateActiveAccessPoints
argument_list|()
argument_list|)
expr_stmt|;
name|updateStatesToSnaps
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
operator|delete
name|cpPriv
expr_stmt|;
block|}
block|}
name|retVal
operator|=
name|pDbTView
operator|->
name|GotoNextRecord
argument_list|()
expr_stmt|;
block|}
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|pDbTView
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QT_TRYCATCH_LEAVING
argument_list|(
name|updateActiveAccessPoints
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|oldIface
decl|,
name|knownConfigs
control|)
block|{
comment|//remove non existing IAP
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|take
argument_list|(
name|oldIface
argument_list|)
decl_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
emit|;
name|QT_TRYCATCH_LEAVING
argument_list|(emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// Remove non existing IAP from SNAPs
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|iface
decl|,
name|snapConfigurations
operator|.
name|keys
argument_list|()
control|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr2
init|=
name|snapConfigurations
operator|.
name|value
argument_list|(
name|iface
argument_list|)
decl_stmt|;
comment|// => Check if one of the IAPs of the SNAP is active
name|QMutexLocker
name|snapConfigLocker
argument_list|(
operator|&
name|ptr2
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|QMutableMapIterator
argument_list|<
name|unsigned
name|int
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
name|i
argument_list|(
name|ptr2
operator|->
name|serviceNetworkMembers
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|toSymbianConfig
argument_list|(
name|i
operator|.
name|value
argument_list|()
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
operator|==
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|oldIface
decl|,
name|knownSnapConfigs
control|)
block|{
comment|//remove non existing SNAPs
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|snapConfigurations
operator|.
name|take
argument_list|(
name|oldIface
argument_list|)
decl_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
emit|;
name|QT_TRYCATCH_LEAVING
argument_list|(emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|// find default configuration.
name|stopCommsDatabaseNotifications
argument_list|()
expr_stmt|;
name|TRAP_IGNORE
argument_list|(
name|defaultConfig
operator|=
name|defaultConfigurationL
argument_list|()
argument_list|)
expr_stmt|;
name|startCommsDatabaseNotifications
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
name|updateStatesToSnaps
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
end_ifdef
begin_function
DECL|function|configFromConnectionMethodL
name|SymbianNetworkConfigurationPrivate
modifier|*
name|SymbianEngine
operator|::
name|configFromConnectionMethodL
parameter_list|(
name|RCmConnectionMethod
modifier|&
name|connectionMethod
parameter_list|)
block|{
name|SymbianNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
operator|new
name|SymbianNetworkConfigurationPrivate
decl_stmt|;
name|TUint32
name|iapId
init|=
name|connectionMethod
operator|.
name|GetIntAttributeL
argument_list|(
name|CMManager
operator|::
name|ECmIapId
argument_list|)
decl_stmt|;
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|iapId
argument_list|)
argument_list|)
decl_stmt|;
name|HBufC
modifier|*
name|pName
init|=
name|connectionMethod
operator|.
name|GetStringAttributeL
argument_list|(
name|CMManager
operator|::
name|ECmName
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|pName
argument_list|)
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(
name|cpPriv
operator|->
name|name
operator|=
name|QString
operator|::
name|fromUtf16
argument_list|(
name|pName
operator|->
name|Ptr
argument_list|()
argument_list|,
name|pName
operator|->
name|Length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|pName
argument_list|)
expr_stmt|;
name|pName
operator|=
name|NULL
expr_stmt|;
name|TUint32
name|bearerId
init|=
name|connectionMethod
operator|.
name|GetIntAttributeL
argument_list|(
name|CMManager
operator|::
name|ECmCommsDBBearerType
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|bearerId
condition|)
block|{
case|case
name|KCommDbBearerCSD
case|:
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|Bearer2G
expr_stmt|;
break|break;
case|case
name|KCommDbBearerWcdma
case|:
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerWCDMA
expr_stmt|;
break|break;
case|case
name|KCommDbBearerLAN
case|:
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerEthernet
expr_stmt|;
break|break;
case|case
name|KCommDbBearerVirtual
case|:
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerUnknown
expr_stmt|;
break|break;
case|case
name|KCommDbBearerPAN
case|:
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerUnknown
expr_stmt|;
break|break;
case|case
name|KCommDbBearerWLAN
case|:
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerWLAN
expr_stmt|;
break|break;
default|default:
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerUnknown
expr_stmt|;
break|break;
block|}
name|TInt
name|error
init|=
name|KErrNone
decl_stmt|;
name|TUint32
name|bearerType
init|=
name|connectionMethod
operator|.
name|GetIntAttributeL
argument_list|(
name|CMManager
operator|::
name|ECmBearerType
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|bearerType
condition|)
block|{
case|case
name|KUidPacketDataBearerType
case|:
comment|// "Packet data" Bearer => Mapping is done using "Access point name"
name|TRAP
argument_list|(
name|error
argument_list|,
name|pName
operator|=
name|connectionMethod
operator|.
name|GetStringAttributeL
argument_list|(
name|CMManager
operator|::
name|EPacketDataAPName
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|KUidWlanBearerType
case|:
comment|// "Wireless LAN" Bearer => Mapping is done using "WLAN network name" = SSID
name|TRAP
argument_list|(
name|error
argument_list|,
name|pName
operator|=
name|connectionMethod
operator|.
name|GetStringAttributeL
argument_list|(
name|CMManager
operator|::
name|EWlanSSID
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|pName
condition|)
block|{
comment|// "Data call" Bearer or "High Speed (GSM)" Bearer => Mapping is done using "Dial-up number"
name|TRAP
argument_list|(
name|error
argument_list|,
name|pName
operator|=
name|connectionMethod
operator|.
name|GetStringAttributeL
argument_list|(
name|CMManager
operator|::
name|EDialDefaultTelNum
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|==
name|KErrNone
operator|&&
name|pName
condition|)
block|{
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|pName
argument_list|)
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(
name|cpPriv
operator|->
name|mappingName
operator|=
name|QString
operator|::
name|fromUtf16
argument_list|(
name|pName
operator|->
name|Ptr
argument_list|()
argument_list|,
name|pName
operator|->
name|Length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|pName
argument_list|)
expr_stmt|;
name|pName
operator|=
name|NULL
expr_stmt|;
block|}
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
name|TBool
name|isConnected
init|=
name|connectionMethod
operator|.
name|GetBoolAttributeL
argument_list|(
name|CMManager
operator|::
name|ECmConnected
argument_list|)
decl_stmt|;
if|if
condition|(
name|isConnected
condition|)
block|{
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
block|}
name|cpPriv
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|cpPriv
operator|->
name|id
operator|=
name|ident
expr_stmt|;
name|cpPriv
operator|->
name|numericId
operator|=
name|iapId
expr_stmt|;
name|cpPriv
operator|->
name|connectionId
operator|=
literal|0
expr_stmt|;
name|cpPriv
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|cpPriv
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|UnknownPurpose
expr_stmt|;
name|cpPriv
operator|->
name|roamingSupported
operator|=
literal|false
expr_stmt|;
return|return
name|cpPriv
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|readNetworkConfigurationValuesFromCommsDb
name|bool
name|SymbianEngine
operator|::
name|readNetworkConfigurationValuesFromCommsDb
parameter_list|(
name|TUint32
name|aApId
parameter_list|,
name|SymbianNetworkConfigurationPrivate
modifier|*
name|apNetworkConfiguration
parameter_list|)
block|{
name|TRAPD
argument_list|(
name|error
argument_list|,
name|readNetworkConfigurationValuesFromCommsDbL
argument_list|(
name|aApId
argument_list|,
name|apNetworkConfiguration
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|KErrNone
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|readNetworkConfigurationValuesFromCommsDbL
name|void
name|SymbianEngine
operator|::
name|readNetworkConfigurationValuesFromCommsDbL
parameter_list|(
name|TUint32
name|aApId
parameter_list|,
name|SymbianNetworkConfigurationPrivate
modifier|*
name|apNetworkConfiguration
parameter_list|)
block|{
name|CApDataHandler
modifier|*
name|pDataHandler
init|=
name|CApDataHandler
operator|::
name|NewLC
argument_list|(
operator|*
name|ipCommsDB
argument_list|)
decl_stmt|;
name|CApAccessPointItem
modifier|*
name|pAPItem
init|=
name|CApAccessPointItem
operator|::
name|NewLC
argument_list|()
decl_stmt|;
name|TBuf
argument_list|<
name|KCommsDbSvrMaxColumnNameLength
argument_list|>
name|name
decl_stmt|;
name|CApUtils
modifier|*
name|pApUtils
init|=
name|CApUtils
operator|::
name|NewLC
argument_list|(
operator|*
name|ipCommsDB
argument_list|)
decl_stmt|;
name|TUint32
name|apId
init|=
name|pApUtils
operator|->
name|WapIdFromIapIdL
argument_list|(
name|aApId
argument_list|)
decl_stmt|;
name|pDataHandler
operator|->
name|AccessPointDataL
argument_list|(
name|apId
argument_list|,
operator|*
name|pAPItem
argument_list|)
expr_stmt|;
name|pAPItem
operator|->
name|ReadTextL
argument_list|(
name|EApIapName
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|Compare
argument_list|(
name|_L
argument_list|(
literal|"Easy WLAN"
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// "Easy WLAN" won't be accepted to the Configurations list
name|User
operator|::
name|Leave
argument_list|(
name|KErrNotFound
argument_list|)
expr_stmt|;
block|}
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|aApId
argument_list|)
argument_list|)
decl_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(
name|apNetworkConfiguration
operator|->
name|name
operator|=
name|QString
operator|::
name|fromUtf16
argument_list|(
name|name
operator|.
name|Ptr
argument_list|()
argument_list|,
name|name
operator|.
name|Length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|apNetworkConfiguration
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|apNetworkConfiguration
operator|->
name|id
operator|=
name|ident
expr_stmt|;
name|apNetworkConfiguration
operator|->
name|numericId
operator|=
name|aApId
expr_stmt|;
name|apNetworkConfiguration
operator|->
name|connectionId
operator|=
literal|0
expr_stmt|;
name|apNetworkConfiguration
operator|->
name|state
operator|=
operator|(
name|QNetworkConfiguration
operator|::
name|Defined
operator|)
expr_stmt|;
name|apNetworkConfiguration
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|apNetworkConfiguration
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|UnknownPurpose
expr_stmt|;
name|apNetworkConfiguration
operator|->
name|roamingSupported
operator|=
literal|false
expr_stmt|;
switch|switch
condition|(
name|pAPItem
operator|->
name|BearerTypeL
argument_list|()
condition|)
block|{
case|case
name|EApBearerTypeCSD
case|:
name|apNetworkConfiguration
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|Bearer2G
expr_stmt|;
break|break;
case|case
name|EApBearerTypeGPRS
case|:
name|apNetworkConfiguration
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|Bearer2G
expr_stmt|;
break|break;
case|case
name|EApBearerTypeHSCSD
case|:
name|apNetworkConfiguration
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerHSPA
expr_stmt|;
break|break;
case|case
name|EApBearerTypeCDMA
case|:
name|apNetworkConfiguration
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerCDMA2000
expr_stmt|;
break|break;
case|case
name|EApBearerTypeWLAN
case|:
name|apNetworkConfiguration
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerWLAN
expr_stmt|;
break|break;
case|case
name|EApBearerTypeLAN
case|:
name|apNetworkConfiguration
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerEthernet
expr_stmt|;
break|break;
case|case
name|EApBearerTypeLANModem
case|:
name|apNetworkConfiguration
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerEthernet
expr_stmt|;
break|break;
default|default:
name|apNetworkConfiguration
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerUnknown
expr_stmt|;
break|break;
block|}
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|pApUtils
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|pAPItem
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|pDataHandler
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|defaultConfiguration
name|QNetworkConfigurationPrivatePointer
name|SymbianEngine
operator|::
name|defaultConfiguration
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|defaultConfig
return|;
block|}
end_function
begin_function
DECL|function|accessPointConfigurationIdentifiers
name|QStringList
name|SymbianEngine
operator|::
name|accessPointConfigurationIdentifiers
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|accessPointConfigurations
operator|.
name|keys
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|defaultConfigurationL
name|QNetworkConfigurationPrivatePointer
name|SymbianEngine
operator|::
name|defaultConfigurationL
parameter_list|()
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
decl_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
comment|// Check Default Connection (SNAP or IAP)
name|TCmDefConnValue
name|defaultConnectionValue
decl_stmt|;
name|iCmManager
operator|.
name|ReadDefConnL
argument_list|(
name|defaultConnectionValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultConnectionValue
operator|.
name|iType
operator|==
name|ECmDefConnDestination
condition|)
block|{
name|QString
name|iface
init|=
name|QT_BEARERMGMT_CONFIGURATION_SNAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|defaultConnectionValue
operator|.
name|iId
argument_list|)
argument_list|)
decl_stmt|;
name|ptr
operator|=
name|snapConfigurations
operator|.
name|value
argument_list|(
name|iface
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|defaultConnectionValue
operator|.
name|iType
operator|==
name|ECmDefConnConnectionMethod
condition|)
block|{
name|QString
name|iface
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|defaultConnectionValue
operator|.
name|iId
argument_list|)
argument_list|)
decl_stmt|;
name|ptr
operator|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|iface
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|ptr
condition|)
block|{
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|->
name|isValid
condition|)
return|return
name|ptr
return|;
block|}
name|QString
name|iface
init|=
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|KUserChoiceIAPId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|userChoiceConfigurations
operator|.
name|value
argument_list|(
name|iface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|updateActiveAccessPoints
name|void
name|SymbianEngine
operator|::
name|updateActiveAccessPoints
parameter_list|()
block|{
name|bool
name|online
init|=
literal|false
decl_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|inactiveConfigs
init|=
name|accessPointConfigurations
operator|.
name|keys
argument_list|()
decl_stmt|;
name|TRequestStatus
name|status
decl_stmt|;
name|TUint
name|connectionCount
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetConnectionCount
argument_list|(
name|connectionCount
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// Go through all connections and set state of related IAPs to Active.
comment|// Status needs to be checked carefully, because ConnMon lists also e.g.
comment|// WLAN connections that are being currently tried --> we don't want to
comment|// state these as active.
name|TUint
name|connectionId
decl_stmt|;
name|TUint
name|subConnectionCount
decl_stmt|;
name|TUint
name|apId
decl_stmt|;
name|TInt
name|connectionStatus
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|Int
argument_list|()
operator|==
name|KErrNone
condition|)
block|{
for|for
control|(
name|TUint
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|connectionCount
condition|;
name|i
operator|++
control|)
block|{
name|iConnectionMonitor
operator|.
name|GetConnectionInfo
argument_list|(
name|i
argument_list|,
name|connectionId
argument_list|,
name|subConnectionCount
argument_list|)
expr_stmt|;
name|iConnectionMonitor
operator|.
name|GetUintAttribute
argument_list|(
name|connectionId
argument_list|,
name|subConnectionCount
argument_list|,
name|KIAPId
argument_list|,
name|apId
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|apId
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|ident
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
if|if
condition|(
operator|!
name|ptr
condition|)
block|{
comment|// If IAP was not found, check if the update was about EasyWLAN
name|ptr
operator|=
name|configurationFromEasyWlan
argument_list|(
name|apId
argument_list|,
name|connectionId
argument_list|)
expr_stmt|;
comment|// Change the ident correspondingly
if|if
condition|(
name|ptr
condition|)
block|{
name|ident
operator|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|ptr
condition|)
block|{
name|iConnectionMonitor
operator|.
name|GetIntAttribute
argument_list|(
name|connectionId
argument_list|,
name|subConnectionCount
argument_list|,
name|KConnectionStatus
argument_list|,
name|connectionStatus
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectionStatus
operator|==
name|KLinkLayerOpen
condition|)
block|{
name|online
operator|=
literal|true
expr_stmt|;
name|inactiveConfigs
operator|.
name|removeOne
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|connectionId
operator|=
name|connectionId
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// Configuration is Active
name|changeConfigurationStateTo
argument_list|(
name|ptr
argument_list|,
name|QNetworkConfiguration
operator|::
name|Active
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Make sure that state of rest of the IAPs won't be Active
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|iface
decl|,
name|inactiveConfigs
control|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|iface
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
comment|// Configuration is either Defined or Discovered
name|changeConfigurationStateAtMaxTo
argument_list|(
name|ptr
argument_list|,
name|QNetworkConfiguration
operator|::
name|Discovered
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iOnline
operator|!=
name|online
condition|)
block|{
name|iOnline
operator|=
name|online
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|this
operator|->
name|onlineStateChanged
argument_list|(
name|online
argument_list|)
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateAvailableAccessPoints
name|void
name|SymbianEngine
operator|::
name|updateAvailableAccessPoints
parameter_list|()
block|{
if|if
condition|(
operator|!
name|ipAccessPointsAvailabilityScanner
condition|)
block|{
name|ipAccessPointsAvailabilityScanner
operator|=
operator|new
name|AccessPointsAvailabilityScanner
argument_list|(
operator|*
name|this
argument_list|,
name|iConnectionMonitor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ipAccessPointsAvailabilityScanner
condition|)
block|{
comment|// Scanning may take a while because WLAN scanning will be done (if device supports WLAN).
name|ipAccessPointsAvailabilityScanner
operator|->
name|StartScanning
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|accessPointScanningReady
name|void
name|SymbianEngine
operator|::
name|accessPointScanningReady
parameter_list|(
name|TBool
name|scanSuccessful
parameter_list|,
name|TConnMonIapInfo
name|iapInfo
parameter_list|)
block|{
name|iUpdateGoingOn
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|scanSuccessful
condition|)
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|unavailableConfigs
init|=
name|accessPointConfigurations
operator|.
name|keys
argument_list|()
decl_stmt|;
comment|// Set state of returned IAPs to Discovered
comment|// if state is not already Active
for|for
control|(
name|TUint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iapInfo
operator|.
name|iCount
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|iapInfo
operator|.
name|iIap
index|[
name|i
index|]
operator|.
name|iIapId
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|ident
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|unavailableConfigs
operator|.
name|removeOne
argument_list|(
name|ident
argument_list|)
expr_stmt|;
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|->
name|state
operator|<
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
comment|// Configuration is either Discovered or Active
name|changeConfigurationStateAtMinTo
argument_list|(
name|ptr
argument_list|,
name|QNetworkConfiguration
operator|::
name|Discovered
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Make sure that state of rest of the IAPs won't be Active
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|iface
decl|,
name|unavailableConfigs
control|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|iface
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
comment|// Configuration is Defined
name|changeConfigurationStateAtMaxTo
argument_list|(
name|ptr
argument_list|,
name|QNetworkConfiguration
operator|::
name|Discovered
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|updateStatesToSnaps
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|iFirstUpdate
condition|)
block|{
name|startCommsDatabaseNotifications
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iFirstUpdate
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|iScanInQueue
condition|)
block|{
name|iScanInQueue
operator|=
name|EFalse
expr_stmt|;
name|updateAvailableAccessPoints
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|updateStatesToSnaps
name|void
name|SymbianEngine
operator|::
name|updateStatesToSnaps
parameter_list|()
block|{
comment|// Go through SNAPs and set correct state to SNAPs
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|iface
decl|,
name|snapConfigurations
operator|.
name|keys
argument_list|()
control|)
block|{
name|bool
name|discovered
init|=
literal|false
decl_stmt|;
name|bool
name|active
init|=
literal|false
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|snapConfigurations
operator|.
name|value
argument_list|(
name|iface
argument_list|)
decl_stmt|;
name|QMutexLocker
name|snapConfigLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
comment|// => Check if one of the IAPs of the SNAP is discovered or active
comment|//    => If one of IAPs is active, also SNAP is active
comment|//    => If one of IAPs is discovered but none of the IAPs is active, SNAP is discovered
name|QMapIterator
argument_list|<
name|unsigned
name|int
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
name|i
argument_list|(
name|ptr
operator|->
name|serviceNetworkMembers
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
specifier|const
name|QNetworkConfigurationPrivatePointer
name|child
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|child
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|child
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|active
operator|=
literal|true
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
operator|(
name|child
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
name|discovered
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|snapConfigLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|active
condition|)
block|{
name|changeConfigurationStateTo
argument_list|(
name|ptr
argument_list|,
name|QNetworkConfiguration
operator|::
name|Active
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|discovered
condition|)
block|{
name|changeConfigurationStateTo
argument_list|(
name|ptr
argument_list|,
name|QNetworkConfiguration
operator|::
name|Discovered
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|changeConfigurationStateTo
argument_list|(
name|ptr
argument_list|,
name|QNetworkConfiguration
operator|::
name|Defined
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
end_ifdef
begin_function
DECL|function|updateMobileBearerToConfigs
name|void
name|SymbianEngine
operator|::
name|updateMobileBearerToConfigs
parameter_list|(
name|TConnMonBearerInfo
name|bearerInfo
parameter_list|)
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|accessPointConfigurations
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|accessPointConfigurations
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|SymbianNetworkConfigurationPrivate
modifier|*
name|p
init|=
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|->
name|bearerType
operator|>=
name|QNetworkConfiguration
operator|::
name|Bearer2G
operator|&&
name|p
operator|->
name|bearerType
operator|<=
name|QNetworkConfiguration
operator|::
name|BearerHSPA
condition|)
block|{
switch|switch
condition|(
name|bearerInfo
condition|)
block|{
case|case
name|EBearerInfoCSD
case|:
name|p
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|Bearer2G
expr_stmt|;
break|break;
case|case
name|EBearerInfoWCDMA
case|:
name|p
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerWCDMA
expr_stmt|;
break|break;
case|case
name|EBearerInfoCDMA2000
case|:
name|p
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerCDMA2000
expr_stmt|;
break|break;
case|case
name|EBearerInfoGPRS
case|:
name|p
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|Bearer2G
expr_stmt|;
break|break;
case|case
name|EBearerInfoHSCSD
case|:
name|p
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|Bearer2G
expr_stmt|;
break|break;
case|case
name|EBearerInfoEdgeGPRS
case|:
name|p
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|Bearer2G
expr_stmt|;
break|break;
case|case
name|EBearerInfoWcdmaCSD
case|:
name|p
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerWCDMA
expr_stmt|;
break|break;
case|case
name|EBearerInfoHSDPA
case|:
name|p
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerHSPA
expr_stmt|;
break|break;
case|case
name|EBearerInfoHSUPA
case|:
name|p
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerHSPA
expr_stmt|;
break|break;
case|case
name|EBearerInfoHSxPA
case|:
name|p
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerHSPA
expr_stmt|;
break|break;
block|}
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|changeConfigurationStateTo
name|bool
name|SymbianEngine
operator|::
name|changeConfigurationStateTo
parameter_list|(
name|QNetworkConfigurationPrivatePointer
name|ptr
parameter_list|,
name|QNetworkConfiguration
operator|::
name|StateFlags
name|newState
parameter_list|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|newState
operator|!=
name|ptr
operator|->
name|state
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|newState
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/* changeConfigurationStateAtMinTo function does not overwrite possible better  * state (e.g. Discovered state does not overwrite Active state) but  * makes sure that state is at minimum given state. */
end_comment
begin_function
DECL|function|changeConfigurationStateAtMinTo
name|bool
name|SymbianEngine
operator|::
name|changeConfigurationStateAtMinTo
parameter_list|(
name|QNetworkConfigurationPrivatePointer
name|ptr
parameter_list|,
name|QNetworkConfiguration
operator|::
name|StateFlags
name|newState
parameter_list|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|newState
operator||
name|ptr
operator|->
name|state
operator|)
operator|!=
name|ptr
operator|->
name|state
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
operator|(
name|ptr
operator|->
name|state
operator||
name|newState
operator|)
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/* changeConfigurationStateAtMaxTo function overwrites possible better  * state (e.g. Discovered state overwrites Active state) and  * makes sure that state is at maximum given state (e.g. Discovered state  * does not overwrite Defined state). */
end_comment
begin_function
DECL|function|changeConfigurationStateAtMaxTo
name|bool
name|SymbianEngine
operator|::
name|changeConfigurationStateAtMaxTo
parameter_list|(
name|QNetworkConfigurationPrivatePointer
name|ptr
parameter_list|,
name|QNetworkConfiguration
operator|::
name|StateFlags
name|newState
parameter_list|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|newState
operator|&
name|ptr
operator|->
name|state
operator|)
operator|!=
name|ptr
operator|->
name|state
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
operator|(
name|newState
operator|&
name|ptr
operator|->
name|state
operator|)
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|startCommsDatabaseNotifications
name|void
name|SymbianEngine
operator|::
name|startCommsDatabaseNotifications
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iWaitingCommsDatabaseNotifications
condition|)
block|{
name|iWaitingCommsDatabaseNotifications
operator|=
name|ETrue
expr_stmt|;
if|if
condition|(
operator|!
name|IsActive
argument_list|()
condition|)
block|{
name|SetActive
argument_list|()
expr_stmt|;
comment|// Start waiting for new notification
name|ipCommsDB
operator|->
name|RequestNotification
argument_list|(
name|iStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|stopCommsDatabaseNotifications
name|void
name|SymbianEngine
operator|::
name|stopCommsDatabaseNotifications
parameter_list|()
block|{
if|if
condition|(
name|iWaitingCommsDatabaseNotifications
condition|)
block|{
name|iWaitingCommsDatabaseNotifications
operator|=
name|EFalse
expr_stmt|;
name|Cancel
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|RunL
name|void
name|SymbianEngine
operator|::
name|RunL
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|iStatus
operator|!=
name|KErrCancel
condition|)
block|{
comment|// By default, start relistening notifications. Stop only if interesting event occurred.
name|iWaitingCommsDatabaseNotifications
operator|=
literal|true
expr_stmt|;
name|RDbNotifier
operator|::
name|TEvent
name|event
init|=
name|STATIC_CAST
argument_list|(
name|RDbNotifier
operator|::
name|TEvent
argument_list|,
name|iStatus
operator|.
name|Int
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|RDbNotifier
operator|::
name|ECommit
case|:
comment|/** A transaction has been committed.  */
case|case
name|RDbNotifier
operator|::
name|ERecover
case|:
comment|/** The database has been recovered    */
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|(
literal|"QNCM CommsDB event (of type RDbNotifier::TEvent) received: %d"
argument_list|,
name|iStatus
operator|.
name|Int
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Mark that there is update pending. No need to ask more events,
comment|// as we know we will be updating anyway when the timer expires.
if|if
condition|(
operator|!
name|iUpdatePending
condition|)
block|{
name|iUpdatePending
operator|=
literal|true
expr_stmt|;
name|iWaitingCommsDatabaseNotifications
operator|=
literal|false
expr_stmt|;
comment|// Update after random time, so that many processes won't
comment|// start updating simultaneously
name|updateConfigurationsAfterRandomTime
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
comment|// Do nothing
break|break;
block|}
block|}
if|if
condition|(
name|iWaitingCommsDatabaseNotifications
condition|)
block|{
if|if
condition|(
operator|!
name|IsActive
argument_list|()
condition|)
block|{
name|SetActive
argument_list|()
expr_stmt|;
comment|// Start waiting for new notification
name|ipCommsDB
operator|->
name|RequestNotification
argument_list|(
name|iStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|DoCancel
name|void
name|SymbianEngine
operator|::
name|DoCancel
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|ipCommsDB
operator|->
name|CancelRequestNotification
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|EventL
name|void
name|SymbianEngine
operator|::
name|EventL
parameter_list|(
specifier|const
name|CConnMonEventBase
modifier|&
name|aEvent
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|aEvent
operator|.
name|EventType
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
case|case
name|EConnMonBearerInfoChange
case|:
block|{
name|CConnMonBearerInfoChange
modifier|*
name|realEvent
decl_stmt|;
name|realEvent
operator|=
operator|(
name|CConnMonBearerInfoChange
operator|*
operator|)
operator|&
name|aEvent
expr_stmt|;
name|TUint
name|connectionId
init|=
name|realEvent
operator|->
name|ConnectionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|==
name|EBearerIdAll
condition|)
block|{
comment|//Network level event
name|TConnMonBearerInfo
name|bearerInfo
init|=
operator|(
name|TConnMonBearerInfo
operator|)
name|realEvent
operator|->
name|BearerInfo
argument_list|()
decl_stmt|;
name|updateMobileBearerToConfigs
argument_list|(
name|bearerInfo
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
endif|#
directive|endif
case|case
name|EConnMonConnectionStatusChange
case|:
block|{
name|CConnMonConnectionStatusChange
modifier|*
name|realEvent
decl_stmt|;
name|realEvent
operator|=
operator|(
name|CConnMonConnectionStatusChange
operator|*
operator|)
operator|&
name|aEvent
expr_stmt|;
name|TInt
name|connectionStatus
init|=
name|realEvent
operator|->
name|ConnectionStatus
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNCM Connection status : "
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|connectionStatus
argument_list|)
operator|<<
literal|" , connection monitor Id : "
operator|<<
name|realEvent
operator|->
name|ConnectionId
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|connectionStatus
operator|==
name|KConfigDaemonStartingRegistration
condition|)
block|{
name|TUint
name|connectionId
init|=
name|realEvent
operator|->
name|ConnectionId
argument_list|()
decl_stmt|;
name|TUint
name|subConnectionCount
init|=
literal|0
decl_stmt|;
name|TUint
name|apId
decl_stmt|;
name|TRequestStatus
name|status
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetUintAttribute
argument_list|(
name|connectionId
argument_list|,
name|subConnectionCount
argument_list|,
name|KIAPId
argument_list|,
name|apId
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|apId
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|ident
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
if|if
condition|(
operator|!
name|ptr
condition|)
block|{
comment|// Check if status was regarding EasyWLAN
name|ptr
operator|=
name|configurationFromEasyWlan
argument_list|(
name|apId
argument_list|,
name|connectionId
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|ptr
condition|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|connectionId
operator|=
name|connectionId
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(                     emit
name|configurationStateChanged
argument_list|(
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
argument_list|,
name|connectionId
argument_list|,
name|QNetworkSession
operator|::
name|Connecting
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|connectionStatus
operator|==
name|KLinkLayerOpen
condition|)
block|{
comment|// Connection has been successfully opened
name|TUint
name|connectionId
init|=
name|realEvent
operator|->
name|ConnectionId
argument_list|()
decl_stmt|;
name|TUint
name|subConnectionCount
init|=
literal|0
decl_stmt|;
name|TUint
name|apId
decl_stmt|;
name|TRequestStatus
name|status
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetUintAttribute
argument_list|(
name|connectionId
argument_list|,
name|subConnectionCount
argument_list|,
name|KIAPId
argument_list|,
name|apId
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|apId
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|ident
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
if|if
condition|(
operator|!
name|ptr
condition|)
block|{
comment|// Check for EasyWLAN
name|ptr
operator|=
name|configurationFromEasyWlan
argument_list|(
name|apId
argument_list|,
name|connectionId
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|ptr
condition|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|connectionId
operator|=
name|connectionId
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// Configuration is Active
name|QT_TRYCATCH_LEAVING
argument_list|(
argument|if (changeConfigurationStateTo(ptr, QNetworkConfiguration::Active)) {                         updateStatesToSnaps();                     }                     emit configurationStateChanged(toSymbianConfig(ptr)->numericIdentifier(),                                                    connectionId, QNetworkSession::Connected);                      if (!iOnline) {                         iOnline =
literal|true
argument|;                         emit this->onlineStateChanged(iOnline);                     }
argument_list|)
empty_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|connectionStatus
operator|==
name|KConfigDaemonStartingDeregistration
condition|)
block|{
name|TUint
name|connectionId
init|=
name|realEvent
operator|->
name|ConnectionId
argument_list|()
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|dataByConnectionId
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|QT_TRYCATCH_LEAVING
argument_list|(                     emit
name|configurationStateChanged
argument_list|(
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
argument_list|,
name|connectionId
argument_list|,
name|QNetworkSession
operator|::
name|Closing
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|connectionStatus
operator|==
name|KLinkLayerClosed
operator|||
name|connectionStatus
operator|==
name|KConnectionClosed
condition|)
block|{
comment|// Connection has been closed. Which of the above events is reported, depends on the Symbian
comment|// platform.
name|TUint
name|connectionId
init|=
name|realEvent
operator|->
name|ConnectionId
argument_list|()
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|dataByConnectionId
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
comment|// Configuration is either Defined or Discovered
name|QT_TRYCATCH_LEAVING
argument_list|(
argument|if (changeConfigurationStateAtMaxTo(ptr, QNetworkConfiguration::Discovered)) {                         updateStatesToSnaps();                     }                     emit configurationStateChanged(toSymbianConfig(ptr)->numericIdentifier(),                                                    connectionId, QNetworkSession::Disconnected);
argument_list|)
empty_stmt|;
block|}
name|bool
name|online
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|iface
decl|,
name|accessPointConfigurations
operator|.
name|keys
argument_list|()
control|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|iface
argument_list|)
decl_stmt|;
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|->
name|state
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|online
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|iOnline
operator|!=
name|online
condition|)
block|{
name|iOnline
operator|=
name|online
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(emit
name|this
operator|->
name|onlineStateChanged
argument_list|(
name|iOnline
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|EConnMonIapAvailabilityChange
case|:
block|{
name|CConnMonIapAvailabilityChange
modifier|*
name|realEvent
decl_stmt|;
name|realEvent
operator|=
operator|(
name|CConnMonIapAvailabilityChange
operator|*
operator|)
operator|&
name|aEvent
expr_stmt|;
name|TConnMonIapInfo
name|iaps
init|=
name|realEvent
operator|->
name|IapAvailability
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|unDiscoveredConfigs
init|=
name|accessPointConfigurations
operator|.
name|keys
argument_list|()
decl_stmt|;
for|for
control|(
name|TUint
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iaps
operator|.
name|Count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|iaps
operator|.
name|iIap
index|[
name|i
index|]
operator|.
name|iIapId
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|ident
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
comment|// Configuration is either Discovered or Active
name|QT_TRYCATCH_LEAVING
argument_list|(
name|changeConfigurationStateAtMinTo
argument_list|(
name|ptr
argument_list|,
name|QNetworkConfiguration
operator|::
name|Discovered
argument_list|)
argument_list|)
expr_stmt|;
name|unDiscoveredConfigs
operator|.
name|removeOne
argument_list|(
name|ident
argument_list|)
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|iface
decl|,
name|unDiscoveredConfigs
control|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|iface
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
comment|// Configuration is Defined
name|QT_TRYCATCH_LEAVING
argument_list|(
name|changeConfigurationStateAtMaxTo
argument_list|(
name|ptr
argument_list|,
name|QNetworkConfiguration
operator|::
name|Defined
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Something has in IAPs, update states to SNAPs
name|updateStatesToSnaps
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|EConnMonCreateConnection
case|:
block|{
comment|// This event is caught to keep connection monitor IDs up-to-date.
name|CConnMonCreateConnection
modifier|*
name|realEvent
decl_stmt|;
name|realEvent
operator|=
operator|(
name|CConnMonCreateConnection
operator|*
operator|)
operator|&
name|aEvent
expr_stmt|;
name|TUint
name|subConnectionCount
init|=
literal|0
decl_stmt|;
name|TUint
name|apId
decl_stmt|;
name|TUint
name|connectionId
init|=
name|realEvent
operator|->
name|ConnectionId
argument_list|()
decl_stmt|;
name|TRequestStatus
name|status
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetUintAttribute
argument_list|(
name|connectionId
argument_list|,
name|subConnectionCount
argument_list|,
name|KIAPId
argument_list|,
name|apId
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|apId
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|ident
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
if|if
condition|(
operator|!
name|ptr
condition|)
block|{
comment|// If IAP was not found, check if the update was about EasyWLAN
name|ptr
operator|=
name|configurationFromEasyWlan
argument_list|(
name|apId
argument_list|,
name|connectionId
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|ptr
condition|)
block|{
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNCM updating connection monitor ID : from, to, whose: "
operator|<<
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|connectionId
operator|<<
name|connectionId
operator|<<
name|ptr
operator|->
name|name
expr_stmt|;
endif|#
directive|endif
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|connectionId
operator|=
name|connectionId
expr_stmt|;
block|}
block|}
break|break;
default|default:
comment|// For unrecognized events
break|break;
block|}
block|}
end_function
begin_comment
comment|/*     Returns the network configuration that matches the given SSID. */
end_comment
begin_function
DECL|function|configurationFromSsid
name|QNetworkConfigurationPrivatePointer
name|SymbianEngine
operator|::
name|configurationFromSsid
parameter_list|(
specifier|const
name|QString
modifier|&
name|ssid
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
comment|// Browser through all items and check their name for match
name|QHash
argument_list|<
name|QString
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
operator|::
name|ConstIterator
name|i
init|=
name|accessPointConfigurations
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|accessPointConfigurations
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|->
name|name
operator|==
name|ssid
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNCM EasyWlan uses real SSID: "
operator|<<
name|ssid
expr_stmt|;
endif|#
directive|endif
return|return
name|ptr
return|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
name|QNetworkConfigurationPrivatePointer
argument_list|()
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|SNAP_FUNCTIONALITY_AVAILABLE
end_ifdef
begin_comment
comment|// Tries to derive configuration from EasyWLAN.
end_comment
begin_comment
comment|// First checks if the interface brought up was EasyWLAN, then derives the real SSID,
end_comment
begin_comment
comment|// and looks up configuration based on that one.
end_comment
begin_function
DECL|function|configurationFromEasyWlan
name|QNetworkConfigurationPrivatePointer
name|SymbianEngine
operator|::
name|configurationFromEasyWlan
parameter_list|(
name|TUint32
name|apId
parameter_list|,
name|TUint
name|connectionId
parameter_list|)
block|{
if|if
condition|(
name|apId
operator|==
name|iCmManager
operator|.
name|EasyWlanIdL
argument_list|()
condition|)
block|{
name|TRequestStatus
name|status
decl_stmt|;
name|TBuf
argument_list|<
literal|50
argument_list|>
name|easyWlanNetworkName
decl_stmt|;
name|iConnectionMonitor
operator|.
name|GetStringAttribute
argument_list|(
name|connectionId
argument_list|,
literal|0
argument_list|,
name|KNetworkName
argument_list|,
name|easyWlanNetworkName
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|User
operator|::
name|WaitForRequest
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|Int
argument_list|()
operator|==
name|KErrNone
condition|)
block|{
specifier|const
name|QString
name|realSSID
init|=
name|QString
operator|::
name|fromUtf16
argument_list|(
name|easyWlanNetworkName
operator|.
name|Ptr
argument_list|()
argument_list|,
name|easyWlanNetworkName
operator|.
name|Length
argument_list|()
argument_list|)
decl_stmt|;
comment|// Browser through all items and check their name for match
name|QHash
argument_list|<
name|QString
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
operator|::
name|ConstIterator
name|i
init|=
name|accessPointConfigurations
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|accessPointConfigurations
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|->
name|name
operator|==
name|realSSID
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNCM EasyWlan uses real SSID: "
operator|<<
name|realSSID
expr_stmt|;
endif|#
directive|endif
return|return
name|ptr
return|;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
block|}
return|return
name|QNetworkConfigurationPrivatePointer
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Sessions may use this function to report configuration state changes,
end_comment
begin_comment
comment|// because on some Symbian platforms (especially Symbian^3) all state changes are not
end_comment
begin_comment
comment|// reported by the RConnectionMonitor, in particular in relation to stop() call,
end_comment
begin_comment
comment|// whereas they _are_ reported on RConnection progress notifier used by sessions --> centralize
end_comment
begin_comment
comment|// this data here so that other sessions may benefit from it too (not all sessions necessarily have
end_comment
begin_comment
comment|// RConnection progress notifiers available but they relay on having e.g. disconnected information from
end_comment
begin_comment
comment|// manager). Currently only 'Disconnected' state is of interest because it has proven to be troublesome.
end_comment
begin_function
DECL|function|configurationStateChangeReport
name|void
name|SymbianEngine
operator|::
name|configurationStateChangeReport
parameter_list|(
name|TUint32
name|accessPointId
parameter_list|,
name|QNetworkSession
operator|::
name|State
name|newState
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QNCM A session reported state change for IAP ID: "
operator|<<
name|accessPointId
operator|<<
literal|" whose new state is: "
operator|<<
name|newState
expr_stmt|;
endif|#
directive|endif
switch|switch
condition|(
name|newState
condition|)
block|{
case|case
name|QNetworkSession
operator|::
name|Disconnected
case|:
block|{
name|QString
name|ident
init|=
name|QT_BEARERMGMT_CONFIGURATION_IAP_PREFIX
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|accessPointId
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|ident
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
comment|// Configuration is either Defined or Discovered
if|if
condition|(
name|changeConfigurationStateAtMaxTo
argument_list|(
name|ptr
argument_list|,
name|QNetworkConfiguration
operator|::
name|Discovered
argument_list|)
condition|)
block|{
name|updateStatesToSnaps
argument_list|()
expr_stmt|;
block|}
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationStateChanged
argument_list|(
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|numericIdentifier
argument_list|()
argument_list|,
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|connectionIdentifier
argument_list|()
argument_list|,
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_comment
comment|// Waits for 2..6 seconds.
end_comment
begin_function
DECL|function|updateConfigurationsAfterRandomTime
name|void
name|SymbianEngine
operator|::
name|updateConfigurationsAfterRandomTime
parameter_list|()
block|{
name|int
name|iTimeToWait
init|=
name|qMax
argument_list|(
literal|1000
argument_list|,
operator|(
name|qAbs
argument_list|(
name|qrand
argument_list|()
argument_list|)
operator|%
literal|68
operator|)
operator|*
literal|100
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_BEARERMGMT_SYMBIAN_DEBUG
name|qDebug
argument_list|(
literal|"QNCM waiting random time: %d ms"
argument_list|,
name|iTimeToWait
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTimer
operator|::
name|singleShot
argument_list|(
name|iTimeToWait
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|delayedConfigurationUpdate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dataByConnectionId
name|QNetworkConfigurationPrivatePointer
name|SymbianEngine
operator|::
name|dataByConnectionId
parameter_list|(
name|TUint
name|aConnectionId
parameter_list|)
block|{
name|QNetworkConfiguration
name|item
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|accessPointConfigurations
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|accessPointConfigurations
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|toSymbianConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|connectionIdentifier
argument_list|()
operator|==
name|aConnectionId
condition|)
return|return
name|ptr
return|;
operator|++
name|i
expr_stmt|;
block|}
return|return
name|QNetworkConfigurationPrivatePointer
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|AccessPointsAvailabilityScanner
name|AccessPointsAvailabilityScanner
operator|::
name|AccessPointsAvailabilityScanner
parameter_list|(
name|SymbianEngine
modifier|&
name|owner
parameter_list|,
name|RConnectionMonitor
modifier|&
name|connectionMonitor
parameter_list|)
member_init_list|:
name|CActive
argument_list|(
name|CActive
operator|::
name|EPriorityHigh
argument_list|)
member_init_list|,
name|iOwner
argument_list|(
name|owner
argument_list|)
member_init_list|,
name|iConnectionMonitor
argument_list|(
name|connectionMonitor
argument_list|)
block|{
name|CActiveScheduler
operator|::
name|Add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~AccessPointsAvailabilityScanner
name|AccessPointsAvailabilityScanner
operator|::
name|~
name|AccessPointsAvailabilityScanner
parameter_list|()
block|{
name|Cancel
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|DoCancel
name|void
name|AccessPointsAvailabilityScanner
operator|::
name|DoCancel
parameter_list|()
block|{
name|iConnectionMonitor
operator|.
name|CancelAsyncRequest
argument_list|(
name|EConnMonGetPckgAttribute
argument_list|)
expr_stmt|;
name|iScanActive
operator|=
name|EFalse
expr_stmt|;
name|iOwner
operator|.
name|iScanInQueue
operator|=
name|EFalse
expr_stmt|;
block|}
end_function
begin_function
DECL|function|StartScanning
name|void
name|AccessPointsAvailabilityScanner
operator|::
name|StartScanning
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iScanActive
condition|)
block|{
name|iScanActive
operator|=
name|ETrue
expr_stmt|;
if|if
condition|(
name|iOwner
operator|.
name|iFirstUpdate
condition|)
block|{
comment|// On first update (the mgr is being instantiated) update only those bearers who
comment|// don't need time-consuming scans (WLAN).
comment|// Note: EBearerIdWCDMA covers also GPRS bearer
name|iConnectionMonitor
operator|.
name|GetPckgAttribute
argument_list|(
name|EBearerIdWCDMA
argument_list|,
literal|0
argument_list|,
name|KIapAvailability
argument_list|,
name|iIapBuf
argument_list|,
name|iStatus
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iConnectionMonitor
operator|.
name|GetPckgAttribute
argument_list|(
name|EBearerIdAll
argument_list|,
literal|0
argument_list|,
name|KIapAvailability
argument_list|,
name|iIapBuf
argument_list|,
name|iStatus
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|IsActive
argument_list|()
condition|)
block|{
name|SetActive
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Queue scan for getting WLAN info after first request returns
if|if
condition|(
name|iOwner
operator|.
name|iFirstUpdate
condition|)
block|{
name|iOwner
operator|.
name|iScanInQueue
operator|=
name|ETrue
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|RunL
name|void
name|AccessPointsAvailabilityScanner
operator|::
name|RunL
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|iOwner
operator|.
name|mutex
argument_list|)
decl_stmt|;
name|iScanActive
operator|=
name|EFalse
expr_stmt|;
if|if
condition|(
name|iStatus
operator|.
name|Int
argument_list|()
operator|!=
name|KErrNone
condition|)
block|{
name|iIapBuf
argument_list|()
operator|.
name|iCount
operator|=
literal|0
expr_stmt|;
name|QT_TRYCATCH_LEAVING
argument_list|(
name|iOwner
operator|.
name|accessPointScanningReady
argument_list|(
literal|false
argument_list|,
name|iIapBuf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QT_TRYCATCH_LEAVING
argument_list|(
name|iOwner
operator|.
name|accessPointScanningReady
argument_list|(
literal|true
argument_list|,
name|iIapBuf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
end_unit
