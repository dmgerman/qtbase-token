begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QCONNMANSERVICE_H
end_ifndef
begin_define
DECL|macro|QCONNMANSERVICE_H
define|#
directive|define
name|QCONNMANSERVICE_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusConnection>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusError>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusInterface>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusMessage>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusReply>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusPendingCallWatcher>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusObjectPath>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusContext>
end_include
begin_include
include|#
directive|include
file|<QMap>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|__CONNMAN_DBUS_H
end_ifndef
begin_define
DECL|macro|CONNMAN_SERVICE
define|#
directive|define
name|CONNMAN_SERVICE
value|"net.connman"
end_define
begin_define
DECL|macro|CONNMAN_PATH
define|#
directive|define
name|CONNMAN_PATH
value|"/net/connman"
end_define
begin_define
DECL|macro|CONNMAN_DEBUG_INTERFACE
define|#
directive|define
name|CONNMAN_DEBUG_INTERFACE
value|CONNMAN_SERVICE ".Debug"
end_define
begin_define
DECL|macro|CONNMAN_ERROR_INTERFACE
define|#
directive|define
name|CONNMAN_ERROR_INTERFACE
value|CONNMAN_SERVICE ".Error"
end_define
begin_define
DECL|macro|CONNMAN_AGENT_INTERFACE
define|#
directive|define
name|CONNMAN_AGENT_INTERFACE
value|CONNMAN_SERVICE ".Agent"
end_define
begin_define
DECL|macro|CONNMAN_COUNTER_INTERFACE
define|#
directive|define
name|CONNMAN_COUNTER_INTERFACE
value|CONNMAN_SERVICE ".Counter"
end_define
begin_define
DECL|macro|CONNMAN_MANAGER_INTERFACE
define|#
directive|define
name|CONNMAN_MANAGER_INTERFACE
value|CONNMAN_SERVICE ".Manager"
end_define
begin_define
DECL|macro|CONNMAN_MANAGER_PATH
define|#
directive|define
name|CONNMAN_MANAGER_PATH
value|"/"
end_define
begin_define
DECL|macro|CONNMAN_TASK_INTERFACE
define|#
directive|define
name|CONNMAN_TASK_INTERFACE
value|CONNMAN_SERVICE ".Task"
end_define
begin_define
DECL|macro|CONNMAN_PROFILE_INTERFACE
define|#
directive|define
name|CONNMAN_PROFILE_INTERFACE
value|CONNMAN_SERVICE ".Profile"
end_define
begin_define
DECL|macro|CONNMAN_SERVICE_INTERFACE
define|#
directive|define
name|CONNMAN_SERVICE_INTERFACE
value|CONNMAN_SERVICE ".Service"
end_define
begin_define
DECL|macro|CONNMAN_PROVIDER_INTERFACE
define|#
directive|define
name|CONNMAN_PROVIDER_INTERFACE
value|CONNMAN_SERVICE ".Provider"
end_define
begin_define
DECL|macro|CONNMAN_TECHNOLOGY_INTERFACE
define|#
directive|define
name|CONNMAN_TECHNOLOGY_INTERFACE
value|CONNMAN_SERVICE ".Technology"
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_END_NAMESPACE
name|QT_BEGIN_NAMESPACE
name|class
name|QConnmanManagerInterface
range|:
name|public
name|QDBusAbstractInterface
block|{
name|Q_OBJECT
name|public
operator|:
name|QConnmanManagerInterface
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QConnmanManagerInterface
argument_list|()
block|;
name|QDBusObjectPath
name|path
argument_list|()
specifier|const
block|;
name|QVariantMap
name|getProperties
argument_list|()
block|;
name|bool
name|setProperty
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QDBusVariant
operator|&
name|value
argument_list|)
block|;
name|QDBusObjectPath
name|createProfile
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|bool
name|removeProfile
argument_list|(
argument|QDBusObjectPath path
argument_list|)
block|;
name|bool
name|requestScan
argument_list|(
specifier|const
name|QString
operator|&
name|type
argument_list|)
block|;
name|bool
name|enableTechnology
argument_list|(
specifier|const
name|QString
operator|&
name|type
argument_list|)
block|;
name|bool
name|disableTechnology
argument_list|(
specifier|const
name|QString
operator|&
name|type
argument_list|)
block|;
name|QDBusObjectPath
name|connectService
argument_list|(
name|QVariantMap
operator|&
name|map
argument_list|)
block|;
name|void
name|registerAgent
argument_list|(
name|QDBusObjectPath
operator|&
name|path
argument_list|)
block|;
name|void
name|unregisterAgent
argument_list|(
argument|QDBusObjectPath path
argument_list|)
block|;
name|void
name|registerCounter
argument_list|(
argument|const QString&path
argument_list|,
argument|quint32 interval
argument_list|)
block|;
name|void
name|unregisterCounter
argument_list|(
specifier|const
name|QString
operator|&
name|path
argument_list|)
block|;
name|QString
name|requestSession
argument_list|(
specifier|const
name|QString
operator|&
name|bearerName
argument_list|)
block|;
name|void
name|releaseSession
argument_list|()
block|;
comment|// properties
name|QString
name|getState
argument_list|()
block|;
name|QStringList
name|getAvailableTechnologies
argument_list|()
block|;
name|QStringList
name|getEnabledTechnologies
argument_list|()
block|;
name|QStringList
name|getConnectedTechnologies
argument_list|()
block|;
name|QString
name|getDefaultTechnology
argument_list|()
block|;
name|bool
name|getOfflineMode
argument_list|()
block|;
name|QString
name|getActiveProfile
argument_list|()
block|;
name|QStringList
name|getProfiles
argument_list|()
block|;
name|QStringList
name|getTechnologies
argument_list|()
block|;
name|QStringList
name|getServices
argument_list|()
block|;
name|QDBusObjectPath
name|lookupService
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|QString
name|getPathForTechnology
argument_list|(
specifier|const
name|QString
operator|&
name|tech
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|propertyChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QDBusVariant
operator|&
name|value
argument_list|)
block|;
name|void
name|stateChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|void
name|propertyChangedContext
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QDBusVariant
operator|&
argument_list|)
block|;
name|protected
operator|:
name|void
name|connectNotify
argument_list|(
specifier|const
name|QMetaMethod
operator|&
name|signal
argument_list|)
block|;
name|void
name|disconnectNotify
argument_list|(
specifier|const
name|QMetaMethod
operator|&
name|signal
argument_list|)
block|;
name|QVariant
name|getProperty
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QConnmanProfileInterfacePrivate
name|class
name|QConnmanProfileInterfacePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QConnmanProfileInterface
range|:
name|public
name|QDBusAbstractInterface
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QConnmanProfileInterface
argument_list|(
specifier|const
name|QString
operator|&
name|dbusPathName
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QConnmanProfileInterface
argument_list|()
block|;
name|QVariantMap
name|getProperties
argument_list|()
block|;
comment|// properties
name|QString
name|getName
argument_list|()
block|;
name|bool
name|isOfflineMode
argument_list|()
block|;
name|QStringList
name|getServices
argument_list|()
block|;
name|Q_SIGNALS
operator|:
name|void
name|propertyChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QDBusVariant
operator|&
name|value
argument_list|)
block|;
name|private
operator|:
name|QConnmanProfileInterfacePrivate
operator|*
name|d
block|;
name|protected
operator|:
name|void
name|connectNotify
argument_list|(
specifier|const
name|QMetaMethod
operator|&
name|signal
argument_list|)
block|;
name|void
name|disconnectNotify
argument_list|(
specifier|const
name|QMetaMethod
operator|&
name|signal
argument_list|)
block|;
name|QVariant
name|getProperty
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QConnmanServiceInterface
range|:
name|public
name|QDBusAbstractInterface
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QConnmanServiceInterface
argument_list|(
specifier|const
name|QString
operator|&
name|dbusPathName
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QConnmanServiceInterface
argument_list|()
block|;
name|QVariantMap
name|getProperties
argument_list|()
block|;
comment|// clearProperty
name|void
name|connect
argument_list|()
block|;
name|void
name|disconnect
argument_list|()
block|;
name|void
name|remove
argument_list|()
block|;
comment|// void moveBefore(QDBusObjectPath&service);
comment|// void moveAfter(QDBusObjectPath&service);
comment|// properties
name|QString
name|getState
argument_list|()
block|;
name|QString
name|getError
argument_list|()
block|;
name|QString
name|getName
argument_list|()
block|;
name|QString
name|getType
argument_list|()
block|;
name|QString
name|getMode
argument_list|()
block|;
name|QString
name|getSecurity
argument_list|()
block|;
name|QString
name|getPassphrase
argument_list|()
block|;
name|bool
name|isPassphraseRequired
argument_list|()
block|;
name|quint8
name|getSignalStrength
argument_list|()
block|;
name|bool
name|isFavorite
argument_list|()
block|;
name|bool
name|isImmutable
argument_list|()
block|;
name|bool
name|isAutoConnect
argument_list|()
block|;
name|bool
name|isSetupRequired
argument_list|()
block|;
name|QString
name|getAPN
argument_list|()
block|;
name|QString
name|getMCC
argument_list|()
block|;
name|QString
name|getMNC
argument_list|()
block|;
name|bool
name|isRoaming
argument_list|()
block|;
name|QStringList
name|getNameservers
argument_list|()
block|;
name|QStringList
name|getDomains
argument_list|()
block|;
name|QVariantMap
name|getIPv4
argument_list|()
block|;
name|QVariantMap
name|getIPv4Configuration
argument_list|()
block|;
name|QVariantMap
name|getProxy
argument_list|()
block|;
name|QVariantMap
name|getEthernet
argument_list|()
block|;
name|QString
name|getMethod
argument_list|()
block|;
name|QString
name|getInterface
argument_list|()
block|;
name|QString
name|getMacAddress
argument_list|()
block|;
name|quint16
name|getMtu
argument_list|()
block|;
name|quint16
name|getSpeed
argument_list|()
block|;
name|QString
name|getDuplex
argument_list|()
block|;
name|bool
name|isOfflineMode
argument_list|()
block|;
name|QStringList
name|getServices
argument_list|()
block|;
name|Q_SIGNALS
operator|:
name|void
name|propertyChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QDBusVariant
operator|&
name|value
argument_list|)
block|;
name|void
name|propertyChangedContext
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QDBusVariant
operator|&
argument_list|)
block|;
name|protected
operator|:
name|void
name|connectNotify
argument_list|(
specifier|const
name|QMetaMethod
operator|&
name|signal
argument_list|)
block|;
name|void
name|disconnectNotify
argument_list|(
specifier|const
name|QMetaMethod
operator|&
name|signal
argument_list|)
block|;
name|QVariant
name|getProperty
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QConnmanTechnologyInterface
range|:
name|public
name|QDBusAbstractInterface
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QConnmanTechnologyInterface
argument_list|(
specifier|const
name|QString
operator|&
name|dbusPathName
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QConnmanTechnologyInterface
argument_list|()
block|;
name|QVariantMap
name|getProperties
argument_list|()
block|;
comment|// properties
name|QString
name|getState
argument_list|()
block|;
name|QString
name|getName
argument_list|()
block|;
name|QString
name|getType
argument_list|()
block|;
name|Q_SIGNALS
operator|:
name|void
name|propertyChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QDBusVariant
operator|&
name|value
argument_list|)
block|;
name|void
name|propertyChangedContext
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QDBusVariant
operator|&
argument_list|)
block|;
name|protected
operator|:
name|void
name|connectNotify
argument_list|(
specifier|const
name|QMetaMethod
operator|&
name|signal
argument_list|)
block|;
name|void
name|disconnectNotify
argument_list|(
specifier|const
name|QMetaMethod
operator|&
name|signal
argument_list|)
block|;
name|QVariant
name|getProperty
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;  }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QConnmanAgentInterface
range|:
name|public
name|QDBusAbstractInterface
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QConnmanAgentInterface
argument_list|(
specifier|const
name|QString
operator|&
name|dbusPathName
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QConnmanAgentInterface
argument_list|()
block|;
name|void
name|release
argument_list|()
block|;
name|void
name|reportError
argument_list|(
name|QDBusObjectPath
operator|&
name|path
argument_list|,
specifier|const
name|QString
operator|&
name|error
argument_list|)
block|;
comment|//    dict requestInput(QDBusObjectPath&path, dict fields);
name|void
name|cancel
argument_list|()
block|;
name|protected
operator|:
name|void
name|connectNotify
argument_list|(
specifier|const
name|QMetaMethod
operator|&
name|signal
argument_list|)
block|;
name|void
name|disconnectNotify
argument_list|(
specifier|const
name|QMetaMethod
operator|&
name|signal
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QConnmanCounterInterfacePrivate
name|class
name|QConnmanCounterInterfacePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QConnmanCounterInterface
range|:
name|public
name|QDBusAbstractInterface
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QConnmanCounterInterface
argument_list|(
specifier|const
name|QString
operator|&
name|dbusPathName
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QConnmanCounterInterface
argument_list|()
block|;
comment|//    void release();
name|QString
name|getInterface
argument_list|()
block|;
name|quint32
name|getReceivedByteCount
argument_list|()
block|;
name|quint32
name|getTransmittedByteCount
argument_list|()
block|;
name|quint64
name|getTimeOnline
argument_list|()
block|;
name|private
operator|:
name|QConnmanCounterInterfacePrivate
operator|*
name|d
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QObject
name|class
name|QConnmanDBusHelper
range|:
name|public
name|QObject
decl_stmt|,
name|protected
name|QDBusContext
block|{
name|Q_OBJECT
name|public
range|:
name|QConnmanDBusHelper
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
decl_stmt|;
operator|~
name|QConnmanDBusHelper
argument_list|()
expr_stmt|;
name|public
name|slots
range|:
name|void
name|propertyChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QDBusVariant
operator|&
argument_list|)
decl_stmt|;
name|Q_SIGNALS
label|:
name|void
name|propertyChangedContext
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QDBusVariant
modifier|&
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QCONNMANSERVICE_H
end_comment
end_unit
