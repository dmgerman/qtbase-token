begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qconnmanengine.h"
end_include
begin_include
include|#
directive|include
file|"qconnmanservice_linux_p.h"
end_include
begin_include
include|#
directive|include
file|"../qnetworksession_impl.h"
end_include
begin_include
include|#
directive|include
file|<QtNetwork/private/qnetworkconfiguration_p.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworksession.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusConnection>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusInterface>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusMessage>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusReply>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QConnmanEngine
name|QConnmanEngine
operator|::
name|QConnmanEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QBearerEngineImpl
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|connmanManager
argument_list|(
operator|new
name|QConnmanManagerInterface
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|ofonoManager
argument_list|(
operator|new
name|QOfonoManagerInterface
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|ofonoNetwork
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ofonoContextManager
argument_list|(
literal|0
argument_list|)
block|{
name|qDBusRegisterMetaType
argument_list|<
name|ConnmanMap
argument_list|>
argument_list|()
expr_stmt|;
name|qDBusRegisterMetaType
argument_list|<
name|ConnmanMapList
argument_list|>
argument_list|()
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|ConnmanMapList
argument_list|>
argument_list|(
literal|"ConnmanMapList"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QConnmanEngine
name|QConnmanEngine
operator|::
name|~
name|QConnmanEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|connmanAvailable
name|bool
name|QConnmanEngine
operator|::
name|connmanAvailable
parameter_list|()
specifier|const
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|connmanManager
operator|->
name|isValid
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|initialize
name|void
name|QConnmanEngine
operator|::
name|initialize
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|ofonoManager
argument_list|,
name|SIGNAL
argument_list|(
name|modemChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|changedModem
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ofonoNetwork
operator|=
operator|new
name|QOfonoNetworkRegistrationInterface
argument_list|(
name|ofonoManager
operator|->
name|currentModem
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|ofonoContextManager
operator|=
operator|new
name|QOfonoDataConnectionManagerInterface
argument_list|(
name|ofonoManager
operator|->
name|currentModem
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|ofonoContextManager
argument_list|,
name|SIGNAL
argument_list|(
name|roamingAllowedChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|reEvaluateCellular
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|connmanManager
argument_list|,
name|SIGNAL
argument_list|(
name|servicesChanged
argument_list|(
name|ConnmanMapList
argument_list|,
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateServices
argument_list|(
name|ConnmanMapList
argument_list|,
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|connmanManager
argument_list|,
name|SIGNAL
argument_list|(
name|servicesReady
argument_list|(
name|QStringList
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|servicesReady
argument_list|(
name|QStringList
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|connmanManager
argument_list|,
name|SIGNAL
argument_list|(
name|scanFinished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|finishedScan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|servPath
decl|,
name|connmanManager
operator|->
name|getServices
argument_list|()
control|)
block|{
name|addServiceConfiguration
argument_list|(
name|servPath
argument_list|)
expr_stmt|;
block|}
name|Q_EMIT
name|updateCompleted
argument_list|()
decl_stmt|;
block|}
end_function
begin_function
DECL|function|changedModem
name|void
name|QConnmanEngine
operator|::
name|changedModem
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|ofonoNetwork
condition|)
operator|delete
name|ofonoNetwork
expr_stmt|;
name|ofonoNetwork
operator|=
operator|new
name|QOfonoNetworkRegistrationInterface
argument_list|(
name|ofonoManager
operator|->
name|currentModem
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|ofonoContextManager
condition|)
operator|delete
name|ofonoContextManager
expr_stmt|;
name|ofonoContextManager
operator|=
operator|new
name|QOfonoDataConnectionManagerInterface
argument_list|(
name|ofonoManager
operator|->
name|currentModem
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|servicesReady
name|void
name|QConnmanEngine
operator|::
name|servicesReady
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|list
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|servPath
decl|,
name|list
control|)
block|{
name|addServiceConfiguration
argument_list|(
name|servPath
argument_list|)
expr_stmt|;
block|}
name|Q_EMIT
name|updateCompleted
argument_list|()
decl_stmt|;
block|}
end_function
begin_function
DECL|function|getConfigurations
name|QList
argument_list|<
name|QNetworkConfigurationPrivate
modifier|*
argument_list|>
name|QConnmanEngine
operator|::
name|getConfigurations
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QNetworkConfigurationPrivate
modifier|*
argument_list|>
name|fetchedConfigurations
decl_stmt|;
name|QNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|foundConfigurations
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QNetworkConfigurationPrivate
modifier|*
name|config
init|=
operator|new
name|QNetworkConfigurationPrivate
decl_stmt|;
name|cpPriv
operator|=
name|foundConfigurations
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|config
operator|->
name|name
operator|=
name|cpPriv
operator|->
name|name
expr_stmt|;
name|config
operator|->
name|isValid
operator|=
name|cpPriv
operator|->
name|isValid
expr_stmt|;
name|config
operator|->
name|id
operator|=
name|cpPriv
operator|->
name|id
expr_stmt|;
name|config
operator|->
name|state
operator|=
name|cpPriv
operator|->
name|state
expr_stmt|;
name|config
operator|->
name|type
operator|=
name|cpPriv
operator|->
name|type
expr_stmt|;
name|config
operator|->
name|roamingSupported
operator|=
name|cpPriv
operator|->
name|roamingSupported
expr_stmt|;
name|config
operator|->
name|purpose
operator|=
name|cpPriv
operator|->
name|purpose
expr_stmt|;
name|config
operator|->
name|bearerType
operator|=
name|cpPriv
operator|->
name|bearerType
expr_stmt|;
name|fetchedConfigurations
operator|.
name|append
argument_list|(
name|config
argument_list|)
expr_stmt|;
operator|delete
name|config
expr_stmt|;
block|}
return|return
name|fetchedConfigurations
return|;
block|}
end_function
begin_function
DECL|function|getInterfaceFromId
name|QString
name|QConnmanEngine
operator|::
name|getInterfaceFromId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|configInterfaces
operator|.
name|value
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hasIdentifier
name|bool
name|QConnmanEngine
operator|::
name|hasIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|connectToId
name|void
name|QConnmanEngine
operator|::
name|connectToId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QConnmanServiceInterface
modifier|*
name|serv
init|=
name|connmanServiceInterfaces
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|serv
operator|->
name|isValid
argument_list|()
condition|)
block|{
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|QBearerEngineImpl
operator|::
name|InterfaceLookupError
argument_list|)
emit|;
block|}
else|else
block|{
name|serv
operator|->
name|connect
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|disconnectFromId
name|void
name|QConnmanEngine
operator|::
name|disconnectFromId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QConnmanServiceInterface
modifier|*
name|serv
init|=
name|connmanServiceInterfaces
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|serv
operator|->
name|isValid
argument_list|()
condition|)
block|{
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|DisconnectionError
argument_list|)
emit|;
block|}
else|else
block|{
name|serv
operator|->
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|requestUpdate
name|void
name|QConnmanEngine
operator|::
name|requestUpdate
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|doRequestUpdate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doRequestUpdate
name|void
name|QConnmanEngine
operator|::
name|doRequestUpdate
parameter_list|()
block|{
name|connmanManager
operator|->
name|requestScan
argument_list|(
literal|"wifi"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|finishedScan
name|void
name|QConnmanEngine
operator|::
name|finishedScan
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|updateServices
name|void
name|QConnmanEngine
operator|::
name|updateServices
parameter_list|(
specifier|const
name|ConnmanMapList
modifier|&
name|changed
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
modifier|&
name|removed
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|objectPath
decl|,
name|removed
control|)
block|{
name|removeConfiguration
argument_list|(
name|objectPath
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|ConnmanMap
modifier|&
name|connmanMap
decl|,
name|changed
control|)
block|{
specifier|const
name|QString
name|id
init|=
name|connmanMap
operator|.
name|objectPath
operator|.
name|path
argument_list|()
decl_stmt|;
if|if
condition|(
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|configurationChange
argument_list|(
name|connmanServiceInterfaces
operator|.
name|value
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addServiceConfiguration
argument_list|(
name|connmanMap
operator|.
name|objectPath
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Q_EMIT
name|updateCompleted
argument_list|()
decl_stmt|;
block|}
end_function
begin_function
DECL|function|sessionStateForId
name|QNetworkSession
operator|::
name|State
name|QConnmanEngine
operator|::
name|sessionStateForId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptr
operator|||
operator|!
name|ptr
operator|->
name|isValid
condition|)
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
name|QString
name|service
init|=
name|id
decl_stmt|;
name|QConnmanServiceInterface
modifier|*
name|serv
init|=
name|connmanServiceInterfaces
operator|.
name|value
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|QString
name|servState
init|=
name|serv
operator|->
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|serv
operator|->
name|favorite
argument_list|()
operator|&&
operator|(
name|servState
operator|==
name|QLatin1String
argument_list|(
literal|"idle"
argument_list|)
operator|||
name|servState
operator|==
name|QLatin1String
argument_list|(
literal|"failure"
argument_list|)
operator|)
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|Disconnected
return|;
block|}
if|if
condition|(
name|servState
operator|==
name|QLatin1String
argument_list|(
literal|"association"
argument_list|)
operator|||
name|servState
operator|==
name|QLatin1String
argument_list|(
literal|"configuration"
argument_list|)
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|Connecting
return|;
block|}
if|if
condition|(
name|servState
operator|==
name|QLatin1String
argument_list|(
literal|"online"
argument_list|)
operator|||
name|servState
operator|==
name|QLatin1String
argument_list|(
literal|"ready"
argument_list|)
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|Connected
return|;
block|}
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|Disconnected
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Defined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Defined
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|NotAvailable
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Undefined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Undefined
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|NotAvailable
return|;
block|}
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
block|}
end_function
begin_function
DECL|function|bytesWritten
name|quint64
name|QConnmanEngine
operator|::
name|bytesWritten
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
comment|//TODO use connman counter API
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|quint64
name|result
init|=
literal|0
decl_stmt|;
name|QString
name|devFile
init|=
name|getInterfaceFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|QFile
name|tx
argument_list|(
literal|"/sys/class/net/"
operator|+
name|devFile
operator|+
literal|"/statistics/tx_bytes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|in
argument_list|(
operator|&
name|tx
argument_list|)
decl_stmt|;
name|in
operator|>>
name|result
expr_stmt|;
name|tx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|bytesReceived
name|quint64
name|QConnmanEngine
operator|::
name|bytesReceived
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
comment|//TODO use connman counter API
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|quint64
name|result
init|=
literal|0
decl_stmt|;
name|QString
name|devFile
init|=
name|getInterfaceFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|QFile
name|rx
argument_list|(
literal|"/sys/class/net/"
operator|+
name|devFile
operator|+
literal|"/statistics/rx_bytes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rx
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|in
argument_list|(
operator|&
name|rx
argument_list|)
decl_stmt|;
name|in
operator|>>
name|result
expr_stmt|;
name|rx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|startTime
name|quint64
name|QConnmanEngine
operator|::
name|startTime
parameter_list|(
specifier|const
name|QString
modifier|&
comment|/*id*/
parameter_list|)
block|{
comment|// TODO
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeTime
operator|.
name|isNull
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|activeTime
operator|.
name|secsTo
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|capabilities
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|QConnmanEngine
operator|::
name|capabilities
parameter_list|()
specifier|const
block|{
return|return
name|QNetworkConfigurationManager
operator|::
name|ForcedRoaming
operator||
name|QNetworkConfigurationManager
operator|::
name|DataStatistics
operator||
name|QNetworkConfigurationManager
operator|::
name|CanStartAndStopInterfaces
operator||
name|QNetworkConfigurationManager
operator|::
name|NetworkSessionRequired
return|;
block|}
end_function
begin_function
DECL|function|createSessionBackend
name|QNetworkSessionPrivate
modifier|*
name|QConnmanEngine
operator|::
name|createSessionBackend
parameter_list|()
block|{
return|return
operator|new
name|QNetworkSessionPrivateImpl
return|;
block|}
end_function
begin_function
DECL|function|defaultConfiguration
name|QNetworkConfigurationPrivatePointer
name|QConnmanEngine
operator|::
name|defaultConfiguration
parameter_list|()
block|{
specifier|const
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QString&servPath
argument_list|,
argument|connmanManager->getServices()
argument_list|)
block|{
if|if
condition|(
name|connmanServiceInterfaces
operator|.
name|contains
argument_list|(
name|servPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|servPath
argument_list|)
condition|)
return|return
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|servPath
argument_list|)
return|;
block|}
block|}
return|return
name|QNetworkConfigurationPrivatePointer
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|serviceStateChanged
name|void
name|QConnmanEngine
operator|::
name|serviceStateChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|state
parameter_list|)
block|{
name|QConnmanServiceInterface
modifier|*
name|service
init|=
name|qobject_cast
argument_list|<
name|QConnmanServiceInterface
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|configurationChange
argument_list|(
name|service
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|QStringLiteral
argument_list|(
literal|"failure"
argument_list|)
condition|)
block|{
emit|emit
name|connectionError
argument_list|(
name|service
operator|->
name|path
argument_list|()
argument_list|,
name|ConnectError
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|configurationChange
name|void
name|QConnmanEngine
operator|::
name|configurationChange
parameter_list|(
name|QConnmanServiceInterface
modifier|*
name|serv
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QString
name|id
init|=
name|serv
operator|->
name|path
argument_list|()
decl_stmt|;
if|if
condition|(
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|bool
name|changed
init|=
literal|false
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|QString
name|networkName
init|=
name|serv
operator|->
name|name
argument_list|()
decl_stmt|;
name|QNetworkConfiguration
operator|::
name|StateFlags
name|curState
init|=
name|getStateForService
argument_list|(
name|serv
operator|->
name|path
argument_list|()
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ptr
operator|->
name|isValid
condition|)
block|{
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ptr
operator|->
name|name
operator|!=
name|networkName
condition|)
block|{
name|ptr
operator|->
name|name
operator|=
name|networkName
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ptr
operator|->
name|state
operator|!=
name|curState
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|curState
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|getStateForService
name|QNetworkConfiguration
operator|::
name|StateFlags
name|QConnmanEngine
operator|::
name|getStateForService
parameter_list|(
specifier|const
name|QString
modifier|&
name|service
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QConnmanServiceInterface
modifier|*
name|serv
init|=
name|connmanServiceInterfaces
operator|.
name|value
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|QString
name|state
init|=
name|serv
operator|->
name|state
argument_list|()
decl_stmt|;
name|QNetworkConfiguration
operator|::
name|StateFlags
name|flag
init|=
name|QNetworkConfiguration
operator|::
name|Defined
decl_stmt|;
if|if
condition|(
name|serv
operator|->
name|type
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"cellular"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|serv
operator|->
name|autoConnect
argument_list|()
operator|||
operator|(
name|serv
operator|->
name|roaming
argument_list|()
operator|&&
operator|!
name|isRoamingAllowed
argument_list|(
name|serv
operator|->
name|path
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|flag
operator|=
operator|(
name|flag
operator||
name|QNetworkConfiguration
operator|::
name|Defined
operator|)
expr_stmt|;
block|}
else|else
block|{
name|flag
operator|=
operator|(
name|flag
operator||
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|serv
operator|->
name|favorite
argument_list|()
condition|)
block|{
if|if
condition|(
name|serv
operator|->
name|autoConnect
argument_list|()
condition|)
block|{
name|flag
operator|=
operator|(
name|flag
operator||
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|flag
operator|=
name|QNetworkConfiguration
operator|::
name|Undefined
expr_stmt|;
block|}
block|}
if|if
condition|(
name|state
operator|==
name|QLatin1String
argument_list|(
literal|"online"
argument_list|)
operator|||
name|state
operator|==
name|QLatin1String
argument_list|(
literal|"ready"
argument_list|)
condition|)
block|{
name|flag
operator|=
operator|(
name|flag
operator||
name|QNetworkConfiguration
operator|::
name|Active
operator|)
expr_stmt|;
block|}
return|return
name|flag
return|;
block|}
end_function
begin_function
DECL|function|typeToBearer
name|QNetworkConfiguration
operator|::
name|BearerType
name|QConnmanEngine
operator|::
name|typeToBearer
parameter_list|(
specifier|const
name|QString
modifier|&
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"wifi"
argument_list|)
condition|)
return|return
name|QNetworkConfiguration
operator|::
name|BearerWLAN
return|;
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"ethernet"
argument_list|)
condition|)
return|return
name|QNetworkConfiguration
operator|::
name|BearerEthernet
return|;
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"bluetooth"
argument_list|)
condition|)
return|return
name|QNetworkConfiguration
operator|::
name|BearerBluetooth
return|;
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"cellular"
argument_list|)
condition|)
block|{
return|return
name|ofonoTechToBearerType
argument_list|(
name|type
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|QLatin1String
argument_list|(
literal|"wimax"
argument_list|)
condition|)
return|return
name|QNetworkConfiguration
operator|::
name|BearerWiMAX
return|;
return|return
name|QNetworkConfiguration
operator|::
name|BearerUnknown
return|;
block|}
end_function
begin_function
DECL|function|ofonoTechToBearerType
name|QNetworkConfiguration
operator|::
name|BearerType
name|QConnmanEngine
operator|::
name|ofonoTechToBearerType
parameter_list|(
specifier|const
name|QString
modifier|&
comment|/*type*/
parameter_list|)
block|{
if|if
condition|(
name|ofonoNetwork
condition|)
block|{
name|QString
name|currentTechnology
init|=
name|ofonoNetwork
operator|->
name|getTechnology
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTechnology
operator|==
name|QLatin1String
argument_list|(
literal|"gsm"
argument_list|)
condition|)
block|{
return|return
name|QNetworkConfiguration
operator|::
name|Bearer2G
return|;
block|}
elseif|else
if|if
condition|(
name|currentTechnology
operator|==
name|QLatin1String
argument_list|(
literal|"edge"
argument_list|)
condition|)
block|{
return|return
name|QNetworkConfiguration
operator|::
name|BearerCDMA2000
return|;
comment|//wrong, I know
block|}
elseif|else
if|if
condition|(
name|currentTechnology
operator|==
name|QLatin1String
argument_list|(
literal|"umts"
argument_list|)
condition|)
block|{
return|return
name|QNetworkConfiguration
operator|::
name|BearerWCDMA
return|;
block|}
elseif|else
if|if
condition|(
name|currentTechnology
operator|==
name|QLatin1String
argument_list|(
literal|"hspa"
argument_list|)
condition|)
block|{
return|return
name|QNetworkConfiguration
operator|::
name|BearerHSPA
return|;
block|}
elseif|else
if|if
condition|(
name|currentTechnology
operator|==
name|QLatin1String
argument_list|(
literal|"lte"
argument_list|)
condition|)
block|{
return|return
name|QNetworkConfiguration
operator|::
name|BearerWiMAX
return|;
comment|//not exact
block|}
block|}
return|return
name|QNetworkConfiguration
operator|::
name|BearerUnknown
return|;
block|}
end_function
begin_function
DECL|function|isRoamingAllowed
name|bool
name|QConnmanEngine
operator|::
name|isRoamingAllowed
parameter_list|(
specifier|const
name|QString
modifier|&
name|context
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|dcPath
decl|,
name|ofonoContextManager
operator|->
name|contexts
argument_list|()
control|)
block|{
if|if
condition|(
name|dcPath
operator|.
name|contains
argument_list|(
name|context
operator|.
name|section
argument_list|(
literal|"_"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|ofonoContextManager
operator|->
name|roamingAllowed
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|removeConfiguration
name|void
name|QConnmanEngine
operator|::
name|removeConfiguration
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|disconnect
argument_list|(
name|connmanServiceInterfaces
operator|.
name|value
argument_list|(
name|id
argument_list|)
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|serviceStateChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|serviceNetworks
operator|.
name|removeOne
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QConnmanServiceInterface
modifier|*
name|service
init|=
name|connmanServiceInterfaces
operator|.
name|take
argument_list|(
name|id
argument_list|)
decl_stmt|;
operator|delete
name|service
expr_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|take
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|foundConfigurations
operator|.
name|removeOne
argument_list|(
name|ptr
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|addServiceConfiguration
name|void
name|QConnmanEngine
operator|::
name|addServiceConfiguration
parameter_list|(
specifier|const
name|QString
modifier|&
name|servicePath
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connmanServiceInterfaces
operator|.
name|contains
argument_list|(
name|servicePath
argument_list|)
condition|)
block|{
name|QConnmanServiceInterface
modifier|*
name|serv
init|=
operator|new
name|QConnmanServiceInterface
argument_list|(
name|servicePath
argument_list|)
decl_stmt|;
name|connmanServiceInterfaces
operator|.
name|insert
argument_list|(
name|serv
operator|->
name|path
argument_list|()
argument_list|,
name|serv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|servicePath
argument_list|)
condition|)
block|{
name|serviceNetworks
operator|.
name|append
argument_list|(
name|servicePath
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|connmanServiceInterfaces
operator|.
name|value
argument_list|(
name|servicePath
argument_list|)
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|serviceStateChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
operator|new
name|QNetworkConfigurationPrivate
argument_list|()
decl_stmt|;
name|QConnmanServiceInterface
modifier|*
name|service
init|=
name|connmanServiceInterfaces
operator|.
name|value
argument_list|(
name|servicePath
argument_list|)
decl_stmt|;
name|QString
name|networkName
init|=
name|service
operator|->
name|name
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|connectionType
init|=
name|service
operator|->
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionType
operator|==
name|QLatin1String
argument_list|(
literal|"ethernet"
argument_list|)
condition|)
block|{
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerEthernet
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|connectionType
operator|==
name|QLatin1String
argument_list|(
literal|"wifi"
argument_list|)
condition|)
block|{
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerWLAN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|connectionType
operator|==
name|QLatin1String
argument_list|(
literal|"cellular"
argument_list|)
condition|)
block|{
name|cpPriv
operator|->
name|bearerType
operator|=
name|ofonoTechToBearerType
argument_list|(
name|QLatin1String
argument_list|(
literal|"cellular"
argument_list|)
argument_list|)
expr_stmt|;
name|cpPriv
operator|->
name|roamingSupported
operator|=
name|service
operator|->
name|roaming
argument_list|()
operator|&&
name|isRoamingAllowed
argument_list|(
name|servicePath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|connectionType
operator|==
name|QLatin1String
argument_list|(
literal|"wimax"
argument_list|)
condition|)
block|{
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerWiMAX
expr_stmt|;
block|}
else|else
block|{
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerUnknown
expr_stmt|;
block|}
name|cpPriv
operator|->
name|name
operator|=
name|networkName
expr_stmt|;
name|cpPriv
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|cpPriv
operator|->
name|id
operator|=
name|servicePath
expr_stmt|;
name|cpPriv
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
if|if
condition|(
name|service
operator|->
name|security
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"none"
argument_list|)
condition|)
block|{
name|cpPriv
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|PublicPurpose
expr_stmt|;
block|}
else|else
block|{
name|cpPriv
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|PrivatePurpose
expr_stmt|;
block|}
name|cpPriv
operator|->
name|state
operator|=
name|getStateForService
argument_list|(
name|servicePath
argument_list|)
expr_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
name|cpPriv
argument_list|)
decl_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|ptr
operator|->
name|id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectionType
operator|==
name|QLatin1String
argument_list|(
literal|"cellular"
argument_list|)
condition|)
block|{
name|foundConfigurations
operator|.
name|append
argument_list|(
name|cpPriv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|foundConfigurations
operator|.
name|prepend
argument_list|(
name|cpPriv
argument_list|)
expr_stmt|;
block|}
name|configInterfaces
index|[
name|cpPriv
operator|->
name|id
index|]
operator|=
name|service
operator|->
name|serviceInterface
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|Q_EMIT
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|requiresPolling
name|bool
name|QConnmanEngine
operator|::
name|requiresPolling
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|reEvaluateCellular
name|void
name|QConnmanEngine
operator|::
name|reEvaluateCellular
parameter_list|()
block|{
name|Q_FOREACH
argument_list|(
argument|const QString&servicePath
argument_list|,
argument|connmanManager->getServices()
argument_list|)
block|{
if|if
condition|(
name|servicePath
operator|.
name|contains
argument_list|(
literal|"cellular"
argument_list|)
operator|&&
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|servicePath
argument_list|)
condition|)
block|{
name|configurationChange
argument_list|(
name|connmanServiceInterfaces
operator|.
name|value
argument_list|(
name|servicePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
end_unit
