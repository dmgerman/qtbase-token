begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPLATFORMDEFS_WIN_H
end_ifndef
begin_define
DECL|macro|QPLATFORMDEFS_WIN_H
define|#
directive|define
name|QPLATFORMDEFS_WIN_H
end_define
begin_include
include|#
directive|include
file|<winsock2.h>
end_include
begin_include
include|#
directive|include
file|<mswsock.h>
end_include
begin_undef
DECL|macro|interface
undef|#
directive|undef
name|interface
end_undef
begin_include
include|#
directive|include
file|<winioctl.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|NS_NLA
DECL|macro|NS_NLA
define|#
directive|define
name|NS_NLA
value|15
ifndef|#
directive|ifndef
name|NLA_NAMESPACE_GUID
DECL|enum|NLA_BLOB_DATA_TYPE
name|enum
name|NLA_BLOB_DATA_TYPE
block|{
DECL|enumerator|NLA_RAW_DATA
name|NLA_RAW_DATA
operator|=
literal|0
operator|,
DECL|enumerator|NLA_INTERFACE
name|NLA_INTERFACE
operator|=
literal|1
operator|,
DECL|enumerator|NLA_802_1X_LOCATION
name|NLA_802_1X_LOCATION
operator|=
literal|2
operator|,
DECL|enumerator|NLA_CONNECTIVITY
name|NLA_CONNECTIVITY
operator|=
literal|3
operator|,
DECL|enumerator|NLA_ICS
name|NLA_ICS
operator|=
literal|4
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_enum
DECL|enum|NLA_CONNECTIVITY_TYPE
enum|enum
name|NLA_CONNECTIVITY_TYPE
block|{
DECL|enumerator|NLA_NETWORK_AD_HOC
name|NLA_NETWORK_AD_HOC
init|=
literal|0
block|,
DECL|enumerator|NLA_NETWORK_MANAGED
name|NLA_NETWORK_MANAGED
init|=
literal|1
block|,
DECL|enumerator|NLA_NETWORK_UNMANAGED
name|NLA_NETWORK_UNMANAGED
init|=
literal|2
block|,
DECL|enumerator|NLA_NETWORK_UNKNOWN
name|NLA_NETWORK_UNKNOWN
init|=
literal|3
block|}
enum|;
end_enum
begin_enum
DECL|enum|NLA_INTERNET
enum|enum
name|NLA_INTERNET
block|{
DECL|enumerator|NLA_INTERNET_UNKNOWN
name|NLA_INTERNET_UNKNOWN
init|=
literal|0
block|,
DECL|enumerator|NLA_INTERNET_NO
name|NLA_INTERNET_NO
init|=
literal|1
block|,
DECL|enumerator|NLA_INTERNET_YES
name|NLA_INTERNET_YES
init|=
literal|2
block|}
enum|;
end_enum
begin_struct
DECL|struct|NLA_BLOB
struct|struct
name|NLA_BLOB
block|{
struct|struct
block|{
DECL|member|type
name|NLA_BLOB_DATA_TYPE
name|type
decl_stmt|;
DECL|member|dwSize
name|DWORD
name|dwSize
decl_stmt|;
DECL|member|nextOffset
name|DWORD
name|nextOffset
decl_stmt|;
block|}
DECL|member|header
name|header
struct|;
union|union
block|{
comment|// NLA_RAW_DATA
DECL|member|rawData
name|CHAR
name|rawData
index|[
literal|1
index|]
decl_stmt|;
comment|// NLA_INTERFACE
struct|struct
block|{
DECL|member|dwType
name|DWORD
name|dwType
decl_stmt|;
DECL|member|dwSpeed
name|DWORD
name|dwSpeed
decl_stmt|;
DECL|member|adapterName
name|CHAR
name|adapterName
index|[
literal|1
index|]
decl_stmt|;
block|}
DECL|member|interfaceData
name|interfaceData
struct|;
comment|// NLA_802_1X_LOCATION
struct|struct
block|{
DECL|member|information
name|CHAR
name|information
index|[
literal|1
index|]
decl_stmt|;
block|}
DECL|member|locationData
name|locationData
struct|;
comment|// NLA_CONNECTIVITY
struct|struct
block|{
DECL|member|type
name|NLA_CONNECTIVITY_TYPE
name|type
decl_stmt|;
DECL|member|internet
name|NLA_INTERNET
name|internet
decl_stmt|;
block|}
DECL|member|connectivity
name|connectivity
struct|;
comment|// NLA_ICS
struct|struct
block|{
struct|struct
block|{
DECL|member|speed
name|DWORD
name|speed
decl_stmt|;
DECL|member|type
name|DWORD
name|type
decl_stmt|;
DECL|member|state
name|DWORD
name|state
decl_stmt|;
DECL|member|machineName
name|WCHAR
name|machineName
index|[
literal|256
index|]
decl_stmt|;
DECL|member|sharedAdapterName
name|WCHAR
name|sharedAdapterName
index|[
literal|256
index|]
decl_stmt|;
block|}
DECL|member|remote
name|remote
struct|;
block|}
DECL|member|ICS
name|ICS
struct|;
block|}
DECL|member|data
name|data
union|;
block|}
struct|;
end_struct
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// NLA_NAMESPACE_GUID
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_enum
DECL|enum|NDIS_MEDIUM
enum|enum
name|NDIS_MEDIUM
block|{
DECL|enumerator|NdisMedium802_3
name|NdisMedium802_3
init|=
literal|0
block|, }
enum|;
end_enum
begin_enum
DECL|enum|NDIS_PHYSICAL_MEDIUM
enum|enum
name|NDIS_PHYSICAL_MEDIUM
block|{
DECL|enumerator|NdisPhysicalMediumWirelessLan
name|NdisPhysicalMediumWirelessLan
init|=
literal|1
block|,
DECL|enumerator|NdisPhysicalMediumBluetooth
name|NdisPhysicalMediumBluetooth
init|=
literal|10
block|,
DECL|enumerator|NdisPhysicalMediumWiMax
name|NdisPhysicalMediumWiMax
init|=
literal|12
block|, }
enum|;
end_enum
begin_define
DECL|macro|OID_GEN_MEDIA_SUPPORTED
define|#
directive|define
name|OID_GEN_MEDIA_SUPPORTED
value|0x00010103
end_define
begin_define
DECL|macro|OID_GEN_PHYSICAL_MEDIUM
define|#
directive|define
name|OID_GEN_PHYSICAL_MEDIUM
value|0x00010202
end_define
begin_define
DECL|macro|IOCTL_NDIS_QUERY_GLOBAL_STATS
define|#
directive|define
name|IOCTL_NDIS_QUERY_GLOBAL_STATS
define|\
value|CTL_CODE(FILE_DEVICE_PHYSICAL_NETCARD, 0, METHOD_OUT_DIRECT, FILE_ANY_ACCESS)
end_define
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPLATFORMDEFS_WIN_H
end_comment
end_unit
