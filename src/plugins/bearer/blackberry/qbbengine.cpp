begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Research In Motion ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qbbengine.h"
end_include
begin_include
include|#
directive|include
file|"../qnetworksession_impl.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QThreadStorage>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<bps/netstatus.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|QBBENGINE_DEBUG
end_ifdef
begin_define
DECL|macro|qBearerDebug
define|#
directive|define
name|qBearerDebug
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qBearerDebug
define|#
directive|define
name|qBearerDebug
value|QT_NO_QDEBUG_MACRO
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_struct
DECL|struct|NetstatusInterfaceListCleanupHelper
struct|struct
name|NetstatusInterfaceListCleanupHelper
block|{
DECL|function|cleanup
specifier|static
specifier|inline
name|void
name|cleanup
parameter_list|(
name|netstatus_interface_list_t
modifier|*
name|list
parameter_list|)
block|{
name|netstatus_free_interfaces
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|NetstatusInterfaceCleanupHelper
struct|struct
name|NetstatusInterfaceCleanupHelper
block|{
DECL|function|cleanup
specifier|static
specifier|inline
name|void
name|cleanup
parameter_list|(
name|char
modifier|*
name|interface
parameter_list|)
block|{
name|bps_free
argument_list|(
name|interface
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|EngineInstanceHolder
struct|struct
name|EngineInstanceHolder
block|{
DECL|function|EngineInstanceHolder
name|EngineInstanceHolder
parameter_list|(
name|QBBEngine
modifier|*
name|engine
parameter_list|)
member_init_list|:
name|instance
argument_list|(
name|engine
argument_list|)
block|{}
DECL|member|instance
name|QBBEngine
modifier|*
name|instance
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QThreadStorage
argument_list|<
name|EngineInstanceHolder
operator|*
argument_list|>
argument_list|,
name|instanceStorage
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
specifier|static
name|QNetworkConfiguration
operator|::
name|BearerType
DECL|function|interfaceType
name|interfaceType
parameter_list|(
name|netstatus_interface_type_t
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NETSTATUS_INTERFACE_TYPE_USB
case|:
case|case
name|NETSTATUS_INTERFACE_TYPE_WIRED
case|:
return|return
name|QNetworkConfiguration
operator|::
name|BearerEthernet
return|;
case|case
name|NETSTATUS_INTERFACE_TYPE_WIFI
case|:
return|return
name|QNetworkConfiguration
operator|::
name|BearerWLAN
return|;
case|case
name|NETSTATUS_INTERFACE_TYPE_BLUETOOTH_DUN
case|:
return|return
name|QNetworkConfiguration
operator|::
name|BearerBluetooth
return|;
case|case
name|NETSTATUS_INTERFACE_TYPE_CELLULAR
case|:
comment|//### TODO  not sure which BearerType would be the best
comment|//to return here. We need to be able to get more
comment|//information on the bearer type in order to return
comment|//the exact match.
return|return
name|QNetworkConfiguration
operator|::
name|Bearer2G
return|;
case|case
name|NETSTATUS_INTERFACE_TYPE_VPN
case|:
case|case
name|NETSTATUS_INTERFACE_TYPE_BB
case|:
case|case
name|NETSTATUS_INTERFACE_TYPE_UNKNOWN
case|:
break|break;
block|}
return|return
name|QNetworkConfiguration
operator|::
name|BearerUnknown
return|;
block|}
end_function
begin_function
DECL|function|idForName
specifier|static
name|QString
name|idForName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"bps:"
argument_list|)
operator|+
name|name
return|;
block|}
end_function
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QBBEngine
name|QBBEngine
operator|::
name|QBBEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QBearerEngineImpl
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|pollingRequired
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|initialized
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QBBEngine
name|QBBEngine
operator|::
name|~
name|QBBEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|getInterfaceFromId
name|QString
name|QBBEngine
operator|::
name|getInterfaceFromId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
specifier|const
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|configurationInterface
operator|.
name|value
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hasIdentifier
name|bool
name|QBBEngine
operator|::
name|hasIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
specifier|const
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|configurationInterface
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|connectToId
name|void
name|QBBEngine
operator|::
name|connectToId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|Q_EMIT
name|connectionError
argument_list|(
name|id
argument_list|,
name|OperationNotSupported
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|disconnectFromId
name|void
name|QBBEngine
operator|::
name|disconnectFromId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|Q_EMIT
name|connectionError
argument_list|(
name|id
argument_list|,
name|OperationNotSupported
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|initialize
name|void
name|QBBEngine
operator|::
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"called, but instance already initialized."
expr_stmt|;
return|return;
block|}
name|instanceStorage
argument_list|()
operator|->
name|setLocalData
argument_list|(
operator|new
name|EngineInstanceHolder
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|netstatus_request_events
argument_list|(
literal|0
argument_list|)
operator|!=
name|BPS_SUCCESS
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"cannot register for network events. Polling enabled."
expr_stmt|;
specifier|const
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|pollingMutex
argument_list|)
decl_stmt|;
name|pollingRequired
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|doRequestUpdate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|requestUpdate
name|void
name|QBBEngine
operator|::
name|requestUpdate
parameter_list|()
block|{
name|doRequestUpdate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doRequestUpdate
name|void
name|QBBEngine
operator|::
name|doRequestUpdate
parameter_list|()
block|{
name|qBearerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"entered method"
expr_stmt|;
name|netstatus_interface_list_t
name|interfaceList
decl_stmt|;
if|if
condition|(
operator|(
name|netstatus_get_interfaces
argument_list|(
operator|&
name|interfaceList
argument_list|)
operator|)
operator|!=
name|BPS_SUCCESS
condition|)
block|{
name|qBearerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"cannot retrieve interface list"
expr_stmt|;
return|return;
block|}
specifier|const
name|QScopedPointer
argument_list|<
name|netstatus_interface_list_t
argument_list|,
name|NetstatusInterfaceListCleanupHelper
argument_list|>
name|holder
argument_list|(
operator|&
name|interfaceList
argument_list|)
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|currentConfigurations
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaceList
operator|.
name|num_interfaces
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|char
modifier|*
name|interface
init|=
name|interfaceList
operator|.
name|interfaces
index|[
name|i
index|]
decl_stmt|;
name|qBearerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"discovered interface"
operator|<<
name|interface
expr_stmt|;
name|updateConfiguration
argument_list|(
name|interface
argument_list|)
expr_stmt|;
name|currentConfigurations
operator|<<
name|idForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|interface
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|keys
init|=
name|accessPointConfigurations
operator|.
name|uniqueKeys
argument_list|()
decl_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QString&id
argument_list|,
argument|keys
argument_list|)
block|{
if|if
condition|(
operator|!
name|currentConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
name|removeConfiguration
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|Q_EMIT
name|updateCompleted
argument_list|()
decl_stmt|;
block|}
end_function
begin_function
DECL|function|sessionStateForId
name|QNetworkSession
operator|::
name|State
name|QBBEngine
operator|::
name|sessionStateForId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
specifier|const
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptr
operator|||
operator|!
name|ptr
operator|->
name|isValid
condition|)
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
return|return
name|QNetworkSession
operator|::
name|Connected
return|;
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
return|return
name|QNetworkSession
operator|::
name|Disconnected
return|;
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Defined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Defined
condition|)
return|return
name|QNetworkSession
operator|::
name|NotAvailable
return|;
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Undefined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Undefined
condition|)
return|return
name|QNetworkSession
operator|::
name|NotAvailable
return|;
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
block|}
end_function
begin_function
DECL|function|capabilities
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|QBBEngine
operator|::
name|capabilities
parameter_list|()
specifier|const
block|{
return|return
name|QNetworkConfigurationManager
operator|::
name|ForcedRoaming
return|;
block|}
end_function
begin_function
DECL|function|createSessionBackend
name|QNetworkSessionPrivate
modifier|*
name|QBBEngine
operator|::
name|createSessionBackend
parameter_list|()
block|{
return|return
operator|new
name|QNetworkSessionPrivateImpl
return|;
block|}
end_function
begin_function
DECL|function|defaultConfiguration
name|QNetworkConfigurationPrivatePointer
name|QBBEngine
operator|::
name|defaultConfiguration
parameter_list|()
block|{
name|char
modifier|*
name|interface
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|netstatus_get_default_interface
argument_list|(
operator|&
name|interface
argument_list|)
operator|!=
name|BPS_SUCCESS
condition|)
return|return
name|QNetworkConfigurationPrivatePointer
argument_list|()
return|;
if|if
condition|(
operator|!
name|interface
condition|)
return|return
name|QNetworkConfigurationPrivatePointer
argument_list|()
return|;
specifier|const
name|QScopedPointer
argument_list|<
name|char
argument_list|,
name|NetstatusInterfaceCleanupHelper
argument_list|>
name|holder
argument_list|(
name|interface
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|id
init|=
name|idForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|interface
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|qBearerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"found default interface:"
operator|<<
name|id
expr_stmt|;
return|return
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
return|;
block|}
return|return
name|QNetworkConfigurationPrivatePointer
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|requiresPolling
name|bool
name|QBBEngine
operator|::
name|requiresPolling
parameter_list|()
specifier|const
block|{
specifier|const
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|pollingMutex
argument_list|)
decl_stmt|;
return|return
name|pollingRequired
return|;
block|}
end_function
begin_function
DECL|function|nativeEventFilter
name|bool
name|QBBEngine
operator|::
name|nativeEventFilter
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|eventType
parameter_list|,
name|void
modifier|*
name|message
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|eventType
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|bps_event_t
modifier|*
specifier|const
name|event
init|=
cast|static_cast
argument_list|<
name|bps_event_t
operator|*
argument_list|>
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|bps_event_get_domain
argument_list|(
name|event
argument_list|)
operator|==
name|netstatus_get_domain
argument_list|()
condition|)
block|{
name|qBearerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"got update request."
expr_stmt|;
name|doRequestUpdate
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|updateConfiguration
name|void
name|QBBEngine
operator|::
name|updateConfiguration
parameter_list|(
specifier|const
name|char
modifier|*
name|interface
parameter_list|)
block|{
name|netstatus_interface_details_t
modifier|*
name|details
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|netstatus_get_interface_details
argument_list|(
name|interface
argument_list|,
operator|&
name|details
argument_list|)
operator|!=
name|BPS_SUCCESS
condition|)
block|{
name|qBearerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"cannot retrieve details for interface"
operator|<<
name|interface
expr_stmt|;
return|return;
block|}
specifier|const
name|QString
name|name
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|netstatus_interface_get_name
argument_list|(
name|details
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|id
init|=
name|idForName
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|const
name|int
name|numberOfIpAddresses
init|=
name|netstatus_interface_get_num_ip_addresses
argument_list|(
name|details
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|isConnected
init|=
name|netstatus_interface_is_connected
argument_list|(
name|details
argument_list|)
decl_stmt|;
specifier|const
name|netstatus_interface_type_t
name|type
init|=
name|netstatus_interface_get_type
argument_list|(
name|details
argument_list|)
decl_stmt|;
name|netstatus_free_interface_details
argument_list|(
operator|&
name|details
argument_list|)
expr_stmt|;
name|QNetworkConfiguration
operator|::
name|StateFlags
name|state
init|=
name|QNetworkConfiguration
operator|::
name|Defined
decl_stmt|;
if|if
condition|(
name|isConnected
operator|&&
operator|(
name|numberOfIpAddresses
operator|>
literal|0
operator|)
condition|)
name|state
operator||=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|bool
name|changed
init|=
literal|false
decl_stmt|;
name|QMutexLocker
name|ptrLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptr
operator|->
name|isValid
condition|)
block|{
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ptr
operator|->
name|name
operator|!=
name|name
condition|)
block|{
name|ptr
operator|->
name|name
operator|=
name|name
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ptr
operator|->
name|id
operator|!=
name|id
condition|)
block|{
name|ptr
operator|->
name|id
operator|=
name|id
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ptr
operator|->
name|state
operator|!=
name|state
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|state
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|ptrLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|qBearerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"configuration changed:"
operator|<<
name|interface
expr_stmt|;
name|Q_EMIT
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
block|}
else|else
block|{
name|qBearerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"configuration has not changed."
expr_stmt|;
block|}
return|return;
block|}
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
operator|new
name|QNetworkConfigurationPrivate
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|name
operator|=
name|name
expr_stmt|;
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|ptr
operator|->
name|id
operator|=
name|id
expr_stmt|;
name|ptr
operator|->
name|state
operator|=
name|state
expr_stmt|;
name|ptr
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|ptr
operator|->
name|bearerType
operator|=
name|interfaceType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|configurationInterface
operator|.
name|insert
argument_list|(
name|id
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|qBearerDebug
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"configuration added:"
operator|<<
name|interface
expr_stmt|;
name|Q_EMIT
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|removeConfiguration
name|void
name|QBBEngine
operator|::
name|removeConfiguration
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|take
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|configurationInterface
operator|.
name|remove
argument_list|(
name|ptr
operator|->
name|id
argument_list|)
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|Q_EMIT
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
end_unit
