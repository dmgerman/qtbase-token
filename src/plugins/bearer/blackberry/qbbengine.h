begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Research In Motion ** Contact: http://www.qt-project.org/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QBBENGINE_H
end_ifndef
begin_define
DECL|macro|QBBENGINE_H
define|#
directive|define
name|QBBENGINE_H
end_define
begin_include
include|#
directive|include
file|"../qbearerengine_impl.h"
end_include
begin_include
include|#
directive|include
file|<QAbstractEventDispatcher>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_struct_decl
struct_decl|struct
name|bps_event_t
struct_decl|;
end_struct_decl
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QNetworkConfigurationPrivate
name|class
name|QNetworkConfigurationPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QNetworkSessionPrivate
name|class
name|QNetworkSessionPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QBBEngine
range|:
name|public
name|QBearerEngineImpl
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QBBEngine
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QBBEngine
argument_list|()
block|;
name|QString
name|getInterfaceFromId
argument_list|(
argument|const QString&id
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|hasIdentifier
argument_list|(
argument|const QString&id
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|connectToId
argument_list|(
argument|const QString&id
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|disconnectFromId
argument_list|(
argument|const QString&id
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|Q_INVOKABLE
name|void
name|initialize
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|Q_INVOKABLE
name|void
name|requestUpdate
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|QNetworkSession
operator|::
name|State
name|sessionStateForId
argument_list|(
argument|const QString&id
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|capabilities
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QNetworkSessionPrivate
operator|*
name|createSessionBackend
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|QNetworkConfigurationPrivatePointer
name|defaultConfiguration
argument_list|()
name|Q_DECL_OVERRIDE
block|;
name|bool
name|requiresPolling
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|protected
operator|:
name|void
name|updateConfiguration
argument_list|(
specifier|const
name|char
operator|*
name|interface
argument_list|)
block|;
name|void
name|removeConfiguration
argument_list|(
specifier|const
name|QString
operator|&
name|id
argument_list|)
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|doRequestUpdate
argument_list|()
block|;
name|private
operator|:
specifier|static
name|bool
name|filterEvent
argument_list|(
name|void
operator|*
name|message
argument_list|)
block|;
name|void
name|filterEvent
argument_list|(
name|bps_event_t
operator|*
name|event
argument_list|)
block|;
name|QHash
operator|<
name|QString
block|,
name|QString
operator|>
name|configurationInterface
block|;
name|QAbstractEventDispatcher
operator|::
name|EventFilter
name|previousEventFilter
block|;
name|mutable
name|QMutex
name|pollingMutex
block|;
name|bool
name|pollingRequired
block|;
name|bool
name|initialized
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QBBENGINE_H
end_comment
end_unit
