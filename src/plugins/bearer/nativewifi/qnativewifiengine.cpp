begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qnativewifiengine.h"
end_include
begin_include
include|#
directive|include
file|"platformdefs.h"
end_include
begin_include
include|#
directive|include
file|"../qnetworksession_impl.h"
end_include
begin_include
include|#
directive|include
file|<QtNetwork/private/qnetworkconfiguration_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|local_WlanOpenHandle
name|WlanOpenHandleProto
name|local_WlanOpenHandle
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|local_WlanRegisterNotification
name|WlanRegisterNotificationProto
name|local_WlanRegisterNotification
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|local_WlanEnumInterfaces
name|WlanEnumInterfacesProto
name|local_WlanEnumInterfaces
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|local_WlanGetAvailableNetworkList
name|WlanGetAvailableNetworkListProto
name|local_WlanGetAvailableNetworkList
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|local_WlanQueryInterface
name|WlanQueryInterfaceProto
name|local_WlanQueryInterface
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|local_WlanConnect
name|WlanConnectProto
name|local_WlanConnect
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|local_WlanDisconnect
name|WlanDisconnectProto
name|local_WlanDisconnect
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|local_WlanScan
name|WlanScanProto
name|local_WlanScan
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|local_WlanFreeMemory
name|WlanFreeMemoryProto
name|local_WlanFreeMemory
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|local_WlanCloseHandle
name|WlanCloseHandleProto
name|local_WlanCloseHandle
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qNotificationCallback
name|void
name|qNotificationCallback
parameter_list|(
name|WLAN_NOTIFICATION_DATA
modifier|*
name|data
parameter_list|,
name|QNativeWifiEngine
modifier|*
name|d
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|d
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|data
operator|->
name|NotificationCode
condition|)
block|{
case|case
name|wlan_notification_acm_connection_complete
case|:
case|case
name|wlan_notification_acm_disconnected
case|:
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|d
argument_list|,
literal|"scanComplete"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QNativeWifiEngine
name|QNativeWifiEngine
operator|::
name|QNativeWifiEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QBearerEngineImpl
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|handle
argument_list|(
name|INVALID_HANDLE_VALUE
argument_list|)
block|{
name|connect
argument_list|(
name|QCoreApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToQuit
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|closeHandle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNativeWifiEngine
name|QNativeWifiEngine
operator|::
name|~
name|QNativeWifiEngine
parameter_list|()
block|{
name|closeHandle
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|scanComplete
name|void
name|QNativeWifiEngine
operator|::
name|scanComplete
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|available
argument_list|()
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
return|return;
block|}
comment|// enumerate interfaces
name|WLAN_INTERFACE_INFO_LIST
modifier|*
name|interfaceList
decl_stmt|;
name|DWORD
name|result
init|=
name|local_WlanEnumInterfaces
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
operator|&
name|interfaceList
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: WlanEnumInterfaces failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
return|return;
block|}
name|QStringList
name|previous
init|=
name|accessPointConfigurations
operator|.
name|keys
argument_list|()
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaceList
operator|->
name|dwNumberOfItems
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|WLAN_INTERFACE_INFO
modifier|&
name|interface
init|=
name|interfaceList
operator|->
name|InterfaceInfo
index|[
name|i
index|]
decl_stmt|;
name|WLAN_AVAILABLE_NETWORK_LIST
modifier|*
name|networkList
decl_stmt|;
name|result
operator|=
name|local_WlanGetAvailableNetworkList
argument_list|(
name|handle
argument_list|,
operator|&
name|interface
operator|.
name|InterfaceGuid
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
operator|&
name|networkList
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: WlanGetAvailableNetworkList failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
continue|continue;
block|}
name|QStringList
name|seenNetworks
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|networkList
operator|->
name|dwNumberOfItems
condition|;
operator|++
name|j
control|)
block|{
name|WLAN_AVAILABLE_NETWORK
modifier|&
name|network
init|=
name|networkList
operator|->
name|Network
index|[
name|j
index|]
decl_stmt|;
name|QString
name|networkName
decl_stmt|;
if|if
condition|(
name|network
operator|.
name|strProfileName
index|[
literal|0
index|]
operator|!=
literal|0
condition|)
block|{
name|networkName
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|network
operator|.
name|strProfileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|networkName
operator|=
name|QByteArray
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|network
operator|.
name|dot11Ssid
operator|.
name|ucSSID
argument_list|)
argument_list|,
name|network
operator|.
name|dot11Ssid
operator|.
name|uSSIDLength
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QString
name|id
init|=
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|QLatin1String
argument_list|(
literal|"WLAN:"
argument_list|)
operator|+
name|networkName
argument_list|)
argument_list|)
decl_stmt|;
name|previous
operator|.
name|removeAll
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QNetworkConfiguration
operator|::
name|StateFlags
name|state
init|=
name|QNetworkConfiguration
operator|::
name|Undefined
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|network
operator|.
name|dwFlags
operator|&
name|WLAN_AVAILABLE_NETWORK_HAS_PROFILE
operator|)
condition|)
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Undefined
expr_stmt|;
if|if
condition|(
name|network
operator|.
name|strProfileName
index|[
literal|0
index|]
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|network
operator|.
name|bNetworkConnectable
condition|)
block|{
if|if
condition|(
name|network
operator|.
name|dwFlags
operator|&
name|WLAN_AVAILABLE_NETWORK_CONNECTED
condition|)
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
else|else
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Discovered
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
block|}
block|}
if|if
condition|(
name|seenNetworks
operator|.
name|contains
argument_list|(
name|networkName
argument_list|)
condition|)
continue|continue;
else|else
name|seenNetworks
operator|.
name|append
argument_list|(
name|networkName
argument_list|)
expr_stmt|;
if|if
condition|(
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|bool
name|changed
init|=
literal|false
decl_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ptr
operator|->
name|isValid
condition|)
block|{
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ptr
operator|->
name|name
operator|!=
name|networkName
condition|)
block|{
name|ptr
operator|->
name|name
operator|=
name|networkName
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ptr
operator|->
name|state
operator|!=
name|state
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|state
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
operator|new
name|QNetworkConfigurationPrivate
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|name
operator|=
name|networkName
expr_stmt|;
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|ptr
operator|->
name|id
operator|=
name|id
expr_stmt|;
name|ptr
operator|->
name|state
operator|=
name|state
expr_stmt|;
name|ptr
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|ptr
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerWLAN
expr_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
name|local_WlanFreeMemory
argument_list|(
name|networkList
argument_list|)
expr_stmt|;
block|}
name|local_WlanFreeMemory
argument_list|(
name|interfaceList
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|previous
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|take
argument_list|(
name|previous
operator|.
name|takeFirst
argument_list|()
argument_list|)
decl_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|getInterfaceFromId
name|QString
name|QNativeWifiEngine
operator|::
name|getInterfaceFromId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|available
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
comment|// enumerate interfaces
name|WLAN_INTERFACE_INFO_LIST
modifier|*
name|interfaceList
decl_stmt|;
name|DWORD
name|result
init|=
name|local_WlanEnumInterfaces
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
operator|&
name|interfaceList
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: WlanEnumInterfaces failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|QString
argument_list|()
return|;
block|}
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaceList
operator|->
name|dwNumberOfItems
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|WLAN_INTERFACE_INFO
modifier|&
name|interface
init|=
name|interfaceList
operator|->
name|InterfaceInfo
index|[
name|i
index|]
decl_stmt|;
name|DWORD
name|dataSize
decl_stmt|;
name|WLAN_CONNECTION_ATTRIBUTES
modifier|*
name|connectionAttributes
decl_stmt|;
name|result
operator|=
name|local_WlanQueryInterface
argument_list|(
name|handle
argument_list|,
operator|&
name|interface
operator|.
name|InterfaceGuid
argument_list|,
name|wlan_intf_opcode_current_connection
argument_list|,
literal|0
argument_list|,
operator|&
name|dataSize
argument_list|,
cast|reinterpret_cast
argument_list|<
name|PVOID
operator|*
argument_list|>
argument_list|(
operator|&
name|connectionAttributes
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
if|if
condition|(
name|result
operator|!=
name|ERROR_INVALID_STATE
condition|)
name|qDebug
argument_list|(
literal|"%s: WlanQueryInterface failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
continue|continue;
block|}
if|if
condition|(
name|qHash
argument_list|(
name|QLatin1String
argument_list|(
literal|"WLAN:"
argument_list|)
operator|+
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|connectionAttributes
operator|->
name|strProfileName
argument_list|)
argument_list|)
operator|==
name|id
operator|.
name|toUInt
argument_list|()
condition|)
block|{
name|QString
name|guid
argument_list|(
literal|"{%1-%2-%3-%4%5-%6%7%8%9%10%11}"
argument_list|)
decl_stmt|;
name|guid
operator|=
name|guid
operator|.
name|arg
argument_list|(
name|interface
operator|.
name|InterfaceGuid
operator|.
name|Data1
argument_list|,
literal|8
argument_list|,
literal|16
argument_list|,
name|QChar
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|guid
operator|=
name|guid
operator|.
name|arg
argument_list|(
name|interface
operator|.
name|InterfaceGuid
operator|.
name|Data2
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|,
name|QChar
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|guid
operator|=
name|guid
operator|.
name|arg
argument_list|(
name|interface
operator|.
name|InterfaceGuid
operator|.
name|Data3
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|,
name|QChar
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
name|guid
operator|=
name|guid
operator|.
name|arg
argument_list|(
name|interface
operator|.
name|InterfaceGuid
operator|.
name|Data4
index|[
name|i
index|]
argument_list|,
literal|2
argument_list|,
literal|16
argument_list|,
name|QChar
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|local_WlanFreeMemory
argument_list|(
name|connectionAttributes
argument_list|)
expr_stmt|;
name|local_WlanFreeMemory
argument_list|(
name|interfaceList
argument_list|)
expr_stmt|;
return|return
name|guid
operator|.
name|toUpper
argument_list|()
return|;
block|}
name|local_WlanFreeMemory
argument_list|(
name|connectionAttributes
argument_list|)
expr_stmt|;
block|}
name|local_WlanFreeMemory
argument_list|(
name|interfaceList
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|hasIdentifier
name|bool
name|QNativeWifiEngine
operator|::
name|hasIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|available
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// enumerate interfaces
name|WLAN_INTERFACE_INFO_LIST
modifier|*
name|interfaceList
decl_stmt|;
name|DWORD
name|result
init|=
name|local_WlanEnumInterfaces
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
operator|&
name|interfaceList
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: WlanEnumInterfaces failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaceList
operator|->
name|dwNumberOfItems
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|WLAN_INTERFACE_INFO
modifier|&
name|interface
init|=
name|interfaceList
operator|->
name|InterfaceInfo
index|[
name|i
index|]
decl_stmt|;
name|WLAN_AVAILABLE_NETWORK_LIST
modifier|*
name|networkList
decl_stmt|;
name|result
operator|=
name|local_WlanGetAvailableNetworkList
argument_list|(
name|handle
argument_list|,
operator|&
name|interface
operator|.
name|InterfaceGuid
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
operator|&
name|networkList
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: WlanGetAvailableNetworkList failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
continue|continue;
block|}
for|for
control|(
name|unsigned
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|networkList
operator|->
name|dwNumberOfItems
condition|;
operator|++
name|j
control|)
block|{
name|WLAN_AVAILABLE_NETWORK
modifier|&
name|network
init|=
name|networkList
operator|->
name|Network
index|[
name|j
index|]
decl_stmt|;
name|QString
name|networkName
decl_stmt|;
if|if
condition|(
name|network
operator|.
name|strProfileName
index|[
literal|0
index|]
operator|!=
literal|0
condition|)
block|{
name|networkName
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|network
operator|.
name|strProfileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|networkName
operator|=
name|QByteArray
argument_list|(
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|network
operator|.
name|dot11Ssid
operator|.
name|ucSSID
argument_list|)
argument_list|,
name|network
operator|.
name|dot11Ssid
operator|.
name|uSSIDLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qHash
argument_list|(
name|QLatin1String
argument_list|(
literal|"WLAN:"
argument_list|)
operator|+
name|networkName
argument_list|)
operator|==
name|id
operator|.
name|toUInt
argument_list|()
condition|)
block|{
name|local_WlanFreeMemory
argument_list|(
name|networkList
argument_list|)
expr_stmt|;
name|local_WlanFreeMemory
argument_list|(
name|interfaceList
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|local_WlanFreeMemory
argument_list|(
name|networkList
argument_list|)
expr_stmt|;
block|}
name|local_WlanFreeMemory
argument_list|(
name|interfaceList
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|connectToId
name|void
name|QNativeWifiEngine
operator|::
name|connectToId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|available
argument_list|()
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|InterfaceLookupError
argument_list|)
emit|;
return|return;
block|}
name|WLAN_INTERFACE_INFO_LIST
modifier|*
name|interfaceList
decl_stmt|;
name|DWORD
name|result
init|=
name|local_WlanEnumInterfaces
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
operator|&
name|interfaceList
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: WlanEnumInterfaces failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|InterfaceLookupError
argument_list|)
emit|;
return|return;
block|}
name|QString
name|profile
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaceList
operator|->
name|dwNumberOfItems
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|WLAN_INTERFACE_INFO
modifier|&
name|interface
init|=
name|interfaceList
operator|->
name|InterfaceInfo
index|[
name|i
index|]
decl_stmt|;
name|WLAN_AVAILABLE_NETWORK_LIST
modifier|*
name|networkList
decl_stmt|;
name|result
operator|=
name|local_WlanGetAvailableNetworkList
argument_list|(
name|handle
argument_list|,
operator|&
name|interface
operator|.
name|InterfaceGuid
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
operator|&
name|networkList
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: WlanGetAvailableNetworkList failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
continue|continue;
block|}
for|for
control|(
name|unsigned
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|networkList
operator|->
name|dwNumberOfItems
condition|;
operator|++
name|j
control|)
block|{
name|WLAN_AVAILABLE_NETWORK
modifier|&
name|network
init|=
name|networkList
operator|->
name|Network
index|[
name|j
index|]
decl_stmt|;
name|profile
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|network
operator|.
name|strProfileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|qHash
argument_list|(
name|QLatin1String
argument_list|(
literal|"WLAN:"
argument_list|)
operator|+
name|profile
argument_list|)
operator|==
name|id
operator|.
name|toUInt
argument_list|()
condition|)
break|break;
else|else
name|profile
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|local_WlanFreeMemory
argument_list|(
name|networkList
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|profile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|WLAN_CONNECTION_PARAMETERS
name|parameters
decl_stmt|;
name|parameters
operator|.
name|wlanConnectionMode
operator|=
name|wlan_connection_mode_profile
expr_stmt|;
name|parameters
operator|.
name|strProfile
operator|=
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|profile
operator|.
name|utf16
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|pDot11Ssid
operator|=
literal|0
expr_stmt|;
name|parameters
operator|.
name|pDesiredBssidList
operator|=
literal|0
expr_stmt|;
name|parameters
operator|.
name|dot11BssType
operator|=
name|dot11_BSS_type_any
expr_stmt|;
name|parameters
operator|.
name|dwFlags
operator|=
literal|0
expr_stmt|;
name|DWORD
name|result
init|=
name|local_WlanConnect
argument_list|(
name|handle
argument_list|,
operator|&
name|interface
operator|.
name|InterfaceGuid
argument_list|,
operator|&
name|parameters
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: WlanConnect failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|ConnectError
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
break|break;
block|}
break|break;
block|}
block|}
name|local_WlanFreeMemory
argument_list|(
name|interfaceList
argument_list|)
expr_stmt|;
if|if
condition|(
name|profile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|InterfaceLookupError
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|disconnectFromId
name|void
name|QNativeWifiEngine
operator|::
name|disconnectFromId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|available
argument_list|()
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|InterfaceLookupError
argument_list|)
emit|;
return|return;
block|}
name|QString
name|interface
init|=
name|getInterfaceFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|interface
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|InterfaceLookupError
argument_list|)
emit|;
return|return;
block|}
name|QStringList
name|split
init|=
name|interface
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|interface
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|split
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
name|GUID
name|guid
decl_stmt|;
name|guid
operator|.
name|Data1
operator|=
name|split
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUInt
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|guid
operator|.
name|Data2
operator|=
name|split
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toUShort
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|guid
operator|.
name|Data3
operator|=
name|split
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toUShort
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|guid
operator|.
name|Data4
index|[
literal|0
index|]
operator|=
name|split
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|left
argument_list|(
literal|2
argument_list|)
operator|.
name|toUShort
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|guid
operator|.
name|Data4
index|[
literal|1
index|]
operator|=
name|split
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|right
argument_list|(
literal|2
argument_list|)
operator|.
name|toUShort
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
name|guid
operator|.
name|Data4
index|[
name|i
operator|+
literal|2
index|]
operator|=
name|split
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|mid
argument_list|(
name|i
operator|*
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|toUShort
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|DWORD
name|result
init|=
name|local_WlanDisconnect
argument_list|(
name|handle
argument_list|,
operator|&
name|guid
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: WlanDisconnect failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|DisconnectionError
argument_list|)
emit|;
return|return;
block|}
block|}
end_function
begin_function
DECL|function|initialize
name|void
name|QNativeWifiEngine
operator|::
name|initialize
parameter_list|()
block|{
name|scanComplete
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|requestUpdate
name|void
name|QNativeWifiEngine
operator|::
name|requestUpdate
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|available
argument_list|()
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
return|return;
block|}
comment|// enumerate interfaces
name|WLAN_INTERFACE_INFO_LIST
modifier|*
name|interfaceList
decl_stmt|;
name|DWORD
name|result
init|=
name|local_WlanEnumInterfaces
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|,
operator|&
name|interfaceList
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: WlanEnumInterfaces failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
return|return;
block|}
name|bool
name|requested
init|=
literal|false
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaceList
operator|->
name|dwNumberOfItems
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|=
name|local_WlanScan
argument_list|(
name|handle
argument_list|,
operator|&
name|interfaceList
operator|->
name|InterfaceInfo
index|[
name|i
index|]
operator|.
name|InterfaceGuid
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: WlanScan failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|requested
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|local_WlanFreeMemory
argument_list|(
name|interfaceList
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|requested
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|sessionStateForId
name|QNetworkSession
operator|::
name|State
name|QNativeWifiEngine
operator|::
name|sessionStateForId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptr
condition|)
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
if|if
condition|(
operator|!
name|ptr
operator|->
name|isValid
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|Connected
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|Disconnected
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Defined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Defined
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|NotAvailable
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Undefined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Undefined
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|NotAvailable
return|;
block|}
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
block|}
end_function
begin_function
DECL|function|capabilities
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|QNativeWifiEngine
operator|::
name|capabilities
parameter_list|()
specifier|const
block|{
return|return
name|QNetworkConfigurationManager
operator|::
name|ForcedRoaming
operator||
name|QNetworkConfigurationManager
operator|::
name|CanStartAndStopInterfaces
return|;
block|}
end_function
begin_function
DECL|function|createSessionBackend
name|QNetworkSessionPrivate
modifier|*
name|QNativeWifiEngine
operator|::
name|createSessionBackend
parameter_list|()
block|{
return|return
operator|new
name|QNetworkSessionPrivateImpl
return|;
block|}
end_function
begin_function
DECL|function|defaultConfiguration
name|QNetworkConfigurationPrivatePointer
name|QNativeWifiEngine
operator|::
name|defaultConfiguration
parameter_list|()
block|{
return|return
name|QNetworkConfigurationPrivatePointer
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|available
name|bool
name|QNativeWifiEngine
operator|::
name|available
parameter_list|()
block|{
if|if
condition|(
name|handle
operator|!=
name|INVALID_HANDLE_VALUE
condition|)
return|return
literal|true
return|;
name|DWORD
name|clientVersion
decl_stmt|;
name|DWORD
name|result
init|=
name|local_WlanOpenHandle
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
operator|&
name|clientVersion
argument_list|,
operator|&
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
if|if
condition|(
name|result
operator|!=
name|ERROR_SERVICE_NOT_ACTIVE
condition|)
name|qDebug
argument_list|(
literal|"%s: WlanOpenHandle failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
name|result
operator|=
name|local_WlanRegisterNotification
argument_list|(
name|handle
argument_list|,
name|WLAN_NOTIFICATION_SOURCE_ALL
argument_list|,
literal|true
argument_list|,
name|WLAN_NOTIFICATION_CALLBACK
argument_list|(
name|qNotificationCallback
argument_list|)
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
if|if
condition|(
name|result
operator|!=
name|ERROR_SUCCESS
condition|)
name|qDebug
argument_list|(
literal|"%s: WlanRegisterNotification failed with error %ld\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|handle
operator|!=
name|INVALID_HANDLE_VALUE
return|;
block|}
end_function
begin_function
DECL|function|closeHandle
name|void
name|QNativeWifiEngine
operator|::
name|closeHandle
parameter_list|()
block|{
if|if
condition|(
name|handle
operator|!=
name|INVALID_HANDLE_VALUE
condition|)
block|{
name|local_WlanCloseHandle
argument_list|(
name|handle
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|handle
operator|=
name|INVALID_HANDLE_VALUE
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|requiresPolling
name|bool
name|QNativeWifiEngine
operator|::
name|requiresPolling
parameter_list|()
specifier|const
block|{
comment|// On Windows XP SP2 and SP3 only connection and disconnection notifications are available.
comment|// We need to poll for changes in available wireless networks.
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
end_unit
