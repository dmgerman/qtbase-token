begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qnlaengine.h"
end_include
begin_include
include|#
directive|include
file|"../qnetworksession_impl.h"
end_include
begin_include
include|#
directive|include
file|<QtNetwork/private/qnetworkconfiguration_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qthread.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qmutex.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|"../platformdefs_win.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QWindowsSockInit2
name|QWindowsSockInit2
operator|::
name|QWindowsSockInit2
parameter_list|()
member_init_list|:
name|version
argument_list|(
literal|0
argument_list|)
block|{
comment|//### should we try for 2.2 on all platforms ??
name|WSAData
name|wsadata
decl_stmt|;
comment|// IPv6 requires Winsock v2.0 or better.
if|if
condition|(
name|WSAStartup
argument_list|(
name|MAKEWORD
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|&
name|wsadata
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QBearerManagementAPI: WinSock v2.0 initialization failed."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|version
operator|=
literal|0x20
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QWindowsSockInit2
name|QWindowsSockInit2
operator|::
name|~
name|QWindowsSockInit2
parameter_list|()
block|{
name|WSACleanup
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_ifdef
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
end_ifdef
begin_function
DECL|function|printBlob
specifier|static
name|void
name|printBlob
parameter_list|(
name|NLA_BLOB
modifier|*
name|blob
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"==== BEGIN NLA_BLOB ===="
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"type:"
operator|<<
name|blob
operator|->
name|header
operator|.
name|type
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"size:"
operator|<<
name|blob
operator|->
name|header
operator|.
name|dwSize
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"next offset:"
operator|<<
name|blob
operator|->
name|header
operator|.
name|nextOffset
expr_stmt|;
switch|switch
condition|(
name|blob
operator|->
name|header
operator|.
name|type
condition|)
block|{
case|case
name|NLA_RAW_DATA
case|:
name|qDebug
argument_list|()
operator|<<
literal|"Raw Data"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|'\t'
operator|<<
name|blob
operator|->
name|data
operator|.
name|rawData
expr_stmt|;
break|break;
case|case
name|NLA_INTERFACE
case|:
name|qDebug
argument_list|()
operator|<<
literal|"Interface"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\ttype:"
operator|<<
name|blob
operator|->
name|data
operator|.
name|interfaceData
operator|.
name|dwType
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\tspeed:"
operator|<<
name|blob
operator|->
name|data
operator|.
name|interfaceData
operator|.
name|dwSpeed
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\tadapter:"
operator|<<
name|blob
operator|->
name|data
operator|.
name|interfaceData
operator|.
name|adapterName
expr_stmt|;
break|break;
case|case
name|NLA_802_1X_LOCATION
case|:
name|qDebug
argument_list|()
operator|<<
literal|"802.1x Location"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|'\t'
operator|<<
name|blob
operator|->
name|data
operator|.
name|locationData
operator|.
name|information
expr_stmt|;
break|break;
case|case
name|NLA_CONNECTIVITY
case|:
name|qDebug
argument_list|()
operator|<<
literal|"Connectivity"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\ttype:"
operator|<<
name|blob
operator|->
name|data
operator|.
name|connectivity
operator|.
name|type
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\tinternet:"
operator|<<
name|blob
operator|->
name|data
operator|.
name|connectivity
operator|.
name|internet
expr_stmt|;
break|break;
case|case
name|NLA_ICS
case|:
name|qDebug
argument_list|()
operator|<<
literal|"ICS"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\tspeed:"
operator|<<
name|blob
operator|->
name|data
operator|.
name|ICS
operator|.
name|remote
operator|.
name|speed
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\ttype:"
operator|<<
name|blob
operator|->
name|data
operator|.
name|ICS
operator|.
name|remote
operator|.
name|type
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\tstate:"
operator|<<
name|blob
operator|->
name|data
operator|.
name|ICS
operator|.
name|remote
operator|.
name|state
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\tmachine name:"
operator|<<
name|blob
operator|->
name|data
operator|.
name|ICS
operator|.
name|remote
operator|.
name|machineName
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\tshared adapter name:"
operator|<<
name|blob
operator|->
name|data
operator|.
name|ICS
operator|.
name|remote
operator|.
name|sharedAdapterName
expr_stmt|;
break|break;
default|default:
name|qDebug
argument_list|()
operator|<<
literal|"UNKNOWN BLOB TYPE"
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"===== END NLA_BLOB ====="
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qGetInterfaceType
specifier|static
name|QNetworkConfiguration
operator|::
name|BearerType
name|qGetInterfaceType
parameter_list|(
specifier|const
name|QString
modifier|&
name|interface
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|Q_UNUSED
argument_list|(
argument|interface
argument_list|)
else|#
directive|else
name|unsigned
name|long
name|oid
decl_stmt|;
name|DWORD
name|bytesWritten
decl_stmt|;
name|NDIS_MEDIUM
name|medium
decl_stmt|;
name|NDIS_PHYSICAL_MEDIUM
name|physicalMedium
decl_stmt|;
name|HANDLE
name|handle
init|=
name|CreateFile
argument_list|(
operator|(
name|TCHAR
operator|*
operator|)
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\\\\.\\%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|interface
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0
argument_list|,
name|FILE_SHARE_READ
argument_list|,
literal|0
argument_list|,
name|OPEN_EXISTING
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
operator|==
name|INVALID_HANDLE_VALUE
condition|)
return|return
name|QNetworkConfiguration
operator|::
name|BearerUnknown
return|;
name|oid
operator|=
name|OID_GEN_MEDIA_SUPPORTED
expr_stmt|;
name|bytesWritten
operator|=
literal|0
expr_stmt|;
name|bool
name|result
init|=
name|DeviceIoControl
argument_list|(
name|handle
argument_list|,
name|IOCTL_NDIS_QUERY_GLOBAL_STATS
argument_list|,
operator|&
name|oid
argument_list|,
sizeof|sizeof
argument_list|(
name|oid
argument_list|)
argument_list|,
operator|&
name|medium
argument_list|,
sizeof|sizeof
argument_list|(
name|medium
argument_list|)
argument_list|,
operator|&
name|bytesWritten
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|CloseHandle
argument_list|(
name|handle
argument_list|)
expr_stmt|;
return|return
name|QNetworkConfiguration
operator|::
name|BearerUnknown
return|;
block|}
name|oid
operator|=
name|OID_GEN_PHYSICAL_MEDIUM
expr_stmt|;
name|bytesWritten
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|DeviceIoControl
argument_list|(
name|handle
argument_list|,
name|IOCTL_NDIS_QUERY_GLOBAL_STATS
argument_list|,
operator|&
name|oid
argument_list|,
sizeof|sizeof
argument_list|(
name|oid
argument_list|)
argument_list|,
operator|&
name|physicalMedium
argument_list|,
sizeof|sizeof
argument_list|(
name|physicalMedium
argument_list|)
argument_list|,
operator|&
name|bytesWritten
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|CloseHandle
argument_list|(
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|medium
operator|==
name|NdisMedium802_3
condition|)
return|return
name|QNetworkConfiguration
operator|::
name|BearerEthernet
return|;
else|else
return|return
name|QNetworkConfiguration
operator|::
name|BearerUnknown
return|;
block|}
name|CloseHandle
argument_list|(
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|medium
operator|==
name|NdisMedium802_3
condition|)
block|{
switch|switch
condition|(
name|physicalMedium
condition|)
block|{
case|case
name|NdisPhysicalMediumWirelessLan
case|:
return|return
name|QNetworkConfiguration
operator|::
name|BearerWLAN
return|;
case|case
name|NdisPhysicalMediumBluetooth
case|:
return|return
name|QNetworkConfiguration
operator|::
name|BearerBluetooth
return|;
case|case
name|NdisPhysicalMediumWiMax
case|:
return|return
name|QNetworkConfiguration
operator|::
name|BearerWiMAX
return|;
default|default:
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"Physical Medium"
operator|<<
name|physicalMedium
expr_stmt|;
endif|#
directive|endif
return|return
name|QNetworkConfiguration
operator|::
name|BearerEthernet
return|;
block|}
block|}
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
name|medium
operator|<<
name|physicalMedium
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
return|return
name|QNetworkConfiguration
operator|::
name|BearerUnknown
return|;
block|}
end_function
begin_class
DECL|class|QNlaThread
class|class
name|QNlaThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
name|QNlaThread
parameter_list|(
name|QNlaEngine
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|~
name|QNlaThread
parameter_list|()
destructor_decl|;
name|QList
argument_list|<
name|QNetworkConfigurationPrivate
modifier|*
argument_list|>
name|getConfigurations
parameter_list|()
function_decl|;
name|void
name|forceUpdate
parameter_list|()
function_decl|;
protected|protected:
specifier|virtual
name|void
name|run
parameter_list|()
function_decl|;
private|private:
name|void
name|updateConfigurations
parameter_list|(
name|QList
argument_list|<
name|QNetworkConfigurationPrivate
modifier|*
argument_list|>
modifier|&
name|configs
parameter_list|)
function_decl|;
name|DWORD
name|parseBlob
parameter_list|(
name|NLA_BLOB
modifier|*
name|blob
parameter_list|,
name|QNetworkConfigurationPrivate
modifier|*
name|cpPriv
parameter_list|)
specifier|const
function_decl|;
name|QNetworkConfigurationPrivate
modifier|*
name|parseQuerySet
parameter_list|(
specifier|const
name|WSAQUERYSET
modifier|*
name|querySet
parameter_list|)
specifier|const
function_decl|;
name|void
name|fetchConfigurations
parameter_list|()
function_decl|;
signals|signals:
name|void
name|networksChanged
parameter_list|()
function_decl|;
private|private:
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|handle
name|HANDLE
name|handle
decl_stmt|;
DECL|member|done
name|bool
name|done
decl_stmt|;
DECL|member|fetchedConfigurations
name|QList
argument_list|<
name|QNetworkConfigurationPrivate
modifier|*
argument_list|>
name|fetchedConfigurations
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNlaThread
name|QNlaThread
operator|::
name|QNlaThread
parameter_list|(
name|QNlaEngine
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QThread
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|handle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|done
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QNlaThread
name|QNlaThread
operator|::
name|~
name|QNlaThread
parameter_list|()
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
comment|/* cancel completion event */
if|if
condition|(
name|WSALookupServiceEnd
argument_list|(
name|handle
argument_list|)
operator|==
name|SOCKET_ERROR
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"WSALookupServiceEnd error %d"
argument_list|,
name|WSAGetLastError
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|getConfigurations
name|QList
argument_list|<
name|QNetworkConfigurationPrivate
modifier|*
argument_list|>
name|QNlaThread
operator|::
name|getConfigurations
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QNetworkConfigurationPrivate
modifier|*
argument_list|>
name|foundConfigurations
init|=
name|fetchedConfigurations
decl_stmt|;
name|fetchedConfigurations
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|foundConfigurations
return|;
block|}
end_function
begin_function
DECL|function|forceUpdate
name|void
name|QNlaThread
operator|::
name|forceUpdate
parameter_list|()
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
comment|/* cancel completion event */
if|if
condition|(
name|WSALookupServiceEnd
argument_list|(
name|handle
argument_list|)
operator|==
name|SOCKET_ERROR
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"WSALookupServiceEnd error %d"
argument_list|,
name|WSAGetLastError
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|handle
operator|=
literal|0
expr_stmt|;
block|}
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|run
name|void
name|QNlaThread
operator|::
name|run
parameter_list|()
block|{
name|WSAEVENT
name|changeEvent
init|=
name|WSACreateEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|changeEvent
operator|==
name|WSA_INVALID_EVENT
condition|)
return|return;
while|while
condition|(
literal|true
condition|)
block|{
name|fetchConfigurations
argument_list|()
expr_stmt|;
name|WSAQUERYSET
name|qsRestrictions
decl_stmt|;
name|memset
argument_list|(
operator|&
name|qsRestrictions
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|qsRestrictions
argument_list|)
argument_list|)
expr_stmt|;
name|qsRestrictions
operator|.
name|dwSize
operator|=
sizeof|sizeof
argument_list|(
name|qsRestrictions
argument_list|)
expr_stmt|;
name|qsRestrictions
operator|.
name|dwNameSpace
operator|=
name|NS_NLA
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|done
condition|)
block|{
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
break|break;
block|}
name|int
name|result
init|=
name|WSALookupServiceBegin
argument_list|(
operator|&
name|qsRestrictions
argument_list|,
name|LUP_RETURN_ALL
argument_list|,
operator|&
name|handle
argument_list|)
decl_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|SOCKET_ERROR
condition|)
break|break;
name|WSACOMPLETION
name|completion
decl_stmt|;
name|WSAOVERLAPPED
name|overlapped
decl_stmt|;
name|memset
argument_list|(
operator|&
name|overlapped
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|overlapped
argument_list|)
argument_list|)
expr_stmt|;
name|overlapped
operator|.
name|hEvent
operator|=
name|changeEvent
expr_stmt|;
name|memset
argument_list|(
operator|&
name|completion
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|completion
argument_list|)
argument_list|)
expr_stmt|;
name|completion
operator|.
name|Type
operator|=
name|NSP_NOTIFY_EVENT
expr_stmt|;
name|completion
operator|.
name|Parameters
operator|.
name|Event
operator|.
name|lpOverlapped
operator|=
operator|&
name|overlapped
expr_stmt|;
name|DWORD
name|bytesReturned
init|=
literal|0
decl_stmt|;
name|result
operator|=
name|WSANSPIoctl
argument_list|(
name|handle
argument_list|,
name|SIO_NSP_NOTIFY_CHANGE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|bytesReturned
argument_list|,
operator|&
name|completion
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|SOCKET_ERROR
condition|)
block|{
if|if
condition|(
name|WSAGetLastError
argument_list|()
operator|!=
name|WSA_IO_PENDING
condition|)
break|break;
block|}
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|// Not interested in unrelated IO completion events
comment|// although we also don't want to block them
while|while
condition|(
name|WaitForSingleObjectEx
argument_list|(
name|changeEvent
argument_list|,
name|WSA_INFINITE
argument_list|,
literal|true
argument_list|)
operator|!=
name|WAIT_IO_COMPLETION
operator|&&
name|handle
condition|)
block|{         }
else|#
directive|else
name|WaitForSingleObject
argument_list|(
name|changeEvent
argument_list|,
name|WSA_INFINITE
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|handle
condition|)
block|{
name|result
operator|=
name|WSALookupServiceEnd
argument_list|(
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
break|break;
block|}
name|handle
operator|=
literal|0
expr_stmt|;
block|}
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|WSACloseEvent
argument_list|(
name|changeEvent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateConfigurations
name|void
name|QNlaThread
operator|::
name|updateConfigurations
parameter_list|(
name|QList
argument_list|<
name|QNetworkConfigurationPrivate
modifier|*
argument_list|>
modifier|&
name|configs
parameter_list|)
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|fetchedConfigurations
operator|.
name|isEmpty
argument_list|()
condition|)
operator|delete
name|fetchedConfigurations
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
name|fetchedConfigurations
operator|=
name|configs
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|networksChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|parseBlob
name|DWORD
name|QNlaThread
operator|::
name|parseBlob
parameter_list|(
name|NLA_BLOB
modifier|*
name|blob
parameter_list|,
name|QNetworkConfigurationPrivate
modifier|*
name|cpPriv
parameter_list|)
specifier|const
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|printBlob
argument_list|(
name|blob
argument_list|)
expr_stmt|;
endif|#
directive|endif
switch|switch
condition|(
name|blob
operator|->
name|header
operator|.
name|type
condition|)
block|{
case|case
name|NLA_RAW_DATA
case|:
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: unhandled header type NLA_RAW_DATA"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|NLA_INTERFACE
case|:
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
if|if
condition|(
name|QNlaEngine
modifier|*
name|engine
init|=
name|qobject_cast
argument_list|<
name|QNlaEngine
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
condition|)
block|{
name|engine
operator|->
name|configurationInterface
index|[
name|cpPriv
operator|->
name|id
operator|.
name|toUInt
argument_list|()
index|]
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|blob
operator|->
name|data
operator|.
name|interfaceData
operator|.
name|adapterName
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NLA_802_1X_LOCATION
case|:
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: unhandled header type NLA_802_1X_LOCATION"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|NLA_CONNECTIVITY
case|:
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: unhandled header type NLA_CONNECTIVITY"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|NLA_ICS
case|:
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: unhandled header type NLA_ICS"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
default|default:
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"%s: unhandled header type %d"
argument_list|,
name|__FUNCTION__
argument_list|,
name|blob
operator|->
name|header
operator|.
name|type
argument_list|)
expr_stmt|;
endif|#
directive|endif
empty_stmt|;
block|}
return|return
name|blob
operator|->
name|header
operator|.
name|nextOffset
return|;
block|}
end_function
begin_function
DECL|function|parseQuerySet
name|QNetworkConfigurationPrivate
modifier|*
name|QNlaThread
operator|::
name|parseQuerySet
parameter_list|(
specifier|const
name|WSAQUERYSET
modifier|*
name|querySet
parameter_list|)
specifier|const
block|{
name|QNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
operator|new
name|QNetworkConfigurationPrivate
decl_stmt|;
name|cpPriv
operator|->
name|name
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|querySet
operator|->
name|lpszServiceInstanceName
argument_list|)
expr_stmt|;
name|cpPriv
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|cpPriv
operator|->
name|id
operator|=
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|QLatin1String
argument_list|(
literal|"NLA:"
argument_list|)
operator|+
name|cpPriv
operator|->
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
name|cpPriv
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"size:"
operator|<<
name|querySet
operator|->
name|dwSize
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"service instance name:"
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|querySet
operator|->
name|lpszServiceInstanceName
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"service class id:"
operator|<<
name|querySet
operator|->
name|lpServiceClassId
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"version:"
operator|<<
name|querySet
operator|->
name|lpVersion
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"comment:"
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|querySet
operator|->
name|lpszComment
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"namespace:"
operator|<<
name|querySet
operator|->
name|dwNameSpace
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"namespace provider id:"
operator|<<
name|querySet
operator|->
name|lpNSProviderId
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"context:"
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|querySet
operator|->
name|lpszContext
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"number of protocols:"
operator|<<
name|querySet
operator|->
name|dwNumberOfProtocols
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"protocols:"
operator|<<
name|querySet
operator|->
name|lpafpProtocols
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"query string:"
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|querySet
operator|->
name|lpszQueryString
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"number of cs addresses:"
operator|<<
name|querySet
operator|->
name|dwNumberOfCsAddrs
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"cs addresses:"
operator|<<
name|querySet
operator|->
name|lpcsaBuffer
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"output flags:"
operator|<<
name|querySet
operator|->
name|dwOutputFlags
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|querySet
operator|->
name|lpBlob
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"blob size:"
operator|<<
name|querySet
operator|->
name|lpBlob
operator|->
name|cbSize
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"blob data:"
operator|<<
name|querySet
operator|->
name|lpBlob
operator|->
name|pBlobData
expr_stmt|;
endif|#
directive|endif
name|DWORD
name|offset
init|=
literal|0
decl_stmt|;
do|do
block|{
name|NLA_BLOB
modifier|*
name|blob
init|=
cast|reinterpret_cast
argument_list|<
name|NLA_BLOB
operator|*
argument_list|>
argument_list|(
name|querySet
operator|->
name|lpBlob
operator|->
name|pBlobData
operator|+
name|offset
argument_list|)
decl_stmt|;
name|DWORD
name|nextOffset
init|=
name|parseBlob
argument_list|(
name|blob
argument_list|,
name|cpPriv
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextOffset
operator|==
name|offset
condition|)
break|break;
else|else
name|offset
operator|=
name|nextOffset
expr_stmt|;
block|}
do|while
condition|(
name|offset
operator|!=
literal|0
operator|&&
name|offset
operator|<
name|querySet
operator|->
name|lpBlob
operator|->
name|cbSize
condition|)
do|;
block|}
if|if
condition|(
name|QNlaEngine
modifier|*
name|engine
init|=
name|qobject_cast
argument_list|<
name|QNlaEngine
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|interface
init|=
name|engine
operator|->
name|getInterfaceFromId
argument_list|(
name|cpPriv
operator|->
name|id
argument_list|)
decl_stmt|;
name|cpPriv
operator|->
name|bearerType
operator|=
name|qGetInterfaceType
argument_list|(
name|interface
argument_list|)
expr_stmt|;
block|}
return|return
name|cpPriv
return|;
block|}
end_function
begin_function
DECL|function|fetchConfigurations
name|void
name|QNlaThread
operator|::
name|fetchConfigurations
parameter_list|()
block|{
name|QList
argument_list|<
name|QNetworkConfigurationPrivate
modifier|*
argument_list|>
name|foundConfigurations
decl_stmt|;
name|WSAQUERYSET
name|qsRestrictions
decl_stmt|;
name|HANDLE
name|hLookup
init|=
literal|0
decl_stmt|;
name|memset
argument_list|(
operator|&
name|qsRestrictions
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|qsRestrictions
argument_list|)
argument_list|)
expr_stmt|;
name|qsRestrictions
operator|.
name|dwSize
operator|=
sizeof|sizeof
argument_list|(
name|qsRestrictions
argument_list|)
expr_stmt|;
name|qsRestrictions
operator|.
name|dwNameSpace
operator|=
name|NS_NLA
expr_stmt|;
name|int
name|result
init|=
name|WSALookupServiceBegin
argument_list|(
operator|&
name|qsRestrictions
argument_list|,
name|LUP_RETURN_ALL
operator||
name|LUP_DEEP
argument_list|,
operator|&
name|hLookup
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|SOCKET_ERROR
condition|)
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|fetchedConfigurations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|char
name|buffer
index|[
literal|0x10000
index|]
decl_stmt|;
while|while
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|DWORD
name|bufferLength
init|=
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|result
operator|=
name|WSALookupServiceNext
argument_list|(
name|hLookup
argument_list|,
name|LUP_RETURN_ALL
argument_list|,
operator|&
name|bufferLength
argument_list|,
cast|reinterpret_cast
argument_list|<
name|WSAQUERYSET
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|SOCKET_ERROR
condition|)
break|break;
name|QNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
name|parseQuerySet
argument_list|(
cast|reinterpret_cast
argument_list|<
name|WSAQUERYSET
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
argument_list|)
decl_stmt|;
name|foundConfigurations
operator|.
name|append
argument_list|(
name|cpPriv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hLookup
condition|)
block|{
name|result
operator|=
name|WSALookupServiceEnd
argument_list|(
name|hLookup
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|SOCKET_ERROR
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"WSALookupServiceEnd error %d"
argument_list|,
name|WSAGetLastError
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
name|updateConfigurations
argument_list|(
name|foundConfigurations
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QNlaEngine
name|QNlaEngine
operator|::
name|QNlaEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QBearerEngineImpl
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|nlaThread
argument_list|(
literal|0
argument_list|)
block|{
name|nlaThread
operator|=
operator|new
name|QNlaThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nlaThread
argument_list|,
name|SIGNAL
argument_list|(
name|networksChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|networksChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nlaThread
operator|->
name|start
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|ExcludeUserInputEvents
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNlaEngine
name|QNlaEngine
operator|::
name|~
name|QNlaEngine
parameter_list|()
block|{
operator|delete
name|nlaThread
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|networksChanged
name|void
name|QNlaEngine
operator|::
name|networksChanged
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QStringList
name|previous
init|=
name|accessPointConfigurations
operator|.
name|keys
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QNetworkConfigurationPrivate
modifier|*
argument_list|>
name|foundConfigurations
init|=
name|nlaThread
operator|->
name|getConfigurations
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|foundConfigurations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
name|foundConfigurations
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|previous
operator|.
name|removeAll
argument_list|(
name|cpPriv
operator|->
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|cpPriv
operator|->
name|id
argument_list|)
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|cpPriv
operator|->
name|id
argument_list|)
decl_stmt|;
name|bool
name|changed
init|=
literal|false
decl_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptr
operator|->
name|isValid
operator|!=
name|cpPriv
operator|->
name|isValid
condition|)
block|{
name|ptr
operator|->
name|isValid
operator|=
name|cpPriv
operator|->
name|isValid
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ptr
operator|->
name|name
operator|!=
name|cpPriv
operator|->
name|name
condition|)
block|{
name|ptr
operator|->
name|name
operator|=
name|cpPriv
operator|->
name|name
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ptr
operator|->
name|state
operator|!=
name|cpPriv
operator|->
name|state
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|cpPriv
operator|->
name|state
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
operator|delete
name|cpPriv
expr_stmt|;
block|}
else|else
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
name|cpPriv
argument_list|)
decl_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|ptr
operator|->
name|id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
while|while
condition|(
operator|!
name|previous
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|take
argument_list|(
name|previous
operator|.
name|takeFirst
argument_list|()
argument_list|)
decl_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|getInterfaceFromId
name|QString
name|QNlaEngine
operator|::
name|getInterfaceFromId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|configurationInterface
operator|.
name|value
argument_list|(
name|id
operator|.
name|toUInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hasIdentifier
name|bool
name|QNlaEngine
operator|::
name|hasIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|configurationInterface
operator|.
name|contains
argument_list|(
name|id
operator|.
name|toUInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|connectToId
name|void
name|QNlaEngine
operator|::
name|connectToId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|OperationNotSupported
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|disconnectFromId
name|void
name|QNlaEngine
operator|::
name|disconnectFromId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|OperationNotSupported
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|requestUpdate
name|void
name|QNlaEngine
operator|::
name|requestUpdate
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|nlaThread
operator|->
name|forceUpdate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sessionStateForId
name|QNetworkSession
operator|::
name|State
name|QNlaEngine
operator|::
name|sessionStateForId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptr
condition|)
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
if|if
condition|(
operator|!
name|ptr
operator|->
name|isValid
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|Connected
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|Disconnected
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Defined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Defined
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|NotAvailable
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Undefined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Undefined
condition|)
block|{
return|return
name|QNetworkSession
operator|::
name|NotAvailable
return|;
block|}
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
block|}
end_function
begin_function
DECL|function|capabilities
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|QNlaEngine
operator|::
name|capabilities
parameter_list|()
specifier|const
block|{
return|return
name|QNetworkConfigurationManager
operator|::
name|ForcedRoaming
return|;
block|}
end_function
begin_function
DECL|function|createSessionBackend
name|QNetworkSessionPrivate
modifier|*
name|QNlaEngine
operator|::
name|createSessionBackend
parameter_list|()
block|{
return|return
operator|new
name|QNetworkSessionPrivateImpl
return|;
block|}
end_function
begin_function
DECL|function|defaultConfiguration
name|QNetworkConfigurationPrivatePointer
name|QNlaEngine
operator|::
name|defaultConfiguration
parameter_list|()
block|{
return|return
name|QNetworkConfigurationPrivatePointer
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"qnlaengine.moc"
end_include
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
