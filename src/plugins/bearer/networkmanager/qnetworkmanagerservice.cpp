begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QList>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusConnection>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusError>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusInterface>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusMessage>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusReply>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusPendingCallWatcher>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusObjectPath>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusPendingCall>
end_include
begin_include
include|#
directive|include
file|"qnetworkmanagerservice.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_define
DECL|macro|DBUS_PROPERTIES_INTERFACE
define|#
directive|define
name|DBUS_PROPERTIES_INTERFACE
value|"org.freedesktop.DBus.Properties"
end_define
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QNetworkManagerInterface
name|QNetworkManagerInterface
operator|::
name|QNetworkManagerInterface
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusAbstractInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH
argument_list|)
argument_list|,
name|NM_DBUS_INTERFACE
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
return|return;
block|}
name|PropertiesDBusInterface
name|managerPropertiesInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH
argument_list|)
argument_list|,
name|DBUS_PROPERTIES_INTERFACE
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|argumentList
decl_stmt|;
name|argumentList
operator|<<
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE
argument_list|)
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QVariantMap
argument_list|>
name|propsReply
init|=
name|managerPropertiesInterface
operator|.
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|Block
argument_list|,
name|QLatin1String
argument_list|(
literal|"GetAll"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propsReply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|propertyMap
operator|=
name|propsReply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"propsReply"
operator|<<
name|propsReply
operator|.
name|error
argument_list|()
operator|.
name|message
argument_list|()
expr_stmt|;
block|}
name|QDBusPendingReply
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
name|nmReply
init|=
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetDevices"
argument_list|)
argument_list|)
decl_stmt|;
name|nmReply
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|nmReply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|devicesPathList
operator|=
name|nmReply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"nmReply"
operator|<<
name|nmReply
operator|.
name|error
argument_list|()
operator|.
name|message
argument_list|()
expr_stmt|;
block|}
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|propertiesSwap
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterface
name|QNetworkManagerInterface
operator|::
name|~
name|QNetworkManagerInterface
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerInterface
operator|::
name|setConnections
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|propertiesSwap
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|allOk
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"DeviceAdded"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|deviceAdded
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"DeviceRemoved"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|deviceRemoved
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|getDevices
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|QNetworkManagerInterface
operator|::
name|getDevices
parameter_list|()
block|{
if|if
condition|(
name|devicesPathList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//qWarning()<< "using blocking call!";
name|QDBusReply
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
name|reply
init|=
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetDevices"
argument_list|)
argument_list|)
decl_stmt|;
name|devicesPathList
operator|=
name|reply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|devicesPathList
return|;
block|}
end_function
begin_function
DECL|function|activateConnection
name|void
name|QNetworkManagerInterface
operator|::
name|activateConnection
parameter_list|(
name|QDBusObjectPath
name|connectionPath
parameter_list|,
name|QDBusObjectPath
name|devicePath
parameter_list|,
name|QDBusObjectPath
name|specificObject
parameter_list|)
block|{
name|QDBusPendingCall
name|pendingCall
init|=
name|asyncCall
argument_list|(
name|QLatin1String
argument_list|(
literal|"ActivateConnection"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|connectionPath
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|devicePath
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|specificObject
argument_list|)
argument_list|)
decl_stmt|;
name|QDBusPendingCallWatcher
modifier|*
name|callWatcher
init|=
operator|new
name|QDBusPendingCallWatcher
argument_list|(
name|pendingCall
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|callWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|activationFinished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deactivateConnection
name|void
name|QNetworkManagerInterface
operator|::
name|deactivateConnection
parameter_list|(
name|QDBusObjectPath
name|connectionPath
parameter_list|)
block|{
name|asyncCall
argument_list|(
name|QLatin1String
argument_list|(
literal|"DeactivateConnection"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|connectionPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wirelessEnabled
name|bool
name|QNetworkManagerInterface
operator|::
name|wirelessEnabled
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"WirelessEnabled"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"WirelessEnabled"
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|wirelessHardwareEnabled
name|bool
name|QNetworkManagerInterface
operator|::
name|wirelessHardwareEnabled
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"WirelessHardwareEnabled"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"WirelessHardwareEnabled"
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|activeConnections
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|QNetworkManagerInterface
operator|::
name|activeConnections
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"ActiveConnections"
argument_list|)
condition|)
block|{
specifier|const
name|QDBusArgument
modifier|&
name|dbusArgs
init|=
name|propertyMap
operator|.
name|value
argument_list|(
literal|"ActiveConnections"
argument_list|)
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
decl_stmt|;
name|QDBusObjectPath
name|path
decl_stmt|;
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|list
decl_stmt|;
name|dbusArgs
operator|.
name|beginArray
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|dbusArgs
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|dbusArgs
operator|>>
name|path
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|dbusArgs
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|list
return|;
block|}
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|QDBusObjectPath
argument_list|()
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|state
name|QNetworkManagerInterface
operator|::
name|NMState
name|QNetworkManagerInterface
operator|::
name|state
parameter_list|()
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"State"
argument_list|)
condition|)
return|return
cast|static_cast
argument_list|<
name|QNetworkManagerInterface
operator|::
name|NMState
argument_list|>
argument_list|(
name|propertyMap
operator|.
name|value
argument_list|(
literal|"State"
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|)
return|;
return|return
name|QNetworkManagerInterface
operator|::
name|NM_STATE_UNKNOWN
return|;
block|}
end_function
begin_function
DECL|function|version
name|QString
name|QNetworkManagerInterface
operator|::
name|version
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Version"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Version"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|propertiesSwap
name|void
name|QNetworkManagerInterface
operator|::
name|propertiesSwap
parameter_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
parameter_list|)
block|{
name|QMapIterator
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|i
argument_list|(
name|map
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|propertyMap
operator|.
name|insert
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|,
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|key
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"State"
argument_list|)
condition|)
block|{
name|quint32
name|state
init|=
name|i
operator|.
name|value
argument_list|()
operator|.
name|toUInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|NM_DEVICE_STATE_ACTIVATED
operator|||
name|state
operator|==
name|NM_DEVICE_STATE_DISCONNECTED
operator|||
name|state
operator|==
name|NM_DEVICE_STATE_UNAVAILABLE
operator|||
name|state
operator|==
name|NM_DEVICE_STATE_FAILED
condition|)
block|{
name|Q_EMIT
name|propertiesChanged
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|Q_EMIT
name|stateChanged
argument_list|(
name|state
argument_list|)
decl_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|i
operator|.
name|key
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"ActiveConnections"
argument_list|)
condition|)
block|{
name|Q_EMIT
name|propertiesChanged
argument_list|(
name|map
argument_list|)
decl_stmt|;
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|QNetworkManagerInterfaceAccessPoint
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|QNetworkManagerInterfaceAccessPoint
parameter_list|(
specifier|const
name|QString
modifier|&
name|dbusPathName
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusAbstractInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|dbusPathName
argument_list|,
name|NM_DBUS_INTERFACE_ACCESS_POINT
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
return|return;
block|}
name|PropertiesDBusInterface
modifier|*
name|accessPointPropertiesInterface
init|=
operator|new
name|PropertiesDBusInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|dbusPathName
argument_list|,
name|DBUS_PROPERTIES_INTERFACE
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|argumentList
decl_stmt|;
name|argumentList
operator|<<
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_ACCESS_POINT
argument_list|)
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QVariantMap
argument_list|>
name|propsReply
init|=
name|accessPointPropertiesInterface
operator|->
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|Block
argument_list|,
name|QLatin1String
argument_list|(
literal|"GetAll"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propsReply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|propertyMap
operator|=
name|propsReply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|dbusPathName
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_ACCESS_POINT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|propertiesSwap
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterfaceAccessPoint
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|~
name|QNetworkManagerInterfaceAccessPoint
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|flags
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|flags
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Flags"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Flags"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|wpaFlags
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|wpaFlags
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"WpaFlags"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"WpaFlags"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|rsnFlags
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|rsnFlags
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"RsnFlags"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"RsnFlags"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|ssid
name|QString
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|ssid
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Ssid"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Ssid"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|frequency
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|frequency
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Frequency"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Frequency"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|hwAddress
name|QString
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|hwAddress
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"HwAddress"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"HwAddress"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mode
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|mode
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Mode"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Mode"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|maxBitrate
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|maxBitrate
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"MaxBitrate"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"MaxBitrate"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|strength
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|strength
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Strength"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Strength"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|propertiesSwap
name|void
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|propertiesSwap
parameter_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
parameter_list|)
block|{
name|QMapIterator
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|i
argument_list|(
name|map
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|propertyMap
operator|.
name|insert
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|,
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QNetworkManagerInterfaceDevice
name|QNetworkManagerInterfaceDevice
operator|::
name|QNetworkManagerInterfaceDevice
parameter_list|(
specifier|const
name|QString
modifier|&
name|deviceObjectPath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusAbstractInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|deviceObjectPath
argument_list|,
name|NM_DBUS_INTERFACE_DEVICE
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
return|return;
block|}
name|PropertiesDBusInterface
name|devicePropertiesInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|deviceObjectPath
argument_list|,
name|DBUS_PROPERTIES_INTERFACE
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|argumentList
decl_stmt|;
name|argumentList
operator|<<
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE
argument_list|)
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QVariantMap
argument_list|>
name|propsReply
init|=
name|devicePropertiesInterface
operator|.
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|Block
argument_list|,
name|QLatin1String
argument_list|(
literal|"GetAll"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propsReply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|propertyMap
operator|=
name|propsReply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|deviceObjectPath
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|propertiesSwap
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterfaceDevice
name|QNetworkManagerInterfaceDevice
operator|::
name|~
name|QNetworkManagerInterfaceDevice
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|udi
name|QString
name|QNetworkManagerInterfaceDevice
operator|::
name|udi
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Udi"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Udi"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|networkInterface
name|QString
name|QNetworkManagerInterfaceDevice
operator|::
name|networkInterface
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Interface"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Interface"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|ip4Address
name|quint32
name|QNetworkManagerInterfaceDevice
operator|::
name|ip4Address
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Ip4Address"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Ip4Address"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|state
name|quint32
name|QNetworkManagerInterfaceDevice
operator|::
name|state
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"State"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"State"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|deviceType
name|quint32
name|QNetworkManagerInterfaceDevice
operator|::
name|deviceType
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"DeviceType"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"DeviceType"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|ip4config
name|QDBusObjectPath
name|QNetworkManagerInterfaceDevice
operator|::
name|ip4config
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Ip4Config"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Ip4Config"
argument_list|)
operator|.
name|value
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|()
return|;
return|return
name|QDBusObjectPath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|propertiesSwap
name|void
name|QNetworkManagerInterfaceDevice
operator|::
name|propertiesSwap
parameter_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
parameter_list|)
block|{
name|QMapIterator
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|i
argument_list|(
name|map
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|key
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"AvailableConnections"
argument_list|)
condition|)
block|{
comment|//Device
specifier|const
name|QDBusArgument
modifier|&
name|dbusArgs
init|=
name|i
operator|.
name|value
argument_list|()
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
decl_stmt|;
name|QDBusObjectPath
name|path
decl_stmt|;
name|QStringList
name|paths
decl_stmt|;
name|dbusArgs
operator|.
name|beginArray
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|dbusArgs
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|dbusArgs
operator|>>
name|path
expr_stmt|;
name|paths
operator|<<
name|path
operator|.
name|path
argument_list|()
expr_stmt|;
block|}
name|dbusArgs
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|Q_EMIT
name|connectionsChanged
argument_list|(
name|paths
argument_list|)
decl_stmt|;
block|}
name|propertyMap
operator|.
name|insert
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|,
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Q_EMIT
name|propertiesChanged
argument_list|(
name|map
argument_list|)
decl_stmt|;
block|}
end_function
begin_constructor
DECL|function|QNetworkManagerInterfaceDeviceWired
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|QNetworkManagerInterfaceDeviceWired
parameter_list|(
specifier|const
name|QString
modifier|&
name|ifaceDevicePath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusAbstractInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|ifaceDevicePath
argument_list|,
name|NM_DBUS_INTERFACE_DEVICE_WIRED
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
return|return;
block|}
name|PropertiesDBusInterface
name|deviceWiredPropertiesInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|ifaceDevicePath
argument_list|,
name|DBUS_PROPERTIES_INTERFACE
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|argumentList
decl_stmt|;
name|argumentList
operator|<<
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRED
argument_list|)
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QVariantMap
argument_list|>
name|propsReply
init|=
name|deviceWiredPropertiesInterface
operator|.
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|Block
argument_list|,
name|QLatin1String
argument_list|(
literal|"GetAll"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propsReply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|propertyMap
operator|=
name|propsReply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|ifaceDevicePath
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRED
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|propertiesSwap
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterfaceDeviceWired
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|~
name|QNetworkManagerInterfaceDeviceWired
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|hwAddress
name|QString
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|hwAddress
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"HwAddress"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"HwAddress"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|speed
name|quint32
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|speed
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Speed"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Speed"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|carrier
name|bool
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|carrier
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Carrier"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Carrier"
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|availableConnections
name|QStringList
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|availableConnections
parameter_list|()
block|{
name|QStringList
name|list
decl_stmt|;
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"AvailableConnections"
argument_list|)
condition|)
block|{
specifier|const
name|QDBusArgument
modifier|&
name|dbusArgs
init|=
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Carrier"
argument_list|)
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
decl_stmt|;
name|QDBusObjectPath
name|path
decl_stmt|;
name|dbusArgs
operator|.
name|beginArray
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|dbusArgs
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|dbusArgs
operator|>>
name|path
expr_stmt|;
name|list
operator|<<
name|path
operator|.
name|path
argument_list|()
expr_stmt|;
block|}
name|dbusArgs
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|propertiesSwap
name|void
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|propertiesSwap
parameter_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
parameter_list|)
block|{
name|QMapIterator
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|i
argument_list|(
name|map
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|propertyMap
operator|.
name|insert
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|,
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|key
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"Carrier"
argument_list|)
condition|)
name|Q_EMIT
name|carrierChanged
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|.
name|toBool
argument_list|()
argument_list|)
decl_stmt|;
block|}
name|Q_EMIT
name|propertiesChanged
argument_list|(
name|map
argument_list|)
decl_stmt|;
block|}
end_function
begin_constructor
DECL|function|QNetworkManagerInterfaceDeviceWireless
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|QNetworkManagerInterfaceDeviceWireless
parameter_list|(
specifier|const
name|QString
modifier|&
name|ifaceDevicePath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusAbstractInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|ifaceDevicePath
argument_list|,
name|NM_DBUS_INTERFACE_DEVICE_WIRELESS
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
return|return;
block|}
name|interfacePath
operator|=
name|ifaceDevicePath
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
name|nmReply
init|=
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetAccessPoints"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nmReply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|accessPointsList
operator|=
name|nmReply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|PropertiesDBusInterface
name|deviceWirelessPropertiesInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|interfacePath
argument_list|,
name|DBUS_PROPERTIES_INTERFACE
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|argumentList
decl_stmt|;
name|argumentList
operator|<<
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRELESS
argument_list|)
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QVariantMap
argument_list|>
name|propsReply
init|=
name|deviceWirelessPropertiesInterface
operator|.
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|Block
argument_list|,
name|QLatin1String
argument_list|(
literal|"GetAll"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propsReply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|propertyMap
operator|=
name|propsReply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|interfacePath
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRELESS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|propertiesSwap
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
name|reply
init|=
name|asyncCall
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetAccessPoints"
argument_list|)
argument_list|)
decl_stmt|;
name|QDBusPendingCallWatcher
modifier|*
name|callWatcher
init|=
operator|new
name|QDBusPendingCallWatcher
argument_list|(
name|reply
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|callWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|accessPointsFinished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterfaceDeviceWireless
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|~
name|QNetworkManagerInterfaceDeviceWireless
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|slotAccessPointAdded
name|void
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|slotAccessPointAdded
parameter_list|(
name|QDBusObjectPath
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|path
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
name|Q_EMIT
name|accessPointAdded
argument_list|(
name|path
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|slotAccessPointRemoved
name|void
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|slotAccessPointRemoved
parameter_list|(
name|QDBusObjectPath
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|path
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
name|Q_EMIT
name|accessPointRemoved
argument_list|(
name|path
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|setConnections
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QDBusConnection
name|dbusConnection
init|=
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
decl_stmt|;
name|bool
name|allOk
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|dbusConnection
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|interfacePath
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRELESS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"AccessPointAdded"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotAccessPointAdded
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dbusConnection
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|interfacePath
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRELESS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"AccessPointRemoved"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotAccessPointRemoved
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dbusConnection
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|interfacePath
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRELESS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"ScanDone"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|scanIsDone
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|accessPointsFinished
name|void
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|accessPointsFinished
parameter_list|(
name|QDBusPendingCallWatcher
modifier|*
name|watcher
parameter_list|)
block|{
name|QDBusPendingReply
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
name|reply
argument_list|(
operator|*
name|watcher
argument_list|)
decl_stmt|;
name|watcher
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|reply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|accessPointsList
operator|=
name|reply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|accessPointsList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Q_EMIT
name|accessPointAdded
argument_list|(
name|accessPointsList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getAccessPoints
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|getAccessPoints
parameter_list|()
block|{
if|if
condition|(
name|accessPointsList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//qWarning()<< "Using blocking call!";
name|QDBusReply
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
name|reply
init|=
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetAccessPoints"
argument_list|)
argument_list|)
decl_stmt|;
name|accessPointsList
operator|=
name|reply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|accessPointsList
return|;
block|}
end_function
begin_function
DECL|function|hwAddress
name|QString
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|hwAddress
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"HwAddress"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"HwAddress"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mode
name|quint32
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|mode
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Mode"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Mode"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|bitrate
name|quint32
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|bitrate
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Bitrate"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Bitrate"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|activeAccessPoint
name|QDBusObjectPath
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|activeAccessPoint
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"ActiveAccessPoint"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"ActiveAccessPoint"
argument_list|)
operator|.
name|value
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|()
return|;
return|return
name|QDBusObjectPath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|wirelessCapabilities
name|quint32
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|wirelessCapabilities
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"WirelelessCapabilities"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"WirelelessCapabilities"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|scanIsDone
name|void
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|scanIsDone
parameter_list|()
block|{
name|Q_EMIT
name|scanDone
argument_list|()
decl_stmt|;
block|}
end_function
begin_function
DECL|function|requestScan
name|void
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|requestScan
parameter_list|()
block|{
name|asyncCall
argument_list|(
name|QLatin1String
argument_list|(
literal|"RequestScan"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|propertiesSwap
name|void
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|propertiesSwap
parameter_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
parameter_list|)
block|{
name|QMapIterator
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|i
argument_list|(
name|map
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|propertyMap
operator|.
name|insert
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|,
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|key
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"ActiveAccessPoint"
argument_list|)
condition|)
comment|//DeviceWireless
name|Q_EMIT
name|propertiesChanged
argument_list|(
name|map
argument_list|)
decl_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QNetworkManagerInterfaceDeviceModem
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|QNetworkManagerInterfaceDeviceModem
parameter_list|(
specifier|const
name|QString
modifier|&
name|ifaceDevicePath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusAbstractInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|ifaceDevicePath
argument_list|,
name|NM_DBUS_INTERFACE_DEVICE_MODEM
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
return|return;
block|}
name|PropertiesDBusInterface
name|deviceModemPropertiesInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|ifaceDevicePath
argument_list|,
name|QLatin1String
argument_list|(
literal|"org.freedesktop.DBus.Properties"
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|argumentList
decl_stmt|;
name|argumentList
operator|<<
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_MODEM
argument_list|)
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QVariantMap
argument_list|>
name|propsReply
init|=
name|deviceModemPropertiesInterface
operator|.
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|Block
argument_list|,
name|QLatin1String
argument_list|(
literal|"GetAll"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propsReply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|propertyMap
operator|=
name|propsReply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|ifaceDevicePath
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_MODEM
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|propertiesSwap
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterfaceDeviceModem
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|~
name|QNetworkManagerInterfaceDeviceModem
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|modemCapabilities
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|ModemCapabilities
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|modemCapabilities
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"ModemCapabilities"
argument_list|)
condition|)
return|return
cast|static_cast
argument_list|<
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|ModemCapabilities
argument_list|>
argument_list|(
name|propertyMap
operator|.
name|value
argument_list|(
literal|"ModemCapabilities"
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|)
return|;
return|return
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|None
return|;
block|}
end_function
begin_function
DECL|function|currentCapabilities
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|ModemCapabilities
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|currentCapabilities
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"CurrentCapabilities"
argument_list|)
condition|)
return|return
cast|static_cast
argument_list|<
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|ModemCapabilities
argument_list|>
argument_list|(
name|propertyMap
operator|.
name|value
argument_list|(
literal|"CurrentCapabilities"
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|)
return|;
return|return
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|None
return|;
block|}
end_function
begin_function
DECL|function|propertiesSwap
name|void
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|propertiesSwap
parameter_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
parameter_list|)
block|{
name|QMapIterator
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|i
argument_list|(
name|map
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|propertyMap
operator|.
name|insert
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|,
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Q_EMIT
name|propertiesChanged
argument_list|(
name|map
argument_list|)
decl_stmt|;
block|}
end_function
begin_constructor
DECL|function|QNetworkManagerSettings
name|QNetworkManagerSettings
operator|::
name|QNetworkManagerSettings
parameter_list|(
specifier|const
name|QString
modifier|&
name|settingsService
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusAbstractInterface
argument_list|(
name|settingsService
argument_list|,
name|NM_DBUS_PATH_SETTINGS
argument_list|,
name|NM_DBUS_IFACE_SETTINGS
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
return|return;
block|}
name|interfacePath
operator|=
name|settingsService
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
name|nmReply
init|=
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"ListConnections"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nmReply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|connectionsList
operator|=
name|nmReply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerSettings
name|QNetworkManagerSettings
operator|::
name|~
name|QNetworkManagerSettings
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerSettings
operator|::
name|setConnections
parameter_list|()
block|{
name|bool
name|allOk
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|interfacePath
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH_SETTINGS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_IFACE_SETTINGS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"NewConnection"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
name|qWarning
argument_list|(
literal|"NewConnection could not be connected"
argument_list|)
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|listConnections
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|QNetworkManagerSettings
operator|::
name|listConnections
parameter_list|()
block|{
if|if
condition|(
name|connectionsList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//qWarning()<< "Using blocking call!";
name|QDBusReply
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
name|reply
init|=
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"ListConnections"
argument_list|)
argument_list|)
decl_stmt|;
name|connectionsList
operator|=
name|reply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|connectionsList
return|;
block|}
end_function
begin_function
DECL|function|getConnectionByUuid
name|QString
name|QNetworkManagerSettings
operator|::
name|getConnectionByUuid
parameter_list|(
specifier|const
name|QString
modifier|&
name|uuid
parameter_list|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|argumentList
decl_stmt|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|QDBusReply
argument_list|<
name|QDBusObjectPath
argument_list|>
name|reply
init|=
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|Block
argument_list|,
name|QLatin1String
argument_list|(
literal|"GetConnectionByUuid"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|value
argument_list|()
operator|.
name|path
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|QNetworkManagerSettingsConnection
name|QNetworkManagerSettingsConnection
operator|::
name|QNetworkManagerSettingsConnection
parameter_list|(
specifier|const
name|QString
modifier|&
name|settingsService
parameter_list|,
specifier|const
name|QString
modifier|&
name|connectionObjectPath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusAbstractInterface
argument_list|(
name|settingsService
argument_list|,
name|connectionObjectPath
argument_list|,
name|NM_DBUS_IFACE_SETTINGS_CONNECTION
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
name|qDBusRegisterMetaType
argument_list|<
name|QNmSettingsMap
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
return|return;
block|}
name|interfacepath
operator|=
name|connectionObjectPath
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QNmSettingsMap
argument_list|>
name|nmReply
init|=
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetSettings"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nmReply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|settingsMap
operator|=
name|nmReply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerSettingsConnection
name|QNetworkManagerSettingsConnection
operator|::
name|~
name|QNetworkManagerSettingsConnection
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerSettingsConnection
operator|::
name|setConnections
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QDBusConnection
name|dbusConnection
init|=
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
decl_stmt|;
name|bool
name|allOk
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|dbusConnection
operator|.
name|connect
argument_list|(
name|service
argument_list|()
argument_list|,
name|interfacepath
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_IFACE_SETTINGS_CONNECTION
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Updated"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|updated
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dbusConnection
operator|.
name|connect
argument_list|(
name|service
argument_list|()
argument_list|,
name|interfacepath
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_IFACE_SETTINGS_CONNECTION
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Removed"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|slotSettingsRemoved
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|slotSettingsRemoved
name|void
name|QNetworkManagerSettingsConnection
operator|::
name|slotSettingsRemoved
parameter_list|()
block|{
name|Q_EMIT
name|removed
argument_list|(
name|interfacepath
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|getSettings
name|QNmSettingsMap
name|QNetworkManagerSettingsConnection
operator|::
name|getSettings
parameter_list|()
block|{
if|if
condition|(
name|settingsMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//qWarning()<< "Using blocking call!";
name|QDBusReply
argument_list|<
name|QNmSettingsMap
argument_list|>
name|reply
init|=
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetSettings"
argument_list|)
argument_list|)
decl_stmt|;
name|settingsMap
operator|=
name|reply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|settingsMap
return|;
block|}
end_function
begin_function
DECL|function|getType
name|NMDeviceType
name|QNetworkManagerSettingsConnection
operator|::
name|getType
parameter_list|()
block|{
specifier|const
name|QString
name|devType
init|=
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|devType
operator|==
name|QLatin1String
argument_list|(
literal|"802-3-ethernet"
argument_list|)
condition|)
return|return
name|DEVICE_TYPE_ETHERNET
return|;
elseif|else
if|if
condition|(
name|devType
operator|==
name|QLatin1String
argument_list|(
literal|"802-11-wireless"
argument_list|)
condition|)
return|return
name|DEVICE_TYPE_WIFI
return|;
elseif|else
if|if
condition|(
name|devType
operator|==
name|QLatin1String
argument_list|(
literal|"gsm"
argument_list|)
condition|)
return|return
name|DEVICE_TYPE_MODEM
return|;
else|else
return|return
name|DEVICE_TYPE_UNKNOWN
return|;
block|}
end_function
begin_function
DECL|function|isAutoConnect
name|bool
name|QNetworkManagerSettingsConnection
operator|::
name|isAutoConnect
parameter_list|()
block|{
specifier|const
name|QVariant
name|autoConnect
init|=
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"autoconnect"
argument_list|)
argument_list|)
decl_stmt|;
comment|// NetworkManager default is to auto connect
if|if
condition|(
operator|!
name|autoConnect
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
name|autoConnect
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getTimestamp
name|quint64
name|QNetworkManagerSettingsConnection
operator|::
name|getTimestamp
parameter_list|()
block|{
return|return
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"timestamp"
argument_list|)
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getId
name|QString
name|QNetworkManagerSettingsConnection
operator|::
name|getId
parameter_list|()
block|{
return|return
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"id"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getUuid
name|QString
name|QNetworkManagerSettingsConnection
operator|::
name|getUuid
parameter_list|()
block|{
specifier|const
name|QString
name|id
init|=
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"uuid"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// is no uuid, return the connection path
return|return
name|id
operator|.
name|isEmpty
argument_list|()
condition|?
name|path
argument_list|()
else|:
name|id
return|;
block|}
end_function
begin_function
DECL|function|getSsid
name|QString
name|QNetworkManagerSettingsConnection
operator|::
name|getSsid
parameter_list|()
block|{
return|return
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"802-11-wireless"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ssid"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getMacAddress
name|QString
name|QNetworkManagerSettingsConnection
operator|::
name|getMacAddress
parameter_list|()
block|{
name|NMDeviceType
name|type
init|=
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|DEVICE_TYPE_ETHERNET
condition|)
block|{
return|return
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"802-3-ethernet"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"mac-address"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|DEVICE_TYPE_WIFI
condition|)
block|{
return|return
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"802-11-wireless"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"mac-address"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|QString
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|getSeenBssids
name|QStringList
name|QNetworkManagerSettingsConnection
operator|::
name|getSeenBssids
parameter_list|()
block|{
if|if
condition|(
name|getType
argument_list|()
operator|==
name|DEVICE_TYPE_WIFI
condition|)
block|{
return|return
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"802-11-wireless"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"seen-bssids"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|QStringList
argument_list|()
return|;
block|}
block|}
end_function
begin_constructor
DECL|function|QNetworkManagerConnectionActive
name|QNetworkManagerConnectionActive
operator|::
name|QNetworkManagerConnectionActive
parameter_list|(
specifier|const
name|QString
modifier|&
name|activeConnectionObjectPath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusAbstractInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|activeConnectionObjectPath
argument_list|,
name|NM_DBUS_INTERFACE_ACTIVE_CONNECTION
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
return|return;
block|}
name|PropertiesDBusInterface
name|connectionActivePropertiesInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|activeConnectionObjectPath
argument_list|,
name|QLatin1String
argument_list|(
literal|"org.freedesktop.DBus.Properties"
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|argumentList
decl_stmt|;
name|argumentList
operator|<<
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_ACTIVE_CONNECTION
argument_list|)
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QVariantMap
argument_list|>
name|propsReply
init|=
name|connectionActivePropertiesInterface
operator|.
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|Block
argument_list|,
name|QLatin1String
argument_list|(
literal|"GetAll"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propsReply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|propertyMap
operator|=
name|propsReply
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
name|propsReply
operator|.
name|error
argument_list|()
operator|.
name|message
argument_list|()
expr_stmt|;
block|}
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|activeConnectionObjectPath
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_ACTIVE_CONNECTION
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|propertiesSwap
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerConnectionActive
name|QNetworkManagerConnectionActive
operator|::
name|~
name|QNetworkManagerConnectionActive
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|connection
name|QDBusObjectPath
name|QNetworkManagerConnectionActive
operator|::
name|connection
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Connection"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Connection"
argument_list|)
operator|.
name|value
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|()
return|;
return|return
name|QDBusObjectPath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|specificObject
name|QDBusObjectPath
name|QNetworkManagerConnectionActive
operator|::
name|specificObject
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"SpecificObject"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"SpecificObject"
argument_list|)
operator|.
name|value
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|()
return|;
return|return
name|QDBusObjectPath
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|devices
name|QStringList
name|QNetworkManagerConnectionActive
operator|::
name|devices
parameter_list|()
specifier|const
block|{
name|QStringList
name|list
decl_stmt|;
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Devices"
argument_list|)
condition|)
block|{
specifier|const
name|QDBusArgument
modifier|&
name|dbusArgs
init|=
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Devices"
argument_list|)
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
decl_stmt|;
name|QDBusObjectPath
name|path
decl_stmt|;
name|dbusArgs
operator|.
name|beginArray
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|dbusArgs
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|dbusArgs
operator|>>
name|path
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|path
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dbusArgs
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|state
name|quint32
name|QNetworkManagerConnectionActive
operator|::
name|state
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"State"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"State"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|defaultRoute
name|bool
name|QNetworkManagerConnectionActive
operator|::
name|defaultRoute
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Default"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Default"
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|default6Route
name|bool
name|QNetworkManagerConnectionActive
operator|::
name|default6Route
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|propertyMap
operator|.
name|contains
argument_list|(
literal|"Default6"
argument_list|)
condition|)
return|return
name|propertyMap
operator|.
name|value
argument_list|(
literal|"Default6"
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|propertiesSwap
name|void
name|QNetworkManagerConnectionActive
operator|::
name|propertiesSwap
parameter_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
parameter_list|)
block|{
name|QMapIterator
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|i
argument_list|(
name|map
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|propertyMap
operator|.
name|insert
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|,
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|key
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"State"
argument_list|)
condition|)
block|{
name|quint32
name|state
init|=
name|i
operator|.
name|value
argument_list|()
operator|.
name|toUInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|NM_ACTIVE_CONNECTION_STATE_ACTIVATED
operator|||
name|state
operator|==
name|NM_ACTIVE_CONNECTION_STATE_DEACTIVATED
condition|)
block|{
name|Q_EMIT
name|propertiesChanged
argument_list|(
name|map
argument_list|)
decl_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|QNetworkManagerIp4Config
name|QNetworkManagerIp4Config
operator|::
name|QNetworkManagerIp4Config
parameter_list|(
specifier|const
name|QString
modifier|&
name|deviceObjectPath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDBusAbstractInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|deviceObjectPath
argument_list|,
name|NM_DBUS_INTERFACE_IP4_CONFIG
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerIp4Config
name|QNetworkManagerIp4Config
operator|::
name|~
name|QNetworkManagerIp4Config
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|domains
name|QStringList
name|QNetworkManagerIp4Config
operator|::
name|domains
parameter_list|()
specifier|const
block|{
return|return
name|property
argument_list|(
literal|"Domains"
argument_list|)
operator|.
name|toStringList
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
end_unit
