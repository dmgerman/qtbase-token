begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QList>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusConnection>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusError>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusInterface>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusMessage>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusReply>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusPendingCallWatcher>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusObjectPath>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusPendingCall>
end_include
begin_include
include|#
directive|include
file|"qnetworkmanagerservice.h"
end_include
begin_include
include|#
directive|include
file|"qnmdbushelper.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QNetworkManagerInterfacePrivate
class|class
name|QNetworkManagerInterfacePrivate
block|{
public|public:
DECL|member|connectionInterface
name|QDBusInterface
modifier|*
name|connectionInterface
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNetworkManagerInterface
name|QNetworkManagerInterface
operator|::
name|QNetworkManagerInterface
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|d
operator|=
operator|new
name|QNetworkManagerInterfacePrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|connectionInterface
operator|=
operator|new
name|QDBusInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|connectionInterface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
name|nmDBusHelper
operator|=
operator|new
name|QNmDBusHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForPropertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|propertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForStateChanged
argument_list|(
name|QString
argument_list|,
name|quint32
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QString
argument_list|,
name|quint32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterface
name|QNetworkManagerInterface
operator|::
name|~
name|QNetworkManagerInterface
parameter_list|()
block|{
operator|delete
name|d
operator|->
name|connectionInterface
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QNetworkManagerInterface
operator|::
name|isValid
parameter_list|()
block|{
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerInterface
operator|::
name|setConnections
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QDBusConnection
name|dbusConnection
init|=
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
decl_stmt|;
name|bool
name|allOk
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dbusConnection
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|nmDBusHelper
argument_list|,
name|SLOT
argument_list|(
name|slotPropertiesChanged
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|dbusConnection
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"DeviceAdded"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|deviceAdded
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|dbusConnection
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"DeviceRemoved"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|deviceRemoved
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|connectionInterface
name|QDBusInterface
modifier|*
name|QNetworkManagerInterface
operator|::
name|connectionInterface
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
return|;
block|}
end_function
begin_function
DECL|function|getDevices
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|QNetworkManagerInterface
operator|::
name|getDevices
parameter_list|()
specifier|const
block|{
name|QDBusReply
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
name|reply
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetDevices"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|activateConnection
name|void
name|QNetworkManagerInterface
operator|::
name|activateConnection
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|QDBusObjectPath
name|connectionPath
parameter_list|,
name|QDBusObjectPath
name|devicePath
parameter_list|,
name|QDBusObjectPath
name|specificObject
parameter_list|)
block|{
name|QDBusPendingCall
name|pendingCall
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|asyncCall
argument_list|(
name|QLatin1String
argument_list|(
literal|"ActivateConnection"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|connectionPath
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|devicePath
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|specificObject
argument_list|)
argument_list|)
decl_stmt|;
name|QDBusPendingCallWatcher
modifier|*
name|callWatcher
init|=
operator|new
name|QDBusPendingCallWatcher
argument_list|(
name|pendingCall
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|callWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|activationFinished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deactivateConnection
name|void
name|QNetworkManagerInterface
operator|::
name|deactivateConnection
parameter_list|(
name|QDBusObjectPath
name|connectionPath
parameter_list|)
specifier|const
block|{
name|d
operator|->
name|connectionInterface
operator|->
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"DeactivateConnection"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|connectionPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wirelessEnabled
name|bool
name|QNetworkManagerInterface
operator|::
name|wirelessEnabled
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"WirelessEnabled"
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|wirelessHardwareEnabled
name|bool
name|QNetworkManagerInterface
operator|::
name|wirelessHardwareEnabled
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"WirelessHardwareEnabled"
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|activeConnections
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|QNetworkManagerInterface
operator|::
name|activeConnections
parameter_list|()
specifier|const
block|{
name|QVariant
name|prop
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"ActiveConnections"
argument_list|)
decl_stmt|;
return|return
name|prop
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|state
name|quint32
name|QNetworkManagerInterface
operator|::
name|state
parameter_list|()
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"State"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QNetworkManagerInterfaceAccessPointPrivate
class|class
name|QNetworkManagerInterfaceAccessPointPrivate
block|{
public|public:
DECL|member|connectionInterface
name|QDBusInterface
modifier|*
name|connectionInterface
decl_stmt|;
DECL|member|path
name|QString
name|path
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNetworkManagerInterfaceAccessPoint
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|QNetworkManagerInterfaceAccessPoint
parameter_list|(
specifier|const
name|QString
modifier|&
name|dbusPathName
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|nmDBusHelper
argument_list|(
literal|0
argument_list|)
block|{
name|d
operator|=
operator|new
name|QNetworkManagerInterfaceAccessPointPrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|path
operator|=
name|dbusPathName
expr_stmt|;
name|d
operator|->
name|connectionInterface
operator|=
operator|new
name|QDBusInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_ACCESS_POINT
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|connectionInterface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterfaceAccessPoint
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|~
name|QNetworkManagerInterfaceAccessPoint
parameter_list|()
block|{
operator|delete
name|d
operator|->
name|connectionInterface
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|isValid
parameter_list|()
block|{
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|setConnections
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|bool
name|allOk
init|=
literal|false
decl_stmt|;
operator|delete
name|nmDBusHelper
expr_stmt|;
name|nmDBusHelper
operator|=
operator|new
name|QNmDBusHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForPropertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|propertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_ACCESS_POINT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|nmDBusHelper
argument_list|,
name|SLOT
argument_list|(
name|slotPropertiesChanged
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|connectionInterface
name|QDBusInterface
modifier|*
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|connectionInterface
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
return|;
block|}
end_function
begin_function
DECL|function|flags
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|flags
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Flags"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|wpaFlags
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|wpaFlags
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"WpaFlags"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rsnFlags
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|rsnFlags
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"RsnFlags"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|ssid
name|QString
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|ssid
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Ssid"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|frequency
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|frequency
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Frequency"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|hwAddress
name|QString
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|hwAddress
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"HwAddress"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mode
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|mode
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Mode"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|maxBitrate
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|maxBitrate
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"MaxBitrate"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|strength
name|quint32
name|QNetworkManagerInterfaceAccessPoint
operator|::
name|strength
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Strength"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QNetworkManagerInterfaceDevicePrivate
class|class
name|QNetworkManagerInterfaceDevicePrivate
block|{
public|public:
DECL|member|connectionInterface
name|QDBusInterface
modifier|*
name|connectionInterface
decl_stmt|;
DECL|member|path
name|QString
name|path
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNetworkManagerInterfaceDevice
name|QNetworkManagerInterfaceDevice
operator|::
name|QNetworkManagerInterfaceDevice
parameter_list|(
specifier|const
name|QString
modifier|&
name|deviceObjectPath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|nmDBusHelper
argument_list|(
literal|0
argument_list|)
block|{
name|d
operator|=
operator|new
name|QNetworkManagerInterfaceDevicePrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|path
operator|=
name|deviceObjectPath
expr_stmt|;
name|d
operator|->
name|connectionInterface
operator|=
operator|new
name|QDBusInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|connectionInterface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterfaceDevice
name|QNetworkManagerInterfaceDevice
operator|::
name|~
name|QNetworkManagerInterfaceDevice
parameter_list|()
block|{
operator|delete
name|d
operator|->
name|connectionInterface
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QNetworkManagerInterfaceDevice
operator|::
name|isValid
parameter_list|()
block|{
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerInterfaceDevice
operator|::
name|setConnections
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|bool
name|allOk
init|=
literal|true
decl_stmt|;
operator|delete
name|nmDBusHelper
expr_stmt|;
name|nmDBusHelper
operator|=
operator|new
name|QNmDBusHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForStateChanged
argument_list|(
name|QString
argument_list|,
name|quint32
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QString
argument_list|,
name|quint32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"StateChanged"
argument_list|)
argument_list|,
name|nmDBusHelper
argument_list|,
name|SLOT
argument_list|(
name|deviceStateChanged
argument_list|(
name|quint32
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForConnectionsChanged
argument_list|(
name|QStringList
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|connectionsChanged
argument_list|(
name|QStringList
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_ACCESS_POINT
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|nmDBusHelper
argument_list|,
name|SLOT
argument_list|(
name|slotPropertiesChanged
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|connectionInterface
name|QDBusInterface
modifier|*
name|QNetworkManagerInterfaceDevice
operator|::
name|connectionInterface
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
return|;
block|}
end_function
begin_function
DECL|function|udi
name|QString
name|QNetworkManagerInterfaceDevice
operator|::
name|udi
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Udi"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|networkInterface
name|QString
name|QNetworkManagerInterfaceDevice
operator|::
name|networkInterface
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Interface"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|ip4Address
name|quint32
name|QNetworkManagerInterfaceDevice
operator|::
name|ip4Address
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Ip4Address"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|state
name|quint32
name|QNetworkManagerInterfaceDevice
operator|::
name|state
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"State"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|deviceType
name|quint32
name|QNetworkManagerInterfaceDevice
operator|::
name|deviceType
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"DeviceType"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|ip4config
name|QDBusObjectPath
name|QNetworkManagerInterfaceDevice
operator|::
name|ip4config
parameter_list|()
specifier|const
block|{
name|QVariant
name|prop
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Ip4Config"
argument_list|)
decl_stmt|;
return|return
name|prop
operator|.
name|value
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QNetworkManagerInterfaceDeviceWiredPrivate
class|class
name|QNetworkManagerInterfaceDeviceWiredPrivate
block|{
public|public:
DECL|member|connectionInterface
name|QDBusInterface
modifier|*
name|connectionInterface
decl_stmt|;
DECL|member|path
name|QString
name|path
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNetworkManagerInterfaceDeviceWired
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|QNetworkManagerInterfaceDeviceWired
parameter_list|(
specifier|const
name|QString
modifier|&
name|ifaceDevicePath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|nmDBusHelper
argument_list|(
literal|0
argument_list|)
block|{
name|d
operator|=
operator|new
name|QNetworkManagerInterfaceDeviceWiredPrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|path
operator|=
name|ifaceDevicePath
expr_stmt|;
name|d
operator|->
name|connectionInterface
operator|=
operator|new
name|QDBusInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRED
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|connectionInterface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterfaceDeviceWired
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|~
name|QNetworkManagerInterfaceDeviceWired
parameter_list|()
block|{
operator|delete
name|d
operator|->
name|connectionInterface
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|isValid
parameter_list|()
block|{
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|setConnections
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|bool
name|allOk
init|=
literal|true
decl_stmt|;
operator|delete
name|nmDBusHelper
expr_stmt|;
name|nmDBusHelper
operator|=
operator|new
name|QNmDBusHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForPropertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|propertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRED
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|nmDBusHelper
argument_list|,
name|SLOT
argument_list|(
name|slotPropertiesChanged
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|connectionInterface
name|QDBusInterface
modifier|*
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|connectionInterface
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
return|;
block|}
end_function
begin_function
DECL|function|hwAddress
name|QString
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|hwAddress
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"HwAddress"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|speed
name|quint32
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|speed
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Speed"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|carrier
name|bool
name|QNetworkManagerInterfaceDeviceWired
operator|::
name|carrier
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Carrier"
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QNetworkManagerInterfaceDeviceWirelessPrivate
class|class
name|QNetworkManagerInterfaceDeviceWirelessPrivate
block|{
public|public:
DECL|member|connectionInterface
name|QDBusInterface
modifier|*
name|connectionInterface
decl_stmt|;
DECL|member|path
name|QString
name|path
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNetworkManagerInterfaceDeviceWireless
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|QNetworkManagerInterfaceDeviceWireless
parameter_list|(
specifier|const
name|QString
modifier|&
name|ifaceDevicePath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|nmDBusHelper
argument_list|(
literal|0
argument_list|)
block|{
name|d
operator|=
operator|new
name|QNetworkManagerInterfaceDeviceWirelessPrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|path
operator|=
name|ifaceDevicePath
expr_stmt|;
name|d
operator|->
name|connectionInterface
operator|=
operator|new
name|QDBusInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRELESS
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|connectionInterface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterfaceDeviceWireless
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|~
name|QNetworkManagerInterfaceDeviceWireless
parameter_list|()
block|{
operator|delete
name|d
operator|->
name|connectionInterface
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|isValid
parameter_list|()
block|{
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|setConnections
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QDBusConnection
name|dbusConnection
init|=
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
decl_stmt|;
name|bool
name|allOk
init|=
literal|true
decl_stmt|;
operator|delete
name|nmDBusHelper
expr_stmt|;
name|nmDBusHelper
operator|=
operator|new
name|QNmDBusHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForPropertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|propertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForAccessPointAdded
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|accessPointAdded
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForAccessPointRemoved
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|accessPointRemoved
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dbusConnection
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRELESS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"AccessPointAdded"
argument_list|)
argument_list|,
name|nmDBusHelper
argument_list|,
name|SLOT
argument_list|(
name|slotAccessPointAdded
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dbusConnection
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRELESS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"AccessPointRemoved"
argument_list|)
argument_list|,
name|nmDBusHelper
argument_list|,
name|SLOT
argument_list|(
name|slotAccessPointRemoved
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dbusConnection
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRELESS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|nmDBusHelper
argument_list|,
name|SLOT
argument_list|(
name|slotPropertiesChanged
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dbusConnection
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_WIRELESS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"ScanDone"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|scanIsDone
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|connectionInterface
name|QDBusInterface
modifier|*
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|connectionInterface
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
return|;
block|}
end_function
begin_function
DECL|function|getAccessPoints
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|getAccessPoints
parameter_list|()
block|{
name|QDBusReply
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
name|reply
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetAccessPoints"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|hwAddress
name|QString
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|hwAddress
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"HwAddress"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mode
name|quint32
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|mode
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Mode"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|bitrate
name|quint32
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|bitrate
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Bitrate"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|activeAccessPoint
name|QDBusObjectPath
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|activeAccessPoint
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"ActiveAccessPoint"
argument_list|)
operator|.
name|value
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|wirelessCapabilities
name|quint32
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|wirelessCapabilities
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"WirelelessCapabilities"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|scanIsDone
name|void
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|scanIsDone
parameter_list|()
block|{
name|Q_EMIT
name|scanDone
argument_list|()
decl_stmt|;
block|}
end_function
begin_function
DECL|function|requestScan
name|void
name|QNetworkManagerInterfaceDeviceWireless
operator|::
name|requestScan
parameter_list|()
block|{
name|d
operator|->
name|connectionInterface
operator|->
name|asyncCall
argument_list|(
name|QLatin1String
argument_list|(
literal|"RequestScan"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QNetworkManagerInterfaceDeviceModemPrivate
class|class
name|QNetworkManagerInterfaceDeviceModemPrivate
block|{
public|public:
DECL|member|connectionInterface
name|QDBusInterface
modifier|*
name|connectionInterface
decl_stmt|;
DECL|member|path
name|QString
name|path
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNetworkManagerInterfaceDeviceModem
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|QNetworkManagerInterfaceDeviceModem
parameter_list|(
specifier|const
name|QString
modifier|&
name|ifaceDevicePath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|nmDBusHelper
argument_list|(
literal|0
argument_list|)
block|{
name|d
operator|=
operator|new
name|QNetworkManagerInterfaceDeviceModemPrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|path
operator|=
name|ifaceDevicePath
expr_stmt|;
name|d
operator|->
name|connectionInterface
operator|=
operator|new
name|QDBusInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_MODEM
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|connectionInterface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerInterfaceDeviceModem
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|~
name|QNetworkManagerInterfaceDeviceModem
parameter_list|()
block|{
operator|delete
name|d
operator|->
name|connectionInterface
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|isValid
parameter_list|()
block|{
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|setConnections
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|bool
name|allOk
init|=
literal|true
decl_stmt|;
operator|delete
name|nmDBusHelper
expr_stmt|;
name|nmDBusHelper
operator|=
operator|new
name|QNmDBusHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForPropertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|propertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_DEVICE_MODEM
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|nmDBusHelper
argument_list|,
name|SLOT
argument_list|(
name|slotDevicePropertiesChanged
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|connectionInterface
name|QDBusInterface
modifier|*
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|connectionInterface
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
return|;
block|}
end_function
begin_function
DECL|function|modemCapabilities
name|quint32
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|modemCapabilities
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"ModemCapabilities"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|currentCapabilities
name|quint32
name|QNetworkManagerInterfaceDeviceModem
operator|::
name|currentCapabilities
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"CurrentCapabilities"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QNetworkManagerSettingsPrivate
class|class
name|QNetworkManagerSettingsPrivate
block|{
public|public:
DECL|member|connectionInterface
name|QDBusInterface
modifier|*
name|connectionInterface
decl_stmt|;
DECL|member|path
name|QString
name|path
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNetworkManagerSettings
name|QNetworkManagerSettings
operator|::
name|QNetworkManagerSettings
parameter_list|(
specifier|const
name|QString
modifier|&
name|settingsService
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|d
operator|=
operator|new
name|QNetworkManagerSettingsPrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|path
operator|=
name|settingsService
expr_stmt|;
name|d
operator|->
name|connectionInterface
operator|=
operator|new
name|QDBusInterface
argument_list|(
name|settingsService
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH_SETTINGS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_IFACE_SETTINGS
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|connectionInterface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerSettings
name|QNetworkManagerSettings
operator|::
name|~
name|QNetworkManagerSettings
parameter_list|()
block|{
operator|delete
name|d
operator|->
name|connectionInterface
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QNetworkManagerSettings
operator|::
name|isValid
parameter_list|()
block|{
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerSettings
operator|::
name|setConnections
parameter_list|()
block|{
name|bool
name|allOk
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_PATH_SETTINGS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_IFACE_SETTINGS
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"NewConnection"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|listConnections
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|QNetworkManagerSettings
operator|::
name|listConnections
parameter_list|()
block|{
name|QDBusReply
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
name|reply
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"ListConnections"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|value
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getConnectionByUuid
name|QString
name|QNetworkManagerSettings
operator|::
name|getConnectionByUuid
parameter_list|(
specifier|const
name|QString
modifier|&
name|uuid
parameter_list|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|argumentList
decl_stmt|;
name|argumentList
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|QDBusReply
argument_list|<
name|QDBusObjectPath
argument_list|>
name|reply
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|Block
argument_list|,
name|QLatin1String
argument_list|(
literal|"GetConnectionByUuid"
argument_list|)
argument_list|,
name|argumentList
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|value
argument_list|()
operator|.
name|path
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|connectionInterface
name|QDBusInterface
modifier|*
name|QNetworkManagerSettings
operator|::
name|connectionInterface
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
return|;
block|}
end_function
begin_class
DECL|class|QNetworkManagerSettingsConnectionPrivate
class|class
name|QNetworkManagerSettingsConnectionPrivate
block|{
public|public:
DECL|member|connectionInterface
name|QDBusInterface
modifier|*
name|connectionInterface
decl_stmt|;
DECL|member|path
name|QString
name|path
decl_stmt|;
DECL|member|service
name|QString
name|service
decl_stmt|;
DECL|member|settingsMap
name|QNmSettingsMap
name|settingsMap
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNetworkManagerSettingsConnection
name|QNetworkManagerSettingsConnection
operator|::
name|QNetworkManagerSettingsConnection
parameter_list|(
specifier|const
name|QString
modifier|&
name|settingsService
parameter_list|,
specifier|const
name|QString
modifier|&
name|connectionObjectPath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|nmDBusHelper
argument_list|(
literal|0
argument_list|)
block|{
name|qDBusRegisterMetaType
argument_list|<
name|QNmSettingsMap
argument_list|>
argument_list|()
expr_stmt|;
name|d
operator|=
operator|new
name|QNetworkManagerSettingsConnectionPrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|path
operator|=
name|connectionObjectPath
expr_stmt|;
name|d
operator|->
name|service
operator|=
name|settingsService
expr_stmt|;
name|d
operator|->
name|connectionInterface
operator|=
operator|new
name|QDBusInterface
argument_list|(
name|settingsService
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_IFACE_SETTINGS_CONNECTION
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|connectionInterface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
name|QDBusReply
argument_list|<
name|QNmSettingsMap
argument_list|>
name|rep
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetSettings"
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|settingsMap
operator|=
name|rep
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerSettingsConnection
name|QNetworkManagerSettingsConnection
operator|::
name|~
name|QNetworkManagerSettingsConnection
parameter_list|()
block|{
operator|delete
name|d
operator|->
name|connectionInterface
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QNetworkManagerSettingsConnection
operator|::
name|isValid
parameter_list|()
block|{
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerSettingsConnection
operator|::
name|setConnections
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QDBusConnection
name|dbusConnection
init|=
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
decl_stmt|;
name|bool
name|allOk
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|dbusConnection
operator|.
name|connect
argument_list|(
name|d
operator|->
name|service
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_IFACE_SETTINGS_CONNECTION
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Updated"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|updated
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
operator|delete
name|nmDBusHelper
expr_stmt|;
name|nmDBusHelper
operator|=
operator|new
name|QNmDBusHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForSettingsRemoved
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|removed
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dbusConnection
operator|.
name|connect
argument_list|(
name|d
operator|->
name|service
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_IFACE_SETTINGS_CONNECTION
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Removed"
argument_list|)
argument_list|,
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|slotSettingsRemoved
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|connectionInterface
name|QDBusInterface
modifier|*
name|QNetworkManagerSettingsConnection
operator|::
name|connectionInterface
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
return|;
block|}
end_function
begin_function
DECL|function|getSettings
name|QNmSettingsMap
name|QNetworkManagerSettingsConnection
operator|::
name|getSettings
parameter_list|()
block|{
name|QDBusReply
argument_list|<
name|QNmSettingsMap
argument_list|>
name|rep
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|call
argument_list|(
name|QLatin1String
argument_list|(
literal|"GetSettings"
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|settingsMap
operator|=
name|rep
operator|.
name|value
argument_list|()
expr_stmt|;
return|return
name|d
operator|->
name|settingsMap
return|;
block|}
end_function
begin_function
DECL|function|getType
name|NMDeviceType
name|QNetworkManagerSettingsConnection
operator|::
name|getType
parameter_list|()
block|{
specifier|const
name|QString
name|devType
init|=
name|d
operator|->
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|devType
operator|==
name|QLatin1String
argument_list|(
literal|"802-3-ethernet"
argument_list|)
condition|)
return|return
name|DEVICE_TYPE_ETHERNET
return|;
elseif|else
if|if
condition|(
name|devType
operator|==
name|QLatin1String
argument_list|(
literal|"802-11-wireless"
argument_list|)
condition|)
return|return
name|DEVICE_TYPE_WIFI
return|;
else|else
return|return
name|DEVICE_TYPE_UNKNOWN
return|;
block|}
end_function
begin_function
DECL|function|isAutoConnect
name|bool
name|QNetworkManagerSettingsConnection
operator|::
name|isAutoConnect
parameter_list|()
block|{
specifier|const
name|QVariant
name|autoConnect
init|=
name|d
operator|->
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"autoconnect"
argument_list|)
argument_list|)
decl_stmt|;
comment|// NetworkManager default is to auto connect
if|if
condition|(
operator|!
name|autoConnect
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
name|autoConnect
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getTimestamp
name|quint64
name|QNetworkManagerSettingsConnection
operator|::
name|getTimestamp
parameter_list|()
block|{
return|return
name|d
operator|->
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"timestamp"
argument_list|)
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getId
name|QString
name|QNetworkManagerSettingsConnection
operator|::
name|getId
parameter_list|()
block|{
return|return
name|d
operator|->
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"id"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getUuid
name|QString
name|QNetworkManagerSettingsConnection
operator|::
name|getUuid
parameter_list|()
block|{
specifier|const
name|QString
name|id
init|=
name|d
operator|->
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"connection"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"uuid"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// is no uuid, return the connection path
return|return
name|id
operator|.
name|isEmpty
argument_list|()
condition|?
name|d
operator|->
name|connectionInterface
operator|->
name|path
argument_list|()
else|:
name|id
return|;
block|}
end_function
begin_function
DECL|function|getSsid
name|QString
name|QNetworkManagerSettingsConnection
operator|::
name|getSsid
parameter_list|()
block|{
return|return
name|d
operator|->
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"802-11-wireless"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"ssid"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getMacAddress
name|QString
name|QNetworkManagerSettingsConnection
operator|::
name|getMacAddress
parameter_list|()
block|{
name|NMDeviceType
name|type
init|=
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|DEVICE_TYPE_ETHERNET
condition|)
block|{
return|return
name|d
operator|->
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"802-3-ethernet"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"mac-address"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|DEVICE_TYPE_WIFI
condition|)
block|{
return|return
name|d
operator|->
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"802-11-wireless"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"mac-address"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|QString
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|getSeenBssids
name|QStringList
name|QNetworkManagerSettingsConnection
operator|::
name|getSeenBssids
parameter_list|()
block|{
if|if
condition|(
name|getType
argument_list|()
operator|==
name|DEVICE_TYPE_WIFI
condition|)
block|{
return|return
name|d
operator|->
name|settingsMap
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"802-11-wireless"
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"seen-bssids"
argument_list|)
argument_list|)
operator|.
name|toStringList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|QStringList
argument_list|()
return|;
block|}
block|}
end_function
begin_class
DECL|class|QNetworkManagerConnectionActivePrivate
class|class
name|QNetworkManagerConnectionActivePrivate
block|{
public|public:
DECL|member|connectionInterface
name|QDBusInterface
modifier|*
name|connectionInterface
decl_stmt|;
DECL|member|path
name|QString
name|path
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNetworkManagerConnectionActive
name|QNetworkManagerConnectionActive
operator|::
name|QNetworkManagerConnectionActive
parameter_list|(
specifier|const
name|QString
modifier|&
name|activeConnectionObjectPath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|nmDBusHelper
argument_list|(
literal|0
argument_list|)
block|{
name|d
operator|=
operator|new
name|QNetworkManagerConnectionActivePrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|path
operator|=
name|activeConnectionObjectPath
expr_stmt|;
name|d
operator|->
name|connectionInterface
operator|=
operator|new
name|QDBusInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_ACTIVE_CONNECTION
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|connectionInterface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerConnectionActive
name|QNetworkManagerConnectionActive
operator|::
name|~
name|QNetworkManagerConnectionActive
parameter_list|()
block|{
operator|delete
name|d
operator|->
name|connectionInterface
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QNetworkManagerConnectionActive
operator|::
name|isValid
parameter_list|()
block|{
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_function
DECL|function|setConnections
name|bool
name|QNetworkManagerConnectionActive
operator|::
name|setConnections
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|bool
name|allOk
init|=
literal|true
decl_stmt|;
operator|delete
name|nmDBusHelper
expr_stmt|;
name|nmDBusHelper
operator|=
operator|new
name|QNmDBusHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nmDBusHelper
argument_list|,
name|SIGNAL
argument_list|(
name|pathForPropertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|propertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_ACTIVE_CONNECTION
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"PropertiesChanged"
argument_list|)
argument_list|,
name|nmDBusHelper
argument_list|,
name|SLOT
argument_list|(
name|activeConnectionPropertiesChanged
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|allOk
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|allOk
return|;
block|}
end_function
begin_function
DECL|function|connectionInterface
name|QDBusInterface
modifier|*
name|QNetworkManagerConnectionActive
operator|::
name|connectionInterface
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
return|;
block|}
end_function
begin_function
DECL|function|connection
name|QDBusObjectPath
name|QNetworkManagerConnectionActive
operator|::
name|connection
parameter_list|()
specifier|const
block|{
name|QVariant
name|prop
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Connection"
argument_list|)
decl_stmt|;
return|return
name|prop
operator|.
name|value
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|specificObject
name|QDBusObjectPath
name|QNetworkManagerConnectionActive
operator|::
name|specificObject
parameter_list|()
specifier|const
block|{
name|QVariant
name|prop
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"SpecificObject"
argument_list|)
decl_stmt|;
return|return
name|prop
operator|.
name|value
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|devices
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|QNetworkManagerConnectionActive
operator|::
name|devices
parameter_list|()
specifier|const
block|{
name|QVariant
name|prop
init|=
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Devices"
argument_list|)
decl_stmt|;
return|return
name|prop
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|state
name|quint32
name|QNetworkManagerConnectionActive
operator|::
name|state
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"State"
argument_list|)
operator|.
name|toUInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|defaultRoute
name|bool
name|QNetworkManagerConnectionActive
operator|::
name|defaultRoute
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Default"
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QNetworkManagerIp4ConfigPrivate
class|class
name|QNetworkManagerIp4ConfigPrivate
block|{
public|public:
DECL|member|connectionInterface
name|QDBusInterface
modifier|*
name|connectionInterface
decl_stmt|;
DECL|member|path
name|QString
name|path
decl_stmt|;
DECL|member|valid
name|bool
name|valid
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QNetworkManagerIp4Config
name|QNetworkManagerIp4Config
operator|::
name|QNetworkManagerIp4Config
parameter_list|(
specifier|const
name|QString
modifier|&
name|deviceObjectPath
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|d
operator|=
operator|new
name|QNetworkManagerIp4ConfigPrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|path
operator|=
name|deviceObjectPath
expr_stmt|;
name|d
operator|->
name|connectionInterface
operator|=
operator|new
name|QDBusInterface
argument_list|(
name|QLatin1String
argument_list|(
name|NM_DBUS_SERVICE
argument_list|)
argument_list|,
name|d
operator|->
name|path
argument_list|,
name|QLatin1String
argument_list|(
name|NM_DBUS_INTERFACE_IP4_CONFIG
argument_list|)
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|connectionInterface
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|valid
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|valid
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerIp4Config
name|QNetworkManagerIp4Config
operator|::
name|~
name|QNetworkManagerIp4Config
parameter_list|()
block|{
operator|delete
name|d
operator|->
name|connectionInterface
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|isValid
name|bool
name|QNetworkManagerIp4Config
operator|::
name|isValid
parameter_list|()
block|{
return|return
name|d
operator|->
name|valid
return|;
block|}
end_function
begin_function
DECL|function|domains
name|QStringList
name|QNetworkManagerIp4Config
operator|::
name|domains
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|connectionInterface
operator|->
name|property
argument_list|(
literal|"Domains"
argument_list|)
operator|.
name|toStringList
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
end_unit
