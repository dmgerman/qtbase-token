begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qnetworkmanagerengine.h"
end_include
begin_include
include|#
directive|include
file|"qnetworkmanagerservice.h"
end_include
begin_include
include|#
directive|include
file|"../qnetworksession_impl.h"
end_include
begin_include
include|#
directive|include
file|<QtNetwork/private/qnetworkconfiguration_p.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworksession.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus>
end_include
begin_include
include|#
directive|include
file|<QDBusConnection>
end_include
begin_include
include|#
directive|include
file|<QDBusError>
end_include
begin_include
include|#
directive|include
file|<QDBusInterface>
end_include
begin_include
include|#
directive|include
file|<QDBusMessage>
end_include
begin_include
include|#
directive|include
file|<QDBusReply>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DBUS
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QNetworkManagerEngine
name|QNetworkManagerEngine
operator|::
name|QNetworkManagerEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QBearerEngineImpl
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|interface
argument_list|(
operator|new
name|QNetworkManagerInterface
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|systemSettings
argument_list|(
operator|new
name|QNetworkManagerSettings
argument_list|(
name|NM_DBUS_SERVICE
argument_list|,
name|this
argument_list|)
argument_list|)
member_init_list|,
name|userSettings
argument_list|(
operator|new
name|QNetworkManagerSettings
argument_list|(
name|NM_DBUS_SERVICE
argument_list|,
name|this
argument_list|)
argument_list|)
block|{
if|if
condition|(
operator|!
name|interface
operator|->
name|isValid
argument_list|()
condition|)
return|return;
name|interface
operator|->
name|setConnections
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|interface
argument_list|,
name|SIGNAL
argument_list|(
name|deviceAdded
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|deviceAdded
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|interface
argument_list|,
name|SIGNAL
argument_list|(
name|deviceRemoved
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|deviceRemoved
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|connect(interface, SIGNAL(stateChanged(QString,quint32)),             this, SIGNAL(configurationsChanged()));
endif|#
directive|endif
name|connect
argument_list|(
name|interface
argument_list|,
name|SIGNAL
argument_list|(
name|activationFinished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activationFinished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|interface
argument_list|,
name|SIGNAL
argument_list|(
name|propertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|interfacePropertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qDBusRegisterMetaType
argument_list|<
name|QNmSettingsMap
argument_list|>
argument_list|()
expr_stmt|;
name|systemSettings
operator|->
name|setConnections
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|systemSettings
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|newConnection
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|userSettings
operator|->
name|setConnections
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|userSettings
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|newConnection
argument_list|(
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QNetworkManagerEngine
name|QNetworkManagerEngine
operator|::
name|~
name|QNetworkManagerEngine
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|connections
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|accessPoints
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|wirelessDevices
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|activeConnections
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|initialize
name|void
name|QNetworkManagerEngine
operator|::
name|initialize
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
comment|// Get current list of access points.
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|devicePath
decl|,
name|interface
operator|->
name|getDevices
argument_list|()
control|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|deviceAdded
argument_list|(
name|devicePath
argument_list|)
expr_stmt|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
comment|// Get connections.
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|settingsPath
decl|,
name|systemSettings
operator|->
name|listConnections
argument_list|()
control|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasIdentifier
argument_list|(
name|settingsPath
operator|.
name|path
argument_list|()
argument_list|)
condition|)
name|newConnection
argument_list|(
name|settingsPath
argument_list|,
name|systemSettings
argument_list|)
expr_stmt|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|settingsPath
decl|,
name|userSettings
operator|->
name|listConnections
argument_list|()
control|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasIdentifier
argument_list|(
name|settingsPath
operator|.
name|path
argument_list|()
argument_list|)
condition|)
name|newConnection
argument_list|(
name|settingsPath
argument_list|,
name|userSettings
argument_list|)
expr_stmt|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
comment|// Get active connections.
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|acPath
decl|,
name|interface
operator|->
name|activeConnections
argument_list|()
control|)
block|{
name|QNetworkManagerConnectionActive
modifier|*
name|activeConnection
init|=
operator|new
name|QNetworkManagerConnectionActive
argument_list|(
name|acPath
operator|.
name|path
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|activeConnections
operator|.
name|insert
argument_list|(
name|acPath
operator|.
name|path
argument_list|()
argument_list|,
name|activeConnection
argument_list|)
expr_stmt|;
name|activeConnection
operator|->
name|setConnections
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|activeConnection
argument_list|,
name|SIGNAL
argument_list|(
name|propertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activeConnectionPropertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Q_EMIT
name|updateCompleted
argument_list|()
decl_stmt|;
block|}
end_function
begin_function
DECL|function|networkManagerAvailable
name|bool
name|QNetworkManagerEngine
operator|::
name|networkManagerAvailable
parameter_list|()
specifier|const
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|interface
operator|->
name|isValid
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|getInterfaceFromId
name|QString
name|QNetworkManagerEngine
operator|::
name|getInterfaceFromId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|acPath
decl|,
name|interface
operator|->
name|activeConnections
argument_list|()
control|)
block|{
name|QNetworkManagerConnectionActive
name|activeConnection
argument_list|(
name|acPath
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|identifier
init|=
name|activeConnection
operator|.
name|connection
argument_list|()
operator|.
name|path
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|identifier
condition|)
block|{
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|devices
init|=
name|activeConnection
operator|.
name|devices
argument_list|()
decl_stmt|;
if|if
condition|(
name|devices
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|QNetworkManagerInterfaceDevice
name|device
argument_list|(
name|devices
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|device
operator|.
name|networkInterface
argument_list|()
return|;
block|}
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|hasIdentifier
name|bool
name|QNetworkManagerEngine
operator|::
name|hasIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|connectToId
name|void
name|QNetworkManagerEngine
operator|::
name|connectToId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkManagerSettingsConnection
modifier|*
name|connection
init|=
name|connectionFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connection
condition|)
return|return;
name|QNmSettingsMap
name|map
init|=
name|connection
operator|->
name|getSettings
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|connectionType
init|=
name|map
operator|.
name|value
argument_list|(
literal|"connection"
argument_list|)
operator|.
name|value
argument_list|(
literal|"type"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QString
name|dbusDevicePath
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|devicePath
decl|,
name|interface
operator|->
name|getDevices
argument_list|()
control|)
block|{
name|QNetworkManagerInterfaceDevice
name|device
argument_list|(
name|devicePath
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|device
operator|.
name|deviceType
argument_list|()
operator|==
name|DEVICE_TYPE_802_3_ETHERNET
operator|&&
name|connectionType
operator|==
name|QLatin1String
argument_list|(
literal|"802-3-ethernet"
argument_list|)
condition|)
block|{
name|dbusDevicePath
operator|=
name|devicePath
operator|.
name|path
argument_list|()
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|device
operator|.
name|deviceType
argument_list|()
operator|==
name|DEVICE_TYPE_802_11_WIRELESS
operator|&&
name|connectionType
operator|==
name|QLatin1String
argument_list|(
literal|"802-11-wireless"
argument_list|)
condition|)
block|{
name|dbusDevicePath
operator|=
name|devicePath
operator|.
name|path
argument_list|()
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|device
operator|.
name|deviceType
argument_list|()
operator|==
name|DEVICE_TYPE_GSM
operator|&&
name|connectionType
operator|==
name|QLatin1String
argument_list|(
literal|"gsm"
argument_list|)
condition|)
block|{
name|dbusDevicePath
operator|=
name|devicePath
operator|.
name|path
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|const
name|QString
name|service
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|service
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|settingsPath
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
decl_stmt|;
name|QString
name|specificPath
init|=
name|configuredAccessPoints
operator|.
name|key
argument_list|(
name|settingsPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|specificPath
operator|.
name|isEmpty
argument_list|()
condition|)
name|specificPath
operator|=
literal|"/"
expr_stmt|;
name|interface
operator|->
name|activateConnection
argument_list|(
name|service
argument_list|,
name|QDBusObjectPath
argument_list|(
name|settingsPath
argument_list|)
argument_list|,
name|QDBusObjectPath
argument_list|(
name|dbusDevicePath
argument_list|)
argument_list|,
name|QDBusObjectPath
argument_list|(
name|specificPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnectFromId
name|void
name|QNetworkManagerEngine
operator|::
name|disconnectFromId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkManagerSettingsConnection
modifier|*
name|connection
init|=
name|connectionFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|QNmSettingsMap
name|map
init|=
name|connection
operator|->
name|getSettings
argument_list|()
decl_stmt|;
name|bool
name|connectionAutoconnect
init|=
name|map
operator|.
name|value
argument_list|(
literal|"connection"
argument_list|)
operator|.
name|value
argument_list|(
literal|"autoconnect"
argument_list|,
literal|true
argument_list|)
operator|.
name|toBool
argument_list|()
decl_stmt|;
comment|//if not present is true !!
if|if
condition|(
name|connectionAutoconnect
condition|)
block|{
comment|//autoconnect connections will simply be reconnected by nm
emit|emit
name|connectionError
argument_list|(
name|id
argument_list|,
name|QBearerEngineImpl
operator|::
name|OperationNotSupported
argument_list|)
emit|;
return|return;
block|}
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|acPath
decl|,
name|interface
operator|->
name|activeConnections
argument_list|()
control|)
block|{
name|QNetworkManagerConnectionActive
name|activeConnection
argument_list|(
name|acPath
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|identifier
init|=
name|activeConnection
operator|.
name|connection
argument_list|()
operator|.
name|path
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|identifier
operator|&&
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|interface
operator|->
name|deactivateConnection
argument_list|(
name|acPath
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|requestUpdate
name|void
name|QNetworkManagerEngine
operator|::
name|requestUpdate
parameter_list|()
block|{
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"updateCompleted"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|interfacePropertiesChanged
name|void
name|QNetworkManagerEngine
operator|::
name|interfacePropertiesChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|path
argument_list|)
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QMapIterator
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|i
argument_list|(
name|properties
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|key
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"ActiveConnections"
argument_list|)
condition|)
block|{
comment|// Active connections changed, update configurations.
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|activeConnections
init|=
name|qdbus_cast
argument_list|<
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
argument_list|>
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|.
name|value
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QStringList
name|identifiers
init|=
name|accessPointConfigurations
operator|.
name|keys
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|id
decl|,
name|identifiers
control|)
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|QStringList
name|priorActiveConnections
init|=
name|this
operator|->
name|activeConnections
operator|.
name|keys
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|acPath
decl|,
name|activeConnections
control|)
block|{
name|priorActiveConnections
operator|.
name|removeOne
argument_list|(
name|acPath
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|QNetworkManagerConnectionActive
modifier|*
name|activeConnection
init|=
name|this
operator|->
name|activeConnections
operator|.
name|value
argument_list|(
name|acPath
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|activeConnection
condition|)
block|{
name|activeConnection
operator|=
operator|new
name|QNetworkManagerConnectionActive
argument_list|(
name|acPath
operator|.
name|path
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|->
name|activeConnections
operator|.
name|insert
argument_list|(
name|acPath
operator|.
name|path
argument_list|()
argument_list|,
name|activeConnection
argument_list|)
expr_stmt|;
name|activeConnection
operator|->
name|setConnections
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|activeConnection
argument_list|,
name|SIGNAL
argument_list|(
name|propertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activeConnectionPropertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QString
name|id
init|=
name|activeConnection
operator|->
name|connection
argument_list|()
operator|.
name|path
argument_list|()
decl_stmt|;
name|identifiers
operator|.
name|removeOne
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|activeConnection
operator|->
name|state
argument_list|()
operator|==
literal|2
operator|&&
name|ptr
operator|->
name|state
operator|!=
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
while|while
condition|(
operator|!
name|priorActiveConnections
operator|.
name|isEmpty
argument_list|()
condition|)
operator|delete
name|this
operator|->
name|activeConnections
operator|.
name|take
argument_list|(
name|priorActiveConnections
operator|.
name|takeFirst
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|identifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// These configurations are not active
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|identifiers
operator|.
name|takeFirst
argument_list|()
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Discovered
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|activeConnectionPropertiesChanged
name|void
name|QNetworkManagerEngine
operator|::
name|activeConnectionPropertiesChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|properties
argument_list|)
name|QNetworkManagerConnectionActive
modifier|*
name|activeConnection
init|=
name|activeConnections
operator|.
name|value
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|activeConnection
condition|)
return|return;
specifier|const
name|QString
name|id
init|=
name|activeConnection
operator|->
name|connection
argument_list|()
operator|.
name|path
argument_list|()
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|activeConnection
operator|->
name|state
argument_list|()
operator|==
literal|2
operator|&&
name|ptr
operator|->
name|state
operator|!=
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|devicePropertiesChanged
name|void
name|QNetworkManagerEngine
operator|::
name|devicePropertiesChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deviceAdded
name|void
name|QNetworkManagerEngine
operator|::
name|deviceAdded
parameter_list|(
specifier|const
name|QDBusObjectPath
modifier|&
name|path
parameter_list|)
block|{
name|QNetworkManagerInterfaceDevice
name|device
argument_list|(
name|path
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|device
operator|.
name|deviceType
argument_list|()
operator|==
name|DEVICE_TYPE_802_11_WIRELESS
condition|)
block|{
name|QNetworkManagerInterfaceDeviceWireless
modifier|*
name|wirelessDevice
init|=
operator|new
name|QNetworkManagerInterfaceDeviceWireless
argument_list|(
name|device
operator|.
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|wirelessDevice
operator|->
name|setConnections
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|wirelessDevice
argument_list|,
name|SIGNAL
argument_list|(
name|accessPointAdded
argument_list|(
name|QString
argument_list|,
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|newAccessPoint
argument_list|(
name|QString
argument_list|,
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|wirelessDevice
argument_list|,
name|SIGNAL
argument_list|(
name|accessPointRemoved
argument_list|(
name|QString
argument_list|,
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|removeAccessPoint
argument_list|(
name|QString
argument_list|,
name|QDBusObjectPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|wirelessDevice
argument_list|,
name|SIGNAL
argument_list|(
name|propertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|devicePropertiesChanged
argument_list|(
name|QString
argument_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|apPath
decl|,
name|wirelessDevice
operator|->
name|getAccessPoints
argument_list|()
control|)
block|{
name|newAccessPoint
argument_list|(
name|QString
argument_list|()
argument_list|,
name|apPath
argument_list|)
expr_stmt|;
block|}
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|wirelessDevices
operator|.
name|insert
argument_list|(
name|path
operator|.
name|path
argument_list|()
argument_list|,
name|wirelessDevice
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|deviceRemoved
name|void
name|QNetworkManagerEngine
operator|::
name|deviceRemoved
parameter_list|(
specifier|const
name|QDBusObjectPath
modifier|&
name|path
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
operator|delete
name|wirelessDevices
operator|.
name|take
argument_list|(
name|path
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|newConnection
name|void
name|QNetworkManagerEngine
operator|::
name|newConnection
parameter_list|(
specifier|const
name|QDBusObjectPath
modifier|&
name|path
parameter_list|,
name|QNetworkManagerSettings
modifier|*
name|settings
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|settings
condition|)
name|settings
operator|=
name|qobject_cast
argument_list|<
name|QNetworkManagerSettings
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|settings
condition|)
return|return;
name|QNetworkManagerSettingsConnection
modifier|*
name|connection
init|=
operator|new
name|QNetworkManagerSettingsConnection
argument_list|(
name|settings
operator|->
name|connectionInterface
argument_list|()
operator|->
name|service
argument_list|()
argument_list|,
name|path
operator|.
name|path
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|connections
operator|.
name|append
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|connection
argument_list|,
name|SIGNAL
argument_list|(
name|removed
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|removeConnection
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|connection
argument_list|,
name|SIGNAL
argument_list|(
name|updated
argument_list|(
name|QNmSettingsMap
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateConnection
argument_list|(
name|QNmSettingsMap
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|service
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|service
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|settingsPath
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
decl_stmt|;
name|QNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
name|parseConnection
argument_list|(
name|service
argument_list|,
name|settingsPath
argument_list|,
name|connection
operator|->
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if connection is active.
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|acPath
decl|,
name|interface
operator|->
name|activeConnections
argument_list|()
control|)
block|{
name|QNetworkManagerConnectionActive
name|activeConnection
argument_list|(
name|acPath
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeConnection
operator|.
name|defaultRoute
argument_list|()
operator|&&
name|activeConnection
operator|.
name|connection
argument_list|()
operator|.
name|path
argument_list|()
operator|==
name|settingsPath
operator|&&
name|activeConnection
operator|.
name|state
argument_list|()
operator|==
literal|2
condition|)
block|{
name|cpPriv
operator|->
name|state
operator||=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
break|break;
block|}
block|}
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
name|cpPriv
argument_list|)
decl_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|ptr
operator|->
name|id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|removeConnection
name|void
name|QNetworkManagerEngine
operator|::
name|removeConnection
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|path
argument_list|)
name|QNetworkManagerSettingsConnection
modifier|*
name|connection
init|=
name|qobject_cast
argument_list|<
name|QNetworkManagerSettingsConnection
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connection
condition|)
return|return;
name|connections
operator|.
name|removeAll
argument_list|(
name|connection
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|id
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|take
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|connection
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|updateConnection
name|void
name|QNetworkManagerEngine
operator|::
name|updateConnection
parameter_list|(
specifier|const
name|QNmSettingsMap
modifier|&
name|settings
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkManagerSettingsConnection
modifier|*
name|connection
init|=
name|qobject_cast
argument_list|<
name|QNetworkManagerSettingsConnection
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connection
condition|)
return|return;
specifier|const
name|QString
name|service
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|service
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|settingsPath
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
decl_stmt|;
name|QNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
name|parseConnection
argument_list|(
name|service
argument_list|,
name|settingsPath
argument_list|,
name|settings
argument_list|)
decl_stmt|;
comment|// Check if connection is active.
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|acPath
decl|,
name|interface
operator|->
name|activeConnections
argument_list|()
control|)
block|{
name|QNetworkManagerConnectionActive
name|activeConnection
argument_list|(
name|acPath
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeConnection
operator|.
name|connection
argument_list|()
operator|.
name|path
argument_list|()
operator|==
name|settingsPath
operator|&&
name|activeConnection
operator|.
name|state
argument_list|()
operator|==
name|NM_ACTIVE_CONNECTION_STATE_ACTIVATED
condition|)
block|{
name|cpPriv
operator|->
name|state
operator||=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
break|break;
block|}
block|}
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|cpPriv
operator|->
name|id
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|isValid
operator|=
name|cpPriv
operator|->
name|isValid
expr_stmt|;
name|ptr
operator|->
name|name
operator|=
name|cpPriv
operator|->
name|name
expr_stmt|;
name|ptr
operator|->
name|id
operator|=
name|cpPriv
operator|->
name|id
expr_stmt|;
name|ptr
operator|->
name|state
operator|=
name|cpPriv
operator|->
name|state
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
operator|delete
name|cpPriv
expr_stmt|;
block|}
end_function
begin_function
DECL|function|activationFinished
name|void
name|QNetworkManagerEngine
operator|::
name|activationFinished
parameter_list|(
name|QDBusPendingCallWatcher
modifier|*
name|watcher
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|watcher
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|QDBusPendingReply
argument_list|<
name|QDBusObjectPath
argument_list|>
name|reply
argument_list|(
operator|*
name|watcher
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reply
operator|.
name|isError
argument_list|()
condition|)
block|{
name|QDBusObjectPath
name|result
init|=
name|reply
operator|.
name|value
argument_list|()
decl_stmt|;
name|QNetworkManagerConnectionActive
name|activeConnection
argument_list|(
name|result
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|id
init|=
name|activeConnection
operator|.
name|connection
argument_list|()
operator|.
name|path
argument_list|()
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|activeConnection
operator|.
name|state
argument_list|()
operator|==
literal|2
operator|&&
name|ptr
operator|->
name|state
operator|!=
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|newAccessPoint
name|void
name|QNetworkManagerEngine
operator|::
name|newAccessPoint
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QDBusObjectPath
modifier|&
name|objectPath
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|path
argument_list|)
name|QNetworkManagerInterfaceAccessPoint
modifier|*
name|accessPoint
init|=
operator|new
name|QNetworkManagerInterfaceAccessPoint
argument_list|(
name|objectPath
operator|.
name|path
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|accessPoints
operator|.
name|append
argument_list|(
name|accessPoint
argument_list|)
expr_stmt|;
name|accessPoint
operator|->
name|setConnections
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|accessPoint
argument_list|,
name|SIGNAL
argument_list|(
name|propertiesChanged
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateAccessPoint
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check if configuration for this SSID already exists.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|accessPoints
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|accessPoint
operator|!=
name|accessPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|&&
name|accessPoint
operator|->
name|ssid
argument_list|()
operator|==
name|accessPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|ssid
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
comment|// Check if configuration exists for connection.
if|if
condition|(
operator|!
name|accessPoint
operator|->
name|ssid
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connections
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QNetworkManagerSettingsConnection
modifier|*
name|connection
init|=
name|connections
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessPoint
operator|->
name|ssid
argument_list|()
operator|==
name|connection
operator|->
name|getSsid
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|service
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|service
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|settingsPath
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|connectionId
init|=
name|settingsPath
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Discovered
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
return|return;
block|}
block|}
block|}
comment|// New access point.
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
operator|new
name|QNetworkConfigurationPrivate
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|name
operator|=
name|accessPoint
operator|->
name|ssid
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|ptr
operator|->
name|id
operator|=
name|objectPath
operator|.
name|path
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
if|if
condition|(
name|accessPoint
operator|->
name|flags
argument_list|()
operator|==
name|NM_802_11_AP_FLAGS_PRIVACY
condition|)
block|{
name|ptr
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|PrivatePurpose
expr_stmt|;
block|}
else|else
block|{
name|ptr
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|PublicPurpose
expr_stmt|;
block|}
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Undefined
expr_stmt|;
name|ptr
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerWLAN
expr_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|ptr
operator|->
name|id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|removeAccessPoint
name|void
name|QNetworkManagerEngine
operator|::
name|removeAccessPoint
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
specifier|const
name|QDBusObjectPath
modifier|&
name|objectPath
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|path
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|accessPoints
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QNetworkManagerInterfaceAccessPoint
modifier|*
name|accessPoint
init|=
name|accessPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessPoint
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
operator|==
name|objectPath
operator|.
name|path
argument_list|()
condition|)
block|{
name|accessPoints
operator|.
name|removeOne
argument_list|(
name|accessPoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuredAccessPoints
operator|.
name|contains
argument_list|(
name|accessPoint
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
argument_list|)
condition|)
block|{
comment|// find connection and change state to Defined
name|configuredAccessPoints
operator|.
name|remove
argument_list|(
name|accessPoint
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connections
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QNetworkManagerSettingsConnection
modifier|*
name|connection
init|=
name|connections
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessPoint
operator|->
name|ssid
argument_list|()
operator|==
name|connection
operator|->
name|getSsid
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|service
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|service
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|settingsPath
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|connectionId
init|=
name|settingsPath
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|take
argument_list|(
name|objectPath
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
operator|delete
name|accessPoint
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|updateAccessPoint
name|void
name|QNetworkManagerEngine
operator|::
name|updateAccessPoint
parameter_list|(
specifier|const
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
modifier|&
name|map
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|map
argument_list|)
name|QNetworkManagerInterfaceAccessPoint
modifier|*
name|accessPoint
init|=
name|qobject_cast
argument_list|<
name|QNetworkManagerInterfaceAccessPoint
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|accessPoint
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connections
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QNetworkManagerSettingsConnection
modifier|*
name|connection
init|=
name|connections
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessPoint
operator|->
name|ssid
argument_list|()
operator|==
name|connection
operator|->
name|getSsid
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|service
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|service
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|settingsPath
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|connectionId
init|=
name|settingsPath
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Discovered
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
return|return;
block|}
block|}
block|}
end_function
begin_function
DECL|function|parseConnection
name|QNetworkConfigurationPrivate
modifier|*
name|QNetworkManagerEngine
operator|::
name|parseConnection
parameter_list|(
specifier|const
name|QString
modifier|&
name|service
parameter_list|,
specifier|const
name|QString
modifier|&
name|settingsPath
parameter_list|,
specifier|const
name|QNmSettingsMap
modifier|&
name|map
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|QNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
operator|new
name|QNetworkConfigurationPrivate
decl_stmt|;
name|cpPriv
operator|->
name|name
operator|=
name|map
operator|.
name|value
argument_list|(
literal|"connection"
argument_list|)
operator|.
name|value
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|cpPriv
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|cpPriv
operator|->
name|id
operator|=
name|settingsPath
expr_stmt|;
name|cpPriv
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|cpPriv
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|PublicPurpose
expr_stmt|;
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
specifier|const
name|QString
name|connectionType
init|=
name|map
operator|.
name|value
argument_list|(
literal|"connection"
argument_list|)
operator|.
name|value
argument_list|(
literal|"type"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionType
operator|==
name|QLatin1String
argument_list|(
literal|"802-3-ethernet"
argument_list|)
condition|)
block|{
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerEthernet
expr_stmt|;
name|cpPriv
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|PublicPurpose
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QDBusObjectPath
modifier|&
name|devicePath
decl|,
name|interface
operator|->
name|getDevices
argument_list|()
control|)
block|{
name|QNetworkManagerInterfaceDevice
name|device
argument_list|(
name|devicePath
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|device
operator|.
name|deviceType
argument_list|()
operator|==
name|DEVICE_TYPE_802_3_ETHERNET
condition|)
block|{
name|QNetworkManagerInterfaceDeviceWired
name|wiredDevice
argument_list|(
name|device
operator|.
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|wiredDevice
operator|.
name|carrier
argument_list|()
condition|)
block|{
name|cpPriv
operator|->
name|state
operator||=
name|QNetworkConfiguration
operator|::
name|Discovered
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|connectionType
operator|==
name|QLatin1String
argument_list|(
literal|"802-11-wireless"
argument_list|)
condition|)
block|{
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerWLAN
expr_stmt|;
specifier|const
name|QString
name|connectionSsid
init|=
name|map
operator|.
name|value
argument_list|(
literal|"802-11-wireless"
argument_list|)
operator|.
name|value
argument_list|(
literal|"ssid"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|connectionSecurity
init|=
name|map
operator|.
name|value
argument_list|(
literal|"802-11-wireless"
argument_list|)
operator|.
name|value
argument_list|(
literal|"security"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|connectionSecurity
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cpPriv
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|PrivatePurpose
expr_stmt|;
block|}
else|else
block|{
name|cpPriv
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|PublicPurpose
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|accessPoints
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|connectionSsid
operator|==
name|accessPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|ssid
argument_list|()
operator|&&
name|map
operator|.
name|value
argument_list|(
literal|"802-11-wireless"
argument_list|)
operator|.
name|value
argument_list|(
literal|"seen-bssids"
argument_list|)
operator|.
name|toStringList
argument_list|()
operator|.
name|contains
argument_list|(
name|accessPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|hwAddress
argument_list|()
argument_list|)
condition|)
block|{
name|cpPriv
operator|->
name|state
operator||=
name|QNetworkConfiguration
operator|::
name|Discovered
expr_stmt|;
if|if
condition|(
operator|!
name|configuredAccessPoints
operator|.
name|contains
argument_list|(
name|accessPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
argument_list|)
condition|)
block|{
name|configuredAccessPoints
operator|.
name|insert
argument_list|(
name|accessPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
argument_list|,
name|settingsPath
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|accessPointId
init|=
name|accessPoints
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|take
argument_list|(
name|accessPointId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|connectionType
operator|==
literal|"gsm"
condition|)
block|{
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|Bearer2G
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|connectionType
operator|==
literal|"cdma"
condition|)
block|{
name|cpPriv
operator|->
name|bearerType
operator|=
name|QNetworkConfiguration
operator|::
name|BearerCDMA2000
expr_stmt|;
block|}
return|return
name|cpPriv
return|;
block|}
end_function
begin_function
DECL|function|connectionFromId
name|QNetworkManagerSettingsConnection
modifier|*
name|QNetworkManagerEngine
operator|::
name|connectionFromId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connections
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QNetworkManagerSettingsConnection
modifier|*
name|connection
init|=
name|connections
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|service
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|service
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|settingsPath
init|=
name|connection
operator|->
name|connectionInterface
argument_list|()
operator|->
name|path
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|identifier
init|=
name|settingsPath
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|identifier
condition|)
return|return
name|connection
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|sessionStateForId
name|QNetworkSession
operator|::
name|State
name|QNetworkManagerEngine
operator|::
name|sessionStateForId
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptr
condition|)
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
if|if
condition|(
operator|!
name|ptr
operator|->
name|isValid
condition|)
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|acPath
decl|,
name|activeConnections
operator|.
name|keys
argument_list|()
control|)
block|{
name|QNetworkManagerConnectionActive
modifier|*
name|activeConnection
init|=
name|activeConnections
operator|.
name|value
argument_list|(
name|acPath
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|identifier
init|=
name|activeConnection
operator|->
name|connection
argument_list|()
operator|.
name|path
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|identifier
condition|)
block|{
switch|switch
condition|(
name|activeConnection
operator|->
name|state
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QNetworkSession
operator|::
name|Disconnected
return|;
case|case
literal|1
case|:
return|return
name|QNetworkSession
operator|::
name|Connecting
return|;
case|case
literal|2
case|:
return|return
name|QNetworkSession
operator|::
name|Connected
return|;
block|}
block|}
block|}
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
return|return
name|QNetworkSession
operator|::
name|Disconnected
return|;
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Defined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Defined
condition|)
return|return
name|QNetworkSession
operator|::
name|NotAvailable
return|;
elseif|else
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Undefined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Undefined
condition|)
return|return
name|QNetworkSession
operator|::
name|NotAvailable
return|;
return|return
name|QNetworkSession
operator|::
name|Invalid
return|;
block|}
end_function
begin_function
DECL|function|bytesWritten
name|quint64
name|QNetworkManagerEngine
operator|::
name|bytesWritten
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|&&
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
specifier|const
name|QString
name|networkInterface
init|=
name|getInterfaceFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|networkInterface
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|devFile
init|=
name|QLatin1String
argument_list|(
literal|"/sys/class/net/"
argument_list|)
operator|+
name|networkInterface
operator|+
name|QLatin1String
argument_list|(
literal|"/statistics/tx_bytes"
argument_list|)
decl_stmt|;
name|quint64
name|result
init|=
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QFile
name|tx
argument_list|(
name|devFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|in
argument_list|(
operator|&
name|tx
argument_list|)
decl_stmt|;
name|in
operator|>>
name|result
expr_stmt|;
name|tx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
return|return
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|bytesReceived
name|quint64
name|QNetworkManagerEngine
operator|::
name|bytesReceived
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|&&
operator|(
name|ptr
operator|->
name|state
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
specifier|const
name|QString
name|networkInterface
init|=
name|getInterfaceFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|networkInterface
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|devFile
init|=
name|QLatin1String
argument_list|(
literal|"/sys/class/net/"
argument_list|)
operator|+
name|networkInterface
operator|+
name|QLatin1String
argument_list|(
literal|"/statistics/rx_bytes"
argument_list|)
decl_stmt|;
name|quint64
name|result
init|=
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QFile
name|tx
argument_list|(
name|devFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|in
argument_list|(
operator|&
name|tx
argument_list|)
decl_stmt|;
name|in
operator|>>
name|result
expr_stmt|;
name|tx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
return|return
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|startTime
name|quint64
name|QNetworkManagerEngine
operator|::
name|startTime
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QNetworkManagerSettingsConnection
modifier|*
name|connection
init|=
name|connectionFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|connection
condition|)
return|return
name|connection
operator|->
name|getTimestamp
argument_list|()
return|;
else|else
return|return
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|capabilities
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|QNetworkManagerEngine
operator|::
name|capabilities
parameter_list|()
specifier|const
block|{
return|return
name|QNetworkConfigurationManager
operator|::
name|ForcedRoaming
operator||
name|QNetworkConfigurationManager
operator|::
name|DataStatistics
operator||
name|QNetworkConfigurationManager
operator|::
name|CanStartAndStopInterfaces
return|;
block|}
end_function
begin_function
DECL|function|createSessionBackend
name|QNetworkSessionPrivate
modifier|*
name|QNetworkManagerEngine
operator|::
name|createSessionBackend
parameter_list|()
block|{
return|return
operator|new
name|QNetworkSessionPrivateImpl
return|;
block|}
end_function
begin_function
DECL|function|defaultConfiguration
name|QNetworkConfigurationPrivatePointer
name|QNetworkManagerEngine
operator|::
name|defaultConfiguration
parameter_list|()
block|{
return|return
name|QNetworkConfigurationPrivatePointer
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DBUS
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
end_unit
