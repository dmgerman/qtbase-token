begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<conn_settings.h>
end_include
begin_include
include|#
directive|include
file|"iapconf.h"
end_include
begin_define
DECL|macro|QSTRING_TO_CONST_CSTR
define|#
directive|define
name|QSTRING_TO_CONST_CSTR
parameter_list|(
name|str
parameter_list|)
define|\
value|str.toUtf8().constData()
end_define
begin_namespace
DECL|namespace|Maemo
namespace|namespace
name|Maemo
block|{
DECL|class|IAPConfPrivate
class|class
name|IAPConfPrivate
block|{
public|public:
DECL|member|settings
name|ConnSettings
modifier|*
name|settings
decl_stmt|;
name|ConnSettingsValue
modifier|*
name|variantToValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|variant
parameter_list|)
function_decl|;
name|QVariant
name|valueToVariant
parameter_list|(
name|ConnSettingsValue
modifier|*
name|value
parameter_list|)
function_decl|;
block|}
class|;
DECL|function|variantToValue
name|ConnSettingsValue
modifier|*
name|IAPConfPrivate
operator|::
name|variantToValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|variant
parameter_list|)
block|{
comment|// Convert variant to ConnSettingsValue
name|ConnSettingsValue
modifier|*
name|value
init|=
name|conn_settings_value_new
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"IAPConf: Unable to create new ConnSettingsValue"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
switch|switch
condition|(
name|variant
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Invalid
case|:
name|value
operator|->
name|type
operator|=
name|CONN_SETTINGS_VALUE_INVALID
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
block|{
name|char
modifier|*
name|valueStr
init|=
name|strdup
argument_list|(
name|QSTRING_TO_CONST_CSTR
argument_list|(
name|variant
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|value
operator|->
name|type
operator|=
name|CONN_SETTINGS_VALUE_STRING
expr_stmt|;
name|value
operator|->
name|value
operator|.
name|string_val
operator|=
name|valueStr
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Int
case|:
name|value
operator|->
name|type
operator|=
name|CONN_SETTINGS_VALUE_INT
expr_stmt|;
name|value
operator|->
name|value
operator|.
name|int_val
operator|=
name|variant
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Float
case|:
case|case
name|QVariant
operator|::
name|Double
case|:
name|value
operator|->
name|type
operator|=
name|CONN_SETTINGS_VALUE_DOUBLE
expr_stmt|;
name|value
operator|->
name|value
operator|.
name|double_val
operator|=
name|variant
operator|.
name|toDouble
argument_list|()
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Bool
case|:
name|value
operator|->
name|type
operator|=
name|CONN_SETTINGS_VALUE_BOOL
expr_stmt|;
name|value
operator|->
name|value
operator|.
name|bool_val
operator|=
name|variant
operator|.
name|toBool
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
block|{
name|QByteArray
name|array
init|=
name|variant
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|value
operator|->
name|type
operator|=
name|CONN_SETTINGS_VALUE_BYTE_ARRAY
expr_stmt|;
name|value
operator|->
name|value
operator|.
name|byte_array
operator|.
name|len
operator|=
name|array
operator|.
name|size
argument_list|()
expr_stmt|;
name|value
operator|->
name|value
operator|.
name|byte_array
operator|.
name|val
operator|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|malloc
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|value
operator|->
name|value
operator|.
name|byte_array
operator|.
name|val
argument_list|,
name|array
operator|.
name|constData
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|List
case|:
block|{
name|QVariantList
name|list
init|=
name|variant
operator|.
name|toList
argument_list|()
decl_stmt|;
name|ConnSettingsValue
modifier|*
modifier|*
name|list_val
init|=
operator|(
name|ConnSettingsValue
operator|*
operator|*
operator|)
name|malloc
argument_list|(
operator|(
name|list
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|ConnSettingsValue
operator|*
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|list_val
index|[
name|idx
index|]
operator|=
name|variantToValue
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|list_val
index|[
name|list
operator|.
name|size
argument_list|()
index|]
operator|=
literal|0
expr_stmt|;
name|value
operator|->
name|type
operator|=
name|CONN_SETTINGS_VALUE_LIST
expr_stmt|;
name|value
operator|->
name|value
operator|.
name|list_val
operator|=
name|list_val
expr_stmt|;
break|break;
block|}
default|default:
name|qWarning
argument_list|(
literal|"IAPConf: Can not handle QVariant of type %d"
argument_list|,
name|variant
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|conn_settings_value_destroy
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|value
return|;
block|}
DECL|function|valueToVariant
name|QVariant
name|IAPConfPrivate
operator|::
name|valueToVariant
parameter_list|(
name|ConnSettingsValue
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|0
operator|||
name|value
operator|->
name|type
operator|==
name|CONN_SETTINGS_VALUE_INVALID
condition|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
switch|switch
condition|(
name|value
operator|->
name|type
condition|)
block|{
case|case
name|CONN_SETTINGS_VALUE_BOOL
case|:
return|return
name|QVariant
argument_list|(
name|value
operator|->
name|value
operator|.
name|bool_val
condition|?
literal|true
else|:
literal|false
argument_list|)
return|;
case|case
name|CONN_SETTINGS_VALUE_STRING
case|:
return|return
name|QVariant
argument_list|(
name|QString
argument_list|(
name|value
operator|->
name|value
operator|.
name|string_val
argument_list|)
argument_list|)
return|;
case|case
name|CONN_SETTINGS_VALUE_DOUBLE
case|:
return|return
name|QVariant
argument_list|(
name|value
operator|->
name|value
operator|.
name|double_val
argument_list|)
return|;
case|case
name|CONN_SETTINGS_VALUE_INT
case|:
return|return
name|QVariant
argument_list|(
name|value
operator|->
name|value
operator|.
name|int_val
argument_list|)
return|;
case|case
name|CONN_SETTINGS_VALUE_LIST
case|:
block|{
comment|// At least with GConf backend connsettings returns byte array as list
comment|// of ints, first check for that case
if|if
condition|(
name|value
operator|->
name|value
operator|.
name|list_val
operator|&&
name|value
operator|->
name|value
operator|.
name|list_val
index|[
literal|0
index|]
condition|)
block|{
name|bool
name|canBeConvertedToByteArray
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|value
operator|->
name|value
operator|.
name|list_val
index|[
name|idx
index|]
condition|;
name|idx
operator|++
control|)
block|{
name|ConnSettingsValue
modifier|*
name|val
init|=
name|value
operator|->
name|value
operator|.
name|list_val
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|val
operator|->
name|type
operator|!=
name|CONN_SETTINGS_VALUE_INT
operator|||
name|val
operator|->
name|value
operator|.
name|int_val
operator|>
literal|255
operator|||
name|val
operator|->
name|value
operator|.
name|int_val
operator|<
literal|0
condition|)
block|{
name|canBeConvertedToByteArray
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|canBeConvertedToByteArray
condition|)
block|{
name|QByteArray
name|array
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|value
operator|->
name|value
operator|.
name|list_val
index|[
name|idx
index|]
condition|;
name|idx
operator|++
control|)
block|{
name|array
operator|.
name|append
argument_list|(
name|value
operator|->
name|value
operator|.
name|list_val
index|[
name|idx
index|]
operator|->
name|value
operator|.
name|int_val
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
comment|// Create normal list
name|QVariantList
name|list
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|value
operator|->
name|value
operator|.
name|list_val
index|[
name|idx
index|]
condition|;
name|idx
operator|++
control|)
block|{
name|list
operator|.
name|append
argument_list|(
name|valueToVariant
argument_list|(
name|value
operator|->
name|value
operator|.
name|list_val
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
case|case
name|CONN_SETTINGS_VALUE_BYTE_ARRAY
case|:
return|return
name|QByteArray
operator|::
name|fromRawData
argument_list|(
operator|(
name|char
operator|*
operator|)
name|value
operator|->
name|value
operator|.
name|byte_array
operator|.
name|val
argument_list|,
name|value
operator|->
name|value
operator|.
name|byte_array
operator|.
name|len
argument_list|)
return|;
default|default:
return|return
name|QVariant
argument_list|()
return|;
block|}
block|}
comment|// Public class implementation
DECL|function|IAPConf
name|IAPConf
operator|::
name|IAPConf
parameter_list|(
specifier|const
name|QString
modifier|&
name|iap_id
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|IAPConfPrivate
argument_list|)
block|{
name|d_ptr
operator|->
name|settings
operator|=
name|conn_settings_open
argument_list|(
name|CONN_SETTINGS_CONNECTION
argument_list|,
name|QSTRING_TO_CONST_CSTR
argument_list|(
name|iap_id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d_ptr
operator|->
name|settings
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"IAPConf: Unable to open ConnSettings for %s"
argument_list|,
name|QSTRING_TO_CONST_CSTR
argument_list|(
name|iap_id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|~IAPConf
name|IAPConf
operator|::
name|~
name|IAPConf
parameter_list|()
block|{
name|conn_settings_close
argument_list|(
name|d_ptr
operator|->
name|settings
argument_list|)
expr_stmt|;
operator|delete
name|d_ptr
expr_stmt|;
block|}
DECL|function|value
name|QVariant
name|IAPConf
operator|::
name|value
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
name|ConnSettingsValue
modifier|*
name|val
init|=
name|conn_settings_get
argument_list|(
name|d_ptr
operator|->
name|settings
argument_list|,
name|QSTRING_TO_CONST_CSTR
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|variant
init|=
name|d_ptr
operator|->
name|valueToVariant
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|conn_settings_value_destroy
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|variant
return|;
block|}
DECL|function|getAll
name|void
name|IAPConf
operator|::
name|getAll
parameter_list|(
name|QList
argument_list|<
name|QString
argument_list|>
modifier|&
name|all_iaps
parameter_list|,
name|bool
name|return_path
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|return_path
argument_list|)
expr_stmt|;
comment|// We don't use return path currently
comment|// Go through all available connections and add them to the list
name|char
modifier|*
modifier|*
name|ids
init|=
name|conn_settings_list_ids
argument_list|(
name|CONN_SETTINGS_CONNECTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|0
condition|)
block|{
comment|// No ids found - nothing to do
return|return;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|ids
index|[
name|idx
index|]
condition|;
name|idx
operator|++
control|)
block|{
name|all_iaps
operator|.
name|append
argument_list|(
name|QString
argument_list|(
name|ids
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|ids
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
name|ids
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace Maemo
end_comment
end_unit
