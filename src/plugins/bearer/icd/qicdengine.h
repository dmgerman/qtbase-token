begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QICDENGINE_H
end_ifndef
begin_define
DECL|macro|QICDENGINE_H
define|#
directive|define
name|QICDENGINE_H
end_define
begin_include
include|#
directive|include
file|<QtNetwork/private/qbearerengine_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qtimer.h>
end_include
begin_include
include|#
directive|include
file|"maemo_icd.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QNetworkConfigurationPrivate
name|class
name|QNetworkConfigurationPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|IapMonitor
name|class
name|IapMonitor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDBusInterface
name|class
name|QDBusInterface
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDBusServiceWatcher
name|class
name|QDBusServiceWatcher
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|bearerTypeFromIapType
specifier|inline
name|QNetworkConfiguration
operator|::
name|BearerType
name|bearerTypeFromIapType
argument_list|(
argument|const QString&iapType
argument_list|)
block|{
if|if
condition|(
name|iapType
operator|==
name|QLatin1String
argument_list|(
literal|"WLAN_INFRA"
argument_list|)
operator|||
name|iapType
operator|==
name|QLatin1String
argument_list|(
literal|"WLAN_ADHOC"
argument_list|)
condition|)
block|{
return|return
name|QNetworkConfiguration
operator|::
name|BearerWLAN
return|;
block|}
end_expr_stmt
begin_elseif
elseif|else
if|if
condition|(
name|iapType
operator|==
name|QLatin1String
argument_list|(
literal|"GPRS"
argument_list|)
condition|)
block|{
return|return
name|QNetworkConfiguration
operator|::
name|BearerHSPA
return|;
block|}
end_elseif
begin_else
else|else
block|{
return|return
name|QNetworkConfiguration
operator|::
name|BearerUnknown
return|;
block|}
end_else
begin_label
unit|}  class
name|IcdNetworkConfigurationPrivate
label|:
end_label
begin_decl_stmt
name|public
name|QNetworkConfigurationPrivate
block|{
name|public
label|:
name|IcdNetworkConfigurationPrivate
argument_list|()
expr_stmt|;
operator|~
name|IcdNetworkConfigurationPrivate
argument_list|()
expr_stmt|;
name|virtual
name|QString
name|bearerTypeName
argument_list|()
specifier|const
expr_stmt|;
comment|// In Maemo the id field (defined in QNetworkConfigurationPrivate)
comment|// is the IAP id (which typically is UUID)
name|QByteArray
name|network_id
decl_stmt|;
comment|// typically WLAN ssid or similar
name|QString
name|iap_type
decl_stmt|;
comment|// is this one WLAN or GPRS
name|QString
name|service_type
decl_stmt|;
name|QString
name|service_id
decl_stmt|;
name|quint32
name|service_attrs
decl_stmt|;
comment|// Network attributes for this IAP, this is the value returned by icd and
comment|// passed to it when connecting.
name|quint32
name|network_attrs
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|toIcdConfig
specifier|inline
name|IcdNetworkConfigurationPrivate
modifier|*
name|toIcdConfig
parameter_list|(
name|QNetworkConfigurationPrivatePointer
name|ptr
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|IcdNetworkConfigurationPrivate
operator|*
operator|>
operator|(
name|ptr
operator|.
name|data
argument_list|()
operator|)
return|;
block|}
end_function
begin_decl_stmt
name|class
name|QIcdEngine
range|:
name|public
name|QBearerEngine
block|{
name|Q_OBJECT
name|public
operator|:
name|QIcdEngine
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QIcdEngine
argument_list|()
block|;
name|bool
name|hasIdentifier
argument_list|(
specifier|const
name|QString
operator|&
name|id
argument_list|)
block|;
name|Q_INVOKABLE
name|void
name|initialize
argument_list|()
block|;
name|Q_INVOKABLE
name|void
name|requestUpdate
argument_list|()
block|;
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|capabilities
argument_list|()
specifier|const
block|;
name|QNetworkSessionPrivate
operator|*
name|createSessionBackend
argument_list|()
block|;
name|QNetworkConfigurationPrivatePointer
name|defaultConfiguration
argument_list|()
block|;
name|void
name|deleteConfiguration
argument_list|(
specifier|const
name|QString
operator|&
name|iap_id
argument_list|)
block|;
specifier|inline
name|QNetworkConfigurationPrivatePointer
name|configuration
argument_list|(
argument|const QString&id
argument_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
block|;
return|return
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|inline
name|void
name|addSessionConfiguration
argument_list|(
argument|QNetworkConfigurationPrivatePointer ptr
argument_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
block|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|ptr
operator|->
name|id
argument_list|,
name|ptr
argument_list|)
block|;
name|locker
operator|.
name|unlock
argument_list|()
block|;
name|emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
block|;     }
specifier|inline
name|void
name|changedSessionConfiguration
argument_list|(
argument|QNetworkConfigurationPrivatePointer ptr
argument_list|)
block|{
name|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
block|;     }
name|void
name|cleanup
argument_list|()
block|;
name|void
name|addConfiguration
argument_list|(
name|QString
operator|&
name|iap_id
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|iapStateChanged
argument_list|(
argument|const QString& iapid
argument_list|,
argument|uint icd_connection_state
argument_list|)
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|finishAsyncConfigurationUpdate
argument_list|()
block|;
name|void
name|asyncUpdateConfigurationsSlot
argument_list|(
argument|QDBusMessage msg
argument_list|)
block|;
name|void
name|connectionStateSignalsSlot
argument_list|(
argument|QDBusMessage msg
argument_list|)
block|;
name|void
name|icdServiceOwnerChanged
argument_list|(
specifier|const
name|QString
operator|&
name|serviceName
argument_list|,
specifier|const
name|QString
operator|&
name|oldOwner
argument_list|,
specifier|const
name|QString
operator|&
name|newOwner
argument_list|)
block|;
name|private
operator|:
name|void
name|startListeningStateSignalsForAllConnections
argument_list|()
block|;
name|void
name|doRequestUpdate
argument_list|(
name|QList
operator|<
name|Maemo
operator|::
name|IcdScanResult
operator|>
name|scanned
operator|=
name|QList
operator|<
name|Maemo
operator|::
name|IcdScanResult
operator|>
operator|(
operator|)
argument_list|)
block|;
name|void
name|cancelAsyncConfigurationUpdate
argument_list|()
block|;
name|void
name|getIcdInitialState
argument_list|()
block|;
name|bool
name|ensureDBusConnection
argument_list|()
block|;
name|private
operator|:
name|IapMonitor
operator|*
name|iapMonitor
block|;
name|QDBusInterface
operator|*
name|m_dbusInterface
block|;
name|QTimer
name|m_scanTimer
block|;
name|QString
name|m_onlineIapId
block|;
name|QStringList
name|m_typesToBeScanned
block|;
name|QList
operator|<
name|Maemo
operator|::
name|IcdScanResult
operator|>
name|m_scanResult
block|;
name|QDBusServiceWatcher
operator|*
name|m_icdServiceWatcher
block|;
name|bool
name|firstUpdate
block|;
name|bool
name|m_scanGoingOn
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QICDENGINE_H
end_comment
end_unit
