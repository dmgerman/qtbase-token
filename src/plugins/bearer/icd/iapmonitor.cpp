begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<conn_settings.h>
end_include
begin_include
include|#
directive|include
file|"iapmonitor.h"
end_include
begin_namespace
DECL|namespace|Maemo
namespace|namespace
name|Maemo
block|{
name|void
name|conn_settings_notify_func
parameter_list|(
name|ConnSettingsType
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|id
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
name|ConnSettingsValue
modifier|*
name|value
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
DECL|class|IAPMonitorPrivate
class|class
name|IAPMonitorPrivate
block|{
private|private:
DECL|member|monitor
name|IAPMonitor
modifier|*
name|monitor
decl_stmt|;
DECL|member|settings
name|ConnSettings
modifier|*
name|settings
decl_stmt|;
public|public:
DECL|function|IAPMonitorPrivate
name|IAPMonitorPrivate
parameter_list|(
name|IAPMonitor
modifier|*
name|monitor
parameter_list|)
member_init_list|:
name|monitor
argument_list|(
name|monitor
argument_list|)
block|{
name|settings
operator|=
name|conn_settings_open
argument_list|(
name|CONN_SETTINGS_CONNECTION
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|conn_settings_add_notify
argument_list|(
name|settings
argument_list|,
operator|(
name|ConnSettingsNotifyFunc
operator|*
operator|)
name|conn_settings_notify_func
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|~IAPMonitorPrivate
name|~
name|IAPMonitorPrivate
parameter_list|()
block|{
name|conn_settings_del_notify
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|conn_settings_close
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
DECL|function|iapAdded
name|void
name|iapAdded
parameter_list|(
specifier|const
name|QString
modifier|&
name|iap
parameter_list|)
block|{
name|monitor
operator|->
name|iapAdded
argument_list|(
name|iap
argument_list|)
expr_stmt|;
block|}
DECL|function|iapRemoved
name|void
name|iapRemoved
parameter_list|(
specifier|const
name|QString
modifier|&
name|iap
parameter_list|)
block|{
name|monitor
operator|->
name|iapRemoved
argument_list|(
name|iap
argument_list|)
expr_stmt|;
block|}
block|}
class|;
DECL|function|conn_settings_notify_func
name|void
name|conn_settings_notify_func
parameter_list|(
name|ConnSettingsType
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|id
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
name|ConnSettingsValue
modifier|*
name|value
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|CONN_SETTINGS_CONNECTION
condition|)
return|return;
name|IAPMonitorPrivate
modifier|*
name|priv
init|=
operator|(
name|IAPMonitorPrivate
operator|*
operator|)
name|user_data
decl_stmt|;
name|QString
name|iapId
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|iapId
operator|=
name|iapId
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|0
condition|)
block|{
name|priv
operator|->
name|iapAdded
argument_list|(
name|iapId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|iapId
operator|==
name|QString
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// IAP is removed only when the directory gets removed
name|priv
operator|->
name|iapRemoved
argument_list|(
name|iapId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|IAPMonitor
name|IAPMonitor
operator|::
name|IAPMonitor
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|IAPMonitorPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
block|{ }
DECL|function|~IAPMonitor
name|IAPMonitor
operator|::
name|~
name|IAPMonitor
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
block|}
DECL|function|iapAdded
name|void
name|IAPMonitor
operator|::
name|iapAdded
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// By default do nothing
block|}
DECL|function|iapRemoved
name|void
name|IAPMonitor
operator|::
name|iapRemoved
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// By default do nothing
block|}
block|}
end_namespace
begin_comment
comment|// namespace Maemo
end_comment
end_unit
