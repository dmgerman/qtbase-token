begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qnetworksession_impl.h"
end_include
begin_include
include|#
directive|include
file|"qicdengine.h"
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_include
include|#
directive|include
file|<maemo_icd.h>
end_include
begin_include
include|#
directive|include
file|<iapconf.h>
end_include
begin_include
include|#
directive|include
file|<proxyconf.h>
end_include
begin_include
include|#
directive|include
file|<ifaddrs.h>
end_include
begin_include
include|#
directive|include
file|<netinet/in.h>
end_include
begin_include
include|#
directive|include
file|<arpa/inet.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|operator <<
name|QDBusArgument
modifier|&
name|operator
name|<<
parameter_list|(
name|QDBusArgument
modifier|&
name|argument
parameter_list|,
specifier|const
name|ICd2DetailsDBusStruct
modifier|&
name|icd2
parameter_list|)
block|{
name|argument
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|argument
operator|<<
name|icd2
operator|.
name|serviceType
expr_stmt|;
name|argument
operator|<<
name|icd2
operator|.
name|serviceAttributes
expr_stmt|;
name|argument
operator|<<
name|icd2
operator|.
name|setviceId
expr_stmt|;
name|argument
operator|<<
name|icd2
operator|.
name|networkType
expr_stmt|;
name|argument
operator|<<
name|icd2
operator|.
name|networkAttributes
expr_stmt|;
name|argument
operator|<<
name|icd2
operator|.
name|networkId
expr_stmt|;
name|argument
operator|.
name|endStructure
argument_list|()
expr_stmt|;
return|return
name|argument
return|;
block|}
end_function
begin_function
DECL|function|operator >>
specifier|const
name|QDBusArgument
modifier|&
name|operator
name|>>
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|argument
parameter_list|,
name|ICd2DetailsDBusStruct
modifier|&
name|icd2
parameter_list|)
block|{
name|argument
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|argument
operator|>>
name|icd2
operator|.
name|serviceType
expr_stmt|;
name|argument
operator|>>
name|icd2
operator|.
name|serviceAttributes
expr_stmt|;
name|argument
operator|>>
name|icd2
operator|.
name|setviceId
expr_stmt|;
name|argument
operator|>>
name|icd2
operator|.
name|networkType
expr_stmt|;
name|argument
operator|>>
name|icd2
operator|.
name|networkAttributes
expr_stmt|;
name|argument
operator|>>
name|icd2
operator|.
name|networkId
expr_stmt|;
name|argument
operator|.
name|endStructure
argument_list|()
expr_stmt|;
return|return
name|argument
return|;
block|}
end_function
begin_function
DECL|function|operator >>
specifier|const
name|QDBusArgument
modifier|&
name|operator
name|>>
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|argument
parameter_list|,
name|ICd2DetailsList
modifier|&
name|detailsList
parameter_list|)
block|{
name|argument
operator|.
name|beginArray
argument_list|()
expr_stmt|;
name|detailsList
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|argument
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|ICd2DetailsDBusStruct
name|element
decl_stmt|;
name|argument
operator|>>
name|element
expr_stmt|;
name|detailsList
operator|.
name|append
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
name|argument
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|argument
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDBusArgument
modifier|&
name|operator
name|<<
parameter_list|(
name|QDBusArgument
modifier|&
name|argument
parameter_list|,
specifier|const
name|ICd2DetailsList
modifier|&
name|detailsList
parameter_list|)
block|{
name|argument
operator|.
name|beginArray
argument_list|(
name|qMetaTypeId
argument_list|<
name|ICd2DetailsDBusStruct
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|detailsList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|argument
operator|<<
name|detailsList
index|[
name|i
index|]
expr_stmt|;
name|argument
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|argument
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|properties
specifier|static
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|properties
decl_stmt|;
end_decl_stmt
begin_function_decl
specifier|static
name|QString
name|get_network_interface
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|iapStateChanged
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|iapStateChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|iapid
parameter_list|,
name|uint
name|icd_connection_state
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
operator|)
operator|&&
operator|(
name|activeConfig
operator|.
name|identifier
argument_list|()
operator|==
name|iapid
operator|)
operator|)
operator|||
operator|(
name|publicConfig
operator|.
name|identifier
argument_list|()
operator|==
name|iapid
operator|)
condition|)
block|{
switch|switch
condition|(
name|icd_connection_state
condition|)
block|{
case|case
name|ICD_STATE_CONNECTING
case|:
name|updateState
argument_list|(
name|QNetworkSession
operator|::
name|Connecting
argument_list|)
expr_stmt|;
break|break;
case|case
name|ICD_STATE_CONNECTED
case|:
name|updateState
argument_list|(
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
break|break;
case|case
name|ICD_STATE_DISCONNECTING
case|:
name|updateState
argument_list|(
name|QNetworkSession
operator|::
name|Closing
argument_list|)
expr_stmt|;
break|break;
case|case
name|ICD_STATE_DISCONNECTED
case|:
name|updateState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
block|{
name|updateIdentifier
argument_list|(
name|iapid
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanupSession
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|cleanupSession
parameter_list|(
name|void
parameter_list|)
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateProxies
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateState
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|updateState
parameter_list|(
name|QNetworkSession
operator|::
name|State
name|newState
parameter_list|)
block|{
if|if
condition|(
name|newState
operator|!=
name|state
condition|)
block|{
if|if
condition|(
name|newState
operator|==
name|QNetworkSession
operator|::
name|Disconnected
condition|)
block|{
if|if
condition|(
name|isOpen
condition|)
block|{
comment|// The Session was aborted by the user or system
name|lastError
operator|=
name|QNetworkSession
operator|::
name|SessionAbortedError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|lastError
argument_list|)
emit|;
emit|emit
name|closed
argument_list|()
emit|;
block|}
if|if
condition|(
name|m_stopTimer
operator|.
name|isActive
argument_list|()
condition|)
block|{
comment|// Session was closed by calling stop()
name|m_stopTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|isOpen
operator|=
literal|false
expr_stmt|;
name|opened
operator|=
literal|false
expr_stmt|;
name|currentNetworkInterface
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
block|{
name|copyConfig
argument_list|(
name|publicConfig
argument_list|,
name|activeConfig
argument_list|)
expr_stmt|;
name|IcdNetworkConfigurationPrivate
modifier|*
name|icdConfig
init|=
name|toIcdConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
argument_list|)
decl_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|icdConfig
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|activeConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// Active configuration (IAP) was removed from system
comment|// => Connection was disconnected and configuration became
comment|//    invalid
comment|// => Also Session state must be changed to invalid
name|newState
operator|=
name|QNetworkSession
operator|::
name|Invalid
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|newState
operator|==
name|QNetworkSession
operator|::
name|Connected
condition|)
block|{
if|if
condition|(
name|opened
condition|)
block|{
name|isOpen
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
block|{
name|IcdNetworkConfigurationPrivate
modifier|*
name|icdConfig
init|=
name|toIcdConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
argument_list|)
decl_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|icdConfig
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
name|icdConfig
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|IcdNetworkConfigurationPrivate
modifier|*
name|icdConfig
init|=
name|toIcdConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|publicConfig
argument_list|)
argument_list|)
decl_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|icdConfig
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newState
operator|!=
name|state
condition|)
block|{
name|state
operator|=
name|newState
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|newState
argument_list|)
emit|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|updateIdentifier
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|updateIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|newId
parameter_list|)
block|{
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
block|{
name|IcdNetworkConfigurationPrivate
modifier|*
name|icdConfig
init|=
name|toIcdConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
argument_list|)
decl_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|icdConfig
operator|->
name|network_attrs
operator||=
name|ICD_NW_ATTR_IAPNAME
expr_stmt|;
name|icdConfig
operator|->
name|id
operator|=
name|newId
expr_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|IcdNetworkConfigurationPrivate
modifier|*
name|icdConfig
init|=
name|toIcdConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|publicConfig
argument_list|)
argument_list|)
decl_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|icdConfig
operator|->
name|network_attrs
operator||=
name|ICD_NW_ATTR_IAPNAME
expr_stmt|;
if|if
condition|(
name|icdConfig
operator|->
name|id
operator|!=
name|newId
condition|)
name|icdConfig
operator|->
name|id
operator|=
name|newId
expr_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getStatistics
name|QNetworkSessionPrivateImpl
operator|::
name|Statistics
name|QNetworkSessionPrivateImpl
operator|::
name|getStatistics
parameter_list|()
specifier|const
block|{
comment|/* This could be also implemented by using the Maemo::Icd::statistics()      * that gets the statistics data for a specific IAP. Change if      * necessary.      */
name|Maemo
operator|::
name|Icd
name|icd
decl_stmt|;
name|QList
argument_list|<
name|Maemo
operator|::
name|IcdStatisticsResult
argument_list|>
name|stats_results
decl_stmt|;
name|Statistics
name|stats
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|icd
operator|.
name|statistics
argument_list|(
name|stats_results
argument_list|)
condition|)
return|return
name|stats
return|;
foreach|foreach
control|(
specifier|const
name|Maemo
operator|::
name|IcdStatisticsResult
modifier|&
name|res
decl|,
name|stats_results
control|)
block|{
if|if
condition|(
name|res
operator|.
name|params
operator|.
name|network_attrs
operator|&
name|ICD_NW_ATTR_IAPNAME
condition|)
block|{
comment|/* network_id is the IAP UUID */
if|if
condition|(
name|QString
argument_list|(
name|res
operator|.
name|params
operator|.
name|network_id
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|activeConfig
operator|.
name|identifier
argument_list|()
condition|)
block|{
name|stats
operator|.
name|txData
operator|=
name|res
operator|.
name|bytes_sent
expr_stmt|;
name|stats
operator|.
name|rxData
operator|=
name|res
operator|.
name|bytes_received
expr_stmt|;
name|stats
operator|.
name|activeTime
operator|=
name|res
operator|.
name|time_active
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/* We probably will never get to this branch */
name|IcdNetworkConfigurationPrivate
modifier|*
name|icdConfig
init|=
name|toIcdConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
argument_list|)
decl_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|params
operator|.
name|network_id
operator|==
name|icdConfig
operator|->
name|network_id
condition|)
block|{
name|stats
operator|.
name|txData
operator|=
name|res
operator|.
name|bytes_sent
expr_stmt|;
name|stats
operator|.
name|rxData
operator|=
name|res
operator|.
name|bytes_received
expr_stmt|;
name|stats
operator|.
name|activeTime
operator|=
name|res
operator|.
name|time_active
expr_stmt|;
block|}
name|icdConfig
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|stats
return|;
block|}
end_function
begin_function
DECL|function|bytesWritten
name|quint64
name|QNetworkSessionPrivateImpl
operator|::
name|bytesWritten
parameter_list|()
specifier|const
block|{
return|return
name|getStatistics
argument_list|()
operator|.
name|txData
return|;
block|}
end_function
begin_function
DECL|function|bytesReceived
name|quint64
name|QNetworkSessionPrivateImpl
operator|::
name|bytesReceived
parameter_list|()
specifier|const
block|{
return|return
name|getStatistics
argument_list|()
operator|.
name|rxData
return|;
block|}
end_function
begin_function
DECL|function|activeTime
name|quint64
name|QNetworkSessionPrivateImpl
operator|::
name|activeTime
parameter_list|()
specifier|const
block|{
return|return
name|getStatistics
argument_list|()
operator|.
name|activeTime
return|;
block|}
end_function
begin_function
DECL|function|copyConfig
name|QNetworkConfiguration
modifier|&
name|QNetworkSessionPrivateImpl
operator|::
name|copyConfig
parameter_list|(
name|QNetworkConfiguration
modifier|&
name|fromConfig
parameter_list|,
name|QNetworkConfiguration
modifier|&
name|toConfig
parameter_list|,
name|bool
name|deepCopy
parameter_list|)
block|{
name|IcdNetworkConfigurationPrivate
modifier|*
name|cpPriv
decl_stmt|;
if|if
condition|(
name|deepCopy
condition|)
block|{
name|cpPriv
operator|=
operator|new
name|IcdNetworkConfigurationPrivate
expr_stmt|;
name|setPrivateConfiguration
argument_list|(
name|toConfig
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|(
name|cpPriv
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cpPriv
operator|=
name|toIcdConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|toConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|IcdNetworkConfigurationPrivate
modifier|*
name|fromPriv
init|=
name|toIcdConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|fromConfig
argument_list|)
argument_list|)
decl_stmt|;
name|QMutexLocker
name|toLocker
argument_list|(
operator|&
name|cpPriv
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|QMutexLocker
name|fromLocker
argument_list|(
operator|&
name|fromPriv
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|cpPriv
operator|->
name|name
operator|=
name|fromPriv
operator|->
name|name
expr_stmt|;
name|cpPriv
operator|->
name|isValid
operator|=
name|fromPriv
operator|->
name|isValid
expr_stmt|;
comment|// Note that we do not copy id field here as the publicConfig does
comment|// not contain a valid IAP id.
name|cpPriv
operator|->
name|state
operator|=
name|fromPriv
operator|->
name|state
expr_stmt|;
name|cpPriv
operator|->
name|type
operator|=
name|fromPriv
operator|->
name|type
expr_stmt|;
name|cpPriv
operator|->
name|roamingSupported
operator|=
name|fromPriv
operator|->
name|roamingSupported
expr_stmt|;
name|cpPriv
operator|->
name|purpose
operator|=
name|fromPriv
operator|->
name|purpose
expr_stmt|;
name|cpPriv
operator|->
name|network_id
operator|=
name|fromPriv
operator|->
name|network_id
expr_stmt|;
name|cpPriv
operator|->
name|iap_type
operator|=
name|fromPriv
operator|->
name|iap_type
expr_stmt|;
name|cpPriv
operator|->
name|bearerType
operator|=
name|fromPriv
operator|->
name|bearerType
expr_stmt|;
name|cpPriv
operator|->
name|network_attrs
operator|=
name|fromPriv
operator|->
name|network_attrs
expr_stmt|;
name|cpPriv
operator|->
name|service_type
operator|=
name|fromPriv
operator|->
name|service_type
expr_stmt|;
name|cpPriv
operator|->
name|service_id
operator|=
name|fromPriv
operator|->
name|service_id
expr_stmt|;
name|cpPriv
operator|->
name|service_attrs
operator|=
name|fromPriv
operator|->
name|service_attrs
expr_stmt|;
return|return
name|toConfig
return|;
block|}
end_function
begin_comment
comment|/* This is called by QNetworkSession constructor and it updates the current  * state of the configuration.  */
end_comment
begin_function
DECL|function|syncStateWithInterface
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|syncStateWithInterface
parameter_list|()
block|{
comment|/* Initially we are not active although the configuration might be in      * connected state.      */
name|isOpen
operator|=
literal|false
expr_stmt|;
name|opened
operator|=
literal|false
expr_stmt|;
name|connect
argument_list|(
name|engine
argument_list|,
name|SIGNAL
argument_list|(
name|iapStateChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
name|uint
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|iapStateChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
name|uint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateProxies
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|=
name|QNetworkSession
operator|::
name|Invalid
expr_stmt|;
name|lastError
operator|=
name|QNetworkSession
operator|::
name|UnknownSessionError
expr_stmt|;
switch|switch
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
case|:
name|activeConfig
operator|=
name|publicConfig
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
case|:
name|serviceConfig
operator|=
name|publicConfig
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|UserChoice
case|:
comment|// active config will contain correct data after open() has succeeded
name|copyConfig
argument_list|(
name|publicConfig
argument_list|,
name|activeConfig
argument_list|)
expr_stmt|;
comment|/* We create new configuration that holds the actual configuration 	 * returned by icd. This way publicConfig still contains the 	 * original user specified configuration. 	 * 	 * Note that the new activeConfig configuration is not inserted 	 * to configurationManager as manager class will get the newly 	 * connected configuration from gconf when the IAP is saved. 	 * This configuration manager update is done by IapMonitor class. 	 * If the ANY connection fails in open(), then the configuration 	 * data is not saved to gconf and will not be added to 	 * configuration manager IAP list. 	 */
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"New configuration created for"
operator|<<
name|publicConfig
operator|.
name|identifier
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
default|default:
comment|/* Invalid configuration, no point continuing */
return|return;
block|}
if|if
condition|(
operator|!
name|activeConfig
operator|.
name|isValid
argument_list|()
condition|)
return|return;
comment|/* Get the initial state from icd */
name|Maemo
operator|::
name|Icd
name|icd
decl_stmt|;
name|QList
argument_list|<
name|Maemo
operator|::
name|IcdStateResult
argument_list|>
name|state_results
decl_stmt|;
comment|/* Update the active config from first connection, this is ok as icd      * supports only one connection anyway.      */
if|if
condition|(
name|icd
operator|.
name|state
argument_list|(
name|state_results
argument_list|)
operator|&&
operator|!
name|state_results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|/* If we did not get full state back, then we are not 	 * connected and can skip the next part. 	 */
if|if
condition|(
operator|!
operator|(
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|network_attrs
operator|==
literal|0
operator|&&
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|network_id
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|/* If we try to connect to specific IAP and we get results back 	     * that tell the icd is actually connected to another IAP, 	     * then do not update current state etc. 	     */
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
operator|||
name|publicConfig
operator|.
name|identifier
argument_list|()
operator|==
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|network_id
condition|)
block|{
switch|switch
condition|(
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|state
condition|)
block|{
case|case
name|ICD_STATE_DISCONNECTED
case|:
name|state
operator|=
name|QNetworkSession
operator|::
name|Disconnected
expr_stmt|;
if|if
condition|(
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
condition|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|ICD_STATE_CONNECTING
case|:
name|state
operator|=
name|QNetworkSession
operator|::
name|Connecting
expr_stmt|;
if|if
condition|(
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
condition|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|ICD_STATE_CONNECTED
case|:
block|{
if|if
condition|(
operator|!
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|error
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
specifier|const
name|QString
name|id
init|=
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|network_id
decl_stmt|;
name|QNetworkConfiguration
name|config
init|=
name|manager
operator|.
name|configurationFromIdentifier
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|//we don't want the copied data if the config is already known by the manager
comment|//just reuse it so that existing references to the old data get the same update
name|setPrivateConfiguration
argument_list|(
name|activeConfig
argument_list|,
name|privateConfiguration
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
decl_stmt|;
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|state
operator|=
name|QNetworkSession
operator|::
name|Connected
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_id
operator|=
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|network_id
expr_stmt|;
name|ptr
operator|->
name|id
operator|=
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_id
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_attrs
operator|=
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|network_attrs
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|iap_type
operator|=
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|network_type
expr_stmt|;
name|ptr
operator|->
name|bearerType
operator|=
name|bearerTypeFromIapType
argument_list|(
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|iap_type
argument_list|)
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|service_type
operator|=
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|service_type
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|service_id
operator|=
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|service_id
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|service_attrs
operator|=
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|service_attrs
expr_stmt|;
name|ptr
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|currentNetworkInterface
operator|=
name|get_network_interface
argument_list|()
expr_stmt|;
name|Maemo
operator|::
name|IAPConf
name|iap_name
argument_list|(
name|ptr
operator|->
name|id
argument_list|)
decl_stmt|;
name|QString
name|name_value
init|=
name|iap_name
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name_value
operator|.
name|isEmpty
argument_list|()
condition|)
name|ptr
operator|->
name|name
operator|=
name|name_value
expr_stmt|;
else|else
name|ptr
operator|->
name|name
operator|=
name|ptr
operator|->
name|id
expr_stmt|;
specifier|const
name|QString
name|identifier
init|=
name|ptr
operator|->
name|id
decl_stmt|;
name|configLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// Add the new active configuration to manager or update the old config
if|if
condition|(
operator|!
name|engine
operator|->
name|hasIdentifier
argument_list|(
name|identifier
argument_list|)
condition|)
name|engine
operator|->
name|addSessionConfiguration
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
else|else
name|engine
operator|->
name|changedSessionConfiguration
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ICD_STATE_DISCONNECTING
case|:
name|state
operator|=
name|QNetworkSession
operator|::
name|Closing
expr_stmt|;
if|if
condition|(
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|privateConfiguration
argument_list|(
name|activeConfig
argument_list|)
condition|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"status_req tells icd is not connected"
expr_stmt|;
endif|#
directive|endif
block|}
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"status_req did not return any results from icd"
expr_stmt|;
endif|#
directive|endif
block|}
name|networkConfigurationsChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|networkConfigurationsChanged
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|networkConfigurationsChanged
parameter_list|()
block|{
if|if
condition|(
name|serviceConfig
operator|.
name|isValid
argument_list|()
condition|)
name|updateStateFromServiceNetwork
argument_list|()
expr_stmt|;
else|else
name|updateStateFromActiveConfig
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateStateFromServiceNetwork
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|updateStateFromServiceNetwork
parameter_list|()
block|{
name|QNetworkSession
operator|::
name|State
name|oldState
init|=
name|state
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QNetworkConfiguration
modifier|&
name|config
decl|,
name|serviceConfig
operator|.
name|children
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|config
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|!=
name|QNetworkConfiguration
operator|::
name|Active
condition|)
continue|continue;
if|if
condition|(
name|activeConfig
operator|!=
name|config
condition|)
block|{
name|activeConfig
operator|=
name|config
expr_stmt|;
emit|emit
name|newConfigurationActivated
argument_list|()
emit|;
block|}
name|state
operator|=
name|QNetworkSession
operator|::
name|Connected
expr_stmt|;
if|if
condition|(
name|state
operator|!=
name|oldState
condition|)
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
return|return;
block|}
if|if
condition|(
name|serviceConfig
operator|.
name|children
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|state
operator|=
name|QNetworkSession
operator|::
name|NotAvailable
expr_stmt|;
else|else
name|state
operator|=
name|QNetworkSession
operator|::
name|Disconnected
expr_stmt|;
if|if
condition|(
name|state
operator|!=
name|oldState
condition|)
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|clearConfiguration
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|clearConfiguration
parameter_list|(
name|QNetworkConfiguration
modifier|&
name|config
parameter_list|)
block|{
name|IcdNetworkConfigurationPrivate
modifier|*
name|icdConfig
init|=
name|toIcdConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|icdConfig
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|icdConfig
operator|->
name|network_id
operator|.
name|clear
argument_list|()
expr_stmt|;
name|icdConfig
operator|->
name|iap_type
operator|.
name|clear
argument_list|()
expr_stmt|;
name|icdConfig
operator|->
name|network_attrs
operator|=
literal|0
expr_stmt|;
name|icdConfig
operator|->
name|service_type
operator|.
name|clear
argument_list|()
expr_stmt|;
name|icdConfig
operator|->
name|service_id
operator|.
name|clear
argument_list|()
expr_stmt|;
name|icdConfig
operator|->
name|service_attrs
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateStateFromActiveConfig
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|updateStateFromActiveConfig
parameter_list|()
block|{
name|QNetworkSession
operator|::
name|State
name|oldState
init|=
name|state
decl_stmt|;
name|bool
name|newActive
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|activeConfig
operator|.
name|isValid
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|activeConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|state
operator|=
name|QNetworkSession
operator|::
name|Invalid
expr_stmt|;
name|clearConfiguration
argument_list|(
name|activeConfig
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|activeConfig
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|state
operator|=
name|QNetworkSession
operator|::
name|Connected
expr_stmt|;
name|newActive
operator|=
name|opened
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|activeConfig
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
name|state
operator|=
name|QNetworkSession
operator|::
name|Disconnected
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|activeConfig
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Defined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Defined
condition|)
block|{
name|state
operator|=
name|QNetworkSession
operator|::
name|NotAvailable
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|activeConfig
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Undefined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Undefined
condition|)
block|{
name|state
operator|=
name|QNetworkSession
operator|::
name|NotAvailable
expr_stmt|;
block|}
name|bool
name|oldActive
init|=
name|isOpen
decl_stmt|;
name|isOpen
operator|=
name|newActive
expr_stmt|;
if|if
condition|(
operator|!
name|oldActive
operator|&&
name|isOpen
condition|)
emit|emit
name|quitPendingWaitsForOpened
argument_list|()
emit|;
if|if
condition|(
name|oldActive
operator|&&
operator|!
name|isOpen
condition|)
emit|emit
name|closed
argument_list|()
emit|;
if|if
condition|(
name|oldState
operator|!=
name|state
condition|)
block|{
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
if|if
condition|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Disconnected
operator|&&
name|oldActive
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
comment|//qDebug()<<"session aborted error emitted for"<<activeConfig.identifier();
endif|#
directive|endif
name|lastError
operator|=
name|QNetworkSession
operator|::
name|SessionAbortedError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|lastError
argument_list|)
emit|;
block|}
block|}
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
comment|//qDebug()<<"oldState ="<<oldState<<" state ="<<state<<" oldActive ="<<oldActive<<" newActive ="<<newActive<<" opened ="<<opened;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|get_network_interface
specifier|static
name|QString
name|get_network_interface
parameter_list|()
block|{
name|Maemo
operator|::
name|Icd
name|icd
decl_stmt|;
name|QList
argument_list|<
name|Maemo
operator|::
name|IcdAddressInfoResult
argument_list|>
name|addr_results
decl_stmt|;
name|uint
name|ret
decl_stmt|;
name|QString
name|iface
decl_stmt|;
name|ret
operator|=
name|icd
operator|.
name|addrinfo
argument_list|(
name|addr_results
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
comment|/* No results */
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"Cannot get addrinfo from icd, are you connected or is icd running?"
expr_stmt|;
endif|#
directive|endif
return|return
name|iface
return|;
block|}
if|if
condition|(
name|addr_results
operator|.
name|first
argument_list|()
operator|.
name|ip_info
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QByteArray
name|data
init|=
name|addr_results
operator|.
name|first
argument_list|()
operator|.
name|ip_info
operator|.
name|first
argument_list|()
operator|.
name|address
operator|.
name|toAscii
argument_list|()
decl_stmt|;
name|struct
name|in_addr
name|addr
decl_stmt|;
if|if
condition|(
name|inet_aton
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|addr
argument_list|)
operator|==
literal|0
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"address"
operator|<<
name|data
operator|.
name|constData
argument_list|()
operator|<<
literal|"invalid"
expr_stmt|;
endif|#
directive|endif
return|return
name|iface
return|;
block|}
name|struct
name|ifaddrs
modifier|*
name|ifaddr
decl_stmt|,
modifier|*
name|ifa
decl_stmt|;
name|int
name|family
decl_stmt|;
if|if
condition|(
name|getifaddrs
argument_list|(
operator|&
name|ifaddr
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"getifaddrs() failed"
expr_stmt|;
endif|#
directive|endif
return|return
name|iface
return|;
block|}
for|for
control|(
name|ifa
operator|=
name|ifaddr
init|;
name|ifa
operator|!=
name|NULL
condition|;
name|ifa
operator|=
name|ifa
operator|->
name|ifa_next
control|)
block|{
if|if
condition|(
name|ifa
operator|->
name|ifa_addr
condition|)
block|{
name|family
operator|=
name|ifa
operator|->
name|ifa_addr
operator|->
name|sa_family
expr_stmt|;
if|if
condition|(
name|family
operator|!=
name|AF_INET
condition|)
block|{
continue|continue;
comment|/* Currently only IPv4 is supported by icd dbus interface */
block|}
if|if
condition|(
operator|(
operator|(
expr|struct
name|sockaddr_in
operator|*
operator|)
name|ifa
operator|->
name|ifa_addr
operator|)
operator|->
name|sin_addr
operator|.
name|s_addr
operator|==
name|addr
operator|.
name|s_addr
condition|)
block|{
name|iface
operator|=
name|QString
argument_list|(
name|ifa
operator|->
name|ifa_name
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|freeifaddrs
argument_list|(
name|ifaddr
argument_list|)
expr_stmt|;
return|return
name|iface
return|;
block|}
end_function
begin_function
DECL|function|open
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|open
parameter_list|()
block|{
if|if
condition|(
name|m_stopTimer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|m_stopTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|publicConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|lastError
operator|=
name|QNetworkSession
operator|::
name|InvalidConfigurationError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|lastError
argument_list|)
emit|;
return|return;
block|}
if|if
condition|(
name|serviceConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|lastError
operator|=
name|QNetworkSession
operator|::
name|OperationNotSupportedError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|lastError
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
operator|!
name|opened
condition|)
block|{
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
block|{
comment|/* Caller is trying to connect to default IAP. 	     * At this time we will not know the IAP details so we just 	     * connect and update the active config when the IAP is 	     * connected. 	     */
name|opened
operator|=
literal|true
expr_stmt|;
name|state
operator|=
name|QNetworkSession
operator|::
name|Connecting
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|do_open
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/* User is connecting to one specific IAP. If that IAP is not 	 * in discovered state we cannot continue. 	 */
if|if
condition|(
operator|(
name|activeConfig
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|!=
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
name|lastError
operator|=
name|QNetworkSession
operator|::
name|InvalidConfigurationError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|lastError
argument_list|)
emit|;
return|return;
block|}
name|opened
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|activeConfig
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|!=
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|state
operator|=
name|QNetworkSession
operator|::
name|Connecting
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|do_open
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|isOpen
operator|=
operator|(
name|activeConfig
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
if|if
condition|(
name|isOpen
condition|)
emit|emit
name|quitPendingWaitsForOpened
argument_list|()
emit|;
block|}
else|else
block|{
comment|/* We seem to be active so inform caller */
emit|emit
name|quitPendingWaitsForOpened
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|do_open
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|do_open
parameter_list|()
block|{
name|icd_connection_flags
name|flags
init|=
name|connectFlags
decl_stmt|;
name|QString
name|iap
init|=
name|publicConfig
operator|.
name|identifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Connected
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"Already connected to"
operator|<<
name|activeConfig
operator|.
name|identifier
argument_list|()
expr_stmt|;
endif|#
directive|endif
emit|emit
name|stateChanged
argument_list|(
name|QNetworkSession
operator|::
name|Connected
argument_list|)
emit|;
emit|emit
name|quitPendingWaitsForOpened
argument_list|()
emit|;
return|return;
block|}
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
name|config
operator|=
name|activeConfig
expr_stmt|;
else|else
name|config
operator|=
name|publicConfig
expr_stmt|;
if|if
condition|(
name|iap
operator|==
name|OSSO_IAP_ANY
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"connecting to default IAP"
operator|<<
name|iap
expr_stmt|;
endif|#
directive|endif
name|m_connectRequestTimer
operator|.
name|start
argument_list|(
name|ICD_LONG_CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
name|m_dbusInterface
operator|->
name|asyncCall
argument_list|(
name|ICD_DBUS_API_CONNECT_REQ
argument_list|,
operator|(
name|uint
operator|)
name|flags
argument_list|)
expr_stmt|;
comment|// Return value ignored
name|m_asynchCallActive
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|IcdNetworkConfigurationPrivate
modifier|*
name|icdConfig
init|=
name|toIcdConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ICd2DetailsDBusStruct
name|icd2
decl_stmt|;
name|icd2
operator|.
name|serviceType
operator|=
name|icdConfig
operator|->
name|service_type
expr_stmt|;
name|icd2
operator|.
name|serviceAttributes
operator|=
name|icdConfig
operator|->
name|service_attrs
expr_stmt|;
name|icd2
operator|.
name|setviceId
operator|=
name|icdConfig
operator|->
name|service_id
expr_stmt|;
name|icd2
operator|.
name|networkType
operator|=
name|icdConfig
operator|->
name|iap_type
expr_stmt|;
name|icd2
operator|.
name|networkAttributes
operator|=
name|icdConfig
operator|->
name|network_attrs
expr_stmt|;
if|if
condition|(
name|icdConfig
operator|->
name|network_attrs
operator|&
name|ICD_NW_ATTR_IAPNAME
condition|)
block|{
name|icd2
operator|.
name|networkId
operator|=
name|QByteArray
argument_list|(
name|iap
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|icd2
operator|.
name|networkId
operator|=
name|icdConfig
operator|->
name|network_id
expr_stmt|;
block|}
name|icdConfig
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"connecting to %s/%s/0x%x/%s/0x%x/%s"
argument_list|,
name|icd2
operator|.
name|networkId
operator|.
name|data
argument_list|()
argument_list|,
name|icd2
operator|.
name|networkType
operator|.
name|toAscii
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|icd2
operator|.
name|networkAttributes
argument_list|,
name|icd2
operator|.
name|serviceType
operator|.
name|toAscii
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|icd2
operator|.
name|serviceAttributes
argument_list|,
name|icd2
operator|.
name|setviceId
operator|.
name|toAscii
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ICd2DetailsList
name|paramArray
decl_stmt|;
name|paramArray
operator|.
name|append
argument_list|(
name|icd2
argument_list|)
expr_stmt|;
name|m_connectRequestTimer
operator|.
name|start
argument_list|(
name|ICD_LONG_CONNECT_TIMEOUT
argument_list|)
expr_stmt|;
name|m_dbusInterface
operator|->
name|asyncCall
argument_list|(
name|ICD_DBUS_API_CONNECT_REQ
argument_list|,
operator|(
name|uint
operator|)
name|flags
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|paramArray
argument_list|)
argument_list|)
expr_stmt|;
comment|// Return value ignored
name|m_asynchCallActive
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stateChange
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|stateChange
parameter_list|(
specifier|const
name|QDBusMessage
modifier|&
name|rep
parameter_list|)
block|{
if|if
condition|(
name|m_asynchCallActive
operator|==
literal|true
condition|)
block|{
if|if
condition|(
name|m_connectRequestTimer
operator|.
name|isActive
argument_list|()
condition|)
name|m_connectRequestTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|m_asynchCallActive
operator|=
literal|false
expr_stmt|;
name|QString
name|result
init|=
name|rep
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// network id or empty string
name|QString
name|connected_iap
init|=
name|result
decl_stmt|;
if|if
condition|(
name|connected_iap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"connect to"
operator|<<
name|publicConfig
operator|.
name|identifier
argument_list|()
operator|<<
literal|"failed, result is empty"
expr_stmt|;
endif|#
directive|endif
name|updateState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|QNetworkSession
operator|::
name|SessionAbortedError
argument_list|)
emit|;
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
name|copyConfig
argument_list|(
name|publicConfig
argument_list|,
name|activeConfig
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/* If the user tried to connect to some specific connection (foo)          * and we were already connected to some other connection (bar),          * then we cannot activate this session although icd has a valid          * connection to somewhere.          */
if|if
condition|(
operator|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkConfiguration
operator|::
name|UserChoice
operator|)
operator|&&
operator|(
name|connected_iap
operator|!=
name|config
operator|.
name|identifier
argument_list|()
operator|)
condition|)
block|{
name|updateState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|QNetworkSession
operator|::
name|UnknownSessionError
argument_list|)
emit|;
return|return;
block|}
name|IcdNetworkConfigurationPrivate
modifier|*
name|icdConfig
init|=
name|toIcdConfig
argument_list|(
name|privateConfiguration
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
comment|/* Did we connect to non saved IAP? */
name|icdConfig
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|icdConfig
operator|->
name|network_attrs
operator|&
name|ICD_NW_ATTR_IAPNAME
operator|)
condition|)
block|{
comment|/* Because the connection succeeded, the IAP is now known.              */
name|icdConfig
operator|->
name|network_attrs
operator||=
name|ICD_NW_ATTR_IAPNAME
expr_stmt|;
name|icdConfig
operator|->
name|id
operator|=
name|connected_iap
expr_stmt|;
block|}
comment|/* User might have changed the IAP name when a new IAP was saved */
name|Maemo
operator|::
name|IAPConf
name|iap_name
argument_list|(
name|icdConfig
operator|->
name|id
argument_list|)
decl_stmt|;
name|QString
name|name
init|=
name|iap_name
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|icdConfig
operator|->
name|name
operator|=
name|name
expr_stmt|;
name|icdConfig
operator|->
name|iap_type
operator|=
name|rep
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// connect_result.connect.network_type;
name|icdConfig
operator|->
name|bearerType
operator|=
name|bearerTypeFromIapType
argument_list|(
name|icdConfig
operator|->
name|iap_type
argument_list|)
expr_stmt|;
name|icdConfig
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|icdConfig
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
name|icdConfig
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|icdConfig
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|startTime
operator|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
expr_stmt|;
name|updateState
argument_list|(
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
comment|//currentNetworkInterface = get_network_interface();
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
comment|//qDebug()<< "connected to"<< result<< config.name()<< "at"<< currentNetworkInterface;
endif|#
directive|endif
comment|/* We first check if the configuration already exists in the manager          * and if it is not found there, we then insert it. Note that this          * is only done for user choice config only because it can be missing          * from config manager list.          */
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
block|{
if|if
condition|(
operator|!
name|engine
operator|->
name|hasIdentifier
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|engine
operator|->
name|addSessionConfiguration
argument_list|(
name|privateConfiguration
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QNetworkConfigurationPrivatePointer
name|priv
init|=
name|engine
operator|->
name|configuration
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|QNetworkConfiguration
name|reference
decl_stmt|;
name|setPrivateConfiguration
argument_list|(
name|reference
argument_list|,
name|priv
argument_list|)
expr_stmt|;
name|copyConfig
argument_list|(
name|config
argument_list|,
name|reference
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|privateConfiguration
argument_list|(
name|reference
argument_list|)
operator|->
name|id
operator|=
name|result
expr_stmt|;
comment|// Note: Id was not copied in copyConfig() function
name|config
operator|=
name|reference
expr_stmt|;
name|activeConfig
operator|=
name|reference
expr_stmt|;
name|engine
operator|->
name|changedSessionConfiguration
argument_list|(
name|privateConfiguration
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"Existing configuration"
operator|<<
name|result
operator|<<
literal|"updated in manager in open"
expr_stmt|;
endif|#
directive|endif
block|}
block|}
emit|emit
name|quitPendingWaitsForOpened
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|connectTimeout
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|connectTimeout
parameter_list|()
block|{
name|updateState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
if|if
condition|(
name|publicConfig
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
name|copyConfig
argument_list|(
name|publicConfig
argument_list|,
name|activeConfig
argument_list|)
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|QNetworkSession
operator|::
name|UnknownSessionError
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|close
parameter_list|()
block|{
if|if
condition|(
name|m_connectRequestTimer
operator|.
name|isActive
argument_list|()
condition|)
name|m_connectRequestTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|serviceConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|lastError
operator|=
name|QNetworkSession
operator|::
name|OperationNotSupportedError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|lastError
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|isOpen
condition|)
block|{
if|if
condition|(
operator|(
name|activeConfig
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
comment|// We will not wait any disconnect from icd as it might never come
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"closing session"
operator|<<
name|publicConfig
operator|.
name|identifier
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|state
operator|=
name|QNetworkSession
operator|::
name|Closing
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
comment|// we fake a disconnection, session error is sent
name|updateState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
name|opened
operator|=
literal|false
expr_stmt|;
name|isOpen
operator|=
literal|false
expr_stmt|;
name|m_dbusInterface
operator|->
name|call
argument_list|(
name|ICD_DBUS_API_DISCONNECT_REQ
argument_list|,
name|ICD_CONNECTION_FLAG_APPLICATION_EVENT
argument_list|)
expr_stmt|;
name|startTime
operator|=
name|QDateTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|opened
operator|=
literal|false
expr_stmt|;
name|isOpen
operator|=
literal|false
expr_stmt|;
emit|emit
name|closed
argument_list|()
emit|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|stop
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|stop
parameter_list|()
block|{
if|if
condition|(
name|m_connectRequestTimer
operator|.
name|isActive
argument_list|()
condition|)
name|m_connectRequestTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|serviceConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|lastError
operator|=
name|QNetworkSession
operator|::
name|OperationNotSupportedError
expr_stmt|;
emit|emit
name|QNetworkSessionPrivate
operator|::
name|error
argument_list|(
name|lastError
argument_list|)
emit|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|activeConfig
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"stopping session"
operator|<<
name|publicConfig
operator|.
name|identifier
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|state
operator|=
name|QNetworkSession
operator|::
name|Closing
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
comment|// we fake a disconnection, a session error is sent also
name|updateState
argument_list|(
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
name|opened
operator|=
literal|false
expr_stmt|;
name|isOpen
operator|=
literal|false
expr_stmt|;
name|m_dbusInterface
operator|->
name|call
argument_list|(
name|ICD_DBUS_API_DISCONNECT_REQ
argument_list|,
name|ICD_CONNECTION_FLAG_APPLICATION_EVENT
argument_list|)
expr_stmt|;
name|startTime
operator|=
name|QDateTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|opened
operator|=
literal|false
expr_stmt|;
name|isOpen
operator|=
literal|false
expr_stmt|;
emit|emit
name|closed
argument_list|()
emit|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|finishStopBySendingClosedSignal
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|finishStopBySendingClosedSignal
parameter_list|()
block|{
if|if
condition|(
operator|(
name|activeConfig
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|state
operator|=
name|QNetworkSession
operator|::
name|Connected
expr_stmt|;
emit|emit
name|stateChanged
argument_list|(
name|state
argument_list|)
emit|;
block|}
emit|emit
name|closed
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|migrate
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|migrate
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|accept
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|accept
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|ignore
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|ignore
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|reject
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|reject
parameter_list|()
block|{ }
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
end_ifndef
begin_function
DECL|function|currentInterface
name|QNetworkInterface
name|QNetworkSessionPrivateImpl
operator|::
name|currentInterface
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|publicConfig
operator|.
name|isValid
argument_list|()
operator|||
name|state
operator|!=
name|QNetworkSession
operator|::
name|Connected
condition|)
return|return
name|QNetworkInterface
argument_list|()
return|;
if|if
condition|(
name|currentNetworkInterface
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QNetworkInterface
argument_list|()
return|;
return|return
name|QNetworkInterface
operator|::
name|interfaceFromName
argument_list|(
name|currentNetworkInterface
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setSessionProperty
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|setSessionProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|properties
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|==
literal|"ConnectInBackground"
condition|)
block|{
name|bool
name|v
init|=
name|value
operator|.
name|toBool
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
condition|)
name|connectFlags
operator|=
name|ICD_CONNECTION_FLAG_APPLICATION_EVENT
expr_stmt|;
else|else
name|connectFlags
operator|=
name|ICD_CONNECTION_FLAG_USER_EVENT
expr_stmt|;
block|}
block|}
else|else
block|{
name|properties
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|/* Set default value when property is removed */
if|if
condition|(
name|key
operator|==
literal|"ConnectInBackground"
condition|)
name|connectFlags
operator|=
name|ICD_CONNECTION_FLAG_USER_EVENT
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sessionProperty
name|QVariant
name|QNetworkSessionPrivateImpl
operator|::
name|sessionProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
return|return
name|properties
operator|.
name|value
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|errorString
name|QString
name|QNetworkSessionPrivateImpl
operator|::
name|errorString
parameter_list|()
specifier|const
block|{
name|QString
name|errorStr
decl_stmt|;
switch|switch
condition|(
name|q
operator|->
name|error
argument_list|()
condition|)
block|{
case|case
name|QNetworkSession
operator|::
name|RoamingError
case|:
name|errorStr
operator|=
name|QNetworkSessionPrivateImpl
operator|::
name|tr
argument_list|(
literal|"Roaming error"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkSession
operator|::
name|SessionAbortedError
case|:
name|errorStr
operator|=
name|QNetworkSessionPrivateImpl
operator|::
name|tr
argument_list|(
literal|"Session aborted by user or system"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkSession
operator|::
name|InvalidConfigurationError
case|:
name|errorStr
operator|=
name|QNetworkSessionPrivateImpl
operator|::
name|tr
argument_list|(
literal|"The specified configuration cannot be used."
argument_list|)
expr_stmt|;
break|break;
default|default:
case|case
name|QNetworkSession
operator|::
name|UnknownSessionError
case|:
name|errorStr
operator|=
name|QNetworkSessionPrivateImpl
operator|::
name|tr
argument_list|(
literal|"Unidentified Error"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|errorStr
return|;
block|}
end_function
begin_function
DECL|function|error
name|QNetworkSession
operator|::
name|SessionError
name|QNetworkSessionPrivateImpl
operator|::
name|error
parameter_list|()
specifier|const
block|{
return|return
name|QNetworkSession
operator|::
name|UnknownSessionError
return|;
block|}
end_function
begin_function
DECL|function|updateProxies
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|updateProxies
parameter_list|(
name|QNetworkSession
operator|::
name|State
name|newState
parameter_list|)
block|{
if|if
condition|(
operator|(
name|newState
operator|==
name|QNetworkSession
operator|::
name|Connected
operator|)
operator|&&
operator|(
name|newState
operator|!=
name|currentState
operator|)
condition|)
name|updateProxyInformation
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|newState
operator|==
name|QNetworkSession
operator|::
name|Disconnected
operator|)
operator|&&
operator|(
name|currentState
operator|==
name|QNetworkSession
operator|::
name|Closing
operator|)
condition|)
name|clearProxyInformation
argument_list|()
expr_stmt|;
name|currentState
operator|=
name|newState
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateProxyInformation
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|updateProxyInformation
parameter_list|()
block|{
name|Maemo
operator|::
name|ProxyConf
operator|::
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearProxyInformation
name|void
name|QNetworkSessionPrivateImpl
operator|::
name|clearProxyInformation
parameter_list|()
block|{
name|Maemo
operator|::
name|ProxyConf
operator|::
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
end_unit
