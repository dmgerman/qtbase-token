begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|WLAN_UTILS_H
end_ifndef
begin_define
DECL|macro|WLAN_UTILS_H
define|#
directive|define
name|WLAN_UTILS_H
end_define
begin_comment
comment|/** Originally taken from: libicd-network-wlan-dev.h*/
end_comment
begin_include
include|#
directive|include
file|<glib.h>
end_include
begin_include
include|#
directive|include
file|<dbus/dbus.h>
end_include
begin_include
include|#
directive|include
file|<wlancond.h>
end_include
begin_include
include|#
directive|include
file|<icd/network_api_defines.h>
end_include
begin_comment
comment|/* capability bits inside network attributes var */
end_comment
begin_define
DECL|macro|NWATTR_WPS_MASK
define|#
directive|define
name|NWATTR_WPS_MASK
value|0x0000F000
end_define
begin_define
DECL|macro|NWATTR_ALGORITHM_MASK
define|#
directive|define
name|NWATTR_ALGORITHM_MASK
value|0x00000F00
end_define
begin_define
DECL|macro|NWATTR_WPA2_MASK
define|#
directive|define
name|NWATTR_WPA2_MASK
value|0x00000080
end_define
begin_define
DECL|macro|NWATTR_METHOD_MASK
define|#
directive|define
name|NWATTR_METHOD_MASK
value|0x00000078
end_define
begin_define
DECL|macro|NWATTR_MODE_MASK
define|#
directive|define
name|NWATTR_MODE_MASK
value|0x00000007
end_define
begin_define
DECL|macro|CAP_LOCALMASK
define|#
directive|define
name|CAP_LOCALMASK
value|0x0FFFE008
end_define
begin_comment
comment|/* how much to shift between capability and network attributes var */
end_comment
begin_define
DECL|macro|CAP_SHIFT_WPS
define|#
directive|define
name|CAP_SHIFT_WPS
value|3
end_define
begin_define
DECL|macro|CAP_SHIFT_ALGORITHM
define|#
directive|define
name|CAP_SHIFT_ALGORITHM
value|20
end_define
begin_define
DECL|macro|CAP_SHIFT_WPA2
define|#
directive|define
name|CAP_SHIFT_WPA2
value|1
end_define
begin_define
DECL|macro|CAP_SHIFT_METHOD
define|#
directive|define
name|CAP_SHIFT_METHOD
value|1
end_define
begin_define
DECL|macro|CAP_SHIFT_MODE
define|#
directive|define
name|CAP_SHIFT_MODE
value|0
end_define
begin_define
DECL|macro|CAP_SHIFT_ALWAYS_ONLINE
define|#
directive|define
name|CAP_SHIFT_ALWAYS_ONLINE
value|26
end_define
begin_comment
comment|/* ------------------------------------------------------------------------- */
end_comment
begin_comment
comment|/* From combined to capability */
end_comment
begin_function
DECL|function|nwattr2cap
specifier|static
specifier|inline
name|dbus_uint32_t
name|nwattr2cap
parameter_list|(
name|guint
name|nwattrs
parameter_list|,
name|dbus_uint32_t
modifier|*
name|cap
parameter_list|)
block|{
name|guint
name|oldval
init|=
operator|*
name|cap
decl_stmt|;
operator|*
name|cap
operator|&=
name|CAP_LOCALMASK
expr_stmt|;
comment|/* clear old capabilities */
operator|*
name|cap
operator||=
operator|(
operator|(
name|nwattrs
operator|&
name|ICD_NW_ATTR_ALWAYS_ONLINE
operator|)
operator|>>
name|CAP_SHIFT_ALWAYS_ONLINE
operator|)
operator||
operator|(
operator|(
name|nwattrs
operator|&
name|NWATTR_WPS_MASK
operator|)
operator|>>
name|CAP_SHIFT_WPS
operator|)
operator||
operator|(
operator|(
name|nwattrs
operator|&
name|NWATTR_ALGORITHM_MASK
operator|)
operator|<<
name|CAP_SHIFT_ALGORITHM
operator|)
operator||
operator|(
operator|(
name|nwattrs
operator|&
name|NWATTR_WPA2_MASK
operator|)
operator|<<
name|CAP_SHIFT_WPA2
operator|)
operator||
operator|(
operator|(
name|nwattrs
operator|&
name|NWATTR_METHOD_MASK
operator|)
operator|<<
name|CAP_SHIFT_METHOD
operator|)
operator||
operator|(
name|nwattrs
operator|&
name|NWATTR_MODE_MASK
operator|)
expr_stmt|;
return|return
name|oldval
return|;
block|}
end_function
begin_comment
comment|/* ------------------------------------------------------------------------- */
end_comment
begin_comment
comment|/* From capability to combined */
end_comment
begin_function
DECL|function|cap2nwattr
specifier|static
specifier|inline
name|guint
name|cap2nwattr
parameter_list|(
name|dbus_uint32_t
name|cap
parameter_list|,
name|guint
modifier|*
name|nwattrs
parameter_list|)
block|{
name|guint
name|oldval
init|=
operator|*
name|nwattrs
decl_stmt|;
operator|*
name|nwattrs
operator|&=
operator|~
name|ICD_NW_ATTR_LOCALMASK
expr_stmt|;
comment|/* clear old capabilities */
operator|*
name|nwattrs
operator||=
ifdef|#
directive|ifdef
name|WLANCOND_WPS_MASK
operator|(
operator|(
name|cap
operator|&
name|WLANCOND_WPS_MASK
operator|)
operator|<<
name|CAP_SHIFT_WPS
operator|)
operator||
endif|#
directive|endif
operator|(
operator|(
name|cap
operator|&
operator|(
name|WLANCOND_ENCRYPT_ALG_MASK
operator||
name|WLANCOND_ENCRYPT_GROUP_ALG_MASK
operator|)
operator|)
operator|>>
name|CAP_SHIFT_ALGORITHM
operator|)
operator||
operator|(
operator|(
name|cap
operator|&
name|WLANCOND_ENCRYPT_WPA2_MASK
operator|)
operator|>>
name|CAP_SHIFT_WPA2
operator|)
operator||
operator|(
operator|(
name|cap
operator|&
name|WLANCOND_ENCRYPT_METHOD_MASK
operator|)
operator|>>
name|CAP_SHIFT_METHOD
operator|)
operator||
operator|(
name|cap
operator|&
name|WLANCOND_MODE_MASK
operator|)
expr_stmt|;
return|return
name|oldval
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
end_unit
