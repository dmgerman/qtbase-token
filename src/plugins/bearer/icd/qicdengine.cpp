begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qicdengine.h"
end_include
begin_include
include|#
directive|include
file|"qnetworksession_impl.h"
end_include
begin_include
include|#
directive|include
file|<wlancond.h>
end_include
begin_include
include|#
directive|include
file|<wlan-utils.h>
end_include
begin_include
include|#
directive|include
file|<iapconf.h>
end_include
begin_include
include|#
directive|include
file|<iapmonitor.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|IcdNetworkConfigurationPrivate
name|IcdNetworkConfigurationPrivate
operator|::
name|IcdNetworkConfigurationPrivate
parameter_list|()
member_init_list|:
name|service_attrs
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|network_attrs
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~IcdNetworkConfigurationPrivate
name|IcdNetworkConfigurationPrivate
operator|::
name|~
name|IcdNetworkConfigurationPrivate
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|bearerTypeName
name|QString
name|IcdNetworkConfigurationPrivate
operator|::
name|bearerTypeName
parameter_list|()
specifier|const
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|iap_type
return|;
block|}
end_function
begin_comment
comment|/******************************************************************************/
end_comment
begin_comment
comment|/** IapAddTimer specific                                                      */
end_comment
begin_comment
comment|/******************************************************************************/
end_comment
begin_comment
comment|/* The IapAddTimer is a helper class that makes sure we update  * the configuration only after all db additions to certain  * iap are finished (after a certain timeout)  */
end_comment
begin_class
DECL|class|_IapAddTimer
class|class
name|_IapAddTimer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|_IapAddTimer
name|_IapAddTimer
parameter_list|()
block|{}
DECL|function|~_IapAddTimer
name|~
name|_IapAddTimer
parameter_list|()
block|{
if|if
condition|(
name|timer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|add
parameter_list|(
name|QString
modifier|&
name|iap_id
parameter_list|,
name|QIcdEngine
modifier|*
name|d
parameter_list|)
function_decl|;
DECL|member|iap_id
name|QString
name|iap_id
decl_stmt|;
DECL|member|timer
name|QTimer
name|timer
decl_stmt|;
DECL|member|d
name|QIcdEngine
modifier|*
name|d
decl_stmt|;
public|public
name|Q_SLOTS
public|:
name|void
name|timeout
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|add
name|void
name|_IapAddTimer
operator|::
name|add
parameter_list|(
name|QString
modifier|&
name|id
parameter_list|,
name|QIcdEngine
modifier|*
name|d_ptr
parameter_list|)
block|{
name|iap_id
operator|=
name|id
expr_stmt|;
name|d
operator|=
name|d_ptr
expr_stmt|;
if|if
condition|(
name|timer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|timer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timeout
name|void
name|_IapAddTimer
operator|::
name|timeout
parameter_list|()
block|{
name|d
operator|->
name|addConfiguration
argument_list|(
name|iap_id
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|IapAddTimer
class|class
name|IapAddTimer
block|{
DECL|member|timers
name|QHash
argument_list|<
name|QString
argument_list|,
name|_IapAddTimer
modifier|*
argument_list|>
name|timers
decl_stmt|;
public|public:
DECL|function|IapAddTimer
name|IapAddTimer
parameter_list|()
block|{}
DECL|function|~IapAddTimer
name|~
name|IapAddTimer
parameter_list|()
block|{}
name|void
name|add
parameter_list|(
name|QString
modifier|&
name|iap_id
parameter_list|,
name|QIcdEngine
modifier|*
name|d
parameter_list|)
function_decl|;
name|void
name|del
parameter_list|(
name|QString
modifier|&
name|iap_id
parameter_list|)
function_decl|;
name|void
name|removeAll
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|removeAll
name|void
name|IapAddTimer
operator|::
name|removeAll
parameter_list|()
block|{
name|QHashIterator
argument_list|<
name|QString
argument_list|,
name|_IapAddTimer
modifier|*
argument_list|>
name|i
argument_list|(
name|timers
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|_IapAddTimer
modifier|*
name|t
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
operator|delete
name|t
expr_stmt|;
block|}
name|timers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|add
name|void
name|IapAddTimer
operator|::
name|add
parameter_list|(
name|QString
modifier|&
name|iap_id
parameter_list|,
name|QIcdEngine
modifier|*
name|d
parameter_list|)
block|{
if|if
condition|(
name|timers
operator|.
name|contains
argument_list|(
name|iap_id
argument_list|)
condition|)
block|{
name|_IapAddTimer
modifier|*
name|iap
init|=
name|timers
operator|.
name|value
argument_list|(
name|iap_id
argument_list|)
decl_stmt|;
name|iap
operator|->
name|add
argument_list|(
name|iap_id
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_IapAddTimer
modifier|*
name|iap
init|=
operator|new
name|_IapAddTimer
decl_stmt|;
name|iap
operator|->
name|add
argument_list|(
name|iap_id
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|timers
operator|.
name|insert
argument_list|(
name|iap_id
argument_list|,
name|iap
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|del
name|void
name|IapAddTimer
operator|::
name|del
parameter_list|(
name|QString
modifier|&
name|iap_id
parameter_list|)
block|{
if|if
condition|(
name|timers
operator|.
name|contains
argument_list|(
name|iap_id
argument_list|)
condition|)
block|{
name|_IapAddTimer
modifier|*
name|iap
init|=
name|timers
operator|.
name|take
argument_list|(
name|iap_id
argument_list|)
decl_stmt|;
operator|delete
name|iap
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/******************************************************************************/
end_comment
begin_comment
comment|/** IAPMonitor specific                                                       */
end_comment
begin_comment
comment|/******************************************************************************/
end_comment
begin_class
DECL|class|IapMonitor
class|class
name|IapMonitor
super|:
specifier|public
name|Maemo
operator|::
name|IAPMonitor
block|{
public|public:
DECL|function|IapMonitor
name|IapMonitor
parameter_list|()
member_init_list|:
name|first_call
argument_list|(
literal|true
argument_list|)
block|{ }
name|void
name|setup
parameter_list|(
name|QIcdEngine
modifier|*
name|d
parameter_list|)
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
protected|protected:
name|void
name|iapAdded
parameter_list|(
specifier|const
name|QString
modifier|&
name|iapId
parameter_list|)
function_decl|;
name|void
name|iapRemoved
parameter_list|(
specifier|const
name|QString
modifier|&
name|iapId
parameter_list|)
function_decl|;
private|private:
DECL|member|first_call
name|bool
name|first_call
decl_stmt|;
DECL|member|d
name|QIcdEngine
modifier|*
name|d
decl_stmt|;
DECL|member|timers
name|IapAddTimer
name|timers
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|setup
name|void
name|IapMonitor
operator|::
name|setup
parameter_list|(
name|QIcdEngine
modifier|*
name|d_ptr
parameter_list|)
block|{
if|if
condition|(
name|first_call
condition|)
block|{
name|d
operator|=
name|d_ptr
expr_stmt|;
name|first_call
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|IapMonitor
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
operator|!
name|first_call
condition|)
block|{
name|timers
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|first_call
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|iapAdded
name|void
name|IapMonitor
operator|::
name|iapAdded
parameter_list|(
specifier|const
name|QString
modifier|&
name|iap_id
parameter_list|)
block|{
comment|/* We cannot know when the IAP is fully added to db, so a timer is      * installed instead. When the timer expires we hope that IAP is added ok.      */
name|QString
name|id
init|=
name|iap_id
decl_stmt|;
name|timers
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iapRemoved
name|void
name|IapMonitor
operator|::
name|iapRemoved
parameter_list|(
specifier|const
name|QString
modifier|&
name|iap_id
parameter_list|)
block|{
name|QString
name|id
init|=
name|iap_id
decl_stmt|;
name|d
operator|->
name|deleteConfiguration
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/******************************************************************************/
end_comment
begin_comment
comment|/** QIcdEngine implementation                                                 */
end_comment
begin_comment
comment|/******************************************************************************/
end_comment
begin_constructor
DECL|function|QIcdEngine
name|QIcdEngine
operator|::
name|QIcdEngine
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QBearerEngine
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|iapMonitor
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_dbusInterface
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_icdServiceWatcher
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|firstUpdate
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|m_scanGoingOn
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QIcdEngine
name|QIcdEngine
operator|::
name|~
name|QIcdEngine
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
operator|delete
name|iapMonitor
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|capabilities
name|QNetworkConfigurationManager
operator|::
name|Capabilities
name|QIcdEngine
operator|::
name|capabilities
parameter_list|()
specifier|const
block|{
return|return
name|QNetworkConfigurationManager
operator|::
name|CanStartAndStopInterfaces
operator||
name|QNetworkConfigurationManager
operator|::
name|DataStatistics
operator||
name|QNetworkConfigurationManager
operator|::
name|ForcedRoaming
operator||
name|QNetworkConfigurationManager
operator|::
name|NetworkSessionRequired
return|;
block|}
end_function
begin_function
DECL|function|ensureDBusConnection
name|bool
name|QIcdEngine
operator|::
name|ensureDBusConnection
parameter_list|()
block|{
if|if
condition|(
name|m_dbusInterface
condition|)
return|return
literal|true
return|;
comment|// Setup DBus Interface for ICD
name|m_dbusInterface
operator|=
operator|new
name|QDBusInterface
argument_list|(
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|ICD_DBUS_API_PATH
argument_list|,
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_dbusInterface
operator|->
name|isValid
argument_list|()
condition|)
block|{
operator|delete
name|m_dbusInterface
expr_stmt|;
name|m_dbusInterface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|m_icdServiceWatcher
condition|)
block|{
name|m_icdServiceWatcher
operator|=
operator|new
name|QDBusServiceWatcher
argument_list|(
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|QDBusConnection
operator|::
name|systemBus
argument_list|()
argument_list|,
name|QDBusServiceWatcher
operator|::
name|WatchForOwnerChange
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_icdServiceWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|serviceOwnerChanged
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|icdServiceOwnerChanged
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|connect
argument_list|(
operator|&
name|m_scanTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|finishAsyncConfigurationUpdate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_scanTimer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|/* Turn on IAP state monitoring */
name|startListeningStateSignalsForAllConnections
argument_list|()
expr_stmt|;
comment|/* Turn on IAP add/remove monitoring */
name|iapMonitor
operator|=
operator|new
name|IapMonitor
expr_stmt|;
name|iapMonitor
operator|->
name|setup
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|/* We create a default configuration which is a pseudo config */
name|QNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
operator|new
name|IcdNetworkConfigurationPrivate
decl_stmt|;
name|cpPriv
operator|->
name|name
operator|=
literal|"UserChoice"
expr_stmt|;
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Discovered
expr_stmt|;
name|cpPriv
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|cpPriv
operator|->
name|id
operator|=
name|OSSO_IAP_ANY
expr_stmt|;
name|cpPriv
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|UserChoice
expr_stmt|;
name|cpPriv
operator|->
name|purpose
operator|=
name|QNetworkConfiguration
operator|::
name|UnknownPurpose
expr_stmt|;
name|cpPriv
operator|->
name|roamingSupported
operator|=
literal|false
expr_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
name|cpPriv
argument_list|)
decl_stmt|;
name|userChoiceConfigurations
operator|.
name|insert
argument_list|(
name|cpPriv
operator|->
name|id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|doRequestUpdate
argument_list|()
expr_stmt|;
name|getIcdInitialState
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|initialize
name|void
name|QIcdEngine
operator|::
name|initialize
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ensureDBusConnection
argument_list|()
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|network_attrs_to_security
specifier|static
specifier|inline
name|QString
name|network_attrs_to_security
parameter_list|(
name|uint
name|network_attrs
parameter_list|)
block|{
name|uint
name|cap
init|=
literal|0
decl_stmt|;
name|nwattr2cap
argument_list|(
name|network_attrs
argument_list|,
operator|&
name|cap
argument_list|)
expr_stmt|;
comment|/* from libicd-network-wlan-dev.h */
if|if
condition|(
name|cap
operator|&
name|WLANCOND_OPEN
condition|)
return|return
literal|"NONE"
return|;
elseif|else
if|if
condition|(
name|cap
operator|&
name|WLANCOND_WEP
condition|)
return|return
literal|"WEP"
return|;
elseif|else
if|if
condition|(
name|cap
operator|&
name|WLANCOND_WPA_PSK
condition|)
return|return
literal|"WPA_PSK"
return|;
elseif|else
if|if
condition|(
name|cap
operator|&
name|WLANCOND_WPA_EAP
condition|)
return|return
literal|"WPA_EAP"
return|;
return|return
literal|""
return|;
block|}
end_function
begin_struct
DECL|struct|SSIDInfo
struct|struct
name|SSIDInfo
block|{
DECL|member|iap_id
name|QString
name|iap_id
decl_stmt|;
DECL|member|wlan_security
name|QString
name|wlan_security
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|deleteConfiguration
name|void
name|QIcdEngine
operator|::
name|deleteConfiguration
parameter_list|(
specifier|const
name|QString
modifier|&
name|iap_id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
comment|/* Called when IAPs are deleted in db, in this case we do not scan      * or read all the IAPs from db because it might take too much power      * (multiple applications would need to scan and read all IAPs from db)      */
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|take
argument_list|(
name|iap_id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"IAP"
operator|<<
name|iap_id
operator|<<
literal|"was removed from storage."
expr_stmt|;
endif|#
directive|endif
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
emit|;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"IAP: %s, already missing from the known list"
argument_list|,
name|iap_id
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|getNetworkAttrs
specifier|static
name|quint32
name|getNetworkAttrs
parameter_list|(
name|bool
name|is_iap_id
parameter_list|,
specifier|const
name|QString
modifier|&
name|iap_id
parameter_list|,
specifier|const
name|QString
modifier|&
name|iap_type
parameter_list|,
name|QString
name|security_method
parameter_list|)
block|{
name|guint
name|network_attr
init|=
literal|0
decl_stmt|;
name|dbus_uint32_t
name|cap
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|iap_type
operator|==
literal|"WLAN_INFRA"
condition|)
name|cap
operator||=
name|WLANCOND_INFRA
expr_stmt|;
elseif|else
if|if
condition|(
name|iap_type
operator|==
literal|"WLAN_ADHOC"
condition|)
name|cap
operator||=
name|WLANCOND_ADHOC
expr_stmt|;
if|if
condition|(
name|security_method
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|cap
operator|&
operator|(
name|WLANCOND_INFRA
operator||
name|WLANCOND_ADHOC
operator|)
operator|)
condition|)
block|{
name|Maemo
operator|::
name|IAPConf
name|saved_ap
argument_list|(
name|iap_id
argument_list|)
decl_stmt|;
name|security_method
operator|=
name|saved_ap
operator|.
name|value
argument_list|(
literal|"wlan_security"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|security_method
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|security_method
operator|==
literal|"WEP"
condition|)
name|cap
operator||=
name|WLANCOND_WEP
expr_stmt|;
elseif|else
if|if
condition|(
name|security_method
operator|==
literal|"WPA_PSK"
condition|)
name|cap
operator||=
name|WLANCOND_WPA_PSK
expr_stmt|;
elseif|else
if|if
condition|(
name|security_method
operator|==
literal|"WPA_EAP"
condition|)
name|cap
operator||=
name|WLANCOND_WPA_EAP
expr_stmt|;
elseif|else
if|if
condition|(
name|security_method
operator|==
literal|"NONE"
condition|)
name|cap
operator||=
name|WLANCOND_OPEN
expr_stmt|;
if|if
condition|(
name|cap
operator|&
operator|(
name|WLANCOND_WPA_PSK
operator||
name|WLANCOND_WPA_EAP
operator|)
condition|)
block|{
name|Maemo
operator|::
name|IAPConf
name|saved_iap
argument_list|(
name|iap_id
argument_list|)
decl_stmt|;
name|bool
name|wpa2_only
init|=
name|saved_iap
operator|.
name|value
argument_list|(
literal|"EAP_wpa2_only_mode"
argument_list|)
operator|.
name|toBool
argument_list|()
decl_stmt|;
if|if
condition|(
name|wpa2_only
condition|)
block|{
name|cap
operator||=
name|WLANCOND_WPA2
expr_stmt|;
block|}
block|}
block|}
name|cap2nwattr
argument_list|(
name|cap
argument_list|,
operator|&
name|network_attr
argument_list|)
expr_stmt|;
if|if
condition|(
name|is_iap_id
condition|)
name|network_attr
operator||=
name|ICD_NW_ATTR_IAPNAME
expr_stmt|;
return|return
name|quint32
argument_list|(
name|network_attr
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addConfiguration
name|void
name|QIcdEngine
operator|::
name|addConfiguration
parameter_list|(
name|QString
modifier|&
name|iap_id
parameter_list|)
block|{
comment|// Note: When new IAP is created, this function gets called multiple times
comment|//       in a row.
comment|//       For example: Empty type& name for WLAN was stored into newly
comment|//                    created IAP data in gconf when this function gets
comment|//                    called for the first time.
comment|//                    WLAN type& name are updated into IAP data in gconf
comment|//                    as soon as WLAN connection is up and running.
comment|//                    => And this function gets called again.
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|iap_id
argument_list|)
condition|)
block|{
name|Maemo
operator|::
name|IAPConf
name|saved_iap
argument_list|(
name|iap_id
argument_list|)
decl_stmt|;
name|QString
name|iap_type
init|=
name|saved_iap
operator|.
name|value
argument_list|(
literal|"type"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QString
name|iap_name
init|=
name|saved_iap
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QByteArray
name|ssid
init|=
name|saved_iap
operator|.
name|value
argument_list|(
literal|"wlan_ssid"
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iap_type
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|iap_name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Check if new IAP is actually Undefined WLAN configuration
comment|// Note: SSID is used as an iap id for Undefined WLAN configurations
comment|//       => configuration must be searched using SSID
if|if
condition|(
operator|!
name|ssid
operator|.
name|isEmpty
argument_list|()
operator|&&
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|ssid
argument_list|)
condition|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|take
argument_list|(
name|ssid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|id
operator|=
name|iap_id
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|iap_type
operator|=
name|iap_type
expr_stmt|;
name|ptr
operator|->
name|bearerType
operator|=
name|bearerTypeFromIapType
argument_list|(
name|iap_type
argument_list|)
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_attrs
operator|=
name|getNetworkAttrs
argument_list|(
literal|true
argument_list|,
name|iap_id
argument_list|,
name|iap_type
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_id
operator|=
name|ssid
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|service_id
operator|=
name|saved_iap
operator|.
name|value
argument_list|(
literal|"service_id"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|service_type
operator|=
name|saved_iap
operator|.
name|value
argument_list|(
literal|"service_type"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_onlineIapId
operator|==
name|iap_id
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
block|}
else|else
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
block|}
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|iap_id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|IcdNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
operator|new
name|IcdNetworkConfigurationPrivate
decl_stmt|;
name|cpPriv
operator|->
name|name
operator|=
name|saved_iap
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpPriv
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|cpPriv
operator|->
name|name
operator|=
name|iap_id
expr_stmt|;
name|cpPriv
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|cpPriv
operator|->
name|id
operator|=
name|iap_id
expr_stmt|;
name|cpPriv
operator|->
name|iap_type
operator|=
name|iap_type
expr_stmt|;
name|cpPriv
operator|->
name|bearerType
operator|=
name|bearerTypeFromIapType
argument_list|(
name|iap_type
argument_list|)
expr_stmt|;
name|cpPriv
operator|->
name|network_attrs
operator|=
name|getNetworkAttrs
argument_list|(
literal|true
argument_list|,
name|iap_id
argument_list|,
name|iap_type
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|cpPriv
operator|->
name|service_id
operator|=
name|saved_iap
operator|.
name|value
argument_list|(
literal|"service_id"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|cpPriv
operator|->
name|service_type
operator|=
name|saved_iap
operator|.
name|value
argument_list|(
literal|"service_type"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|iap_type
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"WLAN"
argument_list|)
argument_list|)
condition|)
block|{
name|QByteArray
name|ssid
init|=
name|saved_iap
operator|.
name|value
argument_list|(
literal|"wlan_ssid"
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|ssid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Cannot get ssid for"
operator|<<
name|iap_id
expr_stmt|;
block|}
name|cpPriv
operator|->
name|network_id
operator|=
name|ssid
expr_stmt|;
block|}
name|cpPriv
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
if|if
condition|(
name|m_onlineIapId
operator|==
name|iap_id
condition|)
block|{
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
block|}
else|else
block|{
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
block|}
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
name|cpPriv
argument_list|)
decl_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|iap_id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"IAP: %s, name: %s, added to known list"
argument_list|,
name|iap_id
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|cpPriv
operator|->
name|name
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"IAP %s does not have \"type\" or \"name\" fields defined, skipping this IAP."
argument_list|,
name|iap_id
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"IAP"
operator|<<
name|iap_id
operator|<<
literal|"already in db."
expr_stmt|;
endif|#
directive|endif
comment|/* Check if the data in db changed and update configuration accordingly 	 */
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|iap_id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|Maemo
operator|::
name|IAPConf
name|changed_iap
argument_list|(
name|iap_id
argument_list|)
decl_stmt|;
name|QString
name|iap_type
init|=
name|changed_iap
operator|.
name|value
argument_list|(
literal|"type"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|bool
name|update_needed
init|=
literal|false
decl_stmt|;
comment|/* if IAP type or ssid changed, we need to change the state */
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_attrs
operator|=
name|getNetworkAttrs
argument_list|(
literal|true
argument_list|,
name|iap_id
argument_list|,
name|iap_type
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|service_id
operator|=
name|changed_iap
operator|.
name|value
argument_list|(
literal|"service_id"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|service_type
operator|=
name|changed_iap
operator|.
name|value
argument_list|(
literal|"service_type"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|iap_type
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ptr
operator|->
name|name
operator|=
name|changed_iap
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptr
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|ptr
operator|->
name|name
operator|=
name|iap_id
expr_stmt|;
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|iap_type
operator|!=
name|iap_type
condition|)
block|{
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|iap_type
operator|=
name|iap_type
expr_stmt|;
name|ptr
operator|->
name|bearerType
operator|=
name|bearerTypeFromIapType
argument_list|(
name|iap_type
argument_list|)
expr_stmt|;
name|update_needed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|iap_type
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"WLAN"
argument_list|)
argument_list|)
condition|)
block|{
name|QByteArray
name|ssid
init|=
name|changed_iap
operator|.
name|value
argument_list|(
literal|"wlan_ssid"
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|ssid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Cannot get ssid for"
operator|<<
name|iap_id
expr_stmt|;
block|}
if|if
condition|(
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_id
operator|!=
name|ssid
condition|)
block|{
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_id
operator|=
name|ssid
expr_stmt|;
name|update_needed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|update_needed
condition|)
block|{
name|ptr
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
if|if
condition|(
name|m_onlineIapId
operator|==
name|iap_id
condition|)
block|{
if|if
condition|(
name|ptr
operator|->
name|state
operator|<
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
name|configLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ptr
operator|->
name|state
operator|<
name|QNetworkConfiguration
operator|::
name|Defined
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
name|configLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Cannot find IAP %s from current configuration although it should be there."
argument_list|,
name|iap_id
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|doRequestUpdate
name|void
name|QIcdEngine
operator|::
name|doRequestUpdate
parameter_list|(
name|QList
argument_list|<
name|Maemo
operator|::
name|IcdScanResult
argument_list|>
name|scanned
parameter_list|)
block|{
comment|/* Contains all known iap_ids from storage */
name|QList
argument_list|<
name|QString
argument_list|>
name|knownConfigs
init|=
name|accessPointConfigurations
operator|.
name|keys
argument_list|()
decl_stmt|;
comment|/* Contains all known WLAN network ids (like ssid) from storage */
name|QMultiHash
argument_list|<
name|QByteArray
argument_list|,
name|SSIDInfo
modifier|*
argument_list|>
name|notDiscoveredWLANConfigs
decl_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|all_iaps
decl_stmt|;
name|Maemo
operator|::
name|IAPConf
operator|::
name|getAll
argument_list|(
name|all_iaps
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|iap_id
decl|,
name|all_iaps
control|)
block|{
name|QByteArray
name|ssid
decl_stmt|;
name|Maemo
operator|::
name|IAPConf
name|saved_ap
argument_list|(
name|iap_id
argument_list|)
decl_stmt|;
name|bool
name|is_temporary
init|=
name|saved_ap
operator|.
name|value
argument_list|(
literal|"temporary"
argument_list|)
operator|.
name|toBool
argument_list|()
decl_stmt|;
if|if
condition|(
name|is_temporary
condition|)
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"IAP"
operator|<<
name|iap_id
operator|<<
literal|"is temporary, skipping it."
expr_stmt|;
endif|#
directive|endif
continue|continue;
block|}
name|QString
name|iap_type
init|=
name|saved_ap
operator|.
name|value
argument_list|(
literal|"type"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|iap_type
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"WLAN"
argument_list|)
argument_list|)
condition|)
block|{
name|ssid
operator|=
name|saved_ap
operator|.
name|value
argument_list|(
literal|"wlan_ssid"
argument_list|)
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|ssid
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|QString
name|security_method
init|=
name|saved_ap
operator|.
name|value
argument_list|(
literal|"wlan_security"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|SSIDInfo
modifier|*
name|info
init|=
operator|new
name|SSIDInfo
decl_stmt|;
name|info
operator|->
name|iap_id
operator|=
name|iap_id
expr_stmt|;
name|info
operator|->
name|wlan_security
operator|=
name|security_method
expr_stmt|;
name|notDiscoveredWLANConfigs
operator|.
name|insert
argument_list|(
name|ssid
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|iap_type
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"IAP"
operator|<<
name|iap_id
operator|<<
literal|"network type is"
operator|<<
name|iap_type
expr_stmt|;
endif|#
directive|endif
name|ssid
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|iap_id
argument_list|)
condition|)
block|{
name|IcdNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
operator|new
name|IcdNetworkConfigurationPrivate
decl_stmt|;
name|cpPriv
operator|->
name|name
operator|=
name|saved_ap
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|cpPriv
operator|->
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ssid
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ssid
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|cpPriv
operator|->
name|name
operator|=
name|ssid
operator|.
name|data
argument_list|()
expr_stmt|;
else|else
name|cpPriv
operator|->
name|name
operator|=
name|iap_id
expr_stmt|;
block|}
name|cpPriv
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|cpPriv
operator|->
name|id
operator|=
name|iap_id
expr_stmt|;
name|cpPriv
operator|->
name|network_id
operator|=
name|ssid
expr_stmt|;
name|cpPriv
operator|->
name|network_attrs
operator|=
name|getNetworkAttrs
argument_list|(
literal|true
argument_list|,
name|iap_id
argument_list|,
name|iap_type
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|cpPriv
operator|->
name|iap_type
operator|=
name|iap_type
expr_stmt|;
name|cpPriv
operator|->
name|bearerType
operator|=
name|bearerTypeFromIapType
argument_list|(
name|iap_type
argument_list|)
expr_stmt|;
name|cpPriv
operator|->
name|service_id
operator|=
name|saved_ap
operator|.
name|value
argument_list|(
literal|"service_id"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|cpPriv
operator|->
name|service_type
operator|=
name|saved_ap
operator|.
name|value
argument_list|(
literal|"service_type"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|cpPriv
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
name|cpPriv
argument_list|)
decl_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|iap_id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"IAP: %s, name: %s, ssid: %s, added to known list"
argument_list|,
name|iap_id
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|ptr
operator|->
name|name
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
operator|!
name|ssid
operator|.
name|isEmpty
argument_list|()
condition|?
name|ssid
operator|.
name|data
argument_list|()
else|:
literal|"-"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|knownConfigs
operator|.
name|removeOne
argument_list|(
name|iap_id
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"IAP: %s, ssid: %s, already exists in the known list"
argument_list|,
name|iap_id
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
operator|!
name|ssid
operator|.
name|isEmpty
argument_list|()
condition|?
name|ssid
operator|.
name|data
argument_list|()
else|:
literal|"-"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
comment|/* This is skipped in the first update as scanned size is zero */
if|if
condition|(
operator|!
name|scanned
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scanned
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Maemo
operator|::
name|IcdScanResult
name|ap
init|=
name|scanned
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ap
operator|.
name|scan
operator|.
name|network_attrs
operator|&
name|ICD_NW_ATTR_IAPNAME
condition|)
block|{
comment|/* The network_id is IAP id, so the IAP is a known one */
name|QString
name|iapid
init|=
name|ap
operator|.
name|scan
operator|.
name|network_id
operator|.
name|data
argument_list|()
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|iapid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|bool
name|changed
init|=
literal|false
decl_stmt|;
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ptr
operator|->
name|isValid
condition|)
block|{
name|ptr
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
comment|/* If this config is the current active one, we do not set it                      * to discovered.                      */
if|if
condition|(
operator|(
name|ptr
operator|->
name|state
operator|!=
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|&&
operator|(
name|ptr
operator|->
name|state
operator|!=
name|QNetworkConfiguration
operator|::
name|Active
operator|)
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Discovered
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_attrs
operator|=
name|ap
operator|.
name|scan
operator|.
name|network_attrs
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|service_id
operator|=
name|ap
operator|.
name|scan
operator|.
name|service_id
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|service_type
operator|=
name|ap
operator|.
name|scan
operator|.
name|service_type
expr_stmt|;
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|service_attrs
operator|=
name|ap
operator|.
name|scan
operator|.
name|service_attrs
expr_stmt|;
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|(
literal|"IAP: %s, ssid: %s, discovered"
argument_list|,
name|iapid
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_id
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ap
operator|.
name|scan
operator|.
name|network_type
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"WLAN"
argument_list|)
argument_list|)
condition|)
continue|continue;
comment|// not a wlan AP
comment|/* Remove scanned AP from discovered WLAN configurations so that we can                      * emit configurationRemoved signal later                      */
name|ptr
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|SSIDInfo
modifier|*
argument_list|>
name|known_iaps
init|=
name|notDiscoveredWLANConfigs
operator|.
name|values
argument_list|(
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_id
argument_list|)
decl_stmt|;
name|rescan_list
label|:
if|if
condition|(
operator|!
name|known_iaps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|known_iaps
operator|.
name|size
argument_list|()
condition|;
operator|++
name|k
control|)
block|{
name|SSIDInfo
modifier|*
name|iap
init|=
name|known_iaps
operator|.
name|at
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|iap
operator|->
name|wlan_security
operator|==
name|network_attrs_to_security
argument_list|(
name|ap
operator|.
name|scan
operator|.
name|network_attrs
argument_list|)
condition|)
block|{
comment|/* Remove IAP from the list */
name|notDiscoveredWLANConfigs
operator|.
name|remove
argument_list|(
name|toIcdConfig
argument_list|(
name|ptr
argument_list|)
operator|->
name|network_id
argument_list|,
name|iap
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"Removed IAP"
operator|<<
name|iap
operator|->
name|iap_id
operator|<<
literal|"from unknown config"
expr_stmt|;
endif|#
directive|endif
name|known_iaps
operator|.
name|removeAt
argument_list|(
name|k
argument_list|)
expr_stmt|;
operator|delete
name|iap
expr_stmt|;
goto|goto
name|rescan_list
goto|;
block|}
block|}
block|}
name|ptr
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/* Non saved access point data */
name|QByteArray
name|scanned_ssid
init|=
name|ap
operator|.
name|scan
operator|.
name|network_id
decl_stmt|;
if|if
condition|(
operator|!
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|scanned_ssid
argument_list|)
condition|)
block|{
name|IcdNetworkConfigurationPrivate
modifier|*
name|cpPriv
init|=
operator|new
name|IcdNetworkConfigurationPrivate
decl_stmt|;
name|QString
name|hrs
init|=
name|scanned_ssid
operator|.
name|data
argument_list|()
decl_stmt|;
name|cpPriv
operator|->
name|name
operator|=
name|ap
operator|.
name|network_name
operator|.
name|isEmpty
argument_list|()
condition|?
name|hrs
else|:
name|ap
operator|.
name|network_name
expr_stmt|;
name|cpPriv
operator|->
name|isValid
operator|=
literal|true
expr_stmt|;
name|cpPriv
operator|->
name|id
operator|=
name|scanned_ssid
operator|.
name|data
argument_list|()
expr_stmt|;
comment|// Note: id is now ssid, it should be set to IAP id if the IAP is saved
name|cpPriv
operator|->
name|network_id
operator|=
name|scanned_ssid
expr_stmt|;
name|cpPriv
operator|->
name|iap_type
operator|=
name|ap
operator|.
name|scan
operator|.
name|network_type
expr_stmt|;
name|cpPriv
operator|->
name|bearerType
operator|=
name|bearerTypeFromIapType
argument_list|(
name|cpPriv
operator|->
name|iap_type
argument_list|)
expr_stmt|;
name|cpPriv
operator|->
name|network_attrs
operator|=
name|ap
operator|.
name|scan
operator|.
name|network_attrs
expr_stmt|;
name|cpPriv
operator|->
name|service_id
operator|=
name|ap
operator|.
name|scan
operator|.
name|service_id
expr_stmt|;
name|cpPriv
operator|->
name|service_type
operator|=
name|ap
operator|.
name|scan
operator|.
name|service_type
expr_stmt|;
name|cpPriv
operator|->
name|service_attrs
operator|=
name|ap
operator|.
name|scan
operator|.
name|service_attrs
expr_stmt|;
name|cpPriv
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|cpPriv
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Undefined
expr_stmt|;
ifdef|#
directive|ifdef
name|BEARER_MANAGEMENT_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"IAP with network id"
operator|<<
name|cpPriv
operator|->
name|id
operator|<<
literal|"was found in the scan."
expr_stmt|;
endif|#
directive|endif
name|QNetworkConfigurationPrivatePointer
name|ptr
argument_list|(
name|cpPriv
argument_list|)
decl_stmt|;
name|accessPointConfigurations
operator|.
name|insert
argument_list|(
name|ptr
operator|->
name|id
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationAdded
argument_list|(
name|ptr
argument_list|)
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|knownConfigs
operator|.
name|removeOne
argument_list|(
name|scanned_ssid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|firstUpdate
condition|)
block|{
comment|// Update Defined status to all defined WLAN IAPs which
comment|// could not be found when access points were scanned
name|QHashIterator
argument_list|<
name|QByteArray
argument_list|,
name|SSIDInfo
modifier|*
argument_list|>
name|i
argument_list|(
name|notDiscoveredWLANConfigs
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|SSIDInfo
modifier|*
name|iap
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
name|QString
name|iap_id
init|=
name|iap
operator|->
name|iap_id
decl_stmt|;
comment|//qDebug()<< i.key()<< ": "<< iap_id;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|iap_id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
comment|// WLAN AccessPoint configuration could not be Discovered
comment|// => Make sure that configuration state is Defined
if|if
condition|(
name|ptr
operator|->
name|state
operator|>
name|QNetworkConfiguration
operator|::
name|Defined
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Defined
expr_stmt|;
name|configLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/* Remove non existing iaps since last update */
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|oldIface
decl|,
name|knownConfigs
control|)
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|take
argument_list|(
name|oldIface
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|//if we would have SNAP support we would have to remove the references
comment|//from existing ServiceNetworks to the removed access point configuration
block|}
block|}
block|}
name|QMutableHashIterator
argument_list|<
name|QByteArray
argument_list|,
name|SSIDInfo
modifier|*
argument_list|>
name|i
argument_list|(
name|notDiscoveredWLANConfigs
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|SSIDInfo
modifier|*
name|iap
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
operator|delete
name|iap
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|firstUpdate
condition|)
block|{
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|firstUpdate
condition|)
name|firstUpdate
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultConfiguration
name|QNetworkConfigurationPrivatePointer
name|QIcdEngine
operator|::
name|defaultConfiguration
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ensureDBusConnection
argument_list|()
condition|)
return|return
name|QNetworkConfigurationPrivatePointer
argument_list|()
return|;
comment|// Here we just return [ANY] request to icd and let the icd decide which IAP to connect.
return|return
name|userChoiceConfigurations
operator|.
name|value
argument_list|(
name|OSSO_IAP_ANY
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|startListeningStateSignalsForAllConnections
name|void
name|QIcdEngine
operator|::
name|startListeningStateSignalsForAllConnections
parameter_list|()
block|{
comment|// Start listening ICD_DBUS_API_STATE_SIG signals
name|m_dbusInterface
operator|->
name|connection
argument_list|()
operator|.
name|connect
argument_list|(
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|ICD_DBUS_API_PATH
argument_list|,
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|ICD_DBUS_API_STATE_SIG
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|connectionStateSignalsSlot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getIcdInitialState
name|void
name|QIcdEngine
operator|::
name|getIcdInitialState
parameter_list|()
block|{
comment|/* Instead of requesting ICD status asynchronously, we ask it synchronously.      * It ensures that we always get right icd status BEFORE initialize() ends.      * If not, initialize()  might end before we got icd status and      * QNetworkConfigurationManager::updateConfigurations()      * call from user might also end before receiving icd status.      * In such case, we come up to a bug:      * QNetworkConfigurationManagerPrivate::isOnline() will be false even      * if we are connected.      */
name|Maemo
operator|::
name|Icd
name|icd
decl_stmt|;
name|QList
argument_list|<
name|Maemo
operator|::
name|IcdStateResult
argument_list|>
name|state_results
decl_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
decl_stmt|;
if|if
condition|(
name|icd
operator|.
name|state
argument_list|(
name|state_results
argument_list|)
operator|&&
operator|!
name|state_results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|network_attrs
operator|==
literal|0
operator|&&
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|network_id
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
switch|switch
condition|(
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|state
condition|)
block|{
case|case
name|ICD_STATE_CONNECTED
case|:
name|m_onlineIapId
operator|=
name|state_results
operator|.
name|first
argument_list|()
operator|.
name|params
operator|.
name|network_id
expr_stmt|;
name|ptr
operator|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|m_onlineIapId
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
name|configLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|connectionStateSignalsSlot
name|void
name|QIcdEngine
operator|::
name|connectionStateSignalsSlot
parameter_list|(
name|QDBusMessage
name|msg
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|arguments
init|=
name|msg
operator|.
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|count
argument_list|()
operator|<
literal|8
operator|||
name|arguments
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toUInt
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return;
block|}
name|QString
name|iapid
init|=
name|arguments
index|[
literal|5
index|]
operator|.
name|toByteArray
argument_list|()
operator|.
name|data
argument_list|()
decl_stmt|;
name|uint
name|icd_connection_state
init|=
name|arguments
operator|.
name|at
argument_list|(
literal|7
argument_list|)
operator|.
name|toUInt
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|icd_connection_state
condition|)
block|{
case|case
name|ICD_STATE_CONNECTED
case|:
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|iapid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
if|if
condition|(
name|ptr
operator|->
name|state
operator|!=
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Active
expr_stmt|;
name|configLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
name|m_onlineIapId
operator|=
name|iapid
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// This gets called when new WLAN IAP is created using Connection dialog
comment|// At this point Undefined WLAN configuration has SSID as iap id
comment|// => Because of that configuration can not be found from
comment|//    accessPointConfigurations using correct iap id
name|m_onlineIapId
operator|=
name|iapid
expr_stmt|;
block|}
break|break;
block|}
case|case
name|ICD_STATE_DISCONNECTED
case|:
block|{
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|accessPointConfigurations
operator|.
name|value
argument_list|(
name|iapid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
condition|)
block|{
name|QMutexLocker
name|configLocker
argument_list|(
operator|&
name|ptr
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|type
operator|=
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
if|if
condition|(
name|ptr
operator|->
name|state
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|ptr
operator|->
name|state
operator|=
name|QNetworkConfiguration
operator|::
name|Discovered
expr_stmt|;
name|configLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationChanged
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
comment|// Note: If ICD switches used IAP from one to another:
comment|//       1) new IAP is reported to be online first
comment|//       2) old IAP is reported to be offline then
comment|// => Device can be reported to be offline only
comment|//    if last known online IAP is reported to be disconnected
if|if
condition|(
name|iapid
operator|==
name|m_onlineIapId
condition|)
block|{
comment|// It's known that there is only one global ICD connection
comment|// => Because ICD state was reported to be DISCONNECTED, Device is offline
name|m_onlineIapId
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Disconnected IAP was not found from accessPointConfigurations
comment|// => Reason: Online IAP was removed which resulted ICD to disconnect
if|if
condition|(
name|iapid
operator|==
name|m_onlineIapId
condition|)
block|{
comment|// It's known that there is only one global ICD connection
comment|// => Because ICD state was reported to be DISCONNECTED, Device is offline
name|m_onlineIapId
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
break|break;
block|}
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|iapStateChanged
argument_list|(
name|iapid
argument_list|,
name|icd_connection_state
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|icdServiceOwnerChanged
name|void
name|QIcdEngine
operator|::
name|icdServiceOwnerChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|serviceName
parameter_list|,
specifier|const
name|QString
modifier|&
name|oldOwner
parameter_list|,
specifier|const
name|QString
modifier|&
name|newOwner
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|oldOwner
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOwner
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Disconnected from ICD, remove all configurations
name|cleanup
argument_list|()
expr_stmt|;
operator|delete
name|iapMonitor
expr_stmt|;
name|iapMonitor
operator|=
literal|0
expr_stmt|;
operator|delete
name|m_dbusInterface
expr_stmt|;
name|m_dbusInterface
operator|=
literal|0
expr_stmt|;
name|QMutableHashIterator
argument_list|<
name|QString
argument_list|,
name|QNetworkConfigurationPrivatePointer
argument_list|>
name|i
argument_list|(
name|accessPointConfigurations
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|QNetworkConfigurationPrivatePointer
name|ptr
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|configurationRemoved
argument_list|(
name|ptr
argument_list|)
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
name|userChoiceConfigurations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Connected to ICD ensure connection.
name|ensureDBusConnection
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|requestUpdate
name|void
name|QIcdEngine
operator|::
name|requestUpdate
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ensureDBusConnection
argument_list|()
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
emit|emit
name|updateCompleted
argument_list|()
emit|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|m_scanGoingOn
condition|)
return|return;
name|m_scanGoingOn
operator|=
literal|true
expr_stmt|;
name|m_dbusInterface
operator|->
name|connection
argument_list|()
operator|.
name|connect
argument_list|(
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|ICD_DBUS_API_PATH
argument_list|,
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|ICD_DBUS_API_SCAN_SIG
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|asyncUpdateConfigurationsSlot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusMessage
name|msg
init|=
name|m_dbusInterface
operator|->
name|call
argument_list|(
name|ICD_DBUS_API_SCAN_REQ
argument_list|,
operator|(
name|uint
operator|)
name|ICD_SCAN_REQUEST_ACTIVE
argument_list|)
decl_stmt|;
name|m_typesToBeScanned
operator|=
name|msg
operator|.
name|arguments
argument_list|()
index|[
literal|0
index|]
operator|.
name|value
argument_list|<
name|QStringList
argument_list|>
argument_list|()
expr_stmt|;
name|m_scanTimer
operator|.
name|start
argument_list|(
name|ICD_SHORT_SCAN_TIMEOUT
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cancelAsyncConfigurationUpdate
name|void
name|QIcdEngine
operator|::
name|cancelAsyncConfigurationUpdate
parameter_list|()
block|{
if|if
condition|(
operator|!
name|ensureDBusConnection
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|m_scanGoingOn
condition|)
return|return;
name|m_scanGoingOn
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|m_scanTimer
operator|.
name|isActive
argument_list|()
condition|)
name|m_scanTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|m_dbusInterface
operator|->
name|connection
argument_list|()
operator|.
name|disconnect
argument_list|(
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|ICD_DBUS_API_PATH
argument_list|,
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|ICD_DBUS_API_SCAN_SIG
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|asyncUpdateConfigurationsSlot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Stop scanning rounds by calling ICD_DBUS_API_SCAN_CANCEL
comment|//<=> If ICD_DBUS_API_SCAN_CANCEL is not called, new scanning round will
comment|//     be started after the module scan timeout.
name|m_dbusInterface
operator|->
name|call
argument_list|(
name|ICD_DBUS_API_SCAN_CANCEL
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|finishAsyncConfigurationUpdate
name|void
name|QIcdEngine
operator|::
name|finishAsyncConfigurationUpdate
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|cancelAsyncConfigurationUpdate
argument_list|()
expr_stmt|;
name|doRequestUpdate
argument_list|(
name|m_scanResult
argument_list|)
expr_stmt|;
name|m_scanResult
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|asyncUpdateConfigurationsSlot
name|void
name|QIcdEngine
operator|::
name|asyncUpdateConfigurationsSlot
parameter_list|(
name|QDBusMessage
name|msg
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|arguments
init|=
name|msg
operator|.
name|arguments
argument_list|()
decl_stmt|;
name|uint
name|icd_scan_status
init|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toUInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|icd_scan_status
operator|==
name|ICD_SCAN_COMPLETE
condition|)
block|{
name|m_typesToBeScanned
operator|.
name|removeOne
argument_list|(
name|arguments
index|[
literal|6
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_typesToBeScanned
operator|.
name|count
argument_list|()
condition|)
block|{
name|locker
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|finishAsyncConfigurationUpdate
argument_list|()
expr_stmt|;
name|locker
operator|.
name|relock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|Maemo
operator|::
name|IcdScanResult
name|scanResult
decl_stmt|;
name|scanResult
operator|.
name|status
operator|=
name|icd_scan_status
expr_stmt|;
name|scanResult
operator|.
name|timestamp
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|scan
operator|.
name|service_type
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|service_name
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|scan
operator|.
name|service_attrs
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|scan
operator|.
name|service_id
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|service_priority
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|scan
operator|.
name|network_type
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|network_name
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|scan
operator|.
name|network_attrs
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|scan
operator|.
name|network_id
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|network_priority
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|signal_strength
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|station_id
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scanResult
operator|.
name|signal_dB
operator|=
name|arguments
operator|.
name|takeFirst
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|m_scanResult
operator|.
name|append
argument_list|(
name|scanResult
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QIcdEngine
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|m_scanGoingOn
condition|)
block|{
name|m_scanTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|m_dbusInterface
operator|->
name|call
argument_list|(
name|ICD_DBUS_API_SCAN_CANCEL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iapMonitor
condition|)
name|iapMonitor
operator|->
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasIdentifier
name|bool
name|QIcdEngine
operator|::
name|hasIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
return|return
name|accessPointConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|||
name|snapConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
operator|||
name|userChoiceConfigurations
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createSessionBackend
name|QNetworkSessionPrivate
modifier|*
name|QIcdEngine
operator|::
name|createSessionBackend
parameter_list|()
block|{
return|return
operator|new
name|QNetworkSessionPrivateImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"qicdengine.moc"
end_include
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
end_unit
