begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QVariant>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QWriteLocker>
end_include
begin_include
include|#
directive|include
file|<QNetworkProxyFactory>
end_include
begin_include
include|#
directive|include
file|<QNetworkProxy>
end_include
begin_include
include|#
directive|include
file|<gconf/gconf-value.h>
end_include
begin_include
include|#
directive|include
file|<gconf/gconf-client.h>
end_include
begin_include
include|#
directive|include
file|"proxyconf.h"
end_include
begin_define
DECL|macro|CONF_PROXY
define|#
directive|define
name|CONF_PROXY
value|"/system/proxy"
end_define
begin_define
DECL|macro|HTTP_PROXY
define|#
directive|define
name|HTTP_PROXY
value|"/system/http_proxy"
end_define
begin_namespace
DECL|namespace|Maemo
namespace|namespace
name|Maemo
block|{
DECL|function|convertKey
specifier|static
name|QString
name|convertKey
parameter_list|(
specifier|const
name|char
modifier|*
name|key
parameter_list|)
block|{
return|return
name|QString
operator|::
name|fromUtf8
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|function|convertValue
specifier|static
name|QVariant
name|convertValue
parameter_list|(
name|GConfValue
modifier|*
name|src
parameter_list|)
block|{
if|if
condition|(
operator|!
name|src
condition|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
else|else
block|{
switch|switch
condition|(
name|src
operator|->
name|type
condition|)
block|{
case|case
name|GCONF_VALUE_INVALID
case|:
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Invalid
argument_list|)
return|;
case|case
name|GCONF_VALUE_BOOL
case|:
return|return
name|QVariant
argument_list|(
operator|(
name|bool
operator|)
name|gconf_value_get_bool
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
case|case
name|GCONF_VALUE_INT
case|:
return|return
name|QVariant
argument_list|(
name|gconf_value_get_int
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
case|case
name|GCONF_VALUE_FLOAT
case|:
return|return
name|QVariant
argument_list|(
name|gconf_value_get_float
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
case|case
name|GCONF_VALUE_STRING
case|:
return|return
name|QVariant
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|gconf_value_get_string
argument_list|(
name|src
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|GCONF_VALUE_LIST
case|:
switch|switch
condition|(
name|gconf_value_get_list_type
argument_list|(
name|src
argument_list|)
condition|)
block|{
case|case
name|GCONF_VALUE_STRING
case|:
block|{
name|QStringList
name|result
decl_stmt|;
for|for
control|(
name|GSList
modifier|*
name|elts
init|=
name|gconf_value_get_list
argument_list|(
name|src
argument_list|)
init|;
name|elts
condition|;
name|elts
operator|=
name|elts
operator|->
name|next
control|)
name|result
operator|.
name|append
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|gconf_value_get_string
argument_list|(
operator|(
name|GConfValue
operator|*
operator|)
name|elts
operator|->
name|data
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|result
argument_list|)
return|;
block|}
default|default:
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|result
decl_stmt|;
for|for
control|(
name|GSList
modifier|*
name|elts
init|=
name|gconf_value_get_list
argument_list|(
name|src
argument_list|)
init|;
name|elts
condition|;
name|elts
operator|=
name|elts
operator|->
name|next
control|)
name|result
operator|.
name|append
argument_list|(
name|convertValue
argument_list|(
operator|(
name|GConfValue
operator|*
operator|)
name|elts
operator|->
name|data
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
case|case
name|GCONF_VALUE_SCHEMA
case|:
default|default:
return|return
name|QVariant
argument_list|()
return|;
block|}
block|}
block|}
comment|/* Fast version of GConfItem, allows reading subtree at a time */
DECL|class|GConfItemFast
class|class
name|GConfItemFast
block|{
public|public:
DECL|function|GConfItemFast
name|GConfItemFast
parameter_list|(
specifier|const
name|QString
modifier|&
name|k
parameter_list|)
member_init_list|:
name|key
argument_list|(
name|k
argument_list|)
block|{}
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|getEntries
parameter_list|()
specifier|const
function_decl|;
private|private:
DECL|member|key
name|QString
name|key
decl_stmt|;
block|}
class|;
DECL|macro|withClient
define|#
directive|define
name|withClient
parameter_list|(
name|c
parameter_list|)
value|for (GConfClient *c = gconf_client_get_default(); c; c=0)
DECL|function|getEntries
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|GConfItemFast
operator|::
name|getEntries
parameter_list|()
specifier|const
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|children
decl_stmt|;
name|withClient
argument_list|(
argument|client
argument_list|)
block|{
name|QByteArray
name|k
init|=
name|key
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|GSList
modifier|*
name|entries
init|=
name|gconf_client_all_entries
argument_list|(
name|client
argument_list|,
name|k
operator|.
name|data
argument_list|()
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
for|for
control|(
name|GSList
modifier|*
name|e
init|=
name|entries
init|;
name|e
condition|;
name|e
operator|=
name|e
operator|->
name|next
control|)
block|{
name|char
modifier|*
name|key_name
init|=
name|strrchr
argument_list|(
operator|(
operator|(
name|GConfEntry
operator|*
operator|)
name|e
operator|->
name|data
operator|)
operator|->
name|key
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key_name
condition|)
name|key_name
operator|=
operator|(
operator|(
name|GConfEntry
operator|*
operator|)
name|e
operator|->
name|data
operator|)
operator|->
name|key
expr_stmt|;
else|else
name|key_name
operator|++
expr_stmt|;
name|QString
name|key
argument_list|(
name|convertKey
argument_list|(
name|key_name
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|value
init|=
name|convertValue
argument_list|(
operator|(
operator|(
name|GConfEntry
operator|*
operator|)
name|e
operator|->
name|data
operator|)
operator|->
name|value
argument_list|)
decl_stmt|;
name|gconf_entry_unref
argument_list|(
operator|(
name|GConfEntry
operator|*
operator|)
name|e
operator|->
name|data
argument_list|)
expr_stmt|;
comment|//qDebug()<<"key="<<key<<"value="<<value;
name|children
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|g_slist_free
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
DECL|class|NetworkProxyFactory
class|class
name|NetworkProxyFactory
super|:
name|QNetworkProxyFactory
block|{
DECL|member|proxy_conf
name|ProxyConf
name|proxy_conf
decl_stmt|;
DECL|member|proxy_data_read
name|bool
name|proxy_data_read
decl_stmt|;
public|public:
DECL|function|NetworkProxyFactory
name|NetworkProxyFactory
parameter_list|()
member_init_list|:
name|proxy_data_read
argument_list|(
literal|false
argument_list|)
block|{  }
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|queryProxy
parameter_list|(
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
init|=
name|QNetworkProxyQuery
argument_list|()
parameter_list|)
function_decl|;
block|}
class|;
DECL|function|queryProxy
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|NetworkProxyFactory
operator|::
name|queryProxy
parameter_list|(
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
block|{
if|if
condition|(
name|proxy_data_read
operator|==
literal|false
condition|)
block|{
name|proxy_data_read
operator|=
literal|true
expr_stmt|;
name|proxy_conf
operator|.
name|readProxyData
argument_list|()
expr_stmt|;
block|}
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|result
init|=
name|proxy_conf
operator|.
name|flush
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|<<
name|QNetworkProxy
operator|::
name|NoProxy
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|class|ProxyConfPrivate
class|class
name|ProxyConfPrivate
block|{
private|private:
comment|// proxy values from gconf
DECL|member|mode
name|QString
name|mode
decl_stmt|;
DECL|member|use_http_host
name|bool
name|use_http_host
decl_stmt|;
DECL|member|autoconfig_url
name|QString
name|autoconfig_url
decl_stmt|;
DECL|member|http_proxy
name|QString
name|http_proxy
decl_stmt|;
DECL|member|http_port
name|quint16
name|http_port
decl_stmt|;
DECL|member|ignore_hosts
name|QList
argument_list|<
name|QVariant
argument_list|>
name|ignore_hosts
decl_stmt|;
DECL|member|secure_host
name|QString
name|secure_host
decl_stmt|;
DECL|member|secure_port
name|quint16
name|secure_port
decl_stmt|;
DECL|member|ftp_host
name|QString
name|ftp_host
decl_stmt|;
DECL|member|ftp_port
name|quint16
name|ftp_port
decl_stmt|;
DECL|member|socks_host
name|QString
name|socks_host
decl_stmt|;
DECL|member|socks_port
name|quint16
name|socks_port
decl_stmt|;
DECL|member|rtsp_host
name|QString
name|rtsp_host
decl_stmt|;
DECL|member|rtsp_port
name|quint16
name|rtsp_port
decl_stmt|;
name|bool
name|isHostExcluded
parameter_list|(
specifier|const
name|QString
modifier|&
name|host
parameter_list|)
function_decl|;
public|public:
DECL|member|prefix
name|QString
name|prefix
decl_stmt|;
DECL|member|http_prefix
name|QString
name|http_prefix
decl_stmt|;
name|void
name|readProxyData
parameter_list|()
function_decl|;
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|flush
parameter_list|(
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
function_decl|;
block|}
class|;
DECL|function|getValues
specifier|static
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|getValues
parameter_list|(
specifier|const
name|QString
modifier|&
name|prefix
parameter_list|)
block|{
name|GConfItemFast
name|item
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
return|return
name|item
operator|.
name|getEntries
argument_list|()
return|;
block|}
DECL|function|getHttpValues
specifier|static
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|getHttpValues
parameter_list|(
specifier|const
name|QString
modifier|&
name|prefix
parameter_list|)
block|{
name|GConfItemFast
name|item
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
return|return
name|item
operator|.
name|getEntries
argument_list|()
return|;
block|}
DECL|macro|GET
define|#
directive|define
name|GET
parameter_list|(
name|var
parameter_list|,
name|type
parameter_list|)
define|\
value|do {						\     QVariant v = values.value(#var);		\     if (v.isValid())				\       var = v.to##type ();			\   } while(0)
DECL|macro|GET_HTTP
define|#
directive|define
name|GET_HTTP
parameter_list|(
name|var
parameter_list|,
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|do {						\     QVariant v = httpValues.value(#name);	\     if (v.isValid())				\       var = v.to##type ();			\   } while(0)
DECL|function|readProxyData
name|void
name|ProxyConfPrivate
operator|::
name|readProxyData
parameter_list|()
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|values
init|=
name|getValues
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|httpValues
init|=
name|getHttpValues
argument_list|(
name|http_prefix
argument_list|)
decl_stmt|;
comment|//qDebug()<<"values="<<values;
comment|/* Read the proxy settings from /system/proxy* */
name|GET_HTTP
argument_list|(
name|http_proxy
argument_list|,
name|host
argument_list|,
name|String
argument_list|)
expr_stmt|;
name|GET_HTTP
argument_list|(
name|http_port
argument_list|,
name|port
argument_list|,
name|Int
argument_list|)
expr_stmt|;
name|GET_HTTP
argument_list|(
name|ignore_hosts
argument_list|,
name|ignore_hosts
argument_list|,
name|List
argument_list|)
expr_stmt|;
name|GET
argument_list|(
name|mode
argument_list|,
name|String
argument_list|)
expr_stmt|;
name|GET
argument_list|(
name|autoconfig_url
argument_list|,
name|String
argument_list|)
expr_stmt|;
name|GET
argument_list|(
name|secure_host
argument_list|,
name|String
argument_list|)
expr_stmt|;
name|GET
argument_list|(
name|secure_port
argument_list|,
name|Int
argument_list|)
expr_stmt|;
name|GET
argument_list|(
name|ftp_host
argument_list|,
name|String
argument_list|)
expr_stmt|;
name|GET
argument_list|(
name|ftp_port
argument_list|,
name|Int
argument_list|)
expr_stmt|;
name|GET
argument_list|(
name|socks_host
argument_list|,
name|String
argument_list|)
expr_stmt|;
name|GET
argument_list|(
name|socks_port
argument_list|,
name|Int
argument_list|)
expr_stmt|;
name|GET
argument_list|(
name|rtsp_host
argument_list|,
name|String
argument_list|)
expr_stmt|;
name|GET
argument_list|(
name|rtsp_port
argument_list|,
name|Int
argument_list|)
expr_stmt|;
if|if
condition|(
name|http_proxy
operator|.
name|isEmpty
argument_list|()
condition|)
name|use_http_host
operator|=
literal|false
expr_stmt|;
else|else
name|use_http_host
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|isHostExcluded
name|bool
name|ProxyConfPrivate
operator|::
name|isHostExcluded
parameter_list|(
specifier|const
name|QString
modifier|&
name|host
parameter_list|)
block|{
if|if
condition|(
name|host
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|ignore_hosts
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|QHostAddress
name|ipAddress
decl_stmt|;
name|bool
name|isIpAddress
init|=
name|ipAddress
operator|.
name|setAddress
argument_list|(
name|host
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QVariant
name|h
decl|,
name|ignore_hosts
control|)
block|{
name|QString
name|entry
init|=
name|h
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|isIpAddress
operator|&&
name|ipAddress
operator|.
name|isInSubnet
argument_list|(
name|QHostAddress
operator|::
name|parseSubnet
argument_list|(
name|entry
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// excluded
block|}
else|else
block|{
comment|// do wildcard matching
name|QRegExp
name|rx
argument_list|(
name|entry
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|Wildcard
argument_list|)
decl_stmt|;
if|if
condition|(
name|rx
operator|.
name|exactMatch
argument_list|(
name|host
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
comment|// host was not excluded
return|return
literal|false
return|;
block|}
DECL|function|flush
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|ProxyConfPrivate
operator|::
name|flush
parameter_list|(
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
block|{
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|result
decl_stmt|;
if|#
directive|if
literal|0
block|qDebug()<<"http_proxy"<< http_proxy;     qDebug()<<"http_port"<< http_port;     qDebug()<<"ignore_hosts"<< ignore_hosts;     qDebug()<<"use_http_host"<< use_http_host;     qDebug()<<"mode"<< mode;     qDebug()<<"autoconfig_url"<< autoconfig_url;     qDebug()<<"secure_host"<< secure_host;     qDebug()<<"secure_port"<< secure_port;     qDebug()<<"ftp_host"<< ftp_host;     qDebug()<<"ftp_port"<< ftp_port;     qDebug()<<"socks_host"<< socks_host;     qDebug()<<"socks_port"<< socks_port;     qDebug()<<"rtsp_host"<< rtsp_host;     qDebug()<<"rtsp_port"<< rtsp_port;
endif|#
directive|endif
if|if
condition|(
name|isHostExcluded
argument_list|(
name|query
operator|.
name|peerHostName
argument_list|()
argument_list|)
condition|)
return|return
name|result
return|;
comment|// no proxy for this host
if|if
condition|(
name|mode
operator|==
name|QLatin1String
argument_list|(
literal|"AUTO"
argument_list|)
condition|)
block|{
comment|// TODO: pac currently not supported, fix me
return|return
name|result
return|;
block|}
if|if
condition|(
name|mode
operator|==
name|QLatin1String
argument_list|(
literal|"MANUAL"
argument_list|)
condition|)
block|{
name|bool
name|isHttps
init|=
literal|false
decl_stmt|;
name|QString
name|protocol
init|=
name|query
operator|.
name|protocolTag
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
comment|// try the protocol-specific proxy
name|QNetworkProxy
name|protocolSpecificProxy
decl_stmt|;
if|if
condition|(
name|protocol
operator|==
name|QLatin1String
argument_list|(
literal|"ftp"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|ftp_host
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|protocolSpecificProxy
operator|.
name|setType
argument_list|(
name|QNetworkProxy
operator|::
name|FtpCachingProxy
argument_list|)
expr_stmt|;
name|protocolSpecificProxy
operator|.
name|setHostName
argument_list|(
name|ftp_host
argument_list|)
expr_stmt|;
name|protocolSpecificProxy
operator|.
name|setPort
argument_list|(
name|ftp_port
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|protocol
operator|==
name|QLatin1String
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|http_proxy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|protocolSpecificProxy
operator|.
name|setType
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|)
expr_stmt|;
name|protocolSpecificProxy
operator|.
name|setHostName
argument_list|(
name|http_proxy
argument_list|)
expr_stmt|;
name|protocolSpecificProxy
operator|.
name|setPort
argument_list|(
name|http_port
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|protocol
operator|==
name|QLatin1String
argument_list|(
literal|"https"
argument_list|)
condition|)
block|{
name|isHttps
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|secure_host
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|protocolSpecificProxy
operator|.
name|setType
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|)
expr_stmt|;
name|protocolSpecificProxy
operator|.
name|setHostName
argument_list|(
name|secure_host
argument_list|)
expr_stmt|;
name|protocolSpecificProxy
operator|.
name|setPort
argument_list|(
name|secure_port
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|protocolSpecificProxy
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkProxy
operator|::
name|DefaultProxy
condition|)
name|result
operator|<<
name|protocolSpecificProxy
expr_stmt|;
if|if
condition|(
operator|!
name|socks_host
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QNetworkProxy
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setType
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setHostName
argument_list|(
name|socks_host
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setPort
argument_list|(
name|socks_port
argument_list|)
expr_stmt|;
name|result
operator|<<
name|proxy
expr_stmt|;
block|}
comment|// Add the HTTPS proxy if present (and if we haven't added yet)
if|if
condition|(
operator|!
name|isHttps
condition|)
block|{
name|QNetworkProxy
name|https
decl_stmt|;
if|if
condition|(
operator|!
name|secure_host
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|https
operator|.
name|setType
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|)
expr_stmt|;
name|https
operator|.
name|setHostName
argument_list|(
name|secure_host
argument_list|)
expr_stmt|;
name|https
operator|.
name|setPort
argument_list|(
name|secure_port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|https
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkProxy
operator|::
name|DefaultProxy
operator|&&
name|https
operator|!=
name|protocolSpecificProxy
condition|)
name|result
operator|<<
name|https
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|function|ProxyConf
name|ProxyConf
operator|::
name|ProxyConf
parameter_list|()
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|ProxyConfPrivate
argument_list|)
block|{
name|g_type_init
argument_list|()
expr_stmt|;
name|d_ptr
operator|->
name|prefix
operator|=
name|CONF_PROXY
expr_stmt|;
name|d_ptr
operator|->
name|http_prefix
operator|=
name|HTTP_PROXY
expr_stmt|;
block|}
DECL|function|~ProxyConf
name|ProxyConf
operator|::
name|~
name|ProxyConf
parameter_list|()
block|{
operator|delete
name|d_ptr
expr_stmt|;
block|}
DECL|function|readProxyData
name|void
name|ProxyConf
operator|::
name|readProxyData
parameter_list|()
block|{
name|d_ptr
operator|->
name|readProxyData
argument_list|()
expr_stmt|;
block|}
DECL|function|flush
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|ProxyConf
operator|::
name|flush
parameter_list|(
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
block|{
return|return
name|d_ptr
operator|->
name|flush
argument_list|(
name|query
argument_list|)
return|;
block|}
DECL|member|refcount
specifier|static
name|int
name|refcount
init|=
literal|0
decl_stmt|;
DECL|member|lock
specifier|static
name|QReadWriteLock
name|lock
decl_stmt|;
DECL|function|update
name|void
name|ProxyConf
operator|::
name|update
parameter_list|()
block|{
name|QWriteLocker
name|locker
argument_list|(
operator|&
name|lock
argument_list|)
decl_stmt|;
name|NetworkProxyFactory
modifier|*
name|factory
init|=
operator|new
name|NetworkProxyFactory
argument_list|()
decl_stmt|;
name|QNetworkProxyFactory
operator|::
name|setApplicationProxyFactory
argument_list|(
operator|(
name|QNetworkProxyFactory
operator|*
operator|)
name|factory
argument_list|)
expr_stmt|;
name|refcount
operator|++
expr_stmt|;
block|}
DECL|function|clear
name|void
name|ProxyConf
operator|::
name|clear
parameter_list|(
name|void
parameter_list|)
block|{
name|QWriteLocker
name|locker
argument_list|(
operator|&
name|lock
argument_list|)
decl_stmt|;
name|refcount
operator|--
expr_stmt|;
if|if
condition|(
name|refcount
operator|==
literal|0
condition|)
name|QNetworkProxyFactory
operator|::
name|setApplicationProxyFactory
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|refcount
operator|<
literal|0
condition|)
name|refcount
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace Maemo
end_comment
end_unit
