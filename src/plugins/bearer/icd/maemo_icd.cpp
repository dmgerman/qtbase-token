begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"maemo_icd.h"
end_include
begin_include
include|#
directive|include
file|"dbusdispatcher.h"
end_include
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QEventLoop>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<dbus/dbus.h>
end_include
begin_include
include|#
directive|include
file|<dbus/dbus-glib-lowlevel.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<sys/time.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_namespace
DECL|namespace|Maemo
namespace|namespace
name|Maemo
block|{
DECL|macro|PRINT_DEBUGINFO
undef|#
directive|undef
name|PRINT_DEBUGINFO
ifdef|#
directive|ifdef
name|PRINT_DEBUGINFO
DECL|member|fdebug
specifier|static
name|FILE
modifier|*
name|fdebug
init|=
name|NULL
decl_stmt|;
DECL|macro|PDEBUG
define|#
directive|define
name|PDEBUG
parameter_list|(
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
define|\
value|do {									\     struct timeval tv;							\     gettimeofday(&tv, 0);						\     fprintf(fdebug, "DEBUG[%d]:%ld.%ld:%s:%s():%d: " fmt,		\ 	    getpid(),							\ 	    tv.tv_sec, tv.tv_usec,					\ 	    __FILE__, __FUNCTION__, __LINE__, args);			\     fflush(fdebug);							\   } while(0)
else|#
directive|else
define|#
directive|define
name|PDEBUG
parameter_list|(
name|fmt
modifier|...
parameter_list|)
endif|#
directive|endif
DECL|class|IcdPrivate
class|class
name|IcdPrivate
block|{
public|public:
DECL|function|IcdPrivate
name|IcdPrivate
parameter_list|(
name|Icd
modifier|*
name|myfriend
parameter_list|)
block|{
name|init
argument_list|(
literal|10000
argument_list|,
name|IcdNewDbusInterface
argument_list|,
name|myfriend
argument_list|)
expr_stmt|;
block|}
DECL|function|IcdPrivate
name|IcdPrivate
parameter_list|(
name|unsigned
name|int
name|timeout
parameter_list|,
name|Icd
modifier|*
name|myfriend
parameter_list|)
block|{
name|init
argument_list|(
name|timeout
argument_list|,
name|IcdNewDbusInterface
argument_list|,
name|myfriend
argument_list|)
expr_stmt|;
block|}
DECL|function|IcdPrivate
name|IcdPrivate
parameter_list|(
name|unsigned
name|int
name|timeout
parameter_list|,
name|IcdDbusInterfaceVer
name|ver
parameter_list|,
name|Icd
modifier|*
name|myfriend
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ver
argument_list|)
expr_stmt|;
comment|/* Note that the old Icd interface is currently disabled and 	 * the new one is always used. 	 */
name|init
argument_list|(
name|timeout
argument_list|,
name|IcdNewDbusInterface
argument_list|,
name|myfriend
argument_list|)
expr_stmt|;
block|}
DECL|function|~IcdPrivate
name|~
name|IcdPrivate
parameter_list|()
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|mDBus
argument_list|,
name|SIGNAL
argument_list|(
name|signalReceived
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|icd
argument_list|,
name|SLOT
argument_list|(
name|icdSignalReceived
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|mDBus
argument_list|,
name|SIGNAL
argument_list|(
name|callReply
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|,
name|icd
argument_list|,
name|SLOT
argument_list|(
name|icdCallReply
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|mDBus
expr_stmt|;
name|mDBus
operator|=
literal|0
expr_stmt|;
block|}
comment|/* Icd2 dbus API functions */
name|QStringList
name|scan
parameter_list|(
name|icd_scan_request_flags
name|flags
parameter_list|,
name|QStringList
modifier|&
name|network_types
parameter_list|,
name|QList
argument_list|<
name|IcdScanResult
argument_list|>
modifier|&
name|scan_results
parameter_list|,
name|QString
modifier|&
name|error
parameter_list|)
function_decl|;
name|uint
name|state
parameter_list|(
name|QString
modifier|&
name|service_type
parameter_list|,
name|uint
name|service_attrs
parameter_list|,
name|QString
modifier|&
name|service_id
parameter_list|,
name|QString
modifier|&
name|network_type
parameter_list|,
name|uint
name|network_attrs
parameter_list|,
name|QByteArray
modifier|&
name|network_id
parameter_list|,
name|IcdStateResult
modifier|&
name|state_result
parameter_list|)
function_decl|;
name|uint
name|addrinfo
parameter_list|(
name|QString
modifier|&
name|service_type
parameter_list|,
name|uint
name|service_attrs
parameter_list|,
name|QString
modifier|&
name|service_id
parameter_list|,
name|QString
modifier|&
name|network_type
parameter_list|,
name|uint
name|network_attrs
parameter_list|,
name|QByteArray
modifier|&
name|network_id
parameter_list|,
name|IcdAddressInfoResult
modifier|&
name|addr_result
parameter_list|)
function_decl|;
name|uint
name|state
parameter_list|(
name|QList
argument_list|<
name|IcdStateResult
argument_list|>
modifier|&
name|state_results
parameter_list|)
function_decl|;
name|uint
name|statistics
parameter_list|(
name|QList
argument_list|<
name|IcdStatisticsResult
argument_list|>
modifier|&
name|stats_results
parameter_list|)
function_decl|;
name|uint
name|addrinfo
parameter_list|(
name|QList
argument_list|<
name|IcdAddressInfoResult
argument_list|>
modifier|&
name|addr_results
parameter_list|)
function_decl|;
name|void
name|signalReceived
parameter_list|(
specifier|const
name|QString
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|signal
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|args
parameter_list|)
function_decl|;
name|void
name|callReply
parameter_list|(
specifier|const
name|QString
modifier|&
name|method
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|args
parameter_list|,
specifier|const
name|QString
modifier|&
name|error
parameter_list|)
function_decl|;
public|public:
DECL|member|mDBus
name|DBusDispatcher
modifier|*
name|mDBus
decl_stmt|;
DECL|member|mMethod
name|QString
name|mMethod
decl_stmt|;
DECL|member|mInterface
name|QString
name|mInterface
decl_stmt|;
DECL|member|mSignal
name|QString
name|mSignal
decl_stmt|;
DECL|member|mError
name|QString
name|mError
decl_stmt|;
DECL|member|mArgs
name|QList
argument_list|<
name|QVariant
argument_list|>
name|mArgs
decl_stmt|;
DECL|member|receivedSignals
name|QList
argument_list|<
name|QVariant
argument_list|>
name|receivedSignals
decl_stmt|;
DECL|member|timeout
name|unsigned
name|int
name|timeout
decl_stmt|;
DECL|member|icd_dbus_version
name|IcdDbusInterfaceVer
name|icd_dbus_version
decl_stmt|;
DECL|member|icd
name|Icd
modifier|*
name|icd
decl_stmt|;
DECL|function|init
name|void
name|init
parameter_list|(
name|unsigned
name|int
name|dbus_timeout
parameter_list|,
name|IcdDbusInterfaceVer
name|ver
parameter_list|,
name|Icd
modifier|*
name|myfriend
parameter_list|)
block|{
if|if
condition|(
name|ver
operator|==
name|IcdNewDbusInterface
condition|)
block|{
name|mDBus
operator|=
operator|new
name|DBusDispatcher
argument_list|(
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|ICD_DBUS_API_PATH
argument_list|,
name|ICD_DBUS_API_INTERFACE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mDBus
operator|=
operator|new
name|DBusDispatcher
argument_list|(
name|ICD_DBUS_SERVICE
argument_list|,
name|ICD_DBUS_PATH
argument_list|,
name|ICD_DBUS_INTERFACE
argument_list|)
expr_stmt|;
block|}
name|icd_dbus_version
operator|=
name|ver
expr_stmt|;
comment|/* This connect has a side effect as it means that only one        * Icd object can exists in one time. This should be fixed!        */
name|QObject
operator|::
name|connect
argument_list|(
name|mDBus
argument_list|,
name|SIGNAL
argument_list|(
name|signalReceived
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|myfriend
argument_list|,
name|SLOT
argument_list|(
name|icdSignalReceived
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|mDBus
argument_list|,
name|SIGNAL
argument_list|(
name|callReply
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|,
name|myfriend
argument_list|,
name|SLOT
argument_list|(
name|icdCallReply
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
operator|&
argument_list|,
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|icd
operator|=
name|myfriend
expr_stmt|;
name|timeout
operator|=
name|dbus_timeout
expr_stmt|;
ifdef|#
directive|ifdef
name|PRINT_DEBUGINFO
if|if
condition|(
operator|!
name|fdebug
condition|)
block|{
name|fdebug
operator|=
name|fopen
argument_list|(
literal|"/tmp/maemoicd.log"
argument_list|,
literal|"a+"
argument_list|)
expr_stmt|;
block|}
name|PDEBUG
argument_list|(
literal|"created %s\n"
argument_list|,
literal|"IcdPrivate"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|clearState
name|void
name|clearState
parameter_list|()
block|{
name|mMethod
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mInterface
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mSignal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mError
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mArgs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|receivedSignals
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|bool
name|doState
parameter_list|()
function_decl|;
block|}
class|;
DECL|function|signalReceived
name|void
name|IcdPrivate
operator|::
name|signalReceived
parameter_list|(
specifier|const
name|QString
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|signal
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|args
parameter_list|)
block|{
comment|// Signal handler, which simply records what has been signalled
name|mInterface
operator|=
name|interface
expr_stmt|;
name|mSignal
operator|=
name|signal
expr_stmt|;
name|mArgs
operator|=
name|args
expr_stmt|;
comment|//qDebug()<< "signal"<< signal<< "received:"<< args;
name|receivedSignals
operator|<<
name|QVariant
argument_list|(
name|interface
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|signal
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
DECL|function|callReply
name|void
name|IcdPrivate
operator|::
name|callReply
parameter_list|(
specifier|const
name|QString
modifier|&
name|method
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
comment|/*args*/
parameter_list|,
specifier|const
name|QString
modifier|&
name|error
parameter_list|)
block|{
name|mMethod
operator|=
name|method
expr_stmt|;
name|mError
operator|=
name|error
expr_stmt|;
block|}
DECL|function|get_scan_result
specifier|static
name|void
name|get_scan_result
parameter_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|args
parameter_list|,
name|IcdScanResult
modifier|&
name|ret
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ret
operator|.
name|status
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|timestamp
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|scan
operator|.
name|service_type
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|service_name
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|scan
operator|.
name|service_attrs
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|scan
operator|.
name|service_id
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|service_priority
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|scan
operator|.
name|network_type
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|network_name
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|scan
operator|.
name|network_attrs
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|scan
operator|.
name|network_id
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|ret
operator|.
name|network_priority
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|signal_strength
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|station_id
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|signal_dB
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
DECL|function|scan
name|QStringList
name|IcdPrivate
operator|::
name|scan
parameter_list|(
name|icd_scan_request_flags
name|flags
parameter_list|,
name|QStringList
modifier|&
name|network_types
parameter_list|,
name|QList
argument_list|<
name|IcdScanResult
argument_list|>
modifier|&
name|scan_results
parameter_list|,
name|QString
modifier|&
name|error
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|network_types
argument_list|)
expr_stmt|;
name|QStringList
name|scanned_types
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|QVariant
name|reply
decl_stmt|;
name|QVariantList
name|vl
decl_stmt|;
name|bool
name|last_result
init|=
literal|false
decl_stmt|;
name|IcdScanResult
name|result
decl_stmt|;
name|int
name|all_waited
decl_stmt|;
name|clearState
argument_list|()
expr_stmt|;
name|reply
operator|=
name|mDBus
operator|->
name|call
argument_list|(
name|ICD_DBUS_API_SCAN_REQ
argument_list|,
operator|(
name|uint
operator|)
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|reply
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|List
condition|)
return|return
name|scanned_types
return|;
name|vl
operator|=
name|reply
operator|.
name|toList
argument_list|()
expr_stmt|;
if|if
condition|(
name|vl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|error
operator|=
literal|"Scan did not return anything."
expr_stmt|;
return|return
name|scanned_types
return|;
block|}
name|reply
operator|=
name|vl
operator|.
name|first
argument_list|()
expr_stmt|;
name|scanned_types
operator|=
name|reply
operator|.
name|toStringList
argument_list|()
expr_stmt|;
comment|//qDebug()<< "Scanning:"<< scanned_types;
name|all_waited
operator|=
name|scanned_types
operator|.
name|size
argument_list|()
expr_stmt|;
name|timer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|scan_results
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|last_result
condition|)
block|{
while|while
condition|(
name|timer
operator|.
name|isActive
argument_list|()
operator|&&
name|mInterface
operator|.
name|isEmpty
argument_list|()
operator|&&
name|mError
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|timer
operator|.
name|isActive
argument_list|()
condition|)
block|{
comment|//qDebug()<< "Timeout happened";
break|break;
block|}
if|if
condition|(
name|mSignal
operator|!=
name|ICD_DBUS_API_SCAN_SIG
condition|)
block|{
comment|//qDebug()<< "Received"<< mSignal<< "while waiting"<< ICD_DBUS_API_SCAN_SIG<< ", ignoring";
name|mInterface
operator|.
name|clear
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|mError
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|msgInterface
init|=
name|receivedSignals
operator|.
name|takeFirst
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QString
name|msgSignal
init|=
name|receivedSignals
operator|.
name|takeFirst
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|msgArgs
init|=
name|receivedSignals
operator|.
name|takeFirst
argument_list|()
operator|.
name|toList
argument_list|()
decl_stmt|;
comment|//qDebug()<< "Signal"<< msgSignal<< "received.";
comment|//qDebug()<< "Params:"<< msgArgs;
while|while
condition|(
operator|!
name|msgSignal
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|get_scan_result
argument_list|(
name|msgArgs
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|qDebug()<< "Received: "<< 		    "status ="<< result.status<< 		    ", timestamp ="<< result.timestamp<< 		    ", service_type ="<< result.scan.service_type<< 		    ", service_name ="<< result.service_name<< 		    ", service_attrs ="<< result.scan.service_attrs<< 		    ", service_id ="<< result.scan.service_id<< 		    ", service_priority ="<< result.service_priority<< 		    ", network_type ="<< result.scan.network_type<< 		    ", network_name ="<< result.network_name<< 		    ", network_attrs ="<< result.scan.network_attrs<< 		    ", network_id ="<< "-"<< 		    ", network_priority ="<< result.network_priority<< 		    ", signal_strength ="<< result.signal_strength<< 		    ", station_id ="<< result.station_id<< 		    ", signal_dB ="<< result.signal_dB;
endif|#
directive|endif
if|if
condition|(
name|result
operator|.
name|status
operator|==
name|ICD_SCAN_COMPLETE
condition|)
block|{
comment|//qDebug()<< "waited ="<< all_waited;
if|if
condition|(
operator|--
name|all_waited
operator|==
literal|0
condition|)
block|{
name|last_result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
else|else
name|scan_results
operator|<<
name|result
expr_stmt|;
if|if
condition|(
name|receivedSignals
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|msgInterface
operator|=
name|receivedSignals
operator|.
name|takeFirst
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|msgSignal
operator|=
name|receivedSignals
operator|.
name|takeFirst
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|msgArgs
operator|=
name|receivedSignals
operator|.
name|takeFirst
argument_list|()
operator|.
name|toList
argument_list|()
expr_stmt|;
block|}
name|mInterface
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Error while scanning:"
operator|<<
name|mError
expr_stmt|;
break|break;
block|}
block|}
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|error
operator|=
name|mError
expr_stmt|;
return|return
name|scanned_types
return|;
block|}
DECL|function|get_state_all_result
specifier|static
name|void
name|get_state_all_result
parameter_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|args
parameter_list|,
name|IcdStateResult
modifier|&
name|ret
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|ret
operator|.
name|params
operator|.
name|service_type
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|service_attrs
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|service_id
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_type
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_attrs
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_id
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|ret
operator|.
name|error
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|state
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
DECL|function|get_state_all_result2
specifier|static
name|void
name|get_state_all_result2
parameter_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|args
parameter_list|,
name|IcdStateResult
modifier|&
name|ret
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_type
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|state
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toInt
argument_list|()
expr_stmt|;
comment|// Initialize the other values so that the caller can
comment|// notice we only returned partial status
name|ret
operator|.
name|params
operator|.
name|service_type
operator|=
name|QString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|service_attrs
operator|=
literal|0
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|service_id
operator|=
name|QString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_attrs
operator|=
literal|0
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_id
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
name|ret
operator|.
name|error
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
DECL|function|state
name|uint
name|IcdPrivate
operator|::
name|state
parameter_list|(
name|QString
modifier|&
name|service_type
parameter_list|,
name|uint
name|service_attrs
parameter_list|,
name|QString
modifier|&
name|service_id
parameter_list|,
name|QString
modifier|&
name|network_type
parameter_list|,
name|uint
name|network_attrs
parameter_list|,
name|QByteArray
modifier|&
name|network_id
parameter_list|,
name|IcdStateResult
modifier|&
name|state_result
parameter_list|)
block|{
name|QTimer
name|timer
decl_stmt|;
name|QVariant
name|reply
decl_stmt|;
name|uint
name|total_signals
decl_stmt|;
name|QVariantList
name|vl
decl_stmt|;
name|clearState
argument_list|()
expr_stmt|;
name|reply
operator|=
name|mDBus
operator|->
name|call
argument_list|(
name|ICD_DBUS_API_STATE_REQ
argument_list|,
name|service_type
argument_list|,
name|service_attrs
argument_list|,
name|service_id
argument_list|,
name|network_type
argument_list|,
name|network_attrs
argument_list|,
name|network_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|reply
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|List
condition|)
return|return
literal|0
return|;
name|vl
operator|=
name|reply
operator|.
name|toList
argument_list|()
expr_stmt|;
if|if
condition|(
name|vl
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|reply
operator|=
name|vl
operator|.
name|first
argument_list|()
expr_stmt|;
name|total_signals
operator|=
name|reply
operator|.
name|toUInt
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|total_signals
condition|)
return|return
literal|0
return|;
name|timer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|mInterface
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|timer
operator|.
name|isActive
argument_list|()
operator|&&
name|mInterface
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSignal
operator|!=
name|ICD_DBUS_API_STATE_SIG
condition|)
block|{
name|mInterface
operator|.
name|clear
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|mError
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|mArgs
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
name|get_state_all_result
argument_list|(
name|mArgs
argument_list|,
name|state_result
argument_list|)
expr_stmt|;
else|else
block|{
comment|// We are not connected as we did not get the status we asked
return|return
literal|0
return|;
block|}
block|}
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Error:"
operator|<<
name|mError
expr_stmt|;
block|}
comment|// The returned value should be one because we asked for one state
return|return
name|total_signals
return|;
block|}
comment|/* Special version of the state() call which does not call event loop.  * Needed in order to fix NB#175098 where Qt4.7 webkit crashes because event  * loop is run when webkit does not expect it. This function is called from  * bearer management API syncStateWithInterface() in QNetworkSession  * constructor.  */
DECL|function|state
name|uint
name|IcdPrivate
operator|::
name|state
parameter_list|(
name|QList
argument_list|<
name|IcdStateResult
argument_list|>
modifier|&
name|state_results
parameter_list|)
block|{
name|QVariant
name|reply
decl_stmt|;
name|QVariantList
name|vl
decl_stmt|;
name|uint
name|signals_left
decl_stmt|,
name|total_signals
decl_stmt|;
name|IcdStateResult
name|result
decl_stmt|;
name|time_t
name|started
decl_stmt|;
name|int
name|timeout_secs
init|=
name|timeout
operator|/
literal|1000
decl_stmt|;
name|PDEBUG
argument_list|(
literal|"%s\n"
argument_list|,
literal|"state_results"
argument_list|)
expr_stmt|;
name|clearState
argument_list|()
expr_stmt|;
name|reply
operator|=
name|mDBus
operator|->
name|call
argument_list|(
name|ICD_DBUS_API_STATE_REQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|reply
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|List
condition|)
return|return
literal|0
return|;
name|vl
operator|=
name|reply
operator|.
name|toList
argument_list|()
expr_stmt|;
if|if
condition|(
name|vl
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|reply
operator|=
name|vl
operator|.
name|first
argument_list|()
expr_stmt|;
name|signals_left
operator|=
name|total_signals
operator|=
name|reply
operator|.
name|toUInt
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|signals_left
condition|)
return|return
literal|0
return|;
name|started
operator|=
name|time
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|state_results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mError
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|signals_left
condition|)
block|{
name|mInterface
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|time
argument_list|(
literal|0
argument_list|)
operator|<=
operator|(
name|started
operator|+
name|timeout_secs
operator|)
operator|)
operator|&&
name|mInterface
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mDBus
operator|->
name|synchronousDispatch
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|(
name|icd
argument_list|,
name|QEvent
operator|::
name|MetaCall
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|time
argument_list|(
literal|0
argument_list|)
operator|>
operator|(
name|started
operator|+
name|timeout_secs
operator|)
condition|)
block|{
name|total_signals
operator|=
literal|0
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|mSignal
operator|!=
name|ICD_DBUS_API_STATE_SIG
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|mError
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|mArgs
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
name|get_state_all_result2
argument_list|(
name|mArgs
argument_list|,
name|result
argument_list|)
expr_stmt|;
else|else
name|get_state_all_result
argument_list|(
name|mArgs
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|state_results
operator|<<
name|result
expr_stmt|;
block|}
name|signals_left
operator|--
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Error:"
operator|<<
name|mError
expr_stmt|;
break|break;
block|}
block|}
name|PDEBUG
argument_list|(
literal|"total_signals=%d\n"
argument_list|,
name|total_signals
argument_list|)
expr_stmt|;
return|return
name|total_signals
return|;
block|}
DECL|function|get_statistics_all_result
specifier|static
name|void
name|get_statistics_all_result
parameter_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|args
parameter_list|,
name|IcdStatisticsResult
modifier|&
name|ret
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ret
operator|.
name|params
operator|.
name|service_type
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|service_attrs
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|service_id
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_type
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_attrs
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_id
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|ret
operator|.
name|time_active
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|signal_strength
operator|=
operator|(
expr|enum
name|icd_nw_levels
operator|)
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|bytes_sent
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|bytes_received
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
block|}
DECL|function|statistics
name|uint
name|IcdPrivate
operator|::
name|statistics
parameter_list|(
name|QList
argument_list|<
name|IcdStatisticsResult
argument_list|>
modifier|&
name|stats_results
parameter_list|)
block|{
name|QTimer
name|timer
decl_stmt|;
name|QVariant
name|reply
decl_stmt|;
name|QVariantList
name|vl
decl_stmt|;
name|uint
name|signals_left
decl_stmt|,
name|total_signals
decl_stmt|;
name|IcdStatisticsResult
name|result
decl_stmt|;
name|clearState
argument_list|()
expr_stmt|;
name|reply
operator|=
name|mDBus
operator|->
name|call
argument_list|(
name|ICD_DBUS_API_STATISTICS_REQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|reply
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|List
condition|)
return|return
literal|0
return|;
name|vl
operator|=
name|reply
operator|.
name|toList
argument_list|()
expr_stmt|;
if|if
condition|(
name|vl
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|reply
operator|=
name|vl
operator|.
name|first
argument_list|()
expr_stmt|;
if|if
condition|(
name|reply
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|UInt
condition|)
return|return
literal|0
return|;
name|signals_left
operator|=
name|total_signals
operator|=
name|reply
operator|.
name|toUInt
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|signals_left
condition|)
return|return
literal|0
return|;
name|timer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|stats_results
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|signals_left
condition|)
block|{
name|mInterface
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|timer
operator|.
name|isActive
argument_list|()
operator|&&
name|mInterface
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|timer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|total_signals
operator|=
literal|0
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|mSignal
operator|!=
name|ICD_DBUS_API_STATISTICS_SIG
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|mError
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|get_statistics_all_result
argument_list|(
name|mArgs
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|stats_results
operator|<<
name|result
expr_stmt|;
name|signals_left
operator|--
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Error:"
operator|<<
name|mError
expr_stmt|;
break|break;
block|}
block|}
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|total_signals
return|;
block|}
DECL|function|get_addrinfo_all_result
specifier|static
name|void
name|get_addrinfo_all_result
parameter_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|args
parameter_list|,
name|IcdAddressInfoResult
modifier|&
name|ret
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ret
operator|.
name|params
operator|.
name|service_type
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|service_attrs
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|service_id
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_type
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_attrs
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|ret
operator|.
name|params
operator|.
name|network_id
operator|=
name|args
index|[
name|i
operator|++
index|]
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|QVariantList
name|vl
init|=
name|args
index|[
name|i
index|]
operator|.
name|toList
argument_list|()
decl_stmt|;
name|QVariant
name|reply
init|=
name|vl
operator|.
name|first
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|lst
init|=
name|reply
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|lst
operator|.
name|size
argument_list|()
operator|/
literal|6
condition|;
name|k
operator|=
name|k
operator|+
literal|6
control|)
block|{
name|IcdIPInformation
name|ip_info
decl_stmt|;
name|ip_info
operator|.
name|address
operator|=
name|lst
index|[
name|k
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ip_info
operator|.
name|netmask
operator|=
name|lst
index|[
name|k
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ip_info
operator|.
name|default_gateway
operator|=
name|lst
index|[
name|k
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ip_info
operator|.
name|dns1
operator|=
name|lst
index|[
name|k
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ip_info
operator|.
name|dns2
operator|=
name|lst
index|[
name|k
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ip_info
operator|.
name|dns3
operator|=
name|lst
index|[
name|k
operator|++
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
name|ret
operator|.
name|ip_info
operator|<<
name|ip_info
expr_stmt|;
block|}
block|}
comment|/* Special version of the addrinfo() call which does not call event loop.  * Needed in order to fix NB#175098 where Qt4.7 webkit crashes because event  * loop is run when webkit does not expect it. This function is called from  * bearer management API syncStateWithInterface() in QNetworkSession  * constructor.  */
DECL|function|addrinfo
name|uint
name|IcdPrivate
operator|::
name|addrinfo
parameter_list|(
name|QList
argument_list|<
name|IcdAddressInfoResult
argument_list|>
modifier|&
name|addr_results
parameter_list|)
block|{
name|QVariant
name|reply
decl_stmt|;
name|QVariantList
name|vl
decl_stmt|;
name|uint
name|signals_left
decl_stmt|,
name|total_signals
decl_stmt|;
name|IcdAddressInfoResult
name|result
decl_stmt|;
name|time_t
name|started
decl_stmt|;
name|int
name|timeout_secs
init|=
name|timeout
operator|/
literal|1000
decl_stmt|;
name|PDEBUG
argument_list|(
literal|"%s\n"
argument_list|,
literal|"addr_results"
argument_list|)
expr_stmt|;
name|clearState
argument_list|()
expr_stmt|;
name|reply
operator|=
name|mDBus
operator|->
name|call
argument_list|(
name|ICD_DBUS_API_ADDRINFO_REQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|reply
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|List
condition|)
return|return
literal|0
return|;
name|vl
operator|=
name|reply
operator|.
name|toList
argument_list|()
expr_stmt|;
if|if
condition|(
name|vl
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|reply
operator|=
name|vl
operator|.
name|first
argument_list|()
expr_stmt|;
if|if
condition|(
name|reply
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|UInt
condition|)
return|return
literal|0
return|;
name|signals_left
operator|=
name|total_signals
operator|=
name|reply
operator|.
name|toUInt
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|signals_left
condition|)
return|return
literal|0
return|;
name|started
operator|=
name|time
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addr_results
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|signals_left
condition|)
block|{
name|mInterface
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|time
argument_list|(
literal|0
argument_list|)
operator|<=
operator|(
name|started
operator|+
name|timeout_secs
operator|)
operator|)
operator|&&
name|mInterface
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mDBus
operator|->
name|synchronousDispatch
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|(
name|icd
argument_list|,
name|QEvent
operator|::
name|MetaCall
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|time
argument_list|(
literal|0
argument_list|)
operator|>
operator|(
name|started
operator|+
name|timeout_secs
operator|)
condition|)
block|{
name|total_signals
operator|=
literal|0
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|mSignal
operator|!=
name|ICD_DBUS_API_ADDRINFO_SIG
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|mError
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|get_addrinfo_all_result
argument_list|(
name|mArgs
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|addr_results
operator|<<
name|result
expr_stmt|;
name|signals_left
operator|--
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Error:"
operator|<<
name|mError
expr_stmt|;
break|break;
block|}
block|}
name|PDEBUG
argument_list|(
literal|"total_signals=%d\n"
argument_list|,
name|total_signals
argument_list|)
expr_stmt|;
return|return
name|total_signals
return|;
block|}
DECL|function|addrinfo
name|uint
name|IcdPrivate
operator|::
name|addrinfo
parameter_list|(
name|QString
modifier|&
name|service_type
parameter_list|,
name|uint
name|service_attrs
parameter_list|,
name|QString
modifier|&
name|service_id
parameter_list|,
name|QString
modifier|&
name|network_type
parameter_list|,
name|uint
name|network_attrs
parameter_list|,
name|QByteArray
modifier|&
name|network_id
parameter_list|,
name|IcdAddressInfoResult
modifier|&
name|addr_result
parameter_list|)
block|{
name|QTimer
name|timer
decl_stmt|;
name|QVariant
name|reply
decl_stmt|;
name|uint
name|total_signals
decl_stmt|;
name|QVariantList
name|vl
decl_stmt|;
name|clearState
argument_list|()
expr_stmt|;
name|reply
operator|=
name|mDBus
operator|->
name|call
argument_list|(
name|ICD_DBUS_API_ADDRINFO_REQ
argument_list|,
name|service_type
argument_list|,
name|service_attrs
argument_list|,
name|service_id
argument_list|,
name|network_type
argument_list|,
name|network_attrs
argument_list|,
name|network_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|reply
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|List
condition|)
return|return
literal|0
return|;
name|vl
operator|=
name|reply
operator|.
name|toList
argument_list|()
expr_stmt|;
if|if
condition|(
name|vl
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|reply
operator|=
name|vl
operator|.
name|first
argument_list|()
expr_stmt|;
name|total_signals
operator|=
name|reply
operator|.
name|toUInt
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|total_signals
condition|)
return|return
literal|0
return|;
name|timer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|mInterface
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|timer
operator|.
name|isActive
argument_list|()
operator|&&
name|mInterface
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSignal
operator|!=
name|ICD_DBUS_API_ADDRINFO_SIG
condition|)
block|{
name|mInterface
operator|.
name|clear
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|mError
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|get_addrinfo_all_result
argument_list|(
name|mArgs
argument_list|,
name|addr_result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Error:"
operator|<<
name|mError
expr_stmt|;
block|}
comment|// The returned value should be one because we asked for one addrinfo
return|return
name|total_signals
return|;
block|}
DECL|function|Icd
name|Icd
operator|::
name|Icd
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|IcdPrivate
argument_list|(
name|this
argument_list|)
argument_list|)
block|{ }
DECL|function|Icd
name|Icd
operator|::
name|Icd
parameter_list|(
name|unsigned
name|int
name|timeout
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|IcdPrivate
argument_list|(
name|timeout
argument_list|,
name|this
argument_list|)
argument_list|)
block|{ }
DECL|function|Icd
name|Icd
operator|::
name|Icd
parameter_list|(
name|unsigned
name|int
name|timeout
parameter_list|,
name|IcdDbusInterfaceVer
name|ver
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|IcdPrivate
argument_list|(
name|timeout
argument_list|,
name|ver
argument_list|,
name|this
argument_list|)
argument_list|)
block|{ }
DECL|function|~Icd
name|Icd
operator|::
name|~
name|Icd
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
DECL|function|scan
name|QStringList
name|Icd
operator|::
name|scan
parameter_list|(
name|icd_scan_request_flags
name|flags
parameter_list|,
name|QStringList
modifier|&
name|network_types
parameter_list|,
name|QList
argument_list|<
name|IcdScanResult
argument_list|>
modifier|&
name|scan_results
parameter_list|,
name|QString
modifier|&
name|error
parameter_list|)
block|{
return|return
name|d
operator|->
name|scan
argument_list|(
name|flags
argument_list|,
name|network_types
argument_list|,
name|scan_results
argument_list|,
name|error
argument_list|)
return|;
block|}
DECL|function|state
name|uint
name|Icd
operator|::
name|state
parameter_list|(
name|QString
modifier|&
name|service_type
parameter_list|,
name|uint
name|service_attrs
parameter_list|,
name|QString
modifier|&
name|service_id
parameter_list|,
name|QString
modifier|&
name|network_type
parameter_list|,
name|uint
name|network_attrs
parameter_list|,
name|QByteArray
modifier|&
name|network_id
parameter_list|,
name|IcdStateResult
modifier|&
name|state_result
parameter_list|)
block|{
return|return
name|d
operator|->
name|state
argument_list|(
name|service_type
argument_list|,
name|service_attrs
argument_list|,
name|service_id
argument_list|,
name|network_type
argument_list|,
name|network_attrs
argument_list|,
name|network_id
argument_list|,
name|state_result
argument_list|)
return|;
block|}
DECL|function|addrinfo
name|uint
name|Icd
operator|::
name|addrinfo
parameter_list|(
name|QString
modifier|&
name|service_type
parameter_list|,
name|uint
name|service_attrs
parameter_list|,
name|QString
modifier|&
name|service_id
parameter_list|,
name|QString
modifier|&
name|network_type
parameter_list|,
name|uint
name|network_attrs
parameter_list|,
name|QByteArray
modifier|&
name|network_id
parameter_list|,
name|IcdAddressInfoResult
modifier|&
name|addr_result
parameter_list|)
block|{
return|return
name|d
operator|->
name|addrinfo
argument_list|(
name|service_type
argument_list|,
name|service_attrs
argument_list|,
name|service_id
argument_list|,
name|network_type
argument_list|,
name|network_attrs
argument_list|,
name|network_id
argument_list|,
name|addr_result
argument_list|)
return|;
block|}
DECL|function|state
name|uint
name|Icd
operator|::
name|state
parameter_list|(
name|QList
argument_list|<
name|IcdStateResult
argument_list|>
modifier|&
name|state_results
parameter_list|)
block|{
return|return
name|d
operator|->
name|state
argument_list|(
name|state_results
argument_list|)
return|;
block|}
DECL|function|statistics
name|uint
name|Icd
operator|::
name|statistics
parameter_list|(
name|QList
argument_list|<
name|IcdStatisticsResult
argument_list|>
modifier|&
name|stats_results
parameter_list|)
block|{
return|return
name|d
operator|->
name|statistics
argument_list|(
name|stats_results
argument_list|)
return|;
block|}
DECL|function|addrinfo
name|uint
name|Icd
operator|::
name|addrinfo
parameter_list|(
name|QList
argument_list|<
name|IcdAddressInfoResult
argument_list|>
modifier|&
name|addr_results
parameter_list|)
block|{
return|return
name|d
operator|->
name|addrinfo
argument_list|(
name|addr_results
argument_list|)
return|;
block|}
DECL|function|icdSignalReceived
name|void
name|Icd
operator|::
name|icdSignalReceived
parameter_list|(
specifier|const
name|QString
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|signal
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|args
parameter_list|)
block|{
name|d
operator|->
name|signalReceived
argument_list|(
name|interface
argument_list|,
name|signal
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|function|icdCallReply
name|void
name|Icd
operator|::
name|icdCallReply
parameter_list|(
specifier|const
name|QString
modifier|&
name|method
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|args
parameter_list|,
specifier|const
name|QString
modifier|&
name|error
parameter_list|)
block|{
name|d
operator|->
name|callReply
argument_list|(
name|method
argument_list|,
name|args
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
begin_comment
comment|// Maemo namespace
end_comment
end_unit
