begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|MAEMO_ICD_H
end_ifndef
begin_define
DECL|macro|MAEMO_ICD_H
define|#
directive|define
name|MAEMO_ICD_H
end_define
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QByteArray>
end_include
begin_include
include|#
directive|include
file|<QMetaType>
end_include
begin_include
include|#
directive|include
file|<QtDBus>
end_include
begin_include
include|#
directive|include
file|<QDBusArgument>
end_include
begin_include
include|#
directive|include
file|<glib.h>
end_include
begin_include
include|#
directive|include
file|<icd/dbus_api.h>
end_include
begin_include
include|#
directive|include
file|<icd/osso-ic.h>
end_include
begin_include
include|#
directive|include
file|<icd/osso-ic-dbus.h>
end_include
begin_include
include|#
directive|include
file|<icd/network_api_defines.h>
end_include
begin_define
DECL|macro|ICD_LONG_SCAN_TIMEOUT
define|#
directive|define
name|ICD_LONG_SCAN_TIMEOUT
value|(30*1000)
end_define
begin_comment
DECL|macro|ICD_LONG_SCAN_TIMEOUT
comment|/* 30sec */
end_comment
begin_define
DECL|macro|ICD_SHORT_SCAN_TIMEOUT
define|#
directive|define
name|ICD_SHORT_SCAN_TIMEOUT
value|(10*1000)
end_define
begin_comment
DECL|macro|ICD_SHORT_SCAN_TIMEOUT
comment|/* 10sec */
end_comment
begin_define
DECL|macro|ICD_SHORT_CONNECT_TIMEOUT
define|#
directive|define
name|ICD_SHORT_CONNECT_TIMEOUT
value|(10*1000)
end_define
begin_comment
DECL|macro|ICD_SHORT_CONNECT_TIMEOUT
comment|/* 10sec */
end_comment
begin_define
DECL|macro|ICD_LONG_CONNECT_TIMEOUT
define|#
directive|define
name|ICD_LONG_CONNECT_TIMEOUT
value|(150*1000)
end_define
begin_comment
DECL|macro|ICD_LONG_CONNECT_TIMEOUT
comment|/* 2.5min */
end_comment
begin_decl_stmt
name|namespace
name|Maemo
block|{
struct|struct
name|CommonParams
block|{
name|QString
name|service_type
decl_stmt|;
name|uint
name|service_attrs
decl_stmt|;
name|QString
name|service_id
decl_stmt|;
name|QString
name|network_type
decl_stmt|;
name|uint
name|network_attrs
decl_stmt|;
name|QByteArray
name|network_id
decl_stmt|;
block|}
struct|;
struct|struct
name|IcdScanResult
block|{
name|uint
name|status
decl_stmt|;
comment|// see #icd_scan_status
name|uint
name|timestamp
decl_stmt|;
comment|// when last seen
name|QString
name|service_name
decl_stmt|;
name|uint
name|service_priority
decl_stmt|;
comment|// within a service type
name|QString
name|network_name
decl_stmt|;
name|uint
name|network_priority
decl_stmt|;
name|struct
name|CommonParams
name|scan
decl_stmt|;
name|uint
name|signal_strength
decl_stmt|;
comment|// quality, 0 (none) - 10 (good)
name|QString
name|station_id
decl_stmt|;
comment|// e.g. MAC address or similar id
name|uint
name|signal_dB
decl_stmt|;
comment|// use signal strength above unless you know what you are doing
name|IcdScanResult
argument_list|()
block|{
name|status
operator|=
name|timestamp
operator|=
name|scan
operator|.
name|service_attrs
operator|=
name|service_priority
operator|=
name|scan
operator|.
name|network_attrs
operator|=
name|network_priority
operator|=
name|signal_strength
operator|=
name|signal_dB
operator|=
literal|0
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|IcdStateResult
block|{
name|struct
name|CommonParams
name|params
decl_stmt|;
name|QString
name|error
decl_stmt|;
name|uint
name|state
decl_stmt|;
block|}
struct|;
struct|struct
name|IcdStatisticsResult
block|{
name|struct
name|CommonParams
name|params
decl_stmt|;
name|uint
name|time_active
decl_stmt|;
comment|// in seconds
name|enum
name|icd_nw_levels
name|signal_strength
decl_stmt|;
comment|// see network_api_defines.h in icd2-dev package
name|uint
name|bytes_sent
decl_stmt|;
name|uint
name|bytes_received
decl_stmt|;
block|}
struct|;
struct|struct
name|IcdIPInformation
block|{
name|QString
name|address
decl_stmt|;
name|QString
name|netmask
decl_stmt|;
name|QString
name|default_gateway
decl_stmt|;
name|QString
name|dns1
decl_stmt|;
name|QString
name|dns2
decl_stmt|;
name|QString
name|dns3
decl_stmt|;
block|}
struct|;
struct|struct
name|IcdAddressInfoResult
block|{
name|struct
name|CommonParams
name|params
decl_stmt|;
name|QList
operator|<
name|IcdIPInformation
operator|>
name|ip_info
expr_stmt|;
block|}
struct|;
enum|enum
name|IcdDbusInterfaceVer
block|{
name|IcdOldDbusInterface
init|=
literal|0
block|,
comment|// use the old OSSO-IC interface
name|IcdNewDbusInterface
comment|// use the new Icd2 interface (default)
block|}
enum|;
name|class
name|IcdPrivate
decl_stmt|;
name|class
name|Icd
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|Icd
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|Icd
argument_list|(
argument|unsigned int timeout
argument_list|,
argument|QObject *parent =
literal|0
argument_list|)
block|;
name|Icd
argument_list|(
argument|unsigned int timeout
argument_list|,
argument|IcdDbusInterfaceVer ver
argument_list|,
argument|QObject *parent =
literal|0
argument_list|)
block|;
operator|~
name|Icd
argument_list|()
block|;
comment|/* Icd2 dbus API functions */
name|QStringList
name|scan
argument_list|(
argument|icd_scan_request_flags flags
argument_list|,
argument|QStringList&network_types
argument_list|,
argument|QList<IcdScanResult>& scan_results
argument_list|,
argument|QString& error
argument_list|)
block|;
name|uint
name|state
argument_list|(
argument|QString& service_type
argument_list|,
argument|uint service_attrs
argument_list|,
argument|QString& service_id
argument_list|,
argument|QString& network_type
argument_list|,
argument|uint network_attrs
argument_list|,
argument|QByteArray& network_id
argument_list|,
argument|IcdStateResult&state_result
argument_list|)
block|;
name|uint
name|addrinfo
argument_list|(
argument|QString& service_type
argument_list|,
argument|uint service_attrs
argument_list|,
argument|QString& service_id
argument_list|,
argument|QString& network_type
argument_list|,
argument|uint network_attrs
argument_list|,
argument|QByteArray& network_id
argument_list|,
argument|IcdAddressInfoResult& addr_result
argument_list|)
block|;
name|uint
name|state
argument_list|(
name|QList
operator|<
name|IcdStateResult
operator|>
operator|&
name|state_results
argument_list|)
block|;
name|uint
name|statistics
argument_list|(
name|QList
operator|<
name|IcdStatisticsResult
operator|>
operator|&
name|stats_results
argument_list|)
block|;
name|uint
name|addrinfo
argument_list|(
name|QList
operator|<
name|IcdAddressInfoResult
operator|>
operator|&
name|addr_results
argument_list|)
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|icdSignalReceived
argument_list|(
specifier|const
name|QString
operator|&
name|interface
argument_list|,
specifier|const
name|QString
operator|&
name|signal
argument_list|,
specifier|const
name|QList
operator|<
name|QVariant
operator|>
operator|&
name|args
argument_list|)
block|;
name|void
name|icdCallReply
argument_list|(
specifier|const
name|QString
operator|&
name|method
argument_list|,
specifier|const
name|QList
operator|<
name|QVariant
operator|>
operator|&
name|args
argument_list|,
specifier|const
name|QString
operator|&
name|error
argument_list|)
block|;
name|private
operator|:
name|IcdPrivate
operator|*
name|d
block|;
name|friend
name|class
name|IcdPrivate
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// Maemo namespace
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
