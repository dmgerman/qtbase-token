begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QNETWORKSESSION_IMPL_H
end_ifndef
begin_define
DECL|macro|QNETWORKSESSION_IMPL_H
define|#
directive|define
name|QNETWORKSESSION_IMPL_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of the QLibrary class.  This header file may change from
end_comment
begin_comment
comment|// version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtNetwork/private/qnetworksession_p.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfigmanager.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qtimer.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/quuid.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/qdbusconnection.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/qdbusinterface.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/qdbusmessage.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/qdbusmetatype.h>
end_include
begin_include
include|#
directive|include
file|<icd/dbus_api.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QIcdEngine
name|class
name|QIcdEngine
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|ICd2DetailsDBusStruct
struct|struct
name|ICd2DetailsDBusStruct
block|{
DECL|member|serviceType
name|QString
name|serviceType
decl_stmt|;
DECL|member|serviceAttributes
name|uint
name|serviceAttributes
decl_stmt|;
DECL|member|setviceId
name|QString
name|setviceId
decl_stmt|;
DECL|member|networkType
name|QString
name|networkType
decl_stmt|;
DECL|member|networkAttributes
name|uint
name|networkAttributes
decl_stmt|;
DECL|member|networkId
name|QByteArray
name|networkId
decl_stmt|;
block|}
struct|;
end_struct
begin_typedef
DECL|typedef|ICd2DetailsList
typedef|typedef
name|QList
operator|<
name|ICd2DetailsDBusStruct
operator|>
name|ICd2DetailsList
expr_stmt|;
end_typedef
begin_decl_stmt
name|class
name|QNetworkSessionPrivateImpl
range|:
name|public
name|QNetworkSessionPrivate
block|{
name|Q_OBJECT
name|public
operator|:
name|QNetworkSessionPrivateImpl
argument_list|(
name|QIcdEngine
operator|*
name|engine
argument_list|)
operator|:
name|engine
argument_list|(
name|engine
argument_list|)
block|,
name|connectFlags
argument_list|(
name|ICD_CONNECTION_FLAG_USER_EVENT
argument_list|)
block|,
name|currentState
argument_list|(
name|QNetworkSession
operator|::
name|Invalid
argument_list|)
block|,
name|m_asynchCallActive
argument_list|(
argument|false
argument_list|)
block|{
name|m_stopTimer
operator|.
name|setSingleShot
argument_list|(
name|true
argument_list|)
block|;
name|connect
argument_list|(
operator|&
name|m_stopTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|finishStopBySendingClosedSignal
argument_list|()
argument_list|)
argument_list|)
block|;
name|QDBusConnection
name|systemBus
operator|=
name|QDBusConnection
operator|::
name|connectToBus
argument_list|(
name|QDBusConnection
operator|::
name|SystemBus
argument_list|,
name|QUuid
operator|::
name|createUuid
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
block|;
name|m_dbusInterface
operator|=
name|new
name|QDBusInterface
argument_list|(
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|ICD_DBUS_API_PATH
argument_list|,
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|systemBus
argument_list|,
name|this
argument_list|)
block|;
name|systemBus
operator|.
name|connect
argument_list|(
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|ICD_DBUS_API_PATH
argument_list|,
name|ICD_DBUS_API_INTERFACE
argument_list|,
name|ICD_DBUS_API_CONNECT_SIG
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|stateChange
argument_list|(
specifier|const
name|QDBusMessage
operator|&
argument_list|)
argument_list|)
argument_list|)
block|;
name|qDBusRegisterMetaType
operator|<
name|ICd2DetailsDBusStruct
operator|>
operator|(
operator|)
block|;
name|qDBusRegisterMetaType
operator|<
name|ICd2DetailsList
operator|>
operator|(
operator|)
block|;
name|m_connectRequestTimer
operator|.
name|setSingleShot
argument_list|(
name|true
argument_list|)
block|;
name|connect
argument_list|(
operator|&
name|m_connectRequestTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|connectTimeout
argument_list|()
argument_list|)
argument_list|)
block|;     }
operator|~
name|QNetworkSessionPrivateImpl
argument_list|()
block|{
name|cleanupSession
argument_list|()
block|;
name|QDBusConnection
operator|::
name|disconnectFromBus
argument_list|(
name|m_dbusInterface
operator|->
name|connection
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
block|;     }
comment|//called by QNetworkSession constructor and ensures
comment|//that the state is immediately updated (w/o actually opening
comment|//a session). Also this function should take care of
comment|//notification hooks to discover future state changes.
name|void
name|syncStateWithInterface
argument_list|()
block|;
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|QNetworkInterface
name|currentInterface
argument_list|()
specifier|const
block|;
endif|#
directive|endif
name|QVariant
name|sessionProperty
argument_list|(
argument|const QString& key
argument_list|)
specifier|const
block|;
name|void
name|setSessionProperty
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|,
specifier|const
name|QVariant
operator|&
name|value
argument_list|)
block|;
name|void
name|open
argument_list|()
block|;
name|void
name|close
argument_list|()
block|;
name|void
name|stop
argument_list|()
block|;
name|void
name|migrate
argument_list|()
block|;
name|void
name|accept
argument_list|()
block|;
name|void
name|ignore
argument_list|()
block|;
name|void
name|reject
argument_list|()
block|;
name|QString
name|errorString
argument_list|()
specifier|const
block|;
comment|//must return translated string
name|QNetworkSession
operator|::
name|SessionError
name|error
argument_list|()
specifier|const
block|;
name|quint64
name|bytesWritten
argument_list|()
specifier|const
block|;
name|quint64
name|bytesReceived
argument_list|()
specifier|const
block|;
name|quint64
name|activeTime
argument_list|()
specifier|const
block|;
name|private
operator|:
name|void
name|updateStateFromServiceNetwork
argument_list|()
block|;
name|void
name|updateStateFromActiveConfig
argument_list|()
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|do_open
argument_list|()
block|;
name|void
name|networkConfigurationsChanged
argument_list|()
block|;
name|void
name|iapStateChanged
argument_list|(
argument|const QString& iapid
argument_list|,
argument|uint icd_connection_state
argument_list|)
block|;
name|void
name|updateProxies
argument_list|(
argument|QNetworkSession::State newState
argument_list|)
block|;
name|void
name|finishStopBySendingClosedSignal
argument_list|()
block|;
name|void
name|stateChange
argument_list|(
specifier|const
name|QDBusMessage
operator|&
name|rep
argument_list|)
block|;
name|void
name|connectTimeout
argument_list|()
block|;
name|private
operator|:
name|QNetworkConfigurationManager
name|manager
block|;
name|QIcdEngine
operator|*
name|engine
block|;      struct
name|Statistics
block|{
name|quint64
name|txData
block|;
name|quint64
name|rxData
block|;
name|quint64
name|activeTime
block|;     }
block|;
comment|// The config set on QNetworkSession.
name|QNetworkConfiguration
name|config
block|;
name|QNetworkConfiguration
operator|&
name|copyConfig
argument_list|(
argument|QNetworkConfiguration&fromConfig
argument_list|,
argument|QNetworkConfiguration&toConfig
argument_list|,
argument|bool deepCopy = true
argument_list|)
block|;
name|void
name|clearConfiguration
argument_list|(
name|QNetworkConfiguration
operator|&
name|config
argument_list|)
block|;
name|bool
name|opened
block|;
name|icd_connection_flags
name|connectFlags
block|;
name|QNetworkSession
operator|::
name|SessionError
name|lastError
block|;
name|QDateTime
name|startTime
block|;
name|QString
name|currentNetworkInterface
block|;
name|friend
name|class
name|IcdListener
block|;
name|void
name|updateState
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
block|;
name|void
name|updateIdentifier
argument_list|(
specifier|const
name|QString
operator|&
name|newId
argument_list|)
block|;
name|Statistics
name|getStatistics
argument_list|()
specifier|const
block|;
name|void
name|cleanupSession
argument_list|(
name|void
argument_list|)
block|;
name|void
name|updateProxyInformation
argument_list|()
block|;
name|void
name|clearProxyInformation
argument_list|()
block|;
name|QNetworkSession
operator|::
name|State
name|currentState
block|;
name|QDBusInterface
operator|*
name|m_dbusInterface
block|;
name|QTimer
name|m_stopTimer
block|;
name|bool
name|m_asynchCallActive
block|;
name|QTimer
name|m_connectRequestTimer
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Marshall the ICd2DetailsDBusStruct data into a D-Bus argument
end_comment
begin_expr_stmt
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|argument
operator|,
specifier|const
name|ICd2DetailsDBusStruct
operator|&
name|icd2
operator|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// Retrieve the ICd2DetailsDBusStruct data from the D-Bus argument
end_comment
begin_expr_stmt
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|argument
operator|,
name|ICd2DetailsDBusStruct
operator|&
name|icd2
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|ICd2DetailsDBusStruct
name|Q_DECLARE_METATYPE
argument_list|(
name|ICd2DetailsDBusStruct
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|ICd2DetailsList
name|Q_DECLARE_METATYPE
argument_list|(
name|ICd2DetailsList
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_BEARERMANAGEMENT
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QNETWORKSESSIONPRIVATE_H
end_comment
end_unit
