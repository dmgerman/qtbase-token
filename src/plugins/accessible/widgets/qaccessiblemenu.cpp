begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qaccessiblemenu.h"
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qmenubar.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QAction>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_function_decl
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|QString
name|Q_GUI_EXPORT
name|qt_accStripAmp
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
name|Q_GUI_EXPORT
name|qt_accHotKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_constructor
DECL|function|QAccessibleMenu
name|QAccessibleMenu
operator|::
name|QAccessibleMenu
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|w
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|menu
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|menu
name|QMenu
modifier|*
name|QAccessibleMenu
operator|::
name|menu
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleMenu
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleMenu
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
operator|||
name|child
operator|>
name|childCount
argument_list|()
condition|)
return|return
name|QAccessibleWidgetEx
operator|::
name|rect
argument_list|(
name|child
argument_list|)
return|;
name|QRect
name|r
init|=
name|menu
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
index|[
name|child
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|QPoint
name|tlp
init|=
name|menu
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|tlp
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|tlp
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleMenu
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
name|QAction
modifier|*
name|act
init|=
name|menu
argument_list|()
operator|->
name|actionAt
argument_list|(
name|menu
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|act
operator|&&
name|act
operator|->
name|isSeparator
argument_list|()
condition|)
name|act
operator|=
literal|0
expr_stmt|;
return|return
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|indexOf
argument_list|(
name|act
argument_list|)
operator|+
literal|1
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleMenu
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|tx
init|=
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|.
name|size
argument_list|()
condition|)
return|return
name|tx
return|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Name
case|:
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|menu
argument_list|()
operator|->
name|windowTitle
argument_list|()
return|;
return|return
name|qt_accStripAmp
argument_list|(
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|at
argument_list|(
name|child
operator|-
literal|1
argument_list|)
operator|->
name|text
argument_list|()
argument_list|)
return|;
case|case
name|Help
case|:
return|return
name|child
condition|?
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|at
argument_list|(
name|child
operator|-
literal|1
argument_list|)
operator|->
name|whatsThis
argument_list|()
else|:
name|tx
return|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|Accelerator
case|:
return|return
name|child
condition|?
cast|static_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|at
argument_list|(
name|child
operator|-
literal|1
argument_list|)
operator|->
name|shortcut
argument_list|()
argument_list|)
else|:
name|tx
return|;
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
name|tx
return|;
block|}
end_function
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleMenu
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|PopupMenu
return|;
name|QAction
modifier|*
name|action
init|=
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
index|[
name|child
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|action
operator|&&
name|action
operator|->
name|isSeparator
argument_list|()
condition|)
return|return
name|Separator
return|;
return|return
name|MenuItem
return|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleMenu
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|State
name|s
init|=
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|s
return|;
name|QAction
modifier|*
name|action
init|=
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
index|[
name|child
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|action
condition|)
return|return
name|s
return|;
if|if
condition|(
name|menu
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_MouseTracking
argument_list|)
condition|)
name|s
operator||=
name|HotTracked
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|isSeparator
argument_list|()
operator|||
operator|!
name|action
operator|->
name|isEnabled
argument_list|()
condition|)
name|s
operator||=
name|Unavailable
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|isChecked
argument_list|()
condition|)
name|s
operator||=
name|Checked
expr_stmt|;
if|if
condition|(
name|menu
argument_list|()
operator|->
name|activeAction
argument_list|()
operator|==
name|action
condition|)
name|s
operator||=
name|Focused
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|actionText
name|QString
name|QAccessibleMenu
operator|::
name|actionText
parameter_list|(
name|int
name|action
parameter_list|,
name|QAccessible
operator|::
name|Text
name|text
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|action
operator|==
name|QAccessible
operator|::
name|DefaultAction
operator|&&
name|child
operator|&&
name|text
operator|==
name|QAccessible
operator|::
name|Name
condition|)
block|{
name|QAction
modifier|*
name|a
init|=
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|value
argument_list|(
name|child
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|a
operator|||
name|a
operator|->
name|isSeparator
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|a
operator|->
name|menu
argument_list|()
condition|)
block|{
if|if
condition|(
name|a
operator|->
name|menu
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|QMenu
operator|::
name|tr
argument_list|(
literal|"Close"
argument_list|)
return|;
return|return
name|QMenu
operator|::
name|tr
argument_list|(
literal|"Open"
argument_list|)
return|;
block|}
return|return
name|QMenu
operator|::
name|tr
argument_list|(
literal|"Execute"
argument_list|)
return|;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|actionText
argument_list|(
name|action
argument_list|,
name|text
argument_list|,
name|child
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|doAction
name|bool
name|QAccessibleMenu
operator|::
name|doAction
parameter_list|(
name|int
name|act
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
if|if
condition|(
operator|!
name|child
operator|||
name|act
operator|!=
name|QAccessible
operator|::
name|DefaultAction
condition|)
return|return
literal|false
return|;
name|QAction
modifier|*
name|action
init|=
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|value
argument_list|(
name|child
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|action
operator|||
operator|!
name|action
operator|->
name|isEnabled
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|action
operator|->
name|menu
argument_list|()
operator|&&
name|action
operator|->
name|menu
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
name|action
operator|->
name|menu
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
else|else
name|menu
argument_list|()
operator|->
name|setActiveAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleMenu
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|entry
operator|<
literal|0
condition|)
block|{
operator|*
name|target
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
if|if
condition|(
name|relation
operator|==
name|Self
operator|||
name|entry
operator|==
literal|0
condition|)
block|{
operator|*
name|target
operator|=
operator|new
name|QAccessibleMenu
argument_list|(
name|menu
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Child
case|:
if|if
condition|(
name|entry
operator|<=
name|childCount
argument_list|()
condition|)
block|{
operator|*
name|target
operator|=
operator|new
name|QAccessibleMenuItem
argument_list|(
name|menu
argument_list|()
argument_list|,
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|at
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
name|Ancestor
case|:
block|{
name|QAccessibleInterface
modifier|*
name|iface
decl_stmt|;
name|QWidget
modifier|*
name|parent
init|=
name|menu
argument_list|()
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|iface
operator|=
operator|new
name|QAccessibleMenuItem
argument_list|(
name|parent
argument_list|,
name|menu
argument_list|()
operator|->
name|menuAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|==
literal|1
condition|)
block|{
operator|*
name|target
operator|=
name|iface
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|iface
operator|->
name|navigate
argument_list|(
name|Ancestor
argument_list|,
name|entry
operator|-
literal|1
argument_list|,
name|target
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|QAccessibleWidgetEx
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
break|break;
block|}
default|default:
return|return
name|QAccessibleWidgetEx
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
operator|*
name|target
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleMenu
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
name|Role
name|r
init|=
name|child
operator|->
name|role
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|MenuItem
operator|||
name|r
operator|==
name|Separator
operator|)
operator|&&
name|menu
argument_list|()
condition|)
block|{
name|index
operator|=
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|indexOf
argument_list|(
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
operator|++
name|index
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
end_ifndef
begin_constructor
DECL|function|QAccessibleMenuBar
name|QAccessibleMenuBar
operator|::
name|QAccessibleMenuBar
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|w
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|menuBar
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|menuBar
name|QMenuBar
modifier|*
name|QAccessibleMenuBar
operator|::
name|menuBar
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleMenuBar
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|menuBar
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleMenuBar
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|QAccessibleWidgetEx
operator|::
name|rect
argument_list|(
name|child
argument_list|)
return|;
name|QRect
name|r
init|=
name|menuBar
argument_list|()
operator|->
name|actionGeometry
argument_list|(
name|menuBar
argument_list|()
operator|->
name|actions
argument_list|()
index|[
name|child
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|QPoint
name|tlp
init|=
name|menuBar
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|tlp
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|tlp
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleMenuBar
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
name|childCount
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|rect
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleMenuBar
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|entry
operator|<
literal|0
condition|)
block|{
operator|*
name|target
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
if|if
condition|(
name|relation
operator|==
name|Self
operator|||
name|entry
operator|==
literal|0
condition|)
block|{
operator|*
name|target
operator|=
operator|new
name|QAccessibleMenuBar
argument_list|(
name|menuBar
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Child
case|:
if|if
condition|(
name|entry
operator|<=
name|childCount
argument_list|()
condition|)
block|{
operator|*
name|target
operator|=
operator|new
name|QAccessibleMenuItem
argument_list|(
name|menuBar
argument_list|()
argument_list|,
name|menuBar
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|at
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
break|break;
default|default:
return|return
name|QAccessibleWidgetEx
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
operator|*
name|target
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleMenuBar
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
name|Role
name|r
init|=
name|child
operator|->
name|role
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|MenuItem
operator|||
name|r
operator|==
name|Separator
operator|)
operator|&&
name|menuBar
argument_list|()
condition|)
block|{
name|index
operator|=
name|menuBar
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|indexOf
argument_list|(
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
operator|++
name|index
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleMenuBar
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|str
decl_stmt|;
if|if
condition|(
name|child
condition|)
block|{
if|if
condition|(
name|QAction
modifier|*
name|action
init|=
name|menuBar
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|value
argument_list|(
name|child
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Name
case|:
return|return
name|qt_accStripAmp
argument_list|(
name|action
operator|->
name|text
argument_list|()
argument_list|)
return|;
case|case
name|Accelerator
case|:
name|str
operator|=
name|qt_accHotKey
argument_list|(
name|action
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleMenuBar
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|MenuBar
return|;
name|QAction
modifier|*
name|action
init|=
name|menuBar
argument_list|()
operator|->
name|actions
argument_list|()
index|[
name|child
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|action
operator|&&
name|action
operator|->
name|isSeparator
argument_list|()
condition|)
return|return
name|Separator
return|;
return|return
name|MenuItem
return|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleMenuBar
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|State
name|s
init|=
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|s
return|;
name|QAction
modifier|*
name|action
init|=
name|menuBar
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|value
argument_list|(
name|child
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|action
condition|)
return|return
name|s
return|;
if|if
condition|(
name|menuBar
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_MouseTracking
argument_list|)
condition|)
name|s
operator||=
name|HotTracked
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|isSeparator
argument_list|()
operator|||
operator|!
name|action
operator|->
name|isEnabled
argument_list|()
condition|)
name|s
operator||=
name|Unavailable
expr_stmt|;
if|if
condition|(
name|menuBar
argument_list|()
operator|->
name|activeAction
argument_list|()
operator|==
name|action
condition|)
name|s
operator||=
name|Focused
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|actionText
name|QString
name|QAccessibleMenuBar
operator|::
name|actionText
parameter_list|(
name|int
name|action
parameter_list|,
name|QAccessible
operator|::
name|Text
name|text
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|action
operator|==
name|QAccessible
operator|::
name|DefaultAction
operator|&&
name|child
operator|&&
name|text
operator|==
name|QAccessible
operator|::
name|Name
condition|)
block|{
name|QAction
modifier|*
name|a
init|=
name|menuBar
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|value
argument_list|(
name|child
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|a
operator|||
name|a
operator|->
name|isSeparator
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|a
operator|->
name|menu
argument_list|()
condition|)
block|{
if|if
condition|(
name|a
operator|->
name|menu
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|QMenu
operator|::
name|tr
argument_list|(
literal|"Close"
argument_list|)
return|;
return|return
name|QMenu
operator|::
name|tr
argument_list|(
literal|"Open"
argument_list|)
return|;
block|}
return|return
name|QMenu
operator|::
name|tr
argument_list|(
literal|"Execute"
argument_list|)
return|;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|actionText
argument_list|(
name|action
argument_list|,
name|text
argument_list|,
name|child
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|doAction
name|bool
name|QAccessibleMenuBar
operator|::
name|doAction
parameter_list|(
name|int
name|act
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
if|if
condition|(
name|act
operator|!=
operator|!
name|child
condition|)
return|return
literal|false
return|;
name|QAction
modifier|*
name|action
init|=
name|menuBar
argument_list|()
operator|->
name|actions
argument_list|()
operator|.
name|value
argument_list|(
name|child
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|action
operator|||
operator|!
name|action
operator|->
name|isEnabled
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|action
operator|->
name|menu
argument_list|()
operator|&&
name|action
operator|->
name|menu
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
name|action
operator|->
name|menu
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
else|else
name|menuBar
argument_list|()
operator|->
name|setActiveAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENUBAR
end_comment
begin_constructor
DECL|function|QAccessibleMenuItem
name|QAccessibleMenuItem
operator|::
name|QAccessibleMenuItem
parameter_list|(
name|QWidget
modifier|*
name|owner
parameter_list|,
name|QAction
modifier|*
name|action
parameter_list|)
member_init_list|:
name|m_action
argument_list|(
name|action
argument_list|)
member_init_list|,
name|m_owner
argument_list|(
name|owner
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QAccessibleMenuItem
name|QAccessibleMenuItem
operator|::
name|~
name|QAccessibleMenuItem
parameter_list|()
block|{}
end_destructor
begin_function
DECL|function|childAt
name|int
name|QAccessibleMenuItem
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
name|childCount
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|rect
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleMenuItem
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|m_action
operator|->
name|menu
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|actionText
name|QString
name|QAccessibleMenuItem
operator|::
name|actionText
parameter_list|(
name|int
name|action
parameter_list|,
name|Text
name|text
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|text
operator|==
name|Name
operator|&&
name|child
operator|==
literal|0
condition|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|Press
case|:
case|case
name|DefaultAction
case|:
return|return
name|QMenu
operator|::
name|tr
argument_list|(
literal|"Execute"
argument_list|)
return|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|doAction
name|bool
name|QAccessibleMenuItem
operator|::
name|doAction
parameter_list|(
name|int
name|action
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
comment|/*params = QVariantList()*/
parameter_list|)
block|{
if|if
condition|(
operator|(
name|action
operator|==
name|Press
operator|||
name|action
operator|==
name|DefaultAction
operator|)
operator|&&
name|child
operator|==
literal|0
condition|)
block|{
name|m_action
operator|->
name|trigger
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleMenuItem
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|->
name|role
argument_list|(
literal|0
argument_list|)
operator|==
name|PopupMenu
operator|&&
name|child
operator|->
name|object
argument_list|()
operator|==
name|m_action
operator|->
name|menu
argument_list|()
condition|)
return|return
literal|1
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QAccessibleMenuItem
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|m_action
condition|?
literal|true
else|:
literal|false
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleMenuItem
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|entry
operator|<
literal|0
condition|)
block|{
operator|*
name|target
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
if|if
condition|(
name|relation
operator|==
name|Self
operator|||
name|entry
operator|==
literal|0
condition|)
block|{
operator|*
name|target
operator|=
operator|new
name|QAccessibleMenuItem
argument_list|(
name|owner
argument_list|()
argument_list|,
name|action
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Child
case|:
if|if
condition|(
name|entry
operator|<=
name|childCount
argument_list|()
condition|)
block|{
operator|*
name|target
operator|=
operator|new
name|QAccessibleMenu
argument_list|(
name|action
argument_list|()
operator|->
name|menu
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
break|break;
case|case
name|Ancestor
case|:
block|{
name|QWidget
modifier|*
name|parent
init|=
name|owner
argument_list|()
decl_stmt|;
name|QAccessibleInterface
modifier|*
name|ancestor
init|=
name|parent
condition|?
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|parent
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|ancestor
condition|)
block|{
if|if
condition|(
name|entry
operator|==
literal|1
condition|)
block|{
operator|*
name|target
operator|=
name|ancestor
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|ancestor
operator|->
name|navigate
argument_list|(
name|Ancestor
argument_list|,
name|entry
operator|-
literal|1
argument_list|,
name|target
argument_list|)
expr_stmt|;
operator|delete
name|ancestor
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|Up
case|:
case|case
name|Down
case|:
block|{
name|QAccessibleInterface
modifier|*
name|parent
init|=
literal|0
decl_stmt|;
name|int
name|ent
init|=
name|navigate
argument_list|(
name|Ancestor
argument_list|,
literal|1
argument_list|,
operator|&
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|ent
operator|==
literal|0
condition|)
block|{
name|int
name|index
init|=
name|parent
operator|->
name|indexOfChild
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|index
operator|+=
operator|(
name|relation
operator|==
name|Down
condition|?
operator|+
literal|1
else|:
operator|-
literal|1
operator|)
expr_stmt|;
name|ret
operator|=
name|parent
operator|->
name|navigate
argument_list|(
name|Child
argument_list|,
name|index
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
operator|delete
name|parent
expr_stmt|;
break|break;
block|}
case|case
name|Sibling
case|:
block|{
name|QAccessibleInterface
modifier|*
name|parent
init|=
literal|0
decl_stmt|;
name|int
name|ent
init|=
name|navigate
argument_list|(
name|Ancestor
argument_list|,
literal|1
argument_list|,
operator|&
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|ent
operator|==
literal|0
condition|)
block|{
name|ret
operator|=
name|parent
operator|->
name|navigate
argument_list|(
name|Child
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
operator|delete
name|parent
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
operator|*
name|target
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|object
name|QObject
modifier|*
name|QAccessibleMenuItem
operator|::
name|object
parameter_list|()
specifier|const
block|{
return|return
name|m_action
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleMenuItem
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
block|{
name|QWidget
modifier|*
name|own
init|=
name|owner
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|QMenuBar
modifier|*
name|menuBar
init|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|own
argument_list|)
condition|)
block|{
name|rect
operator|=
name|menuBar
operator|->
name|actionGeometry
argument_list|(
name|m_action
argument_list|)
expr_stmt|;
name|QPoint
name|globalPos
init|=
name|menuBar
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|rect
operator|=
name|rect
operator|.
name|translated
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
block|}
elseif|else
endif|#
directive|endif
comment|// QT_NO_MENUBAR
if|if
condition|(
name|QMenu
modifier|*
name|menu
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|own
argument_list|)
condition|)
block|{
name|rect
operator|=
name|menu
operator|->
name|actionGeometry
argument_list|(
name|m_action
argument_list|)
expr_stmt|;
name|QPoint
name|globalPos
init|=
name|menu
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|rect
operator|=
name|rect
operator|.
name|translated
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
name|QMenu
modifier|*
name|menu
init|=
name|m_action
operator|->
name|menu
argument_list|()
decl_stmt|;
if|if
condition|(
name|menu
condition|)
block|{
name|rect
operator|=
name|menu
operator|->
name|rect
argument_list|()
expr_stmt|;
name|QPoint
name|globalPos
init|=
name|menu
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|rect
operator|=
name|rect
operator|.
name|translated
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|relationTo
name|QAccessible
operator|::
name|Relation
name|QAccessibleMenuItem
operator|::
name|relationTo
parameter_list|(
name|int
name|child
parameter_list|,
specifier|const
name|QAccessibleInterface
modifier|*
name|other
parameter_list|,
name|int
name|otherChild
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|other
operator|->
name|object
argument_list|()
operator|==
name|owner
argument_list|()
condition|)
block|{
return|return
name|Child
return|;
block|}
name|Q_UNUSED
argument_list|(
argument|child
argument_list|)
name|Q_UNUSED
argument_list|(
argument|other
argument_list|)
name|Q_UNUSED
argument_list|(
argument|otherChild
argument_list|)
comment|// ###
return|return
name|Unrelated
return|;
block|}
end_function
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleMenuItem
operator|::
name|role
parameter_list|(
name|int
comment|/*child*/
parameter_list|)
specifier|const
block|{
return|return
name|m_action
operator|->
name|isSeparator
argument_list|()
condition|?
name|Separator
else|:
name|MenuItem
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessibleMenuItem
operator|::
name|setText
parameter_list|(
name|Text
comment|/*t*/
parameter_list|,
name|int
comment|/*child*/
parameter_list|,
specifier|const
name|QString
modifier|&
comment|/*text */
parameter_list|)
block|{  }
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleMenuItem
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QAccessible
operator|::
name|State
name|s
init|=
name|Unavailable
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
block|{
name|s
operator|=
name|Normal
expr_stmt|;
name|QWidget
modifier|*
name|own
init|=
name|owner
argument_list|()
decl_stmt|;
if|if
condition|(
name|own
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
operator|==
literal|false
operator|||
name|m_action
operator|->
name|isVisible
argument_list|()
operator|==
literal|false
condition|)
block|{
name|s
operator||=
name|Invisible
expr_stmt|;
block|}
if|if
condition|(
name|QMenu
modifier|*
name|menu
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|own
argument_list|)
condition|)
block|{
if|if
condition|(
name|menu
operator|->
name|activeAction
argument_list|()
operator|==
name|m_action
condition|)
name|s
operator||=
name|Focused
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
block|}
elseif|else
if|if
condition|(
name|QMenuBar
modifier|*
name|menuBar
init|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|own
argument_list|)
condition|)
block|{
if|if
condition|(
name|menuBar
operator|->
name|activeAction
argument_list|()
operator|==
name|m_action
condition|)
name|s
operator||=
name|Focused
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|own
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_MouseTracking
argument_list|)
condition|)
name|s
operator||=
name|HotTracked
expr_stmt|;
if|if
condition|(
name|m_action
operator|->
name|isSeparator
argument_list|()
operator|||
operator|!
name|m_action
operator|->
name|isEnabled
argument_list|()
condition|)
name|s
operator||=
name|Unavailable
expr_stmt|;
if|if
condition|(
name|m_action
operator|->
name|isChecked
argument_list|()
condition|)
name|s
operator||=
name|Checked
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
name|QMenu
modifier|*
name|menu
init|=
name|m_action
operator|->
name|menu
argument_list|()
decl_stmt|;
if|if
condition|(
name|menu
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|menu
argument_list|)
decl_stmt|;
name|s
operator|=
name|iface
operator|->
name|state
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
block|}
block|}
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleMenuItem
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|str
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Name
case|:
if|if
condition|(
name|child
operator|==
literal|0
condition|)
block|{
name|str
operator|=
name|m_action
operator|->
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
name|QMenu
modifier|*
name|m
init|=
name|m_action
operator|->
name|menu
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
condition|)
name|str
operator|=
name|m
operator|->
name|title
argument_list|()
expr_stmt|;
block|}
name|str
operator|=
name|qt_accStripAmp
argument_list|(
name|str
argument_list|)
expr_stmt|;
break|break;
case|case
name|Accelerator
case|:
if|if
condition|(
name|child
operator|==
literal|0
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|QKeySequence
name|key
init|=
name|m_action
operator|->
name|shortcut
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|str
operator|=
name|key
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|str
operator|=
name|qt_accHotKey
argument_list|(
name|m_action
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|userActionCount
name|int
name|QAccessibleMenuItem
operator|::
name|userActionCount
parameter_list|(
name|int
comment|/*child*/
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|action
name|QAction
modifier|*
name|QAccessibleMenuItem
operator|::
name|action
parameter_list|()
specifier|const
block|{
return|return
name|m_action
return|;
block|}
end_function
begin_function
DECL|function|owner
name|QWidget
modifier|*
name|QAccessibleMenuItem
operator|::
name|owner
parameter_list|()
specifier|const
block|{
return|return
name|m_owner
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENU
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
end_unit
