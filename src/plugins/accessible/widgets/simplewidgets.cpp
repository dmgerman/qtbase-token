begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"simplewidgets.h"
end_include
begin_include
include|#
directive|include
file|<qabstractbutton.h>
end_include
begin_include
include|#
directive|include
file|<qcheckbox.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qprogressbar.h>
end_include
begin_include
include|#
directive|include
file|<qradiobutton.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbutton.h>
end_include
begin_include
include|#
directive|include
file|<qlabel.h>
end_include
begin_include
include|#
directive|include
file|<qgroupbox.h>
end_include
begin_include
include|#
directive|include
file|<qlcdnumber.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<qfocusframe.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_using
using|using
namespace|namespace
name|QAccessible2
namespace|;
end_using
begin_function_decl
specifier|extern
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|childWidgets
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|bool
name|includeTopLevel
init|=
literal|false
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
name|Q_GUI_EXPORT
name|qt_accStripAmp
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
name|Q_GUI_EXPORT
name|qt_accHotKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*!   \class QAccessibleButton   \brief The QAccessibleButton class implements the QAccessibleInterface for button type widgets.   \internal    \ingroup accessibility */
end_comment
begin_comment
comment|/*!   Creates a QAccessibleButton object for \a w.   \a role is propagated to the QAccessibleWidgetEx constructor. */
end_comment
begin_constructor
DECL|function|QAccessibleButton
name|QAccessibleButton
operator|::
name|QAccessibleButton
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|Role
name|role
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|w
argument_list|,
name|role
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|button
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
argument_list|()
operator|->
name|isCheckable
argument_list|()
condition|)
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"toggled(bool)"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"clicked()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! Returns the button. */
end_comment
begin_function
DECL|function|button
name|QAbstractButton
modifier|*
name|QAccessibleButton
operator|::
name|button
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|actionText
name|QString
name|QAccessibleButton
operator|::
name|actionText
parameter_list|(
name|int
name|action
parameter_list|,
name|Text
name|text
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|text
operator|==
name|Name
condition|)
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|Press
case|:
case|case
name|DefaultAction
case|:
comment|// press, checking or open
switch|switch
condition|(
name|role
argument_list|(
literal|0
argument_list|)
condition|)
block|{
case|case
name|ButtonMenu
case|:
return|return
name|QPushButton
operator|::
name|tr
argument_list|(
literal|"Open"
argument_list|)
return|;
case|case
name|CheckBox
case|:
block|{
if|if
condition|(
name|state
argument_list|(
name|child
argument_list|)
operator|&
name|Checked
condition|)
return|return
name|QCheckBox
operator|::
name|tr
argument_list|(
literal|"Uncheck"
argument_list|)
return|;
name|QCheckBox
modifier|*
name|cb
init|=
name|qobject_cast
argument_list|<
name|QCheckBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cb
operator|||
operator|!
name|cb
operator|->
name|isTristate
argument_list|()
operator|||
name|cb
operator|->
name|checkState
argument_list|()
operator|==
name|Qt
operator|::
name|PartiallyChecked
condition|)
return|return
name|QCheckBox
operator|::
name|tr
argument_list|(
literal|"Check"
argument_list|)
return|;
return|return
name|QCheckBox
operator|::
name|tr
argument_list|(
literal|"Toggle"
argument_list|)
return|;
block|}
break|break;
case|case
name|RadioButton
case|:
return|return
name|QRadioButton
operator|::
name|tr
argument_list|(
literal|"Check"
argument_list|)
return|;
default|default:
break|break;
block|}
break|break;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|actionText
argument_list|(
name|action
argument_list|,
name|text
argument_list|,
name|child
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|doAction
name|bool
name|QAccessibleButton
operator|::
name|doAction
parameter_list|(
name|int
name|action
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
name|params
parameter_list|)
block|{
if|if
condition|(
name|child
operator|||
operator|!
name|widget
argument_list|()
operator|->
name|isEnabled
argument_list|()
operator|||
operator|!
name|widget
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|DefaultAction
case|:
case|case
name|Press
case|:
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|QPushButton
modifier|*
name|pb
init|=
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pb
operator|&&
name|pb
operator|->
name|menu
argument_list|()
condition|)
name|pb
operator|->
name|showMenu
argument_list|()
expr_stmt|;
else|else
endif|#
directive|endif
name|button
argument_list|()
operator|->
name|animateClick
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|doAction
argument_list|(
name|action
argument_list|,
name|child
argument_list|,
name|params
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleButton
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|str
decl_stmt|;
if|if
condition|(
operator|!
name|widget
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|str
return|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Accelerator
case|:
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|QPushButton
modifier|*
name|pb
init|=
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pb
operator|&&
name|pb
operator|->
name|isDefault
argument_list|()
condition|)
name|str
operator|=
operator|(
name|QString
operator|)
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|qt_accHotKey
argument_list|(
name|button
argument_list|()
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Name
case|:
name|str
operator|=
name|widget
argument_list|()
operator|->
name|accessibleName
argument_list|()
expr_stmt|;
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|button
argument_list|()
operator|->
name|text
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
expr_stmt|;
empty_stmt|;
return|return
name|qt_accStripAmp
argument_list|(
name|str
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleButton
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|State
name|state
init|=
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|QAbstractButton
modifier|*
name|b
init|=
name|button
argument_list|()
decl_stmt|;
name|QCheckBox
modifier|*
name|cb
init|=
name|qobject_cast
argument_list|<
name|QCheckBox
operator|*
argument_list|>
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|->
name|isChecked
argument_list|()
condition|)
name|state
operator||=
name|Checked
expr_stmt|;
elseif|else
if|if
condition|(
name|cb
operator|&&
name|cb
operator|->
name|checkState
argument_list|()
operator|==
name|Qt
operator|::
name|PartiallyChecked
condition|)
name|state
operator||=
name|Mixed
expr_stmt|;
if|if
condition|(
name|b
operator|->
name|isDown
argument_list|()
condition|)
name|state
operator||=
name|Pressed
expr_stmt|;
name|QPushButton
modifier|*
name|pb
init|=
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|pb
condition|)
block|{
if|if
condition|(
name|pb
operator|->
name|isDefault
argument_list|()
condition|)
name|state
operator||=
name|DefaultButton
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|pb
operator|->
name|menu
argument_list|()
condition|)
name|state
operator||=
name|HasPopup
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|actionCount
name|int
name|QAccessibleButton
operator|::
name|actionCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|doAction
name|void
name|QAccessibleButton
operator|::
name|doAction
parameter_list|(
name|int
name|actionIndex
parameter_list|)
block|{
switch|switch
condition|(
name|actionIndex
condition|)
block|{
case|case
literal|0
case|:
name|button
argument_list|()
operator|->
name|click
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|description
name|QString
name|QAccessibleButton
operator|::
name|description
parameter_list|(
name|int
name|actionIndex
parameter_list|)
block|{
switch|switch
condition|(
name|actionIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QLatin1String
argument_list|(
literal|"Clicks the button."
argument_list|)
return|;
default|default:
return|return
name|QString
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|name
name|QString
name|QAccessibleButton
operator|::
name|name
parameter_list|(
name|int
name|actionIndex
parameter_list|)
block|{
switch|switch
condition|(
name|actionIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QLatin1String
argument_list|(
literal|"Press"
argument_list|)
return|;
default|default:
return|return
name|QString
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|localizedName
name|QString
name|QAccessibleButton
operator|::
name|localizedName
parameter_list|(
name|int
name|actionIndex
parameter_list|)
block|{
switch|switch
condition|(
name|actionIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|tr
argument_list|(
literal|"Press"
argument_list|)
return|;
default|default:
return|return
name|QString
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|keyBindings
name|QStringList
name|QAccessibleButton
operator|::
name|keyBindings
parameter_list|(
name|int
name|actionIndex
parameter_list|)
block|{
switch|switch
condition|(
name|actionIndex
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
literal|0
case|:
return|return
name|QStringList
argument_list|()
operator|<<
name|button
argument_list|()
operator|->
name|shortcut
argument_list|()
operator|.
name|toString
argument_list|()
return|;
endif|#
directive|endif
default|default:
return|return
name|QStringList
argument_list|()
return|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
end_ifndef
begin_comment
comment|/*!   \class QAccessibleToolButton   \brief The QAccessibleToolButton class implements the QAccessibleInterface for tool buttons.   \internal    \ingroup accessibility */
end_comment
begin_comment
comment|/*!     \enum QAccessibleToolButton::ToolButtonElements      This enum identifies the components of the tool button.      \value ToolButtonSelf The tool button as a whole.     \value ButtonExecute The button.     \value ButtonDropMenu The drop down menu. */
end_comment
begin_comment
comment|/*!   Creates a QAccessibleToolButton object for \a w.   \a role is propagated to the QAccessibleWidgetEx constructor. */
end_comment
begin_constructor
DECL|function|QAccessibleToolButton
name|QAccessibleToolButton
operator|::
name|QAccessibleToolButton
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|Role
name|role
parameter_list|)
member_init_list|:
name|QAccessibleButton
argument_list|(
name|w
argument_list|,
name|role
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|toolButton
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! Returns the button. */
end_comment
begin_function
DECL|function|toolButton
name|QToolButton
modifier|*
name|QAccessibleToolButton
operator|::
name|toolButton
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this tool button is a split button. */
end_comment
begin_function
DECL|function|isSplitButton
name|bool
name|QAccessibleToolButton
operator|::
name|isSplitButton
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENU
return|return
name|toolButton
argument_list|()
operator|->
name|menu
argument_list|()
operator|&&
name|toolButton
argument_list|()
operator|->
name|popupMode
argument_list|()
operator|==
name|QToolButton
operator|::
name|MenuButtonPopup
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleToolButton
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isSplitButton
argument_list|()
condition|)
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|ButtonExecute
case|:
return|return
name|PushButton
return|;
case|case
name|ButtonDropMenu
case|:
return|return
name|ButtonMenu
return|;
block|}
return|return
name|QAccessibleButton
operator|::
name|role
argument_list|(
name|child
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleToolButton
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QAccessible
operator|::
name|State
name|st
init|=
name|QAccessibleButton
operator|::
name|state
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|toolButton
argument_list|()
operator|->
name|autoRaise
argument_list|()
condition|)
name|st
operator||=
name|HotTracked
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|toolButton
argument_list|()
operator|->
name|menu
argument_list|()
operator|&&
name|child
operator|!=
name|ButtonExecute
condition|)
name|st
operator||=
name|HasPopup
expr_stmt|;
endif|#
directive|endif
return|return
name|st
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|childCount
name|int
name|QAccessibleToolButton
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|toolButton
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|isSplitButton
argument_list|()
condition|?
name|ButtonDropMenu
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Returns the rectangle occupied by this button, depending on \a     child. */
end_comment
begin_function
DECL|function|rect
name|QRect
name|QAccessibleToolButton
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|toolButton
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|QAccessibleButton
operator|::
name|rect
argument_list|(
name|child
argument_list|)
return|;
name|QStyleOptionToolButton
name|opt
decl_stmt|;
name|opt
operator|.
name|init
argument_list|(
name|widget
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|subrect
init|=
name|widget
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ToolButton
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_ToolButtonMenu
argument_list|,
name|toolButton
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
name|ButtonExecute
condition|)
name|subrect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|subrect
operator|.
name|x
argument_list|()
argument_list|,
name|widget
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|ntl
init|=
name|widget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|subrect
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|subrect
operator|.
name|moveTopLeft
argument_list|(
name|ntl
argument_list|)
expr_stmt|;
return|return
name|subrect
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Returns the button's text label, depending on the text \a t, and     the \a child. */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleToolButton
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|str
decl_stmt|;
if|if
condition|(
operator|!
name|toolButton
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|str
return|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Name
case|:
name|str
operator|=
name|toolButton
argument_list|()
operator|->
name|text
argument_list|()
expr_stmt|;
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|toolButton
argument_list|()
operator|->
name|text
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|QAccessibleButton
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
expr_stmt|;
empty_stmt|;
return|return
name|qt_accStripAmp
argument_list|(
name|str
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Returns the number of actions which is 0, 1, or 2, in part     depending on \a child. */
end_comment
begin_function
DECL|function|actionCount
name|int
name|QAccessibleToolButton
operator|::
name|actionCount
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
comment|// each subelement has one action
if|if
condition|(
name|child
condition|)
return|return
name|isSplitButton
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
name|int
name|ac
init|=
name|widget
argument_list|()
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
condition|?
literal|1
else|:
literal|0
decl_stmt|;
comment|// button itself has two actions if a menu button
ifndef|#
directive|ifndef
name|QT_NO_MENU
return|return
name|ac
operator|+
operator|(
name|toolButton
argument_list|()
operator|->
name|menu
argument_list|()
condition|?
literal|2
else|:
literal|1
operator|)
return|;
else|#
directive|else
return|return
name|ac
operator|+
literal|1
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \internal      If \a text is \c Name, then depending on the \a child or the \a     action, an action text is returned. This is a translated string     which in English is one of "Press", "Open", or "Set Focus". If \a     text is not \c Name, an empty string is returned. */
end_comment
begin_function
DECL|function|actionText
name|QString
name|QAccessibleToolButton
operator|::
name|actionText
parameter_list|(
name|int
name|action
parameter_list|,
name|Text
name|text
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|text
operator|==
name|Name
condition|)
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|ButtonExecute
case|:
return|return
name|QToolButton
operator|::
name|tr
argument_list|(
literal|"Press"
argument_list|)
return|;
case|case
name|ButtonDropMenu
case|:
return|return
name|QToolButton
operator|::
name|tr
argument_list|(
literal|"Open"
argument_list|)
return|;
default|default:
switch|switch
condition|(
name|action
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QToolButton
operator|::
name|tr
argument_list|(
literal|"Press"
argument_list|)
return|;
case|case
literal|1
case|:
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|toolButton
argument_list|()
operator|->
name|menu
argument_list|()
condition|)
return|return
name|QToolButton
operator|::
name|tr
argument_list|(
literal|"Open"
argument_list|)
return|;
endif|#
directive|endif
comment|//fall through
case|case
literal|2
case|:
return|return
name|QLatin1String
argument_list|(
literal|"Set Focus"
argument_list|)
return|;
block|}
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|doAction
name|bool
name|QAccessibleToolButton
operator|::
name|doAction
parameter_list|(
name|int
name|action
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
name|params
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
argument_list|()
operator|->
name|isEnabled
argument_list|()
operator|||
operator|!
name|widget
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|action
operator|==
literal|1
operator|||
name|child
operator|==
name|ButtonDropMenu
condition|)
block|{
if|if
condition|(
operator|!
name|child
condition|)
name|toolButton
argument_list|()
operator|->
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|toolButton
argument_list|()
operator|->
name|showMenu
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
return|return
name|QAccessibleButton
operator|::
name|doAction
argument_list|(
name|action
argument_list|,
literal|0
argument_list|,
name|params
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLBUTTON
end_comment
begin_comment
comment|/*!   \class QAccessibleDisplay   \brief The QAccessibleDisplay class implements the QAccessibleInterface for widgets that display information.   \internal    \ingroup accessibility */
end_comment
begin_comment
comment|/*!   Constructs a QAccessibleDisplay object for \a w.   \a role is propagated to the QAccessibleWidgetEx constructor. */
end_comment
begin_constructor
DECL|function|QAccessibleDisplay
name|QAccessibleDisplay
operator|::
name|QAccessibleDisplay
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|Role
name|role
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|w
argument_list|,
name|role
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleDisplay
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QLabel
modifier|*
name|l
init|=
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
condition|)
block|{
if|if
condition|(
name|l
operator|->
name|pixmap
argument_list|()
condition|)
return|return
name|Graphic
return|;
ifndef|#
directive|ifndef
name|QT_NO_PICTURE
if|if
condition|(
name|l
operator|->
name|picture
argument_list|()
condition|)
return|return
name|Graphic
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MOVIE
if|if
condition|(
name|l
operator|->
name|movie
argument_list|()
condition|)
return|return
name|Animation
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ProgressBar
return|;
endif|#
directive|endif
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|role
argument_list|(
name|child
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleDisplay
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|str
decl_stmt|;
if|if
condition|(
operator|!
name|widget
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|str
return|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Name
case|:
name|str
operator|=
name|widget
argument_list|()
operator|->
name|accessibleName
argument_list|()
expr_stmt|;
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
condition|)
block|{
name|str
operator|=
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
operator|->
name|text
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
condition|)
block|{
name|str
operator|=
name|qobject_cast
argument_list|<
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
operator|->
name|title
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LCDNUMBER
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QLCDNumber
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
condition|)
block|{
name|QLCDNumber
modifier|*
name|l
init|=
name|qobject_cast
argument_list|<
name|QLCDNumber
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|->
name|digitCount
argument_list|()
condition|)
name|str
operator|=
name|QString
operator|::
name|number
argument_list|(
name|l
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|str
operator|=
name|QString
operator|::
name|number
argument_list|(
name|l
operator|->
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
break|break;
case|case
name|Value
case|:
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
if|if
condition|(
name|qobject_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
condition|)
name|str
operator|=
name|QString
operator|::
name|number
argument_list|(
name|qobject_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
expr_stmt|;
empty_stmt|;
return|return
name|qt_accStripAmp
argument_list|(
name|str
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|relationTo
name|QAccessible
operator|::
name|Relation
name|QAccessibleDisplay
operator|::
name|relationTo
parameter_list|(
name|int
name|child
parameter_list|,
specifier|const
name|QAccessibleInterface
modifier|*
name|other
parameter_list|,
name|int
name|otherChild
parameter_list|)
specifier|const
block|{
name|Relation
name|relation
init|=
name|QAccessibleWidgetEx
operator|::
name|relationTo
argument_list|(
name|child
argument_list|,
name|other
argument_list|,
name|otherChild
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|||
name|otherChild
condition|)
return|return
name|relation
return|;
name|QObject
modifier|*
name|o
init|=
name|other
operator|->
name|object
argument_list|()
decl_stmt|;
name|QLabel
modifier|*
name|label
init|=
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|label
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
if|if
condition|(
name|o
operator|==
name|label
operator|->
name|buddy
argument_list|()
condition|)
name|relation
operator||=
name|Label
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
block|}
else|else
block|{
name|QGroupBox
modifier|*
name|groupbox
init|=
name|qobject_cast
argument_list|<
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupbox
operator|&&
operator|!
name|groupbox
operator|->
name|title
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
if|if
condition|(
name|groupbox
operator|->
name|children
argument_list|()
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
name|relation
operator||=
name|Label
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|relation
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|navigate
name|int
name|QAccessibleDisplay
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|rel
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
operator|*
name|target
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|rel
operator|==
name|Labelled
condition|)
block|{
name|QObject
modifier|*
name|targetObject
init|=
literal|0
decl_stmt|;
name|QLabel
modifier|*
name|label
init|=
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|label
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
if|if
condition|(
name|entry
operator|==
literal|1
condition|)
name|targetObject
operator|=
name|label
operator|->
name|buddy
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
block|}
else|else
block|{
name|QGroupBox
modifier|*
name|groupbox
init|=
name|qobject_cast
argument_list|<
name|QGroupBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupbox
operator|&&
operator|!
name|groupbox
operator|->
name|title
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|rel
operator|=
name|Child
expr_stmt|;
endif|#
directive|endif
block|}
operator|*
name|target
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|targetObject
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|target
condition|)
return|return
literal|0
return|;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|navigate
argument_list|(
name|rel
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|imageDescription
name|QString
name|QAccessibleDisplay
operator|::
name|imageDescription
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
return|return
name|widget
argument_list|()
operator|->
name|toolTip
argument_list|()
return|;
else|#
directive|else
return|return
name|QString
operator|::
name|null
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|imageSize
name|QSize
name|QAccessibleDisplay
operator|::
name|imageSize
parameter_list|()
block|{
name|QLabel
modifier|*
name|label
init|=
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|label
condition|)
return|return
name|QSize
argument_list|()
return|;
specifier|const
name|QPixmap
modifier|*
name|pixmap
init|=
name|label
operator|->
name|pixmap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pixmap
condition|)
return|return
name|QSize
argument_list|()
return|;
return|return
name|pixmap
operator|->
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|imagePosition
name|QRect
name|QAccessibleDisplay
operator|::
name|imagePosition
parameter_list|(
name|QAccessible2
operator|::
name|CoordinateType
name|coordType
parameter_list|)
block|{
name|QLabel
modifier|*
name|label
init|=
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|label
condition|)
return|return
name|QRect
argument_list|()
return|;
specifier|const
name|QPixmap
modifier|*
name|pixmap
init|=
name|label
operator|->
name|pixmap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pixmap
condition|)
return|return
name|QRect
argument_list|()
return|;
switch|switch
condition|(
name|coordType
condition|)
block|{
case|case
name|QAccessible2
operator|::
name|RelativeToScreen
case|:
return|return
name|QRect
argument_list|(
name|label
operator|->
name|mapToGlobal
argument_list|(
name|label
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|label
operator|->
name|size
argument_list|()
argument_list|)
return|;
case|case
name|QAccessible2
operator|::
name|RelativeToParent
case|:
return|return
name|label
operator|->
name|geometry
argument_list|()
return|;
block|}
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
end_ifndef
begin_comment
comment|/*!   \class QAccessibleLineEdit   \brief The QAccessibleLineEdit class implements the QAccessibleInterface for widgets with editable text   \internal    \ingroup accessibility */
end_comment
begin_comment
comment|/*!   Constructs a QAccessibleLineEdit object for \a w.   \a name is propagated to the QAccessibleWidgetEx constructor. */
end_comment
begin_constructor
DECL|function|QAccessibleLineEdit
name|QAccessibleLineEdit
operator|::
name|QAccessibleLineEdit
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|w
argument_list|,
name|EditableText
argument_list|,
name|name
argument_list|)
member_init_list|,
name|QAccessibleSimpleEditableTextInterface
argument_list|(
name|this
argument_list|)
block|{
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"textChanged(const QString&)"
argument_list|)
argument_list|)
expr_stmt|;
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"returnPressed()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! Returns the line edit. */
end_comment
begin_function
DECL|function|lineEdit
name|QLineEdit
modifier|*
name|QAccessibleLineEdit
operator|::
name|lineEdit
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleLineEdit
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|str
decl_stmt|;
if|if
condition|(
operator|!
name|lineEdit
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|str
return|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Value
case|:
if|if
condition|(
name|lineEdit
argument_list|()
operator|->
name|echoMode
argument_list|()
operator|==
name|QLineEdit
operator|::
name|Normal
condition|)
name|str
operator|=
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
expr_stmt|;
empty_stmt|;
return|return
name|qt_accStripAmp
argument_list|(
name|str
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|setText
name|void
name|QAccessibleLineEdit
operator|::
name|setText
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|control
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lineEdit
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return;
if|if
condition|(
name|t
operator|!=
name|Value
operator|||
name|control
condition|)
block|{
name|QAccessibleWidgetEx
operator|::
name|setText
argument_list|(
name|t
argument_list|,
name|control
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return;
block|}
name|lineEdit
argument_list|()
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleLineEdit
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|State
name|state
init|=
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|l
init|=
name|lineEdit
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|->
name|isReadOnly
argument_list|()
condition|)
name|state
operator||=
name|ReadOnly
expr_stmt|;
if|if
condition|(
name|l
operator|->
name|echoMode
argument_list|()
operator|!=
name|QLineEdit
operator|::
name|Normal
condition|)
name|state
operator||=
name|Protected
expr_stmt|;
name|state
operator||=
name|Selectable
expr_stmt|;
if|if
condition|(
name|l
operator|->
name|hasSelectedText
argument_list|()
condition|)
name|state
operator||=
name|Selected
expr_stmt|;
if|if
condition|(
name|l
operator|->
name|contextMenuPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoContextMenu
operator|&&
name|l
operator|->
name|contextMenuPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|PreventContextMenu
condition|)
name|state
operator||=
name|HasPopup
expr_stmt|;
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|invokeMethodEx
name|QVariant
name|QAccessibleLineEdit
operator|::
name|invokeMethodEx
parameter_list|(
name|QAccessible
operator|::
name|Method
name|method
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
name|params
parameter_list|)
block|{
if|if
condition|(
name|child
condition|)
return|return
name|QVariant
argument_list|()
return|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|ListSupportedMethods
case|:
block|{
name|QSet
argument_list|<
name|QAccessible
operator|::
name|Method
argument_list|>
name|set
decl_stmt|;
name|set
operator|<<
name|ListSupportedMethods
operator|<<
name|SetCursorPosition
operator|<<
name|GetCursorPosition
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|set
operator||
name|qvariant_cast
argument_list|<
name|QSet
argument_list|<
name|QAccessible
operator|::
name|Method
argument_list|>
argument_list|>
argument_list|(
name|QAccessibleWidgetEx
operator|::
name|invokeMethodEx
argument_list|(
name|method
argument_list|,
name|child
argument_list|,
name|params
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
case|case
name|SetCursorPosition
case|:
name|setCursorPosition
argument_list|(
name|params
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|GetCursorPosition
case|:
return|return
name|cursorPosition
argument_list|()
return|;
default|default:
return|return
name|QAccessibleWidgetEx
operator|::
name|invokeMethodEx
argument_list|(
name|method
argument_list|,
name|child
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|addSelection
name|void
name|QAccessibleLineEdit
operator|::
name|addSelection
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|setSelection
argument_list|(
literal|0
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|attributes
name|QString
name|QAccessibleLineEdit
operator|::
name|attributes
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
block|{
comment|// QLineEdit doesn't have text attributes
operator|*
name|startOffset
operator|=
operator|*
name|endOffset
operator|=
name|offset
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|cursorPosition
name|int
name|QAccessibleLineEdit
operator|::
name|cursorPosition
parameter_list|()
block|{
return|return
name|lineEdit
argument_list|()
operator|->
name|cursorPosition
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|characterRect
name|QRect
name|QAccessibleLineEdit
operator|::
name|characterRect
parameter_list|(
name|int
comment|/*offset*/
parameter_list|,
name|CoordinateType
comment|/*coordType*/
parameter_list|)
block|{
comment|// QLineEdit doesn't hand out character rects
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|selectionCount
name|int
name|QAccessibleLineEdit
operator|::
name|selectionCount
parameter_list|()
block|{
return|return
name|lineEdit
argument_list|()
operator|->
name|hasSelectedText
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|offsetAtPoint
name|int
name|QAccessibleLineEdit
operator|::
name|offsetAtPoint
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|,
name|CoordinateType
name|coordType
parameter_list|)
block|{
name|QPoint
name|p
init|=
name|point
decl_stmt|;
if|if
condition|(
name|coordType
operator|==
name|RelativeToScreen
condition|)
name|p
operator|=
name|lineEdit
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|lineEdit
argument_list|()
operator|->
name|cursorPositionAt
argument_list|(
name|p
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selection
name|void
name|QAccessibleLineEdit
operator|::
name|selection
parameter_list|(
name|int
name|selectionIndex
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
block|{
operator|*
name|startOffset
operator|=
operator|*
name|endOffset
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|selectionIndex
operator|!=
literal|0
condition|)
return|return;
operator|*
name|startOffset
operator|=
name|lineEdit
argument_list|()
operator|->
name|selectionStart
argument_list|()
expr_stmt|;
operator|*
name|endOffset
operator|=
operator|*
name|startOffset
operator|+
name|lineEdit
argument_list|()
operator|->
name|selectedText
argument_list|()
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleLineEdit
operator|::
name|text
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
if|if
condition|(
name|startOffset
operator|>
name|endOffset
condition|)
return|return
name|QString
argument_list|()
return|;
return|return
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
operator|.
name|mid
argument_list|(
name|startOffset
argument_list|,
name|endOffset
operator|-
name|startOffset
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|textBeforeOffset
name|QString
name|QAccessibleLineEdit
operator|::
name|textBeforeOffset
parameter_list|(
name|int
comment|/*offset*/
parameter_list|,
name|BoundaryType
comment|/*boundaryType*/
parameter_list|,
name|int
modifier|*
comment|/*startOffset*/
parameter_list|,
name|int
modifier|*
comment|/*endOffset*/
parameter_list|)
block|{
comment|// TODO
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|textAfterOffset
name|QString
name|QAccessibleLineEdit
operator|::
name|textAfterOffset
parameter_list|(
name|int
comment|/*offset*/
parameter_list|,
name|BoundaryType
comment|/*boundaryType*/
parameter_list|,
name|int
modifier|*
comment|/*startOffset*/
parameter_list|,
name|int
modifier|*
comment|/*endOffset*/
parameter_list|)
block|{
comment|// TODO
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|textAtOffset
name|QString
name|QAccessibleLineEdit
operator|::
name|textAtOffset
parameter_list|(
name|int
comment|/*offset*/
parameter_list|,
name|BoundaryType
comment|/*boundaryType*/
parameter_list|,
name|int
modifier|*
comment|/*startOffset*/
parameter_list|,
name|int
modifier|*
comment|/*endOffset*/
parameter_list|)
block|{
comment|// TODO
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|removeSelection
name|void
name|QAccessibleLineEdit
operator|::
name|removeSelection
parameter_list|(
name|int
name|selectionIndex
parameter_list|)
block|{
if|if
condition|(
name|selectionIndex
operator|!=
literal|0
condition|)
return|return;
name|lineEdit
argument_list|()
operator|->
name|deselect
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCursorPosition
name|void
name|QAccessibleLineEdit
operator|::
name|setCursorPosition
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|lineEdit
argument_list|()
operator|->
name|setCursorPosition
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSelection
name|void
name|QAccessibleLineEdit
operator|::
name|setSelection
parameter_list|(
name|int
name|selectionIndex
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
if|if
condition|(
name|selectionIndex
operator|!=
literal|0
condition|)
return|return;
name|lineEdit
argument_list|()
operator|->
name|setSelection
argument_list|(
name|startOffset
argument_list|,
name|endOffset
operator|-
name|startOffset
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|characterCount
name|int
name|QAccessibleLineEdit
operator|::
name|characterCount
parameter_list|()
block|{
return|return
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|scrollToSubstring
name|void
name|QAccessibleLineEdit
operator|::
name|scrollToSubstring
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|endIndex
parameter_list|)
block|{
name|lineEdit
argument_list|()
operator|->
name|setCursorPosition
argument_list|(
name|endIndex
argument_list|)
expr_stmt|;
name|lineEdit
argument_list|()
operator|->
name|setCursorPosition
argument_list|(
name|startIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_LINEEDIT
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
end_ifndef
begin_constructor
DECL|function|QAccessibleProgressBar
name|QAccessibleProgressBar
operator|::
name|QAccessibleProgressBar
parameter_list|(
name|QWidget
modifier|*
name|o
parameter_list|)
member_init_list|:
name|QAccessibleDisplay
argument_list|(
name|o
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|progressBar
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|currentValue
name|QVariant
name|QAccessibleProgressBar
operator|::
name|currentValue
parameter_list|()
block|{
return|return
name|progressBar
argument_list|()
operator|->
name|value
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|maximumValue
name|QVariant
name|QAccessibleProgressBar
operator|::
name|maximumValue
parameter_list|()
block|{
return|return
name|progressBar
argument_list|()
operator|->
name|maximum
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minimumValue
name|QVariant
name|QAccessibleProgressBar
operator|::
name|minimumValue
parameter_list|()
block|{
return|return
name|progressBar
argument_list|()
operator|->
name|minimum
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|progressBar
name|QProgressBar
modifier|*
name|QAccessibleProgressBar
operator|::
name|progressBar
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QProgressBar
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
