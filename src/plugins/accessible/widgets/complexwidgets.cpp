begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"complexwidgets.h"
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qabstractbutton.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<qtabbar.h>
end_include
begin_include
include|#
directive|include
file|<qcombobox.h>
end_include
begin_include
include|#
directive|include
file|<qlistview.h>
end_include
begin_include
include|#
directive|include
file|<qtableview.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qtooltip.h>
end_include
begin_include
include|#
directive|include
file|<qwhatsthis.h>
end_include
begin_include
include|#
directive|include
file|<qtreeview.h>
end_include
begin_include
include|#
directive|include
file|<private/qtabbar_p.h>
end_include
begin_include
include|#
directive|include
file|<QAbstractScrollArea>
end_include
begin_include
include|#
directive|include
file|<QScrollArea>
end_include
begin_include
include|#
directive|include
file|<QScrollBar>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|QString
name|Q_GUI_EXPORT
name|qt_accStripAmp
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
end_ifndef
begin_comment
comment|/* The MSDN article "Exposing Data Tables through Microsoft Active Accessibility" explains how data tables should be exposed. Url: http://msdn2.microsoft.com/en-us/library/ms971325.aspx Basically, the model is like this:  ROLE_SYSTEM_TABLE   |- ROLE_SYSTEM_ROW   |  |- ROLE_SYSTEM_ROWHEADER   |  |- ROLE_SYSTEM_COLUMNHEADER   |  |- ROLE_SYSTEM_COLUMNHEADER   |  |- ROLE_SYSTEM_COLUMNHEADER   |     '- ..   |- ROLE_SYSTEM_ROW   |  |- ROLE_SYSTEM_ROWHEADER   |  |- ROLE_SYSTEM_CELL   |  |- ROLE_SYSTEM_CELL   |  |- ROLE_SYSTEM_CELL   |   '- ..   |- ROLE_SYSTEM_ROW   |  |- ROLE_SYSTEM_ROWHEADER   |  |- ROLE_SYSTEM_CELL   |  |- ROLE_SYSTEM_CELL   |  |- ROLE_SYSTEM_CELL   |   '- ..    '- ..  The headers of QTreeView is also represented like this. */
end_comment
begin_constructor
DECL|function|QAccessibleItemRow
name|QAccessibleItemRow
operator|::
name|QAccessibleItemRow
parameter_list|(
name|QAbstractItemView
modifier|*
name|aView
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|bool
name|isHeader
parameter_list|)
member_init_list|:
name|row
argument_list|(
name|index
argument_list|)
member_init_list|,
name|view
argument_list|(
name|aView
argument_list|)
member_init_list|,
name|m_header
argument_list|(
name|isHeader
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|horizontalHeader
name|QHeaderView
modifier|*
name|QAccessibleItemRow
operator|::
name|horizontalHeader
parameter_list|()
specifier|const
block|{
name|QHeaderView
modifier|*
name|header
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|m_header
condition|)
block|{
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTableView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|horizontalHeader
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTreeView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|header
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
block|}
return|return
name|header
return|;
block|}
end_function
begin_function
DECL|function|verticalHeader
name|QHeaderView
modifier|*
name|QAccessibleItemRow
operator|::
name|verticalHeader
parameter_list|()
specifier|const
block|{
name|QHeaderView
modifier|*
name|header
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
if|if
condition|(
specifier|const
name|QTableView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
name|header
operator|=
name|tv
operator|->
name|verticalHeader
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
name|header
return|;
block|}
end_function
begin_function
DECL|function|logicalFromChild
name|int
name|QAccessibleItemRow
operator|::
name|logicalFromChild
parameter_list|(
name|QHeaderView
modifier|*
name|header
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|int
name|logical
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|header
operator|->
name|sectionsHidden
argument_list|()
condition|)
block|{
name|int
name|kid
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|header
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|header
operator|->
name|isSectionHidden
argument_list|(
name|i
argument_list|)
condition|)
operator|++
name|kid
expr_stmt|;
if|if
condition|(
name|kid
operator|==
name|child
condition|)
block|{
name|logical
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|logical
operator|=
name|child
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|logical
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleItemRow
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QRect
name|r
decl_stmt|;
if|if
condition|(
name|view
operator|&&
name|view
operator|->
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|QHeaderView
modifier|*
name|header
init|=
name|horizontalHeader
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|child
condition|)
block|{
name|r
operator|=
name|header
operator|->
name|rect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|QHeaderView
modifier|*
name|vheader
init|=
name|verticalHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
name|int
name|w
init|=
name|vheader
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|header
operator|->
name|height
argument_list|()
decl_stmt|;
name|r
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
operator|--
name|child
expr_stmt|;
block|}
if|if
condition|(
name|child
condition|)
block|{
name|int
name|logical
init|=
name|logicalFromChild
argument_list|(
name|header
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|header
operator|->
name|sectionSize
argument_list|(
name|logical
argument_list|)
decl_stmt|;
name|r
operator|.
name|setRect
argument_list|(
name|header
operator|->
name|sectionViewportPosition
argument_list|(
name|logical
argument_list|)
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|header
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|translate
argument_list|(
name|header
operator|->
name|mapTo
argument_list|(
name|view
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|row
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|child
condition|)
block|{
name|QModelIndex
name|parent
init|=
name|row
operator|.
name|parent
argument_list|()
decl_stmt|;
specifier|const
name|int
name|colCount
init|=
name|row
operator|.
name|model
argument_list|()
operator|->
name|columnCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colCount
condition|;
operator|++
name|i
control|)
name|r
operator||=
name|view
operator|->
name|visualRect
argument_list|(
name|row
operator|.
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
operator|.
name|row
argument_list|()
argument_list|,
name|i
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|translate
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
operator|->
name|mapTo
argument_list|(
name|view
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QHeaderView
modifier|*
name|vheader
init|=
name|verticalHeader
argument_list|()
condition|)
block|{
comment|// include the section of the vertical header
name|QRect
name|re
decl_stmt|;
name|int
name|logicalRow
init|=
name|row
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|vheader
operator|->
name|sectionSize
argument_list|(
name|logicalRow
argument_list|)
decl_stmt|;
name|re
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|vheader
operator|->
name|sectionViewportPosition
argument_list|(
name|logicalRow
argument_list|)
argument_list|,
name|vheader
operator|->
name|width
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|re
operator|.
name|translate
argument_list|(
name|vheader
operator|->
name|mapTo
argument_list|(
name|view
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator||=
name|re
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|QHeaderView
modifier|*
name|vheader
init|=
name|verticalHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
name|int
name|logicalRow
init|=
name|row
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|vheader
operator|->
name|sectionSize
argument_list|(
name|logicalRow
argument_list|)
decl_stmt|;
name|r
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|vheader
operator|->
name|sectionViewportPosition
argument_list|(
name|logicalRow
argument_list|)
argument_list|,
name|vheader
operator|->
name|width
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|r
operator|.
name|translate
argument_list|(
name|vheader
operator|->
name|mapTo
argument_list|(
name|view
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|--
name|child
expr_stmt|;
block|}
if|if
condition|(
name|child
condition|)
block|{
name|r
operator|=
name|view
operator|->
name|visualRect
argument_list|(
name|childIndex
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|translate
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
operator|->
name|mapTo
argument_list|(
name|view
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|isNull
argument_list|()
condition|)
name|r
operator|.
name|translate
argument_list|(
name|view
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|treeLevel
name|int
name|QAccessibleItemRow
operator|::
name|treeLevel
parameter_list|()
specifier|const
block|{
name|int
name|level
init|=
literal|0
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|row
decl_stmt|;
while|while
condition|(
name|idx
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|idx
operator|=
name|idx
operator|.
name|parent
argument_list|()
expr_stmt|;
operator|++
name|level
expr_stmt|;
block|}
return|return
name|level
return|;
block|}
end_function
begin_function
DECL|function|text_helper
name|QString
name|QAccessibleItemRow
operator|::
name|text_helper
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|value
decl_stmt|;
if|if
condition|(
name|m_header
condition|)
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
name|verticalHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|child
operator|==
literal|1
condition|)
return|return
name|QString
argument_list|()
return|;
operator|--
name|child
expr_stmt|;
block|}
name|QHeaderView
modifier|*
name|header
init|=
name|horizontalHeader
argument_list|()
decl_stmt|;
name|int
name|logical
init|=
name|logicalFromChild
argument_list|(
name|header
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|value
operator|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|headerData
argument_list|(
name|logical
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|Qt
operator|::
name|AccessibleTextRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|headerData
argument_list|(
name|logical
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|child
condition|)
block|{
comment|// for one-column views (i.e. QListView)
if|if
condition|(
name|children
argument_list|()
operator|.
name|count
argument_list|()
operator|>=
literal|1
condition|)
name|child
operator|=
literal|1
expr_stmt|;
else|else
return|return
name|QString
argument_list|()
return|;
block|}
if|if
condition|(
name|verticalHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
name|int
name|logical
init|=
name|row
operator|.
name|row
argument_list|()
decl_stmt|;
name|value
operator|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|headerData
argument_list|(
name|logical
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|Qt
operator|::
name|AccessibleTextRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|headerData
argument_list|(
name|logical
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
else|else
block|{
operator|--
name|child
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QModelIndex
name|idx
init|=
name|childIndex
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|value
operator|=
name|idx
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|idx
argument_list|,
name|Qt
operator|::
name|AccessibleTextRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|=
name|idx
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|idx
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleItemRow
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|value
decl_stmt|;
if|if
condition|(
name|t
operator|==
name|Name
condition|)
block|{
name|value
operator|=
name|text_helper
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|==
name|Value
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
if|if
condition|(
name|child
operator|==
literal|0
condition|)
name|value
operator|=
name|QString
operator|::
name|number
argument_list|(
name|treeLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|value
operator|=
name|text_helper
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|t
operator|==
name|Description
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
if|if
condition|(
name|child
operator|==
literal|0
operator|&&
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
comment|// We store the tree coordinates of the current item in the description.
comment|// This enables some screen readers to report where the focus is
comment|// in a tree view. (works in JAWS). Also, Firefox does the same thing.
comment|// For instance the description "L2, 4 of 25 with 24" means
comment|// "L2": Tree Level 2
comment|// "4 of 25": We are item 4 out of in total 25 other siblings
comment|// "with 24": We have 24 children. (JAWS does not read this number)
comment|// level
name|int
name|level
init|=
name|treeLevel
argument_list|()
decl_stmt|;
name|QAbstractItemModel
modifier|*
name|m
init|=
name|view
operator|->
name|model
argument_list|()
decl_stmt|;
comment|// totalSiblings and itemIndex
name|QModelIndex
name|parent
init|=
name|row
operator|.
name|parent
argument_list|()
decl_stmt|;
name|int
name|rowCount
init|=
name|m
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|int
name|itemIndex
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|totalSiblings
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|sibling
init|=
name|row
operator|.
name|sibling
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|view
operator|->
name|isIndexHidden
argument_list|(
name|sibling
argument_list|)
condition|)
operator|++
name|totalSiblings
expr_stmt|;
if|if
condition|(
name|row
operator|==
name|sibling
condition|)
name|itemIndex
operator|=
name|totalSiblings
expr_stmt|;
block|}
name|int
name|totalChildren
init|=
name|m
operator|->
name|rowCount
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// JAWS does not report child count, so we do
comment|// this simple and efficient.
comment|// (don't check if they are all visible).
name|value
operator|=
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"L%1, %2 of %3 with %4"
argument_list|)
operator|.
name|arg
argument_list|(
name|level
argument_list|)
operator|.
name|arg
argument_list|(
name|itemIndex
argument_list|)
operator|.
name|arg
argument_list|(
name|totalSiblings
argument_list|)
operator|.
name|arg
argument_list|(
name|totalChildren
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|// QT_NO_TREEVIEW
block|{
if|if
condition|(
operator|!
name|m_header
condition|)
block|{
if|if
condition|(
name|child
operator|==
literal|0
operator|&&
name|children
argument_list|()
operator|.
name|count
argument_list|()
operator|>=
literal|1
condition|)
name|child
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|verticalHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
name|value
operator|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|headerData
argument_list|(
name|row
operator|.
name|row
argument_list|()
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
operator|--
name|child
expr_stmt|;
block|}
if|if
condition|(
name|child
condition|)
block|{
name|QModelIndex
name|idx
init|=
name|childIndex
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|value
operator|=
name|idx
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|idx
argument_list|,
name|Qt
operator|::
name|AccessibleDescriptionRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessibleItemRow
operator|::
name|setText
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|m_header
condition|)
block|{
if|if
condition|(
name|child
condition|)
name|view
operator|->
name|model
argument_list|()
operator|->
name|setHeaderData
argument_list|(
name|child
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|text
argument_list|)
expr_stmt|;
comment|// child == 0 means the cell to the left of the horizontal header, which is empty!?
block|}
else|else
block|{
if|if
condition|(
operator|!
name|child
condition|)
block|{
if|if
condition|(
name|children
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
name|child
operator|=
literal|1
expr_stmt|;
else|else
return|return;
block|}
if|if
condition|(
name|verticalHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
name|view
operator|->
name|model
argument_list|()
operator|->
name|setHeaderData
argument_list|(
name|row
operator|.
name|row
argument_list|()
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return;
block|}
operator|--
name|child
expr_stmt|;
block|}
name|QModelIndex
name|idx
init|=
name|childIndex
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
return|return;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Description
case|:
cast|const_cast
argument_list|<
name|QAbstractItemModel
operator|*
argument_list|>
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|)
operator|->
name|setData
argument_list|(
name|idx
argument_list|,
name|text
argument_list|,
name|Qt
operator|::
name|AccessibleDescriptionRole
argument_list|)
expr_stmt|;
break|break;
case|case
name|Value
case|:
cast|const_cast
argument_list|<
name|QAbstractItemModel
operator|*
argument_list|>
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|)
operator|->
name|setData
argument_list|(
name|idx
argument_list|,
name|text
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|childIndex
name|QModelIndex
name|QAccessibleItemRow
operator|::
name|childIndex
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QModelIndex
argument_list|>
name|kids
init|=
name|children
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|child
operator|>=
literal|1
operator|&&
name|child
operator|<=
name|kids
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|kids
operator|.
name|at
argument_list|(
name|child
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|children
name|QList
argument_list|<
name|QModelIndex
argument_list|>
name|QAccessibleItemRow
operator|::
name|children
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QModelIndex
argument_list|>
name|kids
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|row
operator|.
name|model
argument_list|()
operator|->
name|columnCount
argument_list|(
name|row
operator|.
name|parent
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|row
operator|.
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
operator|.
name|row
argument_list|()
argument_list|,
name|i
argument_list|,
name|row
operator|.
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|view
operator|->
name|isIndexHidden
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|kids
operator|<<
name|idx
expr_stmt|;
block|}
block|}
return|return
name|kids
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QAccessibleItemRow
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|m_header
condition|?
literal|true
else|:
name|row
operator|.
name|isValid
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|object
name|QObject
modifier|*
name|QAccessibleItemRow
operator|::
name|object
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleItemRow
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QHeaderView
modifier|*
name|header
init|=
name|horizontalHeader
argument_list|()
condition|)
block|{
name|count
operator|=
name|header
operator|->
name|count
argument_list|()
operator|-
name|header
operator|->
name|hiddenSectionCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
name|children
argument_list|()
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
if|if
condition|(
name|verticalHeader
argument_list|()
condition|)
operator|++
name|count
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|count
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleItemRow
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|iface
operator|||
name|iface
operator|->
name|role
argument_list|(
literal|0
argument_list|)
operator|!=
name|Row
condition|)
return|return
operator|-
literal|1
return|;
comment|//### meaningless code?
name|QList
argument_list|<
name|QModelIndex
argument_list|>
name|kids
init|=
name|children
argument_list|()
decl_stmt|;
name|QModelIndex
name|idx
init|=
cast|static_cast
argument_list|<
specifier|const
name|QAccessibleItemRow
operator|*
argument_list|>
argument_list|(
name|iface
argument_list|)
operator|->
name|row
decl_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|kids
operator|.
name|indexOf
argument_list|(
name|idx
argument_list|)
operator|+
literal|1
return|;
block|}
end_function
begin_function
DECL|function|relationTo
name|QAccessible
operator|::
name|Relation
name|QAccessibleItemRow
operator|::
name|relationTo
parameter_list|(
name|int
name|child
parameter_list|,
specifier|const
name|QAccessibleInterface
modifier|*
name|other
parameter_list|,
name|int
name|otherChild
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
operator|&&
operator|!
name|otherChild
operator|&&
name|other
operator|->
name|object
argument_list|()
operator|==
name|view
condition|)
return|return
name|Child
return|;
if|if
condition|(
operator|!
name|child
operator|&&
operator|!
name|otherChild
operator|&&
name|other
operator|==
name|this
condition|)
return|return
name|Self
return|;
if|if
condition|(
operator|!
name|child
operator|&&
name|otherChild
operator|&&
name|other
operator|==
name|this
condition|)
return|return
name|Ancestor
return|;
if|if
condition|(
name|child
operator|&&
name|otherChild
operator|&&
name|other
operator|==
name|this
condition|)
return|return
name|Sibling
return|;
return|return
name|Unrelated
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleItemRow
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|view
operator|||
operator|!
name|view
operator|->
name|isVisible
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
for|for
control|(
name|int
name|i
init|=
name|childCount
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|rect
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|toCursorAction
name|QAbstractItemView
operator|::
name|CursorAction
name|QAccessibleItemRow
operator|::
name|toCursorAction
parameter_list|(
name|QAccessible
operator|::
name|Relation
name|rel
parameter_list|)
block|{
switch|switch
condition|(
name|rel
condition|)
block|{
case|case
name|QAccessible
operator|::
name|Up
case|:
return|return
name|QAbstractItemView
operator|::
name|MoveUp
return|;
case|case
name|QAccessible
operator|::
name|Down
case|:
return|return
name|QAbstractItemView
operator|::
name|MoveDown
return|;
case|case
name|QAccessible
operator|::
name|Left
case|:
return|return
name|QAbstractItemView
operator|::
name|MoveLeft
return|;
case|case
name|QAccessible
operator|::
name|Right
case|:
return|return
name|QAbstractItemView
operator|::
name|MoveRight
return|;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// should never be reached.
return|return
name|QAbstractItemView
operator|::
name|MoveRight
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleItemRow
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|index
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|view
condition|)
return|return
operator|-
literal|1
return|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Ancestor
case|:
block|{
if|if
condition|(
operator|!
name|index
condition|)
return|return
operator|-
literal|1
return|;
name|QAccessibleItemView
modifier|*
name|ancestor
init|=
operator|new
name|QAccessibleItemView
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|1
condition|)
block|{
operator|*
name|iface
operator|=
name|ancestor
expr_stmt|;
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|>
literal|1
condition|)
block|{
name|int
name|ret
init|=
name|ancestor
operator|->
name|navigate
argument_list|(
name|Ancestor
argument_list|,
name|index
operator|-
literal|1
argument_list|,
name|iface
argument_list|)
decl_stmt|;
operator|delete
name|ancestor
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
case|case
name|Child
case|:
block|{
if|if
condition|(
operator|!
name|index
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|index
argument_list|<
literal|1
operator|&&
name|index
argument_list|>
name|childCount
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|index
return|;
block|}
case|case
name|Sibling
case|:
if|if
condition|(
name|index
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|ifaceParent
init|=
literal|0
decl_stmt|;
name|navigate
argument_list|(
name|Ancestor
argument_list|,
literal|1
argument_list|,
operator|&
name|ifaceParent
argument_list|)
expr_stmt|;
if|if
condition|(
name|ifaceParent
condition|)
block|{
name|int
name|entry
init|=
name|ifaceParent
operator|->
name|navigate
argument_list|(
name|Child
argument_list|,
name|index
argument_list|,
name|iface
argument_list|)
decl_stmt|;
operator|delete
name|ifaceParent
expr_stmt|;
return|return
name|entry
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
case|case
name|Up
case|:
case|case
name|Down
case|:
case|case
name|Left
case|:
case|case
name|Right
case|:
block|{
comment|// This is in the "not so nice" category. In order to find out which item
comment|// is geometrically around, we have to set the current index, navigate
comment|// and restore the index as well as the old selection
name|view
operator|->
name|setUpdatesEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|QModelIndex
name|oldIdx
init|=
name|view
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QModelIndex
argument_list|>
name|kids
init|=
name|children
argument_list|()
decl_stmt|;
specifier|const
name|QModelIndex
name|currentIndex
init|=
name|index
condition|?
name|kids
operator|.
name|at
argument_list|(
name|index
operator|-
literal|1
argument_list|)
else|:
name|QModelIndex
argument_list|(
name|row
argument_list|)
decl_stmt|;
specifier|const
name|QItemSelection
name|oldSelection
init|=
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|selection
argument_list|()
decl_stmt|;
name|view
operator|->
name|setCurrentIndex
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
specifier|const
name|QModelIndex
name|idx
init|=
name|view
operator|->
name|moveCursor
argument_list|(
name|toCursorAction
argument_list|(
name|relation
argument_list|)
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|view
operator|->
name|setCurrentIndex
argument_list|(
name|oldIdx
argument_list|)
expr_stmt|;
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|oldSelection
argument_list|,
name|QItemSelectionModel
operator|::
name|ClearAndSelect
argument_list|)
expr_stmt|;
name|view
operator|->
name|setUpdatesEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|idx
operator|.
name|parent
argument_list|()
operator|!=
name|row
operator|.
name|parent
argument_list|()
operator|||
name|idx
operator|.
name|row
argument_list|()
operator|!=
name|row
operator|.
name|row
argument_list|()
condition|)
operator|*
name|iface
operator|=
operator|new
name|QAccessibleItemRow
argument_list|(
name|view
argument_list|,
name|idx
argument_list|)
expr_stmt|;
return|return
name|index
condition|?
name|kids
operator|.
name|indexOf
argument_list|(
name|idx
argument_list|)
operator|+
literal|1
else|:
literal|0
return|;
block|}
default|default:
break|break;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleItemRow
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
if|if
condition|(
name|horizontalHeader
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|Row
return|;
return|return
name|ColumnHeader
return|;
block|}
return|return
name|TreeItem
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QListView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
return|return
name|ListItem
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|Row
return|;
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|verticalHeader
argument_list|()
condition|)
return|return
name|RowHeader
return|;
block|}
if|if
condition|(
name|m_header
condition|)
return|return
name|ColumnHeader
return|;
endif|#
directive|endif
block|}
return|return
name|Cell
return|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleItemRow
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|State
name|st
init|=
name|Normal
decl_stmt|;
if|if
condition|(
operator|!
name|view
condition|)
return|return
name|st
return|;
name|QAccessibleInterface
modifier|*
name|parent
init|=
literal|0
decl_stmt|;
name|QRect
name|globalRect
decl_stmt|;
if|if
condition|(
name|navigate
argument_list|(
name|Ancestor
argument_list|,
literal|1
argument_list|,
operator|&
name|parent
argument_list|)
operator|==
literal|0
condition|)
block|{
name|globalRect
operator|=
name|parent
operator|->
name|rect
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|parent
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|globalRect
operator|.
name|intersects
argument_list|(
name|rect
argument_list|(
name|child
argument_list|)
argument_list|)
condition|)
name|st
operator||=
name|Invisible
expr_stmt|;
if|if
condition|(
operator|!
name|horizontalHeader
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|st
operator|&
name|Invisible
operator|)
condition|)
block|{
if|if
condition|(
name|child
condition|)
block|{
if|if
condition|(
name|QHeaderView
modifier|*
name|vheader
init|=
name|verticalHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|vheader
operator|->
name|isVisible
argument_list|()
condition|)
name|st
operator||=
name|Invisible
expr_stmt|;
block|}
operator|--
name|child
expr_stmt|;
block|}
if|if
condition|(
name|child
condition|)
block|{
name|QModelIndex
name|idx
init|=
name|childIndex
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|st
return|;
if|if
condition|(
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|isSelected
argument_list|(
name|idx
argument_list|)
condition|)
name|st
operator||=
name|Selected
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|currentIndex
argument_list|()
operator|==
name|idx
condition|)
name|st
operator||=
name|Focused
expr_stmt|;
if|if
condition|(
name|idx
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|idx
argument_list|,
name|Qt
operator|::
name|CheckStateRole
argument_list|)
operator|.
name|toInt
argument_list|()
operator|==
name|Qt
operator|::
name|Checked
condition|)
name|st
operator||=
name|Checked
expr_stmt|;
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|idx
operator|.
name|flags
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|ItemIsSelectable
condition|)
block|{
name|st
operator||=
name|Selectable
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|MultiSelection
condition|)
name|st
operator||=
name|MultiSelectable
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ExtendedSelection
condition|)
name|st
operator||=
name|ExtSelectable
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|row
operator|.
name|flags
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|ItemIsSelectable
condition|)
block|{
name|st
operator||=
name|Selectable
expr_stmt|;
name|st
operator||=
name|Focusable
expr_stmt|;
block|}
if|if
condition|(
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|isRowSelected
argument_list|(
name|row
operator|.
name|row
argument_list|()
argument_list|,
name|row
operator|.
name|parent
argument_list|()
argument_list|)
condition|)
name|st
operator||=
name|Selected
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|currentIndex
argument_list|()
operator|.
name|row
argument_list|()
operator|==
name|row
operator|.
name|row
argument_list|()
condition|)
name|st
operator||=
name|Focused
expr_stmt|;
block|}
block|}
block|}
return|return
name|st
return|;
block|}
end_function
begin_function
DECL|function|userActionCount
name|int
name|QAccessibleItemRow
operator|::
name|userActionCount
parameter_list|(
name|int
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|actionText
name|QString
name|QAccessibleItemRow
operator|::
name|actionText
parameter_list|(
name|int
parameter_list|,
name|Text
parameter_list|,
name|int
parameter_list|)
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rowAt
specifier|static
name|QItemSelection
name|rowAt
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|)
block|{
return|return
name|QItemSelection
argument_list|(
name|idx
operator|.
name|sibling
argument_list|(
name|idx
operator|.
name|row
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
name|idx
operator|.
name|sibling
argument_list|(
name|idx
operator|.
name|row
argument_list|()
argument_list|,
name|idx
operator|.
name|model
argument_list|()
operator|->
name|columnCount
argument_list|(
name|idx
operator|.
name|parent
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|doAction
name|bool
name|QAccessibleItemRow
operator|::
name|doAction
parameter_list|(
name|int
name|action
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
comment|/*params*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|view
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|verticalHeader
argument_list|()
condition|)
operator|--
name|child
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|child
condition|?
name|childIndex
argument_list|(
name|child
argument_list|)
else|:
name|QModelIndex
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
init|=
name|QItemSelectionModel
operator|::
name|NoUpdate
decl_stmt|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|SetFocus
case|:
name|view
operator|->
name|setCurrentIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|ExtendSelection
case|:
if|if
condition|(
operator|!
name|child
condition|)
return|return
literal|false
return|;
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|QItemSelection
argument_list|(
name|view
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|idx
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|SelectCurrent
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|Select
case|:
name|command
operator|=
name|QItemSelectionModel
operator|::
name|ClearAndSelect
expr_stmt|;
break|break;
case|case
name|ClearSelection
case|:
name|command
operator|=
name|QItemSelectionModel
operator|::
name|Clear
expr_stmt|;
break|break;
case|case
name|RemoveSelection
case|:
name|command
operator|=
name|QItemSelectionModel
operator|::
name|Deselect
expr_stmt|;
break|break;
case|case
name|AddToSelection
case|:
name|command
operator|=
name|QItemSelectionModel
operator|::
name|SelectCurrent
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|command
operator|==
name|QItemSelectionModel
operator|::
name|NoUpdate
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|child
condition|)
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|idx
argument_list|,
name|command
argument_list|)
expr_stmt|;
else|else
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|rowAt
argument_list|(
name|row
argument_list|)
argument_list|,
name|command
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_class
DECL|class|ModelIndexIterator
class|class
name|ModelIndexIterator
block|{
public|public:
DECL|function|ModelIndexIterator
name|ModelIndexIterator
parameter_list|(
name|QAbstractItemView
modifier|*
name|view
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|start
init|=
name|QModelIndex
argument_list|()
parameter_list|)
member_init_list|:
name|m_view
argument_list|(
name|view
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
name|list
operator|=
name|qobject_cast
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
name|m_view
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
name|tree
operator|=
name|qobject_cast
argument_list|<
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|m_view
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
name|table
operator|=
name|qobject_cast
argument_list|<
name|QTableView
operator|*
argument_list|>
argument_list|(
name|m_view
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|start
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|m_current
operator|=
name|start
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_view
operator|&&
name|m_view
operator|->
name|model
argument_list|()
condition|)
block|{
name|m_current
operator|=
name|view
operator|->
name|rootIndex
argument_list|()
operator|.
name|isValid
argument_list|()
condition|?
name|view
operator|->
name|rootIndex
argument_list|()
operator|.
name|child
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|view
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|next
name|bool
name|next
parameter_list|(
name|int
name|count
init|=
literal|1
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
do|do
block|{
if|if
condition|(
name|m_current
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QAbstractItemModel
modifier|*
name|m
init|=
name|m_current
operator|.
name|model
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
if|if
condition|(
name|tree
operator|&&
name|m_current
operator|.
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|m_current
argument_list|)
operator|&&
name|tree
operator|->
name|isExpanded
argument_list|(
name|m_current
argument_list|)
condition|)
block|{
name|m_current
operator|=
name|m_current
operator|.
name|child
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|int
name|row
init|=
name|m_current
operator|.
name|row
argument_list|()
decl_stmt|;
name|QModelIndex
name|par
init|=
name|m_current
operator|.
name|parent
argument_list|()
decl_stmt|;
comment|// Go up to the parent if we reach the end of the rows
comment|// If m_curent becomses invalid, stop going up.
while|while
condition|(
name|row
operator|+
literal|1
operator|>=
name|m
operator|->
name|rowCount
argument_list|(
name|par
argument_list|)
condition|)
block|{
name|m_current
operator|=
name|par
expr_stmt|;
if|if
condition|(
name|m_current
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|row
operator|=
name|m_current
operator|.
name|row
argument_list|()
expr_stmt|;
name|par
operator|=
name|m_current
operator|.
name|parent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
literal|0
expr_stmt|;
name|par
operator|=
name|QModelIndex
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|m_current
operator|.
name|isValid
argument_list|()
condition|)
name|m_current
operator|=
name|m_current
operator|.
name|sibling
argument_list|(
name|row
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|isHidden
argument_list|()
condition|)
do|;
block|}
return|return
name|m_current
operator|.
name|isValid
argument_list|()
return|;
block|}
DECL|function|isHidden
name|bool
name|isHidden
parameter_list|()
specifier|const
block|{
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
block|}
elseif|else
if|if
condition|(
name|list
condition|)
block|{
return|return
name|list
operator|->
name|isRowHidden
argument_list|(
name|m_current
operator|.
name|row
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
block|}
elseif|else
if|if
condition|(
name|tree
condition|)
block|{
return|return
name|tree
operator|->
name|isRowHidden
argument_list|(
name|m_current
operator|.
name|row
argument_list|()
argument_list|,
name|m_current
operator|.
name|parent
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
block|}
elseif|else
if|if
condition|(
name|table
condition|)
block|{
return|return
name|table
operator|->
name|isRowHidden
argument_list|(
name|m_current
operator|.
name|row
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
block|}
return|return
literal|false
return|;
block|}
DECL|function|current
name|QModelIndex
name|current
parameter_list|()
specifier|const
block|{
return|return
name|m_current
return|;
block|}
private|private:
DECL|member|m_current
name|QModelIndex
name|m_current
decl_stmt|;
DECL|member|m_view
name|QAbstractItemView
modifier|*
name|m_view
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
DECL|member|tree
name|QTreeView
modifier|*
name|tree
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
DECL|member|list
name|QListView
modifier|*
name|list
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
DECL|member|table
name|QTableView
modifier|*
name|table
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|QAccessibleItemView
name|QAccessibleItemView
operator|::
name|QAccessibleItemView
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleAbstractScrollArea
argument_list|(
name|w
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_scrollarea_viewport"
argument_list|)
condition|?
name|w
operator|->
name|parentWidget
argument_list|()
else|:
name|w
argument_list|)
block|{
name|atVP
operator|=
name|w
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_scrollarea_viewport"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|horizontalHeader
name|QHeaderView
modifier|*
name|QAccessibleItemView
operator|::
name|horizontalHeader
parameter_list|()
specifier|const
block|{
name|QHeaderView
modifier|*
name|header
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTableView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|horizontalHeader
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTreeView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|header
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|header
return|;
block|}
end_function
begin_function
DECL|function|verticalHeader
name|QHeaderView
modifier|*
name|QAccessibleItemView
operator|::
name|verticalHeader
parameter_list|()
specifier|const
block|{
name|QHeaderView
modifier|*
name|header
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTableView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|verticalHeader
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|header
return|;
block|}
end_function
begin_function
DECL|function|isValidChildRole
name|bool
name|QAccessibleItemView
operator|::
name|isValidChildRole
parameter_list|(
name|QAccessible
operator|::
name|Role
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|atViewport
argument_list|()
condition|)
block|{
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|role
operator|==
name|TreeItem
operator|||
name|role
operator|==
name|Row
operator|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QListView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|role
operator|==
name|ListItem
operator|)
return|;
endif|#
directive|endif
block|}
comment|// TableView
return|return
name|role
operator|==
name|Row
return|;
block|}
else|else
block|{
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|role
operator|==
name|Tree
operator|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QListView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|role
operator|==
name|List
operator|)
return|;
endif|#
directive|endif
block|}
comment|// TableView
return|return
operator|(
name|role
operator|==
name|Table
operator|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|object
name|QObject
modifier|*
name|QAccessibleItemView
operator|::
name|object
parameter_list|()
specifier|const
block|{
name|QObject
modifier|*
name|view
init|=
name|QAccessibleAbstractScrollArea
operator|::
name|object
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|atViewport
argument_list|()
condition|)
name|view
operator|=
name|qobject_cast
argument_list|<
specifier|const
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
operator|->
name|viewport
argument_list|()
expr_stmt|;
return|return
name|view
return|;
block|}
end_function
begin_function
DECL|function|itemView
name|QAbstractItemView
modifier|*
name|QAccessibleItemView
operator|::
name|itemView
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|QAccessibleAbstractScrollArea
operator|::
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleItemView
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|atViewport
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|iface
operator|||
operator|!
name|isValidChildRole
argument_list|(
name|iface
operator|->
name|role
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|entry
init|=
operator|-
literal|1
decl_stmt|;
comment|// ### This will fail if a row is hidden.
specifier|const
name|QAccessibleItemRow
modifier|*
name|ifRow
init|=
cast|static_cast
argument_list|<
specifier|const
name|QAccessibleItemRow
operator|*
argument_list|>
argument_list|(
name|iface
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifRow
operator|->
name|horizontalHeader
argument_list|()
condition|)
return|return
literal|1
return|;
name|QModelIndex
name|idx
init|=
name|ifRow
operator|->
name|row
decl_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|entry
operator|=
name|entryFromIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|horizontalHeader
argument_list|()
condition|)
operator|++
name|entry
expr_stmt|;
return|return
name|entry
return|;
block|}
else|else
block|{
return|return
name|QAccessibleAbstractScrollArea
operator|::
name|indexOfChild
argument_list|(
name|iface
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|childIndex
name|QModelIndex
name|QAccessibleItemView
operator|::
name|childIndex
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|atViewport
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|ModelIndexIterator
name|it
argument_list|(
name|itemView
argument_list|()
argument_list|)
decl_stmt|;
name|it
operator|.
name|next
argument_list|(
name|child
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|it
operator|.
name|current
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|entryFromIndex
name|int
name|QAccessibleItemView
operator|::
name|entryFromIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|int
name|entry
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
block|}
elseif|else
if|if
condition|(
name|QTreeView
modifier|*
name|tree
init|=
name|qobject_cast
argument_list|<
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
block|{
name|entry
operator|=
name|tree
operator|->
name|visualIndex
argument_list|(
name|index
argument_list|)
operator|+
literal|1
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
block|}
elseif|else
if|if
condition|(
name|QListView
modifier|*
name|list
init|=
name|qobject_cast
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
block|{
name|entry
operator|=
name|list
operator|->
name|visualIndex
argument_list|(
name|index
argument_list|)
operator|+
literal|1
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
block|}
elseif|else
if|if
condition|(
name|QTableView
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
name|QTableView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
block|{
name|entry
operator|=
name|table
operator|->
name|visualIndex
argument_list|(
name|index
argument_list|)
operator|+
literal|1
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|entry
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleItemView
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|atViewport
argument_list|()
condition|)
block|{
if|if
condition|(
name|itemView
argument_list|()
operator|->
name|model
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|QAbstractItemModel
modifier|*
name|m
init|=
name|itemView
argument_list|()
operator|->
name|model
argument_list|()
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|m
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
name|ModelIndexIterator
name|it
argument_list|(
name|itemView
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|next
argument_list|()
condition|)
block|{
operator|++
name|count
expr_stmt|;
block|}
if|if
condition|(
name|horizontalHeader
argument_list|()
condition|)
operator|++
name|count
expr_stmt|;
return|return
name|count
return|;
block|}
else|else
block|{
return|return
name|QAccessibleAbstractScrollArea
operator|::
name|childCount
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleItemView
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|atViewport
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|QAccessibleAbstractScrollArea
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
return|;
name|QAccessibleItemRow
name|item
argument_list|(
name|itemView
argument_list|()
argument_list|,
name|childIndex
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|item
operator|.
name|text
argument_list|(
name|t
argument_list|,
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|QString
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
name|QAccessibleAbstractScrollArea
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessibleItemView
operator|::
name|setText
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|atViewport
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|child
condition|)
block|{
name|QAccessibleAbstractScrollArea
operator|::
name|setText
argument_list|(
name|t
argument_list|,
name|child
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return;
block|}
name|QAccessibleItemRow
name|item
argument_list|(
name|itemView
argument_list|()
argument_list|,
name|childIndex
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
name|item
operator|.
name|setText
argument_list|(
name|t
argument_list|,
literal|1
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QAccessibleAbstractScrollArea
operator|::
name|setText
argument_list|(
name|t
argument_list|,
name|child
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleItemView
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|atViewport
argument_list|()
condition|)
block|{
name|QRect
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|child
condition|)
block|{
comment|// Make sure that the rect *include* the vertical and horizontal headers, while
comment|// not including the potential vertical and horizontal scrollbars.
name|QAbstractItemView
modifier|*
name|w
init|=
name|itemView
argument_list|()
decl_stmt|;
name|int
name|vscrollWidth
init|=
literal|0
decl_stmt|;
specifier|const
name|QScrollBar
modifier|*
name|sb
init|=
name|w
operator|->
name|verticalScrollBar
argument_list|()
decl_stmt|;
if|if
condition|(
name|sb
operator|&&
name|sb
operator|->
name|isVisible
argument_list|()
condition|)
name|vscrollWidth
operator|=
name|sb
operator|->
name|width
argument_list|()
expr_stmt|;
name|int
name|hscrollHeight
init|=
literal|0
decl_stmt|;
name|sb
operator|=
name|w
operator|->
name|horizontalScrollBar
argument_list|()
expr_stmt|;
if|if
condition|(
name|sb
operator|&&
name|sb
operator|->
name|isVisible
argument_list|()
condition|)
name|hscrollHeight
operator|=
name|sb
operator|->
name|height
argument_list|()
expr_stmt|;
name|QPoint
name|globalPos
init|=
name|w
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|=
name|w
operator|->
name|rect
argument_list|()
operator|.
name|translated
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|isRightToLeft
argument_list|()
condition|)
block|{
name|r
operator|.
name|adjust
argument_list|(
name|vscrollWidth
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|hscrollHeight
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
name|vscrollWidth
argument_list|,
operator|-
name|hscrollHeight
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QAccessibleInterface
modifier|*
name|iface
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|navigate
argument_list|(
name|Child
argument_list|,
name|child
argument_list|,
operator|&
name|iface
argument_list|)
operator|==
literal|0
condition|)
block|{
name|r
operator|=
name|iface
operator|->
name|rect
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|iface
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
else|else
block|{
name|QRect
name|r
init|=
name|QAccessibleAbstractScrollArea
operator|::
name|rect
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
comment|// include the potential vertical and horizontal headers
specifier|const
name|QHeaderView
modifier|*
name|header
init|=
name|verticalHeader
argument_list|()
decl_stmt|;
name|int
name|headerWidth
init|=
operator|(
name|header
operator|&&
name|header
operator|->
name|isVisible
argument_list|()
operator|)
condition|?
name|header
operator|->
name|width
argument_list|()
else|:
literal|0
decl_stmt|;
name|header
operator|=
name|horizontalHeader
argument_list|()
expr_stmt|;
name|int
name|headerHeight
init|=
operator|(
name|header
operator|&&
name|header
operator|->
name|isVisible
argument_list|()
operator|)
condition|?
name|header
operator|->
name|height
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|itemView
argument_list|()
operator|->
name|isRightToLeft
argument_list|()
condition|)
block|{
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
operator|-
name|headerHeight
argument_list|,
name|headerWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|adjust
argument_list|(
operator|-
name|headerWidth
argument_list|,
operator|-
name|headerHeight
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleItemView
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|atViewport
argument_list|()
condition|)
block|{
name|QPoint
name|p
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|childCount
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|rect
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|QAccessibleAbstractScrollArea
operator|::
name|childAt
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleItemView
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|(
operator|!
name|atViewport
argument_list|()
operator|&&
name|child
operator|)
operator|||
operator|(
name|atViewport
argument_list|()
operator|&&
name|child
operator|==
literal|0
operator|)
condition|)
block|{
name|QAbstractItemView
modifier|*
name|view
init|=
name|itemView
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
if|if
condition|(
name|qobject_cast
argument_list|<
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
return|return
name|Table
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_LISTVIEW
if|if
condition|(
name|qobject_cast
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
return|return
name|List
return|;
endif|#
directive|endif
return|return
name|Tree
return|;
block|}
if|if
condition|(
name|atViewport
argument_list|()
condition|)
block|{
if|if
condition|(
name|child
condition|)
return|return
name|Row
return|;
block|}
return|return
name|QAccessibleAbstractScrollArea
operator|::
name|role
argument_list|(
name|child
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleItemView
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|State
name|st
init|=
name|Normal
decl_stmt|;
if|if
condition|(
name|itemView
argument_list|()
operator|==
literal|0
condition|)
return|return
name|State
argument_list|(
name|Unavailable
argument_list|)
return|;
name|bool
name|queryViewPort
init|=
operator|(
name|atViewport
argument_list|()
operator|&&
name|child
operator|==
literal|0
operator|)
operator|||
operator|(
operator|!
name|atViewport
argument_list|()
operator|&&
name|child
operator|==
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|queryViewPort
condition|)
block|{
if|if
condition|(
name|itemView
argument_list|()
operator|->
name|selectionMode
argument_list|()
operator|!=
name|QAbstractItemView
operator|::
name|NoSelection
condition|)
block|{
name|st
operator||=
name|Selectable
expr_stmt|;
name|st
operator||=
name|Focusable
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|atViewport
argument_list|()
condition|)
block|{
comment|// children of viewport
if|if
condition|(
name|horizontalHeader
argument_list|()
condition|)
operator|--
name|child
expr_stmt|;
if|if
condition|(
name|child
condition|)
block|{
name|QAccessibleItemRow
name|item
argument_list|(
name|itemView
argument_list|()
argument_list|,
name|childIndex
argument_list|(
name|child
argument_list|)
argument_list|)
decl_stmt|;
name|st
operator||=
name|item
operator|.
name|state
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|atViewport
argument_list|()
operator|&&
name|child
operator|!=
literal|1
condition|)
block|{
name|st
operator|=
name|QAccessibleAbstractScrollArea
operator|::
name|state
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|st
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QAccessibleItemView
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|atViewport
argument_list|()
condition|)
return|return
name|QAccessibleWidgetEx
operator|::
name|isValid
argument_list|()
return|;
else|else
return|return
name|QAccessibleAbstractScrollArea
operator|::
name|isValid
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleItemView
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|index
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|atViewport
argument_list|()
condition|)
block|{
if|if
condition|(
name|relation
operator|==
name|Ancestor
operator|&&
name|index
operator|==
literal|1
condition|)
block|{
operator|*
name|iface
operator|=
operator|new
name|QAccessibleItemView
argument_list|(
name|itemView
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|relation
operator|==
name|Child
operator|&&
name|index
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|horizontalHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|index
operator|==
literal|1
condition|)
block|{
operator|*
name|iface
operator|=
operator|new
name|QAccessibleItemRow
argument_list|(
name|itemView
argument_list|()
argument_list|,
name|QModelIndex
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
operator|--
name|index
expr_stmt|;
block|}
comment|//###JAS hidden rows..
name|QModelIndex
name|idx
init|=
name|childIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|.
name|isValid
argument_list|()
condition|)
block|{
operator|*
name|iface
operator|=
operator|new
name|QAccessibleItemRow
argument_list|(
name|itemView
argument_list|()
argument_list|,
name|idx
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|relation
operator|==
name|Sibling
operator|&&
name|index
operator|>=
literal|1
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|parent
init|=
operator|new
name|QAccessibleItemView
argument_list|(
name|itemView
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|parent
operator|->
name|navigate
argument_list|(
name|Child
argument_list|,
name|index
argument_list|,
name|iface
argument_list|)
return|;
block|}
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|QAccessibleAbstractScrollArea
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|index
argument_list|,
name|iface
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|/* returns the model index for a given row and column */
end_comment
begin_function
DECL|function|index
name|QModelIndex
name|QAccessibleItemView
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
return|return
name|itemView
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|accessibleAt
name|QAccessibleInterface
modifier|*
name|QAccessibleItemView
operator|::
name|accessibleAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|QWidget
modifier|*
name|indexWidget
init|=
name|itemView
argument_list|()
operator|->
name|indexWidget
argument_list|(
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|indexWidget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/* We don't have a concept of a "caption" in Qt's standard widgets */
end_comment
begin_function
DECL|function|caption
name|QAccessibleInterface
modifier|*
name|QAccessibleItemView
operator|::
name|caption
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/* childIndex is row * columnCount + columnIndex */
end_comment
begin_function
DECL|function|childIndex
name|int
name|QAccessibleItemView
operator|::
name|childIndex
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
return|return
name|rowIndex
operator|*
name|itemView
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
operator|+
name|columnIndex
return|;
block|}
end_function
begin_comment
comment|/* Return the header data as column description */
end_comment
begin_function
DECL|function|columnDescription
name|QString
name|QAccessibleItemView
operator|::
name|columnDescription
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|itemView
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|headerData
argument_list|(
name|column
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/* We don't support column spanning atm */
end_comment
begin_function
DECL|function|columnSpan
name|int
name|QAccessibleItemView
operator|::
name|columnSpan
parameter_list|(
name|int
comment|/* row */
parameter_list|,
name|int
comment|/* column */
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
end_function
begin_comment
comment|/* Return the horizontal header view */
end_comment
begin_function
DECL|function|columnHeader
name|QAccessibleInterface
modifier|*
name|QAccessibleItemView
operator|::
name|columnHeader
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
if|if
condition|(
name|QTreeView
modifier|*
name|tree
init|=
name|qobject_cast
argument_list|<
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|tree
operator|->
name|header
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
if|if
condition|(
name|QTableView
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
name|QTableView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|table
operator|->
name|horizontalHeader
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|columnIndex
name|int
name|QAccessibleItemView
operator|::
name|columnIndex
parameter_list|(
name|int
name|childIndex
parameter_list|)
block|{
name|int
name|columnCount
init|=
name|itemView
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|columnCount
condition|)
return|return
literal|0
return|;
return|return
name|childIndex
operator|%
name|columnCount
return|;
block|}
end_function
begin_function
DECL|function|columnCount
name|int
name|QAccessibleItemView
operator|::
name|columnCount
parameter_list|()
block|{
return|return
name|itemView
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rowCount
name|int
name|QAccessibleItemView
operator|::
name|rowCount
parameter_list|()
block|{
return|return
name|itemView
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|selectedColumnCount
name|int
name|QAccessibleItemView
operator|::
name|selectedColumnCount
parameter_list|()
block|{
return|return
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedColumns
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|selectedRowCount
name|int
name|QAccessibleItemView
operator|::
name|selectedRowCount
parameter_list|()
block|{
return|return
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedRows
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rowDescription
name|QString
name|QAccessibleItemView
operator|::
name|rowDescription
parameter_list|(
name|int
name|row
parameter_list|)
block|{
return|return
name|itemView
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|headerData
argument_list|(
name|row
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/* We don't support row spanning */
end_comment
begin_function
DECL|function|rowSpan
name|int
name|QAccessibleItemView
operator|::
name|rowSpan
parameter_list|(
name|int
comment|/*row*/
parameter_list|,
name|int
comment|/*column*/
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|rowHeader
name|QAccessibleInterface
modifier|*
name|QAccessibleItemView
operator|::
name|rowHeader
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
if|if
condition|(
name|QTableView
modifier|*
name|table
init|=
name|qobject_cast
argument_list|<
name|QTableView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|()
argument_list|)
condition|)
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|table
operator|->
name|verticalHeader
argument_list|()
argument_list|)
return|;
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|rowIndex
name|int
name|QAccessibleItemView
operator|::
name|rowIndex
parameter_list|(
name|int
name|childIndex
parameter_list|)
block|{
name|int
name|columnCount
init|=
name|itemView
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|columnCount
condition|)
return|return
literal|0
return|;
return|return
name|int
argument_list|(
name|childIndex
operator|/
name|columnCount
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selectedRows
name|int
name|QAccessibleItemView
operator|::
name|selectedRows
parameter_list|(
name|int
name|maxRows
parameter_list|,
name|QList
argument_list|<
name|int
argument_list|>
modifier|*
name|rows
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|rows
argument_list|)
expr_stmt|;
specifier|const
name|QModelIndexList
name|selRows
init|=
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedRows
argument_list|()
decl_stmt|;
name|int
name|maxCount
init|=
name|qMin
argument_list|(
name|selRows
operator|.
name|count
argument_list|()
argument_list|,
name|maxRows
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxCount
condition|;
operator|++
name|i
control|)
name|rows
operator|->
name|append
argument_list|(
name|selRows
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|maxCount
return|;
block|}
end_function
begin_function
DECL|function|selectedColumns
name|int
name|QAccessibleItemView
operator|::
name|selectedColumns
parameter_list|(
name|int
name|maxColumns
parameter_list|,
name|QList
argument_list|<
name|int
argument_list|>
modifier|*
name|columns
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|columns
argument_list|)
expr_stmt|;
specifier|const
name|QModelIndexList
name|selColumns
init|=
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedColumns
argument_list|()
decl_stmt|;
name|int
name|maxCount
init|=
name|qMin
argument_list|(
name|selColumns
operator|.
name|count
argument_list|()
argument_list|,
name|maxColumns
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxCount
condition|;
operator|++
name|i
control|)
name|columns
operator|->
name|append
argument_list|(
name|selColumns
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|maxCount
return|;
block|}
end_function
begin_comment
comment|/* Qt widgets don't have a concept of a summary */
end_comment
begin_function
DECL|function|summary
name|QAccessibleInterface
modifier|*
name|QAccessibleItemView
operator|::
name|summary
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|isColumnSelected
name|bool
name|QAccessibleItemView
operator|::
name|isColumnSelected
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
operator|->
name|isColumnSelected
argument_list|(
name|column
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isRowSelected
name|bool
name|QAccessibleItemView
operator|::
name|isRowSelected
parameter_list|(
name|int
name|row
parameter_list|)
block|{
return|return
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
operator|->
name|isRowSelected
argument_list|(
name|row
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isSelected
name|bool
name|QAccessibleItemView
operator|::
name|isSelected
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
return|return
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
operator|->
name|isSelected
argument_list|(
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selectRow
name|void
name|QAccessibleItemView
operator|::
name|selectRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|QItemSelectionModel
modifier|*
name|s
init|=
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
decl_stmt|;
name|s
operator|->
name|select
argument_list|(
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
operator||
name|QItemSelectionModel
operator|::
name|Rows
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectColumn
name|void
name|QAccessibleItemView
operator|::
name|selectColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|QItemSelectionModel
modifier|*
name|s
init|=
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
decl_stmt|;
name|s
operator|->
name|select
argument_list|(
name|index
argument_list|(
literal|0
argument_list|,
name|column
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
operator||
name|QItemSelectionModel
operator|::
name|Columns
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unselectRow
name|void
name|QAccessibleItemView
operator|::
name|unselectRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|QItemSelectionModel
modifier|*
name|s
init|=
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
decl_stmt|;
name|s
operator|->
name|select
argument_list|(
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|Deselect
operator||
name|QItemSelectionModel
operator|::
name|Rows
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unselectColumn
name|void
name|QAccessibleItemView
operator|::
name|unselectColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|QItemSelectionModel
modifier|*
name|s
init|=
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
decl_stmt|;
name|s
operator|->
name|select
argument_list|(
name|index
argument_list|(
literal|0
argument_list|,
name|column
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|Deselect
operator||
name|QItemSelectionModel
operator|::
name|Columns
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cellAtIndex
name|void
name|QAccessibleItemView
operator|::
name|cellAtIndex
parameter_list|(
name|int
name|index
parameter_list|,
name|int
modifier|*
name|row
parameter_list|,
name|int
modifier|*
name|column
parameter_list|,
name|int
modifier|*
name|rSpan
parameter_list|,
name|int
modifier|*
name|cSpan
parameter_list|,
name|bool
modifier|*
name|isSelect
parameter_list|)
block|{
operator|*
name|row
operator|=
name|rowIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
operator|*
name|column
operator|=
name|columnIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
operator|*
name|rSpan
operator|=
name|rowSpan
argument_list|(
operator|*
name|row
argument_list|,
operator|*
name|column
argument_list|)
expr_stmt|;
operator|*
name|cSpan
operator|=
name|columnSpan
argument_list|(
operator|*
name|row
argument_list|,
operator|*
name|column
argument_list|)
expr_stmt|;
operator|*
name|isSelect
operator|=
name|isSelected
argument_list|(
operator|*
name|row
argument_list|,
operator|*
name|column
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \class QAccessibleHeader   \brief The QAccessibleHeader class implements the QAccessibleInterface for header widgets.   \internal    \ingroup accessibility */
end_comment
begin_comment
comment|/*!   Constructs a QAccessibleHeader object for \a w. */
end_comment
begin_constructor
DECL|function|QAccessibleHeader
name|QAccessibleHeader
operator|::
name|QAccessibleHeader
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|w
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|header
argument_list|()
argument_list|)
expr_stmt|;
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"sectionClicked(int)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! Returns the QHeaderView. */
end_comment
begin_function
DECL|function|header
name|QHeaderView
modifier|*
name|QAccessibleHeader
operator|::
name|header
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QHeaderView
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|rect
name|QRect
name|QAccessibleHeader
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|QAccessibleWidgetEx
operator|::
name|rect
argument_list|(
literal|0
argument_list|)
return|;
name|QHeaderView
modifier|*
name|h
init|=
name|header
argument_list|()
decl_stmt|;
name|QPoint
name|zero
init|=
name|h
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sectionSize
init|=
name|h
operator|->
name|sectionSize
argument_list|(
name|child
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|sectionPos
init|=
name|h
operator|->
name|sectionPosition
argument_list|(
name|child
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|h
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|QRect
argument_list|(
name|zero
operator|.
name|x
argument_list|()
operator|+
name|sectionPos
argument_list|,
name|zero
operator|.
name|y
argument_list|()
argument_list|,
name|sectionSize
argument_list|,
name|h
operator|->
name|height
argument_list|()
argument_list|)
else|:
name|QRect
argument_list|(
name|zero
operator|.
name|x
argument_list|()
argument_list|,
name|zero
operator|.
name|y
argument_list|()
operator|+
name|sectionPos
argument_list|,
name|h
operator|->
name|width
argument_list|()
argument_list|,
name|sectionSize
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|childCount
name|int
name|QAccessibleHeader
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|header
argument_list|()
operator|->
name|count
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleHeader
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|str
decl_stmt|;
if|if
condition|(
name|child
operator|>
literal|0
operator|&&
name|child
operator|<=
name|childCount
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Name
case|:
name|str
operator|=
name|header
argument_list|()
operator|->
name|model
argument_list|()
operator|->
name|headerData
argument_list|(
name|child
operator|-
literal|1
argument_list|,
name|header
argument_list|()
operator|->
name|orientation
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|Description
case|:
block|{
name|QAccessibleEvent
name|event
argument_list|(
name|QEvent
operator|::
name|AccessibilityDescription
argument_list|,
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|()
argument_list|,
operator|&
name|event
argument_list|)
condition|)
name|str
operator|=
name|event
operator|.
name|value
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|Help
case|:
block|{
name|QAccessibleEvent
name|event
argument_list|(
name|QEvent
operator|::
name|AccessibilityHelp
argument_list|,
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|()
argument_list|,
operator|&
name|event
argument_list|)
condition|)
name|str
operator|=
name|event
operator|.
name|value
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleHeader
operator|::
name|role
parameter_list|(
name|int
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|header
argument_list|()
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|ColumnHeader
else|:
name|RowHeader
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleHeader
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|State
name|state
init|=
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
condition|)
block|{
name|int
name|section
init|=
name|child
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|header
argument_list|()
operator|->
name|isSectionHidden
argument_list|(
name|section
argument_list|)
condition|)
name|state
operator||=
name|Invisible
expr_stmt|;
if|if
condition|(
name|header
argument_list|()
operator|->
name|resizeMode
argument_list|(
name|section
argument_list|)
operator|!=
name|QHeaderView
operator|::
name|Custom
condition|)
name|state
operator||=
name|Sizeable
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|header
argument_list|()
operator|->
name|isMovable
argument_list|()
condition|)
name|state
operator||=
name|Movable
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|header
argument_list|()
operator|->
name|isClickable
argument_list|()
condition|)
name|state
operator||=
name|Unavailable
expr_stmt|;
return|return
name|state
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ITEMVIEWS
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
end_ifndef
begin_comment
comment|/*!   \class QAccessibleTabBar   \brief The QAccessibleTabBar class implements the QAccessibleInterface for tab bars.   \internal    \ingroup accessibility */
end_comment
begin_comment
comment|/*!   Constructs a QAccessibleTabBar object for \a w. */
end_comment
begin_constructor
DECL|function|QAccessibleTabBar
name|QAccessibleTabBar
operator|::
name|QAccessibleTabBar
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|w
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|tabBar
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! Returns the QTabBar. */
end_comment
begin_function
DECL|function|tabBar
name|QTabBar
modifier|*
name|QAccessibleTabBar
operator|::
name|tabBar
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|button
name|QAbstractButton
modifier|*
name|QAccessibleTabBar
operator|::
name|button
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|<=
name|tabBar
argument_list|()
operator|->
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
name|QTabBarPrivate
modifier|*
specifier|const
name|tabBarPrivate
init|=
name|tabBar
argument_list|()
operator|->
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|-
name|tabBar
argument_list|()
operator|->
name|count
argument_list|()
operator|==
literal|1
condition|)
return|return
name|tabBarPrivate
operator|->
name|leftB
return|;
if|if
condition|(
name|child
operator|-
name|tabBar
argument_list|()
operator|->
name|count
argument_list|()
operator|==
literal|2
condition|)
return|return
name|tabBarPrivate
operator|->
name|rightB
return|;
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|rect
name|QRect
name|QAccessibleTabBar
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
operator|||
operator|!
name|tabBar
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|QAccessibleWidgetEx
operator|::
name|rect
argument_list|(
literal|0
argument_list|)
return|;
name|QPoint
name|tp
init|=
name|tabBar
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|rec
decl_stmt|;
if|if
condition|(
name|child
operator|<=
name|tabBar
argument_list|()
operator|->
name|count
argument_list|()
condition|)
block|{
name|rec
operator|=
name|tabBar
argument_list|()
operator|->
name|tabRect
argument_list|(
name|child
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWidget
modifier|*
name|widget
init|=
name|button
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|rec
operator|=
name|widget
condition|?
name|widget
operator|->
name|geometry
argument_list|()
else|:
name|QRect
argument_list|()
expr_stmt|;
block|}
return|return
name|QRect
argument_list|(
name|tp
operator|.
name|x
argument_list|()
operator|+
name|rec
operator|.
name|x
argument_list|()
argument_list|,
name|tp
operator|.
name|y
argument_list|()
operator|+
name|rec
operator|.
name|y
argument_list|()
argument_list|,
name|rec
operator|.
name|width
argument_list|()
argument_list|,
name|rec
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|childCount
name|int
name|QAccessibleTabBar
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
comment|// tabs + scroll buttons
return|return
name|tabBar
argument_list|()
operator|->
name|count
argument_list|()
operator|+
literal|2
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleTabBar
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|str
decl_stmt|;
if|if
condition|(
name|child
operator|>
name|tabBar
argument_list|()
operator|->
name|count
argument_list|()
condition|)
block|{
name|bool
name|left
init|=
name|child
operator|-
name|tabBar
argument_list|()
operator|->
name|count
argument_list|()
operator|==
literal|1
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Name
case|:
return|return
name|left
condition|?
name|QTabBar
operator|::
name|tr
argument_list|(
literal|"Scroll Left"
argument_list|)
else|:
name|QTabBar
operator|::
name|tr
argument_list|(
literal|"Scroll Right"
argument_list|)
return|;
default|default:
break|break;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Name
case|:
if|if
condition|(
name|child
operator|>
literal|0
condition|)
return|return
name|qt_accStripAmp
argument_list|(
name|tabBar
argument_list|()
operator|->
name|tabText
argument_list|(
name|child
operator|-
literal|1
argument_list|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|tabBar
argument_list|()
operator|->
name|currentIndex
argument_list|()
operator|!=
operator|-
literal|1
condition|)
return|return
name|qt_accStripAmp
argument_list|(
name|tabBar
argument_list|()
operator|->
name|tabText
argument_list|(
name|tabBar
argument_list|()
operator|->
name|currentIndex
argument_list|()
argument_list|)
argument_list|)
return|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
expr_stmt|;
empty_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleTabBar
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|PageTabList
return|;
if|if
condition|(
name|child
operator|>
name|tabBar
argument_list|()
operator|->
name|count
argument_list|()
condition|)
return|return
name|PushButton
return|;
return|return
name|PageTab
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleTabBar
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|State
name|st
init|=
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|st
return|;
name|QTabBar
modifier|*
name|tb
init|=
name|tabBar
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|>
name|tb
operator|->
name|count
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|bt
init|=
name|button
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bt
condition|)
return|return
name|st
return|;
if|if
condition|(
name|bt
operator|->
name|isEnabled
argument_list|()
operator|==
literal|false
condition|)
name|st
operator||=
name|Unavailable
expr_stmt|;
if|if
condition|(
name|bt
operator|->
name|isVisible
argument_list|()
operator|==
literal|false
condition|)
name|st
operator||=
name|Invisible
expr_stmt|;
if|if
condition|(
name|bt
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
operator|&&
name|bt
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|st
operator||=
name|Focusable
expr_stmt|;
if|if
condition|(
name|bt
operator|->
name|hasFocus
argument_list|()
condition|)
name|st
operator||=
name|Focused
expr_stmt|;
return|return
name|st
return|;
block|}
if|if
condition|(
operator|!
name|tb
operator|->
name|isTabEnabled
argument_list|(
name|child
operator|-
literal|1
argument_list|)
condition|)
name|st
operator||=
name|Unavailable
expr_stmt|;
else|else
name|st
operator||=
name|Selectable
expr_stmt|;
if|if
condition|(
operator|!
name|tb
operator|->
name|currentIndex
argument_list|()
operator|==
name|child
operator|-
literal|1
condition|)
name|st
operator||=
name|Selected
expr_stmt|;
return|return
name|st
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|doAction
name|bool
name|QAccessibleTabBar
operator|::
name|doAction
parameter_list|(
name|int
name|action
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|action
operator|!=
name|QAccessible
operator|::
name|DefaultAction
operator|&&
name|action
operator|!=
name|QAccessible
operator|::
name|Press
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|child
operator|>
name|tabBar
argument_list|()
operator|->
name|count
argument_list|()
condition|)
block|{
name|QAbstractButton
modifier|*
name|bt
init|=
name|button
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bt
operator|->
name|isEnabled
argument_list|()
condition|)
return|return
literal|false
return|;
name|bt
operator|->
name|animateClick
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|tabBar
argument_list|()
operator|->
name|isTabEnabled
argument_list|(
name|child
operator|-
literal|1
argument_list|)
condition|)
return|return
literal|false
return|;
name|tabBar
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|child
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Selects the item with index \a child if \a on is true; otherwise     unselects it. If \a extend is true and the selection mode is not     \c Single and there is an existing selection, the selection is     extended to include all the items from the existing selection up     to and including the item with index \a child. Returns true if a     selection was made or extended; otherwise returns false.      \sa selection() clearSelection() */
end_comment
begin_function
DECL|function|setSelected
name|bool
name|QAccessibleTabBar
operator|::
name|setSelected
parameter_list|(
name|int
name|child
parameter_list|,
name|bool
name|on
parameter_list|,
name|bool
name|extend
parameter_list|)
block|{
if|if
condition|(
operator|!
name|child
operator|||
operator|!
name|on
operator|||
name|extend
operator|||
name|child
operator|>
name|tabBar
argument_list|()
operator|->
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|tabBar
argument_list|()
operator|->
name|isTabEnabled
argument_list|(
name|child
operator|-
literal|1
argument_list|)
condition|)
return|return
literal|false
return|;
name|tabBar
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|child
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a (possibly empty) list of indexes of the items selected     in the list box.      \sa setSelected() clearSelection() */
end_comment
begin_function
DECL|function|selection
name|QVector
argument_list|<
name|int
argument_list|>
name|QAccessibleTabBar
operator|::
name|selection
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|array
decl_stmt|;
if|if
condition|(
name|tabBar
argument_list|()
operator|->
name|currentIndex
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|array
operator|+=
name|tabBar
argument_list|()
operator|->
name|currentIndex
argument_list|()
operator|+
literal|1
expr_stmt|;
return|return
name|array
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABBAR
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
end_ifndef
begin_comment
comment|/*!   \class QAccessibleComboBox   \brief The QAccessibleComboBox class implements the QAccessibleInterface for editable and read-only combo boxes.   \internal    \ingroup accessibility */
end_comment
begin_comment
comment|/*!     \enum QAccessibleComboBox::ComboBoxElements      \internal      \value ComboBoxSelf     \value CurrentText     \value OpenList     \value PopupList */
end_comment
begin_comment
comment|/*!   Constructs a QAccessibleComboBox object for \a w. */
end_comment
begin_constructor
DECL|function|QAccessibleComboBox
name|QAccessibleComboBox
operator|::
name|QAccessibleComboBox
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|w
argument_list|,
name|ComboBox
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|comboBox
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Returns the combobox. */
end_comment
begin_function
DECL|function|comboBox
name|QComboBox
modifier|*
name|QAccessibleComboBox
operator|::
name|comboBox
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|rect
name|QRect
name|QAccessibleComboBox
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QPoint
name|tp
decl_stmt|;
name|QStyle
operator|::
name|SubControl
name|sc
decl_stmt|;
name|QRect
name|r
decl_stmt|;
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|CurrentText
case|:
if|if
condition|(
name|comboBox
argument_list|()
operator|->
name|isEditable
argument_list|()
condition|)
block|{
name|tp
operator|=
name|comboBox
argument_list|()
operator|->
name|lineEdit
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|comboBox
argument_list|()
operator|->
name|lineEdit
argument_list|()
operator|->
name|rect
argument_list|()
expr_stmt|;
name|sc
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
block|}
else|else
block|{
name|tp
operator|=
name|comboBox
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|=
name|QStyle
operator|::
name|SC_ComboBoxEditField
expr_stmt|;
block|}
break|break;
case|case
name|OpenList
case|:
name|tp
operator|=
name|comboBox
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|=
name|QStyle
operator|::
name|SC_ComboBoxArrow
expr_stmt|;
break|break;
default|default:
return|return
name|QAccessibleWidgetEx
operator|::
name|rect
argument_list|(
name|child
argument_list|)
return|;
block|}
if|if
condition|(
name|sc
operator|!=
name|QStyle
operator|::
name|SC_None
condition|)
block|{
name|QStyleOptionComboBox
name|option
decl_stmt|;
name|option
operator|.
name|initFrom
argument_list|(
name|comboBox
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|comboBox
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|option
argument_list|,
name|sc
argument_list|,
name|comboBox
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|QRect
argument_list|(
name|tp
operator|.
name|x
argument_list|()
operator|+
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|tp
operator|.
name|y
argument_list|()
operator|+
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|navigate
name|int
name|QAccessibleComboBox
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|rel
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
operator|*
name|target
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|entry
operator|>
name|ComboBoxSelf
condition|)
switch|switch
condition|(
name|rel
condition|)
block|{
case|case
name|Child
case|:
if|if
condition|(
name|entry
operator|<
name|PopupList
condition|)
return|return
name|entry
return|;
if|if
condition|(
name|entry
operator|==
name|PopupList
condition|)
block|{
name|QAbstractItemView
modifier|*
name|view
init|=
name|comboBox
argument_list|()
operator|->
name|view
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|parent
init|=
name|view
condition|?
name|view
operator|->
name|parentWidget
argument_list|()
else|:
literal|0
decl_stmt|;
operator|*
name|target
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
case|case
name|QAccessible
operator|::
name|Left
case|:
return|return
name|entry
operator|==
name|OpenList
condition|?
name|CurrentText
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Right
case|:
return|return
name|entry
operator|==
name|CurrentText
condition|?
name|OpenList
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Up
case|:
return|return
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Down
case|:
return|return
operator|-
literal|1
return|;
default|default:
break|break;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|navigate
argument_list|(
name|rel
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|childCount
name|int
name|QAccessibleComboBox
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|comboBox
argument_list|()
operator|->
name|view
argument_list|()
condition|?
name|PopupList
else|:
name|OpenList
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|childAt
name|int
name|QAccessibleComboBox
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|comboBox
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|QPoint
name|gp
init|=
name|widget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QRect
argument_list|(
name|gp
operator|.
name|x
argument_list|()
argument_list|,
name|gp
operator|.
name|y
argument_list|()
argument_list|,
name|widget
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|widget
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
comment|// a complex control
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|PopupList
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|rect
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleComboBox
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
name|QObject
modifier|*
name|viewParent
init|=
name|comboBox
argument_list|()
operator|->
name|view
argument_list|()
condition|?
name|comboBox
argument_list|()
operator|->
name|view
argument_list|()
operator|->
name|parentWidget
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|child
operator|->
name|object
argument_list|()
operator|==
name|viewParent
condition|)
return|return
name|PopupList
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleComboBox
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|str
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Name
case|:
ifndef|#
directive|ifndef
name|Q_WS_X11
comment|// on Linux we use relations for this, name is text (fall through to Value)
if|if
condition|(
name|child
operator|==
name|OpenList
condition|)
name|str
operator|=
name|QComboBox
operator|::
name|tr
argument_list|(
literal|"Open"
argument_list|)
expr_stmt|;
else|else
name|str
operator|=
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|t
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|Value
case|:
if|if
condition|(
name|comboBox
argument_list|()
operator|->
name|isEditable
argument_list|()
condition|)
name|str
operator|=
name|comboBox
argument_list|()
operator|->
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
expr_stmt|;
else|else
name|str
operator|=
name|comboBox
argument_list|()
operator|->
name|currentText
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|Accelerator
case|:
if|if
condition|(
name|child
operator|==
name|OpenList
condition|)
name|str
operator|=
operator|(
name|QString
operator|)
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
break|break;
block|}
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|=
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|t
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleComboBox
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|CurrentText
case|:
if|if
condition|(
name|comboBox
argument_list|()
operator|->
name|isEditable
argument_list|()
condition|)
return|return
name|EditableText
return|;
return|return
name|StaticText
return|;
case|case
name|OpenList
case|:
return|return
name|PushButton
return|;
case|case
name|PopupList
case|:
return|return
name|List
return|;
default|default:
return|return
name|ComboBox
return|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleComboBox
operator|::
name|state
parameter_list|(
name|int
comment|/*child*/
parameter_list|)
specifier|const
block|{
return|return
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|doAction
name|bool
name|QAccessibleComboBox
operator|::
name|doAction
parameter_list|(
name|int
name|action
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
if|if
condition|(
name|child
operator|==
literal|2
operator|&&
operator|(
name|action
operator|==
name|DefaultAction
operator|||
name|action
operator|==
name|Press
operator|)
condition|)
block|{
if|if
condition|(
name|comboBox
argument_list|()
operator|->
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|comboBox
argument_list|()
operator|->
name|hidePopup
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|comboBox
argument_list|()
operator|->
name|showPopup
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|actionText
name|QString
name|QAccessibleComboBox
operator|::
name|actionText
parameter_list|(
name|int
name|action
parameter_list|,
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|text
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|2
operator|&&
name|t
operator|==
name|Name
operator|&&
operator|(
name|action
operator|==
name|DefaultAction
operator|||
name|action
operator|==
name|Press
operator|)
condition|)
name|text
operator|=
name|comboBox
argument_list|()
operator|->
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|?
name|QComboBox
operator|::
name|tr
argument_list|(
literal|"Close"
argument_list|)
else|:
name|QComboBox
operator|::
name|tr
argument_list|(
literal|"Open"
argument_list|)
expr_stmt|;
return|return
name|text
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_COMBOBOX
end_comment
begin_function
DECL|function|removeInvisibleWidgetsFromList
specifier|static
specifier|inline
name|void
name|removeInvisibleWidgetsFromList
parameter_list|(
name|QWidgetList
modifier|*
name|list
parameter_list|)
block|{
if|if
condition|(
operator|!
name|list
operator|||
name|list
operator|->
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|list
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|isVisible
argument_list|()
condition|)
name|list
operator|->
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
end_ifndef
begin_comment
comment|// ======================= QAccessibleAbstractScrollArea =======================
end_comment
begin_constructor
DECL|function|QAccessibleAbstractScrollArea
name|QAccessibleAbstractScrollArea
operator|::
name|QAccessibleAbstractScrollArea
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|widget
argument_list|,
name|Client
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|text
name|QString
name|QAccessibleAbstractScrollArea
operator|::
name|text
parameter_list|(
name|Text
name|textType
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|==
name|Self
condition|)
return|return
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|textType
argument_list|,
literal|0
argument_list|)
return|;
name|QWidgetList
name|children
init|=
name|accessibleChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
argument_list|<
literal|1
operator|||
name|child
argument_list|>
name|children
operator|.
name|count
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QAccessibleInterface
modifier|*
name|childInterface
init|=
name|queryAccessibleInterface
argument_list|(
name|children
operator|.
name|at
argument_list|(
name|child
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childInterface
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|string
init|=
name|childInterface
operator|->
name|text
argument_list|(
name|textType
argument_list|,
literal|0
argument_list|)
decl_stmt|;
operator|delete
name|childInterface
expr_stmt|;
return|return
name|string
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessibleAbstractScrollArea
operator|::
name|setText
parameter_list|(
name|Text
name|textType
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
block|{
name|QAccessibleWidgetEx
operator|::
name|setText
argument_list|(
name|textType
argument_list|,
literal|0
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return;
block|}
name|QWidgetList
name|children
init|=
name|accessibleChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
argument_list|<
literal|1
operator|||
name|child
argument_list|>
name|children
operator|.
name|count
argument_list|()
condition|)
return|return;
name|QAccessibleInterface
modifier|*
name|childInterface
init|=
name|queryAccessibleInterface
argument_list|(
name|children
operator|.
name|at
argument_list|(
name|child
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childInterface
condition|)
return|return;
name|childInterface
operator|->
name|setText
argument_list|(
name|textType
argument_list|,
literal|0
argument_list|,
name|text
argument_list|)
expr_stmt|;
operator|delete
name|childInterface
expr_stmt|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleAbstractScrollArea
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|==
name|Self
condition|)
return|return
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
name|child
argument_list|)
return|;
name|QWidgetList
name|children
init|=
name|accessibleChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
argument_list|<
literal|1
operator|||
name|child
argument_list|>
name|children
operator|.
name|count
argument_list|()
condition|)
return|return
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
name|Self
argument_list|)
return|;
name|QAccessibleInterface
modifier|*
name|childInterface
init|=
name|queryAccessibleInterface
argument_list|(
name|children
operator|.
name|at
argument_list|(
name|child
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childInterface
condition|)
return|return
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
name|Self
argument_list|)
return|;
name|QAccessible
operator|::
name|State
name|returnState
init|=
name|childInterface
operator|->
name|state
argument_list|(
literal|0
argument_list|)
decl_stmt|;
operator|delete
name|childInterface
expr_stmt|;
return|return
name|returnState
return|;
block|}
end_function
begin_function
DECL|function|invokeMethodEx
name|QVariant
name|QAccessibleAbstractScrollArea
operator|::
name|invokeMethodEx
parameter_list|(
name|QAccessible
operator|::
name|Method
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleAbstractScrollArea
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|accessibleChildren
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleAbstractScrollArea
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
operator|||
operator|!
name|child
operator|->
name|object
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|index
init|=
name|accessibleChildren
argument_list|()
operator|.
name|indexOf
argument_list|(
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
return|return
operator|++
name|index
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QAccessibleAbstractScrollArea
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|QAccessibleWidgetEx
operator|::
name|isValid
argument_list|()
operator|&&
name|abstractScrollArea
argument_list|()
operator|&&
name|abstractScrollArea
argument_list|()
operator|->
name|viewport
argument_list|()
operator|)
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleAbstractScrollArea
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|target
condition|)
return|return
operator|-
literal|1
return|;
operator|*
name|target
operator|=
literal|0
expr_stmt|;
name|QWidget
modifier|*
name|targetWidget
init|=
literal|0
decl_stmt|;
name|QWidget
modifier|*
name|entryWidget
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|relation
operator|==
name|Child
operator|||
name|relation
operator|==
name|Left
operator|||
name|relation
operator|==
name|Up
operator|||
name|relation
operator|==
name|Right
operator|||
name|relation
operator|==
name|Down
condition|)
block|{
name|QWidgetList
name|children
init|=
name|accessibleChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
argument_list|<
literal|0
operator|||
name|entry
argument_list|>
name|children
operator|.
name|count
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|entry
operator|==
name|Self
condition|)
name|entryWidget
operator|=
name|abstractScrollArea
argument_list|()
expr_stmt|;
else|else
name|entryWidget
operator|=
name|children
operator|.
name|at
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
expr_stmt|;
name|AbstractScrollAreaElement
name|entryElement
init|=
name|elementType
argument_list|(
name|entryWidget
argument_list|)
decl_stmt|;
comment|// Not one of the most beautiful switches I've ever seen, but I believe it has
comment|// to be like this since each case need special handling.
comment|// It might be possible to make it more general, but I'll leave that as an exercise
comment|// to the reader. :-)
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Child
case|:
if|if
condition|(
name|entry
operator|>
literal|0
condition|)
name|targetWidget
operator|=
name|children
operator|.
name|at
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Left
case|:
if|if
condition|(
name|entry
operator|<
literal|1
condition|)
break|break;
switch|switch
condition|(
name|entryElement
condition|)
block|{
case|case
name|Viewport
case|:
if|if
condition|(
operator|!
name|isLeftToRight
argument_list|()
condition|)
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|verticalScrollBar
argument_list|()
expr_stmt|;
break|break;
case|case
name|HorizontalContainer
case|:
if|if
condition|(
operator|!
name|isLeftToRight
argument_list|()
condition|)
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|cornerWidget
argument_list|()
expr_stmt|;
break|break;
case|case
name|VerticalContainer
case|:
if|if
condition|(
name|isLeftToRight
argument_list|()
condition|)
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|viewport
argument_list|()
expr_stmt|;
break|break;
case|case
name|CornerWidget
case|:
if|if
condition|(
name|isLeftToRight
argument_list|()
condition|)
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|horizontalScrollBar
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|Right
case|:
if|if
condition|(
name|entry
operator|<
literal|1
condition|)
break|break;
switch|switch
condition|(
name|entryElement
condition|)
block|{
case|case
name|Viewport
case|:
if|if
condition|(
name|isLeftToRight
argument_list|()
condition|)
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|verticalScrollBar
argument_list|()
expr_stmt|;
break|break;
case|case
name|HorizontalContainer
case|:
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|cornerWidget
argument_list|()
expr_stmt|;
break|break;
case|case
name|VerticalContainer
case|:
if|if
condition|(
operator|!
name|isLeftToRight
argument_list|()
condition|)
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|viewport
argument_list|()
expr_stmt|;
break|break;
case|case
name|CornerWidget
case|:
if|if
condition|(
operator|!
name|isLeftToRight
argument_list|()
condition|)
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|horizontalScrollBar
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|Up
case|:
if|if
condition|(
name|entry
operator|<
literal|1
condition|)
break|break;
switch|switch
condition|(
name|entryElement
condition|)
block|{
case|case
name|HorizontalContainer
case|:
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|viewport
argument_list|()
expr_stmt|;
break|break;
case|case
name|CornerWidget
case|:
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|verticalScrollBar
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|Down
case|:
if|if
condition|(
name|entry
operator|<
literal|1
condition|)
break|break;
switch|switch
condition|(
name|entryElement
condition|)
block|{
case|case
name|Viewport
case|:
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|horizontalScrollBar
argument_list|()
expr_stmt|;
break|break;
case|case
name|VerticalContainer
case|:
name|targetWidget
operator|=
name|abstractScrollArea
argument_list|()
operator|->
name|cornerWidget
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
default|default:
break|break;
block|}
block|}
else|else
block|{
return|return
name|QAccessibleWidgetEx
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QScrollBar
operator|*
argument_list|>
argument_list|(
name|targetWidget
argument_list|)
condition|)
name|targetWidget
operator|=
name|targetWidget
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
operator|*
name|target
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|targetWidget
argument_list|)
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleAbstractScrollArea
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|abstractScrollArea
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
if|if
condition|(
name|child
operator|==
name|Self
condition|)
return|return
name|QAccessibleWidgetEx
operator|::
name|rect
argument_list|(
name|child
argument_list|)
return|;
name|QWidgetList
name|children
init|=
name|accessibleChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
argument_list|<
literal|1
operator|||
name|child
argument_list|>
name|children
operator|.
name|count
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
specifier|const
name|QWidget
modifier|*
name|childWidget
init|=
name|children
operator|.
name|at
argument_list|(
name|child
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childWidget
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
return|return
name|QRect
argument_list|(
name|childWidget
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|childWidget
operator|->
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleAbstractScrollArea
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|abstractScrollArea
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|#
directive|if
literal|0
block|const QRect globalSelfGeometry = rect(Self);     if (!globalSelfGeometry.isValid() || !globalSelfGeometry.contains(QPoint(x, y)))         return -1;     const QWidgetList children = accessibleChildren();     for (int i = 0; i< children.count(); ++i) {         const QWidget *child = children.at(i);         const QRect globalChildGeometry = QRect(child->mapToGlobal(QPoint(0, 0)), child->size());         if (globalChildGeometry.contains(QPoint(x, y))) {             return ++i;         }     }     return 0;
else|#
directive|else
for|for
control|(
name|int
name|i
init|=
name|childCount
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|rect
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|abstractScrollArea
name|QAbstractScrollArea
modifier|*
name|QAccessibleAbstractScrollArea
operator|::
name|abstractScrollArea
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|accessibleChildren
name|QWidgetList
name|QAccessibleAbstractScrollArea
operator|::
name|accessibleChildren
parameter_list|()
specifier|const
block|{
name|QWidgetList
name|children
decl_stmt|;
comment|// Viewport.
name|QWidget
modifier|*
name|viewport
init|=
name|abstractScrollArea
argument_list|()
operator|->
name|viewport
argument_list|()
decl_stmt|;
if|if
condition|(
name|viewport
condition|)
name|children
operator|.
name|append
argument_list|(
name|viewport
argument_list|)
expr_stmt|;
comment|// Horizontal scrollBar container.
name|QScrollBar
modifier|*
name|horizontalScrollBar
init|=
name|abstractScrollArea
argument_list|()
operator|->
name|horizontalScrollBar
argument_list|()
decl_stmt|;
if|if
condition|(
name|horizontalScrollBar
operator|&&
name|horizontalScrollBar
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|children
operator|.
name|append
argument_list|(
name|horizontalScrollBar
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Vertical scrollBar container.
name|QScrollBar
modifier|*
name|verticalScrollBar
init|=
name|abstractScrollArea
argument_list|()
operator|->
name|verticalScrollBar
argument_list|()
decl_stmt|;
if|if
condition|(
name|verticalScrollBar
operator|&&
name|verticalScrollBar
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|children
operator|.
name|append
argument_list|(
name|verticalScrollBar
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// CornerWidget.
name|QWidget
modifier|*
name|cornerWidget
init|=
name|abstractScrollArea
argument_list|()
operator|->
name|cornerWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|cornerWidget
operator|&&
name|cornerWidget
operator|->
name|isVisible
argument_list|()
condition|)
name|children
operator|.
name|append
argument_list|(
name|cornerWidget
argument_list|)
expr_stmt|;
return|return
name|children
return|;
block|}
end_function
begin_function
name|QAccessibleAbstractScrollArea
operator|::
name|AbstractScrollAreaElement
DECL|function|elementType
name|QAccessibleAbstractScrollArea
operator|::
name|elementType
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return
name|Undefined
return|;
if|if
condition|(
name|widget
operator|==
name|abstractScrollArea
argument_list|()
condition|)
return|return
name|Self
return|;
if|if
condition|(
name|widget
operator|==
name|abstractScrollArea
argument_list|()
operator|->
name|viewport
argument_list|()
condition|)
return|return
name|Viewport
return|;
if|if
condition|(
name|widget
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_scrollarea_hcontainer"
argument_list|)
condition|)
return|return
name|HorizontalContainer
return|;
if|if
condition|(
name|widget
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_scrollarea_vcontainer"
argument_list|)
condition|)
return|return
name|VerticalContainer
return|;
if|if
condition|(
name|widget
operator|==
name|abstractScrollArea
argument_list|()
operator|->
name|cornerWidget
argument_list|()
condition|)
return|return
name|CornerWidget
return|;
return|return
name|Undefined
return|;
block|}
end_function
begin_function
DECL|function|isLeftToRight
name|bool
name|QAccessibleAbstractScrollArea
operator|::
name|isLeftToRight
parameter_list|()
specifier|const
block|{
return|return
name|abstractScrollArea
argument_list|()
operator|->
name|isLeftToRight
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// ======================= QAccessibleScrollArea ===========================
end_comment
begin_constructor
DECL|function|QAccessibleScrollArea
name|QAccessibleScrollArea
operator|::
name|QAccessibleScrollArea
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleAbstractScrollArea
argument_list|(
name|widget
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QScrollArea
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SCROLLAREA
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
end_unit
