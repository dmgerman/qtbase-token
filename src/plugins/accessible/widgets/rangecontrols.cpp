begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"rangecontrols.h"
end_include
begin_include
include|#
directive|include
file|<qslider.h>
end_include
begin_include
include|#
directive|include
file|<qdial.h>
end_include
begin_include
include|#
directive|include
file|<qspinbox.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QDoubleSpinBox>
end_include
begin_include
include|#
directive|include
file|<QDial>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<private/qmath_p.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
specifier|extern
name|QString
name|Q_GUI_EXPORT
name|qt_accStripAmp
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
end_ifndef
begin_function_decl
specifier|extern
name|QStyleOptionSlider
name|Q_GUI_EXPORT
name|qt_qscrollbarStyleOption
parameter_list|(
name|QScrollBar
modifier|*
name|scrollBar
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
end_ifndef
begin_function_decl
specifier|extern
name|QStyleOptionSlider
name|Q_GUI_EXPORT
name|qt_qsliderStyleOption
parameter_list|(
name|QSlider
modifier|*
name|slider
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
end_ifndef
begin_constructor
DECL|function|QAccessibleAbstractSpinBox
name|QAccessibleAbstractSpinBox
operator|::
name|QAccessibleAbstractSpinBox
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|w
argument_list|,
name|SpinBox
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|abstractSpinBox
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Returns the underlying QAbstractSpinBox. */
end_comment
begin_function
DECL|function|abstractSpinBox
name|QAbstractSpinBox
modifier|*
name|QAccessibleAbstractSpinBox
operator|::
name|abstractSpinBox
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QAbstractSpinBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|childCount
name|int
name|QAccessibleAbstractSpinBox
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|ValueDown
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|rect
name|QRect
name|QAccessibleAbstractSpinBox
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
decl_stmt|;
if|if
condition|(
operator|!
name|abstractSpinBox
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|rect
return|;
name|QStyleOptionSpinBox
name|so
decl_stmt|;
name|so
operator|.
name|rect
operator|=
name|widget
argument_list|()
operator|->
name|rect
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|Editor
case|:
name|rect
operator|=
name|widget
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|so
argument_list|,
name|QStyle
operator|::
name|SC_SpinBoxEditField
argument_list|,
name|widget
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ValueUp
case|:
name|rect
operator|=
name|widget
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|so
argument_list|,
name|QStyle
operator|::
name|SC_SpinBoxUp
argument_list|,
name|widget
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ValueDown
case|:
name|rect
operator|=
name|widget
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|so
argument_list|,
name|QStyle
operator|::
name|SC_SpinBoxDown
argument_list|,
name|widget
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|rect
operator|=
name|so
operator|.
name|rect
expr_stmt|;
break|break;
block|}
name|QPoint
name|tl
init|=
name|widget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|tl
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|tl
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|navigate
name|int
name|QAccessibleAbstractSpinBox
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|rel
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
operator|*
name|target
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|entry
condition|)
switch|switch
condition|(
name|rel
condition|)
block|{
case|case
name|Child
case|:
return|return
name|entry
operator|<=
name|childCount
argument_list|()
condition|?
name|entry
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Left
case|:
return|return
operator|(
name|entry
operator|==
name|ValueUp
operator|||
name|entry
operator|==
name|ValueDown
operator|)
condition|?
name|Editor
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Right
case|:
return|return
name|entry
operator|==
name|Editor
condition|?
name|ValueUp
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Up
case|:
return|return
name|entry
operator|==
name|ValueDown
condition|?
name|ValueUp
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Down
case|:
return|return
name|entry
operator|==
name|ValueUp
condition|?
name|ValueDown
else|:
operator|-
literal|1
return|;
default|default:
break|break;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|navigate
argument_list|(
name|rel
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleAbstractSpinBox
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|abstractSpinBox
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Name
case|:
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|ValueUp
case|:
return|return
name|QSpinBox
operator|::
name|tr
argument_list|(
literal|"More"
argument_list|)
return|;
case|case
name|ValueDown
case|:
return|return
name|QSpinBox
operator|::
name|tr
argument_list|(
literal|"Less"
argument_list|)
return|;
block|}
break|break;
case|case
name|Value
case|:
if|if
condition|(
name|child
operator|==
name|Editor
operator|||
name|child
operator|==
name|SpinBoxSelf
condition|)
return|return
name|abstractSpinBox
argument_list|()
operator|->
name|text
argument_list|()
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|t
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleAbstractSpinBox
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|Editor
case|:
return|return
name|EditableText
return|;
case|case
name|ValueUp
case|:
case|case
name|ValueDown
case|:
return|return
name|PushButton
return|;
default|default:
break|break;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|role
argument_list|(
name|child
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|doAction
name|bool
name|QAccessibleAbstractSpinBox
operator|::
name|doAction
parameter_list|(
name|int
name|action
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
name|params
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
argument_list|()
operator|->
name|isEnabled
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|action
operator|==
name|Press
condition|)
block|{
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|ValueUp
case|:
name|abstractSpinBox
argument_list|()
operator|->
name|stepUp
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|ValueDown
case|:
name|abstractSpinBox
argument_list|()
operator|->
name|stepDown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
default|default:
break|break;
block|}
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|doAction
argument_list|(
name|action
argument_list|,
literal|0
argument_list|,
name|params
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|currentValue
name|QVariant
name|QAccessibleAbstractSpinBox
operator|::
name|currentValue
parameter_list|()
block|{
name|QVariant
name|result
init|=
name|abstractSpinBox
argument_list|()
operator|->
name|property
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|QVariant
operator|::
name|Type
name|type
init|=
name|result
operator|.
name|type
argument_list|()
decl_stmt|;
comment|// IA2 only allows numeric types
if|if
condition|(
name|type
operator|==
name|QVariant
operator|::
name|Int
operator|||
name|type
operator|==
name|QVariant
operator|::
name|UInt
operator|||
name|type
operator|==
name|QVariant
operator|::
name|LongLong
operator|||
name|type
operator|==
name|QVariant
operator|::
name|ULongLong
operator|||
name|type
operator|==
name|QVariant
operator|::
name|Double
condition|)
return|return
name|result
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setCurrentValue
name|void
name|QAccessibleAbstractSpinBox
operator|::
name|setCurrentValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|abstractSpinBox
argument_list|()
operator|->
name|setProperty
argument_list|(
literal|"setValue"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maximumValue
name|QVariant
name|QAccessibleAbstractSpinBox
operator|::
name|maximumValue
parameter_list|()
block|{
return|return
name|abstractSpinBox
argument_list|()
operator|->
name|property
argument_list|(
literal|"maximum"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|minimumValue
name|QVariant
name|QAccessibleAbstractSpinBox
operator|::
name|minimumValue
parameter_list|()
block|{
return|return
name|abstractSpinBox
argument_list|()
operator|->
name|property
argument_list|(
literal|"minimum"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|invokeMethodEx
name|QVariant
name|QAccessibleAbstractSpinBox
operator|::
name|invokeMethodEx
parameter_list|(
name|Method
name|method
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
name|params
parameter_list|)
block|{
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|ListSupportedMethods
case|:
block|{
name|QSet
argument_list|<
name|QAccessible
operator|::
name|Method
argument_list|>
name|set
decl_stmt|;
name|set
operator|<<
name|ListSupportedMethods
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|set
operator||
name|qvariant_cast
argument_list|<
name|QSet
argument_list|<
name|QAccessible
operator|::
name|Method
argument_list|>
argument_list|>
argument_list|(
name|QAccessibleWidgetEx
operator|::
name|invokeMethodEx
argument_list|(
name|method
argument_list|,
name|child
argument_list|,
name|params
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
default|default:
return|return
name|QAccessibleWidgetEx
operator|::
name|invokeMethodEx
argument_list|(
name|method
argument_list|,
name|child
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|/*!   \class QAccessibleSpinBox   \brief The QAccessibleSpinBox class implements the QAccessibleInterface for spinbox widgets.   \internal    \ingroup accessibility */
end_comment
begin_comment
comment|/*!     \enum QAccessibleAbstractSpinBox::SpinBoxElements      This enum identifies the components of the spin box.      \value SpinBoxSelf The spin box as a whole     \value Editor The line edit sub-widget.     \value ValueUp The up sub-widget (i.e. the up arrow or + button)     \value ValueDown The down sub-widget (i.e. the down arrow or - button) */
end_comment
begin_comment
comment|/*!   Constructs a QAccessibleSpinWidget object for \a w. */
end_comment
begin_constructor
DECL|function|QAccessibleSpinBox
name|QAccessibleSpinBox
operator|::
name|QAccessibleSpinBox
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleAbstractSpinBox
argument_list|(
name|w
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|spinBox
argument_list|()
argument_list|)
expr_stmt|;
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"valueChanged(int)"
argument_list|)
argument_list|)
expr_stmt|;
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"valueChanged(QString)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Returns the underlying QSpinBox. */
end_comment
begin_function
DECL|function|spinBox
name|QSpinBox
modifier|*
name|QAccessibleSpinBox
operator|::
name|spinBox
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QSpinBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleSpinBox
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|State
name|state
init|=
name|QAccessibleAbstractSpinBox
operator|::
name|state
argument_list|(
name|child
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|ValueUp
case|:
if|if
condition|(
name|spinBox
argument_list|()
operator|->
name|value
argument_list|()
operator|>=
name|spinBox
argument_list|()
operator|->
name|maximum
argument_list|()
condition|)
name|state
operator||=
name|Unavailable
expr_stmt|;
return|return
name|state
return|;
case|case
name|ValueDown
case|:
if|if
condition|(
name|spinBox
argument_list|()
operator|->
name|value
argument_list|()
operator|<=
name|spinBox
argument_list|()
operator|->
name|minimum
argument_list|()
condition|)
name|state
operator||=
name|Unavailable
expr_stmt|;
return|return
name|state
return|;
default|default:
break|break;
block|}
return|return
name|state
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|doAction
name|bool
name|QAccessibleSpinBox
operator|::
name|doAction
parameter_list|(
name|int
name|action
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
name|params
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
argument_list|()
operator|->
name|isEnabled
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|action
operator|==
name|Press
condition|)
block|{
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|ValueUp
case|:
if|if
condition|(
name|spinBox
argument_list|()
operator|->
name|value
argument_list|()
operator|>=
name|spinBox
argument_list|()
operator|->
name|maximum
argument_list|()
condition|)
return|return
literal|false
return|;
name|spinBox
argument_list|()
operator|->
name|stepUp
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|ValueDown
case|:
if|if
condition|(
name|spinBox
argument_list|()
operator|->
name|value
argument_list|()
operator|<=
name|spinBox
argument_list|()
operator|->
name|minimum
argument_list|()
condition|)
return|return
literal|false
return|;
name|spinBox
argument_list|()
operator|->
name|stepDown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
default|default:
break|break;
block|}
block|}
return|return
name|QAccessibleAbstractSpinBox
operator|::
name|doAction
argument_list|(
name|action
argument_list|,
literal|0
argument_list|,
name|params
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// ================================== QAccessibleDoubleSpinBox ==================================
end_comment
begin_constructor
DECL|function|QAccessibleDoubleSpinBox
name|QAccessibleDoubleSpinBox
operator|::
name|QAccessibleDoubleSpinBox
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|widget
argument_list|,
name|SpinBox
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QDoubleSpinBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"valueChanged(double)"
argument_list|)
argument_list|)
expr_stmt|;
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"valueChanged(QString)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Returns the underlying QDoubleSpinBox. */
end_comment
begin_function
DECL|function|doubleSpinBox
name|QDoubleSpinBox
modifier|*
name|QAccessibleDoubleSpinBox
operator|::
name|doubleSpinBox
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QDoubleSpinBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|childCount
name|int
name|QAccessibleDoubleSpinBox
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|ValueDown
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|rect
name|QRect
name|QAccessibleDoubleSpinBox
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
decl_stmt|;
if|if
condition|(
operator|!
name|doubleSpinBox
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|rect
return|;
name|QStyleOptionSpinBox
name|spinBoxOption
decl_stmt|;
name|spinBoxOption
operator|.
name|initFrom
argument_list|(
name|doubleSpinBox
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|Editor
case|:
name|rect
operator|=
name|doubleSpinBox
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|spinBoxOption
argument_list|,
name|QStyle
operator|::
name|SC_SpinBoxEditField
argument_list|,
name|doubleSpinBox
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ValueUp
case|:
name|rect
operator|=
name|doubleSpinBox
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|spinBoxOption
argument_list|,
name|QStyle
operator|::
name|SC_SpinBoxUp
argument_list|,
name|doubleSpinBox
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ValueDown
case|:
name|rect
operator|=
name|doubleSpinBox
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|spinBoxOption
argument_list|,
name|QStyle
operator|::
name|SC_SpinBoxDown
argument_list|,
name|doubleSpinBox
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|rect
operator|=
name|spinBoxOption
operator|.
name|rect
expr_stmt|;
break|break;
block|}
specifier|const
name|QPoint
name|globalPos
init|=
name|doubleSpinBox
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|globalPos
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|globalPos
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|navigate
name|int
name|QAccessibleDoubleSpinBox
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|entry
operator|<=
literal|0
condition|)
return|return
name|QAccessibleWidgetEx
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
operator|*
name|target
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Child
case|:
return|return
name|entry
operator|<=
name|childCount
argument_list|()
condition|?
name|entry
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Left
case|:
return|return
operator|(
name|entry
operator|==
name|ValueUp
operator|||
name|entry
operator|==
name|ValueDown
operator|)
condition|?
name|Editor
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Right
case|:
return|return
name|entry
operator|==
name|Editor
condition|?
name|ValueUp
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Up
case|:
return|return
name|entry
operator|==
name|ValueDown
condition|?
name|ValueUp
else|:
operator|-
literal|1
return|;
case|case
name|QAccessible
operator|::
name|Down
case|:
return|return
name|entry
operator|==
name|ValueUp
condition|?
name|ValueDown
else|:
operator|-
literal|1
return|;
default|default:
break|break;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|invokeMethodEx
name|QVariant
name|QAccessibleDoubleSpinBox
operator|::
name|invokeMethodEx
parameter_list|(
name|QAccessible
operator|::
name|Method
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleDoubleSpinBox
operator|::
name|text
parameter_list|(
name|Text
name|textType
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|textType
condition|)
block|{
case|case
name|Name
case|:
if|if
condition|(
name|child
operator|==
name|ValueUp
condition|)
return|return
name|QDoubleSpinBox
operator|::
name|tr
argument_list|(
literal|"More"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|child
operator|==
name|ValueDown
condition|)
return|return
name|QDoubleSpinBox
operator|::
name|tr
argument_list|(
literal|"Less"
argument_list|)
return|;
break|break;
case|case
name|Value
case|:
if|if
condition|(
name|child
operator|==
name|Editor
operator|||
name|child
operator|==
name|SpinBoxSelf
condition|)
return|return
name|doubleSpinBox
argument_list|()
operator|->
name|textFromValue
argument_list|(
name|doubleSpinBox
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|textType
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleDoubleSpinBox
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|Editor
case|:
return|return
name|EditableText
return|;
case|case
name|ValueUp
case|:
case|case
name|ValueDown
case|:
return|return
name|PushButton
return|;
default|default:
break|break;
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|role
argument_list|(
name|child
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleDoubleSpinBox
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|State
name|state
init|=
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
name|child
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|ValueUp
case|:
if|if
condition|(
name|doubleSpinBox
argument_list|()
operator|->
name|value
argument_list|()
operator|>=
name|doubleSpinBox
argument_list|()
operator|->
name|maximum
argument_list|()
condition|)
name|state
operator||=
name|Unavailable
expr_stmt|;
break|break;
case|case
name|ValueDown
case|:
if|if
condition|(
name|doubleSpinBox
argument_list|()
operator|->
name|value
argument_list|()
operator|<=
name|doubleSpinBox
argument_list|()
operator|->
name|minimum
argument_list|()
condition|)
name|state
operator||=
name|Unavailable
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|state
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SPINBOX
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
end_ifndef
begin_comment
comment|/*!   \class QAccessibleScrollBar   \brief The QAccessibleScrollBar class implements the QAccessibleInterface for scroll bars.   \internal    \ingroup accessibility */
end_comment
begin_comment
comment|/*!     \enum QAccessibleScrollBar::ScrollBarElements      This enum identifies the components of the scroll bar.      \value ScrollBarSelf The scroll bar as a whole.     \value LineUp The up arrow button.     \value PageUp The area between the position and the up arrow button.     \value Position The position marking rectangle.     \value PageDown The area between the position and the down arrow button.     \value LineDown The down arrow button. */
end_comment
begin_comment
comment|/*!   Constructs a QAccessibleScrollBar object for \a w.   \a name is propagated to the QAccessibleWidgetEx constructor. */
end_comment
begin_constructor
DECL|function|QAccessibleScrollBar
name|QAccessibleScrollBar
operator|::
name|QAccessibleScrollBar
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleAbstractSlider
argument_list|(
name|w
argument_list|,
name|ScrollBar
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|scrollBar
argument_list|()
argument_list|)
expr_stmt|;
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"valueChanged(int)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! Returns the scroll bar. */
end_comment
begin_function
DECL|function|scrollBar
name|QScrollBar
modifier|*
name|QAccessibleScrollBar
operator|::
name|scrollBar
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QScrollBar
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|rect
name|QRect
name|QAccessibleScrollBar
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|scrollBar
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QStyle
operator|::
name|SubControl
name|subControl
decl_stmt|;
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|LineUp
case|:
name|subControl
operator|=
name|QStyle
operator|::
name|SC_ScrollBarSubLine
expr_stmt|;
break|break;
case|case
name|PageUp
case|:
name|subControl
operator|=
name|QStyle
operator|::
name|SC_ScrollBarSubPage
expr_stmt|;
break|break;
case|case
name|Position
case|:
name|subControl
operator|=
name|QStyle
operator|::
name|SC_ScrollBarSlider
expr_stmt|;
break|break;
case|case
name|PageDown
case|:
name|subControl
operator|=
name|QStyle
operator|::
name|SC_ScrollBarAddPage
expr_stmt|;
break|break;
case|case
name|LineDown
case|:
name|subControl
operator|=
name|QStyle
operator|::
name|SC_ScrollBarAddLine
expr_stmt|;
break|break;
default|default:
return|return
name|QAccessibleAbstractSlider
operator|::
name|rect
argument_list|(
name|child
argument_list|)
return|;
block|}
specifier|const
name|QStyleOptionSlider
name|option
init|=
name|qt_qscrollbarStyleOption
argument_list|(
name|scrollBar
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|rect
init|=
name|scrollBar
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ScrollBar
argument_list|,
operator|&
name|option
argument_list|,
name|subControl
argument_list|,
name|scrollBar
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|tp
init|=
name|scrollBar
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|tp
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|tp
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|childCount
name|int
name|QAccessibleScrollBar
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|LineDown
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleScrollBar
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Value
case|:
if|if
condition|(
operator|!
name|child
operator|||
name|child
operator|==
name|Position
condition|)
return|return
name|QString
operator|::
name|number
argument_list|(
name|scrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
case|case
name|Name
case|:
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|LineUp
case|:
return|return
name|QScrollBar
operator|::
name|tr
argument_list|(
literal|"Line up"
argument_list|)
return|;
case|case
name|PageUp
case|:
return|return
name|QScrollBar
operator|::
name|tr
argument_list|(
literal|"Page up"
argument_list|)
return|;
case|case
name|Position
case|:
return|return
name|QScrollBar
operator|::
name|tr
argument_list|(
literal|"Position"
argument_list|)
return|;
case|case
name|PageDown
case|:
return|return
name|QScrollBar
operator|::
name|tr
argument_list|(
literal|"Page down"
argument_list|)
return|;
case|case
name|LineDown
case|:
return|return
name|QScrollBar
operator|::
name|tr
argument_list|(
literal|"Line down"
argument_list|)
return|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|QAccessibleAbstractSlider
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleScrollBar
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|LineUp
case|:
case|case
name|PageUp
case|:
case|case
name|PageDown
case|:
case|case
name|LineDown
case|:
return|return
name|PushButton
return|;
case|case
name|Position
case|:
return|return
name|Indicator
return|;
default|default:
return|return
name|ScrollBar
return|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleScrollBar
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
specifier|const
name|State
name|parentState
init|=
name|QAccessibleAbstractSlider
operator|::
name|state
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
return|return
name|parentState
return|;
comment|// Inherit the Invisible state from parent.
name|State
name|state
init|=
name|parentState
operator|&
name|QAccessible
operator|::
name|Invisible
decl_stmt|;
comment|// Disable left/right if we are at the minimum/maximum.
specifier|const
name|QScrollBar
modifier|*
specifier|const
name|scrollBar
init|=
name|QAccessibleScrollBar
operator|::
name|scrollBar
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|LineUp
case|:
case|case
name|PageUp
case|:
if|if
condition|(
name|scrollBar
operator|->
name|value
argument_list|()
operator|<=
name|scrollBar
operator|->
name|minimum
argument_list|()
condition|)
name|state
operator||=
name|Unavailable
expr_stmt|;
break|break;
case|case
name|LineDown
case|:
case|case
name|PageDown
case|:
if|if
condition|(
name|scrollBar
operator|->
name|value
argument_list|()
operator|>=
name|scrollBar
operator|->
name|maximum
argument_list|()
condition|)
name|state
operator||=
name|Unavailable
expr_stmt|;
break|break;
case|case
name|Position
case|:
default|default:
break|break;
block|}
return|return
name|state
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SCROLLBAR
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SLIDER
end_ifndef
begin_comment
comment|/*!   \class QAccessibleSlider   \brief The QAccessibleSlider class implements the QAccessibleInterface for sliders.   \internal    \ingroup accessibility */
end_comment
begin_comment
comment|/*!     \enum QAccessibleSlider::SliderElements      This enum identifies the components of the slider.      \value SliderSelf The slider as a whole.     \value PageLeft The area to the left of the position.     \value Position The position indicator.     \value PageRight The area to the right of the position. */
end_comment
begin_comment
comment|/*!   Constructs a QAccessibleScrollBar object for \a w.   \a name is propagated to the QAccessibleWidgetEx constructor. */
end_comment
begin_constructor
DECL|function|QAccessibleSlider
name|QAccessibleSlider
operator|::
name|QAccessibleSlider
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleAbstractSlider
argument_list|(
name|w
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|slider
argument_list|()
argument_list|)
expr_stmt|;
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"valueChanged(int)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! Returns the slider. */
end_comment
begin_function
DECL|function|slider
name|QSlider
modifier|*
name|QAccessibleSlider
operator|::
name|slider
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QSlider
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|rect
name|QRect
name|QAccessibleSlider
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
decl_stmt|;
if|if
condition|(
operator|!
name|slider
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|rect
return|;
specifier|const
name|QStyleOptionSlider
name|option
init|=
name|qt_qsliderStyleOption
argument_list|(
name|slider
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|srect
init|=
name|slider
argument_list|()
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_Slider
argument_list|,
operator|&
name|option
argument_list|,
name|QStyle
operator|::
name|SC_SliderHandle
argument_list|,
name|slider
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|PageLeft
case|:
if|if
condition|(
name|slider
argument_list|()
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|rect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|slider
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|srect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|rect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|srect
operator|.
name|x
argument_list|()
argument_list|,
name|slider
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Position
case|:
name|rect
operator|=
name|srect
expr_stmt|;
break|break;
case|case
name|PageRight
case|:
if|if
condition|(
name|slider
argument_list|()
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|rect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
name|srect
operator|.
name|y
argument_list|()
operator|+
name|srect
operator|.
name|height
argument_list|()
argument_list|,
name|slider
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|slider
argument_list|()
operator|->
name|height
argument_list|()
operator|-
name|srect
operator|.
name|y
argument_list|()
operator|-
name|srect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|rect
operator|=
name|QRect
argument_list|(
name|srect
operator|.
name|x
argument_list|()
operator|+
name|srect
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|,
name|slider
argument_list|()
operator|->
name|width
argument_list|()
operator|-
name|srect
operator|.
name|x
argument_list|()
operator|-
name|srect
operator|.
name|width
argument_list|()
argument_list|,
name|slider
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
name|QAccessibleAbstractSlider
operator|::
name|rect
argument_list|(
name|child
argument_list|)
return|;
block|}
name|QPoint
name|tp
init|=
name|slider
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|tp
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|tp
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|childCount
name|int
name|QAccessibleSlider
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|PageRight
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleSlider
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|Value
case|:
if|if
condition|(
operator|!
name|child
operator|||
name|child
operator|==
literal|2
condition|)
return|return
name|QString
operator|::
name|number
argument_list|(
name|slider
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
case|case
name|Name
case|:
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|PageLeft
case|:
return|return
name|slider
argument_list|()
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|QSlider
operator|::
name|tr
argument_list|(
literal|"Page left"
argument_list|)
else|:
name|QSlider
operator|::
name|tr
argument_list|(
literal|"Page up"
argument_list|)
return|;
case|case
name|Position
case|:
return|return
name|QSlider
operator|::
name|tr
argument_list|(
literal|"Position"
argument_list|)
return|;
case|case
name|PageRight
case|:
return|return
name|slider
argument_list|()
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|QSlider
operator|::
name|tr
argument_list|(
literal|"Page right"
argument_list|)
else|:
name|QSlider
operator|::
name|tr
argument_list|(
literal|"Page down"
argument_list|)
return|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|QAccessibleAbstractSlider
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleSlider
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|PageLeft
case|:
case|case
name|PageRight
case|:
return|return
name|PushButton
return|;
case|case
name|Position
case|:
return|return
name|Indicator
return|;
default|default:
return|return
name|Slider
return|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleSlider
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
specifier|const
name|State
name|parentState
init|=
name|QAccessibleAbstractSlider
operator|::
name|state
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
return|return
name|parentState
return|;
comment|// Inherit the Invisible state from parent.
name|State
name|state
init|=
name|parentState
operator|&
name|QAccessible
operator|::
name|Invisible
decl_stmt|;
comment|// Disable left/right if we are at the minimum/maximum.
specifier|const
name|QSlider
modifier|*
specifier|const
name|slider
init|=
name|QAccessibleSlider
operator|::
name|slider
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|PageLeft
case|:
if|if
condition|(
name|slider
operator|->
name|value
argument_list|()
operator|<=
name|slider
operator|->
name|minimum
argument_list|()
condition|)
name|state
operator||=
name|Unavailable
expr_stmt|;
break|break;
case|case
name|PageRight
case|:
if|if
condition|(
name|slider
operator|->
name|value
argument_list|()
operator|>=
name|slider
operator|->
name|maximum
argument_list|()
condition|)
name|state
operator||=
name|Unavailable
expr_stmt|;
break|break;
case|case
name|Position
case|:
default|default:
break|break;
block|}
return|return
name|state
return|;
block|}
end_function
begin_comment
comment|/*!     \fn int QAccessibleSlider::defaultAction(int child) const      Returns the default action for the given \a child. The base class     implementation returns 0. */
end_comment
begin_function
DECL|function|defaultAction
name|int
name|QAccessibleSlider
operator|::
name|defaultAction
parameter_list|(
name|int
comment|/*child*/
parameter_list|)
specifier|const
block|{
comment|/*     switch (child) {     case SliderSelf:         return SetFocus;     case PageLeft:         return Press;     case PageRight:         return Press;     } */
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|actionText
name|QString
name|QAccessibleSlider
operator|::
name|actionText
parameter_list|(
name|int
comment|/*action*/
parameter_list|,
name|Text
comment|/*t*/
parameter_list|,
name|int
comment|/*child*/
parameter_list|)
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|""
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QAccessibleAbstractSlider
name|QAccessibleAbstractSlider
operator|::
name|QAccessibleAbstractSlider
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|Role
name|r
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|w
argument_list|,
name|r
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QAbstractSlider
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|invokeMethodEx
name|QVariant
name|QAccessibleAbstractSlider
operator|::
name|invokeMethodEx
parameter_list|(
name|Method
name|method
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
name|params
parameter_list|)
block|{
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|ListSupportedMethods
case|:
block|{
name|QSet
argument_list|<
name|QAccessible
operator|::
name|Method
argument_list|>
name|set
decl_stmt|;
name|set
operator|<<
name|ListSupportedMethods
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|set
operator||
name|qvariant_cast
argument_list|<
name|QSet
argument_list|<
name|QAccessible
operator|::
name|Method
argument_list|>
argument_list|>
argument_list|(
name|QAccessibleWidgetEx
operator|::
name|invokeMethodEx
argument_list|(
name|method
argument_list|,
name|child
argument_list|,
name|params
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
default|default:
return|return
name|QAccessibleWidgetEx
operator|::
name|invokeMethodEx
argument_list|(
name|method
argument_list|,
name|child
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|currentValue
name|QVariant
name|QAccessibleAbstractSlider
operator|::
name|currentValue
parameter_list|()
block|{
return|return
name|abstractSlider
argument_list|()
operator|->
name|value
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setCurrentValue
name|void
name|QAccessibleAbstractSlider
operator|::
name|setCurrentValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|abstractSlider
argument_list|()
operator|->
name|setValue
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maximumValue
name|QVariant
name|QAccessibleAbstractSlider
operator|::
name|maximumValue
parameter_list|()
block|{
return|return
name|abstractSlider
argument_list|()
operator|->
name|maximum
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minimumValue
name|QVariant
name|QAccessibleAbstractSlider
operator|::
name|minimumValue
parameter_list|()
block|{
return|return
name|abstractSlider
argument_list|()
operator|->
name|minimum
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|abstractSlider
name|QAbstractSlider
modifier|*
name|QAccessibleAbstractSlider
operator|::
name|abstractSlider
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QAbstractSlider
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SLIDER
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DIAL
end_ifndef
begin_comment
comment|// ======================================= QAccessibleDial ======================================
end_comment
begin_constructor
DECL|function|QAccessibleDial
name|QAccessibleDial
operator|::
name|QAccessibleDial
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidgetEx
argument_list|(
name|widget
argument_list|,
name|Dial
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QDial
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|addControllingSignal
argument_list|(
name|QLatin1String
argument_list|(
literal|"valueChanged(int)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|rect
name|QRect
name|QAccessibleDial
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
decl_stmt|;
if|if
condition|(
operator|!
name|dial
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|rect
return|;
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|Self
case|:
return|return
name|QAccessibleWidgetEx
operator|::
name|rect
argument_list|(
name|child
argument_list|)
return|;
case|case
name|SpeedoMeter
case|:
block|{
comment|// Mixture from qcommonstyle.cpp (focus rect).
name|int
name|width
init|=
name|dial
argument_list|()
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|dial
argument_list|()
operator|->
name|height
argument_list|()
decl_stmt|;
name|qreal
name|radius
init|=
name|qMin
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
operator|/
literal|2.0
decl_stmt|;
name|qreal
name|delta
init|=
name|radius
operator|/
literal|6.0
decl_stmt|;
name|qreal
name|dx
init|=
name|delta
operator|+
operator|(
name|width
operator|-
literal|2
operator|*
name|radius
operator|)
operator|/
literal|2.0
decl_stmt|;
name|qreal
name|dy
init|=
name|delta
operator|+
operator|(
name|height
operator|-
literal|2
operator|*
name|radius
operator|)
operator|/
literal|2.0
decl_stmt|;
name|rect
operator|=
name|QRect
argument_list|(
name|int
argument_list|(
name|dx
argument_list|)
argument_list|,
name|int
argument_list|(
name|dy
argument_list|)
argument_list|,
name|int
argument_list|(
name|radius
operator|*
literal|2
operator|-
literal|2
operator|*
name|delta
argument_list|)
argument_list|,
name|int
argument_list|(
name|radius
operator|*
literal|2
operator|-
literal|2
operator|*
name|delta
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dial
argument_list|()
operator|->
name|notchesVisible
argument_list|()
condition|)
block|{
name|rect
operator|.
name|translate
argument_list|(
name|int
argument_list|(
operator|-
name|radius
operator|/
literal|6
argument_list|)
argument_list|,
name|int
argument_list|(
operator|-
name|radius
operator|/
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setWidth
argument_list|(
name|rect
operator|.
name|width
argument_list|()
operator|+
name|int
argument_list|(
name|radius
operator|/
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|setHeight
argument_list|(
name|rect
operator|.
name|height
argument_list|()
operator|+
name|int
argument_list|(
name|radius
operator|/
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SliderHandle
case|:
block|{
comment|// Mixture from qcommonstyle.cpp and qdial.cpp.
name|int
name|sliderValue
init|=
operator|!
name|dial
argument_list|()
operator|->
name|invertedAppearance
argument_list|()
condition|?
name|dial
argument_list|()
operator|->
name|value
argument_list|()
else|:
operator|(
name|dial
argument_list|()
operator|->
name|maximum
argument_list|()
operator|-
name|dial
argument_list|()
operator|->
name|value
argument_list|()
operator|)
decl_stmt|;
name|qreal
name|angle
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dial
argument_list|()
operator|->
name|maximum
argument_list|()
operator|==
name|dial
argument_list|()
operator|->
name|minimum
argument_list|()
condition|)
block|{
name|angle
operator|=
name|Q_PI
operator|/
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dial
argument_list|()
operator|->
name|wrapping
argument_list|()
condition|)
block|{
name|angle
operator|=
name|Q_PI
operator|*
literal|3
operator|/
literal|2
operator|-
operator|(
name|sliderValue
operator|-
name|dial
argument_list|()
operator|->
name|minimum
argument_list|()
operator|)
operator|*
literal|2
operator|*
name|Q_PI
operator|/
operator|(
name|dial
argument_list|()
operator|->
name|maximum
argument_list|()
operator|-
name|dial
argument_list|()
operator|->
name|minimum
argument_list|()
operator|)
expr_stmt|;
block|}
else|else
block|{
name|angle
operator|=
operator|(
name|Q_PI
operator|*
literal|8
operator|-
operator|(
name|sliderValue
operator|-
name|dial
argument_list|()
operator|->
name|minimum
argument_list|()
operator|)
operator|*
literal|10
operator|*
name|Q_PI
operator|/
operator|(
name|dial
argument_list|()
operator|->
name|maximum
argument_list|()
operator|-
name|dial
argument_list|()
operator|->
name|minimum
argument_list|()
operator|)
operator|)
operator|/
literal|6
expr_stmt|;
block|}
name|int
name|width
init|=
name|dial
argument_list|()
operator|->
name|rect
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|dial
argument_list|()
operator|->
name|rect
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|radius
init|=
name|qMin
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
operator|/
literal|2
decl_stmt|;
name|int
name|xc
init|=
name|width
operator|/
literal|2
decl_stmt|;
name|int
name|yc
init|=
name|height
operator|/
literal|2
decl_stmt|;
name|int
name|bigLineSize
init|=
name|radius
operator|/
literal|6
decl_stmt|;
if|if
condition|(
name|bigLineSize
operator|<
literal|4
condition|)
name|bigLineSize
operator|=
literal|4
expr_stmt|;
if|if
condition|(
name|bigLineSize
operator|>
name|radius
operator|/
literal|2
condition|)
name|bigLineSize
operator|=
name|radius
operator|/
literal|2
expr_stmt|;
name|int
name|len
init|=
name|radius
operator|-
name|bigLineSize
operator|-
literal|5
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|5
condition|)
name|len
operator|=
literal|5
expr_stmt|;
name|int
name|back
init|=
name|len
operator|/
literal|2
decl_stmt|;
name|QPolygonF
name|arrow
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|arrow
index|[
literal|0
index|]
operator|=
name|QPointF
argument_list|(
literal|0.5
operator|+
name|xc
operator|+
name|len
operator|*
name|qCos
argument_list|(
name|angle
argument_list|)
argument_list|,
literal|0.5
operator|+
name|yc
operator|-
name|len
operator|*
name|qSin
argument_list|(
name|angle
argument_list|)
argument_list|)
expr_stmt|;
name|arrow
index|[
literal|1
index|]
operator|=
name|QPointF
argument_list|(
literal|0.5
operator|+
name|xc
operator|+
name|back
operator|*
name|qCos
argument_list|(
name|angle
operator|+
name|Q_PI
operator|*
literal|5
operator|/
literal|6
argument_list|)
argument_list|,
literal|0.5
operator|+
name|yc
operator|-
name|back
operator|*
name|qSin
argument_list|(
name|angle
operator|+
name|Q_PI
operator|*
literal|5
operator|/
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|arrow
index|[
literal|2
index|]
operator|=
name|QPointF
argument_list|(
literal|0.5
operator|+
name|xc
operator|+
name|back
operator|*
name|qCos
argument_list|(
name|angle
operator|-
name|Q_PI
operator|*
literal|5
operator|/
literal|6
argument_list|)
argument_list|,
literal|0.5
operator|+
name|yc
operator|-
name|back
operator|*
name|qSin
argument_list|(
name|angle
operator|-
name|Q_PI
operator|*
literal|5
operator|/
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|=
name|arrow
operator|.
name|boundingRect
argument_list|()
operator|.
name|toRect
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
return|return
name|QRect
argument_list|()
return|;
block|}
name|QPoint
name|globalPos
init|=
name|dial
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|globalPos
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|globalPos
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleDial
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|SliderHandle
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleDial
operator|::
name|text
parameter_list|(
name|Text
name|textType
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|textType
operator|==
name|Value
operator|&&
name|child
operator|>=
name|Self
operator|&&
name|child
operator|<=
name|SliderHandle
condition|)
return|return
name|QString
operator|::
name|number
argument_list|(
name|dial
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|textType
operator|==
name|Name
condition|)
block|{
switch|switch
condition|(
name|child
condition|)
block|{
case|case
name|Self
case|:
if|if
condition|(
operator|!
name|widget
argument_list|()
operator|->
name|accessibleName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|widget
argument_list|()
operator|->
name|accessibleName
argument_list|()
return|;
return|return
name|QDial
operator|::
name|tr
argument_list|(
literal|"QDial"
argument_list|)
return|;
case|case
name|SpeedoMeter
case|:
return|return
name|QDial
operator|::
name|tr
argument_list|(
literal|"SpeedoMeter"
argument_list|)
return|;
case|case
name|SliderHandle
case|:
return|return
name|QDial
operator|::
name|tr
argument_list|(
literal|"SliderHandle"
argument_list|)
return|;
block|}
block|}
return|return
name|QAccessibleWidgetEx
operator|::
name|text
argument_list|(
name|textType
argument_list|,
name|child
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleDial
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|==
name|SpeedoMeter
condition|)
return|return
name|Slider
return|;
elseif|else
if|if
condition|(
name|child
operator|==
name|SliderHandle
condition|)
return|return
name|Indicator
return|;
return|return
name|QAccessibleWidgetEx
operator|::
name|role
argument_list|(
name|child
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleDial
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
specifier|const
name|State
name|parentState
init|=
name|QAccessibleWidgetEx
operator|::
name|state
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
name|SliderHandle
condition|)
return|return
name|parentState
operator||
name|HotTracked
return|;
return|return
name|parentState
return|;
block|}
end_function
begin_function
DECL|function|invokeMethodEx
name|QVariant
name|QAccessibleDial
operator|::
name|invokeMethodEx
parameter_list|(
name|Method
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|dial
name|QDial
modifier|*
name|QAccessibleDial
operator|::
name|dial
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QDial
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DIAL
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
