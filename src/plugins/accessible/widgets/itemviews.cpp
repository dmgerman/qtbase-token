begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"itemviews.h"
end_include
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<qtableview.h>
end_include
begin_include
include|#
directive|include
file|<qlistview.h>
end_include
begin_include
include|#
directive|include
file|<qtreeview.h>
end_include
begin_include
include|#
directive|include
file|<private/qtreewidget_p.h>
end_include
begin_include
include|#
directive|include
file|<qaccessible2.h>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|QString
name|Q_GUI_EXPORT
name|qt_accStripAmp
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ITEMVIEWS
end_ifndef
begin_comment
comment|/* Implementation of the IAccessible2 table2 interface. Much simpler than the other table interfaces since there is only the main table and cells:  TABLE/LIST/TREE   |- HEADER CELL   |- CELL   |- CELL   ... */
end_comment
begin_function
DECL|function|logicalIndex
name|int
name|QAccessibleTable
operator|::
name|logicalIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|vHeader
init|=
name|verticalHeader
argument_list|()
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|hHeader
init|=
name|horizontalHeader
argument_list|()
condition|?
literal|1
else|:
literal|0
decl_stmt|;
comment|// row * number columns + column + 1 for one based counting
return|return
operator|(
name|index
operator|.
name|row
argument_list|()
operator|+
name|hHeader
operator|)
operator|*
operator|(
name|index
operator|.
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
operator|+
name|vHeader
operator|)
operator|+
operator|(
name|index
operator|.
name|column
argument_list|()
operator|+
name|vHeader
operator|)
operator|+
literal|1
return|;
block|}
end_function
begin_function
DECL|function|childFromLogical
name|QAccessibleInterface
modifier|*
name|QAccessibleTable
operator|::
name|childFromLogical
parameter_list|(
name|int
name|logicalIndex
parameter_list|)
specifier|const
block|{
name|logicalIndex
operator|--
expr_stmt|;
comment|// one based counting ftw
name|int
name|vHeader
init|=
name|verticalHeader
argument_list|()
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|hHeader
init|=
name|horizontalHeader
argument_list|()
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|columns
init|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
operator|+
name|vHeader
decl_stmt|;
name|int
name|row
init|=
name|logicalIndex
operator|/
name|columns
decl_stmt|;
name|int
name|column
init|=
name|logicalIndex
operator|%
name|columns
decl_stmt|;
if|if
condition|(
name|vHeader
condition|)
block|{
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|row
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|QAccessibleTableCornerButton
argument_list|(
name|view
argument_list|)
return|;
block|}
return|return
operator|new
name|QAccessibleTableHeaderCell
argument_list|(
name|view
argument_list|,
name|row
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
return|;
block|}
operator|--
name|column
expr_stmt|;
block|}
if|if
condition|(
name|hHeader
condition|)
block|{
if|if
condition|(
name|row
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|QAccessibleTableHeaderCell
argument_list|(
name|view
argument_list|,
name|column
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
return|;
block|}
operator|--
name|row
expr_stmt|;
block|}
return|return
operator|new
name|QAccessibleTableCell
argument_list|(
name|view
argument_list|,
name|view
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|,
name|cellRole
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QAccessibleTable
name|QAccessibleTable
operator|::
name|QAccessibleTable
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|QAccessibleObject
argument_list|(
name|w
argument_list|)
block|{
name|view
operator|=
name|qobject_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|view
argument_list|)
expr_stmt|;
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
name|m_role
operator|=
name|QAccessible
operator|::
name|Table
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
name|m_role
operator|=
name|QAccessible
operator|::
name|Tree
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QListView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
name|m_role
operator|=
name|QAccessible
operator|::
name|List
expr_stmt|;
block|}
else|else
block|{
comment|// is this our best guess?
name|m_role
operator|=
name|QAccessible
operator|::
name|Table
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QAccessibleTable
name|QAccessibleTable
operator|::
name|~
name|QAccessibleTable
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|horizontalHeader
name|QHeaderView
modifier|*
name|QAccessibleTable
operator|::
name|horizontalHeader
parameter_list|()
specifier|const
block|{
name|QHeaderView
modifier|*
name|header
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTableView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|horizontalHeader
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTreeView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|header
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|header
return|;
block|}
end_function
begin_function
DECL|function|verticalHeader
name|QHeaderView
modifier|*
name|QAccessibleTable
operator|::
name|verticalHeader
parameter_list|()
specifier|const
block|{
name|QHeaderView
modifier|*
name|header
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTableView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|verticalHeader
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|header
return|;
block|}
end_function
begin_function
DECL|function|modelReset
name|void
name|QAccessibleTable
operator|::
name|modelReset
parameter_list|()
block|{}
end_function
begin_function
DECL|function|rowsInserted
name|void
name|QAccessibleTable
operator|::
name|rowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|lastChange
operator|.
name|firstRow
operator|=
name|first
expr_stmt|;
name|lastChange
operator|.
name|lastRow
operator|=
name|last
expr_stmt|;
name|lastChange
operator|.
name|firstColumn
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|lastColumn
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|type
operator|=
name|QAccessible2
operator|::
name|TableModelChangeInsert
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowsRemoved
name|void
name|QAccessibleTable
operator|::
name|rowsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|lastChange
operator|.
name|firstRow
operator|=
name|first
expr_stmt|;
name|lastChange
operator|.
name|lastRow
operator|=
name|last
expr_stmt|;
name|lastChange
operator|.
name|firstColumn
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|lastColumn
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|type
operator|=
name|QAccessible2
operator|::
name|TableModelChangeDelete
expr_stmt|;
block|}
end_function
begin_function
DECL|function|columnsInserted
name|void
name|QAccessibleTable
operator|::
name|columnsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|lastChange
operator|.
name|firstRow
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|lastRow
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|firstColumn
operator|=
name|first
expr_stmt|;
name|lastChange
operator|.
name|lastColumn
operator|=
name|last
expr_stmt|;
name|lastChange
operator|.
name|type
operator|=
name|QAccessible2
operator|::
name|TableModelChangeInsert
expr_stmt|;
block|}
end_function
begin_function
DECL|function|columnsRemoved
name|void
name|QAccessibleTable
operator|::
name|columnsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|last
parameter_list|)
block|{
name|lastChange
operator|.
name|firstRow
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|lastRow
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|firstColumn
operator|=
name|first
expr_stmt|;
name|lastChange
operator|.
name|lastColumn
operator|=
name|last
expr_stmt|;
name|lastChange
operator|.
name|type
operator|=
name|QAccessible2
operator|::
name|TableModelChangeDelete
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowsMoved
name|void
name|QAccessibleTable
operator|::
name|rowsMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
parameter_list|)
block|{
name|lastChange
operator|.
name|firstRow
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|lastRow
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|firstColumn
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|lastColumn
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|type
operator|=
name|QAccessible2
operator|::
name|TableModelChangeUpdate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|columnsMoved
name|void
name|QAccessibleTable
operator|::
name|columnsMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
parameter_list|)
block|{
name|lastChange
operator|.
name|firstRow
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|lastRow
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|firstColumn
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|lastColumn
operator|=
literal|0
expr_stmt|;
name|lastChange
operator|.
name|type
operator|=
name|QAccessible2
operator|::
name|TableModelChangeUpdate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cell
name|QAccessibleTableCell
modifier|*
name|QAccessibleTable
operator|::
name|cell
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|new
name|QAccessibleTableCell
argument_list|(
name|view
argument_list|,
name|index
argument_list|,
name|cellRole
argument_list|()
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|cellAt
name|QAccessibleInterface
modifier|*
name|QAccessibleTable
operator|::
name|cellAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|role
argument_list|()
operator|!=
name|QAccessible
operator|::
name|Tree
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
comment|//Q_ASSERT(index.isValid());
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QAccessibleTable::cellAt: invalid index: "
operator|<<
name|index
operator|<<
literal|" for "
operator|<<
name|view
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|cell
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|caption
name|QAccessibleInterface
modifier|*
name|QAccessibleTable
operator|::
name|caption
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|columnDescription
name|QString
name|QAccessibleTable
operator|::
name|columnDescription
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
return|return
name|view
operator|->
name|model
argument_list|()
operator|->
name|headerData
argument_list|(
name|column
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|columnCount
name|int
name|QAccessibleTable
operator|::
name|columnCount
parameter_list|()
specifier|const
block|{
return|return
name|view
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rowCount
name|int
name|QAccessibleTable
operator|::
name|rowCount
parameter_list|()
specifier|const
block|{
return|return
name|view
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|selectedCellCount
name|int
name|QAccessibleTable
operator|::
name|selectedCellCount
parameter_list|()
specifier|const
block|{
return|return
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|selectedColumnCount
name|int
name|QAccessibleTable
operator|::
name|selectedColumnCount
parameter_list|()
specifier|const
block|{
return|return
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedColumns
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|selectedRowCount
name|int
name|QAccessibleTable
operator|::
name|selectedRowCount
parameter_list|()
specifier|const
block|{
return|return
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedRows
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rowDescription
name|QString
name|QAccessibleTable
operator|::
name|rowDescription
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
return|return
name|view
operator|->
name|model
argument_list|()
operator|->
name|headerData
argument_list|(
name|row
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|selectedCells
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|QAccessibleTable
operator|::
name|selectedCells
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|cells
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QModelIndex&index
argument_list|,
argument|view->selectionModel()->selectedIndexes()
argument_list|)
block|{
name|cells
operator|.
name|append
argument_list|(
name|cell
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cells
return|;
block|}
end_function
begin_function
DECL|function|selectedColumns
name|QList
argument_list|<
name|int
argument_list|>
name|QAccessibleTable
operator|::
name|selectedColumns
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|columns
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QModelIndex&index
argument_list|,
argument|view->selectionModel()->selectedColumns()
argument_list|)
block|{
name|columns
operator|.
name|append
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
end_function
begin_function
DECL|function|selectedRows
name|QList
argument_list|<
name|int
argument_list|>
name|QAccessibleTable
operator|::
name|selectedRows
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|rows
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QModelIndex&index
argument_list|,
argument|view->selectionModel()->selectedRows()
argument_list|)
block|{
name|rows
operator|.
name|append
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rows
return|;
block|}
end_function
begin_function
DECL|function|summary
name|QAccessibleInterface
modifier|*
name|QAccessibleTable
operator|::
name|summary
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|isColumnSelected
name|bool
name|QAccessibleTable
operator|::
name|isColumnSelected
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
return|return
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|isColumnSelected
argument_list|(
name|column
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isRowSelected
name|bool
name|QAccessibleTable
operator|::
name|isRowSelected
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
return|return
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|isRowSelected
argument_list|(
name|row
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selectRow
name|bool
name|QAccessibleTable
operator|::
name|selectRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|QModelIndex
name|index
init|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|view
operator|->
name|selectionMode
argument_list|()
operator|&
name|QAbstractItemView
operator|::
name|NoSelection
condition|)
return|return
literal|false
return|;
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|index
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|selectColumn
name|bool
name|QAccessibleTable
operator|::
name|selectColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|QModelIndex
name|index
init|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|view
operator|->
name|selectionMode
argument_list|()
operator|&
name|QAbstractItemView
operator|::
name|NoSelection
condition|)
return|return
literal|false
return|;
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|index
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|unselectRow
name|bool
name|QAccessibleTable
operator|::
name|unselectRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|QModelIndex
name|index
init|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|view
operator|->
name|selectionMode
argument_list|()
operator|&
name|QAbstractItemView
operator|::
name|NoSelection
condition|)
return|return
literal|false
return|;
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|index
argument_list|,
name|QItemSelectionModel
operator|::
name|Deselect
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|unselectColumn
name|bool
name|QAccessibleTable
operator|::
name|unselectColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|QModelIndex
name|index
init|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|view
operator|->
name|selectionMode
argument_list|()
operator|&
name|QAbstractItemView
operator|::
name|NoSelection
condition|)
return|return
literal|false
return|;
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|index
argument_list|,
name|QItemSelectionModel
operator|::
name|Columns
operator|&
name|QItemSelectionModel
operator|::
name|Deselect
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|modelChange
name|QAccessible2
operator|::
name|TableModelChange
name|QAccessibleTable
operator|::
name|modelChange
parameter_list|()
specifier|const
block|{
name|QAccessible2
operator|::
name|TableModelChange
name|change
decl_stmt|;
comment|// FIXME
return|return
name|change
return|;
block|}
end_function
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleTable
operator|::
name|role
parameter_list|()
specifier|const
block|{
return|return
name|m_role
return|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleTable
operator|::
name|state
parameter_list|()
specifier|const
block|{
return|return
name|QAccessible
operator|::
name|Normal
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleTable
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
name|QPoint
name|viewportOffset
init|=
name|view
operator|->
name|viewport
argument_list|()
operator|->
name|mapTo
argument_list|(
name|view
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QPoint
name|indexPosition
init|=
name|view
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|-
name|viewportOffset
argument_list|)
decl_stmt|;
comment|// FIXME: if indexPosition< 0 in one coordinate, return header
name|QModelIndex
name|index
init|=
name|view
operator|->
name|indexAt
argument_list|(
name|indexPosition
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|logicalIndex
argument_list|(
name|index
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleTable
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|view
operator|->
name|model
argument_list|()
condition|)
return|return
literal|0
return|;
name|int
name|vHeader
init|=
name|verticalHeader
argument_list|()
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|hHeader
init|=
name|horizontalHeader
argument_list|()
condition|?
literal|1
else|:
literal|0
decl_stmt|;
return|return
operator|(
name|view
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
operator|+
name|hHeader
operator|)
operator|*
operator|(
name|view
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
operator|+
name|vHeader
operator|)
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleTable
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|iface
operator|->
name|role
argument_list|()
operator|!=
name|QAccessible
operator|::
name|TreeItem
argument_list|)
expr_stmt|;
comment|// should be handled by tree class
if|if
condition|(
name|iface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|Cell
operator|||
name|iface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|ListItem
condition|)
block|{
specifier|const
name|QAccessibleTableCell
modifier|*
name|cell
init|=
cast|static_cast
argument_list|<
specifier|const
name|QAccessibleTableCell
operator|*
argument_list|>
argument_list|(
name|iface
argument_list|)
decl_stmt|;
return|return
name|logicalIndex
argument_list|(
name|cell
operator|->
name|m_index
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|iface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|ColumnHeader
condition|)
block|{
specifier|const
name|QAccessibleTableHeaderCell
modifier|*
name|cell
init|=
cast|static_cast
argument_list|<
specifier|const
name|QAccessibleTableHeaderCell
operator|*
argument_list|>
argument_list|(
name|iface
argument_list|)
decl_stmt|;
return|return
name|cell
operator|->
name|index
operator|+
operator|(
name|verticalHeader
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|iface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|RowHeader
condition|)
block|{
specifier|const
name|QAccessibleTableHeaderCell
modifier|*
name|cell
init|=
cast|static_cast
argument_list|<
specifier|const
name|QAccessibleTableHeaderCell
operator|*
argument_list|>
argument_list|(
name|iface
argument_list|)
decl_stmt|;
return|return
operator|(
name|cell
operator|->
name|index
operator|+
literal|1
operator|)
operator|*
operator|(
name|view
operator|->
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
operator|+
literal|1
operator|)
operator|+
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|iface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|Pane
condition|)
block|{
return|return
literal|1
return|;
comment|// corner button
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING QAccessibleTable::indexOfChild Fix my children..."
operator|<<
name|iface
operator|->
name|role
argument_list|()
operator|<<
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
expr_stmt|;
block|}
comment|// FIXME: we are in denial of our children. this should stop.
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleTable
operator|::
name|text
parameter_list|(
name|QAccessible
operator|::
name|Text
name|t
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|Description
condition|)
return|return
name|view
operator|->
name|accessibleDescription
argument_list|()
return|;
return|return
name|view
operator|->
name|accessibleName
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleTable
operator|::
name|rect
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|view
operator|->
name|isVisible
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QPoint
name|pos
init|=
name|view
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|QRect
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|,
name|view
operator|->
name|width
argument_list|()
argument_list|,
name|view
operator|->
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parent
name|QAccessibleInterface
modifier|*
name|QAccessibleTable
operator|::
name|parent
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|view
operator|->
name|parent
argument_list|()
condition|)
block|{
if|if
condition|(
name|qstrcmp
argument_list|(
literal|"QComboBoxPrivateContainer"
argument_list|,
name|view
operator|->
name|parent
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|view
operator|->
name|parent
argument_list|()
operator|->
name|parent
argument_list|()
argument_list|)
return|;
block|}
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|view
operator|->
name|parent
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleTable
operator|::
name|child
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
comment|// Fixme: get rid of the +1 madness
return|return
name|childFromLogical
argument_list|(
name|index
operator|+
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleTable
operator|::
name|navigate
parameter_list|(
name|QAccessible
operator|::
name|RelationFlag
name|relation
parameter_list|,
name|int
name|index
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|QAccessible
operator|::
name|Ancestor
case|:
block|{
operator|*
name|iface
operator|=
name|parent
argument_list|()
expr_stmt|;
return|return
operator|*
name|iface
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
case|case
name|QAccessible
operator|::
name|Child
case|:
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|>
literal|0
argument_list|)
expr_stmt|;
operator|*
name|iface
operator|=
name|child
argument_list|(
name|index
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|iface
condition|)
block|{
return|return
literal|0
return|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|relationTo
name|QAccessible
operator|::
name|Relation
name|QAccessibleTable
operator|::
name|relationTo
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
parameter_list|)
specifier|const
block|{
return|return
name|QAccessible
operator|::
name|Unrelated
return|;
block|}
end_function
begin_function
DECL|function|interface_cast
name|void
modifier|*
name|QAccessibleTable
operator|::
name|interface_cast
parameter_list|(
name|QAccessible
operator|::
name|InterfaceType
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|TableInterface
condition|)
return|return
cast|static_cast
argument_list|<
name|QAccessibleTableInterface
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|// TREE VIEW
end_comment
begin_function
DECL|function|indexFromLogical
name|QModelIndex
name|QAccessibleTree
operator|::
name|indexFromLogical
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
specifier|const
name|QTreeView
modifier|*
name|treeView
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|QModelIndex
name|modelIndex
init|=
name|treeView
operator|->
name|d_func
argument_list|()
operator|->
name|viewItems
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|index
decl_stmt|;
if|if
condition|(
name|modelIndex
operator|.
name|isValid
argument_list|()
operator|&&
name|column
operator|>
literal|0
condition|)
block|{
name|modelIndex
operator|=
name|view
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|modelIndex
operator|.
name|row
argument_list|()
argument_list|,
name|column
argument_list|,
name|modelIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|modelIndex
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleTree
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
name|QPoint
name|viewportOffset
init|=
name|view
operator|->
name|viewport
argument_list|()
operator|->
name|mapTo
argument_list|(
name|view
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QPoint
name|indexPosition
init|=
name|view
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|-
name|viewportOffset
argument_list|)
decl_stmt|;
name|QModelIndex
name|index
init|=
name|view
operator|->
name|indexAt
argument_list|(
name|indexPosition
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
specifier|const
name|QTreeView
modifier|*
name|treeView
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|treeView
operator|->
name|d_func
argument_list|()
operator|->
name|viewIndex
argument_list|(
name|index
argument_list|)
operator|+
operator|(
name|horizontalHeader
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|column
init|=
name|index
operator|.
name|column
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|row
operator|*
name|view
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
operator|+
name|column
operator|+
literal|1
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|i
operator|>
name|view
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleTree
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
specifier|const
name|QTreeView
modifier|*
name|treeView
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|treeView
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|view
operator|->
name|model
argument_list|()
condition|)
return|return
literal|0
return|;
name|int
name|hHeader
init|=
name|horizontalHeader
argument_list|()
condition|?
literal|1
else|:
literal|0
decl_stmt|;
return|return
operator|(
name|treeView
operator|->
name|d_func
argument_list|()
operator|->
name|viewItems
operator|.
name|count
argument_list|()
operator|+
name|hHeader
operator|)
operator|*
name|view
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rowCount
name|int
name|QAccessibleTree
operator|::
name|rowCount
parameter_list|()
specifier|const
block|{
specifier|const
name|QTreeView
modifier|*
name|treeView
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|treeView
argument_list|)
expr_stmt|;
return|return
name|treeView
operator|->
name|d_func
argument_list|()
operator|->
name|viewItems
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleTree
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|iface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|TreeItem
condition|)
block|{
specifier|const
name|QAccessibleTableCell
modifier|*
name|cell
init|=
cast|static_cast
argument_list|<
specifier|const
name|QAccessibleTableCell
operator|*
argument_list|>
argument_list|(
name|iface
argument_list|)
decl_stmt|;
specifier|const
name|QTreeView
modifier|*
name|treeView
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|treeView
argument_list|)
expr_stmt|;
name|int
name|row
init|=
name|treeView
operator|->
name|d_func
argument_list|()
operator|->
name|viewIndex
argument_list|(
name|cell
operator|->
name|m_index
argument_list|)
operator|+
operator|(
name|horizontalHeader
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|column
init|=
name|cell
operator|->
name|m_index
operator|.
name|column
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|row
operator|*
name|view
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
operator|+
name|column
operator|+
literal|1
decl_stmt|;
comment|//qDebug()<< "QAccessibleTree::indexOfChild r "<< row<< " c "<< column<< "index "<< index;
name|Q_ASSERT
argument_list|(
name|index
operator|>
name|treeView
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
elseif|else
if|if
condition|(
name|iface
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|ColumnHeader
condition|)
block|{
specifier|const
name|QAccessibleTableHeaderCell
modifier|*
name|cell
init|=
cast|static_cast
argument_list|<
specifier|const
name|QAccessibleTableHeaderCell
operator|*
argument_list|>
argument_list|(
name|iface
argument_list|)
decl_stmt|;
comment|//qDebug()<< "QAccessibleTree::indexOfChild header "<< cell->index<< "is: "<< cell->index + 1;
return|return
name|cell
operator|->
name|index
operator|+
literal|1
return|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING QAccessibleTable::indexOfChild invalid child"
operator|<<
name|iface
operator|->
name|role
argument_list|()
operator|<<
name|iface
operator|->
name|text
argument_list|(
name|QAccessible
operator|::
name|Name
argument_list|)
expr_stmt|;
block|}
comment|// FIXME: add scrollbars and don't just ignore them
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleTree
operator|::
name|navigate
parameter_list|(
name|QAccessible
operator|::
name|RelationFlag
name|relation
parameter_list|,
name|int
name|index
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|QAccessible
operator|::
name|Child
case|:
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|>
literal|0
argument_list|)
expr_stmt|;
operator|--
name|index
expr_stmt|;
name|int
name|hHeader
init|=
name|horizontalHeader
argument_list|()
condition|?
literal|1
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|hHeader
condition|)
block|{
if|if
condition|(
name|index
operator|<
name|view
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
condition|)
block|{
operator|*
name|iface
operator|=
operator|new
name|QAccessibleTableHeaderCell
argument_list|(
name|view
argument_list|,
name|index
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|index
operator|-=
name|view
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|row
init|=
name|index
operator|/
name|view
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
decl_stmt|;
name|int
name|column
init|=
name|index
operator|%
name|view
operator|->
name|model
argument_list|()
operator|->
name|columnCount
argument_list|()
decl_stmt|;
name|QModelIndex
name|modelIndex
init|=
name|indexFromLogical
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|modelIndex
operator|.
name|isValid
argument_list|()
condition|)
block|{
operator|*
name|iface
operator|=
name|cell
argument_list|(
name|modelIndex
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
default|default:
break|break;
block|}
return|return
name|QAccessibleTable
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|index
argument_list|,
name|iface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|relationTo
name|QAccessible
operator|::
name|Relation
name|QAccessibleTree
operator|::
name|relationTo
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
parameter_list|)
specifier|const
block|{
return|return
name|QAccessible
operator|::
name|Unrelated
return|;
block|}
end_function
begin_function
DECL|function|cellAt
name|QAccessibleInterface
modifier|*
name|QAccessibleTree
operator|::
name|cellAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|QModelIndex
name|index
init|=
name|indexFromLogical
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Requested invalid tree cell: "
operator|<<
name|row
operator|<<
name|column
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
operator|new
name|QAccessibleTableCell
argument_list|(
name|view
argument_list|,
name|index
argument_list|,
name|cellRole
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rowDescription
name|QString
name|QAccessibleTree
operator|::
name|rowDescription
parameter_list|(
name|int
parameter_list|)
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
comment|// no headers for rows in trees
block|}
end_function
begin_function
DECL|function|isRowSelected
name|bool
name|QAccessibleTree
operator|::
name|isRowSelected
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|QModelIndex
name|index
init|=
name|indexFromLogical
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|isRowSelected
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|parent
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selectRow
name|bool
name|QAccessibleTree
operator|::
name|selectRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|QModelIndex
name|index
init|=
name|indexFromLogical
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
operator|||
name|view
operator|->
name|selectionMode
argument_list|()
operator|&
name|QAbstractItemView
operator|::
name|NoSelection
condition|)
return|return
literal|false
return|;
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|index
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// TABLE CELL
end_comment
begin_constructor
DECL|function|QAccessibleTableCell
name|QAccessibleTableCell
operator|::
name|QAccessibleTableCell
parameter_list|(
name|QAbstractItemView
modifier|*
name|view_
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index_
parameter_list|,
name|QAccessible
operator|::
name|Role
name|role_
parameter_list|)
member_init_list|:
comment|/* QAccessibleSimpleEditableTextInterface(this), */
name|view
argument_list|(
name|view_
argument_list|)
member_init_list|,
name|m_index
argument_list|(
name|index_
argument_list|)
member_init_list|,
name|m_role
argument_list|(
name|role_
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|index_
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|interface_cast
name|void
modifier|*
name|QAccessibleTableCell
operator|::
name|interface_cast
parameter_list|(
name|QAccessible
operator|::
name|InterfaceType
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
name|QAccessible
operator|::
name|TableCellInterface
condition|)
return|return
cast|static_cast
argument_list|<
name|QAccessibleTableCellInterface
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|columnExtent
name|int
name|QAccessibleTableCell
operator|::
name|columnExtent
parameter_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|rowExtent
name|int
name|QAccessibleTableCell
operator|::
name|rowExtent
parameter_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|rowHeaderCells
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|QAccessibleTableCell
operator|::
name|rowHeaderCells
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|headerCell
decl_stmt|;
if|if
condition|(
name|verticalHeader
argument_list|()
condition|)
block|{
name|headerCell
operator|.
name|append
argument_list|(
operator|new
name|QAccessibleTableHeaderCell
argument_list|(
name|view
argument_list|,
name|m_index
operator|.
name|row
argument_list|()
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|headerCell
return|;
block|}
end_function
begin_function
DECL|function|columnHeaderCells
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|QAccessibleTableCell
operator|::
name|columnHeaderCells
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QAccessibleInterface
modifier|*
argument_list|>
name|headerCell
decl_stmt|;
if|if
condition|(
name|horizontalHeader
argument_list|()
condition|)
block|{
name|headerCell
operator|.
name|append
argument_list|(
operator|new
name|QAccessibleTableHeaderCell
argument_list|(
name|view
argument_list|,
name|m_index
operator|.
name|column
argument_list|()
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|headerCell
return|;
block|}
end_function
begin_function
DECL|function|horizontalHeader
name|QHeaderView
modifier|*
name|QAccessibleTableCell
operator|::
name|horizontalHeader
parameter_list|()
specifier|const
block|{
name|QHeaderView
modifier|*
name|header
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTableView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|horizontalHeader
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTreeView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|header
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|header
return|;
block|}
end_function
begin_function
DECL|function|verticalHeader
name|QHeaderView
modifier|*
name|QAccessibleTableCell
operator|::
name|verticalHeader
parameter_list|()
specifier|const
block|{
name|QHeaderView
modifier|*
name|header
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
if|if
condition|(
specifier|const
name|QTableView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
name|header
operator|=
name|tv
operator|->
name|verticalHeader
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
name|header
return|;
block|}
end_function
begin_function
DECL|function|columnIndex
name|int
name|QAccessibleTableCell
operator|::
name|columnIndex
parameter_list|()
specifier|const
block|{
return|return
name|m_index
operator|.
name|column
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rowIndex
name|int
name|QAccessibleTableCell
operator|::
name|rowIndex
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|TreeItem
condition|)
block|{
specifier|const
name|QTreeView
modifier|*
name|treeView
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|treeView
argument_list|)
expr_stmt|;
name|int
name|row
init|=
name|treeView
operator|->
name|d_func
argument_list|()
operator|->
name|viewIndex
argument_list|(
name|m_index
argument_list|)
decl_stmt|;
return|return
name|row
return|;
block|}
return|return
name|m_index
operator|.
name|row
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isSelected
name|bool
name|QAccessibleTableCell
operator|::
name|isSelected
parameter_list|()
specifier|const
block|{
return|return
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|isSelected
argument_list|(
name|m_index
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rowColumnExtents
name|void
name|QAccessibleTableCell
operator|::
name|rowColumnExtents
parameter_list|(
name|int
modifier|*
name|row
parameter_list|,
name|int
modifier|*
name|column
parameter_list|,
name|int
modifier|*
name|rowExtents
parameter_list|,
name|int
modifier|*
name|columnExtents
parameter_list|,
name|bool
modifier|*
name|selected
parameter_list|)
specifier|const
block|{
operator|*
name|row
operator|=
name|m_index
operator|.
name|row
argument_list|()
expr_stmt|;
operator|*
name|column
operator|=
name|m_index
operator|.
name|column
argument_list|()
expr_stmt|;
operator|*
name|rowExtents
operator|=
literal|1
expr_stmt|;
operator|*
name|columnExtents
operator|=
literal|1
expr_stmt|;
operator|*
name|selected
operator|=
name|isSelected
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|table
name|QAccessibleInterface
modifier|*
name|QAccessibleTableCell
operator|::
name|table
parameter_list|()
specifier|const
block|{
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|view
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleTableCell
operator|::
name|role
parameter_list|()
specifier|const
block|{
return|return
name|m_role
return|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleTableCell
operator|::
name|state
parameter_list|()
specifier|const
block|{
name|QAccessible
operator|::
name|State
name|st
init|=
name|QAccessible
operator|::
name|Normal
decl_stmt|;
name|QRect
name|globalRect
init|=
name|view
operator|->
name|rect
argument_list|()
decl_stmt|;
name|globalRect
operator|.
name|translate
argument_list|(
name|view
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|globalRect
operator|.
name|intersects
argument_list|(
name|rect
argument_list|()
argument_list|)
condition|)
name|st
operator||=
name|QAccessible
operator|::
name|Invisible
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|isSelected
argument_list|(
name|m_index
argument_list|)
condition|)
name|st
operator||=
name|QAccessible
operator|::
name|Selected
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|selectionModel
argument_list|()
operator|->
name|currentIndex
argument_list|()
operator|==
name|m_index
condition|)
name|st
operator||=
name|QAccessible
operator|::
name|Focused
expr_stmt|;
if|if
condition|(
name|m_index
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|m_index
argument_list|,
name|Qt
operator|::
name|CheckStateRole
argument_list|)
operator|.
name|toInt
argument_list|()
operator|==
name|Qt
operator|::
name|Checked
condition|)
name|st
operator||=
name|QAccessible
operator|::
name|Checked
expr_stmt|;
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|m_index
operator|.
name|flags
argument_list|()
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|ItemIsSelectable
condition|)
block|{
name|st
operator||=
name|QAccessible
operator|::
name|Selectable
expr_stmt|;
name|st
operator||=
name|QAccessible
operator|::
name|Focusable
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|MultiSelection
condition|)
name|st
operator||=
name|QAccessible
operator|::
name|MultiSelectable
expr_stmt|;
if|if
condition|(
name|view
operator|->
name|selectionMode
argument_list|()
operator|==
name|QAbstractItemView
operator|::
name|ExtendedSelection
condition|)
name|st
operator||=
name|QAccessible
operator|::
name|ExtSelectable
expr_stmt|;
block|}
if|if
condition|(
name|m_role
operator|==
name|QAccessible
operator|::
name|TreeItem
condition|)
block|{
specifier|const
name|QTreeView
modifier|*
name|treeView
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
decl_stmt|;
if|if
condition|(
name|treeView
operator|->
name|model
argument_list|()
operator|->
name|hasChildren
argument_list|(
name|m_index
argument_list|)
condition|)
name|st
operator||=
name|QAccessible
operator|::
name|Expandable
expr_stmt|;
if|if
condition|(
name|treeView
operator|->
name|isExpanded
argument_list|(
name|m_index
argument_list|)
condition|)
name|st
operator||=
name|QAccessible
operator|::
name|Expanded
expr_stmt|;
block|}
return|return
name|st
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleTableCell
operator|::
name|rect
parameter_list|()
specifier|const
block|{
name|QRect
name|r
decl_stmt|;
name|r
operator|=
name|view
operator|->
name|visualRect
argument_list|(
name|m_index
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isNull
argument_list|()
condition|)
name|r
operator|.
name|translate
argument_list|(
name|view
operator|->
name|viewport
argument_list|()
operator|->
name|mapTo
argument_list|(
name|view
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|translate
argument_list|(
name|view
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleTableCell
operator|::
name|text
parameter_list|(
name|QAccessible
operator|::
name|Text
name|t
parameter_list|)
specifier|const
block|{
name|QAbstractItemModel
modifier|*
name|model
init|=
name|view
operator|->
name|model
argument_list|()
decl_stmt|;
name|QString
name|value
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|QAccessible
operator|::
name|Value
case|:
case|case
name|QAccessible
operator|::
name|Name
case|:
name|value
operator|=
name|model
operator|->
name|data
argument_list|(
name|m_index
argument_list|,
name|Qt
operator|::
name|AccessibleTextRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|=
name|model
operator|->
name|data
argument_list|(
name|m_index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Description
case|:
name|value
operator|=
name|model
operator|->
name|data
argument_list|(
name|m_index
argument_list|,
name|Qt
operator|::
name|AccessibleDescriptionRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessibleTableCell
operator|::
name|setText
parameter_list|(
name|QAccessible
operator|::
name|Text
comment|/*t*/
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|m_index
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsEditable
operator|)
condition|)
return|return;
name|view
operator|->
name|model
argument_list|()
operator|->
name|setData
argument_list|(
name|m_index
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QAccessibleTableCell
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Interface is not valid"
expr_stmt|;
block|}
return|return
name|m_index
operator|.
name|isValid
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|parent
name|QAccessibleInterface
modifier|*
name|QAccessibleTableCell
operator|::
name|parent
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_role
operator|==
name|QAccessible
operator|::
name|TreeItem
condition|)
return|return
operator|new
name|QAccessibleTree
argument_list|(
name|view
argument_list|)
return|;
return|return
operator|new
name|QAccessibleTable
argument_list|(
name|view
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleTableCell
operator|::
name|child
parameter_list|(
name|int
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleTableCell
operator|::
name|navigate
parameter_list|(
name|QAccessible
operator|::
name|RelationFlag
name|relation
parameter_list|,
name|int
name|index
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|relation
operator|==
name|QAccessible
operator|::
name|Ancestor
operator|&&
name|index
operator|==
literal|1
condition|)
block|{
operator|*
name|iface
operator|=
name|parent
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|view
condition|)
return|return
operator|-
literal|1
return|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|QAccessible
operator|::
name|Child
case|:
block|{
return|return
operator|-
literal|1
return|;
block|}
case|case
name|QAccessible
operator|::
name|Sibling
case|:
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|QAccessibleInterface
modifier|*
name|parent
init|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|view
argument_list|)
decl_stmt|;
operator|*
name|iface
operator|=
name|parent
operator|->
name|child
argument_list|(
name|index
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|parent
expr_stmt|;
return|return
operator|*
name|iface
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
comment|// From table1 implementation:
comment|//    case Up:
comment|//    case Down:
comment|//    case Left:
comment|//    case Right: {
comment|//        // This is in the "not so nice" category. In order to find out which item
comment|//        // is geometrically around, we have to set the current index, navigate
comment|//        // and restore the index as well as the old selection
comment|//        view->setUpdatesEnabled(false);
comment|//        const QModelIndex oldIdx = view->currentIndex();
comment|//        QList<QModelIndex> kids = children();
comment|//        const QModelIndex currentIndex = index ? kids.at(index - 1) : QModelIndex(row);
comment|//        const QItemSelection oldSelection = view->selectionModel()->selection();
comment|//        view->setCurrentIndex(currentIndex);
comment|//        const QModelIndex idx = view->moveCursor(toCursorAction(relation), Qt::NoModifier);
comment|//        view->setCurrentIndex(oldIdx);
comment|//        view->selectionModel()->select(oldSelection, QItemSelectionModel::ClearAndSelect);
comment|//        view->setUpdatesEnabled(true);
comment|//        if (!idx.isValid())
comment|//            return -1;
comment|//        if (idx.parent() != row.parent() || idx.row() != row.row())
comment|//            *iface = cell(idx);
comment|//        return index ? kids.indexOf(idx) + 1 : 0; }
default|default:
break|break;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|relationTo
name|QAccessible
operator|::
name|Relation
name|QAccessibleTableCell
operator|::
name|relationTo
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|other
parameter_list|)
specifier|const
block|{
comment|// we only check for parent-child relationships in trees
if|if
condition|(
name|m_role
operator|==
name|QAccessible
operator|::
name|TreeItem
operator|&&
name|other
operator|->
name|role
argument_list|()
operator|==
name|QAccessible
operator|::
name|TreeItem
condition|)
block|{
name|QModelIndex
name|otherIndex
init|=
cast|static_cast
argument_list|<
specifier|const
name|QAccessibleTableCell
operator|*
argument_list|>
argument_list|(
name|other
argument_list|)
operator|->
name|m_index
decl_stmt|;
comment|// is the other our parent?
if|if
condition|(
name|otherIndex
operator|.
name|parent
argument_list|()
operator|==
name|m_index
condition|)
return|return
name|QAccessible
operator|::
name|Ancestor
return|;
comment|// are we the other's child?
if|if
condition|(
name|m_index
operator|.
name|parent
argument_list|()
operator|==
name|otherIndex
condition|)
return|return
name|QAccessible
operator|::
name|Child
return|;
block|}
return|return
name|QAccessible
operator|::
name|Unrelated
return|;
block|}
end_function
begin_constructor
DECL|function|QAccessibleTableHeaderCell
name|QAccessibleTableHeaderCell
operator|::
name|QAccessibleTableHeaderCell
parameter_list|(
name|QAbstractItemView
modifier|*
name|view_
parameter_list|,
name|int
name|index_
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation_
parameter_list|)
member_init_list|:
name|view
argument_list|(
name|view_
argument_list|)
member_init_list|,
name|index
argument_list|(
name|index_
argument_list|)
member_init_list|,
name|orientation
argument_list|(
name|orientation_
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|index_
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleTableHeaderCell
operator|::
name|role
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
return|return
name|QAccessible
operator|::
name|ColumnHeader
return|;
return|return
name|QAccessible
operator|::
name|RowHeader
return|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleTableHeaderCell
operator|::
name|state
parameter_list|()
specifier|const
block|{
return|return
name|QAccessible
operator|::
name|Normal
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleTableHeaderCell
operator|::
name|rect
parameter_list|()
specifier|const
block|{
name|QHeaderView
modifier|*
name|header
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTableView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|horizontalHeader
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|header
operator|=
name|tv
operator|->
name|verticalHeader
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTreeView
modifier|*
name|tv
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
name|header
operator|=
name|tv
operator|->
name|header
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
name|QPoint
name|zero
init|=
name|header
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sectionSize
init|=
name|header
operator|->
name|sectionSize
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|int
name|sectionPos
init|=
name|header
operator|->
name|sectionPosition
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|?
name|QRect
argument_list|(
name|zero
operator|.
name|x
argument_list|()
operator|+
name|sectionPos
argument_list|,
name|zero
operator|.
name|y
argument_list|()
argument_list|,
name|sectionSize
argument_list|,
name|header
operator|->
name|height
argument_list|()
argument_list|)
else|:
name|QRect
argument_list|(
name|zero
operator|.
name|x
argument_list|()
argument_list|,
name|zero
operator|.
name|y
argument_list|()
operator|+
name|sectionPos
argument_list|,
name|header
operator|->
name|width
argument_list|()
argument_list|,
name|sectionSize
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleTableHeaderCell
operator|::
name|text
parameter_list|(
name|QAccessible
operator|::
name|Text
name|t
parameter_list|)
specifier|const
block|{
name|QAbstractItemModel
modifier|*
name|model
init|=
name|view
operator|->
name|model
argument_list|()
decl_stmt|;
name|QString
name|value
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|QAccessible
operator|::
name|Value
case|:
case|case
name|QAccessible
operator|::
name|Name
case|:
name|value
operator|=
name|model
operator|->
name|headerData
argument_list|(
name|index
argument_list|,
name|orientation
argument_list|,
name|Qt
operator|::
name|AccessibleTextRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|=
name|model
operator|->
name|headerData
argument_list|(
name|index
argument_list|,
name|orientation
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Description
case|:
name|value
operator|=
name|model
operator|->
name|headerData
argument_list|(
name|index
argument_list|,
name|orientation
argument_list|,
name|Qt
operator|::
name|AccessibleDescriptionRole
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessibleTableHeaderCell
operator|::
name|setText
parameter_list|(
name|QAccessible
operator|::
name|Text
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
return|return;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QAccessibleTableHeaderCell
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parent
name|QAccessibleInterface
modifier|*
name|QAccessibleTableHeaderCell
operator|::
name|parent
parameter_list|()
specifier|const
block|{
if|if
condition|(
literal|false
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
block|{
return|return
operator|new
name|QAccessibleTree
argument_list|(
name|view
argument_list|)
return|;
endif|#
directive|endif
block|}
else|else
block|{
return|return
operator|new
name|QAccessibleTable
argument_list|(
name|view
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleTableHeaderCell
operator|::
name|child
parameter_list|(
name|int
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleTableHeaderCell
operator|::
name|navigate
parameter_list|(
name|QAccessible
operator|::
name|RelationFlag
name|relation
parameter_list|,
name|int
name|index
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|relation
operator|==
name|QAccessible
operator|::
name|Ancestor
operator|&&
name|index
operator|==
literal|1
condition|)
block|{
operator|*
name|iface
operator|=
name|parent
argument_list|()
expr_stmt|;
return|return
operator|*
name|iface
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|relationTo
name|QAccessible
operator|::
name|Relation
name|QAccessibleTableHeaderCell
operator|::
name|relationTo
parameter_list|(
name|int
parameter_list|,
specifier|const
name|QAccessibleInterface
modifier|*
parameter_list|,
name|int
parameter_list|)
specifier|const
block|{
return|return
name|QAccessible
operator|::
name|Unrelated
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ITEMVIEWS
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
end_unit
