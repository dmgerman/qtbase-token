begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qaccessiblewidgets.h"
end_include
begin_include
include|#
directive|include
file|"qabstracttextdocumentlayout.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qclipboard.h"
end_include
begin_include
include|#
directive|include
file|"qtextedit.h"
end_include
begin_include
include|#
directive|include
file|"private/qtextedit_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextdocument.h"
end_include
begin_include
include|#
directive|include
file|"qtextobject.h"
end_include
begin_include
include|#
directive|include
file|"qscrollbar.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QStackedWidget>
end_include
begin_include
include|#
directive|include
file|<QToolBox>
end_include
begin_include
include|#
directive|include
file|<QMdiArea>
end_include
begin_include
include|#
directive|include
file|<QMdiSubWindow>
end_include
begin_include
include|#
directive|include
file|<QWorkspace>
end_include
begin_include
include|#
directive|include
file|<QDialogButtonBox>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<QRubberBand>
end_include
begin_include
include|#
directive|include
file|<QTextBrowser>
end_include
begin_include
include|#
directive|include
file|<QCalendarWidget>
end_include
begin_include
include|#
directive|include
file|<QAbstractItemView>
end_include
begin_include
include|#
directive|include
file|<QDockWidget>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QAbstractButton>
end_include
begin_include
include|#
directive|include
file|<private/qdockwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<QFocusFrame>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_using
using|using
namespace|namespace
name|QAccessible2
namespace|;
end_using
begin_function_decl
name|QString
name|Q_GUI_EXPORT
name|qt_accStripAmp
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QString
name|Q_GUI_EXPORT
name|qt_accHotKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|childWidgets
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|childWidgets
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|bool
name|includeTopLevel
parameter_list|)
block|{
if|if
condition|(
name|widget
operator|==
literal|0
condition|)
return|return
name|QList
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
return|;
name|QList
argument_list|<
name|QObject
modifier|*
argument_list|>
name|list
init|=
name|widget
operator|->
name|children
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|widgets
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
continue|continue;
name|QString
name|objectName
init|=
name|w
operator|->
name|objectName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|includeTopLevel
operator|||
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|)
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QFocusFrame
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|&&
name|objectName
operator|!=
name|QLatin1String
argument_list|(
literal|"qt_rubberband"
argument_list|)
operator|&&
name|objectName
operator|!=
name|QLatin1String
argument_list|(
literal|"qt_qmainwindow_extended_splitter"
argument_list|)
condition|)
block|{
name|widgets
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|widgets
return|;
block|}
end_function
begin_function
DECL|function|distance
specifier|static
specifier|inline
name|int
name|distance
parameter_list|(
name|QWidget
modifier|*
name|source
parameter_list|,
name|QWidget
modifier|*
name|target
parameter_list|,
name|QAccessible
operator|::
name|RelationFlag
name|relation
parameter_list|)
block|{
if|if
condition|(
operator|!
name|source
operator|||
operator|!
name|target
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|returnValue
init|=
operator|-
literal|1
decl_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|QAccessible
operator|::
name|Up
case|:
if|if
condition|(
name|target
operator|->
name|y
argument_list|()
operator|<=
name|source
operator|->
name|y
argument_list|()
condition|)
name|returnValue
operator|=
name|source
operator|->
name|y
argument_list|()
operator|-
name|target
operator|->
name|y
argument_list|()
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Down
case|:
if|if
condition|(
name|target
operator|->
name|y
argument_list|()
operator|>=
name|source
operator|->
name|y
argument_list|()
operator|+
name|source
operator|->
name|height
argument_list|()
condition|)
name|returnValue
operator|=
name|target
operator|->
name|y
argument_list|()
operator|-
operator|(
name|source
operator|->
name|y
argument_list|()
operator|+
name|source
operator|->
name|height
argument_list|()
operator|)
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Right
case|:
if|if
condition|(
name|target
operator|->
name|x
argument_list|()
operator|>=
name|source
operator|->
name|x
argument_list|()
operator|+
name|source
operator|->
name|width
argument_list|()
condition|)
name|returnValue
operator|=
name|target
operator|->
name|x
argument_list|()
operator|-
operator|(
name|source
operator|->
name|x
argument_list|()
operator|+
name|source
operator|->
name|width
argument_list|()
operator|)
expr_stmt|;
break|break;
case|case
name|QAccessible
operator|::
name|Left
case|:
if|if
condition|(
name|target
operator|->
name|x
argument_list|()
operator|<=
name|source
operator|->
name|x
argument_list|()
condition|)
name|returnValue
operator|=
name|source
operator|->
name|x
argument_list|()
operator|-
name|target
operator|->
name|x
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|returnValue
return|;
block|}
end_function
begin_function
DECL|function|mdiAreaNavigate
specifier|static
specifier|inline
name|QWidget
modifier|*
name|mdiAreaNavigate
parameter_list|(
name|QWidget
modifier|*
name|area
parameter_list|,
name|QAccessible
operator|::
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_MDIAREA
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_NO_WORKSPACE
argument_list|)
name|Q_UNUSED
argument_list|(
name|area
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
specifier|const
name|QMdiArea
modifier|*
name|mdiArea
init|=
name|qobject_cast
argument_list|<
name|QMdiArea
operator|*
argument_list|>
argument_list|(
name|area
argument_list|)
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WORKSPACE
specifier|const
name|QWorkspace
modifier|*
name|workspace
init|=
name|qobject_cast
argument_list|<
name|QWorkspace
operator|*
argument_list|>
argument_list|(
name|area
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
literal|true
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
operator|&&
operator|!
name|mdiArea
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WORKSPACE
operator|&&
operator|!
name|workspace
endif|#
directive|endif
condition|)
return|return
literal|0
return|;
name|QWidgetList
name|windows
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
if|if
condition|(
name|mdiArea
condition|)
block|{
foreach|foreach
control|(
name|QMdiSubWindow
modifier|*
name|window
decl|,
name|mdiArea
operator|->
name|subWindowList
argument_list|()
control|)
name|windows
operator|.
name|append
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
ifndef|#
directive|ifndef
name|QT_NO_WORKSPACE
foreach|foreach
control|(
name|QWidget
modifier|*
name|window
decl|,
name|workspace
operator|->
name|windowList
argument_list|()
control|)
name|windows
operator|.
name|append
argument_list|(
name|window
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|windows
operator|.
name|isEmpty
argument_list|()
operator|||
name|entry
argument_list|<
literal|1
operator|||
name|entry
argument_list|>
name|windows
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
name|QWidget
modifier|*
name|source
init|=
name|windows
operator|.
name|at
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QWidget
modifier|*
argument_list|>
name|candidates
decl_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|window
decl|,
name|windows
control|)
block|{
if|if
condition|(
name|source
operator|==
name|window
condition|)
continue|continue;
name|int
name|candidateDistance
init|=
name|distance
argument_list|(
name|source
argument_list|,
name|window
argument_list|,
name|relation
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidateDistance
operator|>=
literal|0
condition|)
name|candidates
operator|.
name|insert
argument_list|(
name|candidateDistance
argument_list|,
name|window
argument_list|)
expr_stmt|;
block|}
name|int
name|minimumDistance
init|=
name|INT_MAX
decl_stmt|;
name|QWidget
modifier|*
name|target
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|candidate
decl|,
name|candidates
control|)
block|{
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|QAccessible
operator|::
name|Up
case|:
case|case
name|QAccessible
operator|::
name|Down
case|:
if|if
condition|(
name|qAbs
argument_list|(
name|candidate
operator|->
name|x
argument_list|()
operator|-
name|source
operator|->
name|x
argument_list|()
argument_list|)
operator|<
name|minimumDistance
condition|)
block|{
name|target
operator|=
name|candidate
expr_stmt|;
name|minimumDistance
operator|=
name|qAbs
argument_list|(
name|candidate
operator|->
name|x
argument_list|()
operator|-
name|source
operator|->
name|x
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QAccessible
operator|::
name|Left
case|:
case|case
name|QAccessible
operator|::
name|Right
case|:
if|if
condition|(
name|qAbs
argument_list|(
name|candidate
operator|->
name|y
argument_list|()
operator|-
name|source
operator|->
name|y
argument_list|()
argument_list|)
operator|<
name|minimumDistance
condition|)
block|{
name|target
operator|=
name|candidate
expr_stmt|;
name|minimumDistance
operator|=
name|qAbs
argument_list|(
name|candidate
operator|->
name|y
argument_list|()
operator|-
name|source
operator|->
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|minimumDistance
operator|==
literal|0
condition|)
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_WORKSPACE
if|if
condition|(
name|workspace
condition|)
block|{
foreach|foreach
control|(
name|QWidget
modifier|*
name|widget
decl|,
name|workspace
operator|->
name|windowList
argument_list|()
control|)
block|{
if|if
condition|(
name|widget
operator|->
name|parentWidget
argument_list|()
operator|==
name|target
condition|)
name|target
operator|=
name|widget
expr_stmt|;
block|}
block|}
endif|#
directive|endif
return|return
name|target
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
end_ifndef
begin_comment
comment|/*!   \class QAccessibleTextEdit   \brief The QAccessibleTextEdit class implements the QAccessibleInterface for richtext editors.   \internal */
end_comment
begin_function
DECL|function|qTextBlockAt
specifier|static
name|QTextBlock
name|qTextBlockAt
parameter_list|(
specifier|const
name|QTextDocument
modifier|*
name|doc
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|pos
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|begin
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|block
operator|.
name|isValid
argument_list|()
operator|&&
name|i
operator|<
name|pos
condition|)
block|{
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
return|return
name|block
return|;
block|}
end_function
begin_function
DECL|function|qTextBlockPosition
specifier|static
name|int
name|qTextBlockPosition
parameter_list|(
name|QTextBlock
name|block
parameter_list|)
block|{
name|int
name|child
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|block
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|block
operator|=
name|block
operator|.
name|previous
argument_list|()
expr_stmt|;
operator|++
name|child
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
end_function
begin_comment
comment|/*!   \fn QAccessibleTextEdit::QAccessibleTextEdit(QWidget* widget)    Constructs a QAccessibleTextEdit object for a \a widget. */
end_comment
begin_constructor
DECL|function|QAccessibleTextEdit
name|QAccessibleTextEdit
operator|::
name|QAccessibleTextEdit
parameter_list|(
name|QWidget
modifier|*
name|o
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|o
argument_list|,
name|EditableText
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|widget
argument_list|()
operator|->
name|inherits
argument_list|(
literal|"QTextEdit"
argument_list|)
argument_list|)
expr_stmt|;
name|childOffset
operator|=
name|QAccessibleWidget
operator|::
name|childCount
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! Returns the text edit. */
end_comment
begin_function
DECL|function|textEdit
name|QTextEdit
modifier|*
name|QAccessibleTextEdit
operator|::
name|textEdit
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QTextEdit
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleTextEdit
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|<=
name|childOffset
condition|)
return|return
name|QAccessibleWidget
operator|::
name|rect
argument_list|(
name|child
argument_list|)
return|;
name|QTextEdit
modifier|*
name|edit
init|=
name|textEdit
argument_list|()
decl_stmt|;
name|QTextBlock
name|block
init|=
name|qTextBlockAt
argument_list|(
name|edit
operator|->
name|document
argument_list|()
argument_list|,
name|child
operator|-
name|childOffset
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|block
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QRect
name|rect
init|=
name|edit
operator|->
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|rect
operator|.
name|translate
argument_list|(
operator|-
name|edit
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
operator|-
name|edit
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|rect
operator|=
name|edit
operator|->
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
operator|.
name|intersect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
return|return
name|rect
operator|.
name|translated
argument_list|(
name|edit
operator|->
name|viewport
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleTextEdit
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
name|QTextEdit
modifier|*
name|edit
init|=
name|textEdit
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|edit
operator|->
name|isVisible
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|QPoint
name|point
init|=
name|edit
operator|->
name|viewport
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|QTextBlock
name|block
init|=
name|edit
operator|->
name|cursorForPosition
argument_list|(
name|point
argument_list|)
operator|.
name|block
argument_list|()
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|qTextBlockPosition
argument_list|(
name|block
argument_list|)
operator|+
name|childOffset
return|;
return|return
name|QAccessibleWidget
operator|::
name|childAt
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|text
name|QString
name|QAccessibleTextEdit
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|t
operator|==
name|Value
condition|)
block|{
if|if
condition|(
name|child
operator|>
name|childOffset
condition|)
return|return
name|qTextBlockAt
argument_list|(
name|textEdit
argument_list|()
operator|->
name|document
argument_list|()
argument_list|,
name|child
operator|-
name|childOffset
operator|-
literal|1
argument_list|)
operator|.
name|text
argument_list|()
return|;
if|if
condition|(
operator|!
name|child
condition|)
return|return
name|textEdit
argument_list|()
operator|->
name|toPlainText
argument_list|()
return|;
block|}
return|return
name|QAccessibleWidget
operator|::
name|text
argument_list|(
name|t
argument_list|,
name|child
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|setText
name|void
name|QAccessibleTextEdit
operator|::
name|setText
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
name|Value
operator|||
operator|(
name|child
operator|>
literal|0
operator|&&
name|child
operator|<=
name|childOffset
operator|)
condition|)
block|{
name|QAccessibleWidget
operator|::
name|setText
argument_list|(
name|t
argument_list|,
name|child
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|textEdit
argument_list|()
operator|->
name|isReadOnly
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|child
condition|)
block|{
name|textEdit
argument_list|()
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return;
block|}
name|QTextBlock
name|block
init|=
name|qTextBlockAt
argument_list|(
name|textEdit
argument_list|()
operator|->
name|document
argument_list|()
argument_list|,
name|child
operator|-
name|childOffset
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|block
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QTextCursor
name|cursor
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|BlockUnderCursor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleTextEdit
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|>
name|childOffset
condition|)
return|return
name|EditableText
return|;
return|return
name|QAccessibleWidget
operator|::
name|role
argument_list|(
name|child
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|invokeMethod
name|QVariant
name|QAccessibleTextEdit
operator|::
name|invokeMethod
parameter_list|(
name|QAccessible
operator|::
name|Method
name|method
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
name|params
parameter_list|)
block|{
if|if
condition|(
name|child
condition|)
return|return
name|QVariant
argument_list|()
return|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
name|ListSupportedMethods
case|:
block|{
name|QSet
argument_list|<
name|QAccessible
operator|::
name|Method
argument_list|>
name|set
decl_stmt|;
name|set
operator|<<
name|ListSupportedMethods
operator|<<
name|SetCursorPosition
operator|<<
name|GetCursorPosition
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|set
operator||
name|qvariant_cast
argument_list|<
name|QSet
argument_list|<
name|QAccessible
operator|::
name|Method
argument_list|>
argument_list|>
argument_list|(
name|QAccessibleWidget
operator|::
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|child
argument_list|,
name|params
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
case|case
name|SetCursorPosition
case|:
name|setCursorPosition
argument_list|(
name|params
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|GetCursorPosition
case|:
return|return
name|textEdit
argument_list|()
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
return|;
default|default:
return|return
name|QAccessibleWidget
operator|::
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|child
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleTextEdit
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|childOffset
operator|+
name|textEdit
argument_list|()
operator|->
name|document
argument_list|()
operator|->
name|blockCount
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTEDIT
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STACKEDWIDGET
end_ifndef
begin_comment
comment|// ======================= QAccessibleStackedWidget ======================
end_comment
begin_constructor
DECL|function|QAccessibleStackedWidget
name|QAccessibleStackedWidget
operator|::
name|QAccessibleStackedWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|LayeredPane
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QStackedWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|invokeMethod
name|QVariant
name|QAccessibleStackedWidget
operator|::
name|invokeMethod
parameter_list|(
name|QAccessible
operator|::
name|Method
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleStackedWidget
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|stackedWidget
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|QWidget
modifier|*
name|currentWidget
init|=
name|stackedWidget
argument_list|()
operator|->
name|currentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentWidget
condition|)
return|return
operator|-
literal|1
return|;
name|QPoint
name|position
init|=
name|currentWidget
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentWidget
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|position
argument_list|)
condition|)
return|return
literal|1
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleStackedWidget
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|stackedWidget
argument_list|()
operator|->
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleStackedWidget
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
operator|-
literal|1
return|;
name|QWidget
modifier|*
name|widget
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|stackedWidget
argument_list|()
operator|->
name|indexOf
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
comment|// one based counting of children
return|return
name|index
operator|+
literal|1
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleStackedWidget
operator|::
name|child
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|stackedWidget
argument_list|()
operator|->
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|stackedWidget
argument_list|()
operator|->
name|widget
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleStackedWidget
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Child
case|:
operator|*
name|target
operator|=
name|child
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
default|default:
return|return
name|QAccessibleWidget
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|stackedWidget
name|QStackedWidget
modifier|*
name|QAccessibleStackedWidget
operator|::
name|stackedWidget
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QStackedWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STACKEDWIDGET
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
end_ifndef
begin_comment
comment|// ======================= QAccessibleToolBox ======================
end_comment
begin_constructor
DECL|function|QAccessibleToolBox
name|QAccessibleToolBox
operator|::
name|QAccessibleToolBox
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|LayeredPane
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|text
name|QString
name|QAccessibleToolBox
operator|::
name|text
parameter_list|(
name|Text
name|textType
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|textType
operator|!=
name|Value
operator|||
name|child
operator|<=
literal|0
operator|||
name|child
operator|>
name|toolBox
argument_list|()
operator|->
name|count
argument_list|()
condition|)
return|return
name|QAccessibleWidget
operator|::
name|text
argument_list|(
name|textType
argument_list|,
name|child
argument_list|)
return|;
return|return
name|toolBox
argument_list|()
operator|->
name|itemText
argument_list|(
name|child
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessibleToolBox
operator|::
name|setText
parameter_list|(
name|Text
name|textType
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|textType
operator|!=
name|Value
operator|||
name|child
operator|<=
literal|0
operator|||
name|child
operator|>
name|toolBox
argument_list|()
operator|->
name|count
argument_list|()
condition|)
block|{
name|QAccessibleWidget
operator|::
name|setText
argument_list|(
name|textType
argument_list|,
name|child
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return;
block|}
name|toolBox
argument_list|()
operator|->
name|setItemText
argument_list|(
name|child
operator|-
literal|1
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleToolBox
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QWidget
modifier|*
name|childWidget
init|=
name|toolBox
argument_list|()
operator|->
name|widget
argument_list|(
name|child
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childWidget
condition|)
return|return
name|QAccessibleWidget
operator|::
name|state
argument_list|(
name|child
argument_list|)
return|;
name|QAccessible
operator|::
name|State
name|childState
init|=
name|QAccessible
operator|::
name|Normal
decl_stmt|;
if|if
condition|(
name|toolBox
argument_list|()
operator|->
name|currentWidget
argument_list|()
operator|==
name|childWidget
condition|)
name|childState
operator||=
name|QAccessible
operator|::
name|Expanded
expr_stmt|;
else|else
name|childState
operator||=
name|QAccessible
operator|::
name|Collapsed
expr_stmt|;
return|return
name|childState
return|;
block|}
end_function
begin_function
DECL|function|invokeMethod
name|QVariant
name|QAccessibleToolBox
operator|::
name|invokeMethod
parameter_list|(
name|QAccessible
operator|::
name|Method
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleToolBox
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|toolBox
argument_list|()
operator|->
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleToolBox
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
condition|)
return|return
operator|-
literal|1
return|;
name|QWidget
modifier|*
name|childWidget
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childWidget
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|index
init|=
name|toolBox
argument_list|()
operator|->
name|indexOf
argument_list|(
name|childWidget
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
operator|++
name|index
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleToolBox
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
operator|*
name|target
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|entry
operator|<=
literal|0
operator|||
name|entry
operator|>
name|toolBox
argument_list|()
operator|->
name|count
argument_list|()
condition|)
return|return
name|QAccessibleWidget
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|relation
operator|==
name|QAccessible
operator|::
name|Up
condition|)
name|index
operator|=
name|entry
operator|-
literal|2
expr_stmt|;
elseif|else
if|if
condition|(
name|relation
operator|==
name|QAccessible
operator|::
name|Down
condition|)
name|index
operator|=
name|entry
expr_stmt|;
operator|*
name|target
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|toolBox
argument_list|()
operator|->
name|widget
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|toolBox
name|QToolBox
modifier|*
name|QAccessibleToolBox
operator|::
name|toolBox
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLBOX
end_comment
begin_comment
comment|// ======================= QAccessibleMdiArea ======================
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
end_ifndef
begin_constructor
DECL|function|QAccessibleMdiArea
name|QAccessibleMdiArea
operator|::
name|QAccessibleMdiArea
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|LayeredPane
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QMdiArea
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleMdiArea
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|<
literal|0
condition|)
return|return
name|QAccessibleWidget
operator|::
name|state
argument_list|(
name|child
argument_list|)
return|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
return|return
name|QAccessible
operator|::
name|Normal
return|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
init|=
name|mdiArea
argument_list|()
operator|->
name|subWindowList
argument_list|()
decl_stmt|;
if|if
condition|(
name|subWindows
operator|.
name|isEmpty
argument_list|()
operator|||
name|child
operator|>
name|subWindows
operator|.
name|count
argument_list|()
condition|)
return|return
name|QAccessibleWidget
operator|::
name|state
argument_list|(
name|child
argument_list|)
return|;
if|if
condition|(
name|subWindows
operator|.
name|at
argument_list|(
name|child
operator|-
literal|1
argument_list|)
operator|==
name|mdiArea
argument_list|()
operator|->
name|activeSubWindow
argument_list|()
condition|)
return|return
name|QAccessible
operator|::
name|Focused
return|;
return|return
name|QAccessible
operator|::
name|Normal
return|;
block|}
end_function
begin_function
DECL|function|invokeMethod
name|QVariant
name|QAccessibleMdiArea
operator|::
name|invokeMethod
parameter_list|(
name|QAccessible
operator|::
name|Method
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleMdiArea
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|mdiArea
argument_list|()
operator|->
name|subWindowList
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleMdiArea
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
operator|||
operator|!
name|child
operator|->
name|object
argument_list|()
operator|||
name|mdiArea
argument_list|()
operator|->
name|subWindowList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|QMdiSubWindow
modifier|*
name|window
init|=
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|mdiArea
argument_list|()
operator|->
name|subWindowList
argument_list|()
operator|.
name|indexOf
argument_list|(
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
return|return
operator|++
name|index
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleMdiArea
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
operator|*
name|target
operator|=
literal|0
expr_stmt|;
name|QWidget
modifier|*
name|targetObject
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|QMdiSubWindow
modifier|*
argument_list|>
name|subWindows
init|=
name|mdiArea
argument_list|()
operator|->
name|subWindowList
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Child
case|:
if|if
condition|(
name|entry
argument_list|<
literal|1
operator|||
name|subWindows
operator|.
name|isEmpty
operator|(
operator|)
operator|||
name|entry
argument_list|>
name|subWindows
operator|.
name|count
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|targetObject
operator|=
name|subWindows
operator|.
name|at
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Up
case|:
case|case
name|Down
case|:
case|case
name|Left
case|:
case|case
name|Right
case|:
name|targetObject
operator|=
name|mdiAreaNavigate
argument_list|(
name|mdiArea
argument_list|()
argument_list|,
name|relation
argument_list|,
name|entry
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
name|QAccessibleWidget
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
operator|*
name|target
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|targetObject
argument_list|)
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|mdiArea
name|QMdiArea
modifier|*
name|QAccessibleMdiArea
operator|::
name|mdiArea
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QMdiArea
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// ======================= QAccessibleMdiSubWindow ======================
end_comment
begin_constructor
DECL|function|QAccessibleMdiSubWindow
name|QAccessibleMdiSubWindow
operator|::
name|QAccessibleMdiSubWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|QAccessible
operator|::
name|Window
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|text
name|QString
name|QAccessibleMdiSubWindow
operator|::
name|text
parameter_list|(
name|Text
name|textType
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|textType
operator|==
name|QAccessible
operator|::
name|Name
operator|&&
operator|(
name|child
operator|==
literal|0
operator|||
name|child
operator|==
literal|1
operator|)
condition|)
block|{
name|QString
name|title
init|=
name|mdiSubWindow
argument_list|()
operator|->
name|windowTitle
argument_list|()
decl_stmt|;
name|title
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"[*]"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|title
return|;
block|}
return|return
name|QAccessibleWidget
operator|::
name|text
argument_list|(
name|textType
argument_list|,
name|child
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessibleMdiSubWindow
operator|::
name|setText
parameter_list|(
name|Text
name|textType
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|textType
operator|==
name|QAccessible
operator|::
name|Name
operator|&&
operator|(
name|child
operator|==
literal|0
operator|||
name|child
operator|==
literal|1
operator|)
condition|)
name|mdiSubWindow
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|text
argument_list|)
expr_stmt|;
else|else
name|QAccessibleWidget
operator|::
name|setText
argument_list|(
name|textType
argument_list|,
name|child
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleMdiSubWindow
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|!=
literal|0
operator|||
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|parent
argument_list|()
condition|)
return|return
name|QAccessibleWidget
operator|::
name|state
argument_list|(
name|child
argument_list|)
return|;
name|QAccessible
operator|::
name|State
name|state
init|=
name|QAccessible
operator|::
name|Normal
operator||
name|QAccessible
operator|::
name|Focusable
decl_stmt|;
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|isMaximized
argument_list|()
condition|)
name|state
operator||=
operator|(
name|QAccessible
operator|::
name|Movable
operator||
name|QAccessible
operator|::
name|Sizeable
operator|)
expr_stmt|;
if|if
condition|(
name|mdiSubWindow
argument_list|()
operator|->
name|isAncestorOf
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
operator|||
name|QApplication
operator|::
name|focusWidget
argument_list|()
operator|==
name|mdiSubWindow
argument_list|()
condition|)
name|state
operator||=
name|QAccessible
operator|::
name|Focused
expr_stmt|;
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
name|state
operator||=
name|QAccessible
operator|::
name|Invisible
expr_stmt|;
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|parentWidget
argument_list|()
operator|->
name|contentsRect
argument_list|()
operator|.
name|contains
argument_list|(
name|mdiSubWindow
argument_list|()
operator|->
name|geometry
argument_list|()
argument_list|)
condition|)
name|state
operator||=
name|QAccessible
operator|::
name|Offscreen
expr_stmt|;
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|isEnabled
argument_list|()
condition|)
name|state
operator||=
name|QAccessible
operator|::
name|Unavailable
expr_stmt|;
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|invokeMethod
name|QVariant
name|QAccessibleMdiSubWindow
operator|::
name|invokeMethod
parameter_list|(
name|QAccessible
operator|::
name|Method
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleMdiSubWindow
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mdiSubWindow
argument_list|()
operator|->
name|widget
argument_list|()
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleMdiSubWindow
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|&&
name|child
operator|->
name|object
argument_list|()
operator|&&
name|child
operator|->
name|object
argument_list|()
operator|==
name|mdiSubWindow
argument_list|()
operator|->
name|widget
argument_list|()
condition|)
return|return
literal|1
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleMdiSubWindow
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
operator|*
name|target
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|parent
argument_list|()
condition|)
return|return
name|QAccessibleWidget
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
name|QWidget
modifier|*
name|targetObject
init|=
literal|0
decl_stmt|;
name|QMdiSubWindow
modifier|*
name|source
init|=
name|mdiSubWindow
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Child
case|:
if|if
condition|(
name|entry
operator|!=
literal|1
operator|||
operator|!
name|source
operator|->
name|widget
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|targetObject
operator|=
name|source
operator|->
name|widget
argument_list|()
expr_stmt|;
break|break;
case|case
name|Up
case|:
case|case
name|Down
case|:
case|case
name|Left
case|:
case|case
name|Right
case|:
block|{
if|if
condition|(
name|entry
operator|!=
literal|0
condition|)
break|break;
name|QWidget
modifier|*
name|parent
init|=
name|source
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|&&
operator|!
name|parent
operator|->
name|inherits
argument_list|(
literal|"QMdiArea"
argument_list|)
condition|)
name|parent
operator|=
name|parent
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
name|QMdiArea
modifier|*
name|mdiArea
init|=
name|qobject_cast
argument_list|<
name|QMdiArea
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mdiArea
condition|)
break|break;
name|int
name|index
init|=
name|mdiArea
operator|->
name|subWindowList
argument_list|()
operator|.
name|indexOf
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
break|break;
if|if
condition|(
name|QWidget
modifier|*
name|dest
init|=
name|mdiAreaNavigate
argument_list|(
name|mdiArea
argument_list|,
name|relation
argument_list|,
name|index
operator|+
literal|1
argument_list|)
condition|)
block|{
operator|*
name|target
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|dest
argument_list|)
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
break|break;
block|}
default|default:
return|return
name|QAccessibleWidget
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
operator|*
name|target
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|targetObject
argument_list|)
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleMdiSubWindow
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mdiSubWindow
argument_list|()
operator|->
name|isHidden
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|parent
argument_list|()
condition|)
return|return
name|QAccessibleWidget
operator|::
name|rect
argument_list|(
name|child
argument_list|)
return|;
specifier|const
name|QPoint
name|pos
init|=
name|mdiSubWindow
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
return|return
name|QRect
argument_list|(
name|pos
argument_list|,
name|mdiSubWindow
argument_list|()
operator|->
name|size
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|child
operator|==
literal|1
operator|&&
name|mdiSubWindow
argument_list|()
operator|->
name|widget
argument_list|()
condition|)
block|{
if|if
condition|(
name|mdiSubWindow
argument_list|()
operator|->
name|widget
argument_list|()
operator|->
name|isHidden
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
specifier|const
name|QRect
name|contentsRect
init|=
name|mdiSubWindow
argument_list|()
operator|->
name|contentsRect
argument_list|()
decl_stmt|;
return|return
name|QRect
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|contentsRect
operator|.
name|x
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
operator|+
name|contentsRect
operator|.
name|y
argument_list|()
argument_list|,
name|contentsRect
operator|.
name|width
argument_list|()
argument_list|,
name|contentsRect
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleMdiSubWindow
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
operator|!
name|mdiSubWindow
argument_list|()
operator|->
name|parent
argument_list|()
condition|)
return|return
name|QAccessibleWidget
operator|::
name|childAt
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
specifier|const
name|QRect
name|globalGeometry
init|=
name|rect
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|globalGeometry
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
specifier|const
name|QRect
name|globalChildGeometry
init|=
name|rect
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalChildGeometry
operator|.
name|isValid
argument_list|()
operator|&&
name|globalChildGeometry
operator|.
name|contains
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|globalGeometry
operator|.
name|contains
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|mdiSubWindow
name|QMdiSubWindow
modifier|*
name|QAccessibleMdiSubWindow
operator|::
name|mdiSubWindow
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MDIAREA
end_comment
begin_comment
comment|// ======================= QAccessibleWorkspace ======================
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WORKSPACE
end_ifndef
begin_constructor
DECL|function|QAccessibleWorkspace
name|QAccessibleWorkspace
operator|::
name|QAccessibleWorkspace
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|LayeredPane
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QWorkspace
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleWorkspace
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|<
literal|0
condition|)
return|return
name|QAccessibleWidget
operator|::
name|state
argument_list|(
name|child
argument_list|)
return|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
return|return
name|QAccessible
operator|::
name|Normal
return|;
name|QWidgetList
name|subWindows
init|=
name|workspace
argument_list|()
operator|->
name|windowList
argument_list|()
decl_stmt|;
if|if
condition|(
name|subWindows
operator|.
name|isEmpty
argument_list|()
operator|||
name|child
operator|>
name|subWindows
operator|.
name|count
argument_list|()
condition|)
return|return
name|QAccessibleWidget
operator|::
name|state
argument_list|(
name|child
argument_list|)
return|;
if|if
condition|(
name|subWindows
operator|.
name|at
argument_list|(
name|child
operator|-
literal|1
argument_list|)
operator|==
name|workspace
argument_list|()
operator|->
name|activeWindow
argument_list|()
condition|)
return|return
name|QAccessible
operator|::
name|Focused
return|;
return|return
name|QAccessible
operator|::
name|Normal
return|;
block|}
end_function
begin_function
DECL|function|invokeMethod
name|QVariant
name|QAccessibleWorkspace
operator|::
name|invokeMethod
parameter_list|(
name|QAccessible
operator|::
name|Method
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleWorkspace
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|workspace
argument_list|()
operator|->
name|windowList
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleWorkspace
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
operator|||
operator|!
name|child
operator|->
name|object
argument_list|()
operator|||
name|workspace
argument_list|()
operator|->
name|windowList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|QWidget
modifier|*
name|window
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|workspace
argument_list|()
operator|->
name|windowList
argument_list|()
operator|.
name|indexOf
argument_list|(
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
return|return
operator|++
name|index
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleWorkspace
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
operator|*
name|target
operator|=
literal|0
expr_stmt|;
name|QWidget
modifier|*
name|targetObject
init|=
literal|0
decl_stmt|;
name|QWidgetList
name|subWindows
init|=
name|workspace
argument_list|()
operator|->
name|windowList
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Child
case|:
if|if
condition|(
name|entry
argument_list|<
literal|1
operator|||
name|subWindows
operator|.
name|isEmpty
operator|(
operator|)
operator|||
name|entry
argument_list|>
name|subWindows
operator|.
name|count
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|targetObject
operator|=
name|subWindows
operator|.
name|at
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Up
case|:
case|case
name|Down
case|:
case|case
name|Left
case|:
case|case
name|Right
case|:
name|targetObject
operator|=
name|mdiAreaNavigate
argument_list|(
name|workspace
argument_list|()
argument_list|,
name|relation
argument_list|,
name|entry
argument_list|)
expr_stmt|;
break|break;
default|default:
return|return
name|QAccessibleWidget
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
operator|*
name|target
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|targetObject
argument_list|)
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|workspace
name|QWorkspace
modifier|*
name|QAccessibleWorkspace
operator|::
name|workspace
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QWorkspace
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DIALOGBUTTONBOX
end_ifndef
begin_comment
comment|// ======================= QAccessibleDialogButtonBox ======================
end_comment
begin_constructor
DECL|function|QAccessibleDialogButtonBox
name|QAccessibleDialogButtonBox
operator|::
name|QAccessibleDialogButtonBox
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|Grouping
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|invokeMethod
name|QVariant
name|QAccessibleDialogButtonBox
operator|::
name|invokeMethod
parameter_list|(
name|QAccessible
operator|::
name|Method
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DIALOGBUTTONBOX
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTBROWSER
end_ifndef
begin_constructor
DECL|function|QAccessibleTextBrowser
name|QAccessibleTextBrowser
operator|::
name|QAccessibleTextBrowser
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleTextEdit
argument_list|(
name|widget
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QTextBrowser
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleTextBrowser
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|!=
literal|0
condition|)
return|return
name|QAccessibleTextEdit
operator|::
name|role
argument_list|(
name|child
argument_list|)
return|;
return|return
name|QAccessible
operator|::
name|StaticText
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTBROWSER
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CALENDARWIDGET
end_ifndef
begin_comment
comment|// ===================== QAccessibleCalendarWidget ========================
end_comment
begin_constructor
DECL|function|QAccessibleCalendarWidget
name|QAccessibleCalendarWidget
operator|::
name|QAccessibleCalendarWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|Table
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QCalendarWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|invokeMethod
name|QVariant
name|QAccessibleCalendarWidget
operator|::
name|invokeMethod
parameter_list|(
name|QAccessible
operator|::
name|Method
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleCalendarWidget
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|calendarWidget
argument_list|()
operator|->
name|isNavigationBarVisible
argument_list|()
condition|?
literal|2
else|:
literal|1
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleCalendarWidget
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
operator|||
operator|!
name|child
operator|->
name|object
argument_list|()
operator|||
name|childCount
argument_list|()
operator|<=
literal|0
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|child
operator|->
name|object
argument_list|()
argument_list|)
condition|)
return|return
name|childCount
argument_list|()
return|;
return|return
literal|1
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleCalendarWidget
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|target
parameter_list|)
specifier|const
block|{
operator|*
name|target
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|entry
operator|<=
literal|0
operator|||
name|entry
operator|>
name|childCount
argument_list|()
condition|)
return|return
name|QAccessibleWidget
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
name|QWidget
modifier|*
name|targetWidget
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Child
case|:
if|if
condition|(
name|childCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|targetWidget
operator|=
name|calendarView
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|entry
operator|==
literal|1
condition|)
name|targetWidget
operator|=
name|navigationBar
argument_list|()
expr_stmt|;
else|else
name|targetWidget
operator|=
name|calendarView
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|Up
case|:
if|if
condition|(
name|entry
operator|==
literal|2
condition|)
name|targetWidget
operator|=
name|navigationBar
argument_list|()
expr_stmt|;
break|break;
case|case
name|Down
case|:
if|if
condition|(
name|entry
operator|==
literal|1
operator|&&
name|childCount
argument_list|()
operator|==
literal|2
condition|)
name|targetWidget
operator|=
name|calendarView
argument_list|()
expr_stmt|;
break|break;
default|default:
return|return
name|QAccessibleWidget
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|target
argument_list|)
return|;
block|}
operator|*
name|target
operator|=
name|queryAccessibleInterface
argument_list|(
name|targetWidget
argument_list|)
expr_stmt|;
return|return
operator|*
name|target
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleCalendarWidget
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|calendarWidget
argument_list|()
operator|->
name|isVisible
argument_list|()
operator|||
name|child
operator|>
name|childCount
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
return|return
name|QAccessibleWidget
operator|::
name|rect
argument_list|(
name|child
argument_list|)
return|;
name|QWidget
modifier|*
name|childWidget
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|childCount
argument_list|()
operator|==
literal|2
condition|)
name|childWidget
operator|=
name|child
operator|==
literal|1
condition|?
name|navigationBar
argument_list|()
else|:
name|calendarView
argument_list|()
expr_stmt|;
else|else
name|childWidget
operator|=
name|calendarView
argument_list|()
expr_stmt|;
return|return
name|QRect
argument_list|(
name|childWidget
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|childWidget
operator|->
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleCalendarWidget
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
specifier|const
name|QPoint
name|globalTargetPos
init|=
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rect
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|globalTargetPos
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|rect
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|globalTargetPos
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|rect
argument_list|(
literal|2
argument_list|)
operator|.
name|contains
argument_list|(
name|globalTargetPos
argument_list|)
condition|)
return|return
literal|2
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|calendarWidget
name|QCalendarWidget
modifier|*
name|QAccessibleCalendarWidget
operator|::
name|calendarWidget
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QCalendarWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|calendarView
name|QAbstractItemView
modifier|*
name|QAccessibleCalendarWidget
operator|::
name|calendarView
parameter_list|()
specifier|const
block|{
foreach|foreach
control|(
name|QObject
modifier|*
name|child
decl|,
name|calendarWidget
argument_list|()
operator|->
name|children
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_calendar_calendarview"
argument_list|)
condition|)
return|return
cast|static_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|child
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|navigationBar
name|QWidget
modifier|*
name|QAccessibleCalendarWidget
operator|::
name|navigationBar
parameter_list|()
specifier|const
block|{
foreach|foreach
control|(
name|QObject
modifier|*
name|child
decl|,
name|calendarWidget
argument_list|()
operator|->
name|children
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|->
name|objectName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"qt_calendar_navigationbar"
argument_list|)
condition|)
return|return
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|child
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CALENDARWIDGET
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
end_ifndef
begin_constructor
DECL|function|QAccessibleDockWidget
name|QAccessibleDockWidget
operator|::
name|QAccessibleDockWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|Window
argument_list|)
block|{  }
end_constructor
begin_function
DECL|function|navigate
name|int
name|QAccessibleDockWidget
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|relation
operator|==
name|Child
condition|)
block|{
if|if
condition|(
name|entry
operator|==
literal|1
condition|)
block|{
operator|*
name|iface
operator|=
operator|new
name|QAccessibleTitleBar
argument_list|(
name|dockWidget
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|dockWidget
argument_list|()
operator|->
name|widget
argument_list|()
condition|)
operator|*
name|iface
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|QAccessibleWidget
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|iface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleDockWidget
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
name|childCount
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|rect
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleDockWidget
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
return|return
name|dockWidget
argument_list|()
operator|->
name|widget
argument_list|()
condition|?
literal|2
else|:
literal|1
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleDockWidget
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
condition|)
block|{
if|if
condition|(
name|child
operator|->
name|role
argument_list|(
literal|0
argument_list|)
operator|==
name|TitleBar
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|2
return|;
comment|//###
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleDockWidget
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|child
condition|)
block|{
case|case
literal|0
case|:
return|return
name|Window
return|;
case|case
literal|1
case|:
return|return
name|TitleBar
return|;
case|case
literal|2
case|:
comment|//###
break|break;
default|default:
break|break;
block|}
return|return
name|NoRole
return|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleDockWidget
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
comment|//### mark tabified widgets as invisible
return|return
name|QAccessibleWidget
operator|::
name|state
argument_list|(
name|child
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleDockWidget
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
decl_stmt|;
name|bool
name|mapToGlobal
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|dockWidget
argument_list|()
operator|->
name|isFloating
argument_list|()
condition|)
block|{
name|rect
operator|=
name|dockWidget
argument_list|()
operator|->
name|frameGeometry
argument_list|()
expr_stmt|;
name|mapToGlobal
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|=
name|dockWidget
argument_list|()
operator|->
name|rect
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|child
operator|==
literal|1
condition|)
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
name|rect
operator|=
name|layout
operator|->
name|titleArea
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|dockWidget
argument_list|()
operator|->
name|widget
argument_list|()
condition|)
name|rect
operator|=
name|dockWidget
argument_list|()
operator|->
name|widget
argument_list|()
operator|->
name|geometry
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|rect
return|;
if|if
condition|(
name|mapToGlobal
condition|)
name|rect
operator|.
name|moveTopLeft
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|invokeMethod
name|QVariant
name|QAccessibleDockWidget
operator|::
name|invokeMethod
parameter_list|(
name|QAccessible
operator|::
name|Method
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QVariantList
modifier|&
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|dockWidget
name|QDockWidget
modifier|*
name|QAccessibleDockWidget
operator|::
name|dockWidget
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|////
end_comment
begin_comment
comment|//      QAccessibleTitleBar
end_comment
begin_comment
comment|////
end_comment
begin_constructor
DECL|function|QAccessibleTitleBar
name|QAccessibleTitleBar
operator|::
name|QAccessibleTitleBar
parameter_list|(
name|QDockWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|m_dockWidget
argument_list|(
name|widget
argument_list|)
block|{  }
end_constructor
begin_function
DECL|function|parent
name|QAccessibleInterface
modifier|*
name|QAccessibleTitleBar
operator|::
name|parent
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QAccessibleDockWidget
argument_list|(
name|dockWidget
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|child
name|QAccessibleInterface
modifier|*
name|QAccessibleTitleBar
operator|::
name|child
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|dockWidgetLayout
argument_list|()
decl_stmt|;
name|int
name|role
decl_stmt|;
name|int
name|currentIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|role
operator|=
name|QDockWidgetLayout
operator|::
name|CloseButton
init|;
name|role
operator|<=
name|QDockWidgetLayout
operator|::
name|FloatButton
condition|;
operator|++
name|role
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|layout
operator|->
name|widgetForRole
argument_list|(
operator|(
name|QDockWidgetLayout
operator|::
name|Role
operator|)
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|||
operator|!
name|w
operator|->
name|isVisible
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|currentIndex
operator|==
name|index
condition|)
return|return
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|w
argument_list|)
return|;
operator|++
name|currentIndex
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleTitleBar
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Child
case|:
operator|*
name|iface
operator|=
name|child
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|*
name|iface
condition|?
literal|0
else|:
operator|-
literal|1
return|;
case|case
name|FocusChild
case|:
comment|// ###
if|if
condition|(
name|entry
operator|>=
literal|1
condition|)
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|dockWidgetLayout
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|1
decl_stmt|;
name|int
name|role
decl_stmt|;
for|for
control|(
name|role
operator|=
name|QDockWidgetLayout
operator|::
name|CloseButton
init|;
name|role
operator|<=
name|QDockWidgetLayout
operator|::
name|FloatButton
condition|;
operator|++
name|role
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|layout
operator|->
name|widgetForRole
argument_list|(
operator|(
name|QDockWidgetLayout
operator|::
name|Role
operator|)
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isVisible
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|index
operator|==
name|entry
condition|)
break|break;
operator|++
name|index
expr_stmt|;
block|}
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
return|return
name|role
operator|>
name|QDockWidgetLayout
operator|::
name|FloatButton
condition|?
operator|-
literal|1
else|:
name|index
return|;
block|}
break|break;
case|case
name|Ancestor
case|:
operator|*
name|iface
operator|=
name|parent
argument_list|()
expr_stmt|;
return|return
name|iface
condition|?
literal|0
else|:
operator|-
literal|1
return|;
case|case
name|Sibling
case|:
return|return
name|navigate
argument_list|(
name|Child
argument_list|,
name|entry
argument_list|,
name|iface
argument_list|)
return|;
break|break;
default|default:
break|break;
block|}
operator|*
name|iface
operator|=
literal|0
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|relationTo
name|QAccessible
operator|::
name|Relation
name|QAccessibleTitleBar
operator|::
name|relationTo
parameter_list|(
name|int
comment|/*child*/
parameter_list|,
specifier|const
name|QAccessibleInterface
modifier|*
comment|/*other*/
parameter_list|,
name|int
comment|/*otherChild*/
parameter_list|)
specifier|const
block|{
return|return
name|Unrelated
return|;
comment|//###
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleTitleBar
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
comment|/*child*/
parameter_list|)
specifier|const
block|{
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleTitleBar
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|dockWidgetLayout
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|role
init|=
name|QDockWidgetLayout
operator|::
name|CloseButton
init|;
name|role
operator|<=
name|QDockWidgetLayout
operator|::
name|FloatButton
condition|;
operator|++
name|role
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|layout
operator|->
name|widgetForRole
argument_list|(
operator|(
name|QDockWidgetLayout
operator|::
name|Role
operator|)
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|&&
name|w
operator|->
name|isVisible
argument_list|()
condition|)
operator|++
name|count
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleTitleBar
operator|::
name|text
parameter_list|(
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|child
condition|)
block|{
if|if
condition|(
name|t
operator|==
name|Name
operator|||
name|t
operator|==
name|Value
condition|)
block|{
return|return
name|qt_accStripAmp
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|state
name|QAccessible
operator|::
name|State
name|QAccessibleTitleBar
operator|::
name|state
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QAccessible
operator|::
name|State
name|state
init|=
name|Normal
decl_stmt|;
if|if
condition|(
name|child
condition|)
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|dockWidgetLayout
argument_list|()
decl_stmt|;
name|QAbstractButton
modifier|*
name|b
init|=
cast|static_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|layout
operator|->
name|widgetForRole
argument_list|(
operator|(
name|QDockWidgetLayout
operator|::
name|Role
operator|)
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
if|if
condition|(
name|b
operator|->
name|isDown
argument_list|()
condition|)
name|state
operator||=
name|Pressed
expr_stmt|;
block|}
block|}
else|else
block|{
name|QDockWidget
modifier|*
name|w
init|=
name|dockWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Visible
argument_list|)
operator|==
literal|false
condition|)
name|state
operator||=
name|Invisible
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
operator|&&
name|w
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|state
operator||=
name|Focusable
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|hasFocus
argument_list|()
condition|)
name|state
operator||=
name|Focused
expr_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isEnabled
argument_list|()
condition|)
name|state
operator||=
name|Unavailable
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
end_function
begin_function
DECL|function|rect
name|QRect
name|QAccessibleTitleBar
operator|::
name|rect
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
name|bool
name|mapToGlobal
init|=
literal|true
decl_stmt|;
name|QRect
name|rect
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|dockWidget
argument_list|()
operator|->
name|isFloating
argument_list|()
condition|)
block|{
name|rect
operator|=
name|dockWidget
argument_list|()
operator|->
name|frameGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|dockWidget
argument_list|()
operator|->
name|widget
argument_list|()
condition|)
block|{
name|QPoint
name|globalPos
init|=
name|dockWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|widget
argument_list|()
operator|->
name|rect
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|globalPos
operator|.
name|ry
argument_list|()
operator|--
expr_stmt|;
name|rect
operator|.
name|setBottom
argument_list|(
name|globalPos
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|mapToGlobal
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
name|rect
operator|=
name|layout
operator|->
name|titleArea
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|child
operator|>=
literal|1
operator|&&
name|child
operator|<=
name|childCount
argument_list|()
condition|)
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|dockWidgetLayout
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|role
init|=
name|QDockWidgetLayout
operator|::
name|CloseButton
init|;
name|role
operator|<=
name|QDockWidgetLayout
operator|::
name|FloatButton
condition|;
operator|++
name|role
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|layout
operator|->
name|widgetForRole
argument_list|(
operator|(
name|QDockWidgetLayout
operator|::
name|Role
operator|)
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|||
operator|!
name|w
operator|->
name|isVisible
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|index
operator|==
name|child
condition|)
block|{
name|rect
operator|=
name|w
operator|->
name|geometry
argument_list|()
expr_stmt|;
break|break;
block|}
operator|++
name|index
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rect
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|rect
return|;
if|if
condition|(
name|mapToGlobal
condition|)
name|rect
operator|.
name|moveTopLeft
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleTitleBar
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
name|childCount
argument_list|()
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|rect
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|object
name|QObject
modifier|*
name|QAccessibleTitleBar
operator|::
name|object
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|dockWidgetLayout
name|QDockWidgetLayout
modifier|*
name|QAccessibleTitleBar
operator|::
name|dockWidgetLayout
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|dockWidget
argument_list|()
operator|->
name|layout
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|dockWidget
name|QDockWidget
modifier|*
name|QAccessibleTitleBar
operator|::
name|dockWidget
parameter_list|()
specifier|const
block|{
return|return
name|m_dockWidget
return|;
block|}
end_function
begin_function
DECL|function|actionText
name|QString
name|QAccessibleTitleBar
operator|::
name|actionText
parameter_list|(
name|int
name|action
parameter_list|,
name|Text
name|t
parameter_list|,
name|int
name|child
parameter_list|)
specifier|const
block|{
name|QString
name|str
decl_stmt|;
if|if
condition|(
name|child
operator|>=
literal|1
operator|&&
name|child
operator|<=
name|childCount
argument_list|()
condition|)
block|{
if|if
condition|(
name|t
operator|==
name|Name
condition|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|Press
case|:
case|case
name|DefaultAction
case|:
if|if
condition|(
name|child
operator|==
name|QDockWidgetLayout
operator|::
name|CloseButton
condition|)
block|{
name|str
operator|=
name|QDockWidget
operator|::
name|tr
argument_list|(
literal|"Close"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|==
name|QDockWidgetLayout
operator|::
name|FloatButton
condition|)
block|{
name|str
operator|=
name|dockWidget
argument_list|()
operator|->
name|isFloating
argument_list|()
condition|?
name|QDockWidget
operator|::
name|tr
argument_list|(
literal|"Dock"
argument_list|)
else|:
name|QDockWidget
operator|::
name|tr
argument_list|(
literal|"Float"
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
block|}
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|doAction
name|bool
name|QAccessibleTitleBar
operator|::
name|doAction
parameter_list|(
name|int
name|action
parameter_list|,
name|int
name|child
parameter_list|,
specifier|const
name|QVariantList
modifier|&
comment|/*params*/
parameter_list|)
block|{
if|if
condition|(
operator|!
name|child
operator|||
operator|!
name|dockWidget
argument_list|()
operator|->
name|isEnabled
argument_list|()
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|DefaultAction
case|:
case|case
name|Press
case|:
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|dockWidgetLayout
argument_list|()
decl_stmt|;
name|QAbstractButton
modifier|*
name|btn
init|=
cast|static_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|layout
operator|->
name|widgetForRole
argument_list|(
operator|(
name|QDockWidgetLayout
operator|::
name|Role
operator|)
name|child
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|btn
condition|)
name|btn
operator|->
name|animateClick
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
break|break;
block|}
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|userActionCount
name|int
name|QAccessibleTitleBar
operator|::
name|userActionCount
parameter_list|(
name|int
comment|/*child*/
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|role
name|QAccessible
operator|::
name|Role
name|QAccessibleTitleBar
operator|::
name|role
parameter_list|(
name|int
name|child
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|child
condition|)
block|{
case|case
literal|0
case|:
return|return
name|TitleBar
return|;
break|break;
default|default:
if|if
condition|(
name|child
operator|>=
literal|1
operator|&&
name|child
operator|<=
name|childCount
argument_list|()
condition|)
return|return
name|PushButton
return|;
break|break;
block|}
return|return
name|NoRole
return|;
block|}
end_function
begin_function
DECL|function|setText
name|void
name|QAccessibleTitleBar
operator|::
name|setText
parameter_list|(
name|Text
comment|/*t*/
parameter_list|,
name|int
comment|/*child*/
parameter_list|,
specifier|const
name|QString
modifier|&
comment|/*text*/
parameter_list|)
block|{  }
end_function
begin_function
DECL|function|isValid
name|bool
name|QAccessibleTitleBar
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|dockWidget
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DOCKWIDGET
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
end_ifndef
begin_function
DECL|function|addSelection
name|void
name|QAccessibleTextEdit
operator|::
name|addSelection
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|setSelection
argument_list|(
literal|0
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|attributes
name|QString
name|QAccessibleTextEdit
operator|::
name|attributes
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
block|{
comment|/* The list of attributes can be found at:      http://linuxfoundation.org/collaborate/workgroups/accessibility/iaccessible2/textattributes     */
if|if
condition|(
name|offset
operator|>=
name|characterCount
argument_list|()
condition|)
block|{
operator|*
name|startOffset
operator|=
operator|-
literal|1
expr_stmt|;
operator|*
name|endOffset
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|attrs
decl_stmt|;
name|QTextCursor
name|cursor
init|=
name|textEdit
argument_list|()
operator|->
name|textCursor
argument_list|()
decl_stmt|;
comment|//cursor.charFormat returns the format of the previous character
name|cursor
operator|.
name|setPosition
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|charFormat
init|=
name|cursor
operator|.
name|charFormat
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|QTextBlockFormat
name|blockFormat
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QTextCharFormat
name|charFormatComp
decl_stmt|;
name|QTextBlockFormat
name|blockFormatComp
decl_stmt|;
operator|*
name|startOffset
operator|=
name|offset
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
operator|*
name|startOffset
argument_list|)
expr_stmt|;
while|while
condition|(
operator|*
name|startOffset
operator|>
literal|0
condition|)
block|{
name|charFormatComp
operator|=
name|cursor
operator|.
name|charFormat
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
operator|*
name|startOffset
operator|-
literal|1
argument_list|)
expr_stmt|;
name|blockFormatComp
operator|=
name|cursor
operator|.
name|blockFormat
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|charFormat
operator|==
name|charFormatComp
operator|)
operator|&&
operator|(
name|blockFormat
operator|==
name|blockFormatComp
operator|)
condition|)
operator|(
operator|*
name|startOffset
operator|)
operator|--
expr_stmt|;
else|else
break|break;
block|}
name|int
name|limit
init|=
name|characterCount
argument_list|()
operator|+
literal|1
decl_stmt|;
operator|*
name|endOffset
operator|=
name|offset
operator|+
literal|1
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
operator|*
name|endOffset
argument_list|)
expr_stmt|;
while|while
condition|(
operator|*
name|endOffset
operator|<
name|limit
condition|)
block|{
name|blockFormatComp
operator|=
name|cursor
operator|.
name|blockFormat
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
operator|*
name|endOffset
operator|+
literal|1
argument_list|)
expr_stmt|;
name|charFormatComp
operator|=
name|cursor
operator|.
name|charFormat
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|charFormat
operator|==
name|charFormatComp
operator|)
operator|&&
operator|(
name|cursor
operator|.
name|blockFormat
argument_list|()
operator|==
name|blockFormatComp
operator|)
condition|)
operator|(
operator|*
name|endOffset
operator|)
operator|++
expr_stmt|;
else|else
break|break;
block|}
name|QString
name|family
init|=
name|charFormat
operator|.
name|fontFamily
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|"\\\\"
argument_list|)
expr_stmt|;
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|"\\:"
argument_list|)
expr_stmt|;
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|','
argument_list|,
literal|"\\,"
argument_list|)
expr_stmt|;
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|'='
argument_list|,
literal|"\\="
argument_list|)
expr_stmt|;
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|';'
argument_list|,
literal|"\\;"
argument_list|)
expr_stmt|;
name|family
operator|=
name|family
operator|.
name|replace
argument_list|(
literal|'\"'
argument_list|,
literal|"\\\""
argument_list|)
expr_stmt|;
name|attrs
index|[
literal|"font-family"
index|]
operator|=
literal|'"'
operator|+
name|family
operator|+
literal|'"'
expr_stmt|;
block|}
name|int
name|fontSize
init|=
name|int
argument_list|(
name|charFormat
operator|.
name|fontPointSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontSize
condition|)
name|attrs
index|[
literal|"font-size"
index|]
operator|=
name|QString
operator|::
name|number
argument_list|(
name|fontSize
argument_list|)
operator|.
name|append
argument_list|(
literal|"pt"
argument_list|)
expr_stmt|;
comment|//Different weight values are not handled
name|attrs
index|[
literal|"font-weight"
index|]
operator|=
operator|(
name|charFormat
operator|.
name|fontWeight
argument_list|()
operator|>
name|QFont
operator|::
name|Normal
operator|)
condition|?
literal|"bold"
else|:
literal|"normal"
expr_stmt|;
name|QFont
operator|::
name|Style
name|style
init|=
name|charFormat
operator|.
name|font
argument_list|()
operator|.
name|style
argument_list|()
decl_stmt|;
name|attrs
index|[
literal|"font-style"
index|]
operator|=
operator|(
name|style
operator|==
name|QFont
operator|::
name|StyleItalic
operator|)
condition|?
literal|"italic"
else|:
operator|(
operator|(
name|style
operator|==
name|QFont
operator|::
name|StyleOblique
operator|)
condition|?
literal|"oblique"
else|:
literal|"normal"
operator|)
expr_stmt|;
name|attrs
index|[
literal|"text-underline-style"
index|]
operator|=
name|charFormat
operator|.
name|font
argument_list|()
operator|.
name|underline
argument_list|()
condition|?
literal|"solid"
else|:
literal|"none"
expr_stmt|;
name|QTextCharFormat
operator|::
name|VerticalAlignment
name|alignment
init|=
name|charFormat
operator|.
name|verticalAlignment
argument_list|()
decl_stmt|;
name|attrs
index|[
literal|"text-position"
index|]
operator|=
operator|(
name|alignment
operator|==
name|QTextCharFormat
operator|::
name|AlignSubScript
operator|)
condition|?
literal|"sub"
else|:
operator|(
operator|(
name|alignment
operator|==
name|QTextCharFormat
operator|::
name|AlignSuperScript
operator|)
condition|?
literal|"super"
else|:
literal|"baseline"
operator|)
expr_stmt|;
name|QBrush
name|background
init|=
name|charFormat
operator|.
name|background
argument_list|()
decl_stmt|;
if|if
condition|(
name|background
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
block|{
name|attrs
index|[
literal|"background-color"
index|]
operator|=
name|QString
argument_list|(
literal|"rgb(%1,%2,%3)"
argument_list|)
operator|.
name|arg
argument_list|(
name|background
operator|.
name|color
argument_list|()
operator|.
name|red
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|background
operator|.
name|color
argument_list|()
operator|.
name|green
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|background
operator|.
name|color
argument_list|()
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QBrush
name|foreground
init|=
name|charFormat
operator|.
name|foreground
argument_list|()
decl_stmt|;
if|if
condition|(
name|foreground
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|SolidPattern
condition|)
block|{
name|attrs
index|[
literal|"color"
index|]
operator|=
name|QString
argument_list|(
literal|"rgb(%1,%2,%3)"
argument_list|)
operator|.
name|arg
argument_list|(
name|foreground
operator|.
name|color
argument_list|()
operator|.
name|red
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|foreground
operator|.
name|color
argument_list|()
operator|.
name|green
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|foreground
operator|.
name|color
argument_list|()
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|blockFormat
operator|.
name|alignment
argument_list|()
operator|&
operator|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignHCenter
operator||
name|Qt
operator|::
name|AlignJustify
operator|)
condition|)
block|{
case|case
name|Qt
operator|::
name|AlignLeft
case|:
name|attrs
index|[
literal|"text-align"
index|]
operator|=
literal|"left"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignRight
case|:
name|attrs
index|[
literal|"text-align"
index|]
operator|=
literal|"right"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignHCenter
case|:
name|attrs
index|[
literal|"text-align"
index|]
operator|=
literal|"center"
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignJustify
case|:
name|attrs
index|[
literal|"text-align"
index|]
operator|=
literal|"left"
expr_stmt|;
break|break;
block|}
name|QString
name|result
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|attributeName
decl|,
name|attrs
operator|.
name|keys
argument_list|()
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|attributeName
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|attrs
index|[
name|attributeName
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|cursorPosition
name|int
name|QAccessibleTextEdit
operator|::
name|cursorPosition
parameter_list|()
block|{
return|return
name|textEdit
argument_list|()
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|characterRect
name|QRect
name|QAccessibleTextEdit
operator|::
name|characterRect
parameter_list|(
name|int
name|offset
parameter_list|,
name|CoordinateType
name|coordType
parameter_list|)
block|{
name|QTextEdit
modifier|*
name|edit
init|=
name|textEdit
argument_list|()
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|edit
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|offset
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QRect
name|r
init|=
name|edit
operator|->
name|cursorRect
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
condition|)
block|{
name|r
operator|.
name|setWidth
argument_list|(
name|edit
operator|->
name|cursorRect
argument_list|(
name|cursor
argument_list|)
operator|.
name|x
argument_list|()
operator|-
name|r
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we don't know the width of the character - maybe because we're at document end
comment|// in that case, IAccessible2 tells us to return the width of a default character
name|int
name|averageCharWidth
init|=
name|QFontMetrics
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
argument_list|)
operator|.
name|averageCharWidth
argument_list|()
decl_stmt|;
if|if
condition|(
name|edit
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|averageCharWidth
operator|*=
operator|-
literal|1
expr_stmt|;
name|r
operator|.
name|setWidth
argument_list|(
name|averageCharWidth
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|coordType
condition|)
block|{
case|case
name|RelativeToScreen
case|:
name|r
operator|.
name|moveTo
argument_list|(
name|edit
operator|->
name|viewport
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|RelativeToParent
case|:
break|break;
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|selectionCount
name|int
name|QAccessibleTextEdit
operator|::
name|selectionCount
parameter_list|()
block|{
return|return
name|textEdit
argument_list|()
operator|->
name|textCursor
argument_list|()
operator|.
name|hasSelection
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|offsetAtPoint
name|int
name|QAccessibleTextEdit
operator|::
name|offsetAtPoint
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|,
name|CoordinateType
name|coordType
parameter_list|)
block|{
name|QTextEdit
modifier|*
name|edit
init|=
name|textEdit
argument_list|()
decl_stmt|;
name|QPoint
name|p
init|=
name|point
decl_stmt|;
if|if
condition|(
name|coordType
operator|==
name|RelativeToScreen
condition|)
name|p
operator|=
name|edit
operator|->
name|viewport
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// convert to document coordinates
name|p
operator|+=
name|QPoint
argument_list|(
name|edit
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|edit
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|edit
operator|->
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
operator|->
name|hitTest
argument_list|(
name|p
argument_list|,
name|Qt
operator|::
name|ExactHit
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|selection
name|void
name|QAccessibleTextEdit
operator|::
name|selection
parameter_list|(
name|int
name|selectionIndex
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
block|{
operator|*
name|startOffset
operator|=
operator|*
name|endOffset
operator|=
literal|0
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|textEdit
argument_list|()
operator|->
name|textCursor
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectionIndex
operator|!=
literal|0
operator|||
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
return|return;
operator|*
name|startOffset
operator|=
name|cursor
operator|.
name|selectionStart
argument_list|()
expr_stmt|;
operator|*
name|endOffset
operator|=
name|cursor
operator|.
name|selectionEnd
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|text
name|QString
name|QAccessibleTextEdit
operator|::
name|text
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|QTextCursor
name|cursor
argument_list|(
name|textEdit
argument_list|()
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|startOffset
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|endOffset
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
return|return
name|cursor
operator|.
name|selectedText
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|textBeforeOffset
name|QString
name|QAccessibleTextEdit
operator|::
name|textBeforeOffset
parameter_list|(
name|int
name|offset
parameter_list|,
name|BoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
block|{
comment|// TODO - what exactly is before?
name|Q_UNUSED
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|boundaryType
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|textAfterOffset
name|QString
name|QAccessibleTextEdit
operator|::
name|textAfterOffset
parameter_list|(
name|int
name|offset
parameter_list|,
name|BoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
block|{
comment|// TODO - what exactly is after?
name|Q_UNUSED
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|boundaryType
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|textAtOffset
name|QString
name|QAccessibleTextEdit
operator|::
name|textAtOffset
parameter_list|(
name|int
name|offset
parameter_list|,
name|BoundaryType
name|boundaryType
parameter_list|,
name|int
modifier|*
name|startOffset
parameter_list|,
name|int
modifier|*
name|endOffset
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
operator|*
name|startOffset
operator|=
operator|*
name|endOffset
operator|=
operator|-
literal|1
expr_stmt|;
name|QTextEdit
modifier|*
name|edit
init|=
name|textEdit
argument_list|()
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|edit
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|>=
name|characterCount
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|boundaryType
condition|)
block|{
case|case
name|CharBoundary
case|:
operator|*
name|startOffset
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
operator|*
name|endOffset
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
break|break;
case|case
name|WordBoundary
case|:
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfWord
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
operator|*
name|startOffset
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
operator|*
name|endOffset
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
break|break;
case|case
name|SentenceBoundary
case|:
comment|// TODO - what's a sentence?
return|return
name|QString
argument_list|()
return|;
case|case
name|LineBoundary
case|:
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfLine
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
operator|*
name|startOffset
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfLine
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
operator|*
name|endOffset
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
break|break;
case|case
name|ParagraphBoundary
case|:
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
operator|*
name|startOffset
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
operator|*
name|endOffset
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
break|break;
case|case
name|NoBoundary
case|:
block|{
operator|*
name|startOffset
operator|=
literal|0
expr_stmt|;
specifier|const
name|QString
name|txt
init|=
name|edit
operator|->
name|toPlainText
argument_list|()
decl_stmt|;
operator|*
name|endOffset
operator|=
name|txt
operator|.
name|count
argument_list|()
expr_stmt|;
return|return
name|txt
return|;
block|}
default|default:
name|qDebug
argument_list|(
literal|"AccessibleTextAdaptor::textAtOffset: Unknown boundary type %d"
argument_list|,
name|boundaryType
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
return|return
name|cursor
operator|.
name|selectedText
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|removeSelection
name|void
name|QAccessibleTextEdit
operator|::
name|removeSelection
parameter_list|(
name|int
name|selectionIndex
parameter_list|)
block|{
if|if
condition|(
name|selectionIndex
operator|!=
literal|0
condition|)
return|return;
name|QTextCursor
name|cursor
init|=
name|textEdit
argument_list|()
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|textEdit
argument_list|()
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCursorPosition
name|void
name|QAccessibleTextEdit
operator|::
name|setCursorPosition
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|QTextCursor
name|cursor
init|=
name|textEdit
argument_list|()
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|textEdit
argument_list|()
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSelection
name|void
name|QAccessibleTextEdit
operator|::
name|setSelection
parameter_list|(
name|int
name|selectionIndex
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
if|if
condition|(
name|selectionIndex
operator|!=
literal|0
condition|)
return|return;
name|QTextCursor
name|cursor
init|=
name|textEdit
argument_list|()
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|startOffset
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|endOffset
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|textEdit
argument_list|()
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|characterCount
name|int
name|QAccessibleTextEdit
operator|::
name|characterCount
parameter_list|()
block|{
return|return
name|textEdit
argument_list|()
operator|->
name|toPlainText
argument_list|()
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|scrollToSubstring
name|void
name|QAccessibleTextEdit
operator|::
name|scrollToSubstring
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|endIndex
parameter_list|)
block|{
name|QTextEdit
modifier|*
name|edit
init|=
name|textEdit
argument_list|()
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|edit
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|startIndex
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|edit
operator|->
name|cursorRect
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|endIndex
argument_list|)
expr_stmt|;
name|r
operator|.
name|setBottomRight
argument_list|(
name|edit
operator|->
name|cursorRect
argument_list|(
name|cursor
argument_list|)
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|moveTo
argument_list|(
name|r
operator|.
name|x
argument_list|()
operator|+
name|edit
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|edit
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
comment|// E V I L, but ensureVisible is not public
if|if
condition|(
operator|!
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|edit
argument_list|,
literal|"_q_ensureVisible"
argument_list|,
name|Q_ARG
argument_list|(
name|QRectF
argument_list|,
name|r
argument_list|)
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"AccessibleTextEdit::scrollToSubstring failed!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorForRange
specifier|static
name|QTextCursor
name|cursorForRange
parameter_list|(
name|QTextEdit
modifier|*
name|textEdit
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|QTextCursor
name|cursor
argument_list|(
name|textEdit
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|startOffset
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|endOffset
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
return|return
name|cursor
return|;
block|}
end_function
begin_function
DECL|function|copyText
name|void
name|QAccessibleTextEdit
operator|::
name|copyText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|QTextCursor
name|cursor
init|=
name|cursorForRange
argument_list|(
name|textEdit
argument_list|()
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
return|return;
comment|//     QApplication::clipboard()->setMimeData(new QTextEditMimeData(cursor.selection()));
block|}
end_function
begin_function
DECL|function|deleteText
name|void
name|QAccessibleTextEdit
operator|::
name|deleteText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|QTextCursor
name|cursor
init|=
name|cursorForRange
argument_list|(
name|textEdit
argument_list|()
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertText
name|void
name|QAccessibleTextEdit
operator|::
name|insertText
parameter_list|(
name|int
name|offset
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QTextCursor
name|cursor
argument_list|(
name|textEdit
argument_list|()
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cutText
name|void
name|QAccessibleTextEdit
operator|::
name|cutText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|QTextCursor
name|cursor
init|=
name|cursorForRange
argument_list|(
name|textEdit
argument_list|()
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
return|return;
comment|//     QApplication::clipboard()->setMimeData(new QTextEditMimeData(cursor.selection()));
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pasteText
name|void
name|QAccessibleTextEdit
operator|::
name|pasteText
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|QTextEdit
modifier|*
name|edit
init|=
name|textEdit
argument_list|()
decl_stmt|;
name|QTextCursor
name|oldCursor
init|=
name|edit
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|QTextCursor
name|newCursor
init|=
name|oldCursor
decl_stmt|;
name|newCursor
operator|.
name|setPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|edit
operator|->
name|setTextCursor
argument_list|(
name|newCursor
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|edit
operator|->
name|paste
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|edit
operator|->
name|setTextCursor
argument_list|(
name|oldCursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replaceText
name|void
name|QAccessibleTextEdit
operator|::
name|replaceText
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QTextCursor
name|cursor
init|=
name|cursorForRange
argument_list|(
name|textEdit
argument_list|()
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setAttributes
name|void
name|QAccessibleTextEdit
operator|::
name|setAttributes
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|,
specifier|const
name|QString
modifier|&
name|attributes
parameter_list|)
block|{
comment|// TODO
name|Q_UNUSED
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTEDIT
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MAINWINDOW
end_ifndef
begin_constructor
DECL|function|QAccessibleMainWindow
name|QAccessibleMainWindow
operator|::
name|QAccessibleMainWindow
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QAccessibleWidget
argument_list|(
name|widget
argument_list|,
name|Window
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|invokeMethod
name|QVariant
name|QAccessibleMainWindow
operator|::
name|invokeMethod
parameter_list|(
name|QAccessible
operator|::
name|Method
comment|/*method*/
parameter_list|,
name|int
comment|/*child*/
parameter_list|,
specifier|const
name|QVariantList
modifier|&
comment|/*params*/
parameter_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|childCount
name|int
name|QAccessibleMainWindow
operator|::
name|childCount
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|kids
init|=
name|childWidgets
argument_list|(
name|mainWindow
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|kids
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|indexOfChild
name|int
name|QAccessibleMainWindow
operator|::
name|indexOfChild
parameter_list|(
specifier|const
name|QAccessibleInterface
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|kids
init|=
name|childWidgets
argument_list|(
name|mainWindow
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|childIndex
init|=
name|kids
operator|.
name|indexOf
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|iface
operator|->
name|object
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|childIndex
operator|==
operator|-
literal|1
condition|?
operator|-
literal|1
else|:
operator|++
name|childIndex
return|;
block|}
end_function
begin_function
DECL|function|navigate
name|int
name|QAccessibleMainWindow
operator|::
name|navigate
parameter_list|(
name|RelationFlag
name|relation
parameter_list|,
name|int
name|entry
parameter_list|,
name|QAccessibleInterface
modifier|*
modifier|*
name|iface
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|relation
operator|==
name|Child
operator|&&
name|entry
operator|>=
literal|1
condition|)
block|{
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|kids
init|=
name|childWidgets
argument_list|(
name|mainWindow
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|<=
name|kids
operator|.
name|count
argument_list|()
condition|)
block|{
operator|*
name|iface
operator|=
name|QAccessible
operator|::
name|queryAccessibleInterface
argument_list|(
name|kids
operator|.
name|at
argument_list|(
name|entry
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|iface
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
block|}
return|return
name|QAccessibleWidget
operator|::
name|navigate
argument_list|(
name|relation
argument_list|,
name|entry
argument_list|,
name|iface
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childAt
name|int
name|QAccessibleMainWindow
operator|::
name|childAt
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
specifier|const
block|{
name|QWidget
modifier|*
name|w
init|=
name|widget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isVisible
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|QPoint
name|gp
init|=
name|w
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QRect
argument_list|(
name|gp
operator|.
name|x
argument_list|()
argument_list|,
name|gp
operator|.
name|y
argument_list|()
argument_list|,
name|w
operator|->
name|width
argument_list|()
argument_list|,
name|w
operator|->
name|height
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|QWidgetList
name|kids
init|=
name|childWidgets
argument_list|(
name|mainWindow
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QPoint
name|rp
init|=
name|mainWindow
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kids
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|child
init|=
name|kids
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|child
operator|->
name|isHidden
argument_list|()
operator|&&
name|child
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|rp
argument_list|)
condition|)
block|{
return|return
name|i
operator|+
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|mainWindow
name|QMainWindow
modifier|*
name|QAccessibleMainWindow
operator|::
name|mainWindow
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|object
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_MAINWINDOW
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACCESSIBILITY
end_comment
end_unit
