begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QXCBWINDOWFUNCTIONS_H
end_ifndef
begin_define
DECL|macro|QXCBWINDOWFUNCTIONS_H
define|#
directive|define
name|QXCBWINDOWFUNCTIONS_H
end_define
begin_include
include|#
directive|include
file|<QtPlatformHeaders/QPlatformHeaderHelper>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QWindow
name|class
name|QWindow
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QXcbWindowFunctions
block|{
name|public
label|:
enum|enum
name|WmWindowType
block|{
name|Normal
init|=
literal|0x000001
block|,
name|Desktop
init|=
literal|0x000002
block|,
name|Dock
init|=
literal|0x000004
block|,
name|Toolbar
init|=
literal|0x000008
block|,
name|Menu
init|=
literal|0x000010
block|,
name|Utility
init|=
literal|0x000020
block|,
name|Splash
init|=
literal|0x000040
block|,
name|Dialog
init|=
literal|0x000080
block|,
name|DropDownMenu
init|=
literal|0x000100
block|,
name|PopupMenu
init|=
literal|0x000200
block|,
name|Tooltip
init|=
literal|0x000400
block|,
name|Notification
init|=
literal|0x000800
block|,
name|Combo
init|=
literal|0x001000
block|,
name|Dnd
init|=
literal|0x002000
block|,
name|KdeOverride
init|=
literal|0x004000
block|}
enum|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|WmWindowTypes
argument_list|,
argument|WmWindowType
argument_list|)
typedef|typedef
name|void
argument_list|(
argument|*SetWmWindowType
argument_list|)
operator|(
name|QWindow
operator|*
name|window
operator|,
name|QXcbWindowFunctions
operator|::
name|WmWindowTypes
name|windowType
operator|)
expr_stmt|;
specifier|static
specifier|const
name|QByteArray
name|setWmWindowTypeIdentifier
parameter_list|()
block|{
return|return
name|QByteArrayLiteral
argument_list|(
literal|"XcbSetWmWindowType"
argument_list|)
return|;
block|}
specifier|static
name|void
name|setWmWindowType
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|WmWindowType
name|type
parameter_list|)
block|{
return|return
name|QPlatformHeaderHelper
operator|::
name|callPlatformFunction
operator|<
name|void
operator|,
name|SetWmWindowType
operator|,
name|QWindow
operator|*
operator|,
name|WmWindowType
operator|>
operator|(
name|setWmWindowTypeIdentifier
argument_list|()
operator|,
name|window
operator|,
name|type
operator|)
return|;
block|}
typedef|typedef
name|void
function_decl|(
modifier|*
name|SetWmWindowIconText
function_decl|)
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|QByteArray
name|setWmWindowIconTextIdentifier
parameter_list|()
block|{
return|return
name|QByteArrayLiteral
argument_list|(
literal|"XcbSetWmWindowIconText"
argument_list|)
return|;
block|}
specifier|static
name|void
name|setWmWindowIconText
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
return|return
name|QPlatformHeaderHelper
operator|::
name|callPlatformFunction
operator|<
name|void
operator|,
name|SetWmWindowIconText
operator|,
name|QWindow
operator|*
operator|,
specifier|const
name|QString
operator|&
operator|>
operator|(
name|setWmWindowIconTextIdentifier
argument_list|()
operator|,
name|window
operator|,
name|text
operator|)
return|;
block|}
typedef|typedef
name|void
function_decl|(
modifier|*
name|SetParentRelativeBackPixmap
function_decl|)
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|QByteArray
name|setParentRelativeBackPixmapIdentifier
parameter_list|()
block|{
return|return
name|QByteArrayLiteral
argument_list|(
literal|"XcbSetParentRelativeBackPixmap"
argument_list|)
return|;
block|}
specifier|static
name|void
name|setParentRelativeBackPixmap
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
return|return
name|QPlatformHeaderHelper
operator|::
name|callPlatformFunction
operator|<
name|void
operator|,
name|SetParentRelativeBackPixmap
operator|,
specifier|const
name|QWindow
operator|*
operator|>
operator|(
name|setParentRelativeBackPixmapIdentifier
argument_list|()
operator|,
name|window
operator|)
return|;
block|}
typedef|typedef
name|bool
function_decl|(
modifier|*
name|RequestSystemTrayWindowDock
function_decl|)
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|QByteArray
name|requestSystemTrayWindowDockIdentifier
parameter_list|()
block|{
return|return
name|QByteArrayLiteral
argument_list|(
literal|"XcbRequestSystemTrayWindowDockIdentifier"
argument_list|)
return|;
block|}
specifier|static
name|bool
name|requestSystemTrayWindowDock
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
return|return
name|QPlatformHeaderHelper
operator|::
name|callPlatformFunction
operator|<
name|bool
operator|,
name|RequestSystemTrayWindowDock
operator|,
specifier|const
name|QWindow
operator|*
operator|>
operator|(
name|requestSystemTrayWindowDockIdentifier
argument_list|()
operator|,
name|window
operator|)
return|;
block|}
typedef|typedef
name|QRect
function_decl|(
modifier|*
name|SystemTrayWindowGlobalGeometry
function_decl|)
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|QByteArray
name|systemTrayWindowGlobalGeometryIdentifier
parameter_list|()
block|{
return|return
name|QByteArrayLiteral
argument_list|(
literal|"XcbSystemTrayWindowGlobalGeometryIdentifier"
argument_list|)
return|;
block|}
specifier|static
name|QRect
name|systemTrayWindowGlobalGeometry
parameter_list|(
specifier|const
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
return|return
name|QPlatformHeaderHelper
operator|::
name|callPlatformFunction
operator|<
name|QRect
operator|,
name|SystemTrayWindowGlobalGeometry
operator|,
specifier|const
name|QWindow
operator|*
operator|>
operator|(
name|systemTrayWindowGlobalGeometryIdentifier
argument_list|()
operator|,
name|window
operator|)
return|;
block|}
typedef|typedef
name|uint
function_decl|(
modifier|*
name|VisualId
function_decl|)
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|QByteArray
name|visualIdIdentifier
parameter_list|()
block|{
return|return
name|QByteArrayLiteral
argument_list|(
literal|"XcbVisualId"
argument_list|)
return|;
block|}
specifier|static
name|uint
name|visualId
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
block|{
name|QXcbWindowFunctions
operator|::
name|VisualId
name|func
operator|=
name|reinterpret_cast
operator|<
name|VisualId
operator|>
operator|(
name|QGuiApplication
operator|::
name|platformFunction
argument_list|(
name|visualIdIdentifier
argument_list|()
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|func
condition|)
return|return
name|func
argument_list|(
name|window
argument_list|)
return|;
return|return
name|UINT_MAX
return|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QXCBWINDOWFUNCTIONS_H
end_comment
end_unit
