begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the plugins of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPLATFORMHEADERHELPER_H
end_ifndef
begin_define
DECL|macro|QPLATFORMHEADERHELPER_H
define|#
directive|define
name|QPLATFORMHEADERHELPER_H
end_define
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_if
if|#
directive|if
literal|0
end_if
begin_pragma
pragma|#
directive|pragma
name|qt_class
name|(
name|QPlatformHeaderHelper
name|)
end_pragma
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|namespace
name|QPlatformHeaderHelper
block|{
name|template
operator|<
name|typename
name|ReturnT
operator|,
name|typename
name|FunctionT
operator|>
name|ReturnT
name|callPlatformFunction
argument_list|(
argument|const QByteArray&functionName
argument_list|)
block|{
name|FunctionT
name|func
operator|=
name|reinterpret_cast
operator|<
name|FunctionT
operator|>
operator|(
name|QGuiApplication
operator|::
name|platformFunction
argument_list|(
name|functionName
argument_list|)
operator|)
block|;
return|return
name|func
condition|?
name|func
argument_list|()
else|:
name|ReturnT
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|ReturnT
operator|,
name|typename
name|FunctionT
operator|,
name|typename
name|Arg1
operator|>
name|ReturnT
name|callPlatformFunction
argument_list|(
argument|const QByteArray&functionName
argument_list|,
argument|Arg1 a1
argument_list|)
block|{
name|FunctionT
name|func
operator|=
name|reinterpret_cast
operator|<
name|FunctionT
operator|>
operator|(
name|QGuiApplication
operator|::
name|platformFunction
argument_list|(
name|functionName
argument_list|)
operator|)
block|;
return|return
name|func
condition|?
name|func
argument_list|(
name|a1
argument_list|)
else|:
name|ReturnT
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|ReturnT
operator|,
name|typename
name|FunctionT
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|>
name|ReturnT
name|callPlatformFunction
argument_list|(
argument|const QByteArray&functionName
argument_list|,
argument|Arg1 a1
argument_list|,
argument|Arg2 a2
argument_list|)
block|{
name|FunctionT
name|func
operator|=
name|reinterpret_cast
operator|<
name|FunctionT
operator|>
operator|(
name|QGuiApplication
operator|::
name|platformFunction
argument_list|(
name|functionName
argument_list|)
operator|)
block|;
return|return
name|func
condition|?
name|func
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
else|:
name|ReturnT
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|ReturnT
operator|,
name|typename
name|FunctionT
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|>
name|ReturnT
name|callPlatformFunction
argument_list|(
argument|const QByteArray&functionName
argument_list|,
argument|Arg1 a1
argument_list|,
argument|Arg2 a2
argument_list|,
argument|Arg3 a3
argument_list|)
block|{
name|FunctionT
name|func
operator|=
name|reinterpret_cast
operator|<
name|FunctionT
operator|>
operator|(
name|QGuiApplication
operator|::
name|platformFunction
argument_list|(
name|functionName
argument_list|)
operator|)
block|;
return|return
name|func
condition|?
name|func
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|)
else|:
name|ReturnT
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|ReturnT
operator|,
name|typename
name|FunctionT
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|,
name|typename
name|Arg3
operator|,
name|typename
name|Arg4
operator|>
name|ReturnT
name|callPlatformFunction
argument_list|(
argument|const QByteArray&functionName
argument_list|,
argument|Arg1 a1
argument_list|,
argument|Arg2 a2
argument_list|,
argument|Arg3 a3
argument_list|,
argument|Arg4 a4
argument_list|)
block|{
name|FunctionT
name|func
operator|=
name|reinterpret_cast
operator|<
name|FunctionT
operator|>
operator|(
name|QGuiApplication
operator|::
name|platformFunction
argument_list|(
name|functionName
argument_list|)
operator|)
block|;
return|return
name|func
condition|?
name|func
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|)
else|:
name|ReturnT
argument_list|()
return|;
block|}
block|}
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*QPLATFORMHEADERHELPER_H*/
end_comment
end_unit
