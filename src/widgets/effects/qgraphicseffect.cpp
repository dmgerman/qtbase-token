begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*!     \class QGraphicsEffect     \brief The QGraphicsEffect class is the base class for all graphics            effects.     \since 4.6     \ingroup multimedia     \ingroup graphicsview-api     \inmodule QtWidgets      Effects alter the appearance of elements by hooking into the rendering     pipeline and operating between the source (e.g., a QGraphicsPixmapItem)     and the destination device (e.g., QGraphicsView's viewport). Effects can be     disabled by calling setEnabled(false). If effects are disabled, the source     is rendered directly.      To add a visual effect to a QGraphicsItem, for example, you can use one of     the standard effects, or alternately, create your own effect by creating a     subclass of QGraphicsEffect. The effect can then be installed on the item     using QGraphicsItem::setGraphicsEffect().      Qt provides the following standard effects:      \list     \li QGraphicsBlurEffect - blurs the item by a given radius     \li QGraphicsDropShadowEffect - renders a dropshadow behind the item     \li QGraphicsColorizeEffect - renders the item in shades of any given color     \li QGraphicsOpacityEffect - renders the item with an opacity     \endlist      \table     \row     \li{2,1} \image graphicseffect-plain.png     \row     \li \image graphicseffect-blur.png     \li \image graphicseffect-colorize.png     \row     \li \image graphicseffect-opacity.png     \li \image graphicseffect-drop-shadow.png     \endtable      \image graphicseffect-widget.png      For more information on how to use each effect, refer to the specific     effect's documentation.      To create your own custom effect, create a subclass of QGraphicsEffect (or     any other existing effects) and reimplement the virtual function draw().     This function is called whenever the effect needs to redraw. The draw()     function takes the painter with which to draw as an argument. For more     information, refer to the documenation for draw(). In the draw() function     you can call sourcePixmap() to get a pixmap of the graphics effect source     which you can then process.      If your effect changes, use update() to request for a redraw. If your     custom effect changes the bounding rectangle of the source, e.g., a radial     glow effect may need to apply an extra margin, you can reimplement the     virtual boundingRectFor() function, and call updateBoundingRect()     to notify the framework whenever this rectangle changes. The virtual     sourceChanged() function is called to notify the effects that     the source has changed in some way - e.g., if the source is a     QGraphicsRectItem and its rectangle parameters have changed.      \sa QGraphicsItem::setGraphicsEffect(), QWidget::setGraphicsEffect() */
end_comment
begin_include
include|#
directive|include
file|"qgraphicseffect_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qgraphicsitem_p.h"
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsitem.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qimage.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpainter.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpaintengine.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qrect.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qdrawhelper_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \internal     \class QGraphicsEffectSource     \brief The QGraphicsEffectSource class represents the source on which a            QGraphicsEffect is installed on.      When a QGraphicsEffect is installed on a QGraphicsItem, for example, this     class will act as a wrapper around QGraphicsItem. Then, calling update() is     effectively the same as calling QGraphicsItem::update().      QGraphicsEffectSource also provides a pixmap() function which creates a     pixmap with the source painted into it.      \sa QGraphicsItem::setGraphicsEffect(), QWidget::setGraphicsEffect() */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QGraphicsEffectSource
name|QGraphicsEffectSource
operator|::
name|QGraphicsEffectSource
parameter_list|(
name|QGraphicsEffectSourcePrivate
modifier|&
name|dd
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{}
end_constructor
begin_comment
comment|/*!     Destroys the effect source. */
end_comment
begin_destructor
DECL|function|~QGraphicsEffectSource
name|QGraphicsEffectSource
operator|::
name|~
name|QGraphicsEffectSource
parameter_list|()
block|{}
end_destructor
begin_comment
comment|/*!     Returns the bounding rectangle of the source mapped to the given \a system.      \sa draw() */
end_comment
begin_function
DECL|function|boundingRect
name|QRectF
name|QGraphicsEffectSource
operator|::
name|boundingRect
parameter_list|(
name|Qt
operator|::
name|CoordinateSystem
name|system
parameter_list|)
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|boundingRect
argument_list|(
name|system
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the bounding rectangle of the source mapped to the given \a system.      Calling this function with Qt::DeviceCoordinates outside of     QGraphicsEffect::draw() will give undefined results, as there is no device     context available.      \sa draw() */
end_comment
begin_function
DECL|function|sourceBoundingRect
name|QRectF
name|QGraphicsEffect
operator|::
name|sourceBoundingRect
parameter_list|(
name|Qt
operator|::
name|CoordinateSystem
name|system
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|source
condition|)
return|return
name|d
operator|->
name|source
operator|->
name|boundingRect
argument_list|(
name|system
argument_list|)
return|;
return|return
name|QRectF
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the item if this source is a QGraphicsItem; otherwise     returns 0.      \sa widget() */
end_comment
begin_function
DECL|function|graphicsItem
specifier|const
name|QGraphicsItem
modifier|*
name|QGraphicsEffectSource
operator|::
name|graphicsItem
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|graphicsItem
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the widget if this source is a QWidget; otherwise     returns 0.      \sa graphicsItem() */
end_comment
begin_function
DECL|function|widget
specifier|const
name|QWidget
modifier|*
name|QGraphicsEffectSource
operator|::
name|widget
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|widget
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the style options (used when drawing the source) if     available; otherwise returns 0.      \sa graphicsItem(), widget() */
end_comment
begin_function
DECL|function|styleOption
specifier|const
name|QStyleOption
modifier|*
name|QGraphicsEffectSource
operator|::
name|styleOption
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|styleOption
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Draws the source using the given \a painter.      This function should only be called from QGraphicsEffect::draw().      \sa QGraphicsEffect::draw() */
end_comment
begin_function
DECL|function|draw
name|void
name|QGraphicsEffectSource
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsEffectSource
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
decl_stmt|;
if|if
condition|(
name|QPixmapCache
operator|::
name|find
argument_list|(
name|d
operator|->
name|m_cacheKey
argument_list|,
operator|&
name|pm
argument_list|)
condition|)
block|{
name|QTransform
name|restoreTransform
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|m_cachedSystem
operator|==
name|Qt
operator|::
name|DeviceCoordinates
condition|)
block|{
name|restoreTransform
operator|=
name|painter
operator|->
name|worldTransform
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setWorldTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|drawPixmap
argument_list|(
name|d
operator|->
name|m_cachedOffset
argument_list|,
name|pm
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_cachedSystem
operator|==
name|Qt
operator|::
name|DeviceCoordinates
condition|)
name|painter
operator|->
name|setWorldTransform
argument_list|(
name|restoreTransform
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d_func
argument_list|()
operator|->
name|draw
argument_list|(
name|painter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Draws the source directly using the given \a painter.      This function should only be called from QGraphicsEffect::draw().      For example:      \snippet code/src_gui_effects_qgraphicseffect.cpp 0      \sa QGraphicsEffect::draw() */
end_comment
begin_function
DECL|function|drawSource
name|void
name|QGraphicsEffect
operator|::
name|drawSource
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|source
condition|)
name|d
operator|->
name|source
operator|->
name|draw
argument_list|(
name|painter
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Schedules a redraw of the source. Call this function whenever the source     needs to be redrawn.      \sa QGraphicsEffect::updateBoundingRect(), QWidget::update(),         QGraphicsItem::update(), */
end_comment
begin_function
DECL|function|update
name|void
name|QGraphicsEffectSource
operator|::
name|update
parameter_list|()
block|{
name|d_func
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the source effectively is a pixmap, e.g., a     QGraphicsPixmapItem.      This function is useful for optimization purposes. For instance, there's no     point in drawing the source in device coordinates to avoid pixmap scaling     if this function returns true - the source pixmap will be scaled anyways. */
end_comment
begin_function
DECL|function|isPixmap
name|bool
name|QGraphicsEffectSource
operator|::
name|isPixmap
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|isPixmap
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the source effectively is a pixmap, e.g., a     QGraphicsPixmapItem.      This function is useful for optimization purposes. For instance, there's no     point in drawing the source in device coordinates to avoid pixmap scaling     if this function returns true - the source pixmap will be scaled anyways. */
end_comment
begin_function
DECL|function|sourceIsPixmap
name|bool
name|QGraphicsEffect
operator|::
name|sourceIsPixmap
parameter_list|()
specifier|const
block|{
return|return
name|source
argument_list|()
condition|?
name|source
argument_list|()
operator|->
name|isPixmap
argument_list|()
else|:
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a pixmap with the source painted into it.      The \a system specifies which coordinate system to be used for the source.     The optional \a offset parameter returns the offset where the pixmap should     be painted at using the current painter.      The \a mode determines how much of the effect the pixmap will contain.     By default, the pixmap will contain the whole effect.      The returned pixmap is bound to the current painter's device rectangle when     \a system is Qt::DeviceCoordinates.      \sa QGraphicsEffect::draw(), boundingRect() */
end_comment
begin_function
DECL|function|pixmap
name|QPixmap
name|QGraphicsEffectSource
operator|::
name|pixmap
parameter_list|(
name|Qt
operator|::
name|CoordinateSystem
name|system
parameter_list|,
name|QPoint
modifier|*
name|offset
parameter_list|,
name|QGraphicsEffect
operator|::
name|PixmapPadMode
name|mode
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsEffectSource
argument_list|)
expr_stmt|;
comment|// Shortcut, no cache for childless pixmap items...
specifier|const
name|QGraphicsItem
modifier|*
name|item
init|=
name|graphicsItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|system
operator|==
name|Qt
operator|::
name|LogicalCoordinates
operator|&&
name|mode
operator|==
name|QGraphicsEffect
operator|::
name|NoPad
operator|&&
name|item
operator|&&
name|isPixmap
argument_list|()
condition|)
block|{
specifier|const
name|QGraphicsPixmapItem
modifier|*
name|pixmapItem
init|=
cast|static_cast
argument_list|<
specifier|const
name|QGraphicsPixmapItem
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
condition|)
operator|*
name|offset
operator|=
name|pixmapItem
operator|->
name|offset
argument_list|()
operator|.
name|toPoint
argument_list|()
expr_stmt|;
return|return
name|pixmapItem
operator|->
name|pixmap
argument_list|()
return|;
block|}
if|if
condition|(
name|system
operator|==
name|Qt
operator|::
name|DeviceCoordinates
operator|&&
name|item
operator|&&
operator|!
cast|static_cast
argument_list|<
specifier|const
name|QGraphicsItemEffectSourcePrivate
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
argument_list|)
operator|->
name|info
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsEffectSource::pixmap: Not yet implemented, lacking device context"
argument_list|)
expr_stmt|;
return|return
name|QPixmap
argument_list|()
return|;
block|}
name|QPixmap
name|pm
decl_stmt|;
if|if
condition|(
name|item
operator|&&
name|d
operator|->
name|m_cachedSystem
operator|==
name|system
operator|&&
name|d
operator|->
name|m_cachedMode
operator|==
name|mode
condition|)
name|QPixmapCache
operator|::
name|find
argument_list|(
name|d
operator|->
name|m_cacheKey
argument_list|,
operator|&
name|pm
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|pm
operator|=
name|d
operator|->
name|pixmap
argument_list|(
name|system
argument_list|,
operator|&
name|d
operator|->
name|m_cachedOffset
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_cachedSystem
operator|=
name|system
expr_stmt|;
name|d
operator|->
name|m_cachedMode
operator|=
name|mode
expr_stmt|;
name|d
operator|->
name|invalidateCache
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_cacheKey
operator|=
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|pm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
condition|)
operator|*
name|offset
operator|=
name|d
operator|->
name|m_cachedOffset
expr_stmt|;
return|return
name|pm
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a pixmap with the source painted into it.      The \a system specifies which coordinate system to be used for the source.     The optional \a offset parameter returns the offset where the pixmap should     be painted at using the current painter. For control on how the pixmap is     padded use the \a mode parameter.      The returned pixmap is clipped to the current painter's device rectangle when     \a system is Qt::DeviceCoordinates.      Calling this function with Qt::DeviceCoordinates outside of     QGraphicsEffect::draw() will give undefined results, as there is no device     context available.      \sa draw(), boundingRect() */
end_comment
begin_function
DECL|function|sourcePixmap
name|QPixmap
name|QGraphicsEffect
operator|::
name|sourcePixmap
parameter_list|(
name|Qt
operator|::
name|CoordinateSystem
name|system
parameter_list|,
name|QPoint
modifier|*
name|offset
parameter_list|,
name|QGraphicsEffect
operator|::
name|PixmapPadMode
name|mode
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|source
condition|)
return|return
name|d
operator|->
name|source
operator|->
name|pixmap
argument_list|(
name|system
argument_list|,
name|offset
argument_list|,
name|mode
argument_list|)
return|;
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_destructor
DECL|function|~QGraphicsEffectSourcePrivate
name|QGraphicsEffectSourcePrivate
operator|::
name|~
name|QGraphicsEffectSourcePrivate
parameter_list|()
block|{
name|invalidateCache
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setCachedOffset
name|void
name|QGraphicsEffectSourcePrivate
operator|::
name|setCachedOffset
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|offset
parameter_list|)
block|{
name|m_cachedOffset
operator|=
name|offset
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidateCache
name|void
name|QGraphicsEffectSourcePrivate
operator|::
name|invalidateCache
parameter_list|(
name|InvalidateReason
name|reason
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_cachedMode
operator|!=
name|QGraphicsEffect
operator|::
name|PadToEffectiveBoundingRect
operator|&&
operator|(
name|reason
operator|==
name|EffectRectChanged
operator|||
operator|(
name|reason
operator|==
name|TransformChanged
operator|&&
name|m_cachedSystem
operator|==
name|Qt
operator|::
name|LogicalCoordinates
operator|)
operator|)
condition|)
block|{
return|return;
block|}
name|QPixmapCache
operator|::
name|remove
argument_list|(
name|m_cacheKey
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Constructs a new QGraphicsEffect instance having the     specified \a parent. */
end_comment
begin_constructor
DECL|function|QGraphicsEffect
name|QGraphicsEffect
operator|::
name|QGraphicsEffect
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QGraphicsEffectPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QGraphicsEffect
name|QGraphicsEffect
operator|::
name|QGraphicsEffect
parameter_list|(
name|QGraphicsEffectPrivate
modifier|&
name|dd
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Removes the effect from the source, and destroys the graphics effect. */
end_comment
begin_destructor
DECL|function|~QGraphicsEffect
name|QGraphicsEffect
operator|::
name|~
name|QGraphicsEffect
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGraphicsEffect
argument_list|)
expr_stmt|;
name|d
operator|->
name|setGraphicsEffectSource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Returns the effective bounding rectangle for this effect, i.e., the     bounding rectangle of the source in device coordinates, adjusted by     any margins applied by the effect itself.      \sa boundingRectFor(), updateBoundingRect() */
end_comment
begin_function
DECL|function|boundingRect
name|QRectF
name|QGraphicsEffect
operator|::
name|boundingRect
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|source
condition|)
return|return
name|boundingRectFor
argument_list|(
name|d
operator|->
name|source
operator|->
name|boundingRect
argument_list|()
argument_list|)
return|;
return|return
name|QRectF
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the effective bounding rectangle for this effect, given the     provided \a rect in the device coordinates. When writing     you own custom effect, you must call updateBoundingRect() whenever any     parameters are changed that may cause this this function to return a     different value.      \sa sourceBoundingRect() */
end_comment
begin_function
DECL|function|boundingRectFor
name|QRectF
name|QGraphicsEffect
operator|::
name|boundingRectFor
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
return|return
name|rect
return|;
block|}
end_function
begin_comment
comment|/*!     \property QGraphicsEffect::enabled     \brief whether the effect is enabled or not.      If an effect is disabled, the source will be rendered with as normal, with     no interference from the effect. If the effect is enabled, the source will     be rendered with the effect applied.      This property is enabled by default.      Using this property, you can disable certain effects on slow platforms, in     order to ensure that the user interface is responsive. */
end_comment
begin_function
DECL|function|isEnabled
name|bool
name|QGraphicsEffect
operator|::
name|isEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|isEnabled
return|;
block|}
end_function
begin_function
DECL|function|setEnabled
name|void
name|QGraphicsEffect
operator|::
name|setEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isEnabled
operator|==
name|enable
condition|)
return|return;
name|d
operator|->
name|isEnabled
operator|=
name|enable
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|source
condition|)
block|{
name|d
operator|->
name|source
operator|->
name|d_func
argument_list|()
operator|->
name|effectBoundingRectChanged
argument_list|()
expr_stmt|;
name|d
operator|->
name|source
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateCache
argument_list|()
expr_stmt|;
block|}
emit|emit
name|enabledChanged
argument_list|(
name|enable
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsEffect::enabledChanged(bool enabled)      This signal is emitted whenever the effect is enabled or disabled.     The \a enabled parameter holds the effects's new enabled state.      \sa isEnabled() */
end_comment
begin_comment
comment|/*!     Schedules a redraw of the effect. Call this function whenever the effect     needs to be redrawn. This function does not trigger a redraw of the source.      \sa updateBoundingRect() */
end_comment
begin_function
DECL|function|update
name|void
name|QGraphicsEffect
operator|::
name|update
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGraphicsEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|source
condition|)
name|d
operator|->
name|source
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Returns a pointer to the source, which provides extra context information     that can be useful for the effect.      \sa draw() */
end_comment
begin_function
DECL|function|source
name|QGraphicsEffectSource
modifier|*
name|QGraphicsEffect
operator|::
name|source
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|source
return|;
block|}
end_function
begin_comment
comment|/*!     This function notifies the effect framework when the effect's bounding     rectangle has changed. As a custom effect author, you must call this     function whenever you change any parameters that will cause the virtual     boundingRectFor() function to return a different value.      This function will call update() if this is necessary.      \sa boundingRectFor(), boundingRect(), sourceBoundingRect() */
end_comment
begin_function
DECL|function|updateBoundingRect
name|void
name|QGraphicsEffect
operator|::
name|updateBoundingRect
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGraphicsEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|source
condition|)
block|{
name|d
operator|->
name|source
operator|->
name|d_func
argument_list|()
operator|->
name|effectBoundingRectChanged
argument_list|()
expr_stmt|;
name|d
operator|->
name|source
operator|->
name|d_func
argument_list|()
operator|->
name|invalidateCache
argument_list|(
name|QGraphicsEffectSourcePrivate
operator|::
name|EffectRectChanged
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \fn virtual void QGraphicsEffect::draw(QPainter *painter) = 0      This pure virtual function draws the effect and is called whenever the     source needs to be drawn.      Reimplement this function in a QGraphicsEffect subclass to provide the     effect's drawing implementation, using \a painter.      For example:      \snippet code/src_gui_effects_qgraphicseffect.cpp 1      This function should not be called explicitly by the user, since it is     meant for reimplementation purposes only. */
end_comment
begin_comment
comment|/*!     \enum QGraphicsEffect::ChangeFlag      This enum describes what has changed in QGraphicsEffectSource.      \value SourceAttached The effect is installed on a source.     \value SourceDetached The effect is uninstalled on a source.     \value SourceBoundingRectChanged The bounding rect of the source has            changed.     \value SourceInvalidated The visual appearance of the source has changed. */
end_comment
begin_comment
comment|/*!     \enum QGraphicsEffect::PixmapPadMode      This enum describes how the pixmap returned from sourcePixmap should be     padded.      \value NoPad The pixmap should not receive any additional            padding.     \value PadToTransparentBorder The pixmap should be padded            to ensure it has a completely transparent border.     \value PadToEffectiveBoundingRect The pixmap should be padded to            match the effective bounding rectangle of the effect. */
end_comment
begin_comment
comment|/*!     This virtual function is called by QGraphicsEffect to notify the effect     that the source has changed. If the effect applies any cache, then this     cache must be purged in order to reflect the new appearance of the source.      The \a flags describes what has changed. */
end_comment
begin_function
DECL|function|sourceChanged
name|void
name|QGraphicsEffect
operator|::
name|sourceChanged
parameter_list|(
name|ChangeFlags
name|flags
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QGraphicsColorizeEffect     \brief The QGraphicsColorizeEffect class provides a colorize effect.     \since 4.6     \inmodule QtWidgets      A colorize effect renders the source with a tint of its color(). The color     can be modified using the setColor() function.      By default, the color is light blue (QColor(0, 0, 192)).      \image graphicseffect-colorize.png      \sa QGraphicsDropShadowEffect, QGraphicsBlurEffect, QGraphicsOpacityEffect */
end_comment
begin_comment
comment|/*!     Constructs a new QGraphicsColorizeEffect instance.     The \a parent parameter is passed to QGraphicsEffect's constructor. */
end_comment
begin_constructor
DECL|function|QGraphicsColorizeEffect
name|QGraphicsColorizeEffect
operator|::
name|QGraphicsColorizeEffect
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGraphicsEffect
argument_list|(
operator|*
operator|new
name|QGraphicsColorizeEffectPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the effect. */
end_comment
begin_destructor
DECL|function|~QGraphicsColorizeEffect
name|QGraphicsColorizeEffect
operator|::
name|~
name|QGraphicsColorizeEffect
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \property QGraphicsColorizeEffect::color     \brief the color of the effect.      By default, the color is light blue (QColor(0, 0, 192)). */
end_comment
begin_function
DECL|function|color
name|QColor
name|QGraphicsColorizeEffect
operator|::
name|color
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsColorizeEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter
operator|->
name|color
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setColor
name|void
name|QGraphicsColorizeEffect
operator|::
name|setColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsColorizeEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|filter
operator|->
name|color
argument_list|()
operator|==
name|color
condition|)
return|return;
name|d
operator|->
name|filter
operator|->
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
emit|emit
name|colorChanged
argument_list|(
name|color
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \property QGraphicsColorizeEffect::strength     \brief the strength of the effect.      By default, the strength is 1.0.     A strength 0.0 equals to no effect, while 1.0 means full colorization. */
end_comment
begin_function
DECL|function|strength
name|qreal
name|QGraphicsColorizeEffect
operator|::
name|strength
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsColorizeEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter
operator|->
name|strength
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setStrength
name|void
name|QGraphicsColorizeEffect
operator|::
name|setStrength
parameter_list|(
name|qreal
name|strength
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsColorizeEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|d
operator|->
name|filter
operator|->
name|strength
argument_list|()
argument_list|,
name|strength
argument_list|)
condition|)
return|return;
name|d
operator|->
name|filter
operator|->
name|setStrength
argument_list|(
name|strength
argument_list|)
expr_stmt|;
name|d
operator|->
name|opaque
operator|=
operator|!
name|qFuzzyIsNull
argument_list|(
name|strength
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
emit|emit
name|strengthChanged
argument_list|(
name|strength
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*! \fn void QGraphicsColorizeEffect::strengthChanged(qreal strength)   This signal is emitted whenever setStrength() changes the colorize   strength property. \a strength contains the new strength value of   the colorize effect.  */
end_comment
begin_comment
comment|/*!     \fn void QGraphicsColorizeEffect::colorChanged(const QColor&color)      This signal is emitted whenever the effect's color changes.     The \a color parameter holds the effect's new color. */
end_comment
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|draw
name|void
name|QGraphicsColorizeEffect
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsColorizeEffect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|opaque
condition|)
block|{
name|drawSource
argument_list|(
name|painter
argument_list|)
expr_stmt|;
return|return;
block|}
name|QPoint
name|offset
decl_stmt|;
if|if
condition|(
name|sourceIsPixmap
argument_list|()
condition|)
block|{
comment|// No point in drawing in device coordinates (pixmap will be scaled anyways).
specifier|const
name|QPixmap
name|pixmap
init|=
name|sourcePixmap
argument_list|(
name|Qt
operator|::
name|LogicalCoordinates
argument_list|,
operator|&
name|offset
argument_list|,
name|NoPad
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|filter
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
name|offset
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Draw pixmap in deviceCoordinates to avoid pixmap scaling.
specifier|const
name|QPixmap
name|pixmap
init|=
name|sourcePixmap
argument_list|(
name|Qt
operator|::
name|DeviceCoordinates
argument_list|,
operator|&
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QTransform
name|restoreTransform
init|=
name|painter
operator|->
name|worldTransform
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setWorldTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
name|offset
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setWorldTransform
argument_list|(
name|restoreTransform
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QGraphicsBlurEffect     \brief The QGraphicsBlurEffect class provides a blur effect.     \since 4.6     \inmodule QtWidgets      A blur effect blurs the source. This effect is useful for reducing details,     such as when the source loses focus and you want to draw attention to other     elements. The level of detail can be modified using the setBlurRadius()     function. Use setBlurHints() to choose the blur hints.      By default, the blur radius is 5 pixels. The blur radius is specified in     device coordinates.      \image graphicseffect-blur.png      \sa QGraphicsDropShadowEffect, QGraphicsColorizeEffect, QGraphicsOpacityEffect */
end_comment
begin_comment
comment|/*!     \enum QGraphicsBlurEffect::BlurHint     \since 4.6      This enum describes the possible hints that can be used to control how     blur effects are applied. The hints might not have an effect in all the     paint engines.      \value PerformanceHint Indicates that rendering performance is the most important factor,     at the potential cost of lower quality.      \value QualityHint Indicates that rendering quality is the most important factor,     at the potential cost of lower performance.      \value AnimationHint Indicates that the blur radius is going to be animated, hinting     that the implementation can keep a cache of blurred verisons of the source.     Do not use this hint if the source is going to be dynamically changing.      \sa blurHints(), setBlurHints() */
end_comment
begin_comment
comment|/*!     Constructs a new QGraphicsBlurEffect instance.     The \a parent parameter is passed to QGraphicsEffect's constructor. */
end_comment
begin_constructor
DECL|function|QGraphicsBlurEffect
name|QGraphicsBlurEffect
operator|::
name|QGraphicsBlurEffect
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGraphicsEffect
argument_list|(
operator|*
operator|new
name|QGraphicsBlurEffectPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsBlurEffect
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter
operator|->
name|setBlurHints
argument_list|(
name|QGraphicsBlurEffect
operator|::
name|PerformanceHint
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the effect. */
end_comment
begin_destructor
DECL|function|~QGraphicsBlurEffect
name|QGraphicsBlurEffect
operator|::
name|~
name|QGraphicsBlurEffect
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \property QGraphicsBlurEffect::blurRadius     \brief the blur radius of the effect.      Using a smaller radius results in a sharper appearance, whereas a bigger     radius results in a more blurred appearance.      By default, the blur radius is 5 pixels.      The radius is given in device coordinates, meaning it is     unaffected by scale. */
end_comment
begin_function
DECL|function|blurRadius
name|qreal
name|QGraphicsBlurEffect
operator|::
name|blurRadius
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsBlurEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter
operator|->
name|radius
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setBlurRadius
name|void
name|QGraphicsBlurEffect
operator|::
name|setBlurRadius
parameter_list|(
name|qreal
name|radius
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsBlurEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|d
operator|->
name|filter
operator|->
name|radius
argument_list|()
argument_list|,
name|radius
argument_list|)
condition|)
return|return;
name|d
operator|->
name|filter
operator|->
name|setRadius
argument_list|(
name|radius
argument_list|)
expr_stmt|;
name|updateBoundingRect
argument_list|()
expr_stmt|;
emit|emit
name|blurRadiusChanged
argument_list|(
name|radius
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsBlurEffect::blurRadiusChanged(qreal radius)      This signal is emitted whenever the effect's blur radius changes.     The \a radius parameter holds the effect's new blur radius. */
end_comment
begin_comment
comment|/*!     \property QGraphicsBlurEffect::blurHints     \brief the blur hint of the effect.      Use the PerformanceHint hint to say that you want a faster blur,     the QualityHint hint to say that you prefer a higher quality blur,     or the AnimationHint when you want to animate the blur radius.      By default, the blur hint is PerformanceHint. */
end_comment
begin_function
DECL|function|blurHints
name|QGraphicsBlurEffect
operator|::
name|BlurHints
name|QGraphicsBlurEffect
operator|::
name|blurHints
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsBlurEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter
operator|->
name|blurHints
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setBlurHints
name|void
name|QGraphicsBlurEffect
operator|::
name|setBlurHints
parameter_list|(
name|QGraphicsBlurEffect
operator|::
name|BlurHints
name|hints
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsBlurEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|filter
operator|->
name|blurHints
argument_list|()
operator|==
name|hints
condition|)
return|return;
name|d
operator|->
name|filter
operator|->
name|setBlurHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
emit|emit
name|blurHintsChanged
argument_list|(
name|hints
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsBlurEffect::blurHintsChanged(QGraphicsBlurEffect::BlurHints hints)      This signal is emitted whenever the effect's blur hints changes.     The \a hints parameter holds the effect's new blur hints. */
end_comment
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|boundingRectFor
name|QRectF
name|QGraphicsBlurEffect
operator|::
name|boundingRectFor
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsBlurEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter
operator|->
name|boundingRectFor
argument_list|(
name|rect
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|draw
name|void
name|QGraphicsBlurEffect
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsBlurEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|filter
operator|->
name|radius
argument_list|()
operator|<
literal|1
condition|)
block|{
name|drawSource
argument_list|(
name|painter
argument_list|)
expr_stmt|;
return|return;
block|}
name|PixmapPadMode
name|mode
init|=
name|PadToEffectiveBoundingRect
decl_stmt|;
if|if
condition|(
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|OpenGL2
condition|)
name|mode
operator|=
name|NoPad
expr_stmt|;
name|QPoint
name|offset
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|sourcePixmap
argument_list|(
name|Qt
operator|::
name|LogicalCoordinates
argument_list|,
operator|&
name|offset
argument_list|,
name|mode
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|d
operator|->
name|filter
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
name|offset
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QGraphicsDropShadowEffect     \brief The QGraphicsDropShadowEffect class provides a drop shadow effect.     \since 4.6     \inmodule QtWidgets      A drop shadow effect renders the source with a drop shadow. The color of     the drop shadow can be modified using the setColor() function. The drop     shadow offset can be modified using the setOffset() function and the blur     radius of the drop shadow can be changed with the setBlurRadius()     function.      By default, the drop shadow is a semi-transparent dark gray     (QColor(63, 63, 63, 180)) shadow, blurred with a radius of 1 at an offset     of 8 pixels towards the lower right. The drop shadow offset is specified     in device coordinates.      \image graphicseffect-drop-shadow.png      \sa QGraphicsBlurEffect, QGraphicsColorizeEffect, QGraphicsOpacityEffect */
end_comment
begin_comment
comment|/*!     Constructs a new QGraphicsDropShadowEffect instance.     The \a parent parameter is passed to QGraphicsEffect's constructor. */
end_comment
begin_constructor
DECL|function|QGraphicsDropShadowEffect
name|QGraphicsDropShadowEffect
operator|::
name|QGraphicsDropShadowEffect
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGraphicsEffect
argument_list|(
operator|*
operator|new
name|QGraphicsDropShadowEffectPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the effect. */
end_comment
begin_destructor
DECL|function|~QGraphicsDropShadowEffect
name|QGraphicsDropShadowEffect
operator|::
name|~
name|QGraphicsDropShadowEffect
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \property QGraphicsDropShadowEffect::offset     \brief the shadow offset in pixels.      By default, the offset is 8 pixels towards the lower right.      The offset is given in device coordinates, which means it is     unaffected by scale.      \sa xOffset(), yOffset(), blurRadius(), color() */
end_comment
begin_function
DECL|function|offset
name|QPointF
name|QGraphicsDropShadowEffect
operator|::
name|offset
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsDropShadowEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter
operator|->
name|offset
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setOffset
name|void
name|QGraphicsDropShadowEffect
operator|::
name|setOffset
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsDropShadowEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|filter
operator|->
name|offset
argument_list|()
operator|==
name|offset
condition|)
return|return;
name|d
operator|->
name|filter
operator|->
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|updateBoundingRect
argument_list|()
expr_stmt|;
emit|emit
name|offsetChanged
argument_list|(
name|offset
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \property QGraphicsDropShadowEffect::xOffset     \brief the horizontal shadow offset in pixels.      By default, the horizontal shadow offset is 8 pixels.        \sa yOffset(), offset() */
end_comment
begin_comment
comment|/*!     \property QGraphicsDropShadowEffect::yOffset     \brief the vertical shadow offset in pixels.      By default, the vertical shadow offset is 8 pixels.      \sa xOffset(), offset() */
end_comment
begin_comment
comment|/*!     \fn void QGraphicsDropShadowEffect::offsetChanged(const QPointF&offset)      This signal is emitted whenever the effect's shadow offset changes.     The \a offset parameter holds the effect's new shadow offset. */
end_comment
begin_comment
comment|/*!     \property QGraphicsDropShadowEffect::blurRadius     \brief the blur radius in pixels of the drop shadow.      Using a smaller radius results in a sharper shadow, whereas using a bigger     radius results in a more blurred shadow.      By default, the blur radius is 1 pixel.      \sa color(), offset() */
end_comment
begin_function
DECL|function|blurRadius
name|qreal
name|QGraphicsDropShadowEffect
operator|::
name|blurRadius
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsDropShadowEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter
operator|->
name|blurRadius
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setBlurRadius
name|void
name|QGraphicsDropShadowEffect
operator|::
name|setBlurRadius
parameter_list|(
name|qreal
name|blurRadius
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsDropShadowEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|d
operator|->
name|filter
operator|->
name|blurRadius
argument_list|()
argument_list|,
name|blurRadius
argument_list|)
condition|)
return|return;
name|d
operator|->
name|filter
operator|->
name|setBlurRadius
argument_list|(
name|blurRadius
argument_list|)
expr_stmt|;
name|updateBoundingRect
argument_list|()
expr_stmt|;
emit|emit
name|blurRadiusChanged
argument_list|(
name|blurRadius
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsDropShadowEffect::blurRadiusChanged(qreal blurRadius)      This signal is emitted whenever the effect's blur radius changes.     The \a blurRadius parameter holds the effect's new blur radius. */
end_comment
begin_comment
comment|/*!     \property QGraphicsDropShadowEffect::color     \brief the color of the drop shadow.      By default, the drop color is a semi-transparent dark gray     (QColor(63, 63, 63, 180)).      \sa offset(), blurRadius() */
end_comment
begin_function
DECL|function|color
name|QColor
name|QGraphicsDropShadowEffect
operator|::
name|color
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsDropShadowEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter
operator|->
name|color
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setColor
name|void
name|QGraphicsDropShadowEffect
operator|::
name|setColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsDropShadowEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|filter
operator|->
name|color
argument_list|()
operator|==
name|color
condition|)
return|return;
name|d
operator|->
name|filter
operator|->
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
emit|emit
name|colorChanged
argument_list|(
name|color
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsDropShadowEffect::colorChanged(const QColor&color)      This signal is emitted whenever the effect's color changes.     The \a color parameter holds the effect's new color. */
end_comment
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|boundingRectFor
name|QRectF
name|QGraphicsDropShadowEffect
operator|::
name|boundingRectFor
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsDropShadowEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|filter
operator|->
name|boundingRectFor
argument_list|(
name|rect
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|draw
name|void
name|QGraphicsDropShadowEffect
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsDropShadowEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|filter
operator|->
name|blurRadius
argument_list|()
operator|<=
literal|0
operator|&&
name|d
operator|->
name|filter
operator|->
name|offset
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|drawSource
argument_list|(
name|painter
argument_list|)
expr_stmt|;
return|return;
block|}
name|PixmapPadMode
name|mode
init|=
name|PadToEffectiveBoundingRect
decl_stmt|;
if|if
condition|(
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|type
argument_list|()
operator|==
name|QPaintEngine
operator|::
name|OpenGL2
condition|)
name|mode
operator|=
name|NoPad
expr_stmt|;
comment|// Draw pixmap in device coordinates to avoid pixmap scaling.
name|QPoint
name|offset
decl_stmt|;
specifier|const
name|QPixmap
name|pixmap
init|=
name|sourcePixmap
argument_list|(
name|Qt
operator|::
name|DeviceCoordinates
argument_list|,
operator|&
name|offset
argument_list|,
name|mode
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QTransform
name|restoreTransform
init|=
name|painter
operator|->
name|worldTransform
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setWorldTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|filter
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
name|offset
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setWorldTransform
argument_list|(
name|restoreTransform
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QGraphicsOpacityEffect     \brief The QGraphicsOpacityEffect class provides an opacity effect.     \since 4.6     \inmodule QtWidgets      An opacity effect renders the source with an opacity. This effect is useful     for making the source semi-transparent, similar to a fade-in/fade-out     sequence. The opacity can be modified using the setOpacity() function.      By default, the opacity is 0.7.      \image graphicseffect-opacity.png      \sa QGraphicsDropShadowEffect, QGraphicsBlurEffect, QGraphicsColorizeEffect */
end_comment
begin_comment
comment|/*!     Constructs a new QGraphicsOpacityEffect instance.     The \a parent parameter is passed to QGraphicsEffect's constructor. */
end_comment
begin_constructor
DECL|function|QGraphicsOpacityEffect
name|QGraphicsOpacityEffect
operator|::
name|QGraphicsOpacityEffect
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGraphicsEffect
argument_list|(
operator|*
operator|new
name|QGraphicsOpacityEffectPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the effect. */
end_comment
begin_destructor
DECL|function|~QGraphicsOpacityEffect
name|QGraphicsOpacityEffect
operator|::
name|~
name|QGraphicsOpacityEffect
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \property QGraphicsOpacityEffect::opacity     \brief the opacity of the effect.      The value should be in the range of 0.0 to 1.0, where 0.0 is     fully transparent and 1.0 is fully opaque.      By default, the opacity is 0.7.      \sa setOpacityMask() */
end_comment
begin_function
DECL|function|opacity
name|qreal
name|QGraphicsOpacityEffect
operator|::
name|opacity
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsOpacityEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|opacity
return|;
block|}
end_function
begin_function
DECL|function|setOpacity
name|void
name|QGraphicsOpacityEffect
operator|::
name|setOpacity
parameter_list|(
name|qreal
name|opacity
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsOpacityEffect
argument_list|)
expr_stmt|;
name|opacity
operator|=
name|qBound
argument_list|(
name|qreal
argument_list|(
literal|0.0
argument_list|)
argument_list|,
name|opacity
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|d
operator|->
name|opacity
argument_list|,
name|opacity
argument_list|)
condition|)
return|return;
name|d
operator|->
name|opacity
operator|=
name|opacity
expr_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|isFullyTransparent
operator|=
name|qFuzzyIsNull
argument_list|(
name|d
operator|->
name|opacity
argument_list|)
operator|)
condition|)
name|d
operator|->
name|isFullyOpaque
operator|=
literal|0
expr_stmt|;
else|else
name|d
operator|->
name|isFullyOpaque
operator|=
name|qFuzzyIsNull
argument_list|(
name|d
operator|->
name|opacity
operator|-
literal|1
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
emit|emit
name|opacityChanged
argument_list|(
name|opacity
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsOpacityEffect::opacityChanged(qreal opacity)      This signal is emitted whenever the effect's opacity changes.     The \a opacity parameter holds the effect's new opacity. */
end_comment
begin_comment
comment|/*!     \property QGraphicsOpacityEffect::opacityMask     \brief the opacity mask of the effect.      An opacity mask allows you apply opacity to portions of an element.      For example:      \snippet code/src_gui_effects_qgraphicseffect.cpp 2      There is no opacity mask by default.      \sa setOpacity() */
end_comment
begin_function
DECL|function|opacityMask
name|QBrush
name|QGraphicsOpacityEffect
operator|::
name|opacityMask
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsOpacityEffect
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|opacityMask
return|;
block|}
end_function
begin_function
DECL|function|setOpacityMask
name|void
name|QGraphicsOpacityEffect
operator|::
name|setOpacityMask
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|mask
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsOpacityEffect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|opacityMask
operator|==
name|mask
condition|)
return|return;
name|d
operator|->
name|opacityMask
operator|=
name|mask
expr_stmt|;
name|d
operator|->
name|hasOpacityMask
operator|=
operator|(
name|mask
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
operator|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
emit|emit
name|opacityMaskChanged
argument_list|(
name|mask
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsOpacityEffect::opacityMaskChanged(const QBrush&mask)      This signal is emitted whenever the effect's opacity mask changes.     The \a mask parameter holds the effect's new opacity mask. */
end_comment
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|draw
name|void
name|QGraphicsOpacityEffect
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsOpacityEffect
argument_list|)
expr_stmt|;
comment|// Transparent; nothing to draw.
if|if
condition|(
name|d
operator|->
name|isFullyTransparent
condition|)
return|return;
comment|// Opaque; draw directly without going through a pixmap.
if|if
condition|(
name|d
operator|->
name|isFullyOpaque
operator|&&
operator|!
name|d
operator|->
name|hasOpacityMask
condition|)
block|{
name|drawSource
argument_list|(
name|painter
argument_list|)
expr_stmt|;
return|return;
block|}
name|QPoint
name|offset
decl_stmt|;
name|Qt
operator|::
name|CoordinateSystem
name|system
init|=
name|sourceIsPixmap
argument_list|()
condition|?
name|Qt
operator|::
name|LogicalCoordinates
else|:
name|Qt
operator|::
name|DeviceCoordinates
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|sourcePixmap
argument_list|(
name|system
argument_list|,
operator|&
name|offset
argument_list|,
name|QGraphicsEffect
operator|::
name|NoPad
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setOpacity
argument_list|(
name|d
operator|->
name|opacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasOpacityMask
condition|)
block|{
name|QPainter
name|pixmapPainter
argument_list|(
operator|&
name|pixmap
argument_list|)
decl_stmt|;
name|pixmapPainter
operator|.
name|setRenderHints
argument_list|(
name|painter
operator|->
name|renderHints
argument_list|()
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_DestinationIn
argument_list|)
expr_stmt|;
if|if
condition|(
name|system
operator|==
name|Qt
operator|::
name|DeviceCoordinates
condition|)
block|{
name|QTransform
name|worldTransform
init|=
name|painter
operator|->
name|worldTransform
argument_list|()
decl_stmt|;
name|worldTransform
operator|*=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
operator|-
name|offset
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|offset
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|setWorldTransform
argument_list|(
name|worldTransform
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|fillRect
argument_list|(
name|sourceBoundingRect
argument_list|()
argument_list|,
name|d
operator|->
name|opacityMask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pixmapPainter
operator|.
name|translate
argument_list|(
operator|-
name|offset
argument_list|)
expr_stmt|;
name|pixmapPainter
operator|.
name|fillRect
argument_list|(
name|pixmap
operator|.
name|rect
argument_list|()
argument_list|,
name|d
operator|->
name|opacityMask
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|system
operator|==
name|Qt
operator|::
name|DeviceCoordinates
condition|)
name|painter
operator|->
name|setWorldTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPixmap
argument_list|(
name|offset
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_GRAPHICSEFFECT
end_comment
end_unit
