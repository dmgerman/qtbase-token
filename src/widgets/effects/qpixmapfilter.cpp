begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapfilter_p.h"
end_include
begin_include
include|#
directive|include
file|"qvarlengtharray.h"
end_include
begin_include
include|#
directive|include
file|"private/qguiapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpaintengineex_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpaintengine_raster_p.h"
end_include
begin_include
include|#
directive|include
file|"qmath.h"
end_include
begin_include
include|#
directive|include
file|"private/qmath_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qmemrotate_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qdrawhelper_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
end_ifndef
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QPixmapFilterPrivate
class|class
name|QPixmapFilterPrivate
super|:
specifier|public
name|QObjectPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QPixmapFilter
parameter_list|)
specifier|public
private|:
DECL|member|type
name|QPixmapFilter
operator|::
name|FilterType
name|type
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \class QPixmapFilter     \since 4.5     \ingroup painting      \brief The QPixmapFilter class provides the basic functionality for     pixmap filter classes. Pixmap filter can be for example colorize or blur.      QPixmapFilter is the base class for every pixmap filter. QPixmapFilter is     an abstract class and cannot itself be instantiated. It provides a standard     interface for filter processing.      \internal */
end_comment
begin_comment
comment|/*!     \enum QPixmapFilter::FilterType      \internal      This enum describes the types of filter that can be applied to pixmaps.      \value ConvolutionFilter  A filter that is used to calculate the convolution                               of the image with a kernel. See                               QPixmapConvolutionFilter for more information.     \value ColorizeFilter     A filter that is used to change the overall color                               of an image. See QPixmapColorizeFilter for more                               information.     \value DropShadowFilter   A filter that is used to add a drop shadow to an                               image. See QPixmapDropShadowFilter for more                               information.     \value BlurFilter         A filter that is used to blur an image using                               a simple blur radius. See QPixmapBlurFilter                               for more information.      \value UserFilter   The first filter type that can be used for                         application-specific purposes. */
end_comment
begin_comment
comment|/*!     Constructs a default QPixmapFilter with the given \a type.      This constructor should be used when subclassing QPixmapFilter to     create custom user filters.      \internal */
end_comment
begin_constructor
DECL|function|QPixmapFilter
name|QPixmapFilter
operator|::
name|QPixmapFilter
parameter_list|(
name|FilterType
name|type
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QPixmapFilterPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|type
operator|=
name|type
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!    \internal */
end_comment
begin_constructor
DECL|function|QPixmapFilter
name|QPixmapFilter
operator|::
name|QPixmapFilter
parameter_list|(
name|QPixmapFilterPrivate
modifier|&
name|d
parameter_list|,
name|QPixmapFilter
operator|::
name|FilterType
name|type
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|d
argument_list|,
name|parent
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|type
operator|=
name|type
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the pixmap filter.      \internal */
end_comment
begin_destructor
DECL|function|~QPixmapFilter
name|QPixmapFilter
operator|::
name|~
name|QPixmapFilter
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the type of the filter. All standard pixmap filter classes     are associated with a unique value.      \internal */
end_comment
begin_function
DECL|function|type
name|QPixmapFilter
operator|::
name|FilterType
name|QPixmapFilter
operator|::
name|type
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|type
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the bounding rectangle that is affected by the pixmap     filter if the filter is applied to the specified \a rect.      \internal */
end_comment
begin_function
DECL|function|boundingRectFor
name|QRectF
name|QPixmapFilter
operator|::
name|boundingRectFor
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
return|return
name|rect
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPixmapFilter::draw(QPainter *painter, const QPointF&p, const QPixmap&src, const QRectF& srcRect) const      Uses \a painter to draw filtered result of \a src at the point     specified by \a p. If \a srcRect is specified the it will     be used as a source rectangle to only draw a part of the source.      draw() will affect the area which boundingRectFor() returns.      \internal */
end_comment
begin_comment
comment|/*!     \class QPixmapConvolutionFilter     \since 4.5     \ingroup painting      \brief The QPixmapConvolutionFilter class provides convolution     filtering for pixmaps.      QPixmapConvolutionFilter implements a convolution pixmap filter,     which is applied when \l{QPixmapFilter::}{draw()} is called. A     convolution filter lets you distort an image by setting the values     of a matrix of qreal values called its     \l{setConvolutionKernel()}{kernel}. The matrix's values are     usually between -1.0 and 1.0.      \omit     In convolution filtering, the pixel value is calculated from the     neighboring pixels based on the weighting convolution kernel.     This needs explaining to be useful.     \endomit      Example:     \snippet code/src_gui_image_qpixmapfilter.cpp 1      \sa {Pixmap Filters Example}, QPixmapColorizeFilter, QPixmapDropShadowFilter       \internal */
end_comment
begin_class
DECL|class|QPixmapConvolutionFilterPrivate
class|class
name|QPixmapConvolutionFilterPrivate
super|:
specifier|public
name|QPixmapFilterPrivate
block|{
public|public:
DECL|function|QPixmapConvolutionFilterPrivate
name|QPixmapConvolutionFilterPrivate
parameter_list|()
member_init_list|:
name|convolutionKernel
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|kernelWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|kernelHeight
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|convoluteAlpha
argument_list|(
literal|false
argument_list|)
block|{}
DECL|function|~QPixmapConvolutionFilterPrivate
name|~
name|QPixmapConvolutionFilterPrivate
parameter_list|()
block|{
operator|delete
index|[]
name|convolutionKernel
expr_stmt|;
block|}
DECL|member|convolutionKernel
name|qreal
modifier|*
name|convolutionKernel
decl_stmt|;
DECL|member|kernelWidth
name|int
name|kernelWidth
decl_stmt|;
DECL|member|kernelHeight
name|int
name|kernelHeight
decl_stmt|;
DECL|member|convoluteAlpha
name|bool
name|convoluteAlpha
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     Constructs a pixmap convolution filter.      By default there is no convolution kernel.      \internal */
end_comment
begin_constructor
DECL|function|QPixmapConvolutionFilter
name|QPixmapConvolutionFilter
operator|::
name|QPixmapConvolutionFilter
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QPixmapFilter
argument_list|(
operator|*
operator|new
name|QPixmapConvolutionFilterPrivate
argument_list|,
name|ConvolutionFilter
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapConvolutionFilter
argument_list|)
expr_stmt|;
name|d
operator|->
name|convoluteAlpha
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destructor of pixmap convolution filter.      \internal */
end_comment
begin_destructor
DECL|function|~QPixmapConvolutionFilter
name|QPixmapConvolutionFilter
operator|::
name|~
name|QPixmapConvolutionFilter
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!      Sets convolution kernel with the given number of \a rows and \a columns.      Values from \a kernel are copied to internal data structure.       To preserve the intensity of the pixmap, the sum of all the      values in the convolution kernel should add up to 1.0. A sum      greater than 1.0 produces a lighter result and a sum less than 1.0      produces a darker and transparent result.      \internal */
end_comment
begin_function
DECL|function|setConvolutionKernel
name|void
name|QPixmapConvolutionFilter
operator|::
name|setConvolutionKernel
parameter_list|(
specifier|const
name|qreal
modifier|*
name|kernel
parameter_list|,
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapConvolutionFilter
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|d
operator|->
name|convolutionKernel
expr_stmt|;
name|d
operator|->
name|convolutionKernel
operator|=
operator|new
name|qreal
index|[
name|rows
operator|*
name|columns
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|d
operator|->
name|convolutionKernel
argument_list|,
name|kernel
argument_list|,
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|*
name|rows
operator|*
name|columns
argument_list|)
expr_stmt|;
name|d
operator|->
name|kernelWidth
operator|=
name|columns
expr_stmt|;
name|d
operator|->
name|kernelHeight
operator|=
name|rows
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Gets the convolution kernel data.      \internal */
end_comment
begin_function
DECL|function|convolutionKernel
specifier|const
name|qreal
modifier|*
name|QPixmapConvolutionFilter
operator|::
name|convolutionKernel
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapConvolutionFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|convolutionKernel
return|;
block|}
end_function
begin_comment
comment|/*!     Gets the number of rows in the convolution kernel.      \internal */
end_comment
begin_function
DECL|function|rows
name|int
name|QPixmapConvolutionFilter
operator|::
name|rows
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapConvolutionFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|kernelHeight
return|;
block|}
end_function
begin_comment
comment|/*!     Gets the number of columns in the convolution kernel.      \internal */
end_comment
begin_function
DECL|function|columns
name|int
name|QPixmapConvolutionFilter
operator|::
name|columns
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapConvolutionFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|kernelWidth
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|boundingRectFor
name|QRectF
name|QPixmapConvolutionFilter
operator|::
name|boundingRectFor
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapConvolutionFilter
argument_list|)
expr_stmt|;
return|return
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
name|d
operator|->
name|kernelWidth
operator|/
literal|2
argument_list|,
operator|-
name|d
operator|->
name|kernelHeight
operator|/
literal|2
argument_list|,
operator|(
name|d
operator|->
name|kernelWidth
operator|-
literal|1
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|d
operator|->
name|kernelHeight
operator|-
literal|1
operator|)
operator|/
literal|2
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Convolutes the image
end_comment
begin_function
DECL|function|convolute
specifier|static
name|void
name|convolute
parameter_list|(
name|QImage
modifier|*
name|destImage
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QImage
modifier|&
name|srcImage
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|,
name|QPainter
operator|::
name|CompositionMode
name|mode
parameter_list|,
name|qreal
modifier|*
name|kernel
parameter_list|,
name|int
name|kernelWidth
parameter_list|,
name|int
name|kernelHeight
parameter_list|)
block|{
specifier|const
name|QImage
name|processImage
init|=
operator|(
name|srcImage
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|)
condition|?
name|srcImage
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
else|:
name|srcImage
decl_stmt|;
comment|// TODO: support also other formats directly without copying
name|int
modifier|*
name|fixedKernel
init|=
operator|new
name|int
index|[
name|kernelWidth
operator|*
name|kernelHeight
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kernelWidth
operator|*
name|kernelHeight
condition|;
name|i
operator|++
control|)
block|{
name|fixedKernel
index|[
name|i
index|]
operator|=
call|(
name|int
call|)
argument_list|(
literal|65536
operator|*
name|kernel
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QRectF
name|trect
init|=
name|srcRect
operator|.
name|isNull
argument_list|()
condition|?
name|processImage
operator|.
name|rect
argument_list|()
else|:
name|srcRect
decl_stmt|;
name|trect
operator|.
name|moveTo
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|QRectF
name|bounded
init|=
name|trect
operator|.
name|adjusted
argument_list|(
operator|-
name|kernelWidth
operator|/
literal|2
argument_list|,
operator|-
name|kernelHeight
operator|/
literal|2
argument_list|,
operator|(
name|kernelWidth
operator|-
literal|1
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|kernelHeight
operator|-
literal|1
operator|)
operator|/
literal|2
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|bounded
operator|.
name|toAlignedRect
argument_list|()
decl_stmt|;
name|QRect
name|targetRect
init|=
name|rect
operator|.
name|intersected
argument_list|(
name|destImage
operator|->
name|rect
argument_list|()
argument_list|)
decl_stmt|;
name|QRectF
name|srect
init|=
name|srcRect
operator|.
name|isNull
argument_list|()
condition|?
name|processImage
operator|.
name|rect
argument_list|()
else|:
name|srcRect
decl_stmt|;
name|QRectF
name|sbounded
init|=
name|srect
operator|.
name|adjusted
argument_list|(
operator|-
name|kernelWidth
operator|/
literal|2
argument_list|,
operator|-
name|kernelHeight
operator|/
literal|2
argument_list|,
operator|(
name|kernelWidth
operator|-
literal|1
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|kernelHeight
operator|-
literal|1
operator|)
operator|/
literal|2
argument_list|)
decl_stmt|;
name|QPoint
name|srcStartPoint
init|=
name|sbounded
operator|.
name|toAlignedRect
argument_list|()
operator|.
name|topLeft
argument_list|()
operator|+
operator|(
name|targetRect
operator|.
name|topLeft
argument_list|()
operator|-
name|rect
operator|.
name|topLeft
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|sourceStart
init|=
operator|(
name|uint
operator|*
operator|)
name|processImage
operator|.
name|scanLine
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|uint
modifier|*
name|outputStart
init|=
operator|(
name|uint
operator|*
operator|)
name|destImage
operator|->
name|scanLine
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|yk
init|=
name|srcStartPoint
operator|.
name|y
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|targetRect
operator|.
name|top
argument_list|()
init|;
name|y
operator|<=
name|targetRect
operator|.
name|bottom
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
name|uint
modifier|*
name|output
init|=
name|outputStart
operator|+
operator|(
name|destImage
operator|->
name|bytesPerLine
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
operator|)
operator|*
name|y
operator|+
name|targetRect
operator|.
name|left
argument_list|()
decl_stmt|;
name|int
name|xk
init|=
name|srcStartPoint
operator|.
name|x
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|targetRect
operator|.
name|left
argument_list|()
init|;
name|x
operator|<=
name|targetRect
operator|.
name|right
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|int
name|r
init|=
literal|0
decl_stmt|;
name|int
name|g
init|=
literal|0
decl_stmt|;
name|int
name|b
init|=
literal|0
decl_stmt|;
name|int
name|a
init|=
literal|0
decl_stmt|;
comment|// some out of bounds pre-checking to avoid inner-loop ifs
name|int
name|kernely
init|=
operator|-
name|kernelHeight
operator|/
literal|2
decl_stmt|;
name|int
name|starty
init|=
literal|0
decl_stmt|;
name|int
name|endy
init|=
name|kernelHeight
decl_stmt|;
if|if
condition|(
name|yk
operator|+
name|kernely
operator|+
name|endy
operator|>=
name|srcImage
operator|.
name|height
argument_list|()
condition|)
name|endy
operator|=
name|kernelHeight
operator|-
operator|(
operator|(
name|yk
operator|+
name|kernely
operator|+
name|endy
operator|)
operator|-
name|srcImage
operator|.
name|height
argument_list|()
operator|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|yk
operator|+
name|kernely
operator|<
literal|0
condition|)
name|starty
operator|=
operator|-
operator|(
name|yk
operator|+
name|kernely
operator|)
expr_stmt|;
name|int
name|kernelx
init|=
operator|-
name|kernelWidth
operator|/
literal|2
decl_stmt|;
name|int
name|startx
init|=
literal|0
decl_stmt|;
name|int
name|endx
init|=
name|kernelWidth
decl_stmt|;
if|if
condition|(
name|xk
operator|+
name|kernelx
operator|+
name|endx
operator|>=
name|srcImage
operator|.
name|width
argument_list|()
condition|)
name|endx
operator|=
name|kernelWidth
operator|-
operator|(
operator|(
name|xk
operator|+
name|kernelx
operator|+
name|endx
operator|)
operator|-
name|srcImage
operator|.
name|width
argument_list|()
operator|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|xk
operator|+
name|kernelx
operator|<
literal|0
condition|)
name|startx
operator|=
operator|-
operator|(
name|xk
operator|+
name|kernelx
operator|)
expr_stmt|;
for|for
control|(
name|int
name|ys
init|=
name|starty
init|;
name|ys
operator|<
name|endy
condition|;
name|ys
operator|++
control|)
block|{
specifier|const
name|uint
modifier|*
name|pix
init|=
name|sourceStart
operator|+
operator|(
name|processImage
operator|.
name|bytesPerLine
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|uint
argument_list|)
operator|)
operator|*
operator|(
name|yk
operator|+
name|kernely
operator|+
name|ys
operator|)
operator|+
operator|(
operator|(
name|xk
operator|+
name|kernelx
operator|+
name|startx
operator|)
operator|)
decl_stmt|;
specifier|const
name|uint
modifier|*
name|endPix
init|=
name|pix
operator|+
name|endx
operator|-
name|startx
decl_stmt|;
name|int
name|kernelPos
init|=
name|ys
operator|*
name|kernelWidth
operator|+
name|startx
decl_stmt|;
while|while
condition|(
name|pix
operator|<
name|endPix
condition|)
block|{
name|int
name|factor
init|=
name|fixedKernel
index|[
name|kernelPos
operator|++
index|]
decl_stmt|;
name|a
operator|+=
operator|(
operator|(
operator|(
operator|*
name|pix
operator|)
operator|&
literal|0xff000000
operator|)
operator|>>
literal|24
operator|)
operator|*
name|factor
expr_stmt|;
name|r
operator|+=
operator|(
operator|(
operator|(
operator|*
name|pix
operator|)
operator|&
literal|0x00ff0000
operator|)
operator|>>
literal|16
operator|)
operator|*
name|factor
expr_stmt|;
name|g
operator|+=
operator|(
operator|(
operator|(
operator|*
name|pix
operator|)
operator|&
literal|0x0000ff00
operator|)
operator|>>
literal|8
operator|)
operator|*
name|factor
expr_stmt|;
name|b
operator|+=
operator|(
operator|(
operator|(
operator|*
name|pix
operator|)
operator|&
literal|0x000000ff
operator|)
operator|)
operator|*
name|factor
expr_stmt|;
name|pix
operator|++
expr_stmt|;
block|}
block|}
name|r
operator|=
name|qBound
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|,
name|r
operator|>>
literal|16
argument_list|,
operator|(
name|int
operator|)
literal|255
argument_list|)
expr_stmt|;
name|g
operator|=
name|qBound
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|,
name|g
operator|>>
literal|16
argument_list|,
operator|(
name|int
operator|)
literal|255
argument_list|)
expr_stmt|;
name|b
operator|=
name|qBound
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|,
name|b
operator|>>
literal|16
argument_list|,
operator|(
name|int
operator|)
literal|255
argument_list|)
expr_stmt|;
name|a
operator|=
name|qBound
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|,
name|a
operator|>>
literal|16
argument_list|,
operator|(
name|int
operator|)
literal|255
argument_list|)
expr_stmt|;
comment|// composition mode checking could be moved outside of loop
if|if
condition|(
name|mode
operator|==
name|QPainter
operator|::
name|CompositionMode_Source
condition|)
block|{
name|uint
name|color
init|=
operator|(
name|a
operator|<<
literal|24
operator|)
operator|+
operator|(
name|r
operator|<<
literal|16
operator|)
operator|+
operator|(
name|g
operator|<<
literal|8
operator|)
operator|+
name|b
decl_stmt|;
operator|*
name|output
operator|++
operator|=
name|color
expr_stmt|;
block|}
else|else
block|{
name|uint
name|current
init|=
operator|*
name|output
decl_stmt|;
name|uchar
name|ca
init|=
operator|(
name|current
operator|&
literal|0xff000000
operator|)
operator|>>
literal|24
decl_stmt|;
name|uchar
name|cr
init|=
operator|(
name|current
operator|&
literal|0x00ff0000
operator|)
operator|>>
literal|16
decl_stmt|;
name|uchar
name|cg
init|=
operator|(
name|current
operator|&
literal|0x0000ff00
operator|)
operator|>>
literal|8
decl_stmt|;
name|uchar
name|cb
init|=
operator|(
name|current
operator|&
literal|0x000000ff
operator|)
decl_stmt|;
name|uint
name|color
init|=
operator|(
operator|(
operator|(
name|ca
operator|*
operator|(
literal|255
operator|-
name|a
operator|)
operator|>>
literal|8
operator|)
operator|+
name|a
operator|)
operator|<<
literal|24
operator|)
operator|+
operator|(
operator|(
operator|(
name|cr
operator|*
operator|(
literal|255
operator|-
name|a
operator|)
operator|>>
literal|8
operator|)
operator|+
name|r
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
operator|(
name|cg
operator|*
operator|(
literal|255
operator|-
name|a
operator|)
operator|>>
literal|8
operator|)
operator|+
name|g
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
operator|(
name|cb
operator|*
operator|(
literal|255
operator|-
name|a
operator|)
operator|>>
literal|8
operator|)
operator|+
name|b
operator|)
operator|)
decl_stmt|;
operator|*
name|output
operator|++
operator|=
name|color
expr_stmt|;
empty_stmt|;
block|}
name|xk
operator|++
expr_stmt|;
block|}
name|yk
operator|++
expr_stmt|;
block|}
operator|delete
index|[]
name|fixedKernel
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|draw
name|void
name|QPixmapConvolutionFilter
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapConvolutionFilter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|painter
operator|->
name|isActive
argument_list|()
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|kernelWidth
operator|<=
literal|0
operator|||
name|d
operator|->
name|kernelHeight
operator|<=
literal|0
condition|)
return|return;
if|if
condition|(
name|src
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QPixmapFilter
modifier|*
name|filter
init|=
name|painter
operator|->
name|paintEngine
argument_list|()
operator|&&
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|isExtended
argument_list|()
condition|?
cast|static_cast
argument_list|<
name|QPaintEngineEx
operator|*
argument_list|>
argument_list|(
name|painter
operator|->
name|paintEngine
argument_list|()
argument_list|)
operator|->
name|pixmapFilter
argument_list|(
name|type
argument_list|()
argument_list|,
name|this
argument_list|)
else|:
literal|0
decl_stmt|;
name|QPixmapConvolutionFilter
modifier|*
name|convolutionFilter
init|=
cast|static_cast
argument_list|<
name|QPixmapConvolutionFilter
operator|*
argument_list|>
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|convolutionFilter
condition|)
block|{
name|convolutionFilter
operator|->
name|setConvolutionKernel
argument_list|(
name|d
operator|->
name|convolutionKernel
argument_list|,
name|d
operator|->
name|kernelWidth
argument_list|,
name|d
operator|->
name|kernelHeight
argument_list|)
expr_stmt|;
name|convolutionFilter
operator|->
name|d_func
argument_list|()
operator|->
name|convoluteAlpha
operator|=
name|d
operator|->
name|convoluteAlpha
expr_stmt|;
name|convolutionFilter
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
name|p
argument_list|,
name|src
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// falling back to raster implementation
name|QImage
modifier|*
name|target
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|paintDevice
argument_list|()
operator|->
name|devType
argument_list|()
operator|==
name|QInternal
operator|::
name|Image
condition|)
block|{
name|target
operator|=
cast|static_cast
argument_list|<
name|QImage
operator|*
argument_list|>
argument_list|(
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|paintDevice
argument_list|()
argument_list|)
expr_stmt|;
name|QTransform
name|mat
init|=
name|painter
operator|->
name|combinedTransform
argument_list|()
decl_stmt|;
if|if
condition|(
name|mat
operator|.
name|type
argument_list|()
operator|>
name|QTransform
operator|::
name|TxTranslate
condition|)
block|{
comment|// Disabled because of transformation...
name|target
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|QRasterPaintEngine
modifier|*
name|pe
init|=
cast|static_cast
argument_list|<
name|QRasterPaintEngine
operator|*
argument_list|>
argument_list|(
name|painter
operator|->
name|paintEngine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pe
operator|->
name|clipType
argument_list|()
operator|==
name|QRasterPaintEngine
operator|::
name|ComplexClip
condition|)
comment|// disabled because of complex clipping...
name|target
operator|=
literal|0
expr_stmt|;
else|else
block|{
name|QRectF
name|clip
init|=
name|pe
operator|->
name|clipBoundingRect
argument_list|()
decl_stmt|;
name|QRectF
name|rect
init|=
name|boundingRectFor
argument_list|(
name|srcRect
operator|.
name|isEmpty
argument_list|()
condition|?
name|src
operator|.
name|rect
argument_list|()
else|:
name|srcRect
argument_list|)
decl_stmt|;
name|QTransform
name|x
init|=
name|painter
operator|->
name|deviceTransform
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clip
operator|.
name|contains
argument_list|(
name|rect
operator|.
name|translated
argument_list|(
name|x
operator|.
name|dx
argument_list|()
operator|+
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|x
operator|.
name|dy
argument_list|()
operator|+
name|p
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|target
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|target
condition|)
block|{
name|QTransform
name|x
init|=
name|painter
operator|->
name|deviceTransform
argument_list|()
decl_stmt|;
name|QPointF
name|offset
argument_list|(
name|x
operator|.
name|dx
argument_list|()
argument_list|,
name|x
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
name|convolute
argument_list|(
name|target
argument_list|,
name|p
operator|+
name|offset
argument_list|,
name|src
operator|.
name|toImage
argument_list|()
argument_list|,
name|srcRect
argument_list|,
name|QPainter
operator|::
name|CompositionMode_SourceOver
argument_list|,
name|d
operator|->
name|convolutionKernel
argument_list|,
name|d
operator|->
name|kernelWidth
argument_list|,
name|d
operator|->
name|kernelHeight
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|srect
init|=
name|srcRect
operator|.
name|isNull
argument_list|()
condition|?
name|src
operator|.
name|rect
argument_list|()
else|:
name|srcRect
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|QRect
name|rect
init|=
name|boundingRectFor
argument_list|(
name|srect
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|QImage
name|result
init|=
name|QImage
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QPoint
name|offset
init|=
name|srect
operator|.
name|topLeft
argument_list|()
operator|-
name|rect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|convolute
argument_list|(
operator|&
name|result
argument_list|,
name|offset
argument_list|,
name|src
operator|.
name|toImage
argument_list|()
argument_list|,
name|srect
argument_list|,
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|,
name|d
operator|->
name|convolutionKernel
argument_list|,
name|d
operator|->
name|kernelWidth
argument_list|,
name|d
operator|->
name|kernelHeight
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawImage
argument_list|(
name|p
operator|-
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \class QPixmapBlurFilter     \since 4.6     \ingroup multimedia      \brief The QPixmapBlurFilter class provides blur filtering     for pixmaps.      QPixmapBlurFilter implements a blur pixmap filter,     which is applied when \l{QPixmapFilter::}{draw()} is called.      The filter lets you specialize the radius of the blur as well     as hints as to whether to prefer performance or quality.      By default, the blur effect is produced by applying an exponential     filter generated from the specified blurRadius().  Paint engines     may override this with a custom blur that is faster on the     underlying hardware.      \sa {Pixmap Filters Example}, QPixmapConvolutionFilter, QPixmapDropShadowFilter      \internal */
end_comment
begin_class
DECL|class|QPixmapBlurFilterPrivate
class|class
name|QPixmapBlurFilterPrivate
super|:
specifier|public
name|QPixmapFilterPrivate
block|{
public|public:
DECL|function|QPixmapBlurFilterPrivate
name|QPixmapBlurFilterPrivate
parameter_list|()
member_init_list|:
name|radius
argument_list|(
literal|5
argument_list|)
member_init_list|,
name|hints
argument_list|(
name|QGraphicsBlurEffect
operator|::
name|PerformanceHint
argument_list|)
block|{}
DECL|member|radius
name|qreal
name|radius
decl_stmt|;
DECL|member|hints
name|QGraphicsBlurEffect
operator|::
name|BlurHints
name|hints
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     Constructs a pixmap blur filter.      \internal */
end_comment
begin_constructor
DECL|function|QPixmapBlurFilter
name|QPixmapBlurFilter
operator|::
name|QPixmapBlurFilter
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QPixmapFilter
argument_list|(
operator|*
operator|new
name|QPixmapBlurFilterPrivate
argument_list|,
name|BlurFilter
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destructor of pixmap blur filter.      \internal */
end_comment
begin_destructor
DECL|function|~QPixmapBlurFilter
name|QPixmapBlurFilter
operator|::
name|~
name|QPixmapBlurFilter
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Sets the radius of the blur filter. Higher radius produces increased blurriness.      \internal */
end_comment
begin_function
DECL|function|setRadius
name|void
name|QPixmapBlurFilter
operator|::
name|setRadius
parameter_list|(
name|qreal
name|radius
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapBlurFilter
argument_list|)
expr_stmt|;
name|d
operator|->
name|radius
operator|=
name|radius
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Gets the radius of the blur filter.      \internal */
end_comment
begin_function
DECL|function|radius
name|qreal
name|QPixmapBlurFilter
operator|::
name|radius
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapBlurFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|radius
return|;
block|}
end_function
begin_comment
comment|/*!     Setting the blur hints to PerformanceHint causes the implementation     to trade off visual quality to blur the image faster.  Setting the     blur hints to QualityHint causes the implementation to improve     visual quality at the expense of speed.      AnimationHint causes the implementation to optimize for animating     the blur radius, possibly by caching blurred versions of the source     pixmap.      The implementation is free to ignore this value if it only has a single     blur algorithm.      \internal */
end_comment
begin_function
DECL|function|setBlurHints
name|void
name|QPixmapBlurFilter
operator|::
name|setBlurHints
parameter_list|(
name|QGraphicsBlurEffect
operator|::
name|BlurHints
name|hints
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapBlurFilter
argument_list|)
expr_stmt|;
name|d
operator|->
name|hints
operator|=
name|hints
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Gets the blur hints of the blur filter.      \internal */
end_comment
begin_function
DECL|function|blurHints
name|QGraphicsBlurEffect
operator|::
name|BlurHints
name|QPixmapBlurFilter
operator|::
name|blurHints
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapBlurFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|hints
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|radiusScale
specifier|const
name|qreal
name|radiusScale
init|=
name|qreal
argument_list|(
literal|2.5
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|boundingRectFor
name|QRectF
name|QPixmapBlurFilter
operator|::
name|boundingRectFor
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapBlurFilter
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|delta
init|=
name|radiusScale
operator|*
name|d
operator|->
name|radius
operator|+
literal|1
decl_stmt|;
return|return
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
name|delta
argument_list|,
operator|-
name|delta
argument_list|,
name|delta
argument_list|,
name|delta
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|int
name|shift
parameter_list|>
DECL|function|qt_static_shift
specifier|inline
name|int
name|qt_static_shift
parameter_list|(
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|shift
operator|==
literal|0
condition|)
return|return
name|value
return|;
elseif|else
if|if
condition|(
name|shift
operator|>
literal|0
condition|)
return|return
name|value
operator|<<
operator|(
name|uint
argument_list|(
name|shift
argument_list|)
operator|&
literal|0x1f
operator|)
return|;
else|else
return|return
name|value
operator|>>
operator|(
name|uint
argument_list|(
operator|-
name|shift
argument_list|)
operator|&
literal|0x1f
operator|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|int
name|aprec
parameter_list|,
name|int
name|zprec
parameter_list|>
DECL|function|qt_blurinner
specifier|inline
name|void
name|qt_blurinner
parameter_list|(
name|uchar
modifier|*
name|bptr
parameter_list|,
name|int
modifier|&
name|zR
parameter_list|,
name|int
modifier|&
name|zG
parameter_list|,
name|int
modifier|&
name|zB
parameter_list|,
name|int
modifier|&
name|zA
parameter_list|,
name|int
name|alpha
parameter_list|)
block|{
name|QRgb
modifier|*
name|pixel
init|=
operator|(
name|QRgb
operator|*
operator|)
name|bptr
decl_stmt|;
DECL|macro|Z_MASK
define|#
directive|define
name|Z_MASK
value|(0xff<< zprec)
specifier|const
name|int
name|A_zprec
init|=
name|qt_static_shift
argument_list|<
name|zprec
operator|-
literal|24
argument_list|>
argument_list|(
operator|*
name|pixel
argument_list|)
operator|&
name|Z_MASK
decl_stmt|;
specifier|const
name|int
name|R_zprec
init|=
name|qt_static_shift
argument_list|<
name|zprec
operator|-
literal|16
argument_list|>
argument_list|(
operator|*
name|pixel
argument_list|)
operator|&
name|Z_MASK
decl_stmt|;
specifier|const
name|int
name|G_zprec
init|=
name|qt_static_shift
argument_list|<
name|zprec
operator|-
literal|8
argument_list|>
argument_list|(
operator|*
name|pixel
argument_list|)
operator|&
name|Z_MASK
decl_stmt|;
specifier|const
name|int
name|B_zprec
init|=
name|qt_static_shift
argument_list|<
name|zprec
argument_list|>
argument_list|(
operator|*
name|pixel
argument_list|)
operator|&
name|Z_MASK
decl_stmt|;
DECL|macro|Z_MASK
undef|#
directive|undef
name|Z_MASK
specifier|const
name|int
name|zR_zprec
init|=
name|zR
operator|>>
name|aprec
decl_stmt|;
specifier|const
name|int
name|zG_zprec
init|=
name|zG
operator|>>
name|aprec
decl_stmt|;
specifier|const
name|int
name|zB_zprec
init|=
name|zB
operator|>>
name|aprec
decl_stmt|;
specifier|const
name|int
name|zA_zprec
init|=
name|zA
operator|>>
name|aprec
decl_stmt|;
name|zR
operator|+=
name|alpha
operator|*
operator|(
name|R_zprec
operator|-
name|zR_zprec
operator|)
expr_stmt|;
name|zG
operator|+=
name|alpha
operator|*
operator|(
name|G_zprec
operator|-
name|zG_zprec
operator|)
expr_stmt|;
name|zB
operator|+=
name|alpha
operator|*
operator|(
name|B_zprec
operator|-
name|zB_zprec
operator|)
expr_stmt|;
name|zA
operator|+=
name|alpha
operator|*
operator|(
name|A_zprec
operator|-
name|zA_zprec
operator|)
expr_stmt|;
DECL|macro|ZA_MASK
define|#
directive|define
name|ZA_MASK
value|(0xff<< (zprec + aprec))
operator|*
name|pixel
operator|=
name|qt_static_shift
argument_list|<
literal|24
operator|-
name|zprec
operator|-
name|aprec
argument_list|>
argument_list|(
name|zA
operator|&
name|ZA_MASK
argument_list|)
operator||
name|qt_static_shift
argument_list|<
literal|16
operator|-
name|zprec
operator|-
name|aprec
argument_list|>
argument_list|(
name|zR
operator|&
name|ZA_MASK
argument_list|)
operator||
name|qt_static_shift
argument_list|<
literal|8
operator|-
name|zprec
operator|-
name|aprec
argument_list|>
argument_list|(
name|zG
operator|&
name|ZA_MASK
argument_list|)
operator||
name|qt_static_shift
argument_list|<
operator|-
name|zprec
operator|-
name|aprec
argument_list|>
argument_list|(
name|zB
operator|&
name|ZA_MASK
argument_list|)
expr_stmt|;
DECL|macro|ZA_MASK
undef|#
directive|undef
name|ZA_MASK
block|}
end_function
begin_decl_stmt
DECL|variable|alphaIndex
specifier|const
name|int
name|alphaIndex
init|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
literal|0
else|:
literal|3
operator|)
decl_stmt|;
end_decl_stmt
begin_function
template|template
parameter_list|<
name|int
name|aprec
parameter_list|,
name|int
name|zprec
parameter_list|>
DECL|function|qt_blurinner_alphaOnly
specifier|inline
name|void
name|qt_blurinner_alphaOnly
parameter_list|(
name|uchar
modifier|*
name|bptr
parameter_list|,
name|int
modifier|&
name|z
parameter_list|,
name|int
name|alpha
parameter_list|)
block|{
specifier|const
name|int
name|A_zprec
init|=
name|int
argument_list|(
operator|*
operator|(
name|bptr
operator|)
argument_list|)
operator|<<
name|zprec
decl_stmt|;
specifier|const
name|int
name|z_zprec
init|=
name|z
operator|>>
name|aprec
decl_stmt|;
name|z
operator|+=
name|alpha
operator|*
operator|(
name|A_zprec
operator|-
name|z_zprec
operator|)
expr_stmt|;
operator|*
operator|(
name|bptr
operator|)
operator|=
name|z
operator|>>
operator|(
name|zprec
operator|+
name|aprec
operator|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|int
name|aprec
parameter_list|,
name|int
name|zprec
parameter_list|,
name|bool
name|alphaOnly
parameter_list|>
DECL|function|qt_blurrow
specifier|inline
name|void
name|qt_blurrow
parameter_list|(
name|QImage
modifier|&
name|im
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|alpha
parameter_list|)
block|{
name|uchar
modifier|*
name|bptr
init|=
name|im
operator|.
name|scanLine
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|int
name|zR
init|=
literal|0
decl_stmt|,
name|zG
init|=
literal|0
decl_stmt|,
name|zB
init|=
literal|0
decl_stmt|,
name|zA
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|alphaOnly
operator|&&
name|im
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_Indexed8
condition|)
name|bptr
operator|+=
name|alphaIndex
expr_stmt|;
specifier|const
name|int
name|stride
init|=
name|im
operator|.
name|depth
argument_list|()
operator|>>
literal|3
decl_stmt|;
specifier|const
name|int
name|im_width
init|=
name|im
operator|.
name|width
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|im_width
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|alphaOnly
condition|)
name|qt_blurinner_alphaOnly
argument_list|<
name|aprec
argument_list|,
name|zprec
argument_list|>
argument_list|(
name|bptr
argument_list|,
name|zA
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
else|else
name|qt_blurinner
argument_list|<
name|aprec
argument_list|,
name|zprec
argument_list|>
argument_list|(
name|bptr
argument_list|,
name|zR
argument_list|,
name|zG
argument_list|,
name|zB
argument_list|,
name|zA
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|bptr
operator|+=
name|stride
expr_stmt|;
block|}
name|bptr
operator|-=
name|stride
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
name|im_width
operator|-
literal|2
init|;
name|index
operator|>=
literal|0
condition|;
operator|--
name|index
control|)
block|{
name|bptr
operator|-=
name|stride
expr_stmt|;
if|if
condition|(
name|alphaOnly
condition|)
name|qt_blurinner_alphaOnly
argument_list|<
name|aprec
argument_list|,
name|zprec
argument_list|>
argument_list|(
name|bptr
argument_list|,
name|zA
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
else|else
name|qt_blurinner
argument_list|<
name|aprec
argument_list|,
name|zprec
argument_list|>
argument_list|(
name|bptr
argument_list|,
name|zR
argument_list|,
name|zG
argument_list|,
name|zB
argument_list|,
name|zA
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/* *  expblur(QImage&img, int radius) * *  Based on exponential blur algorithm by Jani Huhtanen * *  In-place blur of image 'img' with kernel *  of approximate radius 'radius'. * *  Blurs with two sided exponential impulse *  response. * *  aprec = precision of alpha parameter *  in fixed-point format 0.aprec * *  zprec = precision of state parameters *  zR,zG,zB and zA in fp format 8.zprec */
end_comment
begin_function
template|template
parameter_list|<
name|int
name|aprec
parameter_list|,
name|int
name|zprec
parameter_list|,
name|bool
name|alphaOnly
parameter_list|>
DECL|function|expblur
name|void
name|expblur
parameter_list|(
name|QImage
modifier|&
name|img
parameter_list|,
name|qreal
name|radius
parameter_list|,
name|bool
name|improvedQuality
init|=
literal|false
parameter_list|,
name|int
name|transposed
init|=
literal|0
parameter_list|)
block|{
comment|// halve the radius if we're using two passes
if|if
condition|(
name|improvedQuality
condition|)
name|radius
operator|*=
name|qreal
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|||
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_RGB32
operator|||
name|img
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
expr_stmt|;
comment|// choose the alpha such that pixels at radius distance from a fully
comment|// saturated pixel will have an alpha component of no greater than
comment|// the cutOffIntensity
specifier|const
name|qreal
name|cutOffIntensity
init|=
literal|2
decl_stmt|;
name|int
name|alpha
init|=
name|radius
operator|<=
name|qreal
argument_list|(
literal|1e-5
argument_list|)
condition|?
operator|(
operator|(
literal|1
operator|<<
name|aprec
operator|)
operator|-
literal|1
operator|)
else|:
name|qRound
argument_list|(
operator|(
literal|1
operator|<<
name|aprec
operator|)
operator|*
operator|(
literal|1
operator|-
name|qPow
argument_list|(
name|cutOffIntensity
operator|*
operator|(
literal|1
operator|/
name|qreal
argument_list|(
literal|255
argument_list|)
operator|)
argument_list|,
literal|1
operator|/
name|radius
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|int
name|img_height
init|=
name|img
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|img_height
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|int
argument_list|(
name|improvedQuality
argument_list|)
condition|;
operator|++
name|i
control|)
name|qt_blurrow
argument_list|<
name|aprec
argument_list|,
name|zprec
argument_list|,
name|alphaOnly
argument_list|>
argument_list|(
name|img
argument_list|,
name|row
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
name|QImage
name|temp
argument_list|(
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transposed
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|img
operator|.
name|depth
argument_list|()
operator|==
literal|8
condition|)
block|{
name|qt_memrotate270
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint8
operator|*
argument_list|>
argument_list|(
name|img
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|quint8
operator|*
argument_list|>
argument_list|(
name|temp
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|temp
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_memrotate270
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|img
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|temp
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|temp
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|img
operator|.
name|depth
argument_list|()
operator|==
literal|8
condition|)
block|{
name|qt_memrotate90
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint8
operator|*
argument_list|>
argument_list|(
name|img
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|quint8
operator|*
argument_list|>
argument_list|(
name|temp
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|temp
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_memrotate90
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|img
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|temp
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|temp
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|img_height
operator|=
name|temp
operator|.
name|height
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|img_height
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|int
argument_list|(
name|improvedQuality
argument_list|)
condition|;
operator|++
name|i
control|)
name|qt_blurrow
argument_list|<
name|aprec
argument_list|,
name|zprec
argument_list|,
name|alphaOnly
argument_list|>
argument_list|(
name|temp
argument_list|,
name|row
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transposed
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|img
operator|.
name|depth
argument_list|()
operator|==
literal|8
condition|)
block|{
name|qt_memrotate90
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint8
operator|*
argument_list|>
argument_list|(
name|temp
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|temp
operator|.
name|width
argument_list|()
argument_list|,
name|temp
operator|.
name|height
argument_list|()
argument_list|,
name|temp
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|quint8
operator|*
argument_list|>
argument_list|(
name|img
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_memrotate90
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|temp
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|temp
operator|.
name|width
argument_list|()
argument_list|,
name|temp
operator|.
name|height
argument_list|()
argument_list|,
name|temp
operator|.
name|bytesPerLine
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|img
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|,
name|img
operator|.
name|bytesPerLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|img
operator|=
name|temp
expr_stmt|;
block|}
block|}
end_function
begin_define
DECL|macro|AVG
define|#
directive|define
name|AVG
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|( ((((a)^(b))& 0xfefefefeUL)>> 1) + ((a)&(b)) )
end_define
begin_define
DECL|macro|AVG16
define|#
directive|define
name|AVG16
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|( ((((a)^(b))& 0xf7deUL)>> 1) + ((a)&(b)) )
end_define
begin_function
DECL|function|qt_halfScaled
name|Q_WIDGETS_EXPORT
name|QImage
name|qt_halfScaled
parameter_list|(
specifier|const
name|QImage
modifier|&
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|width
argument_list|()
operator|<
literal|2
operator|||
name|source
operator|.
name|height
argument_list|()
operator|<
literal|2
condition|)
return|return
name|QImage
argument_list|()
return|;
name|QImage
name|srcImage
init|=
name|source
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Indexed8
condition|)
block|{
comment|// assumes grayscale
name|QImage
name|dest
argument_list|(
name|source
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|source
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|srcImage
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|src
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
specifier|const
name|QImage
operator|&
argument_list|>
argument_list|(
name|srcImage
argument_list|)
operator|.
name|bits
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sx
init|=
name|srcImage
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
name|int
name|sx2
init|=
name|sx
operator|<<
literal|1
decl_stmt|;
name|uchar
modifier|*
name|dst
init|=
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|dest
operator|.
name|bits
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|dx
init|=
name|dest
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
name|int
name|ww
init|=
name|dest
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|hh
init|=
name|dest
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|hh
init|;
name|y
condition|;
operator|--
name|y
operator|,
name|dst
operator|+=
name|dx
operator|,
name|src
operator|+=
name|sx2
control|)
block|{
specifier|const
name|uchar
modifier|*
name|p1
init|=
name|src
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|p2
init|=
name|src
operator|+
name|sx
decl_stmt|;
name|uchar
modifier|*
name|q
init|=
name|dst
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|ww
init|;
name|x
condition|;
operator|--
name|x
operator|,
operator|++
name|q
operator|,
name|p1
operator|+=
literal|2
operator|,
name|p2
operator|+=
literal|2
control|)
operator|*
name|q
operator|=
operator|(
operator|(
name|int
argument_list|(
name|p1
index|[
literal|0
index|]
argument_list|)
operator|+
name|int
argument_list|(
name|p1
index|[
literal|1
index|]
argument_list|)
operator|+
name|int
argument_list|(
name|p2
index|[
literal|0
index|]
argument_list|)
operator|+
name|int
argument_list|(
name|p2
index|[
literal|1
index|]
argument_list|)
operator|)
operator|+
literal|2
operator|)
operator|>>
literal|2
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_ARGB8565_Premultiplied
condition|)
block|{
name|QImage
name|dest
argument_list|(
name|source
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|source
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|srcImage
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|src
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uchar
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
specifier|const
name|QImage
operator|&
argument_list|>
argument_list|(
name|srcImage
argument_list|)
operator|.
name|bits
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sx
init|=
name|srcImage
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
name|int
name|sx2
init|=
name|sx
operator|<<
literal|1
decl_stmt|;
name|uchar
modifier|*
name|dst
init|=
cast|reinterpret_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|dest
operator|.
name|bits
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|dx
init|=
name|dest
operator|.
name|bytesPerLine
argument_list|()
decl_stmt|;
name|int
name|ww
init|=
name|dest
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|hh
init|=
name|dest
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|hh
init|;
name|y
condition|;
operator|--
name|y
operator|,
name|dst
operator|+=
name|dx
operator|,
name|src
operator|+=
name|sx2
control|)
block|{
specifier|const
name|uchar
modifier|*
name|p1
init|=
name|src
decl_stmt|;
specifier|const
name|uchar
modifier|*
name|p2
init|=
name|src
operator|+
name|sx
decl_stmt|;
name|uchar
modifier|*
name|q
init|=
name|dst
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|ww
init|;
name|x
condition|;
operator|--
name|x
operator|,
name|q
operator|+=
literal|3
operator|,
name|p1
operator|+=
literal|6
operator|,
name|p2
operator|+=
literal|6
control|)
block|{
comment|// alpha
name|q
index|[
literal|0
index|]
operator|=
name|AVG
argument_list|(
name|AVG
argument_list|(
name|p1
index|[
literal|0
index|]
argument_list|,
name|p1
index|[
literal|3
index|]
argument_list|)
argument_list|,
name|AVG
argument_list|(
name|p2
index|[
literal|0
index|]
argument_list|,
name|p2
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// rgb
specifier|const
name|quint16
name|p16_1
init|=
operator|(
name|p1
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|p1
index|[
literal|1
index|]
decl_stmt|;
specifier|const
name|quint16
name|p16_2
init|=
operator|(
name|p1
index|[
literal|5
index|]
operator|<<
literal|8
operator|)
operator||
name|p1
index|[
literal|4
index|]
decl_stmt|;
specifier|const
name|quint16
name|p16_3
init|=
operator|(
name|p2
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|p2
index|[
literal|1
index|]
decl_stmt|;
specifier|const
name|quint16
name|p16_4
init|=
operator|(
name|p2
index|[
literal|5
index|]
operator|<<
literal|8
operator|)
operator||
name|p2
index|[
literal|4
index|]
decl_stmt|;
specifier|const
name|quint16
name|result
init|=
name|AVG16
argument_list|(
name|AVG16
argument_list|(
name|p16_1
argument_list|,
name|p16_2
argument_list|)
argument_list|,
name|AVG16
argument_list|(
name|p16_3
argument_list|,
name|p16_4
argument_list|)
argument_list|)
decl_stmt|;
name|q
index|[
literal|1
index|]
operator|=
name|result
operator|&
literal|0xff
expr_stmt|;
name|q
index|[
literal|2
index|]
operator|=
name|result
operator|>>
literal|8
expr_stmt|;
block|}
block|}
return|return
name|dest
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|&&
name|source
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
name|srcImage
operator|=
name|source
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
block|}
name|QImage
name|dest
argument_list|(
name|source
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|source
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|,
name|srcImage
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|src
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
specifier|const
name|QImage
operator|&
argument_list|>
argument_list|(
name|srcImage
argument_list|)
operator|.
name|bits
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sx
init|=
name|srcImage
operator|.
name|bytesPerLine
argument_list|()
operator|>>
literal|2
decl_stmt|;
name|int
name|sx2
init|=
name|sx
operator|<<
literal|1
decl_stmt|;
name|quint32
modifier|*
name|dst
init|=
cast|reinterpret_cast
argument_list|<
name|quint32
operator|*
argument_list|>
argument_list|(
name|dest
operator|.
name|bits
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|dx
init|=
name|dest
operator|.
name|bytesPerLine
argument_list|()
operator|>>
literal|2
decl_stmt|;
name|int
name|ww
init|=
name|dest
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|hh
init|=
name|dest
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|hh
init|;
name|y
condition|;
operator|--
name|y
operator|,
name|dst
operator|+=
name|dx
operator|,
name|src
operator|+=
name|sx2
control|)
block|{
specifier|const
name|quint32
modifier|*
name|p1
init|=
name|src
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|p2
init|=
name|src
operator|+
name|sx
decl_stmt|;
name|quint32
modifier|*
name|q
init|=
name|dst
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|ww
init|;
name|x
condition|;
operator|--
name|x
operator|,
name|q
operator|++
operator|,
name|p1
operator|+=
literal|2
operator|,
name|p2
operator|+=
literal|2
control|)
operator|*
name|q
operator|=
name|AVG
argument_list|(
name|AVG
argument_list|(
name|p1
index|[
literal|0
index|]
argument_list|,
name|p1
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|AVG
argument_list|(
name|p2
index|[
literal|0
index|]
argument_list|,
name|p2
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
end_function
begin_function
DECL|function|qt_blurImage
name|Q_WIDGETS_EXPORT
name|void
name|qt_blurImage
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|QImage
modifier|&
name|blurImage
parameter_list|,
name|qreal
name|radius
parameter_list|,
name|bool
name|quality
parameter_list|,
name|bool
name|alphaOnly
parameter_list|,
name|int
name|transposed
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
name|blurImage
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
operator|&&
name|blurImage
operator|.
name|format
argument_list|()
operator|!=
name|QImage
operator|::
name|Format_RGB32
condition|)
block|{
name|blurImage
operator|=
name|blurImage
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
block|}
name|qreal
name|scale
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|radius
operator|>=
literal|4
operator|&&
name|blurImage
operator|.
name|width
argument_list|()
operator|>=
literal|2
operator|&&
name|blurImage
operator|.
name|height
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|blurImage
operator|=
name|qt_halfScaled
argument_list|(
name|blurImage
argument_list|)
expr_stmt|;
name|scale
operator|=
literal|2
expr_stmt|;
name|radius
operator|*=
name|qreal
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|alphaOnly
condition|)
name|expblur
argument_list|<
literal|12
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|>
argument_list|(
name|blurImage
argument_list|,
name|radius
argument_list|,
name|quality
argument_list|,
name|transposed
argument_list|)
expr_stmt|;
else|else
name|expblur
argument_list|<
literal|12
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|>
argument_list|(
name|blurImage
argument_list|,
name|radius
argument_list|,
name|quality
argument_list|,
name|transposed
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
condition|)
block|{
name|p
operator|->
name|scale
argument_list|(
name|scale
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|p
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawImage
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|blurImage
operator|.
name|width
argument_list|()
argument_list|,
name|blurImage
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|blurImage
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_blurImage
name|Q_WIDGETS_EXPORT
name|void
name|qt_blurImage
parameter_list|(
name|QImage
modifier|&
name|blurImage
parameter_list|,
name|qreal
name|radius
parameter_list|,
name|bool
name|quality
parameter_list|,
name|int
name|transposed
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
name|blurImage
operator|.
name|format
argument_list|()
operator|==
name|QImage
operator|::
name|Format_Indexed8
condition|)
name|expblur
argument_list|<
literal|12
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|>
argument_list|(
name|blurImage
argument_list|,
name|radius
argument_list|,
name|quality
argument_list|,
name|transposed
argument_list|)
expr_stmt|;
else|else
name|expblur
argument_list|<
literal|12
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|>
argument_list|(
name|blurImage
argument_list|,
name|radius
argument_list|,
name|quality
argument_list|,
name|transposed
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|Q_GUI_EXPORT
specifier|extern
name|bool
name|qt_scaleForTransform
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|,
name|qreal
modifier|*
name|scale
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|draw
name|void
name|QPixmapBlurFilter
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapBlurFilter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|painter
operator|->
name|isActive
argument_list|()
condition|)
return|return;
if|if
condition|(
name|src
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QRectF
name|srcRect
init|=
name|rect
decl_stmt|;
if|if
condition|(
name|srcRect
operator|.
name|isNull
argument_list|()
condition|)
name|srcRect
operator|=
name|src
operator|.
name|rect
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|radius
operator|<=
literal|1
condition|)
block|{
name|painter
operator|->
name|drawPixmap
argument_list|(
name|srcRect
operator|.
name|translated
argument_list|(
name|p
argument_list|)
argument_list|,
name|src
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
return|return;
block|}
name|qreal
name|scaledRadius
init|=
name|radiusScale
operator|*
name|d
operator|->
name|radius
decl_stmt|;
name|qreal
name|scale
decl_stmt|;
if|if
condition|(
name|qt_scaleForTransform
argument_list|(
name|painter
operator|->
name|transform
argument_list|()
argument_list|,
operator|&
name|scale
argument_list|)
condition|)
name|scaledRadius
operator|/=
name|scale
expr_stmt|;
name|QPixmapFilter
modifier|*
name|filter
init|=
name|painter
operator|->
name|paintEngine
argument_list|()
operator|&&
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|isExtended
argument_list|()
condition|?
cast|static_cast
argument_list|<
name|QPaintEngineEx
operator|*
argument_list|>
argument_list|(
name|painter
operator|->
name|paintEngine
argument_list|()
argument_list|)
operator|->
name|pixmapFilter
argument_list|(
name|type
argument_list|()
argument_list|,
name|this
argument_list|)
else|:
literal|0
decl_stmt|;
name|QPixmapBlurFilter
modifier|*
name|blurFilter
init|=
cast|static_cast
argument_list|<
name|QPixmapBlurFilter
operator|*
argument_list|>
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|blurFilter
condition|)
block|{
name|blurFilter
operator|->
name|setRadius
argument_list|(
name|scaledRadius
argument_list|)
expr_stmt|;
name|blurFilter
operator|->
name|setBlurHints
argument_list|(
name|d
operator|->
name|hints
argument_list|)
expr_stmt|;
name|blurFilter
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
name|p
argument_list|,
name|src
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
return|return;
block|}
name|QImage
name|srcImage
decl_stmt|;
name|QImage
name|destImage
decl_stmt|;
if|if
condition|(
name|srcRect
operator|==
name|src
operator|.
name|rect
argument_list|()
condition|)
block|{
name|srcImage
operator|=
name|src
operator|.
name|toImage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|rect
init|=
name|srcRect
operator|.
name|toAlignedRect
argument_list|()
operator|.
name|intersected
argument_list|(
name|src
operator|.
name|rect
argument_list|()
argument_list|)
decl_stmt|;
name|srcImage
operator|=
name|src
operator|.
name|copy
argument_list|(
name|rect
argument_list|)
operator|.
name|toImage
argument_list|()
expr_stmt|;
block|}
name|QTransform
name|transform
init|=
name|painter
operator|->
name|worldTransform
argument_list|()
decl_stmt|;
name|painter
operator|->
name|translate
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|qt_blurImage
argument_list|(
name|painter
argument_list|,
name|srcImage
argument_list|,
name|scaledRadius
argument_list|,
operator|(
name|d
operator|->
name|hints
operator|&
name|QGraphicsBlurEffect
operator|::
name|QualityHint
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setWorldTransform
argument_list|(
name|transform
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// grayscales the image to dest (could be same). If rect isn't defined
end_comment
begin_comment
comment|// destination image size is used to determine the dimension of grayscaling
end_comment
begin_comment
comment|// process.
end_comment
begin_function
DECL|function|grayscale
specifier|static
name|void
name|grayscale
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
name|QImage
modifier|&
name|dest
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
init|=
name|QRect
argument_list|()
parameter_list|)
block|{
name|QRect
name|destRect
init|=
name|rect
decl_stmt|;
name|QRect
name|srcRect
init|=
name|rect
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|srcRect
operator|=
name|dest
operator|.
name|rect
argument_list|()
expr_stmt|;
name|destRect
operator|=
name|dest
operator|.
name|rect
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|&
name|image
operator|!=
operator|&
name|dest
condition|)
block|{
name|destRect
operator|.
name|moveTo
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unsigned
name|int
modifier|*
name|data
init|=
operator|(
name|unsigned
name|int
operator|*
operator|)
name|image
operator|.
name|bits
argument_list|()
decl_stmt|;
name|unsigned
name|int
modifier|*
name|outData
init|=
operator|(
name|unsigned
name|int
operator|*
operator|)
name|dest
operator|.
name|bits
argument_list|()
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|size
argument_list|()
operator|==
name|image
operator|.
name|size
argument_list|()
operator|&&
name|image
operator|.
name|rect
argument_list|()
operator|==
name|srcRect
condition|)
block|{
comment|// a bit faster loop for grayscaling everything
name|int
name|pixels
init|=
name|dest
operator|.
name|width
argument_list|()
operator|*
name|dest
operator|.
name|height
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pixels
condition|;
operator|++
name|i
control|)
block|{
name|int
name|val
init|=
name|qGray
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|outData
index|[
name|i
index|]
operator|=
name|qRgba
argument_list|(
name|val
argument_list|,
name|val
argument_list|,
name|val
argument_list|,
name|qAlpha
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|yd
init|=
name|destRect
operator|.
name|top
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|srcRect
operator|.
name|top
argument_list|()
init|;
name|y
operator|<=
name|srcRect
operator|.
name|bottom
argument_list|()
operator|&&
name|y
operator|<
name|image
operator|.
name|height
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
name|data
operator|=
operator|(
name|unsigned
name|int
operator|*
operator|)
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|outData
operator|=
operator|(
name|unsigned
name|int
operator|*
operator|)
name|dest
operator|.
name|scanLine
argument_list|(
name|yd
operator|++
argument_list|)
expr_stmt|;
name|int
name|xd
init|=
name|destRect
operator|.
name|left
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|srcRect
operator|.
name|left
argument_list|()
init|;
name|x
operator|<=
name|srcRect
operator|.
name|right
argument_list|()
operator|&&
name|x
operator|<
name|image
operator|.
name|width
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|int
name|val
init|=
name|qGray
argument_list|(
name|data
index|[
name|x
index|]
argument_list|)
decl_stmt|;
name|outData
index|[
name|xd
operator|++
index|]
operator|=
name|qRgba
argument_list|(
name|val
argument_list|,
name|val
argument_list|,
name|val
argument_list|,
name|qAlpha
argument_list|(
name|data
index|[
name|x
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \class QPixmapColorizeFilter     \since 4.5     \ingroup painting      \brief The QPixmapColorizeFilter class provides colorizing     filtering for pixmaps.      A colorize filter gives the pixmap a tint of its color(). The     filter first grayscales the pixmap and then converts those to     colorized values using QPainter::CompositionMode_Screen with the     chosen color. The alpha-channel is not changed.      Example:     \snippet code/src_gui_image_qpixmapfilter.cpp 0      \sa QPainter::CompositionMode      \internal */
end_comment
begin_class
DECL|class|QPixmapColorizeFilterPrivate
class|class
name|QPixmapColorizeFilterPrivate
super|:
specifier|public
name|QPixmapFilterPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QPixmapColorizeFilter
parameter_list|)
specifier|public
private|:
DECL|member|color
name|QColor
name|color
decl_stmt|;
DECL|member|strength
name|qreal
name|strength
decl_stmt|;
name|quint32
name|opaque
range|:
literal|1
decl_stmt|;
name|quint32
name|alphaBlend
range|:
literal|1
decl_stmt|;
name|quint32
name|padding
range|:
literal|30
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     Constructs an pixmap colorize filter.      Default color value for colorizing is QColor(0, 0, 192).      \internal */
end_comment
begin_constructor
DECL|function|QPixmapColorizeFilter
name|QPixmapColorizeFilter
operator|::
name|QPixmapColorizeFilter
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QPixmapFilter
argument_list|(
operator|*
operator|new
name|QPixmapColorizeFilterPrivate
argument_list|,
name|ColorizeFilter
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapColorizeFilter
argument_list|)
expr_stmt|;
name|d
operator|->
name|color
operator|=
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|192
argument_list|)
expr_stmt|;
name|d
operator|->
name|strength
operator|=
name|qreal
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|d
operator|->
name|opaque
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|alphaBlend
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Gets the color of the colorize filter.      \internal */
end_comment
begin_function
DECL|function|color
name|QColor
name|QPixmapColorizeFilter
operator|::
name|color
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapColorizeFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the color of the colorize filter to the \a color specified.      \internal */
end_comment
begin_function
DECL|function|setColor
name|void
name|QPixmapColorizeFilter
operator|::
name|setColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapColorizeFilter
argument_list|)
expr_stmt|;
name|d
operator|->
name|color
operator|=
name|color
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Gets the strength of the colorize filter, 1.0 means full colorized while     0.0 equals to no filtering at all.      \internal */
end_comment
begin_function
DECL|function|strength
name|qreal
name|QPixmapColorizeFilter
operator|::
name|strength
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapColorizeFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|strength
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the strength of the colorize filter to \a strength.      \internal */
end_comment
begin_function
DECL|function|setStrength
name|void
name|QPixmapColorizeFilter
operator|::
name|setStrength
parameter_list|(
name|qreal
name|strength
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapColorizeFilter
argument_list|)
expr_stmt|;
name|d
operator|->
name|strength
operator|=
name|qBound
argument_list|(
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|,
name|strength
argument_list|,
name|qreal
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|opaque
operator|=
operator|!
name|qFuzzyIsNull
argument_list|(
name|d
operator|->
name|strength
argument_list|)
expr_stmt|;
name|d
operator|->
name|alphaBlend
operator|=
operator|!
name|qFuzzyIsNull
argument_list|(
name|d
operator|->
name|strength
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|draw
name|void
name|QPixmapColorizeFilter
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|dest
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|src
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|srcRect
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapColorizeFilter
argument_list|)
expr_stmt|;
if|if
condition|(
name|src
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QPixmapFilter
modifier|*
name|filter
init|=
name|painter
operator|->
name|paintEngine
argument_list|()
operator|&&
name|painter
operator|->
name|paintEngine
argument_list|()
operator|->
name|isExtended
argument_list|()
condition|?
cast|static_cast
argument_list|<
name|QPaintEngineEx
operator|*
argument_list|>
argument_list|(
name|painter
operator|->
name|paintEngine
argument_list|()
argument_list|)
operator|->
name|pixmapFilter
argument_list|(
name|type
argument_list|()
argument_list|,
name|this
argument_list|)
else|:
literal|0
decl_stmt|;
name|QPixmapColorizeFilter
modifier|*
name|colorizeFilter
init|=
cast|static_cast
argument_list|<
name|QPixmapColorizeFilter
operator|*
argument_list|>
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorizeFilter
condition|)
block|{
name|colorizeFilter
operator|->
name|setColor
argument_list|(
name|d
operator|->
name|color
argument_list|)
expr_stmt|;
name|colorizeFilter
operator|->
name|setStrength
argument_list|(
name|d
operator|->
name|strength
argument_list|)
expr_stmt|;
name|colorizeFilter
operator|->
name|draw
argument_list|(
name|painter
argument_list|,
name|dest
argument_list|,
name|src
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// falling back to raster implementation
if|if
condition|(
operator|!
name|d
operator|->
name|opaque
condition|)
block|{
name|painter
operator|->
name|drawPixmap
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|srcRect
argument_list|)
expr_stmt|;
return|return;
block|}
name|QImage
name|srcImage
decl_stmt|;
name|QImage
name|destImage
decl_stmt|;
if|if
condition|(
name|srcRect
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|srcImage
operator|=
name|src
operator|.
name|toImage
argument_list|()
expr_stmt|;
name|srcImage
operator|=
name|srcImage
operator|.
name|convertToFormat
argument_list|(
name|srcImage
operator|.
name|hasAlphaChannel
argument_list|()
condition|?
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
else|:
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|destImage
operator|=
name|QImage
argument_list|(
name|srcImage
operator|.
name|size
argument_list|()
argument_list|,
name|srcImage
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|rect
init|=
name|srcRect
operator|.
name|toAlignedRect
argument_list|()
operator|.
name|intersected
argument_list|(
name|src
operator|.
name|rect
argument_list|()
argument_list|)
decl_stmt|;
name|srcImage
operator|=
name|src
operator|.
name|copy
argument_list|(
name|rect
argument_list|)
operator|.
name|toImage
argument_list|()
expr_stmt|;
name|srcImage
operator|=
name|srcImage
operator|.
name|convertToFormat
argument_list|(
name|srcImage
operator|.
name|hasAlphaChannel
argument_list|()
condition|?
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
else|:
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|destImage
operator|=
name|QImage
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|,
name|srcImage
operator|.
name|format
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// do colorizing
name|QPainter
name|destPainter
argument_list|(
operator|&
name|destImage
argument_list|)
decl_stmt|;
name|grayscale
argument_list|(
name|srcImage
argument_list|,
name|destImage
argument_list|,
name|srcImage
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|destPainter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Screen
argument_list|)
expr_stmt|;
name|destPainter
operator|.
name|fillRect
argument_list|(
name|srcImage
operator|.
name|rect
argument_list|()
argument_list|,
name|d
operator|->
name|color
argument_list|)
expr_stmt|;
name|destPainter
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|alphaBlend
condition|)
block|{
comment|// alpha blending srcImage and destImage
name|QImage
name|buffer
init|=
name|srcImage
decl_stmt|;
name|QPainter
name|bufPainter
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|bufPainter
operator|.
name|setOpacity
argument_list|(
name|d
operator|->
name|strength
argument_list|)
expr_stmt|;
name|bufPainter
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|destImage
argument_list|)
expr_stmt|;
name|bufPainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|destImage
operator|=
name|buffer
expr_stmt|;
block|}
if|if
condition|(
name|srcImage
operator|.
name|hasAlphaChannel
argument_list|()
condition|)
name|destImage
operator|.
name|setAlphaChannel
argument_list|(
name|srcImage
operator|.
name|alphaChannel
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawImage
argument_list|(
name|dest
argument_list|,
name|destImage
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QPixmapDropShadowFilterPrivate
class|class
name|QPixmapDropShadowFilterPrivate
super|:
specifier|public
name|QPixmapFilterPrivate
block|{
public|public:
DECL|function|QPixmapDropShadowFilterPrivate
name|QPixmapDropShadowFilterPrivate
parameter_list|()
member_init_list|:
name|offset
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
member_init_list|,
name|color
argument_list|(
literal|63
argument_list|,
literal|63
argument_list|,
literal|63
argument_list|,
literal|180
argument_list|)
member_init_list|,
name|radius
argument_list|(
literal|1
argument_list|)
block|{}
DECL|member|offset
name|QPointF
name|offset
decl_stmt|;
DECL|member|color
name|QColor
name|color
decl_stmt|;
DECL|member|radius
name|qreal
name|radius
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \class QPixmapDropShadowFilter     \since 4.5     \ingroup painting      \brief The QPixmapDropShadowFilter class is a convenience class     for drawing pixmaps with drop shadows.      The drop shadow is produced by taking a copy of the source pixmap     and applying a color to the copy using a     QPainter::CompositionMode_DestinationIn operation. This produces a     homogeneously-colored pixmap which is then drawn using a     QPixmapConvolutionFilter at an offset. The original pixmap is     drawn on top.      The QPixmapDropShadowFilter class provides some customization     options to specify how the drop shadow should appear. The color of     the drop shadow can be modified using the setColor() function, the     drop shadow offset can be modified using the setOffset() function,     and the blur radius of the drop shadow can be changed through the     setBlurRadius() function.      By default, the drop shadow is a dark gray shadow, blurred with a     radius of 1 at an offset of 8 pixels towards the lower right.      Example:     \snippet code/src_gui_image_qpixmapfilter.cpp 2      \sa QPixmapColorizeFilter, QPixmapConvolutionFilter      \internal  */
end_comment
begin_comment
comment|/*!     Constructs drop shadow filter.      \internal */
end_comment
begin_constructor
DECL|function|QPixmapDropShadowFilter
name|QPixmapDropShadowFilter
operator|::
name|QPixmapDropShadowFilter
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QPixmapFilter
argument_list|(
operator|*
operator|new
name|QPixmapDropShadowFilterPrivate
argument_list|,
name|DropShadowFilter
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys drop shadow filter.      \internal */
end_comment
begin_destructor
DECL|function|~QPixmapDropShadowFilter
name|QPixmapDropShadowFilter
operator|::
name|~
name|QPixmapDropShadowFilter
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the radius in pixels of the blur on the drop shadow.      A smaller radius results in a sharper shadow.      \sa color(), offset()      \internal */
end_comment
begin_function
DECL|function|blurRadius
name|qreal
name|QPixmapDropShadowFilter
operator|::
name|blurRadius
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapDropShadowFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|radius
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the radius in pixels of the blur on the drop shadow to the \a radius specified.      Using a smaller radius results in a sharper shadow.      \sa setColor(), setOffset()      \internal */
end_comment
begin_function
DECL|function|setBlurRadius
name|void
name|QPixmapDropShadowFilter
operator|::
name|setBlurRadius
parameter_list|(
name|qreal
name|radius
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapDropShadowFilter
argument_list|)
expr_stmt|;
name|d
operator|->
name|radius
operator|=
name|radius
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the color of the drop shadow.      \sa blurRadius(), offset()      \internal */
end_comment
begin_function
DECL|function|color
name|QColor
name|QPixmapDropShadowFilter
operator|::
name|color
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapDropShadowFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|color
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the color of the drop shadow to the \a color specified.      \sa setBlurRadius(), setOffset()      \internal */
end_comment
begin_function
DECL|function|setColor
name|void
name|QPixmapDropShadowFilter
operator|::
name|setColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapDropShadowFilter
argument_list|)
expr_stmt|;
name|d
operator|->
name|color
operator|=
name|color
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the shadow offset in pixels.      \sa blurRadius(), color()      \internal */
end_comment
begin_function
DECL|function|offset
name|QPointF
name|QPixmapDropShadowFilter
operator|::
name|offset
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapDropShadowFilter
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|offset
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the shadow offset in pixels to the \a offset specified.      \sa setBlurRadius(), setColor()      \internal */
end_comment
begin_function
DECL|function|setOffset
name|void
name|QPixmapDropShadowFilter
operator|::
name|setOffset
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPixmapDropShadowFilter
argument_list|)
expr_stmt|;
name|d
operator|->
name|offset
operator|=
name|offset
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPixmapDropShadowFilter::setOffset(qreal dx, qreal dy)     \overload      Sets the shadow offset in pixels to be the displacement specified by the     horizontal \a dx and vertical \a dy coordinates.      \sa setBlurRadius(), setColor()      \internal */
end_comment
begin_comment
comment|/*!     \internal  */
end_comment
begin_function
DECL|function|boundingRectFor
name|QRectF
name|QPixmapDropShadowFilter
operator|::
name|boundingRectFor
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapDropShadowFilter
argument_list|)
expr_stmt|;
return|return
name|rect
operator|.
name|united
argument_list|(
name|rect
operator|.
name|translated
argument_list|(
name|d
operator|->
name|offset
argument_list|)
operator|.
name|adjusted
argument_list|(
operator|-
name|d
operator|->
name|radius
argument_list|,
operator|-
name|d
operator|->
name|radius
argument_list|,
name|d
operator|->
name|radius
argument_list|,
name|d
operator|->
name|radius
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal  */
end_comment
begin_function
DECL|function|draw
name|void
name|QPixmapDropShadowFilter
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|px
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|src
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPixmapDropShadowFilter
argument_list|)
expr_stmt|;
if|if
condition|(
name|px
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QPixmapFilter
modifier|*
name|filter
init|=
name|p
operator|->
name|paintEngine
argument_list|()
operator|&&
name|p
operator|->
name|paintEngine
argument_list|()
operator|->
name|isExtended
argument_list|()
condition|?
cast|static_cast
argument_list|<
name|QPaintEngineEx
operator|*
argument_list|>
argument_list|(
name|p
operator|->
name|paintEngine
argument_list|()
argument_list|)
operator|->
name|pixmapFilter
argument_list|(
name|type
argument_list|()
argument_list|,
name|this
argument_list|)
else|:
literal|0
decl_stmt|;
name|QPixmapDropShadowFilter
modifier|*
name|dropShadowFilter
init|=
cast|static_cast
argument_list|<
name|QPixmapDropShadowFilter
operator|*
argument_list|>
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|dropShadowFilter
condition|)
block|{
name|dropShadowFilter
operator|->
name|setColor
argument_list|(
name|d
operator|->
name|color
argument_list|)
expr_stmt|;
name|dropShadowFilter
operator|->
name|setBlurRadius
argument_list|(
name|d
operator|->
name|radius
argument_list|)
expr_stmt|;
name|dropShadowFilter
operator|->
name|setOffset
argument_list|(
name|d
operator|->
name|offset
argument_list|)
expr_stmt|;
name|dropShadowFilter
operator|->
name|draw
argument_list|(
name|p
argument_list|,
name|pos
argument_list|,
name|px
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return;
block|}
name|QImage
name|tmp
argument_list|(
name|px
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|tmpPainter
argument_list|(
operator|&
name|tmp
argument_list|)
decl_stmt|;
name|tmpPainter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|tmpPainter
operator|.
name|drawPixmap
argument_list|(
name|d
operator|->
name|offset
argument_list|,
name|px
argument_list|)
expr_stmt|;
name|tmpPainter
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// blur the alpha channel
name|QImage
name|blurred
argument_list|(
name|tmp
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|blurred
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|blurPainter
argument_list|(
operator|&
name|blurred
argument_list|)
decl_stmt|;
name|qt_blurImage
argument_list|(
operator|&
name|blurPainter
argument_list|,
name|tmp
argument_list|,
name|d
operator|->
name|radius
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|blurPainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|tmp
operator|=
name|blurred
expr_stmt|;
comment|// blacken the image...
name|tmpPainter
operator|.
name|begin
argument_list|(
operator|&
name|tmp
argument_list|)
expr_stmt|;
name|tmpPainter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceIn
argument_list|)
expr_stmt|;
name|tmpPainter
operator|.
name|fillRect
argument_list|(
name|tmp
operator|.
name|rect
argument_list|()
argument_list|,
name|d
operator|->
name|color
argument_list|)
expr_stmt|;
name|tmpPainter
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// draw the blurred drop shadow...
name|p
operator|->
name|drawImage
argument_list|(
name|pos
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
comment|// Draw the actual pixmap...
name|p
operator|->
name|drawPixmap
argument_list|(
name|pos
argument_list|,
name|px
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_GRAPHICSEFFECT
end_comment
end_unit
