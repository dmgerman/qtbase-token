begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGRAPHICSGRIDLAYOUTENGINE_P_H
end_ifndef
begin_define
DECL|macro|QGRAPHICSGRIDLAYOUTENGINE_P_H
define|#
directive|define
name|QGRAPHICSGRIDLAYOUTENGINE_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtGui/private/qgridlayoutengine_p.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
end_ifndef
begin_include
include|#
directive|include
file|<QtWidgets/qsizepolicy.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qstyle.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|"qgraphicslayoutitem.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QGraphicsLayoutPrivate
name|class
name|QGraphicsLayoutPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QGraphicsGridLayoutEngineItem
range|:
name|public
name|QGridLayoutItem
block|{
name|public
operator|:
name|QGraphicsGridLayoutEngineItem
argument_list|(
argument|QGraphicsLayoutItem *item
argument_list|,
argument|int row
argument_list|,
argument|int columns
argument_list|,
argument|int rowSpan =
literal|1
argument_list|,
argument|int columnSpan =
literal|1
argument_list|,
argument|Qt::Alignment alignment =
literal|0
argument_list|)
operator|:
name|QGridLayoutItem
argument_list|(
name|row
argument_list|,
name|columns
argument_list|,
name|rowSpan
argument_list|,
name|columnSpan
argument_list|,
name|alignment
argument_list|)
block|,
name|q_layoutItem
argument_list|(
argument|item
argument_list|)
block|{}
name|virtual
name|QLayoutPolicy
operator|::
name|Policy
name|sizePolicy
argument_list|(
argument|Qt::Orientation orientation
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|{
name|QSizePolicy
name|sizePolicy
argument_list|(
name|q_layoutItem
operator|->
name|sizePolicy
argument_list|()
argument_list|)
block|;
return|return
operator|(
name|QLayoutPolicy
operator|::
name|Policy
operator|)
operator|(
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|sizePolicy
operator|.
name|horizontalPolicy
argument_list|()
else|:
name|sizePolicy
operator|.
name|verticalPolicy
argument_list|()
operator|)
return|;
block|}
name|virtual
name|QLayoutPolicy
operator|::
name|ControlTypes
name|controlTypes
argument_list|(
argument|LayoutSide
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|{
specifier|const
name|QSizePolicy
operator|::
name|ControlType
name|ct
operator|=
name|q_layoutItem
operator|->
name|sizePolicy
argument_list|()
operator|.
name|controlType
argument_list|()
block|;
return|return
operator|(
name|QLayoutPolicy
operator|::
name|ControlTypes
operator|)
name|ct
return|;
block|}
name|virtual
name|QSizeF
name|sizeHint
argument_list|(
argument|Qt::SizeHint which
argument_list|,
argument|const QSizeF&constraint
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|q_layoutItem
operator|->
name|effectiveSizeHint
argument_list|(
name|which
argument_list|,
name|constraint
argument_list|)
return|;
block|}
name|virtual
name|void
name|setGeometry
argument_list|(
argument|const QRectF&rect
argument_list|)
name|Q_DECL_OVERRIDE
block|{
name|q_layoutItem
operator|->
name|setGeometry
argument_list|(
name|rect
argument_list|)
block|;     }
name|virtual
name|bool
name|hasDynamicConstraint
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|Qt
operator|::
name|Orientation
name|dynamicConstraintOrientation
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QGraphicsLayoutItem
operator|*
name|layoutItem
argument_list|()
specifier|const
block|{
return|return
name|q_layoutItem
return|;
block|}
name|protected
operator|:
name|QGraphicsLayoutItem
operator|*
name|q_layoutItem
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QGraphicsGridLayoutEngine
range|:
name|public
name|QGridLayoutEngine
block|{
name|public
operator|:
name|QGraphicsGridLayoutEngineItem
operator|*
name|findLayoutItem
argument_list|(
argument|QGraphicsLayoutItem *layoutItem
argument_list|)
specifier|const
block|{
specifier|const
name|int
name|index
operator|=
name|indexOf
argument_list|(
name|layoutItem
argument_list|)
block|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
return|return
literal|0
return|;
return|return
name|static_cast
operator|<
name|QGraphicsGridLayoutEngineItem
operator|*
operator|>
operator|(
name|q_items
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|)
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|int
name|indexOf
argument_list|(
name|QGraphicsLayoutItem
operator|*
name|item
argument_list|)
decl|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q_items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|item
operator|==
name|static_cast
operator|<
name|QGraphicsGridLayoutEngineItem
operator|*
operator|>
operator|(
name|q_items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|)
operator|->
name|layoutItem
argument_list|()
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|void
name|setAlignment
argument_list|(
name|QGraphicsLayoutItem
operator|*
name|graphicsLayoutItem
argument_list|,
name|Qt
operator|::
name|Alignment
name|alignment
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Qt
operator|::
name|Alignment
name|alignment
argument_list|(
argument|QGraphicsLayoutItem *graphicsLayoutItem
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|void
name|setStretchFactor
argument_list|(
name|QGraphicsLayoutItem
operator|*
name|layoutItem
argument_list|,
name|int
name|stretch
argument_list|,
name|Qt
operator|::
name|Orientation
name|orientation
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|stretchFactor
argument_list|(
name|QGraphicsLayoutItem
operator|*
name|layoutItem
argument_list|,
name|Qt
operator|::
name|Orientation
name|orientation
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GRAPHICSVIEW
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QGRAPHICSGRIDLAYOUTENGINE_P_H
end_comment
end_unit
