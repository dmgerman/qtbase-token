begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
end_ifndef
begin_include
include|#
directive|include
file|"qgraphicslayout.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicsscene.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicslayoutitem.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicslayoutitem_p.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicswidget.h"
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|/*     COMBINE_SIZE() is identical to combineSize(), except that it     doesn't evaluate 'size' unless necessary. */
DECL|macro|COMBINE_SIZE
define|#
directive|define
name|COMBINE_SIZE
parameter_list|(
name|result
parameter_list|,
name|size
parameter_list|)
define|\
value|do { \         if ((result).width()< 0 || (result).height()< 0) \             combineSize((result), (size)); \     } while (false)
DECL|function|combineSize
specifier|static
name|void
name|combineSize
parameter_list|(
name|QSizeF
modifier|&
name|result
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|width
argument_list|()
operator|<
literal|0
condition|)
name|result
operator|.
name|setWidth
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|height
argument_list|()
operator|<
literal|0
condition|)
name|result
operator|.
name|setHeight
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boundSize
specifier|static
name|void
name|boundSize
parameter_list|(
name|QSizeF
modifier|&
name|result
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|>=
literal|0
operator|&&
name|size
operator|.
name|width
argument_list|()
operator|<
name|result
operator|.
name|width
argument_list|()
condition|)
name|result
operator|.
name|setWidth
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|.
name|height
argument_list|()
operator|>=
literal|0
operator|&&
name|size
operator|.
name|height
argument_list|()
operator|<
name|result
operator|.
name|height
argument_list|()
condition|)
name|result
operator|.
name|setHeight
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|expandSize
specifier|static
name|void
name|expandSize
parameter_list|(
name|QSizeF
modifier|&
name|result
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|>=
literal|0
operator|&&
name|size
operator|.
name|width
argument_list|()
operator|>
name|result
operator|.
name|width
argument_list|()
condition|)
name|result
operator|.
name|setWidth
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|.
name|height
argument_list|()
operator|>=
literal|0
operator|&&
name|size
operator|.
name|height
argument_list|()
operator|>
name|result
operator|.
name|height
argument_list|()
condition|)
name|result
operator|.
name|setHeight
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalizeHints
specifier|static
name|void
name|normalizeHints
parameter_list|(
name|qreal
modifier|&
name|minimum
parameter_list|,
name|qreal
modifier|&
name|preferred
parameter_list|,
name|qreal
modifier|&
name|maximum
parameter_list|,
name|qreal
modifier|&
name|descent
parameter_list|)
block|{
if|if
condition|(
name|minimum
operator|>=
literal|0
operator|&&
name|maximum
operator|>=
literal|0
operator|&&
name|minimum
operator|>
name|maximum
condition|)
name|minimum
operator|=
name|maximum
expr_stmt|;
if|if
condition|(
name|preferred
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|minimum
operator|>=
literal|0
operator|&&
name|preferred
operator|<
name|minimum
condition|)
block|{
name|preferred
operator|=
name|minimum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maximum
operator|>=
literal|0
operator|&&
name|preferred
operator|>
name|maximum
condition|)
block|{
name|preferred
operator|=
name|maximum
expr_stmt|;
block|}
block|}
if|if
condition|(
name|minimum
operator|>=
literal|0
operator|&&
name|descent
operator|>
name|minimum
condition|)
name|descent
operator|=
name|minimum
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QGraphicsLayoutItemPrivate
name|QGraphicsLayoutItemPrivate
operator|::
name|QGraphicsLayoutItemPrivate
parameter_list|(
name|QGraphicsLayoutItem
modifier|*
name|par
parameter_list|,
name|bool
name|layout
parameter_list|)
member_init_list|:
name|parent
argument_list|(
name|par
argument_list|)
member_init_list|,
name|userSizeHints
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|isLayout
argument_list|(
name|layout
argument_list|)
member_init_list|,
name|ownedByLayout
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|graphicsItem
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_destructor
DECL|function|~QGraphicsLayoutItemPrivate
name|QGraphicsLayoutItemPrivate
operator|::
name|~
name|QGraphicsLayoutItemPrivate
parameter_list|()
block|{
comment|// Remove any lazily allocated data
operator|delete
index|[]
name|userSizeHints
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|init
name|void
name|QGraphicsLayoutItemPrivate
operator|::
name|init
parameter_list|()
block|{
name|sizeHintCacheDirty
operator|=
literal|true
expr_stmt|;
name|sizeHintWithConstraintCacheDirty
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|effectiveSizeHints
name|QSizeF
modifier|*
name|QGraphicsLayoutItemPrivate
operator|::
name|effectiveSizeHints
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|constraint
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
name|QSizeF
modifier|*
name|sizeHintCache
decl_stmt|;
specifier|const
name|bool
name|hasConstraint
init|=
name|constraint
operator|.
name|width
argument_list|()
operator|>=
literal|0
operator|||
name|constraint
operator|.
name|height
argument_list|()
operator|>=
literal|0
decl_stmt|;
if|if
condition|(
name|hasConstraint
condition|)
block|{
if|if
condition|(
operator|!
name|sizeHintWithConstraintCacheDirty
operator|&&
name|constraint
operator|==
name|cachedConstraint
condition|)
return|return
name|cachedSizeHintsWithConstraints
return|;
name|sizeHintCache
operator|=
name|cachedSizeHintsWithConstraints
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|sizeHintCacheDirty
condition|)
return|return
name|cachedSizeHints
return|;
name|sizeHintCache
operator|=
name|cachedSizeHints
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Qt
operator|::
name|NSizeHints
condition|;
operator|++
name|i
control|)
block|{
name|sizeHintCache
index|[
name|i
index|]
operator|=
name|constraint
expr_stmt|;
if|if
condition|(
name|userSizeHints
condition|)
name|combineSize
argument_list|(
name|sizeHintCache
index|[
name|i
index|]
argument_list|,
name|userSizeHints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QSizeF
modifier|&
name|minS
init|=
name|sizeHintCache
index|[
name|Qt
operator|::
name|MinimumSize
index|]
decl_stmt|;
name|QSizeF
modifier|&
name|prefS
init|=
name|sizeHintCache
index|[
name|Qt
operator|::
name|PreferredSize
index|]
decl_stmt|;
name|QSizeF
modifier|&
name|maxS
init|=
name|sizeHintCache
index|[
name|Qt
operator|::
name|MaximumSize
index|]
decl_stmt|;
name|QSizeF
modifier|&
name|descentS
init|=
name|sizeHintCache
index|[
name|Qt
operator|::
name|MinimumDescent
index|]
decl_stmt|;
name|normalizeHints
argument_list|(
name|minS
operator|.
name|rwidth
argument_list|()
argument_list|,
name|prefS
operator|.
name|rwidth
argument_list|()
argument_list|,
name|maxS
operator|.
name|rwidth
argument_list|()
argument_list|,
name|descentS
operator|.
name|rwidth
argument_list|()
argument_list|)
expr_stmt|;
name|normalizeHints
argument_list|(
name|minS
operator|.
name|rheight
argument_list|()
argument_list|,
name|prefS
operator|.
name|rheight
argument_list|()
argument_list|,
name|maxS
operator|.
name|rheight
argument_list|()
argument_list|,
name|descentS
operator|.
name|rheight
argument_list|()
argument_list|)
expr_stmt|;
comment|// if the minimum, preferred and maximum sizes contradict each other
comment|// (e.g. the minimum is larger than the maximum) we give priority to
comment|// the maximum size, then the minimum size and finally the preferred size
name|COMBINE_SIZE
argument_list|(
name|maxS
argument_list|,
name|q
operator|->
name|sizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|maxS
argument_list|)
argument_list|)
expr_stmt|;
name|combineSize
argument_list|(
name|maxS
argument_list|,
name|QSizeF
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|,
name|QWIDGETSIZE_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|expandSize
argument_list|(
name|maxS
argument_list|,
name|prefS
argument_list|)
expr_stmt|;
name|expandSize
argument_list|(
name|maxS
argument_list|,
name|minS
argument_list|)
expr_stmt|;
name|boundSize
argument_list|(
name|maxS
argument_list|,
name|QSizeF
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|,
name|QWIDGETSIZE_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|COMBINE_SIZE
argument_list|(
name|minS
argument_list|,
name|q
operator|->
name|sizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|minS
argument_list|)
argument_list|)
expr_stmt|;
name|expandSize
argument_list|(
name|minS
argument_list|,
name|QSizeF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|boundSize
argument_list|(
name|minS
argument_list|,
name|prefS
argument_list|)
expr_stmt|;
name|boundSize
argument_list|(
name|minS
argument_list|,
name|maxS
argument_list|)
expr_stmt|;
name|COMBINE_SIZE
argument_list|(
name|prefS
argument_list|,
name|q
operator|->
name|sizeHint
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|,
name|prefS
argument_list|)
argument_list|)
expr_stmt|;
name|expandSize
argument_list|(
name|prefS
argument_list|,
name|minS
argument_list|)
expr_stmt|;
name|boundSize
argument_list|(
name|prefS
argument_list|,
name|maxS
argument_list|)
expr_stmt|;
comment|// Not supported yet
comment|// COMBINE_SIZE(descentS, q->sizeHint(Qt::MinimumDescent, constraint));
if|if
condition|(
name|hasConstraint
condition|)
block|{
name|cachedConstraint
operator|=
name|constraint
expr_stmt|;
name|sizeHintWithConstraintCacheDirty
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sizeHintCacheDirty
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|sizeHintCache
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Returns the parent item of this layout, or 0 if this layout is     not installed on any widget.      If this is the item that the layout is installed on, it will return "itself".      If the layout is a sub-layout, this function returns the parent     widget of the parent layout.      Note that it will traverse up the layout item hierarchy instead of just calling     QGraphicsItem::parentItem(). This is on purpose.      \sa parent() */
end_comment
begin_function
DECL|function|parentItem
name|QGraphicsItem
modifier|*
name|QGraphicsLayoutItemPrivate
operator|::
name|parentItem
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
specifier|const
name|QGraphicsLayoutItem
modifier|*
name|parent
init|=
name|q
decl_stmt|;
while|while
condition|(
name|parent
operator|&&
name|parent
operator|->
name|isLayout
argument_list|()
condition|)
block|{
name|parent
operator|=
name|parent
operator|->
name|parentLayoutItem
argument_list|()
expr_stmt|;
block|}
return|return
name|parent
condition|?
name|parent
operator|->
name|graphicsItem
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal       Ensures that userSizeHints is allocated.      This function must be called before any dereferencing. */
end_comment
begin_function
DECL|function|ensureUserSizeHints
name|void
name|QGraphicsLayoutItemPrivate
operator|::
name|ensureUserSizeHints
parameter_list|()
block|{
if|if
condition|(
operator|!
name|userSizeHints
condition|)
name|userSizeHints
operator|=
operator|new
name|QSizeF
index|[
name|Qt
operator|::
name|NSizeHints
index|]
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Sets the user size hint \a which to \a size. Use an invalid size to unset the size hint.  */
end_comment
begin_function
DECL|function|setSize
name|void
name|QGraphicsLayoutItemPrivate
operator|::
name|setSize
parameter_list|(
name|Qt
operator|::
name|SizeHint
name|which
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|userSizeHints
condition|)
block|{
if|if
condition|(
name|size
operator|==
name|userSizeHints
index|[
name|which
index|]
condition|)
return|return;
block|}
elseif|else
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|<
literal|0
operator|&&
name|size
operator|.
name|height
argument_list|()
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|ensureUserSizeHints
argument_list|()
expr_stmt|;
name|userSizeHints
index|[
name|which
index|]
operator|=
name|size
expr_stmt|;
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Sets the width of the user size hint \a which to \a width.  */
end_comment
begin_function
DECL|function|setSizeComponent
name|void
name|QGraphicsLayoutItemPrivate
operator|::
name|setSizeComponent
parameter_list|(
name|Qt
operator|::
name|SizeHint
name|which
parameter_list|,
name|SizeComponent
name|component
parameter_list|,
name|qreal
name|value
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
name|ensureUserSizeHints
argument_list|()
expr_stmt|;
name|qreal
modifier|&
name|userValue
init|=
operator|(
name|component
operator|==
name|Width
operator|)
condition|?
name|userSizeHints
index|[
name|which
index|]
operator|.
name|rwidth
argument_list|()
else|:
name|userSizeHints
index|[
name|which
index|]
operator|.
name|rheight
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|userValue
condition|)
return|return;
name|userValue
operator|=
name|value
expr_stmt|;
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasHeightForWidth
name|bool
name|QGraphicsLayoutItemPrivate
operator|::
name|hasHeightForWidth
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLayout
condition|)
block|{
specifier|const
name|QGraphicsLayout
modifier|*
name|l
init|=
cast|static_cast
argument_list|<
specifier|const
name|QGraphicsLayout
operator|*
argument_list|>
argument_list|(
name|q
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|l
operator|->
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|QGraphicsLayoutItemPrivate
operator|::
name|get
argument_list|(
name|l
operator|->
name|itemAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|->
name|hasHeightForWidth
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|QGraphicsItem
modifier|*
name|item
init|=
name|q
operator|->
name|graphicsItem
argument_list|()
condition|)
block|{
if|if
condition|(
name|item
operator|->
name|isWidget
argument_list|()
condition|)
block|{
name|QGraphicsWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QGraphicsWidget
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|layout
argument_list|()
condition|)
block|{
return|return
name|QGraphicsLayoutItemPrivate
operator|::
name|get
argument_list|(
name|w
operator|->
name|layout
argument_list|()
argument_list|)
operator|->
name|hasHeightForWidth
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|q
operator|->
name|sizePolicy
argument_list|()
operator|.
name|hasHeightForWidth
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|hasWidthForHeight
name|bool
name|QGraphicsLayoutItemPrivate
operator|::
name|hasWidthForHeight
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLayout
condition|)
block|{
specifier|const
name|QGraphicsLayout
modifier|*
name|l
init|=
cast|static_cast
argument_list|<
specifier|const
name|QGraphicsLayout
operator|*
argument_list|>
argument_list|(
name|q
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|l
operator|->
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|QGraphicsLayoutItemPrivate
operator|::
name|get
argument_list|(
name|l
operator|->
name|itemAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|->
name|hasWidthForHeight
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|QGraphicsItem
modifier|*
name|item
init|=
name|q
operator|->
name|graphicsItem
argument_list|()
condition|)
block|{
if|if
condition|(
name|item
operator|->
name|isWidget
argument_list|()
condition|)
block|{
name|QGraphicsWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QGraphicsWidget
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|layout
argument_list|()
condition|)
block|{
return|return
name|QGraphicsLayoutItemPrivate
operator|::
name|get
argument_list|(
name|w
operator|->
name|layout
argument_list|()
argument_list|)
operator|->
name|hasWidthForHeight
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|q
operator|->
name|sizePolicy
argument_list|()
operator|.
name|hasWidthForHeight
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \class QGraphicsLayoutItem     \brief The QGraphicsLayoutItem class can be inherited to allow your custom     items to be managed by layouts.     \since 4.4     \ingroup graphicsview-api     \inmodule QtWidgets      QGraphicsLayoutItem is an abstract class that defines a set of virtual     functions describing sizes, size policies, and size hints for any object     arranged by QGraphicsLayout. The API contains functions relevant     for both the item itself and for the user of the item as most of     QGraphicsLayoutItem's functions are also part of the subclass' public API.      In most cases, existing layout-aware classes such as QGraphicsWidget and     QGraphicsLayout already provide the functionality you require. However,     subclassing these classes will enable you to create both graphical     elements that work well with layouts (QGraphicsWidget) or custom layouts     (QGraphicsLayout).      \section1 Subclassing QGraphicsLayoutItem      If you create a subclass of QGraphicsLayoutItem and reimplement its     virtual functions, you will enable the layout to resize and position your     item along with other QGraphicsLayoutItems including QGraphicsWidget     and QGraphicsLayout.      You can start by reimplementing important functions: the protected     sizeHint() function, as well as the public setGeometry()     function. If you want your items to be aware of immediate geometry     changes, you can also reimplement updateGeometry().      The geometry, size hint, and size policy affect the item's size and     position. Calling setGeometry() will always resize and reposition the item     immediately. Normally, this function is called by QGraphicsLayout after     the layout has been activated, but it can also be called by the item's user     at any time.      The sizeHint() function returns the item' minimum, preferred and maximum     size hints. You can override these properties by calling setMinimumSize(),     setPreferredSize() or setMaximumSize(). You can also use functions such as     setMinimumWidth() or setMaximumHeight() to set only the width or height     component if desired.      The effectiveSizeHint() function, on the other hand, returns a size hint     for any given Qt::SizeHint, and guarantees that the returned size is bound     to the minimum and maximum sizes and size hints. You can set the item's     vertical and horizontal size policy by calling setSizePolicy(). The     sizePolicy property is used by the layout system to describe how this item     prefers to grow or shrink.      \section1 Nesting QGraphicsLayoutItems      QGraphicsLayoutItems can be nested within other QGraphicsLayoutItems,     similar to layouts that can contain sublayouts. This is done either by     passing a QGraphicsLayoutItem pointer to QGraphicsLayoutItem's     protected constructor, or by calling setParentLayoutItem(). The     parentLayoutItem() function returns a pointer to the item's layoutItem     parent. If the item's parent is 0 or if the parent does not inherit     from QGraphicsItem, the parentLayoutItem() function then returns 0.     isLayout() returns true if the QGraphicsLayoutItem subclass is itself a     layout, or false otherwise.      Qt uses QGraphicsLayoutItem to provide layout functionality in the     \l{Graphics View Framework}, but in the future its use may spread     throughout Qt itself.      \sa QGraphicsWidget, QGraphicsLayout, QGraphicsLinearLayout,     QGraphicsGridLayout */
end_comment
begin_comment
comment|/*!     Constructs the QGraphicsLayoutItem object. \a parent becomes the object's     parent. If \a isLayout is true the item is a layout, otherwise     \a isLayout is false. */
end_comment
begin_constructor
DECL|function|QGraphicsLayoutItem
name|QGraphicsLayoutItem
operator|::
name|QGraphicsLayoutItem
parameter_list|(
name|QGraphicsLayoutItem
modifier|*
name|parent
parameter_list|,
name|bool
name|isLayout
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|new
name|QGraphicsLayoutItemPrivate
argument_list|(
name|parent
argument_list|,
name|isLayout
argument_list|)
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
name|d
operator|->
name|sizePolicy
operator|=
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Preferred
argument_list|)
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QGraphicsLayoutItem
name|QGraphicsLayoutItem
operator|::
name|QGraphicsLayoutItem
parameter_list|(
name|QGraphicsLayoutItemPrivate
modifier|&
name|dd
parameter_list|)
member_init_list|:
name|d_ptr
argument_list|(
operator|&
name|dd
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
name|d
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the QGraphicsLayoutItem object. */
end_comment
begin_destructor
DECL|function|~QGraphicsLayoutItem
name|QGraphicsLayoutItem
operator|::
name|~
name|QGraphicsLayoutItem
parameter_list|()
block|{
name|QGraphicsLayoutItem
modifier|*
name|parentLI
init|=
name|parentLayoutItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentLI
operator|&&
name|parentLI
operator|->
name|isLayout
argument_list|()
condition|)
block|{
name|QGraphicsLayout
modifier|*
name|lay
init|=
cast|static_cast
argument_list|<
name|QGraphicsLayout
operator|*
argument_list|>
argument_list|(
name|parentLI
argument_list|)
decl_stmt|;
comment|// this is not optimal
for|for
control|(
name|int
name|i
init|=
name|lay
operator|->
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|lay
operator|->
name|itemAt
argument_list|(
name|i
argument_list|)
operator|==
name|this
condition|)
block|{
name|lay
operator|->
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_destructor
begin_comment
comment|/*!     \fn virtual QSizeF QGraphicsLayoutItem::sizeHint(Qt::SizeHint which, const QSizeF&constraint) const = 0;      This pure virtual function returns the size hint for \a which of the     QGraphicsLayoutItem, using the width or height of \a constraint to     constrain the output.      Reimplement this function in a subclass of QGraphicsLayoutItem to     provide the necessary size hints for your items.      \sa effectiveSizeHint() */
end_comment
begin_comment
comment|/*!     Sets the size policy to \a policy. The size policy describes how the item     should grow horizontally and vertically when arranged in a layout.      QGraphicsLayoutItem's default size policy is (QSizePolicy::Fixed,     QSizePolicy::Fixed, QSizePolicy::DefaultType), but it is common for     subclasses to change the default. For example, QGraphicsWidget defaults     to (QSizePolicy::Preferred, QSizePolicy::Preferred,     QSizePolicy::DefaultType).      \sa sizePolicy(), QWidget::sizePolicy() */
end_comment
begin_function
DECL|function|setSizePolicy
name|void
name|QGraphicsLayoutItem
operator|::
name|setSizePolicy
parameter_list|(
specifier|const
name|QSizePolicy
modifier|&
name|policy
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sizePolicy
operator|==
name|policy
condition|)
return|return;
name|d
operator|->
name|sizePolicy
operator|=
name|policy
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload      This function is equivalent to calling     setSizePolicy(QSizePolicy(\a hPolicy, \a vPolicy, \a controlType)).      \sa sizePolicy(), QWidget::sizePolicy() */
end_comment
begin_function
DECL|function|setSizePolicy
name|void
name|QGraphicsLayoutItem
operator|::
name|setSizePolicy
parameter_list|(
name|QSizePolicy
operator|::
name|Policy
name|hPolicy
parameter_list|,
name|QSizePolicy
operator|::
name|Policy
name|vPolicy
parameter_list|,
name|QSizePolicy
operator|::
name|ControlType
name|controlType
parameter_list|)
block|{
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|hPolicy
argument_list|,
name|vPolicy
argument_list|,
name|controlType
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the current size policy.      \sa setSizePolicy(), QWidget::sizePolicy() */
end_comment
begin_function
DECL|function|sizePolicy
name|QSizePolicy
name|QGraphicsLayoutItem
operator|::
name|sizePolicy
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sizePolicy
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the minimum size to \a size. This property overrides sizeHint() for     Qt::MinimumSize and ensures that effectiveSizeHint() will never return     a size smaller than \a size. In order to unset the minimum size, use an     invalid size.      \sa minimumSize(), maximumSize(), preferredSize(), Qt::MinimumSize,     sizeHint(), setMinimumWidth(), setMinimumHeight() */
end_comment
begin_function
DECL|function|setMinimumSize
name|void
name|QGraphicsLayoutItem
operator|::
name|setMinimumSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
name|d_ptr
operator|->
name|setSize
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QGraphicsLayoutItem::setMinimumSize(qreal w, qreal h)      This convenience function is equivalent to calling     setMinimumSize(QSizeF(\a w, \a h)).      \sa minimumSize(), setMaximumSize(), setPreferredSize(), sizeHint() */
end_comment
begin_comment
comment|/*!     Returns the minimum size.      \sa setMinimumSize(), preferredSize(), maximumSize(), Qt::MinimumSize,     sizeHint() */
end_comment
begin_function
DECL|function|minimumSize
name|QSizeF
name|QGraphicsLayoutItem
operator|::
name|minimumSize
parameter_list|()
specifier|const
block|{
return|return
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the minimum width to \a width.      \sa minimumWidth(), setMinimumSize(), minimumSize() */
end_comment
begin_function
DECL|function|setMinimumWidth
name|void
name|QGraphicsLayoutItem
operator|::
name|setMinimumWidth
parameter_list|(
name|qreal
name|width
parameter_list|)
block|{
name|d_ptr
operator|->
name|setSizeComponent
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|d_ptr
operator|->
name|Width
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the minimum height to \a height.      \sa minimumHeight(), setMinimumSize(), minimumSize() */
end_comment
begin_function
DECL|function|setMinimumHeight
name|void
name|QGraphicsLayoutItem
operator|::
name|setMinimumHeight
parameter_list|(
name|qreal
name|height
parameter_list|)
block|{
name|d_ptr
operator|->
name|setSizeComponent
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|d_ptr
operator|->
name|Height
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the preferred size to \a size. This property overrides sizeHint() for     Qt::PreferredSize and provides the default value for effectiveSizeHint().     In order to unset the preferred size, use an invalid size.      \sa preferredSize(), minimumSize(), maximumSize(), Qt::PreferredSize,     sizeHint() */
end_comment
begin_function
DECL|function|setPreferredSize
name|void
name|QGraphicsLayoutItem
operator|::
name|setPreferredSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
name|d_ptr
operator|->
name|setSize
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QGraphicsLayoutItem::setPreferredSize(qreal w, qreal h)      This convenience function is equivalent to calling     setPreferredSize(QSizeF(\a w, \a h)).      \sa preferredSize(), setMaximumSize(), setMinimumSize(), sizeHint() */
end_comment
begin_comment
comment|/*!     Returns the preferred size.      \sa setPreferredSize(), minimumSize(), maximumSize(), Qt::PreferredSize,     sizeHint() */
end_comment
begin_function
DECL|function|preferredSize
name|QSizeF
name|QGraphicsLayoutItem
operator|::
name|preferredSize
parameter_list|()
specifier|const
block|{
return|return
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the preferred height to \a height.      \sa preferredWidth(), setPreferredSize(), preferredSize() */
end_comment
begin_function
DECL|function|setPreferredHeight
name|void
name|QGraphicsLayoutItem
operator|::
name|setPreferredHeight
parameter_list|(
name|qreal
name|height
parameter_list|)
block|{
name|d_ptr
operator|->
name|setSizeComponent
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|,
name|d_ptr
operator|->
name|Height
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the preferred width to \a width.      \sa preferredHeight(), setPreferredSize(), preferredSize() */
end_comment
begin_function
DECL|function|setPreferredWidth
name|void
name|QGraphicsLayoutItem
operator|::
name|setPreferredWidth
parameter_list|(
name|qreal
name|width
parameter_list|)
block|{
name|d_ptr
operator|->
name|setSizeComponent
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|,
name|d_ptr
operator|->
name|Width
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the maximum size to \a size. This property overrides sizeHint() for     Qt::MaximumSize and ensures that effectiveSizeHint() will never return a     size larger than \a size. In order to unset the maximum size, use an     invalid size.      \sa maximumSize(), minimumSize(), preferredSize(), Qt::MaximumSize,     sizeHint() */
end_comment
begin_function
DECL|function|setMaximumSize
name|void
name|QGraphicsLayoutItem
operator|::
name|setMaximumSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
name|d_ptr
operator|->
name|setSize
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QGraphicsLayoutItem::setMaximumSize(qreal w, qreal h)      This convenience function is equivalent to calling     setMaximumSize(QSizeF(\a w, \a h)).      \sa maximumSize(), setMinimumSize(), setPreferredSize(), sizeHint() */
end_comment
begin_comment
comment|/*!     Returns the maximum size.      \sa setMaximumSize(), minimumSize(), preferredSize(), Qt::MaximumSize,     sizeHint() */
end_comment
begin_function
DECL|function|maximumSize
name|QSizeF
name|QGraphicsLayoutItem
operator|::
name|maximumSize
parameter_list|()
specifier|const
block|{
return|return
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the maximum width to \a width.      \sa maximumWidth(), setMaximumSize(), maximumSize() */
end_comment
begin_function
DECL|function|setMaximumWidth
name|void
name|QGraphicsLayoutItem
operator|::
name|setMaximumWidth
parameter_list|(
name|qreal
name|width
parameter_list|)
block|{
name|d_ptr
operator|->
name|setSizeComponent
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|d_ptr
operator|->
name|Width
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the maximum height to \a height.      \sa maximumHeight(), setMaximumSize(), maximumSize() */
end_comment
begin_function
DECL|function|setMaximumHeight
name|void
name|QGraphicsLayoutItem
operator|::
name|setMaximumHeight
parameter_list|(
name|qreal
name|height
parameter_list|)
block|{
name|d_ptr
operator|->
name|setSizeComponent
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|d_ptr
operator|->
name|Height
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn qreal QGraphicsLayoutItem::minimumWidth() const      Returns the minimum width.      \sa setMinimumWidth(), setMinimumSize(), minimumSize() */
end_comment
begin_comment
comment|/*!     \fn qreal QGraphicsLayoutItem::minimumHeight() const      Returns the minimum height.      \sa setMinimumHeight(), setMinimumSize(), minimumSize() */
end_comment
begin_comment
comment|/*!     \fn qreal QGraphicsLayoutItem::preferredWidth() const      Returns the preferred width.      \sa setPreferredWidth(), setPreferredSize(), preferredSize() */
end_comment
begin_comment
comment|/*!     \fn qreal QGraphicsLayoutItem::preferredHeight() const      Returns the preferred height.      \sa setPreferredHeight(), setPreferredSize(), preferredSize() */
end_comment
begin_comment
comment|/*!     \fn qreal QGraphicsLayoutItem::maximumWidth() const      Returns the maximum width.      \sa setMaximumWidth(), setMaximumSize(), maximumSize() */
end_comment
begin_comment
comment|/*!     \fn qreal QGraphicsLayoutItem::maximumHeight() const      Returns the maximum height.      \sa setMaximumHeight(), setMaximumSize(), maximumSize() */
end_comment
begin_comment
comment|/*!     \fn virtual void QGraphicsLayoutItem::setGeometry(const QRectF&rect)      This virtual function sets the geometry of the QGraphicsLayoutItem to     \a rect, which is in parent coordinates (e.g., the top-left corner of \a rect     is equivalent to the item's position in parent coordinates).      You must reimplement this function in a subclass of QGraphicsLayoutItem to     receive geometry updates. The layout will call this function when it does a     rearrangement.      If \a rect is outside of the bounds of minimumSize and maximumSize, it     will be adjusted to its closest size so that it is within the legal     bounds.      \sa geometry() */
end_comment
begin_function
DECL|function|setGeometry
name|void
name|QGraphicsLayoutItem
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
name|QSizeF
name|effectiveSize
init|=
name|rect
operator|.
name|size
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|)
argument_list|)
operator|.
name|boundedTo
argument_list|(
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|geom
operator|=
name|QRectF
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|effectiveSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QRectF QGraphicsLayoutItem::geometry() const      Returns the item's geometry (e.g., position and size) as a     QRectF. This function is equivalent to QRectF(pos(), size()).      \sa setGeometry() */
end_comment
begin_function
DECL|function|geometry
name|QRectF
name|QGraphicsLayoutItem
operator|::
name|geometry
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|geom
return|;
block|}
end_function
begin_comment
comment|/*!     This virtual function provides the \a left, \a top, \a right and \a bottom     contents margins for this QGraphicsLayoutItem. The default implementation     assumes all contents margins are 0. The parameters point to values stored     in qreals. If any of the pointers is 0, that value will not be updated.      \sa QGraphicsWidget::setContentsMargins() */
end_comment
begin_function
DECL|function|getContentsMargins
name|void
name|QGraphicsLayoutItem
operator|::
name|getContentsMargins
parameter_list|(
name|qreal
modifier|*
name|left
parameter_list|,
name|qreal
modifier|*
name|top
parameter_list|,
name|qreal
modifier|*
name|right
parameter_list|,
name|qreal
modifier|*
name|bottom
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|left
condition|)
operator|*
name|left
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|top
condition|)
operator|*
name|top
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|right
condition|)
operator|*
name|right
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|bottom
condition|)
operator|*
name|bottom
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the contents rect in local coordinates.      The contents rect defines the subrectangle used by an associated layout     when arranging subitems. This function is a convenience function that     adjusts the item's geometry() by its contents margins. Note that     getContentsMargins() is a virtual function that you can reimplement to     return the item's contents margins.      \sa getContentsMargins(), geometry() */
end_comment
begin_function
DECL|function|contentsRect
name|QRectF
name|QGraphicsLayoutItem
operator|::
name|contentsRect
parameter_list|()
specifier|const
block|{
name|qreal
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|getContentsMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
return|return
name|QRectF
argument_list|(
name|QPointF
argument_list|()
argument_list|,
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|adjusted
argument_list|(
operator|+
name|left
argument_list|,
operator|+
name|top
argument_list|,
operator|-
name|right
argument_list|,
operator|-
name|bottom
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the effective size hint for this QGraphicsLayoutItem.      \a which is the size hint in question.     \a constraint is an optional argument that defines a special constrain     when calculating the effective size hint. By default, \a constraint is     QSizeF(-1, -1), which means there is no constraint to the size hint.      If you want to specify the widget's size hint for a given width or height,     you can provide the fixed dimension in \a constraint. This is useful for     widgets that can grow only either vertically or horizontally, and need to     set either their width or their height to a special value.      For example, a text paragraph item fit into a column width of 200 may     grow vertically. You can pass QSizeF(200, -1) as a constraint to get a     suitable minimum, preferred and maximum height).      You can adjust the effective size hint by reimplementing sizeHint()     in a QGraphicsLayoutItem subclass, or by calling one of the following     functions: setMinimumSize(), setPreferredSize, or setMaximumSize()     (or a combination of both).      This function caches each of the size hints and guarantees that     sizeHint() will be called only once for each value of \a which - unless     \a constraint is not specified and updateGeometry() has been called.      \sa sizeHint() */
end_comment
begin_function
DECL|function|effectiveSizeHint
name|QSizeF
name|QGraphicsLayoutItem
operator|::
name|effectiveSizeHint
parameter_list|(
name|Qt
operator|::
name|SizeHint
name|which
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|constraint
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|userSizeHints
operator|&&
name|constraint
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|constraint
return|;
comment|// ### should respect size policy???
return|return
name|d_ptr
operator|->
name|effectiveSizeHints
argument_list|(
name|constraint
argument_list|)
index|[
name|which
index|]
return|;
block|}
end_function
begin_comment
comment|/*!     This virtual function discards any cached size hint information. You     should always call this function if you change the return value of the     sizeHint() function. Subclasses must always call the base implementation     when reimplementing this function.      \sa effectiveSizeHint() */
end_comment
begin_function
DECL|function|updateGeometry
name|void
name|QGraphicsLayoutItem
operator|::
name|updateGeometry
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGraphicsLayoutItem
argument_list|)
expr_stmt|;
name|d
operator|->
name|sizeHintCacheDirty
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|sizeHintWithConstraintCacheDirty
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the parent of this QGraphicsLayoutItem, or 0 if there is no parent,     or if the parent does not inherit from QGraphicsLayoutItem     (QGraphicsLayoutItem is often used through multiple inheritance with     QObject-derived classes).      \sa setParentLayoutItem() */
end_comment
begin_function
DECL|function|parentLayoutItem
name|QGraphicsLayoutItem
modifier|*
name|QGraphicsLayoutItem
operator|::
name|parentLayoutItem
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|parent
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the parent of this QGraphicsLayoutItem to \a parent.      \sa parentLayoutItem() */
end_comment
begin_function
DECL|function|setParentLayoutItem
name|void
name|QGraphicsLayoutItem
operator|::
name|setParentLayoutItem
parameter_list|(
name|QGraphicsLayoutItem
modifier|*
name|parent
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|parent
operator|=
name|parent
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if this QGraphicsLayoutItem is a layout (e.g., is inherited     by an object that arranges other QGraphicsLayoutItem objects); otherwise     returns false.      \sa QGraphicsLayout */
end_comment
begin_function
DECL|function|isLayout
name|bool
name|QGraphicsLayoutItem
operator|::
name|isLayout
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|isLayout
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Returns whether a layout should delete this item in its destructor.     If its true, then the layout will delete it. If its false, then it is     assumed that another object has the ownership of it, and the layout won't     delete this item.      If the item inherits both QGraphicsItem and QGraphicsLayoutItem (such     as QGraphicsWidget does) the item is really part of two ownership     hierarchies. This property informs what the layout should do with its     child items when it is destructed. In the case of QGraphicsWidget, it     is preferred that when the layout is deleted it won't delete its children     (since they are also part of the graphics item hierarchy).      By default this value is initialized to false in QGraphicsLayoutItem,     but it is overridden by QGraphicsLayout to return true. This is because     QGraphicsLayout is not normally part of the QGraphicsItem hierarchy, so the     parent layout should delete it.     Subclasses might override this default behaviour by calling     setOwnedByLayout(true).      \sa setOwnedByLayout() */
end_comment
begin_function
DECL|function|ownedByLayout
name|bool
name|QGraphicsLayoutItem
operator|::
name|ownedByLayout
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|ownedByLayout
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.6      Sets whether a layout should delete this item in its destructor or not.     \a ownership must be true to in order for the layout to delete it.     \sa ownedByLayout() */
end_comment
begin_function
DECL|function|setOwnedByLayout
name|void
name|QGraphicsLayoutItem
operator|::
name|setOwnedByLayout
parameter_list|(
name|bool
name|ownership
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|ownedByLayout
operator|=
name|ownership
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!  * Returns the QGraphicsItem that this layout item represents.  * For QGraphicsWidget it will return itself. For custom items it can return an  * aggregated value.  *  * \sa setGraphicsItem()  */
end_comment
begin_function
DECL|function|graphicsItem
name|QGraphicsItem
modifier|*
name|QGraphicsLayoutItem
operator|::
name|graphicsItem
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|graphicsItem
return|;
block|}
end_function
begin_comment
comment|/*!  * If the QGraphicsLayoutItem represents a QGraphicsItem, and it wants to take  * advantage of the automatic reparenting capabilities of QGraphicsLayout it  * should set this value.  * Note that if you delete \a item and not delete the layout item, you are  * responsible of calling setGraphicsItem(0) in order to avoid having a  * dangling pointer.  *  * \sa graphicsItem()  */
end_comment
begin_function
DECL|function|setGraphicsItem
name|void
name|QGraphicsLayoutItem
operator|::
name|setGraphicsItem
parameter_list|(
name|QGraphicsItem
modifier|*
name|item
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|graphicsItem
operator|=
name|item
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_GRAPHICSVIEW
end_comment
end_unit
