begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*!     \class QGraphicsGridLayout     \brief The QGraphicsGridLayout class provides a grid layout for managing     widgets in Graphics View.     \since 4.4      \ingroup graphicsview-api     \inmodule QtWidgets      The most common way to use QGraphicsGridLayout is to construct an object     on the heap with no parent, add widgets and layouts by calling addItem(),     and finally assign the layout to a widget by calling     QGraphicsWidget::setLayout(). QGraphicsGridLayout automatically computes     the dimensions of the grid as you add items.      \snippet code/src_gui_graphicsview_qgraphicsgridlayout.cpp 0      The layout takes ownership of the items. In some cases when the layout     item also inherits from QGraphicsItem (such as QGraphicsWidget) there will be a     ambiguity in ownership because the layout item belongs to two ownership hierarchies.     See the documentation of QGraphicsLayoutItem::setOwnedByLayout() how to handle     this.     You can access each item in the layout by calling count() and itemAt(). Calling     removeAt() will remove an item from the layout, without     destroying it.      \section1 Size Hints and Size Policies in QGraphicsGridLayout      QGraphicsGridLayout respects each item's size hints and size policies,     and when a cell in the grid has more space than the items can fill, each item     is arranged according to the layout's alignment for that item. You can set     an alignment for each item by calling setAlignment(), and check the     alignment for any item by calling alignment(). You can also set the alignment     for an entire row or column by calling setRowAlignment() and setColumnAlignment()     respectively.  By default, items are aligned to the top left.       \sa QGraphicsLinearLayout, QGraphicsWidget */
end_comment
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qwidget.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicslayout_p.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicslayoutitem.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicsgridlayout.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicswidget.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicsgridlayoutengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicslayoutstyleinfo_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_DEBUG
end_ifdef
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QGraphicsGridLayoutPrivate
class|class
name|QGraphicsGridLayoutPrivate
super|:
specifier|public
name|QGraphicsLayoutPrivate
block|{
public|public:
DECL|function|QGraphicsGridLayoutPrivate
name|QGraphicsGridLayoutPrivate
parameter_list|()
member_init_list|:
name|m_styleInfo
argument_list|(
literal|0
argument_list|)
block|{ }
name|QGraphicsLayoutStyleInfo
modifier|*
name|styleInfo
parameter_list|()
specifier|const
function_decl|;
DECL|member|m_styleInfo
specifier|mutable
name|QGraphicsLayoutStyleInfo
modifier|*
name|m_styleInfo
decl_stmt|;
DECL|member|engine
name|QGraphicsGridLayoutEngine
name|engine
decl_stmt|;
ifdef|#
directive|ifdef
name|QGRIDLAYOUTENGINE_DEBUG
name|void
name|dump
parameter_list|(
name|int
name|indent
parameter_list|)
specifier|const
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_function
DECL|function|styleInfo
name|QGraphicsLayoutStyleInfo
modifier|*
name|QGraphicsGridLayoutPrivate
operator|::
name|styleInfo
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_styleInfo
condition|)
name|m_styleInfo
operator|=
operator|new
name|QGraphicsLayoutStyleInfo
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|m_styleInfo
operator|->
name|updateChanged
argument_list|(
name|QAbstractLayoutStyleInfo
operator|::
name|Unknown
argument_list|)
expr_stmt|;
return|return
name|m_styleInfo
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs a QGraphicsGridLayout instance.  \a parent is passed to     QGraphicsLayout's constructor. */
end_comment
begin_constructor
DECL|function|QGraphicsGridLayout
name|QGraphicsGridLayout
operator|::
name|QGraphicsGridLayout
parameter_list|(
name|QGraphicsLayoutItem
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGraphicsLayout
argument_list|(
operator|*
operator|new
name|QGraphicsGridLayoutPrivate
argument_list|()
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the QGraphicsGridLayout object. */
end_comment
begin_destructor
DECL|function|~QGraphicsGridLayout
name|QGraphicsGridLayout
operator|::
name|~
name|QGraphicsGridLayout
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QGraphicsLayoutItem
modifier|*
name|item
init|=
name|itemAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// The following lines can be removed, but this removes the item
comment|// from the layout more efficiently than the implementation of
comment|// ~QGraphicsLayoutItem.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
condition|)
block|{
name|item
operator|->
name|setParentLayoutItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|ownedByLayout
argument_list|()
condition|)
operator|delete
name|item
expr_stmt|;
block|}
block|}
block|}
end_destructor
begin_comment
comment|/*!     Adds \a item to the grid on \a row and \a column. You can specify a     \a rowSpan and \a columnSpan and an optional \a alignment. */
end_comment
begin_function
DECL|function|addItem
name|void
name|QGraphicsGridLayout
operator|::
name|addItem
parameter_list|(
name|QGraphicsLayoutItem
modifier|*
name|item
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|rowSpan
parameter_list|,
name|int
name|columnSpan
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|column
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsGridLayout::addItem: invalid row/column: %d"
argument_list|,
name|row
operator|<
literal|0
condition|?
name|row
else|:
name|column
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|columnSpan
operator|<
literal|1
operator|||
name|rowSpan
operator|<
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsGridLayout::addItem: invalid row span/column span: %d"
argument_list|,
name|rowSpan
operator|<
literal|1
condition|?
name|rowSpan
else|:
name|columnSpan
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|item
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsGridLayout::addItem: cannot add null item"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|item
operator|==
name|this
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsGridLayout::addItem: cannot insert itself"
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|addChildLayoutItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|QGraphicsGridLayoutEngineItem
modifier|*
name|gridEngineItem
init|=
operator|new
name|QGraphicsGridLayoutEngineItem
argument_list|(
name|item
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|rowSpan
argument_list|,
name|columnSpan
argument_list|,
name|alignment
argument_list|)
decl_stmt|;
name|d
operator|->
name|engine
operator|.
name|insertItem
argument_list|(
name|gridEngineItem
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QGraphicsGridLayout::addItem(QGraphicsLayoutItem *item, int row, int column, Qt::Alignment alignment = 0)      Adds \a item to the grid on \a row and \a column. You can specify     an optional \a alignment for \a item. */
end_comment
begin_comment
comment|/*!     Sets the default horizontal spacing for the grid layout to \a spacing. */
end_comment
begin_function
DECL|function|setHorizontalSpacing
name|void
name|QGraphicsGridLayout
operator|::
name|setHorizontalSpacing
parameter_list|(
name|qreal
name|spacing
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setSpacing
argument_list|(
name|spacing
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the default horizontal spacing for the grid layout. */
end_comment
begin_function
DECL|function|horizontalSpacing
name|qreal
name|QGraphicsGridLayout
operator|::
name|horizontalSpacing
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|spacing
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|d
operator|->
name|styleInfo
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the default vertical spacing for the grid layout to \a spacing. */
end_comment
begin_function
DECL|function|setVerticalSpacing
name|void
name|QGraphicsGridLayout
operator|::
name|setVerticalSpacing
parameter_list|(
name|qreal
name|spacing
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setSpacing
argument_list|(
name|spacing
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the default vertical spacing for the grid layout. */
end_comment
begin_function
DECL|function|verticalSpacing
name|qreal
name|QGraphicsGridLayout
operator|::
name|verticalSpacing
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|spacing
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|,
name|d
operator|->
name|styleInfo
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the grid layout's default spacing, both vertical and     horizontal, to \a spacing.      \sa rowSpacing(), columnSpacing() */
end_comment
begin_function
DECL|function|setSpacing
name|void
name|QGraphicsGridLayout
operator|::
name|setSpacing
parameter_list|(
name|qreal
name|spacing
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setSpacing
argument_list|(
name|spacing
argument_list|,
name|Qt
operator|::
name|Horizontal
operator||
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the spacing for \a row to \a spacing. */
end_comment
begin_function
DECL|function|setRowSpacing
name|void
name|QGraphicsGridLayout
operator|::
name|setRowSpacing
parameter_list|(
name|int
name|row
parameter_list|,
name|qreal
name|spacing
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSpacing
argument_list|(
name|row
argument_list|,
name|spacing
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the row spacing for \a row. */
end_comment
begin_function
DECL|function|rowSpacing
name|qreal
name|QGraphicsGridLayout
operator|::
name|rowSpacing
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowSpacing
argument_list|(
name|row
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the spacing for \a column to \a spacing. */
end_comment
begin_function
DECL|function|setColumnSpacing
name|void
name|QGraphicsGridLayout
operator|::
name|setColumnSpacing
parameter_list|(
name|int
name|column
parameter_list|,
name|qreal
name|spacing
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSpacing
argument_list|(
name|column
argument_list|,
name|spacing
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the column spacing for \a column. */
end_comment
begin_function
DECL|function|columnSpacing
name|qreal
name|QGraphicsGridLayout
operator|::
name|columnSpacing
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowSpacing
argument_list|(
name|column
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the stretch factor for \a row to \a stretch. */
end_comment
begin_function
DECL|function|setRowStretchFactor
name|void
name|QGraphicsGridLayout
operator|::
name|setRowStretchFactor
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowStretchFactor
argument_list|(
name|row
argument_list|,
name|stretch
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the stretch factor for \a row. */
end_comment
begin_function
DECL|function|rowStretchFactor
name|int
name|QGraphicsGridLayout
operator|::
name|rowStretchFactor
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowStretchFactor
argument_list|(
name|row
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the stretch factor for \a column to \a stretch. */
end_comment
begin_function
DECL|function|setColumnStretchFactor
name|void
name|QGraphicsGridLayout
operator|::
name|setColumnStretchFactor
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowStretchFactor
argument_list|(
name|column
argument_list|,
name|stretch
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the stretch factor for \a column. */
end_comment
begin_function
DECL|function|columnStretchFactor
name|int
name|QGraphicsGridLayout
operator|::
name|columnStretchFactor
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowStretchFactor
argument_list|(
name|column
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the minimum height for row, \a row, to \a height. */
end_comment
begin_function
DECL|function|setRowMinimumHeight
name|void
name|QGraphicsGridLayout
operator|::
name|setRowMinimumHeight
parameter_list|(
name|int
name|row
parameter_list|,
name|qreal
name|height
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|row
argument_list|,
name|height
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the minimum height for row, \a row. */
end_comment
begin_function
DECL|function|rowMinimumHeight
name|qreal
name|QGraphicsGridLayout
operator|::
name|rowMinimumHeight
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|row
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the preferred height for row, \a row, to \a height. */
end_comment
begin_function
DECL|function|setRowPreferredHeight
name|void
name|QGraphicsGridLayout
operator|::
name|setRowPreferredHeight
parameter_list|(
name|int
name|row
parameter_list|,
name|qreal
name|height
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSizeHint
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|,
name|row
argument_list|,
name|height
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the preferred height for row, \a row. */
end_comment
begin_function
DECL|function|rowPreferredHeight
name|qreal
name|QGraphicsGridLayout
operator|::
name|rowPreferredHeight
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowSizeHint
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|,
name|row
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the maximum height for row, \a row, to \a height. */
end_comment
begin_function
DECL|function|setRowMaximumHeight
name|void
name|QGraphicsGridLayout
operator|::
name|setRowMaximumHeight
parameter_list|(
name|int
name|row
parameter_list|,
name|qreal
name|height
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|row
argument_list|,
name|height
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the maximum height for row, \a row. */
end_comment
begin_function
DECL|function|rowMaximumHeight
name|qreal
name|QGraphicsGridLayout
operator|::
name|rowMaximumHeight
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowSizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|row
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the fixed height for row, \a row, to \a height. */
end_comment
begin_function
DECL|function|setRowFixedHeight
name|void
name|QGraphicsGridLayout
operator|::
name|setRowFixedHeight
parameter_list|(
name|int
name|row
parameter_list|,
name|qreal
name|height
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|row
argument_list|,
name|height
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|row
argument_list|,
name|height
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the minimum width for \a column to \a width. */
end_comment
begin_function
DECL|function|setColumnMinimumWidth
name|void
name|QGraphicsGridLayout
operator|::
name|setColumnMinimumWidth
parameter_list|(
name|int
name|column
parameter_list|,
name|qreal
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|column
argument_list|,
name|width
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the minimum width for \a column. */
end_comment
begin_function
DECL|function|columnMinimumWidth
name|qreal
name|QGraphicsGridLayout
operator|::
name|columnMinimumWidth
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|column
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the preferred width for \a column to \a width. */
end_comment
begin_function
DECL|function|setColumnPreferredWidth
name|void
name|QGraphicsGridLayout
operator|::
name|setColumnPreferredWidth
parameter_list|(
name|int
name|column
parameter_list|,
name|qreal
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSizeHint
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|,
name|column
argument_list|,
name|width
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the preferred width for \a column. */
end_comment
begin_function
DECL|function|columnPreferredWidth
name|qreal
name|QGraphicsGridLayout
operator|::
name|columnPreferredWidth
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowSizeHint
argument_list|(
name|Qt
operator|::
name|PreferredSize
argument_list|,
name|column
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the maximum width of \a column to \a width. */
end_comment
begin_function
DECL|function|setColumnMaximumWidth
name|void
name|QGraphicsGridLayout
operator|::
name|setColumnMaximumWidth
parameter_list|(
name|int
name|column
parameter_list|,
name|qreal
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|column
argument_list|,
name|width
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the maximum width for \a column. */
end_comment
begin_function
DECL|function|columnMaximumWidth
name|qreal
name|QGraphicsGridLayout
operator|::
name|columnMaximumWidth
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowSizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|column
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the fixed width of \a column to \a width. */
end_comment
begin_function
DECL|function|setColumnFixedWidth
name|void
name|QGraphicsGridLayout
operator|::
name|setColumnFixedWidth
parameter_list|(
name|int
name|column
parameter_list|,
name|qreal
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|column
argument_list|,
name|width
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowSizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|,
name|column
argument_list|,
name|width
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the alignment of \a row to \a alignment. */
end_comment
begin_function
DECL|function|setRowAlignment
name|void
name|QGraphicsGridLayout
operator|::
name|setRowAlignment
parameter_list|(
name|int
name|row
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowAlignment
argument_list|(
name|row
argument_list|,
name|alignment
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the alignment of \a row. */
end_comment
begin_function
DECL|function|rowAlignment
name|Qt
operator|::
name|Alignment
name|QGraphicsGridLayout
operator|::
name|rowAlignment
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowAlignment
argument_list|(
name|row
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the alignment for \a column to \a alignment. */
end_comment
begin_function
DECL|function|setColumnAlignment
name|void
name|QGraphicsGridLayout
operator|::
name|setColumnAlignment
parameter_list|(
name|int
name|column
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setRowAlignment
argument_list|(
name|column
argument_list|,
name|alignment
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the alignment for \a column. */
end_comment
begin_function
DECL|function|columnAlignment
name|Qt
operator|::
name|Alignment
name|QGraphicsGridLayout
operator|::
name|columnAlignment
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|rowAlignment
argument_list|(
name|column
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the alignment for \a item to \a alignment. */
end_comment
begin_function
DECL|function|setAlignment
name|void
name|QGraphicsGridLayout
operator|::
name|setAlignment
parameter_list|(
name|QGraphicsLayoutItem
modifier|*
name|item
parameter_list|,
name|Qt
operator|::
name|Alignment
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setAlignment
argument_list|(
name|item
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the alignment for \a item. */
end_comment
begin_function
DECL|function|alignment
name|Qt
operator|::
name|Alignment
name|QGraphicsGridLayout
operator|::
name|alignment
parameter_list|(
name|QGraphicsLayoutItem
modifier|*
name|item
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|alignment
argument_list|(
name|item
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of rows in the grid layout. This is always one more     than the index of the last row that is occupied by a layout item (empty     rows are counted except for those at the end). */
end_comment
begin_function
DECL|function|rowCount
name|int
name|QGraphicsGridLayout
operator|::
name|rowCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|effectiveLastRow
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
operator|+
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of columns in the grid layout. This is always one more     than the index of  the last column that is occupied by a layout item (empty     columns are counted except for those at the end). */
end_comment
begin_function
DECL|function|columnCount
name|int
name|QGraphicsGridLayout
operator|::
name|columnCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|effectiveLastRow
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|+
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the layout item at (\a row, \a column). */
end_comment
begin_function
DECL|function|itemAt
name|QGraphicsLayoutItem
modifier|*
name|QGraphicsGridLayout
operator|::
name|itemAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|row
operator|>=
name|rowCount
argument_list|()
operator|||
name|column
operator|<
literal|0
operator|||
name|column
operator|>=
name|columnCount
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsGridLayout::itemAt: invalid row, column %d, %d"
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|QGraphicsGridLayoutEngineItem
modifier|*
name|engineItem
init|=
cast|static_cast
argument_list|<
name|QGraphicsGridLayoutEngineItem
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|engine
operator|.
name|itemAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|)
condition|)
return|return
name|engineItem
operator|->
name|layoutItem
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the number of layout items in this grid layout. */
end_comment
begin_function
DECL|function|count
name|int
name|QGraphicsGridLayout
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|itemCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the layout item at \a index, or 0 if there is no layout item at     this index. */
end_comment
begin_function
DECL|function|itemAt
name|QGraphicsLayoutItem
modifier|*
name|QGraphicsGridLayout
operator|::
name|itemAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|d
operator|->
name|engine
operator|.
name|itemCount
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsGridLayout::itemAt: invalid index %d"
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QGraphicsLayoutItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QGraphicsGridLayoutEngineItem
modifier|*
name|engineItem
init|=
cast|static_cast
argument_list|<
name|QGraphicsGridLayoutEngineItem
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|engine
operator|.
name|itemAt
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
name|item
operator|=
name|engineItem
operator|->
name|layoutItem
argument_list|()
expr_stmt|;
return|return
name|item
return|;
block|}
end_function
begin_comment
comment|/*!     Removes the layout item at \a index without destroying it. Ownership of     the item is transferred to the caller.      \sa addItem() */
end_comment
begin_function
DECL|function|removeAt
name|void
name|QGraphicsGridLayout
operator|::
name|removeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|d
operator|->
name|engine
operator|.
name|itemCount
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsGridLayout::removeAt: invalid index %d"
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|QGraphicsGridLayoutEngineItem
modifier|*
name|gridItem
init|=
cast|static_cast
argument_list|<
name|QGraphicsGridLayoutEngineItem
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|engine
operator|.
name|itemAt
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|QGraphicsLayoutItem
modifier|*
name|layoutItem
init|=
name|gridItem
operator|->
name|layoutItem
argument_list|()
condition|)
name|layoutItem
operator|->
name|setParentLayoutItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|removeItem
argument_list|(
name|gridItem
argument_list|)
expr_stmt|;
comment|// recalculate rowInfo.count if we remove an item that is on the right/bottommost row
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NOrientations
condition|;
operator|++
name|j
control|)
block|{
comment|// 0: Hor, 1: Ver
specifier|const
name|Qt
operator|::
name|Orientation
name|orient
init|=
operator|(
name|j
operator|==
literal|0
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
operator|)
decl_stmt|;
specifier|const
name|int
name|oldCount
init|=
name|d
operator|->
name|engine
operator|.
name|rowCount
argument_list|(
name|orient
argument_list|)
decl_stmt|;
if|if
condition|(
name|gridItem
operator|->
name|lastRow
argument_list|(
name|orient
argument_list|)
operator|==
name|oldCount
operator|-
literal|1
condition|)
block|{
specifier|const
name|int
name|newCount
init|=
name|d
operator|->
name|engine
operator|.
name|effectiveLastRow
argument_list|(
name|orient
argument_list|)
operator|+
literal|1
decl_stmt|;
name|d
operator|->
name|engine
operator|.
name|removeRows
argument_list|(
name|newCount
argument_list|,
name|oldCount
operator|-
name|newCount
argument_list|,
name|orient
argument_list|)
expr_stmt|;
block|}
block|}
operator|delete
name|gridItem
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Removes the layout item \a item without destroying it.     Ownership of the item is transferred to the caller.      \sa addItem() */
end_comment
begin_function
DECL|function|removeItem
name|void
name|QGraphicsGridLayout
operator|::
name|removeItem
parameter_list|(
name|QGraphicsLayoutItem
modifier|*
name|item
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|d
operator|->
name|engine
operator|.
name|indexOf
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|invalidate
name|void
name|QGraphicsGridLayout
operator|::
name|invalidate
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|invalidate
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_styleInfo
condition|)
name|d
operator|->
name|m_styleInfo
operator|->
name|invalidate
argument_list|()
expr_stmt|;
name|QGraphicsLayout
operator|::
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QGRIDLAYOUTENGINE_DEBUG
end_ifdef
begin_function
DECL|function|dump
name|void
name|QGraphicsGridLayoutPrivate
operator|::
name|dump
parameter_list|(
name|int
name|indent
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|qt_graphicsLayoutDebug
argument_list|()
condition|)
block|{
name|engine
operator|.
name|dump
argument_list|(
name|indent
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Sets the bounding geometry of the grid layout to \a rect. */
end_comment
begin_function
DECL|function|setGeometry
name|void
name|QGraphicsGridLayout
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|QGraphicsLayout
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|QRectF
name|effectiveRect
init|=
name|geometry
argument_list|()
decl_stmt|;
name|qreal
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|getContentsMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|visualDir
init|=
name|d
operator|->
name|visualDirection
argument_list|()
decl_stmt|;
name|d
operator|->
name|engine
operator|.
name|setVisualDirection
argument_list|(
name|visualDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|visualDir
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|qSwap
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|effectiveRect
operator|.
name|adjust
argument_list|(
operator|+
name|left
argument_list|,
operator|+
name|top
argument_list|,
operator|-
name|right
argument_list|,
operator|-
name|bottom
argument_list|)
expr_stmt|;
name|d
operator|->
name|engine
operator|.
name|setGeometries
argument_list|(
name|effectiveRect
argument_list|,
name|d
operator|->
name|styleInfo
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QGRIDLAYOUTENGINE_DEBUG
if|if
condition|(
name|qt_graphicsLayoutDebug
argument_list|()
condition|)
block|{
specifier|static
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|qDebug
argument_list|(
literal|"==== BEGIN DUMP OF QGraphicsGridLayout (%d)===="
argument_list|,
name|counter
operator|++
argument_list|)
expr_stmt|;
name|d
operator|->
name|dump
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"==== END DUMP OF QGraphicsGridLayout ===="
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSizeF
name|QGraphicsGridLayout
operator|::
name|sizeHint
parameter_list|(
name|Qt
operator|::
name|SizeHint
name|which
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|constraint
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsGridLayout
argument_list|)
expr_stmt|;
name|qreal
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|getContentsMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
specifier|const
name|QSizeF
name|extraMargins
argument_list|(
name|left
operator|+
name|right
argument_list|,
name|top
operator|+
name|bottom
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|engine
operator|.
name|sizeHint
argument_list|(
name|which
argument_list|,
name|constraint
operator|-
name|extraMargins
argument_list|,
name|d
operator|->
name|styleInfo
argument_list|()
argument_list|)
operator|+
name|extraMargins
return|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// ### kill? (implement and kill?)
end_comment
begin_comment
unit|QRect QGraphicsGridLayout::cellRect(int row, int column, int rowSpan, int columnSpan) const {     Q_D(const QGraphicsGridLayout);     return QRect();
comment|//    return d->engine.cellRect(parentLayoutable(), contentsGeometry(), row, column, rowSpan, columnSpan);
end_comment
begin_endif
unit|}  QSizePolicy::ControlTypes QGraphicsGridLayout::controlTypes(LayoutSide side) const {     Q_D(const QGraphicsGridLayout);     return d->engine.controlTypes(side); }
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_GRAPHICSVIEW
end_comment
end_unit
