begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qnumeric.h>
end_include
begin_include
include|#
directive|include
file|"qgraphicswidget_p.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicslayoutitem_p.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicslayout.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicsscene_p.h"
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsscene.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QStyleOptionTitleBar>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QGraphicsSceneMouseEvent>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_DEAD_CODE_FROM_QT4_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qmacstyle_mac_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|init
name|void
name|QGraphicsWidgetPrivate
operator|::
name|init
parameter_list|(
name|QGraphicsItem
modifier|*
name|parentItem
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|wFlags
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|attributes
operator|=
literal|0
expr_stmt|;
name|isWidget
operator|=
literal|1
expr_stmt|;
comment|// QGraphicsItem::isWidget() returns true.
name|focusNext
operator|=
name|focusPrev
operator|=
name|q
expr_stmt|;
name|focusPolicy
operator|=
name|Qt
operator|::
name|NoFocus
expr_stmt|;
name|adjustWindowFlags
argument_list|(
operator|&
name|wFlags
argument_list|)
expr_stmt|;
name|windowFlags
operator|=
name|wFlags
expr_stmt|;
name|q
operator|->
name|setParentItem
argument_list|(
name|parentItem
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|DefaultType
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setGraphicsItem
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|resolveLayoutDirection
argument_list|()
expr_stmt|;
name|q
operator|->
name|unsetWindowFrameMargins
argument_list|()
expr_stmt|;
name|flags
operator||=
name|QGraphicsItem
operator|::
name|ItemUsesExtendedStyleOption
expr_stmt|;
name|flags
operator||=
name|QGraphicsItem
operator|::
name|ItemSendsGeometryChanges
expr_stmt|;
if|if
condition|(
name|windowFlags
operator|&
name|Qt
operator|::
name|Window
condition|)
name|flags
operator||=
name|QGraphicsItem
operator|::
name|ItemIsPanel
expr_stmt|;
block|}
end_function
begin_function
DECL|function|titleBarHeight
name|qreal
name|QGraphicsWidgetPrivate
operator|::
name|titleBarHeight
parameter_list|(
specifier|const
name|QStyleOptionTitleBar
modifier|&
name|options
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|int
name|height
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|,
operator|&
name|options
argument_list|)
decl_stmt|;
return|return
operator|(
name|qreal
operator|)
name|height
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QGraphicsWidgetPrivate
name|QGraphicsWidgetPrivate
operator|::
name|QGraphicsWidgetPrivate
parameter_list|()
member_init_list|:
name|margins
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|layout
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|inheritedPaletteResolveMask
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|inheritedFontResolveMask
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|inSetGeometry
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|polished
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|inSetPos
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|autoFillBackground
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|focusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
member_init_list|,
name|focusNext
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|focusPrev
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|windowFlags
argument_list|()
member_init_list|,
name|windowData
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|setWindowFrameMargins
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|windowFrameMargins
argument_list|(
literal|nullptr
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QGraphicsWidgetPrivate
name|QGraphicsWidgetPrivate
operator|::
name|~
name|QGraphicsWidgetPrivate
parameter_list|()
block|{
comment|// Remove any lazily allocated data
operator|delete
index|[]
name|margins
expr_stmt|;
operator|delete
index|[]
name|windowFrameMargins
expr_stmt|;
operator|delete
name|windowData
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \internal       Ensures that margins is allocated.      This function must be called before any dereferencing. */
end_comment
begin_function
DECL|function|ensureMargins
name|void
name|QGraphicsWidgetPrivate
operator|::
name|ensureMargins
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|margins
condition|)
block|{
name|margins
operator|=
operator|new
name|qreal
index|[
literal|4
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|margins
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal       Ensures that windowFrameMargins is allocated.      This function must be called before any dereferencing. */
end_comment
begin_function
DECL|function|ensureWindowFrameMargins
name|void
name|QGraphicsWidgetPrivate
operator|::
name|ensureWindowFrameMargins
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|windowFrameMargins
condition|)
block|{
name|windowFrameMargins
operator|=
operator|new
name|qreal
index|[
literal|4
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|windowFrameMargins
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal       Ensures that windowData is allocated.      This function must be called before any dereferencing. */
end_comment
begin_function
DECL|function|ensureWindowData
name|void
name|QGraphicsWidgetPrivate
operator|::
name|ensureWindowData
parameter_list|()
block|{
if|if
condition|(
operator|!
name|windowData
condition|)
name|windowData
operator|=
operator|new
name|WindowData
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPalette_helper
name|void
name|QGraphicsWidgetPrivate
operator|::
name|setPalette_helper
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|palette
parameter_list|)
block|{
if|if
condition|(
name|this
operator|->
name|palette
operator|==
name|palette
operator|&&
name|this
operator|->
name|palette
operator|.
name|resolve
argument_list|()
operator|==
name|palette
operator|.
name|resolve
argument_list|()
condition|)
return|return;
name|updatePalette
argument_list|(
name|palette
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resolvePalette
name|void
name|QGraphicsWidgetPrivate
operator|::
name|resolvePalette
parameter_list|(
name|uint
name|inheritedMask
parameter_list|)
block|{
name|inheritedPaletteResolveMask
operator|=
name|inheritedMask
expr_stmt|;
name|QPalette
name|naturalPalette
init|=
name|naturalWidgetPalette
argument_list|()
decl_stmt|;
name|QPalette
name|resolvedPalette
init|=
name|palette
operator|.
name|resolve
argument_list|(
name|naturalPalette
argument_list|)
decl_stmt|;
name|updatePalette
argument_list|(
name|resolvedPalette
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updatePalette
name|void
name|QGraphicsWidgetPrivate
operator|::
name|updatePalette
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|palette
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
comment|// Update local palette setting.
name|this
operator|->
name|palette
operator|=
name|palette
expr_stmt|;
comment|// Calculate new mask.
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WindowPropagation
argument_list|)
condition|)
name|inheritedPaletteResolveMask
operator|=
literal|0
expr_stmt|;
name|int
name|mask
init|=
name|palette
operator|.
name|resolve
argument_list|()
operator||
name|inheritedPaletteResolveMask
decl_stmt|;
comment|// Propagate to children.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QGraphicsItem
modifier|*
name|item
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|isWidget
argument_list|()
condition|)
block|{
name|QGraphicsWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QGraphicsWidget
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|||
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WindowPropagation
argument_list|)
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|resolvePalette
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|item
operator|->
name|d_ptr
operator|->
name|resolvePalette
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Notify change.
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|PaletteChange
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setLayoutDirection_helper
name|void
name|QGraphicsWidgetPrivate
operator|::
name|setLayoutDirection_helper
parameter_list|(
name|Qt
operator|::
name|LayoutDirection
name|direction
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
operator|==
operator|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_RightToLeft
argument_list|)
operator|)
condition|)
return|return;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_RightToLeft
argument_list|,
operator|(
name|direction
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
argument_list|)
expr_stmt|;
comment|// Propagate this change to all children.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QGraphicsItem
modifier|*
name|item
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|isWidget
argument_list|()
condition|)
block|{
name|QGraphicsWidget
modifier|*
name|widget
init|=
cast|static_cast
argument_list|<
name|QGraphicsWidget
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|parentWidget
argument_list|()
operator|&&
operator|!
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetLayoutDirection
argument_list|)
condition|)
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|setLayoutDirection_helper
argument_list|(
name|direction
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Send the notification event to this widget item.
name|QEvent
name|e
argument_list|(
name|QEvent
operator|::
name|LayoutDirectionChange
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resolveLayoutDirection
name|void
name|QGraphicsWidgetPrivate
operator|::
name|resolveLayoutDirection
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetLayoutDirection
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|QGraphicsWidget
modifier|*
name|parentWidget
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
name|setLayoutDirection_helper
argument_list|(
name|parentWidget
operator|->
name|layoutDirection
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scene
condition|)
block|{
comment|// ### shouldn't the scene have a layoutdirection really? how does
comment|// ### QGraphicsWidget get changes from QApplication::layoutDirection?
name|setLayoutDirection_helper
argument_list|(
name|QApplication
operator|::
name|layoutDirection
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setLayoutDirection_helper
argument_list|(
name|QApplication
operator|::
name|layoutDirection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|naturalWidgetPalette
name|QPalette
name|QGraphicsWidgetPrivate
operator|::
name|naturalWidgetPalette
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|QPalette
name|palette
decl_stmt|;
if|if
condition|(
name|QGraphicsWidget
modifier|*
name|parent
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
name|palette
operator|=
name|parent
operator|->
name|palette
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scene
condition|)
block|{
name|palette
operator|=
name|scene
operator|->
name|palette
argument_list|()
expr_stmt|;
block|}
name|palette
operator|.
name|resolve
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|palette
return|;
block|}
end_function
begin_function
DECL|function|setFont_helper
name|void
name|QGraphicsWidgetPrivate
operator|::
name|setFont_helper
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
if|if
condition|(
name|this
operator|->
name|font
operator|==
name|font
operator|&&
name|this
operator|->
name|font
operator|.
name|resolve
argument_list|()
operator|==
name|font
operator|.
name|resolve
argument_list|()
condition|)
return|return;
name|updateFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resolveFont
name|void
name|QGraphicsWidgetPrivate
operator|::
name|resolveFont
parameter_list|(
name|uint
name|inheritedMask
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|inheritedFontResolveMask
operator|=
name|inheritedMask
expr_stmt|;
if|if
condition|(
name|QGraphicsWidget
modifier|*
name|p
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
name|inheritedFontResolveMask
operator||=
name|p
operator|->
name|d_func
argument_list|()
operator|->
name|inheritedFontResolveMask
expr_stmt|;
name|QFont
name|naturalFont
init|=
name|naturalWidgetFont
argument_list|()
decl_stmt|;
name|QFont
name|resolvedFont
init|=
name|font
operator|.
name|resolve
argument_list|(
name|naturalFont
argument_list|)
decl_stmt|;
name|updateFont
argument_list|(
name|resolvedFont
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateFont
name|void
name|QGraphicsWidgetPrivate
operator|::
name|updateFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
comment|// Update the local font setting.
name|this
operator|->
name|font
operator|=
name|font
expr_stmt|;
comment|// Calculate new mask.
if|if
condition|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WindowPropagation
argument_list|)
condition|)
name|inheritedFontResolveMask
operator|=
literal|0
expr_stmt|;
name|int
name|mask
init|=
name|font
operator|.
name|resolve
argument_list|()
operator||
name|inheritedFontResolveMask
decl_stmt|;
comment|// Propagate to children.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QGraphicsItem
modifier|*
name|item
init|=
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|isWidget
argument_list|()
condition|)
block|{
name|QGraphicsWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QGraphicsWidget
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|->
name|isWindow
argument_list|()
operator|||
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WindowPropagation
argument_list|)
condition|)
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|resolveFont
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|item
operator|->
name|d_ptr
operator|->
name|resolveFont
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|polished
condition|)
return|return;
comment|// Notify change.
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|FontChange
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|naturalWidgetFont
name|QFont
name|QGraphicsWidgetPrivate
operator|::
name|naturalWidgetFont
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|QFont
name|naturalFont
decl_stmt|;
comment|// ### no application font support
if|if
condition|(
name|QGraphicsWidget
modifier|*
name|parent
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
name|naturalFont
operator|=
name|parent
operator|->
name|font
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scene
condition|)
block|{
name|naturalFont
operator|=
name|scene
operator|->
name|font
argument_list|()
expr_stmt|;
block|}
name|naturalFont
operator|.
name|resolve
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|naturalFont
return|;
block|}
end_function
begin_function
DECL|function|initStyleOptionTitleBar
name|void
name|QGraphicsWidgetPrivate
operator|::
name|initStyleOptionTitleBar
parameter_list|(
name|QStyleOptionTitleBar
modifier|*
name|option
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|ensureWindowData
argument_list|()
expr_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|option
operator|->
name|rect
operator|.
name|setHeight
argument_list|(
name|titleBarHeight
argument_list|(
operator|*
name|option
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|->
name|titleBarFlags
operator|=
name|windowFlags
expr_stmt|;
name|option
operator|->
name|subControls
operator|=
name|QStyle
operator|::
name|SC_TitleBarCloseButton
operator||
name|QStyle
operator|::
name|SC_TitleBarLabel
operator||
name|QStyle
operator|::
name|SC_TitleBarSysMenu
expr_stmt|;
name|option
operator|->
name|activeSubControls
operator|=
name|windowData
operator|->
name|hoveredSubControl
expr_stmt|;
name|bool
name|isActive
init|=
name|q
operator|->
name|isActiveWindow
argument_list|()
decl_stmt|;
if|if
condition|(
name|isActive
condition|)
block|{
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
name|option
operator|->
name|titleBarState
operator|=
name|Qt
operator|::
name|WindowActive
expr_stmt|;
name|option
operator|->
name|titleBarState
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
block|}
else|else
block|{
name|option
operator|->
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Active
expr_stmt|;
name|option
operator|->
name|titleBarState
operator|=
name|Qt
operator|::
name|WindowNoState
expr_stmt|;
block|}
name|QFont
name|windowTitleFont
init|=
name|QApplication
operator|::
name|font
argument_list|(
literal|"QMdiSubWindowTitleBar"
argument_list|)
decl_stmt|;
name|QRect
name|textRect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
name|option
argument_list|,
name|QStyle
operator|::
name|SC_TitleBarLabel
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|option
operator|->
name|text
operator|=
name|QFontMetrics
argument_list|(
name|windowTitleFont
argument_list|)
operator|.
name|elidedText
argument_list|(
name|windowData
operator|->
name|windowTitle
argument_list|,
name|Qt
operator|::
name|ElideRight
argument_list|,
name|textRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adjustWindowFlags
name|void
name|QGraphicsWidgetPrivate
operator|::
name|adjustWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
modifier|*
name|flags
parameter_list|)
block|{
name|bool
name|customize
init|=
operator|(
operator|*
name|flags
operator|&
operator|(
name|Qt
operator|::
name|CustomizeWindowHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator||
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
operator|)
decl_stmt|;
name|uint
name|type
init|=
operator|(
operator|*
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
operator|)
decl_stmt|;
if|if
condition|(
name|customize
condition|)
empty_stmt|;
elseif|else
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|type
operator|==
name|Qt
operator|::
name|Sheet
condition|)
operator|*
name|flags
operator||=
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowContextHelpButtonHint
expr_stmt|;
elseif|else
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Tool
condition|)
operator|*
name|flags
operator||=
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
expr_stmt|;
elseif|else
if|if
condition|(
name|type
operator|==
name|Qt
operator|::
name|Window
operator|||
name|type
operator|==
name|Qt
operator|::
name|SubWindow
condition|)
operator|*
name|flags
operator||=
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
expr_stmt|;
block|}
end_function
begin_function
DECL|function|windowFrameMouseReleaseEvent
name|void
name|QGraphicsWidgetPrivate
operator|::
name|windowFrameMouseReleaseEvent
parameter_list|(
name|QGraphicsSceneMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|ensureWindowData
argument_list|()
expr_stmt|;
if|if
condition|(
name|windowData
operator|->
name|grabbedSection
operator|!=
name|Qt
operator|::
name|NoSection
condition|)
block|{
if|if
condition|(
name|windowData
operator|->
name|grabbedSection
operator|==
name|Qt
operator|::
name|TitleBarArea
condition|)
block|{
name|windowData
operator|->
name|buttonSunken
operator|=
literal|false
expr_stmt|;
name|QStyleOptionTitleBar
name|bar
decl_stmt|;
name|initStyleOptionTitleBar
argument_list|(
operator|&
name|bar
argument_list|)
expr_stmt|;
comment|// make sure that the coordinates (rect and pos) we send to the style are positive.
name|bar
operator|.
name|rect
operator|=
name|q
operator|->
name|windowFrameRect
argument_list|()
operator|.
name|toRect
argument_list|()
expr_stmt|;
name|bar
operator|.
name|rect
operator|.
name|moveTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bar
operator|.
name|rect
operator|.
name|setHeight
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|,
operator|&
name|bar
argument_list|)
argument_list|)
expr_stmt|;
name|QPointF
name|pos
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
if|if
condition|(
name|windowFrameMargins
condition|)
block|{
name|pos
operator|.
name|rx
argument_list|()
operator|+=
name|windowFrameMargins
index|[
name|Left
index|]
expr_stmt|;
name|pos
operator|.
name|ry
argument_list|()
operator|+=
name|windowFrameMargins
index|[
name|Top
index|]
expr_stmt|;
block|}
name|bar
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_TitleBarCloseButton
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|bar
argument_list|,
name|QStyle
operator|::
name|SC_TitleBarCloseButton
argument_list|,
name|event
operator|->
name|widget
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|pos
operator|.
name|toPoint
argument_list|()
argument_list|)
condition|)
block|{
name|q
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
cast|static_cast
argument_list|<
name|QGraphicsSceneMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|buttons
argument_list|()
operator|)
condition|)
name|windowData
operator|->
name|grabbedSection
operator|=
name|Qt
operator|::
name|NoSection
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|windowFrameMousePressEvent
name|void
name|QGraphicsWidgetPrivate
operator|::
name|windowFrameMousePressEvent
parameter_list|(
name|QGraphicsSceneMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
return|return;
name|ensureWindowData
argument_list|()
expr_stmt|;
name|windowData
operator|->
name|startGeometry
operator|=
name|q
operator|->
name|geometry
argument_list|()
expr_stmt|;
name|windowData
operator|->
name|grabbedSection
operator|=
name|q
operator|->
name|windowFrameSectionAt
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|ensureWindowData
argument_list|()
expr_stmt|;
if|if
condition|(
name|windowData
operator|->
name|grabbedSection
operator|==
name|Qt
operator|::
name|TitleBarArea
operator|&&
name|windowData
operator|->
name|hoveredSubControl
operator|==
name|QStyle
operator|::
name|SC_TitleBarCloseButton
condition|)
block|{
name|windowData
operator|->
name|buttonSunken
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
name|event
operator|->
name|setAccepted
argument_list|(
name|windowData
operator|->
name|grabbedSection
operator|!=
name|Qt
operator|::
name|NoSection
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Used to calculate the   Precondition:   \a widget should support either hfw or wfh    If \a heightForWidth is set to false, this function will query the width for height   instead. \a width will then be interpreted as height, \a minh and \a maxh will be interpreted   as minimum width and maximum width.  */
end_comment
begin_function
DECL|function|minimumHeightForWidth
specifier|static
name|qreal
name|minimumHeightForWidth
parameter_list|(
name|qreal
name|width
parameter_list|,
name|qreal
name|minh
parameter_list|,
name|qreal
name|maxh
parameter_list|,
specifier|const
name|QGraphicsWidget
modifier|*
name|widget
parameter_list|,
name|bool
name|heightForWidth
init|=
literal|true
parameter_list|)
block|{
name|qreal
name|minimumHeightForWidth
init|=
operator|-
literal|1
decl_stmt|;
specifier|const
name|bool
name|hasHFW
init|=
name|QGraphicsLayoutItemPrivate
operator|::
name|get
argument_list|(
name|widget
argument_list|)
operator|->
name|hasHeightForWidth
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasHFW
operator|==
name|heightForWidth
condition|)
block|{
name|minimumHeightForWidth
operator|=
name|hasHFW
condition|?
name|widget
operator|->
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|QSizeF
argument_list|(
name|width
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|height
argument_list|()
else|:
name|widget
operator|->
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|QSizeF
argument_list|(
operator|-
literal|1
argument_list|,
name|width
argument_list|)
argument_list|)
operator|.
name|width
argument_list|()
expr_stmt|;
comment|//"width" is here height!
block|}
else|else
block|{
comment|// widthForHeight
specifier|const
name|qreal
name|constraint
init|=
name|width
decl_stmt|;
while|while
condition|(
name|maxh
operator|-
name|minh
operator|>
literal|0.1
condition|)
block|{
name|qreal
name|middle
init|=
name|minh
operator|+
operator|(
name|maxh
operator|-
name|minh
operator|)
operator|/
literal|2
decl_stmt|;
comment|// ### really bad, if we are a widget with a layout it will call
comment|// layout->effectiveSizeHint(Qt::MiniumumSize), which again will call
comment|// sizeHint three times because of how the cache works
name|qreal
name|hfw
init|=
name|hasHFW
condition|?
name|widget
operator|->
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|QSizeF
argument_list|(
name|middle
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|height
argument_list|()
else|:
name|widget
operator|->
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|,
name|QSizeF
argument_list|(
operator|-
literal|1
argument_list|,
name|middle
argument_list|)
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|hfw
operator|>
name|constraint
condition|)
block|{
name|minh
operator|=
name|middle
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hfw
operator|<=
name|constraint
condition|)
block|{
name|maxh
operator|=
name|middle
expr_stmt|;
block|}
block|}
name|minimumHeightForWidth
operator|=
name|maxh
expr_stmt|;
block|}
return|return
name|minimumHeightForWidth
return|;
block|}
end_function
begin_function
DECL|function|minimumWidthForHeight
specifier|static
name|qreal
name|minimumWidthForHeight
parameter_list|(
name|qreal
name|height
parameter_list|,
name|qreal
name|minw
parameter_list|,
name|qreal
name|maxw
parameter_list|,
specifier|const
name|QGraphicsWidget
modifier|*
name|widget
parameter_list|)
block|{
return|return
name|minimumHeightForWidth
argument_list|(
name|height
argument_list|,
name|minw
argument_list|,
name|maxw
argument_list|,
name|widget
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|closestAcceptableSize
specifier|static
name|QSizeF
name|closestAcceptableSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|proposed
parameter_list|,
specifier|const
name|QGraphicsWidget
modifier|*
name|widget
parameter_list|)
block|{
specifier|const
name|QSizeF
name|current
init|=
name|widget
operator|->
name|size
argument_list|()
decl_stmt|;
name|qreal
name|minw
init|=
name|proposed
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|maxw
init|=
name|current
operator|.
name|width
argument_list|()
decl_stmt|;
name|qreal
name|minh
init|=
name|proposed
operator|.
name|height
argument_list|()
decl_stmt|;
name|qreal
name|maxh
init|=
name|current
operator|.
name|height
argument_list|()
decl_stmt|;
name|qreal
name|middlew
init|=
name|maxw
decl_stmt|;
name|qreal
name|middleh
init|=
name|maxh
decl_stmt|;
name|qreal
name|min_hfw
decl_stmt|;
name|min_hfw
operator|=
name|minimumHeightForWidth
argument_list|(
name|maxw
argument_list|,
name|minh
argument_list|,
name|maxh
argument_list|,
name|widget
argument_list|)
expr_stmt|;
do|do
block|{
if|if
condition|(
name|maxw
operator|-
name|minw
operator|<
literal|0.1
condition|)
block|{
comment|// we still haven't found anything, cut off binary search
name|minw
operator|=
name|maxw
expr_stmt|;
name|minh
operator|=
name|maxh
expr_stmt|;
block|}
name|middlew
operator|=
name|minw
operator|+
operator|(
name|maxw
operator|-
name|minw
operator|)
operator|/
literal|2.0
expr_stmt|;
name|middleh
operator|=
name|minh
operator|+
operator|(
name|maxh
operator|-
name|minh
operator|)
operator|/
literal|2.0
expr_stmt|;
name|min_hfw
operator|=
name|minimumHeightForWidth
argument_list|(
name|middlew
argument_list|,
name|minh
argument_list|,
name|maxh
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|min_hfw
operator|>
name|middleh
condition|)
block|{
name|minw
operator|=
name|middlew
expr_stmt|;
name|minh
operator|=
name|middleh
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|min_hfw
operator|<=
name|middleh
condition|)
block|{
name|maxw
operator|=
name|middlew
expr_stmt|;
name|maxh
operator|=
name|middleh
expr_stmt|;
block|}
block|}
do|while
condition|(
name|maxw
operator|!=
name|minw
condition|)
do|;
name|min_hfw
operator|=
name|minimumHeightForWidth
argument_list|(
name|middlew
argument_list|,
name|minh
argument_list|,
name|maxh
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QSizeF
name|result
decl_stmt|;
if|if
condition|(
name|min_hfw
operator|<
name|maxh
condition|)
block|{
name|result
operator|=
name|QSizeF
argument_list|(
name|middlew
argument_list|,
name|min_hfw
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Needed because of the cut-off we do above.
name|result
operator|=
name|QSizeF
argument_list|(
name|minimumWidthForHeight
argument_list|(
name|maxh
argument_list|,
name|proposed
operator|.
name|width
argument_list|()
argument_list|,
name|current
operator|.
name|width
argument_list|()
argument_list|,
name|widget
argument_list|)
argument_list|,
name|maxh
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|_q_boundGeometryToSizeConstraints
specifier|static
name|void
name|_q_boundGeometryToSizeConstraints
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|startGeometry
parameter_list|,
name|QRectF
modifier|*
name|rect
parameter_list|,
name|Qt
operator|::
name|WindowFrameSection
name|section
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|min
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|max
parameter_list|,
specifier|const
name|QGraphicsWidget
modifier|*
name|widget
parameter_list|)
block|{
specifier|const
name|QRectF
name|proposedRect
init|=
operator|*
name|rect
decl_stmt|;
name|qreal
name|width
init|=
name|qBound
argument_list|(
name|min
operator|.
name|width
argument_list|()
argument_list|,
name|proposedRect
operator|.
name|width
argument_list|()
argument_list|,
name|max
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|height
init|=
name|qBound
argument_list|(
name|min
operator|.
name|height
argument_list|()
argument_list|,
name|proposedRect
operator|.
name|height
argument_list|()
argument_list|,
name|max
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|hasHFW
init|=
name|QGraphicsLayoutItemPrivate
operator|::
name|get
argument_list|(
name|widget
argument_list|)
operator|->
name|hasHeightForWidth
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|hasWFH
init|=
name|QGraphicsLayoutItemPrivate
operator|::
name|get
argument_list|(
name|widget
argument_list|)
operator|->
name|hasWidthForHeight
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|widthChanged
init|=
name|proposedRect
operator|.
name|width
argument_list|()
operator|!=
name|widget
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|heightChanged
init|=
name|proposedRect
operator|.
name|height
argument_list|()
operator|!=
name|widget
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasHFW
operator|||
name|hasWFH
condition|)
block|{
if|if
condition|(
name|widthChanged
operator|||
name|heightChanged
condition|)
block|{
name|qreal
name|minExtent
decl_stmt|;
name|qreal
name|maxExtent
decl_stmt|;
name|qreal
name|constraint
decl_stmt|;
name|qreal
name|proposed
decl_stmt|;
if|if
condition|(
name|hasHFW
condition|)
block|{
name|minExtent
operator|=
name|min
operator|.
name|height
argument_list|()
expr_stmt|;
name|maxExtent
operator|=
name|max
operator|.
name|height
argument_list|()
expr_stmt|;
name|constraint
operator|=
name|width
expr_stmt|;
name|proposed
operator|=
name|proposedRect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// width for height
name|minExtent
operator|=
name|min
operator|.
name|width
argument_list|()
expr_stmt|;
name|maxExtent
operator|=
name|max
operator|.
name|width
argument_list|()
expr_stmt|;
name|constraint
operator|=
name|height
expr_stmt|;
name|proposed
operator|=
name|proposedRect
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|minimumHeightForWidth
argument_list|(
name|constraint
argument_list|,
name|minExtent
argument_list|,
name|maxExtent
argument_list|,
name|widget
argument_list|,
name|hasHFW
argument_list|)
operator|>
name|proposed
condition|)
block|{
name|QSizeF
name|effectiveSize
init|=
name|closestAcceptableSize
argument_list|(
name|QSizeF
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|width
operator|=
name|effectiveSize
operator|.
name|width
argument_list|()
expr_stmt|;
name|height
operator|=
name|effectiveSize
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
block|}
block|}
switch|switch
condition|(
name|section
condition|)
block|{
case|case
name|Qt
operator|::
name|LeftSection
case|:
name|rect
operator|->
name|setRect
argument_list|(
name|startGeometry
operator|.
name|right
argument_list|()
operator|-
name|qRound
argument_list|(
name|width
argument_list|)
argument_list|,
name|startGeometry
operator|.
name|top
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|width
argument_list|)
argument_list|,
name|startGeometry
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopLeftSection
case|:
name|rect
operator|->
name|setRect
argument_list|(
name|startGeometry
operator|.
name|right
argument_list|()
operator|-
name|qRound
argument_list|(
name|width
argument_list|)
argument_list|,
name|startGeometry
operator|.
name|bottom
argument_list|()
operator|-
name|qRound
argument_list|(
name|height
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|width
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopSection
case|:
name|rect
operator|->
name|setRect
argument_list|(
name|startGeometry
operator|.
name|left
argument_list|()
argument_list|,
name|startGeometry
operator|.
name|bottom
argument_list|()
operator|-
name|qRound
argument_list|(
name|height
argument_list|)
argument_list|,
name|startGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopRightSection
case|:
name|rect
operator|->
name|setTop
argument_list|(
name|rect
operator|->
name|bottom
argument_list|()
operator|-
name|qRound
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|->
name|setWidth
argument_list|(
name|qRound
argument_list|(
name|width
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RightSection
case|:
name|rect
operator|->
name|setWidth
argument_list|(
name|qRound
argument_list|(
name|width
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BottomRightSection
case|:
name|rect
operator|->
name|setWidth
argument_list|(
name|qRound
argument_list|(
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|->
name|setHeight
argument_list|(
name|qRound
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BottomSection
case|:
name|rect
operator|->
name|setHeight
argument_list|(
name|qRound
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BottomLeftSection
case|:
name|rect
operator|->
name|setRect
argument_list|(
name|startGeometry
operator|.
name|right
argument_list|()
operator|-
name|qRound
argument_list|(
name|width
argument_list|)
argument_list|,
name|startGeometry
operator|.
name|top
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|width
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|height
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|windowFrameMouseMoveEvent
name|void
name|QGraphicsWidgetPrivate
operator|::
name|windowFrameMouseMoveEvent
parameter_list|(
name|QGraphicsSceneMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|ensureWindowData
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|event
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|LeftButton
operator|)
operator|||
name|windowData
operator|->
name|hoveredSubControl
operator|!=
name|QStyle
operator|::
name|SC_TitleBarLabel
condition|)
return|return;
name|QLineF
name|delta
argument_list|(
name|q
operator|->
name|mapFromScene
argument_list|(
name|event
operator|->
name|buttonDownScenePos
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|)
argument_list|,
name|event
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|QLineF
name|parentDelta
argument_list|(
name|q
operator|->
name|mapToParent
argument_list|(
name|delta
operator|.
name|p1
argument_list|()
argument_list|)
argument_list|,
name|q
operator|->
name|mapToParent
argument_list|(
name|delta
operator|.
name|p2
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QLineF
name|parentXDelta
argument_list|(
name|q
operator|->
name|mapToParent
argument_list|(
name|QPointF
argument_list|(
name|delta
operator|.
name|p1
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|q
operator|->
name|mapToParent
argument_list|(
name|QPointF
argument_list|(
name|delta
operator|.
name|p2
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QLineF
name|parentYDelta
argument_list|(
name|q
operator|->
name|mapToParent
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
name|delta
operator|.
name|p1
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|q
operator|->
name|mapToParent
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
name|delta
operator|.
name|p2
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QRectF
name|newGeometry
decl_stmt|;
switch|switch
condition|(
name|windowData
operator|->
name|grabbedSection
condition|)
block|{
case|case
name|Qt
operator|::
name|LeftSection
case|:
name|newGeometry
operator|=
name|QRectF
argument_list|(
name|windowData
operator|->
name|startGeometry
operator|.
name|topLeft
argument_list|()
operator|+
name|QPointF
argument_list|(
name|parentXDelta
operator|.
name|dx
argument_list|()
argument_list|,
name|parentXDelta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|windowData
operator|->
name|startGeometry
operator|.
name|size
argument_list|()
operator|-
name|QSizeF
argument_list|(
name|delta
operator|.
name|dx
argument_list|()
argument_list|,
name|delta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopLeftSection
case|:
name|newGeometry
operator|=
name|QRectF
argument_list|(
name|windowData
operator|->
name|startGeometry
operator|.
name|topLeft
argument_list|()
operator|+
name|QPointF
argument_list|(
name|parentDelta
operator|.
name|dx
argument_list|()
argument_list|,
name|parentDelta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|windowData
operator|->
name|startGeometry
operator|.
name|size
argument_list|()
operator|-
name|QSizeF
argument_list|(
name|delta
operator|.
name|dx
argument_list|()
argument_list|,
name|delta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopSection
case|:
name|newGeometry
operator|=
name|QRectF
argument_list|(
name|windowData
operator|->
name|startGeometry
operator|.
name|topLeft
argument_list|()
operator|+
name|QPointF
argument_list|(
name|parentYDelta
operator|.
name|dx
argument_list|()
argument_list|,
name|parentYDelta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|windowData
operator|->
name|startGeometry
operator|.
name|size
argument_list|()
operator|-
name|QSizeF
argument_list|(
literal|0
argument_list|,
name|delta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopRightSection
case|:
name|newGeometry
operator|=
name|QRectF
argument_list|(
name|windowData
operator|->
name|startGeometry
operator|.
name|topLeft
argument_list|()
operator|+
name|QPointF
argument_list|(
name|parentYDelta
operator|.
name|dx
argument_list|()
argument_list|,
name|parentYDelta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|windowData
operator|->
name|startGeometry
operator|.
name|size
argument_list|()
operator|-
name|QSizeF
argument_list|(
operator|-
name|delta
operator|.
name|dx
argument_list|()
argument_list|,
name|delta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|RightSection
case|:
name|newGeometry
operator|=
name|QRectF
argument_list|(
name|windowData
operator|->
name|startGeometry
operator|.
name|topLeft
argument_list|()
argument_list|,
name|windowData
operator|->
name|startGeometry
operator|.
name|size
argument_list|()
operator|+
name|QSizeF
argument_list|(
name|delta
operator|.
name|dx
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BottomRightSection
case|:
name|newGeometry
operator|=
name|QRectF
argument_list|(
name|windowData
operator|->
name|startGeometry
operator|.
name|topLeft
argument_list|()
argument_list|,
name|windowData
operator|->
name|startGeometry
operator|.
name|size
argument_list|()
operator|+
name|QSizeF
argument_list|(
name|delta
operator|.
name|dx
argument_list|()
argument_list|,
name|delta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BottomSection
case|:
name|newGeometry
operator|=
name|QRectF
argument_list|(
name|windowData
operator|->
name|startGeometry
operator|.
name|topLeft
argument_list|()
argument_list|,
name|windowData
operator|->
name|startGeometry
operator|.
name|size
argument_list|()
operator|+
name|QSizeF
argument_list|(
literal|0
argument_list|,
name|delta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|BottomLeftSection
case|:
name|newGeometry
operator|=
name|QRectF
argument_list|(
name|windowData
operator|->
name|startGeometry
operator|.
name|topLeft
argument_list|()
operator|+
name|QPointF
argument_list|(
name|parentXDelta
operator|.
name|dx
argument_list|()
argument_list|,
name|parentXDelta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|windowData
operator|->
name|startGeometry
operator|.
name|size
argument_list|()
operator|-
name|QSizeF
argument_list|(
name|delta
operator|.
name|dx
argument_list|()
argument_list|,
operator|-
name|delta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TitleBarArea
case|:
name|newGeometry
operator|=
name|QRectF
argument_list|(
name|windowData
operator|->
name|startGeometry
operator|.
name|topLeft
argument_list|()
operator|+
name|QPointF
argument_list|(
name|parentDelta
operator|.
name|dx
argument_list|()
argument_list|,
name|parentDelta
operator|.
name|dy
argument_list|()
argument_list|)
argument_list|,
name|windowData
operator|->
name|startGeometry
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|NoSection
case|:
break|break;
block|}
if|if
condition|(
name|windowData
operator|->
name|grabbedSection
operator|!=
name|Qt
operator|::
name|NoSection
condition|)
block|{
name|_q_boundGeometryToSizeConstraints
argument_list|(
name|windowData
operator|->
name|startGeometry
argument_list|,
operator|&
name|newGeometry
argument_list|,
name|windowData
operator|->
name|grabbedSection
argument_list|,
name|q
operator|->
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|MinimumSize
argument_list|)
argument_list|,
name|q
operator|->
name|effectiveSizeHint
argument_list|(
name|Qt
operator|::
name|MaximumSize
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|q
operator|->
name|setGeometry
argument_list|(
name|newGeometry
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|windowFrameHoverMoveEvent
name|void
name|QGraphicsWidgetPrivate
operator|::
name|windowFrameHoverMoveEvent
parameter_list|(
name|QGraphicsSceneHoverEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasDecoration
argument_list|()
condition|)
return|return;
name|ensureWindowData
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|windowData
operator|->
name|buttonMouseOver
operator|||
name|windowData
operator|->
name|hoveredSubControl
operator|!=
name|QStyle
operator|::
name|SC_None
condition|)
name|windowFrameHoverLeaveEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
name|bool
name|wasMouseOver
init|=
name|windowData
operator|->
name|buttonMouseOver
decl_stmt|;
name|QRect
name|oldButtonRect
init|=
name|windowData
operator|->
name|buttonRect
decl_stmt|;
name|windowData
operator|->
name|buttonRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
name|windowData
operator|->
name|buttonMouseOver
operator|=
literal|false
expr_stmt|;
name|QPointF
name|pos
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
name|QStyleOptionTitleBar
name|bar
decl_stmt|;
comment|// make sure that the coordinates (rect and pos) we send to the style are positive.
if|if
condition|(
name|windowFrameMargins
condition|)
block|{
name|pos
operator|.
name|rx
argument_list|()
operator|+=
name|windowFrameMargins
index|[
name|Left
index|]
expr_stmt|;
name|pos
operator|.
name|ry
argument_list|()
operator|+=
name|windowFrameMargins
index|[
name|Top
index|]
expr_stmt|;
block|}
name|initStyleOptionTitleBar
argument_list|(
operator|&
name|bar
argument_list|)
expr_stmt|;
name|bar
operator|.
name|rect
operator|=
name|q
operator|->
name|windowFrameRect
argument_list|()
operator|.
name|toRect
argument_list|()
expr_stmt|;
name|bar
operator|.
name|rect
operator|.
name|moveTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bar
operator|.
name|rect
operator|.
name|setHeight
argument_list|(
name|int
argument_list|(
name|titleBarHeight
argument_list|(
name|bar
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|CursorShape
name|cursorShape
init|=
name|Qt
operator|::
name|ArrowCursor
decl_stmt|;
name|bool
name|needsSetCursorCall
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|q
operator|->
name|windowFrameSectionAt
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|Qt
operator|::
name|TopLeftSection
case|:
case|case
name|Qt
operator|::
name|BottomRightSection
case|:
name|cursorShape
operator|=
name|Qt
operator|::
name|SizeFDiagCursor
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopRightSection
case|:
case|case
name|Qt
operator|::
name|BottomLeftSection
case|:
name|cursorShape
operator|=
name|Qt
operator|::
name|SizeBDiagCursor
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|LeftSection
case|:
case|case
name|Qt
operator|::
name|RightSection
case|:
name|cursorShape
operator|=
name|Qt
operator|::
name|SizeHorCursor
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopSection
case|:
case|case
name|Qt
operator|::
name|BottomSection
case|:
name|cursorShape
operator|=
name|Qt
operator|::
name|SizeVerCursor
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TitleBarArea
case|:
name|windowData
operator|->
name|buttonRect
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|bar
argument_list|,
name|QStyle
operator|::
name|SC_TitleBarCloseButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
comment|// On mac we should hover if we are in the 'area' of the buttons
name|windowData
operator|->
name|buttonRect
operator||=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|bar
argument_list|,
name|QStyle
operator|::
name|SC_TitleBarMinButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|windowData
operator|->
name|buttonRect
operator||=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|bar
argument_list|,
name|QStyle
operator|::
name|SC_TitleBarMaxButton
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|windowData
operator|->
name|buttonRect
operator|.
name|contains
argument_list|(
name|pos
operator|.
name|toPoint
argument_list|()
argument_list|)
condition|)
name|windowData
operator|->
name|buttonMouseOver
operator|=
literal|true
expr_stmt|;
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
break|break;
default|default:
name|needsSetCursorCall
operator|=
literal|false
expr_stmt|;
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|needsSetCursorCall
condition|)
name|q
operator|->
name|setCursor
argument_list|(
name|cursorShape
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// update buttons if we hover over them
name|windowData
operator|->
name|hoveredSubControl
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|bar
argument_list|,
name|pos
operator|.
name|toPoint
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowData
operator|->
name|hoveredSubControl
operator|!=
name|QStyle
operator|::
name|SC_TitleBarCloseButton
condition|)
name|windowData
operator|->
name|hoveredSubControl
operator|=
name|QStyle
operator|::
name|SC_TitleBarLabel
expr_stmt|;
if|if
condition|(
name|windowData
operator|->
name|buttonMouseOver
operator|!=
name|wasMouseOver
condition|)
block|{
if|if
condition|(
operator|!
name|oldButtonRect
operator|.
name|isNull
argument_list|()
condition|)
name|q
operator|->
name|update
argument_list|(
name|QRectF
argument_list|(
name|oldButtonRect
argument_list|)
operator|.
name|translated
argument_list|(
name|q
operator|->
name|windowFrameRect
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|windowData
operator|->
name|buttonRect
operator|.
name|isNull
argument_list|()
condition|)
name|q
operator|->
name|update
argument_list|(
name|QRectF
argument_list|(
name|windowData
operator|->
name|buttonRect
argument_list|)
operator|.
name|translated
argument_list|(
name|q
operator|->
name|windowFrameRect
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|windowFrameHoverLeaveEvent
name|void
name|QGraphicsWidgetPrivate
operator|::
name|windowFrameHoverLeaveEvent
parameter_list|(
name|QGraphicsSceneHoverEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDecoration
argument_list|()
condition|)
block|{
comment|// ### restore the cursor, don't override it
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|q
operator|->
name|unsetCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|ensureWindowData
argument_list|()
expr_stmt|;
name|bool
name|needsUpdate
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|windowData
operator|->
name|hoveredSubControl
operator|==
name|QStyle
operator|::
name|SC_TitleBarCloseButton
operator|||
name|windowData
operator|->
name|buttonMouseOver
condition|)
name|needsUpdate
operator|=
literal|true
expr_stmt|;
comment|// update the hover state (of buttons etc...)
name|windowData
operator|->
name|hoveredSubControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|windowData
operator|->
name|buttonMouseOver
operator|=
literal|false
expr_stmt|;
name|windowData
operator|->
name|buttonRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
if|if
condition|(
name|needsUpdate
condition|)
name|q
operator|->
name|update
argument_list|(
name|windowData
operator|->
name|buttonRect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|hasDecoration
name|bool
name|QGraphicsWidgetPrivate
operator|::
name|hasDecoration
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|windowFlags
operator|&
name|Qt
operator|::
name|Window
operator|)
operator|&&
operator|(
name|windowFlags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|)
return|;
block|}
end_function
begin_comment
comment|/**  * is called after a reparent has taken place to fix up the focus chain(s)  */
end_comment
begin_function
DECL|function|fixFocusChainBeforeReparenting
name|void
name|QGraphicsWidgetPrivate
operator|::
name|fixFocusChainBeforeReparenting
parameter_list|(
name|QGraphicsWidget
modifier|*
name|newParent
parameter_list|,
name|QGraphicsScene
modifier|*
name|oldScene
parameter_list|,
name|QGraphicsScene
modifier|*
name|newScene
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|focusNext
operator|&&
name|focusPrev
argument_list|)
expr_stmt|;
if|if
condition|(
name|q_ptr
operator|->
name|isPanel
argument_list|()
condition|)
block|{
comment|// panels are never a part of their parent's or ancestors' focus
comment|// chains. so reparenting a panel is easy; there's nothing to
comment|// do.
return|return;
block|}
comment|// we're not a panel, so find the first widget in the focus chain
comment|// (this), and the last (this, or the last widget that is still
comment|// a descendent of this). also find the widgets that currently /
comment|// before reparenting point to this widgets' focus chain.
name|QGraphicsWidget
modifier|*
name|focusFirst
init|=
name|q
decl_stmt|;
name|QGraphicsWidget
modifier|*
name|focusBefore
init|=
name|focusPrev
decl_stmt|;
name|QGraphicsWidget
modifier|*
name|focusLast
init|=
name|focusFirst
decl_stmt|;
name|QGraphicsWidget
modifier|*
name|focusAfter
init|=
name|focusNext
decl_stmt|;
do|do
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|isAncestorOf
argument_list|(
name|focusAfter
argument_list|)
condition|)
break|break;
name|focusLast
operator|=
name|focusAfter
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|focusAfter
operator|=
name|focusAfter
operator|->
name|d_func
argument_list|()
operator|->
name|focusNext
operator|)
condition|)
do|;
if|if
condition|(
operator|!
name|parent
operator|&&
name|oldScene
operator|&&
name|oldScene
operator|!=
name|newScene
operator|&&
name|oldScene
operator|->
name|d_func
argument_list|()
operator|->
name|tabFocusFirst
operator|==
name|q
condition|)
block|{
comment|// detach from old scene's top level focus chain.
name|oldScene
operator|->
name|d_func
argument_list|()
operator|->
name|tabFocusFirst
operator|=
operator|(
name|focusAfter
operator|!=
name|q
operator|)
condition|?
name|focusAfter
else|:
literal|0
expr_stmt|;
block|}
comment|// detach from current focus chain; skip this widget subtree.
name|focusBefore
operator|->
name|d_func
argument_list|()
operator|->
name|focusNext
operator|=
name|focusAfter
expr_stmt|;
name|focusAfter
operator|->
name|d_func
argument_list|()
operator|->
name|focusPrev
operator|=
name|focusBefore
expr_stmt|;
if|if
condition|(
name|newParent
condition|)
block|{
comment|// attach to new parent's focus chain as the last element
comment|// in its chain.
name|QGraphicsWidget
modifier|*
name|newFocusFirst
init|=
name|newParent
decl_stmt|;
name|QGraphicsWidget
modifier|*
name|newFocusLast
init|=
name|newFocusFirst
decl_stmt|;
name|QGraphicsWidget
modifier|*
name|newFocusAfter
init|=
name|newFocusFirst
operator|->
name|d_func
argument_list|()
operator|->
name|focusNext
decl_stmt|;
do|do
block|{
if|if
condition|(
operator|!
name|newParent
operator|->
name|isAncestorOf
argument_list|(
name|newFocusAfter
argument_list|)
condition|)
break|break;
name|newFocusLast
operator|=
name|newFocusAfter
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|newFocusAfter
operator|=
name|newFocusAfter
operator|->
name|d_func
argument_list|()
operator|->
name|focusNext
operator|)
condition|)
do|;
name|newFocusLast
operator|->
name|d_func
argument_list|()
operator|->
name|focusNext
operator|=
name|q
expr_stmt|;
name|focusLast
operator|->
name|d_func
argument_list|()
operator|->
name|focusNext
operator|=
name|newFocusAfter
expr_stmt|;
name|newFocusAfter
operator|->
name|d_func
argument_list|()
operator|->
name|focusPrev
operator|=
name|focusLast
expr_stmt|;
name|focusPrev
operator|=
name|newFocusLast
expr_stmt|;
block|}
else|else
block|{
comment|// no new parent, so just link up our own prev->last widgets.
name|focusPrev
operator|=
name|focusLast
expr_stmt|;
name|focusLast
operator|->
name|d_func
argument_list|()
operator|->
name|focusNext
operator|=
name|q
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setLayout_helper
name|void
name|QGraphicsWidgetPrivate
operator|::
name|setLayout_helper
parameter_list|(
name|QGraphicsLayout
modifier|*
name|l
parameter_list|)
block|{
operator|delete
operator|(
name|this
operator|->
name|layout
operator|)
expr_stmt|;
name|layout
operator|=
name|l
expr_stmt|;
if|if
condition|(
operator|!
name|l
condition|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|width
name|qreal
name|QGraphicsWidgetPrivate
operator|::
name|width
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QGraphicsWidget
argument_list|)
expr_stmt|;
return|return
name|q
operator|->
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setWidth
name|void
name|QGraphicsWidgetPrivate
operator|::
name|setWidth
parameter_list|(
name|qreal
name|w
parameter_list|)
block|{
if|if
condition|(
name|qIsNaN
argument_list|(
name|w
argument_list|)
condition|)
return|return;
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
operator|==
name|w
condition|)
return|return;
name|q
operator|->
name|setGeometry
argument_list|(
name|QRectF
argument_list|(
name|q
operator|->
name|x
argument_list|()
argument_list|,
name|q
operator|->
name|y
argument_list|()
argument_list|,
name|w
argument_list|,
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetWidth
name|void
name|QGraphicsWidgetPrivate
operator|::
name|resetWidth
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|q
operator|->
name|setGeometry
argument_list|(
name|QRectF
argument_list|(
name|q
operator|->
name|x
argument_list|()
argument_list|,
name|q
operator|->
name|y
argument_list|()
argument_list|,
literal|0
argument_list|,
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|height
name|qreal
name|QGraphicsWidgetPrivate
operator|::
name|height
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QGraphicsWidget
argument_list|)
expr_stmt|;
return|return
name|q
operator|->
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setHeight
name|void
name|QGraphicsWidgetPrivate
operator|::
name|setHeight
parameter_list|(
name|qreal
name|h
parameter_list|)
block|{
if|if
condition|(
name|qIsNaN
argument_list|(
name|h
argument_list|)
condition|)
return|return;
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
operator|==
name|h
condition|)
return|return;
name|q
operator|->
name|setGeometry
argument_list|(
name|QRectF
argument_list|(
name|q
operator|->
name|x
argument_list|()
argument_list|,
name|q
operator|->
name|y
argument_list|()
argument_list|,
name|width
argument_list|()
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetHeight
name|void
name|QGraphicsWidgetPrivate
operator|::
name|resetHeight
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|q
operator|->
name|setGeometry
argument_list|(
name|QRectF
argument_list|(
name|q
operator|->
name|x
argument_list|()
argument_list|,
name|q
operator|->
name|y
argument_list|()
argument_list|,
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setGeometryFromSetPos
name|void
name|QGraphicsWidgetPrivate
operator|::
name|setGeometryFromSetPos
parameter_list|()
block|{
if|if
condition|(
name|inSetGeometry
condition|)
return|return;
name|Q_Q
argument_list|(
name|QGraphicsWidget
argument_list|)
expr_stmt|;
name|inSetPos
operator|=
literal|1
expr_stmt|;
comment|// Ensure setGeometry is called (avoid recursion when setPos is
comment|// called from within setGeometry).
name|q
operator|->
name|setGeometry
argument_list|(
name|QRectF
argument_list|(
name|pos
argument_list|,
name|q
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|inSetPos
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_GRAPHICSVIEW
end_comment
end_unit
