begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QGRAPHICSITEM_P_H
end_ifndef
begin_define
DECL|macro|QGRAPHICSITEM_P_H
define|#
directive|define
name|QGRAPHICSITEM_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of other Qt classes.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qgraphicsitem.h"
end_include
begin_include
include|#
directive|include
file|"qset.h"
end_include
begin_include
include|#
directive|include
file|"qpixmapcache.h"
end_include
begin_include
include|#
directive|include
file|<private/qgraphicsview_p.h>
end_include
begin_include
include|#
directive|include
file|"qgraphicstransform.h"
end_include
begin_include
include|#
directive|include
file|<private/qgraphicstransform_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qgraphicseffect_p.h>
end_include
begin_include
include|#
directive|include
file|<qgraphicseffect.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GRAPHICSVIEW
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QGraphicsItemPrivate
name|class
name|QGraphicsItemPrivate
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QDECLARATIVELISTPROPERTY
end_ifndef
begin_define
DECL|macro|QDECLARATIVELISTPROPERTY
define|#
directive|define
name|QDECLARATIVELISTPROPERTY
end_define
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QDeclarativeListProperty
block|{
name|public
operator|:
typedef|typedef
name|void
argument_list|(
operator|*
name|AppendFunction
argument_list|)
argument_list|(
name|QDeclarativeListProperty
operator|<
name|T
operator|>
operator|*
argument_list|,
name|T
operator|*
argument_list|)
expr_stmt|;
end_expr_stmt
begin_typedef
typedef|typedef
name|int
argument_list|(
operator|*
name|CountFunction
argument_list|)
argument_list|(
name|QDeclarativeListProperty
operator|<
name|T
operator|>
operator|*
argument_list|)
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|T
argument_list|*
call|(
modifier|*
name|AtFunction
call|)
argument_list|(
name|QDeclarativeListProperty
operator|<
name|T
operator|>
operator|*
argument_list|,
name|int
argument_list|)
argument_list|;     typedef
name|void
argument_list|(
operator|*
name|ClearFunction
argument_list|)
argument_list|(
name|QDeclarativeListProperty
operator|<
name|T
operator|>
operator|*
argument_list|)
argument_list|;
name|QDeclarativeListProperty
argument_list|()
operator|:
name|object
argument_list|(
literal|0
argument_list|)
argument_list|,
name|data
argument_list|(
literal|0
argument_list|)
argument_list|,
name|append
argument_list|(
literal|0
argument_list|)
argument_list|,
name|count
argument_list|(
literal|0
argument_list|)
argument_list|,
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|clear
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dummy1
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dummy2
argument_list|(
literal|0
argument_list|)
block|{}
name|QDeclarativeListProperty
argument_list|(
name|QObject
operator|*
name|o
argument_list|,
name|QList
operator|<
name|T
operator|*
operator|>
operator|&
name|list
argument_list|)
operator|:
name|object
argument_list|(
name|o
argument_list|)
argument_list|,
name|data
argument_list|(
operator|&
name|list
argument_list|)
argument_list|,
name|append
argument_list|(
name|qlist_append
argument_list|)
argument_list|,
name|count
argument_list|(
name|qlist_count
argument_list|)
argument_list|,
name|at
argument_list|(
name|qlist_at
argument_list|)
argument_list|,
name|clear
argument_list|(
name|qlist_clear
argument_list|)
argument_list|,
name|dummy1
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dummy2
argument_list|(
literal|0
argument_list|)
block|{}
name|QDeclarativeListProperty
argument_list|(
argument|QObject *o
argument_list|,
argument|void *d
argument_list|,
argument|AppendFunction a
argument_list|,
argument|CountFunction c =
literal|0
argument_list|,
argument|AtFunction t =
literal|0
argument_list|,
argument|ClearFunction r =
literal|0
argument_list|)
operator|:
name|object
argument_list|(
name|o
argument_list|)
argument_list|,
name|data
argument_list|(
name|d
argument_list|)
argument_list|,
name|append
argument_list|(
name|a
argument_list|)
argument_list|,
name|count
argument_list|(
name|c
argument_list|)
argument_list|,
name|at
argument_list|(
name|t
argument_list|)
argument_list|,
name|clear
argument_list|(
name|r
argument_list|)
argument_list|,
name|dummy1
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dummy2
argument_list|(
literal|0
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QDeclarativeListProperty
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|object
operator|==
name|o
operator|.
name|object
operator|&&
name|data
operator|==
name|o
operator|.
name|data
operator|&&
name|append
operator|==
name|o
operator|.
name|append
operator|&&
name|count
operator|==
name|o
operator|.
name|count
operator|&&
name|at
operator|==
name|o
operator|.
name|at
operator|&&
name|clear
operator|==
name|o
operator|.
name|clear
return|;
block|}
end_typedef
begin_decl_stmt
name|QObject
modifier|*
name|object
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
modifier|*
name|data
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|AppendFunction
name|append
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|CountFunction
name|count
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|AtFunction
name|at
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ClearFunction
name|clear
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
modifier|*
name|dummy1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
modifier|*
name|dummy2
decl_stmt|;
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_function
specifier|static
name|void
name|qlist_append
parameter_list|(
name|QDeclarativeListProperty
modifier|*
name|p
parameter_list|,
name|T
modifier|*
name|v
parameter_list|)
block|{
operator|(
operator|(
name|QList
operator|<
name|T
operator|*
operator|>
operator|*
operator|)
name|p
operator|->
name|data
operator|)
operator|->
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
specifier|static
name|int
name|qlist_count
parameter_list|(
name|QDeclarativeListProperty
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
operator|(
name|QList
operator|<
name|T
operator|*
operator|>
operator|*
operator|)
name|p
operator|->
name|data
operator|)
operator|->
name|count
argument_list|()
return|;
block|}
end_function
begin_function
specifier|static
name|T
modifier|*
name|qlist_at
parameter_list|(
name|QDeclarativeListProperty
modifier|*
name|p
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
operator|(
name|QList
operator|<
name|T
operator|*
operator|>
operator|*
operator|)
name|p
operator|->
name|data
operator|)
operator|->
name|at
argument_list|(
name|idx
argument_list|)
return|;
block|}
end_function
begin_function
specifier|static
name|void
name|qlist_clear
parameter_list|(
name|QDeclarativeListProperty
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
operator|(
name|QList
operator|<
name|T
operator|*
operator|>
operator|*
operator|)
name|p
operator|->
name|data
operator|)
operator|->
name|clear
argument_list|()
return|;
block|}
end_function
begin_endif
unit|};
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|QGraphicsItemCache
block|{
name|public
label|:
name|QGraphicsItemCache
argument_list|()
operator|:
name|allExposed
argument_list|(
argument|false
argument_list|)
block|{ }
comment|// ItemCoordinateCache only
name|QRect
name|boundingRect
expr_stmt|;
name|QSize
name|fixedSize
decl_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key
expr_stmt|;
comment|// DeviceCoordinateCache only
struct|struct
name|DeviceData
block|{
name|DeviceData
argument_list|()
block|{}
name|QTransform
name|lastTransform
decl_stmt|;
name|QPoint
name|cacheIndent
decl_stmt|;
name|QPixmapCache
operator|::
name|Key
name|key
expr_stmt|;
block|}
struct|;
name|QMap
operator|<
name|QPaintDevice
operator|*
operator|,
name|DeviceData
operator|>
name|deviceData
expr_stmt|;
comment|// List of logical exposed rects
name|QVector
operator|<
name|QRectF
operator|>
name|exposed
expr_stmt|;
name|bool
name|allExposed
decl_stmt|;
comment|// Empty cache
name|void
name|purge
parameter_list|()
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QGraphicsItemPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QGraphicsItem
argument_list|)
name|public
label|:
enum|enum
name|Extra
block|{
name|ExtraToolTip
block|,
name|ExtraCursor
block|,
name|ExtraCacheData
block|,
name|ExtraMaxDeviceCoordCacheSize
block|,
name|ExtraBoundingRegionGranularity
block|}
enum|;
enum|enum
name|AncestorFlag
block|{
name|NoFlag
init|=
literal|0
block|,
name|AncestorHandlesChildEvents
init|=
literal|0x1
block|,
name|AncestorClipsChildren
init|=
literal|0x2
block|,
name|AncestorIgnoresTransformations
init|=
literal|0x4
block|,
name|AncestorFiltersChildEvents
init|=
literal|0x8
block|}
enum|;
specifier|inline
name|QGraphicsItemPrivate
argument_list|()
operator|:
name|z
argument_list|(
literal|0
argument_list|)
operator|,
name|opacity
argument_list|(
literal|1.
argument_list|)
operator|,
name|scene
argument_list|(
literal|0
argument_list|)
operator|,
name|parent
argument_list|(
literal|0
argument_list|)
operator|,
name|transformData
argument_list|(
literal|0
argument_list|)
operator|,
name|graphicsEffect
argument_list|(
literal|0
argument_list|)
operator|,
name|index
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|siblingIndex
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|itemDepth
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|focusProxy
argument_list|(
literal|0
argument_list|)
operator|,
name|subFocusItem
argument_list|(
literal|0
argument_list|)
operator|,
name|focusScopeItem
argument_list|(
literal|0
argument_list|)
operator|,
name|imHints
argument_list|(
name|Qt
operator|::
name|ImhNone
argument_list|)
operator|,
name|panelModality
argument_list|(
name|QGraphicsItem
operator|::
name|NonModal
argument_list|)
operator|,
name|acceptedMouseButtons
argument_list|(
literal|0x1f
argument_list|)
operator|,
name|visible
argument_list|(
literal|1
argument_list|)
operator|,
name|explicitlyHidden
argument_list|(
literal|0
argument_list|)
operator|,
name|enabled
argument_list|(
literal|1
argument_list|)
operator|,
name|explicitlyDisabled
argument_list|(
literal|0
argument_list|)
operator|,
name|selected
argument_list|(
literal|0
argument_list|)
operator|,
name|acceptsHover
argument_list|(
literal|0
argument_list|)
operator|,
name|acceptDrops
argument_list|(
literal|0
argument_list|)
operator|,
name|isMemberOfGroup
argument_list|(
literal|0
argument_list|)
operator|,
name|handlesChildEvents
argument_list|(
literal|0
argument_list|)
operator|,
name|itemDiscovered
argument_list|(
literal|0
argument_list|)
operator|,
name|hasCursor
argument_list|(
literal|0
argument_list|)
operator|,
name|ancestorFlags
argument_list|(
literal|0
argument_list|)
operator|,
name|cacheMode
argument_list|(
literal|0
argument_list|)
operator|,
name|hasBoundingRegionGranularity
argument_list|(
literal|0
argument_list|)
operator|,
name|isWidget
argument_list|(
literal|0
argument_list|)
operator|,
name|dirty
argument_list|(
literal|0
argument_list|)
operator|,
name|dirtyChildren
argument_list|(
literal|0
argument_list|)
operator|,
name|localCollisionHack
argument_list|(
literal|0
argument_list|)
operator|,
name|inSetPosHelper
argument_list|(
literal|0
argument_list|)
operator|,
name|needSortChildren
argument_list|(
literal|0
argument_list|)
operator|,
name|allChildrenDirty
argument_list|(
literal|0
argument_list|)
operator|,
name|fullUpdatePending
argument_list|(
literal|0
argument_list|)
operator|,
name|dirtyChildrenBoundingRect
argument_list|(
literal|1
argument_list|)
operator|,
name|flags
argument_list|(
literal|0
argument_list|)
operator|,
name|paintedViewBoundingRectsNeedRepaint
argument_list|(
literal|0
argument_list|)
operator|,
name|dirtySceneTransform
argument_list|(
literal|1
argument_list|)
operator|,
name|geometryChanged
argument_list|(
literal|1
argument_list|)
operator|,
name|inDestructor
argument_list|(
literal|0
argument_list|)
operator|,
name|isObject
argument_list|(
literal|0
argument_list|)
operator|,
name|ignoreVisible
argument_list|(
literal|0
argument_list|)
operator|,
name|ignoreOpacity
argument_list|(
literal|0
argument_list|)
operator|,
name|acceptTouchEvents
argument_list|(
literal|0
argument_list|)
operator|,
name|acceptedTouchBeginEvent
argument_list|(
literal|0
argument_list|)
operator|,
name|filtersDescendantEvents
argument_list|(
literal|0
argument_list|)
operator|,
name|sceneTransformTranslateOnly
argument_list|(
literal|0
argument_list|)
operator|,
name|notifyBoundingRectChanged
argument_list|(
literal|0
argument_list|)
operator|,
name|notifyInvalidated
argument_list|(
literal|0
argument_list|)
operator|,
name|mouseSetsFocus
argument_list|(
literal|1
argument_list|)
operator|,
name|explicitActivate
argument_list|(
literal|0
argument_list|)
operator|,
name|wantsActive
argument_list|(
literal|0
argument_list|)
operator|,
name|holesInSiblingIndex
argument_list|(
literal|0
argument_list|)
operator|,
name|sequentialOrdering
argument_list|(
literal|1
argument_list|)
operator|,
name|updateDueToGraphicsEffect
argument_list|(
literal|0
argument_list|)
operator|,
name|scenePosDescendants
argument_list|(
literal|0
argument_list|)
operator|,
name|pendingPolish
argument_list|(
literal|0
argument_list|)
operator|,
name|mayHaveChildWithGraphicsEffect
argument_list|(
literal|0
argument_list|)
operator|,
name|isDeclarativeItem
argument_list|(
literal|0
argument_list|)
operator|,
name|sendParentChangeNotification
argument_list|(
literal|0
argument_list|)
operator|,
name|globalStackingOrder
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|q_ptr
argument_list|(
literal|0
argument_list|)
block|{     }
specifier|inline
name|virtual
operator|~
name|QGraphicsItemPrivate
argument_list|()
block|{ }
specifier|static
specifier|const
name|QGraphicsItemPrivate
operator|*
name|get
argument_list|(
argument|const QGraphicsItem *item
argument_list|)
block|{
return|return
name|item
operator|->
name|d_ptr
operator|.
name|data
argument_list|()
return|;
block|}
specifier|static
name|QGraphicsItemPrivate
modifier|*
name|get
parameter_list|(
name|QGraphicsItem
modifier|*
name|item
parameter_list|)
block|{
return|return
name|item
operator|->
name|d_ptr
operator|.
name|data
argument_list|()
return|;
block|}
name|void
name|updateChildWithGraphicsEffectFlagRecursively
parameter_list|()
function_decl|;
name|void
name|updateAncestorFlag
argument_list|(
name|QGraphicsItem
operator|::
name|GraphicsItemFlag
name|childFlag
argument_list|,
name|AncestorFlag
name|flag
operator|=
name|NoFlag
argument_list|,
name|bool
name|enabled
operator|=
name|false
argument_list|,
name|bool
name|root
operator|=
name|true
argument_list|)
decl_stmt|;
name|void
name|updateAncestorFlags
parameter_list|()
function_decl|;
name|void
name|setIsMemberOfGroup
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|void
name|remapItemPos
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|,
name|QGraphicsItem
modifier|*
name|item
parameter_list|)
function_decl|;
name|QPointF
name|genericMapFromScene
argument_list|(
specifier|const
name|QPointF
operator|&
name|pos
argument_list|,
specifier|const
name|QWidget
operator|*
name|viewport
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|bool
name|itemIsUntransformable
argument_list|()
specifier|const
block|{
return|return
operator|(
name|flags
operator|&
name|QGraphicsItem
operator|::
name|ItemIgnoresTransformations
operator|)
operator|||
operator|(
name|ancestorFlags
operator|&
name|AncestorIgnoresTransformations
operator|)
return|;
block|}
name|void
name|combineTransformToParent
argument_list|(
name|QTransform
operator|*
name|x
argument_list|,
specifier|const
name|QTransform
operator|*
name|viewTransform
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|void
name|combineTransformFromParent
argument_list|(
name|QTransform
operator|*
name|x
argument_list|,
specifier|const
name|QTransform
operator|*
name|viewTransform
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|updateSceneTransformFromParent
parameter_list|()
function_decl|;
comment|// ### Qt 5: Remove. Workaround for reimplementation added after Qt 4.4.
name|virtual
name|QVariant
name|inputMethodQueryHelper
argument_list|(
name|Qt
operator|::
name|InputMethodQuery
name|query
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|bool
name|movableAncestorIsSelected
parameter_list|(
specifier|const
name|QGraphicsItem
modifier|*
name|item
parameter_list|)
function_decl|;
name|virtual
name|void
name|setPosHelper
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
function_decl|;
name|void
name|setTransformHelper
parameter_list|(
specifier|const
name|QTransform
modifier|&
name|transform
parameter_list|)
function_decl|;
name|void
name|prependGraphicsTransform
parameter_list|(
name|QGraphicsTransform
modifier|*
name|t
parameter_list|)
function_decl|;
name|void
name|appendGraphicsTransform
parameter_list|(
name|QGraphicsTransform
modifier|*
name|t
parameter_list|)
function_decl|;
name|void
name|setVisibleHelper
parameter_list|(
name|bool
name|newVisible
parameter_list|,
name|bool
name|explicitly
parameter_list|,
name|bool
name|update
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|setEnabledHelper
parameter_list|(
name|bool
name|newEnabled
parameter_list|,
name|bool
name|explicitly
parameter_list|,
name|bool
name|update
init|=
name|true
parameter_list|)
function_decl|;
name|bool
name|discardUpdateRequest
argument_list|(
name|bool
name|ignoreVisibleBit
operator|=
name|false
argument_list|,
name|bool
name|ignoreDirtyBit
operator|=
name|false
argument_list|,
name|bool
name|ignoreOpacity
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|transformChanged
parameter_list|()
block|{}
name|int
name|depth
argument_list|()
specifier|const
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
enum|enum
name|InvalidateReason
block|{
name|OpacityChanged
block|}
enum|;
name|void
name|invalidateParentGraphicsEffectsRecursively
parameter_list|()
function_decl|;
name|void
name|invalidateChildGraphicsEffectsRecursively
parameter_list|(
name|InvalidateReason
name|reason
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|//QT_NO_GRAPHICSEFFECT
name|void
name|invalidateDepthRecursively
parameter_list|()
function_decl|;
name|void
name|resolveDepth
parameter_list|()
function_decl|;
name|void
name|addChild
parameter_list|(
name|QGraphicsItem
modifier|*
name|child
parameter_list|)
function_decl|;
name|void
name|removeChild
parameter_list|(
name|QGraphicsItem
modifier|*
name|child
parameter_list|)
function_decl|;
name|QDeclarativeListProperty
operator|<
name|QGraphicsObject
operator|>
name|childrenList
argument_list|()
expr_stmt|;
name|void
name|setParentItemHelper
parameter_list|(
name|QGraphicsItem
modifier|*
name|parent
parameter_list|,
specifier|const
name|QVariant
modifier|*
name|newParentVariant
parameter_list|,
specifier|const
name|QVariant
modifier|*
name|thisPointerVariant
parameter_list|)
function_decl|;
name|void
name|childrenBoundingRectHelper
parameter_list|(
name|QTransform
modifier|*
name|x
parameter_list|,
name|QRectF
modifier|*
name|rect
parameter_list|,
name|QGraphicsItem
modifier|*
name|topMostEffectItem
parameter_list|)
function_decl|;
name|void
name|initStyleOption
argument_list|(
name|QStyleOptionGraphicsItem
operator|*
name|option
argument_list|,
specifier|const
name|QTransform
operator|&
name|worldTransform
argument_list|,
specifier|const
name|QRegion
operator|&
name|exposedRegion
argument_list|,
name|bool
name|allItems
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|QRectF
name|effectiveBoundingRect
argument_list|(
name|QGraphicsItem
operator|*
name|topMostEffectItem
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|QRectF
name|sceneEffectiveBoundingRect
argument_list|()
specifier|const
expr_stmt|;
name|QRectF
name|effectiveBoundingRect
argument_list|(
specifier|const
name|QRectF
operator|&
name|rect
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|resolveFont
parameter_list|(
name|uint
name|inheritedMask
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|d_ptr
operator|->
name|resolveFont
argument_list|(
name|inheritedMask
argument_list|)
expr_stmt|;
block|}
name|virtual
name|void
name|resolvePalette
parameter_list|(
name|uint
name|inheritedMask
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|d_ptr
operator|->
name|resolveFont
argument_list|(
name|inheritedMask
argument_list|)
expr_stmt|;
block|}
name|virtual
name|bool
name|isProxyWidget
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|QVariant
name|extra
argument_list|(
name|Extra
name|type
argument_list|)
decl|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extras
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|ExtraStruct
modifier|&
name|extra
init|=
name|extras
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|extra
operator|.
name|type
operator|==
name|type
condition|)
return|return
name|extra
operator|.
name|value
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
specifier|inline
name|void
name|setExtra
parameter_list|(
name|Extra
name|type
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extras
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|extras
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|type
condition|)
block|{
name|index
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|extras
operator|<<
name|ExtraStruct
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extras
index|[
name|index
index|]
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
specifier|inline
name|void
name|unsetExtra
parameter_list|(
name|Extra
name|type
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extras
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|extras
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|==
name|type
condition|)
block|{
name|extras
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
struct|struct
name|ExtraStruct
block|{
name|ExtraStruct
argument_list|(
argument|Extra type
argument_list|,
argument|QVariant value
argument_list|)
block|:
name|type
argument_list|(
name|type
argument_list|)
operator|,
name|value
argument_list|(
argument|value
argument_list|)
block|{ }
name|Extra
name|type
expr_stmt|;
name|QVariant
name|value
decl_stmt|;
name|bool
name|operator
operator|<
operator|(
name|Extra
name|extra
operator|)
specifier|const
block|{
return|return
name|type
operator|<
name|extra
return|;
block|}
block|}
struct|;
name|QList
operator|<
name|ExtraStruct
operator|>
name|extras
expr_stmt|;
name|QGraphicsItemCache
operator|*
name|maybeExtraItemCache
argument_list|()
specifier|const
expr_stmt|;
name|QGraphicsItemCache
operator|*
name|extraItemCache
argument_list|()
specifier|const
expr_stmt|;
name|void
name|removeExtraItemCache
parameter_list|()
function_decl|;
name|void
name|updatePaintedViewBoundingRects
parameter_list|(
name|bool
name|updateChildren
parameter_list|)
function_decl|;
name|void
name|ensureSceneTransformRecursive
parameter_list|(
name|QGraphicsItem
modifier|*
modifier|*
name|topMostDirtyItem
parameter_list|)
function_decl|;
specifier|inline
name|void
name|ensureSceneTransform
parameter_list|()
block|{
name|QGraphicsItem
modifier|*
name|that
init|=
name|q_func
argument_list|()
decl_stmt|;
name|ensureSceneTransformRecursive
argument_list|(
operator|&
name|that
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|bool
name|hasTranslateOnlySceneTransform
parameter_list|()
block|{
name|ensureSceneTransform
argument_list|()
expr_stmt|;
return|return
name|sceneTransformTranslateOnly
return|;
block|}
specifier|inline
name|void
name|invalidateChildrenSceneTransform
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|d_ptr
operator|->
name|dirtySceneTransform
operator|=
literal|1
expr_stmt|;
block|}
specifier|inline
name|qreal
name|calcEffectiveOpacity
argument_list|()
specifier|const
block|{
name|qreal
name|o
operator|=
name|opacity
block|;
name|QGraphicsItem
operator|*
name|p
operator|=
name|parent
block|;
name|int
name|myFlags
operator|=
name|flags
block|;
while|while
condition|(
name|p
condition|)
block|{
name|int
name|parentFlags
init|=
name|p
operator|->
name|d_ptr
operator|->
name|flags
decl_stmt|;
comment|// If I have a parent, and I don't ignore my parent's opacity, and my
comment|// parent propagates to me, then combine my local opacity with my parent's
comment|// effective opacity into my effective opacity.
if|if
condition|(
operator|(
name|myFlags
operator|&
name|QGraphicsItem
operator|::
name|ItemIgnoresParentOpacity
operator|)
operator|||
operator|(
name|parentFlags
operator|&
name|QGraphicsItem
operator|::
name|ItemDoesntPropagateOpacityToChildren
operator|)
condition|)
block|{
break|break;
block|}
name|o
operator|*=
name|p
operator|->
name|d_ptr
operator|->
name|opacity
expr_stmt|;
name|p
operator|=
name|p
operator|->
name|d_ptr
operator|->
name|parent
expr_stmt|;
name|myFlags
operator|=
name|parentFlags
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
specifier|inline
name|bool
name|isOpacityNull
argument_list|()
specifier|const
block|{
return|return
operator|(
name|opacity
operator|<
name|qreal
argument_list|(
literal|0.001
argument_list|)
operator|)
return|;
block|}
specifier|static
specifier|inline
name|bool
name|isOpacityNull
parameter_list|(
name|qreal
name|opacity
parameter_list|)
block|{
return|return
operator|(
name|opacity
operator|<
name|qreal
argument_list|(
literal|0.001
argument_list|)
operator|)
return|;
block|}
specifier|inline
name|bool
name|isFullyTransparent
argument_list|()
specifier|const
block|{
if|if
condition|(
name|isOpacityNull
argument_list|()
condition|)
return|return
name|true
return|;
if|if
condition|(
operator|!
name|parent
condition|)
return|return
name|false
return|;
return|return
name|isOpacityNull
argument_list|(
name|calcEffectiveOpacity
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|qreal
name|effectiveOpacity
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|parent
operator|||
operator|!
name|opacity
condition|)
return|return
name|opacity
return|;
end_expr_stmt
begin_return
return|return
name|calcEffectiveOpacity
argument_list|()
return|;
end_return
begin_decl_stmt
unit|}      inline
name|qreal
name|combineOpacityFromParent
argument_list|(
name|qreal
name|parentOpacity
argument_list|)
decl|const
block|{
if|if
condition|(
name|parent
operator|&&
operator|!
operator|(
name|flags
operator|&
name|QGraphicsItem
operator|::
name|ItemIgnoresParentOpacity
operator|)
operator|&&
operator|!
operator|(
name|parent
operator|->
name|d_ptr
operator|->
name|flags
operator|&
name|QGraphicsItem
operator|::
name|ItemDoesntPropagateOpacityToChildren
operator|)
condition|)
block|{
return|return
name|parentOpacity
operator|*
name|opacity
return|;
block|}
return|return
name|opacity
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|childrenCombineOpacity
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|children
operator|.
name|size
argument_list|()
condition|)
return|return
name|true
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|flags
operator|&
name|QGraphicsItem
operator|::
name|ItemDoesntPropagateOpacityToChildren
condition|)
return|return
name|false
return|;
end_if
begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|d_ptr
operator|->
name|flags
operator|&
name|QGraphicsItem
operator|::
name|ItemIgnoresParentOpacity
condition|)
return|return
name|false
return|;
block|}
end_for
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}      inline
name|bool
name|childrenClippedToShape
argument_list|()
specifier|const
block|{
return|return
operator|(
name|flags
operator|&
name|QGraphicsItem
operator|::
name|ItemClipsChildrenToShape
operator|)
operator|||
name|children
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isInvisible
argument_list|()
specifier|const
block|{
return|return
operator|!
name|visible
operator|||
operator|(
name|childrenCombineOpacity
argument_list|()
operator|&&
name|isFullyTransparent
argument_list|()
operator|)
return|;
block|}
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|markParentDirty
parameter_list|(
name|bool
name|updateBoundingRect
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|void
name|setFocusHelper
argument_list|(
name|Qt
operator|::
name|FocusReason
name|focusReason
argument_list|,
name|bool
name|climb
argument_list|,
name|bool
name|focusFromHide
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|clearFocusHelper
parameter_list|(
name|bool
name|giveFocusToParent
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|setSubFocus
parameter_list|(
name|QGraphicsItem
modifier|*
name|rootItem
init|=
literal|0
parameter_list|,
name|QGraphicsItem
modifier|*
name|stopItem
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|clearSubFocus
parameter_list|(
name|QGraphicsItem
modifier|*
name|rootItem
init|=
literal|0
parameter_list|,
name|QGraphicsItem
modifier|*
name|stopItem
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|resetFocusProxy
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|subFocusItemChange
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|focusScopeItemChange
parameter_list|(
name|bool
name|isSubFocusItem
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
specifier|static
name|void
name|children_append
argument_list|(
name|QDeclarativeListProperty
operator|<
name|QGraphicsObject
operator|>
operator|*
name|list
argument_list|,
name|QGraphicsObject
operator|*
name|item
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|children_count
argument_list|(
name|QDeclarativeListProperty
operator|<
name|QGraphicsObject
operator|>
operator|*
name|list
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|QGraphicsObject
modifier|*
name|children_at
argument_list|(
name|QDeclarativeListProperty
operator|<
name|QGraphicsObject
operator|>
operator|*
name|list
argument_list|,
name|int
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|void
name|children_clear
argument_list|(
name|QDeclarativeListProperty
operator|<
name|QGraphicsObject
operator|>
operator|*
name|list
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QTransform
name|transformToParent
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
specifier|inline
name|void
name|ensureSortedChildren
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|static
specifier|inline
name|bool
name|insertionOrder
parameter_list|(
name|QGraphicsItem
modifier|*
name|a
parameter_list|,
name|QGraphicsItem
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|ensureSequentialSiblingIndex
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
specifier|inline
name|void
name|sendScenePosChange
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|siblingOrderChange
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|// Private Properties
end_comment
begin_expr_stmt
name|virtual
name|qreal
name|width
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|virtual
name|void
name|setWidth
parameter_list|(
name|qreal
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|resetWidth
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|virtual
name|qreal
name|height
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|virtual
name|void
name|setHeight
parameter_list|(
name|qreal
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|virtual
name|void
name|resetHeight
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
name|QRectF
name|childrenBoundingRect
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QRectF
name|needsRepaint
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QMap
operator|<
name|QWidget
operator|*
operator|,
name|QRect
operator|>
name|paintedViewBoundingRects
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QPointF
name|pos
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|qreal
name|z
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|qreal
name|opacity
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QGraphicsScene
modifier|*
name|scene
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QGraphicsItem
modifier|*
name|parent
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|QGraphicsItem
operator|*
operator|>
name|children
expr_stmt|;
end_expr_stmt
begin_struct_decl
struct_decl|struct
name|TransformData
struct_decl|;
end_struct_decl
begin_decl_stmt
name|TransformData
modifier|*
name|transformData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QGraphicsEffect
modifier|*
name|graphicsEffect
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QTransform
name|sceneTransform
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|index
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|siblingIndex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|itemDepth
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Lazily calculated when calling depth().
end_comment
begin_decl_stmt
name|QGraphicsItem
modifier|*
name|focusProxy
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|QGraphicsItem
operator|*
operator|*
operator|>
name|focusProxyRefs
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QGraphicsItem
modifier|*
name|subFocusItem
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QGraphicsItem
modifier|*
name|focusScopeItem
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Qt
operator|::
name|InputMethodHints
name|imHints
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QGraphicsItem
operator|::
name|PanelModality
name|panelModality
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
end_ifndef
begin_expr_stmt
name|QMap
operator|<
name|Qt
operator|::
name|GestureType
operator|,
name|Qt
operator|::
name|GestureFlags
operator|>
name|gestureContext
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Packed 32 bits
end_comment
begin_decl_stmt
name|quint32
name|acceptedMouseButtons
range|:
literal|5
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|visible
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|explicitlyHidden
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|enabled
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|explicitlyDisabled
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|selected
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|acceptsHover
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|acceptDrops
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|isMemberOfGroup
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|handlesChildEvents
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|itemDiscovered
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|hasCursor
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|ancestorFlags
range|:
literal|4
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|cacheMode
range|:
literal|2
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|hasBoundingRegionGranularity
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|isWidget
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|dirty
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|dirtyChildren
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|localCollisionHack
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|inSetPosHelper
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|needSortChildren
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|allChildrenDirty
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|fullUpdatePending
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|dirtyChildrenBoundingRect
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Packed 32 bits
end_comment
begin_decl_stmt
name|quint32
name|flags
range|:
literal|19
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|paintedViewBoundingRectsNeedRepaint
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|dirtySceneTransform
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|geometryChanged
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|inDestructor
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|isObject
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|ignoreVisible
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|ignoreOpacity
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|acceptTouchEvents
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|acceptedTouchBeginEvent
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|filtersDescendantEvents
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|sceneTransformTranslateOnly
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|notifyBoundingRectChanged
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|notifyInvalidated
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_comment
comment|// New 32 bits
end_comment
begin_decl_stmt
name|quint32
name|mouseSetsFocus
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|explicitActivate
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|wantsActive
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|holesInSiblingIndex
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|sequentialOrdering
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|updateDueToGraphicsEffect
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|scenePosDescendants
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|pendingPolish
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|mayHaveChildWithGraphicsEffect
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|isDeclarativeItem
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|sendParentChangeNotification
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|quint32
name|padding
range|:
literal|21
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Optional stacking order
end_comment
begin_decl_stmt
name|int
name|globalStackingOrder
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QGraphicsItem
modifier|*
name|q_ptr
decl_stmt|;
end_decl_stmt
begin_expr_stmt
unit|};  struct
DECL|struct|TransformData
name|QGraphicsItemPrivate
operator|::
name|TransformData
block|{
DECL|member|transform
name|QTransform
name|transform
block|;
DECL|member|scale
name|qreal
name|scale
block|;
DECL|member|rotation
name|qreal
name|rotation
block|;
DECL|member|xOrigin
name|qreal
name|xOrigin
block|;
DECL|member|yOrigin
name|qreal
name|yOrigin
block|;
DECL|member|graphicsTransforms
name|QList
operator|<
name|QGraphicsTransform
operator|*
operator|>
name|graphicsTransforms
block|;
DECL|member|onlyTransform
name|bool
name|onlyTransform
block|;
DECL|function|TransformData
name|TransformData
argument_list|()
operator|:
name|scale
argument_list|(
literal|1.0
argument_list|)
block|,
name|rotation
argument_list|(
literal|0.0
argument_list|)
block|,
name|xOrigin
argument_list|(
literal|0.0
argument_list|)
block|,
name|yOrigin
argument_list|(
literal|0.0
argument_list|)
block|,
name|onlyTransform
argument_list|(
argument|true
argument_list|)
block|{ }
DECL|function|computedFullTransform
name|QTransform
name|computedFullTransform
argument_list|(
argument|QTransform *postmultiplyTransform =
literal|0
argument_list|)
specifier|const
block|{
if|if
condition|(
name|onlyTransform
condition|)
block|{
if|if
condition|(
operator|!
name|postmultiplyTransform
operator|||
name|postmultiplyTransform
operator|->
name|isIdentity
argument_list|()
condition|)
return|return
name|transform
return|;
if|if
condition|(
name|transform
operator|.
name|isIdentity
argument_list|()
condition|)
return|return
operator|*
name|postmultiplyTransform
return|;
return|return
name|transform
operator|*
operator|*
name|postmultiplyTransform
return|;
block|}
name|QTransform
name|x
argument_list|(
name|transform
argument_list|)
block|;
if|if
condition|(
operator|!
name|graphicsTransforms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QMatrix4x4
name|m
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|graphicsTransforms
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|graphicsTransforms
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|applyTo
argument_list|(
operator|&
name|m
argument_list|)
expr_stmt|;
name|x
operator|*=
name|m
operator|.
name|toTransform
argument_list|()
expr_stmt|;
block|}
name|x
operator|.
name|translate
argument_list|(
name|xOrigin
argument_list|,
name|yOrigin
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|x
operator|.
name|rotate
argument_list|(
name|rotation
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|x
operator|.
name|scale
argument_list|(
name|scale
argument_list|,
name|scale
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|x
operator|.
name|translate
argument_list|(
operator|-
name|xOrigin
argument_list|,
operator|-
name|yOrigin
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|postmultiplyTransform
condition|)
name|x
operator|*=
operator|*
name|postmultiplyTransform
expr_stmt|;
end_if
begin_return
return|return
name|x
return|;
end_return
begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt
begin_struct
DECL|struct|QGraphicsItemPaintInfo
struct|struct
name|QGraphicsItemPaintInfo
block|{
DECL|function|QGraphicsItemPaintInfo
specifier|inline
name|QGraphicsItemPaintInfo
argument_list|(
argument|const QTransform *const xform1
argument_list|,
argument|const QTransform *const xform2
argument_list|,
argument|const QTransform *const xform3
argument_list|,
argument|QRegion *r
argument_list|,
argument|QWidget *w
argument_list|,
argument|QStyleOptionGraphicsItem *opt
argument_list|,
argument|QPainter *p
argument_list|,
argument|qreal o
argument_list|,
argument|bool b1
argument_list|,
argument|bool b2
argument_list|)
operator|:
name|viewTransform
argument_list|(
name|xform1
argument_list|)
operator|,
name|transformPtr
argument_list|(
name|xform2
argument_list|)
operator|,
name|effectTransform
argument_list|(
name|xform3
argument_list|)
operator|,
name|exposedRegion
argument_list|(
name|r
argument_list|)
operator|,
name|widget
argument_list|(
name|w
argument_list|)
operator|,
name|option
argument_list|(
name|opt
argument_list|)
operator|,
name|painter
argument_list|(
name|p
argument_list|)
operator|,
name|opacity
argument_list|(
name|o
argument_list|)
operator|,
name|wasDirtySceneTransform
argument_list|(
name|b1
argument_list|)
operator|,
name|drawItem
argument_list|(
argument|b2
argument_list|)
block|{}
DECL|member|viewTransform
specifier|const
name|QTransform
operator|*
name|viewTransform
expr_stmt|;
DECL|member|transformPtr
specifier|const
name|QTransform
modifier|*
name|transformPtr
decl_stmt|;
DECL|member|effectTransform
specifier|const
name|QTransform
modifier|*
name|effectTransform
decl_stmt|;
DECL|member|exposedRegion
name|QRegion
modifier|*
name|exposedRegion
decl_stmt|;
DECL|member|widget
name|QWidget
modifier|*
name|widget
decl_stmt|;
DECL|member|option
name|QStyleOptionGraphicsItem
modifier|*
name|option
decl_stmt|;
DECL|member|painter
name|QPainter
modifier|*
name|painter
decl_stmt|;
DECL|member|opacity
name|qreal
name|opacity
decl_stmt|;
DECL|member|wasDirtySceneTransform
name|quint32
name|wasDirtySceneTransform
range|:
literal|1
decl_stmt|;
DECL|member|drawItem
name|quint32
name|drawItem
range|:
literal|1
decl_stmt|;
block|}
struct|;
end_struct
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
end_ifndef
begin_decl_stmt
name|class
name|QGraphicsItemEffectSourcePrivate
range|:
name|public
name|QGraphicsEffectSourcePrivate
block|{
name|public
operator|:
name|QGraphicsItemEffectSourcePrivate
argument_list|(
name|QGraphicsItem
operator|*
name|i
argument_list|)
operator|:
name|QGraphicsEffectSourcePrivate
argument_list|()
block|,
name|item
argument_list|(
name|i
argument_list|)
block|,
name|info
argument_list|(
literal|0
argument_list|)
block|{}
specifier|inline
name|void
name|detach
argument_list|()
block|{
name|item
operator|->
name|d_ptr
operator|->
name|graphicsEffect
operator|=
literal|0
block|;
name|item
operator|->
name|prepareGeometryChange
argument_list|()
block|;     }
specifier|inline
specifier|const
name|QGraphicsItem
operator|*
name|graphicsItem
argument_list|()
specifier|const
block|{
return|return
name|item
return|;
block|}
specifier|inline
specifier|const
name|QWidget
operator|*
name|widget
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
specifier|inline
name|void
name|update
argument_list|()
block|{
name|item
operator|->
name|d_ptr
operator|->
name|updateDueToGraphicsEffect
operator|=
name|true
block|;
name|item
operator|->
name|update
argument_list|()
block|;
name|item
operator|->
name|d_ptr
operator|->
name|updateDueToGraphicsEffect
operator|=
name|false
block|;     }
specifier|inline
name|void
name|effectBoundingRectChanged
argument_list|()
block|{
name|item
operator|->
name|prepareGeometryChange
argument_list|()
block|; }
specifier|inline
name|bool
name|isPixmap
argument_list|()
specifier|const
block|{
return|return
name|item
operator|->
name|type
argument_list|()
operator|==
name|QGraphicsPixmapItem
operator|::
name|Type
operator|&&
operator|!
operator|(
name|item
operator|->
name|flags
argument_list|()
operator|&
name|QGraphicsItem
operator|::
name|ItemIsSelectable
operator|)
operator|&&
name|item
operator|->
name|d_ptr
operator|->
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
comment|//|| (item->d_ptr->isObject&& qobject_cast<QDeclarativeImage *>(q_func()));
block|}
specifier|inline
specifier|const
name|QStyleOption
operator|*
name|styleOption
argument_list|()
specifier|const
block|{
return|return
name|info
operator|?
name|info
operator|->
name|option
operator|:
literal|0
return|;
block|}
specifier|inline
name|QRect
name|deviceRect
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|info
operator|||
operator|!
name|info
operator|->
name|widget
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsEffectSource::deviceRect: Not yet implemented, lacking device context"
argument_list|)
expr_stmt|;
return|return
name|QRect
argument_list|()
return|;
block|}
return|return
name|info
operator|->
name|widget
operator|->
name|rect
argument_list|()
return|;
block|}
name|QRectF
name|boundingRect
argument_list|(
argument|Qt::CoordinateSystem system
argument_list|)
specifier|const
block|;
name|void
name|draw
argument_list|(
name|QPainter
operator|*
argument_list|)
block|;
name|QPixmap
name|pixmap
argument_list|(
argument|Qt::CoordinateSystem system
argument_list|,
argument|QPoint *offset
argument_list|,
argument|QGraphicsEffect::PixmapPadMode mode
argument_list|)
specifier|const
block|;
name|QRect
name|paddedEffectRect
argument_list|(
argument|Qt::CoordinateSystem system
argument_list|,
argument|QGraphicsEffect::PixmapPadMode mode
argument_list|,
argument|const QRectF&sourceRect
argument_list|,
argument|bool *unpadded =
literal|0
argument_list|)
specifier|const
block|;
name|QGraphicsItem
operator|*
name|item
block|;
name|QGraphicsItemPaintInfo
operator|*
name|info
block|;
name|QTransform
name|lastEffectTransform
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_GRAPHICSEFFECT
end_comment
begin_comment
comment|/*!     Returns true if \a item1 is on top of \a item2.     The items don't need to be siblings.      \internal */
end_comment
begin_function
DECL|function|qt_closestItemFirst
specifier|inline
name|bool
name|qt_closestItemFirst
parameter_list|(
specifier|const
name|QGraphicsItem
modifier|*
name|item1
parameter_list|,
specifier|const
name|QGraphicsItem
modifier|*
name|item2
parameter_list|)
block|{
comment|// Siblings? Just check their z-values.
specifier|const
name|QGraphicsItemPrivate
modifier|*
name|d1
init|=
name|item1
operator|->
name|d_ptr
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|QGraphicsItemPrivate
modifier|*
name|d2
init|=
name|item2
operator|->
name|d_ptr
operator|.
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|d1
operator|->
name|parent
operator|==
name|d2
operator|->
name|parent
condition|)
return|return
name|qt_closestLeaf
argument_list|(
name|item1
argument_list|,
name|item2
argument_list|)
return|;
comment|// Find common ancestor, and each item's ancestor closest to the common
comment|// ancestor.
name|int
name|item1Depth
init|=
name|d1
operator|->
name|depth
argument_list|()
decl_stmt|;
name|int
name|item2Depth
init|=
name|d2
operator|->
name|depth
argument_list|()
decl_stmt|;
specifier|const
name|QGraphicsItem
modifier|*
name|p
init|=
name|item1
decl_stmt|;
specifier|const
name|QGraphicsItem
modifier|*
name|t1
init|=
name|item1
decl_stmt|;
while|while
condition|(
name|item1Depth
operator|>
name|item2Depth
operator|&&
operator|(
name|p
operator|=
name|p
operator|->
name|d_ptr
operator|->
name|parent
operator|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
name|item2
condition|)
block|{
comment|// item2 is one of item1's ancestors; item1 is on top
return|return
operator|!
operator|(
name|t1
operator|->
name|d_ptr
operator|->
name|flags
operator|&
name|QGraphicsItem
operator|::
name|ItemStacksBehindParent
operator|)
return|;
block|}
name|t1
operator|=
name|p
expr_stmt|;
operator|--
name|item1Depth
expr_stmt|;
block|}
name|p
operator|=
name|item2
expr_stmt|;
specifier|const
name|QGraphicsItem
modifier|*
name|t2
init|=
name|item2
decl_stmt|;
while|while
condition|(
name|item2Depth
operator|>
name|item1Depth
operator|&&
operator|(
name|p
operator|=
name|p
operator|->
name|d_ptr
operator|->
name|parent
operator|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
name|item1
condition|)
block|{
comment|// item1 is one of item2's ancestors; item1 is not on top
return|return
operator|(
name|t2
operator|->
name|d_ptr
operator|->
name|flags
operator|&
name|QGraphicsItem
operator|::
name|ItemStacksBehindParent
operator|)
return|;
block|}
name|t2
operator|=
name|p
expr_stmt|;
operator|--
name|item2Depth
expr_stmt|;
block|}
comment|// item1Ancestor is now at the same level as item2Ancestor, but not the same.
specifier|const
name|QGraphicsItem
modifier|*
name|p1
init|=
name|t1
decl_stmt|;
specifier|const
name|QGraphicsItem
modifier|*
name|p2
init|=
name|t2
decl_stmt|;
while|while
condition|(
name|t1
operator|&&
name|t1
operator|!=
name|t2
condition|)
block|{
name|p1
operator|=
name|t1
expr_stmt|;
name|p2
operator|=
name|t2
expr_stmt|;
name|t1
operator|=
name|t1
operator|->
name|d_ptr
operator|->
name|parent
expr_stmt|;
name|t2
operator|=
name|t2
operator|->
name|d_ptr
operator|->
name|parent
expr_stmt|;
block|}
comment|// in case we have a common ancestor, we compare the immediate children in the ancestor's path.
comment|// otherwise we compare the respective items' topLevelItems directly.
return|return
name|qt_closestLeaf
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if \a item2 is on top of \a item1.     The items don't need to be siblings.      \internal */
end_comment
begin_function
DECL|function|qt_closestItemLast
specifier|inline
name|bool
name|qt_closestItemLast
parameter_list|(
specifier|const
name|QGraphicsItem
modifier|*
name|item1
parameter_list|,
specifier|const
name|QGraphicsItem
modifier|*
name|item2
parameter_list|)
block|{
return|return
name|qt_closestItemFirst
argument_list|(
name|item2
argument_list|,
name|item1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_closestLeaf
specifier|inline
name|bool
name|qt_closestLeaf
parameter_list|(
specifier|const
name|QGraphicsItem
modifier|*
name|item1
parameter_list|,
specifier|const
name|QGraphicsItem
modifier|*
name|item2
parameter_list|)
block|{
comment|// Return true if sibling item1 is on top of item2.
specifier|const
name|QGraphicsItemPrivate
modifier|*
name|d1
init|=
name|item1
operator|->
name|d_ptr
operator|.
name|data
argument_list|()
decl_stmt|;
specifier|const
name|QGraphicsItemPrivate
modifier|*
name|d2
init|=
name|item2
operator|->
name|d_ptr
operator|.
name|data
argument_list|()
decl_stmt|;
name|bool
name|f1
init|=
name|d1
operator|->
name|flags
operator|&
name|QGraphicsItem
operator|::
name|ItemStacksBehindParent
decl_stmt|;
name|bool
name|f2
init|=
name|d2
operator|->
name|flags
operator|&
name|QGraphicsItem
operator|::
name|ItemStacksBehindParent
decl_stmt|;
if|if
condition|(
name|f1
operator|!=
name|f2
condition|)
return|return
name|f2
return|;
if|if
condition|(
name|d1
operator|->
name|z
operator|!=
name|d2
operator|->
name|z
condition|)
return|return
name|d1
operator|->
name|z
operator|>
name|d2
operator|->
name|z
return|;
return|return
name|d1
operator|->
name|siblingIndex
operator|>
name|d2
operator|->
name|siblingIndex
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|qt_notclosestLeaf
specifier|inline
name|bool
name|qt_notclosestLeaf
parameter_list|(
specifier|const
name|QGraphicsItem
modifier|*
name|item1
parameter_list|,
specifier|const
name|QGraphicsItem
modifier|*
name|item2
parameter_list|)
block|{
return|return
name|qt_closestLeaf
argument_list|(
name|item2
argument_list|,
name|item1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*    return the full transform of the item to the parent.  This include the position and all the transform data */
end_comment
begin_expr_stmt
DECL|function|transformToParent
specifier|inline
name|QTransform
name|QGraphicsItemPrivate
operator|::
name|transformToParent
argument_list|()
specifier|const
block|{
name|QTransform
name|matrix
block|;
name|combineTransformToParent
argument_list|(
operator|&
name|matrix
argument_list|)
block|;
return|return
name|matrix
return|;
block|}
end_expr_stmt
begin_comment
comment|/*!     \internal */
end_comment
begin_expr_stmt
DECL|function|ensureSortedChildren
specifier|inline
name|void
name|QGraphicsItemPrivate
operator|::
name|ensureSortedChildren
argument_list|()
block|{
if|if
condition|(
name|needSortChildren
condition|)
block|{
name|needSortChildren
operator|=
literal|0
expr_stmt|;
name|sequentialOrdering
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|qSort
argument_list|(
name|children
operator|.
name|begin
argument_list|()
argument_list|,
name|children
operator|.
name|end
argument_list|()
argument_list|,
name|qt_notclosestLeaf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|d_ptr
operator|->
name|siblingIndex
operator|!=
name|i
condition|)
block|{
name|sequentialOrdering
operator|=
literal|0
expr_stmt|;
break|break;
block|}
end_expr_stmt
begin_comment
unit|}     } }
comment|/*!     \internal */
end_comment
begin_expr_stmt
unit|inline
DECL|function|insertionOrder
name|bool
name|QGraphicsItemPrivate
operator|::
name|insertionOrder
argument_list|(
argument|QGraphicsItem *a
argument_list|,
argument|QGraphicsItem *b
argument_list|)
block|{
return|return
name|a
operator|->
name|d_ptr
operator|->
name|siblingIndex
operator|<
name|b
operator|->
name|d_ptr
operator|->
name|siblingIndex
return|;
block|}
end_expr_stmt
begin_comment
comment|/*!     \internal */
end_comment
begin_expr_stmt
DECL|function|markParentDirty
specifier|inline
name|void
name|QGraphicsItemPrivate
operator|::
name|markParentDirty
argument_list|(
argument|bool updateBoundingRect
argument_list|)
block|{
name|QGraphicsItemPrivate
operator|*
name|parentp
operator|=
name|this
block|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
if|if
condition|(
name|updateBoundingRect
operator|&&
name|parentp
operator|->
name|graphicsEffect
operator|&&
operator|!
name|parentp
operator|->
name|inSetPosHelper
condition|)
block|{
name|parentp
operator|->
name|notifyInvalidated
operator|=
literal|1
expr_stmt|;
name|static_cast
operator|<
name|QGraphicsItemEffectSourcePrivate
operator|*
operator|>
operator|(
name|parentp
operator|->
name|graphicsEffect
operator|->
name|d_func
argument_list|()
operator|->
name|source
operator|->
name|d_func
argument_list|()
operator|)
operator|->
name|invalidateCache
argument_list|()
expr_stmt|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_while
while|while
condition|(
name|parentp
operator|->
name|parent
condition|)
block|{
name|parentp
operator|=
name|parentp
operator|->
name|parent
operator|->
name|d_ptr
operator|.
name|data
argument_list|()
expr_stmt|;
name|parentp
operator|->
name|dirtyChildren
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|updateBoundingRect
condition|)
block|{
name|parentp
operator|->
name|dirtyChildrenBoundingRect
operator|=
literal|1
expr_stmt|;
comment|// ### Only do this if the parent's effect applies to the entire subtree.
name|parentp
operator|->
name|notifyBoundingRectChanged
operator|=
literal|1
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSEFFECT
if|if
condition|(
name|parentp
operator|->
name|graphicsEffect
condition|)
block|{
if|if
condition|(
name|updateBoundingRect
condition|)
block|{
name|static_cast
operator|<
name|QGraphicsItemEffectSourcePrivate
operator|*
operator|>
operator|(
name|parentp
operator|->
name|graphicsEffect
operator|->
name|d_func
argument_list|()
operator|->
name|source
operator|->
name|d_func
argument_list|()
operator|)
operator|->
name|invalidateCache
argument_list|()
expr_stmt|;
name|parentp
operator|->
name|notifyInvalidated
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|parentp
operator|->
name|scene
operator|&&
name|parentp
operator|->
name|graphicsEffect
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|parentp
operator|->
name|dirty
operator|=
literal|1
expr_stmt|;
name|parentp
operator|->
name|fullUpdatePending
operator|=
literal|1
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_while
begin_endif
unit|}  QT_END_NAMESPACE
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GRAPHICSVIEW
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
