begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*!     \class QGraphicsItemAnimation     \brief The QGraphicsItemAnimation class provides simple animation     support for QGraphicsItem.     \since 4.2     \ingroup graphicsview-api     \inmodule QtWidgets     \deprecated      The QGraphicsItemAnimation class animates a QGraphicsItem. You can     schedule changes to the item's transformation matrix at     specified steps. The QGraphicsItemAnimation class has a     current step value. When this value changes the transformations     scheduled at that step are performed. The current step of the     animation is set with the \c setStep() function.      QGraphicsItemAnimation will do a simple linear interpolation     between the nearest adjacent scheduled changes to calculate the     matrix. For instance, if you set the position of an item at values     0.0 and 1.0, the animation will show the item moving in a straight     line between these positions. The same is true for scaling and     rotation.      It is usual to use the class with a QTimeLine. The timeline's     \l{QTimeLine::}{valueChanged()} signal is then connected to the     \c setStep() slot. For example, you can set up an item for rotation     by calling \c setRotationAt() for different step values.     The animations timeline is set with the setTimeLine() function.      An example animation with a timeline follows:      \snippet timeline/main.cpp 0      Note that steps lie between 0.0 and 1.0. It may be necessary to use     \l{QTimeLine::}{setUpdateInterval()}. The default update interval     is 40 ms. A scheduled transformation cannot be removed when set,     so scheduling several transformations of the same kind (e.g.,     rotations) at the same step is not recommended.      \sa QTimeLine, {Graphics View Framework} */
end_comment
begin_include
include|#
directive|include
file|"qgraphicsitemanimation.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
end_ifndef
begin_include
include|#
directive|include
file|"qgraphicsitem.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qtimeline.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpointer.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpair.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qmatrix.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QGraphicsItemAnimationPrivate
class|class
name|QGraphicsItemAnimationPrivate
block|{
public|public:
DECL|function|QGraphicsItemAnimationPrivate
specifier|inline
name|QGraphicsItemAnimationPrivate
parameter_list|()
member_init_list|:
name|q
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|timeLine
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|item
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|step
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|member|q
name|QGraphicsItemAnimation
modifier|*
name|q
decl_stmt|;
DECL|member|timeLine
name|QPointer
argument_list|<
name|QTimeLine
argument_list|>
name|timeLine
decl_stmt|;
DECL|member|item
name|QGraphicsItem
modifier|*
name|item
decl_stmt|;
DECL|member|startPos
name|QPointF
name|startPos
decl_stmt|;
DECL|member|startMatrix
name|QMatrix
name|startMatrix
decl_stmt|;
DECL|member|step
name|qreal
name|step
decl_stmt|;
DECL|struct|Pair
struct|struct
name|Pair
block|{
DECL|function|Pair
name|Pair
parameter_list|(
name|qreal
name|a
parameter_list|,
name|qreal
name|b
parameter_list|)
member_init_list|:
name|step
argument_list|(
name|a
argument_list|)
member_init_list|,
name|value
argument_list|(
name|b
argument_list|)
block|{}
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|Pair
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|step
operator|<
name|other
operator|.
name|step
return|;
block|}
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|Pair
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|step
operator|==
name|other
operator|.
name|step
return|;
block|}
DECL|member|step
name|qreal
name|step
decl_stmt|;
DECL|member|value
name|qreal
name|value
decl_stmt|;
block|}
struct|;
DECL|member|xPosition
name|QList
argument_list|<
name|Pair
argument_list|>
name|xPosition
decl_stmt|;
DECL|member|yPosition
name|QList
argument_list|<
name|Pair
argument_list|>
name|yPosition
decl_stmt|;
DECL|member|rotation
name|QList
argument_list|<
name|Pair
argument_list|>
name|rotation
decl_stmt|;
DECL|member|verticalScale
name|QList
argument_list|<
name|Pair
argument_list|>
name|verticalScale
decl_stmt|;
DECL|member|horizontalScale
name|QList
argument_list|<
name|Pair
argument_list|>
name|horizontalScale
decl_stmt|;
DECL|member|verticalShear
name|QList
argument_list|<
name|Pair
argument_list|>
name|verticalShear
decl_stmt|;
DECL|member|horizontalShear
name|QList
argument_list|<
name|Pair
argument_list|>
name|horizontalShear
decl_stmt|;
DECL|member|xTranslation
name|QList
argument_list|<
name|Pair
argument_list|>
name|xTranslation
decl_stmt|;
DECL|member|yTranslation
name|QList
argument_list|<
name|Pair
argument_list|>
name|yTranslation
decl_stmt|;
name|qreal
name|linearValueForStep
parameter_list|(
name|qreal
name|step
parameter_list|,
name|QList
argument_list|<
name|Pair
argument_list|>
modifier|*
name|source
parameter_list|,
name|qreal
name|defaultValue
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|insertUniquePair
parameter_list|(
name|qreal
name|step
parameter_list|,
name|qreal
name|value
parameter_list|,
name|QList
argument_list|<
name|Pair
argument_list|>
modifier|*
name|binList
parameter_list|,
specifier|const
name|char
modifier|*
name|method
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|linearValueForStep
name|qreal
name|QGraphicsItemAnimationPrivate
operator|::
name|linearValueForStep
parameter_list|(
name|qreal
name|step
parameter_list|,
name|QList
argument_list|<
name|Pair
argument_list|>
modifier|*
name|source
parameter_list|,
name|qreal
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|source
operator|->
name|isEmpty
argument_list|()
condition|)
return|return
name|defaultValue
return|;
name|step
operator|=
name|qMin
argument_list|<
name|qreal
argument_list|>
argument_list|(
name|qMax
argument_list|<
name|qreal
argument_list|>
argument_list|(
name|step
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|step
operator|==
literal|1
condition|)
return|return
name|source
operator|->
name|last
argument_list|()
operator|.
name|value
return|;
name|qreal
name|stepBefore
init|=
literal|0
decl_stmt|;
name|qreal
name|stepAfter
init|=
literal|1
decl_stmt|;
name|qreal
name|valueBefore
init|=
name|source
operator|->
name|first
argument_list|()
operator|.
name|step
operator|==
literal|0
condition|?
name|source
operator|->
name|first
argument_list|()
operator|.
name|value
else|:
name|defaultValue
decl_stmt|;
name|qreal
name|valueAfter
init|=
name|source
operator|->
name|last
argument_list|()
operator|.
name|value
decl_stmt|;
comment|// Find the closest step and value before the given step.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|source
operator|->
name|size
argument_list|()
operator|&&
name|step
operator|>=
name|source
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|step
condition|;
operator|++
name|i
control|)
block|{
name|stepBefore
operator|=
name|source
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|step
expr_stmt|;
name|valueBefore
operator|=
name|source
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
expr_stmt|;
block|}
comment|// Find the closest step and value after the given step.
for|for
control|(
name|int
name|j
init|=
name|source
operator|->
name|size
argument_list|()
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
operator|&&
name|step
operator|<
name|source
operator|->
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|step
condition|;
operator|--
name|j
control|)
block|{
name|stepAfter
operator|=
name|source
operator|->
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|step
expr_stmt|;
name|valueAfter
operator|=
name|source
operator|->
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|value
expr_stmt|;
block|}
comment|// Do a simple linear interpolation.
return|return
name|valueBefore
operator|+
operator|(
name|valueAfter
operator|-
name|valueBefore
operator|)
operator|*
operator|(
operator|(
name|step
operator|-
name|stepBefore
operator|)
operator|/
operator|(
name|stepAfter
operator|-
name|stepBefore
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|insertUniquePair
name|void
name|QGraphicsItemAnimationPrivate
operator|::
name|insertUniquePair
parameter_list|(
name|qreal
name|step
parameter_list|,
name|qreal
name|value
parameter_list|,
name|QList
argument_list|<
name|Pair
argument_list|>
modifier|*
name|binList
parameter_list|,
specifier|const
name|char
modifier|*
name|method
parameter_list|)
block|{
if|if
condition|(
name|step
argument_list|<
literal|0.0
operator|||
name|step
argument_list|>
literal|1.0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsItemAnimation::%s: invalid step = %f"
argument_list|,
name|method
argument_list|,
name|step
argument_list|)
expr_stmt|;
return|return;
block|}
name|Pair
name|pair
argument_list|(
name|step
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|Pair
argument_list|>
operator|::
name|iterator
name|result
init|=
name|qBinaryFind
argument_list|(
name|binList
operator|->
name|begin
argument_list|()
argument_list|,
name|binList
operator|->
name|end
argument_list|()
argument_list|,
name|pair
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|binList
operator|->
name|end
argument_list|()
condition|)
name|result
operator|->
name|value
operator|=
name|value
expr_stmt|;
else|else
block|{
operator|*
name|binList
operator|<<
name|pair
expr_stmt|;
name|qSort
argument_list|(
name|binList
operator|->
name|begin
argument_list|()
argument_list|,
name|binList
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Constructs an animation object with the given \a parent. */
end_comment
begin_constructor
DECL|function|QGraphicsItemAnimation
name|QGraphicsItemAnimation
operator|::
name|QGraphicsItemAnimation
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|QGraphicsItemAnimationPrivate
argument_list|)
block|{
name|d
operator|->
name|q
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Destroys the animation object. */
end_comment
begin_destructor
DECL|function|~QGraphicsItemAnimation
name|QGraphicsItemAnimation
operator|::
name|~
name|QGraphicsItemAnimation
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!   Returns the item on which the animation object operates.    \sa setItem() */
end_comment
begin_function
DECL|function|item
name|QGraphicsItem
modifier|*
name|QGraphicsItemAnimation
operator|::
name|item
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|item
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the specified \a item to be used in the animation.    \sa item() */
end_comment
begin_function
DECL|function|setItem
name|void
name|QGraphicsItemAnimation
operator|::
name|setItem
parameter_list|(
name|QGraphicsItem
modifier|*
name|item
parameter_list|)
block|{
name|d
operator|->
name|item
operator|=
name|item
expr_stmt|;
name|d
operator|->
name|startPos
operator|=
name|d
operator|->
name|item
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the timeline object used to control the rate at which the animation   occurs.    \sa setTimeLine() */
end_comment
begin_function
DECL|function|timeLine
name|QTimeLine
modifier|*
name|QGraphicsItemAnimation
operator|::
name|timeLine
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|timeLine
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the timeline object used to control the rate of animation to the \a timeLine   specified.    \sa timeLine() */
end_comment
begin_function
DECL|function|setTimeLine
name|void
name|QGraphicsItemAnimation
operator|::
name|setTimeLine
parameter_list|(
name|QTimeLine
modifier|*
name|timeLine
parameter_list|)
block|{
if|if
condition|(
name|d
operator|->
name|timeLine
operator|==
name|timeLine
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|timeLine
condition|)
operator|delete
name|d
operator|->
name|timeLine
expr_stmt|;
if|if
condition|(
operator|!
name|timeLine
condition|)
return|return;
name|d
operator|->
name|timeLine
operator|=
name|timeLine
expr_stmt|;
name|connect
argument_list|(
name|timeLine
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|qreal
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setStep
argument_list|(
name|qreal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the position of the item at the given \a step value.    \sa setPosAt() */
end_comment
begin_function
DECL|function|posAt
name|QPointF
name|QGraphicsItemAnimation
operator|::
name|posAt
parameter_list|(
name|qreal
name|step
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|step
argument_list|<
literal|0.0
operator|||
name|step
argument_list|>
literal|1.0
condition|)
name|qWarning
argument_list|(
literal|"QGraphicsItemAnimation::posAt: invalid step = %f"
argument_list|,
name|step
argument_list|)
expr_stmt|;
return|return
name|QPointF
argument_list|(
name|d
operator|->
name|linearValueForStep
argument_list|(
name|step
argument_list|,
operator|&
name|d
operator|->
name|xPosition
argument_list|,
name|d
operator|->
name|startPos
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|d
operator|->
name|linearValueForStep
argument_list|(
name|step
argument_list|,
operator|&
name|d
operator|->
name|yPosition
argument_list|,
name|d
operator|->
name|startPos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \fn void QGraphicsItemAnimation::setPosAt(qreal step, const QPointF&point)    Sets the position of the item at the given \a step value to the \a point specified.    \sa posAt() */
end_comment
begin_function
DECL|function|setPosAt
name|void
name|QGraphicsItemAnimation
operator|::
name|setPosAt
parameter_list|(
name|qreal
name|step
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|d
operator|->
name|insertUniquePair
argument_list|(
name|step
argument_list|,
name|pos
operator|.
name|x
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|xPosition
argument_list|,
literal|"setPosAt"
argument_list|)
expr_stmt|;
name|d
operator|->
name|insertUniquePair
argument_list|(
name|step
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|yPosition
argument_list|,
literal|"setPosAt"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns all explicitly inserted positions.    \sa posAt(), setPosAt() */
end_comment
begin_function
DECL|function|posList
name|QList
argument_list|<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|>
name|QGraphicsItemAnimation
operator|::
name|posList
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|xPosition
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|list
operator|<<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|(
name|d
operator|->
name|xPosition
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|step
argument_list|,
name|QPointF
argument_list|(
name|d
operator|->
name|xPosition
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|,
name|d
operator|->
name|yPosition
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the matrix used to transform the item at the specified \a step value. */
end_comment
begin_function
DECL|function|matrixAt
name|QMatrix
name|QGraphicsItemAnimation
operator|::
name|matrixAt
parameter_list|(
name|qreal
name|step
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|step
argument_list|<
literal|0.0
operator|||
name|step
argument_list|>
literal|1.0
condition|)
name|qWarning
argument_list|(
literal|"QGraphicsItemAnimation::matrixAt: invalid step = %f"
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|QMatrix
name|matrix
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|rotation
operator|.
name|isEmpty
argument_list|()
condition|)
name|matrix
operator|.
name|rotate
argument_list|(
name|rotationAt
argument_list|(
name|step
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|verticalScale
operator|.
name|isEmpty
argument_list|()
condition|)
name|matrix
operator|.
name|scale
argument_list|(
name|horizontalScaleAt
argument_list|(
name|step
argument_list|)
argument_list|,
name|verticalScaleAt
argument_list|(
name|step
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|verticalShear
operator|.
name|isEmpty
argument_list|()
condition|)
name|matrix
operator|.
name|shear
argument_list|(
name|horizontalShearAt
argument_list|(
name|step
argument_list|)
argument_list|,
name|verticalShearAt
argument_list|(
name|step
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|xTranslation
operator|.
name|isEmpty
argument_list|()
condition|)
name|matrix
operator|.
name|translate
argument_list|(
name|xTranslationAt
argument_list|(
name|step
argument_list|)
argument_list|,
name|yTranslationAt
argument_list|(
name|step
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|matrix
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the angle at which the item is rotated at the specified \a step value.    \sa setRotationAt() */
end_comment
begin_function
DECL|function|rotationAt
name|qreal
name|QGraphicsItemAnimation
operator|::
name|rotationAt
parameter_list|(
name|qreal
name|step
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|step
argument_list|<
literal|0.0
operator|||
name|step
argument_list|>
literal|1.0
condition|)
name|qWarning
argument_list|(
literal|"QGraphicsItemAnimation::rotationAt: invalid step = %f"
argument_list|,
name|step
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|linearValueForStep
argument_list|(
name|step
argument_list|,
operator|&
name|d
operator|->
name|rotation
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the rotation of the item at the given \a step value to the \a angle specified.    \sa rotationAt() */
end_comment
begin_function
DECL|function|setRotationAt
name|void
name|QGraphicsItemAnimation
operator|::
name|setRotationAt
parameter_list|(
name|qreal
name|step
parameter_list|,
name|qreal
name|angle
parameter_list|)
block|{
name|d
operator|->
name|insertUniquePair
argument_list|(
name|step
argument_list|,
name|angle
argument_list|,
operator|&
name|d
operator|->
name|rotation
argument_list|,
literal|"setRotationAt"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns all explicitly inserted rotations.    \sa rotationAt(), setRotationAt() */
end_comment
begin_function
DECL|function|rotationList
name|QList
argument_list|<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|qreal
argument_list|>
argument_list|>
name|QGraphicsItemAnimation
operator|::
name|rotationList
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|qreal
argument_list|>
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|rotation
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|list
operator|<<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|qreal
argument_list|>
argument_list|(
name|d
operator|->
name|rotation
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|step
argument_list|,
name|d
operator|->
name|rotation
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the horizontal translation of the item at the specified \a step value.    \sa setTranslationAt() */
end_comment
begin_function
DECL|function|xTranslationAt
name|qreal
name|QGraphicsItemAnimation
operator|::
name|xTranslationAt
parameter_list|(
name|qreal
name|step
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|step
argument_list|<
literal|0.0
operator|||
name|step
argument_list|>
literal|1.0
condition|)
name|qWarning
argument_list|(
literal|"QGraphicsItemAnimation::xTranslationAt: invalid step = %f"
argument_list|,
name|step
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|linearValueForStep
argument_list|(
name|step
argument_list|,
operator|&
name|d
operator|->
name|xTranslation
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the vertical translation of the item at the specified \a step value.    \sa setTranslationAt() */
end_comment
begin_function
DECL|function|yTranslationAt
name|qreal
name|QGraphicsItemAnimation
operator|::
name|yTranslationAt
parameter_list|(
name|qreal
name|step
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|step
argument_list|<
literal|0.0
operator|||
name|step
argument_list|>
literal|1.0
condition|)
name|qWarning
argument_list|(
literal|"QGraphicsItemAnimation::yTranslationAt: invalid step = %f"
argument_list|,
name|step
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|linearValueForStep
argument_list|(
name|step
argument_list|,
operator|&
name|d
operator|->
name|yTranslation
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the translation of the item at the given \a step value using the horizontal   and vertical coordinates specified by \a dx and \a dy.    \sa xTranslationAt(), yTranslationAt() */
end_comment
begin_function
DECL|function|setTranslationAt
name|void
name|QGraphicsItemAnimation
operator|::
name|setTranslationAt
parameter_list|(
name|qreal
name|step
parameter_list|,
name|qreal
name|dx
parameter_list|,
name|qreal
name|dy
parameter_list|)
block|{
name|d
operator|->
name|insertUniquePair
argument_list|(
name|step
argument_list|,
name|dx
argument_list|,
operator|&
name|d
operator|->
name|xTranslation
argument_list|,
literal|"setTranslationAt"
argument_list|)
expr_stmt|;
name|d
operator|->
name|insertUniquePair
argument_list|(
name|step
argument_list|,
name|dy
argument_list|,
operator|&
name|d
operator|->
name|yTranslation
argument_list|,
literal|"setTranslationAt"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns all explicitly inserted translations.    \sa xTranslationAt(), yTranslationAt(), setTranslationAt() */
end_comment
begin_function
DECL|function|translationList
name|QList
argument_list|<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|>
name|QGraphicsItemAnimation
operator|::
name|translationList
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|xTranslation
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|list
operator|<<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|(
name|d
operator|->
name|xTranslation
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|step
argument_list|,
name|QPointF
argument_list|(
name|d
operator|->
name|xTranslation
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|,
name|d
operator|->
name|yTranslation
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the vertical scale for the item at the specified \a step value.    \sa setScaleAt() */
end_comment
begin_function
DECL|function|verticalScaleAt
name|qreal
name|QGraphicsItemAnimation
operator|::
name|verticalScaleAt
parameter_list|(
name|qreal
name|step
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|step
argument_list|<
literal|0.0
operator|||
name|step
argument_list|>
literal|1.0
condition|)
name|qWarning
argument_list|(
literal|"QGraphicsItemAnimation::verticalScaleAt: invalid step = %f"
argument_list|,
name|step
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|linearValueForStep
argument_list|(
name|step
argument_list|,
operator|&
name|d
operator|->
name|verticalScale
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the horizontal scale for the item at the specified \a step value.    \sa setScaleAt() */
end_comment
begin_function
DECL|function|horizontalScaleAt
name|qreal
name|QGraphicsItemAnimation
operator|::
name|horizontalScaleAt
parameter_list|(
name|qreal
name|step
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|step
argument_list|<
literal|0.0
operator|||
name|step
argument_list|>
literal|1.0
condition|)
name|qWarning
argument_list|(
literal|"QGraphicsItemAnimation::horizontalScaleAt: invalid step = %f"
argument_list|,
name|step
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|linearValueForStep
argument_list|(
name|step
argument_list|,
operator|&
name|d
operator|->
name|horizontalScale
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the scale of the item at the given \a step value using the horizontal and   vertical scale factors specified by \a sx and \a sy.    \sa verticalScaleAt(), horizontalScaleAt() */
end_comment
begin_function
DECL|function|setScaleAt
name|void
name|QGraphicsItemAnimation
operator|::
name|setScaleAt
parameter_list|(
name|qreal
name|step
parameter_list|,
name|qreal
name|sx
parameter_list|,
name|qreal
name|sy
parameter_list|)
block|{
name|d
operator|->
name|insertUniquePair
argument_list|(
name|step
argument_list|,
name|sx
argument_list|,
operator|&
name|d
operator|->
name|horizontalScale
argument_list|,
literal|"setScaleAt"
argument_list|)
expr_stmt|;
name|d
operator|->
name|insertUniquePair
argument_list|(
name|step
argument_list|,
name|sy
argument_list|,
operator|&
name|d
operator|->
name|verticalScale
argument_list|,
literal|"setScaleAt"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns all explicitly inserted scales.    \sa verticalScaleAt(), horizontalScaleAt(), setScaleAt() */
end_comment
begin_function
DECL|function|scaleList
name|QList
argument_list|<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|>
name|QGraphicsItemAnimation
operator|::
name|scaleList
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|horizontalScale
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|list
operator|<<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|(
name|d
operator|->
name|horizontalScale
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|step
argument_list|,
name|QPointF
argument_list|(
name|d
operator|->
name|horizontalScale
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|,
name|d
operator|->
name|verticalScale
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the vertical shear for the item at the specified \a step value.    \sa setShearAt() */
end_comment
begin_function
DECL|function|verticalShearAt
name|qreal
name|QGraphicsItemAnimation
operator|::
name|verticalShearAt
parameter_list|(
name|qreal
name|step
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|step
argument_list|<
literal|0.0
operator|||
name|step
argument_list|>
literal|1.0
condition|)
name|qWarning
argument_list|(
literal|"QGraphicsItemAnimation::verticalShearAt: invalid step = %f"
argument_list|,
name|step
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|linearValueForStep
argument_list|(
name|step
argument_list|,
operator|&
name|d
operator|->
name|verticalShear
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the horizontal shear for the item at the specified \a step value.    \sa setShearAt() */
end_comment
begin_function
DECL|function|horizontalShearAt
name|qreal
name|QGraphicsItemAnimation
operator|::
name|horizontalShearAt
parameter_list|(
name|qreal
name|step
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|step
argument_list|<
literal|0.0
operator|||
name|step
argument_list|>
literal|1.0
condition|)
name|qWarning
argument_list|(
literal|"QGraphicsItemAnimation::horizontalShearAt: invalid step = %f"
argument_list|,
name|step
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|linearValueForStep
argument_list|(
name|step
argument_list|,
operator|&
name|d
operator|->
name|horizontalShear
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the shear of the item at the given \a step value using the horizontal and   vertical shear factors specified by \a sh and \a sv.    \sa verticalShearAt(), horizontalShearAt() */
end_comment
begin_function
DECL|function|setShearAt
name|void
name|QGraphicsItemAnimation
operator|::
name|setShearAt
parameter_list|(
name|qreal
name|step
parameter_list|,
name|qreal
name|sh
parameter_list|,
name|qreal
name|sv
parameter_list|)
block|{
name|d
operator|->
name|insertUniquePair
argument_list|(
name|step
argument_list|,
name|sh
argument_list|,
operator|&
name|d
operator|->
name|horizontalShear
argument_list|,
literal|"setShearAt"
argument_list|)
expr_stmt|;
name|d
operator|->
name|insertUniquePair
argument_list|(
name|step
argument_list|,
name|sv
argument_list|,
operator|&
name|d
operator|->
name|verticalShear
argument_list|,
literal|"setShearAt"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns all explicitly inserted shears.    \sa verticalShearAt(), horizontalShearAt(), setShearAt() */
end_comment
begin_function
DECL|function|shearList
name|QList
argument_list|<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|>
name|QGraphicsItemAnimation
operator|::
name|shearList
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|horizontalShear
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|list
operator|<<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QPointF
argument_list|>
argument_list|(
name|d
operator|->
name|horizontalShear
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|step
argument_list|,
name|QPointF
argument_list|(
name|d
operator|->
name|horizontalShear
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|,
name|d
operator|->
name|verticalShear
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!   Clears the scheduled transformations used for the animation, but   retains the item and timeline. */
end_comment
begin_function
DECL|function|clear
name|void
name|QGraphicsItemAnimation
operator|::
name|clear
parameter_list|()
block|{
name|d
operator|->
name|xPosition
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|yPosition
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|rotation
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|verticalScale
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|horizontalScale
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|verticalShear
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|horizontalShear
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|xTranslation
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|yTranslation
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn void QGraphicsItemAnimation::setStep(qreal step)    Sets the current \a step value for the animation, causing the   transformations scheduled at this step to be performed. */
end_comment
begin_function
DECL|function|setStep
name|void
name|QGraphicsItemAnimation
operator|::
name|setStep
parameter_list|(
name|qreal
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
argument_list|<
literal|0.0
operator|||
name|x
argument_list|>
literal|1.0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsItemAnimation::setStep: invalid step = %f"
argument_list|,
name|x
argument_list|)
expr_stmt|;
return|return;
block|}
name|beforeAnimationStep
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|d
operator|->
name|step
operator|=
name|x
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|item
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|xPosition
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|d
operator|->
name|yPosition
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|item
operator|->
name|setPos
argument_list|(
name|posAt
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|rotation
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|d
operator|->
name|verticalScale
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|d
operator|->
name|horizontalScale
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|d
operator|->
name|verticalShear
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|d
operator|->
name|horizontalShear
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|d
operator|->
name|xTranslation
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|d
operator|->
name|yTranslation
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|d
operator|->
name|item
operator|->
name|setMatrix
argument_list|(
name|d
operator|->
name|startMatrix
operator|*
name|matrixAt
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|afterAnimationStep
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Resets the item to its starting position and transformation.      \obsolete      You can call setStep(0) instead. */
end_comment
begin_function
DECL|function|reset
name|void
name|QGraphicsItemAnimation
operator|::
name|reset
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|item
condition|)
return|return;
name|d
operator|->
name|startPos
operator|=
name|d
operator|->
name|item
operator|->
name|pos
argument_list|()
expr_stmt|;
name|d
operator|->
name|startMatrix
operator|=
name|d
operator|->
name|item
operator|->
name|matrix
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn void QGraphicsItemAnimation::beforeAnimationStep(qreal step)    This method is meant to be overridden by subclassed that needs to   execute additional code before a new step takes place. The   animation \a step is provided for use in cases where the action   depends on its value. */
end_comment
begin_function
DECL|function|beforeAnimationStep
name|void
name|QGraphicsItemAnimation
operator|::
name|beforeAnimationStep
parameter_list|(
name|qreal
name|step
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn void QGraphicsItemAnimation::afterAnimationStep(qreal step)    This method is meant to be overridden in subclasses that need to   execute additional code after a new step has taken place. The   animation \a step is provided for use in cases where the action   depends on its value. */
end_comment
begin_function
DECL|function|afterAnimationStep
name|void
name|QGraphicsItemAnimation
operator|::
name|afterAnimationStep
parameter_list|(
name|qreal
name|step
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GRAPHICSVIEW
end_comment
end_unit
