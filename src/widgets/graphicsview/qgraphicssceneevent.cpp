begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*!     \class QGraphicsSceneEvent     \brief The QGraphicsSceneEvent class provides a base class for all     graphics view related events.     \since 4.2     \ingroup graphicsview-api     \inmodule QtWidgets      When a QGraphicsView receives Qt mouse, keyboard, and drag and     drop events (QMouseEvent, QKeyEvent, QDragEvent, etc.), it     translates them into instances of QGraphicsSceneEvent subclasses     and forwards them to the QGraphicsScene it displays. The scene     then forwards the events to the relevant items.      For example, when a QGraphicsView receives a QMouseEvent of type     MousePress as a response to a user click, the view sends a     QGraphicsSceneMouseEvent of type GraphicsSceneMousePress to the     underlying QGraphicsScene through its     \l{QGraphicsScene::}{mousePressEvent()} function. The default     QGraphicsScene::mousePressEvent() implementation determines which     item was clicked and forwards the event to     QGraphicsItem::mousePressEvent().      \omit ### Beskrive widget() \endomit      Subclasses such as QGraphicsSceneMouseEvent and     QGraphicsSceneContextMenuEvent provide the coordinates from the     original QEvent in screen, scene, and item coordinates (see     \l{QGraphicsSceneMouseEvent::}{screenPos()},     \l{QGraphicsSceneMouseEvent::}{scenePos()}, and     \l{QGraphicsSceneMouseEvent::}{pos()}). The item coordinates are     set by the QGraphicsScene before it forwards the event to the     event to a QGraphicsItem. The mouse events also add the     possibility to retrieve the coordinates from the last event     received by the view (see     \l{QGraphicsSceneMouseEvent::}{lastScreenPos()},     \l{QGraphicsSceneMouseEvent::}{lastScenePos()}, and     \l{QGraphicsSceneMouseEvent::}{lastPos()}).      \sa QEvent */
end_comment
begin_comment
comment|/*!     \class QGraphicsSceneMouseEvent     \brief The QGraphicsSceneMouseEvent class provides mouse events            in the graphics view framework.     \since 4.2     \ingroup graphicsview-api     \inmodule QtWidgets      When a QGraphicsView receives a QMouseEvent, it translates it to a     QGraphicsSceneMouseEvent. The event is then forwarded to the     QGraphicsScene associated with the view. If the event is not     handled by the scene, the view may use it, e.g., for the     \l{QGraphicsView::}{DragMode}.      In addition to containing the item, scene, and screen coordinates     of the event (as pos(), scenePos(), and screenPos()), mouse     events also contain the coordinates of the previous mouse     event received by the view. These can be retrieved with     lastPos(), lastScreenPos(), and lastScenePos().      \sa QGraphicsSceneContextMenuEvent,         QGraphicsSceneHoverEvent, QGraphicsSceneWheelEvent,         QMouseEvent */
end_comment
begin_comment
comment|/*!     \class QGraphicsSceneWheelEvent     \brief The QGraphicsSceneWheelEvent class provides wheel events            in the graphics view framework.     \brief The QGraphicsSceneWheelEvent class provides wheel events in the     graphics view framework.     \since 4.2     \ingroup graphicsview-api     \inmodule QtWidgets      \l{QWheelEvent}{QWheelEvent}s received by a QGraphicsView are translated     into QGraphicsSceneWheelEvents; it translates the QWheelEvent::globalPos()     into item, scene, and screen coordinates (pos(), scenePos(), and     screenPos()).      \sa QGraphicsSceneMouseEvent, QGraphicsSceneContextMenuEvent,     QGraphicsSceneHoverEvent, QWheelEvent */
end_comment
begin_comment
comment|/*!     \class QGraphicsSceneContextMenuEvent     \brief The QGraphicsSceneContextMenuEvent class provides context            menu events in the graphics view framework.     \since 4.2     \ingroup graphicsview-api     \inmodule QtWidgets      A QContextMenuEvent received by a QGraphicsView is translated     into a QGraphicsSceneContextMenuEvent. The     QContextMenuEvent::globalPos() is translated into item, scene, and     screen coordinates (pos(), scenePos(), and screenPos()).      \sa QGraphicsSceneMouseEvent, QGraphicsSceneWheelEvent,     QContextMenuEvent */
end_comment
begin_comment
comment|/*!     \enum QGraphicsSceneContextMenuEvent::Reason      This enum describes the reason why the context event was sent.      \value Mouse The mouse caused the event to be sent. On most     platforms, this means the right mouse button was clicked.      \value Keyboard The keyboard caused this event to be sent. On     Windows and OS X, this means the menu button was pressed.      \value Other The event was sent by some other means (i.e. not     by the mouse or keyboard). */
end_comment
begin_comment
comment|/*!     \class QGraphicsSceneHoverEvent     \brief The QGraphicsSceneHoverEvent class provides hover events            in the graphics view framework.     \since 4.2     \ingroup graphicsview-api     \inmodule QtWidgets      When a QGraphicsView receives a QHoverEvent event, it translates     it into QGraphicsSceneHoverEvent. The event is then forwarded to     the QGraphicsScene associated with the view.      \sa QGraphicsSceneMouseEvent, QGraphicsSceneContextMenuEvent,         QGraphicsSceneWheelEvent, QHoverEvent */
end_comment
begin_comment
comment|/*!     \class QGraphicsSceneHelpEvent     \brief The QGraphicsSceneHelpEvent class provides events when a            tooltip is requested.     \since 4.2     \ingroup graphicsview-api     \inmodule QtWidgets      When a QGraphicsView receives a QEvent of type     QEvent::ToolTip, it creates a QGraphicsSceneHelpEvent, which is     forwarded to the scene. You can set a tooltip on a QGraphicsItem     with \l{QGraphicsItem::}{setToolTip()}; by default QGraphicsScene     displays the tooltip of the QGraphicsItem with the highest     z-value (i.e, the top-most item) under the mouse position.      QGraphicsView does not forward events when     \l{QWhatsThis}{"What's This"} and \l{QStatusTipEvent}{status tip}     help is requested. If you need this, you can reimplement     QGraphicsView::viewportEvent() and forward QStatusTipEvent     events and \l{QEvent}{QEvents} of type QEvent::WhatsThis to the     scene.      \sa QEvent */
end_comment
begin_comment
comment|/*!     \class QGraphicsSceneDragDropEvent     \brief The QGraphicsSceneDragDropEvent class provides events for            drag and drop in the graphics view framework.     \since 4.2     \ingroup graphicsview-api     \inmodule QtWidgets      QGraphicsView inherits the drag and drop functionality provided     by QWidget. When it receives a drag and drop event, it translates     it to a QGraphicsSceneDragDropEvent.      QGraphicsSceneDragDropEvent stores events of type     GraphicsSceneDragEnter, GraphicsSceneDragLeave,     GraphicsSceneDragMove, or GraphicsSceneDrop.      QGraphicsSceneDragDropEvent contains the position of the mouse     cursor in both item, scene, and screen coordinates; this can be     retrieved with pos(), scenePos(), and screenPos().      The scene sends the event to the first QGraphicsItem under the     mouse cursor that accepts drops; a graphics item is set to accept     drops with \l{QGraphicsItem::}{setAcceptDrops()}. */
end_comment
begin_comment
comment|/*!     \class QGraphicsSceneResizeEvent     \brief The QGraphicsSceneResizeEvent class provides events for widget     resizing in the graphics view framework.     \since 4.4     \ingroup graphicsview-api     \inmodule QtWidgets      A QGraphicsWidget sends itself a QGraphicsSceneResizeEvent immediately     when its geometry changes.      It's similar to QResizeEvent, but its sizes, oldSize() and newSize(), use     QSizeF instead of QSize.      \sa QGraphicsWidget::setGeometry(), QGraphicsWidget::resize() */
end_comment
begin_comment
comment|/*!     \class QGraphicsSceneMoveEvent     \brief The QGraphicsSceneMoveEvent class provides events for widget     moving in the graphics view framework.     \since 4.4     \ingroup graphicsview-api     \inmodule QtWidgets      A QGraphicsWidget sends itself a QGraphicsSceneMoveEvent immediately when     its local position changes. The delivery is implemented as part of     QGraphicsItem::itemChange().      It's similar to QMoveEvent, but its positions, oldPos() and newPos(), use     QPointF instead of QPoint.      \sa QGraphicsItem::setPos(), QGraphicsItem::ItemPositionChange,     QGraphicsItem::ItemPositionHasChanged */
end_comment
begin_include
include|#
directive|include
file|"qgraphicssceneevent.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
end_ifndef
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtCore/qmap.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qpoint.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qsize.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|"qgraphicsview.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicsitem.h"
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgesture.h>
end_include
begin_include
include|#
directive|include
file|<private/qevent_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QGraphicsSceneEventPrivate
class|class
name|QGraphicsSceneEventPrivate
block|{
public|public:
DECL|function|QGraphicsSceneEventPrivate
specifier|inline
name|QGraphicsSceneEventPrivate
parameter_list|()
member_init_list|:
name|widget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|q_ptr
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|~QGraphicsSceneEventPrivate
specifier|inline
specifier|virtual
name|~
name|QGraphicsSceneEventPrivate
parameter_list|()
block|{ }
DECL|member|widget
name|QWidget
modifier|*
name|widget
decl_stmt|;
DECL|member|q_ptr
name|QGraphicsSceneEvent
modifier|*
name|q_ptr
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \internal      Constructs a generic graphics scene event of the specified \a type. */
end_comment
begin_constructor
DECL|function|QGraphicsSceneEvent
name|QGraphicsSceneEvent
operator|::
name|QGraphicsSceneEvent
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|type
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|new
name|QGraphicsSceneEventPrivate
argument_list|)
block|{
name|d_ptr
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal      Constructs a generic graphics scene event. */
end_comment
begin_constructor
DECL|function|QGraphicsSceneEvent
name|QGraphicsSceneEvent
operator|::
name|QGraphicsSceneEvent
parameter_list|(
name|QGraphicsSceneEventPrivate
modifier|&
name|dd
parameter_list|,
name|Type
name|type
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|type
argument_list|)
member_init_list|,
name|d_ptr
argument_list|(
operator|&
name|dd
argument_list|)
block|{
name|d_ptr
operator|->
name|q_ptr
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the event. */
end_comment
begin_destructor
DECL|function|~QGraphicsSceneEvent
name|QGraphicsSceneEvent
operator|::
name|~
name|QGraphicsSceneEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the widget where the event originated, or 0 if the event     originates from another application. */
end_comment
begin_function
DECL|function|widget
name|QWidget
modifier|*
name|QGraphicsSceneEvent
operator|::
name|widget
parameter_list|()
specifier|const
block|{
return|return
name|d_ptr
operator|->
name|widget
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Sets the \a widget related to this event.      \sa widget() */
end_comment
begin_function
DECL|function|setWidget
name|void
name|QGraphicsSceneEvent
operator|::
name|setWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|d_ptr
operator|->
name|widget
operator|=
name|widget
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QGraphicsSceneMouseEventPrivate
class|class
name|QGraphicsSceneMouseEventPrivate
super|:
specifier|public
name|QGraphicsSceneEventPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QGraphicsSceneMouseEvent
parameter_list|)
specifier|public
private|:
DECL|function|QGraphicsSceneMouseEventPrivate
specifier|inline
name|QGraphicsSceneMouseEventPrivate
parameter_list|()
member_init_list|:
name|button
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
member_init_list|,
name|buttons
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|modifiers
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|source
argument_list|(
name|Qt
operator|::
name|MouseEventNotSynthesized
argument_list|)
member_init_list|,
name|flags
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|member|pos
name|QPointF
name|pos
decl_stmt|;
DECL|member|scenePos
name|QPointF
name|scenePos
decl_stmt|;
DECL|member|screenPos
name|QPoint
name|screenPos
decl_stmt|;
DECL|member|lastPos
name|QPointF
name|lastPos
decl_stmt|;
DECL|member|lastScenePos
name|QPointF
name|lastScenePos
decl_stmt|;
DECL|member|lastScreenPos
name|QPoint
name|lastScreenPos
decl_stmt|;
DECL|member|buttonDownPos
name|QMap
argument_list|<
name|Qt
operator|::
name|MouseButton
argument_list|,
name|QPointF
argument_list|>
name|buttonDownPos
decl_stmt|;
DECL|member|buttonDownScenePos
name|QMap
argument_list|<
name|Qt
operator|::
name|MouseButton
argument_list|,
name|QPointF
argument_list|>
name|buttonDownScenePos
decl_stmt|;
DECL|member|buttonDownScreenPos
name|QMap
argument_list|<
name|Qt
operator|::
name|MouseButton
argument_list|,
name|QPoint
argument_list|>
name|buttonDownScreenPos
decl_stmt|;
DECL|member|button
name|Qt
operator|::
name|MouseButton
name|button
decl_stmt|;
DECL|member|buttons
name|Qt
operator|::
name|MouseButtons
name|buttons
decl_stmt|;
DECL|member|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
decl_stmt|;
DECL|member|source
name|Qt
operator|::
name|MouseEventSource
name|source
decl_stmt|;
DECL|member|flags
name|Qt
operator|::
name|MouseEventFlags
name|flags
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \internal      Constructs a generic graphics scene mouse event of the specified \a type. */
end_comment
begin_constructor
DECL|function|QGraphicsSceneMouseEvent
name|QGraphicsSceneMouseEvent
operator|::
name|QGraphicsSceneMouseEvent
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|QGraphicsSceneEvent
argument_list|(
operator|*
operator|new
name|QGraphicsSceneMouseEventPrivate
argument_list|,
name|type
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the event. */
end_comment
begin_destructor
DECL|function|~QGraphicsSceneMouseEvent
name|QGraphicsSceneMouseEvent
operator|::
name|~
name|QGraphicsSceneMouseEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the mouse cursor position in item coordinates.      \sa scenePos(), screenPos(), lastPos() */
end_comment
begin_function
DECL|function|pos
name|QPointF
name|QGraphicsSceneMouseEvent
operator|::
name|pos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setPos
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|pos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the mouse cursor position in scene coordinates.      \sa pos(), screenPos(), lastScenePos() */
end_comment
begin_function
DECL|function|scenePos
name|QPointF
name|QGraphicsSceneMouseEvent
operator|::
name|scenePos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|scenePos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setScenePos
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setScenePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|scenePos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the mouse cursor position in screen coordinates.      \sa pos(), scenePos(), lastScreenPos() */
end_comment
begin_function
DECL|function|screenPos
name|QPoint
name|QGraphicsSceneMouseEvent
operator|::
name|screenPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|screenPos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setScreenPos
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setScreenPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|screenPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the mouse cursor position in item coordinates where the specified     \a button was clicked.      \sa buttonDownScenePos(), buttonDownScreenPos(), pos() */
end_comment
begin_function
DECL|function|buttonDownPos
name|QPointF
name|QGraphicsSceneMouseEvent
operator|::
name|buttonDownPos
parameter_list|(
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|buttonDownPos
operator|.
name|value
argument_list|(
name|button
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setButtonDownPos
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setButtonDownPos
parameter_list|(
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttonDownPos
operator|.
name|insert
argument_list|(
name|button
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the mouse cursor position in scene coordinates where the     specified \a button was clicked.      \sa buttonDownPos(), buttonDownScreenPos(), scenePos() */
end_comment
begin_function
DECL|function|buttonDownScenePos
name|QPointF
name|QGraphicsSceneMouseEvent
operator|::
name|buttonDownScenePos
parameter_list|(
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|buttonDownScenePos
operator|.
name|value
argument_list|(
name|button
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setButtonDownScenePos
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setButtonDownScenePos
parameter_list|(
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttonDownScenePos
operator|.
name|insert
argument_list|(
name|button
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the mouse cursor position in screen coordinates where the     specified \a button was clicked.      \sa screenPos(), buttonDownPos(), buttonDownScenePos() */
end_comment
begin_function
DECL|function|buttonDownScreenPos
name|QPoint
name|QGraphicsSceneMouseEvent
operator|::
name|buttonDownScreenPos
parameter_list|(
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|buttonDownScreenPos
operator|.
name|value
argument_list|(
name|button
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setButtonDownScreenPos
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setButtonDownScreenPos
parameter_list|(
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttonDownScreenPos
operator|.
name|insert
argument_list|(
name|button
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the last recorded mouse cursor position in item     coordinates.      \sa lastScenePos(), lastScreenPos(), pos() */
end_comment
begin_function
DECL|function|lastPos
name|QPointF
name|QGraphicsSceneMouseEvent
operator|::
name|lastPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lastPos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setLastPos
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setLastPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|lastPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the last recorded mouse cursor position in scene     coordinates. The last recorded position is the position of     the previous mouse event received by the view that created     the event.      \sa lastPos(), lastScreenPos(), scenePos() */
end_comment
begin_function
DECL|function|lastScenePos
name|QPointF
name|QGraphicsSceneMouseEvent
operator|::
name|lastScenePos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lastScenePos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setLastScenePos
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setLastScenePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|lastScenePos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the last recorded mouse cursor position in screen     coordinates. The last recorded position is the position of     the previous mouse event received by the view that created     the event.      \sa lastPos(), lastScenePos(), screenPos() */
end_comment
begin_function
DECL|function|lastScreenPos
name|QPoint
name|QGraphicsSceneMouseEvent
operator|::
name|lastScreenPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lastScreenPos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setLastScreenPos
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setLastScreenPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|lastScreenPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the combination of mouse buttons that were pressed at the     time the event was sent.      \sa button(), modifiers() */
end_comment
begin_function
DECL|function|buttons
name|Qt
operator|::
name|MouseButtons
name|QGraphicsSceneMouseEvent
operator|::
name|buttons
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|buttons
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setButtons
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setButtons
parameter_list|(
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttons
operator|=
name|buttons
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the mouse button (if any) that caused the event.      \sa buttons(), modifiers() */
end_comment
begin_function
DECL|function|button
name|Qt
operator|::
name|MouseButton
name|QGraphicsSceneMouseEvent
operator|::
name|button
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|button
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setButton
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setButton
parameter_list|(
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|button
operator|=
name|button
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the keyboard modifiers in use at the time the event was     sent.      \sa buttons(), button() */
end_comment
begin_function
DECL|function|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QGraphicsSceneMouseEvent
operator|::
name|modifiers
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|modifiers
return|;
block|}
end_function
begin_comment
comment|/*!   \since 5.4    Returns information about the mouse event source.    The mouse event source can be used to distinguish between genuine   and artificial mouse events. The latter are events that are   synthesized from touch events by the operating system or Qt itself.    \sa Qt::MouseEventSource   \sa QMouseEvent::source()  */
end_comment
begin_function
DECL|function|source
name|Qt
operator|::
name|MouseEventSource
name|QGraphicsSceneMouseEvent
operator|::
name|source
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|source
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.4     \internal  */
end_comment
begin_function
DECL|function|setSource
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setSource
parameter_list|(
name|Qt
operator|::
name|MouseEventSource
name|source
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|source
operator|=
name|source
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!      \since 5.4       Returns the mouse event flags.       The mouse event flags provide additional information about a mouse event.       \sa Qt::MouseEventFlag      \sa QMouseEvent::flags()  */
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|MouseEventFlags
name|QGraphicsSceneMouseEvent
operator|::
name|flags
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|flags
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.4     \internal  */
end_comment
begin_function
DECL|function|setFlags
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setFlags
parameter_list|(
name|Qt
operator|::
name|MouseEventFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setModifiers
name|void
name|QGraphicsSceneMouseEvent
operator|::
name|setModifiers
parameter_list|(
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMouseEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|modifiers
operator|=
name|modifiers
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QGraphicsSceneWheelEventPrivate
class|class
name|QGraphicsSceneWheelEventPrivate
super|:
specifier|public
name|QGraphicsSceneEventPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QGraphicsSceneWheelEvent
parameter_list|)
specifier|public
private|:
DECL|function|QGraphicsSceneWheelEventPrivate
specifier|inline
name|QGraphicsSceneWheelEventPrivate
parameter_list|()
member_init_list|:
name|buttons
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|modifiers
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|delta
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|orientation
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
block|{ }
DECL|member|pos
name|QPointF
name|pos
decl_stmt|;
DECL|member|scenePos
name|QPointF
name|scenePos
decl_stmt|;
DECL|member|screenPos
name|QPoint
name|screenPos
decl_stmt|;
DECL|member|buttons
name|Qt
operator|::
name|MouseButtons
name|buttons
decl_stmt|;
DECL|member|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
decl_stmt|;
DECL|member|delta
name|int
name|delta
decl_stmt|;
DECL|member|orientation
name|Qt
operator|::
name|Orientation
name|orientation
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \internal      Constructs a QGraphicsSceneWheelEvent of type \a type, which     is always QEvent::GraphicsSceneWheel. */
end_comment
begin_constructor
DECL|function|QGraphicsSceneWheelEvent
name|QGraphicsSceneWheelEvent
operator|::
name|QGraphicsSceneWheelEvent
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|QGraphicsSceneEvent
argument_list|(
operator|*
operator|new
name|QGraphicsSceneWheelEventPrivate
argument_list|,
name|type
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the QGraphicsSceneWheelEvent. */
end_comment
begin_destructor
DECL|function|~QGraphicsSceneWheelEvent
name|QGraphicsSceneWheelEvent
operator|::
name|~
name|QGraphicsSceneWheelEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the position of the cursor in item coordinates when the     wheel event occurred.      \sa scenePos(), screenPos() */
end_comment
begin_function
DECL|function|pos
name|QPointF
name|QGraphicsSceneWheelEvent
operator|::
name|pos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setPos
name|void
name|QGraphicsSceneWheelEvent
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|pos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of the cursor in scene coordinates when the wheel     event occurred.      \sa pos(), screenPos() */
end_comment
begin_function
DECL|function|scenePos
name|QPointF
name|QGraphicsSceneWheelEvent
operator|::
name|scenePos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|scenePos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setScenePos
name|void
name|QGraphicsSceneWheelEvent
operator|::
name|setScenePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|scenePos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of the cursor in screen coordinates when the wheel     event occurred.      \sa pos(), scenePos() */
end_comment
begin_function
DECL|function|screenPos
name|QPoint
name|QGraphicsSceneWheelEvent
operator|::
name|screenPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|screenPos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setScreenPos
name|void
name|QGraphicsSceneWheelEvent
operator|::
name|setScreenPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|screenPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the mouse buttons that were pressed when the wheel event occurred.      \sa modifiers() */
end_comment
begin_function
DECL|function|buttons
name|Qt
operator|::
name|MouseButtons
name|QGraphicsSceneWheelEvent
operator|::
name|buttons
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|buttons
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setButtons
name|void
name|QGraphicsSceneWheelEvent
operator|::
name|setButtons
parameter_list|(
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttons
operator|=
name|buttons
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the keyboard modifiers that were active when the wheel event     occurred.      \sa buttons() */
end_comment
begin_function
DECL|function|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QGraphicsSceneWheelEvent
operator|::
name|modifiers
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|modifiers
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setModifiers
name|void
name|QGraphicsSceneWheelEvent
operator|::
name|setModifiers
parameter_list|(
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|modifiers
operator|=
name|modifiers
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the distance that the wheel is rotated, in eighths (1/8s)     of a degree. A positive value indicates that the wheel was     rotated forwards away from the user; a negative value indicates     that the wheel was rotated backwards toward the user.      Most mouse types work in steps of 15 degrees, in which case the delta     value is a multiple of 120 (== 15 * 8). */
end_comment
begin_function
DECL|function|delta
name|int
name|QGraphicsSceneWheelEvent
operator|::
name|delta
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|delta
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setDelta
name|void
name|QGraphicsSceneWheelEvent
operator|::
name|setDelta
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|delta
operator|=
name|delta
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the wheel orientation. */
end_comment
begin_function
DECL|function|orientation
name|Qt
operator|::
name|Orientation
name|QGraphicsSceneWheelEvent
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|orientation
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setOrientation
name|void
name|QGraphicsSceneWheelEvent
operator|::
name|setOrientation
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneWheelEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|orientation
operator|=
name|orientation
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QGraphicsSceneContextMenuEventPrivate
class|class
name|QGraphicsSceneContextMenuEventPrivate
super|:
specifier|public
name|QGraphicsSceneEventPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QGraphicsSceneContextMenuEvent
parameter_list|)
specifier|public
private|:
DECL|function|QGraphicsSceneContextMenuEventPrivate
specifier|inline
name|QGraphicsSceneContextMenuEventPrivate
parameter_list|()
member_init_list|:
name|modifiers
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|reason
argument_list|(
name|QGraphicsSceneContextMenuEvent
operator|::
name|Other
argument_list|)
block|{ }
DECL|member|pos
name|QPointF
name|pos
decl_stmt|;
DECL|member|scenePos
name|QPointF
name|scenePos
decl_stmt|;
DECL|member|screenPos
name|QPoint
name|screenPos
decl_stmt|;
DECL|member|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
decl_stmt|;
DECL|member|reason
name|QGraphicsSceneContextMenuEvent
operator|::
name|Reason
name|reason
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \internal      Constructs a graphics scene context menu event of the specified \a type. */
end_comment
begin_constructor
DECL|function|QGraphicsSceneContextMenuEvent
name|QGraphicsSceneContextMenuEvent
operator|::
name|QGraphicsSceneContextMenuEvent
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|QGraphicsSceneEvent
argument_list|(
operator|*
operator|new
name|QGraphicsSceneContextMenuEventPrivate
argument_list|,
name|type
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the event. */
end_comment
begin_destructor
DECL|function|~QGraphicsSceneContextMenuEvent
name|QGraphicsSceneContextMenuEvent
operator|::
name|~
name|QGraphicsSceneContextMenuEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the position of the mouse cursor in item coordinates at the moment     the context menu was requested.      \sa scenePos(), screenPos() */
end_comment
begin_function
DECL|function|pos
name|QPointF
name|QGraphicsSceneContextMenuEvent
operator|::
name|pos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneContextMenuEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pos
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSceneContextMenuEvent::setPos(const QPointF&point)     \internal      Sets the position associated with the context menu to the given \a point     in item coordinates. */
end_comment
begin_function
DECL|function|setPos
name|void
name|QGraphicsSceneContextMenuEvent
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneContextMenuEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|pos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of the mouse cursor in scene coordinates at the moment the     context menu was requested.      \sa pos(), screenPos() */
end_comment
begin_function
DECL|function|scenePos
name|QPointF
name|QGraphicsSceneContextMenuEvent
operator|::
name|scenePos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneContextMenuEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|scenePos
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSceneContextMenuEvent::setScenePos(const QPointF&point)     \internal      Sets the position associated with the context menu to the given \a point     in scene coordinates. */
end_comment
begin_function
DECL|function|setScenePos
name|void
name|QGraphicsSceneContextMenuEvent
operator|::
name|setScenePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneContextMenuEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|scenePos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of the mouse cursor in screen coordinates at the moment the     context menu was requested.      \sa pos(), scenePos() */
end_comment
begin_function
DECL|function|screenPos
name|QPoint
name|QGraphicsSceneContextMenuEvent
operator|::
name|screenPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneContextMenuEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|screenPos
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSceneContextMenuEvent::setScreenPos(const QPoint&point)     \internal      Sets the position associated with the context menu to the given \a point     in screen coordinates. */
end_comment
begin_function
DECL|function|setScreenPos
name|void
name|QGraphicsSceneContextMenuEvent
operator|::
name|setScreenPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneContextMenuEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|screenPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the keyboard modifiers in use when the context menu was requested. */
end_comment
begin_function
DECL|function|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QGraphicsSceneContextMenuEvent
operator|::
name|modifiers
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneContextMenuEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|modifiers
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Sets the keyboard modifiers associated with the context menu to the \a     modifiers specified. */
end_comment
begin_function
DECL|function|setModifiers
name|void
name|QGraphicsSceneContextMenuEvent
operator|::
name|setModifiers
parameter_list|(
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneContextMenuEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|modifiers
operator|=
name|modifiers
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the reason for the context menu event.      \sa QGraphicsSceneContextMenuEvent::Reason */
end_comment
begin_function
DECL|function|reason
name|QGraphicsSceneContextMenuEvent
operator|::
name|Reason
name|QGraphicsSceneContextMenuEvent
operator|::
name|reason
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneContextMenuEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|reason
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Sets the reason for the context menu event to \a reason.      \sa reason() */
end_comment
begin_function
DECL|function|setReason
name|void
name|QGraphicsSceneContextMenuEvent
operator|::
name|setReason
parameter_list|(
name|Reason
name|reason
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneContextMenuEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|reason
operator|=
name|reason
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QGraphicsSceneHoverEventPrivate
class|class
name|QGraphicsSceneHoverEventPrivate
super|:
specifier|public
name|QGraphicsSceneEventPrivate
block|{
public|public:
DECL|member|pos
name|QPointF
name|pos
decl_stmt|;
DECL|member|scenePos
name|QPointF
name|scenePos
decl_stmt|;
DECL|member|screenPos
name|QPoint
name|screenPos
decl_stmt|;
DECL|member|lastPos
name|QPointF
name|lastPos
decl_stmt|;
DECL|member|lastScenePos
name|QPointF
name|lastScenePos
decl_stmt|;
DECL|member|lastScreenPos
name|QPoint
name|lastScreenPos
decl_stmt|;
DECL|member|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \internal      Constructs a graphics scene hover event of the specified \a type. */
end_comment
begin_constructor
DECL|function|QGraphicsSceneHoverEvent
name|QGraphicsSceneHoverEvent
operator|::
name|QGraphicsSceneHoverEvent
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|QGraphicsSceneEvent
argument_list|(
operator|*
operator|new
name|QGraphicsSceneHoverEventPrivate
argument_list|,
name|type
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the event. */
end_comment
begin_destructor
DECL|function|~QGraphicsSceneHoverEvent
name|QGraphicsSceneHoverEvent
operator|::
name|~
name|QGraphicsSceneHoverEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the position of the mouse cursor in item coordinates at the moment     the hover event was sent.      \sa scenePos(), screenPos() */
end_comment
begin_function
DECL|function|pos
name|QPointF
name|QGraphicsSceneHoverEvent
operator|::
name|pos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pos
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSceneHoverEvent::setPos(const QPointF&point)     \internal      Sets the position associated with the hover event to the given \a point in     item coordinates. */
end_comment
begin_function
DECL|function|setPos
name|void
name|QGraphicsSceneHoverEvent
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|pos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of the mouse cursor in scene coordinates at the     moment the hover event was sent.      \sa pos(), screenPos() */
end_comment
begin_function
DECL|function|scenePos
name|QPointF
name|QGraphicsSceneHoverEvent
operator|::
name|scenePos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|scenePos
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSceneHoverEvent::setScenePos(const QPointF&point)     \internal      Sets the position associated with the hover event to the given \a point in     scene coordinates. */
end_comment
begin_function
DECL|function|setScenePos
name|void
name|QGraphicsSceneHoverEvent
operator|::
name|setScenePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|scenePos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of the mouse cursor in screen coordinates at the     moment the hover event was sent.      \sa pos(), scenePos() */
end_comment
begin_function
DECL|function|screenPos
name|QPoint
name|QGraphicsSceneHoverEvent
operator|::
name|screenPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|screenPos
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSceneHoverEvent::setScreenPos(const QPoint&point)     \internal      Sets the position associated with the hover event to the given \a point in     screen coordinates. */
end_comment
begin_function
DECL|function|setScreenPos
name|void
name|QGraphicsSceneHoverEvent
operator|::
name|setScreenPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|screenPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the last recorded mouse cursor position in item coordinates.      \sa lastScenePos(), lastScreenPos(), pos() */
end_comment
begin_function
DECL|function|lastPos
name|QPointF
name|QGraphicsSceneHoverEvent
operator|::
name|lastPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lastPos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setLastPos
name|void
name|QGraphicsSceneHoverEvent
operator|::
name|setLastPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|lastPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the last recorded, the scene coordinates of the previous mouse or     hover event received by the view, that created the event mouse cursor     position in scene coordinates.      \sa lastPos(), lastScreenPos(), scenePos() */
end_comment
begin_function
DECL|function|lastScenePos
name|QPointF
name|QGraphicsSceneHoverEvent
operator|::
name|lastScenePos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lastScenePos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setLastScenePos
name|void
name|QGraphicsSceneHoverEvent
operator|::
name|setLastScenePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|lastScenePos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the last recorded mouse cursor position in screen coordinates. The     last recorded position is the position of the previous mouse or hover     event received by the view that created the event.      \sa lastPos(), lastScenePos(), screenPos() */
end_comment
begin_function
DECL|function|lastScreenPos
name|QPoint
name|QGraphicsSceneHoverEvent
operator|::
name|lastScreenPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lastScreenPos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setLastScreenPos
name|void
name|QGraphicsSceneHoverEvent
operator|::
name|setLastScreenPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|lastScreenPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Returns the keyboard modifiers at the moment the hover event was sent. */
end_comment
begin_function
DECL|function|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QGraphicsSceneHoverEvent
operator|::
name|modifiers
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|modifiers
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSceneHoverEvent::setModifiers(Qt::KeyboardModifiers modifiers)     \internal      Sets the modifiers for the current hover event to \a modifiers. */
end_comment
begin_function
DECL|function|setModifiers
name|void
name|QGraphicsSceneHoverEvent
operator|::
name|setModifiers
parameter_list|(
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneHoverEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|modifiers
operator|=
name|modifiers
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QGraphicsSceneHelpEventPrivate
class|class
name|QGraphicsSceneHelpEventPrivate
super|:
specifier|public
name|QGraphicsSceneEventPrivate
block|{
public|public:
DECL|member|scenePos
name|QPointF
name|scenePos
decl_stmt|;
DECL|member|screenPos
name|QPoint
name|screenPos
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \internal      Constructs a graphics scene help event of the specified \a type. */
end_comment
begin_constructor
DECL|function|QGraphicsSceneHelpEvent
name|QGraphicsSceneHelpEvent
operator|::
name|QGraphicsSceneHelpEvent
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|QGraphicsSceneEvent
argument_list|(
operator|*
operator|new
name|QGraphicsSceneHelpEventPrivate
argument_list|,
name|type
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the event. */
end_comment
begin_destructor
DECL|function|~QGraphicsSceneHelpEvent
name|QGraphicsSceneHelpEvent
operator|::
name|~
name|QGraphicsSceneHelpEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the position of the mouse cursor in scene coordinates at the     moment the help event was sent.      \sa screenPos() */
end_comment
begin_function
DECL|function|scenePos
name|QPointF
name|QGraphicsSceneHelpEvent
operator|::
name|scenePos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneHelpEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|scenePos
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSceneHelpEvent::setScenePos(const QPointF&point)     \internal      Sets the position associated with the context menu to the given \a point     in scene coordinates. */
end_comment
begin_function
DECL|function|setScenePos
name|void
name|QGraphicsSceneHelpEvent
operator|::
name|setScenePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneHelpEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|scenePos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of the mouse cursor in screen coordinates at the     moment the help event was sent.    \sa scenePos() */
end_comment
begin_function
DECL|function|screenPos
name|QPoint
name|QGraphicsSceneHelpEvent
operator|::
name|screenPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneHelpEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|screenPos
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGraphicsSceneHelpEvent::setScreenPos(const QPoint&point)     \internal      Sets the position associated with the context menu to the given \a point     in screen coordinates. */
end_comment
begin_function
DECL|function|setScreenPos
name|void
name|QGraphicsSceneHelpEvent
operator|::
name|setScreenPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneHelpEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|screenPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QGraphicsSceneDragDropEventPrivate
class|class
name|QGraphicsSceneDragDropEventPrivate
super|:
specifier|public
name|QGraphicsSceneEventPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QGraphicsSceneDragDropEvent
parameter_list|)
specifier|public
private|:
DECL|function|QGraphicsSceneDragDropEventPrivate
specifier|inline
name|QGraphicsSceneDragDropEventPrivate
parameter_list|()
member_init_list|:
name|source
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mimeData
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|member|pos
name|QPointF
name|pos
decl_stmt|;
DECL|member|scenePos
name|QPointF
name|scenePos
decl_stmt|;
DECL|member|screenPos
name|QPoint
name|screenPos
decl_stmt|;
DECL|member|buttons
name|Qt
operator|::
name|MouseButtons
name|buttons
decl_stmt|;
DECL|member|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
decl_stmt|;
DECL|member|possibleActions
name|Qt
operator|::
name|DropActions
name|possibleActions
decl_stmt|;
DECL|member|proposedAction
name|Qt
operator|::
name|DropAction
name|proposedAction
decl_stmt|;
DECL|member|dropAction
name|Qt
operator|::
name|DropAction
name|dropAction
decl_stmt|;
DECL|member|source
name|QWidget
modifier|*
name|source
decl_stmt|;
DECL|member|mimeData
specifier|const
name|QMimeData
modifier|*
name|mimeData
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \internal      Constructs a new QGraphicsSceneDragDropEvent of the     specified \a type. The type can be either     QEvent::GraphicsSceneDragEnter, QEvent::GraphicsSceneDragLeave,     QEvent::GraphicsSceneDragMove, or QEvent::GraphicsSceneDrop. */
end_comment
begin_constructor
DECL|function|QGraphicsSceneDragDropEvent
name|QGraphicsSceneDragDropEvent
operator|::
name|QGraphicsSceneDragDropEvent
parameter_list|(
name|Type
name|type
parameter_list|)
member_init_list|:
name|QGraphicsSceneEvent
argument_list|(
operator|*
operator|new
name|QGraphicsSceneDragDropEventPrivate
argument_list|,
name|type
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the object. */
end_comment
begin_destructor
DECL|function|~QGraphicsSceneDragDropEvent
name|QGraphicsSceneDragDropEvent
operator|::
name|~
name|QGraphicsSceneDragDropEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the mouse position of the event relative to the     view that sent the event.      \sa QGraphicsView, screenPos(), scenePos() */
end_comment
begin_function
DECL|function|pos
name|QPointF
name|QGraphicsSceneDragDropEvent
operator|::
name|pos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Sets the position of the mouse to \a pos; this should be     relative to the widget that generated the event, which normally     is a QGraphicsView.      \sa pos(), setScenePos(), setScreenPos() */
end_comment
begin_function
DECL|function|setPos
name|void
name|QGraphicsSceneDragDropEvent
operator|::
name|setPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|pos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of the mouse in scene coordinates.      \sa pos(), screenPos() */
end_comment
begin_function
DECL|function|scenePos
name|QPointF
name|QGraphicsSceneDragDropEvent
operator|::
name|scenePos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|scenePos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Sets the scene position of the mouse to \a pos.      \sa scenePos(), setScreenPos(), setPos() */
end_comment
begin_function
DECL|function|setScenePos
name|void
name|QGraphicsSceneDragDropEvent
operator|::
name|setScenePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|scenePos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the position of the mouse relative to the screen.      \sa pos(), scenePos() */
end_comment
begin_function
DECL|function|screenPos
name|QPoint
name|QGraphicsSceneDragDropEvent
operator|::
name|screenPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|screenPos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Sets the mouse position relative to the screen to \a pos.      \sa screenPos(), setScenePos(), setPos() */
end_comment
begin_function
DECL|function|setScreenPos
name|void
name|QGraphicsSceneDragDropEvent
operator|::
name|setScreenPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|screenPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a Qt::MouseButtons value indicating which buttons     were pressed on the mouse when this mouse event was     generated.      \sa Qt::MouseButtons */
end_comment
begin_function
DECL|function|buttons
name|Qt
operator|::
name|MouseButtons
name|QGraphicsSceneDragDropEvent
operator|::
name|buttons
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|buttons
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Sets the mouse buttons that were pressed when the event was     created to \a buttons.      \sa Qt::MouseButtons, buttons() */
end_comment
begin_function
DECL|function|setButtons
name|void
name|QGraphicsSceneDragDropEvent
operator|::
name|setButtons
parameter_list|(
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttons
operator|=
name|buttons
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the keyboard modifiers that were pressed when the drag     and drop event was created.      \sa Qt::KeyboardModifiers */
end_comment
begin_function
DECL|function|modifiers
name|Qt
operator|::
name|KeyboardModifiers
name|QGraphicsSceneDragDropEvent
operator|::
name|modifiers
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|modifiers
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Sets the keyboard modifiers that were pressed when the event     was created to \a modifiers.      \sa Qt::KeyboardModifiers, modifiers() */
end_comment
begin_function
DECL|function|setModifiers
name|void
name|QGraphicsSceneDragDropEvent
operator|::
name|setModifiers
parameter_list|(
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|modifiers
operator|=
name|modifiers
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the possible drop actions that the drag and     drop can result in.      \sa Qt::DropActions */
end_comment
begin_function
DECL|function|possibleActions
name|Qt
operator|::
name|DropActions
name|QGraphicsSceneDragDropEvent
operator|::
name|possibleActions
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|possibleActions
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Sets the possible drop actions that the drag can     result in to \a actions.      \sa Qt::DropActions, possibleActions() */
end_comment
begin_function
DECL|function|setPossibleActions
name|void
name|QGraphicsSceneDragDropEvent
operator|::
name|setPossibleActions
parameter_list|(
name|Qt
operator|::
name|DropActions
name|actions
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|possibleActions
operator|=
name|actions
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the drop action that is proposed, i.e., preferred.     The action must be one of the possible actions as defined by     \c possibleActions().      \sa Qt::DropAction, possibleActions() */
end_comment
begin_function
DECL|function|proposedAction
name|Qt
operator|::
name|DropAction
name|QGraphicsSceneDragDropEvent
operator|::
name|proposedAction
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|proposedAction
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Sets the proposed action to \a action. The proposed action     is a Qt::DropAction that is one of the possible actions as     given by \c possibleActions().      \sa proposedAction(), Qt::DropAction, possibleActions() */
end_comment
begin_function
DECL|function|setProposedAction
name|void
name|QGraphicsSceneDragDropEvent
operator|::
name|setProposedAction
parameter_list|(
name|Qt
operator|::
name|DropAction
name|action
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|proposedAction
operator|=
name|action
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the proposed action as accepted, i.e, the drop action     is set to the proposed action. This is equal to:      \snippet code/src_gui_graphicsview_qgraphicssceneevent.cpp 0      When using this function, one should not call \c accept().      \sa dropAction(), setDropAction(), proposedAction() */
end_comment
begin_function
DECL|function|acceptProposedAction
name|void
name|QGraphicsSceneDragDropEvent
operator|::
name|acceptProposedAction
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|dropAction
operator|=
name|d
operator|->
name|proposedAction
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the action that was performed in this drag and drop.     This should be set by the receiver of the drop and is     returned by QDrag::exec().      \sa setDropAction(), acceptProposedAction() */
end_comment
begin_function
DECL|function|dropAction
name|Qt
operator|::
name|DropAction
name|QGraphicsSceneDragDropEvent
operator|::
name|dropAction
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|dropAction
return|;
block|}
end_function
begin_comment
comment|/*!     This function lets the receiver of the drop set the drop     action that was performed to \a action, which should be one     of the     \l{QGraphicsSceneDragDropEvent::possibleActions()}{possible     actions}. Call \c accept() in stead of \c     acceptProposedAction() if you use this function.      \sa dropAction(), accept(), possibleActions() */
end_comment
begin_function
DECL|function|setDropAction
name|void
name|QGraphicsSceneDragDropEvent
operator|::
name|setDropAction
parameter_list|(
name|Qt
operator|::
name|DropAction
name|action
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|dropAction
operator|=
name|action
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function returns the QGraphicsView that created the     QGraphicsSceneDragDropEvent. */
end_comment
begin_function
DECL|function|source
name|QWidget
modifier|*
name|QGraphicsSceneDragDropEvent
operator|::
name|source
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|source
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     This function set the source widget, i.e., the widget that     created the drop event, to \a source. */
end_comment
begin_function
DECL|function|setSource
name|void
name|QGraphicsSceneDragDropEvent
operator|::
name|setSource
parameter_list|(
name|QWidget
modifier|*
name|source
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|source
operator|=
name|source
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function returns the MIME data of the event. */
end_comment
begin_function
DECL|function|mimeData
specifier|const
name|QMimeData
modifier|*
name|QGraphicsSceneDragDropEvent
operator|::
name|mimeData
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|mimeData
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     This function sets the MIME data for the event. */
end_comment
begin_function
DECL|function|setMimeData
name|void
name|QGraphicsSceneDragDropEvent
operator|::
name|setMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneDragDropEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|mimeData
operator|=
name|data
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QGraphicsSceneResizeEventPrivate
class|class
name|QGraphicsSceneResizeEventPrivate
super|:
specifier|public
name|QGraphicsSceneEventPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QGraphicsSceneResizeEvent
parameter_list|)
specifier|public
private|:
DECL|function|QGraphicsSceneResizeEventPrivate
specifier|inline
name|QGraphicsSceneResizeEventPrivate
parameter_list|()
block|{ }
DECL|member|oldSize
name|QSizeF
name|oldSize
decl_stmt|;
DECL|member|newSize
name|QSizeF
name|newSize
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     Constructs a QGraphicsSceneResizeEvent. */
end_comment
begin_constructor
DECL|function|QGraphicsSceneResizeEvent
name|QGraphicsSceneResizeEvent
operator|::
name|QGraphicsSceneResizeEvent
parameter_list|()
member_init_list|:
name|QGraphicsSceneEvent
argument_list|(
operator|*
operator|new
name|QGraphicsSceneResizeEventPrivate
argument_list|,
name|QEvent
operator|::
name|GraphicsSceneResize
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the QGraphicsSceneResizeEvent. */
end_comment
begin_destructor
DECL|function|~QGraphicsSceneResizeEvent
name|QGraphicsSceneResizeEvent
operator|::
name|~
name|QGraphicsSceneResizeEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the old size (i.e., the size immediately before the widget was     resized).      \sa newSize(), QGraphicsWidget::resize() */
end_comment
begin_function
DECL|function|oldSize
name|QSizeF
name|QGraphicsSceneResizeEvent
operator|::
name|oldSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneResizeEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|oldSize
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setOldSize
name|void
name|QGraphicsSceneResizeEvent
operator|::
name|setOldSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneResizeEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|oldSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the new size (i.e., the current size).      \sa oldSize(), QGraphicsWidget::resize() */
end_comment
begin_function
DECL|function|newSize
name|QSizeF
name|QGraphicsSceneResizeEvent
operator|::
name|newSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneResizeEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|newSize
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setNewSize
name|void
name|QGraphicsSceneResizeEvent
operator|::
name|setNewSize
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneResizeEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|newSize
operator|=
name|size
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QGraphicsSceneMoveEventPrivate
class|class
name|QGraphicsSceneMoveEventPrivate
super|:
specifier|public
name|QGraphicsSceneEventPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QGraphicsSceneMoveEvent
parameter_list|)
specifier|public
private|:
DECL|function|QGraphicsSceneMoveEventPrivate
specifier|inline
name|QGraphicsSceneMoveEventPrivate
parameter_list|()
block|{ }
DECL|member|oldPos
name|QPointF
name|oldPos
decl_stmt|;
DECL|member|newPos
name|QPointF
name|newPos
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     Constructs a QGraphicsSceneMoveEvent. */
end_comment
begin_constructor
DECL|function|QGraphicsSceneMoveEvent
name|QGraphicsSceneMoveEvent
operator|::
name|QGraphicsSceneMoveEvent
parameter_list|()
member_init_list|:
name|QGraphicsSceneEvent
argument_list|(
operator|*
operator|new
name|QGraphicsSceneMoveEventPrivate
argument_list|,
name|QEvent
operator|::
name|GraphicsSceneMove
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     Destroys the QGraphicsSceneMoveEvent. */
end_comment
begin_destructor
DECL|function|~QGraphicsSceneMoveEvent
name|QGraphicsSceneMoveEvent
operator|::
name|~
name|QGraphicsSceneMoveEvent
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the old position (i.e., the position immediately before the widget     was moved).      \sa newPos(), QGraphicsItem::setPos() */
end_comment
begin_function
DECL|function|oldPos
name|QPointF
name|QGraphicsSceneMoveEvent
operator|::
name|oldPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMoveEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|oldPos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setOldPos
name|void
name|QGraphicsSceneMoveEvent
operator|::
name|setOldPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMoveEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|oldPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the new position (i.e., the current position).      \sa oldPos(), QGraphicsItem::setPos() */
end_comment
begin_function
DECL|function|newPos
name|QPointF
name|QGraphicsSceneMoveEvent
operator|::
name|newPos
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsSceneMoveEvent
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|newPos
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setNewPos
name|void
name|QGraphicsSceneMoveEvent
operator|::
name|setNewPos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsSceneMoveEvent
argument_list|)
expr_stmt|;
name|d
operator|->
name|newPos
operator|=
name|pos
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_GRAPHICSVIEW
end_comment
end_unit
