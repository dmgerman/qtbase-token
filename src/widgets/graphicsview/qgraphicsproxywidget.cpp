begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qglobal.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
end_ifndef
begin_include
include|#
directive|include
file|"qgraphicslayout.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicsproxywidget.h"
end_include
begin_include
include|#
directive|include
file|"private/qgraphicsproxywidget_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qevent.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsscene.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicssceneevent.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qlayout.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qpainter.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qgraphicsview.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qlistview.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qtextedit.h>
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
comment|//#define GRAPHICSPROXYWIDGET_DEBUG
comment|/*!     \class QGraphicsProxyWidget     \brief The QGraphicsProxyWidget class provides a proxy layer for embedding     a QWidget in a QGraphicsScene.     \since 4.4     \ingroup graphicsview-api     \inmodule QtWidgets      QGraphicsProxyWidget embeds QWidget-based widgets, for example, a     QPushButton, QFontComboBox, or even QFileDialog, into     QGraphicsScene. It forwards events between the two objects and     translates between QWidget's integer-based geometry and     QGraphicsWidget's qreal-based geometry. QGraphicsProxyWidget     supports all core features of QWidget, including tab focus,     keyboard input, Drag& Drop, and popups.  You can also embed     complex widgets, e.g., widgets with subwidgets.      Example:      \snippet code/src_gui_graphicsview_qgraphicsproxywidget.cpp 0      QGraphicsProxyWidget takes care of automatically embedding popup children     of embedded widgets through creating a child proxy for each popup. This     means that when an embedded QComboBox shows its popup list, a new     QGraphicsProxyWidget is created automatically, embedding the popup, and     positioning it correctly. This only works if the popup is child of the     embedded widget (for example QToolButton::setMenu() requires the QMenu instance     to be child of the QToolButton).      \section1 Embedding a Widget with QGraphicsProxyWidget      There are two ways to embed a widget using QGraphicsProxyWidget. The most     common way is to pass a widget pointer to QGraphicsScene::addWidget()     together with any relevant \l Qt::WindowFlags. This function returns a     pointer to a QGraphicsProxyWidget. You can then choose to reparent or     position either the proxy, or the embedded widget itself.      For example, in the code snippet below, we embed a group box into the proxy:      \snippet code/src_gui_graphicsview_qgraphicsproxywidget.cpp 1      The image below is the output obtained with its contents margin and     contents rect labeled.      \image qgraphicsproxywidget-embed.png      Alternatively, you can start by creating a new QGraphicsProxyWidget item,     and then call setWidget() to embed a QWidget later. The widget() function     returns a pointer to the embedded widget. QGraphicsProxyWidget shares     ownership with QWidget, so if either of the two widgets are destroyed, the     other widget will be automatically destroyed as well.      \section1 Synchronizing Widget States      QGraphicsProxyWidget keeps its state in sync with the embedded widget. For     example, if the proxy is hidden or disabled, the embedded widget will be     hidden or disabled as well, and vice versa. When the widget is embedded by     calling addWidget(), QGraphicsProxyWidget copies the state from the widget     into the proxy, and after that, the two will stay synchronized where     possible. By default, when you embed a widget into a proxy, both the widget     and the proxy will be visible because a QGraphicsWidget is visible when     created (you do not have to call show()). If you explicitly hide the     embedded widget, the proxy will also become invisible.      Example:      \snippet code/src_gui_graphicsview_qgraphicsproxywidget.cpp 2      QGraphicsProxyWidget maintains symmetry for the following states:      \table     \header \li QWidget state       \li QGraphicsProxyWidget state      \li Notes     \row     \li QWidget::enabled                     \li QGraphicsProxyWidget::enabled                         \li     \row    \li QWidget::visible                     \li QGraphicsProxyWidget::visible                         \li The explicit state is also symmetric.     \row    \li QWidget::geometry                     \li QGraphicsProxyWidget::geometry                         \li Geometry is only guaranteed to be symmetric while                             the embedded widget is visible.     \row    \li QWidget::layoutDirection                     \li QGraphicsProxyWidget::layoutDirection                         \li     \row    \li QWidget::style                     \li QGraphicsProxyWidget::style                         \li     \row    \li QWidget::palette                     \li QGraphicsProxyWidget::palette                         \li     \row    \li QWidget::font                     \li QGraphicsProxyWidget::font                         \li     \row    \li QWidget::cursor                     \li QGraphicsProxyWidget::cursor                         \li The embedded widget overrides the proxy widget                             cursor. The proxy cursor changes depending on                             which embedded subwidget is currently under the                             mouse.     \row    \li QWidget::sizeHint()                     \li QGraphicsProxyWidget::sizeHint()                         \li All size hint functionality from the embedded                             widget is forwarded by the proxy.     \row    \li QWidget::getContentsMargins()                     \li QGraphicsProxyWidget::getContentsMargins()                         \li Updated once by setWidget().     \row    \li QWidget::windowTitle                     \li QGraphicsProxyWidget::windowTitle                         \li Updated once by setWidget().     \endtable      \note QGraphicsScene keeps the embedded widget in a special state that     prevents it from disturbing other widgets (both embedded and not embedded)     while the widget is embedded. In this state, the widget may differ slightly     in behavior from when it is not embedded.      \warning This class is provided for convenience when bridging     QWidgets and QGraphicsItems, it should not be used for     high-performance scenarios.      \sa QGraphicsScene::addWidget(), QGraphicsWidget */
specifier|extern
name|bool
name|qt_sendSpontaneousEvent
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|Q_WIDGETS_EXPORT
specifier|extern
name|bool
name|qt_tab_all_widgets
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|init
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|WheelFocus
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAcceptDrops
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|sendWidgetMouseEvent
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|sendWidgetMouseEvent
parameter_list|(
name|QGraphicsSceneHoverEvent
modifier|*
name|event
parameter_list|)
block|{
name|QGraphicsSceneMouseEvent
name|mouseEvent
argument_list|(
name|QEvent
operator|::
name|GraphicsSceneMouseMove
argument_list|)
decl_stmt|;
name|mouseEvent
operator|.
name|setPos
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|mouseEvent
operator|.
name|setScreenPos
argument_list|(
name|event
operator|->
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
name|mouseEvent
operator|.
name|setButton
argument_list|(
name|Qt
operator|::
name|NoButton
argument_list|)
expr_stmt|;
name|mouseEvent
operator|.
name|setButtons
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mouseEvent
operator|.
name|setModifiers
argument_list|(
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
expr_stmt|;
name|sendWidgetMouseEvent
argument_list|(
operator|&
name|mouseEvent
argument_list|)
expr_stmt|;
name|event
operator|->
name|setAccepted
argument_list|(
name|mouseEvent
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|sendWidgetMouseEvent
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|sendWidgetMouseEvent
parameter_list|(
name|QGraphicsSceneMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|||
operator|!
name|widget
operator|||
operator|!
name|widget
operator|->
name|isVisible
argument_list|()
condition|)
return|return;
name|Q_Q
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
comment|// Find widget position and receiver.
name|QPointF
name|pos
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|alienWidget
init|=
name|widget
operator|->
name|childAt
argument_list|(
name|pos
operator|.
name|toPoint
argument_list|()
argument_list|)
decl_stmt|;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|receiver
init|=
name|alienWidget
condition|?
name|alienWidget
else|:
name|widget
decl_stmt|;
if|if
condition|(
name|QWidgetPrivate
operator|::
name|nearestGraphicsProxyWidget
argument_list|(
name|receiver
argument_list|)
operator|!=
name|q
condition|)
return|return;
comment|//another proxywidget will handle the events
comment|// Translate QGraphicsSceneMouse events to QMouseEvents.
name|QEvent
operator|::
name|Type
name|type
init|=
name|QEvent
operator|::
name|None
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|GraphicsSceneMousePress
case|:
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonPress
expr_stmt|;
if|if
condition|(
operator|!
name|embeddedMouseGrabber
condition|)
name|embeddedMouseGrabber
operator|=
name|receiver
expr_stmt|;
else|else
name|receiver
operator|=
name|embeddedMouseGrabber
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseRelease
case|:
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonRelease
expr_stmt|;
if|if
condition|(
name|embeddedMouseGrabber
condition|)
name|receiver
operator|=
name|embeddedMouseGrabber
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseDoubleClick
case|:
name|type
operator|=
name|QEvent
operator|::
name|MouseButtonDblClick
expr_stmt|;
if|if
condition|(
operator|!
name|embeddedMouseGrabber
condition|)
name|embeddedMouseGrabber
operator|=
name|receiver
expr_stmt|;
else|else
name|receiver
operator|=
name|embeddedMouseGrabber
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseMove
case|:
name|type
operator|=
name|QEvent
operator|::
name|MouseMove
expr_stmt|;
if|if
condition|(
name|embeddedMouseGrabber
condition|)
name|receiver
operator|=
name|embeddedMouseGrabber
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT_X
argument_list|(
literal|false
argument_list|,
literal|"QGraphicsProxyWidget"
argument_list|,
literal|"internal error"
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|lastWidgetUnderMouse
condition|)
block|{
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|embeddedMouseGrabber
condition|?
name|embeddedMouseGrabber
else|:
name|receiver
argument_list|,
literal|0
argument_list|,
name|event
operator|->
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
name|lastWidgetUnderMouse
operator|=
name|receiver
expr_stmt|;
block|}
comment|// Map event position from us to the receiver
name|pos
operator|=
name|mapToReceiver
argument_list|(
name|pos
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
comment|// Send mouse event.
name|QMouseEvent
name|mouseEvent
argument_list|(
name|type
argument_list|,
name|pos
argument_list|,
name|receiver
operator|->
name|mapTo
argument_list|(
name|receiver
operator|->
name|topLevelWidget
argument_list|()
argument_list|,
name|pos
operator|.
name|toPoint
argument_list|()
argument_list|)
argument_list|,
name|receiver
operator|->
name|mapToGlobal
argument_list|(
name|pos
operator|.
name|toPoint
argument_list|()
argument_list|)
argument_list|,
name|event
operator|->
name|button
argument_list|()
argument_list|,
name|event
operator|->
name|buttons
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|embeddedMouseGrabberPtr
init|=
operator|(
name|QWidget
operator|*
operator|)
name|embeddedMouseGrabber
decl_stmt|;
name|QApplicationPrivate
operator|::
name|sendMouseEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|mouseEvent
argument_list|,
name|alienWidget
argument_list|,
name|widget
argument_list|,
operator|&
name|embeddedMouseGrabberPtr
argument_list|,
name|lastWidgetUnderMouse
argument_list|,
name|event
operator|->
name|spontaneous
argument_list|()
argument_list|)
expr_stmt|;
name|embeddedMouseGrabber
operator|=
name|embeddedMouseGrabberPtr
expr_stmt|;
comment|// Handle enter/leave events when last button is released from mouse
comment|// grabber child widget.
if|if
condition|(
name|embeddedMouseGrabber
operator|&&
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
operator|&&
operator|!
name|event
operator|->
name|buttons
argument_list|()
condition|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
operator|&&
name|q
operator|->
name|acceptHoverEvents
argument_list|()
condition|)
name|lastWidgetUnderMouse
operator|=
name|alienWidget
condition|?
name|alienWidget
else|:
name|widget
expr_stmt|;
else|else
comment|// released on the frame our outside the item, or doesn't accept hover events.
name|lastWidgetUnderMouse
operator|=
literal|0
expr_stmt|;
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
name|lastWidgetUnderMouse
argument_list|,
name|embeddedMouseGrabber
argument_list|,
name|event
operator|->
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
name|embeddedMouseGrabber
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
comment|// ### Restore the cursor, don't override it.
if|if
condition|(
operator|!
name|lastWidgetUnderMouse
condition|)
name|q
operator|->
name|unsetCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
name|event
operator|->
name|setAccepted
argument_list|(
name|mouseEvent
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendWidgetKeyEvent
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|sendWidgetKeyEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|event
operator|||
operator|!
name|widget
operator|||
operator|!
name|widget
operator|->
name|isVisible
argument_list|()
condition|)
return|return;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|receiver
init|=
name|widget
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|receiver
condition|)
name|receiver
operator|=
name|widget
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
do|do
block|{
name|bool
name|res
init|=
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|receiver
argument_list|,
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|res
operator|&&
name|event
operator|->
name|isAccepted
argument_list|()
operator|)
operator|||
operator|(
name|q
operator|->
name|isWindow
argument_list|()
operator|&&
name|receiver
operator|==
name|widget
operator|)
condition|)
break|break;
name|receiver
operator|=
name|receiver
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|receiver
condition|)
do|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|removeSubFocusHelper
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|removeSubFocusHelper
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|Qt
operator|::
name|FocusReason
name|reason
parameter_list|)
block|{
name|QFocusEvent
name|event
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|,
name|reason
argument_list|)
decl_stmt|;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|widgetGuard
init|=
name|widget
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|widgetGuard
operator|&&
name|event
operator|.
name|isAccepted
argument_list|()
condition|)
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|widget
operator|->
name|style
argument_list|()
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     Some of the logic is shared with QApplicationPrivate::focusNextPrevChild_helper */
end_comment
begin_function
DECL|function|findFocusChild
name|QWidget
modifier|*
name|QGraphicsProxyWidgetPrivate
operator|::
name|findFocusChild
parameter_list|(
name|QWidget
modifier|*
name|child
parameter_list|,
name|bool
name|next
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return
literal|0
return|;
comment|// Run around the focus chain until we find a widget that can take tab focus.
if|if
condition|(
operator|!
name|child
condition|)
block|{
name|child
operator|=
name|next
condition|?
operator|(
name|QWidget
operator|*
operator|)
name|widget
else|:
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|focus_prev
expr_stmt|;
block|}
else|else
block|{
name|child
operator|=
name|next
condition|?
name|child
operator|->
name|d_func
argument_list|()
operator|->
name|focus_next
else|:
name|child
operator|->
name|d_func
argument_list|()
operator|->
name|focus_prev
expr_stmt|;
if|if
condition|(
operator|(
name|next
operator|&&
name|child
operator|==
name|widget
operator|)
operator|||
operator|(
operator|!
name|next
operator|&&
name|child
operator|==
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|focus_prev
operator|)
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
if|if
condition|(
operator|!
name|child
condition|)
return|return
literal|0
return|;
name|QWidget
modifier|*
name|oldChild
init|=
name|child
decl_stmt|;
name|uint
name|focus_flag
init|=
name|qt_tab_all_widgets
argument_list|()
condition|?
name|Qt
operator|::
name|TabFocus
else|:
name|Qt
operator|::
name|StrongFocus
decl_stmt|;
do|do
block|{
if|if
condition|(
name|child
operator|->
name|isEnabled
argument_list|()
operator|&&
name|child
operator|->
name|isVisibleTo
argument_list|(
name|widget
argument_list|)
operator|&&
operator|(
operator|(
name|child
operator|->
name|focusPolicy
argument_list|()
operator|&
name|focus_flag
operator|)
operator|==
name|focus_flag
operator|)
operator|&&
operator|!
operator|(
name|child
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|&&
name|child
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|focus_proxy
operator|)
condition|)
block|{
return|return
name|child
return|;
block|}
name|child
operator|=
name|next
condition|?
name|child
operator|->
name|d_func
argument_list|()
operator|->
name|focus_next
else|:
name|child
operator|->
name|d_func
argument_list|()
operator|->
name|focus_prev
expr_stmt|;
block|}
do|while
condition|(
name|child
operator|!=
name|oldChild
operator|&&
operator|!
operator|(
name|next
operator|&&
name|child
operator|==
name|widget
operator|)
operator|&&
operator|!
operator|(
operator|!
name|next
operator|&&
name|child
operator|==
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|focus_prev
operator|)
condition|)
do|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_removeWidgetSlot
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|_q_removeWidgetSlot
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|QWExtra
modifier|*
name|extra
init|=
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|extra
condition|)
name|extra
operator|->
name|proxyWidget
operator|=
literal|0
expr_stmt|;
block|}
name|widget
operator|=
literal|0
expr_stmt|;
operator|delete
name|q
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updateWidgetGeometryFromProxy
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|updateWidgetGeometryFromProxy
parameter_list|()
block|{ }
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updateProxyGeometryFromWidget
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|updateProxyGeometryFromWidget
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
return|return;
name|QRectF
name|widgetGeometry
init|=
name|widget
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|parentWidget
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QGraphicsProxyWidget
modifier|*
name|proxyParent
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|parentWidget
operator|&&
operator|(
name|proxyParent
operator|=
name|qobject_cast
argument_list|<
name|QGraphicsProxyWidget
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// Nested window proxy (e.g., combobox popup), map widget to the
comment|// parent widget's global coordinates, and map that to the parent
comment|// proxy's child coordinates.
name|widgetGeometry
operator|.
name|moveTo
argument_list|(
name|proxyParent
operator|->
name|subWidgetRect
argument_list|(
name|parentWidget
argument_list|)
operator|.
name|topLeft
argument_list|()
operator|+
name|parentWidget
operator|->
name|mapFromGlobal
argument_list|(
name|widget
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Adjust to size hint if the widget has never been resized.
if|if
condition|(
operator|!
name|widget
operator|->
name|size
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
name|widgetGeometry
operator|.
name|setSize
argument_list|(
name|widget
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assign new geometry.
name|posChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
expr_stmt|;
name|sizeChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
expr_stmt|;
name|q
operator|->
name|setGeometry
argument_list|(
name|widgetGeometry
argument_list|)
expr_stmt|;
name|posChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
name|sizeChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updateProxyInputMethodAcceptanceFromWidget
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|updateProxyInputMethodAcceptanceFromWidget
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
return|return;
name|QWidget
modifier|*
name|focusWidget
init|=
name|widget
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focusWidget
condition|)
name|focusWidget
operator|=
name|widget
expr_stmt|;
name|q
operator|->
name|setFlag
argument_list|(
name|QGraphicsItem
operator|::
name|ItemAcceptsInputMethod
argument_list|,
name|focusWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Embeds \a subWin as a subwindow of this proxy widget. \a subWin must be a top-level     widget and a descendant of the widget managed by this proxy. A separate subproxy     will be created as a child of this proxy widget to manage \a subWin. */
end_comment
begin_function
DECL|function|embedSubWindow
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|embedSubWindow
parameter_list|(
name|QWidget
modifier|*
name|subWin
parameter_list|)
block|{
name|QWExtra
modifier|*
name|extra
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|extra
operator|=
name|subWin
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|)
operator|&&
name|extra
operator|->
name|proxyWidget
operator|)
condition|)
block|{
name|QGraphicsProxyWidget
modifier|*
name|subProxy
init|=
operator|new
name|QGraphicsProxyWidget
argument_list|(
name|q_func
argument_list|()
argument_list|,
name|subWin
operator|->
name|windowFlags
argument_list|()
argument_list|)
decl_stmt|;
name|subProxy
operator|->
name|d_func
argument_list|()
operator|->
name|setWidget_helper
argument_list|(
name|subWin
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Removes ("unembeds") \a subWin and deletes the proxy holder item. This can     happen when QWidget::setParent() reparents the embedded window out of     "embedded space". */
end_comment
begin_function
DECL|function|unembedSubWindow
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|unembedSubWindow
parameter_list|(
name|QWidget
modifier|*
name|subWin
parameter_list|)
block|{
foreach|foreach
control|(
name|QGraphicsItem
modifier|*
name|child
decl|,
name|children
control|)
block|{
if|if
condition|(
name|child
operator|->
name|isWidget
argument_list|()
condition|)
block|{
if|if
condition|(
name|QGraphicsProxyWidget
modifier|*
name|proxy
init|=
name|qobject_cast
argument_list|<
name|QGraphicsProxyWidget
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|QGraphicsWidget
operator|*
argument_list|>
argument_list|(
name|child
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|proxy
operator|->
name|widget
argument_list|()
operator|==
name|subWin
condition|)
block|{
name|proxy
operator|->
name|setWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|scene
operator|->
name|removeItem
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
operator|delete
name|proxy
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|isProxyWidget
name|bool
name|QGraphicsProxyWidgetPrivate
operator|::
name|isProxyWidget
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!      \internal */
end_comment
begin_function
DECL|function|mapToReceiver
name|QPointF
name|QGraphicsProxyWidgetPrivate
operator|::
name|mapToReceiver
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|receiver
parameter_list|)
specifier|const
block|{
name|QPointF
name|p
init|=
name|pos
decl_stmt|;
comment|// Map event position from us to the receiver, preserving its
comment|// precision (don't use QWidget::mapFrom here).
while|while
condition|(
name|receiver
operator|&&
name|receiver
operator|!=
name|widget
condition|)
block|{
name|p
operator|-=
name|QPointF
argument_list|(
name|receiver
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|receiver
operator|=
name|receiver
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs a new QGraphicsProxy widget. \a parent and \a wFlags are passed     to QGraphicsItem's constructor. */
end_comment
begin_constructor
DECL|function|QGraphicsProxyWidget
name|QGraphicsProxyWidget
operator|::
name|QGraphicsProxyWidget
parameter_list|(
name|QGraphicsItem
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|wFlags
parameter_list|)
member_init_list|:
name|QGraphicsWidget
argument_list|(
operator|*
operator|new
name|QGraphicsProxyWidgetPrivate
argument_list|,
name|parent
argument_list|,
name|wFlags
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the proxy widget and any embedded widget. */
end_comment
begin_destructor
DECL|function|~QGraphicsProxyWidget
name|QGraphicsProxyWidget
operator|::
name|~
name|QGraphicsProxyWidget
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|widget
condition|)
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|d
operator|->
name|widget
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_removeWidgetSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|widget
expr_stmt|;
block|}
block|}
end_destructor
begin_comment
comment|/*!     Embeds \a widget into this proxy widget. The embedded widget must reside     exclusively either inside or outside of Graphics View. You cannot embed a     widget as long as it is is visible elsewhere in the UI, at the same time.      \a widget must be a top-level widget whose parent is 0.      When the widget is embedded, its state (e.g., visible, enabled, geometry,     size hints) is copied into the proxy widget. If the embedded widget is     explicitly hidden or disabled, the proxy widget will become explicitly     hidden or disabled after embedding is complete. The class documentation     has a full overview over the shared state.      QGraphicsProxyWidget's window flags determine whether the widget, after     embedding, will be given window decorations or not.      After this function returns, QGraphicsProxyWidget will keep its state     synchronized with that of \a widget whenever possible.      If a widget is already embedded by this proxy when this function is     called, that widget will first be automatically unembedded. Passing 0 for     the \a widget argument will only unembed the widget, and the ownership of     the currently embedded widget will be passed on to the caller.     Every child widget that are embedded will also be embedded and their proxy     widget destroyed.      Note that widgets with the Qt::WA_PaintOnScreen widget attribute     set and widgets that wrap an external application or controller     cannot be embedded. Examples are QGLWidget and QAxWidget.      \sa widget() */
end_comment
begin_function
DECL|function|setWidget
name|void
name|QGraphicsProxyWidget
operator|::
name|setWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|setWidget_helper
argument_list|(
name|widget
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWidget_helper
name|void
name|QGraphicsProxyWidgetPrivate
operator|::
name|setWidget_helper
parameter_list|(
name|QWidget
modifier|*
name|newWidget
parameter_list|,
name|bool
name|autoShow
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|newWidget
operator|==
name|widget
condition|)
return|return;
if|if
condition|(
name|widget
condition|)
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|widget
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_removeWidgetSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|->
name|removeEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|widget
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|proxyWidget
operator|=
literal|0
expr_stmt|;
name|resolveFont
argument_list|(
name|inheritedFontResolveMask
argument_list|)
expr_stmt|;
name|resolvePalette
argument_list|(
name|inheritedPaletteResolveMask
argument_list|)
expr_stmt|;
name|widget
operator|->
name|update
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QGraphicsItem
modifier|*
name|child
decl|,
name|q
operator|->
name|childItems
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|->
name|d_ptr
operator|->
name|isProxyWidget
argument_list|()
condition|)
block|{
name|QGraphicsProxyWidget
modifier|*
name|childProxy
init|=
cast|static_cast
argument_list|<
name|QGraphicsProxyWidget
operator|*
argument_list|>
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|parent
init|=
name|childProxy
operator|->
name|widget
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|->
name|parentWidget
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|parent
operator|==
name|widget
condition|)
break|break;
name|parent
operator|=
name|parent
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|childProxy
operator|->
name|widget
argument_list|()
operator|||
name|parent
operator|!=
name|widget
condition|)
continue|continue;
name|childProxy
operator|->
name|setWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|childProxy
expr_stmt|;
block|}
block|}
name|widget
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|q
operator|->
name|unsetCursor
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|q
operator|->
name|setAcceptHoverEvents
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newWidget
condition|)
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|newWidget
condition|)
return|return;
if|if
condition|(
operator|!
name|newWidget
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|QWExtra
modifier|*
name|extra
init|=
name|newWidget
operator|->
name|parentWidget
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|extra
decl_stmt|;
if|if
condition|(
operator|!
name|extra
operator|||
operator|!
name|extra
operator|->
name|proxyWidget
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsProxyWidget::setWidget: cannot embed widget %p "
literal|"which is not a toplevel widget, and is not a child of an embedded widget"
argument_list|,
name|newWidget
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Register this proxy within the widget's private.
comment|// ### This is a bit backdoorish
name|QWExtra
modifier|*
name|extra
init|=
name|newWidget
operator|->
name|d_func
argument_list|()
operator|->
name|extra
decl_stmt|;
if|if
condition|(
operator|!
name|extra
condition|)
block|{
name|newWidget
operator|->
name|d_func
argument_list|()
operator|->
name|createExtra
argument_list|()
expr_stmt|;
name|extra
operator|=
name|newWidget
operator|->
name|d_func
argument_list|()
operator|->
name|extra
expr_stmt|;
block|}
name|QGraphicsProxyWidget
modifier|*
modifier|*
name|proxyWidget
init|=
operator|&
name|extra
operator|->
name|proxyWidget
decl_stmt|;
if|if
condition|(
operator|*
name|proxyWidget
condition|)
block|{
if|if
condition|(
operator|*
name|proxyWidget
operator|!=
name|q
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsProxyWidget::setWidget: cannot embed widget %p"
literal|"; already embedded"
argument_list|,
name|newWidget
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
operator|*
name|proxyWidget
operator|=
name|q
expr_stmt|;
name|newWidget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
expr_stmt|;
name|newWidget
operator|->
name|ensurePolished
argument_list|()
expr_stmt|;
comment|// Do not wait for this widget to close before the app closes ###
comment|// shouldn't this widget inherit the attribute?
name|newWidget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_QuitOnClose
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAcceptHoverEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|newWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoSystemBackground
argument_list|)
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoSystemBackground
argument_list|)
expr_stmt|;
if|if
condition|(
name|newWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|)
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|)
expr_stmt|;
name|widget
operator|=
name|newWidget
expr_stmt|;
comment|// Changes only go from the widget to the proxy.
name|enabledChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
expr_stmt|;
name|visibleChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
expr_stmt|;
name|posChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
expr_stmt|;
name|sizeChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
expr_stmt|;
if|if
condition|(
operator|(
name|autoShow
operator|&&
operator|!
name|newWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
operator|)
operator|||
operator|!
name|newWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
condition|)
block|{
name|newWidget
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
comment|// Copy the state from the widget onto the proxy.
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
name|newWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetCursor
argument_list|)
condition|)
name|q
operator|->
name|setCursor
argument_list|(
name|widget
operator|->
name|cursor
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|q
operator|->
name|setEnabled
argument_list|(
name|newWidget
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|setVisible
argument_list|(
name|newWidget
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|setLayoutDirection
argument_list|(
name|newWidget
operator|->
name|layoutDirection
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetStyle
argument_list|)
condition|)
name|q
operator|->
name|setStyle
argument_list|(
name|widget
operator|->
name|style
argument_list|()
argument_list|)
expr_stmt|;
name|resolveFont
argument_list|(
name|inheritedFontResolveMask
argument_list|)
expr_stmt|;
name|resolvePalette
argument_list|(
name|inheritedPaletteResolveMask
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
name|newWidget
operator|->
name|adjustSize
argument_list|()
expr_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|newWidget
operator|->
name|getContentsMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|q
operator|->
name|setContentsMargins
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|q
operator|->
name|setWindowTitle
argument_list|(
name|newWidget
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
comment|// size policies and constraints..
name|q
operator|->
name|setSizePolicy
argument_list|(
name|newWidget
operator|->
name|sizePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|QSize
name|sz
init|=
name|newWidget
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
name|q
operator|->
name|setMinimumSize
argument_list|(
name|sz
operator|.
name|isNull
argument_list|()
condition|?
name|QSizeF
argument_list|()
else|:
name|QSizeF
argument_list|(
name|sz
argument_list|)
argument_list|)
expr_stmt|;
name|sz
operator|=
name|newWidget
operator|->
name|maximumSize
argument_list|()
expr_stmt|;
name|q
operator|->
name|setMaximumSize
argument_list|(
name|sz
operator|.
name|isNull
argument_list|()
condition|?
name|QSizeF
argument_list|()
else|:
name|QSizeF
argument_list|(
name|sz
argument_list|)
argument_list|)
expr_stmt|;
name|updateProxyGeometryFromWidget
argument_list|()
expr_stmt|;
name|updateProxyInputMethodAcceptanceFromWidget
argument_list|()
expr_stmt|;
comment|// Hook up the event filter to keep the state up to date.
name|newWidget
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|newWidget
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_removeWidgetSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Changes no longer go only from the widget to the proxy.
name|enabledChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
name|visibleChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
name|posChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
name|sizeChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the embedded widget.      \sa setWidget() */
end_comment
begin_function
DECL|function|widget
name|QWidget
modifier|*
name|QGraphicsProxyWidget
operator|::
name|widget
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|widget
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the rectangle for \a widget, which must be a descendant of     widget(), or widget() itself, in this proxy item's local coordinates.      If no widget is embedded, \a widget is 0, or \a widget is not a     descendant of the embedded widget, this function returns an empty QRectF.      \sa widget() */
end_comment
begin_function
DECL|function|subWidgetRect
name|QRectF
name|QGraphicsProxyWidget
operator|::
name|subWidgetRect
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
operator|||
operator|!
name|d
operator|->
name|widget
condition|)
return|return
name|QRectF
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|widget
operator|==
name|widget
operator|||
name|d
operator|->
name|widget
operator|->
name|isAncestorOf
argument_list|(
name|widget
argument_list|)
condition|)
return|return
name|QRectF
argument_list|(
name|widget
operator|->
name|mapTo
argument_list|(
name|d
operator|->
name|widget
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|widget
operator|->
name|size
argument_list|()
argument_list|)
return|;
return|return
name|QRectF
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setGeometry
name|void
name|QGraphicsProxyWidget
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
name|bool
name|proxyResizesWidget
init|=
operator|!
name|d
operator|->
name|posChangeMode
operator|&&
operator|!
name|d
operator|->
name|sizeChangeMode
decl_stmt|;
if|if
condition|(
name|proxyResizesWidget
condition|)
block|{
name|d
operator|->
name|posChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|ProxyToWidgetMode
expr_stmt|;
name|d
operator|->
name|sizeChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|ProxyToWidgetMode
expr_stmt|;
block|}
name|QGraphicsWidget
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyResizesWidget
condition|)
block|{
name|d
operator|->
name|posChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
name|d
operator|->
name|sizeChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|itemChange
name|QVariant
name|QGraphicsProxyWidget
operator|::
name|itemChange
parameter_list|(
name|GraphicsItemChange
name|change
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|change
condition|)
block|{
case|case
name|ItemPositionChange
case|:
comment|// The item's position is either changed directly on the proxy, in
comment|// which case the position change should propagate to the widget,
comment|// otherwise it happens as a side effect when filtering QEvent::Move.
if|if
condition|(
operator|!
name|d
operator|->
name|posChangeMode
condition|)
name|d
operator|->
name|posChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|ProxyToWidgetMode
expr_stmt|;
break|break;
case|case
name|ItemPositionHasChanged
case|:
comment|// Move the internal widget if we're in widget-to-proxy
comment|// mode. Otherwise the widget has already moved.
if|if
condition|(
name|d
operator|->
name|widget
operator|&&
name|d
operator|->
name|posChangeMode
operator|!=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
condition|)
name|d
operator|->
name|widget
operator|->
name|move
argument_list|(
name|value
operator|.
name|toPoint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|posChangeMode
operator|==
name|QGraphicsProxyWidgetPrivate
operator|::
name|ProxyToWidgetMode
condition|)
name|d
operator|->
name|posChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
break|break;
case|case
name|ItemVisibleChange
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|visibleChangeMode
condition|)
name|d
operator|->
name|visibleChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|ProxyToWidgetMode
expr_stmt|;
break|break;
case|case
name|ItemVisibleHasChanged
case|:
if|if
condition|(
name|d
operator|->
name|widget
operator|&&
name|d
operator|->
name|visibleChangeMode
operator|!=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
condition|)
name|d
operator|->
name|widget
operator|->
name|setVisible
argument_list|(
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|visibleChangeMode
operator|==
name|QGraphicsProxyWidgetPrivate
operator|::
name|ProxyToWidgetMode
condition|)
name|d
operator|->
name|visibleChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
break|break;
case|case
name|ItemEnabledChange
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|enabledChangeMode
condition|)
name|d
operator|->
name|enabledChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|ProxyToWidgetMode
expr_stmt|;
break|break;
case|case
name|ItemEnabledHasChanged
case|:
if|if
condition|(
name|d
operator|->
name|widget
operator|&&
name|d
operator|->
name|enabledChangeMode
operator|!=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
condition|)
name|d
operator|->
name|widget
operator|->
name|setEnabled
argument_list|(
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|enabledChangeMode
operator|==
name|QGraphicsProxyWidgetPrivate
operator|::
name|ProxyToWidgetMode
condition|)
name|d
operator|->
name|enabledChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QGraphicsWidget
operator|::
name|itemChange
argument_list|(
name|change
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QGraphicsProxyWidget
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|widget
condition|)
return|return
name|QGraphicsWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|StyleChange
case|:
comment|// Propagate style changes to the embedded widget.
if|if
condition|(
operator|!
name|d
operator|->
name|styleChangeMode
condition|)
block|{
name|d
operator|->
name|styleChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|ProxyToWidgetMode
expr_stmt|;
name|d
operator|->
name|widget
operator|->
name|setStyle
argument_list|(
name|style
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|styleChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|FontChange
case|:
block|{
comment|// Propagate to widget.
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|d
operator|->
name|widget
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|int
name|mask
init|=
name|d
operator|->
name|font
operator|.
name|resolve
argument_list|()
operator||
name|d
operator|->
name|inheritedFontResolveMask
decl_stmt|;
name|wd
operator|->
name|inheritedFontResolveMask
operator|=
name|mask
expr_stmt|;
name|wd
operator|->
name|resolveFont
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|PaletteChange
case|:
block|{
comment|// Propagate to widget.
name|QWidgetPrivate
modifier|*
name|wd
init|=
name|d
operator|->
name|widget
operator|->
name|d_func
argument_list|()
decl_stmt|;
name|int
name|mask
init|=
name|d
operator|->
name|palette
operator|.
name|resolve
argument_list|()
operator||
name|d
operator|->
name|inheritedPaletteResolveMask
decl_stmt|;
name|wd
operator|->
name|inheritedPaletteResolveMask
operator|=
name|mask
expr_stmt|;
name|wd
operator|->
name|resolvePalette
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|InputMethod
case|:
block|{
name|inputMethodEvent
argument_list|(
cast|static_cast
argument_list|<
name|QInputMethodEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|isAccepted
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
block|{
name|QWidget
modifier|*
name|focusWidget
init|=
name|d
operator|->
name|widget
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
while|while
condition|(
name|focusWidget
condition|)
block|{
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|focusWidget
argument_list|,
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|isAccepted
argument_list|()
condition|)
return|return
literal|true
return|;
name|focusWidget
operator|=
name|focusWidget
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
case|case
name|QEvent
operator|::
name|KeyPress
case|:
block|{
name|QKeyEvent
modifier|*
name|k
init|=
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Tab
operator|||
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Backtab
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|k
operator|->
name|modifiers
argument_list|()
operator|&
operator|(
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|AltModifier
operator|)
operator|)
condition|)
block|{
comment|//### Add MetaModifier?
name|QWidget
modifier|*
name|focusWidget
init|=
name|d
operator|->
name|widget
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
while|while
condition|(
name|focusWidget
condition|)
block|{
name|bool
name|res
init|=
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|focusWidget
argument_list|,
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|res
operator|&&
name|event
operator|->
name|isAccepted
argument_list|()
operator|)
operator|||
operator|(
name|isWindow
argument_list|()
operator|&&
name|focusWidget
operator|==
name|d
operator|->
name|widget
operator|)
condition|)
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
break|break;
block|}
name|focusWidget
operator|=
name|focusWidget
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
case|case
name|QEvent
operator|::
name|GraphicsSceneHelp
case|:
block|{
comment|// Propagate the help event (for tooltip) to the widget under mouse
if|if
condition|(
name|d
operator|->
name|lastWidgetUnderMouse
condition|)
block|{
name|QGraphicsSceneHelpEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
name|QGraphicsSceneHelpEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QPoint
name|pos
init|=
name|d
operator|->
name|mapToReceiver
argument_list|(
name|mapFromScene
argument_list|(
name|he
operator|->
name|scenePos
argument_list|()
argument_list|)
argument_list|,
name|d
operator|->
name|lastWidgetUnderMouse
argument_list|)
operator|.
name|toPoint
argument_list|()
decl_stmt|;
name|QHelpEvent
name|e
argument_list|(
name|QEvent
operator|::
name|ToolTip
argument_list|,
name|pos
argument_list|,
name|he
operator|->
name|screenPos
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|d
operator|->
name|lastWidgetUnderMouse
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
name|event
operator|->
name|setAccepted
argument_list|(
name|e
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|isAccepted
argument_list|()
return|;
block|}
break|break;
block|}
case|case
name|QEvent
operator|::
name|ToolTipChange
case|:
block|{
comment|// Propagate tooltip change to the widget
if|if
condition|(
operator|!
name|d
operator|->
name|tooltipChangeMode
condition|)
block|{
name|d
operator|->
name|tooltipChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|ProxyToWidgetMode
expr_stmt|;
name|d
operator|->
name|widget
operator|->
name|setToolTip
argument_list|(
name|toolTip
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|tooltipChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
block|}
break|break;
block|}
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
name|QGraphicsWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QGraphicsProxyWidget
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|==
name|d
operator|->
name|widget
condition|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|LayoutRequest
case|:
name|updateGeometry
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Resize
case|:
comment|// If the widget resizes itself, we resize the proxy too.
comment|// Prevent feed-back by checking the geometry change mode.
if|if
condition|(
operator|!
name|d
operator|->
name|sizeChangeMode
condition|)
name|d
operator|->
name|updateProxyGeometryFromWidget
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Move
case|:
comment|// If the widget moves itself, we move the proxy too.  Prevent
comment|// feed-back by checking the geometry change mode.
if|if
condition|(
operator|!
name|d
operator|->
name|posChangeMode
condition|)
name|d
operator|->
name|updateProxyGeometryFromWidget
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Hide
case|:
case|case
name|QEvent
operator|::
name|Show
case|:
comment|// If the widget toggles its visible state, the proxy will follow.
if|if
condition|(
operator|!
name|d
operator|->
name|visibleChangeMode
condition|)
block|{
name|d
operator|->
name|visibleChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
expr_stmt|;
name|setVisible
argument_list|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Show
argument_list|)
expr_stmt|;
name|d
operator|->
name|visibleChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|EnabledChange
case|:
comment|// If the widget toggles its enabled state, the proxy will follow.
if|if
condition|(
operator|!
name|d
operator|->
name|enabledChangeMode
condition|)
block|{
name|d
operator|->
name|enabledChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
expr_stmt|;
name|setEnabled
argument_list|(
name|d
operator|->
name|widget
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|enabledChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|StyleChange
case|:
comment|// Propagate style changes to the proxy.
if|if
condition|(
operator|!
name|d
operator|->
name|styleChangeMode
condition|)
block|{
name|d
operator|->
name|styleChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
expr_stmt|;
name|setStyle
argument_list|(
name|d
operator|->
name|widget
operator|->
name|style
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|styleChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
case|case
name|QEvent
operator|::
name|ToolTipChange
case|:
comment|// Propagate tooltip change to the proxy.
if|if
condition|(
operator|!
name|d
operator|->
name|tooltipChangeMode
condition|)
block|{
name|d
operator|->
name|tooltipChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
expr_stmt|;
name|setToolTip
argument_list|(
name|d
operator|->
name|widget
operator|->
name|toolTip
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|tooltipChangeMode
operator|=
name|QGraphicsProxyWidgetPrivate
operator|::
name|NoMode
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
default|default:
break|break;
block|}
block|}
return|return
name|QGraphicsWidget
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hideEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|contextMenuEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|contextMenuEvent
parameter_list|(
name|QGraphicsSceneContextMenuEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|event
operator|||
operator|!
name|d
operator|->
name|widget
operator|||
operator|!
name|d
operator|->
name|widget
operator|->
name|isVisible
argument_list|()
operator|||
operator|!
name|hasFocus
argument_list|()
condition|)
return|return;
comment|// Find widget position and receiver.
name|QPointF
name|pos
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|alienWidget
init|=
name|d
operator|->
name|widget
operator|->
name|childAt
argument_list|(
name|pos
operator|.
name|toPoint
argument_list|()
argument_list|)
decl_stmt|;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|receiver
init|=
name|alienWidget
condition|?
name|alienWidget
else|:
name|d
operator|->
name|widget
decl_stmt|;
comment|// Map event position from us to the receiver
name|pos
operator|=
name|d
operator|->
name|mapToReceiver
argument_list|(
name|pos
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
name|QPoint
name|globalPos
init|=
name|receiver
operator|->
name|mapToGlobal
argument_list|(
name|pos
operator|.
name|toPoint
argument_list|()
argument_list|)
decl_stmt|;
comment|//If the receiver by-pass the proxy its popups
comment|//will be top level QWidgets therefore they need
comment|//the screen position. mapToGlobal expect the widget to
comment|//have proper coordinates in regards of the windowing system
comment|//but it's not true because the widget is embedded.
if|if
condition|(
name|bypassGraphicsProxyWidget
argument_list|(
name|receiver
argument_list|)
condition|)
name|globalPos
operator|=
name|event
operator|->
name|screenPos
argument_list|()
expr_stmt|;
comment|// Send mouse event. ### Doesn't propagate the event.
name|QContextMenuEvent
name|contextMenuEvent
argument_list|(
name|QContextMenuEvent
operator|::
name|Reason
argument_list|(
name|event
operator|->
name|reason
argument_list|()
argument_list|)
argument_list|,
name|pos
operator|.
name|toPoint
argument_list|()
argument_list|,
name|globalPos
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|contextMenuEvent
argument_list|)
expr_stmt|;
name|event
operator|->
name|setAccepted
argument_list|(
name|contextMenuEvent
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|dragEnterEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|dragEnterEvent
parameter_list|(
name|QGraphicsSceneDragDropEvent
modifier|*
name|event
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DRAGANDDROP
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|widget
condition|)
return|return;
name|QDragEnterEvent
name|proxyDragEnter
argument_list|(
name|event
operator|->
name|pos
argument_list|()
operator|.
name|toPoint
argument_list|()
argument_list|,
name|event
operator|->
name|dropAction
argument_list|()
argument_list|,
name|event
operator|->
name|mimeData
argument_list|()
argument_list|,
name|event
operator|->
name|buttons
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|proxyDragEnter
operator|.
name|setAccepted
argument_list|(
name|event
operator|->
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|d
operator|->
name|widget
argument_list|,
operator|&
name|proxyDragEnter
argument_list|)
expr_stmt|;
name|event
operator|->
name|setAccepted
argument_list|(
name|proxyDragEnter
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyDragEnter
operator|.
name|isAccepted
argument_list|()
condition|)
comment|// we discard answerRect
name|event
operator|->
name|setDropAction
argument_list|(
name|proxyDragEnter
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|dragLeaveEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|dragLeaveEvent
parameter_list|(
name|QGraphicsSceneDragDropEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|widget
operator|||
operator|!
name|d
operator|->
name|dragDropWidget
condition|)
return|return;
name|QDragLeaveEvent
name|proxyDragLeave
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|d
operator|->
name|dragDropWidget
argument_list|,
operator|&
name|proxyDragLeave
argument_list|)
expr_stmt|;
name|d
operator|->
name|dragDropWidget
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|dragMoveEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|dragMoveEvent
parameter_list|(
name|QGraphicsSceneDragDropEvent
modifier|*
name|event
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DRAGANDDROP
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|widget
condition|)
return|return;
name|QPointF
name|p
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|subWidget
init|=
name|d
operator|->
name|widget
operator|->
name|childAt
argument_list|(
name|p
operator|.
name|toPoint
argument_list|()
argument_list|)
decl_stmt|;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|receiver
init|=
name|subWidget
condition|?
name|subWidget
else|:
name|d
operator|->
name|widget
decl_stmt|;
name|bool
name|eventDelivered
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
name|receiver
condition|;
name|receiver
operator|=
name|receiver
operator|->
name|parentWidget
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|receiver
operator|->
name|isEnabled
argument_list|()
operator|||
operator|!
name|receiver
operator|->
name|acceptDrops
argument_list|()
condition|)
continue|continue;
comment|// Map event position from us to the receiver
name|QPoint
name|receiverPos
init|=
name|d
operator|->
name|mapToReceiver
argument_list|(
name|p
argument_list|,
name|receiver
argument_list|)
operator|.
name|toPoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|receiver
operator|!=
name|d
operator|->
name|dragDropWidget
condition|)
block|{
comment|// Try to enter before we leave
name|QDragEnterEvent
name|dragEnter
argument_list|(
name|receiverPos
argument_list|,
name|event
operator|->
name|possibleActions
argument_list|()
argument_list|,
name|event
operator|->
name|mimeData
argument_list|()
argument_list|,
name|event
operator|->
name|buttons
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|dragEnter
operator|.
name|setDropAction
argument_list|(
name|event
operator|->
name|proposedAction
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|dragEnter
argument_list|)
expr_stmt|;
name|event
operator|->
name|setAccepted
argument_list|(
name|dragEnter
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|->
name|setDropAction
argument_list|(
name|dragEnter
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|event
operator|->
name|isAccepted
argument_list|()
condition|)
block|{
comment|// propagate to the parent widget
continue|continue;
block|}
name|d
operator|->
name|lastDropAction
operator|=
name|event
operator|->
name|dropAction
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dragDropWidget
condition|)
block|{
name|QDragLeaveEvent
name|dragLeave
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|d
operator|->
name|dragDropWidget
argument_list|,
operator|&
name|dragLeave
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|dragDropWidget
operator|=
name|receiver
expr_stmt|;
block|}
name|QDragMoveEvent
name|dragMove
argument_list|(
name|receiverPos
argument_list|,
name|event
operator|->
name|possibleActions
argument_list|()
argument_list|,
name|event
operator|->
name|mimeData
argument_list|()
argument_list|,
name|event
operator|->
name|buttons
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|event
operator|->
name|setDropAction
argument_list|(
name|d
operator|->
name|lastDropAction
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|dragMove
argument_list|)
expr_stmt|;
name|event
operator|->
name|setAccepted
argument_list|(
name|dragMove
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|->
name|setDropAction
argument_list|(
name|dragMove
operator|.
name|dropAction
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|isAccepted
argument_list|()
condition|)
name|d
operator|->
name|lastDropAction
operator|=
name|event
operator|->
name|dropAction
argument_list|()
expr_stmt|;
name|eventDelivered
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|eventDelivered
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|dragDropWidget
condition|)
block|{
comment|// Leave the last drag drop item
name|QDragLeaveEvent
name|dragLeave
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|d
operator|->
name|dragDropWidget
argument_list|,
operator|&
name|dragLeave
argument_list|)
expr_stmt|;
name|d
operator|->
name|dragDropWidget
operator|=
literal|0
expr_stmt|;
block|}
comment|// Propagate
name|event
operator|->
name|setDropAction
argument_list|(
name|Qt
operator|::
name|IgnoreAction
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|dropEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|dropEvent
parameter_list|(
name|QGraphicsSceneDragDropEvent
modifier|*
name|event
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DRAGANDDROP
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|widget
operator|&&
name|d
operator|->
name|dragDropWidget
condition|)
block|{
name|QPoint
name|widgetPos
init|=
name|d
operator|->
name|mapToReceiver
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|,
name|d
operator|->
name|dragDropWidget
argument_list|)
operator|.
name|toPoint
argument_list|()
decl_stmt|;
name|QDropEvent
name|dropEvent
argument_list|(
name|widgetPos
argument_list|,
name|event
operator|->
name|possibleActions
argument_list|()
argument_list|,
name|event
operator|->
name|mimeData
argument_list|()
argument_list|,
name|event
operator|->
name|buttons
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|d
operator|->
name|dragDropWidget
argument_list|,
operator|&
name|dropEvent
argument_list|)
expr_stmt|;
name|event
operator|->
name|setAccepted
argument_list|(
name|dropEvent
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|dragDropWidget
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hoverEnterEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|hoverEnterEvent
parameter_list|(
name|QGraphicsSceneHoverEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hoverLeaveEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|hoverLeaveEvent
parameter_list|(
name|QGraphicsSceneHoverEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
comment|// If hoverMove was compressed away, make sure we update properly here.
if|if
condition|(
name|d
operator|->
name|lastWidgetUnderMouse
condition|)
block|{
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|lastWidgetUnderMouse
argument_list|,
name|event
operator|->
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|lastWidgetUnderMouse
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hoverMoveEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|hoverMoveEvent
parameter_list|(
name|QGraphicsSceneHoverEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|GRAPHICSPROXYWIDGET_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QGraphicsProxyWidget::hoverMoveEvent"
expr_stmt|;
endif|#
directive|endif
comment|// Ignore events on the window frame.
if|if
condition|(
operator|!
name|d
operator|->
name|widget
operator|||
operator|!
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|lastWidgetUnderMouse
condition|)
block|{
name|QApplicationPrivate
operator|::
name|dispatchEnterLeave
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|lastWidgetUnderMouse
argument_list|,
name|event
operator|->
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|lastWidgetUnderMouse
operator|=
literal|0
expr_stmt|;
block|}
return|return;
block|}
name|d
operator|->
name|embeddedMouseGrabber
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|sendWidgetMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|grabMouseEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|grabMouseEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|ungrabMouseEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|ungrabMouseEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|d
operator|->
name|embeddedMouseGrabber
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|mouseMoveEvent
parameter_list|(
name|QGraphicsSceneMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|GRAPHICSPROXYWIDGET_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QGraphicsProxyWidget::mouseMoveEvent"
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|sendWidgetMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|mousePressEvent
parameter_list|(
name|QGraphicsSceneMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|GRAPHICSPROXYWIDGET_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QGraphicsProxyWidget::mousePressEvent"
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|sendWidgetMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QGraphicsSceneMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|GRAPHICSPROXYWIDGET_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QGraphicsProxyWidget::mouseDoubleClickEvent"
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|sendWidgetMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|wheelEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|wheelEvent
parameter_list|(
name|QGraphicsSceneWheelEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|GRAPHICSPROXYWIDGET_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QGraphicsProxyWidget::wheelEvent"
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|d
operator|->
name|widget
condition|)
return|return;
name|QPointF
name|pos
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|receiver
init|=
name|d
operator|->
name|widget
operator|->
name|childAt
argument_list|(
name|pos
operator|.
name|toPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|receiver
condition|)
name|receiver
operator|=
name|d
operator|->
name|widget
expr_stmt|;
comment|// Map event position from us to the receiver
name|pos
operator|=
name|d
operator|->
name|mapToReceiver
argument_list|(
name|pos
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
comment|// Send mouse event.
name|QWheelEvent
name|wheelEvent
argument_list|(
name|pos
operator|.
name|toPoint
argument_list|()
argument_list|,
name|event
operator|->
name|screenPos
argument_list|()
argument_list|,
name|event
operator|->
name|delta
argument_list|()
argument_list|,
name|event
operator|->
name|buttons
argument_list|()
argument_list|,
name|event
operator|->
name|modifiers
argument_list|()
argument_list|,
name|event
operator|->
name|orientation
argument_list|()
argument_list|)
decl_stmt|;
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|focusWidget
init|=
name|d
operator|->
name|widget
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
specifier|extern
name|bool
name|qt_sendSpontaneousEvent
argument_list|(
name|QObject
operator|*
argument_list|,
name|QEvent
operator|*
argument_list|)
decl_stmt|;
name|qt_sendSpontaneousEvent
argument_list|(
name|receiver
argument_list|,
operator|&
name|wheelEvent
argument_list|)
expr_stmt|;
name|event
operator|->
name|setAccepted
argument_list|(
name|wheelEvent
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
comment|// ### Remove, this should be done by proper focusIn/focusOut events.
if|if
condition|(
name|focusWidget
operator|&&
operator|!
name|focusWidget
operator|->
name|hasFocus
argument_list|()
condition|)
block|{
name|focusWidget
operator|->
name|update
argument_list|()
expr_stmt|;
name|focusWidget
operator|=
name|d
operator|->
name|widget
operator|->
name|focusWidget
argument_list|()
expr_stmt|;
if|if
condition|(
name|focusWidget
operator|&&
name|focusWidget
operator|->
name|hasFocus
argument_list|()
condition|)
name|focusWidget
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QGraphicsSceneMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|GRAPHICSPROXYWIDGET_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QGraphicsProxyWidget::mouseReleaseEvent"
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|sendWidgetMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|GRAPHICSPROXYWIDGET_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QGraphicsProxyWidget::keyPressEvent"
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|sendWidgetKeyEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|keyReleaseEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|keyReleaseEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|GRAPHICSPROXYWIDGET_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QGraphicsProxyWidget::keyReleaseEvent"
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|sendWidgetKeyEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusInEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|event
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|GRAPHICSPROXYWIDGET_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QGraphicsProxyWidget::focusInEvent"
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|focusFromWidgetToProxy
condition|)
block|{
comment|// Prevent recursion when the proxy autogains focus through the
comment|// embedded widget calling setFocus(). ### Could be done with event
comment|// filter on FocusIn instead?
return|return;
block|}
name|d
operator|->
name|proxyIsGivingFocus
operator|=
literal|true
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|reason
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|TabFocusReason
case|:
block|{
if|if
condition|(
name|QWidget
modifier|*
name|focusChild
init|=
name|d
operator|->
name|findFocusChild
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
condition|)
name|focusChild
operator|->
name|setFocus
argument_list|(
name|event
operator|->
name|reason
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Qt
operator|::
name|BacktabFocusReason
case|:
if|if
condition|(
name|QWidget
modifier|*
name|focusChild
init|=
name|d
operator|->
name|findFocusChild
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
condition|)
name|focusChild
operator|->
name|setFocus
argument_list|(
name|event
operator|->
name|reason
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|d
operator|->
name|widget
operator|&&
name|d
operator|->
name|widget
operator|->
name|focusWidget
argument_list|()
condition|)
block|{
name|d
operator|->
name|widget
operator|->
name|focusWidget
argument_list|()
operator|->
name|setFocus
argument_list|(
name|event
operator|->
name|reason
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|d
operator|->
name|proxyIsGivingFocus
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusOutEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|event
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|GRAPHICSPROXYWIDGET_DEBUG
name|qDebug
argument_list|()
operator|<<
literal|"QGraphicsProxyWidget::focusOutEvent"
expr_stmt|;
endif|#
directive|endif
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|widget
condition|)
block|{
comment|// We need to explicitly remove subfocus from the embedded widget's
comment|// focus widget.
if|if
condition|(
name|QWidget
modifier|*
name|focusWidget
init|=
name|d
operator|->
name|widget
operator|->
name|focusWidget
argument_list|()
condition|)
name|d
operator|->
name|removeSubFocusHelper
argument_list|(
name|focusWidget
argument_list|,
name|event
operator|->
name|reason
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusNextPrevChild
name|bool
name|QGraphicsProxyWidget
operator|::
name|focusNextPrevChild
parameter_list|(
name|bool
name|next
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|widget
operator|||
operator|!
name|d
operator|->
name|scene
condition|)
return|return
name|QGraphicsWidget
operator|::
name|focusNextPrevChild
argument_list|(
name|next
argument_list|)
return|;
name|Qt
operator|::
name|FocusReason
name|reason
init|=
name|next
condition|?
name|Qt
operator|::
name|TabFocusReason
else|:
name|Qt
operator|::
name|BacktabFocusReason
decl_stmt|;
name|QWidget
modifier|*
name|lastFocusChild
init|=
name|d
operator|->
name|widget
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|newFocusChild
init|=
name|d
operator|->
name|findFocusChild
argument_list|(
name|lastFocusChild
argument_list|,
name|next
argument_list|)
condition|)
block|{
name|newFocusChild
operator|->
name|setFocus
argument_list|(
name|reason
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|QGraphicsWidget
operator|::
name|focusNextPrevChild
argument_list|(
name|next
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|inputMethodQuery
name|QVariant
name|QGraphicsProxyWidget
operator|::
name|inputMethodQuery
parameter_list|(
name|Qt
operator|::
name|InputMethodQuery
name|query
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|widget
operator|||
operator|!
name|hasFocus
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|QWidget
modifier|*
name|focusWidget
init|=
name|widget
argument_list|()
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|focusWidget
condition|)
name|focusWidget
operator|=
name|d
operator|->
name|widget
expr_stmt|;
name|QVariant
name|v
init|=
name|focusWidget
operator|->
name|inputMethodQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QPointF
name|focusWidgetPos
init|=
name|subWidgetRect
argument_list|(
name|focusWidget
argument_list|)
operator|.
name|topLeft
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|v
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|RectF
case|:
name|v
operator|=
name|v
operator|.
name|toRectF
argument_list|()
operator|.
name|translated
argument_list|(
name|focusWidgetPos
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|PointF
case|:
name|v
operator|=
name|v
operator|.
name|toPointF
argument_list|()
operator|+
name|focusWidgetPos
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Rect
case|:
name|v
operator|=
name|v
operator|.
name|toRect
argument_list|()
operator|.
name|translated
argument_list|(
name|focusWidgetPos
operator|.
name|toPoint
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Point
case|:
name|v
operator|=
name|v
operator|.
name|toPoint
argument_list|()
operator|+
name|focusWidgetPos
operator|.
name|toPoint
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|v
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|inputMethodEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|inputMethodEvent
parameter_list|(
name|QInputMethodEvent
modifier|*
name|event
parameter_list|)
block|{
comment|// Forward input method events if the focus widget enables input methods.
name|Q_D
argument_list|(
specifier|const
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|focusWidget
init|=
name|d
operator|->
name|widget
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|focusWidget
operator|&&
name|focusWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
condition|)
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|focusWidget
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSizeF
name|QGraphicsProxyWidget
operator|::
name|sizeHint
parameter_list|(
name|Qt
operator|::
name|SizeHint
name|which
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|constraint
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|widget
condition|)
return|return
name|QGraphicsWidget
operator|::
name|sizeHint
argument_list|(
name|which
argument_list|,
name|constraint
argument_list|)
return|;
name|QSizeF
name|sh
decl_stmt|;
switch|switch
condition|(
name|which
condition|)
block|{
case|case
name|Qt
operator|::
name|PreferredSize
case|:
if|if
condition|(
name|QLayout
modifier|*
name|l
init|=
name|d
operator|->
name|widget
operator|->
name|layout
argument_list|()
condition|)
name|sh
operator|=
name|l
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
else|else
name|sh
operator|=
name|d
operator|->
name|widget
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|MinimumSize
case|:
if|if
condition|(
name|QLayout
modifier|*
name|l
init|=
name|d
operator|->
name|widget
operator|->
name|layout
argument_list|()
condition|)
name|sh
operator|=
name|l
operator|->
name|minimumSize
argument_list|()
expr_stmt|;
else|else
name|sh
operator|=
name|d
operator|->
name|widget
operator|->
name|minimumSizeHint
argument_list|()
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|MaximumSize
case|:
if|if
condition|(
name|QLayout
modifier|*
name|l
init|=
name|d
operator|->
name|widget
operator|->
name|layout
argument_list|()
condition|)
name|sh
operator|=
name|l
operator|->
name|maximumSize
argument_list|()
expr_stmt|;
else|else
name|sh
operator|=
name|QSizeF
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|,
name|QWIDGETSIZE_MAX
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|MinimumDescent
case|:
name|sh
operator|=
name|constraint
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|sh
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QGraphicsProxyWidget
operator|::
name|resizeEvent
parameter_list|(
name|QGraphicsSceneResizeEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|widget
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|sizeChangeMode
operator|!=
name|QGraphicsProxyWidgetPrivate
operator|::
name|WidgetToProxyMode
condition|)
name|d
operator|->
name|widget
operator|->
name|resize
argument_list|(
name|event
operator|->
name|newSize
argument_list|()
operator|.
name|toSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QGraphicsWidget
operator|::
name|resizeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|paint
name|void
name|QGraphicsProxyWidget
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
name|option
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGraphicsProxyWidget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|widget
operator|||
operator|!
name|d
operator|->
name|widget
operator|->
name|isVisible
argument_list|()
condition|)
return|return;
comment|// Filter out repaints on the window frame.
specifier|const
name|QRect
name|exposedWidgetRect
init|=
operator|(
name|option
operator|->
name|exposedRect
operator|&
name|rect
argument_list|()
operator|)
operator|.
name|toAlignedRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|exposedWidgetRect
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|d
operator|->
name|widget
operator|->
name|render
argument_list|(
name|painter
argument_list|,
name|exposedWidgetRect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|exposedWidgetRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|type
name|int
name|QGraphicsProxyWidget
operator|::
name|type
parameter_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.5    Creates a proxy widget for the given \a child of the widget   contained in this proxy.    This function makes it possible to acquire proxies for   non top-level widgets. For instance, you can embed a dialog,   and then transform only one of its widgets.    If the widget is already embedded, return the existing proxy widget.    \sa newProxyWidget(), QGraphicsScene::addWidget() */
end_comment
begin_function
DECL|function|createProxyForChildWidget
name|QGraphicsProxyWidget
modifier|*
name|QGraphicsProxyWidget
operator|::
name|createProxyForChildWidget
parameter_list|(
name|QWidget
modifier|*
name|child
parameter_list|)
block|{
name|QGraphicsProxyWidget
modifier|*
name|proxy
init|=
name|child
operator|->
name|graphicsProxyWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxy
condition|)
return|return
name|proxy
return|;
if|if
condition|(
operator|!
name|child
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QGraphicsProxyWidget::createProxyForChildWidget: top-level widget not in a QGraphicsScene"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QGraphicsProxyWidget
modifier|*
name|parentProxy
init|=
name|createProxyForChildWidget
argument_list|(
name|child
operator|->
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parentProxy
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|parentProxy
argument_list|,
literal|"newProxyWidget"
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QGraphicsProxyWidget
operator|*
argument_list|,
name|proxy
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
specifier|const
name|QWidget
operator|*
argument_list|,
name|child
argument_list|)
argument_list|)
condition|)
return|return
literal|0
return|;
name|proxy
operator|->
name|setParent
argument_list|(
name|parentProxy
argument_list|)
expr_stmt|;
name|proxy
operator|->
name|setWidget
argument_list|(
name|child
argument_list|)
expr_stmt|;
return|return
name|proxy
return|;
block|}
end_function
begin_comment
comment|/*!   \fn QGraphicsProxyWidget *QGraphicsProxyWidget::newProxyWidget(const QWidget *child)   \since 4.5    Creates a proxy widget for the given \a child of the widget contained in this   proxy.    You should not call this function directly; use   QGraphicsProxyWidget::createProxyForChildWidget() instead.    This function is a fake virtual slot that you can reimplement in   your subclass in order to control how new proxy widgets are   created. The default implementation returns a proxy created with   the QGraphicsProxyWidget() constructor with this proxy widget as   the parent.    \sa createProxyForChildWidget() */
end_comment
begin_function
DECL|function|newProxyWidget
name|QGraphicsProxyWidget
modifier|*
name|QGraphicsProxyWidget
operator|::
name|newProxyWidget
parameter_list|(
specifier|const
name|QWidget
modifier|*
parameter_list|)
block|{
return|return
operator|new
name|QGraphicsProxyWidget
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qgraphicsproxywidget.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_GRAPHICSVIEW
end_comment
end_unit
