begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowdefs.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FONTDIALOG
end_ifndef
begin_include
include|#
directive|include
file|"qfontdialog.h"
end_include
begin_include
include|#
directive|include
file|"qfontdialog_p.h"
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qcheckbox.h>
end_include
begin_include
include|#
directive|include
file|<qcombobox.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qfontdatabase.h>
end_include
begin_include
include|#
directive|include
file|<qgroupbox.h>
end_include
begin_include
include|#
directive|include
file|<qlabel.h>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qdialogbuttonbox.h>
end_include
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<qlistview.h>
end_include
begin_include
include|#
directive|include
file|<qstringlistmodel.h>
end_include
begin_include
include|#
directive|include
file|<qvalidator.h>
end_include
begin_include
include|#
directive|include
file|<private/qdialog_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfont_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QFontListView
class|class
name|QFontListView
super|:
specifier|public
name|QListView
block|{
name|Q_OBJECT
public|public:
name|QFontListView
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
constructor_decl|;
DECL|function|model
specifier|inline
name|QStringListModel
modifier|*
name|model
parameter_list|()
specifier|const
block|{
return|return
cast|static_cast
argument_list|<
name|QStringListModel
operator|*
argument_list|>
argument_list|(
name|QListView
operator|::
name|model
argument_list|()
argument_list|)
return|;
block|}
DECL|function|setCurrentItem
specifier|inline
name|void
name|setCurrentItem
parameter_list|(
name|int
name|item
parameter_list|)
block|{
name|QListView
operator|::
name|setCurrentIndex
argument_list|(
cast|static_cast
argument_list|<
name|QAbstractListModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
operator|->
name|index
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|currentItem
specifier|inline
name|int
name|currentItem
parameter_list|()
specifier|const
block|{
return|return
name|QListView
operator|::
name|currentIndex
argument_list|()
operator|.
name|row
argument_list|()
return|;
block|}
DECL|function|count
specifier|inline
name|int
name|count
parameter_list|()
specifier|const
block|{
return|return
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
return|;
block|}
DECL|function|currentText
specifier|inline
name|QString
name|currentText
parameter_list|()
specifier|const
block|{
name|int
name|row
init|=
name|QListView
operator|::
name|currentIndex
argument_list|()
operator|.
name|row
argument_list|()
decl_stmt|;
return|return
name|row
operator|<
literal|0
condition|?
name|QString
argument_list|()
else|:
name|model
argument_list|()
operator|->
name|stringList
argument_list|()
operator|.
name|at
argument_list|(
name|row
argument_list|)
return|;
block|}
name|void
name|currentChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|current
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|previous
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|QListView
operator|::
name|currentChanged
argument_list|(
name|current
argument_list|,
name|previous
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|isValid
argument_list|()
condition|)
emit|emit
name|highlighted
argument_list|(
name|current
operator|.
name|row
argument_list|()
argument_list|)
emit|;
block|}
DECL|function|text
name|QString
name|text
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
return|return
name|model
argument_list|()
operator|->
name|stringList
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
return|;
block|}
signals|signals:
name|void
name|highlighted
parameter_list|(
name|int
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QFontListView
name|QFontListView
operator|::
name|QFontListView
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QListView
argument_list|(
name|parent
argument_list|)
block|{
name|setModel
argument_list|(
operator|new
name|QStringListModel
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|setEditTriggers
argument_list|(
name|NoEditTriggers
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_decl_stmt
DECL|variable|DefaultWindowFlags
specifier|static
specifier|const
name|Qt
operator|::
name|WindowFlags
name|DefaultWindowFlags
init|=
name|Qt
operator|::
name|Dialog
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!   \class QFontDialog   \ingroup standard-dialogs   \inmodule QtWidgets    \brief The QFontDialog class provides a dialog widget for selecting a font.      A font dialog is created through one of the static getFont()     functions.    Examples:    \snippet code/src_gui_dialogs_qfontdialog.cpp 0      The dialog can also be used to set a widget's font directly:   \snippet code/src_gui_dialogs_qfontdialog.cpp 1   If the user clicks OK the font they chose will be used for myWidget,   and if they click Cancel the original font is used.    \image fusion-fontdialog.png A font dialog in the Fusion widget style.    \sa QFont, QFontInfo, QFontMetrics, QColorDialog, QFileDialog,       {Standard Dialogs Example} */
end_comment
begin_comment
comment|/*!     \since 4.5      Constructs a standard font dialog.      Use setCurrentFont() to set the initial font attributes.      The \a parent parameter is passed to the QDialog constructor.      \sa getFont() */
end_comment
begin_constructor
DECL|function|QFontDialog
name|QFontDialog
operator|::
name|QFontDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|new
name|QFontDialogPrivate
argument_list|,
name|parent
argument_list|,
name|DefaultWindowFlags
argument_list|)
block|{
name|Q_D
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \since 4.5      Constructs a standard font dialog with the given \a parent and specified     \a initial color. */
end_comment
begin_constructor
DECL|function|QFontDialog
name|QFontDialog
operator|::
name|QFontDialog
parameter_list|(
specifier|const
name|QFont
modifier|&
name|initial
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|new
name|QFontDialogPrivate
argument_list|,
name|parent
argument_list|,
name|DefaultWindowFlags
argument_list|)
block|{
name|Q_D
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
name|setCurrentFont
argument_list|(
name|initial
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QFontDialogPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSizeGripEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|->
name|setWindowTitle
argument_list|(
name|QFontDialog
operator|::
name|tr
argument_list|(
literal|"Select Font"
argument_list|)
argument_list|)
expr_stmt|;
comment|// grid
name|familyEdit
operator|=
operator|new
name|QLineEdit
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|familyEdit
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|familyList
operator|=
operator|new
name|QFontListView
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|familyEdit
operator|->
name|setFocusProxy
argument_list|(
name|familyList
argument_list|)
expr_stmt|;
name|familyAccel
operator|=
operator|new
name|QLabel
argument_list|(
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|familyAccel
operator|->
name|setBuddy
argument_list|(
name|familyList
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|familyAccel
operator|->
name|setIndent
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|styleEdit
operator|=
operator|new
name|QLineEdit
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|styleEdit
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|styleList
operator|=
operator|new
name|QFontListView
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|styleEdit
operator|->
name|setFocusProxy
argument_list|(
name|styleList
argument_list|)
expr_stmt|;
name|styleAccel
operator|=
operator|new
name|QLabel
argument_list|(
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|styleAccel
operator|->
name|setBuddy
argument_list|(
name|styleList
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|styleAccel
operator|->
name|setIndent
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sizeEdit
operator|=
operator|new
name|QLineEdit
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|sizeEdit
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|ClickFocus
argument_list|)
expr_stmt|;
name|QIntValidator
modifier|*
name|validator
init|=
operator|new
name|QIntValidator
argument_list|(
literal|1
argument_list|,
literal|512
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|sizeEdit
operator|->
name|setValidator
argument_list|(
name|validator
argument_list|)
expr_stmt|;
name|sizeList
operator|=
operator|new
name|QFontListView
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|sizeAccel
operator|=
operator|new
name|QLabel
argument_list|(
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|sizeAccel
operator|->
name|setBuddy
argument_list|(
name|sizeEdit
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|sizeAccel
operator|->
name|setIndent
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// effects box
name|effects
operator|=
operator|new
name|QGroupBox
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|vbox
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|effects
argument_list|)
decl_stmt|;
name|strikeout
operator|=
operator|new
name|QCheckBox
argument_list|(
name|effects
argument_list|)
expr_stmt|;
name|vbox
operator|->
name|addWidget
argument_list|(
name|strikeout
argument_list|)
expr_stmt|;
name|underline
operator|=
operator|new
name|QCheckBox
argument_list|(
name|effects
argument_list|)
expr_stmt|;
name|vbox
operator|->
name|addWidget
argument_list|(
name|underline
argument_list|)
expr_stmt|;
name|sample
operator|=
operator|new
name|QGroupBox
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QHBoxLayout
modifier|*
name|hbox
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|sample
argument_list|)
decl_stmt|;
name|sampleEdit
operator|=
operator|new
name|QLineEdit
argument_list|(
name|sample
argument_list|)
expr_stmt|;
name|sampleEdit
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Ignored
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|)
argument_list|)
expr_stmt|;
name|sampleEdit
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
comment|// Note that the sample text is *not* translated with tr(), as the
comment|// characters used depend on the charset encoding.
name|sampleEdit
operator|->
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"AaBbYyZz"
argument_list|)
argument_list|)
expr_stmt|;
name|hbox
operator|->
name|addWidget
argument_list|(
name|sampleEdit
argument_list|)
expr_stmt|;
name|writingSystemCombo
operator|=
operator|new
name|QComboBox
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|writingSystemAccel
operator|=
operator|new
name|QLabel
argument_list|(
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|writingSystemAccel
operator|->
name|setBuddy
argument_list|(
name|writingSystemCombo
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|writingSystemAccel
operator|->
name|setIndent
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|smoothScalable
operator|=
literal|false
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|writingSystemCombo
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_writingSystemHighlighted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|familyList
argument_list|,
name|SIGNAL
argument_list|(
name|highlighted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_familyHighlighted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|styleList
argument_list|,
name|SIGNAL
argument_list|(
name|highlighted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_styleHighlighted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|sizeList
argument_list|,
name|SIGNAL
argument_list|(
name|highlighted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_sizeHighlighted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|sizeEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_sizeChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|strikeout
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_updateSample
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|underline
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_updateSample
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QFontDatabase
operator|::
name|WritingSystemsCount
condition|;
operator|++
name|i
control|)
block|{
name|QFontDatabase
operator|::
name|WritingSystem
name|ws
init|=
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|writingSystemName
init|=
name|QFontDatabase
operator|::
name|writingSystemName
argument_list|(
name|ws
argument_list|)
decl_stmt|;
if|if
condition|(
name|writingSystemName
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|writingSystemCombo
operator|->
name|addItem
argument_list|(
name|writingSystemName
argument_list|)
expr_stmt|;
block|}
name|updateFamilies
argument_list|()
expr_stmt|;
if|if
condition|(
name|familyList
operator|->
name|count
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|familyList
operator|->
name|setCurrentItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sizeList
operator|->
name|setCurrentItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// grid layout
name|QGridLayout
modifier|*
name|mainGrid
init|=
operator|new
name|QGridLayout
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|int
name|spacing
init|=
name|mainGrid
operator|->
name|spacing
argument_list|()
decl_stmt|;
if|if
condition|(
name|spacing
operator|>=
literal|0
condition|)
block|{
comment|// uniform spacing
name|mainGrid
operator|->
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|setColumnMinimumWidth
argument_list|(
literal|1
argument_list|,
name|spacing
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|setColumnMinimumWidth
argument_list|(
literal|3
argument_list|,
name|spacing
argument_list|)
expr_stmt|;
name|int
name|margin
init|=
literal|0
decl_stmt|;
name|mainGrid
operator|->
name|getContentsMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|margin
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|setRowMinimumHeight
argument_list|(
literal|3
argument_list|,
name|margin
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|setRowMinimumHeight
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|setRowMinimumHeight
argument_list|(
literal|8
argument_list|,
name|margin
argument_list|)
expr_stmt|;
block|}
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|familyAccel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|familyEdit
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|familyList
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|styleAccel
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|styleEdit
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|styleList
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|sizeAccel
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|sizeEdit
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|sizeList
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|setColumnStretch
argument_list|(
literal|0
argument_list|,
literal|38
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|setColumnStretch
argument_list|(
literal|2
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|setColumnStretch
argument_list|(
literal|4
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|effects
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|sample
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|writingSystemAccel
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|writingSystemCombo
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|buttonBox
operator|=
operator|new
name|QDialogButtonBox
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|mainGrid
operator|->
name|addWidget
argument_list|(
name|buttonBox
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|button
init|=
cast|static_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|buttonBox
operator|->
name|addButton
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
argument_list|)
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|buttonBox
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|->
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttonBox
operator|->
name|addButton
argument_list|(
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|buttonBox
argument_list|,
name|SIGNAL
argument_list|(
name|rejected
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|q
operator|->
name|resize
argument_list|(
literal|180
argument_list|,
literal|120
argument_list|)
expr_stmt|;
else|#
directive|else
name|q
operator|->
name|resize
argument_list|(
literal|500
argument_list|,
literal|360
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINCE
name|sizeEdit
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|familyList
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|styleList
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|sizeList
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|familyList
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|retranslateStrings
argument_list|()
expr_stmt|;
name|sampleEdit
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_fontDialog_sampleEdit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \internal  Destroys the font dialog and frees up its storage. */
end_comment
begin_destructor
DECL|function|~QFontDialog
name|QFontDialog
operator|::
name|~
name|QFontDialog
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   Executes a modal font dialog and returns a font.    If the user clicks \uicontrol OK, the selected font is returned. If the user   clicks \uicontrol Cancel, the \a initial font is returned.    The dialog is constructed with the given \a parent and the options specified   in \a options. \a title is shown as the window title of the dialog and  \a   initial is the initially selected font. If the \a ok parameter is not-null,   the value it refers to is set to true if the user clicks \uicontrol OK, and set to   false if the user clicks \uicontrol Cancel.    Examples:   \snippet code/src_gui_dialogs_qfontdialog.cpp 2      The dialog can also be used to set a widget's font directly:   \snippet code/src_gui_dialogs_qfontdialog.cpp 3   In this example, if the user clicks OK the font they chose will be   used, and if they click Cancel the original font is used.    \warning Do not delete \a parent during the execution of the dialog.            If you want to do this, you should create the dialog            yourself using one of the QFontDialog constructors. */
end_comment
begin_function
DECL|function|getFont
name|QFont
name|QFontDialog
operator|::
name|getFont
parameter_list|(
name|bool
modifier|*
name|ok
parameter_list|,
specifier|const
name|QFont
modifier|&
name|initial
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|FontDialogOptions
name|options
parameter_list|)
block|{
return|return
name|QFontDialogPrivate
operator|::
name|getFont
argument_list|(
name|ok
argument_list|,
name|initial
argument_list|,
name|parent
argument_list|,
name|title
argument_list|,
name|options
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload    Executes a modal font dialog and returns a font.    If the user clicks \uicontrol OK, the selected font is returned. If the user   clicks \uicontrol Cancel, the Qt default font is returned.    The dialog is constructed with the given \a parent.   If the \a ok parameter is not-null, the value it refers to is set   to true if the user clicks \uicontrol OK, and false if the user clicks   \uicontrol Cancel.    Example:   \snippet code/src_gui_dialogs_qfontdialog.cpp 4    \warning Do not delete \a parent during the execution of the dialog.            If you want to do this, you should create the dialog            yourself using one of the QFontDialog constructors. */
end_comment
begin_function
DECL|function|getFont
name|QFont
name|QFontDialog
operator|::
name|getFont
parameter_list|(
name|bool
modifier|*
name|ok
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
block|{
name|QFont
name|initial
decl_stmt|;
return|return
name|QFontDialogPrivate
operator|::
name|getFont
argument_list|(
name|ok
argument_list|,
name|initial
argument_list|,
name|parent
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getFont
name|QFont
name|QFontDialogPrivate
operator|::
name|getFont
parameter_list|(
name|bool
modifier|*
name|ok
parameter_list|,
specifier|const
name|QFont
modifier|&
name|initial
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|QFontDialog
operator|::
name|FontDialogOptions
name|options
parameter_list|)
block|{
name|QFontDialog
name|dlg
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|dlg
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setCurrentFont
argument_list|(
name|initial
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
name|dlg
operator|.
name|setWindowTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
operator|(
name|dlg
operator|.
name|exec
argument_list|()
operator|||
operator|(
name|options
operator|&
name|QFontDialog
operator|::
name|NoButtons
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|ok
operator|=
operator|!
operator|!
name|ret
expr_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
return|return
name|dlg
operator|.
name|selectedFont
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|initial
return|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     An event filter to make the Up, Down, PageUp and PageDown keys work     correctly in the line edits. The source of the event is the object     \a o and the event is \a e. */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QFontDialog
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyPress
condition|)
block|{
name|QKeyEvent
modifier|*
name|k
init|=
operator|(
name|QKeyEvent
operator|*
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|o
operator|==
name|d
operator|->
name|sizeEdit
operator|&&
operator|(
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Up
operator|||
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Down
operator|||
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_PageUp
operator|||
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_PageDown
operator|)
condition|)
block|{
name|int
name|ci
init|=
name|d
operator|->
name|sizeList
operator|->
name|currentItem
argument_list|()
decl_stmt|;
operator|(
name|void
operator|)
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|d
operator|->
name|sizeList
argument_list|,
name|k
argument_list|)
expr_stmt|;
if|if
condition|(
name|ci
operator|!=
name|d
operator|->
name|sizeList
operator|->
name|currentItem
argument_list|()
operator|&&
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_FontDialog_SelectAssociatedText
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
name|d
operator|->
name|sizeEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|o
operator|==
name|d
operator|->
name|familyList
operator|||
name|o
operator|==
name|d
operator|->
name|styleList
operator|)
operator|&&
operator|(
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Return
operator|||
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Enter
operator|)
condition|)
block|{
name|k
operator|->
name|accept
argument_list|()
expr_stmt|;
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FocusIn
operator|&&
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_FontDialog_SelectAssociatedText
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
block|{
if|if
condition|(
name|o
operator|==
name|d
operator|->
name|familyList
condition|)
name|d
operator|->
name|familyEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|o
operator|==
name|d
operator|->
name|styleList
condition|)
name|d
operator|->
name|styleEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|o
operator|==
name|d
operator|->
name|sizeList
condition|)
name|d
operator|->
name|sizeEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
name|o
operator|==
name|d
operator|->
name|sizeList
condition|)
block|{
name|d
operator|->
name|sizeEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
return|return
name|QDialog
operator|::
name|eventFilter
argument_list|(
name|o
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|initHelper
name|void
name|QFontDialogPrivate
operator|::
name|initHelper
parameter_list|(
name|QPlatformDialogHelper
modifier|*
name|h
parameter_list|)
block|{
name|QFontDialog
modifier|*
name|d
init|=
name|q_func
argument_list|()
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|h
argument_list|,
name|SIGNAL
argument_list|(
name|currentFontChanged
argument_list|(
name|QFont
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|SIGNAL
argument_list|(
name|currentFontChanged
argument_list|(
name|QFont
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|h
argument_list|,
name|SIGNAL
argument_list|(
name|fontSelected
argument_list|(
name|QFont
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|SIGNAL
argument_list|(
name|fontSelected
argument_list|(
name|QFont
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QPlatformFontDialogHelper
operator|*
argument_list|>
argument_list|(
name|h
argument_list|)
operator|->
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|helperPrepareShow
name|void
name|QFontDialogPrivate
operator|::
name|helperPrepareShow
parameter_list|(
name|QPlatformDialogHelper
modifier|*
parameter_list|)
block|{
name|options
operator|->
name|setWindowTitle
argument_list|(
name|q_func
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Updates the contents of the "font family" list box. This     function can be reimplemented if you have special requirements. */
end_comment
begin_function
DECL|function|updateFamilies
name|void
name|QFontDialogPrivate
operator|::
name|updateFamilies
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
enum|enum
name|match_t
block|{
name|MATCH_NONE
init|=
literal|0
block|,
name|MATCH_LAST_RESORT
init|=
literal|1
block|,
name|MATCH_APP
init|=
literal|2
block|,
name|MATCH_FAMILY
init|=
literal|3
block|}
enum|;
specifier|const
name|QFontDialog
operator|::
name|FontDialogOptions
name|scalableMask
init|=
operator|(
name|QFontDialog
operator|::
name|ScalableFonts
operator||
name|QFontDialog
operator|::
name|NonScalableFonts
operator|)
decl_stmt|;
specifier|const
name|QFontDialog
operator|::
name|FontDialogOptions
name|spacingMask
init|=
operator|(
name|QFontDialog
operator|::
name|ProportionalFonts
operator||
name|QFontDialog
operator|::
name|MonospacedFonts
operator|)
decl_stmt|;
specifier|const
name|QFontDialog
operator|::
name|FontDialogOptions
name|options
init|=
name|q
operator|->
name|options
argument_list|()
decl_stmt|;
name|QFontDatabase
name|fdb
decl_stmt|;
name|QStringList
name|familyNames
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|family
decl|,
name|fdb
operator|.
name|families
argument_list|(
name|writingSystem
argument_list|)
control|)
block|{
if|if
condition|(
name|fdb
operator|.
name|isPrivateFamily
argument_list|(
name|family
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|(
name|options
operator|&
name|scalableMask
operator|)
operator|&&
operator|(
name|options
operator|&
name|scalableMask
operator|)
operator|!=
name|scalableMask
condition|)
block|{
if|if
condition|(
name|bool
argument_list|(
name|options
operator|&
name|QFontDialog
operator|::
name|ScalableFonts
argument_list|)
operator|!=
name|fdb
operator|.
name|isSmoothlyScalable
argument_list|(
name|family
argument_list|)
condition|)
continue|continue;
block|}
if|if
condition|(
operator|(
name|options
operator|&
name|spacingMask
operator|)
operator|&&
operator|(
name|options
operator|&
name|spacingMask
operator|)
operator|!=
name|spacingMask
condition|)
block|{
if|if
condition|(
name|bool
argument_list|(
name|options
operator|&
name|QFontDialog
operator|::
name|MonospacedFonts
argument_list|)
operator|!=
name|fdb
operator|.
name|isFixedPitch
argument_list|(
name|family
argument_list|)
condition|)
continue|continue;
block|}
name|familyNames
operator|<<
name|family
expr_stmt|;
block|}
name|familyList
operator|->
name|model
argument_list|()
operator|->
name|setStringList
argument_list|(
name|familyNames
argument_list|)
expr_stmt|;
name|QString
name|foundryName1
decl_stmt|,
name|familyName1
decl_stmt|,
name|foundryName2
decl_stmt|,
name|familyName2
decl_stmt|;
name|int
name|bestFamilyMatch
init|=
operator|-
literal|1
decl_stmt|;
name|match_t
name|bestFamilyType
init|=
name|MATCH_NONE
decl_stmt|;
name|QFont
name|f
decl_stmt|;
comment|// ##### do the right thing for a list of family names in the font.
name|QFontDatabase
operator|::
name|parseFontName
argument_list|(
name|family
argument_list|,
name|foundryName1
argument_list|,
name|familyName1
argument_list|)
expr_stmt|;
name|QStringList
operator|::
name|const_iterator
name|it
init|=
name|familyNames
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|familyNames
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
operator|,
operator|++
name|i
control|)
block|{
name|QFontDatabase
operator|::
name|parseFontName
argument_list|(
operator|*
name|it
argument_list|,
name|foundryName2
argument_list|,
name|familyName2
argument_list|)
expr_stmt|;
comment|//try to match...
if|if
condition|(
name|familyName1
operator|==
name|familyName2
condition|)
block|{
name|bestFamilyType
operator|=
name|MATCH_FAMILY
expr_stmt|;
if|if
condition|(
name|foundryName1
operator|==
name|foundryName2
condition|)
block|{
name|bestFamilyMatch
operator|=
name|i
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|bestFamilyMatch
operator|<
name|MATCH_FAMILY
condition|)
name|bestFamilyMatch
operator|=
name|i
expr_stmt|;
block|}
comment|//and try some fall backs
name|match_t
name|type
init|=
name|MATCH_NONE
decl_stmt|;
if|if
condition|(
name|bestFamilyType
operator|<=
name|MATCH_NONE
operator|&&
name|familyName2
operator|==
name|f
operator|.
name|lastResortFamily
argument_list|()
condition|)
name|type
operator|=
name|MATCH_LAST_RESORT
expr_stmt|;
if|if
condition|(
name|bestFamilyType
operator|<=
name|MATCH_LAST_RESORT
operator|&&
name|familyName2
operator|==
name|f
operator|.
name|family
argument_list|()
condition|)
name|type
operator|=
name|MATCH_APP
expr_stmt|;
comment|// ### add fallback for writingSystem
if|if
condition|(
name|type
operator|!=
name|MATCH_NONE
condition|)
block|{
name|bestFamilyType
operator|=
name|type
expr_stmt|;
name|bestFamilyMatch
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
operator|&&
name|bestFamilyType
operator|!=
name|MATCH_NONE
condition|)
name|familyList
operator|->
name|setCurrentItem
argument_list|(
name|bestFamilyMatch
argument_list|)
expr_stmt|;
else|else
name|familyList
operator|->
name|setCurrentItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|familyEdit
operator|->
name|setText
argument_list|(
name|familyList
operator|->
name|currentText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_FontDialog_SelectAssociatedText
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|&&
name|familyList
operator|->
name|hasFocus
argument_list|()
condition|)
name|familyEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|updateStyles
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Updates the contents of the "font style" list box. This     function can be reimplemented if you have special requirements. */
end_comment
begin_function
DECL|function|updateStyles
name|void
name|QFontDialogPrivate
operator|::
name|updateStyles
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
name|QStringList
name|styles
init|=
name|fdb
operator|.
name|styles
argument_list|(
name|familyList
operator|->
name|currentText
argument_list|()
argument_list|)
decl_stmt|;
name|styleList
operator|->
name|model
argument_list|()
operator|->
name|setStringList
argument_list|(
name|styles
argument_list|)
expr_stmt|;
if|if
condition|(
name|styles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|styleEdit
operator|->
name|clear
argument_list|()
expr_stmt|;
name|smoothScalable
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|style
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|found
init|=
literal|false
decl_stmt|;
name|bool
name|first
init|=
literal|true
decl_stmt|;
name|QString
name|cstyle
init|=
name|style
decl_stmt|;
name|redo
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|styleList
operator|->
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cstyle
operator|==
name|styleList
operator|->
name|text
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|styleList
operator|->
name|setCurrentItem
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
operator|&&
name|first
condition|)
block|{
if|if
condition|(
name|cstyle
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Italic"
argument_list|)
argument_list|)
condition|)
block|{
name|cstyle
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"Italic"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Oblique"
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
goto|goto
name|redo
goto|;
block|}
elseif|else
if|if
condition|(
name|cstyle
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Oblique"
argument_list|)
argument_list|)
condition|)
block|{
name|cstyle
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"Oblique"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Italic"
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
goto|goto
name|redo
goto|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
name|styleList
operator|->
name|setCurrentItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|styleList
operator|->
name|setCurrentItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|styleEdit
operator|->
name|setText
argument_list|(
name|styleList
operator|->
name|currentText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_FontDialog_SelectAssociatedText
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|&&
name|styleList
operator|->
name|hasFocus
argument_list|()
condition|)
name|styleEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|smoothScalable
operator|=
name|fdb
operator|.
name|isSmoothlyScalable
argument_list|(
name|familyList
operator|->
name|currentText
argument_list|()
argument_list|,
name|styleList
operator|->
name|currentText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateSizes
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     Updates the contents of the "font size" list box. This   function can be reimplemented if you have special requirements. */
end_comment
begin_function
DECL|function|updateSizes
name|void
name|QFontDialogPrivate
operator|::
name|updateSizes
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|familyList
operator|->
name|currentText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|sizes
init|=
name|fdb
operator|.
name|pointSizes
argument_list|(
name|familyList
operator|->
name|currentText
argument_list|()
argument_list|,
name|styleList
operator|->
name|currentText
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|current
init|=
operator|-
literal|1
decl_stmt|;
name|QStringList
name|str_sizes
decl_stmt|;
for|for
control|(
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|sizes
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|sizes
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|str_sizes
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
operator|*
name|it
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
operator|-
literal|1
operator|&&
operator|*
name|it
operator|==
name|size
condition|)
name|current
operator|=
name|i
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|sizeList
operator|->
name|model
argument_list|()
operator|->
name|setStringList
argument_list|(
name|str_sizes
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
operator|-
literal|1
condition|)
name|sizeList
operator|->
name|setCurrentItem
argument_list|(
name|current
argument_list|)
expr_stmt|;
specifier|const
name|QSignalBlocker
name|blocker
argument_list|(
name|sizeEdit
argument_list|)
decl_stmt|;
name|sizeEdit
operator|->
name|setText
argument_list|(
operator|(
name|smoothScalable
condition|?
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|)
else|:
name|sizeList
operator|->
name|currentText
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_FontDialog_SelectAssociatedText
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|&&
name|sizeList
operator|->
name|hasFocus
argument_list|()
condition|)
name|sizeEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sizeEdit
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
name|_q_updateSample
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_updateSample
name|void
name|QFontDialogPrivate
operator|::
name|_q_updateSample
parameter_list|()
block|{
comment|// compute new font
name|int
name|pSize
init|=
name|sizeEdit
operator|->
name|text
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QFont
name|newFont
argument_list|(
name|fdb
operator|.
name|font
argument_list|(
name|familyList
operator|->
name|currentText
argument_list|()
argument_list|,
name|style
argument_list|,
name|pSize
argument_list|)
argument_list|)
decl_stmt|;
name|newFont
operator|.
name|setStrikeOut
argument_list|(
name|strikeout
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|newFont
operator|.
name|setUnderline
argument_list|(
name|underline
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|familyList
operator|->
name|currentText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|sampleEdit
operator|->
name|clear
argument_list|()
expr_stmt|;
name|updateSampleFont
argument_list|(
name|newFont
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateSampleFont
name|void
name|QFontDialogPrivate
operator|::
name|updateSampleFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|newFont
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|newFont
operator|!=
name|sampleEdit
operator|->
name|font
argument_list|()
condition|)
block|{
name|sampleEdit
operator|->
name|setFont
argument_list|(
name|newFont
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|currentFontChanged
argument_list|(
name|newFont
argument_list|)
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_writingSystemHighlighted
name|void
name|QFontDialogPrivate
operator|::
name|_q_writingSystemHighlighted
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|writingSystem
operator|=
name|QFontDatabase
operator|::
name|WritingSystem
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|sampleEdit
operator|->
name|setText
argument_list|(
name|fdb
operator|.
name|writingSystemSample
argument_list|(
name|writingSystem
argument_list|)
argument_list|)
expr_stmt|;
name|updateFamilies
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_familyHighlighted
name|void
name|QFontDialogPrivate
operator|::
name|_q_familyHighlighted
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
name|family
operator|=
name|familyList
operator|->
name|text
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|familyEdit
operator|->
name|setText
argument_list|(
name|family
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_FontDialog_SelectAssociatedText
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|&&
name|familyList
operator|->
name|hasFocus
argument_list|()
condition|)
name|familyEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|updateStyles
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_styleHighlighted
name|void
name|QFontDialogPrivate
operator|::
name|_q_styleHighlighted
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|styleList
operator|->
name|text
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|styleEdit
operator|->
name|setText
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_FontDialog_SelectAssociatedText
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|&&
name|styleList
operator|->
name|hasFocus
argument_list|()
condition|)
name|styleEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|style
operator|=
name|s
expr_stmt|;
name|updateSizes
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_sizeHighlighted
name|void
name|QFontDialogPrivate
operator|::
name|_q_sizeHighlighted
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|sizeList
operator|->
name|text
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|sizeEdit
operator|->
name|setText
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_FontDialog_SelectAssociatedText
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|&&
name|sizeEdit
operator|->
name|hasFocus
argument_list|()
condition|)
name|sizeEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|size
operator|=
name|s
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|_q_updateSample
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     This slot is called if the user changes the font size.     The size is passed in the \a s argument as a \e string. */
end_comment
begin_function
DECL|function|_q_sizeChanged
name|void
name|QFontDialogPrivate
operator|::
name|_q_sizeChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
comment|// no need to check if the conversion is valid, since we have an QIntValidator in the size edit
name|int
name|size
init|=
name|s
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|->
name|size
operator|==
name|size
condition|)
return|return;
name|this
operator|->
name|size
operator|=
name|size
expr_stmt|;
if|if
condition|(
name|sizeList
operator|->
name|count
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|sizeList
operator|->
name|count
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sizeList
operator|->
name|text
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|()
operator|>=
name|this
operator|->
name|size
condition|)
break|break;
block|}
specifier|const
name|QSignalBlocker
name|blocker
argument_list|(
name|sizeList
argument_list|)
decl_stmt|;
if|if
condition|(
name|sizeList
operator|->
name|text
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|()
operator|==
name|this
operator|->
name|size
condition|)
name|sizeList
operator|->
name|setCurrentItem
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|sizeList
operator|->
name|clearSelection
argument_list|()
expr_stmt|;
block|}
name|_q_updateSample
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|retranslateStrings
name|void
name|QFontDialogPrivate
operator|::
name|retranslateStrings
parameter_list|()
block|{
name|familyAccel
operator|->
name|setText
argument_list|(
name|QFontDialog
operator|::
name|tr
argument_list|(
literal|"&Font"
argument_list|)
argument_list|)
expr_stmt|;
name|styleAccel
operator|->
name|setText
argument_list|(
name|QFontDialog
operator|::
name|tr
argument_list|(
literal|"Font st&yle"
argument_list|)
argument_list|)
expr_stmt|;
name|sizeAccel
operator|->
name|setText
argument_list|(
name|QFontDialog
operator|::
name|tr
argument_list|(
literal|"&Size"
argument_list|)
argument_list|)
expr_stmt|;
name|effects
operator|->
name|setTitle
argument_list|(
name|QFontDialog
operator|::
name|tr
argument_list|(
literal|"Effects"
argument_list|)
argument_list|)
expr_stmt|;
name|strikeout
operator|->
name|setText
argument_list|(
name|QFontDialog
operator|::
name|tr
argument_list|(
literal|"Stri&keout"
argument_list|)
argument_list|)
expr_stmt|;
name|underline
operator|->
name|setText
argument_list|(
name|QFontDialog
operator|::
name|tr
argument_list|(
literal|"&Underline"
argument_list|)
argument_list|)
expr_stmt|;
name|sample
operator|->
name|setTitle
argument_list|(
name|QFontDialog
operator|::
name|tr
argument_list|(
literal|"Sample"
argument_list|)
argument_list|)
expr_stmt|;
name|writingSystemAccel
operator|->
name|setText
argument_list|(
name|QFontDialog
operator|::
name|tr
argument_list|(
literal|"Wr&iting System"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QFontDialog
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LanguageChange
condition|)
block|{
name|d
operator|->
name|retranslateStrings
argument_list|()
expr_stmt|;
block|}
name|QDialog
operator|::
name|changeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      \property QFontDialog::currentFont     \brief the current font of the dialog. */
end_comment
begin_comment
comment|/*!     \since 4.5      Sets the font highlighted in the QFontDialog to the given \a font.      \sa selectedFont() */
end_comment
begin_function
DECL|function|setCurrentFont
name|void
name|QFontDialog
operator|::
name|setCurrentFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|family
operator|=
name|font
operator|.
name|family
argument_list|()
expr_stmt|;
name|d
operator|->
name|style
operator|=
name|d
operator|->
name|fdb
operator|.
name|styleString
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|d
operator|->
name|size
operator|=
name|font
operator|.
name|pointSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|QFontInfo
name|fi
argument_list|(
name|font
argument_list|)
decl_stmt|;
name|d
operator|->
name|size
operator|=
name|fi
operator|.
name|pointSize
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|strikeout
operator|->
name|setChecked
argument_list|(
name|font
operator|.
name|strikeOut
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|underline
operator|->
name|setChecked
argument_list|(
name|font
operator|.
name|underline
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateFamilies
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|canBeNativeDialog
argument_list|()
condition|)
block|{
if|if
condition|(
name|QPlatformFontDialogHelper
modifier|*
name|helper
init|=
name|d
operator|->
name|platformFontDialogHelper
argument_list|()
condition|)
name|helper
operator|->
name|setCurrentFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns the current font.      \sa selectedFont() */
end_comment
begin_function
DECL|function|currentFont
name|QFont
name|QFontDialog
operator|::
name|currentFont
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFontDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|canBeNativeDialog
argument_list|()
condition|)
block|{
if|if
condition|(
specifier|const
name|QPlatformFontDialogHelper
modifier|*
name|helper
init|=
name|d
operator|->
name|platformFontDialogHelper
argument_list|()
condition|)
return|return
name|helper
operator|->
name|currentFont
argument_list|()
return|;
block|}
return|return
name|d
operator|->
name|sampleEdit
operator|->
name|font
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the font that the user selected by clicking the \uicontrol{OK}     or equivalent button.      \note This font is not always the same as the font held by the     \l currentFont property since the user can choose different fonts     before finally selecting the one to use. */
end_comment
begin_function
DECL|function|selectedFont
name|QFont
name|QFontDialog
operator|::
name|selectedFont
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFontDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|selectedFont
return|;
block|}
end_function
begin_comment
comment|/*!     \enum QFontDialog::FontDialogOption     \since 4.5      This enum specifies various options that affect the look and feel     of a font dialog.      For instance, it allows to specify which type of font should be     displayed. If none are specified all fonts available will be listed.      Note that the font filtering options might not be supported on some     platforms (e.g. Mac). They are always supported by the non native     dialog (used on Windows or Linux).      \value NoButtons Don't display \uicontrol{OK} and \uicontrol{Cancel} buttons. (Useful for "live dialogs".)     \value DontUseNativeDialog Use Qt's standard font dialog on the Mac instead of Apple's                                native font panel. (Currently, the native dialog is never used,                                but this is likely to change in future Qt releases.)     \value ScalableFonts Show scalable fonts     \value NonScalableFonts Show non scalable fonts     \value MonospacedFonts Show monospaced fonts     \value ProportionalFonts Show proportional fonts      \sa options, setOption(), testOption() */
end_comment
begin_comment
comment|/*!     Sets the given \a option to be enabled if \a on is true;     otherwise, clears the given \a option.      \sa options, testOption() */
end_comment
begin_function
DECL|function|setOption
name|void
name|QFontDialog
operator|::
name|setOption
parameter_list|(
name|FontDialogOption
name|option
parameter_list|,
name|bool
name|on
parameter_list|)
block|{
specifier|const
name|QFontDialog
operator|::
name|FontDialogOptions
name|previousOptions
init|=
name|options
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|previousOptions
operator|&
name|option
operator|)
operator|!=
operator|!
name|on
condition|)
name|setOptions
argument_list|(
name|previousOptions
operator|^
name|option
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the given \a option is enabled; otherwise, returns     false.      \sa options, setOption() */
end_comment
begin_function
DECL|function|testOption
name|bool
name|QFontDialog
operator|::
name|testOption
parameter_list|(
name|FontDialogOption
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFontDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|options
operator|->
name|testOption
argument_list|(
cast|static_cast
argument_list|<
name|QFontDialogOptions
operator|::
name|FontDialogOption
argument_list|>
argument_list|(
name|option
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QFontDialog::options     \brief the various options that affect the look and feel of the dialog     \since 4.5      By default, all options are disabled.      Options should be set before showing the dialog. Setting them while the     dialog is visible is not guaranteed to have an immediate effect on the     dialog (depending on the option and on the platform).      \sa setOption(), testOption() */
end_comment
begin_function
DECL|function|setOptions
name|void
name|QFontDialog
operator|::
name|setOptions
parameter_list|(
name|FontDialogOptions
name|options
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|QFontDialog
operator|::
name|options
argument_list|()
operator|==
name|options
condition|)
return|return;
name|d
operator|->
name|options
operator|->
name|setOptions
argument_list|(
name|QFontDialogOptions
operator|::
name|FontDialogOptions
argument_list|(
name|int
argument_list|(
name|options
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttonBox
operator|->
name|setVisible
argument_list|(
operator|!
operator|(
name|options
operator|&
name|NoButtons
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|options
name|QFontDialog
operator|::
name|FontDialogOptions
name|QFontDialog
operator|::
name|options
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QFontDialog
argument_list|)
expr_stmt|;
return|return
name|QFontDialog
operator|::
name|FontDialogOptions
argument_list|(
name|int
argument_list|(
name|d
operator|->
name|options
operator|->
name|options
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5     \overload      Opens the dialog and connects its fontSelected() signal to the slot specified     by \a receiver and \a member.      The signal will be disconnected from the slot when the dialog is closed. */
end_comment
begin_function
DECL|function|open
name|void
name|QFontDialog
operator|::
name|open
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|fontSelected
argument_list|(
name|QFont
argument_list|)
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
name|d
operator|->
name|receiverToDisconnectOnClose
operator|=
name|receiver
expr_stmt|;
name|d
operator|->
name|memberToDisconnectOnClose
operator|=
name|member
expr_stmt|;
name|QDialog
operator|::
name|open
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      \fn void QFontDialog::currentFontChanged(const QFont&font)      This signal is emitted when the current font is changed. The new font is     specified in \a font.      The signal is emitted while a user is selecting a font. Ultimately, the     chosen font may differ from the font currently selected.      \sa currentFont, fontSelected(), selectedFont() */
end_comment
begin_comment
comment|/*!     \since 4.5      \fn void QFontDialog::fontSelected(const QFont&font)      This signal is emitted when a font has been selected. The selected font is     specified in \a font.      The signal is only emitted when a user has chosen the final font to be     used. It is not emitted while the user is changing the current font in the     font dialog.      \sa selectedFont(), currentFontChanged(), currentFont */
end_comment
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QFontDialog
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
operator|!=
name|visible
condition|)
return|return;
name|Q_D
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|canBeNativeDialog
argument_list|()
condition|)
name|d
operator|->
name|setNativeDialogVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|nativeDialogInUse
condition|)
block|{
comment|// Set WA_DontShowOnScreen so that QDialog::setVisible(visible) below
comment|// updates the state correctly, but skips showing the non-native version:
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|nativeDialogInUse
operator|=
literal|false
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|QDialog
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Closes the dialog and sets its result code to \a result. If this dialog   is shown with exec(), done() causes the local event loop to finish,   and exec() to return \a result.    \sa QDialog::done() */
end_comment
begin_function
DECL|function|done
name|void
name|QFontDialog
operator|::
name|done
parameter_list|(
name|int
name|result
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QFontDialog
argument_list|)
expr_stmt|;
name|QDialog
operator|::
name|done
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|Accepted
condition|)
block|{
comment|// We check if this is the same font we had before, if so we emit currentFontChanged
name|QFont
name|selectedFont
init|=
name|currentFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedFont
operator|!=
name|d
operator|->
name|selectedFont
condition|)
emit|emit
operator|(
name|currentFontChanged
argument_list|(
name|selectedFont
argument_list|)
operator|)
emit|;
name|d
operator|->
name|selectedFont
operator|=
name|selectedFont
expr_stmt|;
emit|emit
name|fontSelected
argument_list|(
name|d
operator|->
name|selectedFont
argument_list|)
emit|;
block|}
else|else
name|d
operator|->
name|selectedFont
operator|=
name|QFont
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|receiverToDisconnectOnClose
condition|)
block|{
name|disconnect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|fontSelected
argument_list|(
name|QFont
argument_list|)
argument_list|)
argument_list|,
name|d
operator|->
name|receiverToDisconnectOnClose
argument_list|,
name|d
operator|->
name|memberToDisconnectOnClose
argument_list|)
expr_stmt|;
name|d
operator|->
name|receiverToDisconnectOnClose
operator|=
literal|0
expr_stmt|;
block|}
name|d
operator|->
name|memberToDisconnectOnClose
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canBeNativeDialog
name|bool
name|QFontDialogPrivate
operator|::
name|canBeNativeDialog
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QFontDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|nativeDialogInUse
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|options
operator|->
name|options
argument_list|()
operator|&
name|QFontDialog
operator|::
name|DontUseNativeDialog
condition|)
return|return
literal|false
return|;
name|QLatin1String
name|staticName
argument_list|(
name|QFontDialog
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
argument_list|)
decl_stmt|;
name|QLatin1String
name|dynamicName
argument_list|(
name|q
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|staticName
operator|==
name|dynamicName
operator|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qfontdialog.moc"
end_include
begin_include
include|#
directive|include
file|"moc_qfontdialog.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FONTDIALOG
end_comment
end_unit
