begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsidebar_p.h"
end_include
begin_include
include|#
directive|include
file|"qfilesystemmodel.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILEDIALOG
end_ifndef
begin_include
include|#
directive|include
file|<qaction.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qmimedata.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfileiconprovider.h>
end_include
begin_include
include|#
directive|include
file|<qfiledialog.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|initStyleOption
name|void
name|QSideBarDelegate
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionViewItem
modifier|*
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QStyledItemDelegate
operator|::
name|initStyleOption
argument_list|(
name|option
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|QVariant
name|value
init|=
name|index
operator|.
name|data
argument_list|(
name|QUrlModel
operator|::
name|EnabledRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|//If the bookmark/entry is not enabled then we paint it in gray
if|if
condition|(
operator|!
name|qvariant_cast
argument_list|<
name|bool
argument_list|>
argument_list|(
name|value
argument_list|)
condition|)
name|option
operator|->
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     \class QUrlModel     QUrlModel lets you have indexes from a QFileSystemModel to a list.  When QFileSystemModel     changes them QUrlModel will automatically update.      Example usage: File dialog sidebar and combo box  */
end_comment
begin_constructor
DECL|function|QUrlModel
name|QUrlModel
operator|::
name|QUrlModel
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QStandardItemModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|showFullPath
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|fileSystemModel
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mimeTypes
name|QStringList
name|QUrlModel
operator|::
name|mimeTypes
parameter_list|()
specifier|const
block|{
return|return
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/uri-list"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QUrlModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|QStandardItemModel
operator|::
name|flags
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|flags
operator|&=
operator|~
name|Qt
operator|::
name|ItemIsEditable
expr_stmt|;
comment|// ### some future version could support "moving" urls onto a folder
name|flags
operator|&=
operator|~
name|Qt
operator|::
name|ItemIsDropEnabled
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
name|flags
operator|&=
operator|~
name|Qt
operator|::
name|ItemIsEnabled
expr_stmt|;
return|return
name|flags
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mimeData
name|QMimeData
modifier|*
name|QUrlModel
operator|::
name|mimeData
parameter_list|(
specifier|const
name|QModelIndexList
modifier|&
name|indexes
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QUrl
argument_list|>
name|list
decl_stmt|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|index
range|:
name|indexes
control|)
block|{
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|0
condition|)
name|list
operator|.
name|append
argument_list|(
name|index
operator|.
name|data
argument_list|(
name|UrlRole
argument_list|)
operator|.
name|toUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QMimeData
modifier|*
name|data
init|=
operator|new
name|QMimeData
argument_list|()
decl_stmt|;
name|data
operator|->
name|setUrls
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_comment
comment|/*!     Decide based upon the data if it should be accepted or not      We only accept dirs and not files */
end_comment
begin_function
DECL|function|canDrop
name|bool
name|QUrlModel
operator|::
name|canDrop
parameter_list|(
name|QDragEnterEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|->
name|mimeData
argument_list|()
operator|->
name|formats
argument_list|()
operator|.
name|contains
argument_list|(
name|mimeTypes
argument_list|()
operator|.
name|constFirst
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|QList
argument_list|<
name|QUrl
argument_list|>
name|list
init|=
name|event
operator|->
name|mimeData
argument_list|()
operator|->
name|urls
argument_list|()
decl_stmt|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|url
range|:
name|list
control|)
block|{
specifier|const
name|QModelIndex
name|idx
init|=
name|fileSystemModel
operator|->
name|index
argument_list|(
name|url
operator|.
name|toLocalFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystemModel
operator|->
name|isDir
argument_list|(
name|idx
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|dropMimeData
name|bool
name|QUrlModel
operator|::
name|dropMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|DropAction
name|action
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|data
operator|->
name|formats
argument_list|()
operator|.
name|contains
argument_list|(
name|mimeTypes
argument_list|()
operator|.
name|constFirst
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
name|Q_UNUSED
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|addUrls
argument_list|(
name|data
operator|->
name|urls
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_comment
comment|/*!     \reimp      If the role is the UrlRole then handle otherwise just pass to QStandardItemModel */
end_comment
begin_function
DECL|function|setData
name|bool
name|QUrlModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Url
condition|)
block|{
name|QUrl
name|url
init|=
name|value
operator|.
name|toUrl
argument_list|()
decl_stmt|;
name|QModelIndex
name|dirIndex
init|=
name|fileSystemModel
operator|->
name|index
argument_list|(
name|url
operator|.
name|toLocalFile
argument_list|()
argument_list|)
decl_stmt|;
comment|//On windows the popup display the "C:\", convert to nativeSeparators
if|if
condition|(
name|showFullPath
condition|)
name|QStandardItemModel
operator|::
name|setData
argument_list|(
name|index
argument_list|,
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fileSystemModel
operator|->
name|data
argument_list|(
name|dirIndex
argument_list|,
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|QStandardItemModel
operator|::
name|setData
argument_list|(
name|index
argument_list|,
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fileSystemModel
operator|->
name|data
argument_list|(
name|dirIndex
argument_list|,
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|ToolTipRole
argument_list|)
expr_stmt|;
name|QStandardItemModel
operator|::
name|setData
argument_list|(
name|index
argument_list|,
name|fileSystemModel
operator|->
name|data
argument_list|(
name|dirIndex
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QStandardItemModel
operator|::
name|setData
argument_list|(
name|index
argument_list|,
name|fileSystemModel
operator|->
name|data
argument_list|(
name|dirIndex
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
expr_stmt|;
name|QStandardItemModel
operator|::
name|setData
argument_list|(
name|index
argument_list|,
name|url
argument_list|,
name|UrlRole
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|QStandardItemModel
operator|::
name|setData
argument_list|(
name|index
argument_list|,
name|value
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setUrl
name|void
name|QUrlModel
operator|::
name|setUrl
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|dirIndex
parameter_list|)
block|{
name|setData
argument_list|(
name|index
argument_list|,
name|url
argument_list|,
name|UrlRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|.
name|path
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setData
argument_list|(
name|index
argument_list|,
name|fileSystemModel
operator|->
name|myComputer
argument_list|()
argument_list|)
expr_stmt|;
name|setData
argument_list|(
name|index
argument_list|,
name|fileSystemModel
operator|->
name|myComputer
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|)
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|newName
decl_stmt|;
if|if
condition|(
name|showFullPath
condition|)
block|{
comment|//On windows the popup display the "C:\", convert to nativeSeparators
name|newName
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dirIndex
operator|.
name|data
argument_list|(
name|QFileSystemModel
operator|::
name|FilePathRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newName
operator|=
name|dirIndex
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|QIcon
name|newIcon
init|=
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|dirIndex
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dirIndex
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|newIcon
operator|=
name|fileSystemModel
operator|->
name|iconProvider
argument_list|()
operator|->
name|icon
argument_list|(
name|QFileIconProvider
operator|::
name|Folder
argument_list|)
expr_stmt|;
name|newName
operator|=
name|QFileInfo
argument_list|(
name|url
operator|.
name|toLocalFile
argument_list|()
argument_list|)
operator|.
name|fileName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|invalidUrls
operator|.
name|contains
argument_list|(
name|url
argument_list|)
condition|)
name|invalidUrls
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
comment|//The bookmark is invalid then we set to false the EnabledRole
name|setData
argument_list|(
name|index
argument_list|,
literal|false
argument_list|,
name|EnabledRole
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//The bookmark is valid then we set to true the EnabledRole
name|setData
argument_list|(
name|index
argument_list|,
literal|true
argument_list|,
name|EnabledRole
argument_list|)
expr_stmt|;
block|}
comment|// Make sure that we have at least 32x32 images
specifier|const
name|QSize
name|size
init|=
name|newIcon
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|<
literal|32
condition|)
block|{
name|QPixmap
name|smallPixmap
init|=
name|newIcon
operator|.
name|pixmap
argument_list|(
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
decl_stmt|;
name|newIcon
operator|.
name|addPixmap
argument_list|(
name|smallPixmap
operator|.
name|scaledToWidth
argument_list|(
literal|32
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
operator|!=
name|newName
condition|)
name|setData
argument_list|(
name|index
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|QIcon
name|oldIcon
init|=
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldIcon
operator|.
name|cacheKey
argument_list|()
operator|!=
name|newIcon
operator|.
name|cacheKey
argument_list|()
condition|)
name|setData
argument_list|(
name|index
argument_list|,
name|newIcon
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setUrls
name|void
name|QUrlModel
operator|::
name|setUrls
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QUrl
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|removeRows
argument_list|(
literal|0
argument_list|,
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
name|invalidUrls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|watching
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addUrls
argument_list|(
name|list
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Add urls \a list into the list at \a row.  If move then movie     existing ones to row.      \sa dropMimeData() */
end_comment
begin_function
DECL|function|addUrls
name|void
name|QUrlModel
operator|::
name|addUrls
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QUrl
argument_list|>
modifier|&
name|list
parameter_list|,
name|int
name|row
parameter_list|,
name|bool
name|move
parameter_list|)
block|{
if|if
condition|(
name|row
operator|==
operator|-
literal|1
condition|)
name|row
operator|=
name|rowCount
argument_list|()
expr_stmt|;
name|row
operator|=
name|qMin
argument_list|(
name|row
argument_list|,
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|list
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QUrl
name|url
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|url
operator|.
name|isValid
argument_list|()
operator|||
name|url
operator|.
name|scheme
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"file"
argument_list|)
condition|)
continue|continue;
comment|//this makes sure the url is clean
specifier|const
name|QString
name|cleanUrl
init|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|url
operator|.
name|toLocalFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cleanUrl
operator|.
name|isEmpty
argument_list|()
condition|)
name|url
operator|=
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|cleanUrl
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|move
operator|&&
name|j
operator|<
name|rowCount
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QString
name|local
init|=
name|index
argument_list|(
name|j
argument_list|,
literal|0
argument_list|)
operator|.
name|data
argument_list|(
name|UrlRole
argument_list|)
operator|.
name|toUrl
argument_list|()
operator|.
name|toLocalFile
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
specifier|const
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
name|Qt
operator|::
name|CaseInsensitive
decl_stmt|;
else|#
directive|else
specifier|const
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
name|Qt
operator|::
name|CaseSensitive
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|cleanUrl
operator|.
name|compare
argument_list|(
name|local
argument_list|,
name|cs
argument_list|)
condition|)
block|{
name|removeRow
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|<=
name|row
condition|)
name|row
operator|--
expr_stmt|;
break|break;
block|}
block|}
name|row
operator|=
name|qMax
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|fileSystemModel
operator|->
name|index
argument_list|(
name|cleanUrl
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystemModel
operator|->
name|isDir
argument_list|(
name|idx
argument_list|)
condition|)
continue|continue;
name|insertRows
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setUrl
argument_list|(
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
argument_list|,
name|url
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|watching
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|idx
argument_list|,
name|cleanUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Return the complete list of urls in a QList. */
end_comment
begin_function
DECL|function|urls
name|QList
argument_list|<
name|QUrl
argument_list|>
name|QUrlModel
operator|::
name|urls
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QUrl
argument_list|>
name|list
decl_stmt|;
specifier|const
name|int
name|numRows
init|=
name|rowCount
argument_list|()
decl_stmt|;
name|list
operator|.
name|reserve
argument_list|(
name|numRows
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
operator|++
name|i
control|)
name|list
operator|.
name|append
argument_list|(
name|data
argument_list|(
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|,
name|UrlRole
argument_list|)
operator|.
name|toUrl
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_comment
comment|/*!     QFileSystemModel to get index's from, clears existing rows */
end_comment
begin_function
DECL|function|setFileSystemModel
name|void
name|QUrlModel
operator|::
name|setFileSystemModel
parameter_list|(
name|QFileSystemModel
modifier|*
name|model
parameter_list|)
block|{
if|if
condition|(
name|model
operator|==
name|fileSystemModel
condition|)
return|return;
if|if
condition|(
name|fileSystemModel
operator|!=
literal|0
condition|)
block|{
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fileSystemModel
operator|=
name|model
expr_stmt|;
if|if
condition|(
name|fileSystemModel
operator|!=
literal|0
condition|)
block|{
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|clear
argument_list|()
expr_stmt|;
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     If one of the index's we are watching has changed update our internal data */
end_comment
begin_function
DECL|function|dataChanged
name|void
name|QUrlModel
operator|::
name|dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|)
block|{
name|QModelIndex
name|parent
init|=
name|topLeft
operator|.
name|parent
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|watching
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|watching
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|model
argument_list|()
operator|&&
name|topLeft
operator|.
name|model
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|.
name|model
argument_list|()
operator|==
name|topLeft
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|.
name|row
argument_list|()
operator|>=
name|topLeft
operator|.
name|row
argument_list|()
operator|&&
name|index
operator|.
name|row
argument_list|()
operator|<=
name|bottomRight
operator|.
name|row
argument_list|()
operator|&&
name|index
operator|.
name|column
argument_list|()
operator|>=
name|topLeft
operator|.
name|column
argument_list|()
operator|&&
name|index
operator|.
name|column
argument_list|()
operator|<=
name|bottomRight
operator|.
name|column
argument_list|()
operator|&&
name|index
operator|.
name|parent
argument_list|()
operator|==
name|parent
condition|)
block|{
name|changed
argument_list|(
name|watching
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Re-get all of our data, anything could have changed!  */
end_comment
begin_function
DECL|function|layoutChanged
name|void
name|QUrlModel
operator|::
name|layoutChanged
parameter_list|()
block|{
name|QStringList
name|paths
decl_stmt|;
specifier|const
name|int
name|numPaths
init|=
name|watching
operator|.
name|count
argument_list|()
decl_stmt|;
name|paths
operator|.
name|reserve
argument_list|(
name|numPaths
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPaths
condition|;
operator|++
name|i
control|)
name|paths
operator|.
name|append
argument_list|(
name|watching
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|watching
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPaths
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|path
init|=
name|paths
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QModelIndex
name|newIndex
init|=
name|fileSystemModel
operator|->
name|index
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|watching
operator|.
name|append
argument_list|(
name|QPair
argument_list|<
name|QModelIndex
argument_list|,
name|QString
argument_list|>
argument_list|(
name|newIndex
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|newIndex
operator|.
name|isValid
argument_list|()
condition|)
name|changed
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     The following path changed data update our copy of that data      \sa layoutChanged(), dataChanged() */
end_comment
begin_function
DECL|function|changed
name|void
name|QUrlModel
operator|::
name|changed
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|.
name|data
argument_list|(
name|UrlRole
argument_list|)
operator|.
name|toUrl
argument_list|()
operator|.
name|toLocalFile
argument_list|()
operator|==
name|path
condition|)
block|{
name|setData
argument_list|(
name|idx
argument_list|,
name|idx
operator|.
name|data
argument_list|(
name|UrlRole
argument_list|)
operator|.
name|toUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|QSidebar
name|QSidebar
operator|::
name|QSidebar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QListView
argument_list|(
name|parent
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setModelAndUrls
name|void
name|QSidebar
operator|::
name|setModelAndUrls
parameter_list|(
name|QFileSystemModel
modifier|*
name|model
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QUrl
argument_list|>
modifier|&
name|newUrls
parameter_list|)
block|{
comment|// ### TODO make icon size dynamic
name|setIconSize
argument_list|(
name|QSize
argument_list|(
literal|24
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|setUniformItemSizes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|urlModel
operator|=
operator|new
name|QUrlModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|urlModel
operator|->
name|setFileSystemModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|setModel
argument_list|(
name|urlModel
argument_list|)
expr_stmt|;
name|setItemDelegate
argument_list|(
operator|new
name|QSideBarDelegate
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|clicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|setDragDropMode
argument_list|(
name|QAbstractItemView
operator|::
name|DragDrop
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setContextMenuPolicy
argument_list|(
name|Qt
operator|::
name|CustomContextMenu
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|customContextMenuRequested
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showContextMenu
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|urlModel
operator|->
name|setUrls
argument_list|(
name|newUrls
argument_list|)
expr_stmt|;
name|setCurrentIndex
argument_list|(
name|this
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QSidebar
name|QSidebar
operator|::
name|~
name|QSidebar
parameter_list|()
block|{ }
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|dragEnterEvent
name|void
name|QSidebar
operator|::
name|dragEnterEvent
parameter_list|(
name|QDragEnterEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|urlModel
operator|->
name|canDrop
argument_list|(
name|event
argument_list|)
condition|)
name|QListView
operator|::
name|dragEnterEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QSidebar
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|model
argument_list|()
condition|)
return|return
name|QListView
operator|::
name|sizeHintForIndex
argument_list|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|+
name|QSize
argument_list|(
literal|2
operator|*
name|frameWidth
argument_list|()
argument_list|,
literal|2
operator|*
name|frameWidth
argument_list|()
argument_list|)
return|;
return|return
name|QListView
operator|::
name|sizeHint
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|selectUrl
name|void
name|QSidebar
operator|::
name|selectUrl
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|disconnect
argument_list|(
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|clicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|selectionModel
argument_list|()
operator|->
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|.
name|data
argument_list|(
name|QUrlModel
operator|::
name|UrlRole
argument_list|)
operator|.
name|toUrl
argument_list|()
operator|==
name|url
condition|)
block|{
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|connect
argument_list|(
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|clicked
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENU
end_ifndef
begin_comment
comment|/*!     \internal      \sa removeEntry() */
end_comment
begin_function
DECL|function|showContextMenu
name|void
name|QSidebar
operator|::
name|showContextMenu
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|position
parameter_list|)
block|{
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actions
decl_stmt|;
if|if
condition|(
name|indexAt
argument_list|(
name|position
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|QFileDialog
operator|::
name|tr
argument_list|(
literal|"Remove"
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexAt
argument_list|(
name|position
argument_list|)
operator|.
name|data
argument_list|(
name|QUrlModel
operator|::
name|UrlRole
argument_list|)
operator|.
name|toUrl
argument_list|()
operator|.
name|path
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|action
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|action
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|removeEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|append
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actions
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|QMenu
operator|::
name|exec
argument_list|(
name|actions
argument_list|,
name|mapToGlobal
argument_list|(
name|position
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENU
end_comment
begin_comment
comment|/*!     \internal      \sa showContextMenu() */
end_comment
begin_function
DECL|function|removeEntry
name|void
name|QSidebar
operator|::
name|removeEntry
parameter_list|()
block|{
name|QList
argument_list|<
name|QModelIndex
argument_list|>
name|idxs
init|=
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|indexes
decl_stmt|;
specifier|const
name|int
name|numIndexes
init|=
name|idxs
operator|.
name|count
argument_list|()
decl_stmt|;
name|indexes
operator|.
name|reserve
argument_list|(
name|numIndexes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndexes
condition|;
name|i
operator|++
control|)
name|indexes
operator|.
name|append
argument_list|(
name|idxs
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndexes
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|data
argument_list|(
name|QUrlModel
operator|::
name|UrlRole
argument_list|)
operator|.
name|toUrl
argument_list|()
operator|.
name|path
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|model
argument_list|()
operator|->
name|removeRow
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      \sa goToUrl() */
end_comment
begin_function
DECL|function|clicked
name|void
name|QSidebar
operator|::
name|clicked
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|QUrl
name|url
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|data
argument_list|(
name|QUrlModel
operator|::
name|UrlRole
argument_list|)
operator|.
name|toUrl
argument_list|()
decl_stmt|;
emit|emit
name|goToUrl
argument_list|(
name|url
argument_list|)
emit|;
name|selectUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp     Don't automatically select something  */
end_comment
begin_function
DECL|function|focusInEvent
name|void
name|QSidebar
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|event
parameter_list|)
block|{
name|QAbstractScrollArea
operator|::
name|focusInEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|event
name|bool
name|QSidebar
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyRelease
condition|)
block|{
name|QKeyEvent
modifier|*
name|ke
init|=
operator|(
name|QKeyEvent
operator|*
operator|)
name|event
decl_stmt|;
if|if
condition|(
name|ke
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Delete
condition|)
block|{
name|removeEntry
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
name|QListView
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qsidebar_p.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
end_unit
