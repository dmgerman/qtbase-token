begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcolordialog_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COLORDIALOG
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qdrawutil.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qdrag.h"
end_include
begin_include
include|#
directive|include
file|"qlabel.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qlineedit.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qpushbutton.h"
end_include
begin_include
include|#
directive|include
file|"qsettings.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qvalidator.h"
end_include
begin_include
include|#
directive|include
file|"qmimedata.h"
end_include
begin_include
include|#
directive|include
file|"qspinbox.h"
end_include
begin_include
include|#
directive|include
file|"qdialogbuttonbox.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|//////////// QWellArray BEGIN
end_comment
begin_struct_decl
struct_decl|struct
name|QWellArrayData
struct_decl|;
end_struct_decl
begin_class
DECL|class|QWellArray
class|class
name|QWellArray
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|int
name|selectedColumn
name|READ
name|selectedColumn
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|selectedRow
name|READ
name|selectedRow
argument_list|)
decl|public
range|:
name|QWellArray
argument_list|(
argument|int rows
argument_list|,
argument|int cols
argument_list|,
argument|QWidget* parent=
literal|0
argument_list|)
decl_stmt|;
DECL|function|~QWellArray
name|~
name|QWellArray
parameter_list|()
block|{}
name|QString
name|cellContent
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
specifier|const
function_decl|;
DECL|function|selectedColumn
name|int
name|selectedColumn
parameter_list|()
specifier|const
block|{
return|return
name|selCol
return|;
block|}
DECL|function|selectedRow
name|int
name|selectedRow
parameter_list|()
specifier|const
block|{
return|return
name|selRow
return|;
block|}
specifier|virtual
name|void
name|setCurrent
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
function_decl|;
specifier|virtual
name|void
name|setSelected
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
function_decl|;
name|QSize
name|sizeHint
parameter_list|()
specifier|const
function_decl|;
specifier|virtual
name|void
name|setCellBrush
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|,
specifier|const
name|QBrush
modifier|&
parameter_list|)
function_decl|;
name|QBrush
name|cellBrush
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
function_decl|;
DECL|function|cellWidth
specifier|inline
name|int
name|cellWidth
parameter_list|()
specifier|const
block|{
return|return
name|cellw
return|;
block|}
DECL|function|cellHeight
specifier|inline
name|int
name|cellHeight
parameter_list|()
specifier|const
block|{
return|return
name|cellh
return|;
block|}
DECL|function|rowAt
specifier|inline
name|int
name|rowAt
parameter_list|(
name|int
name|y
parameter_list|)
specifier|const
block|{
return|return
name|y
operator|/
name|cellh
return|;
block|}
DECL|function|columnAt
specifier|inline
name|int
name|columnAt
parameter_list|(
name|int
name|x
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
return|return
name|ncols
operator|-
operator|(
name|x
operator|/
name|cellw
operator|)
operator|-
literal|1
return|;
return|return
name|x
operator|/
name|cellw
return|;
block|}
DECL|function|rowY
specifier|inline
name|int
name|rowY
parameter_list|(
name|int
name|row
parameter_list|)
specifier|const
block|{
return|return
name|cellh
operator|*
name|row
return|;
block|}
DECL|function|columnX
specifier|inline
name|int
name|columnX
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
return|return
name|cellw
operator|*
operator|(
name|ncols
operator|-
name|column
operator|-
literal|1
operator|)
return|;
return|return
name|cellw
operator|*
name|column
return|;
block|}
DECL|function|numRows
specifier|inline
name|int
name|numRows
parameter_list|()
specifier|const
block|{
return|return
name|nrows
return|;
block|}
DECL|function|numCols
specifier|inline
name|int
name|numCols
parameter_list|()
specifier|const
block|{
return|return
name|ncols
return|;
block|}
DECL|function|cellRect
specifier|inline
name|QRect
name|cellRect
parameter_list|()
specifier|const
block|{
return|return
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|cellw
argument_list|,
name|cellh
argument_list|)
return|;
block|}
DECL|function|gridSize
specifier|inline
name|QSize
name|gridSize
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
name|ncols
operator|*
name|cellw
argument_list|,
name|nrows
operator|*
name|cellh
argument_list|)
return|;
block|}
DECL|function|cellGeometry
name|QRect
name|cellGeometry
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|QRect
name|r
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|nrows
operator|&&
name|column
operator|>=
literal|0
operator|&&
name|column
operator|<
name|ncols
condition|)
name|r
operator|.
name|setRect
argument_list|(
name|columnX
argument_list|(
name|column
argument_list|)
argument_list|,
name|rowY
argument_list|(
name|row
argument_list|)
argument_list|,
name|cellw
argument_list|,
name|cellh
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|function|updateCell
specifier|inline
name|void
name|updateCell
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|update
argument_list|(
name|cellGeometry
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
signals|signals:
name|void
name|selected
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
function_decl|;
protected|protected:
specifier|virtual
name|void
name|paintCell
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
specifier|virtual
name|void
name|paintCellContents
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
function_decl|;
private|private:
name|Q_DISABLE_COPY
parameter_list|(
name|QWellArray
parameter_list|)
DECL|member|nrows
name|int
name|nrows
decl_stmt|;
DECL|member|ncols
name|int
name|ncols
decl_stmt|;
DECL|member|cellw
name|int
name|cellw
decl_stmt|;
DECL|member|cellh
name|int
name|cellh
decl_stmt|;
DECL|member|curRow
name|int
name|curRow
decl_stmt|;
DECL|member|curCol
name|int
name|curCol
decl_stmt|;
DECL|member|selRow
name|int
name|selRow
decl_stmt|;
DECL|member|selCol
name|int
name|selCol
decl_stmt|;
DECL|member|d
name|QWellArrayData
modifier|*
name|d
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|paintEvent
name|void
name|QWellArray
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
block|{
name|QRect
name|r
init|=
name|e
operator|->
name|rect
argument_list|()
decl_stmt|;
name|int
name|cx
init|=
name|r
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|cy
init|=
name|r
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
name|r
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|cw
init|=
name|r
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|colfirst
init|=
name|columnAt
argument_list|(
name|cx
argument_list|)
decl_stmt|;
name|int
name|collast
init|=
name|columnAt
argument_list|(
name|cx
operator|+
name|cw
argument_list|)
decl_stmt|;
name|int
name|rowfirst
init|=
name|rowAt
argument_list|(
name|cy
argument_list|)
decl_stmt|;
name|int
name|rowlast
init|=
name|rowAt
argument_list|(
name|cy
operator|+
name|ch
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
name|int
name|t
init|=
name|colfirst
decl_stmt|;
name|colfirst
operator|=
name|collast
expr_stmt|;
name|collast
operator|=
name|t
expr_stmt|;
block|}
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QPainter
modifier|*
name|p
init|=
operator|&
name|painter
decl_stmt|;
name|QRect
name|rect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|cellWidth
argument_list|()
argument_list|,
name|cellHeight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collast
operator|<
literal|0
operator|||
name|collast
operator|>=
name|ncols
condition|)
name|collast
operator|=
name|ncols
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|rowlast
operator|<
literal|0
operator|||
name|rowlast
operator|>=
name|nrows
condition|)
name|rowlast
operator|=
name|nrows
operator|-
literal|1
expr_stmt|;
comment|// Go through the rows
for|for
control|(
name|int
name|r
init|=
name|rowfirst
init|;
name|r
operator|<=
name|rowlast
condition|;
operator|++
name|r
control|)
block|{
comment|// get row position and height
name|int
name|rowp
init|=
name|rowY
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// Go through the columns in the row r
comment|// if we know from where to where, go through [colfirst, collast],
comment|// else go through all of them
for|for
control|(
name|int
name|c
init|=
name|colfirst
init|;
name|c
operator|<=
name|collast
condition|;
operator|++
name|c
control|)
block|{
comment|// get position and width of column c
name|int
name|colp
init|=
name|columnX
argument_list|(
name|c
argument_list|)
decl_stmt|;
comment|// Translate painter and draw the cell
name|rect
operator|.
name|translate
argument_list|(
name|colp
argument_list|,
name|rowp
argument_list|)
expr_stmt|;
name|paintCell
argument_list|(
name|p
argument_list|,
name|r
argument_list|,
name|c
argument_list|,
name|rect
argument_list|)
expr_stmt|;
name|rect
operator|.
name|translate
argument_list|(
operator|-
name|colp
argument_list|,
operator|-
name|rowp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_struct
DECL|struct|QWellArrayData
struct|struct
name|QWellArrayData
block|{
DECL|member|brush
name|QBrush
modifier|*
name|brush
decl_stmt|;
block|}
struct|;
end_struct
begin_constructor
DECL|function|QWellArray
name|QWellArray
operator|::
name|QWellArray
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|cols
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|nrows
argument_list|(
name|rows
argument_list|)
member_init_list|,
name|ncols
argument_list|(
name|cols
argument_list|)
block|{
name|d
operator|=
literal|0
expr_stmt|;
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|cellw
operator|=
literal|28
expr_stmt|;
name|cellh
operator|=
literal|24
expr_stmt|;
name|curCol
operator|=
literal|0
expr_stmt|;
name|curRow
operator|=
literal|0
expr_stmt|;
name|selCol
operator|=
operator|-
literal|1
expr_stmt|;
name|selRow
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|sizeHint
name|QSize
name|QWellArray
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|ensurePolished
argument_list|()
expr_stmt|;
return|return
name|gridSize
argument_list|()
operator|.
name|boundedTo
argument_list|(
name|QSize
argument_list|(
literal|640
argument_list|,
literal|480
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|paintCell
name|void
name|QWellArray
operator|::
name|paintCell
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|int
name|b
init|=
literal|3
decl_stmt|;
comment|//margin
specifier|const
name|QPalette
modifier|&
name|g
init|=
name|palette
argument_list|()
decl_stmt|;
name|QStyleOptionFrame
name|opt
decl_stmt|;
name|int
name|dfw
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultFrameWidth
argument_list|)
decl_stmt|;
name|opt
operator|.
name|lineWidth
operator|=
name|dfw
expr_stmt|;
name|opt
operator|.
name|midLineWidth
operator|=
literal|1
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|rect
operator|.
name|adjusted
argument_list|(
name|b
argument_list|,
name|b
argument_list|,
operator|-
name|b
argument_list|,
operator|-
name|b
argument_list|)
expr_stmt|;
name|opt
operator|.
name|palette
operator|=
name|g
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_Enabled
operator||
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_Frame
argument_list|,
operator|&
name|opt
argument_list|,
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|b
operator|+=
name|dfw
expr_stmt|;
if|if
condition|(
operator|(
name|row
operator|==
name|curRow
operator|)
operator|&&
operator|(
name|col
operator|==
name|curCol
operator|)
condition|)
block|{
if|if
condition|(
name|hasFocus
argument_list|()
condition|)
block|{
name|QStyleOptionFocusRect
name|opt
decl_stmt|;
name|opt
operator|.
name|palette
operator|=
name|g
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|rect
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
operator||
name|QStyle
operator|::
name|State_KeyboardFocusChange
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameFocusRect
argument_list|,
operator|&
name|opt
argument_list|,
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
name|paintCellContents
argument_list|(
name|p
argument_list|,
name|row
argument_list|,
name|col
argument_list|,
name|opt
operator|.
name|rect
operator|.
name|adjusted
argument_list|(
name|dfw
argument_list|,
name|dfw
argument_list|,
operator|-
name|dfw
argument_list|,
operator|-
name|dfw
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Reimplement this function to change the contents of the well array.  */
end_comment
begin_function
DECL|function|paintCellContents
name|void
name|QWellArray
operator|::
name|paintCellContents
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
if|if
condition|(
name|d
condition|)
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|r
argument_list|,
name|d
operator|->
name|brush
index|[
name|row
operator|*
name|numCols
argument_list|()
operator|+
name|col
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|->
name|fillRect
argument_list|(
name|r
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|r
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|->
name|drawLine
argument_list|(
name|r
operator|.
name|topRight
argument_list|()
argument_list|,
name|r
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QWellArray
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// The current cell marker is set to the cell the mouse is pressed in
name|QPoint
name|pos
init|=
name|e
operator|->
name|pos
argument_list|()
decl_stmt|;
name|setCurrent
argument_list|(
name|rowAt
argument_list|(
name|pos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|columnAt
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QWellArray
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
comment|/* event */
parameter_list|)
block|{
comment|// The current cell marker is set to the cell the mouse is clicked in
name|setSelected
argument_list|(
name|curRow
argument_list|,
name|curCol
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   Sets the cell currently having the focus. This is not necessarily   the same as the currently selected cell. */
end_comment
begin_function
DECL|function|setCurrent
name|void
name|QWellArray
operator|::
name|setCurrent
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
operator|(
name|curRow
operator|==
name|row
operator|)
operator|&&
operator|(
name|curCol
operator|==
name|col
operator|)
condition|)
return|return;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|col
operator|<
literal|0
condition|)
name|row
operator|=
name|col
operator|=
operator|-
literal|1
expr_stmt|;
name|int
name|oldRow
init|=
name|curRow
decl_stmt|;
name|int
name|oldCol
init|=
name|curCol
decl_stmt|;
name|curRow
operator|=
name|row
expr_stmt|;
name|curCol
operator|=
name|col
expr_stmt|;
name|updateCell
argument_list|(
name|oldRow
argument_list|,
name|oldCol
argument_list|)
expr_stmt|;
name|updateCell
argument_list|(
name|curRow
argument_list|,
name|curCol
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   Sets the currently selected cell to \a row, \a column. If \a row or   \a column are less than zero, the current cell is unselected.    Does not set the position of the focus indicator. */
end_comment
begin_function
DECL|function|setSelected
name|void
name|QWellArray
operator|::
name|setSelected
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
name|int
name|oldRow
init|=
name|selRow
decl_stmt|;
name|int
name|oldCol
init|=
name|selCol
decl_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|col
operator|<
literal|0
condition|)
name|row
operator|=
name|col
operator|=
operator|-
literal|1
expr_stmt|;
name|selCol
operator|=
name|col
expr_stmt|;
name|selRow
operator|=
name|row
expr_stmt|;
name|updateCell
argument_list|(
name|oldRow
argument_list|,
name|oldCol
argument_list|)
expr_stmt|;
name|updateCell
argument_list|(
name|selRow
argument_list|,
name|selCol
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
emit|emit
name|selected
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
emit|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
condition|)
name|parentWidget
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|focusInEvent
name|void
name|QWellArray
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
parameter_list|)
block|{
name|updateCell
argument_list|(
name|curRow
argument_list|,
name|curCol
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCellBrush
name|void
name|QWellArray
operator|::
name|setCellBrush
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|,
specifier|const
name|QBrush
modifier|&
name|b
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
condition|)
block|{
name|d
operator|=
operator|new
name|QWellArrayData
expr_stmt|;
name|int
name|i
init|=
name|numRows
argument_list|()
operator|*
name|numCols
argument_list|()
decl_stmt|;
name|d
operator|->
name|brush
operator|=
operator|new
name|QBrush
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|numRows
argument_list|()
operator|&&
name|col
operator|>=
literal|0
operator|&&
name|col
operator|<
name|numCols
argument_list|()
condition|)
name|d
operator|->
name|brush
index|[
name|row
operator|*
name|numCols
argument_list|()
operator|+
name|col
index|]
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   Returns the brush set for the cell at \a row, \a column. If no brush is   set, Qt::NoBrush is returned. */
end_comment
begin_function
DECL|function|cellBrush
name|QBrush
name|QWellArray
operator|::
name|cellBrush
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|d
operator|&&
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|numRows
argument_list|()
operator|&&
name|col
operator|>=
literal|0
operator|&&
name|col
operator|<
name|numCols
argument_list|()
condition|)
return|return
name|d
operator|->
name|brush
index|[
name|row
operator|*
name|numCols
argument_list|()
operator|+
name|col
index|]
return|;
return|return
name|Qt
operator|::
name|NoBrush
return|;
block|}
end_function
begin_comment
comment|/*!\reimp */
end_comment
begin_function
DECL|function|focusOutEvent
name|void
name|QWellArray
operator|::
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
parameter_list|)
block|{
name|updateCell
argument_list|(
name|curRow
argument_list|,
name|curCol
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*\reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QWellArray
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|->
name|key
argument_list|()
condition|)
block|{
comment|// Look at the key code
case|case
name|Qt
operator|::
name|Key_Left
case|:
comment|// If 'left arrow'-key,
if|if
condition|(
name|curCol
operator|>
literal|0
condition|)
comment|// and cr't not in leftmost col
name|setCurrent
argument_list|(
name|curRow
argument_list|,
name|curCol
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// set cr't to next left column
break|break;
case|case
name|Qt
operator|::
name|Key_Right
case|:
comment|// Correspondingly...
if|if
condition|(
name|curCol
operator|<
name|numCols
argument_list|()
operator|-
literal|1
condition|)
name|setCurrent
argument_list|(
name|curRow
argument_list|,
name|curCol
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Up
case|:
if|if
condition|(
name|curRow
operator|>
literal|0
condition|)
name|setCurrent
argument_list|(
name|curRow
operator|-
literal|1
argument_list|,
name|curCol
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Down
case|:
if|if
condition|(
name|curRow
operator|<
name|numRows
argument_list|()
operator|-
literal|1
condition|)
name|setCurrent
argument_list|(
name|curRow
operator|+
literal|1
argument_list|,
name|curCol
argument_list|)
expr_stmt|;
break|break;
if|#
directive|if
literal|0
comment|// bad idea that shouldn't have been implemented; very counterintuitive
block|case Qt::Key_Return:     case Qt::Key_Enter:
comment|/*           ignore the key, so that the dialog get it, but still select           the current row/col         */
block|e->ignore();
comment|// fallthrough intended
endif|#
directive|endif
case|case
name|Qt
operator|::
name|Key_Space
case|:
name|setSelected
argument_list|(
name|curRow
argument_list|,
name|curCol
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// If not an interesting key,
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
comment|// we don't accept the event
return|return;
block|}
block|}
end_function
begin_comment
comment|//////////// QWellArray END
end_comment
begin_comment
comment|/*!     Returns the number of custom colors supported by QColorDialog. All     color dialogs share the same custom colors. */
end_comment
begin_function
DECL|function|customCount
name|int
name|QColorDialog
operator|::
name|customCount
parameter_list|()
block|{
return|return
name|QColorDialogOptions
operator|::
name|customColorCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns the custom color at the given \a index as a QColor value. */
end_comment
begin_function
DECL|function|customColor
name|QColor
name|QColorDialog
operator|::
name|customColor
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|QColor
argument_list|(
name|QColorDialogOptions
operator|::
name|customColor
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the custom color at \a index to the QColor \a color value.      \note This function does not apply to the Native Color Dialog on the Mac     OS X platform. If you still require this function, use the     QColorDialog::DontUseNativeDialog option. */
end_comment
begin_function
DECL|function|setCustomColor
name|void
name|QColorDialog
operator|::
name|setCustomColor
parameter_list|(
name|int
name|index
parameter_list|,
name|QColor
name|color
parameter_list|)
block|{
name|QColorDialogOptions
operator|::
name|setCustomColor
argument_list|(
name|index
argument_list|,
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 5.0      Returns the standard color at the given \a index as a QColor value. */
end_comment
begin_function
DECL|function|standardColor
name|QColor
name|QColorDialog
operator|::
name|standardColor
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|QColor
argument_list|(
name|QColorDialogOptions
operator|::
name|standardColor
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the standard color at \a index to the QColor \a color value.      \note This function does not apply to the Native Color Dialog on the Mac     OS X platform. If you still require this function, use the     QColorDialog::DontUseNativeDialog option. */
end_comment
begin_function
DECL|function|setStandardColor
name|void
name|QColorDialog
operator|::
name|setStandardColor
parameter_list|(
name|int
name|index
parameter_list|,
name|QColor
name|color
parameter_list|)
block|{
name|QColorDialogOptions
operator|::
name|setStandardColor
argument_list|(
name|index
argument_list|,
name|color
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rgb2hsv
specifier|static
specifier|inline
name|void
name|rgb2hsv
parameter_list|(
name|QRgb
name|rgb
parameter_list|,
name|int
modifier|&
name|h
parameter_list|,
name|int
modifier|&
name|s
parameter_list|,
name|int
modifier|&
name|v
parameter_list|)
block|{
name|QColor
name|c
decl_stmt|;
name|c
operator|.
name|setRgb
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|c
operator|.
name|getHsv
argument_list|(
operator|&
name|h
argument_list|,
operator|&
name|s
argument_list|,
operator|&
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QColorWell
class|class
name|QColorWell
super|:
specifier|public
name|QWellArray
block|{
public|public:
DECL|function|QColorWell
name|QColorWell
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|,
name|QRgb
modifier|*
name|vals
parameter_list|)
member_init_list|:
name|QWellArray
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|parent
argument_list|)
member_init_list|,
name|values
argument_list|(
name|vals
argument_list|)
member_init_list|,
name|mousePressed
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|oldCurrent
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
block|{
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
argument_list|)
expr_stmt|;
block|}
protected|protected:
name|void
name|paintCellContents
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|void
name|dragEnterEvent
parameter_list|(
name|QDragEnterEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|dragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|dragMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|dropEvent
parameter_list|(
name|QDropEvent
modifier|*
name|e
parameter_list|)
function_decl|;
endif|#
directive|endif
private|private:
DECL|member|values
name|QRgb
modifier|*
name|values
decl_stmt|;
DECL|member|mousePressed
name|bool
name|mousePressed
decl_stmt|;
DECL|member|pressPos
name|QPoint
name|pressPos
decl_stmt|;
DECL|member|oldCurrent
name|QPoint
name|oldCurrent
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|paintCellContents
name|void
name|QColorWell
operator|::
name|paintCellContents
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|int
name|i
init|=
name|row
operator|+
name|col
operator|*
name|numRows
argument_list|()
decl_stmt|;
name|p
operator|->
name|fillRect
argument_list|(
name|r
argument_list|,
name|QColor
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QColorWell
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|oldCurrent
operator|=
name|QPoint
argument_list|(
name|selectedRow
argument_list|()
argument_list|,
name|selectedColumn
argument_list|()
argument_list|)
expr_stmt|;
name|QWellArray
operator|::
name|mousePressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|mousePressed
operator|=
literal|true
expr_stmt|;
name|pressPos
operator|=
name|e
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|QColorWell
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|QWellArray
operator|::
name|mouseMoveEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
if|if
condition|(
operator|!
name|mousePressed
condition|)
return|return;
if|if
condition|(
operator|(
name|pressPos
operator|-
name|e
operator|->
name|pos
argument_list|()
operator|)
operator|.
name|manhattanLength
argument_list|()
operator|>
name|QApplication
operator|::
name|startDragDistance
argument_list|()
condition|)
block|{
name|setCurrent
argument_list|(
name|oldCurrent
operator|.
name|x
argument_list|()
argument_list|,
name|oldCurrent
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|rowAt
argument_list|(
name|pressPos
operator|.
name|y
argument_list|()
argument_list|)
operator|+
name|columnAt
argument_list|(
name|pressPos
operator|.
name|x
argument_list|()
argument_list|)
operator|*
name|numRows
argument_list|()
decl_stmt|;
name|QColor
name|col
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|QMimeData
modifier|*
name|mime
init|=
operator|new
name|QMimeData
decl_stmt|;
name|mime
operator|->
name|setColorData
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|QPixmap
name|pix
argument_list|(
name|cellWidth
argument_list|()
argument_list|,
name|cellHeight
argument_list|()
argument_list|)
decl_stmt|;
name|pix
operator|.
name|fill
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|pix
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pix
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|pix
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QDrag
modifier|*
name|drg
init|=
operator|new
name|QDrag
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|drg
operator|->
name|setMimeData
argument_list|(
name|mime
argument_list|)
expr_stmt|;
name|drg
operator|->
name|setPixmap
argument_list|(
name|pix
argument_list|)
expr_stmt|;
name|mousePressed
operator|=
literal|false
expr_stmt|;
name|drg
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|dragEnterEvent
name|void
name|QColorWell
operator|::
name|dragEnterEvent
parameter_list|(
name|QDragEnterEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|e
operator|->
name|mimeData
argument_list|()
operator|->
name|colorData
argument_list|()
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
else|else
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dragLeaveEvent
name|void
name|QColorWell
operator|::
name|dragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|hasFocus
argument_list|()
condition|)
name|parentWidget
argument_list|()
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dragMoveEvent
name|void
name|QColorWell
operator|::
name|dragMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|e
operator|->
name|mimeData
argument_list|()
operator|->
name|colorData
argument_list|()
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|setCurrent
argument_list|(
name|rowAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|columnAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dropEvent
name|void
name|QColorWell
operator|::
name|dropEvent
parameter_list|(
name|QDropEvent
modifier|*
name|e
parameter_list|)
block|{
name|QColor
name|col
init|=
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|e
operator|->
name|mimeData
argument_list|()
operator|->
name|colorData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|i
init|=
name|rowAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
operator|+
name|columnAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
operator|*
name|numRows
argument_list|()
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|col
operator|.
name|rgb
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QColorWell
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mousePressed
condition|)
return|return;
name|QWellArray
operator|::
name|mouseReleaseEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|mousePressed
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QColorPicker
class|class
name|QColorPicker
super|:
specifier|public
name|QFrame
block|{
name|Q_OBJECT
public|public:
name|QColorPicker
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
constructor_decl|;
name|~
name|QColorPicker
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|setCol
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|)
function_decl|;
signals|signals:
name|void
name|newCol
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|)
function_decl|;
protected|protected:
name|QSize
name|sizeHint
parameter_list|()
specifier|const
function_decl|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
function_decl|;
private|private:
DECL|member|hue
name|int
name|hue
decl_stmt|;
DECL|member|sat
name|int
name|sat
decl_stmt|;
name|QPoint
name|colPt
parameter_list|()
function_decl|;
name|int
name|huePt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|)
function_decl|;
name|int
name|satPt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|)
function_decl|;
name|void
name|setCol
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|)
function_decl|;
DECL|member|pix
name|QPixmap
name|pix
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|pWidth
specifier|static
name|int
name|pWidth
init|=
literal|220
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|pHeight
specifier|static
name|int
name|pHeight
init|=
literal|200
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QColorLuminancePicker
class|class
name|QColorLuminancePicker
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
name|QColorLuminancePicker
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|~
name|QColorLuminancePicker
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|setCol
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|v
parameter_list|)
function_decl|;
name|void
name|setCol
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|)
function_decl|;
signals|signals:
name|void
name|newHsv
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|v
parameter_list|)
function_decl|;
protected|protected:
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
private|private:
DECL|enumerator|foff
DECL|enumerator|coff
enum|enum
block|{
name|foff
init|=
literal|3
block|,
name|coff
init|=
literal|4
block|}
enum|;
comment|//frame and contents offset
DECL|member|val
name|int
name|val
decl_stmt|;
DECL|member|hue
name|int
name|hue
decl_stmt|;
DECL|member|sat
name|int
name|sat
decl_stmt|;
name|int
name|y2val
parameter_list|(
name|int
name|y
parameter_list|)
function_decl|;
name|int
name|val2y
parameter_list|(
name|int
name|val
parameter_list|)
function_decl|;
name|void
name|setVal
parameter_list|(
name|int
name|v
parameter_list|)
function_decl|;
DECL|member|pix
name|QPixmap
modifier|*
name|pix
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|y2val
name|int
name|QColorLuminancePicker
operator|::
name|y2val
parameter_list|(
name|int
name|y
parameter_list|)
block|{
name|int
name|d
init|=
name|height
argument_list|()
operator|-
literal|2
operator|*
name|coff
operator|-
literal|1
decl_stmt|;
return|return
literal|255
operator|-
operator|(
name|y
operator|-
name|coff
operator|)
operator|*
literal|255
operator|/
name|d
return|;
block|}
end_function
begin_function
DECL|function|val2y
name|int
name|QColorLuminancePicker
operator|::
name|val2y
parameter_list|(
name|int
name|v
parameter_list|)
block|{
name|int
name|d
init|=
name|height
argument_list|()
operator|-
literal|2
operator|*
name|coff
operator|-
literal|1
decl_stmt|;
return|return
name|coff
operator|+
operator|(
literal|255
operator|-
name|v
operator|)
operator|*
name|d
operator|/
literal|255
return|;
block|}
end_function
begin_constructor
DECL|function|QColorLuminancePicker
name|QColorLuminancePicker
operator|::
name|QColorLuminancePicker
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|hue
operator|=
literal|100
expr_stmt|;
name|val
operator|=
literal|100
expr_stmt|;
name|sat
operator|=
literal|100
expr_stmt|;
name|pix
operator|=
literal|0
expr_stmt|;
comment|//    setAttribute(WA_NoErase, true);
block|}
end_constructor
begin_destructor
DECL|function|~QColorLuminancePicker
name|QColorLuminancePicker
operator|::
name|~
name|QColorLuminancePicker
parameter_list|()
block|{
operator|delete
name|pix
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|mouseMoveEvent
name|void
name|QColorLuminancePicker
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|m
parameter_list|)
block|{
name|setVal
argument_list|(
name|y2val
argument_list|(
name|m
operator|->
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QColorLuminancePicker
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|m
parameter_list|)
block|{
name|setVal
argument_list|(
name|y2val
argument_list|(
name|m
operator|->
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setVal
name|void
name|QColorLuminancePicker
operator|::
name|setVal
parameter_list|(
name|int
name|v
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
name|v
condition|)
return|return;
name|val
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|qMin
argument_list|(
name|v
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|pix
expr_stmt|;
name|pix
operator|=
literal|0
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
emit|emit
name|newHsv
argument_list|(
name|hue
argument_list|,
name|sat
argument_list|,
name|val
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|//receives from a hue,sat chooser and relays.
end_comment
begin_function
DECL|function|setCol
name|void
name|QColorLuminancePicker
operator|::
name|setCol
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|)
block|{
name|setCol
argument_list|(
name|h
argument_list|,
name|s
argument_list|,
name|val
argument_list|)
expr_stmt|;
emit|emit
name|newHsv
argument_list|(
name|h
argument_list|,
name|s
argument_list|,
name|val
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QColorLuminancePicker
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|int
name|w
init|=
name|width
argument_list|()
operator|-
literal|5
decl_stmt|;
name|QRect
name|r
argument_list|(
literal|0
argument_list|,
name|foff
argument_list|,
name|w
argument_list|,
name|height
argument_list|()
operator|-
literal|2
operator|*
name|foff
argument_list|)
decl_stmt|;
name|int
name|wi
init|=
name|r
operator|.
name|width
argument_list|()
operator|-
literal|2
decl_stmt|;
name|int
name|hi
init|=
name|r
operator|.
name|height
argument_list|()
operator|-
literal|2
decl_stmt|;
if|if
condition|(
operator|!
name|pix
operator|||
name|pix
operator|->
name|height
argument_list|()
operator|!=
name|hi
operator|||
name|pix
operator|->
name|width
argument_list|()
operator|!=
name|wi
condition|)
block|{
operator|delete
name|pix
expr_stmt|;
name|QImage
name|img
argument_list|(
name|wi
argument_list|,
name|hi
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|int
name|y
decl_stmt|;
name|uint
modifier|*
name|pixel
init|=
operator|(
name|uint
operator|*
operator|)
name|img
operator|.
name|scanLine
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|y
operator|=
literal|0
init|;
name|y
operator|<
name|hi
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint
modifier|*
name|end
init|=
name|pixel
operator|+
name|wi
decl_stmt|;
while|while
condition|(
name|pixel
operator|<
name|end
condition|)
block|{
name|QColor
name|c
decl_stmt|;
name|c
operator|.
name|setHsv
argument_list|(
name|hue
argument_list|,
name|sat
argument_list|,
name|y2val
argument_list|(
name|y
operator|+
name|coff
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|pixel
operator|=
name|c
operator|.
name|rgb
argument_list|()
expr_stmt|;
operator|++
name|pixel
expr_stmt|;
block|}
block|}
name|pix
operator|=
operator|new
name|QPixmap
argument_list|(
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|1
argument_list|,
name|coff
argument_list|,
operator|*
name|pix
argument_list|)
expr_stmt|;
specifier|const
name|QPalette
modifier|&
name|g
init|=
name|palette
argument_list|()
decl_stmt|;
name|qDrawShadePanel
argument_list|(
operator|&
name|p
argument_list|,
name|r
argument_list|,
name|g
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|g
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|g
operator|.
name|foreground
argument_list|()
argument_list|)
expr_stmt|;
name|QPolygon
name|a
decl_stmt|;
name|int
name|y
init|=
name|val2y
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|a
operator|.
name|setPoints
argument_list|(
literal|3
argument_list|,
name|w
argument_list|,
name|y
argument_list|,
name|w
operator|+
literal|5
argument_list|,
name|y
operator|+
literal|5
argument_list|,
name|w
operator|+
literal|5
argument_list|,
name|y
operator|-
literal|5
argument_list|)
expr_stmt|;
name|p
operator|.
name|eraseRect
argument_list|(
name|w
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPolygon
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCol
name|void
name|QColorLuminancePicker
operator|::
name|setCol
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|v
parameter_list|)
block|{
name|val
operator|=
name|v
expr_stmt|;
name|hue
operator|=
name|h
expr_stmt|;
name|sat
operator|=
name|s
expr_stmt|;
operator|delete
name|pix
expr_stmt|;
name|pix
operator|=
literal|0
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|colPt
name|QPoint
name|QColorPicker
operator|::
name|colPt
parameter_list|()
block|{
name|QRect
name|r
init|=
name|contentsRect
argument_list|()
decl_stmt|;
return|return
name|QPoint
argument_list|(
operator|(
literal|360
operator|-
name|hue
operator|)
operator|*
operator|(
name|r
operator|.
name|width
argument_list|()
operator|-
literal|1
operator|)
operator|/
literal|360
argument_list|,
operator|(
literal|255
operator|-
name|sat
operator|)
operator|*
operator|(
name|r
operator|.
name|height
argument_list|()
operator|-
literal|1
operator|)
operator|/
literal|255
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|huePt
name|int
name|QColorPicker
operator|::
name|huePt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|)
block|{
name|QRect
name|r
init|=
name|contentsRect
argument_list|()
decl_stmt|;
return|return
literal|360
operator|-
name|pt
operator|.
name|x
argument_list|()
operator|*
literal|360
operator|/
operator|(
name|r
operator|.
name|width
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|satPt
name|int
name|QColorPicker
operator|::
name|satPt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|)
block|{
name|QRect
name|r
init|=
name|contentsRect
argument_list|()
decl_stmt|;
return|return
literal|255
operator|-
name|pt
operator|.
name|y
argument_list|()
operator|*
literal|255
operator|/
operator|(
name|r
operator|.
name|height
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|setCol
name|void
name|QColorPicker
operator|::
name|setCol
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|)
block|{
name|setCol
argument_list|(
name|huePt
argument_list|(
name|pt
argument_list|)
argument_list|,
name|satPt
argument_list|(
name|pt
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QColorPicker
name|QColorPicker
operator|::
name|QColorPicker
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QFrame
argument_list|(
name|parent
argument_list|)
block|{
name|hue
operator|=
literal|0
expr_stmt|;
name|sat
operator|=
literal|0
expr_stmt|;
name|setCol
argument_list|(
literal|150
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoSystemBackground
argument_list|)
expr_stmt|;
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QColorPicker
name|QColorPicker
operator|::
name|~
name|QColorPicker
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|sizeHint
name|QSize
name|QColorPicker
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
name|pWidth
operator|+
literal|2
operator|*
name|frameWidth
argument_list|()
argument_list|,
name|pHeight
operator|+
literal|2
operator|*
name|frameWidth
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setCol
name|void
name|QColorPicker
operator|::
name|setCol
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|)
block|{
name|int
name|nhue
init|=
name|qMin
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|h
argument_list|)
argument_list|,
literal|359
argument_list|)
decl_stmt|;
name|int
name|nsat
init|=
name|qMin
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
argument_list|,
literal|255
argument_list|)
decl_stmt|;
if|if
condition|(
name|nhue
operator|==
name|hue
operator|&&
name|nsat
operator|==
name|sat
condition|)
return|return;
name|QRect
name|r
argument_list|(
name|colPt
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|hue
operator|=
name|nhue
expr_stmt|;
name|sat
operator|=
name|nsat
expr_stmt|;
name|r
operator|=
name|r
operator|.
name|united
argument_list|(
name|QRect
argument_list|(
name|colPt
argument_list|()
argument_list|,
name|QSize
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|translate
argument_list|(
name|contentsRect
argument_list|()
operator|.
name|x
argument_list|()
operator|-
literal|9
argument_list|,
name|contentsRect
argument_list|()
operator|.
name|y
argument_list|()
operator|-
literal|9
argument_list|)
expr_stmt|;
comment|//    update(r);
name|repaint
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|QColorPicker
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|m
parameter_list|)
block|{
name|QPoint
name|p
init|=
name|m
operator|->
name|pos
argument_list|()
operator|-
name|contentsRect
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|setCol
argument_list|(
name|p
argument_list|)
expr_stmt|;
emit|emit
name|newCol
argument_list|(
name|hue
argument_list|,
name|sat
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QColorPicker
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|m
parameter_list|)
block|{
name|QPoint
name|p
init|=
name|m
operator|->
name|pos
argument_list|()
operator|-
name|contentsRect
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|setCol
argument_list|(
name|p
argument_list|)
expr_stmt|;
emit|emit
name|newCol
argument_list|(
name|hue
argument_list|,
name|sat
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QColorPicker
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|drawFrame
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|contentsRect
argument_list|()
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|r
operator|.
name|topLeft
argument_list|()
argument_list|,
name|pix
argument_list|)
expr_stmt|;
name|QPoint
name|pt
init|=
name|colPt
argument_list|()
operator|+
name|r
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|pt
operator|.
name|x
argument_list|()
operator|-
literal|9
argument_list|,
name|pt
operator|.
name|y
argument_list|()
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|pt
operator|.
name|x
argument_list|()
argument_list|,
name|pt
operator|.
name|y
argument_list|()
operator|-
literal|9
argument_list|,
literal|2
argument_list|,
literal|20
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QColorPicker
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|ev
parameter_list|)
block|{
name|QFrame
operator|::
name|resizeEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|width
argument_list|()
operator|-
name|frameWidth
argument_list|()
operator|*
literal|2
decl_stmt|;
name|int
name|h
init|=
name|height
argument_list|()
operator|-
name|frameWidth
argument_list|()
operator|*
literal|2
decl_stmt|;
name|QImage
name|img
argument_list|(
name|w
argument_list|,
name|h
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
name|uint
modifier|*
name|pixel
init|=
operator|(
name|uint
operator|*
operator|)
name|img
operator|.
name|scanLine
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|y
operator|=
literal|0
init|;
name|y
operator|<
name|h
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint
modifier|*
name|end
init|=
name|pixel
operator|+
name|w
decl_stmt|;
name|x
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|pixel
operator|<
name|end
condition|)
block|{
name|QPoint
name|p
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
name|QColor
name|c
decl_stmt|;
name|c
operator|.
name|setHsv
argument_list|(
name|huePt
argument_list|(
name|p
argument_list|)
argument_list|,
name|satPt
argument_list|(
name|p
argument_list|)
argument_list|,
literal|200
argument_list|)
expr_stmt|;
operator|*
name|pixel
operator|=
name|c
operator|.
name|rgb
argument_list|()
expr_stmt|;
operator|++
name|pixel
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
block|}
name|pix
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QColSpinBox
class|class
name|QColSpinBox
super|:
specifier|public
name|QSpinBox
block|{
public|public:
DECL|function|QColSpinBox
name|QColSpinBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSpinBox
argument_list|(
name|parent
argument_list|)
block|{
name|setRange
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|)
expr_stmt|;
block|}
DECL|function|setValue
name|void
name|setValue
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|bool
name|block
init|=
name|signalsBlocked
argument_list|()
decl_stmt|;
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QSpinBox
operator|::
name|setValue
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|blockSignals
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class_decl
class_decl|class
name|QColorShowLabel
class_decl|;
end_class_decl
begin_class
DECL|class|QColorShower
class|class
name|QColorShower
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
name|QColorShower
parameter_list|(
name|QColorDialog
modifier|*
name|parent
parameter_list|)
constructor_decl|;
comment|//things that don't emit signals
name|void
name|setHsv
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|v
parameter_list|)
function_decl|;
DECL|function|currentAlpha
name|int
name|currentAlpha
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|colorDialog
operator|->
name|options
argument_list|()
operator|&
name|QColorDialog
operator|::
name|ShowAlphaChannel
operator|)
condition|?
name|alphaEd
operator|->
name|value
argument_list|()
else|:
literal|255
return|;
block|}
DECL|function|setCurrentAlpha
name|void
name|setCurrentAlpha
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|alphaEd
operator|->
name|setValue
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|rgbEd
argument_list|()
expr_stmt|;
block|}
name|void
name|showAlpha
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
name|bool
name|isAlphaVisible
parameter_list|()
specifier|const
function_decl|;
DECL|function|currentColor
name|QRgb
name|currentColor
parameter_list|()
specifier|const
block|{
return|return
name|curCol
return|;
block|}
DECL|function|currentQColor
name|QColor
name|currentQColor
parameter_list|()
specifier|const
block|{
return|return
name|curQColor
return|;
block|}
name|void
name|retranslateStrings
parameter_list|()
function_decl|;
name|void
name|updateQColor
parameter_list|()
function_decl|;
public|public
name|slots
public|:
name|void
name|setRgb
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
function_decl|;
signals|signals:
name|void
name|newCol
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
function_decl|;
name|void
name|currentColorChanged
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
function_decl|;
private|private
name|slots
private|:
name|void
name|rgbEd
parameter_list|()
function_decl|;
name|void
name|hsvEd
parameter_list|()
function_decl|;
private|private:
name|void
name|showCurrentColor
parameter_list|()
function_decl|;
DECL|member|hue
DECL|member|sat
DECL|member|val
name|int
name|hue
decl_stmt|,
name|sat
decl_stmt|,
name|val
decl_stmt|;
DECL|member|curCol
name|QRgb
name|curCol
decl_stmt|;
DECL|member|curQColor
name|QColor
name|curQColor
decl_stmt|;
DECL|member|lblHue
name|QLabel
modifier|*
name|lblHue
decl_stmt|;
DECL|member|lblSat
name|QLabel
modifier|*
name|lblSat
decl_stmt|;
DECL|member|lblVal
name|QLabel
modifier|*
name|lblVal
decl_stmt|;
DECL|member|lblRed
name|QLabel
modifier|*
name|lblRed
decl_stmt|;
DECL|member|lblGreen
name|QLabel
modifier|*
name|lblGreen
decl_stmt|;
DECL|member|lblBlue
name|QLabel
modifier|*
name|lblBlue
decl_stmt|;
DECL|member|hEd
name|QColSpinBox
modifier|*
name|hEd
decl_stmt|;
DECL|member|sEd
name|QColSpinBox
modifier|*
name|sEd
decl_stmt|;
DECL|member|vEd
name|QColSpinBox
modifier|*
name|vEd
decl_stmt|;
DECL|member|rEd
name|QColSpinBox
modifier|*
name|rEd
decl_stmt|;
DECL|member|gEd
name|QColSpinBox
modifier|*
name|gEd
decl_stmt|;
DECL|member|bEd
name|QColSpinBox
modifier|*
name|bEd
decl_stmt|;
DECL|member|alphaEd
name|QColSpinBox
modifier|*
name|alphaEd
decl_stmt|;
DECL|member|alphaLab
name|QLabel
modifier|*
name|alphaLab
decl_stmt|;
DECL|member|lab
name|QColorShowLabel
modifier|*
name|lab
decl_stmt|;
DECL|member|rgbOriginal
name|bool
name|rgbOriginal
decl_stmt|;
DECL|member|colorDialog
name|QColorDialog
modifier|*
name|colorDialog
decl_stmt|;
friend|friend
class_decl|class
name|QColorDialog
class_decl|;
friend|friend
class_decl|class
name|QColorDialogPrivate
class_decl|;
block|}
class|;
end_class
begin_class
DECL|class|QColorShowLabel
class|class
name|QColorShowLabel
super|:
specifier|public
name|QFrame
block|{
name|Q_OBJECT
public|public:
DECL|function|QColorShowLabel
name|QColorShowLabel
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QFrame
argument_list|(
name|parent
argument_list|)
block|{
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|Panel
operator||
name|QFrame
operator|::
name|Sunken
argument_list|)
expr_stmt|;
name|setAcceptDrops
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mousePressed
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|setColor
name|void
name|setColor
parameter_list|(
name|QColor
name|c
parameter_list|)
block|{
name|col
operator|=
name|c
expr_stmt|;
block|}
signals|signals:
name|void
name|colorDropped
parameter_list|(
name|QRgb
parameter_list|)
function_decl|;
protected|protected:
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|void
name|dragEnterEvent
parameter_list|(
name|QDragEnterEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|dragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|dropEvent
parameter_list|(
name|QDropEvent
modifier|*
name|e
parameter_list|)
function_decl|;
endif|#
directive|endif
private|private:
DECL|member|col
name|QColor
name|col
decl_stmt|;
DECL|member|mousePressed
name|bool
name|mousePressed
decl_stmt|;
DECL|member|pressPos
name|QPoint
name|pressPos
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|paintEvent
name|void
name|QColorShowLabel
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|drawFrame
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|contentsRect
argument_list|()
operator|&
name|e
operator|->
name|rect
argument_list|()
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showAlpha
name|void
name|QColorShower
operator|::
name|showAlpha
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|alphaLab
operator|->
name|setVisible
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|alphaEd
operator|->
name|setVisible
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isAlphaVisible
specifier|inline
name|bool
name|QColorShower
operator|::
name|isAlphaVisible
parameter_list|()
specifier|const
block|{
return|return
name|alphaLab
operator|->
name|isVisible
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QColorShowLabel
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|mousePressed
operator|=
literal|true
expr_stmt|;
name|pressPos
operator|=
name|e
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|QColorShowLabel
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DRAGANDDROP
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
operator|!
name|mousePressed
condition|)
return|return;
if|if
condition|(
operator|(
name|pressPos
operator|-
name|e
operator|->
name|pos
argument_list|()
operator|)
operator|.
name|manhattanLength
argument_list|()
operator|>
name|QApplication
operator|::
name|startDragDistance
argument_list|()
condition|)
block|{
name|QMimeData
modifier|*
name|mime
init|=
operator|new
name|QMimeData
decl_stmt|;
name|mime
operator|->
name|setColorData
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|QPixmap
name|pix
argument_list|(
literal|30
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|pix
operator|.
name|fill
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|pix
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pix
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|pix
operator|.
name|height
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QDrag
modifier|*
name|drg
init|=
operator|new
name|QDrag
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|drg
operator|->
name|setMimeData
argument_list|(
name|mime
argument_list|)
expr_stmt|;
name|drg
operator|->
name|setPixmap
argument_list|(
name|pix
argument_list|)
expr_stmt|;
name|mousePressed
operator|=
literal|false
expr_stmt|;
name|drg
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_function
DECL|function|dragEnterEvent
name|void
name|QColorShowLabel
operator|::
name|dragEnterEvent
parameter_list|(
name|QDragEnterEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|e
operator|->
name|mimeData
argument_list|()
operator|->
name|colorData
argument_list|()
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
else|else
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dragLeaveEvent
name|void
name|QColorShowLabel
operator|::
name|dragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|dropEvent
name|void
name|QColorShowLabel
operator|::
name|dropEvent
parameter_list|(
name|QDropEvent
modifier|*
name|e
parameter_list|)
block|{
name|QColor
name|color
init|=
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|e
operator|->
name|mimeData
argument_list|()
operator|->
name|colorData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|color
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|col
operator|=
name|color
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
emit|emit
name|colorDropped
argument_list|(
name|col
operator|.
name|rgb
argument_list|()
argument_list|)
emit|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QColorShowLabel
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mousePressed
condition|)
return|return;
name|mousePressed
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QColorShower
name|QColorShower
operator|::
name|QColorShower
parameter_list|(
name|QColorDialog
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|colorDialog
operator|=
name|parent
expr_stmt|;
name|curCol
operator|=
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|curQColor
operator|=
name|Qt
operator|::
name|white
expr_stmt|;
name|QGridLayout
modifier|*
name|gl
init|=
operator|new
name|QGridLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|gl
operator|->
name|setMargin
argument_list|(
name|gl
operator|->
name|spacing
argument_list|()
argument_list|)
expr_stmt|;
name|lab
operator|=
operator|new
name|QColorShowLabel
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
ifdef|#
directive|ifdef
name|QT_SMALL_COLORDIALOG
name|lab
operator|->
name|setMinimumHeight
argument_list|(
literal|60
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|lab
operator|->
name|setMinimumWidth
argument_list|(
literal|60
argument_list|)
expr_stmt|;
else|#
directive|else
name|lab
operator|->
name|setMinimumWidth
argument_list|(
literal|20
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// For QVGA screens only the comboboxes and color label are visible.
comment|// For nHD screens only color and luminence pickers and color label are visible.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
name|gl
operator|->
name|addWidget
argument_list|(
name|lab
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|nonTouchUI
condition|)
name|gl
operator|->
name|addWidget
argument_list|(
name|lab
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
else|else
name|gl
operator|->
name|addWidget
argument_list|(
name|lab
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|lab
argument_list|,
name|SIGNAL
argument_list|(
name|colorDropped
argument_list|(
name|QRgb
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newCol
argument_list|(
name|QRgb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|lab
argument_list|,
name|SIGNAL
argument_list|(
name|colorDropped
argument_list|(
name|QRgb
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setRgb
argument_list|(
name|QRgb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hEd
operator|=
operator|new
name|QColSpinBox
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|hEd
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|359
argument_list|)
expr_stmt|;
name|lblHue
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|lblHue
operator|->
name|setBuddy
argument_list|(
name|hEd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|lblHue
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
name|gl
operator|->
name|addWidget
argument_list|(
name|lblHue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|hEd
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|nonTouchUI
condition|)
block|{
name|gl
operator|->
name|addWidget
argument_list|(
name|lblHue
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|hEd
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lblHue
operator|->
name|hide
argument_list|()
expr_stmt|;
name|hEd
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|sEd
operator|=
operator|new
name|QColSpinBox
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lblSat
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|lblSat
operator|->
name|setBuddy
argument_list|(
name|sEd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|lblSat
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
name|gl
operator|->
name|addWidget
argument_list|(
name|lblSat
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|sEd
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|nonTouchUI
condition|)
block|{
name|gl
operator|->
name|addWidget
argument_list|(
name|lblSat
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|sEd
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lblSat
operator|->
name|hide
argument_list|()
expr_stmt|;
name|sEd
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|vEd
operator|=
operator|new
name|QColSpinBox
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lblVal
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|lblVal
operator|->
name|setBuddy
argument_list|(
name|vEd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|lblVal
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
name|gl
operator|->
name|addWidget
argument_list|(
name|lblVal
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|vEd
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|nonTouchUI
condition|)
block|{
name|gl
operator|->
name|addWidget
argument_list|(
name|lblVal
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|vEd
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lblVal
operator|->
name|hide
argument_list|()
expr_stmt|;
name|vEd
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|rEd
operator|=
operator|new
name|QColSpinBox
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lblRed
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|lblRed
operator|->
name|setBuddy
argument_list|(
name|rEd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|lblRed
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
name|gl
operator|->
name|addWidget
argument_list|(
name|lblRed
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|rEd
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|nonTouchUI
condition|)
block|{
name|gl
operator|->
name|addWidget
argument_list|(
name|lblRed
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|rEd
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lblRed
operator|->
name|hide
argument_list|()
expr_stmt|;
name|rEd
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|gEd
operator|=
operator|new
name|QColSpinBox
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lblGreen
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|lblGreen
operator|->
name|setBuddy
argument_list|(
name|gEd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|lblGreen
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
name|gl
operator|->
name|addWidget
argument_list|(
name|lblGreen
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|gEd
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|nonTouchUI
condition|)
block|{
name|gl
operator|->
name|addWidget
argument_list|(
name|lblGreen
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|gEd
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lblGreen
operator|->
name|hide
argument_list|()
expr_stmt|;
name|gEd
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|bEd
operator|=
operator|new
name|QColSpinBox
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lblBlue
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|lblBlue
operator|->
name|setBuddy
argument_list|(
name|bEd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|lblBlue
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
name|gl
operator|->
name|addWidget
argument_list|(
name|lblBlue
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|bEd
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|nonTouchUI
condition|)
block|{
name|gl
operator|->
name|addWidget
argument_list|(
name|lblBlue
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|bEd
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lblBlue
operator|->
name|hide
argument_list|()
expr_stmt|;
name|bEd
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|alphaEd
operator|=
operator|new
name|QColSpinBox
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|alphaLab
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|alphaLab
operator|->
name|setBuddy
argument_list|(
name|alphaEd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|alphaLab
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignVCenter
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
name|gl
operator|->
name|addWidget
argument_list|(
name|alphaLab
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|alphaEd
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|nonTouchUI
condition|)
block|{
name|gl
operator|->
name|addWidget
argument_list|(
name|alphaLab
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gl
operator|->
name|addWidget
argument_list|(
name|alphaEd
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|alphaLab
operator|->
name|hide
argument_list|()
expr_stmt|;
name|alphaEd
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|alphaEd
operator|->
name|hide
argument_list|()
expr_stmt|;
name|alphaLab
operator|->
name|hide
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|hEd
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|hsvEd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|sEd
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|hsvEd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|vEd
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|hsvEd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rEd
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rgbEd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|gEd
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rgbEd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|bEd
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rgbEd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|alphaEd
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|rgbEd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|retranslateStrings
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|currentColor
specifier|inline
name|QRgb
name|QColorDialogPrivate
operator|::
name|currentColor
parameter_list|()
specifier|const
block|{
return|return
name|cs
operator|->
name|currentColor
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|currentAlpha
specifier|inline
name|int
name|QColorDialogPrivate
operator|::
name|currentAlpha
parameter_list|()
specifier|const
block|{
return|return
name|cs
operator|->
name|currentAlpha
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setCurrentAlpha
specifier|inline
name|void
name|QColorDialogPrivate
operator|::
name|setCurrentAlpha
parameter_list|(
name|int
name|a
parameter_list|)
block|{
name|cs
operator|->
name|setCurrentAlpha
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showAlpha
specifier|inline
name|void
name|QColorDialogPrivate
operator|::
name|showAlpha
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|cs
operator|->
name|showAlpha
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isAlphaVisible
specifier|inline
name|bool
name|QColorDialogPrivate
operator|::
name|isAlphaVisible
parameter_list|()
specifier|const
block|{
return|return
name|cs
operator|->
name|isAlphaVisible
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|currentQColor
name|QColor
name|QColorDialogPrivate
operator|::
name|currentQColor
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|options
operator|->
name|testOption
argument_list|(
name|QColorDialogOptions
operator|::
name|DontUseNativeDialog
argument_list|)
operator|&&
name|nativeDialogInUse
condition|)
return|return
name|platformColorDialogHelper
argument_list|()
operator|->
name|currentColor
argument_list|()
return|;
return|return
name|cs
operator|->
name|currentQColor
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|showCurrentColor
name|void
name|QColorShower
operator|::
name|showCurrentColor
parameter_list|()
block|{
name|lab
operator|->
name|setColor
argument_list|(
name|currentColor
argument_list|()
argument_list|)
expr_stmt|;
name|lab
operator|->
name|repaint
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rgbEd
name|void
name|QColorShower
operator|::
name|rgbEd
parameter_list|()
block|{
name|rgbOriginal
operator|=
literal|true
expr_stmt|;
name|curCol
operator|=
name|qRgba
argument_list|(
name|rEd
operator|->
name|value
argument_list|()
argument_list|,
name|gEd
operator|->
name|value
argument_list|()
argument_list|,
name|bEd
operator|->
name|value
argument_list|()
argument_list|,
name|currentAlpha
argument_list|()
argument_list|)
expr_stmt|;
name|rgb2hsv
argument_list|(
name|currentColor
argument_list|()
argument_list|,
name|hue
argument_list|,
name|sat
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|hEd
operator|->
name|setValue
argument_list|(
name|hue
argument_list|)
expr_stmt|;
name|sEd
operator|->
name|setValue
argument_list|(
name|sat
argument_list|)
expr_stmt|;
name|vEd
operator|->
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|showCurrentColor
argument_list|()
expr_stmt|;
emit|emit
name|newCol
argument_list|(
name|currentColor
argument_list|()
argument_list|)
emit|;
name|updateQColor
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hsvEd
name|void
name|QColorShower
operator|::
name|hsvEd
parameter_list|()
block|{
name|rgbOriginal
operator|=
literal|false
expr_stmt|;
name|hue
operator|=
name|hEd
operator|->
name|value
argument_list|()
expr_stmt|;
name|sat
operator|=
name|sEd
operator|->
name|value
argument_list|()
expr_stmt|;
name|val
operator|=
name|vEd
operator|->
name|value
argument_list|()
expr_stmt|;
name|QColor
name|c
decl_stmt|;
name|c
operator|.
name|setHsv
argument_list|(
name|hue
argument_list|,
name|sat
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|curCol
operator|=
name|c
operator|.
name|rgb
argument_list|()
expr_stmt|;
name|rEd
operator|->
name|setValue
argument_list|(
name|qRed
argument_list|(
name|currentColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|gEd
operator|->
name|setValue
argument_list|(
name|qGreen
argument_list|(
name|currentColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bEd
operator|->
name|setValue
argument_list|(
name|qBlue
argument_list|(
name|currentColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|showCurrentColor
argument_list|()
expr_stmt|;
emit|emit
name|newCol
argument_list|(
name|currentColor
argument_list|()
argument_list|)
emit|;
name|updateQColor
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setRgb
name|void
name|QColorShower
operator|::
name|setRgb
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
block|{
name|rgbOriginal
operator|=
literal|true
expr_stmt|;
name|curCol
operator|=
name|rgb
expr_stmt|;
name|rgb2hsv
argument_list|(
name|currentColor
argument_list|()
argument_list|,
name|hue
argument_list|,
name|sat
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|hEd
operator|->
name|setValue
argument_list|(
name|hue
argument_list|)
expr_stmt|;
name|sEd
operator|->
name|setValue
argument_list|(
name|sat
argument_list|)
expr_stmt|;
name|vEd
operator|->
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|rEd
operator|->
name|setValue
argument_list|(
name|qRed
argument_list|(
name|currentColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|gEd
operator|->
name|setValue
argument_list|(
name|qGreen
argument_list|(
name|currentColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bEd
operator|->
name|setValue
argument_list|(
name|qBlue
argument_list|(
name|currentColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|showCurrentColor
argument_list|()
expr_stmt|;
name|updateQColor
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setHsv
name|void
name|QColorShower
operator|::
name|setHsv
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|v
parameter_list|)
block|{
if|if
condition|(
name|h
argument_list|<
operator|-
literal|1
operator|||
operator|(
name|uint
operator|)
name|s
argument_list|>
literal|255
operator|||
operator|(
name|uint
operator|)
name|v
operator|>
literal|255
condition|)
return|return;
name|rgbOriginal
operator|=
literal|false
expr_stmt|;
name|hue
operator|=
name|h
expr_stmt|;
name|val
operator|=
name|v
expr_stmt|;
name|sat
operator|=
name|s
expr_stmt|;
name|QColor
name|c
decl_stmt|;
name|c
operator|.
name|setHsv
argument_list|(
name|hue
argument_list|,
name|sat
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|curCol
operator|=
name|c
operator|.
name|rgb
argument_list|()
expr_stmt|;
name|hEd
operator|->
name|setValue
argument_list|(
name|hue
argument_list|)
expr_stmt|;
name|sEd
operator|->
name|setValue
argument_list|(
name|sat
argument_list|)
expr_stmt|;
name|vEd
operator|->
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|rEd
operator|->
name|setValue
argument_list|(
name|qRed
argument_list|(
name|currentColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|gEd
operator|->
name|setValue
argument_list|(
name|qGreen
argument_list|(
name|currentColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bEd
operator|->
name|setValue
argument_list|(
name|qBlue
argument_list|(
name|currentColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|showCurrentColor
argument_list|()
expr_stmt|;
name|updateQColor
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|retranslateStrings
name|void
name|QColorShower
operator|::
name|retranslateStrings
parameter_list|()
block|{
name|lblHue
operator|->
name|setText
argument_list|(
name|QColorDialog
operator|::
name|tr
argument_list|(
literal|"Hu&e:"
argument_list|)
argument_list|)
expr_stmt|;
name|lblSat
operator|->
name|setText
argument_list|(
name|QColorDialog
operator|::
name|tr
argument_list|(
literal|"&Sat:"
argument_list|)
argument_list|)
expr_stmt|;
name|lblVal
operator|->
name|setText
argument_list|(
name|QColorDialog
operator|::
name|tr
argument_list|(
literal|"&Val:"
argument_list|)
argument_list|)
expr_stmt|;
name|lblRed
operator|->
name|setText
argument_list|(
name|QColorDialog
operator|::
name|tr
argument_list|(
literal|"&Red:"
argument_list|)
argument_list|)
expr_stmt|;
name|lblGreen
operator|->
name|setText
argument_list|(
name|QColorDialog
operator|::
name|tr
argument_list|(
literal|"&Green:"
argument_list|)
argument_list|)
expr_stmt|;
name|lblBlue
operator|->
name|setText
argument_list|(
name|QColorDialog
operator|::
name|tr
argument_list|(
literal|"Bl&ue:"
argument_list|)
argument_list|)
expr_stmt|;
name|alphaLab
operator|->
name|setText
argument_list|(
name|QColorDialog
operator|::
name|tr
argument_list|(
literal|"A&lpha channel:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateQColor
name|void
name|QColorShower
operator|::
name|updateQColor
parameter_list|()
block|{
name|QColor
name|oldQColor
argument_list|(
name|curQColor
argument_list|)
decl_stmt|;
name|curQColor
operator|.
name|setRgba
argument_list|(
name|qRgba
argument_list|(
name|qRed
argument_list|(
name|curCol
argument_list|)
argument_list|,
name|qGreen
argument_list|(
name|curCol
argument_list|)
argument_list|,
name|qBlue
argument_list|(
name|curCol
argument_list|)
argument_list|,
name|currentAlpha
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|curQColor
operator|!=
name|oldQColor
condition|)
emit|emit
name|currentColorChanged
argument_list|(
name|curQColor
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|//sets all widgets to display h,s,v
end_comment
begin_function
DECL|function|_q_newHsv
name|void
name|QColorDialogPrivate
operator|::
name|_q_newHsv
parameter_list|(
name|int
name|h
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|v
parameter_list|)
block|{
name|cs
operator|->
name|setHsv
argument_list|(
name|h
argument_list|,
name|s
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|cp
operator|->
name|setCol
argument_list|(
name|h
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|lp
operator|->
name|setCol
argument_list|(
name|h
argument_list|,
name|s
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//sets all widgets to display rgb
end_comment
begin_function
DECL|function|setCurrentColor
name|void
name|QColorDialogPrivate
operator|::
name|setCurrentColor
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
block|{
name|cs
operator|->
name|setRgb
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
name|_q_newColorTypedIn
argument_list|(
name|rgb
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// hack; doesn't keep curCol in sync, so use with care
end_comment
begin_function
DECL|function|setCurrentQColor
name|void
name|QColorDialogPrivate
operator|::
name|setCurrentQColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|->
name|curQColor
operator|!=
name|color
condition|)
block|{
name|cs
operator|->
name|curQColor
operator|=
name|color
expr_stmt|;
emit|emit
name|q
operator|->
name|currentColorChanged
argument_list|(
name|color
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|selectColor
name|bool
name|QColorDialogPrivate
operator|::
name|selectColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|col
parameter_list|)
block|{
name|QRgb
name|color
init|=
name|col
operator|.
name|rgb
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|j
init|=
literal|0
decl_stmt|;
comment|// Check standard colors
if|if
condition|(
name|standard
condition|)
block|{
specifier|const
name|QRgb
modifier|*
name|standardColors
init|=
name|QColorDialogOptions
operator|::
name|standardColors
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
literal|8
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|color
operator|==
name|standardColors
index|[
name|i
operator|+
name|j
operator|*
literal|6
index|]
condition|)
block|{
name|_q_newStandard
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|standard
operator|->
name|setCurrent
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|standard
operator|->
name|setSelected
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|standard
operator|->
name|setFocus
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
comment|// Check custom colors
if|if
condition|(
name|custom
condition|)
block|{
specifier|const
name|QRgb
modifier|*
name|customColors
init|=
name|QColorDialogOptions
operator|::
name|customColors
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
literal|8
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|color
operator|==
name|customColors
index|[
name|i
operator|+
name|j
operator|*
literal|2
index|]
condition|)
block|{
name|_q_newCustom
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|custom
operator|->
name|setCurrent
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|custom
operator|->
name|setSelected
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|custom
operator|->
name|setFocus
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//sets all widgets except cs to display rgb
end_comment
begin_function
DECL|function|_q_newColorTypedIn
name|void
name|QColorDialogPrivate
operator|::
name|_q_newColorTypedIn
parameter_list|(
name|QRgb
name|rgb
parameter_list|)
block|{
name|int
name|h
decl_stmt|,
name|s
decl_stmt|,
name|v
decl_stmt|;
name|rgb2hsv
argument_list|(
name|rgb
argument_list|,
name|h
argument_list|,
name|s
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|cp
operator|->
name|setCol
argument_list|(
name|h
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|lp
operator|->
name|setCol
argument_list|(
name|h
argument_list|,
name|s
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_newCustom
name|void
name|QColorDialogPrivate
operator|::
name|_q_newCustom
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|)
block|{
specifier|const
name|int
name|i
init|=
name|r
operator|+
literal|2
operator|*
name|c
decl_stmt|;
name|setCurrentColor
argument_list|(
name|QColorDialogOptions
operator|::
name|customColor
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|nextCust
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|standard
condition|)
name|standard
operator|->
name|setSelected
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_newStandard
name|void
name|QColorDialogPrivate
operator|::
name|_q_newStandard
parameter_list|(
name|int
name|r
parameter_list|,
name|int
name|c
parameter_list|)
block|{
name|setCurrentColor
argument_list|(
name|QColorDialogOptions
operator|::
name|standardColor
argument_list|(
name|r
operator|+
name|c
operator|*
literal|6
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|custom
condition|)
name|custom
operator|->
name|setSelected
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|QColorDialogPrivate
operator|::
name|init
parameter_list|(
specifier|const
name|QColor
modifier|&
name|initial
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSizeGripEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setWindowTitle
argument_list|(
name|QColorDialog
operator|::
name|tr
argument_list|(
literal|"Select Color"
argument_list|)
argument_list|)
expr_stmt|;
name|nativeDialogInUse
operator|=
operator|(
name|platformColorDialogHelper
argument_list|()
operator|!=
literal|0
operator|)
expr_stmt|;
name|nextCust
operator|=
literal|0
expr_stmt|;
name|QVBoxLayout
modifier|*
name|mainLay
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|q
argument_list|)
decl_stmt|;
comment|// there's nothing in this dialog that benefits from sizing up
name|mainLay
operator|->
name|setSizeConstraint
argument_list|(
name|QLayout
operator|::
name|SetFixedSize
argument_list|)
expr_stmt|;
name|QHBoxLayout
modifier|*
name|topLay
init|=
operator|new
name|QHBoxLayout
argument_list|()
decl_stmt|;
name|mainLay
operator|->
name|addLayout
argument_list|(
name|topLay
argument_list|)
expr_stmt|;
name|leftLay
operator|=
literal|0
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
name|smallDisplay
operator|=
literal|true
expr_stmt|;
specifier|const
name|int
name|lumSpace
init|=
literal|20
decl_stmt|;
else|#
directive|else
comment|// small displays (e.g. PDAs) cannot fit the full color dialog,
comment|// so just use the color picker.
name|smallDisplay
operator|=
operator|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|width
argument_list|()
operator|<
literal|480
operator|||
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|height
argument_list|()
operator|<
literal|350
operator|)
expr_stmt|;
specifier|const
name|int
name|lumSpace
init|=
name|topLay
operator|->
name|spacing
argument_list|()
operator|/
literal|2
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|smallDisplay
condition|)
block|{
name|leftLay
operator|=
operator|new
name|QVBoxLayout
expr_stmt|;
name|topLay
operator|->
name|addLayout
argument_list|(
name|leftLay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|smallDisplay
condition|)
block|{
name|standard
operator|=
operator|new
name|QColorWell
argument_list|(
name|q
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
name|QColorDialogOptions
operator|::
name|standardColors
argument_list|()
argument_list|)
expr_stmt|;
name|lblBasicColors
operator|=
operator|new
name|QLabel
argument_list|(
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|lblBasicColors
operator|->
name|setBuddy
argument_list|(
name|standard
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|q
operator|->
name|connect
argument_list|(
name|standard
argument_list|,
name|SIGNAL
argument_list|(
name|selected
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_newStandard
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|leftLay
operator|->
name|addWidget
argument_list|(
name|lblBasicColors
argument_list|)
expr_stmt|;
name|leftLay
operator|->
name|addWidget
argument_list|(
name|standard
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|leftLay
operator|->
name|addStretch
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|custom
operator|=
operator|new
name|QColorWell
argument_list|(
name|q
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|,
name|QColorDialogOptions
operator|::
name|customColors
argument_list|()
argument_list|)
expr_stmt|;
name|custom
operator|->
name|setAcceptDrops
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|custom
argument_list|,
name|SIGNAL
argument_list|(
name|selected
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_newCustom
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|lblCustomColors
operator|=
operator|new
name|QLabel
argument_list|(
name|q
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|lblCustomColors
operator|->
name|setBuddy
argument_list|(
name|custom
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|leftLay
operator|->
name|addWidget
argument_list|(
name|lblCustomColors
argument_list|)
expr_stmt|;
name|leftLay
operator|->
name|addWidget
argument_list|(
name|custom
argument_list|)
expr_stmt|;
name|addCusBt
operator|=
operator|new
name|QPushButton
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|addCusBt
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_addCustom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|leftLay
operator|->
name|addWidget
argument_list|(
name|addCusBt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// better color picker size for small displays
if|#
directive|if
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
name|QSize
name|screenSize
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|pWidth
operator|=
name|pHeight
operator|=
name|qMin
argument_list|(
name|screenSize
operator|.
name|width
argument_list|()
argument_list|,
name|screenSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|pHeight
operator|-=
literal|20
expr_stmt|;
if|if
condition|(
name|screenSize
operator|.
name|height
argument_list|()
operator|>
name|screenSize
operator|.
name|width
argument_list|()
condition|)
name|pWidth
operator|-=
literal|20
expr_stmt|;
else|#
directive|else
name|pWidth
operator|=
literal|150
expr_stmt|;
name|pHeight
operator|=
literal|100
expr_stmt|;
endif|#
directive|endif
name|custom
operator|=
literal|0
expr_stmt|;
name|standard
operator|=
literal|0
expr_stmt|;
block|}
name|QVBoxLayout
modifier|*
name|rightLay
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|topLay
operator|->
name|addLayout
argument_list|(
name|rightLay
argument_list|)
expr_stmt|;
name|QHBoxLayout
modifier|*
name|pickLay
init|=
operator|new
name|QHBoxLayout
decl_stmt|;
name|rightLay
operator|->
name|addLayout
argument_list|(
name|pickLay
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|cLay
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|pickLay
operator|->
name|addLayout
argument_list|(
name|cLay
argument_list|)
expr_stmt|;
name|cp
operator|=
operator|new
name|QColorPicker
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|cp
operator|->
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|Panel
operator|+
name|QFrame
operator|::
name|Sunken
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
if|if
condition|(
operator|!
name|nonTouchUI
condition|)
block|{
name|pickLay
operator|->
name|addWidget
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|cLay
operator|->
name|addSpacing
argument_list|(
name|lumSpace
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cp
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
else|#
directive|else
name|cLay
operator|->
name|addSpacing
argument_list|(
name|lumSpace
argument_list|)
expr_stmt|;
name|cLay
operator|->
name|addWidget
argument_list|(
name|cp
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|cLay
operator|->
name|addSpacing
argument_list|(
name|lumSpace
argument_list|)
expr_stmt|;
name|lp
operator|=
operator|new
name|QColorLuminancePicker
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
name|QSize
name|screenSize
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|const
name|int
name|minDimension
init|=
name|qMin
argument_list|(
name|screenSize
operator|.
name|height
argument_list|()
argument_list|,
name|screenSize
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
comment|//set picker to be finger-usable
name|int
name|pickerWidth
init|=
operator|!
name|nonTouchUI
condition|?
name|minDimension
operator|/
literal|9
else|:
name|minDimension
operator|/
literal|12
decl_stmt|;
name|lp
operator|->
name|setFixedWidth
argument_list|(
name|pickerWidth
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nonTouchUI
condition|)
name|pickLay
operator|->
name|addWidget
argument_list|(
name|lp
argument_list|)
expr_stmt|;
else|else
name|lp
operator|->
name|hide
argument_list|()
expr_stmt|;
else|#
directive|else
name|lp
operator|->
name|setFixedWidth
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|pickLay
operator|->
name|addWidget
argument_list|(
name|lp
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QObject
operator|::
name|connect
argument_list|(
name|cp
argument_list|,
name|SIGNAL
argument_list|(
name|newCol
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|lp
argument_list|,
name|SLOT
argument_list|(
name|setCol
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|lp
argument_list|,
name|SIGNAL
argument_list|(
name|newHsv
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_newHsv
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rightLay
operator|->
name|addStretch
argument_list|()
expr_stmt|;
name|cs
operator|=
operator|new
name|QColorShower
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|cs
argument_list|,
name|SIGNAL
argument_list|(
name|newCol
argument_list|(
name|QRgb
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_newColorTypedIn
argument_list|(
name|QRgb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|cs
argument_list|,
name|SIGNAL
argument_list|(
name|currentColorChanged
argument_list|(
name|QColor
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|currentColorChanged
argument_list|(
name|QColor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_SMALL_COLORDIALOG
argument_list|)
if|if
condition|(
operator|!
name|nonTouchUI
condition|)
name|pWidth
operator|-=
name|cp
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
name|topLay
operator|->
name|addWidget
argument_list|(
name|cs
argument_list|)
expr_stmt|;
else|#
directive|else
name|rightLay
operator|->
name|addWidget
argument_list|(
name|cs
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|buttons
operator|=
operator|new
name|QDialogButtonBox
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|mainLay
operator|->
name|addWidget
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
name|ok
operator|=
name|buttons
operator|->
name|addButton
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|ok
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ok
operator|->
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cancel
operator|=
name|buttons
operator|->
name|addButton
argument_list|(
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|cancel
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|retranslateStrings
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|delegate
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|q
operator|->
name|setCurrentColor
argument_list|(
name|initial
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initHelper
name|void
name|QColorDialogPrivate
operator|::
name|initHelper
parameter_list|(
name|QPlatformDialogHelper
modifier|*
name|h
parameter_list|)
block|{
name|QColorDialog
modifier|*
name|d
init|=
name|q_func
argument_list|()
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|h
argument_list|,
name|SIGNAL
argument_list|(
name|currentColorChanged
argument_list|(
name|QColor
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|SIGNAL
argument_list|(
name|currentColorChanged
argument_list|(
name|QColor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|h
argument_list|,
name|SIGNAL
argument_list|(
name|colorSelected
argument_list|(
name|QColor
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|,
name|SIGNAL
argument_list|(
name|colorSelected
argument_list|(
name|QColor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QPlatformColorDialogHelper
operator|*
argument_list|>
argument_list|(
name|h
argument_list|)
operator|->
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|helperPrepareShow
name|void
name|QColorDialogPrivate
operator|::
name|helperPrepareShow
parameter_list|(
name|QPlatformDialogHelper
modifier|*
parameter_list|)
block|{
name|options
operator|->
name|setWindowTitle
argument_list|(
name|q_func
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_addCustom
name|void
name|QColorDialogPrivate
operator|::
name|_q_addCustom
parameter_list|()
block|{
name|QColorDialogOptions
operator|::
name|setCustomColor
argument_list|(
name|nextCust
argument_list|,
name|cs
operator|->
name|currentColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|custom
condition|)
name|custom
operator|->
name|update
argument_list|()
expr_stmt|;
name|nextCust
operator|=
operator|(
name|nextCust
operator|+
literal|1
operator|)
operator|%
literal|16
expr_stmt|;
block|}
end_function
begin_function
DECL|function|retranslateStrings
name|void
name|QColorDialogPrivate
operator|::
name|retranslateStrings
parameter_list|()
block|{
if|if
condition|(
operator|!
name|smallDisplay
condition|)
block|{
name|lblBasicColors
operator|->
name|setText
argument_list|(
name|QColorDialog
operator|::
name|tr
argument_list|(
literal|"&Basic colors"
argument_list|)
argument_list|)
expr_stmt|;
name|lblCustomColors
operator|->
name|setText
argument_list|(
name|QColorDialog
operator|::
name|tr
argument_list|(
literal|"&Custom colors"
argument_list|)
argument_list|)
expr_stmt|;
name|addCusBt
operator|->
name|setText
argument_list|(
name|QColorDialog
operator|::
name|tr
argument_list|(
literal|"&Add to Custom Colors"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cs
operator|->
name|retranslateStrings
argument_list|()
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|DefaultWindowFlags
specifier|static
specifier|const
name|Qt
operator|::
name|WindowFlags
name|DefaultWindowFlags
init|=
name|Qt
operator|::
name|Dialog
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*!     \class QColorDialog     \brief The QColorDialog class provides a dialog widget for specifying colors.      \ingroup standard-dialogs     \inmodule QtWidgets      The color dialog's function is to allow users to choose colors.     For example, you might use this in a drawing program to allow the     user to set the brush color.      The static functions provide modal color dialogs.     \omit     If you require a modeless dialog, use the QColorDialog constructor.     \endomit      The static getColor() function shows the dialog, and allows the user to     specify a color. This function can also be used to let users choose a     color with a level of transparency: pass the ShowAlphaChannel option as     an additional argument.      The user can store customCount() different custom colors. The     custom colors are shared by all color dialogs, and remembered     during the execution of the program. Use setCustomColor() to set     the custom colors, and use customColor() to get them.      The \l{dialogs/standarddialogs}{Standard Dialogs} example shows     how to use QColorDialog as well as other built-in Qt dialogs.      \image fusion-colordialog.png A color dialog in the Fusion widget style.      \sa QColor, QFileDialog, QFontDialog, {Standard Dialogs Example} */
end_comment
begin_comment
comment|/*!     \since 4.5      Constructs a color dialog with the given \a parent. */
end_comment
begin_constructor
DECL|function|QColorDialog
name|QColorDialog
operator|::
name|QColorDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|new
name|QColorDialogPrivate
argument_list|,
name|parent
argument_list|,
name|DefaultWindowFlags
argument_list|)
block|{
name|Q_D
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \since 4.5      Constructs a color dialog with the given \a parent and specified     \a initial color. */
end_comment
begin_constructor
DECL|function|QColorDialog
name|QColorDialog
operator|::
name|QColorDialog
parameter_list|(
specifier|const
name|QColor
modifier|&
name|initial
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
operator|*
operator|new
name|QColorDialogPrivate
argument_list|,
name|parent
argument_list|,
name|DefaultWindowFlags
argument_list|)
block|{
name|Q_D
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|initial
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \property QColorDialog::currentColor     \brief the currently selected color in the dialog */
end_comment
begin_function
DECL|function|setCurrentColor
name|void
name|QColorDialog
operator|::
name|setCurrentColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|setCurrentColor
argument_list|(
name|color
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|selectColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|d
operator|->
name|setCurrentAlpha
argument_list|(
name|color
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|testOption
argument_list|(
name|QColorDialog
operator|::
name|DontUseNativeDialog
argument_list|)
operator|&&
name|d
operator|->
name|nativeDialogInUse
condition|)
name|d
operator|->
name|platformColorDialogHelper
argument_list|()
operator|->
name|setCurrentColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentColor
name|QColor
name|QColorDialog
operator|::
name|currentColor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QColorDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|currentQColor
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the color that the user selected by clicking the \uicontrol{OK}     or equivalent button.      \note This color is not always the same as the color held by the     \l currentColor property since the user can choose different colors     before finally selecting the one to use. */
end_comment
begin_function
DECL|function|selectedColor
name|QColor
name|QColorDialog
operator|::
name|selectedColor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QColorDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|selectedQColor
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the given \a option to be enabled if \a on is true;     otherwise, clears the given \a option.      \sa options, testOption() */
end_comment
begin_function
DECL|function|setOption
name|void
name|QColorDialog
operator|::
name|setOption
parameter_list|(
name|ColorDialogOption
name|option
parameter_list|,
name|bool
name|on
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
name|d
operator|->
name|options
operator|->
name|setOption
argument_list|(
cast|static_cast
argument_list|<
name|QColorDialogOptions
operator|::
name|ColorDialogOption
argument_list|>
argument_list|(
name|option
argument_list|)
argument_list|,
name|on
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.5      Returns true if the given \a option is enabled; otherwise, returns     false.      \sa options, setOption() */
end_comment
begin_function
DECL|function|testOption
name|bool
name|QColorDialog
operator|::
name|testOption
parameter_list|(
name|ColorDialogOption
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QColorDialog
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|options
operator|->
name|testOption
argument_list|(
cast|static_cast
argument_list|<
name|QColorDialogOptions
operator|::
name|ColorDialogOption
argument_list|>
argument_list|(
name|option
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QColorDialog::options     \brief the various options that affect the look and feel of the dialog      By default, all options are disabled.      Options should be set before showing the dialog. Setting them while the     dialog is visible is not guaranteed to have an immediate effect on the     dialog (depending on the option and on the platform).      \sa setOption(), testOption() */
end_comment
begin_function
DECL|function|setOptions
name|void
name|QColorDialog
operator|::
name|setOptions
parameter_list|(
name|ColorDialogOptions
name|options
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|QColorDialog
operator|::
name|options
argument_list|()
operator|==
name|options
condition|)
return|return;
name|d
operator|->
name|options
operator|->
name|setOptions
argument_list|(
name|QColorDialogOptions
operator|::
name|ColorDialogOptions
argument_list|(
name|int
argument_list|(
name|options
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttons
operator|->
name|setVisible
argument_list|(
operator|!
operator|(
name|options
operator|&
name|NoButtons
operator|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|showAlpha
argument_list|(
name|options
operator|&
name|ShowAlphaChannel
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|options
name|QColorDialog
operator|::
name|ColorDialogOptions
name|QColorDialog
operator|::
name|options
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QColorDialog
argument_list|)
expr_stmt|;
return|return
name|QColorDialog
operator|::
name|ColorDialogOptions
argument_list|(
name|int
argument_list|(
name|d
operator|->
name|options
operator|->
name|options
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \enum QColorDialog::ColorDialogOption      \since 4.5      This enum specifies various options that affect the look and feel     of a color dialog.      \value ShowAlphaChannel Allow the user to select the alpha component of a color.     \value NoButtons Don't display \uicontrol{OK} and \uicontrol{Cancel} buttons. (Useful for "live dialogs".)     \value DontUseNativeDialog Use Qt's standard color dialog on the Mac instead of Apple's                                native color panel.      \sa options, setOption(), testOption(), windowModality() */
end_comment
begin_comment
comment|/*!     \fn void QColorDialog::currentColorChanged(const QColor&color)      This signal is emitted whenever the current color changes in the dialog.     The current color is specified by \a color.      \sa color, colorSelected() */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_comment
comment|// can only have one Cocoa color panel active
end_comment
begin_decl_stmt
DECL|member|sharedColorPanelAvailable
name|bool
name|QColorDialogPrivate
operator|::
name|sharedColorPanelAvailable
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \fn void QColorDialog::colorSelected(const QColor&color);      This signal is emitted just after the user has clicked \uicontrol{OK} to     select a color to use. The chosen color is specified by \a color.      \sa color, currentColorChanged() */
end_comment
begin_comment
comment|/*!     Changes the visibility of the dialog. If \a visible is true, the dialog     is shown; otherwise, it is hidden. */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QColorDialog
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
condition|)
block|{
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
operator|&&
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
condition|)
return|return;
block|}
elseif|else
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_Hidden
argument_list|)
condition|)
return|return;
if|if
condition|(
name|visible
condition|)
name|d
operator|->
name|selectedQColor
operator|=
name|QColor
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
if|if
condition|(
name|visible
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|delegate
operator|||
operator|(
name|QColorDialogPrivate
operator|::
name|sharedColorPanelAvailable
operator|&&
operator|!
operator|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
operator|||
operator|(
name|d
operator|->
name|opts
operator|&
name|DontUseNativeDialog
operator|)
operator|)
operator|)
condition|)
block|{
name|d
operator|->
name|openCocoaColorPanel
argument_list|(
name|currentColor
argument_list|()
argument_list|,
name|parentWidget
argument_list|()
argument_list|,
name|windowTitle
argument_list|()
argument_list|,
name|options
argument_list|()
argument_list|)
expr_stmt|;
name|QColorDialogPrivate
operator|::
name|sharedColorPanelAvailable
operator|=
literal|false
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
expr_stmt|;
block|}
name|setWindowFlags
argument_list|(
name|windowModality
argument_list|()
operator|==
name|Qt
operator|::
name|WindowModal
condition|?
name|Qt
operator|::
name|Sheet
else|:
name|DefaultWindowFlags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|->
name|delegate
condition|)
block|{
name|d
operator|->
name|closeCocoaColorPanel
argument_list|()
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
if|if
condition|(
operator|!
operator|(
name|options
argument_list|()
operator|&
name|DontUseNativeDialog
operator|)
condition|)
name|d
operator|->
name|setNativeDialogVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|nativeDialogInUse
condition|)
block|{
comment|// Set WA_DontShowOnScreen so that QDialog::setVisible(visible) below
comment|// updates the state correctly, but skips showing the non-native version:
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|nativeDialogInUse
operator|=
literal|false
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QDialog
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \overload     \since 4.5      Opens the dialog and connects its colorSelected() signal to the slot specified     by \a receiver and \a member.      The signal will be disconnected from the slot when the dialog is closed. */
end_comment
begin_function
DECL|function|open
name|void
name|QColorDialog
operator|::
name|open
parameter_list|(
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|colorSelected
argument_list|(
name|QColor
argument_list|)
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
name|d
operator|->
name|receiverToDisconnectOnClose
operator|=
name|receiver
expr_stmt|;
name|d
operator|->
name|memberToDisconnectOnClose
operator|=
name|member
expr_stmt|;
name|QDialog
operator|::
name|open
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QColorDialog::open()      \since 4.5     Shows the dialog as a \l{QDialog#Modal Dialogs}{window modal dialog},     returning immediately.      \sa QDialog::open() */
end_comment
begin_comment
comment|/*!     \since 4.5      Pops up a modal color dialog with the given window \a title (or "Select Color" if none is     specified), lets the user choose a color, and returns that color. The color is initially set     to \a initial. The dialog is a child of \a parent. It returns an invalid (see     QColor::isValid()) color if the user cancels the dialog.      The \a options argument allows you to customize the dialog. */
end_comment
begin_function
DECL|function|getColor
name|QColor
name|QColorDialog
operator|::
name|getColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|initial
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|ColorDialogOptions
name|options
parameter_list|)
block|{
name|QColorDialog
name|dlg
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
name|dlg
operator|.
name|setWindowTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setCurrentColor
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|exec
argument_list|()
expr_stmt|;
return|return
name|dlg
operator|.
name|selectedColor
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Pops up a modal color dialog to allow the user to choose a color     and an alpha channel (transparency) value. The color+alpha is     initially set to \a initial. The dialog is a child of \a parent.      If \a ok is non-null, \e *\a ok is set to true if the user clicked     \uicontrol{OK}, and to false if the user clicked Cancel.      If the user clicks Cancel, the \a initial value is returned.      Use QColorDialog::getColor() instead, passing the     QColorDialog::ShowAlphaChannel option. */
end_comment
begin_function
DECL|function|getRgba
name|QRgb
name|QColorDialog
operator|::
name|getRgba
parameter_list|(
name|QRgb
name|initial
parameter_list|,
name|bool
modifier|*
name|ok
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
block|{
name|QColor
name|color
argument_list|(
name|getColor
argument_list|(
name|QColor
argument_list|(
name|initial
argument_list|)
argument_list|,
name|parent
argument_list|,
name|QString
argument_list|()
argument_list|,
name|ShowAlphaChannel
argument_list|)
argument_list|)
decl_stmt|;
name|QRgb
name|result
init|=
name|color
operator|.
name|isValid
argument_list|()
condition|?
name|color
operator|.
name|rgba
argument_list|()
else|:
name|initial
decl_stmt|;
if|if
condition|(
name|ok
condition|)
operator|*
name|ok
operator|=
name|color
operator|.
name|isValid
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|/*!     Destroys the color dialog. */
end_comment
begin_destructor
DECL|function|~QColorDialog
name|QColorDialog
operator|::
name|~
name|QColorDialog
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
name|Q_D
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|delegate
condition|)
block|{
name|d
operator|->
name|releaseCocoaColorPanelDelegate
argument_list|()
expr_stmt|;
name|QColorDialogPrivate
operator|::
name|sharedColorPanelAvailable
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_destructor
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QColorDialog
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LanguageChange
condition|)
name|d
operator|->
name|retranslateStrings
argument_list|()
expr_stmt|;
name|QDialog
operator|::
name|changeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Closes the dialog and sets its result code to \a result. If this dialog   is shown with exec(), done() causes the local event loop to finish,   and exec() to return \a result.    \sa QDialog::done() */
end_comment
begin_function
DECL|function|done
name|void
name|QColorDialog
operator|::
name|done
parameter_list|(
name|int
name|result
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QColorDialog
argument_list|)
expr_stmt|;
name|QDialog
operator|::
name|done
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|Accepted
condition|)
block|{
name|d
operator|->
name|selectedQColor
operator|=
name|d
operator|->
name|currentQColor
argument_list|()
expr_stmt|;
emit|emit
name|colorSelected
argument_list|(
name|d
operator|->
name|selectedQColor
argument_list|)
emit|;
block|}
else|else
block|{
name|d
operator|->
name|selectedQColor
operator|=
name|QColor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|receiverToDisconnectOnClose
condition|)
block|{
name|disconnect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|colorSelected
argument_list|(
name|QColor
argument_list|)
argument_list|)
argument_list|,
name|d
operator|->
name|receiverToDisconnectOnClose
argument_list|,
name|d
operator|->
name|memberToDisconnectOnClose
argument_list|)
expr_stmt|;
name|d
operator|->
name|receiverToDisconnectOnClose
operator|=
literal|0
expr_stmt|;
block|}
name|d
operator|->
name|memberToDisconnectOnClose
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qcolordialog.moc"
end_include
begin_include
include|#
directive|include
file|"moc_qcolordialog.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_COLORDIALOG
end_comment
end_unit
